###############################################################################
#
# IAR ANSI C/C++ Compiler V7.60.2.11341/W32 for ARM       08/Sep/2017  08:29:57
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\Temperature.c
#    Command line =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\Temperature.c
#        -D USE_HAL_DRIVER -D STM32L152xE -D USE_STM32L1XX_NUCLEO -D ASCII -D
#        REV_L -D LONG_DELAY -lCN
#        "D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\Road
#        Brd MSTR Rev L Long Always\List" -o
#        "D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\Road
#        Brd MSTR Rev L Long Always\Obj" --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_clustering --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.4\arm\INC\c\DLib_Config_Full.h" -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/STM32L1xx_HAL_Driver/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/STM32L1xx_HAL_Driver/Inc/Legacy\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/BSP/STM32L1xx_Nucleo\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/portable/IAR/ARM_CM3\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Core/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/CMSIS/Include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/CMSIS/Device/ST/STM32L1xx/Include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\..\Middlewares\Third_Party\BgLib\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.4\arm\CMSIS\Include\"
#    Locale       =  English_United States.1252
#    List file    =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\Road
#        Brd MSTR Rev L Long Always\List\Temperature.lst
#    Object file  =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\Road
#        Brd MSTR Rev L Long Always\Obj\Temperature.o
#
###############################################################################

D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\Temperature.c
      1          /**
      2            ******************************************************************************
      3            * File Name          : Temperature.c
      4            * Description        : This file provides code for the control of the Temperature
      5            *                      sense hardware based on the PCT2075 chip.
      6            ******************************************************************************
      7            *
      8            * COPYRIGHT(c) 2016 WeatherCloud
      9            *
     10            * Redistribution and use in source and binary forms, with or without modification,
     11            * are permitted provided that the following conditions are met:
     12            *   1. Redistributions of source code must retain the above copyright notice,
     13            *      this list of conditions and the following disclaimer.
     14            *   2. Redistributions in binary form must reproduce the above copyright notice,
     15            *      this list of conditions and the following disclaimer in the documentation
     16            *      and/or other materials provided with the distribution.
     17            *   3. Neither the name of WeatherCloud nor the names of its contributors
     18            *      may be used to endorse or promote products derived from this software
     19            *      without specific prior written permission.
     20            *
     21            * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     22            * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     23            * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     24            * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
     25            * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     26            * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     27            * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
     28            * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
     29            * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
     30            * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     31            *
     32            ******************************************************************************
     33            */
     34          
     35          /* Includes ------------------------------------------------------------------*/
     36          #include "Temperature.h"
     37          #include "Calibration.h"
     38          
     39            /**
     40            * @brief  This function reads the Shunt Voltage to the passed Voltage Structure.
     41            * @param  VoltagePtr VPtr: Ptr to structure to receive the final values of the SHunt Voltage.
     42            * @retval HAL_StatusTypeDef:     HAL_OK:       Tasking of block of data to UART success.
     43            *                                HAL_ERROR:    Error found in Tasking or data passed.
     44            *                                HAL_BUSY:     UART is busy.
     45            *                                HAL_TIMEOUT:  UART timed out.
     46            */

   \                                 In section .text, align 2, keep-with-next
     47          HAL_StatusTypeDef RoadBrd_ReadTemp_Scaled( TempPtr TPtr )
     48          {
   \                     RoadBrd_ReadTemp_Scaled: (+1)
   \   00000000   0xE92D 0x4FFE      PUSH     {R1-R11,LR}
   \   00000004   0x0004             MOVS     R4,R0
     49            HAL_StatusTypeDef Status;
     50            int num_bytes;
     51            uint8_t i2cData[4];  
     52            char tempBffr2[5];
     53            float Temp_C, Temp_F;
     54            uint16_t tempC;
     55            int nativeInt;
     56            uint16_t smallInt;
     57          
     58          
     59            num_bytes = 0;    // No Data to Pass.
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x4683             MOV      R11,R0
     60            i2cData[0] = 0x00;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0xF88D 0x0000      STRB     R0,[SP, #+0]
     61          #ifdef REV_L
     62            Status = RoadBrd_I2C_Master_Transmit_CMDData_IT((uint16_t)TEMP_SNSR, (uint8_t)TEMP_SNSR_READ, i2cData, (uint16_t)num_bytes);
   \   00000010   0x4658             MOV      R0,R11
   \   00000012   0x0003             MOVS     R3,R0
   \   00000014   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000016   0x466A             MOV      R2,SP
   \   00000018   0x2100             MOVS     R1,#+0
   \   0000001A   0x2094             MOVS     R0,#+148
   \   0000001C   0x.... 0x....      BL       RoadBrd_I2C_Master_Transmit_CMDData_IT
   \   00000020   0x0007             MOVS     R7,R0
     63            // 2. If Status was good, Time to get response.
     64            if (Status == HAL_OK)
   \   00000022   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000024   0x2F00             CMP      R7,#+0
   \   00000026   0xD123             BNE.N    ??RoadBrd_ReadTemp_Scaled_0
     65            {
     66              // Now wait for completion of XMIT.
     67              Status = RoadBrd_WaitForState( (uint16_t)( I2C_TIMEOUT/5 ));
   \   00000028   0x2064             MOVS     R0,#+100
   \   0000002A   0x.... 0x....      BL       RoadBrd_WaitForState
   \   0000002E   0x0007             MOVS     R7,R0
     68              if (Status != HAL_OK)
   \   00000030   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000032   0x2F00             CMP      R7,#+0
   \   00000034   0xD002             BEQ.N    ??RoadBrd_ReadTemp_Scaled_1
     69                return Status;
   \   00000036   0x0038             MOVS     R0,R7
   \   00000038   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003A   0xE08B             B.N      ??RoadBrd_ReadTemp_Scaled_2
     70              else
     71              {
     72                Status =  RoadBrd_I2C_Master_Receive_IT((uint16_t)TEMP_SNSR, i2cData, (uint16_t)2);
   \                     ??RoadBrd_ReadTemp_Scaled_1: (+1)
   \   0000003C   0x2202             MOVS     R2,#+2
   \   0000003E   0x4669             MOV      R1,SP
   \   00000040   0x2094             MOVS     R0,#+148
   \   00000042   0x.... 0x....      BL       RoadBrd_I2C_Master_Receive_IT
   \   00000046   0x0007             MOVS     R7,R0
     73                if (Status == HAL_OK)
   \   00000048   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000004A   0x2F00             CMP      R7,#+0
   \   0000004C   0xD10D             BNE.N    ??RoadBrd_ReadTemp_Scaled_3
     74                {
     75                  // Now wait for completion of Receive.
     76                  Status = RoadBrd_WaitForState( (uint16_t)( I2C_TIMEOUT/5 ));
   \   0000004E   0x2064             MOVS     R0,#+100
   \   00000050   0x.... 0x....      BL       RoadBrd_WaitForState
   \   00000054   0x0007             MOVS     R7,R0
     77                  if (Status != HAL_OK)
   \   00000056   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000058   0x2F00             CMP      R7,#+0
   \   0000005A   0xD002             BEQ.N    ??RoadBrd_ReadTemp_Scaled_4
     78                    return Status;
   \   0000005C   0x0038             MOVS     R0,R7
   \   0000005E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000060   0xE078             B.N      ??RoadBrd_ReadTemp_Scaled_2
     79                } // EndIf (Status == HAL_OK) RoadBrd_I2C_Master_Receive_IT
     80                else
     81                  return Status;
     82                            
     83              } // EndElse (Status != HAL_OK) RoadBrd_WaitForState
     84            }// EndIf (Status == HAL_OK) RoadBrd_I2C_Master_Transmit_CMDData_IT
     85            else
     86              return Status;
     87          #else
     88            Status = RoadBrd_I2C_Master_Transmit_CMDData((uint16_t)TEMP_SNSR, (uint8_t)TEMP_SNSR_READ, i2cData, (uint16_t)num_bytes, I2C_TIMEOUT);
     89            // 2. If Status was good, Time to get response.
     90            if (Status == HAL_OK)
     91            {
     92              Status =  RoadBrd_I2C_Master_Receive((uint16_t)TEMP_SNSR, i2cData, (uint16_t)2, I2C_TIMEOUT);
     93            }
     94            else
     95              return Status;
     96          #endif
     97            if (Status == HAL_OK)
   \                     ??RoadBrd_ReadTemp_Scaled_4: (+1)
   \   00000062   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000064   0x2F00             CMP      R7,#+0
   \   00000066   0xD173             BNE.N    ??RoadBrd_ReadTemp_Scaled_5
   \   00000068   0xE005             B.N      ??RoadBrd_ReadTemp_Scaled_6
   \                     ??RoadBrd_ReadTemp_Scaled_3: (+1)
   \   0000006A   0x0038             MOVS     R0,R7
   \   0000006C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000006E   0xE071             B.N      ??RoadBrd_ReadTemp_Scaled_2
   \                     ??RoadBrd_ReadTemp_Scaled_0: (+1)
   \   00000070   0x0038             MOVS     R0,R7
   \   00000072   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000074   0xE06E             B.N      ??RoadBrd_ReadTemp_Scaled_2
     98            {
     99              // Now calculate Celcius and Farenheit Temp.
    100          #ifdef TESTTEMP
    101              i2cData[0] = 0xff;
    102              i2cData[1] = 0x00;
    103          #endif
    104              smallInt = ((i2cData[0]*256) + i2cData[1]) >> 5;
   \                     ??RoadBrd_ReadTemp_Scaled_6: (+1)
   \   00000076   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000007A   0xF44F 0x7180      MOV      R1,#+256
   \   0000007E   0xF89D 0x2001      LDRB     R2,[SP, #+1]
   \   00000082   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \   00000086   0x1140             ASRS     R0,R0,#+5
   \   00000088   0x4680             MOV      R8,R0
    105              //**Need to first Convert 2s Compliment 11 bit to int.
    106              // Is this negative?
    107              if (smallInt & (1 << 10))
   \   0000008A   0xEA5F 0x5048      LSLS     R0,R8,#+21
   \   0000008E   0xD506             BPL.N    ??RoadBrd_ReadTemp_Scaled_7
    108                // Yes...Extend Sign Bit
    109                nativeInt = (int)(smallInt | ~((1 << 10) - 1));
   \   00000090   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000094   0x....             LDR.N    R0,??DataTable1  ;; 0xfffffc00
   \   00000096   0xEA50 0x0008      ORRS     R0,R0,R8
   \   0000009A   0x4682             MOV      R10,R0
   \   0000009C   0xE002             B.N      ??RoadBrd_ReadTemp_Scaled_8
    110              else
    111                // No...Nothing to Do.
    112                nativeInt = smallInt;
   \                     ??RoadBrd_ReadTemp_Scaled_7: (+1)
   \   0000009E   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   000000A2   0x46C2             MOV      R10,R8
    113              
    114              Temp_C = nativeInt * 0.125;
   \                     ??RoadBrd_ReadTemp_Scaled_8: (+1)
   \   000000A4   0x4650             MOV      R0,R10
   \   000000A6   0x.... 0x....      BL       __aeabi_i2d
   \   000000AA   0x2200             MOVS     R2,#+0
   \   000000AC   0xF05F 0x537F      MOVS     R3,#+1069547520
   \   000000B0   0x.... 0x....      BL       __aeabi_dmul
   \   000000B4   0x.... 0x....      BL       __aeabi_d2f
   \   000000B8   0x0005             MOVS     R5,R0
    115          
    116              tempC = (uint16_t)(round(Temp_C * 10));
   \   000000BA   0x....             LDR.N    R0,??DataTable1_1  ;; 0x41200000
   \   000000BC   0x0029             MOVS     R1,R5
   \   000000BE   0x.... 0x....      BL       __aeabi_fmul
   \   000000C2   0x.... 0x....      BL       __aeabi_f2d
   \   000000C6   0x.... 0x....      BL       round
   \   000000CA   0x.... 0x....      BL       __aeabi_d2iz
   \   000000CE   0x0006             MOVS     R6,R0
    117              Temp_F = (Temp_C * 1.8) + 32;
   \   000000D0   0x0028             MOVS     R0,R5
   \   000000D2   0x.... 0x....      BL       __aeabi_f2d
   \   000000D6   0x....             LDR.N    R2,??DataTable1_2  ;; 0xcccccccd
   \   000000D8   0x....             LDR.N    R3,??DataTable1_3  ;; 0x3ffccccc
   \   000000DA   0x.... 0x....      BL       __aeabi_dmul
   \   000000DE   0x2200             MOVS     R2,#+0
   \   000000E0   0x....             LDR.N    R3,??DataTable1_4  ;; 0x40400000
   \   000000E2   0x.... 0x....      BL       __aeabi_dadd
   \   000000E6   0x.... 0x....      BL       __aeabi_d2f
   \   000000EA   0x4681             MOV      R9,R0
    118              Temp_C = RoadBrd_CAL_ScaleValue( CAL_TEMPC, Temp_C);
   \   000000EC   0x0029             MOVS     R1,R5
   \   000000EE   0x2004             MOVS     R0,#+4
   \   000000F0   0x.... 0x....      BL       RoadBrd_CAL_ScaleValue
   \   000000F4   0x0005             MOVS     R5,R0
    119              Temp_F = RoadBrd_CAL_ScaleValue( CAL_TEMPF, Temp_F);
   \   000000F6   0x4649             MOV      R1,R9
   \   000000F8   0x2005             MOVS     R0,#+5
   \   000000FA   0x.... 0x....      BL       RoadBrd_CAL_ScaleValue
   \   000000FE   0x4681             MOV      R9,R0
    120          
    121              TPtr->RawC = tempC;
   \   00000100   0x82E6             STRH     R6,[R4, #+22]
    122              sprintf( (char *)TPtr->TempC, "%3.1f", Temp_C );
   \   00000102   0x0028             MOVS     R0,R5
   \   00000104   0x.... 0x....      BL       __aeabi_f2d
   \   00000108   0x0002             MOVS     R2,R0
   \   0000010A   0x000B             MOVS     R3,R1
   \   0000010C   0x....             LDR.N    R1,??DataTable1_5
   \   0000010E   0x0020             MOVS     R0,R4
   \   00000110   0x.... 0x....      BL       sprintf
    123              sprintf( (char *)TPtr->TempF, "%3.1f", Temp_F );
   \   00000114   0x4648             MOV      R0,R9
   \   00000116   0x.... 0x....      BL       __aeabi_f2d
   \   0000011A   0x0002             MOVS     R2,R0
   \   0000011C   0x000B             MOVS     R3,R1
   \   0000011E   0x....             LDR.N    R1,??DataTable1_5
   \   00000120   0x1DE0             ADDS     R0,R4,#+7
   \   00000122   0x.... 0x....      BL       sprintf
    124              // NOW, Build Raw Data String..
    125              sprintf( (char *)TPtr->Raw, "%02x", ((tempC & 0xff00)>>8));
   \   00000126   0x0030             MOVS     R0,R6
   \   00000128   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000012A   0x0A02             LSRS     R2,R0,#+8
   \   0000012C   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000012E   0x....             LDR.N    R1,??DataTable1_6
   \   00000130   0xF114 0x000E      ADDS     R0,R4,#+14
   \   00000134   0x.... 0x....      BL       sprintf
    126              sprintf( (char *)tempBffr2, "%02x", (tempC & 0x00ff));
   \   00000138   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000013A   0xF006 0x02FF      AND      R2,R6,#0xFF
   \   0000013E   0x....             LDR.N    R1,??DataTable1_6
   \   00000140   0xA801             ADD      R0,SP,#+4
   \   00000142   0x.... 0x....      BL       sprintf
    127              strcat( (char *)TPtr->Raw, (char *)tempBffr2 );
   \   00000146   0xA901             ADD      R1,SP,#+4
   \   00000148   0xF114 0x000E      ADDS     R0,R4,#+14
   \   0000014C   0x.... 0x....      BL       strcat
    128              //strcat( (char *)TPtr->Raw, "Rw" );
    129             }
    130            return Status;
   \                     ??RoadBrd_ReadTemp_Scaled_5: (+1)
   \   00000150   0x0038             MOVS     R0,R7
   \   00000152   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??RoadBrd_ReadTemp_Scaled_2: (+1)
   \   00000154   0xE8BD 0x8FFE      POP      {R1-R11,PC}      ;; return
    131          }
    132          
    133            /**
    134            * @brief  This function reads the Shunt Voltage to the passed Voltage Structure.
    135            * @param  VoltagePtr VPtr: Ptr to structure to receive the final values of the SHunt Voltage.
    136            * @retval HAL_StatusTypeDef:     HAL_OK:       Tasking of block of data to UART success.
    137            *                                HAL_ERROR:    Error found in Tasking or data passed.
    138            *                                HAL_BUSY:     UART is busy.
    139            *                                HAL_TIMEOUT:  UART timed out.
    140            */

   \                                 In section .text, align 2, keep-with-next
    141          HAL_StatusTypeDef RoadBrd_ReadTemp( TempPtr TPtr )
    142          {
   \                     RoadBrd_ReadTemp: (+1)
   \   00000000   0xE92D 0x4FFE      PUSH     {R1-R11,LR}
   \   00000004   0x0004             MOVS     R4,R0
    143            HAL_StatusTypeDef Status;
    144            int num_bytes;
    145            uint8_t i2cData[4];  
    146            char tempBffr2[5];
    147            float Temp_C, Temp_F;
    148            uint16_t tempC;
    149            int nativeInt;
    150            uint16_t smallInt;
    151          
    152          
    153            num_bytes = 0;    // No Data to Pass.
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x4683             MOV      R11,R0
    154            i2cData[0] = 0x00;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0xF88D 0x0000      STRB     R0,[SP, #+0]
    155          #ifdef REV_L
    156            Status = RoadBrd_I2C_Master_Transmit_CMDData_IT((uint16_t)TEMP_SNSR, (uint8_t)TEMP_SNSR_READ, i2cData, (uint16_t)num_bytes);
   \   00000010   0x4658             MOV      R0,R11
   \   00000012   0x0003             MOVS     R3,R0
   \   00000014   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000016   0x466A             MOV      R2,SP
   \   00000018   0x2100             MOVS     R1,#+0
   \   0000001A   0x2094             MOVS     R0,#+148
   \   0000001C   0x.... 0x....      BL       RoadBrd_I2C_Master_Transmit_CMDData_IT
   \   00000020   0x0007             MOVS     R7,R0
    157            // 2. If Status was good, Time to get response.
    158            if (Status == HAL_OK)
   \   00000022   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000024   0x2F00             CMP      R7,#+0
   \   00000026   0xD123             BNE.N    ??RoadBrd_ReadTemp_0
    159            {
    160              // Now wait for completion of XMIT.
    161              Status = RoadBrd_WaitForState( (uint16_t)( I2C_TIMEOUT/5 ));
   \   00000028   0x2064             MOVS     R0,#+100
   \   0000002A   0x.... 0x....      BL       RoadBrd_WaitForState
   \   0000002E   0x0007             MOVS     R7,R0
    162              if (Status != HAL_OK)
   \   00000030   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000032   0x2F00             CMP      R7,#+0
   \   00000034   0xD002             BEQ.N    ??RoadBrd_ReadTemp_1
    163                return Status;
   \   00000036   0x0038             MOVS     R0,R7
   \   00000038   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003A   0xE07F             B.N      ??RoadBrd_ReadTemp_2
    164              else
    165              {
    166                Status =  RoadBrd_I2C_Master_Receive_IT((uint16_t)TEMP_SNSR, i2cData, (uint16_t)2);
   \                     ??RoadBrd_ReadTemp_1: (+1)
   \   0000003C   0x2202             MOVS     R2,#+2
   \   0000003E   0x4669             MOV      R1,SP
   \   00000040   0x2094             MOVS     R0,#+148
   \   00000042   0x.... 0x....      BL       RoadBrd_I2C_Master_Receive_IT
   \   00000046   0x0007             MOVS     R7,R0
    167                if (Status == HAL_OK)
   \   00000048   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000004A   0x2F00             CMP      R7,#+0
   \   0000004C   0xD10D             BNE.N    ??RoadBrd_ReadTemp_3
    168                {
    169                  // Now wait for completion of Receive.
    170                  Status = RoadBrd_WaitForState( (uint16_t)( I2C_TIMEOUT/5 ));
   \   0000004E   0x2064             MOVS     R0,#+100
   \   00000050   0x.... 0x....      BL       RoadBrd_WaitForState
   \   00000054   0x0007             MOVS     R7,R0
    171                  if (Status != HAL_OK)
   \   00000056   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000058   0x2F00             CMP      R7,#+0
   \   0000005A   0xD002             BEQ.N    ??RoadBrd_ReadTemp_4
    172                    return Status;
   \   0000005C   0x0038             MOVS     R0,R7
   \   0000005E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000060   0xE06C             B.N      ??RoadBrd_ReadTemp_2
    173                } // EndIf (Status == HAL_OK) RoadBrd_I2C_Master_Receive_IT
    174                else
    175                  return Status;
    176                            
    177              } // EndElse (Status != HAL_OK) RoadBrd_WaitForState
    178            }// EndIf (Status == HAL_OK) RoadBrd_I2C_Master_Transmit_CMDData_IT
    179            else
    180              return Status;
    181          #else
    182            Status = RoadBrd_I2C_Master_Transmit_CMDData((uint16_t)TEMP_SNSR, (uint8_t)TEMP_SNSR_READ, i2cData, (uint16_t)num_bytes, I2C_TIMEOUT);
    183            // 2. If Status was good, Time to get response.
    184            if (Status == HAL_OK)
    185            {
    186              Status =  RoadBrd_I2C_Master_Receive((uint16_t)TEMP_SNSR, i2cData, (uint16_t)2, I2C_TIMEOUT);
    187            }
    188            else
    189              return Status;
    190          #endif
    191            if (Status == HAL_OK)
   \                     ??RoadBrd_ReadTemp_4: (+1)
   \   00000062   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000064   0x2F00             CMP      R7,#+0
   \   00000066   0xD167             BNE.N    ??RoadBrd_ReadTemp_5
   \   00000068   0xE005             B.N      ??RoadBrd_ReadTemp_6
   \                     ??RoadBrd_ReadTemp_3: (+1)
   \   0000006A   0x0038             MOVS     R0,R7
   \   0000006C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000006E   0xE065             B.N      ??RoadBrd_ReadTemp_2
   \                     ??RoadBrd_ReadTemp_0: (+1)
   \   00000070   0x0038             MOVS     R0,R7
   \   00000072   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000074   0xE062             B.N      ??RoadBrd_ReadTemp_2
    192            {
    193              // Now calculate Celcius and Farenheit Temp.
    194          #ifdef TESTTEMP
    195              i2cData[0] = 0xff;
    196              i2cData[1] = 0x00;
    197          #endif
    198              smallInt = ((i2cData[0]*256) + i2cData[1]) >> 5;
   \                     ??RoadBrd_ReadTemp_6: (+1)
   \   00000076   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000007A   0xF44F 0x7180      MOV      R1,#+256
   \   0000007E   0xF89D 0x2001      LDRB     R2,[SP, #+1]
   \   00000082   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \   00000086   0x1140             ASRS     R0,R0,#+5
   \   00000088   0x0006             MOVS     R6,R0
    199              //**Need to first Convert 2s Compliment 11 bit to int.
    200              // Is this negative?
    201              if (smallInt & (1 << 10))
   \   0000008A   0x0570             LSLS     R0,R6,#+21
   \   0000008C   0xD504             BPL.N    ??RoadBrd_ReadTemp_7
    202                // Yes...Extend Sign Bit
    203                nativeInt = (int)(smallInt | ~((1 << 10) - 1));
   \   0000008E   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000090   0x....             LDR.N    R0,??DataTable1  ;; 0xfffffc00
   \   00000092   0x4330             ORRS     R0,R0,R6
   \   00000094   0x4681             MOV      R9,R0
   \   00000096   0xE001             B.N      ??RoadBrd_ReadTemp_8
    204              else
    205                // No...Nothing to Do.
    206                nativeInt = smallInt;
   \                     ??RoadBrd_ReadTemp_7: (+1)
   \   00000098   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000009A   0x46B1             MOV      R9,R6
    207              
    208              Temp_C = (float)nativeInt * 0.125;
   \                     ??RoadBrd_ReadTemp_8: (+1)
   \   0000009C   0x4648             MOV      R0,R9
   \   0000009E   0x.... 0x....      BL       __aeabi_i2f
   \   000000A2   0x.... 0x....      BL       __aeabi_f2d
   \   000000A6   0x2200             MOVS     R2,#+0
   \   000000A8   0xF05F 0x537F      MOVS     R3,#+1069547520
   \   000000AC   0x.... 0x....      BL       __aeabi_dmul
   \   000000B0   0x.... 0x....      BL       __aeabi_d2f
   \   000000B4   0x4680             MOV      R8,R0
    209              tempC = (uint16_t)(round(Temp_C * 10));
   \   000000B6   0x....             LDR.N    R0,??DataTable1_1  ;; 0x41200000
   \   000000B8   0x4641             MOV      R1,R8
   \   000000BA   0x.... 0x....      BL       __aeabi_fmul
   \   000000BE   0x.... 0x....      BL       __aeabi_f2d
   \   000000C2   0x.... 0x....      BL       round
   \   000000C6   0x.... 0x....      BL       __aeabi_d2iz
   \   000000CA   0x0005             MOVS     R5,R0
    210              Temp_F = (Temp_C * 1.8) + 32;
   \   000000CC   0x4640             MOV      R0,R8
   \   000000CE   0x.... 0x....      BL       __aeabi_f2d
   \   000000D2   0x....             LDR.N    R2,??DataTable1_2  ;; 0xcccccccd
   \   000000D4   0x....             LDR.N    R3,??DataTable1_3  ;; 0x3ffccccc
   \   000000D6   0x.... 0x....      BL       __aeabi_dmul
   \   000000DA   0x2200             MOVS     R2,#+0
   \   000000DC   0x....             LDR.N    R3,??DataTable1_4  ;; 0x40400000
   \   000000DE   0x.... 0x....      BL       __aeabi_dadd
   \   000000E2   0x.... 0x....      BL       __aeabi_d2f
   \   000000E6   0x4682             MOV      R10,R0
    211              TPtr->RawC = tempC;
   \   000000E8   0x82E5             STRH     R5,[R4, #+22]
    212              sprintf( (char *)TPtr->TempC, "%3.1f", Temp_C );
   \   000000EA   0x4640             MOV      R0,R8
   \   000000EC   0x.... 0x....      BL       __aeabi_f2d
   \   000000F0   0x0002             MOVS     R2,R0
   \   000000F2   0x000B             MOVS     R3,R1
   \   000000F4   0x....             LDR.N    R1,??DataTable1_5
   \   000000F6   0x0020             MOVS     R0,R4
   \   000000F8   0x.... 0x....      BL       sprintf
    213              sprintf( (char *)TPtr->TempF, "%3.1f", Temp_F );
   \   000000FC   0x4650             MOV      R0,R10
   \   000000FE   0x.... 0x....      BL       __aeabi_f2d
   \   00000102   0x0002             MOVS     R2,R0
   \   00000104   0x000B             MOVS     R3,R1
   \   00000106   0x....             LDR.N    R1,??DataTable1_5
   \   00000108   0x1DE0             ADDS     R0,R4,#+7
   \   0000010A   0x.... 0x....      BL       sprintf
    214              // NOW, Build Raw Data String..
    215              sprintf( (char *)TPtr->Raw, "%02x", ((tempC & 0xff00)>>8));
   \   0000010E   0x0028             MOVS     R0,R5
   \   00000110   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000112   0x0A02             LSRS     R2,R0,#+8
   \   00000114   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000116   0x....             LDR.N    R1,??DataTable1_6
   \   00000118   0xF114 0x000E      ADDS     R0,R4,#+14
   \   0000011C   0x.... 0x....      BL       sprintf
    216              sprintf( (char *)tempBffr2, "%02x", (tempC & 0x00ff));
   \   00000120   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000122   0xF005 0x02FF      AND      R2,R5,#0xFF
   \   00000126   0x....             LDR.N    R1,??DataTable1_6
   \   00000128   0xA801             ADD      R0,SP,#+4
   \   0000012A   0x.... 0x....      BL       sprintf
    217              strcat( (char *)TPtr->Raw, (char *)tempBffr2 );
   \   0000012E   0xA901             ADD      R1,SP,#+4
   \   00000130   0xF114 0x000E      ADDS     R0,R4,#+14
   \   00000134   0x.... 0x....      BL       strcat
    218              //strcat( (char *)TPtr->Raw, "Rw" );
    219             }
    220            return Status;
   \                     ??RoadBrd_ReadTemp_5: (+1)
   \   00000138   0x0038             MOVS     R0,R7
   \   0000013A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??RoadBrd_ReadTemp_2: (+1)
   \   0000013C   0xE8BD 0x8FFE      POP      {R1-R11,PC}      ;; return
    221          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0xFFFFFC00         DC32     0xfffffc00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x41200000         DC32     0x41200000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0xCCCCCCCD         DC32     0xcccccccd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x3FFCCCCC         DC32     0x3ffccccc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0x40400000         DC32     0x40400000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x25 0x33          DC8 "%3.1f"
   \              0x2E 0x31    
   \              0x66 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x25 0x30          DC8 "%02x"
   \              0x32 0x78    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    222          
    223          /************************ (C) COPYRIGHT WeatherCloud *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      48   RoadBrd_ReadTemp
        48   -> RoadBrd_I2C_Master_Receive_IT
        48   -> RoadBrd_I2C_Master_Transmit_CMDData_IT
        48   -> RoadBrd_WaitForState
        48   -> __aeabi_d2f
        48   -> __aeabi_d2iz
        48   -> __aeabi_dadd
        48   -> __aeabi_dmul
        48   -> __aeabi_f2d
        48   -> __aeabi_fmul
        48   -> __aeabi_i2f
        48   -> round
        48   -> sprintf
        48   -> strcat
      48   RoadBrd_ReadTemp_Scaled
        48   -> RoadBrd_CAL_ScaleValue
        48   -> RoadBrd_I2C_Master_Receive_IT
        48   -> RoadBrd_I2C_Master_Transmit_CMDData_IT
        48   -> RoadBrd_WaitForState
        48   -> __aeabi_d2f
        48   -> __aeabi_d2iz
        48   -> __aeabi_dadd
        48   -> __aeabi_dmul
        48   -> __aeabi_f2d
        48   -> __aeabi_fmul
        48   -> __aeabi_i2d
        48   -> round
        48   -> sprintf
        48   -> strcat


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
       8  ?_0
       8  ?_1
     320  RoadBrd_ReadTemp
     344  RoadBrd_ReadTemp_Scaled

 
  16 bytes in section .rodata
 692 bytes in section .text
 
 692 bytes of CODE  memory
  16 bytes of CONST memory

Errors: none
Warnings: none
