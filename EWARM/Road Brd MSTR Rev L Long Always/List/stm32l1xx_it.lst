###############################################################################
#
# IAR ANSI C/C++ Compiler V7.60.2.11341/W32 for ARM       09/Sep/2017  15:28:10
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\stm32l1xx_it.c
#    Command line =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\stm32l1xx_it.c
#        -D USE_HAL_DRIVER -D STM32L152xE -D USE_STM32L1XX_NUCLEO -D ASCII -D
#        REV_L -D LONG_DELAY -lCN
#        "D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\Road
#        Brd MSTR Rev L Long Always\List" -o
#        "D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\Road
#        Brd MSTR Rev L Long Always\Obj" --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_clustering --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.4\arm\INC\c\DLib_Config_Full.h" -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/STM32L1xx_HAL_Driver/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/STM32L1xx_HAL_Driver/Inc/Legacy\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/BSP/STM32L1xx_Nucleo\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/portable/IAR/ARM_CM3\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Core/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/CMSIS/Include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/CMSIS/Device/ST/STM32L1xx/Include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\..\Middlewares\Third_Party\BgLib\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.4\arm\CMSIS\Include\"
#    Locale       =  English_United States.1252
#    List file    =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\Road
#        Brd MSTR Rev L Long Always\List\stm32l1xx_it.lst
#    Object file  =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\Road
#        Brd MSTR Rev L Long Always\Obj\stm32l1xx_it.o
#
###############################################################################

D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\stm32l1xx_it.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32l1xx_it.c
      4            * @brief   Interrupt Service Routines.
      5            ******************************************************************************
      6            *
      7            * COPYRIGHT(c) 2016 STMicroelectronics
      8            *
      9            * Redistribution and use in source and binary forms, with or without modification,
     10            * are permitted provided that the following conditions are met:
     11            *   1. Redistributions of source code must retain the above copyright notice,
     12            *      this list of conditions and the following disclaimer.
     13            *   2. Redistributions in binary form must reproduce the above copyright notice,
     14            *      this list of conditions and the following disclaimer in the documentation
     15            *      and/or other materials provided with the distribution.
     16            *   3. Neither the name of STMicroelectronics nor the names of its contributors
     17            *      may be used to endorse or promote products derived from this software
     18            *      without specific prior written permission.
     19            *
     20            * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     21            * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     22            * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     23            * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
     24            * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     25            * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     26            * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
     27            * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
     28            * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
     29            * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     30            *
     31            ******************************************************************************
     32            */
     33          /* Includes ------------------------------------------------------------------*/
     34          #include "stm32l1xx_hal.h"
     35          #include "stm32l1xx.h"
     36          #include "stm32l1xx_it.h"
     37          #include "cmsis_os.h"
     38          
     39          /* USER CODE BEGIN 0 */
     40          #include "usart.h"
     41          #include "i2c.h"
     42          #include "tim.h"
     43          
     44              /* USER CODE END 0 */
     45          
     46          /* External variables --------------------------------------------------------*/
     47          extern PCD_HandleTypeDef hpcd_USB_FS;
     48          extern DMA_HandleTypeDef hdma_adc;
     49          
     50          extern TIM_HandleTypeDef htim4;
     51          
     52          /******************************************************************************/
     53          /*            Cortex-M3 Processor Interruption and Exception Handlers         */ 
     54          /******************************************************************************/
     55          
     56          /**
     57          * @brief This function handles System tick timer.
     58          */

   \                                 In section .text, align 2, keep-with-next
     59          void SysTick_Handler(void)
     60          {
   \                     SysTick_Handler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     61            /* USER CODE BEGIN SysTick_IRQn 0 */
     62          
     63            /* USER CODE END SysTick_IRQn 0 */
     64            osSystickHandler();
   \   00000002   0x.... 0x....      BL       osSystickHandler
     65            /* USER CODE BEGIN SysTick_IRQn 1 */
     66          
     67            /* USER CODE END SysTick_IRQn 1 */
     68          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
     69          
     70          /******************************************************************************/
     71          /* STM32L1xx Peripheral Interrupt Handlers                                    */
     72          /* Add here the Interrupt Handlers for the used peripherals.                  */
     73          /* For the available peripheral interrupt handler names,                      */
     74          /* please refer to the startup file (startup_stm32l1xx.s).                    */
     75          /******************************************************************************/
     76          
     77          /**
     78          * @brief This function handles DMA1 channel1 global interrupt.
     79          */

   \                                 In section .text, align 2, keep-with-next
     80          void DMA1_Channel1_IRQHandler(void)
     81          {
   \                     DMA1_Channel1_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     82            /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
     83          
     84            /* USER CODE END DMA1_Channel1_IRQn 0 */
     85            HAL_DMA_IRQHandler(&hdma_adc);
   \   00000002   0x....             LDR.N    R0,??DataTable8
   \   00000004   0x.... 0x....      BL       HAL_DMA_IRQHandler
     86            /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
     87          
     88            /* USER CODE END DMA1_Channel1_IRQn 1 */
     89          }
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
     90          
     91          /**
     92          * @brief This function handles USB low priority interrupt.
     93          */

   \                                 In section .text, align 2, keep-with-next
     94          void USB_LP_IRQHandler(void)
     95          {
   \                     USB_LP_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     96            /* USER CODE BEGIN USB_LP_IRQn 0 */
     97          
     98            /* USER CODE END USB_LP_IRQn 0 */
     99            HAL_PCD_IRQHandler(&hpcd_USB_FS);
   \   00000002   0x....             LDR.N    R0,??DataTable8_1
   \   00000004   0x.... 0x....      BL       HAL_PCD_IRQHandler
    100            /* USER CODE BEGIN USB_LP_IRQn 1 */
    101          
    102            /* USER CODE END USB_LP_IRQn 1 */
    103          }
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
    104          
    105          /**
    106          * @brief This function handles TIM4 global interrupt.
    107          */

   \                                 In section .text, align 2, keep-with-next
    108          void TIM4_IRQHandler(void)
    109          {
   \                     TIM4_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    110            /* USER CODE BEGIN TIM4_IRQn 0 */
    111          
    112            /* USER CODE END TIM4_IRQn 0 */
    113            HAL_TIM_IRQHandler(&htim4);
   \   00000002   0x....             LDR.N    R0,??DataTable8_2
   \   00000004   0x.... 0x....      BL       HAL_TIM_IRQHandler
    114            /* USER CODE BEGIN TIM4_IRQn 1 */
    115          
    116            /* USER CODE END TIM4_IRQn 1 */
    117          }
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
    118          
    119          /* USER CODE BEGIN 1 */
    120          /**
    121            * @brief  This function handles UART3 interrupt request.  
    122            * @param  None
    123            * @retval None
    124            * @Note   This function is redefined in "main.h" and related to DMA  
    125            *         used for USART data transmission     
    126            */

   \                                 In section .text, align 2, keep-with-next
    127          void USART3_IRQHandler(void)
    128          {
   \                     USART3_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    129          #ifdef REV_L
    130          #ifdef TEST2
    131            HAL_UART_IRQHandler(&huart3);
    132          #else
    133            #ifdef PATCH_UART
    134              HAL_UART_IRQHandler(&huart3);
    135            #else
    136              BGM111_UART_IRQHandler(&huart3);
   \   00000002   0x....             LDR.N    R0,??DataTable8_3
   \   00000004   0x.... 0x....      BL       BGM111_UART_IRQHandler
    137            #endif
    138          #endif
    139          #else
    140            HAL_UART_IRQHandler(&huart3);
    141          #endif
    142          }
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
    143          
    144          /**
    145            * @brief  This function handles UART2 interrupt request.  
    146            * @param  None
    147            * @retval None
    148            * @Note   This function is redefined in "main.h" and related to DMA  
    149            *         used for USART data transmission     
    150            */

   \                                 In section .text, align 2, keep-with-next
    151          void USART2_IRQHandler(void)
    152          {
   \                     USART2_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    153            HAL_UART_IRQHandler(&huart2);
   \   00000002   0x....             LDR.N    R0,??DataTable8_4
   \   00000004   0x.... 0x....      BL       HAL_UART_IRQHandler
    154          }
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
    155          
    156          /**
    157            * @brief  This function handles I2C event interrupt request.  
    158            * @param  None
    159            * @retval None
    160            * @Note   This function is redefined in "main.h" and related to I2C data transmission     
    161            */

   \                                 In section .text, align 2, keep-with-next
    162          void I2C1_EV_IRQHandler(void)
    163          {
   \                     I2C1_EV_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    164            HAL_I2C_EV_IRQHandler(& hi2c1);
   \   00000002   0x....             LDR.N    R0,??DataTable8_5
   \   00000004   0x.... 0x....      BL       HAL_I2C_EV_IRQHandler
    165          }
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
    166          
    167          /**
    168            * @brief  This function handles I2C error interrupt request.
    169            * @param  None
    170            * @retval None
    171            * @Note   This function is redefined in "main.h" and related to I2C error
    172            */

   \                                 In section .text, align 2, keep-with-next
    173          void I2C1_ER_IRQHandler(void)
    174          {
   \                     I2C1_ER_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    175            HAL_I2C_ER_IRQHandler(& hi2c1);
   \   00000002   0x....             LDR.N    R0,??DataTable8_5
   \   00000004   0x.... 0x....      BL       HAL_I2C_ER_IRQHandler
    176          }
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
    177          
    178          /**
    179             * @brief  This function handles TIM2 interrupt request.  
    180             * @param  None
    181             * @retval None
    182             * @Note   This function is redefined in "main.h".    
    183             */

   \                                 In section .text, align 2, keep-with-next
    184          void TIM2_IRQHandler (void)
    185          {
   \                     TIM2_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    186            HAL_TIM_IRQHandler(&htim2);
   \   00000002   0x....             LDR.N    R0,??DataTable8_6
   \   00000004   0x.... 0x....      BL       HAL_TIM_IRQHandler
    187          }
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
    188          
    189          /**
    190            * @brief  This function handles TIM3 interrupt request.  
    191            * @param  None
    192            * @retval None
    193            * @Note   This function is redefined in "main.h".
    194            */

   \                                 In section .text, align 2, keep-with-next
    195          void TIM3_IRQHandler (void)
    196          {
   \                     TIM3_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    197            HAL_TIM_IRQHandler(&htim3);
   \   00000002   0x....             LDR.N    R0,??DataTable8_7
   \   00000004   0x.... 0x....      BL       HAL_TIM_IRQHandler
    198          }
   \   00000008   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0x........         DC32     hdma_adc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   0x........         DC32     hpcd_USB_FS

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \   00000000   0x........         DC32     htim4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_3:
   \   00000000   0x........         DC32     huart3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_4:
   \   00000000   0x........         DC32     huart2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_5:
   \   00000000   0x........         DC32     hi2c1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_6:
   \   00000000   0x........         DC32     htim2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_7:
   \   00000000   0x........         DC32     htim3
    199          
    200          /* USER CODE END 1 */
    201          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   DMA1_Channel1_IRQHandler
         8   -> HAL_DMA_IRQHandler
       8   I2C1_ER_IRQHandler
         8   -> HAL_I2C_ER_IRQHandler
       8   I2C1_EV_IRQHandler
         8   -> HAL_I2C_EV_IRQHandler
       8   SysTick_Handler
         8   -> osSystickHandler
       8   TIM2_IRQHandler
         8   -> HAL_TIM_IRQHandler
       8   TIM3_IRQHandler
         8   -> HAL_TIM_IRQHandler
       8   TIM4_IRQHandler
         8   -> HAL_TIM_IRQHandler
       8   USART2_IRQHandler
         8   -> HAL_UART_IRQHandler
       8   USART3_IRQHandler
         8   -> BGM111_UART_IRQHandler
       8   USB_LP_IRQHandler
         8   -> HAL_PCD_IRQHandler


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_2
       4  ??DataTable8_3
       4  ??DataTable8_4
       4  ??DataTable8_5
       4  ??DataTable8_6
       4  ??DataTable8_7
      10  DMA1_Channel1_IRQHandler
      10  I2C1_ER_IRQHandler
      10  I2C1_EV_IRQHandler
       8  SysTick_Handler
      10  TIM2_IRQHandler
      10  TIM3_IRQHandler
      10  TIM4_IRQHandler
      10  USART2_IRQHandler
      10  USART3_IRQHandler
      10  USB_LP_IRQHandler

 
 130 bytes in section .text
 
 130 bytes of CODE memory

Errors: none
Warnings: none
