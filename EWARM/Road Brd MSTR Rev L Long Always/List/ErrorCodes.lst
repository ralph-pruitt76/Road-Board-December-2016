###############################################################################
#
# IAR ANSI C/C++ Compiler V7.60.2.11341/W32 for ARM       19/Jul/2017  08:08:55
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\ErrorCodes.c
#    Command line =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\ErrorCodes.c
#        -D USE_HAL_DRIVER -D STM32L152xE -D USE_STM32L1XX_NUCLEO -D ASCII -D
#        REV_L -D LONG_DELAY -lCN
#        "D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\Road
#        Brd MSTR Rev L Long Always\List" -o
#        "D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\Road
#        Brd MSTR Rev L Long Always\Obj" --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_clustering --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.4\arm\INC\c\DLib_Config_Full.h" -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/STM32L1xx_HAL_Driver/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/STM32L1xx_HAL_Driver/Inc/Legacy\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/BSP/STM32L1xx_Nucleo\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/portable/IAR/ARM_CM3\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Core/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/CMSIS/Include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/CMSIS/Device/ST/STM32L1xx/Include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\..\Middlewares\Third_Party\BgLib\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.4\arm\CMSIS\Include\"
#    Locale       =  English_United States.1252
#    List file    =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\Road
#        Brd MSTR Rev L Long Always\List\ErrorCodes.lst
#    Object file  =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\Road
#        Brd MSTR Rev L Long Always\Obj\ErrorCodes.o
#
###############################################################################

D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\ErrorCodes.c
      1          /**
      2            ******************************************************************************
      3            * File Name          : ErrorCodes.c
      4            * Description        : This file provides code for the processing and control
      5            * error buffer.
      6            ******************************************************************************
      7            *
      8            * COPYRIGHT(c) 2016 WeatherCloud
      9            *
     10            * Redistribution and use in source and binary forms, with or without modification,
     11            * are permitted provided that the following conditions are met:
     12            *   1. Redistributions of source code must retain the above copyright notice,
     13            *      this list of conditions and the following disclaimer.
     14            *   2. Redistributions in binary form must reproduce the above copyright notice,
     15            *      this list of conditions and the following disclaimer in the documentation
     16            *      and/or other materials provided with the distribution.
     17            *   3. Neither the name of WeatherCloud nor the names of its contributors
     18            *      may be used to endorse or promote products derived from this software
     19            *      without specific prior written permission.
     20            *
     21            * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     22            * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     23            * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     24            * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
     25            * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     26            * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     27            * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
     28            * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
     29            * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
     30            * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     31            *
     32            ******************************************************************************
     33            */
     34          
     35          /* Includes ------------------------------------------------------------------*/
     36          #include "ErrorCodes.h"
     37          #include "usart.h"
     38          #include "gpio.h"
     39          #include "i2c.h"
     40          #include <stdio.h>
     41          #include <string.h>
     42          
     43          
     44          // Constant Strings Definition

   \                                 In section .rodata, align 4
     45          const char * const CodesArray[] = { "       ",                      // CODE 000: NULL...NO Error Code
   \                     CodesArray:
   \   00000000   0x........         DC32 ?_0, ?_1, ?_2, ?_3, ?_4, ?_5, ?_6, ?_7, ?_8, ?_9, ?_10, ?_11, ?_12
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \   00000034   0x........         DC32 ?_13, ?_14, ?_15, ?_16, ?_17, ?_18, ?_19, ?_0, ?_0, ?_0
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
     46                                              "I2CBUSY",                      // CODE 001: I2C Bus detected busy. Rogue I2C part holding bus low.
     47                                              "VM_INIT",                      // CODE 002: Initialization of V Monitor Code failed.
     48                                              "BGMSYNC",                      // CODE 003: BGM111 processing code has detected a sync error on traffic from BGM111.
     49                                              "GEYE_IN",                      // CODE 004: Initialization of Grid Eye Sensor failed.
     50                                              "PRSS_IN",                      // CODE 005: Initialization of Pressure Sensor failed.
     51                                              "BGMRFUL",                      // CODE 006: BGM111 processing code has detected a Receive Buffer Full error on traffic from BGM111.
     52                                              "HUMD_IN",                      // CODE 007: Initialization of Humidity Sensor failed.
     53                                              "RGBINIT",                      // CODE 008: Initialization of RGB Sensor failed.
     54                                              "TEMPINI",                      // CODE 009: Initialization of Temperature Sensor failed.
     55                                              "CEYE_IN",                      // CODE 010: Initialization of Cool Eye Sensor failed.
     56                                              "I2CSCLK",                      // CODE 011: I2C Bus Test Failed. SCLK held low.
     57                                              "I2CSDAT",                      // CODE 012: I2C Bus Test Failed. SDAT held low.
     58                                              "BGMCNCT",                      // CODE 013: BGM111 processing code has detected a Connection Dropped Event.
     59                                              "BGMHRBT",                      // CODE 014: BGM111 processing code has detected a Heart Beat Timeout Event.
     60                                              "BGTXFUL",                      // CODE 015: BGM111 processing code has detected a Transmit Buffer Full error on traffic to BGM111.
     61                                              "FRMINIT",                      // CODE 016: Could not Initialize Flash Frame.
     62                                              "BGMOVFL",                      // CODE 017: BGM111 processing code has detected Serial Stream Overflow.
     63                                              "BGMSCNC",                      // CODE 018: BGM111 processing code has detected a SYNC Connection Dropped Event.
     64                                              "CALINIT",                      // CODE 019: Could not Initialize Calibration Flash Structure.
     65                                              "       ",                      // CODE 020: NULL...
     66                                              "       ",                      // CODE 021: NULL...
     67                                              "       " };                    // CODE 022: NULL...

   \                                 In section .rodata, align 4
     68          const char * const ModuleArray[] = { "       ",                     // CODE 000: NULL...NO Device Code
   \                     ModuleArray:
   \   00000000   0x........         DC32 ?_0, ?_20, ?_21, ?_22, ?_0, ?_0, ?_0
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
     69                                               "   main",                     // CODE 001: module: main.c
     70                                               " bgm111",                     // CODE 002: module: bgm111.c
     71                                               "    i2c",                     // CODE 003: module: i2c.c...
     72                                               "       ",                     // CODE 004: module: NULL...
     73                                               "       ",                     // CODE 005: module: NULL...
     74                                               "       " };                   // CODE 006: module: NULL...
     75              
     76          /* Error Code structure */
     77          struct
     78          {
     79            ErrorElement error_buf[ERR_DATA_LENGTH];
     80            volatile uint16_t error_wr;
     81            uint16_t error_rd;

   \                                 In section .bss, align 4
     82          } static errStruct;
   \                     errStruct:
   \   00000000                      DS8 804
     83          
     84          //*
     85          //* Define Internal Buffer handling routines.
     86          //* 
     87          

   \                                 In section .text, align 2, keep-with-next
     88          void RBBuffer_LowLevel_Init(void)
     89          {
     90            errStruct.error_wr = 0;
   \                     RBBuffer_LowLevel_Init: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x....             LDR.N    R1,??DataTable4
   \   00000004   0xF8A1 0x0320      STRH     R0,[R1, #+800]
     91            errStruct.error_rd = 0;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x....             LDR.N    R1,??DataTable4
   \   0000000C   0xF8A1 0x0322      STRH     R0,[R1, #+802]
     92          }
   \   00000010   0x4770             BX       LR               ;; return
     93          
     94          /* Next buffer index based on current index and buffer size */
     95          //#pragma inline=forced

   \                                 In section .text, align 2, keep-with-next
     96          uint16_t RBNextBufIdx(uint16_t idx)
     97          {
     98            idx++;
   \                     RBNextBufIdx: (+1)
   \   00000000   0x1C40             ADDS     R0,R0,#+1
     99            return idx < ERR_DATA_LENGTH ? idx : 0;
   \   00000002   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000004   0x2864             CMP      R0,#+100
   \   00000006   0xDB00             BLT.N    ??RBNextBufIdx_0
   \                     ??RBNextBufIdx_1: (+1)
   \   00000008   0x2000             MOVS     R0,#+0
   \                     ??RBNextBufIdx_0: (+1)
   \   0000000A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000000C   0x4770             BX       LR               ;; return
    100          }
    101          
    102          /* Report if the buffer is full based on its indexes */
    103          //#pragma inline=forced

   \                                 In section .text, align 2, keep-with-next
    104          bool RBIsBufFull(uint16_t wr_idx, uint16_t rd_idx)
    105          {
   \                     RBIsBufFull: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    106            return RBNextBufIdx(wr_idx) == rd_idx;
   \   00000006   0x0020             MOVS     R0,R4
   \   00000008   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000000A   0x.... 0x....      BL       RBNextBufIdx
   \   0000000E   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000010   0x42A8             CMP      R0,R5
   \   00000012   0xD101             BNE.N    ??RBIsBufFull_0
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0xE000             B.N      ??RBIsBufFull_1
   \                     ??RBIsBufFull_0: (+1)
   \   00000018   0x2000             MOVS     R0,#+0
   \                     ??RBIsBufFull_1: (+1)
   \   0000001A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001C   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    107          }
    108          
    109          /* Get the used space in the buffer based on its indexes */
    110          //#pragma inline=forced

   \                                 In section .text, align 2, keep-with-next
    111          uint16_t RBBufUsed(uint16_t wr_idx, uint16_t rd_idx)
    112          {
   \                     RBBufUsed: (+1)
   \   00000000   0x0002             MOVS     R2,R0
    113            int size = (int)wr_idx - (int)rd_idx;
   \   00000002   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000004   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000006   0x1A50             SUBS     R0,R2,R1
    114            if (size < 0)
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD500             BPL.N    ??RBBufUsed_0
    115            {
    116              size = ERR_DATA_LENGTH + size;
   \   0000000C   0x3064             ADDS     R0,R0,#+100
    117            }
    118            return size;
   \                     ??RBBufUsed_0: (+1)
   \   0000000E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000010   0x4770             BX       LR               ;; return
    119          }
    120          
    121          /* Get the free space in the buffer based on its indexes */
    122          //#pragma inline=forced

   \                                 In section .text, align 2, keep-with-next
    123          uint16_t RBBufFree(uint16_t wr_idx, uint16_t rd_idx)
    124          {
   \                     RBBufFree: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    125            return (ERR_DATA_LENGTH - 1) - RBBufUsed(wr_idx, rd_idx);
   \   00000006   0x0029             MOVS     R1,R5
   \   00000008   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000000E   0x.... 0x....      BL       RBBufUsed
   \   00000012   0xF1D0 0x0063      RSBS     R0,R0,#+99
   \   00000016   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000018   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    126          }
    127          
    128          /**
    129            * @brief  This function initializes the Error Code Tracking Structure.
    130            * @retval HAL_StatusTypeDef:     HAL_OK:       No Errors
    131            *                                HAL_ERROR:    Error Found during initialization.
    132            */

   \                                 In section .text, align 2, keep-with-next
    133          HAL_StatusTypeDef RdBrd_ErrCdInit( void )
    134          {
   \                     RdBrd_ErrCdInit: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    135            RBBuffer_LowLevel_Init();              // Reset all Internal Pointers.
   \   00000002   0x.... 0x....      BL       RBBuffer_LowLevel_Init
    136            return HAL_OK;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0xBD02             POP      {R1,PC}          ;; return
    137          }
    138          
    139          /**
    140            * @brief  This function returns the current Error Count in the Error Buffer..
    141            * @retval uint16_t:     Number of errors being tracked
    142            */

   \                                 In section .text, align 2, keep-with-next
    143          uint16_t  RdBrd_ErrCdGetErrCnt( void )
    144          {
   \                     RdBrd_ErrCdGetErrCnt: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    145            return RBBufUsed(errStruct.error_wr, errStruct.error_rd);
   \   00000002   0x....             LDR.N    R0,??DataTable4
   \   00000004   0xF8B0 0x1322      LDRH     R1,[R0, #+802]
   \   00000008   0x....             LDR.N    R0,??DataTable4
   \   0000000A   0xF8B0 0x0320      LDRH     R0,[R0, #+800]
   \   0000000E   0x.... 0x....      BL       RBBufUsed
   \   00000012   0xBD02             POP      {R1,PC}          ;; return
    146          }
    147          
    148           /**
    149            * @brief  This function returns the current pointer at the next code to be processed.
    150            * @retval ErrorElmntPtr:     Points to the next code to be processed.
    151            */

   \                                 In section .text, align 2, keep-with-next
    152          ErrorElmntPtr  RdBrd_ErrCdGetCrntErrCd( void )
    153          {
    154            return &errStruct.error_buf[errStruct.error_rd];
   \                     RdBrd_ErrCdGetCrntErrCd: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable4
   \   00000002   0x....             LDR.N    R1,??DataTable4
   \   00000004   0xF8B1 0x1322      LDRH     R1,[R1, #+802]
   \   00000008   0xEB00 0x00C1      ADD      R0,R0,R1, LSL #+3
   \   0000000C   0x4770             BX       LR               ;; return
    155          }
    156          
    157           /**
    158            * @brief  This function returns the current pointer at the next code to be processed and
    159            * 		   and increments the pointer to the next code.
    160            * @retval ErrorElmntPtr:     Points to the next code to be processed.
    161            */

   \                                 In section .text, align 2, keep-with-next
    162          ErrorElmntPtr  RdBrd_ErrCdGetNxtErrCd( void )
    163          {
   \                     RdBrd_ErrCdGetNxtErrCd: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    164            ErrorElmntPtr TempPtr;
    165            
    166            // Get Current Pointer
    167            TempPtr = &errStruct.error_buf[errStruct.error_rd];
   \   00000002   0x....             LDR.N    R0,??DataTable4
   \   00000004   0x....             LDR.N    R1,??DataTable4
   \   00000006   0xF8B1 0x1322      LDRH     R1,[R1, #+802]
   \   0000000A   0xEB00 0x00C1      ADD      R0,R0,R1, LSL #+3
   \   0000000E   0x0004             MOVS     R4,R0
    168            // Update Read Pointer and return.
    169            errStruct.error_rd = RBNextBufIdx(errStruct.error_rd);
   \   00000010   0x....             LDR.N    R0,??DataTable4
   \   00000012   0xF8B0 0x0322      LDRH     R0,[R0, #+802]
   \   00000016   0x.... 0x....      BL       RBNextBufIdx
   \   0000001A   0x....             LDR.N    R1,??DataTable4
   \   0000001C   0xF8A1 0x0322      STRH     R0,[R1, #+802]
    170            return TempPtr;
   \   00000020   0x0020             MOVS     R0,R4
   \   00000022   0xBD10             POP      {R4,PC}          ;; return
    171          }
    172          
    173          /**
    174            * @brief  This function returns the current pointer at the next code to be processed and
    175            * 		   and increments the pointer to the next code.
    176            * @retval HAL_StatusTypeDef:     HAL_OK:       Error Code logged
    177            *                                HAL_ERROR:    Error Log full or Bad Code
    178            */

   \                                 In section .text, align 2, keep-with-next
    179          HAL_StatusTypeDef RdBrd_ErrCdLogErrCd( ErrorCodes ErrorCd, ModuleCodes DeviceCd )
    180          {
   \                     RdBrd_ErrCdLogErrCd: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB095             SUB      SP,SP,#+84
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    181            uint8_t tempBffr2[80];
    182            HAL_StatusTypeDef Status;
    183            
    184            // Is Buffer Full?
    185            if ( RBIsBufFull(errStruct.error_wr, errStruct.error_rd) )
   \   00000008   0x....             LDR.N    R0,??DataTable4
   \   0000000A   0xF8B0 0x1322      LDRH     R1,[R0, #+802]
   \   0000000E   0x....             LDR.N    R0,??DataTable4
   \   00000010   0xF8B0 0x0320      LDRH     R0,[R0, #+800]
   \   00000014   0x.... 0x....      BL       RBIsBufFull
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD001             BEQ.N    ??RdBrd_ErrCdLogErrCd_0
    186              return HAL_ERROR;
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0xE034             B.N      ??RdBrd_ErrCdLogErrCd_1
    187            
    188            // Pass passed Information to indexed Entry.
    189            errStruct.error_buf[errStruct.error_wr].DeviceCd = DeviceCd;
   \                     ??RdBrd_ErrCdLogErrCd_0: (+1)
   \   00000020   0x....             LDR.N    R0,??DataTable4
   \   00000022   0x....             LDR.N    R1,??DataTable4
   \   00000024   0xF8B1 0x1320      LDRH     R1,[R1, #+800]
   \   00000028   0xEB00 0x00C1      ADD      R0,R0,R1, LSL #+3
   \   0000002C   0x8045             STRH     R5,[R0, #+2]
    190            errStruct.error_buf[errStruct.error_wr].ErrorCd = ErrorCd;
   \   0000002E   0x....             LDR.N    R0,??DataTable4
   \   00000030   0x....             LDR.N    R1,??DataTable4
   \   00000032   0xF8B1 0x1320      LDRH     R1,[R1, #+800]
   \   00000036   0xF820 0x4031      STRH     R4,[R0, R1, LSL #+3]
    191            errStruct.error_buf[errStruct.error_wr].halTick = HAL_GetTick();
   \   0000003A   0x....             LDR.N    R0,??DataTable4
   \   0000003C   0xF8B0 0x7320      LDRH     R7,[R0, #+800]
   \   00000040   0x.... 0x....      BL       HAL_GetTick
   \   00000044   0x....             LDR.N    R1,??DataTable4
   \   00000046   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000048   0xEB01 0x01C7      ADD      R1,R1,R7, LSL #+3
   \   0000004C   0x6048             STR      R0,[R1, #+4]
    192            
    193            // Update Write Pointer.
    194            errStruct.error_wr = RBNextBufIdx(errStruct.error_wr);
   \   0000004E   0x....             LDR.N    R0,??DataTable4
   \   00000050   0xF8B0 0x0320      LDRH     R0,[R0, #+800]
   \   00000054   0x.... 0x....      BL       RBNextBufIdx
   \   00000058   0x....             LDR.N    R1,??DataTable4
   \   0000005A   0xF8A1 0x0320      STRH     R0,[R1, #+800]
    195            //strcpy( (char *)tempBffr2, "ERROR: ERROR_I2CBUSY\r\n\r\n");
    196            //strcpy( (char *)tempBffr2, CodesArray[ErrorCd]);
    197            sprintf( (char *)tempBffr2, "%s ERROR: %s\r\n\r\n", ModuleArray[DeviceCd], CodesArray[ErrorCd]);
   \   0000005E   0x....             LDR.N    R0,??DataTable4_1
   \   00000060   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000062   0xF850 0x3024      LDR      R3,[R0, R4, LSL #+2]
   \   00000066   0x....             LDR.N    R0,??DataTable4_2
   \   00000068   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000006A   0xF850 0x2025      LDR      R2,[R0, R5, LSL #+2]
   \   0000006E   0x....             LDR.N    R1,??DataTable4_3
   \   00000070   0x4668             MOV      R0,SP
   \   00000072   0x.... 0x....      BL       sprintf
    198            // Send msg to App via Characteristics.
    199            SendApp_String( tempBffr2 );
   \   00000076   0x4668             MOV      R0,SP
   \   00000078   0x.... 0x....      BL       SendApp_String
    200            // Send string to UART..
    201          /*#ifdef REV_L
    202            Status = RoadBrd_UART_Transmit_IT(MONITOR_UART, (uint8_t *)tempBffr2);
    203            // Wait for msg to be completed.
    204            while (RoadBrd_Uart_Status(MONITOR_UART) != SET)
    205            {
    206            }
    207            // Clear State for Next Transfer.
    208            clrUsartState( MONITOR_UART );
    209          #else */
    210            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);
   \   0000007C   0x4669             MOV      R1,SP
   \   0000007E   0x2000             MOVS     R0,#+0
   \   00000080   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000084   0x0006             MOVS     R6,R0
    211          //#endif
    212            
    213            return Status;
   \   00000086   0x0030             MOVS     R0,R6
   \   00000088   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??RdBrd_ErrCdLogErrCd_1: (+1)
   \   0000008A   0xB015             ADD      SP,SP,#+84
   \   0000008C   0xBDF0             POP      {R4-R7,PC}       ;; return
    214          }
    215          

   \                                 In section .text, align 2, keep-with-next
    216          void RdBrd_BlinkErrCd( ErrorCodes ErrorCd )
    217          {
   \                     RdBrd_BlinkErrCd: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    218            int x;
    219            // Pull the BGM111 reset pin low 
    220            RoadBrd_gpio_Off( gRESET_BGM111 );
   \   00000004   0x2006             MOVS     R0,#+6
   \   00000006   0x.... 0x....      BL       RoadBrd_gpio_Off
    221          
    222            for (x=0; x<ErrorCd; x++)
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x0005             MOVS     R5,R0
   \                     ??RdBrd_BlinkErrCd_0: (+1)
   \   0000000E   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000010   0x42A5             CMP      R5,R4
   \   00000012   0xDA0D             BGE.N    ??RdBrd_BlinkErrCd_1
    223            {
    224              //SetLED(true);
    225              RoadBrd_gpio_On(BLUE_LED);
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x.... 0x....      BL       RoadBrd_gpio_On
    226              RoadBrd_Delay2( 100 );
   \   0000001A   0x2064             MOVS     R0,#+100
   \   0000001C   0x.... 0x....      BL       RoadBrd_Delay2
    227              //SetLED(false);
    228              RoadBrd_gpio_Off(BLUE_LED);
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0x.... 0x....      BL       RoadBrd_gpio_Off
    229              RoadBrd_Delay2( 100 );
   \   00000026   0x2064             MOVS     R0,#+100
   \   00000028   0x.... 0x....      BL       RoadBrd_Delay2
    230            }
   \   0000002C   0x1C6D             ADDS     R5,R5,#+1
   \   0000002E   0xE7EE             B.N      ??RdBrd_BlinkErrCd_0
    231            //SetLED(true);
    232            RoadBrd_gpio_On(BLUE_LED);
   \                     ??RdBrd_BlinkErrCd_1: (+1)
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0x.... 0x....      BL       RoadBrd_gpio_On
    233            RoadBrd_Delay2( 1000 );
   \   00000036   0xF44F 0x707A      MOV      R0,#+1000
   \   0000003A   0x.... 0x....      BL       RoadBrd_Delay2
    234            //SetLED(false
    235            RoadBrd_gpio_Off(BLUE_LED);
   \   0000003E   0x2001             MOVS     R0,#+1
   \   00000040   0x.... 0x....      BL       RoadBrd_gpio_Off
    236            RoadBrd_Delay2( 1000 );
   \   00000044   0xF44F 0x707A      MOV      R0,#+1000
   \   00000048   0x.... 0x....      BL       RoadBrd_Delay2
    237          }
   \   0000004C   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    238          
    239          /**
    240            * @brief  void RoadBrd_Delay( __IO uint32_t Delay ): Implement Delay by calling looping.
    241            *             NOTE: This avoids HAL_Delay since this could hang the processor in error handling.
    242            * @param Delay: specifies the delay time length, in milliseconds.
    243            * @retval None
    244            */

   \                                 In section .text, align 2, keep-with-next
    245          void RoadBrd_Delay2( __IO uint32_t Delay )
    246          {
   \                     RoadBrd_Delay2: (+1)
   \   00000000   0xB501             PUSH     {R0,LR}
    247            while( Delay != 0)
   \                     ??RoadBrd_Delay2_0: (+1)
   \   00000002   0x9800             LDR      R0,[SP, #+0]
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xD005             BEQ.N    ??RoadBrd_Delay2_1
    248            {
    249              delay_1ms();
   \   00000008   0x.... 0x....      BL       delay_1ms
    250              Delay--;
   \   0000000C   0x9800             LDR      R0,[SP, #+0]
   \   0000000E   0x1E40             SUBS     R0,R0,#+1
   \   00000010   0x9000             STR      R0,[SP, #+0]
   \   00000012   0xE7F6             B.N      ??RoadBrd_Delay2_0
    251            }
    252          }
   \                     ??RoadBrd_Delay2_1: (+1)
   \   00000014   0xBD01             POP      {R0,PC}          ;; return
    253          
    254          /**
    255            * @brief  This routine delays for 1 msec and returns
    256            *         from the BGM111
    257            * @param  none
    258            * @retval none
    259            */

   \                                 In section .text, align 2, keep-with-next
    260          void delay_1ms( void )
    261          {
    262            uint32_t count = 4400;      // Delay loop for 10msec
   \                     delay_1ms: (+1)
   \   00000000   0xF241 0x1030      MOVW     R0,#+4400
    263            
    264            while (count != 0)
   \                     ??delay_1ms_0: (+1)
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xD001             BEQ.N    ??delay_1ms_1
    265            {
    266              count--;
   \   00000008   0x1E40             SUBS     R0,R0,#+1
   \   0000000A   0xE7FB             B.N      ??delay_1ms_0
    267            }
    268          }
   \                     ??delay_1ms_1: (+1)
   \   0000000C   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     errStruct

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x........         DC32     CodesArray

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x........         DC32     ModuleArray

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x........         DC32     ?_23

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x20 0x20          DC8 "       "
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x49 0x32          DC8 "I2CBUSY"
   \              0x43 0x42    
   \              0x55 0x53    
   \              0x59 0x00    

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x56 0x4D          DC8 "VM_INIT"
   \              0x5F 0x49    
   \              0x4E 0x49    
   \              0x54 0x00    

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x42 0x47          DC8 "BGMSYNC"
   \              0x4D 0x53    
   \              0x59 0x4E    
   \              0x43 0x00    

   \                                 In section .rodata, align 4
   \                     ?_4:
   \   00000000   0x47 0x45          DC8 "GEYE_IN"
   \              0x59 0x45    
   \              0x5F 0x49    
   \              0x4E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_5:
   \   00000000   0x50 0x52          DC8 "PRSS_IN"
   \              0x53 0x53    
   \              0x5F 0x49    
   \              0x4E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_6:
   \   00000000   0x42 0x47          DC8 "BGMRFUL"
   \              0x4D 0x52    
   \              0x46 0x55    
   \              0x4C 0x00    

   \                                 In section .rodata, align 4
   \                     ?_7:
   \   00000000   0x48 0x55          DC8 "HUMD_IN"
   \              0x4D 0x44    
   \              0x5F 0x49    
   \              0x4E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_8:
   \   00000000   0x52 0x47          DC8 "RGBINIT"
   \              0x42 0x49    
   \              0x4E 0x49    
   \              0x54 0x00    

   \                                 In section .rodata, align 4
   \                     ?_9:
   \   00000000   0x54 0x45          DC8 "TEMPINI"
   \              0x4D 0x50    
   \              0x49 0x4E    
   \              0x49 0x00    

   \                                 In section .rodata, align 4
   \                     ?_10:
   \   00000000   0x43 0x45          DC8 "CEYE_IN"
   \              0x59 0x45    
   \              0x5F 0x49    
   \              0x4E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_11:
   \   00000000   0x49 0x32          DC8 "I2CSCLK"
   \              0x43 0x53    
   \              0x43 0x4C    
   \              0x4B 0x00    

   \                                 In section .rodata, align 4
   \                     ?_12:
   \   00000000   0x49 0x32          DC8 "I2CSDAT"
   \              0x43 0x53    
   \              0x44 0x41    
   \              0x54 0x00    

   \                                 In section .rodata, align 4
   \                     ?_13:
   \   00000000   0x42 0x47          DC8 "BGMCNCT"
   \              0x4D 0x43    
   \              0x4E 0x43    
   \              0x54 0x00    

   \                                 In section .rodata, align 4
   \                     ?_14:
   \   00000000   0x42 0x47          DC8 "BGMHRBT"
   \              0x4D 0x48    
   \              0x52 0x42    
   \              0x54 0x00    

   \                                 In section .rodata, align 4
   \                     ?_15:
   \   00000000   0x42 0x47          DC8 "BGTXFUL"
   \              0x54 0x58    
   \              0x46 0x55    
   \              0x4C 0x00    

   \                                 In section .rodata, align 4
   \                     ?_16:
   \   00000000   0x46 0x52          DC8 "FRMINIT"
   \              0x4D 0x49    
   \              0x4E 0x49    
   \              0x54 0x00    

   \                                 In section .rodata, align 4
   \                     ?_17:
   \   00000000   0x42 0x47          DC8 "BGMOVFL"
   \              0x4D 0x4F    
   \              0x56 0x46    
   \              0x4C 0x00    

   \                                 In section .rodata, align 4
   \                     ?_18:
   \   00000000   0x42 0x47          DC8 "BGMSCNC"
   \              0x4D 0x53    
   \              0x43 0x4E    
   \              0x43 0x00    

   \                                 In section .rodata, align 4
   \                     ?_19:
   \   00000000   0x43 0x41          DC8 "CALINIT"
   \              0x4C 0x49    
   \              0x4E 0x49    
   \              0x54 0x00    

   \                                 In section .rodata, align 4
   \                     ?_20:
   \   00000000   0x20 0x20          DC8 "   main"
   \              0x20 0x6D    
   \              0x61 0x69    
   \              0x6E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_21:
   \   00000000   0x20 0x62          DC8 " bgm111"
   \              0x67 0x6D    
   \              0x31 0x31    
   \              0x31 0x00    

   \                                 In section .rodata, align 4
   \                     ?_22:
   \   00000000   0x20 0x20          DC8 "    i2c"
   \              0x20 0x20    
   \              0x69 0x32    
   \              0x63 0x00    

   \                                 In section .rodata, align 4
   \                     ?_23:
   \   00000000   0x25 0x73          DC8 "%s ERROR: %s\015\012\015\012"
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x0D 0x0A    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    269          
    270          /************************ (C) COPYRIGHT WeatherCloud *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   RBBufFree
        16   -> RBBufUsed
       0   RBBufUsed
       0   RBBuffer_LowLevel_Init
      16   RBIsBufFull
        16   -> RBNextBufIdx
       0   RBNextBufIdx
      16   RdBrd_BlinkErrCd
        16   -> RoadBrd_Delay2
        16   -> RoadBrd_gpio_Off
        16   -> RoadBrd_gpio_On
       0   RdBrd_ErrCdGetCrntErrCd
       8   RdBrd_ErrCdGetErrCnt
         8   -> RBBufUsed
       8   RdBrd_ErrCdGetNxtErrCd
         8   -> RBNextBufIdx
       8   RdBrd_ErrCdInit
         8   -> RBBuffer_LowLevel_Init
     104   RdBrd_ErrCdLogErrCd
       104   -> HAL_GetTick
       104   -> RBIsBufFull
       104   -> RBNextBufIdx
       104   -> RoadBrd_UART_Transmit
       104   -> SendApp_String
       104   -> sprintf
       8   RoadBrd_Delay2
         8   -> delay_1ms
       0   delay_1ms


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       8  ?_0
       8  ?_1
       8  ?_10
       8  ?_11
       8  ?_12
       8  ?_13
       8  ?_14
       8  ?_15
       8  ?_16
       8  ?_17
       8  ?_18
       8  ?_19
       8  ?_2
       8  ?_20
       8  ?_21
       8  ?_22
      20  ?_23
       8  ?_3
       8  ?_4
       8  ?_5
       8  ?_6
       8  ?_7
       8  ?_8
       8  ?_9
      92  CodesArray
      28  ModuleArray
      26  RBBufFree
      18  RBBufUsed
      18  RBBuffer_LowLevel_Init
      30  RBIsBufFull
      14  RBNextBufIdx
      78  RdBrd_BlinkErrCd
      14  RdBrd_ErrCdGetCrntErrCd
      20  RdBrd_ErrCdGetErrCnt
      36  RdBrd_ErrCdGetNxtErrCd
      10  RdBrd_ErrCdInit
     142  RdBrd_ErrCdLogErrCd
      22  RoadBrd_Delay2
      14  delay_1ms
     804  errStruct

 
 804 bytes in section .bss
 324 bytes in section .rodata
 458 bytes in section .text
 
 458 bytes of CODE  memory
 324 bytes of CONST memory
 804 bytes of DATA  memory

Errors: none
Warnings: none
