###############################################################################
#
# IAR ANSI C/C++ Compiler V7.60.2.11341/W32 for ARM       07/Aug/2017  13:11:05
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\stm32l1xx_hal_timebase_TIM.c
#    Command line =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\stm32l1xx_hal_timebase_TIM.c
#        -D USE_HAL_DRIVER -D STM32L152xE -D USE_STM32L1XX_NUCLEO -D ASCII -D
#        REV_L -D LONG_DELAY -lCN
#        "D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\Road
#        Brd MSTR Rev L Long Always\List" -o
#        "D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\Road
#        Brd MSTR Rev L Long Always\Obj" --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_clustering --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.4\arm\INC\c\DLib_Config_Full.h" -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/STM32L1xx_HAL_Driver/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/STM32L1xx_HAL_Driver/Inc/Legacy\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/BSP/STM32L1xx_Nucleo\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/portable/IAR/ARM_CM3\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Core/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/CMSIS/Include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/CMSIS/Device/ST/STM32L1xx/Include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\..\Middlewares\Third_Party\BgLib\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.4\arm\CMSIS\Include\"
#    Locale       =  English_United States.1252
#    List file    =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\Road
#        Brd MSTR Rev L Long Always\List\stm32l1xx_hal_timebase_TIM.lst
#    Object file  =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\Road
#        Brd MSTR Rev L Long Always\Obj\stm32l1xx_hal_timebase_TIM.o
#
###############################################################################

D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\stm32l1xx_hal_timebase_TIM.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32l1xx_hal_timebase_TIM.c 
      4            * @brief   HAL time base based on the hardware TIM.
      5            ******************************************************************************
      6            *
      7            * COPYRIGHT(c) 2016 STMicroelectronics
      8            *
      9            * Redistribution and use in source and binary forms, with or without modification,
     10            * are permitted provided that the following conditions are met:
     11            *   1. Redistributions of source code must retain the above copyright notice,
     12            *      this list of conditions and the following disclaimer.
     13            *   2. Redistributions in binary form must reproduce the above copyright notice,
     14            *      this list of conditions and the following disclaimer in the documentation
     15            *      and/or other materials provided with the distribution.
     16            *   3. Neither the name of STMicroelectronics nor the names of its contributors
     17            *      may be used to endorse or promote products derived from this software
     18            *      without specific prior written permission.
     19            *
     20            * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     21            * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     22            * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     23            * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
     24            * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     25            * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     26            * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
     27            * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
     28            * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
     29            * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     30            *
     31            ******************************************************************************
     32            */
     33          
     34          /* Includes ------------------------------------------------------------------*/
     35          #include "stm32l1xx_hal.h"
     36          #include "stm32l1xx_hal_tim.h"
     37          /** @addtogroup STM32F7xx_HAL_Examples
     38            * @{
     39            */
     40          
     41          /** @addtogroup HAL_TimeBase
     42            * @{
     43            */ 
     44          
     45          /* Private typedef -----------------------------------------------------------*/
     46          /* Private define ------------------------------------------------------------*/
     47          /* Private macro -------------------------------------------------------------*/
     48          /* Private variables ---------------------------------------------------------*/

   \                                 In section .bss, align 4
     49          TIM_HandleTypeDef        htim4; 
   \                     htim4:
   \   00000000                      DS8 56

   \                                 In section .bss, align 4
     50          uint32_t                 uwIncrementState = 0;
   \                     uwIncrementState:
   \   00000000                      DS8 4
     51          /* Private function prototypes -----------------------------------------------*/
     52          /* Private functions ---------------------------------------------------------*/
     53          
     54          /**
     55            * @brief  This function configures the TIM4 as a time base source. 
     56            *         The time source is configured  to have 1ms time base with a dedicated 
     57            *         Tick interrupt priority. 
     58            * @note   This function is called  automatically at the beginning of program after
     59            *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
     60            * @param  TickPriority: Tick interrupt priorty.
     61            * @retval HAL status
     62            */

   \                                 In section .text, align 2, keep-with-next
     63          HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
     64          {
   \                     HAL_InitTick: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB088             SUB      SP,SP,#+32
   \   00000004   0x0004             MOVS     R4,R0
     65            RCC_ClkInitTypeDef    clkconfig;
     66            uint32_t              uwTimclock = 0;
   \   00000006   0x2500             MOVS     R5,#+0
     67            uint32_t              uwPrescalerValue = 0;
   \   00000008   0x2600             MOVS     R6,#+0
     68            uint32_t              pFLatency;
     69            
     70            /*Configure the TIM4 IRQ priority */
     71            HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
   \   0000000A   0x2200             MOVS     R2,#+0
   \   0000000C   0x0021             MOVS     R1,R4
   \   0000000E   0x201E             MOVS     R0,#+30
   \   00000010   0x.... 0x....      BL       HAL_NVIC_SetPriority
     72            
     73            /* Enable the TIM4 global Interrupt */
     74            HAL_NVIC_EnableIRQ(TIM4_IRQn); 
   \   00000014   0x201E             MOVS     R0,#+30
   \   00000016   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
     75            
     76            /* Enable TIM4 clock */
     77            __HAL_RCC_TIM4_CLK_ENABLE();
   \   0000001A   0x....             LDR.N    R0,??DataTable2  ;; 0x40023824
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   00000022   0x....             LDR.N    R1,??DataTable2  ;; 0x40023824
   \   00000024   0x6008             STR      R0,[R1, #+0]
   \   00000026   0x....             LDR.N    R0,??DataTable2  ;; 0x40023824
   \   00000028   0x6800             LDR      R0,[R0, #+0]
   \   0000002A   0xF010 0x0004      ANDS     R0,R0,#0x4
   \   0000002E   0x9000             STR      R0,[SP, #+0]
   \   00000030   0x9800             LDR      R0,[SP, #+0]
     78            
     79            /* Get clock configuration */
     80            HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
   \   00000032   0xA901             ADD      R1,SP,#+4
   \   00000034   0xA802             ADD      R0,SP,#+8
   \   00000036   0x.... 0x....      BL       HAL_RCC_GetClockConfig
     81            
     82            /* Compute TIM4 clock */
     83            uwTimclock = HAL_RCC_GetPCLK1Freq();
   \   0000003A   0x.... 0x....      BL       HAL_RCC_GetPCLK1Freq
   \   0000003E   0x0005             MOVS     R5,R0
     84             
     85            /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
     86            uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
   \   00000040   0x....             LDR.N    R0,??DataTable2_1  ;; 0xf4240
   \   00000042   0xFBB5 0xF0F0      UDIV     R0,R5,R0
   \   00000046   0x1E40             SUBS     R0,R0,#+1
   \   00000048   0x0006             MOVS     R6,R0
     87            
     88            /* Initialize TIM4 */
     89            htim4.Instance = TIM4;
   \   0000004A   0x....             LDR.N    R0,??DataTable2_2  ;; 0x40000800
   \   0000004C   0x....             LDR.N    R1,??DataTable2_3
   \   0000004E   0x6008             STR      R0,[R1, #+0]
     90            
     91            /* Initialize TIMx peripheral as follow:
     92            + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
     93            + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
     94            + ClockDivision = 0
     95            + Counter direction = Up
     96            */
     97            htim4.Init.Period = (1000000 / 1000) - 1;
   \   00000050   0xF240 0x30E7      MOVW     R0,#+999
   \   00000054   0x....             LDR.N    R1,??DataTable2_3
   \   00000056   0x60C8             STR      R0,[R1, #+12]
     98            htim4.Init.Prescaler = uwPrescalerValue;
   \   00000058   0x....             LDR.N    R0,??DataTable2_3
   \   0000005A   0x6046             STR      R6,[R0, #+4]
     99            htim4.Init.ClockDivision = 0;
   \   0000005C   0x2000             MOVS     R0,#+0
   \   0000005E   0x....             LDR.N    R1,??DataTable2_3
   \   00000060   0x6108             STR      R0,[R1, #+16]
    100            htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
   \   00000062   0x2000             MOVS     R0,#+0
   \   00000064   0x....             LDR.N    R1,??DataTable2_3
   \   00000066   0x6088             STR      R0,[R1, #+8]
    101            if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
   \   00000068   0x....             LDR.N    R0,??DataTable2_3
   \   0000006A   0x.... 0x....      BL       HAL_TIM_Base_Init
   \   0000006E   0x2800             CMP      R0,#+0
   \   00000070   0xD103             BNE.N    ??HAL_InitTick_0
    102            {
    103              /* Start the TIM time Base generation in interrupt mode */
    104              return HAL_TIM_Base_Start_IT(&htim4);
   \   00000072   0x....             LDR.N    R0,??DataTable2_3
   \   00000074   0x.... 0x....      BL       HAL_TIM_Base_Start_IT
   \   00000078   0xE000             B.N      ??HAL_InitTick_1
    105            }
    106            
    107            /* Return function status */
    108            return HAL_ERROR;
   \                     ??HAL_InitTick_0: (+1)
   \   0000007A   0x2001             MOVS     R0,#+1
   \                     ??HAL_InitTick_1: (+1)
   \   0000007C   0xB008             ADD      SP,SP,#+32
   \   0000007E   0xBD70             POP      {R4-R6,PC}       ;; return
    109          }
    110          
    111          /**
    112            * @brief  Suspend Tick increment.
    113            * @note   Disable the tick increment by disabling TIM4 update interrupt.
    114            * @param  None
    115            * @retval None
    116            */

   \                                 In section .text, align 2, keep-with-next
    117          void HAL_SuspendTick(void)
    118          {
    119            /* Disable TIM4 update Interrupt */
    120            __HAL_TIM_DISABLE_IT(&htim4, TIM_IT_UPDATE);                                                  
   \                     HAL_SuspendTick: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable2_3
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x68C0             LDR      R0,[R0, #+12]
   \   00000006   0x0840             LSRS     R0,R0,#+1
   \   00000008   0x0040             LSLS     R0,R0,#+1
   \   0000000A   0x....             LDR.N    R1,??DataTable2_3
   \   0000000C   0x6809             LDR      R1,[R1, #+0]
   \   0000000E   0x60C8             STR      R0,[R1, #+12]
    121          }
   \   00000010   0x4770             BX       LR               ;; return
    122          
    123          /**
    124            * @brief  Resume Tick increment.
    125            * @note   Enable the tick increment by Enabling TIM4 update interrupt.
    126            * @param  None
    127            * @retval None
    128            */

   \                                 In section .text, align 2, keep-with-next
    129          void HAL_ResumeTick(void)
    130          {
    131            /* Enable TIM4 Update interrupt */
    132            __HAL_TIM_ENABLE_IT(&htim4, TIM_IT_UPDATE);
   \                     HAL_ResumeTick: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable2_3
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x68C0             LDR      R0,[R0, #+12]
   \   00000006   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   0000000A   0x....             LDR.N    R1,??DataTable2_3
   \   0000000C   0x6809             LDR      R1,[R1, #+0]
   \   0000000E   0x60C8             STR      R0,[R1, #+12]
    133          }
   \   00000010   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x40023824         DC32     0x40023824

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x000F4240         DC32     0xf4240

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x40000800         DC32     0x40000800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x........         DC32     htim4
    134          
    135          /**
    136            * @brief  Period elapsed callback in non blocking mode
    137            * @note   This function is called  when TIM4 interrupt took place, inside
    138            * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
    139            * a global variable "uwTick" used as application time base.
    140            * @param  htim : TIM handle
    141            * @retval None
    142            */
    143          /*void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
    144          {
    145            HAL_IncTick();
    146          }*/
    147          
    148          /**
    149            * @}
    150            */ 
    151          
    152          /**
    153            * @}
    154            */ 
    155          
    156          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      48   HAL_InitTick
        48   -> HAL_NVIC_EnableIRQ
        48   -> HAL_NVIC_SetPriority
        48   -> HAL_RCC_GetClockConfig
        48   -> HAL_RCC_GetPCLK1Freq
        48   -> HAL_TIM_Base_Init
        48   -> HAL_TIM_Base_Start_IT
       0   HAL_ResumeTick
       0   HAL_SuspendTick


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
     128  HAL_InitTick
      18  HAL_ResumeTick
      18  HAL_SuspendTick
      56  htim4
       4  uwIncrementState

 
  60 bytes in section .bss
 180 bytes in section .text
 
 180 bytes of CODE memory
  60 bytes of DATA memory

Errors: none
Warnings: none
