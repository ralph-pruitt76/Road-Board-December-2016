###############################################################################
#
# IAR ANSI C/C++ Compiler V7.60.2.11341/W32 for ARM       07/Sep/2017  10:55:29
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\bgm111.c
#    Command line =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\bgm111.c
#        -D USE_HAL_DRIVER -D STM32L152xE -D USE_STM32L1XX_NUCLEO -D ASCII -D
#        REV_L -D LONG_DELAY -lCN
#        "D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\Road
#        Brd MSTR Rev L Long Always\List" -o
#        "D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\Road
#        Brd MSTR Rev L Long Always\Obj" --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_clustering --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.4\arm\INC\c\DLib_Config_Full.h" -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/STM32L1xx_HAL_Driver/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/STM32L1xx_HAL_Driver/Inc/Legacy\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/BSP/STM32L1xx_Nucleo\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/portable/IAR/ARM_CM3\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Core/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/CMSIS/Include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/CMSIS/Device/ST/STM32L1xx/Include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\..\Middlewares\Third_Party\BgLib\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.4\arm\CMSIS\Include\"
#    Locale       =  English_United States.1252
#    List file    =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\Road
#        Brd MSTR Rev L Long Always\List\bgm111.lst
#    Object file  =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\Road
#        Brd MSTR Rev L Long Always\Obj\bgm111.o
#
###############################################################################

D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\bgm111.c
      1          /* SiLabs BGM111 module access implementation using BGLib */
      2          
      3          #include "bgm111.h"
      4          #include <string.h>
      5          #include "gecko_bglib.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp struct gecko_msg_le_gap_set_mode_rsp_t *gecko_cmd_le_gap_set_mode(uint8, uint8)
   \                     gecko_cmd_le_gap_set_mode: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable20
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0x7104             STRB     R4,[R0, #+4]
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable20
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0x7145             STRB     R5,[R0, #+5]
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable20_1  ;; 0x1030220
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable20
   \   0000001E   0x6809             LDR      R1,[R1, #+0]
   \   00000020   0x6008             STR      R0,[R1, #+0]
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable20
   \   00000026   0x6800             LDR      R0,[R0, #+0]
   \   00000028   0x1D01             ADDS     R1,R0,#+4
   \   0000002A   0x.... 0x....      LDR.W    R0,??DataTable20
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0x6800             LDR      R0,[R0, #+0]
   \   00000032   0x.... 0x....      BL       gecko_handle_command
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable20_2
   \   0000003A   0x6800             LDR      R0,[R0, #+0]
   \   0000003C   0x1D00             ADDS     R0,R0,#+4
   \   0000003E   0xBD32             POP      {R1,R4,R5,PC}    ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp struct gecko_msg_gatt_server_write_attribute_value_rsp_t *gecko_cmd_gatt_server_write_attribute_value(uint16, uint16, uint8, uint8 const *)
   \                     gecko_cmd_gatt_server_write_attribute_value: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
   \   0000000A   0x001F             MOVS     R7,R3
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable20
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0x8084             STRH     R4,[R0, #+4]
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable20
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0x80C5             STRH     R5,[R0, #+6]
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable20
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0x7206             STRB     R6,[R0, #+8]
   \   00000024   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable20
   \   0000002A   0x6800             LDR      R0,[R0, #+0]
   \   0000002C   0xF110 0x0809      ADDS     R8,R0,#+9
   \   00000030   0x0032             MOVS     R2,R6
   \   00000032   0x0039             MOVS     R1,R7
   \   00000034   0x4640             MOV      R0,R8
   \   00000036   0x.... 0x....      BL       __aeabi_memcpy
   \   0000003A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable20_3  ;; 0x20a0520
   \   00000040   0xEB10 0x2006      ADDS     R0,R0,R6, LSL #+8
   \   00000044   0x.... 0x....      LDR.W    R1,??DataTable20
   \   00000048   0x6809             LDR      R1,[R1, #+0]
   \   0000004A   0x6008             STR      R0,[R1, #+0]
   \   0000004C   0x.... 0x....      LDR.W    R0,??DataTable20
   \   00000050   0x6800             LDR      R0,[R0, #+0]
   \   00000052   0x1D01             ADDS     R1,R0,#+4
   \   00000054   0x.... 0x....      LDR.W    R0,??DataTable20
   \   00000058   0x6800             LDR      R0,[R0, #+0]
   \   0000005A   0x6800             LDR      R0,[R0, #+0]
   \   0000005C   0x.... 0x....      BL       gecko_handle_command
   \   00000060   0x.... 0x....      LDR.W    R0,??DataTable20_2
   \   00000064   0x6800             LDR      R0,[R0, #+0]
   \   00000066   0x1D00             ADDS     R0,R0,#+4
   \   00000068   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp struct gecko_msg_gatt_server_send_characteristic_notification_rsp_t *gecko_cmd_gatt_server_send_characteristic_notification(uint8, uint16, uint8, uint8 const *)
   \                     gecko_cmd_gatt_server_send_characteristic_notification: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
   \   0000000A   0x001F             MOVS     R7,R3
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable20
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0x7104             STRB     R4,[R0, #+4]
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable20
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0xF8A0 0x5005      STRH     R5,[R0, #+5]
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable20
   \   00000022   0x6800             LDR      R0,[R0, #+0]
   \   00000024   0x71C6             STRB     R6,[R0, #+7]
   \   00000026   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable20
   \   0000002C   0x6800             LDR      R0,[R0, #+0]
   \   0000002E   0xF110 0x0808      ADDS     R8,R0,#+8
   \   00000032   0x0032             MOVS     R2,R6
   \   00000034   0x0039             MOVS     R1,R7
   \   00000036   0x4640             MOV      R0,R8
   \   00000038   0x.... 0x....      BL       __aeabi_memcpy
   \   0000003C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable20_4  ;; 0x50a0420
   \   00000042   0xEB10 0x2006      ADDS     R0,R0,R6, LSL #+8
   \   00000046   0x.... 0x....      LDR.W    R1,??DataTable20
   \   0000004A   0x6809             LDR      R1,[R1, #+0]
   \   0000004C   0x6008             STR      R0,[R1, #+0]
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable20
   \   00000052   0x6800             LDR      R0,[R0, #+0]
   \   00000054   0x1D01             ADDS     R1,R0,#+4
   \   00000056   0x.... 0x....      LDR.W    R0,??DataTable20
   \   0000005A   0x6800             LDR      R0,[R0, #+0]
   \   0000005C   0x6800             LDR      R0,[R0, #+0]
   \   0000005E   0x.... 0x....      BL       gecko_handle_command
   \   00000062   0x.... 0x....      LDR.W    R0,??DataTable20_2
   \   00000066   0x6800             LDR      R0,[R0, #+0]
   \   00000068   0x1D00             ADDS     R0,R0,#+4
   \   0000006A   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
      6          #include "stm32l1xx_hal.h"
      7          #include "usart.h"
      8          #include "gpio.h"
      9          #include "ErrorCodes.h"
     10          #include "i2c.h"
     11          #include "wwdg.h"
     12          
     13          /* BGLib instantiation */
     14          

   \                                 In section .bss, align 4
     15          BGLIB_DEFINE();
   \                     _gecko_cmd_msg:
   \   00000000                      DS8 132

   \                                 In section .bss, align 4
   \   __absolute struct gecko_cmd_packet _gecko_rsp_msg
   \                     _gecko_rsp_msg:
   \   00000000                      DS8 132

   \                                 In section .data, align 4
   \   __absolute struct gecko_cmd_packet *gecko_cmd_msg
   \                     gecko_cmd_msg:
   \   00000000   0x........         DC32 _gecko_cmd_msg

   \                                 In section .bss, align 4
   \   __absolute struct gecko_cmd_packet *gecko_evt_msg
   \                     gecko_evt_msg:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \   __absolute void (*bglib_output)(uint32_t, uint8_t *)
   \                     bglib_output:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \   __absolute int32_t (*bglib_input)(uint32_t, uint8_t *)
   \                     bglib_input:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \   __absolute int32_t (*bglib_peek)(void)
   \                     bglib_peek:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \   __absolute struct gecko_cmd_packet gecko_queue[30]
   \                     gecko_queue:
   \   00000000                      DS8 3960

   \                                 In section .bss, align 4
   \   __absolute int gecko_queue_w
   \                     gecko_queue_w:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \   __absolute int gecko_queue_r
   \                     gecko_queue_r:
   \   00000000                      DS8 4

   \                                 In section .data, align 4
   \   __absolute struct gecko_cmd_packet *gecko_rsp_msg
   \                     gecko_rsp_msg:
   \   00000000   0x........         DC32 _gecko_rsp_msg
     16          
     17          /* Define buffer size for BLE communication */
     18          
     19          // #define BG_DATA_LENGTH          70   // Code fills this buffer size full on the RX side...11/18/16 RP
     20          #define BG_DATA_LENGTH          200   
     21          
     22          /* Define number of free bytes in buffer when we need to process a packet
     23           * even if that means we need to wait in a loop */
     24          
     25          #define BG_DATA_LOW_WATERMARK   5
     26          
     27          /* BG reception states */
     28          
     29          enum BgRxState
     30          {
     31            BGRX_SYNC,
     32            BGRX_HDR,
     33            BGRX_DATA
     34          };
     35          
     36          
     37          /* MSG LOGGER */
     38          struct
     39          {
     40            uint32_t msgBuff[BG_DATA_LENGTH];
     41            uint16_t tx_wr;

   \                                 In section .bss, align 4
     42          } static blemsgs;
   \                     blemsgs:
   \   00000000                      DS8 804
     43          
     44          /* BLE communication structure */
     45          struct
     46          {
     47            uint8_t tx_buf[BG_DATA_LENGTH];
     48            uint8_t tx_wr;
     49            volatile uint8_t tx_rd;
     50            uint8_t rx_buf[BG_DATA_LENGTH];
     51            volatile uint8_t rx_wr;
     52            uint8_t rx_rd;
     53            volatile enum BgRxState rx_state;
     54            volatile bool req_exec;
     55            bool booted;
     56            bool connection;
     57            bool data_Connection;
     58            uint8_t TackArmed;
     59            uint8_t TackCnt;
     60            uint8_t SyncFlag;
     61            struct gecko_cmd_packet *evt;

   \                                 In section .bss, align 4
     62          } static ble;
   \                     `ble`:
   \   00000000                      DS8 416
     63          
     64          
     65          /* BGM111 module low level init */
     66          

   \                                 In section .text, align 2, keep-with-next
     67          void BGM111_LowLevel_Init(void)
     68          {
     69            blemsgs.tx_wr = 0;
   \                     BGM111_LowLevel_Init: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x.... 0x....      LDR.W    R1,??DataTable20_5
   \   00000006   0xF8A1 0x0320      STRH     R0,[R1, #+800]
     70            ble.booted =  false;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x.... 0x....      LDR.W    R1,??DataTable20_6
   \   00000010   0xF881 0x0196      STRB     R0,[R1, #+406]
     71            ble.connection = false;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x.... 0x....      LDR.W    R1,??DataTable20_6
   \   0000001A   0xF881 0x0197      STRB     R0,[R1, #+407]
     72            ble.data_Connection = false;
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x.... 0x....      LDR.W    R1,??DataTable20_6
   \   00000024   0xF881 0x0198      STRB     R0,[R1, #+408]
     73            ble.TackArmed = TACK_OFF;
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0x.... 0x....      LDR.W    R1,??DataTable20_6
   \   0000002E   0xF881 0x0199      STRB     R0,[R1, #+409]
     74            ble.TackCnt = 0;
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x.... 0x....      LDR.W    R1,??DataTable20_6
   \   00000038   0xF881 0x019A      STRB     R0,[R1, #+410]
     75            ble.SyncFlag = SYNC_PROC;
   \   0000003C   0x2001             MOVS     R0,#+1
   \   0000003E   0x.... 0x....      LDR.W    R1,??DataTable20_6
   \   00000042   0xF881 0x019B      STRB     R0,[R1, #+411]
     76          }
   \   00000046   0x4770             BX       LR               ;; return
     77          
     78          /* Next buffer index based on current index and buffer size */
     79          
     80          //#pragma inline=forced

   \                                 In section .text, align 2, keep-with-next
     81          uint8_t NextBufIdx(uint8_t idx)
     82          {
     83            idx++;
   \                     NextBufIdx: (+1)
   \   00000000   0x1C40             ADDS     R0,R0,#+1
     84            return idx < BG_DATA_LENGTH ? idx : 0;
   \   00000002   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000004   0x28C8             CMP      R0,#+200
   \   00000006   0xDB00             BLT.N    ??NextBufIdx_0
   \                     ??NextBufIdx_1: (+1)
   \   00000008   0x2000             MOVS     R0,#+0
   \                     ??NextBufIdx_0: (+1)
   \   0000000A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000C   0x4770             BX       LR               ;; return
     85          }
     86          
     87          /* Report if the buffer is full based on its indexes */
     88          
     89          //#pragma inline=forced

   \                                 In section .text, align 2, keep-with-next
     90          bool IsBufFull(uint8_t wr_idx, uint8_t rd_idx)
     91          {
   \                     IsBufFull: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
     92            return NextBufIdx(wr_idx) == rd_idx;
   \   00000006   0x0020             MOVS     R0,R4
   \   00000008   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000A   0x.... 0x....      BL       NextBufIdx
   \   0000000E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000010   0x42A8             CMP      R0,R5
   \   00000012   0xD101             BNE.N    ??IsBufFull_0
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0xE000             B.N      ??IsBufFull_1
   \                     ??IsBufFull_0: (+1)
   \   00000018   0x2000             MOVS     R0,#+0
   \                     ??IsBufFull_1: (+1)
   \   0000001A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001C   0xBD32             POP      {R1,R4,R5,PC}    ;; return
     93          }
     94          
     95          /* Get the used space in the buffer based on its indexes */
     96          
     97          //#pragma inline=forced

   \                                 In section .text, align 2, keep-with-next
     98          uint8_t BufUsed(uint8_t wr_idx, uint8_t rd_idx)
     99          {
   \                     BufUsed: (+1)
   \   00000000   0x0002             MOVS     R2,R0
    100            int size = (int)wr_idx - (int)rd_idx;
   \   00000002   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000004   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000006   0x1A50             SUBS     R0,R2,R1
    101            if (size < 0)
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD500             BPL.N    ??BufUsed_0
    102            {
    103              size = BG_DATA_LENGTH + size;
   \   0000000C   0x30C8             ADDS     R0,R0,#+200
    104            }
    105            return size;
   \                     ??BufUsed_0: (+1)
   \   0000000E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000010   0x4770             BX       LR               ;; return
    106          }
    107          
    108          /* Get the free space in the buffer based on its indexes */
    109          
    110          //#pragma inline=forced

   \                                 In section .text, align 2, keep-with-next
    111          uint8_t BufFree(uint8_t wr_idx, uint8_t rd_idx)
    112          {
   \                     BufFree: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    113            return (BG_DATA_LENGTH - 1) - BufUsed(wr_idx, rd_idx);
   \   00000006   0x0029             MOVS     R1,R5
   \   00000008   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000E   0x.... 0x....      BL       BufUsed
   \   00000012   0xF1D0 0x00C7      RSBS     R0,R0,#+199
   \   00000016   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000018   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    114          }
    115          
    116          /* Receive data from the BGM111 module */
    117          

   \                                 In section .text, align 2, keep-with-next
    118          int BGM111_Receive(uint32_t len, uint8_t *data)
    119          {
   \                     BGM111_Receive: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    120            
    121            /* Wait until we received the requested number of data bytes */
    122            while (len)
   \                     ??BGM111_Receive_0: (+1)
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD027             BEQ.N    ??BGM111_Receive_1
    123            {
    124              /* Is there a byte in the receive buffer? */
    125              if (ble.rx_rd != ble.rx_wr)
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable20_6
   \   0000000E   0xF890 0x0193      LDRB     R0,[R0, #+403]
   \   00000012   0x.... 0x....      LDR.W    R1,??DataTable20_6
   \   00000016   0xF891 0x1192      LDRB     R1,[R1, #+402]
   \   0000001A   0x4288             CMP      R0,R1
   \   0000001C   0xD01B             BEQ.N    ??BGM111_Receive_2
    126              {
    127                /* Disable interrupt */
    128          //      NVIC_DisableIRQ(BGM111_UART_IRQn);
    129                /* Clear the request to execute the BLE stack now we're doing it */
    130                ble.req_exec = false;
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x.... 0x....      LDR.W    R1,??DataTable20_6
   \   00000024   0xF881 0x0195      STRB     R0,[R1, #+405]
    131                /* Write to the output buffer */
    132                *data++ = ble.rx_buf[ble.rx_rd];
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable20_6
   \   0000002C   0x.... 0x....      LDR.W    R1,??DataTable20_6
   \   00000030   0xF891 0x1193      LDRB     R1,[R1, #+403]
   \   00000034   0x4408             ADD      R0,R0,R1
   \   00000036   0xF890 0x00CA      LDRB     R0,[R0, #+202]
   \   0000003A   0x7028             STRB     R0,[R5, #+0]
   \   0000003C   0x1C6D             ADDS     R5,R5,#+1
    133                /* Next byte in the receive buffer */
    134                ble.rx_rd = NextBufIdx(ble.rx_rd);
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable20_6
   \   00000042   0xF890 0x0193      LDRB     R0,[R0, #+403]
   \   00000046   0x.... 0x....      BL       NextBufIdx
   \   0000004A   0x.... 0x....      LDR.W    R1,??DataTable20_6
   \   0000004E   0xF881 0x0193      STRB     R0,[R1, #+403]
    135                /* Enable interrupt */
    136          //      NVIC_EnableIRQ(BGM111_UART_IRQn);
    137          
    138                /* One byte less to wait for */
    139                len--;
   \   00000052   0x1E64             SUBS     R4,R4,#+1
   \   00000054   0xE7D7             B.N      ??BGM111_Receive_0
    140              }
    141              else
    142              {
    143                // Time to prime the pump again....
    144                HAL_UART_EnableBGM_RX();
   \                     ??BGM111_Receive_2: (+1)
   \   00000056   0x.... 0x....      BL       HAL_UART_EnableBGM_RX
    145                break;
    146              }
    147            }
    148            return 0;
   \                     ??BGM111_Receive_1: (+1)
   \   0000005A   0x2000             MOVS     R0,#+0
   \   0000005C   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    149          }
    150          
    151          /* Check whether there is input data from the BGM111 module */
    152          

   \                                 In section .text, align 2, keep-with-next
    153          int BGM111_Peek(void)
    154          {
    155            return ble.req_exec;
   \                     BGM111_Peek: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable20_6
   \   00000004   0xF890 0x0195      LDRB     R0,[R0, #+405]
   \   00000008   0x4770             BX       LR               ;; return
    156          }
    157          
    158          /* Initialize the BGM111 module and BGLib */
    159          

   \                                 In section .text, align 2, keep-with-next
    160          void BGM111_Init(void)
    161          {
   \                     BGM111_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    162            /* Perform low level init to initialize the UART for use with the 
    163             * BGM111 module */
    164            BGM111_LowLevel_Init();
   \   00000002   0x.... 0x....      BL       BGM111_LowLevel_Init
    165            /* Pull the BGM111 reset pin low */
    166            RoadBrd_gpio_Off( gRESET_BGM111 );
   \   00000006   0x2006             MOVS     R0,#+6
   \   00000008   0x.... 0x....      BL       RoadBrd_gpio_Off
    167            /* Initialize BGLib with our transmit, receive and peek routines */
    168            BGLIB_INITIALIZE_NONBLOCK(BGM111_Transmit, BGM111_Receive, BGM111_Peek);
   \   0000000C   0x.... 0x....      ADR.W    R0,BGM111_Transmit
   \   00000010   0x.... 0x....      LDR.W    R1,??DataTable20_7
   \   00000014   0x6008             STR      R0,[R1, #+0]
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable20_8
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable20_9
   \   0000001E   0x6008             STR      R0,[R1, #+0]
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable20_10
   \   00000024   0x.... 0x....      LDR.W    R1,??DataTable20_11
   \   00000028   0x6008             STR      R0,[R1, #+0]
    169            /* Release the BGM111 reset pin */
    170            RoadBrd_gpio_On( gRESET_BGM111 );
   \   0000002A   0x2006             MOVS     R0,#+6
   \   0000002C   0x.... 0x....      BL       RoadBrd_gpio_On
    171          }
   \   00000030   0xBD01             POP      {R0,PC}          ;; return
    172          
    173          /* Process any input from the BLE module */
    174          

   \                                 In section .text, align 2, keep-with-next
    175          void BGM111_ProcessInput(void)
    176          {
   \                     BGM111_ProcessInput: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
    177            /* Event structure */
    178            uint32_t temp1;
    179            uint8_t tempBffr2[20];
    180            bool Boot_evt = false;
   \   00000004   0x2500             MOVS     R5,#+0
    181            struct gecko_msg_le_gap_set_mode_rsp_t *Result_Ptr;
    182            /* Check whether there is an event to service */
    183            if (!ble.evt)
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable20_6
   \   0000000A   0xF8D0 0x019C      LDR      R0,[R0, #+412]
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD105             BNE.N    ??BGM111_ProcessInput_0
    184            {
    185              ble.evt = gecko_peek_event();
   \   00000012   0x.... 0x....      BL       gecko_peek_event
   \   00000016   0x.... 0x....      LDR.W    R1,??DataTable20_6
   \   0000001A   0xF8C1 0x019C      STR      R0,[R1, #+412]
    186            }
    187            if (ble.evt)
   \                     ??BGM111_ProcessInput_0: (+1)
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable20_6
   \   00000022   0xF8D0 0x019C      LDR      R0,[R0, #+412]
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xF000 0x80EF      BEQ.W    ??BGM111_ProcessInput_1
    188            {
    189              // Log Event
    190              blemsgs.msgBuff[blemsgs.tx_wr] = BGLIB_MSG_ID(ble.evt->header);
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable20_6
   \   00000030   0xF8D0 0x019C      LDR      R0,[R0, #+412]
   \   00000034   0x6800             LDR      R0,[R0, #+0]
   \   00000036   0x.... 0x....      LDR.W    R1,??DataTable20_12  ;; 0xffff00f8
   \   0000003A   0x4008             ANDS     R0,R1,R0
   \   0000003C   0x.... 0x....      LDR.W    R1,??DataTable20_5
   \   00000040   0x.... 0x....      LDR.W    R2,??DataTable20_5
   \   00000044   0xF8B2 0x2320      LDRH     R2,[R2, #+800]
   \   00000048   0xF841 0x0022      STR      R0,[R1, R2, LSL #+2]
    191              blemsgs.tx_wr = NextBufIdx(blemsgs.tx_wr);
   \   0000004C   0x.... 0x....      LDR.W    R0,??DataTable20_5
   \   00000050   0xF8B0 0x0320      LDRH     R0,[R0, #+800]
   \   00000054   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000056   0x.... 0x....      BL       NextBufIdx
   \   0000005A   0x.... 0x....      LDR.W    R1,??DataTable20_5
   \   0000005E   0xF8A1 0x0320      STRH     R0,[R1, #+800]
    192              
    193              /* Service based on event header message ID */
    194              temp1 = BGLIB_MSG_ID(ble.evt->header);
   \   00000062   0x.... 0x....      LDR.W    R0,??DataTable20_6
   \   00000066   0xF8D0 0x019C      LDR      R0,[R0, #+412]
   \   0000006A   0x6800             LDR      R0,[R0, #+0]
   \   0000006C   0x.... 0x....      LDR.W    R1,??DataTable20_12  ;; 0xffff00f8
   \   00000070   0x4008             ANDS     R0,R1,R0
   \   00000072   0x0004             MOVS     R4,R0
    195              switch(temp1)
   \   00000074   0x0020             MOVS     R0,R4
   \   00000076   0x.... 0x....      LDR.W    R1,??DataTable20_13  ;; 0x100a0
   \   0000007A   0x4288             CMP      R0,R1
   \   0000007C   0xD02A             BEQ.N    ??BGM111_ProcessInput_2
   \   0000007E   0x.... 0x....      LDR.W    R1,??DataTable20_14  ;; 0x800a0
   \   00000082   0x4288             CMP      R0,R1
   \   00000084   0xD058             BEQ.N    ??BGM111_ProcessInput_3
   \   00000086   0x.... 0x....      LDR.W    R1,??DataTable20_15  ;; 0x900a0
   \   0000008A   0x4288             CMP      R0,R1
   \   0000008C   0xF000 0x8082      BEQ.W    ??BGM111_ProcessInput_4
   \   00000090   0x.... 0x....      LDR.W    R1,??DataTable20_16  ;; 0x10800a0
   \   00000094   0x4288             CMP      R0,R1
   \   00000096   0xD029             BEQ.N    ??BGM111_ProcessInput_5
   \   00000098   0x.... 0x....      LDR.W    R1,??DataTable20_17  ;; 0x20800a0
   \   0000009C   0x4288             CMP      R0,R1
   \   0000009E   0xD079             BEQ.N    ??BGM111_ProcessInput_4
   \   000000A0   0x.... 0x....      LDR.W    R1,??DataTable20_18  ;; 0x20a0020
   \   000000A4   0x4288             CMP      R0,R1
   \   000000A6   0xD057             BEQ.N    ??BGM111_ProcessInput_6
   \   000000A8   0x.... 0x....      LDR.W    R1,??DataTable20_19  ;; 0x20b00a0
   \   000000AC   0x4288             CMP      R0,R1
   \   000000AE   0xF000 0x8092      BEQ.W    ??BGM111_ProcessInput_7
   \   000000B2   0x.... 0x....      LDR.W    R1,??DataTable20_20  ;; 0x30a00a0
   \   000000B6   0x4288             CMP      R0,R1
   \   000000B8   0xD05A             BEQ.N    ??BGM111_ProcessInput_8
   \   000000BA   0x.... 0x....      LDR.W    R1,??DataTable20_21  ;; 0x50a0020
   \   000000BE   0x4288             CMP      R0,R1
   \   000000C0   0xD062             BEQ.N    ??BGM111_ProcessInput_9
   \   000000C2   0x.... 0x....      LDR.W    R1,??DataTable20_22  ;; 0x8090020
   \   000000C6   0x4288             CMP      R0,R1
   \   000000C8   0xD064             BEQ.N    ??BGM111_ProcessInput_4
   \   000000CA   0x.... 0x....      LDR.W    R1,??DataTable20_23  ;; 0x200000a0
   \   000000CE   0x4288             CMP      R0,R1
   \   000000D0   0xD05A             BEQ.N    ??BGM111_ProcessInput_9
   \   000000D2   0xE08B             B.N      ??BGM111_ProcessInput_10
    196              //switch (BGLIB_MSG_ID(ble.evt->header))
    197              {
    198                /* System boot handler */
    199                case gecko_evt_system_boot_id:
    200                  RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)"<BGM_BOOT>");
   \                     ??BGM111_ProcessInput_2: (+1)
   \   000000D4   0x.... 0x....      LDR.W    R1,??DataTable20_24
   \   000000D8   0x2000             MOVS     R0,#+0
   \   000000DA   0x.... 0x....      BL       RoadBrd_UART_Transmit
    201                  Boot_evt = true;
   \   000000DE   0x2001             MOVS     R0,#+1
   \   000000E0   0x0005             MOVS     R5,R0
    202                  /* Flag that the BLE module has booted */
    203                  ble.booted = true;
   \   000000E2   0x2001             MOVS     R0,#+1
   \   000000E4   0x.... 0x....      LDR.W    R1,??DataTable20_6
   \   000000E8   0xF881 0x0196      STRB     R0,[R1, #+406]
    204                  /* Fallthrough intentional */
    205                /* Connection closed handler */
    206                case gecko_evt_le_connection_closed_id:
    207                  // Wait for power to stabilize...200msec
    208          //        RoadBrd_Delay( 100 );
    209          //        gecko_cmd_le_gap_set_mode(le_gap_general_discoverable, le_gap_undirected_connectable);
    210          //        RoadBrd_Delay( 100 );
    211          //        gecko_cmd_le_gap_set_mode(le_gap_non_discoverable, le_gap_non_connectable);
    212          //        RoadBrd_Delay( 100 );
    213                  /* Set GAP mode: discoverable and connectable */
    214                  ble.connection = false;
   \                     ??BGM111_ProcessInput_5: (+1)
   \   000000EC   0x2000             MOVS     R0,#+0
   \   000000EE   0x.... 0x....      LDR.W    R1,??DataTable20_6
   \   000000F2   0xF881 0x0197      STRB     R0,[R1, #+407]
    215          //        Result_Ptr = gecko_cmd_le_gap_set_mode(le_gap_limited_discoverable, le_gap_undirected_connectable);
    216                  Result_Ptr = gecko_cmd_le_gap_set_mode(le_gap_general_discoverable, le_gap_undirected_connectable);
   \   000000F6   0x2102             MOVS     R1,#+2
   \   000000F8   0x2002             MOVS     R0,#+2
   \   000000FA   0x.... 0x....      BL       gecko_cmd_le_gap_set_mode
   \   000000FE   0x0006             MOVS     R6,R0
    217                  if ( Result_Ptr->result == 0)
   \   00000100   0x8830             LDRH     R0,[R6, #+0]
   \   00000102   0x2800             CMP      R0,#+0
   \   00000104   0xD117             BNE.N    ??BGM111_ProcessInput_11
    218          //        if (gecko_cmd_le_gap_set_mode(le_gap_general_discoverable, le_gap_undirected_connectable)->result == 0)
    219          //        if (gecko_cmd_le_gap_set_mode(le_gap_limited_discoverable, le_gap_undirected_connectable)->result < bg_errspc_bg)
    220                  {
    221                    // Don't reset first time. This is legitimate
    222                    // The following is a simple patch...Best way right now to recover is to force HARD Reset....
    223                    if (Boot_evt == false)
   \   00000106   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000108   0x2D00             CMP      R5,#+0
   \   0000010A   0xD10F             BNE.N    ??BGM111_ProcessInput_12
    224                    {
    225                      RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)"<BGM_CNCTCLOSE>");
   \   0000010C   0x.... 0x....      LDR.W    R1,??DataTable20_25
   \   00000110   0x2000             MOVS     R0,#+0
   \   00000112   0x.... 0x....      BL       RoadBrd_UART_Transmit
    226                      RdBrd_ErrCdLogErrCd( ERROR_BGM_CNNCT, MODULE_bgm111 );
   \   00000116   0x2102             MOVS     R1,#+2
   \   00000118   0x200D             MOVS     R0,#+13
   \   0000011A   0x.... 0x....      BL       RdBrd_ErrCdLogErrCd
    227                      Clr_HrtBeat_Cnt();
   \   0000011E   0x.... 0x....      BL       Clr_HrtBeat_Cnt
    228                      RdBrd_BlinkErrCd( ERROR_BGM_CNNCT );
   \   00000122   0x200D             MOVS     R0,#+13
   \   00000124   0x.... 0x....      BL       RdBrd_BlinkErrCd
    229                      //RoadBrd_Delay( 1000 );
    230                      HAL_NVIC_SystemReset();
   \   00000128   0x.... 0x....      BL       HAL_NVIC_SystemReset
    231                    }
    232                    /* We succeeded, don't handle this event again */
    233                    ble.evt = NULL;
   \                     ??BGM111_ProcessInput_12: (+1)
   \   0000012C   0x2000             MOVS     R0,#+0
   \   0000012E   0x.... 0x....      LDR.W    R1,??DataTable20_6
   \   00000132   0xF8C1 0x019C      STR      R0,[R1, #+412]
    234                  }
    235                  break;
   \                     ??BGM111_ProcessInput_11: (+1)
   \   00000136   0xE068             B.N      ??BGM111_ProcessInput_1
    236                //case 0x000800A0:
    237                case gecko_evt_le_connection_opened_id:
    238                  /* Open Event...Set Active Connection Flag */
    239                  /* Don't handle this event again */
    240                  RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)"<BGM_CNCTOPEN>");
   \                     ??BGM111_ProcessInput_3: (+1)
   \   00000138   0x.... 0x....      LDR.W    R1,??DataTable20_26
   \   0000013C   0x2000             MOVS     R0,#+0
   \   0000013E   0x.... 0x....      BL       RoadBrd_UART_Transmit
    241                  ble.connection = true;
   \   00000142   0x2001             MOVS     R0,#+1
   \   00000144   0x.... 0x....      LDR.W    R1,??DataTable20_6
   \   00000148   0xF881 0x0197      STRB     R0,[R1, #+407]
    242                  ble.evt = NULL;
   \   0000014C   0x2000             MOVS     R0,#+0
   \   0000014E   0x.... 0x....      LDR.W    R1,??DataTable20_6
   \   00000152   0xF8C1 0x019C      STR      R0,[R1, #+412]
    243                  break;
   \   00000156   0xE058             B.N      ??BGM111_ProcessInput_1
    244                // gecko_evt_gatt_server_user_write_request_id
    245                case 0x020A0020:
    246                  // Clear Heart Beat... We have detected it.
    247                  RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)"-*-");
   \                     ??BGM111_ProcessInput_6: (+1)
   \   00000158   0x....             ADR.N    R1,??DataTable17  ;; "-*-"
   \   0000015A   0x2000             MOVS     R0,#+0
   \   0000015C   0x.... 0x....      BL       RoadBrd_UART_Transmit
    248                  Clr_HeartBeat();
   \   00000160   0x.... 0x....      BL       Clr_HeartBeat
    249                  ble.evt = NULL;
   \   00000164   0x2000             MOVS     R0,#+0
   \   00000166   0x.... 0x....      LDR.W    R1,??DataTable20_6
   \   0000016A   0xF8C1 0x019C      STR      R0,[R1, #+412]
    250                  break;
   \   0000016E   0xE04C             B.N      ??BGM111_ProcessInput_1
    251                //case 0x030A0000:
    252                case gecko_evt_gatt_server_characteristic_status_id:
    253                  // Clear Heart Beat... We have detected it.
    254                  RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)"-O-");
   \                     ??BGM111_ProcessInput_8: (+1)
   \   00000170   0x....             ADR.N    R1,??DataTable17_1  ;; "-O-"
   \   00000172   0x2000             MOVS     R0,#+0
   \   00000174   0x.... 0x....      BL       RoadBrd_UART_Transmit
    255                  Clr_HeartBeat();
   \   00000178   0x.... 0x....      BL       Clr_HeartBeat
    256                  ble.evt = NULL;
   \   0000017C   0x2000             MOVS     R0,#+0
   \   0000017E   0x.... 0x....      LDR.W    R1,??DataTable20_6
   \   00000182   0xF8C1 0x019C      STR      R0,[R1, #+412]
    257                  break;
   \   00000186   0xE040             B.N      ??BGM111_ProcessInput_1
    258          //      case 0x080000A0:
    259          //      case 0x020B00A0:
    260          //      case 0x000000A0:
    261                case 0x200000A0:
    262                case 0x050A0020:
    263          //      case 0x200000A0:
    264          //      case gecko_cmd_gatt_server_send_characteristic_notification_id: */
    265                /* Dummy catchall */
    266                  /* Don't handle this event again */
    267                  ble.evt = NULL;
   \                     ??BGM111_ProcessInput_9: (+1)
   \   00000188   0x2000             MOVS     R0,#+0
   \   0000018A   0x.... 0x....      LDR.W    R1,??DataTable20_6
   \   0000018E   0xF8C1 0x019C      STR      R0,[R1, #+412]
    268                  break;
   \   00000192   0xE03A             B.N      ??BGM111_ProcessInput_1
    269                case gecko_rsp_gatt_read_characteristic_value_by_uuid_id:
    270                case 0x020800A0:
    271                case 0x000900A0:
    272                  RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)"<rsp_read_ch_value_by_uuid_id>");
   \                     ??BGM111_ProcessInput_4: (+1)
   \   00000194   0x.... 0x....      LDR.W    R1,??DataTable20_27
   \   00000198   0x2000             MOVS     R0,#+0
   \   0000019A   0x.... 0x....      BL       RoadBrd_UART_Transmit
    273                  if (ble.evt->data.evt_gatt_server_attribute_value.value.len != 0)
   \   0000019E   0x.... 0x....      LDR.W    R0,??DataTable20_6
   \   000001A2   0xF8D0 0x019C      LDR      R0,[R0, #+412]
   \   000001A6   0x7A80             LDRB     R0,[R0, #+10]
   \   000001A8   0x2800             CMP      R0,#+0
   \   000001AA   0xD00E             BEQ.N    ??BGM111_ProcessInput_13
    274                  {
    275                    sprintf( (char *)tempBffr2, "<STR:%s>", ble.evt->data.evt_gatt_server_attribute_value.value.data);
   \   000001AC   0x.... 0x....      LDR.W    R0,??DataTable20_6
   \   000001B0   0xF8D0 0x019C      LDR      R0,[R0, #+412]
   \   000001B4   0xF110 0x020B      ADDS     R2,R0,#+11
   \   000001B8   0x.... 0x....      LDR.W    R1,??DataTable20_28
   \   000001BC   0x4668             MOV      R0,SP
   \   000001BE   0x.... 0x....      BL       sprintf
    276                    RoadBrd_UART_Transmit(MONITOR_UART, tempBffr2);
   \   000001C2   0x4669             MOV      R1,SP
   \   000001C4   0x2000             MOVS     R0,#+0
   \   000001C6   0x.... 0x....      BL       RoadBrd_UART_Transmit
    277                  }
    278                  ble.evt = NULL;
   \                     ??BGM111_ProcessInput_13: (+1)
   \   000001CA   0x2000             MOVS     R0,#+0
   \   000001CC   0x.... 0x....      LDR.W    R1,??DataTable20_6
   \   000001D0   0xF8C1 0x019C      STR      R0,[R1, #+412]
    279                  break;
   \   000001D4   0xE019             B.N      ??BGM111_ProcessInput_1
    280                case gecko_evt_endpoint_status_id:
    281                  RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)"<evt_endpoint_status_id>");
   \                     ??BGM111_ProcessInput_7: (+1)
   \   000001D6   0x.... 0x....      LDR.W    R1,??DataTable20_29
   \   000001DA   0x2000             MOVS     R0,#+0
   \   000001DC   0x.... 0x....      BL       RoadBrd_UART_Transmit
    282                  ble.evt = NULL;
   \   000001E0   0x2000             MOVS     R0,#+0
   \   000001E2   0x.... 0x....      LDR.W    R1,??DataTable20_6
   \   000001E6   0xF8C1 0x019C      STR      R0,[R1, #+412]
    283                  break;
   \   000001EA   0xE00E             B.N      ??BGM111_ProcessInput_1
    284                /* Dummy catchall */
    285                default:
    286                  sprintf( (char *)tempBffr2, "<UNKN:%08x>", temp1);
   \                     ??BGM111_ProcessInput_10: (+1)
   \   000001EC   0x0022             MOVS     R2,R4
   \   000001EE   0x.... 0x....      LDR.W    R1,??DataTable20_30
   \   000001F2   0x4668             MOV      R0,SP
   \   000001F4   0x.... 0x....      BL       sprintf
    287                  RoadBrd_UART_Transmit(MONITOR_UART, tempBffr2);
   \   000001F8   0x4669             MOV      R1,SP
   \   000001FA   0x2000             MOVS     R0,#+0
   \   000001FC   0x.... 0x....      BL       RoadBrd_UART_Transmit
    288                  /* Don't handle this event again */
    289                  ble.evt = NULL;
   \   00000200   0x2000             MOVS     R0,#+0
   \   00000202   0x.... 0x....      LDR.W    R1,??DataTable20_6
   \   00000206   0xF8C1 0x019C      STR      R0,[R1, #+412]
    290                  break;
    291              };
    292              // Test RX Buffer and Set req_exec flag.
    293          //    if (BufUsed(ble.rx_wr, ble.rx_rd) != 0)
    294          //    {
    295          //      /* Indicate we need to execute the BLE stack to process 
    296          //       * the received packet */
    297          //      ble.req_exec = true;
    298          //    }
    299            } // EndIf (ble.evt)
    300          }
   \                     ??BGM111_ProcessInput_1: (+1)
   \   0000020A   0xB006             ADD      SP,SP,#+24
   \   0000020C   0xBD70             POP      {R4-R6,PC}       ;; return
    301          
    302          /* BLE write characteristic */
    303          

   \                                 In section .text, align 2, keep-with-next
    304          void BGM111_WriteCharacteristic(uint16_t handle, uint8_t len, uint8_t *data)
    305          {
   \                     BGM111_WriteCharacteristic: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    306            /* Write the attribute */
    307            gecko_cmd_gatt_server_write_attribute_value(handle, 0, len, data);
   \   00000008   0x0033             MOVS     R3,R6
   \   0000000A   0x002A             MOVS     R2,R5
   \   0000000C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0x0020             MOVS     R0,R4
   \   00000012   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000014   0x.... 0x....      BL       gecko_cmd_gatt_server_write_attribute_value
    308            /* Also trigger notify if enabled */
    309            gecko_cmd_gatt_server_send_characteristic_notification(0xFF,
    310                      handle, len, data);
   \   00000018   0x0033             MOVS     R3,R6
   \   0000001A   0x002A             MOVS     R2,R5
   \   0000001C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000001E   0x0021             MOVS     R1,R4
   \   00000020   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000022   0x20FF             MOVS     R0,#+255
   \   00000024   0x.... 0x....      BL       gecko_cmd_gatt_server_send_characteristic_notification
    311          }
   \   00000028   0xBD70             POP      {R4-R6,PC}       ;; return
    312          
    313          /**
    314            * @brief  Check whether the BLE module has booted and is ready for a command.
    315            * @retval bool:         true(1):        BGAPI IS ready.
    316            *                       false(0):         BGAPI NOT ready.
    317            */

   \                                 In section .text, align 2, keep-with-next
    318          bool BGM111_Ready(void)
    319          {
    320            return ble.booted;
   \                     BGM111_Ready: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable20_6
   \   00000004   0xF890 0x0196      LDRB     R0,[R0, #+406]
   \   00000008   0x4770             BX       LR               ;; return
    321          }
    322          
    323          /**
    324            * @brief  Check whether the BLE module is connected.
    325            * @retval bool:         true(1):        Connection is Active.
    326            *                       false(0):       NO Connection.
    327            */

   \                                 In section .text, align 2, keep-with-next
    328          bool BGM111_Connected(void)
    329          {
    330            return ble.connection;
   \                     BGM111_Connected: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable20_6
   \   00000004   0xF890 0x0197      LDRB     R0,[R0, #+407]
   \   00000008   0x4770             BX       LR               ;; return
    331          }
    332          
    333          /**
    334            * @brief  Check whether the BLE module is DATA connected.
    335            * @retval bool:         true(1):        DATA Connection is Active.
    336            *                       false(0):       NO DATA Connection.
    337            */

   \                                 In section .text, align 2, keep-with-next
    338          bool BGM111_DataConnected(void)
    339          {
    340            return ble.data_Connection;
   \                     BGM111_DataConnected: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable20_6
   \   00000004   0xF890 0x0198      LDRB     R0,[R0, #+408]
   \   00000008   0x4770             BX       LR               ;; return
    341          }
    342          
    343          /**
    344            * @brief  Check whether the BLE module is in Sync Mode and Waiting for ACK.
    345            * @retval bool:         true(1):        Sync Ready for Processing next Frame.
    346            *                       false(0):       Sync needs to wait.
    347            */

   \                                 In section .text, align 2, keep-with-next
    348          bool BGM111_SyncModeTest(void)
    349          {
   \                     BGM111_SyncModeTest: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
    350            uint8_t tempBffr2[20];
    351          
    352            // Is Sync Mode armed? Yes.. Then Need to test SyncFlag
    353            if (ble.TackArmed == TACK_SYNC)
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable20_6
   \   00000008   0xF890 0x0199      LDRB     R0,[R0, #+409]
   \   0000000C   0x2803             CMP      R0,#+3
   \   0000000E   0xD140             BNE.N    ??BGM111_SyncModeTest_0
    354            {
    355              // If SyncFlag is SYNC_PROC, then allow Frame send.
    356              if (ble.SyncFlag == SYNC_PROC)
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable20_6
   \   00000014   0xF890 0x019B      LDRB     R0,[R0, #+411]
   \   00000018   0x2801             CMP      R0,#+1
   \   0000001A   0xD101             BNE.N    ??BGM111_SyncModeTest_1
    357                return true;
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0xE039             B.N      ??BGM111_SyncModeTest_2
    358              // NO, then Incrment count, We are one step closer to Reset Code.
    359              else
    360              {
    361                // Test to see if we have had a timing tick yet...
    362                if ( TstDataReady() )
   \                     ??BGM111_SyncModeTest_1: (+1)
   \   00000020   0x.... 0x....      BL       TstDataReady
   \   00000024   0x2800             CMP      R0,#+0
   \   00000026   0xD032             BEQ.N    ??BGM111_SyncModeTest_3
    363                {
    364                  // Clear Flag for next Tick Event.
    365                  ClrDataReady();
   \   00000028   0x.... 0x....      BL       ClrDataReady
    366                  // Increment Cnt and Report...
    367                  ble.TackCnt++;
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable20_6
   \   00000030   0xF890 0x019A      LDRB     R0,[R0, #+410]
   \   00000034   0x1C40             ADDS     R0,R0,#+1
   \   00000036   0x.... 0x....      LDR.W    R1,??DataTable20_6
   \   0000003A   0xF881 0x019A      STRB     R0,[R1, #+410]
    368                  sprintf( (char *)tempBffr2, "<TACK Strike:%d/%d>", ble.TackCnt, RoadBrd_Get_TackLimit() );
   \   0000003E   0x.... 0x....      BL       RoadBrd_Get_TackLimit
   \   00000042   0x0003             MOVS     R3,R0
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable20_6
   \   00000048   0xF890 0x219A      LDRB     R2,[R0, #+410]
   \   0000004C   0x.... 0x....      LDR.W    R1,??DataTable20_31
   \   00000050   0x4668             MOV      R0,SP
   \   00000052   0x.... 0x....      BL       sprintf
    369                  RoadBrd_UART_Transmit(MONITOR_UART, tempBffr2);
   \   00000056   0x4669             MOV      R1,SP
   \   00000058   0x2000             MOVS     R0,#+0
   \   0000005A   0x.... 0x....      BL       RoadBrd_UART_Transmit
    370          
    371                  if (ble.TackCnt > RoadBrd_Get_TackLimit())
   \   0000005E   0x.... 0x....      BL       RoadBrd_Get_TackLimit
   \   00000062   0x.... 0x....      LDR.W    R1,??DataTable20_6
   \   00000066   0xF891 0x119A      LDRB     R1,[R1, #+410]
   \   0000006A   0x4288             CMP      R0,R1
   \   0000006C   0xD20F             BCS.N    ??BGM111_SyncModeTest_3
    372                  {
    373                    // Time to process error and reset code....NO Choice.
    374                    RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)"<BGMSYNC_CNCTCLOSE>");
   \   0000006E   0x.... 0x....      LDR.W    R1,??DataTable20_32
   \   00000072   0x2000             MOVS     R0,#+0
   \   00000074   0x.... 0x....      BL       RoadBrd_UART_Transmit
    375                    RdBrd_ErrCdLogErrCd( ERROR_BGM_SYNCCNCT, MODULE_bgm111 );
   \   00000078   0x2102             MOVS     R1,#+2
   \   0000007A   0x2012             MOVS     R0,#+18
   \   0000007C   0x.... 0x....      BL       RdBrd_ErrCdLogErrCd
    376                    Clr_HrtBeat_Cnt();
   \   00000080   0x.... 0x....      BL       Clr_HrtBeat_Cnt
    377                    RdBrd_BlinkErrCd( ERROR_BGM_SYNCCNCT );
   \   00000084   0x2012             MOVS     R0,#+18
   \   00000086   0x.... 0x....      BL       RdBrd_BlinkErrCd
    378                    //RoadBrd_Delay( 1000 );
    379                    HAL_NVIC_SystemReset();
   \   0000008A   0x.... 0x....      BL       HAL_NVIC_SystemReset
    380                  } // EndIf (ble.TackCnt >TACK_LIMIT)
    381                } // EndIf ( TstDataReady() )
    382                return false;
   \                     ??BGM111_SyncModeTest_3: (+1)
   \   0000008E   0x2000             MOVS     R0,#+0
   \   00000090   0xE000             B.N      ??BGM111_SyncModeTest_2
    383              } // EndElse (ble.SyncFlag == SYNC_PROC)
    384            } // EndIf (ble.TackArmed == TACK_SYNC)
    385            // No....Then we can continue process. Return true.
    386            else
    387              return true;
   \                     ??BGM111_SyncModeTest_0: (+1)
   \   00000092   0x2001             MOVS     R0,#+1
   \                     ??BGM111_SyncModeTest_2: (+1)
   \   00000094   0xB005             ADD      SP,SP,#+20
   \   00000096   0xBD00             POP      {PC}             ;; return
    388          }
    389          
    390          /**
    391            * @brief  Check whether the BLE module is in Sync Mode and Waiting for ACK.
    392            * @retval bool:         true(1):        Sync Ready for Processing next Frame.
    393            *                       false(0):       Sync needs to wait.
    394            */

   \                                 In section .text, align 2, keep-with-next
    395          bool BGM111_SyncModeTestNoInc(void)
    396          {
    397            // Is Sync Mode armed? Yes.. Then Need to test SyncFlag
    398            if (ble.TackArmed == TACK_SYNC)
   \                     BGM111_SyncModeTestNoInc: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable20_6
   \   00000004   0xF890 0x0199      LDRB     R0,[R0, #+409]
   \   00000008   0x2803             CMP      R0,#+3
   \   0000000A   0xD109             BNE.N    ??BGM111_SyncModeTestNoInc_0
    399            {
    400              // If SyncFlag is SYNC_PROC, then allow Frame send.
    401              if (ble.SyncFlag == SYNC_PROC)
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable20_6
   \   00000010   0xF890 0x019B      LDRB     R0,[R0, #+411]
   \   00000014   0x2801             CMP      R0,#+1
   \   00000016   0xD101             BNE.N    ??BGM111_SyncModeTestNoInc_1
    402                return true;
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0xE002             B.N      ??BGM111_SyncModeTestNoInc_2
    403              else
    404                return false;
   \                     ??BGM111_SyncModeTestNoInc_1: (+1)
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0xE000             B.N      ??BGM111_SyncModeTestNoInc_2
    405            } // EndIf (ble.TackArmed == TACK_SYNC)
    406            // No....Then we can continue process. Return true.
    407            else
    408              return true;
   \                     ??BGM111_SyncModeTestNoInc_0: (+1)
   \   00000020   0x2001             MOVS     R0,#+1
   \                     ??BGM111_SyncModeTestNoInc_2: (+1)
   \   00000022   0x4770             BX       LR               ;; return
    409          }
    410          
    411          /**
    412            * @brief  Set new Value for Sync Flag.
    413            * @param uint8_t:       SYNC_WAIT(0):       Force Wait on all tests to send additional data
    414            *                       SYNC_PROC(1):       Allow sending of additional frame of data.
    415            * @retval None
    416            */

   \                                 In section .text, align 2, keep-with-next
    417          void BGM111_SetSyncFlg(uint8_t NewFlag)
    418          {
    419            ble.SyncFlag = NewFlag;
   \                     BGM111_SetSyncFlg: (+1)
   \   00000000   0x.... 0x....      LDR.W    R1,??DataTable20_6
   \   00000004   0xF881 0x019B      STRB     R0,[R1, #+411]
    420          }
   \   00000008   0x4770             BX       LR               ;; return
    421          
    422          /**
    423            * @brief  Set new Value for Sync Flag if in SYNC Mode.
    424            * @param uint8_t:       SYNC_WAIT(0):       Force Wait on all tests to send additional data
    425            *                       SYNC_PROC(1):       Allow sending of additional frame of data.
    426            * @retval None
    427            */

   \                                 In section .text, align 2, keep-with-next
    428          void BGM111_cntrlSetSyncFlg(uint8_t NewFlag)
    429          {
    430            // Is Sync Mode armed? Yes.. Then Need to test SyncFlag
    431            if (ble.TackArmed == TACK_SYNC)
   \                     BGM111_cntrlSetSyncFlg: (+1)
   \   00000000   0x.... 0x....      LDR.W    R1,??DataTable20_6
   \   00000004   0xF891 0x1199      LDRB     R1,[R1, #+409]
   \   00000008   0x2903             CMP      R1,#+3
   \   0000000A   0xD103             BNE.N    ??BGM111_cntrlSetSyncFlg_0
    432            {
    433              ble.SyncFlag = NewFlag;
   \   0000000C   0x.... 0x....      LDR.W    R1,??DataTable20_6
   \   00000010   0xF881 0x019B      STRB     R0,[R1, #+411]
    434            }
    435          }
   \                     ??BGM111_cntrlSetSyncFlg_0: (+1)
   \   00000014   0x4770             BX       LR               ;; return
    436          
    437          /**
    438            * @brief  Return Tack State.
    439            * @retval uint8_t:      TACK_OFF      = 0        Power Up Initialized Value.
    440            *                       TACK_ARMED    = 1        Set when Connection has been detected.
    441            *                       TACK_ARMED2   = 2        Set when First Tick Generated assuming TACK_ARMED State detected.
    442            *                       TACK_SYNC     = 3        Set when first TACK detected while a TACK_ARMED2 State detected.
    443            *                       TACK_ASYNC    = 4        Set when next TICK detected while TACK_ARMED2 State active.
    444            */

   \                                 In section .text, align 2, keep-with-next
    445          uint8_t BGM111_GetTackState(void)
    446          {
    447            return ble.TackArmed;
   \                     BGM111_GetTackState: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable20_6
   \   00000004   0xF890 0x0199      LDRB     R0,[R0, #+409]
   \   00000008   0x4770             BX       LR               ;; return
    448          }
    449          
    450          /**
    451            * @brief  Set Tack State.
    452            * @param uint8_t:       TACK_OFF      = 0        Power Up Initialized Value.
    453            *                       TACK_ARMED    = 1        Set when Connection has been detected.
    454            *                       TACK_ARMED2   = 2        Set when First Tick Generated assuming TACK_ARMED State detected.
    455            *                       TACK_SYNC     = 3        Set when first TACK detected while a TACK_ARMED2 State detected.
    456            *                       TACK_ASYNC    = 4        Set when next TICK detected while TACK_ARMED2 State active.
    457            * @retval None
    458            */

   \                                 In section .text, align 2, keep-with-next
    459          void BGM111_SetTackState(uint8_t NewValue)
    460          {
    461            ble.TackArmed = NewValue;
   \                     BGM111_SetTackState: (+1)
   \   00000000   0x.... 0x....      LDR.W    R1,??DataTable20_6
   \   00000004   0xF881 0x0199      STRB     R0,[R1, #+409]
    462          }
   \   00000008   0x4770             BX       LR               ;; return
    463          
    464          /**
    465            * @brief  This interrupt handler is called to handle the Usart3 interruptes.
    466            *         from the BGM111
    467            * @param  None
    468            * @retval None
    469            */

   \                                 In section .text, align 2, keep-with-next
    470          void BGM111_UART_IRQHandler(UART_HandleTypeDef *huart)
    471          {
   \                     BGM111_UART_IRQHandler: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    472            /* Transmit register empty? */
    473            //if (USART_GetITStatus(BGM111_UART, USART_IT_TXE) == SET)
    474            if (__HAL_UART_GET_FLAG(huart, UART_FLAG_TXE) == SET)
   \   00000004   0x6820             LDR      R0,[R4, #+0]
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x0600             LSLS     R0,R0,#+24
   \   0000000A   0xD526             BPL.N    ??BGM111_UART_IRQHandler_0
    475            {
    476              /* Are we still sending data? */
    477              if (ble.tx_rd != ble.tx_wr)
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable20_6
   \   00000010   0xF890 0x00C9      LDRB     R0,[R0, #+201]
   \   00000014   0x.... 0x....      LDR.W    R1,??DataTable20_6
   \   00000018   0xF891 0x10C8      LDRB     R1,[R1, #+200]
   \   0000001C   0x4288             CMP      R0,R1
   \   0000001E   0xD015             BEQ.N    ??BGM111_UART_IRQHandler_1
    478              {
    479                /* Send a byte */
    480                USART_SendData(huart, ble.tx_buf[ble.tx_rd]);
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable20_6
   \   00000024   0x.... 0x....      LDR.W    R1,??DataTable20_6
   \   00000028   0xF891 0x10C9      LDRB     R1,[R1, #+201]
   \   0000002C   0x5C41             LDRB     R1,[R0, R1]
   \   0000002E   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000030   0x0020             MOVS     R0,R4
   \   00000032   0x.... 0x....      BL       USART_SendData
    481                /* Bump the index */
    482                ble.tx_rd = NextBufIdx(ble.tx_rd);
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable20_6
   \   0000003A   0xF890 0x00C9      LDRB     R0,[R0, #+201]
   \   0000003E   0x.... 0x....      BL       NextBufIdx
   \   00000042   0x.... 0x....      LDR.W    R1,??DataTable20_6
   \   00000046   0xF881 0x00C9      STRB     R0,[R1, #+201]
   \   0000004A   0xE006             B.N      ??BGM111_UART_IRQHandler_0
    483              }
    484              else
    485              {
    486                /* Turn off the transmit interrupt */
    487                __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
   \                     ??BGM111_UART_IRQHandler_1: (+1)
   \   0000004C   0x6820             LDR      R0,[R4, #+0]
   \   0000004E   0x68C0             LDR      R0,[R0, #+12]
   \   00000050   0xF07F 0x0180      MVNS     R1,#+128
   \   00000054   0x4008             ANDS     R0,R1,R0
   \   00000056   0x6821             LDR      R1,[R4, #+0]
   \   00000058   0x60C8             STR      R0,[R1, #+12]
    488              }
    489            }
    490            
    491            /* Was there an error? */
    492            if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE | 
    493                HAL_UART_ERROR_PE | UART_FLAG_NE | UART_FLAG_FE) == SET)
   \                     ??BGM111_UART_IRQHandler_0: (+1)
   \   0000005A   0x6820             LDR      R0,[R4, #+0]
   \   0000005C   0x6800             LDR      R0,[R0, #+0]
   \   0000005E   0xF010 0x000F      ANDS     R0,R0,#0xF
   \   00000062   0x280F             CMP      R0,#+15
   \   00000064   0xD107             BNE.N    ??BGM111_UART_IRQHandler_2
    494            {
    495              /* Reset the receive state */
    496              ble.rx_state = BGRX_SYNC;
   \   00000066   0x2000             MOVS     R0,#+0
   \   00000068   0x....             LDR.N    R1,??DataTable20_6
   \   0000006A   0xF881 0x0194      STRB     R0,[R1, #+404]
    497              /* Clear the error by reading the data register */
    498              USART_ReceiveData(huart);
   \   0000006E   0x0020             MOVS     R0,R4
   \   00000070   0x.... 0x....      BL       USART_ReceiveData
    499              /* We're done */
    500              return;
   \   00000074   0xE00B             B.N      ??BGM111_UART_IRQHandler_3
    501            }
    502          
    503            /* Was a new byte received? */
    504            if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE) == SET)
   \                     ??BGM111_UART_IRQHandler_2: (+1)
   \   00000076   0x6820             LDR      R0,[R4, #+0]
   \   00000078   0x6800             LDR      R0,[R0, #+0]
   \   0000007A   0x0680             LSLS     R0,R0,#+26
   \   0000007C   0xD507             BPL.N    ??BGM111_UART_IRQHandler_4
    505            {
    506              /* Get the byte (this also clears the flag) */
    507              uint8_t c = USART_ReceiveData(huart);
   \   0000007E   0x0020             MOVS     R0,R4
   \   00000080   0x.... 0x....      BL       USART_ReceiveData
   \   00000084   0x0005             MOVS     R5,R0
    508              /* Process the received character... */
    509              RoadBrd_ProcessBGMChar(c);
   \   00000086   0x0028             MOVS     R0,R5
   \   00000088   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000008A   0x.... 0x....      BL       RoadBrd_ProcessBGMChar
    510            }
    511          }
   \                     ??BGM111_UART_IRQHandler_4: (+1)
   \                     ??BGM111_UART_IRQHandler_3: (+1)
   \   0000008E   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    512          
    513          /* Transmit data to the BGM111 module */
    514          /**
    515            * @brief  Returns the most recent received data by the USARTx peripheral.
    516            * @param  USARTx: Select the USART peripheral. 
    517            *   This parameter can be one of the following values:
    518            *   USART1, USART2, USART3, UART4 or UART5.
    519            * @retval The received data.
    520            */

   \                                 In section .text, align 4, keep-with-next
    521          void BGM111_Transmit(uint32_t len, uint8_t *data)
    522          {
   \                     BGM111_Transmit: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    523            uint32_t tempmsg;
    524            uint32_t timeout_Cnt;
    525            
    526            // Log MSG into buffer
    527            tempmsg = 0xff000000 | len;
   \   00000008   0xF054 0x407F      ORRS     R0,R4,#0xFF000000
   \   0000000C   0x0006             MOVS     R6,R0
    528            blemsgs.msgBuff[blemsgs.tx_wr] = tempmsg;
   \   0000000E   0x....             LDR.N    R0,??DataTable20_5
   \   00000010   0x....             LDR.N    R1,??DataTable20_5
   \   00000012   0xF8B1 0x1320      LDRH     R1,[R1, #+800]
   \   00000016   0xF840 0x6021      STR      R6,[R0, R1, LSL #+2]
    529            blemsgs.tx_wr = NextBufIdx(blemsgs.tx_wr);
   \   0000001A   0x....             LDR.N    R0,??DataTable20_5
   \   0000001C   0xF8B0 0x0320      LDRH     R0,[R0, #+800]
   \   00000020   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000022   0x.... 0x....      BL       NextBufIdx
   \   00000026   0x....             LDR.N    R1,??DataTable20_5
   \   00000028   0xF8A1 0x0320      STRH     R0,[R1, #+800]
    530            tempmsg = (uint32_t)(data[0]<<24) + (uint32_t)(data[1]<<16) + (uint32_t)(data[2]<<8) + (uint32_t)(data[3]);
   \   0000002C   0x7828             LDRB     R0,[R5, #+0]
   \   0000002E   0x7869             LDRB     R1,[R5, #+1]
   \   00000030   0x0409             LSLS     R1,R1,#+16
   \   00000032   0xEB11 0x6000      ADDS     R0,R1,R0, LSL #+24
   \   00000036   0x78A9             LDRB     R1,[R5, #+2]
   \   00000038   0xEB10 0x2001      ADDS     R0,R0,R1, LSL #+8
   \   0000003C   0x78E9             LDRB     R1,[R5, #+3]
   \   0000003E   0x1808             ADDS     R0,R1,R0
   \   00000040   0x0006             MOVS     R6,R0
    531            blemsgs.msgBuff[blemsgs.tx_wr] = tempmsg;
   \   00000042   0x....             LDR.N    R0,??DataTable20_5
   \   00000044   0x....             LDR.N    R1,??DataTable20_5
   \   00000046   0xF8B1 0x1320      LDRH     R1,[R1, #+800]
   \   0000004A   0xF840 0x6021      STR      R6,[R0, R1, LSL #+2]
    532            blemsgs.tx_wr = NextBufIdx(blemsgs.tx_wr);
   \   0000004E   0x....             LDR.N    R0,??DataTable20_5
   \   00000050   0xF8B0 0x0320      LDRH     R0,[R0, #+800]
   \   00000054   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000056   0x.... 0x....      BL       NextBufIdx
   \   0000005A   0x....             LDR.N    R1,??DataTable20_5
   \   0000005C   0xF8A1 0x0320      STRH     R0,[R1, #+800]
    533            tempmsg = (uint32_t)(data[4]<<24) + (uint32_t)(data[5]<<16) + (uint32_t)(data[6]<<8) + (uint32_t)(data[7]);
   \   00000060   0x7928             LDRB     R0,[R5, #+4]
   \   00000062   0x7969             LDRB     R1,[R5, #+5]
   \   00000064   0x0409             LSLS     R1,R1,#+16
   \   00000066   0xEB11 0x6000      ADDS     R0,R1,R0, LSL #+24
   \   0000006A   0x79A9             LDRB     R1,[R5, #+6]
   \   0000006C   0xEB10 0x2001      ADDS     R0,R0,R1, LSL #+8
   \   00000070   0x79E9             LDRB     R1,[R5, #+7]
   \   00000072   0x1808             ADDS     R0,R1,R0
   \   00000074   0x0006             MOVS     R6,R0
    534            blemsgs.msgBuff[blemsgs.tx_wr] = tempmsg;
   \   00000076   0x....             LDR.N    R0,??DataTable20_5
   \   00000078   0x....             LDR.N    R1,??DataTable20_5
   \   0000007A   0xF8B1 0x1320      LDRH     R1,[R1, #+800]
   \   0000007E   0xF840 0x6021      STR      R6,[R0, R1, LSL #+2]
    535            blemsgs.tx_wr = NextBufIdx(blemsgs.tx_wr);
   \   00000082   0x....             LDR.N    R0,??DataTable20_5
   \   00000084   0xF8B0 0x0320      LDRH     R0,[R0, #+800]
   \   00000088   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000008A   0x.... 0x....      BL       NextBufIdx
   \   0000008E   0x....             LDR.N    R1,??DataTable20_5
   \   00000090   0xF8A1 0x0320      STRH     R0,[R1, #+800]
    536            
    537            /* Add bytes when there is space, wait if necessary */
    538            // OK...But we Can't wait forever...Will place a timeout Count.
    539            timeout_Cnt = TX_TIMEOUT_CNT;
   \   00000094   0xF44F 0x60FA      MOV      R0,#+2000
   \   00000098   0x0007             MOVS     R7,R0
    540            
    541            while (len) {
   \                     ??BGM111_Transmit_0: (+1)
   \   0000009A   0x2C00             CMP      R4,#+0
   \   0000009C   0xD03D             BEQ.N    ??BGM111_Transmit_1
    542              /* Get the next write index */
    543              uint8_t nextidx = NextBufIdx(ble.tx_wr);
   \   0000009E   0x....             LDR.N    R0,??DataTable20_6
   \   000000A0   0xF890 0x00C8      LDRB     R0,[R0, #+200]
   \   000000A4   0x.... 0x....      BL       NextBufIdx
   \   000000A8   0x4680             MOV      R8,R0
    544              /* We're not hitting the read index? (There is space?) */
    545              if (nextidx != ble.tx_rd)
   \   000000AA   0x4640             MOV      R0,R8
   \   000000AC   0x....             LDR.N    R1,??DataTable20_6
   \   000000AE   0xF891 0x10C9      LDRB     R1,[R1, #+201]
   \   000000B2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000B4   0x4288             CMP      R0,R1
   \   000000B6   0xD01E             BEQ.N    ??BGM111_Transmit_2
    546              {
    547                /* Put the data in the buffer */
    548                ble.tx_buf[ble.tx_wr] = *data;
   \   000000B8   0x7828             LDRB     R0,[R5, #+0]
   \   000000BA   0x....             LDR.N    R1,??DataTable20_6
   \   000000BC   0x....             LDR.N    R2,??DataTable20_6
   \   000000BE   0xF892 0x20C8      LDRB     R2,[R2, #+200]
   \   000000C2   0x5488             STRB     R0,[R1, R2]
    549          
    550                /* Disable interrupt */
    551                HAL_NVIC_DisableIRQ(USART3_IRQn);
   \   000000C4   0x2027             MOVS     R0,#+39
   \   000000C6   0x.... 0x....      BL       HAL_NVIC_DisableIRQ
    552                /* Trigger an interrupt if we're starting with an empty buffer */
    553                if (ble.tx_wr == ble.tx_rd)
   \   000000CA   0x....             LDR.N    R0,??DataTable20_6
   \   000000CC   0xF890 0x00C8      LDRB     R0,[R0, #+200]
   \   000000D0   0x....             LDR.N    R1,??DataTable20_6
   \   000000D2   0xF891 0x10C9      LDRB     R1,[R1, #+201]
   \   000000D6   0x4288             CMP      R0,R1
   \   000000D8   0xD101             BNE.N    ??BGM111_Transmit_3
    554                {
    555                  HAL_UART_EnableBGM_TXE();
   \   000000DA   0x.... 0x....      BL       HAL_UART_EnableBGM_TXE
    556                }
    557                /* Increment the write index */
    558                ble.tx_wr = nextidx;
   \                     ??BGM111_Transmit_3: (+1)
   \   000000DE   0x....             LDR.N    R0,??DataTable20_6
   \   000000E0   0xF880 0x80C8      STRB     R8,[R0, #+200]
    559                /* Enable interrupt */
    560                HAL_NVIC_EnableIRQ(USART3_IRQn);
   \   000000E4   0x2027             MOVS     R0,#+39
   \   000000E6   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    561          
    562                /* Update the incoming data length and pointer */
    563                len--;
   \   000000EA   0x1E64             SUBS     R4,R4,#+1
    564                data++;
   \   000000EC   0x1C6D             ADDS     R5,R5,#+1
    565                //Found Space...Reset Count.
    566                timeout_Cnt = TX_TIMEOUT_CNT;
   \   000000EE   0xF44F 0x60FA      MOV      R0,#+2000
   \   000000F2   0x0007             MOVS     R7,R0
   \   000000F4   0xE7D1             B.N      ??BGM111_Transmit_0
    567              }
    568              else
    569              {
    570                //Decrement Count
    571                if ( timeout_Cnt-- == 0)
   \                     ??BGM111_Transmit_2: (+1)
   \   000000F6   0x0038             MOVS     R0,R7
   \   000000F8   0x1E47             SUBS     R7,R0,#+1
   \   000000FA   0x2800             CMP      R0,#+0
   \   000000FC   0xD1CD             BNE.N    ??BGM111_Transmit_0
    572                {
    573                  // If this happens...NOT BOOTED..Clear ths flag or infinite loop.
    574                  ble.booted = false;
   \   000000FE   0x2000             MOVS     R0,#+0
   \   00000100   0x....             LDR.N    R1,??DataTable20_6
   \   00000102   0xF881 0x0196      STRB     R0,[R1, #+406]
    575                  // We have detected a ERROR_TXBGMBUF_FULL error on BGM111...Log it!
    576                  RdBrd_ErrCdLogErrCd( ERROR_TXBGMBUF_FULL, MODULE_bgm111 );
   \   00000106   0x2102             MOVS     R1,#+2
   \   00000108   0x200F             MOVS     R0,#+15
   \   0000010A   0x.... 0x....      BL       RdBrd_ErrCdLogErrCd
    577                  RdBrd_BlinkErrCd( ERROR_TXBGMBUF_FULL );
   \   0000010E   0x200F             MOVS     R0,#+15
   \   00000110   0x.... 0x....      BL       RdBrd_BlinkErrCd
    578                  HAL_NVIC_SystemReset();
   \   00000114   0x.... 0x....      BL       HAL_NVIC_SystemReset
   \   00000118   0xE7BF             B.N      ??BGM111_Transmit_0
    579                }
    580              }
    581            }
    582          }
   \                     ??BGM111_Transmit_1: (+1)
   \   0000011A   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    583          
    584          /**
    585            * @brief  Transmits single data through the USARTx peripheral.
    586            * @param  USARTx: Select the USART peripheral. 
    587            *   This parameter can be one of the following values:
    588            *   USART1, USART2, USART3, UART4 or UART5.
    589            * @param  Data: the data to transmit.
    590            * @retval None.
    591            */

   \                                 In section .text, align 2, keep-with-next
    592          void USART_SendData(UART_HandleTypeDef *huart, uint16_t Data)
    593          {
    594            /* Transmit Data */
    595            huart->Instance->DR = (Data & (uint16_t)0x01FF);
   \                     USART_SendData: (+1)
   \   00000000   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000002   0x05CA             LSLS     R2,R1,#+23       ;; ZeroExtS R2,R1,#+23,#+23
   \   00000004   0x0DD2             LSRS     R2,R2,#+23
   \   00000006   0x6803             LDR      R3,[R0, #+0]
   \   00000008   0x605A             STR      R2,[R3, #+4]
    596          }
   \   0000000A   0x4770             BX       LR               ;; return
    597          
    598          /**
    599            * @brief  Returns the most recent received data by the USARTx peripheral.
    600            * @param  USARTx: Select the USART peripheral. 
    601            *   This parameter can be one of the following values:
    602            *   USART1, USART2, USART3, UART4 or UART5.
    603            * @retval The received data.
    604            */

   \                                 In section .text, align 2, keep-with-next
    605          uint16_t USART_ReceiveData(UART_HandleTypeDef *huart)
    606          {
    607            /* Receive Data */
    608            return (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
   \                     USART_ReceiveData: (+1)
   \   00000000   0x6800             LDR      R0,[R0, #+0]
   \   00000002   0x6840             LDR      R0,[R0, #+4]
   \   00000004   0x05C0             LSLS     R0,R0,#+23       ;; ZeroExtS R0,R0,#+23,#+23
   \   00000006   0x0DC0             LSRS     R0,R0,#+23
   \   00000008   0x4770             BX       LR               ;; return
    609          }
    610          
    611          /**
    612            * @brief  This routine Process the passed character as part of the process of building status
    613            *         from the BGM111
    614            * @param  uint8_t c: Character to process.
    615            * @retval HAL_StatusTypeDef:     HAL_OK:       Tasking of block of data to UART success.
    616            *                                HAL_ERROR:    Error found in Tasking or data passed.
    617            *                                HAL_BUSY:     UART is busy.
    618            *                                HAL_TIMEOUT:  UART timed out.
    619            */

   \                                 In section .text, align 2, keep-with-next
    620          HAL_StatusTypeDef RoadBrd_ProcessBGMChar(uint8_t c)
    621          {
   \                     RoadBrd_ProcessBGMChar: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB08F             SUB      SP,SP,#+60
   \   00000004   0x0004             MOVS     R4,R0
    622          //  static uint8_t header_cnt, payload_cnt, payload_len;
    623            HAL_StatusTypeDef Status;
    624            static uint8_t tempBffr2[40];
    625            uint8_t tempBffr3[60];
    626            static uint8_t in_ptr = 0;
    627            
    628            // First pull new character into buffer.
    629            tempBffr2[in_ptr++] = c;
   \   00000006   0x....             LDR.N    R0,??DataTable20_33
   \   00000008   0x....             LDR.N    R1,??DataTable20_34
   \   0000000A   0x7809             LDRB     R1,[R1, #+0]
   \   0000000C   0x5444             STRB     R4,[R0, R1]
   \   0000000E   0x....             LDR.N    R0,??DataTable20_34
   \   00000010   0x7800             LDRB     R0,[R0, #+0]
   \   00000012   0x1C40             ADDS     R0,R0,#+1
   \   00000014   0x....             LDR.N    R1,??DataTable20_34
   \   00000016   0x7008             STRB     R0,[R1, #+0]
    630            // Now, Did we get a termination character?
    631            if( (c == 0x0a)  ||
    632                (c == '?') )
   \   00000018   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001A   0x2C0A             CMP      R4,#+10
   \   0000001C   0xD003             BEQ.N    ??RoadBrd_ProcessBGMChar_0
   \   0000001E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000020   0x2C3F             CMP      R4,#+63
   \   00000022   0xF040 0x80BD      BNE.W    ??RoadBrd_ProcessBGMChar_1
    633            {
    634              // Reset Ptr.
    635              in_ptr = 0;
   \                     ??RoadBrd_ProcessBGMChar_0: (+1)
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x....             LDR.N    R1,??DataTable20_34
   \   0000002A   0x7008             STRB     R0,[R1, #+0]
    636          
    637              // Yes...We will now test contents of buffer. And then reset ptr back to 0.
    638              sprintf( (char *)tempBffr3, "\r\n<<FULL STRING>>: %s \r\n", tempBffr2);
   \   0000002C   0x....             LDR.N    R2,??DataTable20_33
   \   0000002E   0x....             LDR.N    R1,??DataTable20_35
   \   00000030   0x4668             MOV      R0,SP
   \   00000032   0x.... 0x....      BL       sprintf
    639              Status = RoadBrd_UART_Transmit(MONITOR_UART, tempBffr3);
   \   00000036   0x4669             MOV      R1,SP
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000003E   0x0005             MOVS     R5,R0
    640              if (Status != HAL_OK)
   \   00000040   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000042   0x2D00             CMP      R5,#+0
   \   00000044   0xD002             BEQ.N    ??RoadBrd_ProcessBGMChar_2
    641                return Status;
   \   00000046   0x0028             MOVS     R0,R5
   \   00000048   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004A   0xE0AB             B.N      ??RoadBrd_ProcessBGMChar_3
    642              // Test Strings for Key items.
    643              // Boot String?
    644              if (strncmp((char *)tempBffr2,"Boot",4) == 0)
   \                     ??RoadBrd_ProcessBGMChar_2: (+1)
   \   0000004C   0x2204             MOVS     R2,#+4
   \   0000004E   0x....             LDR.N    R1,??DataTable20_36
   \   00000050   0x....             LDR.N    R0,??DataTable20_33
   \   00000052   0x.... 0x....      BL       strncmp
   \   00000056   0x2800             CMP      R0,#+0
   \   00000058   0xD10D             BNE.N    ??RoadBrd_ProcessBGMChar_4
    645              {
    646                // Yes....Set Boot Flag.
    647                ble.booted = true;
   \   0000005A   0x2001             MOVS     R0,#+1
   \   0000005C   0x....             LDR.N    R1,??DataTable20_6
   \   0000005E   0xF881 0x0196      STRB     R0,[R1, #+406]
    648                // If we are booted....Then lets arm TACK Test Code.
    649                ble.data_Connection = false;
   \   00000062   0x2000             MOVS     R0,#+0
   \   00000064   0x....             LDR.N    R1,??DataTable20_6
   \   00000066   0xF881 0x0198      STRB     R0,[R1, #+408]
    650                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)"<ble.booted> ");
   \   0000006A   0x....             LDR.N    R1,??DataTable20_37
   \   0000006C   0x2000             MOVS     R0,#+0
   \   0000006E   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000072   0x0005             MOVS     R5,R0
   \   00000074   0xE094             B.N      ??RoadBrd_ProcessBGMChar_1
    651              }
    652              // Connection String?
    653              else if (strncmp((char *)tempBffr2,"Connected",9) == 0)
   \                     ??RoadBrd_ProcessBGMChar_4: (+1)
   \   00000076   0x2209             MOVS     R2,#+9
   \   00000078   0x....             LDR.N    R1,??DataTable20_38
   \   0000007A   0x....             LDR.N    R0,??DataTable20_33
   \   0000007C   0x.... 0x....      BL       strncmp
   \   00000080   0x2800             CMP      R0,#+0
   \   00000082   0xD115             BNE.N    ??RoadBrd_ProcessBGMChar_5
    654              {
    655                // Yes....Set Boot Flag.
    656                ble.connection = true;
   \   00000084   0x2001             MOVS     R0,#+1
   \   00000086   0x....             LDR.N    R1,??DataTable20_6
   \   00000088   0xF881 0x0197      STRB     R0,[R1, #+407]
    657                ble.TackArmed = TACK_ARMED;
   \   0000008C   0x2001             MOVS     R0,#+1
   \   0000008E   0x....             LDR.N    R1,??DataTable20_6
   \   00000090   0xF881 0x0199      STRB     R0,[R1, #+409]
    658                ble.TackCnt = 0;
   \   00000094   0x2000             MOVS     R0,#+0
   \   00000096   0x....             LDR.N    R1,??DataTable20_6
   \   00000098   0xF881 0x019A      STRB     R0,[R1, #+410]
    659                RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)"<ble.TackArmed = TACK_ARMED>");
   \   0000009C   0x....             LDR.N    R1,??DataTable20_39
   \   0000009E   0x2000             MOVS     R0,#+0
   \   000000A0   0x.... 0x....      BL       RoadBrd_UART_Transmit
    660                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)"<ble.connection> ");
   \   000000A4   0x....             LDR.N    R1,??DataTable20_40
   \   000000A6   0x2000             MOVS     R0,#+0
   \   000000A8   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000000AC   0x0005             MOVS     R5,R0
   \   000000AE   0xE077             B.N      ??RoadBrd_ProcessBGMChar_1
    661          
    662              }
    663              // Disconnection String?
    664              else if (strncmp((char *)tempBffr2,"Disconnected",12) == 0)
   \                     ??RoadBrd_ProcessBGMChar_5: (+1)
   \   000000B0   0x220C             MOVS     R2,#+12
   \   000000B2   0x....             LDR.N    R1,??DataTable20_41
   \   000000B4   0x....             LDR.N    R0,??DataTable20_33
   \   000000B6   0x.... 0x....      BL       strncmp
   \   000000BA   0x2800             CMP      R0,#+0
   \   000000BC   0xD11D             BNE.N    ??RoadBrd_ProcessBGMChar_6
    665              {
    666                // Yes....Clear Flags.
    667                ble.connection = false;
   \   000000BE   0x2000             MOVS     R0,#+0
   \   000000C0   0x....             LDR.N    R1,??DataTable20_6
   \   000000C2   0xF881 0x0197      STRB     R0,[R1, #+407]
    668                ble.data_Connection = false;
   \   000000C6   0x2000             MOVS     R0,#+0
   \   000000C8   0x....             LDR.N    R1,??DataTable20_6
   \   000000CA   0xF881 0x0198      STRB     R0,[R1, #+408]
    669                ble.TackArmed = TACK_ARMED;
   \   000000CE   0x2001             MOVS     R0,#+1
   \   000000D0   0x....             LDR.N    R1,??DataTable20_6
   \   000000D2   0xF881 0x0199      STRB     R0,[R1, #+409]
    670                ble.TackCnt = 0;
   \   000000D6   0x2000             MOVS     R0,#+0
   \   000000D8   0x....             LDR.N    R1,??DataTable20_6
   \   000000DA   0xF881 0x019A      STRB     R0,[R1, #+410]
    671                RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)"<ble.TackArmed = TACK_ARMED>");
   \   000000DE   0x....             LDR.N    R1,??DataTable20_39
   \   000000E0   0x2000             MOVS     R0,#+0
   \   000000E2   0x.... 0x....      BL       RoadBrd_UART_Transmit
    672                ClrDataStructure();                           // Clear Backup data structure.
   \   000000E6   0x.... 0x....      BL       ClrDataStructure
    673                ClrAnalyticsRepeat();                          // Clear Frame Repeat Count.
   \   000000EA   0x.... 0x....      BL       ClrAnalyticsRepeat
    674                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)"<DISCONNECTED> ");
   \   000000EE   0x....             LDR.N    R1,??DataTable20_42
   \   000000F0   0x2000             MOVS     R0,#+0
   \   000000F2   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000000F6   0x0005             MOVS     R5,R0
   \   000000F8   0xE052             B.N      ??RoadBrd_ProcessBGMChar_1
    675              }
    676              // Data String?
    677              else if (strncmp((char *)tempBffr2,"DATA",4) == 0)
   \                     ??RoadBrd_ProcessBGMChar_6: (+1)
   \   000000FA   0x2204             MOVS     R2,#+4
   \   000000FC   0x....             LDR.N    R1,??DataTable20_43
   \   000000FE   0x....             LDR.N    R0,??DataTable20_33
   \   00000100   0x.... 0x....      BL       strncmp
   \   00000104   0x2800             CMP      R0,#+0
   \   00000106   0xD109             BNE.N    ??RoadBrd_ProcessBGMChar_7
    678              {
    679                // Yes....Set Boot Flag.
    680                ble.data_Connection = true;
   \   00000108   0x2001             MOVS     R0,#+1
   \   0000010A   0x....             LDR.N    R1,??DataTable20_6
   \   0000010C   0xF881 0x0198      STRB     R0,[R1, #+408]
    681                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)"<ble.data_Connection> ");
   \   00000110   0x....             LDR.N    R1,??DataTable20_44
   \   00000112   0x2000             MOVS     R0,#+0
   \   00000114   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000118   0x0005             MOVS     R5,R0
   \   0000011A   0xE041             B.N      ??RoadBrd_ProcessBGMChar_1
    682              }
    683              // TACK String?
    684              else if (strncmp((char *)tempBffr2,"<TACK",5) == 0)
   \                     ??RoadBrd_ProcessBGMChar_7: (+1)
   \   0000011C   0x2205             MOVS     R2,#+5
   \   0000011E   0x....             LDR.N    R1,??DataTable20_45
   \   00000120   0x....             LDR.N    R0,??DataTable20_33
   \   00000122   0x.... 0x....      BL       strncmp
   \   00000126   0x2800             CMP      R0,#+0
   \   00000128   0xD124             BNE.N    ??RoadBrd_ProcessBGMChar_8
    685              {
    686                if (ble.TackArmed == TACK_ARMED2)
   \   0000012A   0x....             LDR.N    R0,??DataTable20_6
   \   0000012C   0xF890 0x0199      LDRB     R0,[R0, #+409]
   \   00000130   0x2802             CMP      R0,#+2
   \   00000132   0xD10D             BNE.N    ??RoadBrd_ProcessBGMChar_9
    687                {
    688                  ble.TackArmed = TACK_SYNC;
   \   00000134   0x2003             MOVS     R0,#+3
   \   00000136   0x....             LDR.N    R1,??DataTable20_6
   \   00000138   0xF881 0x0199      STRB     R0,[R1, #+409]
    689                  ble.TackCnt = 0;
   \   0000013C   0x2000             MOVS     R0,#+0
   \   0000013E   0x....             LDR.N    R1,??DataTable20_6
   \   00000140   0xF881 0x019A      STRB     R0,[R1, #+410]
    690                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)"<ble.TackArmed=TACK_SYNC>");
   \   00000144   0x....             LDR.N    R1,??DataTable20_46
   \   00000146   0x2000             MOVS     R0,#+0
   \   00000148   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000014C   0x0005             MOVS     R5,R0
   \   0000014E   0xE027             B.N      ??RoadBrd_ProcessBGMChar_1
    691                }
    692                else if (ble.TackArmed == TACK_SYNC)
   \                     ??RoadBrd_ProcessBGMChar_9: (+1)
   \   00000150   0x....             LDR.N    R0,??DataTable20_6
   \   00000152   0xF890 0x0199      LDRB     R0,[R0, #+409]
   \   00000156   0x2803             CMP      R0,#+3
   \   00000158   0xD122             BNE.N    ??RoadBrd_ProcessBGMChar_1
    693                {
    694                  ble.TackCnt = 0;
   \   0000015A   0x2000             MOVS     R0,#+0
   \   0000015C   0x....             LDR.N    R1,??DataTable20_6
   \   0000015E   0xF881 0x019A      STRB     R0,[R1, #+410]
    695                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)"<TACK Received.>");
   \   00000162   0x....             LDR.N    R1,??DataTable20_47
   \   00000164   0x2000             MOVS     R0,#+0
   \   00000166   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000016A   0x0005             MOVS     R5,R0
    696                 // Set Sync Flag for Frame.
    697                  BGM111_SetSyncFlg( SYNC_PROC );
   \   0000016C   0x2001             MOVS     R0,#+1
   \   0000016E   0x.... 0x....      BL       BGM111_SetSyncFlg
   \   00000172   0xE015             B.N      ??RoadBrd_ProcessBGMChar_1
    698                }
    699              }
    700              // NOW TEST FOR PARAMS!!!
    701          
    702              // NOW TEST ERROR CONDITIONS!!!
    703              // OVERFLOW?
    704              else if (strncmp((char *)tempBffr2,"OVERFLOW",8) == 0)
   \                     ??RoadBrd_ProcessBGMChar_8: (+1)
   \   00000174   0x2208             MOVS     R2,#+8
   \   00000176   0x....             LDR.N    R1,??DataTable20_48
   \   00000178   0x....             LDR.N    R0,??DataTable20_33
   \   0000017A   0x.... 0x....      BL       strncmp
   \   0000017E   0x2800             CMP      R0,#+0
   \   00000180   0xD109             BNE.N    ??RoadBrd_ProcessBGMChar_10
    705              {
    706                // Yes....Report Error and Reset.
    707                // We have detected a ERROR_TXBGMBUF_FULL error on BGM111...Log it!
    708                RdBrd_ErrCdLogErrCd( ERROR_BGM_OVERFLOW, MODULE_bgm111 );
   \   00000182   0x2102             MOVS     R1,#+2
   \   00000184   0x2011             MOVS     R0,#+17
   \   00000186   0x.... 0x....      BL       RdBrd_ErrCdLogErrCd
    709                RdBrd_BlinkErrCd( ERROR_BGM_OVERFLOW );
   \   0000018A   0x2011             MOVS     R0,#+17
   \   0000018C   0x.... 0x....      BL       RdBrd_BlinkErrCd
    710                HAL_NVIC_SystemReset();
   \   00000190   0x.... 0x....      BL       HAL_NVIC_SystemReset
   \   00000194   0xE004             B.N      ??RoadBrd_ProcessBGMChar_1
    711              }
    712              else
    713              {
    714                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)"<UNKNOWN STATUS> ");
   \                     ??RoadBrd_ProcessBGMChar_10: (+1)
   \   00000196   0x....             LDR.N    R1,??DataTable20_49
   \   00000198   0x2000             MOVS     R0,#+0
   \   0000019A   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000019E   0x0005             MOVS     R5,R0
    715              }
    716            }
    717            //tempBffr2[0] = c;
    718            //tempBffr2[1] = 0x00;
    719            //Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);
    720            return Status;
   \                     ??RoadBrd_ProcessBGMChar_1: (+1)
   \   000001A0   0x0028             MOVS     R0,R5
   \   000001A2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??RoadBrd_ProcessBGMChar_3: (+1)
   \   000001A4   0xB00F             ADD      SP,SP,#+60
   \   000001A6   0xBD30             POP      {R4,R5,PC}       ;; return
    721          #if 0
    722              Status = HAL_OK;
    723              // Test Buffer. If we are full, An error has occured. Must at least log that.
    724              if (IsBufFull(ble.rx_wr, ble.rx_rd))
    725              {
    726                RdBrd_ErrCdLogErrCd( ERROR_BGMBUF_FULL, MODULE_bgm111 );
    727                Clr_HrtBeat_Cnt();
    728                RdBrd_BlinkErrCd( ERROR_BGMBUF_FULL );
    729                //RoadBrd_Delay( 1000 );
    730                HAL_NVIC_SystemReset();
    731                return HAL_ERROR;
    732              }
    733              /* Execution based on state */
    734              switch (ble.rx_state)
    735              {
    736                /* Waiting for a valid start of header */
    737                default:
    738                case BGRX_SYNC:
    739                  /* Valid start of header? (response or event) */
    740                  if ((c & 0xF8) ==
    741                      ((uint8_t)gecko_dev_type_gecko | (uint8_t)gecko_msg_type_rsp) ||
    742                      (c & 0xF8) ==
    743                      ((uint8_t)gecko_dev_type_gecko | (uint8_t)gecko_msg_type_evt))
    744                  {
    745                    /* Receiving header */
    746                    ble.rx_state = BGRX_HDR;
    747                    /* Initialize header byte counter */
    748                    header_cnt = 0;
    749                  }
    750                  else
    751                  {
    752                    /* Stay in sync state until we receive a valid start of header */
    753                    // We have detected a SYNC error on BGM111...Log it!
    754                    RdBrd_ErrCdLogErrCd( ERROR_BGMSYNC, MODULE_bgm111 );
    755                    Clr_HrtBeat_Cnt();
    756                    if (ble.booted)
    757                      RdBrd_BlinkErrCd( ERROR_BGMSYNC );
    758                    //RoadBrd_Delay( 1000 );
    759                    HAL_NVIC_SystemReset();
    760                    break;
    761                  }
    762                  /* Fallthrough intentional */
    763                /* Receiving header */
    764                case BGRX_HDR:
    765                  if (IsBufFull(ble.rx_wr, ble.rx_rd))
    766                  {
    767                    // Oops...Detected a fatal error...RESET!!!
    768                    // We have detected a SYNC error on BGM111...Log it!
    769                    RdBrd_ErrCdLogErrCd( ERROR_BGMSYNC, MODULE_bgm111 );
    770                    /* Indicate we need to execute the BLE stack, it's the
    771                     * only way to get more space in the buffer */
    772                    ble.req_exec = true;
    773                    /* We're back to synchronizing */
    774                    ble.rx_state = BGRX_SYNC;
    775                  }
    776                  else
    777                  {
    778                    /* Save the received byte */
    779                    /* Save the received byte */
    780                    ble.rx_buf[ble.rx_wr] = c;
    781                    /* Increment the index and header byte counter */
    782                    ble.rx_wr = NextBufIdx(ble.rx_wr);
    783                    header_cnt++;
    784                    /* If this is the second header byte, we can grab the payload
    785                     * length.  We ignore the first byte, since the spec says that
    786                     * due to memory limitations in the modules, the packet is
    787                     * never more than 64 bytes. */
    788                    if (header_cnt == 2)
    789                    {
    790                      /* Get the payload length */
    791                      payload_len = c;
    792                      /* If we have a payload bigger than 60 bytes, something's wrong */
    793                      if (payload_len > 60)
    794                      {
    795                        // We have detected a SYNC error on BGM111...Log it!
    796                        RdBrd_ErrCdLogErrCd( ERROR_BGMSYNC, MODULE_bgm111 );
    797                        /* Reset receive state to synchronizing */
    798                        ble.rx_state = BGRX_SYNC;
    799                        /* Indicate we need to execute the BLE stack to free space */
    800                        ble.req_exec = true;
    801                        Status = HAL_ERROR;
    802                      }
    803                    } // EndIf (header_cnt == 2)
    804                    /* Are we done with the header? */
    805                    if (header_cnt >= BGLIB_MSG_HEADER_LEN)
    806                    {
    807                      /* Is there no payload? */
    808                      if (payload_len == 0)
    809                      {
    810                        /* Reset receive state to synchronizing */
    811                        ble.rx_state = BGRX_SYNC;
    812                        /* Indicate we need to execute the BLE stack to process 
    813                         * the received packet */
    814                        ble.req_exec = true;
    815                      }
    816                      else
    817                      {
    818                        /* Start receiving payload data */
    819                        ble.rx_state = BGRX_DATA;
    820                        /* Initialize the payload counter */
    821                        payload_cnt = 0;
    822                      }
    823                    } // EndIf (header_cnt >= BGLIB_MSG_HEADER_LEN)
    824                  } // EndElse (IsBufFull(ble.rx_wr, ble.rx_rd))
    825                  break;
    826                /* Receiving data */
    827                case BGRX_DATA:
    828                  /* Did we receive a byte, but the buffer is full? */
    829                  if (IsBufFull(ble.rx_wr, ble.rx_rd))
    830                  {
    831                    /* Indicate we need to execute the BLE stack, it's the
    832                     * only way to get more space in the buffer */
    833                    ble.req_exec = true;
    834                    /* We're back to synchronizing */
    835                    ble.rx_state = BGRX_SYNC;
    836                  }
    837                  else
    838                  {
    839                    /* Store the byte */
    840                    ble.rx_buf[ble.rx_wr] = c;
    841                    /* Increment the index and payload byte counter */
    842                    ble.rx_wr = NextBufIdx(ble.rx_wr);
    843                    payload_cnt++;
    844                    /* Is this the end of the packet? */
    845                    if (payload_cnt >= payload_len)
    846                    {
    847                      /* Reset receive state to synchronizing */
    848                      ble.rx_state = BGRX_SYNC;
    849                      /* Indicate we need to execute the BLE stack to process 
    850                       * the received packet */
    851                      ble.req_exec = true;
    852                    }
    853                    /* Is the buffer almost full? */
    854                    if (BufFree(ble.rx_wr, ble.rx_rd) <= BG_DATA_LOW_WATERMARK)
    855                    {
    856                      /* Indicate we need to execute the BLE stack so it can
    857                       * start reading data from the buffer */
    858                      ble.req_exec = true;
    859                    }
    860                  } // EndElse (IsBufFull(ble.rx_wr, ble.rx_rd))
    861                  break;
    862              } // EndSwitch (ble.rx_state)
    863              return Status;
    864          #endif
    865          }

   \                                 In section .bss, align 4
   \                     `RoadBrd_ProcessBGMChar::tempBffr2`:
   \   00000000                      DS8 40

   \                                 In section .bss, align 1
   \                     `RoadBrd_ProcessBGMChar::in_ptr`:
   \   00000000                      DS8 1
    866          
    867          /**
    868            * @brief  This routine returns the status of the ble.req_exec flag
    869            *         from the BGM111
    870            * @param  None
    871            * @retval bool:     true(1):     Processing of packet about to start
    872            *                   false(0):      No processing pending.
    873            */

   \                                 In section .text, align 2, keep-with-next
    874          bool RoadBrd_tstReqexec( void )
    875          {
    876            return ble.req_exec;
   \                     RoadBrd_tstReqexec: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable20_6
   \   00000002   0xF890 0x0195      LDRB     R0,[R0, #+405]
   \   00000006   0x4770             BX       LR               ;; return
    877          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   0x2D 0x2A          DC8      "-*-"
   \              0x2D 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_1:
   \   00000000   0x2D 0x4F          DC8      "-O-"
   \              0x2D 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20:
   \   00000000   0x........         DC32     gecko_cmd_msg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_1:
   \   00000000   0x01030220         DC32     0x1030220

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_2:
   \   00000000   0x........         DC32     gecko_rsp_msg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_3:
   \   00000000   0x020A0520         DC32     0x20a0520

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_4:
   \   00000000   0x050A0420         DC32     0x50a0420

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_5:
   \   00000000   0x........         DC32     blemsgs

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_6:
   \   00000000   0x........         DC32     `ble`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_7:
   \   00000000   0x........         DC32     bglib_output

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_8:
   \   00000000   0x........         DC32     BGM111_Receive

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_9:
   \   00000000   0x........         DC32     bglib_input

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_10:
   \   00000000   0x........         DC32     BGM111_Peek

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_11:
   \   00000000   0x........         DC32     bglib_peek

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_12:
   \   00000000   0xFFFF00F8         DC32     0xffff00f8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_13:
   \   00000000   0x000100A0         DC32     0x100a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_14:
   \   00000000   0x000800A0         DC32     0x800a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_15:
   \   00000000   0x000900A0         DC32     0x900a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_16:
   \   00000000   0x010800A0         DC32     0x10800a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_17:
   \   00000000   0x020800A0         DC32     0x20800a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_18:
   \   00000000   0x020A0020         DC32     0x20a0020

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_19:
   \   00000000   0x020B00A0         DC32     0x20b00a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_20:
   \   00000000   0x030A00A0         DC32     0x30a00a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_21:
   \   00000000   0x050A0020         DC32     0x50a0020

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_22:
   \   00000000   0x08090020         DC32     0x8090020

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_23:
   \   00000000   0x200000A0         DC32     0x200000a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_24:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_25:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_26:
   \   00000000   0x........         DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_27:
   \   00000000   0x........         DC32     ?_5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_28:
   \   00000000   0x........         DC32     ?_6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_29:
   \   00000000   0x........         DC32     ?_7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_30:
   \   00000000   0x........         DC32     ?_8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_31:
   \   00000000   0x........         DC32     ?_9

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_32:
   \   00000000   0x........         DC32     ?_10

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_33:
   \   00000000   0x........         DC32     `RoadBrd_ProcessBGMChar::tempBffr2`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_34:
   \   00000000   0x........         DC32     `RoadBrd_ProcessBGMChar::in_ptr`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_35:
   \   00000000   0x........         DC32     ?_11

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_36:
   \   00000000   0x........         DC32     ?_12

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_37:
   \   00000000   0x........         DC32     ?_13

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_38:
   \   00000000   0x........         DC32     ?_14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_39:
   \   00000000   0x........         DC32     ?_15

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_40:
   \   00000000   0x........         DC32     ?_16

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_41:
   \   00000000   0x........         DC32     ?_17

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_42:
   \   00000000   0x........         DC32     ?_18

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_43:
   \   00000000   0x........         DC32     ?_19

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_44:
   \   00000000   0x........         DC32     ?_20

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_45:
   \   00000000   0x........         DC32     ?_21

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_46:
   \   00000000   0x........         DC32     ?_22

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_47:
   \   00000000   0x........         DC32     ?_23

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_48:
   \   00000000   0x........         DC32     ?_24

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_49:
   \   00000000   0x........         DC32     ?_25

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x3C 0x42          DC8 "<BGM_BOOT>"
   \              0x47 0x4D    
   \              0x5F 0x42    
   \              0x4F 0x4F    
   \              0x54 0x3E    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x3C 0x42          DC8 "<BGM_CNCTCLOSE>"
   \              0x47 0x4D    
   \              0x5F 0x43    
   \              0x4E 0x43    
   \              0x54 0x43    
   \              0x4C 0x4F    
   \              0x53 0x45    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x3C 0x42          DC8 "<BGM_CNCTOPEN>"
   \              0x47 0x4D    
   \              0x5F 0x43    
   \              0x4E 0x43    
   \              0x54 0x4F    
   \              0x50 0x45    
   \              0x4E 0x3E    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \   00000000   0x2D 0x2A          DC8 "-*-"
   \              0x2D 0x00    

   \                                 In section .rodata, align 4
   \   00000000   0x2D 0x4F          DC8 "-O-"
   \              0x2D 0x00    

   \                                 In section .rodata, align 4
   \                     ?_5:
   \   00000000   0x3C 0x72          DC8 "<rsp_read_ch_value_by_uuid_id>"
   \              0x73 0x70    
   \              0x5F 0x72    
   \              0x65 0x61    
   \              0x64 0x5F    
   \              0x63 0x68    
   \              0x5F 0x76    
   \              0x61 0x6C    
   \              0x75 0x65    
   \              0x5F 0x62    
   \              0x79 0x5F    
   \              0x75 0x75    
   \              0x69 0x64    
   \              0x5F 0x69    
   \              0x64 0x3E    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_6:
   \   00000000   0x3C 0x53          DC8 "<STR:%s>"
   \              0x54 0x52    
   \              0x3A 0x25    
   \              0x73 0x3E    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_7:
   \   00000000   0x3C 0x65          DC8 "<evt_endpoint_status_id>"
   \              0x76 0x74    
   \              0x5F 0x65    
   \              0x6E 0x64    
   \              0x70 0x6F    
   \              0x69 0x6E    
   \              0x74 0x5F    
   \              0x73 0x74    
   \              0x61 0x74    
   \              0x75 0x73    
   \              0x5F 0x69    
   \              0x64 0x3E    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_8:
   \   00000000   0x3C 0x55          DC8 "<UNKN:%08x>"
   \              0x4E 0x4B    
   \              0x4E 0x3A    
   \              0x25 0x30    
   \              0x38 0x78    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_9:
   \   00000000   0x3C 0x54          DC8 "<TACK Strike:%d/%d>"
   \              0x41 0x43    
   \              0x4B 0x20    
   \              0x53 0x74    
   \              0x72 0x69    
   \              0x6B 0x65    
   \              0x3A 0x25    
   \              0x64 0x2F    
   \              0x25 0x64    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_10:
   \   00000000   0x3C 0x42          DC8 "<BGMSYNC_CNCTCLOSE>"
   \              0x47 0x4D    
   \              0x53 0x59    
   \              0x4E 0x43    
   \              0x5F 0x43    
   \              0x4E 0x43    
   \              0x54 0x43    
   \              0x4C 0x4F    
   \              0x53 0x45    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_11:
   \   00000000   0x0D 0x0A          DC8 "\015\012<<FULL STRING>>: %s \015\012"
   \              0x3C 0x3C    
   \              0x46 0x55    
   \              0x4C 0x4C    
   \              0x20 0x53    
   \              0x54 0x52    
   \              0x49 0x4E    
   \              0x47 0x3E    
   \              0x3E 0x3A    
   \              0x20 0x25    
   \              0x73 0x20    
   \              0x0D 0x0A    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_12:
   \   00000000   0x42 0x6F          DC8 "Boot"
   \              0x6F 0x74    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_13:
   \   00000000   0x3C 0x62          DC8 "<ble.booted> "
   \              0x6C 0x65    
   \              0x2E 0x62    
   \              0x6F 0x6F    
   \              0x74 0x65    
   \              0x64 0x3E    
   \              0x20 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_14:
   \   00000000   0x43 0x6F          DC8 "Connected"
   \              0x6E 0x6E    
   \              0x65 0x63    
   \              0x74 0x65    
   \              0x64 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_15:
   \   00000000   0x3C 0x62          DC8 "<ble.TackArmed = TACK_ARMED>"
   \              0x6C 0x65    
   \              0x2E 0x54    
   \              0x61 0x63    
   \              0x6B 0x41    
   \              0x72 0x6D    
   \              0x65 0x64    
   \              0x20 0x3D    
   \              0x20 0x54    
   \              0x41 0x43    
   \              0x4B 0x5F    
   \              0x41 0x52    
   \              0x4D 0x45    
   \              0x44 0x3E    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_16:
   \   00000000   0x3C 0x62          DC8 "<ble.connection> "
   \              0x6C 0x65    
   \              0x2E 0x63    
   \              0x6F 0x6E    
   \              0x6E 0x65    
   \              0x63 0x74    
   \              0x69 0x6F    
   \              0x6E 0x3E    
   \              0x20 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_17:
   \   00000000   0x44 0x69          DC8 "Disconnected"
   \              0x73 0x63    
   \              0x6F 0x6E    
   \              0x6E 0x65    
   \              0x63 0x74    
   \              0x65 0x64    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_18:
   \   00000000   0x3C 0x44          DC8 "<DISCONNECTED> "
   \              0x49 0x53    
   \              0x43 0x4F    
   \              0x4E 0x4E    
   \              0x45 0x43    
   \              0x54 0x45    
   \              0x44 0x3E    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_19:
   \   00000000   0x44 0x41          DC8 "DATA"
   \              0x54 0x41    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_20:
   \   00000000   0x3C 0x62          DC8 "<ble.data_Connection> "
   \              0x6C 0x65    
   \              0x2E 0x64    
   \              0x61 0x74    
   \              0x61 0x5F    
   \              0x43 0x6F    
   \              0x6E 0x6E    
   \              0x65 0x63    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x3E 0x20    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_21:
   \   00000000   0x3C 0x54          DC8 "<TACK"
   \              0x41 0x43    
   \              0x4B 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_22:
   \   00000000   0x3C 0x62          DC8 "<ble.TackArmed=TACK_SYNC>"
   \              0x6C 0x65    
   \              0x2E 0x54    
   \              0x61 0x63    
   \              0x6B 0x41    
   \              0x72 0x6D    
   \              0x65 0x64    
   \              0x3D 0x54    
   \              0x41 0x43    
   \              0x4B 0x5F    
   \              0x53 0x59    
   \              0x4E 0x43    
   \              0x3E 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_23:
   \   00000000   0x3C 0x54          DC8 "<TACK Received.>"
   \              0x41 0x43    
   \              0x4B 0x20    
   \              0x52 0x65    
   \              0x63 0x65    
   \              0x69 0x76    
   \              0x65 0x64    
   \              0x2E 0x3E    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_24:
   \   00000000   0x4F 0x56          DC8 "OVERFLOW"
   \              0x45 0x52    
   \              0x46 0x4C    
   \              0x4F 0x57    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_25:
   \   00000000   0x3C 0x55          DC8 "<UNKNOWN STATUS> "
   \              0x4E 0x4B    
   \              0x4E 0x4F    
   \              0x57 0x4E    
   \              0x20 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x20 0x00    
   \   00000012   0x00 0x00          DC8 0, 0
    878          
    879          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   BGM111_Connected
       0   BGM111_DataConnected
       0   BGM111_GetTackState
       8   BGM111_Init
         8   -> BGM111_LowLevel_Init
         8   -> RoadBrd_gpio_Off
         8   -> RoadBrd_gpio_On
       0   BGM111_LowLevel_Init
       0   BGM111_Peek
      40   BGM111_ProcessInput
        40   -> Clr_HeartBeat
        40   -> Clr_HrtBeat_Cnt
        40   -> HAL_NVIC_SystemReset
        40   -> NextBufIdx
        40   -> RdBrd_BlinkErrCd
        40   -> RdBrd_ErrCdLogErrCd
        40   -> RoadBrd_UART_Transmit
        40   -> gecko_cmd_le_gap_set_mode
        40   -> gecko_peek_event
        40   -> sprintf
       0   BGM111_Ready
      16   BGM111_Receive
        16   -> HAL_UART_EnableBGM_RX
        16   -> NextBufIdx
       0   BGM111_SetSyncFlg
       0   BGM111_SetTackState
      24   BGM111_SyncModeTest
        24   -> ClrDataReady
        24   -> Clr_HrtBeat_Cnt
        24   -> HAL_NVIC_SystemReset
        24   -> RdBrd_BlinkErrCd
        24   -> RdBrd_ErrCdLogErrCd
        24   -> RoadBrd_Get_TackLimit
        24   -> RoadBrd_UART_Transmit
        24   -> TstDataReady
        24   -> sprintf
       0   BGM111_SyncModeTestNoInc
      24   BGM111_Transmit
        24   -> HAL_NVIC_DisableIRQ
        24   -> HAL_NVIC_EnableIRQ
        24   -> HAL_NVIC_SystemReset
        24   -> HAL_UART_EnableBGM_TXE
        24   -> NextBufIdx
        24   -> RdBrd_BlinkErrCd
        24   -> RdBrd_ErrCdLogErrCd
      16   BGM111_UART_IRQHandler
        16   -> NextBufIdx
        16   -> RoadBrd_ProcessBGMChar
        16   -> USART_ReceiveData
        16   -> USART_SendData
      16   BGM111_WriteCharacteristic
        16   -> gecko_cmd_gatt_server_send_characteristic_notification
        16   -> gecko_cmd_gatt_server_write_attribute_value
       0   BGM111_cntrlSetSyncFlg
      16   BufFree
        16   -> BufUsed
       0   BufUsed
      16   IsBufFull
        16   -> NextBufIdx
       0   NextBufIdx
      72   RoadBrd_ProcessBGMChar
        72   -> BGM111_SetSyncFlg
        72   -> ClrAnalyticsRepeat
        72   -> ClrDataStructure
        72   -> HAL_NVIC_SystemReset
        72   -> RdBrd_BlinkErrCd
        72   -> RdBrd_ErrCdLogErrCd
        72   -> RoadBrd_UART_Transmit
        72   -> sprintf
        72   -> strncmp
       0   RoadBrd_tstReqexec
       0   USART_ReceiveData
       0   USART_SendData
      24   gecko_cmd_gatt_server_send_characteristic_notification
        24   -> __aeabi_memcpy
        24   -> gecko_handle_command
      24   gecko_cmd_gatt_server_write_attribute_value
        24   -> __aeabi_memcpy
        24   -> gecko_handle_command
      16   gecko_cmd_le_gap_set_mode
        16   -> gecko_handle_command


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable17
       4  ??DataTable17_1
       4  ??DataTable20
       4  ??DataTable20_1
       4  ??DataTable20_10
       4  ??DataTable20_11
       4  ??DataTable20_12
       4  ??DataTable20_13
       4  ??DataTable20_14
       4  ??DataTable20_15
       4  ??DataTable20_16
       4  ??DataTable20_17
       4  ??DataTable20_18
       4  ??DataTable20_19
       4  ??DataTable20_2
       4  ??DataTable20_20
       4  ??DataTable20_21
       4  ??DataTable20_22
       4  ??DataTable20_23
       4  ??DataTable20_24
       4  ??DataTable20_25
       4  ??DataTable20_26
       4  ??DataTable20_27
       4  ??DataTable20_28
       4  ??DataTable20_29
       4  ??DataTable20_3
       4  ??DataTable20_30
       4  ??DataTable20_31
       4  ??DataTable20_32
       4  ??DataTable20_33
       4  ??DataTable20_34
       4  ??DataTable20_35
       4  ??DataTable20_36
       4  ??DataTable20_37
       4  ??DataTable20_38
       4  ??DataTable20_39
       4  ??DataTable20_4
       4  ??DataTable20_40
       4  ??DataTable20_41
       4  ??DataTable20_42
       4  ??DataTable20_43
       4  ??DataTable20_44
       4  ??DataTable20_45
       4  ??DataTable20_46
       4  ??DataTable20_47
       4  ??DataTable20_48
       4  ??DataTable20_49
       4  ??DataTable20_5
       4  ??DataTable20_6
       4  ??DataTable20_7
       4  ??DataTable20_8
       4  ??DataTable20_9
      12  ?_0
      16  ?_1
      20  ?_10
      28  ?_11
       8  ?_12
      16  ?_13
      12  ?_14
      32  ?_15
      20  ?_16
      16  ?_17
      16  ?_18
       8  ?_19
      16  ?_2
      24  ?_20
       8  ?_21
      28  ?_22
      20  ?_23
      12  ?_24
      20  ?_25
       4  ?_3
       4  ?_4
      32  ?_5
      12  ?_6
      28  ?_7
      12  ?_8
      20  ?_9
      10  BGM111_Connected
      10  BGM111_DataConnected
      10  BGM111_GetTackState
      50  BGM111_Init
      72  BGM111_LowLevel_Init
      10  BGM111_Peek
     526  BGM111_ProcessInput
      10  BGM111_Ready
      94  BGM111_Receive
      10  BGM111_SetSyncFlg
      10  BGM111_SetTackState
     152  BGM111_SyncModeTest
      36  BGM111_SyncModeTestNoInc
     286  BGM111_Transmit
     144  BGM111_UART_IRQHandler
      42  BGM111_WriteCharacteristic
      22  BGM111_cntrlSetSyncFlg
      26  BufFree
      18  BufUsed
      30  IsBufFull
      14  NextBufIdx
     424  RoadBrd_ProcessBGMChar
       8  RoadBrd_tstReqexec
      10  USART_ReceiveData
      12  USART_SendData
     132  _gecko_cmd_msg
     132  _gecko_rsp_msg
       4  bglib_input
       4  bglib_output
       4  bglib_peek
     416  ble
     804  blemsgs
     110  gecko_cmd_gatt_server_send_characteristic_notification
     108  gecko_cmd_gatt_server_write_attribute_value
      64  gecko_cmd_le_gap_set_mode
       4  gecko_cmd_msg
       4  gecko_evt_msg
    3960  gecko_queue
       4  gecko_queue_r
       4  gecko_queue_w
       4  gecko_rsp_msg
       1  in_ptr
      40  tempBffr2

 
 5 509 bytes in section .bss
     8 bytes in section .data
   444 bytes in section .rodata
 2 526 bytes in section .text
 
 2 526 bytes of CODE  memory
   444 bytes of CONST memory
 5 517 bytes of DATA  memory

Errors: none
Warnings: none
