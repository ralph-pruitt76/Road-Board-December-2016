###############################################################################
#
# IAR ANSI C/C++ Compiler V7.60.2.11341/W32 for ARM       08/Sep/2017  08:29:56
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\main.c
#    Command line =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\main.c
#        -D USE_HAL_DRIVER -D STM32L152xE -D USE_STM32L1XX_NUCLEO -D ASCII -D
#        REV_L -D LONG_DELAY -lCN
#        "D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\Road
#        Brd MSTR Rev L Long Always\List" -o
#        "D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\Road
#        Brd MSTR Rev L Long Always\Obj" --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_clustering --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.4\arm\INC\c\DLib_Config_Full.h" -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/STM32L1xx_HAL_Driver/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/STM32L1xx_HAL_Driver/Inc/Legacy\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/BSP/STM32L1xx_Nucleo\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/portable/IAR/ARM_CM3\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Core/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/CMSIS/Include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/CMSIS/Device/ST/STM32L1xx/Include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\..\Middlewares\Third_Party\BgLib\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.4\arm\CMSIS\Include\"
#    Locale       =  English_United States.1252
#    List file    =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\Road
#        Brd MSTR Rev L Long Always\List\main.lst
#    Object file  =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\Road
#        Brd MSTR Rev L Long Always\Obj\main.o
#
###############################################################################

D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\main.c
      1          /**
      2            ******************************************************************************
      3            * File Name          : main.c
      4            * Description        : Main program body
      5            ******************************************************************************
      6            *
      7            * COPYRIGHT(c) 2016 STMicroelectronics
      8            *
      9            * Redistribution and use in source and binary forms, with or without modification,
     10            * are permitted provided that the following conditions are met:
     11            *   1. Redistributions of source code must retain the above copyright notice,
     12            *      this list of conditions and the following disclaimer.
     13            *   2. Redistributions in binary form must reproduce the above copyright notice,
     14            *      this list of conditions and the following disclaimer in the documentation
     15            *      and/or other materials provided with the distribution.
     16            *   3. Neither the name of STMicroelectronics nor the names of its contributors
     17            *      may be used to endorse or promote products derived from this software
     18            *      without specific prior written permission.
     19            *
     20            * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     21            * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     22            * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     23            * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
     24            * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     25            * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     26            * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
     27            * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
     28            * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
     29            * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     30            *
     31            ******************************************************************************
     32            */
     33          /* Includes ------------------------------------------------------------------*/
     34          #include "stm32l1xx_hal.h"
     35          #include "cmsis_os.h"
     36          #include "adc.h"
     37          #include "dma.h"
     38          #include "i2c.h"
     39          #include "tim.h"
     40          #include "usart.h"
     41          #include "usb_device.h"
     42          #include "wwdg.h"
     43          #include "Flash.h"
     44          
     45          /* USER CODE BEGIN Includes */
     46          #include "stm32l1xx_nucleo.h"
     47          #ifdef REV_L
     48            #include "bgm111.h"
     49            #include "app_data.h"
     50          #endif
     51          #include "gpio.h"
     52          #include "main.h"
     53          #include "parser.h"
     54          #include "stdbool.h"
     55          #include "ErrorCodes.h"
     56              
     57          /* USER CODE END Includes */
     58          
     59          /* Private variables ---------------------------------------------------------*/
     60          
     61          /* USER CODE BEGIN PV */
     62          /* Private variables ---------------------------------------------------------*/
     63          
     64          /* USER CODE END PV */
     65          
     66          /* Private function prototypes -----------------------------------------------*/
     67          void SystemClock_Config(void);
     68          void Error_Handler(void);
     69          void MX_FREERTOS_Init(void);
     70          
     71          /* USER CODE BEGIN PFP */
     72          /* Private function prototypes -----------------------------------------------*/
     73          
     74          /* USER CODE END PFP */
     75          
     76          /* USER CODE BEGIN 0 */
     77          
     78          /* USER CODE END 0 */

   \                                 In section .text, align 2, keep-with-next
     79          int main(void)
     80          {
   \                     main: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB0A4             SUB      SP,SP,#+144
     81            /* USER CODE BEGIN 1 */
     82          #ifdef TEST2
     83            #define RECEIVE_SZ      5
     84            uint8_t tempBffr[RECEIVE_SZ];
     85            char tempBffr2[5];
     86            HAL_StatusTypeDef Status;
     87          #else
     88            #ifdef TEST
     89              #define RECEIVE_SZ      5
     90            #else
     91          //HERE
     92              #define RECEIVE_SZ      30
     93              uint8_t tempBffr[RECEIVE_SZ];
     94              uint8_t tempBffr2[80];
     95              HAL_StatusTypeDef Status;
     96            #endif
     97          #endif
     98          
     99          #ifdef REV_L
    100            uint16_t tmpSize = RECEIVE_SZ;
   \   00000006   0x251E             MOVS     R5,#+30
    101            uint8_t tmpData[2];
    102          //  uint8_t tmpData[RECEIVE_SZ];
    103            Temperature   Temp;
    104          #ifndef PATCH_UART
    105            bool firstTime = true;
   \   00000008   0x2601             MOVS     R6,#+1
    106          #endif
    107            uint8_t *pData = tempBffr;
   \   0000000A   0xAF15             ADD      R7,SP,#+84
    108          #endif
    109          
    110          //ITStatus PStatus;
    111          
    112            /* USER CODE END 1 */
    113          
    114            /* MCU Configuration----------------------------------------------------------*/
    115          
    116          #ifdef REV_L
    117            // Turn Off Power Supplies
    118            //RoadBrd_gpio_Off(gTAM_PWR);    // Turn Off 5V Power
    119            //RoadBrd_gpio_Off(gVDD_PWR);    // Turn Off 3.3V Power
    120          #endif
    121          
    122            /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    123            HAL_Init();
   \   0000000C   0x.... 0x....      BL       HAL_Init
    124          
    125            /* Configure the system clock */
    126            SystemClock_Config();
   \   00000010   0x.... 0x....      BL       SystemClock_Config
    127          
    128            /* Initialize all configured peripherals */
    129            MX_GPIO_Init();
   \   00000014   0x.... 0x....      BL       MX_GPIO_Init
    130            MX_DMA_Init();
   \   00000018   0x.... 0x....      BL       MX_DMA_Init
    131            MX_ADC_Init();
   \   0000001C   0x.... 0x....      BL       MX_ADC_Init
    132            ADC_Config();
   \   00000020   0x.... 0x....      BL       ADC_Config
    133            MX_USART2_UART_Init();
   \   00000024   0x.... 0x....      BL       MX_USART2_UART_Init
    134            MX_USART3_UART_Init();
   \   00000028   0x.... 0x....      BL       MX_USART3_UART_Init
    135            MX_TIM2_Init();
   \   0000002C   0x.... 0x....      BL       MX_TIM2_Init
    136            MX_TIM3_Init();
   \   00000030   0x.... 0x....      BL       MX_TIM3_Init
    137          
    138            /* USER CODE BEGIN 2 */
    139          #ifdef REV_L
    140            // Wait for power to stabilize off...200msec
    141            //RoadBrd_Delay( 200 );
    142            // Turn on Power Supplies.
    143            RoadBrd_gpio_On(gTAM_PWR);    // Turn on 5V Power
   \   00000034   0x2004             MOVS     R0,#+4
   \   00000036   0x.... 0x....      BL       RoadBrd_gpio_On
    144            RoadBrd_gpio_On(gVDD_PWR);    // Turn on 3.3V Power
   \   0000003A   0x2005             MOVS     R0,#+5
   \   0000003C   0x.... 0x....      BL       RoadBrd_gpio_On
    145            // Wait for power to stabilize...200msec
    146            RoadBrd_Delay( 200 );
   \   00000040   0x20C8             MOVS     R0,#+200
   \   00000042   0x.... 0x....      BL       RoadBrd_Delay
    147            // Reset all Drivers to Off before starting init process.
    148            Reset_DriverStates();
   \   00000046   0x.... 0x....      BL       Reset_DriverStates
    149          
    150            // Enable Interrupts
    151            //---UART
    152            HAL_NVIC_EnableIRQ(USART2_IRQn);
   \   0000004A   0x2026             MOVS     R0,#+38
   \   0000004C   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    153            HAL_NVIC_EnableIRQ(USART3_IRQn);
   \   00000050   0x2027             MOVS     R0,#+39
   \   00000052   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    154          
    155            // Test I2C Channel and see if we even have a working I2C.
    156            RoadBrd_TestI2C();
   \   00000056   0x.... 0x....      BL       RoadBrd_TestI2C
    157            
    158            // Test I2C Status and Task init I2C if Active driver.
    159            if ( Get_DriverStates( I2C_STATE ) )
   \   0000005A   0x2007             MOVS     R0,#+7
   \   0000005C   0x.... 0x....      BL       Get_DriverStates
   \   00000060   0x2800             CMP      R0,#+0
   \   00000062   0xD001             BEQ.N    ??main_0
    160            {
    161              // Now..Initialize I2C and test Drivers.
    162              MX_I2C1_Init();
   \   00000064   0x.... 0x....      BL       MX_I2C1_Init
    163            }
    164            
    165            //---I2C1
    166            HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
   \                     ??main_0: (+1)
   \   00000068   0x201F             MOVS     R0,#+31
   \   0000006A   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    167            HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
   \   0000006E   0x2020             MOVS     R0,#+32
   \   00000070   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    168            //---TIM
    169          #ifndef PATCH_UART
    170            HAL_TIM_StartTimer2();
   \   00000074   0x.... 0x....      BL       HAL_TIM_StartTimer2
    171            HAL_TIM_StartTimer3();
   \   00000078   0x.... 0x....      BL       HAL_TIM_StartTimer3
    172            HAL_NVIC_EnableIRQ(TIM2_IRQn);
   \   0000007C   0x201C             MOVS     R0,#+28
   \   0000007E   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    173            HAL_NVIC_EnableIRQ(TIM3_IRQn);
   \   00000082   0x201D             MOVS     R0,#+29
   \   00000084   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    174          #endif
    175            // Test I2C State.
    176          
    177            // Test I2C Status and Task init I2C if Active driver.
    178            if ( Get_DriverStates( I2C_STATE ) )
   \   00000088   0x2007             MOVS     R0,#+7
   \   0000008A   0x.... 0x....      BL       Get_DriverStates
   \   0000008E   0x2800             CMP      R0,#+0
   \   00000090   0xD007             BEQ.N    ??main_1
    179            {
    180              // Wait 35  ms. For Busy flag to drop.
    181              if(I2C_WaitBusyFlag() != HAL_OK)
   \   00000092   0x.... 0x....      BL       I2C_WaitBusyFlag
   \   00000096   0x2800             CMP      R0,#+0
   \   00000098   0xD003             BEQ.N    ??main_1
    182              {
    183                RdBrd_ErrCdLogErrCd( ERROR_I2CBUSY, MODULE_main );
   \   0000009A   0x2101             MOVS     R1,#+1
   \   0000009C   0x2001             MOVS     R0,#+1
   \   0000009E   0x.... 0x....      BL       RdBrd_ErrCdLogErrCd
    184              }
    185            }
    186          
    187            //BGM Initialization
    188          #ifndef TEST2
    189          #ifndef PATCH_UART
    190            BGM111_Init();
   \                     ??main_1: (+1)
   \   000000A2   0x.... 0x....      BL       BGM111_Init
    191          #else
    192            RoadBrd_gpio_Off(gRESET_BGM111);
    193          #endif
    194          #endif
    195            
    196            // Test I2C Status and Task init I2C if Active driver.
    197            if ( Get_DriverStates( I2C_STATE ) )
   \   000000A6   0x2007             MOVS     R0,#+7
   \   000000A8   0x.... 0x....      BL       Get_DriverStates
   \   000000AC   0x2800             CMP      R0,#+0
   \   000000AE   0xF000 0x8086      BEQ.W    ??main_2
    198            {
    199              Status = RoadBrd_RGBInit();
   \   000000B2   0x.... 0x....      BL       RoadBrd_RGBInit
   \   000000B6   0x0004             MOVS     R4,R0
    200              if (Status == HAL_OK)
   \   000000B8   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000BA   0x2C00             CMP      R4,#+0
   \   000000BC   0xD104             BNE.N    ??main_3
    201              {
    202                Set_DriverStates( IRRADIANCE_MNTR_TASK, DRIVER_ON );
   \   000000BE   0x2101             MOVS     R1,#+1
   \   000000C0   0x2002             MOVS     R0,#+2
   \   000000C2   0x.... 0x....      BL       Set_DriverStates
   \   000000C6   0xE007             B.N      ??main_4
    203              }
    204              else
    205              {
    206                RdBrd_ErrCdLogErrCd( ERROR_RGB_INIT, MODULE_main );
   \                     ??main_3: (+1)
   \   000000C8   0x2101             MOVS     R1,#+1
   \   000000CA   0x2008             MOVS     R0,#+8
   \   000000CC   0x.... 0x....      BL       RdBrd_ErrCdLogErrCd
    207                Set_DriverStates( IRRADIANCE_MNTR_TASK, DRIVER_OFF );
   \   000000D0   0x2100             MOVS     R1,#+0
   \   000000D2   0x2002             MOVS     R0,#+2
   \   000000D4   0x.... 0x....      BL       Set_DriverStates
    208              }
    209          
    210              // Initialize Voltage Monitor Hardware
    211              Status = RoadBrd_Init_VMonitor();
   \                     ??main_4: (+1)
   \   000000D8   0x.... 0x....      BL       RoadBrd_Init_VMonitor
   \   000000DC   0x0004             MOVS     R4,R0
    212              if (Status == HAL_OK)
   \   000000DE   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000E0   0x2C00             CMP      R4,#+0
   \   000000E2   0xD104             BNE.N    ??main_5
    213              {
    214                Set_DriverStates( VOLTAGE_MNTR_TASK, DRIVER_ON );
   \   000000E4   0x2101             MOVS     R1,#+1
   \   000000E6   0x2000             MOVS     R0,#+0
   \   000000E8   0x.... 0x....      BL       Set_DriverStates
   \   000000EC   0xE007             B.N      ??main_6
    215              }
    216              else
    217              {
    218                RdBrd_ErrCdLogErrCd( ERROR_VMNTR_INIT, MODULE_main );
   \                     ??main_5: (+1)
   \   000000EE   0x2101             MOVS     R1,#+1
   \   000000F0   0x2002             MOVS     R0,#+2
   \   000000F2   0x.... 0x....      BL       RdBrd_ErrCdLogErrCd
    219                Set_DriverStates( VOLTAGE_MNTR_TASK, DRIVER_OFF );
   \   000000F6   0x2100             MOVS     R1,#+0
   \   000000F8   0x2000             MOVS     R0,#+0
   \   000000FA   0x.... 0x....      BL       Set_DriverStates
    220              }
    221          
    222              // Initialize Grid Eye Hardware
    223              Status = RoadBrd_GridEyeInit();
   \                     ??main_6: (+1)
   \   000000FE   0x.... 0x....      BL       RoadBrd_GridEyeInit
   \   00000102   0x0004             MOVS     R4,R0
    224              if (Status == HAL_OK)
   \   00000104   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000106   0x2C00             CMP      R4,#+0
   \   00000108   0xD104             BNE.N    ??main_7
    225              {
    226                Set_DriverStates( GRIDEYE_MNTR_TASK, DRIVER_ON );
   \   0000010A   0x2101             MOVS     R1,#+1
   \   0000010C   0x2005             MOVS     R0,#+5
   \   0000010E   0x.... 0x....      BL       Set_DriverStates
   \   00000112   0xE01A             B.N      ??main_8
    227              }
    228              else
    229              {
    230                RdBrd_ErrCdLogErrCd( ERROR_GDEYE_INIT, MODULE_main );
   \                     ??main_7: (+1)
   \   00000114   0x2101             MOVS     R1,#+1
   \   00000116   0x2004             MOVS     R0,#+4
   \   00000118   0x.... 0x....      BL       RdBrd_ErrCdLogErrCd
    231                Set_DriverStates( GRIDEYE_MNTR_TASK, DRIVER_OFF );
   \   0000011C   0x2100             MOVS     R1,#+0
   \   0000011E   0x2005             MOVS     R0,#+5
   \   00000120   0x.... 0x....      BL       Set_DriverStates
    232                // OK, We have no Grid Eye...Do we have a Cool Eye?
    233                Status = RoadBrd_CoolEyeInit();
   \   00000124   0x.... 0x....      BL       RoadBrd_CoolEyeInit
   \   00000128   0x0004             MOVS     R4,R0
    234                if (Status == HAL_OK)
   \   0000012A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000012C   0x2C00             CMP      R4,#+0
   \   0000012E   0xD104             BNE.N    ??main_9
    235                {
    236                  Set_DriverStates( COOLEYE_MNTR_TASK, DRIVER_ON );
   \   00000130   0x2101             MOVS     R1,#+1
   \   00000132   0x2006             MOVS     R0,#+6
   \   00000134   0x.... 0x....      BL       Set_DriverStates
   \   00000138   0xE007             B.N      ??main_8
    237                }
    238                else
    239                {
    240                  RdBrd_ErrCdLogErrCd( ERROR_CLEYE_INIT, MODULE_main );
   \                     ??main_9: (+1)
   \   0000013A   0x2101             MOVS     R1,#+1
   \   0000013C   0x200A             MOVS     R0,#+10
   \   0000013E   0x.... 0x....      BL       RdBrd_ErrCdLogErrCd
    241                  Set_DriverStates( COOLEYE_MNTR_TASK, DRIVER_OFF );
   \   00000142   0x2100             MOVS     R1,#+0
   \   00000144   0x2006             MOVS     R0,#+6
   \   00000146   0x.... 0x....      BL       Set_DriverStates
    242                }
    243            }
    244          
    245              // Initialize Pressure Sensor Hardware
    246              Status = RoadBrd_Init_Barometer();
   \                     ??main_8: (+1)
   \   0000014A   0x.... 0x....      BL       RoadBrd_Init_Barometer
   \   0000014E   0x0004             MOVS     R4,R0
    247              if (Status == HAL_OK)
   \   00000150   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000152   0x2C00             CMP      R4,#+0
   \   00000154   0xD104             BNE.N    ??main_10
    248              {
    249                Set_DriverStates( PRESSURE_MNTR_TASK, DRIVER_ON );
   \   00000156   0x2101             MOVS     R1,#+1
   \   00000158   0x2003             MOVS     R0,#+3
   \   0000015A   0x.... 0x....      BL       Set_DriverStates
   \   0000015E   0xE007             B.N      ??main_11
    250              }
    251              else
    252              {
    253                RdBrd_ErrCdLogErrCd( ERROR_PRESSURE_INIT, MODULE_main );
   \                     ??main_10: (+1)
   \   00000160   0x2101             MOVS     R1,#+1
   \   00000162   0x2005             MOVS     R0,#+5
   \   00000164   0x.... 0x....      BL       RdBrd_ErrCdLogErrCd
    254                Set_DriverStates( PRESSURE_MNTR_TASK, DRIVER_OFF );
   \   00000168   0x2100             MOVS     R1,#+0
   \   0000016A   0x2003             MOVS     R0,#+3
   \   0000016C   0x.... 0x....      BL       Set_DriverStates
    255              }
    256          
    257              // Initialize Humidity Sensor Hardware
    258              Status = RoadBrd_HumidityInit();
   \                     ??main_11: (+1)
   \   00000170   0x.... 0x....      BL       RoadBrd_HumidityInit
   \   00000174   0x0004             MOVS     R4,R0
    259              if (Status == HAL_OK)
   \   00000176   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000178   0x2C00             CMP      R4,#+0
   \   0000017A   0xD104             BNE.N    ??main_12
    260              {
    261                Set_DriverStates( HUMIDITY_MNTR_TASK, DRIVER_ON );
   \   0000017C   0x2101             MOVS     R1,#+1
   \   0000017E   0x2004             MOVS     R0,#+4
   \   00000180   0x.... 0x....      BL       Set_DriverStates
   \   00000184   0xE007             B.N      ??main_13
    262              }
    263              else
    264              {
    265                RdBrd_ErrCdLogErrCd( ERROR_HUMIDITY_INIT, MODULE_main );
   \                     ??main_12: (+1)
   \   00000186   0x2101             MOVS     R1,#+1
   \   00000188   0x2007             MOVS     R0,#+7
   \   0000018A   0x.... 0x....      BL       RdBrd_ErrCdLogErrCd
    266                Set_DriverStates( HUMIDITY_MNTR_TASK, DRIVER_OFF );
   \   0000018E   0x2100             MOVS     R1,#+0
   \   00000190   0x2004             MOVS     R0,#+4
   \   00000192   0x.... 0x....      BL       Set_DriverStates
    267              }
    268            
    269              // Test Temperature Sensor Hardware
    270              Status = RoadBrd_ReadTemp( &Temp );
   \                     ??main_13: (+1)
   \   00000196   0xA81D             ADD      R0,SP,#+116
   \   00000198   0x.... 0x....      BL       RoadBrd_ReadTemp
   \   0000019C   0x0004             MOVS     R4,R0
    271              if (Status == HAL_OK)
   \   0000019E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000001A0   0x2C00             CMP      R4,#+0
   \   000001A2   0xD104             BNE.N    ??main_14
    272              {
    273                Set_DriverStates( TEMPERATURE_MNTR_TASK, DRIVER_ON );
   \   000001A4   0x2101             MOVS     R1,#+1
   \   000001A6   0x2001             MOVS     R0,#+1
   \   000001A8   0x.... 0x....      BL       Set_DriverStates
   \   000001AC   0xE007             B.N      ??main_2
    274              }
    275              else
    276              {
    277                RdBrd_ErrCdLogErrCd( ERROR_TEMP_INIT, MODULE_main );
   \                     ??main_14: (+1)
   \   000001AE   0x2101             MOVS     R1,#+1
   \   000001B0   0x2009             MOVS     R0,#+9
   \   000001B2   0x.... 0x....      BL       RdBrd_ErrCdLogErrCd
    278                Set_DriverStates( TEMPERATURE_MNTR_TASK, DRIVER_OFF );
   \   000001B6   0x2100             MOVS     R1,#+0
   \   000001B8   0x2001             MOVS     R0,#+1
   \   000001BA   0x.... 0x....      BL       Set_DriverStates
    279              }
    280            } //EndIf ( Get_DriverStates( I2C_STATE )
    281            
    282            // Initialize key app vars.
    283            InitSensors();
   \                     ??main_2: (+1)
   \   000001BE   0x.... 0x....      BL       InitSensors
    284            
    285            //**
    286            //**
    287            //** Initialize all Flash Structures.
    288            //**
    289            //**
    290            //*******1. Initializ WWDG Flash Structure
    291            // 1a. Is WWDG Flash Frame Initialized?
    292            if (RoadBrd_WWDG_VerifyFrame())
   \   000001C2   0x.... 0x....      BL       RoadBrd_WWDG_VerifyFrame
   \   000001C6   0x2800             CMP      R0,#+0
   \   000001C8   0xD004             BEQ.N    ??main_15
    293            {
    294              //Yes....Set FRAME_TASK Bit in Driver State Variable.
    295              Set_DriverStates( FRAME_TASK, DRIVER_ON );
   \   000001CA   0x2101             MOVS     R1,#+1
   \   000001CC   0x2008             MOVS     R0,#+8
   \   000001CE   0x.... 0x....      BL       Set_DriverStates
   \   000001D2   0xE010             B.N      ??main_16
    296            } // EndIf (RoadBrd_WWDG_VerifyFrame())
    297            else
    298            {
    299              //No....1b. Attempt to Initialize WWDG Flash Frame.
    300              if (RoadBrd_WWDG_InitializeFrmFlash() != HAL_OK)
   \                     ??main_15: (+1)
   \   000001D4   0x.... 0x....      BL       RoadBrd_WWDG_InitializeFrmFlash
   \   000001D8   0x2800             CMP      R0,#+0
   \   000001DA   0xD008             BEQ.N    ??main_17
    301              {
    302                //FAILED....Indicate Error Code and Fail Driver State.
    303                RdBrd_ErrCdLogErrCd( ERROR_FRAME_INIT, MODULE_main );
   \   000001DC   0x2101             MOVS     R1,#+1
   \   000001DE   0x2010             MOVS     R0,#+16
   \   000001E0   0x.... 0x....      BL       RdBrd_ErrCdLogErrCd
    304                Set_DriverStates( FRAME_TASK, DRIVER_OFF );
   \   000001E4   0x2100             MOVS     R1,#+0
   \   000001E6   0x2008             MOVS     R0,#+8
   \   000001E8   0x.... 0x....      BL       Set_DriverStates
   \   000001EC   0xE003             B.N      ??main_16
    305              }
    306              else
    307              {
    308                //SUCCESS....Set FRAME_TASK Bit in Driver State Variable.
    309                Set_DriverStates( FRAME_TASK, DRIVER_ON );
   \                     ??main_17: (+1)
   \   000001EE   0x2101             MOVS     R1,#+1
   \   000001F0   0x2008             MOVS     R0,#+8
   \   000001F2   0x.... 0x....      BL       Set_DriverStates
    310              }
    311            } // EndElse (RoadBrd_WWDG_VerifyFrame())
    312            
    313            //*******2. Initializ Calibration Flash Structure
    314            // 2a. Is Calibration Flash Frame Initialized?
    315            if (RoadBrd_CAL_VerifyFrame())
   \                     ??main_16: (+1)
   \   000001F6   0x.... 0x....      BL       RoadBrd_CAL_VerifyFrame
   \   000001FA   0x2800             CMP      R0,#+0
   \   000001FC   0xD004             BEQ.N    ??main_18
    316            {
    317              //Yes....Set CAL_TASK Bit in Driver State Variable.
    318              Set_DriverStates( CAL_TASK, DRIVER_ON );
   \   000001FE   0x2101             MOVS     R1,#+1
   \   00000200   0x2009             MOVS     R0,#+9
   \   00000202   0x.... 0x....      BL       Set_DriverStates
   \   00000206   0xE010             B.N      ??main_19
    319            } // EndIf (RoadBrd_WWDG_VerifyFrame())
    320            else
    321            {
    322              //No....2b. Attempt to Initialize Structure Flash Structure.
    323              if (RoadBrd_CAL_InitializeFrmFlash() != HAL_OK)
   \                     ??main_18: (+1)
   \   00000208   0x.... 0x....      BL       RoadBrd_CAL_InitializeFrmFlash
   \   0000020C   0x2800             CMP      R0,#+0
   \   0000020E   0xD008             BEQ.N    ??main_20
    324              {
    325                //FAILED....Indicate Error Code and Fail Driver State.
    326                RdBrd_ErrCdLogErrCd( ERROR_CAL_INIT, MODULE_main );
   \   00000210   0x2101             MOVS     R1,#+1
   \   00000212   0x2013             MOVS     R0,#+19
   \   00000214   0x.... 0x....      BL       RdBrd_ErrCdLogErrCd
    327                Set_DriverStates( CAL_TASK, DRIVER_OFF );
   \   00000218   0x2100             MOVS     R1,#+0
   \   0000021A   0x2009             MOVS     R0,#+9
   \   0000021C   0x.... 0x....      BL       Set_DriverStates
   \   00000220   0xE003             B.N      ??main_19
    328              }
    329              else
    330              {
    331                //SUCCESS....Set FRAME_TASK Bit in Driver State Variable.
    332                Set_DriverStates( CAL_TASK, DRIVER_ON );
   \                     ??main_20: (+1)
   \   00000222   0x2101             MOVS     R1,#+1
   \   00000224   0x2009             MOVS     R0,#+9
   \   00000226   0x.... 0x....      BL       Set_DriverStates
    333              }
    334            } // EndElse (RoadBrd_WWDG_VerifyFrame())
    335            
    336            
    337          // Initialize Key Vars once Flash has been validated.
    338            // Initialize Key Timer Sampling Vars.
    339            Set_TickCounts( RoadBrd_Get_RdSndTickCnt(), RoadBrd_Get_SnsrTickCnt() );
   \                     ??main_19: (+1)
   \   0000022A   0x.... 0x....      BL       RoadBrd_Get_SnsrTickCnt
   \   0000022E   0x4680             MOV      R8,R0
   \   00000230   0x.... 0x....      BL       RoadBrd_Get_RdSndTickCnt
   \   00000234   0x4641             MOV      R1,R8
   \   00000236   0x.... 0x....      BL       Set_TickCounts
    340              
    341            // Time to start WWDG..
    342            HAL_NVIC_EnableIRQ(WWDG_IRQn);
   \   0000023A   0x2000             MOVS     R0,#+0
   \   0000023C   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    343            MX_WWDG_Init();
   \   00000240   0x.... 0x....      BL       MX_WWDG_Init
    344            RoadBrd_WWDG_Start();
   \   00000244   0x.... 0x....      BL       RoadBrd_WWDG_Start
    345          
    346          #endif
    347          
    348          #ifdef TASKING
    349            /* USER CODE END 2 */
    350          
    351            /* Call init function for freertos objects (in freertos.c) */
    352            MX_FREERTOS_Init();
    353          
    354            /* Start scheduler */
    355            osKernelStart();
    356            
    357            /* We should never get here as control is now taken by the scheduler */
    358          
    359            /* Infinite loop */
    360            /* USER CODE BEGIN WHILE */
    361          #else
    362            
    363            #ifdef TEST
    364                // Turn On Bluetooth Interface for Debug.
    365                RoadBrd_gpio_On( gRESET_BGM111 );
    366            #else
    367          //    #ifndef TEST2
    368                #ifdef ASCII
    369                  // Send Opening Banner for Monitor Code.
    370                  #ifdef NUCLEO
    371          //        strcpy( (char *)tempBffr2, "*********************  WEATHERCLOUD *********************\r\n\r\n");
    372                    strcpy( (char *)tempBffr2, "\r\n\r\n");
    373                    // Send string to UART..
    374          #ifdef REV_L
    375                    Status = RoadBrd_UART_Transmit_IT(NUCLEO_USART, (uint8_t *)tempBffr2);
    376                    // Wait for msg to be completed.
    377                    while (RoadBrd_Uart_Status(NUCLEO_USART) != SET)
    378                    {
    379                      RoadBrd_WWDG_Refresh();     // Refresh WatchDog
    380                    }
    381                    // Clear State for Next Transfer.
    382                    clrUsartState( NUCLEO_USART );
    383          #else
    384                    Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);
    385                    RoadBrd_WWDG_Refresh();     // Refresh WatchDog
    386          #endif
    387                    if (Status != HAL_OK)
    388                      Error_Handler();
    389                    sprintf( (char *)tempBffr2, "     Road Board Monitor %s Hardware Version %s \r\n", VERSION_NUM, BRD_REV);
    390                    //strcpy( (char *)tempBffr2, "     Road Board Monitor Rev K Hardware Version 1.0 \r\n");
    391                    // Send string to UART..
    392          #ifdef REV_L
    393                    Status = RoadBrd_UART_Transmit_IT(NUCLEO_USART, (uint8_t *)tempBffr2);
    394                    // Wait for msg to be completed.
    395                    while (RoadBrd_Uart_Status(NUCLEO_USART) != SET)
    396                    {
    397                    }
    398                    // Clear State for Next Transfer.
    399                    clrUsartState( NUCLEO_USART );
    400          #else
    401                    Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);
    402          #endif
    403                    if (Status != HAL_OK)
    404                      Error_Handler();
    405                    sprintf( (char *)tempBffr2, "                  Copyright %s. \r\n\r\n", REL_DATE);
    406                    //strcpy( (char *)tempBffr2, "                  Copyright August 9, 2016. \r\n\r\n\r\n> ");
    407                    // Send string to UART..
    408                    // *******Time to Build Extra Information...
    409          #ifdef REV_L
    410                    Status = RoadBrd_UART_Transmit_IT(NUCLEO_USART, (uint8_t *)tempBffr2);
    411                    // Wait for msg to be completed.
    412                    while (RoadBrd_Uart_Status(NUCLEO_USART) != SET)
    413                    {
    414                    }
    415                    // Clear State for Next Transfer.
    416                    clrUsartState( NUCLEO_USART );
    417          #else
    418                    Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);
    419          #endif
    420                    if (Status != HAL_OK)
    421                      Error_Handler();
    422                    sprintf( (char *)tempBffr2, "RdSnd Sample Rate:  %3.1f Seconds.\r\n", ((float)RoadBrd_Get_RdSndTickCnt()/10));
    423          #ifdef REV_L
    424                    Status = RoadBrd_UART_Transmit_IT(NUCLEO_USART, (uint8_t *)tempBffr2);
    425                    // Wait for msg to be completed.
    426                    while (RoadBrd_Uart_Status(NUCLEO_USART) != SET)
    427                    {
    428                    }
    429                    // Clear State for Next Transfer.
    430                    clrUsartState( NUCLEO_USART );
    431          #else
    432                    Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);
    433          #endif
    434                    if (Status != HAL_OK)
    435                      Error_Handler();
    436                    sprintf( (char *)tempBffr2, "Sensor Sample Rate: %3.1f Seconds.\r\n\r\n> ", ((float)RoadBrd_Get_SnsrTickCnt()/10));
    437          #ifdef REV_L
    438                    Status = RoadBrd_UART_Transmit_IT(NUCLEO_USART, (uint8_t *)tempBffr2);
    439                    // Wait for msg to be completed.
    440                    while (RoadBrd_Uart_Status(NUCLEO_USART) != SET)
    441                    {
    442                    }
    443                    // Clear State for Next Transfer.
    444                    clrUsartState( NUCLEO_USART );
    445          #else
    446                    Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);
    447          #endif
    448                    if (Status != HAL_OK)
    449                      Error_Handler();
    450                  #else
    451                    strcpy( (char *)tempBffr2, "*********************  WEATHERCLOUD *********************\r\n\r\n");
   \   00000248   0x.... 0x....      LDR.W    R1,??DataTable1_1
   \   0000024C   0xA801             ADD      R0,SP,#+4
   \   0000024E   0x.... 0x....      BL       strcpy
    452                    // Send string to UART..
    453          #ifdef REV_L
    454                    Status = RoadBrd_UART_Transmit_IT(MONITOR_UART, (uint8_t *)tempBffr2);
   \   00000252   0xA901             ADD      R1,SP,#+4
   \   00000254   0x2000             MOVS     R0,#+0
   \   00000256   0x.... 0x....      BL       RoadBrd_UART_Transmit_IT
   \   0000025A   0x0004             MOVS     R4,R0
    455                    // Wait for msg to be completed.
    456                    while (RoadBrd_Uart_Status(MONITOR_UART) != SET)
   \                     ??main_21: (+1)
   \   0000025C   0x2000             MOVS     R0,#+0
   \   0000025E   0x.... 0x....      BL       RoadBrd_Uart_Status
   \   00000262   0x2801             CMP      R0,#+1
   \   00000264   0xD002             BEQ.N    ??main_22
    457                    {
    458                      RoadBrd_WWDG_Refresh();     // Refresh WatchDog
   \   00000266   0x.... 0x....      BL       RoadBrd_WWDG_Refresh
   \   0000026A   0xE7F7             B.N      ??main_21
    459                    }
    460                    // Clear State for Next Transfer.
    461                    clrUsartState( MONITOR_UART );
   \                     ??main_22: (+1)
   \   0000026C   0x2000             MOVS     R0,#+0
   \   0000026E   0x.... 0x....      BL       clrUsartState
    462          #else
    463                    Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);
    464                    RoadBrd_WWDG_Refresh();     // Refresh WatchDog
    465          #endif
    466                    if (Status != HAL_OK)
   \   00000272   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000274   0x2C00             CMP      R4,#+0
   \   00000276   0xD001             BEQ.N    ??main_23
    467                      Error_Handler();
   \   00000278   0x.... 0x....      BL       Error_Handler
    468                    sprintf( (char *)tempBffr2, "     Road Board Monitor %s Hardware Version %s \r\n", VERSION_NUM, BRD_REV);
   \                     ??main_23: (+1)
   \   0000027C   0x.... 0x....      LDR.W    R3,??DataTable1_2
   \   00000280   0x.... 0x....      LDR.W    R2,??DataTable1_3
   \   00000284   0x.... 0x....      LDR.W    R1,??DataTable1_4
   \   00000288   0xA801             ADD      R0,SP,#+4
   \   0000028A   0x.... 0x....      BL       sprintf
    469                    //strcpy( (char *)tempBffr2, "     Road Board Monitor Rev K Hardware Version 1.0 \r\n");
    470                    // Send string to UART..
    471          #ifdef REV_L
    472                    Status = RoadBrd_UART_Transmit_IT(MONITOR_UART, (uint8_t *)tempBffr2);
   \   0000028E   0xA901             ADD      R1,SP,#+4
   \   00000290   0x2000             MOVS     R0,#+0
   \   00000292   0x.... 0x....      BL       RoadBrd_UART_Transmit_IT
   \   00000296   0x0004             MOVS     R4,R0
    473                    // Wait for msg to be completed.
    474                    while (RoadBrd_Uart_Status(MONITOR_UART) != SET)
   \                     ??main_24: (+1)
   \   00000298   0x2000             MOVS     R0,#+0
   \   0000029A   0x.... 0x....      BL       RoadBrd_Uart_Status
   \   0000029E   0x2801             CMP      R0,#+1
   \   000002A0   0xD002             BEQ.N    ??main_25
    475                    {
    476                      RoadBrd_WWDG_Refresh();     // Refresh WatchDog
   \   000002A2   0x.... 0x....      BL       RoadBrd_WWDG_Refresh
   \   000002A6   0xE7F7             B.N      ??main_24
    477                    }
    478                    // Clear State for Next Transfer.
    479                    clrUsartState( MONITOR_UART );
   \                     ??main_25: (+1)
   \   000002A8   0x2000             MOVS     R0,#+0
   \   000002AA   0x.... 0x....      BL       clrUsartState
    480          #else
    481                    Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);
    482                    RoadBrd_WWDG_Refresh();     // Refresh WatchDog
    483          #endif
    484                    if (Status != HAL_OK)
   \   000002AE   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000002B0   0x2C00             CMP      R4,#+0
   \   000002B2   0xD001             BEQ.N    ??main_26
    485                      Error_Handler();
   \   000002B4   0x.... 0x....      BL       Error_Handler
    486                    sprintf( (char *)tempBffr2, "                  Copyright %s. \r\n\r\n", REL_DATE);
   \                     ??main_26: (+1)
   \   000002B8   0x.... 0x....      LDR.W    R2,??DataTable1_5
   \   000002BC   0x.... 0x....      LDR.W    R1,??DataTable1_6
   \   000002C0   0xA801             ADD      R0,SP,#+4
   \   000002C2   0x.... 0x....      BL       sprintf
    487                    //strcpy( (char *)tempBffr2, "                  Copyright August 9, 2016. \r\n\r\n\r\n> ");
    488                    // Send string to UART..
    489          #ifdef REV_L
    490                    Status = RoadBrd_UART_Transmit_IT(MONITOR_UART, (uint8_t *)tempBffr2);
   \   000002C6   0xA901             ADD      R1,SP,#+4
   \   000002C8   0x2000             MOVS     R0,#+0
   \   000002CA   0x.... 0x....      BL       RoadBrd_UART_Transmit_IT
   \   000002CE   0x0004             MOVS     R4,R0
    491                    // Wait for msg to be completed.
    492                    while (RoadBrd_Uart_Status(MONITOR_UART) != SET)
   \                     ??main_27: (+1)
   \   000002D0   0x2000             MOVS     R0,#+0
   \   000002D2   0x.... 0x....      BL       RoadBrd_Uart_Status
   \   000002D6   0x2801             CMP      R0,#+1
   \   000002D8   0xD002             BEQ.N    ??main_28
    493                    {
    494                      RoadBrd_WWDG_Refresh();     // Refresh WatchDog
   \   000002DA   0x.... 0x....      BL       RoadBrd_WWDG_Refresh
   \   000002DE   0xE7F7             B.N      ??main_27
    495                    }
    496                    // Clear State for Next Transfer.
    497                    clrUsartState( MONITOR_UART );
   \                     ??main_28: (+1)
   \   000002E0   0x2000             MOVS     R0,#+0
   \   000002E2   0x.... 0x....      BL       clrUsartState
    498          #else
    499                    Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);
    500                    RoadBrd_WWDG_Refresh();     // Refresh WatchDog
    501          #endif
    502                    if (Status != HAL_OK)
   \   000002E6   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000002E8   0x2C00             CMP      R4,#+0
   \   000002EA   0xD001             BEQ.N    ??main_29
    503                      Error_Handler();
   \   000002EC   0x.... 0x....      BL       Error_Handler
    504                    // *******Time to Build Extra Information...
    505                    sprintf( (char *)tempBffr2, "RdSnd Sample Rate:  %3.1f Seconds.\r\n", ((float)RoadBrd_Get_RdSndTickCnt()/10));
   \                     ??main_29: (+1)
   \   000002F0   0x.... 0x....      BL       RoadBrd_Get_RdSndTickCnt
   \   000002F4   0x.... 0x....      BL       __aeabi_ui2f
   \   000002F8   0x.... 0x....      LDR.W    R1,??DataTable1_7  ;; 0x41200000
   \   000002FC   0x.... 0x....      BL       __aeabi_fdiv
   \   00000300   0x.... 0x....      BL       __aeabi_f2d
   \   00000304   0x0002             MOVS     R2,R0
   \   00000306   0x000B             MOVS     R3,R1
   \   00000308   0x.... 0x....      LDR.W    R1,??DataTable1_8
   \   0000030C   0xA801             ADD      R0,SP,#+4
   \   0000030E   0x.... 0x....      BL       sprintf
    506          #ifdef REV_L
    507                    Status = RoadBrd_UART_Transmit_IT(NUCLEO_USART, (uint8_t *)tempBffr2);
   \   00000312   0xA901             ADD      R1,SP,#+4
   \   00000314   0x2000             MOVS     R0,#+0
   \   00000316   0x.... 0x....      BL       RoadBrd_UART_Transmit_IT
   \   0000031A   0x0004             MOVS     R4,R0
    508                    // Wait for msg to be completed.
    509                    while (RoadBrd_Uart_Status(NUCLEO_USART) != SET)
   \                     ??main_30: (+1)
   \   0000031C   0x2000             MOVS     R0,#+0
   \   0000031E   0x.... 0x....      BL       RoadBrd_Uart_Status
   \   00000322   0x2801             CMP      R0,#+1
   \   00000324   0xD1FA             BNE.N    ??main_30
    510                    {
    511                    }
    512                    // Clear State for Next Transfer.
    513                    clrUsartState( NUCLEO_USART );
   \   00000326   0x2000             MOVS     R0,#+0
   \   00000328   0x.... 0x....      BL       clrUsartState
    514          #else
    515                    Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);
    516          #endif
    517                    if (Status != HAL_OK)
   \   0000032C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000032E   0x2C00             CMP      R4,#+0
   \   00000330   0xD001             BEQ.N    ??main_31
    518                      Error_Handler();
   \   00000332   0x.... 0x....      BL       Error_Handler
    519                    sprintf( (char *)tempBffr2, "Sensor Sample Rate: %3.1f Seconds.\r\n", ((float)RoadBrd_Get_SnsrTickCnt()/10));
   \                     ??main_31: (+1)
   \   00000336   0x.... 0x....      BL       RoadBrd_Get_SnsrTickCnt
   \   0000033A   0x.... 0x....      BL       __aeabi_ui2f
   \   0000033E   0x....             LDR.N    R1,??DataTable1_7  ;; 0x41200000
   \   00000340   0x.... 0x....      BL       __aeabi_fdiv
   \   00000344   0x.... 0x....      BL       __aeabi_f2d
   \   00000348   0x0002             MOVS     R2,R0
   \   0000034A   0x000B             MOVS     R3,R1
   \   0000034C   0x....             LDR.N    R1,??DataTable1_9
   \   0000034E   0xA801             ADD      R0,SP,#+4
   \   00000350   0x.... 0x....      BL       sprintf
    520          #ifdef REV_L
    521                    Status = RoadBrd_UART_Transmit_IT(NUCLEO_USART, (uint8_t *)tempBffr2);
   \   00000354   0xA901             ADD      R1,SP,#+4
   \   00000356   0x2000             MOVS     R0,#+0
   \   00000358   0x.... 0x....      BL       RoadBrd_UART_Transmit_IT
   \   0000035C   0x0004             MOVS     R4,R0
    522                    // Wait for msg to be completed.
    523                    while (RoadBrd_Uart_Status(NUCLEO_USART) != SET)
   \                     ??main_32: (+1)
   \   0000035E   0x2000             MOVS     R0,#+0
   \   00000360   0x.... 0x....      BL       RoadBrd_Uart_Status
   \   00000364   0x2801             CMP      R0,#+1
   \   00000366   0xD1FA             BNE.N    ??main_32
    524                    {
    525                    }
    526                    // Clear State for Next Transfer.
    527                    clrUsartState( NUCLEO_USART );
   \   00000368   0x2000             MOVS     R0,#+0
   \   0000036A   0x.... 0x....      BL       clrUsartState
    528          #else
    529                    Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);
    530          #endif
    531                    if (Status != HAL_OK)
   \   0000036E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000370   0x2C00             CMP      R4,#+0
   \   00000372   0xD001             BEQ.N    ??main_33
    532                      Error_Handler();
   \   00000374   0x.... 0x....      BL       Error_Handler
    533                    sprintf( (char *)tempBffr2, "TACK Limit: %d. \r\n", RoadBrd_Get_TackLimit() );
   \                     ??main_33: (+1)
   \   00000378   0x.... 0x....      BL       RoadBrd_Get_TackLimit
   \   0000037C   0x0002             MOVS     R2,R0
   \   0000037E   0x....             LDR.N    R1,??DataTable1_10
   \   00000380   0xA801             ADD      R0,SP,#+4
   \   00000382   0x.... 0x....      BL       sprintf
    534          #ifdef REV_L
    535                    Status = RoadBrd_UART_Transmit_IT(NUCLEO_USART, (uint8_t *)tempBffr2);
   \   00000386   0xA901             ADD      R1,SP,#+4
   \   00000388   0x2000             MOVS     R0,#+0
   \   0000038A   0x.... 0x....      BL       RoadBrd_UART_Transmit_IT
   \   0000038E   0x0004             MOVS     R4,R0
    536                    // Wait for msg to be completed.
    537                    while (RoadBrd_Uart_Status(NUCLEO_USART) != SET)
   \                     ??main_34: (+1)
   \   00000390   0x2000             MOVS     R0,#+0
   \   00000392   0x.... 0x....      BL       RoadBrd_Uart_Status
   \   00000396   0x2801             CMP      R0,#+1
   \   00000398   0xD1FA             BNE.N    ??main_34
    538                    {
    539                    }
    540                    // Clear State for Next Transfer.
    541                    clrUsartState( NUCLEO_USART );
   \   0000039A   0x2000             MOVS     R0,#+0
   \   0000039C   0x.... 0x....      BL       clrUsartState
    542          #else
    543                    Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);
    544          #endif
    545                    if (Status != HAL_OK)
   \   000003A0   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000003A2   0x2C00             CMP      R4,#+0
   \   000003A4   0xD001             BEQ.N    ??main_35
    546                      Error_Handler();
   \   000003A6   0x.... 0x....      BL       Error_Handler
    547                    // Now Display the Units Enabled State.
    548                    if (RoadBrd_Get_UnitsFlag())
   \                     ??main_35: (+1)
   \   000003AA   0x.... 0x....      BL       RoadBrd_Get_UnitsFlag
   \   000003AE   0x2800             CMP      R0,#+0
   \   000003B0   0xD004             BEQ.N    ??main_36
    549                    {
    550                      sprintf( (char *)tempBffr2, "Units XML State: ENABLED\r\n\r\n> ");
   \   000003B2   0x....             LDR.N    R1,??DataTable1_11
   \   000003B4   0xA801             ADD      R0,SP,#+4
   \   000003B6   0x.... 0x....      BL       sprintf
   \   000003BA   0xE003             B.N      ??main_37
    551                    }
    552                    else
    553                    {
    554                      sprintf( (char *)tempBffr2, "Units XML State: DISABLED\r\n\r\n> ");
   \                     ??main_36: (+1)
   \   000003BC   0x....             LDR.N    R1,??DataTable1_12
   \   000003BE   0xA801             ADD      R0,SP,#+4
   \   000003C0   0x.... 0x....      BL       sprintf
    555                    }
    556          #ifdef REV_L
    557                    Status = RoadBrd_UART_Transmit_IT(NUCLEO_USART, (uint8_t *)tempBffr2);
   \                     ??main_37: (+1)
   \   000003C4   0xA901             ADD      R1,SP,#+4
   \   000003C6   0x2000             MOVS     R0,#+0
   \   000003C8   0x.... 0x....      BL       RoadBrd_UART_Transmit_IT
   \   000003CC   0x0004             MOVS     R4,R0
    558                    // Wait for msg to be completed.
    559                    while (RoadBrd_Uart_Status(NUCLEO_USART) != SET)
   \                     ??main_38: (+1)
   \   000003CE   0x2000             MOVS     R0,#+0
   \   000003D0   0x.... 0x....      BL       RoadBrd_Uart_Status
   \   000003D4   0x2801             CMP      R0,#+1
   \   000003D6   0xD1FA             BNE.N    ??main_38
    560                    {
    561                    }
    562                    // Clear State for Next Transfer.
    563                    clrUsartState( NUCLEO_USART );
   \   000003D8   0x2000             MOVS     R0,#+0
   \   000003DA   0x.... 0x....      BL       clrUsartState
    564          #else
    565                    Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);
    566          #endif
    567                    if (Status != HAL_OK)
   \   000003DE   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000003E0   0x2C00             CMP      R4,#+0
   \   000003E2   0xD001             BEQ.N    ??main_39
    568                      Error_Handler();
   \   000003E4   0x.... 0x....      BL       Error_Handler
    569                 #endif
    570          //      #endif
    571              #endif
    572            #endif
    573            while (1)
    574            {
    575            /* USER CODE END WHILE */
    576          
    577            /* USER CODE BEGIN 3 */
    578            /****************************************************************************
    579              * TEST CODE....Blinks LEDs for both Road Board and Nucleo Board.
    580              **************************************************************************/
    581            #ifdef TEST
    582              #ifdef NUCLEO
    583                // Turn On NUCLEO_LED_GREEN LED.
    584                RoadBrd_gpio_On( NUCLEO_LED_GREEN );
    585                // Wait 500msec.
    586                RoadBrd_Delay( 500 );
    587                // Turn Off NUCLEO_LED_GREEN LED.
    588                RoadBrd_gpio_Off( NUCLEO_LED_GREEN );
    589              #else
    590                // Turn On Blue LED and turn off Yellow LED.
    591                RoadBrd_gpio_On( BLUE_LED );
    592                RoadBrd_gpio_Off( YELLOW_LED );
    593                // Wait 500msec.
    594                RoadBrd_Delay( 500 );
    595                // Turn On Green LED and turn off Blue LED.
    596                RoadBrd_gpio_On( GREEN_LED );
    597                RoadBrd_gpio_Off( BLUE_LED );
    598                // Wait 500msec.
    599                RoadBrd_Delay( 500 );
    600                // Turn On Yellow LED and turn off Green LED.
    601                RoadBrd_gpio_On( YELLOW_LED );
    602                RoadBrd_gpio_Off( GREEN_LED );
    603              #endif
    604              // Wait 500msec.
    605              RoadBrd_Delay( 500 );
    606            //******************Endif TEST
    607            #else
    608            //******************Else TEST
    609          
    610            /****************************************************************************
    611             * TEST2 CODE....Reads COM port and translates back to sender. Simple COMM test.
    612             **************************************************************************/
    613              #ifdef TEST2
    614                #ifdef NUCLEO
    615                  // Turn Off NUCLEO_LED_GREEN LED.
    616                  RoadBrd_gpio_Off( NUCLEO_LED_GREEN );
    617                  // Wait on a character from Nucleo COM Port.
    618          #ifdef REV_L
    619                  Status = RoadBrd_UART_Receive_IT(NUCLEO_USART, tempBffr, 1);
    620                  // Wait for msg to be completed.
    621                  while (RoadBrd_Uart_Status(NUCLEO_USART) != SET)
    622                  {
    623                  }
    624                  // Clear State for Next Transfer.
    625                  clrUsartState( NUCLEO_USART );
    626          #else
    627                  Status = RoadBrd_UART_Receive(NUCLEO_USART, tempBffr, 1);
    628          #endif
    629                  // Turn On NUCLEO_LED_GREEN LED.
    630                  RoadBrd_gpio_On( NUCLEO_LED_GREEN );
    631                  switch(  Status)
    632                  {
    633                    case HAL_OK:
    634                      // We have a good character. Time to build a response string.
    635                      tempBffr2[0] = '(';
    636                      tempBffr2[1] = tempBffr[0];
    637                      tempBffr2[2] = ')';
    638                      tempBffr2[3] = 0x00;
    639                      // Send string to UART..
    640          #ifdef REV_L
    641                      Status = RoadBrd_UART_Transmit_IT(NUCLEO_USART, (uint8_t *)tempBffr2);
    642                      // Wait for msg to be completed.
    643                      while (RoadBrd_Uart_Status(NUCLEO_USART) != SET)
    644                      {
    645                      }
    646                      // Clear State for Next Transfer.
    647                      clrUsartState( NUCLEO_USART );
    648          #else
    649                      Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);
    650          #endif
    651                      if (Status != HAL_OK)
    652                        Error_Handler();
    653                      /*Status = RoadBrd_UART_Transmit_IT(NUCLEO_USART, (uint8_t *)tempBffr2);
    654                      if (Status != HAL_OK)
    655                        Error_Handler();
    656                      // Now wait for completion of Transmit
    657                      PStatus = RESET;
    658                      while (PStatus == RESET)
    659                      {
    660                        PStatus = RoadBrd_Uart_Status(NUCLEO_USART);
    661                      } */
    662                      break;
    663                    case HAL_ERROR:
    664                      // ERROR. We are done.
    665                      Error_Handler();
    666                      break;
    667                    case HAL_BUSY:
    668                      // ERROR. We are done.
    669                      Error_Handler();
    670                      break;
    671                    case HAL_TIMEOUT:
    672                      // Nothing to do. Try again.
    673                      break;
    674                    default:
    675                      // ERROR. We are done.
    676                      Error_Handler();
    677                      break;
    678                    
    679                  }
    680                // Wait 500msec.
    681                RoadBrd_Delay( 50 );
    682                #else
    683                  // Turn Off BGM_LED LED.
    684                  RoadBrd_gpio_Off( BGM_LED );
    685                  // Wait on a character from Nucleo COM Port.
    686           #ifdef REV_L
    687                  Status = RoadBrd_UART_Receive_IT(MONITOR_UART, tempBffr, 1);
    688                  // Wait for msg to be completed.
    689                  while (RoadBrd_Uart_Status(MONITOR_UART) != SET)
    690                  {
    691                  }
    692                  // Clear State for Next Transfer.
    693                  clrUsartState( MONITOR_UART );
    694          #else
    695                  Status = RoadBrd_UART_Receive(MONITOR_UART, tempBffr, 1);
    696          #endif
    697                  // Turn On BGM_LED LED.
    698                  RoadBrd_gpio_On( BGM_LED );
    699                  switch(  Status)
    700                  {
    701                    case HAL_OK:
    702                      // We have a good character. Time to build a response string.
    703                      tempBffr2[0] = '(';
    704                      tempBffr2[1] = tempBffr[0];
    705                      tempBffr2[2] = ')';
    706                      tempBffr2[3] = 0x00;
    707                      // Send string to UART..
    708          #ifdef REV_L
    709                      Status = RoadBrd_UART_Transmit_IT(MONITOR_UART, (uint8_t *)tempBffr2);
    710                      // Wait for msg to be completed.
    711                      while (RoadBrd_Uart_Status(MONITOR_UART) != SET)
    712                      {
    713                      }
    714                      // Clear State for Next Transfer.
    715                      clrUsartState( MONITOR_UART );
    716          #else
    717                      Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);
    718          #endif
    719                      if (Status != HAL_OK)
    720                        Error_Handler();
    721                      /*Status = RoadBrd_UART_Transmit_IT(NUCLEO_USART, (uint8_t *)tempBffr2);
    722                      if (Status != HAL_OK)
    723                        Error_Handler();
    724                      // Now wait for completion of Transmit
    725                      PStatus = RESET;
    726                      while (PStatus == RESET)
    727                      {
    728                        PStatus = RoadBrd_Uart_Status(NUCLEO_USART);
    729                      } */
    730                      break;
    731                    case HAL_ERROR:
    732                      // ERROR. We are done.
    733                      Error_Handler();
    734                      break;
    735                    case HAL_BUSY:
    736                      // ERROR. We are done.
    737                      Error_Handler();
    738                      break;
    739                    case HAL_TIMEOUT:
    740                      // Nothing to do. Try again.
    741                      break;
    742                    default:
    743                      // ERROR. We are done.
    744                      Error_Handler();
    745                      break;
    746                    
    747                  }
    748                // Wait 500msec.
    749                RoadBrd_Delay( 50 );
    750                #endif
    751              //******************Endif TEST2
    752              #else
    753              //******************Else TEST2
    754            /*****************************************************************************
    755             *    NORMAL FLOW HERE
    756             ****************************************************************************/
    757          //         RoadBrd_gpio_Off( NUCLEO_LED_GREEN );
    758          //         Status = RoadBrd_UART_Receive(NUCLEO_USART, tempBffr, 1);
    759                #ifdef NUCLEO
    760                
    761                //************************* NUCLEO VERSION *************************************   
    762                   // Turn Off NUCLEO_LED_GREEN LED.
    763                  RoadBrd_gpio_Off( NUCLEO_LED_GREEN );
    764                  // Wait on a character from Nucleo COM Port.
    765          #ifdef REV_L
    766                  tmpSize = Size;
    767                  pData = tempBffr;
    768                  while ( tmpSize>0 )
    769                  {
    770                    Status = RoadBrd_UART_Receive_IT(NUCLEO_USART, tmpData, 1);
    771                    // Wait for msg to be completed.
    772                    while (RoadBrd_Uart_Status(NUCLEO_USART) != SET)
    773                    {
    774                    }
    775                    // Clear State for Next Transfer.
    776                    clrUsartState( NUCLEO_USART );
    777                    if(Status == HAL_OK)
    778                    {
    779                      // Watch for termination characters.
    780                      if((tmpData[0]==0x0a) || (tmpData[0]==0x0d))
    781                      {
    782                        *pData = 0x00;
    783                        // Yes..We are done.
    784                        return Status;
    785                      }
    786                      else
    787                      {
    788                        // Move new character into passed buffer.
    789                        *pData = tmpData[0];
    790                        tmpSize--;                          // Decrement Count
    791                        pData++;                            // Move pointer to next buffer location.
    792                      }
    793                    }
    794                    else
    795                      Error_Handler();
    796                  } // EndWhile ( tmpSize>0 )
    797          #else
    798                  Status = RoadBrd_UART_Receive(NUCLEO_USART, tempBffr, RECEIVE_SZ);
    799          #endif
    800                  // Turn On NUCLEO_LED_GREEN LED.
    801          #ifndef LED_OFF
    802                  RoadBrd_gpio_On( NUCLEO_LED_GREEN );
    803          #endif
    804          #ifdef ASCII
    805                  // Send <CR><LF> to UART..
    806                  strcpy( (char *)tempBffr2, "\r\n");
    807          #ifdef REV_L
    808                      Status = RoadBrd_UART_Transmit_IT(NUCLEO_USART, (uint8_t *)tempBffr2);
    809                      // Wait for msg to be completed.
    810                      while (RoadBrd_Uart_Status(NUCLEO_USART) != SET)
    811                      {
    812                      }
    813                      // Clear State for Next Transfer.
    814                      clrUsartState( NUCLEO_USART );
    815          #else
    816                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);
    817          #endif
    818                  if (Status != HAL_OK)
    819                    Error_Handler();
    820          #endif
    821                  switch(  Status )
    822                  {
    823                    case HAL_OK:
    824                      Status = RoadBrd_ParseString((char *)tempBffr);
    825                      // We have a good Tasking String. Time to determine action.
    826                      if (Status != HAL_OK)
    827                        Error_Handler();
    828                      
    829                      break;
    830                    case HAL_ERROR:
    831                      // ERROR. We are done.
    832                      Error_Handler();
    833                      break;
    834                    case HAL_BUSY:
    835                      // ERROR. We are done.
    836                      Error_Handler();
    837                      break;
    838                    case HAL_TIMEOUT:
    839                      // Nothing to do. Try again.
    840                      break;
    841                    default:
    842                      // ERROR. We are done.
    843                      Error_Handler();
    844                      break;
    845                  }
    846                // Wait 500msec.
    847                RoadBrd_Delay( 50 );
    848                //************************* END NUCLEO VERSION *************************************   
    849                
    850                #else
    851          
    852                //************************* ROAD BRD VERSION *************************************   
    853                  // Wait on a character from Nucleo COM Port.
    854          //********************PATCH_UART ACTIVE*******************************************
    855          #ifdef PATCH_UART
    856          #ifdef REV_L
    857                  // Turn Off MICRO_LED LED.
    858                  RoadBrd_gpio_Off( MICRO_LED );
    859                  tmpSize = RECEIVE_SZ;
    860                  pData = tempBffr;
    861                  while ( tmpSize>0 )
    862                  {
    863                    Status = RoadBrd_UART_Receive_IT(MONITOR_UART, tmpData, 1);
    864                    // Wait for msg to be completed.
    865                    while (RoadBrd_Uart_Status(MONITOR_UART) != SET)
    866                    {
    867                     }
    868                    // Clear State for Next Transfer.
    869                    clrUsartState( MONITOR_UART );
    870                    if(Status == HAL_OK)
    871                    {
    872                      // Watch for termination characters.
    873                      if((tmpData[0]==0x0a) || (tmpData[0]==0x0d))
    874                      {
    875                        *pData = 0x00;
    876                        // Yes..We are done.
    877                        break;
    878                      }
    879                      else
    880                      {
    881                        // Move new character into passed buffer.
    882                        *pData = tmpData[0];
    883                        tmpSize--;                          // Decrement Count
    884                        pData++;                            // Move pointer to next buffer location.
    885                      }
    886                    }
    887                    else
    888                      Error_Handler();
    889                  } // EndWhile ( tmpSize>0 )
    890          #ifndef LED_OFF
    891                  RoadBrd_gpio_On( MICRO_LED );
    892          #endif
    893                  // Send <CR><LF> to UART..
    894                  strcpy( (char *)tempBffr2, "\r\n");
    895                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);
    896                  if (Status != HAL_OK)
    897                    Error_Handler();
    898                  switch(  Status )
    899                  {
    900                    case HAL_OK:
    901                      // We have a good Tasking String. Time to determine action.
    902                      Status = RoadBrd_ParseString((char *)tempBffr);
    903                      // We have a good Tasking String. Time to determine action.
    904                      if (Status != HAL_OK)
    905                        Error_Handler();
    906                      break;
    907                    case HAL_ERROR:
    908                      // ERROR. We are done.
    909                      Error_Handler();
    910                      break;
    911                    case HAL_BUSY:
    912                      // ERROR. We are done.
    913                      Error_Handler();
    914                      break;
    915                    case HAL_TIMEOUT:
    916                      // Nothing to do. Try again.
    917                      break;
    918                    default:
    919                      // ERROR. We are done.
    920                      Error_Handler();
    921                      break;
    922                    
    923                  } // EndSwitch (  Status )
    924          #else
    925                  // Turn Off BGM_LED LED.
    926                  RoadBrd_gpio_Off( MICRO_LED );
    927                  Status = RoadBrd_UART_Receive(MONITOR_UART, tempBffr, RECEIVE_SZ);
    928                  // Process Buffer Now.
    929                  // Turn On BGM_LED LED.
    930          #ifndef LED_OFF
    931                  RoadBrd_gpio_On( MICRO_LED );
    932          #endif
    933                  // Send <CR><LF> to UART..
    934                  strcpy( (char *)tempBffr2, "\r\n");
    935          #ifdef REV_L
    936                      Status = RoadBrd_UART_Transmit_IT(MONITOR_UART, (uint8_t *)tempBffr2);
    937                      // Wait for msg to be completed.
    938                      while (RoadBrd_Uart_Status(MONITOR_UART) != SET)
    939                      {
    940                      }
    941                      // Clear State for Next Transfer.
    942                      clrUsartState( MONITOR_UART );
    943          #else
    944                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);
    945          #endif
    946                  if (Status != HAL_OK)
    947                    Error_Handler();
    948                  switch(  Status )
    949                  {
    950                    case HAL_OK:
    951                      // We have a good Tasking String. Time to determine action.
    952                      Status = RoadBrd_ParseString((char *)tempBffr);
    953                      // We have a good Tasking String. Time to determine action.
    954                      if (Status != HAL_OK)
    955                        Error_Handler();
    956                      break;
    957                    case HAL_ERROR:
    958                      // ERROR. We are done.
    959                      Error_Handler();
    960                      break;
    961                    case HAL_BUSY:
    962                      // ERROR. We are done.
    963                      Error_Handler();
    964                      break;
    965                    case HAL_TIMEOUT:
    966                      // Nothing to do. Try again.
    967                      break;
    968                    default:
    969                      // ERROR. We are done.
    970                      Error_Handler();
    971                      break;
    972                    
    973                  } // EndSwitch (  Status )
    974          #endif
    975          //********************END PATCH_UART ACTIVE*******************************************
    976          #else
    977          //********************PATCH_UART NOT ACTIVE*******************************************
    978          #ifdef REV_L
    979                    /* Process BLE input */
    980                    BGM111_ProcessInput();
   \                     ??main_39: (+1)
   \   000003E8   0x.... 0x....      BL       BGM111_ProcessInput
    981                  
    982                    // Process Timer Stimulus for Timer 2.
    983                    Status = Proc_Timer2();
   \   000003EC   0x.... 0x....      BL       Proc_Timer2
   \   000003F0   0x0004             MOVS     R4,R0
    984                    if(Status != HAL_OK)
   \   000003F2   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000003F4   0x2C00             CMP      R4,#+0
   \   000003F6   0xD00D             BEQ.N    ??main_40
    985                    {
    986                      strcpy( (char *)tempBffr2, "BGM111_ProcessInput ERROR: Sensors reported Background error.\r\n");
   \   000003F8   0x....             LDR.N    R1,??DataTable1_13
   \   000003FA   0xA801             ADD      R0,SP,#+4
   \   000003FC   0x.... 0x....      BL       strcpy
    987          #ifdef NUCLEO
    988                      Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);
    989          #else
    990                      Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000400   0xA901             ADD      R1,SP,#+4
   \   00000402   0x2000             MOVS     R0,#+0
   \   00000404   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000408   0x0004             MOVS     R4,R0
    991          #endif
    992                      if (Status != HAL_OK)
   \   0000040A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000040C   0x2C00             CMP      R4,#+0
   \   0000040E   0xD001             BEQ.N    ??main_40
    993                        Error_Handler();
   \   00000410   0x.... 0x....      BL       Error_Handler
    994                    }
    995                    /* Process the sensor state machine if the BLE module is ready */
    996                      if ((BGM111_Ready()) &&
    997                          (BGM111_Connected()) &&
    998                          (BGM111_DataConnected()) &&
    999                          (BGM111_SyncModeTest()) )
   \                     ??main_40: (+1)
   \   00000414   0x.... 0x....      BL       BGM111_Ready
   \   00000418   0x2800             CMP      R0,#+0
   \   0000041A   0xD00D             BEQ.N    ??main_41
   \   0000041C   0x.... 0x....      BL       BGM111_Connected
   \   00000420   0x2800             CMP      R0,#+0
   \   00000422   0xD009             BEQ.N    ??main_41
   \   00000424   0x.... 0x....      BL       BGM111_DataConnected
   \   00000428   0x2800             CMP      R0,#+0
   \   0000042A   0xD005             BEQ.N    ??main_41
   \   0000042C   0x.... 0x....      BL       BGM111_SyncModeTest
   \   00000430   0x2800             CMP      R0,#+0
   \   00000432   0xD001             BEQ.N    ??main_41
   1000                    {
   1001                      ProcessSensorState();
   \   00000434   0x.... 0x....      BL       ProcessSensorState
   1002                    }
   1003                    /* Sleep when we have nothing to process */
   1004                    //PWR_EnterSleepMode(PWR_Regulator_ON, PWR_SLEEPEntry_WFI);
   1005                    // Only Process the first Time
   1006                    if (firstTime)
   \                     ??main_41: (+1)
   \   00000438   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000043A   0x2E00             CMP      R6,#+0
   \   0000043C   0xD00E             BEQ.N    ??main_42
   1007                    {
   1008                      firstTime = false;
   \   0000043E   0x2000             MOVS     R0,#+0
   \   00000440   0x0006             MOVS     R6,R0
   1009                      Status = RoadBrd_UART_Receive_IT(MONITOR_UART, tmpData, 1);
   \   00000442   0x2201             MOVS     R2,#+1
   \   00000444   0x4669             MOV      R1,SP
   \   00000446   0x2000             MOVS     R0,#+0
   \   00000448   0x.... 0x....      BL       RoadBrd_UART_Receive_IT
   \   0000044C   0x0004             MOVS     R4,R0
   1010                      // Enable BGM Serial Traffic.
   1011                      HAL_UART_EnableBGM_RX();
   \   0000044E   0x.... 0x....      BL       HAL_UART_EnableBGM_RX
   1012                      RoadBrd_SetBffrFlg();
   \   00000452   0x.... 0x....      BL       RoadBrd_SetBffrFlg
   1013                      // Clear bffrFlag..Only Processing one character.
   1014          //            bffrFlag = false;
   1015                      // Turn Off BGM_LED and MICRO_LED.
   1016                      RoadBrd_gpio_Off( MICRO_LED );
   \   00000456   0x2002             MOVS     R0,#+2
   \   00000458   0x.... 0x....      BL       RoadBrd_gpio_Off
   1017                    }
   1018                    // Service Watchdog
   1019                    RoadBrd_WWDG_Refresh();     // Refresh WatchDog
   \                     ??main_42: (+1)
   \   0000045C   0x.... 0x....      BL       RoadBrd_WWDG_Refresh
   1020                    // Wait for msg to be completed.
   1021                    while (RoadBrd_Uart_Status(MONITOR_UART) != SET)
   \                     ??main_43: (+1)
   \   00000460   0x2000             MOVS     R0,#+0
   \   00000462   0x.... 0x....      BL       RoadBrd_Uart_Status
   \   00000466   0x2801             CMP      R0,#+1
   \   00000468   0xD028             BEQ.N    ??main_44
   1022                    {
   1023                      // Process Timer Stimulus for Timer 2.
   1024                      Status = Proc_Timer2();
   \   0000046A   0x.... 0x....      BL       Proc_Timer2
   \   0000046E   0x0004             MOVS     R4,R0
   1025                      if(Status != HAL_OK)
   \   00000470   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000472   0x2C00             CMP      R4,#+0
   \   00000474   0xD00D             BEQ.N    ??main_45
   1026                      {
   1027                        strcpy( (char *)tempBffr2, "BGM111_ProcessInput ERROR: Sensors reported Background error.\r\n");
   \   00000476   0x....             LDR.N    R1,??DataTable1_13
   \   00000478   0xA801             ADD      R0,SP,#+4
   \   0000047A   0x.... 0x....      BL       strcpy
   1028          #ifdef NUCLEO
   1029                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);
   1030          #else
   1031                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000047E   0xA901             ADD      R1,SP,#+4
   \   00000480   0x2000             MOVS     R0,#+0
   \   00000482   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000486   0x0004             MOVS     R4,R0
   1032          #endif
   1033                        if (Status != HAL_OK)
   \   00000488   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000048A   0x2C00             CMP      R4,#+0
   \   0000048C   0xD001             BEQ.N    ??main_45
   1034                          Error_Handler();
   \   0000048E   0x.... 0x....      BL       Error_Handler
   1035                      }
   1036                      /* Process the sensor state machine if the BLE module is ready */
   1037                      if ((BGM111_Ready()) &&
   1038                          (BGM111_Connected()) &&
   1039                          (BGM111_DataConnected()) &&
   1040                          (BGM111_SyncModeTest()) )
   \                     ??main_45: (+1)
   \   00000492   0x.... 0x....      BL       BGM111_Ready
   \   00000496   0x2800             CMP      R0,#+0
   \   00000498   0xD0E2             BEQ.N    ??main_43
   \   0000049A   0x.... 0x....      BL       BGM111_Connected
   \   0000049E   0x2800             CMP      R0,#+0
   \   000004A0   0xD0DE             BEQ.N    ??main_43
   \   000004A2   0x.... 0x....      BL       BGM111_DataConnected
   \   000004A6   0x2800             CMP      R0,#+0
   \   000004A8   0xD0DA             BEQ.N    ??main_43
   \   000004AA   0x.... 0x....      BL       BGM111_SyncModeTest
   \   000004AE   0x2800             CMP      R0,#+0
   \   000004B0   0xD0D6             BEQ.N    ??main_43
   1041                      {
   1042                        // Service Watchdog
   1043                        RoadBrd_WWDG_Refresh();     // Refresh WatchDog
   \   000004B2   0x.... 0x....      BL       RoadBrd_WWDG_Refresh
   1044                        ProcessSensorState();
   \   000004B6   0x.... 0x....      BL       ProcessSensorState
   \   000004BA   0xE7D1             B.N      ??main_43
   1045                      }
   1046                      // Test to see if we have any BGM Traffic to process.
   1047                      //BGM111_ProcessInput();
   1048                    }
   1049                    // Test if BGM or Monitor Character received.
   1050                    if (RoadBrd_Uart_Status(MONITOR_UART) == SET)
   \                     ??main_44: (+1)
   \   000004BC   0x2000             MOVS     R0,#+0
   \   000004BE   0x.... 0x....      BL       RoadBrd_Uart_Status
   \   000004C2   0x2801             CMP      R0,#+1
   \   000004C4   0xD178             BNE.N    ??main_46
   1051                    {
   1052                      // Clear State for Next Transfer.
   1053                      clrUsartState( MONITOR_UART );
   \   000004C6   0x2000             MOVS     R0,#+0
   \   000004C8   0x.... 0x....      BL       clrUsartState
   1054                      if(Status == HAL_OK)
   \   000004CC   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000004CE   0x2C00             CMP      R4,#+0
   \   000004D0   0xD167             BNE.N    ??main_47
   1055                      {
   1056                        // Test Bypass Flag...If Set, we ae in special monitor mode.
   1057                        if (Tst_Bypass())
   \   000004D2   0x.... 0x....      BL       Tst_Bypass
   \   000004D6   0x2800             CMP      R0,#+0
   \   000004D8   0xD023             BEQ.N    ??main_48
   1058                        {
   1059                          pData[0] = tmpData[0];
   \   000004DA   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000004DE   0x7038             STRB     R0,[R7, #+0]
   1060                          pData[1] = 0x00;
   \   000004E0   0x2000             MOVS     R0,#+0
   \   000004E2   0x7078             STRB     R0,[R7, #+1]
   1061                          // Clear State for Next Transfer.
   1062                          clrUsartState( MONITOR_UART );
   \   000004E4   0x2000             MOVS     R0,#+0
   \   000004E6   0x.... 0x....      BL       clrUsartState
   1063                          if (Status != HAL_OK)
   \   000004EA   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000004EC   0x2C00             CMP      R4,#+0
   \   000004EE   0xD001             BEQ.N    ??main_49
   1064                            Error_Handler();
   \   000004F0   0x.... 0x....      BL       Error_Handler
   1065                          if(Status == HAL_OK)
   \                     ??main_49: (+1)
   \   000004F4   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000004F6   0x2C00             CMP      R4,#+0
   \   000004F8   0xD10C             BNE.N    ??main_50
   1066                          {
   1067                            // We have a good Tasking String. Time to determine action.
   1068                            // Turn On BGM_LED LED.
   1069            #ifndef LED_OFF
   1070                            RoadBrd_gpio_On( GREEN_LED );
   \   000004FA   0x2002             MOVS     R0,#+2
   \   000004FC   0x.... 0x....      BL       RoadBrd_gpio_On
   1071            #endif
   1072                            Status = RoadBrd_ParseString((char *)tempBffr);
   \   00000500   0xA815             ADD      R0,SP,#+84
   \   00000502   0x.... 0x....      BL       RoadBrd_ParseString
   \   00000506   0x0004             MOVS     R4,R0
   1073                            // We have a good Tasking String. Time to determine action.
   1074                            if (Status != HAL_OK)
   \   00000508   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000050A   0x2C00             CMP      R4,#+0
   \   0000050C   0xD004             BEQ.N    ??main_51
   1075                              Error_Handler();
   \   0000050E   0x.... 0x....      BL       Error_Handler
   \   00000512   0xE001             B.N      ??main_51
   1076                          }
   1077                          else
   1078                            Error_Handler();
   \                     ??main_50: (+1)
   \   00000514   0x.... 0x....      BL       Error_Handler
   1079                          tmpSize = RECEIVE_SZ;
   \                     ??main_51: (+1)
   \   00000518   0x201E             MOVS     R0,#+30
   \   0000051A   0x0005             MOVS     R5,R0
   1080                          pData = tempBffr;
   \   0000051C   0xA815             ADD      R0,SP,#+84
   \   0000051E   0x0007             MOVS     R7,R0
   \   00000520   0xE041             B.N      ??main_52
   1081                        } // EndIf (Tst_Bypass())
   1082                        else {
   1083                          // Watch for termination characters.
   1084                          if((tmpData[0]==0x0a) || (tmpData[0]==0x0d) || (tmpSize<=0) )
   \                     ??main_48: (+1)
   \   00000522   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000526   0x280A             CMP      R0,#+10
   \   00000528   0xD006             BEQ.N    ??main_53
   \   0000052A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000052E   0x280D             CMP      R0,#+13
   \   00000530   0xD002             BEQ.N    ??main_53
   \   00000532   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000534   0x2D00             CMP      R5,#+0
   \   00000536   0xD12E             BNE.N    ??main_54
   1085                          {
   1086                            *pData = 0x00;
   \                     ??main_53: (+1)
   \   00000538   0x2000             MOVS     R0,#+0
   \   0000053A   0x7038             STRB     R0,[R7, #+0]
   1087                            // Yes..We are done.
   1088                            // Process Buffer NOW.
   1089                            // Send <CR><LF> to UART..
   1090                            strcpy( (char *)tempBffr2, "\r\n");
   \   0000053C   0x....             ADR.N    R1,??DataTable1  ;; 0x0D, 0x0A, 0x00, 0x00
   \   0000053E   0xA801             ADD      R0,SP,#+4
   \   00000540   0x.... 0x....      BL       strcpy
   1091                            Status = RoadBrd_UART_Transmit_IT(MONITOR_UART, (uint8_t *)tempBffr2);
   \   00000544   0xA901             ADD      R1,SP,#+4
   \   00000546   0x2000             MOVS     R0,#+0
   \   00000548   0x.... 0x....      BL       RoadBrd_UART_Transmit_IT
   \   0000054C   0x0004             MOVS     R4,R0
   1092                            // Wait for msg to be completed.
   1093                            while (RoadBrd_Uart_Status(MONITOR_UART) != SET)
   \                     ??main_55: (+1)
   \   0000054E   0x2000             MOVS     R0,#+0
   \   00000550   0x.... 0x....      BL       RoadBrd_Uart_Status
   \   00000554   0x2801             CMP      R0,#+1
   \   00000556   0xD1FA             BNE.N    ??main_55
   1094                            {
   1095                            }
   1096                            // Clear State for Next Transfer.
   1097                            clrUsartState( MONITOR_UART );
   \   00000558   0x2000             MOVS     R0,#+0
   \   0000055A   0x.... 0x....      BL       clrUsartState
   1098                            if (Status != HAL_OK)
   \   0000055E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000560   0x2C00             CMP      R4,#+0
   \   00000562   0xD001             BEQ.N    ??main_56
   1099                              Error_Handler();
   \   00000564   0x.... 0x....      BL       Error_Handler
   1100                            if(Status == HAL_OK)
   \                     ??main_56: (+1)
   \   00000568   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000056A   0x2C00             CMP      R4,#+0
   \   0000056C   0xD10C             BNE.N    ??main_57
   1101                            {
   1102                              // We have a good Tasking String. Time to determine action.
   1103                              // Turn On BGM_LED LED.
   1104            #ifndef LED_OFF
   1105                              RoadBrd_gpio_On( GREEN_LED );
   \   0000056E   0x2002             MOVS     R0,#+2
   \   00000570   0x.... 0x....      BL       RoadBrd_gpio_On
   1106            #endif
   1107                              Status = RoadBrd_ParseString((char *)tempBffr);
   \   00000574   0xA815             ADD      R0,SP,#+84
   \   00000576   0x.... 0x....      BL       RoadBrd_ParseString
   \   0000057A   0x0004             MOVS     R4,R0
   1108                              // We have a good Tasking String. Time to determine action.
   1109                              if (Status != HAL_OK)
   \   0000057C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000057E   0x2C00             CMP      R4,#+0
   \   00000580   0xD004             BEQ.N    ??main_58
   1110                                Error_Handler();
   \   00000582   0x.... 0x....      BL       Error_Handler
   \   00000586   0xE001             B.N      ??main_58
   1111                            }
   1112                            else
   1113                              Error_Handler();
   \                     ??main_57: (+1)
   \   00000588   0x.... 0x....      BL       Error_Handler
   1114                            tmpSize = RECEIVE_SZ;
   \                     ??main_58: (+1)
   \   0000058C   0x201E             MOVS     R0,#+30
   \   0000058E   0x0005             MOVS     R5,R0
   1115                            pData = tempBffr;
   \   00000590   0xA815             ADD      R0,SP,#+84
   \   00000592   0x0007             MOVS     R7,R0
   \   00000594   0xE007             B.N      ??main_52
   1116                          } // EndIf ((tmpData[0]==0x0a) || (tmpData[0]==0x0d) || (tmpSize<=0) )
   1117                          else
   1118                          {
   1119                            *pData = tmpData[0];
   \                     ??main_54: (+1)
   \   00000596   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000059A   0x7038             STRB     R0,[R7, #+0]
   1120                            tmpSize--;                          // Decrement Count
   \   0000059C   0x1E6D             SUBS     R5,R5,#+1
   1121                            pData++;                            // Move pointer to next buffer location.
   \   0000059E   0x1C7F             ADDS     R7,R7,#+1
   \   000005A0   0xE001             B.N      ??main_52
   1122                          }
   1123                        } // EndElse (Tst_Bypass())
   1124                      }
   1125                      else
   1126                        Error_Handler();
   \                     ??main_47: (+1)
   \   000005A2   0x.... 0x....      BL       Error_Handler
   1127                    Status = RoadBrd_UART_Receive_IT(MONITOR_UART, tmpData, 1);
   \                     ??main_52: (+1)
   \   000005A6   0x2201             MOVS     R2,#+1
   \   000005A8   0x4669             MOV      R1,SP
   \   000005AA   0x2000             MOVS     R0,#+0
   \   000005AC   0x.... 0x....      BL       RoadBrd_UART_Receive_IT
   \   000005B0   0x0004             MOVS     R4,R0
   1128                    // Turn Off MICRO_LED.
   1129                    RoadBrd_gpio_Off( MICRO_LED );
   \   000005B2   0x2002             MOVS     R0,#+2
   \   000005B4   0x.... 0x....      BL       RoadBrd_gpio_Off
   1130                  } // EndIf (RoadBrd_Uart_Status(MONITOR_UART) == SET)
   1131          
   1132          #else
   1133                  // Turn Off BGM_LED LED.
   1134                  RoadBrd_gpio_Off( MICRO_LED );
   1135                  Status = RoadBrd_UART_Receive(MONITOR_UART, tempBffr, RECEIVE_SZ);
   1136                  // Turn On BGM_LED LED.
   1137          #ifndef LED_OFF
   1138                  RoadBrd_gpio_On( MICRO_LED );
   1139          #endif
   1140                  // Send <CR><LF> to UART..
   1141                  strcpy( (char *)tempBffr2, "\r\n");
   1142                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);
   1143                  if (Status != HAL_OK)
   1144                    Error_Handler();
   1145                  switch(  Status )
   1146                  {
   1147                    case HAL_OK:
   1148                      // We have a good Tasking String. Time to determine action.
   1149                      Status = RoadBrd_ParseString((char *)tempBffr);
   1150                      // We have a good Tasking String. Time to determine action.
   1151                      if (Status != HAL_OK)
   1152                        Error_Handler();
   1153                      break;
   1154                    case HAL_ERROR:
   1155                      // ERROR. We are done.
   1156                      Error_Handler();
   1157                      break;
   1158                    case HAL_BUSY:
   1159                      // ERROR. We are done.
   1160                      Error_Handler();
   1161                      break;
   1162                    case HAL_TIMEOUT:
   1163                      // Nothing to do. Try again.
   1164                      break;
   1165                    default:
   1166                      // ERROR. We are done.
   1167                      Error_Handler();
   1168                      break;
   1169                    
   1170                  } // EndSwitch (  Status )
   1171          #endif
   1172          //********************END PATCH_UART NOT ACTIVE*******************************************
   1173          #endif
   1174                // Wait 50msec.
   1175                RoadBrd_Delay( 50 );
   \                     ??main_46: (+1)
   \   000005B8   0x2032             MOVS     R0,#+50
   \   000005BA   0x.... 0x....      BL       RoadBrd_Delay
   \   000005BE   0xE713             B.N      ??main_39
   1176                //************************* END Road BRD VERSION *************************************   
   1177                #endif
   1178            /*****************************************************************************
   1179             *    END NORMAL FLOW HERE
   1180             ****************************************************************************/
   1181              //******************EndElse TEST2
   1182              #endif
   1183          
   1184            //******************EndElse TEST
   1185            #endif
   1186            } // EndWhile (1)
   1187          //********************ENDIF TASKING
   1188          #endif
   1189            /* USER CODE END 3 */
   1190          
   1191          }
   1192          
   1193          /** System Clock Configuration
   1194          */

   \                                 In section .text, align 2, keep-with-next
   1195          void SystemClock_Config(void)
   1196          {
   \                     SystemClock_Config: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB093             SUB      SP,SP,#+76
   1197          
   1198            RCC_OscInitTypeDef RCC_OscInitStruct;
   1199            RCC_ClkInitTypeDef RCC_ClkInitStruct;
   1200          
   1201            __HAL_RCC_PWR_CLK_ENABLE();
   \   00000004   0x....             LDR.N    R0,??DataTable1_14  ;; 0x40023824
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0xF050 0x5080      ORRS     R0,R0,#0x10000000
   \   0000000C   0x....             LDR.N    R1,??DataTable1_14  ;; 0x40023824
   \   0000000E   0x6008             STR      R0,[R1, #+0]
   \   00000010   0x....             LDR.N    R0,??DataTable1_14  ;; 0x40023824
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0xF010 0x5080      ANDS     R0,R0,#0x10000000
   \   00000018   0x9000             STR      R0,[SP, #+0]
   \   0000001A   0x9800             LDR      R0,[SP, #+0]
   1202          
   1203            __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
   \   0000001C   0x....             LDR.N    R0,??DataTable1_15  ;; 0x40007000
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0xF430 0x50C0      BICS     R0,R0,#0x1800
   \   00000024   0xF450 0x6000      ORRS     R0,R0,#0x800
   \   00000028   0x....             LDR.N    R1,??DataTable1_15  ;; 0x40007000
   \   0000002A   0x6008             STR      R0,[R1, #+0]
   1204          
   1205            RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
   \   0000002C   0x2003             MOVS     R0,#+3
   \   0000002E   0x9006             STR      R0,[SP, #+24]
   1206            RCC_OscInitStruct.HSEState = RCC_HSE_ON;
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0x9007             STR      R0,[SP, #+28]
   1207            RCC_OscInitStruct.HSIState = RCC_HSI_ON;
   \   00000034   0x2001             MOVS     R0,#+1
   \   00000036   0x9009             STR      R0,[SP, #+36]
   1208            RCC_OscInitStruct.HSICalibrationValue = 16;
   \   00000038   0x2010             MOVS     R0,#+16
   \   0000003A   0x900A             STR      R0,[SP, #+40]
   1209            RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
   \   0000003C   0x2002             MOVS     R0,#+2
   \   0000003E   0x900F             STR      R0,[SP, #+60]
   1210            RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
   \   00000040   0xF45F 0x3080      MOVS     R0,#+65536
   \   00000044   0x9010             STR      R0,[SP, #+64]
   1211            RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
   \   00000046   0xF45F 0x1080      MOVS     R0,#+1048576
   \   0000004A   0x9011             STR      R0,[SP, #+68]
   1212            RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
   \   0000004C   0xF45F 0x0000      MOVS     R0,#+8388608
   \   00000050   0x9012             STR      R0,[SP, #+72]
   1213            if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
   \   00000052   0xA806             ADD      R0,SP,#+24
   \   00000054   0x.... 0x....      BL       HAL_RCC_OscConfig
   \   00000058   0x2800             CMP      R0,#+0
   \   0000005A   0xD001             BEQ.N    ??SystemClock_Config_0
   1214            {
   1215              Error_Handler();
   \   0000005C   0x.... 0x....      BL       Error_Handler
   1216            }
   1217          
   1218            RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
   1219                                        |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
   \                     ??SystemClock_Config_0: (+1)
   \   00000060   0x200F             MOVS     R0,#+15
   \   00000062   0x9001             STR      R0,[SP, #+4]
   1220            RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
   \   00000064   0x2003             MOVS     R0,#+3
   \   00000066   0x9002             STR      R0,[SP, #+8]
   1221            RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
   \   00000068   0x2000             MOVS     R0,#+0
   \   0000006A   0x9003             STR      R0,[SP, #+12]
   1222            RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
   \   0000006C   0x2000             MOVS     R0,#+0
   \   0000006E   0x9004             STR      R0,[SP, #+16]
   1223            RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
   \   00000070   0x2000             MOVS     R0,#+0
   \   00000072   0x9005             STR      R0,[SP, #+20]
   1224            if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
   \   00000074   0x2101             MOVS     R1,#+1
   \   00000076   0xA801             ADD      R0,SP,#+4
   \   00000078   0x.... 0x....      BL       HAL_RCC_ClockConfig
   \   0000007C   0x2800             CMP      R0,#+0
   \   0000007E   0xD001             BEQ.N    ??SystemClock_Config_1
   1225            {
   1226              Error_Handler();
   \   00000080   0x.... 0x....      BL       Error_Handler
   1227            }
   1228          
   1229            HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
   \                     ??SystemClock_Config_1: (+1)
   \   00000084   0x.... 0x....      BL       HAL_RCC_GetHCLKFreq
   \   00000088   0xF44F 0x717A      MOV      R1,#+1000
   \   0000008C   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000090   0x.... 0x....      BL       HAL_SYSTICK_Config
   1230          
   1231            HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
   \   00000094   0x2004             MOVS     R0,#+4
   \   00000096   0x.... 0x....      BL       HAL_SYSTICK_CLKSourceConfig
   1232          
   1233            /* SysTick_IRQn interrupt configuration */
   1234            HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
   \   0000009A   0x2200             MOVS     R2,#+0
   \   0000009C   0x210F             MOVS     R1,#+15
   \   0000009E   0xF05F 0x30FF      MOVS     R0,#-1
   \   000000A2   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1235          }
   \   000000A6   0xB013             ADD      SP,SP,#+76
   \   000000A8   0xBD00             POP      {PC}             ;; return
   1236          
   1237          /* USER CODE BEGIN 4 */
   1238          
   1239          /* USER CODE END 4 */
   1240          
   1241          /**
   1242            * @brief  This function is executed in case of error occurrence.
   1243            * @param  None
   1244            * @retval None
   1245            */

   \                                 In section .text, align 2, keep-with-next
   1246          void Error_Handler(void)
   1247          {
   \                     Error_Handler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1248            /* USER CODE BEGIN Error_Handler */
   1249            /* User can add his own implementation to report the HAL error return state */
   1250            // Turn LED2 on
   1251          #ifdef NUCLEO
   1252            BSP_LED_On(LED2);
   1253          #else
   1254            RoadBrd_LED_On(BLUE_LED);
   \   00000002   0x2001             MOVS     R0,#+1
   \   00000004   0x.... 0x....      BL       RoadBrd_LED_On
   1255            RoadBrd_LED_On(GREEN_LED);
   \   00000008   0x2002             MOVS     R0,#+2
   \   0000000A   0x.... 0x....      BL       RoadBrd_LED_On
   1256            RoadBrd_LED_On(YELLOW_LED);
   \   0000000E   0x2003             MOVS     R0,#+3
   \   00000010   0x.... 0x....      BL       RoadBrd_LED_On
   1257          #endif
   1258            while(1) 
   1259            {
   1260              // Error if LED2 is slowly blinking (1 sec. period)
   1261          #ifdef NUCLEO
   1262              BSP_LED_Toggle(LED2); 
   1263          #else
   1264              RoadBrd_LED_Toggle(BLUE_LED); 
   \                     ??Error_Handler_0: (+1)
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x.... 0x....      BL       RoadBrd_LED_Toggle
   1265              RoadBrd_LED_Toggle(GREEN_LED); 
   \   0000001A   0x2002             MOVS     R0,#+2
   \   0000001C   0x.... 0x....      BL       RoadBrd_LED_Toggle
   1266              RoadBrd_LED_Toggle(YELLOW_LED); 
   \   00000020   0x2003             MOVS     R0,#+3
   \   00000022   0x.... 0x....      BL       RoadBrd_LED_Toggle
   1267          #endif
   1268              HAL_Delay(50); 
   \   00000026   0x2032             MOVS     R0,#+50
   \   00000028   0x.... 0x....      BL       HAL_Delay
   \   0000002C   0xE7F2             B.N      ??Error_Handler_0
   1269            }
   1270            /* USER CODE END Error_Handler */ 
   1271          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x........         DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x........         DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \   00000000   0x........         DC32     ?_5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \   00000000   0x........         DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_7:
   \   00000000   0x41200000         DC32     0x41200000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_8:
   \   00000000   0x........         DC32     ?_6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_9:
   \   00000000   0x........         DC32     ?_7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_10:
   \   00000000   0x........         DC32     ?_8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_11:
   \   00000000   0x........         DC32     ?_9

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_12:
   \   00000000   0x........         DC32     ?_10

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_13:
   \   00000000   0x........         DC32     ?_11

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_14:
   \   00000000   0x40023824         DC32     0x40023824

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_15:
   \   00000000   0x40007000         DC32     0x40007000

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x2A 0x2A          DC8 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH
   \              0x2A 0x2A    
   \              0x2A 0x2A    
   \              0x2A 0x2A    
   \   00000008   0x2A 0x2A          DC8 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH
   \              0x2A 0x2A    
   \              0x2A 0x2A    
   \              0x2A 0x2A    
   \   00000010   0x2A 0x2A          DC8 2AH, 2AH, 2AH, 2AH, 2AH, 20H, 20H, 57H
   \              0x2A 0x2A    
   \              0x2A 0x20    
   \              0x20 0x57    
   \   00000018   0x45 0x41          DC8 45H, 41H, 54H, 48H, 45H, 52H, 43H, 4CH
   \              0x54 0x48    
   \              0x45 0x52    
   \              0x43 0x4C    
   \   00000020   0x4F 0x55          DC8 4FH, 55H, 44H, 20H, 2AH, 2AH, 2AH, 2AH
   \              0x44 0x20    
   \              0x2A 0x2A    
   \              0x2A 0x2A    
   \   00000028   0x2A 0x2A          DC8 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH
   \              0x2A 0x2A    
   \              0x2A 0x2A    
   \              0x2A 0x2A    
   \   00000030   0x2A 0x2A          DC8 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH
   \              0x2A 0x2A    
   \              0x2A 0x2A    
   \              0x2A 0x2A    
   \   00000038   0x2A 0x0D          DC8 2AH, 0DH, 0AH, 0DH, 0AH, 0
   \              0x0A 0x0D    
   \              0x0A 0x00    
   \   0000003E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x20 0x20          DC8 "     Road Board Monitor %s Hardware Version %s \015\012"
   \              0x20 0x20    
   \              0x20 0x52    
   \              0x6F 0x61    
   \              0x64 0x20    
   \              0x42 0x6F    
   \              0x61 0x72    
   \              0x64 0x20    
   \              0x4D 0x6F    
   \              0x6E 0x69    
   \              0x74 0x6F    
   \              0x72 0x20    
   \              0x25 0x73    
   \              0x20 0x48    
   \              0x61 0x72    
   \              0x64 0x77    
   \              0x61 0x72    
   \              0x65 0x20    
   \              0x56 0x65    
   \              0x72 0x73    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x25 0x73    
   \              0x20 0x0D    
   \              0x0A 0x00    
   \   00000032   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x4E 0x2E          DC8 "N.8.6"
   \              0x38 0x2E    
   \              0x36 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x52 0x65          DC8 "Rev M"
   \              0x76 0x20    
   \              0x4D 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_4:
   \   00000000   0x20 0x20          DC8 "                  Copyright %s. \015\012\015\012"
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x43 0x6F    
   \              0x70 0x79    
   \              0x72 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \              0x25 0x73    
   \              0x2E 0x20    
   \              0x0D 0x0A    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_5:
   \   00000000   0x53 0x65          DC8 "Sep 8, 2017"
   \              0x70 0x20    
   \              0x38 0x2C    
   \              0x20 0x32    
   \              0x30 0x31    
   \              0x37 0x00    

   \                                 In section .rodata, align 4
   \                     ?_6:
   \   00000000   0x52 0x64          DC8 "RdSnd Sample Rate:  %3.1f Seconds.\015\012"
   \              0x53 0x6E    
   \              0x64 0x20    
   \              0x53 0x61    
   \              0x6D 0x70    
   \              0x6C 0x65    
   \              0x20 0x52    
   \              0x61 0x74    
   \              0x65 0x3A    
   \              0x20 0x20    
   \              0x25 0x33    
   \              0x2E 0x31    
   \              0x66 0x20    
   \              0x53 0x65    
   \              0x63 0x6F    
   \              0x6E 0x64    
   \              0x73 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_7:
   \   00000000   0x53 0x65          DC8 "Sensor Sample Rate: %3.1f Seconds.\015\012"
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \              0x61 0x6D    
   \              0x70 0x6C    
   \              0x65 0x20    
   \              0x52 0x61    
   \              0x74 0x65    
   \              0x3A 0x20    
   \              0x25 0x33    
   \              0x2E 0x31    
   \              0x66 0x20    
   \              0x53 0x65    
   \              0x63 0x6F    
   \              0x6E 0x64    
   \              0x73 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_8:
   \   00000000   0x54 0x41          DC8 "TACK Limit: %d. \015\012"
   \              0x43 0x4B    
   \              0x20 0x4C    
   \              0x69 0x6D    
   \              0x69 0x74    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x2E 0x20    
   \              0x0D 0x0A    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_9:
   \   00000000   0x55 0x6E          DC8 "Units XML State: ENABLED\015\012\015\012> "
   \              0x69 0x74    
   \              0x73 0x20    
   \              0x58 0x4D    
   \              0x4C 0x20    
   \              0x53 0x74    
   \              0x61 0x74    
   \              0x65 0x3A    
   \              0x20 0x45    
   \              0x4E 0x41    
   \              0x42 0x4C    
   \              0x45 0x44    
   \              0x0D 0x0A    
   \              0x0D 0x0A    
   \              0x3E 0x20    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_10:
   \   00000000   0x55 0x6E          DC8 "Units XML State: DISABLED\015\012\015\012> "
   \              0x69 0x74    
   \              0x73 0x20    
   \              0x58 0x4D    
   \              0x4C 0x20    
   \              0x53 0x74    
   \              0x61 0x74    
   \              0x65 0x3A    
   \              0x20 0x44    
   \              0x49 0x53    
   \              0x41 0x42    
   \              0x4C 0x45    
   \              0x44 0x0D    
   \              0x0A 0x0D    
   \              0x0A 0x3E    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_11:
   \   00000000   0x42 0x47          DC8 42H, 47H, 4DH, 31H, 31H, 31H, 5FH, 50H
   \              0x4D 0x31    
   \              0x31 0x31    
   \              0x5F 0x50    
   \   00000008   0x72 0x6F          DC8 72H, 6FH, 63H, 65H, 73H, 73H, 49H, 6EH
   \              0x63 0x65    
   \              0x73 0x73    
   \              0x49 0x6E    
   \   00000010   0x70 0x75          DC8 70H, 75H, 74H, 20H, 45H, 52H, 52H, 4FH
   \              0x74 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \   00000018   0x52 0x3A          DC8 52H, 3AH, 20H, 53H, 65H, 6EH, 73H, 6FH
   \              0x20 0x53    
   \              0x65 0x6E    
   \              0x73 0x6F    
   \   00000020   0x72 0x73          DC8 72H, 73H, 20H, 72H, 65H, 70H, 6FH, 72H
   \              0x20 0x72    
   \              0x65 0x70    
   \              0x6F 0x72    
   \   00000028   0x74 0x65          DC8 74H, 65H, 64H, 20H, 42H, 61H, 63H, 6BH
   \              0x64 0x20    
   \              0x42 0x61    
   \              0x63 0x6B    
   \   00000030   0x67 0x72          DC8 67H, 72H, 6FH, 75H, 6EH, 64H, 20H, 65H
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x20 0x65    
   \   00000038   0x72 0x72          DC8 72H, 72H, 6FH, 72H, 2EH, 0DH, 0AH, 0
   \              0x6F 0x72    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \   00000000   0x0D 0x0A          DC8 "\015\012"
   \              0x00         
   \   00000003   0x00               DC8 0
   1272          
   1273          #ifdef USE_FULL_ASSERT
   1274          
   1275          /**
   1276             * @brief Reports the name of the source file and the source line number
   1277             * where the assert_param error has occurred.
   1278             * @param file: pointer to the source file name
   1279             * @param line: assert_param error line source number
   1280             * @retval None
   1281             */
   1282          void assert_failed(uint8_t* file, uint32_t line)
   1283          {
   1284            /* USER CODE BEGIN 6 */
   1285            /* User can add his own implementation to report the file name and line number,
   1286              ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
   1287            /* USER CODE END 6 */
   1288          
   1289          }
   1290          #endif
   1291          
   1292          /**
   1293            * @}
   1294            */ 
   1295          
   1296          /**
   1297            * @}
   1298          */ 
   1299          
   1300          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   Error_Handler
         8   -> HAL_Delay
         8   -> RoadBrd_LED_On
         8   -> RoadBrd_LED_Toggle
      80   SystemClock_Config
        80   -> Error_Handler
        80   -> HAL_NVIC_SetPriority
        80   -> HAL_RCC_ClockConfig
        80   -> HAL_RCC_GetHCLKFreq
        80   -> HAL_RCC_OscConfig
        80   -> HAL_SYSTICK_CLKSourceConfig
        80   -> HAL_SYSTICK_Config
     168   main
       168   -> ADC_Config
       168   -> BGM111_Connected
       168   -> BGM111_DataConnected
       168   -> BGM111_Init
       168   -> BGM111_ProcessInput
       168   -> BGM111_Ready
       168   -> BGM111_SyncModeTest
       168   -> Error_Handler
       168   -> Get_DriverStates
       168   -> HAL_Init
       168   -> HAL_NVIC_EnableIRQ
       168   -> HAL_TIM_StartTimer2
       168   -> HAL_TIM_StartTimer3
       168   -> HAL_UART_EnableBGM_RX
       168   -> I2C_WaitBusyFlag
       168   -> InitSensors
       168   -> MX_ADC_Init
       168   -> MX_DMA_Init
       168   -> MX_GPIO_Init
       168   -> MX_I2C1_Init
       168   -> MX_TIM2_Init
       168   -> MX_TIM3_Init
       168   -> MX_USART2_UART_Init
       168   -> MX_USART3_UART_Init
       168   -> MX_WWDG_Init
       168   -> Proc_Timer2
       168   -> ProcessSensorState
       168   -> RdBrd_ErrCdLogErrCd
       168   -> Reset_DriverStates
       168   -> RoadBrd_CAL_InitializeFrmFlash
       168   -> RoadBrd_CAL_VerifyFrame
       168   -> RoadBrd_CoolEyeInit
       168   -> RoadBrd_Delay
       168   -> RoadBrd_Get_RdSndTickCnt
       168   -> RoadBrd_Get_SnsrTickCnt
       168   -> RoadBrd_Get_TackLimit
       168   -> RoadBrd_Get_UnitsFlag
       168   -> RoadBrd_GridEyeInit
       168   -> RoadBrd_HumidityInit
       168   -> RoadBrd_Init_Barometer
       168   -> RoadBrd_Init_VMonitor
       168   -> RoadBrd_ParseString
       168   -> RoadBrd_RGBInit
       168   -> RoadBrd_ReadTemp
       168   -> RoadBrd_SetBffrFlg
       168   -> RoadBrd_TestI2C
       168   -> RoadBrd_UART_Receive_IT
       168   -> RoadBrd_UART_Transmit
       168   -> RoadBrd_UART_Transmit_IT
       168   -> RoadBrd_Uart_Status
       168   -> RoadBrd_WWDG_InitializeFrmFlash
       168   -> RoadBrd_WWDG_Refresh
       168   -> RoadBrd_WWDG_Start
       168   -> RoadBrd_WWDG_VerifyFrame
       168   -> RoadBrd_gpio_Off
       168   -> RoadBrd_gpio_On
       168   -> Set_DriverStates
       168   -> Set_TickCounts
       168   -> SystemClock_Config
       168   -> Tst_Bypass
       168   -> __aeabi_f2d
       168   -> __aeabi_fdiv
       168   -> __aeabi_ui2f
       168   -> clrUsartState
       168   -> sprintf
       168   -> strcpy


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_10
       4  ??DataTable1_11
       4  ??DataTable1_12
       4  ??DataTable1_13
       4  ??DataTable1_14
       4  ??DataTable1_15
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
       4  ??DataTable1_7
       4  ??DataTable1_8
       4  ??DataTable1_9
      64  ?_0
      52  ?_1
      32  ?_10
      64  ?_11
       4  ?_12
       8  ?_2
       8  ?_3
      40  ?_4
      12  ?_5
      40  ?_6
      40  ?_7
      20  ?_8
      32  ?_9
      46  Error_Handler
     170  SystemClock_Config
    1472  main

 
   416 bytes in section .rodata
 1 752 bytes in section .text
 
 1 752 bytes of CODE  memory
   416 bytes of CONST memory

Errors: none
Warnings: none
