###############################################################################
#
# IAR ANSI C/C++ Compiler V7.60.2.11341/W32 for ARM       12/Sep/2017  11:00:39
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\main.c
#    Command line =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\main.c
#        -D USE_HAL_DRIVER -D STM32L152xE -D USE_STM32L1XX_NUCLEO -D ASCII -D
#        REV_L -D LONG_DELAY -lCN
#        "D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\Road
#        Brd MSTR Rev L Long Always\List" -o
#        "D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\Road
#        Brd MSTR Rev L Long Always\Obj" --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_clustering --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.4\arm\INC\c\DLib_Config_Full.h" -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/STM32L1xx_HAL_Driver/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/STM32L1xx_HAL_Driver/Inc/Legacy\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/BSP/STM32L1xx_Nucleo\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/portable/IAR/ARM_CM3\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Core/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/CMSIS/Include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/CMSIS/Device/ST/STM32L1xx/Include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\..\Middlewares\Third_Party\BgLib\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.4\arm\CMSIS\Include\"
#    Locale       =  English_United States.1252
#    List file    =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\Road
#        Brd MSTR Rev L Long Always\List\main.lst
#    Object file  =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\Road
#        Brd MSTR Rev L Long Always\Obj\main.o
#
###############################################################################

D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\main.c
      1          /**
      2            ******************************************************************************
      3            * File Name          : main.c
      4            * Description        : Main program body
      5            ******************************************************************************
      6            *
      7            * COPYRIGHT(c) 2016 STMicroelectronics
      8            *
      9            * Redistribution and use in source and binary forms, with or without modification,
     10            * are permitted provided that the following conditions are met:
     11            *   1. Redistributions of source code must retain the above copyright notice,
     12            *      this list of conditions and the following disclaimer.
     13            *   2. Redistributions in binary form must reproduce the above copyright notice,
     14            *      this list of conditions and the following disclaimer in the documentation
     15            *      and/or other materials provided with the distribution.
     16            *   3. Neither the name of STMicroelectronics nor the names of its contributors
     17            *      may be used to endorse or promote products derived from this software
     18            *      without specific prior written permission.
     19            *
     20            * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     21            * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     22            * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     23            * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
     24            * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     25            * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     26            * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
     27            * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
     28            * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
     29            * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     30            *
     31            ******************************************************************************
     32            */
     33          /* Includes ------------------------------------------------------------------*/
     34          #include "stm32l1xx_hal.h"
     35          #include "cmsis_os.h"
     36          #include "adc.h"
     37          #include "dma.h"
     38          #include "i2c.h"
     39          #include "tim.h"
     40          #include "usart.h"
     41          #include "usb_device.h"
     42          #include "wwdg.h"
     43          #include "Flash.h"
     44          
     45          /* USER CODE BEGIN Includes */
     46          #include "stm32l1xx_nucleo.h"
     47          #ifdef REV_L
     48            #include "bgm111.h"
     49            #include "app_data.h"
     50          #endif
     51          #include "gpio.h"
     52          #include "main.h"
     53          #include "parser.h"
     54          #include "stdbool.h"
     55          #include "ErrorCodes.h"
     56              
     57          /* USER CODE END Includes */
     58          
     59          /* Private variables ---------------------------------------------------------*/
     60          
     61          /* USER CODE BEGIN PV */
     62          /* Private variables ---------------------------------------------------------*/
     63          
     64          /* USER CODE END PV */
     65          
     66          /* Private function prototypes -----------------------------------------------*/
     67          void SystemClock_Config(void);
     68          void Error_Handler(void);
     69          void MX_FREERTOS_Init(void);
     70          
     71          /* USER CODE BEGIN PFP */
     72          /* Private function prototypes -----------------------------------------------*/
     73          
     74          /* USER CODE END PFP */
     75          
     76          /* USER CODE BEGIN 0 */
     77          
     78          /* USER CODE END 0 */

   \                                 In section .text, align 2, keep-with-next
     79          int main(void)
     80          {
   \                     main: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB0A4             SUB      SP,SP,#+144
     81            /* USER CODE BEGIN 1 */
     82          #ifdef TEST2
     83            #define RECEIVE_SZ      5
     84            uint8_t tempBffr[RECEIVE_SZ];
     85            char tempBffr2[5];
     86            HAL_StatusTypeDef Status;
     87          #else
     88            #ifdef TEST
     89              #define RECEIVE_SZ      5
     90            #else
     91          //HERE
     92              #define RECEIVE_SZ      30
     93              uint8_t tempBffr[RECEIVE_SZ];
     94              uint8_t tempBffr2[80];
     95              HAL_StatusTypeDef Status;
     96            #endif
     97          #endif
     98          
     99          #ifdef REV_L
    100            uint16_t tmpSize = RECEIVE_SZ;
   \   00000006   0x251E             MOVS     R5,#+30
    101            uint8_t tmpData[2];
    102          //  uint8_t tmpData[RECEIVE_SZ];
    103            Temperature   Temp;
    104          #ifndef PATCH_UART
    105            bool firstTime = true;
   \   00000008   0x2601             MOVS     R6,#+1
    106          #endif
    107            uint8_t *pData = tempBffr;
   \   0000000A   0xAF15             ADD      R7,SP,#+84
    108          #endif
    109          
    110          //ITStatus PStatus;
    111          
    112            /* USER CODE END 1 */
    113          
    114            /* MCU Configuration----------------------------------------------------------*/
    115          
    116          #ifdef REV_L
    117            // Turn Off Power Supplies
    118            //RoadBrd_gpio_Off(gTAM_PWR);    // Turn Off 5V Power
    119            //RoadBrd_gpio_Off(gVDD_PWR);    // Turn Off 3.3V Power
    120          #endif
    121          
    122            /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    123            HAL_Init();
   \   0000000C   0x.... 0x....      BL       HAL_Init
    124          
    125            /* Configure the system clock */
    126            SystemClock_Config();
   \   00000010   0x.... 0x....      BL       SystemClock_Config
    127          
    128            /* Initialize all configured peripherals */
    129            MX_GPIO_Init();
   \   00000014   0x.... 0x....      BL       MX_GPIO_Init
    130            MX_DMA_Init();
   \   00000018   0x.... 0x....      BL       MX_DMA_Init
    131            MX_ADC_Init();
   \   0000001C   0x.... 0x....      BL       MX_ADC_Init
    132            ADC_Config();
   \   00000020   0x.... 0x....      BL       ADC_Config
    133            MX_USART2_UART_Init();
   \   00000024   0x.... 0x....      BL       MX_USART2_UART_Init
    134            MX_USART3_UART_Init();
   \   00000028   0x.... 0x....      BL       MX_USART3_UART_Init
    135            MX_TIM2_Init();
   \   0000002C   0x.... 0x....      BL       MX_TIM2_Init
    136            MX_TIM3_Init();
   \   00000030   0x.... 0x....      BL       MX_TIM3_Init
    137          
    138            /* USER CODE BEGIN 2 */
    139          #ifdef REV_L
    140            // Wait for power to stabilize off...200msec
    141            //RoadBrd_Delay( 200 );
    142            // Turn on Power Supplies.
    143            RoadBrd_gpio_On(gTAM_PWR);    // Turn on 5V Power
   \   00000034   0x2004             MOVS     R0,#+4
   \   00000036   0x.... 0x....      BL       RoadBrd_gpio_On
    144            RoadBrd_gpio_On(gVDD_PWR);    // Turn on 3.3V Power
   \   0000003A   0x2005             MOVS     R0,#+5
   \   0000003C   0x.... 0x....      BL       RoadBrd_gpio_On
    145            // Wait for power to stabilize...200msec
    146            RoadBrd_Delay( 200 );
   \   00000040   0x20C8             MOVS     R0,#+200
   \   00000042   0x.... 0x....      BL       RoadBrd_Delay
    147            // Reset all Drivers to Off before starting init process.
    148            Reset_DriverStates();
   \   00000046   0x.... 0x....      BL       Reset_DriverStates
    149          
    150            // Enable Interrupts
    151            //---UART
    152            HAL_NVIC_EnableIRQ(USART2_IRQn);
   \   0000004A   0x2026             MOVS     R0,#+38
   \   0000004C   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    153            HAL_NVIC_EnableIRQ(USART3_IRQn);
   \   00000050   0x2027             MOVS     R0,#+39
   \   00000052   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    154          
    155            // Test I2C Channel and see if we even have a working I2C.
    156            RoadBrd_TestI2C();
   \   00000056   0x.... 0x....      BL       RoadBrd_TestI2C
    157            
    158            // Test I2C Status and Task init I2C if Active driver.
    159            if ( Get_DriverStates( I2C_STATE ) )
   \   0000005A   0x2007             MOVS     R0,#+7
   \   0000005C   0x.... 0x....      BL       Get_DriverStates
   \   00000060   0x2800             CMP      R0,#+0
   \   00000062   0xD001             BEQ.N    ??main_0
    160            {
    161              // Now..Initialize I2C and test Drivers.
    162              MX_I2C1_Init();
   \   00000064   0x.... 0x....      BL       MX_I2C1_Init
    163            }
    164            
    165            //---I2C1
    166            HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
   \                     ??main_0: (+1)
   \   00000068   0x201F             MOVS     R0,#+31
   \   0000006A   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    167            HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
   \   0000006E   0x2020             MOVS     R0,#+32
   \   00000070   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    168            //---TIM
    169          #ifndef PATCH_UART
    170            HAL_TIM_StartTimer2();
   \   00000074   0x.... 0x....      BL       HAL_TIM_StartTimer2
    171            HAL_TIM_StartTimer3();
   \   00000078   0x.... 0x....      BL       HAL_TIM_StartTimer3
    172            HAL_NVIC_EnableIRQ(TIM2_IRQn);
   \   0000007C   0x201C             MOVS     R0,#+28
   \   0000007E   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    173            HAL_NVIC_EnableIRQ(TIM3_IRQn);
   \   00000082   0x201D             MOVS     R0,#+29
   \   00000084   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    174          #endif
    175            // Test I2C State.
    176          
    177            // Test I2C Status and Task init I2C if Active driver.
    178            if ( Get_DriverStates( I2C_STATE ) )
   \   00000088   0x2007             MOVS     R0,#+7
   \   0000008A   0x.... 0x....      BL       Get_DriverStates
   \   0000008E   0x2800             CMP      R0,#+0
   \   00000090   0xD007             BEQ.N    ??main_1
    179            {
    180              // Wait 35  ms. For Busy flag to drop.
    181              if(I2C_WaitBusyFlag() != HAL_OK)
   \   00000092   0x.... 0x....      BL       I2C_WaitBusyFlag
   \   00000096   0x2800             CMP      R0,#+0
   \   00000098   0xD003             BEQ.N    ??main_1
    182              {
    183                RdBrd_ErrCdLogErrCd( ERROR_I2CBUSY, MODULE_main );
   \   0000009A   0x2101             MOVS     R1,#+1
   \   0000009C   0x2001             MOVS     R0,#+1
   \   0000009E   0x.... 0x....      BL       RdBrd_ErrCdLogErrCd
    184              }
    185            }
    186          
    187            //BGM Initialization
    188          #ifndef TEST2
    189          #ifndef PATCH_UART
    190            BGM111_Init();
   \                     ??main_1: (+1)
   \   000000A2   0x.... 0x....      BL       BGM111_Init
    191          #else
    192            RoadBrd_gpio_Off(gRESET_BGM111);
    193          #endif
    194          #endif
    195            
    196            // Test I2C Status and Task init I2C if Active driver.
    197            if ( Get_DriverStates( I2C_STATE ) )
   \   000000A6   0x2007             MOVS     R0,#+7
   \   000000A8   0x.... 0x....      BL       Get_DriverStates
   \   000000AC   0x2800             CMP      R0,#+0
   \   000000AE   0xF000 0x8086      BEQ.W    ??main_2
    198            {
    199              Status = RoadBrd_RGBInit();
   \   000000B2   0x.... 0x....      BL       RoadBrd_RGBInit
   \   000000B6   0x0004             MOVS     R4,R0
    200              if (Status == HAL_OK)
   \   000000B8   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000BA   0x2C00             CMP      R4,#+0
   \   000000BC   0xD104             BNE.N    ??main_3
    201              {
    202                Set_DriverStates( IRRADIANCE_MNTR_TASK, DRIVER_ON );
   \   000000BE   0x2101             MOVS     R1,#+1
   \   000000C0   0x2002             MOVS     R0,#+2
   \   000000C2   0x.... 0x....      BL       Set_DriverStates
   \   000000C6   0xE007             B.N      ??main_4
    203              }
    204              else
    205              {
    206                RdBrd_ErrCdLogErrCd( ERROR_RGB_INIT, MODULE_main );
   \                     ??main_3: (+1)
   \   000000C8   0x2101             MOVS     R1,#+1
   \   000000CA   0x2008             MOVS     R0,#+8
   \   000000CC   0x.... 0x....      BL       RdBrd_ErrCdLogErrCd
    207                Set_DriverStates( IRRADIANCE_MNTR_TASK, DRIVER_OFF );
   \   000000D0   0x2100             MOVS     R1,#+0
   \   000000D2   0x2002             MOVS     R0,#+2
   \   000000D4   0x.... 0x....      BL       Set_DriverStates
    208              }
    209          
    210              // Initialize Voltage Monitor Hardware
    211              Status = RoadBrd_Init_VMonitor();
   \                     ??main_4: (+1)
   \   000000D8   0x.... 0x....      BL       RoadBrd_Init_VMonitor
   \   000000DC   0x0004             MOVS     R4,R0
    212              if (Status == HAL_OK)
   \   000000DE   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000E0   0x2C00             CMP      R4,#+0
   \   000000E2   0xD104             BNE.N    ??main_5
    213              {
    214                Set_DriverStates( VOLTAGE_MNTR_TASK, DRIVER_ON );
   \   000000E4   0x2101             MOVS     R1,#+1
   \   000000E6   0x2000             MOVS     R0,#+0
   \   000000E8   0x.... 0x....      BL       Set_DriverStates
   \   000000EC   0xE007             B.N      ??main_6
    215              }
    216              else
    217              {
    218                RdBrd_ErrCdLogErrCd( ERROR_VMNTR_INIT, MODULE_main );
   \                     ??main_5: (+1)
   \   000000EE   0x2101             MOVS     R1,#+1
   \   000000F0   0x2002             MOVS     R0,#+2
   \   000000F2   0x.... 0x....      BL       RdBrd_ErrCdLogErrCd
    219                Set_DriverStates( VOLTAGE_MNTR_TASK, DRIVER_OFF );
   \   000000F6   0x2100             MOVS     R1,#+0
   \   000000F8   0x2000             MOVS     R0,#+0
   \   000000FA   0x.... 0x....      BL       Set_DriverStates
    220              }
    221          
    222              // Initialize Grid Eye Hardware
    223              Status = RoadBrd_GridEyeInit();
   \                     ??main_6: (+1)
   \   000000FE   0x.... 0x....      BL       RoadBrd_GridEyeInit
   \   00000102   0x0004             MOVS     R4,R0
    224              if (Status == HAL_OK)
   \   00000104   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000106   0x2C00             CMP      R4,#+0
   \   00000108   0xD104             BNE.N    ??main_7
    225              {
    226                Set_DriverStates( GRIDEYE_MNTR_TASK, DRIVER_ON );
   \   0000010A   0x2101             MOVS     R1,#+1
   \   0000010C   0x2005             MOVS     R0,#+5
   \   0000010E   0x.... 0x....      BL       Set_DriverStates
   \   00000112   0xE01A             B.N      ??main_8
    227              }
    228              else
    229              {
    230                RdBrd_ErrCdLogErrCd( ERROR_GDEYE_INIT, MODULE_main );
   \                     ??main_7: (+1)
   \   00000114   0x2101             MOVS     R1,#+1
   \   00000116   0x2004             MOVS     R0,#+4
   \   00000118   0x.... 0x....      BL       RdBrd_ErrCdLogErrCd
    231                Set_DriverStates( GRIDEYE_MNTR_TASK, DRIVER_OFF );
   \   0000011C   0x2100             MOVS     R1,#+0
   \   0000011E   0x2005             MOVS     R0,#+5
   \   00000120   0x.... 0x....      BL       Set_DriverStates
    232                // OK, We have no Grid Eye...Do we have a Cool Eye?
    233                Status = RoadBrd_CoolEyeInit();
   \   00000124   0x.... 0x....      BL       RoadBrd_CoolEyeInit
   \   00000128   0x0004             MOVS     R4,R0
    234                if (Status == HAL_OK)
   \   0000012A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000012C   0x2C00             CMP      R4,#+0
   \   0000012E   0xD104             BNE.N    ??main_9
    235                {
    236                  Set_DriverStates( COOLEYE_MNTR_TASK, DRIVER_ON );
   \   00000130   0x2101             MOVS     R1,#+1
   \   00000132   0x2006             MOVS     R0,#+6
   \   00000134   0x.... 0x....      BL       Set_DriverStates
   \   00000138   0xE007             B.N      ??main_8
    237                }
    238                else
    239                {
    240                  RdBrd_ErrCdLogErrCd( ERROR_CLEYE_INIT, MODULE_main );
   \                     ??main_9: (+1)
   \   0000013A   0x2101             MOVS     R1,#+1
   \   0000013C   0x200A             MOVS     R0,#+10
   \   0000013E   0x.... 0x....      BL       RdBrd_ErrCdLogErrCd
    241                  Set_DriverStates( COOLEYE_MNTR_TASK, DRIVER_OFF );
   \   00000142   0x2100             MOVS     R1,#+0
   \   00000144   0x2006             MOVS     R0,#+6
   \   00000146   0x.... 0x....      BL       Set_DriverStates
    242                }
    243            }
    244          
    245              // Initialize Pressure Sensor Hardware
    246              Status = RoadBrd_Init_Barometer();
   \                     ??main_8: (+1)
   \   0000014A   0x.... 0x....      BL       RoadBrd_Init_Barometer
   \   0000014E   0x0004             MOVS     R4,R0
    247              if (Status == HAL_OK)
   \   00000150   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000152   0x2C00             CMP      R4,#+0
   \   00000154   0xD104             BNE.N    ??main_10
    248              {
    249                Set_DriverStates( PRESSURE_MNTR_TASK, DRIVER_ON );
   \   00000156   0x2101             MOVS     R1,#+1
   \   00000158   0x2003             MOVS     R0,#+3
   \   0000015A   0x.... 0x....      BL       Set_DriverStates
   \   0000015E   0xE007             B.N      ??main_11
    250              }
    251              else
    252              {
    253                RdBrd_ErrCdLogErrCd( ERROR_PRESSURE_INIT, MODULE_main );
   \                     ??main_10: (+1)
   \   00000160   0x2101             MOVS     R1,#+1
   \   00000162   0x2005             MOVS     R0,#+5
   \   00000164   0x.... 0x....      BL       RdBrd_ErrCdLogErrCd
    254                Set_DriverStates( PRESSURE_MNTR_TASK, DRIVER_OFF );
   \   00000168   0x2100             MOVS     R1,#+0
   \   0000016A   0x2003             MOVS     R0,#+3
   \   0000016C   0x.... 0x....      BL       Set_DriverStates
    255              }
    256          
    257              // Initialize Humidity Sensor Hardware
    258              Status = RoadBrd_HumidityInit();
   \                     ??main_11: (+1)
   \   00000170   0x.... 0x....      BL       RoadBrd_HumidityInit
   \   00000174   0x0004             MOVS     R4,R0
    259              if (Status == HAL_OK)
   \   00000176   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000178   0x2C00             CMP      R4,#+0
   \   0000017A   0xD104             BNE.N    ??main_12
    260              {
    261                Set_DriverStates( HUMIDITY_MNTR_TASK, DRIVER_ON );
   \   0000017C   0x2101             MOVS     R1,#+1
   \   0000017E   0x2004             MOVS     R0,#+4
   \   00000180   0x.... 0x....      BL       Set_DriverStates
   \   00000184   0xE007             B.N      ??main_13
    262              }
    263              else
    264              {
    265                RdBrd_ErrCdLogErrCd( ERROR_HUMIDITY_INIT, MODULE_main );
   \                     ??main_12: (+1)
   \   00000186   0x2101             MOVS     R1,#+1
   \   00000188   0x2007             MOVS     R0,#+7
   \   0000018A   0x.... 0x....      BL       RdBrd_ErrCdLogErrCd
    266                Set_DriverStates( HUMIDITY_MNTR_TASK, DRIVER_OFF );
   \   0000018E   0x2100             MOVS     R1,#+0
   \   00000190   0x2004             MOVS     R0,#+4
   \   00000192   0x.... 0x....      BL       Set_DriverStates
    267              }
    268            
    269              // Test Temperature Sensor Hardware
    270              Status = RoadBrd_ReadTemp( &Temp );
   \                     ??main_13: (+1)
   \   00000196   0xA81D             ADD      R0,SP,#+116
   \   00000198   0x.... 0x....      BL       RoadBrd_ReadTemp
   \   0000019C   0x0004             MOVS     R4,R0
    271              if (Status == HAL_OK)
   \   0000019E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000001A0   0x2C00             CMP      R4,#+0
   \   000001A2   0xD104             BNE.N    ??main_14
    272              {
    273                Set_DriverStates( TEMPERATURE_MNTR_TASK, DRIVER_ON );
   \   000001A4   0x2101             MOVS     R1,#+1
   \   000001A6   0x2001             MOVS     R0,#+1
   \   000001A8   0x.... 0x....      BL       Set_DriverStates
   \   000001AC   0xE007             B.N      ??main_2
    274              }
    275              else
    276              {
    277                RdBrd_ErrCdLogErrCd( ERROR_TEMP_INIT, MODULE_main );
   \                     ??main_14: (+1)
   \   000001AE   0x2101             MOVS     R1,#+1
   \   000001B0   0x2009             MOVS     R0,#+9
   \   000001B2   0x.... 0x....      BL       RdBrd_ErrCdLogErrCd
    278                Set_DriverStates( TEMPERATURE_MNTR_TASK, DRIVER_OFF );
   \   000001B6   0x2100             MOVS     R1,#+0
   \   000001B8   0x2001             MOVS     R0,#+1
   \   000001BA   0x.... 0x....      BL       Set_DriverStates
    279              }
    280            } //EndIf ( Get_DriverStates( I2C_STATE )
    281            
    282            // Initialize key app vars.
    283            InitSensors();
   \                     ??main_2: (+1)
   \   000001BE   0x.... 0x....      BL       InitSensors
    284            RoadBrd_ParserInit();                         // This initializes the Parse Tasking Structure.
   \   000001C2   0x.... 0x....      BL       RoadBrd_ParserInit
    285            RoadBrd_WWDG_InitializeDateString();          // Initialize Date Tag From Server as NULL.
   \   000001C6   0x.... 0x....      BL       RoadBrd_WWDG_InitializeDateString
    286          
    287            //**
    288            //**
    289            //** Initialize all Flash Structures.
    290            //**
    291            //**
    292            //*******1. Initializ WWDG Flash Structure
    293            // 1a. Is WWDG Flash Frame Initialized?
    294            if (RoadBrd_WWDG_VerifyFrame())
   \   000001CA   0x.... 0x....      BL       RoadBrd_WWDG_VerifyFrame
   \   000001CE   0x2800             CMP      R0,#+0
   \   000001D0   0xD004             BEQ.N    ??main_15
    295            {
    296              //Yes....Set FRAME_TASK Bit in Driver State Variable.
    297              Set_DriverStates( FRAME_TASK, DRIVER_ON );
   \   000001D2   0x2101             MOVS     R1,#+1
   \   000001D4   0x2008             MOVS     R0,#+8
   \   000001D6   0x.... 0x....      BL       Set_DriverStates
   \   000001DA   0xE010             B.N      ??main_16
    298            } // EndIf (RoadBrd_WWDG_VerifyFrame())
    299            else
    300            {
    301              //No....1b. Attempt to Initialize WWDG Flash Frame.
    302              if (RoadBrd_WWDG_InitializeFrmFlash() != HAL_OK)
   \                     ??main_15: (+1)
   \   000001DC   0x.... 0x....      BL       RoadBrd_WWDG_InitializeFrmFlash
   \   000001E0   0x2800             CMP      R0,#+0
   \   000001E2   0xD008             BEQ.N    ??main_17
    303              {
    304                //FAILED....Indicate Error Code and Fail Driver State.
    305                RdBrd_ErrCdLogErrCd( ERROR_FRAME_INIT, MODULE_main );
   \   000001E4   0x2101             MOVS     R1,#+1
   \   000001E6   0x2010             MOVS     R0,#+16
   \   000001E8   0x.... 0x....      BL       RdBrd_ErrCdLogErrCd
    306                Set_DriverStates( FRAME_TASK, DRIVER_OFF );
   \   000001EC   0x2100             MOVS     R1,#+0
   \   000001EE   0x2008             MOVS     R0,#+8
   \   000001F0   0x.... 0x....      BL       Set_DriverStates
   \   000001F4   0xE003             B.N      ??main_16
    307              }
    308              else
    309              {
    310                //SUCCESS....Set FRAME_TASK Bit in Driver State Variable.
    311                Set_DriverStates( FRAME_TASK, DRIVER_ON );
   \                     ??main_17: (+1)
   \   000001F6   0x2101             MOVS     R1,#+1
   \   000001F8   0x2008             MOVS     R0,#+8
   \   000001FA   0x.... 0x....      BL       Set_DriverStates
    312              }
    313            } // EndElse (RoadBrd_WWDG_VerifyFrame())
    314            
    315            //*******2. Initializ Calibration Flash Structure
    316            // 2a. Is Calibration Flash Frame Initialized?
    317            if (RoadBrd_CAL_VerifyFrame())
   \                     ??main_16: (+1)
   \   000001FE   0x.... 0x....      BL       RoadBrd_CAL_VerifyFrame
   \   00000202   0x2800             CMP      R0,#+0
   \   00000204   0xD004             BEQ.N    ??main_18
    318            {
    319              //Yes....Set CAL_TASK Bit in Driver State Variable.
    320              Set_DriverStates( CAL_TASK, DRIVER_ON );
   \   00000206   0x2101             MOVS     R1,#+1
   \   00000208   0x2009             MOVS     R0,#+9
   \   0000020A   0x.... 0x....      BL       Set_DriverStates
   \   0000020E   0xE010             B.N      ??main_19
    321            } // EndIf (RoadBrd_WWDG_VerifyFrame())
    322            else
    323            {
    324              //No....2b. Attempt to Initialize Structure Flash Structure.
    325              if (RoadBrd_CAL_InitializeFrmFlash() != HAL_OK)
   \                     ??main_18: (+1)
   \   00000210   0x.... 0x....      BL       RoadBrd_CAL_InitializeFrmFlash
   \   00000214   0x2800             CMP      R0,#+0
   \   00000216   0xD008             BEQ.N    ??main_20
    326              {
    327                //FAILED....Indicate Error Code and Fail Driver State.
    328                RdBrd_ErrCdLogErrCd( ERROR_CAL_INIT, MODULE_main );
   \   00000218   0x2101             MOVS     R1,#+1
   \   0000021A   0x2013             MOVS     R0,#+19
   \   0000021C   0x.... 0x....      BL       RdBrd_ErrCdLogErrCd
    329                Set_DriverStates( CAL_TASK, DRIVER_OFF );
   \   00000220   0x2100             MOVS     R1,#+0
   \   00000222   0x2009             MOVS     R0,#+9
   \   00000224   0x.... 0x....      BL       Set_DriverStates
   \   00000228   0xE003             B.N      ??main_19
    330              }
    331              else
    332              {
    333                //SUCCESS....Set FRAME_TASK Bit in Driver State Variable.
    334                Set_DriverStates( CAL_TASK, DRIVER_ON );
   \                     ??main_20: (+1)
   \   0000022A   0x2101             MOVS     R1,#+1
   \   0000022C   0x2009             MOVS     R0,#+9
   \   0000022E   0x.... 0x....      BL       Set_DriverStates
    335              }
    336            } // EndElse (RoadBrd_WWDG_VerifyFrame())
    337            
    338            
    339          // Initialize Key Vars once Flash has been validated.
    340            // Initialize Key Timer Sampling Vars.
    341            Set_TickCounts( RoadBrd_Get_RdSndTickCnt(), RoadBrd_Get_SnsrTickCnt() );
   \                     ??main_19: (+1)
   \   00000232   0x.... 0x....      BL       RoadBrd_Get_SnsrTickCnt
   \   00000236   0x4680             MOV      R8,R0
   \   00000238   0x.... 0x....      BL       RoadBrd_Get_RdSndTickCnt
   \   0000023C   0x4641             MOV      R1,R8
   \   0000023E   0x.... 0x....      BL       Set_TickCounts
    342              
    343            // Time to start WWDG..
    344            HAL_NVIC_EnableIRQ(WWDG_IRQn);
   \   00000242   0x2000             MOVS     R0,#+0
   \   00000244   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    345            MX_WWDG_Init();
   \   00000248   0x.... 0x....      BL       MX_WWDG_Init
    346            RoadBrd_WWDG_Start();
   \   0000024C   0x.... 0x....      BL       RoadBrd_WWDG_Start
    347          
    348          #endif
    349          
    350          #ifdef TASKING
    351            /* USER CODE END 2 */
    352          
    353            /* Call init function for freertos objects (in freertos.c) */
    354            MX_FREERTOS_Init();
    355          
    356            /* Start scheduler */
    357            osKernelStart();
    358            
    359            /* We should never get here as control is now taken by the scheduler */
    360          
    361            /* Infinite loop */
    362            /* USER CODE BEGIN WHILE */
    363          #else
    364            
    365            #ifdef TEST
    366                // Turn On Bluetooth Interface for Debug.
    367                RoadBrd_gpio_On( gRESET_BGM111 );
    368            #else
    369          //    #ifndef TEST2
    370                #ifdef ASCII
    371                  // Send Opening Banner for Monitor Code.
    372                  #ifdef NUCLEO
    373          //        strcpy( (char *)tempBffr2, "*********************  WEATHERCLOUD *********************\r\n\r\n");
    374                    strcpy( (char *)tempBffr2, "\r\n\r\n");
    375                    // Send string to UART..
    376          #ifdef REV_L
    377                    Status = RoadBrd_UART_Transmit_IT(NUCLEO_USART, (uint8_t *)tempBffr2);
    378                    // Wait for msg to be completed.
    379                    while (RoadBrd_Uart_Status(NUCLEO_USART) != SET)
    380                    {
    381                      RoadBrd_WWDG_Refresh();     // Refresh WatchDog
    382                    }
    383                    // Clear State for Next Transfer.
    384                    clrUsartState( NUCLEO_USART );
    385          #else
    386                    Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);
    387                    RoadBrd_WWDG_Refresh();     // Refresh WatchDog
    388          #endif
    389                    if (Status != HAL_OK)
    390                      Error_Handler();
    391                    sprintf( (char *)tempBffr2, "     Road Board Monitor %s Hardware Version %s \r\n", VERSION_NUM, BRD_REV);
    392                    //strcpy( (char *)tempBffr2, "     Road Board Monitor Rev K Hardware Version 1.0 \r\n");
    393                    // Send string to UART..
    394          #ifdef REV_L
    395                    Status = RoadBrd_UART_Transmit_IT(NUCLEO_USART, (uint8_t *)tempBffr2);
    396                    // Wait for msg to be completed.
    397                    while (RoadBrd_Uart_Status(NUCLEO_USART) != SET)
    398                    {
    399                    }
    400                    // Clear State for Next Transfer.
    401                    clrUsartState( NUCLEO_USART );
    402          #else
    403                    Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);
    404          #endif
    405                    if (Status != HAL_OK)
    406                      Error_Handler();
    407                    sprintf( (char *)tempBffr2, "                  Copyright %s. \r\n\r\n", REL_DATE);
    408                    //strcpy( (char *)tempBffr2, "                  Copyright August 9, 2016. \r\n\r\n\r\n> ");
    409                    // Send string to UART..
    410                    // *******Time to Build Extra Information...
    411          #ifdef REV_L
    412                    Status = RoadBrd_UART_Transmit_IT(NUCLEO_USART, (uint8_t *)tempBffr2);
    413                    // Wait for msg to be completed.
    414                    while (RoadBrd_Uart_Status(NUCLEO_USART) != SET)
    415                    {
    416                    }
    417                    // Clear State for Next Transfer.
    418                    clrUsartState( NUCLEO_USART );
    419          #else
    420                    Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);
    421          #endif
    422                    if (Status != HAL_OK)
    423                      Error_Handler();
    424                    sprintf( (char *)tempBffr2, "RdSnd Sample Rate:  %3.1f Seconds.\r\n", ((float)RoadBrd_Get_RdSndTickCnt()/10));
    425          #ifdef REV_L
    426                    Status = RoadBrd_UART_Transmit_IT(NUCLEO_USART, (uint8_t *)tempBffr2);
    427                    // Wait for msg to be completed.
    428                    while (RoadBrd_Uart_Status(NUCLEO_USART) != SET)
    429                    {
    430                    }
    431                    // Clear State for Next Transfer.
    432                    clrUsartState( NUCLEO_USART );
    433          #else
    434                    Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);
    435          #endif
    436                    if (Status != HAL_OK)
    437                      Error_Handler();
    438                    sprintf( (char *)tempBffr2, "Sensor Sample Rate: %3.1f Seconds.\r\n\r\n> ", ((float)RoadBrd_Get_SnsrTickCnt()/10));
    439          #ifdef REV_L
    440                    Status = RoadBrd_UART_Transmit_IT(NUCLEO_USART, (uint8_t *)tempBffr2);
    441                    // Wait for msg to be completed.
    442                    while (RoadBrd_Uart_Status(NUCLEO_USART) != SET)
    443                    {
    444                    }
    445                    // Clear State for Next Transfer.
    446                    clrUsartState( NUCLEO_USART );
    447          #else
    448                    Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);
    449          #endif
    450                    if (Status != HAL_OK)
    451                      Error_Handler();
    452                  #else
    453                    strcpy( (char *)tempBffr2, "*********************  WEATHERCLOUD *********************\r\n\r\n");
   \   00000250   0x.... 0x....      LDR.W    R1,??DataTable1_1
   \   00000254   0xA801             ADD      R0,SP,#+4
   \   00000256   0x.... 0x....      BL       strcpy
    454                    // Send string to UART..
    455          #ifdef REV_L
    456                    Status = RoadBrd_UART_Transmit_IT(MONITOR_UART, (uint8_t *)tempBffr2);
   \   0000025A   0xA901             ADD      R1,SP,#+4
   \   0000025C   0x2000             MOVS     R0,#+0
   \   0000025E   0x.... 0x....      BL       RoadBrd_UART_Transmit_IT
   \   00000262   0x0004             MOVS     R4,R0
    457                    // Wait for msg to be completed.
    458                    while (RoadBrd_Uart_Status(MONITOR_UART) != SET)
   \                     ??main_21: (+1)
   \   00000264   0x2000             MOVS     R0,#+0
   \   00000266   0x.... 0x....      BL       RoadBrd_Uart_Status
   \   0000026A   0x2801             CMP      R0,#+1
   \   0000026C   0xD002             BEQ.N    ??main_22
    459                    {
    460                      RoadBrd_WWDG_Refresh();     // Refresh WatchDog
   \   0000026E   0x.... 0x....      BL       RoadBrd_WWDG_Refresh
   \   00000272   0xE7F7             B.N      ??main_21
    461                    }
    462                    // Clear State for Next Transfer.
    463                    clrUsartState( MONITOR_UART );
   \                     ??main_22: (+1)
   \   00000274   0x2000             MOVS     R0,#+0
   \   00000276   0x.... 0x....      BL       clrUsartState
    464          #else
    465                    Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);
    466                    RoadBrd_WWDG_Refresh();     // Refresh WatchDog
    467          #endif
    468                    if (Status != HAL_OK)
   \   0000027A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000027C   0x2C00             CMP      R4,#+0
   \   0000027E   0xD001             BEQ.N    ??main_23
    469                      Error_Handler();
   \   00000280   0x.... 0x....      BL       Error_Handler
    470                    sprintf( (char *)tempBffr2, "     Road Board Monitor %s Hardware Version %s \r\n", VERSION_NUM, BRD_REV);
   \                     ??main_23: (+1)
   \   00000284   0x.... 0x....      LDR.W    R3,??DataTable1_2
   \   00000288   0x.... 0x....      LDR.W    R2,??DataTable1_3
   \   0000028C   0x.... 0x....      LDR.W    R1,??DataTable1_4
   \   00000290   0xA801             ADD      R0,SP,#+4
   \   00000292   0x.... 0x....      BL       sprintf
    471                    //strcpy( (char *)tempBffr2, "     Road Board Monitor Rev K Hardware Version 1.0 \r\n");
    472                    // Send string to UART..
    473          #ifdef REV_L
    474                    Status = RoadBrd_UART_Transmit_IT(MONITOR_UART, (uint8_t *)tempBffr2);
   \   00000296   0xA901             ADD      R1,SP,#+4
   \   00000298   0x2000             MOVS     R0,#+0
   \   0000029A   0x.... 0x....      BL       RoadBrd_UART_Transmit_IT
   \   0000029E   0x0004             MOVS     R4,R0
    475                    // Wait for msg to be completed.
    476                    while (RoadBrd_Uart_Status(MONITOR_UART) != SET)
   \                     ??main_24: (+1)
   \   000002A0   0x2000             MOVS     R0,#+0
   \   000002A2   0x.... 0x....      BL       RoadBrd_Uart_Status
   \   000002A6   0x2801             CMP      R0,#+1
   \   000002A8   0xD002             BEQ.N    ??main_25
    477                    {
    478                      RoadBrd_WWDG_Refresh();     // Refresh WatchDog
   \   000002AA   0x.... 0x....      BL       RoadBrd_WWDG_Refresh
   \   000002AE   0xE7F7             B.N      ??main_24
    479                    }
    480                    // Clear State for Next Transfer.
    481                    clrUsartState( MONITOR_UART );
   \                     ??main_25: (+1)
   \   000002B0   0x2000             MOVS     R0,#+0
   \   000002B2   0x.... 0x....      BL       clrUsartState
    482          #else
    483                    Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);
    484                    RoadBrd_WWDG_Refresh();     // Refresh WatchDog
    485          #endif
    486                    if (Status != HAL_OK)
   \   000002B6   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000002B8   0x2C00             CMP      R4,#+0
   \   000002BA   0xD001             BEQ.N    ??main_26
    487                      Error_Handler();
   \   000002BC   0x.... 0x....      BL       Error_Handler
    488                    sprintf( (char *)tempBffr2, "                  Copyright %s. \r\n\r\n", REL_DATE);
   \                     ??main_26: (+1)
   \   000002C0   0x.... 0x....      LDR.W    R2,??DataTable1_5
   \   000002C4   0x.... 0x....      LDR.W    R1,??DataTable1_6
   \   000002C8   0xA801             ADD      R0,SP,#+4
   \   000002CA   0x.... 0x....      BL       sprintf
    489                    //strcpy( (char *)tempBffr2, "                  Copyright August 9, 2016. \r\n\r\n\r\n> ");
    490                    // Send string to UART..
    491          #ifdef REV_L
    492                    Status = RoadBrd_UART_Transmit_IT(MONITOR_UART, (uint8_t *)tempBffr2);
   \   000002CE   0xA901             ADD      R1,SP,#+4
   \   000002D0   0x2000             MOVS     R0,#+0
   \   000002D2   0x.... 0x....      BL       RoadBrd_UART_Transmit_IT
   \   000002D6   0x0004             MOVS     R4,R0
    493                    // Wait for msg to be completed.
    494                    while (RoadBrd_Uart_Status(MONITOR_UART) != SET)
   \                     ??main_27: (+1)
   \   000002D8   0x2000             MOVS     R0,#+0
   \   000002DA   0x.... 0x....      BL       RoadBrd_Uart_Status
   \   000002DE   0x2801             CMP      R0,#+1
   \   000002E0   0xD002             BEQ.N    ??main_28
    495                    {
    496                      RoadBrd_WWDG_Refresh();     // Refresh WatchDog
   \   000002E2   0x.... 0x....      BL       RoadBrd_WWDG_Refresh
   \   000002E6   0xE7F7             B.N      ??main_27
    497                    }
    498                    // Clear State for Next Transfer.
    499                    clrUsartState( MONITOR_UART );
   \                     ??main_28: (+1)
   \   000002E8   0x2000             MOVS     R0,#+0
   \   000002EA   0x.... 0x....      BL       clrUsartState
    500          #else
    501                    Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);
    502                    RoadBrd_WWDG_Refresh();     // Refresh WatchDog
    503          #endif
    504                    if (Status != HAL_OK)
   \   000002EE   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000002F0   0x2C00             CMP      R4,#+0
   \   000002F2   0xD001             BEQ.N    ??main_29
    505                      Error_Handler();
   \   000002F4   0x.... 0x....      BL       Error_Handler
    506                    // *******Time to Build Extra Information...
    507                    sprintf( (char *)tempBffr2, "RdSnd Sample Rate:  %3.1f Seconds.\r\n", ((float)RoadBrd_Get_RdSndTickCnt()/10));
   \                     ??main_29: (+1)
   \   000002F8   0x.... 0x....      BL       RoadBrd_Get_RdSndTickCnt
   \   000002FC   0x.... 0x....      BL       __aeabi_ui2f
   \   00000300   0x.... 0x....      LDR.W    R1,??DataTable1_7  ;; 0x41200000
   \   00000304   0x.... 0x....      BL       __aeabi_fdiv
   \   00000308   0x.... 0x....      BL       __aeabi_f2d
   \   0000030C   0x0002             MOVS     R2,R0
   \   0000030E   0x000B             MOVS     R3,R1
   \   00000310   0x.... 0x....      LDR.W    R1,??DataTable1_8
   \   00000314   0xA801             ADD      R0,SP,#+4
   \   00000316   0x.... 0x....      BL       sprintf
    508          #ifdef REV_L
    509                    Status = RoadBrd_UART_Transmit_IT(NUCLEO_USART, (uint8_t *)tempBffr2);
   \   0000031A   0xA901             ADD      R1,SP,#+4
   \   0000031C   0x2000             MOVS     R0,#+0
   \   0000031E   0x.... 0x....      BL       RoadBrd_UART_Transmit_IT
   \   00000322   0x0004             MOVS     R4,R0
    510                    // Wait for msg to be completed.
    511                    while (RoadBrd_Uart_Status(NUCLEO_USART) != SET)
   \                     ??main_30: (+1)
   \   00000324   0x2000             MOVS     R0,#+0
   \   00000326   0x.... 0x....      BL       RoadBrd_Uart_Status
   \   0000032A   0x2801             CMP      R0,#+1
   \   0000032C   0xD1FA             BNE.N    ??main_30
    512                    {
    513                    }
    514                    // Clear State for Next Transfer.
    515                    clrUsartState( NUCLEO_USART );
   \   0000032E   0x2000             MOVS     R0,#+0
   \   00000330   0x.... 0x....      BL       clrUsartState
    516          #else
    517                    Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);
    518          #endif
    519                    if (Status != HAL_OK)
   \   00000334   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000336   0x2C00             CMP      R4,#+0
   \   00000338   0xD001             BEQ.N    ??main_31
    520                      Error_Handler();
   \   0000033A   0x.... 0x....      BL       Error_Handler
    521                    sprintf( (char *)tempBffr2, "Sensor Sample Rate: %3.1f Seconds.\r\n", ((float)RoadBrd_Get_SnsrTickCnt()/10));
   \                     ??main_31: (+1)
   \   0000033E   0x.... 0x....      BL       RoadBrd_Get_SnsrTickCnt
   \   00000342   0x.... 0x....      BL       __aeabi_ui2f
   \   00000346   0x.... 0x....      LDR.W    R1,??DataTable1_7  ;; 0x41200000
   \   0000034A   0x.... 0x....      BL       __aeabi_fdiv
   \   0000034E   0x.... 0x....      BL       __aeabi_f2d
   \   00000352   0x0002             MOVS     R2,R0
   \   00000354   0x000B             MOVS     R3,R1
   \   00000356   0x.... 0x....      LDR.W    R1,??DataTable1_9
   \   0000035A   0xA801             ADD      R0,SP,#+4
   \   0000035C   0x.... 0x....      BL       sprintf
    522          #ifdef REV_L
    523                    Status = RoadBrd_UART_Transmit_IT(NUCLEO_USART, (uint8_t *)tempBffr2);
   \   00000360   0xA901             ADD      R1,SP,#+4
   \   00000362   0x2000             MOVS     R0,#+0
   \   00000364   0x.... 0x....      BL       RoadBrd_UART_Transmit_IT
   \   00000368   0x0004             MOVS     R4,R0
    524                    // Wait for msg to be completed.
    525                    while (RoadBrd_Uart_Status(NUCLEO_USART) != SET)
   \                     ??main_32: (+1)
   \   0000036A   0x2000             MOVS     R0,#+0
   \   0000036C   0x.... 0x....      BL       RoadBrd_Uart_Status
   \   00000370   0x2801             CMP      R0,#+1
   \   00000372   0xD1FA             BNE.N    ??main_32
    526                    {
    527                    }
    528                    // Clear State for Next Transfer.
    529                    clrUsartState( NUCLEO_USART );
   \   00000374   0x2000             MOVS     R0,#+0
   \   00000376   0x.... 0x....      BL       clrUsartState
    530          #else
    531                    Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);
    532          #endif
    533                    if (Status != HAL_OK)
   \   0000037A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000037C   0x2C00             CMP      R4,#+0
   \   0000037E   0xD001             BEQ.N    ??main_33
    534                      Error_Handler();
   \   00000380   0x.... 0x....      BL       Error_Handler
    535                    sprintf( (char *)tempBffr2, "TACK Limit: %d.\r\n", RoadBrd_Get_TackLimit() );
   \                     ??main_33: (+1)
   \   00000384   0x.... 0x....      BL       RoadBrd_Get_TackLimit
   \   00000388   0x0002             MOVS     R2,R0
   \   0000038A   0x....             LDR.N    R1,??DataTable1_10
   \   0000038C   0xA801             ADD      R0,SP,#+4
   \   0000038E   0x.... 0x....      BL       sprintf
    536          #ifdef REV_L
    537                    Status = RoadBrd_UART_Transmit_IT(NUCLEO_USART, (uint8_t *)tempBffr2);
   \   00000392   0xA901             ADD      R1,SP,#+4
   \   00000394   0x2000             MOVS     R0,#+0
   \   00000396   0x.... 0x....      BL       RoadBrd_UART_Transmit_IT
   \   0000039A   0x0004             MOVS     R4,R0
    538                    // Wait for msg to be completed.
    539                    while (RoadBrd_Uart_Status(NUCLEO_USART) != SET)
   \                     ??main_34: (+1)
   \   0000039C   0x2000             MOVS     R0,#+0
   \   0000039E   0x.... 0x....      BL       RoadBrd_Uart_Status
   \   000003A2   0x2801             CMP      R0,#+1
   \   000003A4   0xD1FA             BNE.N    ??main_34
    540                    {
    541                    }
    542                    // Clear State for Next Transfer.
    543                    clrUsartState( NUCLEO_USART );
   \   000003A6   0x2000             MOVS     R0,#+0
   \   000003A8   0x.... 0x....      BL       clrUsartState
    544          #else
    545                    Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);
    546          #endif
    547                    if (Status != HAL_OK)
   \   000003AC   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000003AE   0x2C00             CMP      R4,#+0
   \   000003B0   0xD001             BEQ.N    ??main_35
    548                      Error_Handler();
   \   000003B2   0x.... 0x....      BL       Error_Handler
    549                    sprintf( (char *)tempBffr2, "Boot Delay: %d Seconds.\r\n", RoadBrd_Get_BootDelay() );
   \                     ??main_35: (+1)
   \   000003B6   0x.... 0x....      BL       RoadBrd_Get_BootDelay
   \   000003BA   0x0002             MOVS     R2,R0
   \   000003BC   0x....             LDR.N    R1,??DataTable1_11
   \   000003BE   0xA801             ADD      R0,SP,#+4
   \   000003C0   0x.... 0x....      BL       sprintf
    550          #ifdef REV_L
    551                    Status = RoadBrd_UART_Transmit_IT(NUCLEO_USART, (uint8_t *)tempBffr2);
   \   000003C4   0xA901             ADD      R1,SP,#+4
   \   000003C6   0x2000             MOVS     R0,#+0
   \   000003C8   0x.... 0x....      BL       RoadBrd_UART_Transmit_IT
   \   000003CC   0x0004             MOVS     R4,R0
    552                    // Wait for msg to be completed.
    553                    while (RoadBrd_Uart_Status(NUCLEO_USART) != SET)
   \                     ??main_36: (+1)
   \   000003CE   0x2000             MOVS     R0,#+0
   \   000003D0   0x.... 0x....      BL       RoadBrd_Uart_Status
   \   000003D4   0x2801             CMP      R0,#+1
   \   000003D6   0xD1FA             BNE.N    ??main_36
    554                    {
    555                    }
    556                    // Clear State for Next Transfer.
    557                    clrUsartState( NUCLEO_USART );
   \   000003D8   0x2000             MOVS     R0,#+0
   \   000003DA   0x.... 0x....      BL       clrUsartState
    558          #else
    559                    Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);
    560          #endif
    561                    if (Status != HAL_OK)
   \   000003DE   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000003E0   0x2C00             CMP      R4,#+0
   \   000003E2   0xD001             BEQ.N    ??main_37
    562                      Error_Handler();
   \   000003E4   0x.... 0x....      BL       Error_Handler
    563                    // Now Display the Units Enabled State.
    564                    if (RoadBrd_Get_UnitsFlag())
   \                     ??main_37: (+1)
   \   000003E8   0x.... 0x....      BL       RoadBrd_Get_UnitsFlag
   \   000003EC   0x2800             CMP      R0,#+0
   \   000003EE   0xD004             BEQ.N    ??main_38
    565                    {
    566                      sprintf( (char *)tempBffr2, "Units XML State: ENABLED\r\n\r\n> ");
   \   000003F0   0x....             LDR.N    R1,??DataTable1_12
   \   000003F2   0xA801             ADD      R0,SP,#+4
   \   000003F4   0x.... 0x....      BL       sprintf
   \   000003F8   0xE003             B.N      ??main_39
    567                    }
    568                    else
    569                    {
    570                      sprintf( (char *)tempBffr2, "Units XML State: DISABLED\r\n\r\n> ");
   \                     ??main_38: (+1)
   \   000003FA   0x....             LDR.N    R1,??DataTable1_13
   \   000003FC   0xA801             ADD      R0,SP,#+4
   \   000003FE   0x.... 0x....      BL       sprintf
    571                    }
    572          #ifdef REV_L
    573                    Status = RoadBrd_UART_Transmit_IT(NUCLEO_USART, (uint8_t *)tempBffr2);
   \                     ??main_39: (+1)
   \   00000402   0xA901             ADD      R1,SP,#+4
   \   00000404   0x2000             MOVS     R0,#+0
   \   00000406   0x.... 0x....      BL       RoadBrd_UART_Transmit_IT
   \   0000040A   0x0004             MOVS     R4,R0
    574                    // Wait for msg to be completed.
    575                    while (RoadBrd_Uart_Status(NUCLEO_USART) != SET)
   \                     ??main_40: (+1)
   \   0000040C   0x2000             MOVS     R0,#+0
   \   0000040E   0x.... 0x....      BL       RoadBrd_Uart_Status
   \   00000412   0x2801             CMP      R0,#+1
   \   00000414   0xD1FA             BNE.N    ??main_40
    576                    {
    577                    }
    578                    // Clear State for Next Transfer.
    579                    clrUsartState( NUCLEO_USART );
   \   00000416   0x2000             MOVS     R0,#+0
   \   00000418   0x.... 0x....      BL       clrUsartState
    580          #else
    581                    Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);
    582          #endif
    583                    if (Status != HAL_OK)
   \   0000041C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000041E   0x2C00             CMP      R4,#+0
   \   00000420   0xD001             BEQ.N    ??main_41
    584                      Error_Handler();
   \   00000422   0x.... 0x....      BL       Error_Handler
    585                 #endif
    586          //      #endif
    587              #endif
    588            #endif
    589            while (1)
    590            {
    591            /* USER CODE END WHILE */
    592          
    593            /* USER CODE BEGIN 3 */
    594            /****************************************************************************
    595              * TEST CODE....Blinks LEDs for both Road Board and Nucleo Board.
    596              **************************************************************************/
    597            #ifdef TEST
    598              #ifdef NUCLEO
    599                // Turn On NUCLEO_LED_GREEN LED.
    600                RoadBrd_gpio_On( NUCLEO_LED_GREEN );
    601                // Wait 500msec.
    602                RoadBrd_Delay( 500 );
    603                // Turn Off NUCLEO_LED_GREEN LED.
    604                RoadBrd_gpio_Off( NUCLEO_LED_GREEN );
    605              #else
    606                // Turn On Blue LED and turn off Yellow LED.
    607                RoadBrd_gpio_On( BLUE_LED );
    608                RoadBrd_gpio_Off( YELLOW_LED );
    609                // Wait 500msec.
    610                RoadBrd_Delay( 500 );
    611                // Turn On Green LED and turn off Blue LED.
    612                RoadBrd_gpio_On( GREEN_LED );
    613                RoadBrd_gpio_Off( BLUE_LED );
    614                // Wait 500msec.
    615                RoadBrd_Delay( 500 );
    616                // Turn On Yellow LED and turn off Green LED.
    617                RoadBrd_gpio_On( YELLOW_LED );
    618                RoadBrd_gpio_Off( GREEN_LED );
    619              #endif
    620              // Wait 500msec.
    621              RoadBrd_Delay( 500 );
    622            //******************Endif TEST
    623            #else
    624            //******************Else TEST
    625          
    626            /****************************************************************************
    627             * TEST2 CODE....Reads COM port and translates back to sender. Simple COMM test.
    628             **************************************************************************/
    629              #ifdef TEST2
    630                #ifdef NUCLEO
    631                  // Turn Off NUCLEO_LED_GREEN LED.
    632                  RoadBrd_gpio_Off( NUCLEO_LED_GREEN );
    633                  // Wait on a character from Nucleo COM Port.
    634          #ifdef REV_L
    635                  Status = RoadBrd_UART_Receive_IT(NUCLEO_USART, tempBffr, 1);
    636                  // Wait for msg to be completed.
    637                  while (RoadBrd_Uart_Status(NUCLEO_USART) != SET)
    638                  {
    639                  }
    640                  // Clear State for Next Transfer.
    641                  clrUsartState( NUCLEO_USART );
    642          #else
    643                  Status = RoadBrd_UART_Receive(NUCLEO_USART, tempBffr, 1);
    644          #endif
    645                  // Turn On NUCLEO_LED_GREEN LED.
    646                  RoadBrd_gpio_On( NUCLEO_LED_GREEN );
    647                  switch(  Status)
    648                  {
    649                    case HAL_OK:
    650                      // We have a good character. Time to build a response string.
    651                      tempBffr2[0] = '(';
    652                      tempBffr2[1] = tempBffr[0];
    653                      tempBffr2[2] = ')';
    654                      tempBffr2[3] = 0x00;
    655                      // Send string to UART..
    656          #ifdef REV_L
    657                      Status = RoadBrd_UART_Transmit_IT(NUCLEO_USART, (uint8_t *)tempBffr2);
    658                      // Wait for msg to be completed.
    659                      while (RoadBrd_Uart_Status(NUCLEO_USART) != SET)
    660                      {
    661                      }
    662                      // Clear State for Next Transfer.
    663                      clrUsartState( NUCLEO_USART );
    664          #else
    665                      Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);
    666          #endif
    667                      if (Status != HAL_OK)
    668                        Error_Handler();
    669                      /*Status = RoadBrd_UART_Transmit_IT(NUCLEO_USART, (uint8_t *)tempBffr2);
    670                      if (Status != HAL_OK)
    671                        Error_Handler();
    672                      // Now wait for completion of Transmit
    673                      PStatus = RESET;
    674                      while (PStatus == RESET)
    675                      {
    676                        PStatus = RoadBrd_Uart_Status(NUCLEO_USART);
    677                      } */
    678                      break;
    679                    case HAL_ERROR:
    680                      // ERROR. We are done.
    681                      Error_Handler();
    682                      break;
    683                    case HAL_BUSY:
    684                      // ERROR. We are done.
    685                      Error_Handler();
    686                      break;
    687                    case HAL_TIMEOUT:
    688                      // Nothing to do. Try again.
    689                      break;
    690                    default:
    691                      // ERROR. We are done.
    692                      Error_Handler();
    693                      break;
    694                    
    695                  }
    696                // Wait 500msec.
    697                RoadBrd_Delay( 50 );
    698                #else
    699                  // Turn Off BGM_LED LED.
    700                  RoadBrd_gpio_Off( BGM_LED );
    701                  // Wait on a character from Nucleo COM Port.
    702           #ifdef REV_L
    703                  Status = RoadBrd_UART_Receive_IT(MONITOR_UART, tempBffr, 1);
    704                  // Wait for msg to be completed.
    705                  while (RoadBrd_Uart_Status(MONITOR_UART) != SET)
    706                  {
    707                  }
    708                  // Clear State for Next Transfer.
    709                  clrUsartState( MONITOR_UART );
    710          #else
    711                  Status = RoadBrd_UART_Receive(MONITOR_UART, tempBffr, 1);
    712          #endif
    713                  // Turn On BGM_LED LED.
    714                  RoadBrd_gpio_On( BGM_LED );
    715                  switch(  Status)
    716                  {
    717                    case HAL_OK:
    718                      // We have a good character. Time to build a response string.
    719                      tempBffr2[0] = '(';
    720                      tempBffr2[1] = tempBffr[0];
    721                      tempBffr2[2] = ')';
    722                      tempBffr2[3] = 0x00;
    723                      // Send string to UART..
    724          #ifdef REV_L
    725                      Status = RoadBrd_UART_Transmit_IT(MONITOR_UART, (uint8_t *)tempBffr2);
    726                      // Wait for msg to be completed.
    727                      while (RoadBrd_Uart_Status(MONITOR_UART) != SET)
    728                      {
    729                      }
    730                      // Clear State for Next Transfer.
    731                      clrUsartState( MONITOR_UART );
    732          #else
    733                      Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);
    734          #endif
    735                      if (Status != HAL_OK)
    736                        Error_Handler();
    737                      /*Status = RoadBrd_UART_Transmit_IT(NUCLEO_USART, (uint8_t *)tempBffr2);
    738                      if (Status != HAL_OK)
    739                        Error_Handler();
    740                      // Now wait for completion of Transmit
    741                      PStatus = RESET;
    742                      while (PStatus == RESET)
    743                      {
    744                        PStatus = RoadBrd_Uart_Status(NUCLEO_USART);
    745                      } */
    746                      break;
    747                    case HAL_ERROR:
    748                      // ERROR. We are done.
    749                      Error_Handler();
    750                      break;
    751                    case HAL_BUSY:
    752                      // ERROR. We are done.
    753                      Error_Handler();
    754                      break;
    755                    case HAL_TIMEOUT:
    756                      // Nothing to do. Try again.
    757                      break;
    758                    default:
    759                      // ERROR. We are done.
    760                      Error_Handler();
    761                      break;
    762                    
    763                  }
    764                // Wait 500msec.
    765                RoadBrd_Delay( 50 );
    766                #endif
    767              //******************Endif TEST2
    768              #else
    769              //******************Else TEST2
    770            /*****************************************************************************
    771             *    NORMAL FLOW HERE
    772             ****************************************************************************/
    773          //         RoadBrd_gpio_Off( NUCLEO_LED_GREEN );
    774          //         Status = RoadBrd_UART_Receive(NUCLEO_USART, tempBffr, 1);
    775                #ifdef NUCLEO
    776                
    777                //************************* NUCLEO VERSION *************************************   
    778                   // Turn Off NUCLEO_LED_GREEN LED.
    779                  RoadBrd_gpio_Off( NUCLEO_LED_GREEN );
    780                  // Wait on a character from Nucleo COM Port.
    781          #ifdef REV_L
    782                  tmpSize = Size;
    783                  pData = tempBffr;
    784                  while ( tmpSize>0 )
    785                  {
    786                    Status = RoadBrd_UART_Receive_IT(NUCLEO_USART, tmpData, 1);
    787                    // Wait for msg to be completed.
    788                    while (RoadBrd_Uart_Status(NUCLEO_USART) != SET)
    789                    {
    790                    }
    791                    // Clear State for Next Transfer.
    792                    clrUsartState( NUCLEO_USART );
    793                    if(Status == HAL_OK)
    794                    {
    795                      // Watch for termination characters.
    796                      if((tmpData[0]==0x0a) || (tmpData[0]==0x0d))
    797                      {
    798                        *pData = 0x00;
    799                        // Yes..We are done.
    800                        return Status;
    801                      }
    802                      else
    803                      {
    804                        // Move new character into passed buffer.
    805                        *pData = tmpData[0];
    806                        tmpSize--;                          // Decrement Count
    807                        pData++;                            // Move pointer to next buffer location.
    808                      }
    809                    }
    810                    else
    811                      Error_Handler();
    812                  } // EndWhile ( tmpSize>0 )
    813          #else
    814                  Status = RoadBrd_UART_Receive(NUCLEO_USART, tempBffr, RECEIVE_SZ);
    815          #endif
    816                  // Turn On NUCLEO_LED_GREEN LED.
    817          #ifndef LED_OFF
    818                  RoadBrd_gpio_On( NUCLEO_LED_GREEN );
    819          #endif
    820          #ifdef ASCII
    821                  // Send <CR><LF> to UART..
    822                  strcpy( (char *)tempBffr2, "\r\n");
    823          #ifdef REV_L
    824                      Status = RoadBrd_UART_Transmit_IT(NUCLEO_USART, (uint8_t *)tempBffr2);
    825                      // Wait for msg to be completed.
    826                      while (RoadBrd_Uart_Status(NUCLEO_USART) != SET)
    827                      {
    828                      }
    829                      // Clear State for Next Transfer.
    830                      clrUsartState( NUCLEO_USART );
    831          #else
    832                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);
    833          #endif
    834                  if (Status != HAL_OK)
    835                    Error_Handler();
    836          #endif
    837                  switch(  Status )
    838                  {
    839                    case HAL_OK:
    840                      Status = RoadBrd_ParseString((char *)tempBffr);
    841                      // We have a good Tasking String. Time to determine action.
    842                      if (Status != HAL_OK)
    843                        Error_Handler();
    844                      
    845                      break;
    846                    case HAL_ERROR:
    847                      // ERROR. We are done.
    848                      Error_Handler();
    849                      break;
    850                    case HAL_BUSY:
    851                      // ERROR. We are done.
    852                      Error_Handler();
    853                      break;
    854                    case HAL_TIMEOUT:
    855                      // Nothing to do. Try again.
    856                      break;
    857                    default:
    858                      // ERROR. We are done.
    859                      Error_Handler();
    860                      break;
    861                  }
    862                // Wait 500msec.
    863                RoadBrd_Delay( 50 );
    864                //************************* END NUCLEO VERSION *************************************   
    865                
    866                #else
    867          
    868                //************************* ROAD BRD VERSION *************************************   
    869                  // Wait on a character from Nucleo COM Port.
    870          //********************PATCH_UART ACTIVE*******************************************
    871          #ifdef PATCH_UART
    872          #ifdef REV_L
    873                  // Turn Off MICRO_LED LED.
    874                  RoadBrd_gpio_Off( MICRO_LED );
    875                  tmpSize = RECEIVE_SZ;
    876                  pData = tempBffr;
    877                  while ( tmpSize>0 )
    878                  {
    879                    Status = RoadBrd_UART_Receive_IT(MONITOR_UART, tmpData, 1);
    880                    // Wait for msg to be completed.
    881                    while (RoadBrd_Uart_Status(MONITOR_UART) != SET)
    882                    {
    883                     }
    884                    // Clear State for Next Transfer.
    885                    clrUsartState( MONITOR_UART );
    886                    if(Status == HAL_OK)
    887                    {
    888                      // Watch for termination characters.
    889                      if((tmpData[0]==0x0a) || (tmpData[0]==0x0d))
    890                      {
    891                        *pData = 0x00;
    892                        // Yes..We are done.
    893                        break;
    894                      }
    895                      else
    896                      {
    897                        // Move new character into passed buffer.
    898                        *pData = tmpData[0];
    899                        tmpSize--;                          // Decrement Count
    900                        pData++;                            // Move pointer to next buffer location.
    901                      }
    902                    }
    903                    else
    904                      Error_Handler();
    905                  } // EndWhile ( tmpSize>0 )
    906          #ifndef LED_OFF
    907                  RoadBrd_gpio_On( MICRO_LED );
    908          #endif
    909                  // Send <CR><LF> to UART..
    910                  strcpy( (char *)tempBffr2, "\r\n");
    911                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);
    912                  if (Status != HAL_OK)
    913                    Error_Handler();
    914                  switch(  Status )
    915                  {
    916                    case HAL_OK:
    917                      // We have a good Tasking String. Time to determine action.
    918                      Status = RoadBrd_ParseString((char *)tempBffr);
    919                      // We have a good Tasking String. Time to determine action.
    920                      if (Status != HAL_OK)
    921                        Error_Handler();
    922                      break;
    923                    case HAL_ERROR:
    924                      // ERROR. We are done.
    925                      Error_Handler();
    926                      break;
    927                    case HAL_BUSY:
    928                      // ERROR. We are done.
    929                      Error_Handler();
    930                      break;
    931                    case HAL_TIMEOUT:
    932                      // Nothing to do. Try again.
    933                      break;
    934                    default:
    935                      // ERROR. We are done.
    936                      Error_Handler();
    937                      break;
    938                    
    939                  } // EndSwitch (  Status )
    940          #else
    941                  // Turn Off BGM_LED LED.
    942                  RoadBrd_gpio_Off( MICRO_LED );
    943                  Status = RoadBrd_UART_Receive(MONITOR_UART, tempBffr, RECEIVE_SZ);
    944                  // Process Buffer Now.
    945                  // Turn On BGM_LED LED.
    946          #ifndef LED_OFF
    947                  RoadBrd_gpio_On( MICRO_LED );
    948          #endif
    949                  // Send <CR><LF> to UART..
    950                  strcpy( (char *)tempBffr2, "\r\n");
    951          #ifdef REV_L
    952                      Status = RoadBrd_UART_Transmit_IT(MONITOR_UART, (uint8_t *)tempBffr2);
    953                      // Wait for msg to be completed.
    954                      while (RoadBrd_Uart_Status(MONITOR_UART) != SET)
    955                      {
    956                      }
    957                      // Clear State for Next Transfer.
    958                      clrUsartState( MONITOR_UART );
    959          #else
    960                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);
    961          #endif
    962                  if (Status != HAL_OK)
    963                    Error_Handler();
    964                  switch(  Status )
    965                  {
    966                    case HAL_OK:
    967                      // We have a good Tasking String. Time to determine action.
    968                      Status = RoadBrd_ParseString((char *)tempBffr, false);
    969                      // We have a good Tasking String. Time to determine action.
    970                      if (Status != HAL_OK)
    971                        Error_Handler();
    972                      break;
    973                    case HAL_ERROR:
    974                      // ERROR. We are done.
    975                      Error_Handler();
    976                      break;
    977                    case HAL_BUSY:
    978                      // ERROR. We are done.
    979                      Error_Handler();
    980                      break;
    981                    case HAL_TIMEOUT:
    982                      // Nothing to do. Try again.
    983                      break;
    984                    default:
    985                      // ERROR. We are done.
    986                      Error_Handler();
    987                      break;
    988                    
    989                  } // EndSwitch (  Status )
    990          #endif
    991          //********************END PATCH_UART ACTIVE*******************************************
    992          #else
    993          //********************PATCH_UART NOT ACTIVE*******************************************
    994          #ifdef REV_L
    995                    /* Process BLE input */
    996                    BGM111_ProcessInput();
   \                     ??main_41: (+1)
   \   00000426   0x.... 0x....      BL       BGM111_ProcessInput
    997                  
    998                    // Process Timer Stimulus for Timer 2.
    999                    Status = Proc_Timer2();
   \   0000042A   0x.... 0x....      BL       Proc_Timer2
   \   0000042E   0x0004             MOVS     R4,R0
   1000                    if(Status != HAL_OK)
   \   00000430   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000432   0x2C00             CMP      R4,#+0
   \   00000434   0xD00D             BEQ.N    ??main_42
   1001                    {
   1002                      strcpy( (char *)tempBffr2, "BGM111_ProcessInput ERROR: Sensors reported Background error.\r\n");
   \   00000436   0x....             LDR.N    R1,??DataTable1_14
   \   00000438   0xA801             ADD      R0,SP,#+4
   \   0000043A   0x.... 0x....      BL       strcpy
   1003          #ifdef NUCLEO
   1004                      Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);
   1005          #else
   1006                      Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000043E   0xA901             ADD      R1,SP,#+4
   \   00000440   0x2000             MOVS     R0,#+0
   \   00000442   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000446   0x0004             MOVS     R4,R0
   1007          #endif
   1008                      if (Status != HAL_OK)
   \   00000448   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000044A   0x2C00             CMP      R4,#+0
   \   0000044C   0xD001             BEQ.N    ??main_42
   1009                        Error_Handler();
   \   0000044E   0x.... 0x....      BL       Error_Handler
   1010                    }
   1011                    // Process any Outstanding Parse Tasks.
   1012                    RoadBrd_ProcessParserTsk();
   \                     ??main_42: (+1)
   \   00000452   0x.... 0x....      BL       RoadBrd_ProcessParserTsk
   1013                    
   1014                    /* Process the sensor state machine if the BLE module is ready */
   1015                      if ((BGM111_Ready()) &&
   1016                          (BGM111_Connected()) &&
   1017                          (BGM111_DataConnected()) &&
   1018                          (BGM111_SyncModeTest()) )
   \   00000456   0x.... 0x....      BL       BGM111_Ready
   \   0000045A   0x2800             CMP      R0,#+0
   \   0000045C   0xD00D             BEQ.N    ??main_43
   \   0000045E   0x.... 0x....      BL       BGM111_Connected
   \   00000462   0x2800             CMP      R0,#+0
   \   00000464   0xD009             BEQ.N    ??main_43
   \   00000466   0x.... 0x....      BL       BGM111_DataConnected
   \   0000046A   0x2800             CMP      R0,#+0
   \   0000046C   0xD005             BEQ.N    ??main_43
   \   0000046E   0x.... 0x....      BL       BGM111_SyncModeTest
   \   00000472   0x2800             CMP      R0,#+0
   \   00000474   0xD001             BEQ.N    ??main_43
   1019                    {
   1020                      ProcessSensorState();
   \   00000476   0x.... 0x....      BL       ProcessSensorState
   1021                    }
   1022                    /* Sleep when we have nothing to process */
   1023                    //PWR_EnterSleepMode(PWR_Regulator_ON, PWR_SLEEPEntry_WFI);
   1024                    // Only Process the first Time
   1025                    if (firstTime)
   \                     ??main_43: (+1)
   \   0000047A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000047C   0x2E00             CMP      R6,#+0
   \   0000047E   0xD00E             BEQ.N    ??main_44
   1026                    {
   1027                      firstTime = false;
   \   00000480   0x2000             MOVS     R0,#+0
   \   00000482   0x0006             MOVS     R6,R0
   1028                      Status = RoadBrd_UART_Receive_IT(MONITOR_UART, tmpData, 1);
   \   00000484   0x2201             MOVS     R2,#+1
   \   00000486   0x4669             MOV      R1,SP
   \   00000488   0x2000             MOVS     R0,#+0
   \   0000048A   0x.... 0x....      BL       RoadBrd_UART_Receive_IT
   \   0000048E   0x0004             MOVS     R4,R0
   1029                      // Enable BGM Serial Traffic.
   1030                      HAL_UART_EnableBGM_RX();
   \   00000490   0x.... 0x....      BL       HAL_UART_EnableBGM_RX
   1031                      RoadBrd_SetBffrFlg();
   \   00000494   0x.... 0x....      BL       RoadBrd_SetBffrFlg
   1032                      // Clear bffrFlag..Only Processing one character.
   1033          //            bffrFlag = false;
   1034                      // Turn Off BGM_LED and MICRO_LED.
   1035                      RoadBrd_gpio_Off( MICRO_LED );
   \   00000498   0x2002             MOVS     R0,#+2
   \   0000049A   0x.... 0x....      BL       RoadBrd_gpio_Off
   1036                    }
   1037                    // Service Watchdog
   1038                    RoadBrd_WWDG_Refresh();     // Refresh WatchDog
   \                     ??main_44: (+1)
   \   0000049E   0x.... 0x....      BL       RoadBrd_WWDG_Refresh
   1039                    // Wait for msg to be completed.
   1040                    while (RoadBrd_Uart_Status(MONITOR_UART) != SET)
   \                     ??main_45: (+1)
   \   000004A2   0x2000             MOVS     R0,#+0
   \   000004A4   0x.... 0x....      BL       RoadBrd_Uart_Status
   \   000004A8   0x2801             CMP      R0,#+1
   \   000004AA   0xD02A             BEQ.N    ??main_46
   1041                    {
   1042                      // Process Timer Stimulus for Timer 2.
   1043                      Status = Proc_Timer2();
   \   000004AC   0x.... 0x....      BL       Proc_Timer2
   \   000004B0   0x0004             MOVS     R4,R0
   1044                      if(Status != HAL_OK)
   \   000004B2   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000004B4   0x2C00             CMP      R4,#+0
   \   000004B6   0xD00D             BEQ.N    ??main_47
   1045                      {
   1046                        strcpy( (char *)tempBffr2, "BGM111_ProcessInput ERROR: Sensors reported Background error.\r\n");
   \   000004B8   0x....             LDR.N    R1,??DataTable1_14
   \   000004BA   0xA801             ADD      R0,SP,#+4
   \   000004BC   0x.... 0x....      BL       strcpy
   1047          #ifdef NUCLEO
   1048                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);
   1049          #else
   1050                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000004C0   0xA901             ADD      R1,SP,#+4
   \   000004C2   0x2000             MOVS     R0,#+0
   \   000004C4   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000004C8   0x0004             MOVS     R4,R0
   1051          #endif
   1052                        if (Status != HAL_OK)
   \   000004CA   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000004CC   0x2C00             CMP      R4,#+0
   \   000004CE   0xD001             BEQ.N    ??main_47
   1053                          Error_Handler();
   \   000004D0   0x.... 0x....      BL       Error_Handler
   1054                      }
   1055                      // Process any Outstanding Parse Tasks.
   1056                      RoadBrd_ProcessParserTsk();
   \                     ??main_47: (+1)
   \   000004D4   0x.... 0x....      BL       RoadBrd_ProcessParserTsk
   1057                      
   1058                      /* Process the sensor state machine if the BLE module is ready */
   1059                      if ((BGM111_Ready()) &&
   1060                          (BGM111_Connected()) &&
   1061                          (BGM111_DataConnected()) &&
   1062                          (BGM111_SyncModeTest()) )
   \   000004D8   0x.... 0x....      BL       BGM111_Ready
   \   000004DC   0x2800             CMP      R0,#+0
   \   000004DE   0xD0E0             BEQ.N    ??main_45
   \   000004E0   0x.... 0x....      BL       BGM111_Connected
   \   000004E4   0x2800             CMP      R0,#+0
   \   000004E6   0xD0DC             BEQ.N    ??main_45
   \   000004E8   0x.... 0x....      BL       BGM111_DataConnected
   \   000004EC   0x2800             CMP      R0,#+0
   \   000004EE   0xD0D8             BEQ.N    ??main_45
   \   000004F0   0x.... 0x....      BL       BGM111_SyncModeTest
   \   000004F4   0x2800             CMP      R0,#+0
   \   000004F6   0xD0D4             BEQ.N    ??main_45
   1063                      {
   1064                        // Service Watchdog
   1065                        RoadBrd_WWDG_Refresh();     // Refresh WatchDog
   \   000004F8   0x.... 0x....      BL       RoadBrd_WWDG_Refresh
   1066                        ProcessSensorState();
   \   000004FC   0x.... 0x....      BL       ProcessSensorState
   \   00000500   0xE7CF             B.N      ??main_45
   1067                      }
   1068                      // Test to see if we have any BGM Traffic to process.
   1069                      //BGM111_ProcessInput();
   1070                    }
   1071                    // Test if BGM or Monitor Character received.
   1072                    if (RoadBrd_Uart_Status(MONITOR_UART) == SET)
   \                     ??main_46: (+1)
   \   00000502   0x2000             MOVS     R0,#+0
   \   00000504   0x.... 0x....      BL       RoadBrd_Uart_Status
   \   00000508   0x2801             CMP      R0,#+1
   \   0000050A   0xD17A             BNE.N    ??main_48
   1073                    {
   1074                      // Clear State for Next Transfer.
   1075                      clrUsartState( MONITOR_UART );
   \   0000050C   0x2000             MOVS     R0,#+0
   \   0000050E   0x.... 0x....      BL       clrUsartState
   1076                      if(Status == HAL_OK)
   \   00000512   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000514   0x2C00             CMP      R4,#+0
   \   00000516   0xD169             BNE.N    ??main_49
   1077                      {
   1078                        // Test Bypass Flag...If Set, we ae in special monitor mode.
   1079                        if (Tst_Bypass())
   \   00000518   0x.... 0x....      BL       Tst_Bypass
   \   0000051C   0x2800             CMP      R0,#+0
   \   0000051E   0xD024             BEQ.N    ??main_50
   1080                        {
   1081                          pData[0] = tmpData[0];
   \   00000520   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000524   0x7038             STRB     R0,[R7, #+0]
   1082                          pData[1] = 0x00;
   \   00000526   0x2000             MOVS     R0,#+0
   \   00000528   0x7078             STRB     R0,[R7, #+1]
   1083                          // Clear State for Next Transfer.
   1084                          clrUsartState( MONITOR_UART );
   \   0000052A   0x2000             MOVS     R0,#+0
   \   0000052C   0x.... 0x....      BL       clrUsartState
   1085                          if (Status != HAL_OK)
   \   00000530   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000532   0x2C00             CMP      R4,#+0
   \   00000534   0xD001             BEQ.N    ??main_51
   1086                            Error_Handler();
   \   00000536   0x.... 0x....      BL       Error_Handler
   1087                          if(Status == HAL_OK)
   \                     ??main_51: (+1)
   \   0000053A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000053C   0x2C00             CMP      R4,#+0
   \   0000053E   0xD10D             BNE.N    ??main_52
   1088                          {
   1089                            // We have a good Tasking String. Time to determine action.
   1090                            // Turn On BGM_LED LED.
   1091            #ifndef LED_OFF
   1092                            RoadBrd_gpio_On( GREEN_LED );
   \   00000540   0x2002             MOVS     R0,#+2
   \   00000542   0x.... 0x....      BL       RoadBrd_gpio_On
   1093            #endif
   1094                            Status = RoadBrd_ParseString((char *)tempBffr, false);
   \   00000546   0x2100             MOVS     R1,#+0
   \   00000548   0xA815             ADD      R0,SP,#+84
   \   0000054A   0x.... 0x....      BL       RoadBrd_ParseString
   \   0000054E   0x0004             MOVS     R4,R0
   1095                            // We have a good Tasking String. Time to determine action.
   1096                            if (Status != HAL_OK)
   \   00000550   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000552   0x2C00             CMP      R4,#+0
   \   00000554   0xD004             BEQ.N    ??main_53
   1097                              Error_Handler();
   \   00000556   0x.... 0x....      BL       Error_Handler
   \   0000055A   0xE001             B.N      ??main_53
   1098                          }
   1099                          else
   1100                            Error_Handler();
   \                     ??main_52: (+1)
   \   0000055C   0x.... 0x....      BL       Error_Handler
   1101                          tmpSize = RECEIVE_SZ;
   \                     ??main_53: (+1)
   \   00000560   0x201E             MOVS     R0,#+30
   \   00000562   0x0005             MOVS     R5,R0
   1102                          pData = tempBffr;
   \   00000564   0xA815             ADD      R0,SP,#+84
   \   00000566   0x0007             MOVS     R7,R0
   \   00000568   0xE042             B.N      ??main_54
   1103                        } // EndIf (Tst_Bypass())
   1104                        else {
   1105                          // Watch for termination characters.
   1106                          if((tmpData[0]==0x0a) || (tmpData[0]==0x0d) || (tmpSize<=0) )
   \                     ??main_50: (+1)
   \   0000056A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000056E   0x280A             CMP      R0,#+10
   \   00000570   0xD006             BEQ.N    ??main_55
   \   00000572   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000576   0x280D             CMP      R0,#+13
   \   00000578   0xD002             BEQ.N    ??main_55
   \   0000057A   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000057C   0x2D00             CMP      R5,#+0
   \   0000057E   0xD12F             BNE.N    ??main_56
   1107                          {
   1108                            *pData = 0x00;
   \                     ??main_55: (+1)
   \   00000580   0x2000             MOVS     R0,#+0
   \   00000582   0x7038             STRB     R0,[R7, #+0]
   1109                            // Yes..We are done.
   1110                            // Process Buffer NOW.
   1111                            // Send <CR><LF> to UART..
   1112                            strcpy( (char *)tempBffr2, "\r\n");
   \   00000584   0x....             ADR.N    R1,??DataTable1  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000586   0xA801             ADD      R0,SP,#+4
   \   00000588   0x.... 0x....      BL       strcpy
   1113                            Status = RoadBrd_UART_Transmit_IT(MONITOR_UART, (uint8_t *)tempBffr2);
   \   0000058C   0xA901             ADD      R1,SP,#+4
   \   0000058E   0x2000             MOVS     R0,#+0
   \   00000590   0x.... 0x....      BL       RoadBrd_UART_Transmit_IT
   \   00000594   0x0004             MOVS     R4,R0
   1114                            // Wait for msg to be completed.
   1115                            while (RoadBrd_Uart_Status(MONITOR_UART) != SET)
   \                     ??main_57: (+1)
   \   00000596   0x2000             MOVS     R0,#+0
   \   00000598   0x.... 0x....      BL       RoadBrd_Uart_Status
   \   0000059C   0x2801             CMP      R0,#+1
   \   0000059E   0xD1FA             BNE.N    ??main_57
   1116                            {
   1117                            }
   1118                            // Clear State for Next Transfer.
   1119                            clrUsartState( MONITOR_UART );
   \   000005A0   0x2000             MOVS     R0,#+0
   \   000005A2   0x.... 0x....      BL       clrUsartState
   1120                            if (Status != HAL_OK)
   \   000005A6   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000005A8   0x2C00             CMP      R4,#+0
   \   000005AA   0xD001             BEQ.N    ??main_58
   1121                              Error_Handler();
   \   000005AC   0x.... 0x....      BL       Error_Handler
   1122                            if(Status == HAL_OK)
   \                     ??main_58: (+1)
   \   000005B0   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000005B2   0x2C00             CMP      R4,#+0
   \   000005B4   0xD10D             BNE.N    ??main_59
   1123                            {
   1124                              // We have a good Tasking String. Time to determine action.
   1125                              // Turn On BGM_LED LED.
   1126            #ifndef LED_OFF
   1127                              RoadBrd_gpio_On( GREEN_LED );
   \   000005B6   0x2002             MOVS     R0,#+2
   \   000005B8   0x.... 0x....      BL       RoadBrd_gpio_On
   1128            #endif
   1129                              Status = RoadBrd_ParseString((char *)tempBffr, false);
   \   000005BC   0x2100             MOVS     R1,#+0
   \   000005BE   0xA815             ADD      R0,SP,#+84
   \   000005C0   0x.... 0x....      BL       RoadBrd_ParseString
   \   000005C4   0x0004             MOVS     R4,R0
   1130                              // We have a good Tasking String. Time to determine action.
   1131                              if (Status != HAL_OK)
   \   000005C6   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000005C8   0x2C00             CMP      R4,#+0
   \   000005CA   0xD004             BEQ.N    ??main_60
   1132                                Error_Handler();
   \   000005CC   0x.... 0x....      BL       Error_Handler
   \   000005D0   0xE001             B.N      ??main_60
   1133                            }
   1134                            else
   1135                              Error_Handler();
   \                     ??main_59: (+1)
   \   000005D2   0x.... 0x....      BL       Error_Handler
   1136                            tmpSize = RECEIVE_SZ;
   \                     ??main_60: (+1)
   \   000005D6   0x201E             MOVS     R0,#+30
   \   000005D8   0x0005             MOVS     R5,R0
   1137                            pData = tempBffr;
   \   000005DA   0xA815             ADD      R0,SP,#+84
   \   000005DC   0x0007             MOVS     R7,R0
   \   000005DE   0xE007             B.N      ??main_54
   1138                          } // EndIf ((tmpData[0]==0x0a) || (tmpData[0]==0x0d) || (tmpSize<=0) )
   1139                          else
   1140                          {
   1141                            *pData = tmpData[0];
   \                     ??main_56: (+1)
   \   000005E0   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000005E4   0x7038             STRB     R0,[R7, #+0]
   1142                            tmpSize--;                          // Decrement Count
   \   000005E6   0x1E6D             SUBS     R5,R5,#+1
   1143                            pData++;                            // Move pointer to next buffer location.
   \   000005E8   0x1C7F             ADDS     R7,R7,#+1
   \   000005EA   0xE001             B.N      ??main_54
   1144                          }
   1145                        } // EndElse (Tst_Bypass())
   1146                      }
   1147                      else
   1148                        Error_Handler();
   \                     ??main_49: (+1)
   \   000005EC   0x.... 0x....      BL       Error_Handler
   1149                    Status = RoadBrd_UART_Receive_IT(MONITOR_UART, tmpData, 1);
   \                     ??main_54: (+1)
   \   000005F0   0x2201             MOVS     R2,#+1
   \   000005F2   0x4669             MOV      R1,SP
   \   000005F4   0x2000             MOVS     R0,#+0
   \   000005F6   0x.... 0x....      BL       RoadBrd_UART_Receive_IT
   \   000005FA   0x0004             MOVS     R4,R0
   1150                    // Turn Off MICRO_LED.
   1151                    RoadBrd_gpio_Off( MICRO_LED );
   \   000005FC   0x2002             MOVS     R0,#+2
   \   000005FE   0x.... 0x....      BL       RoadBrd_gpio_Off
   1152                  } // EndIf (RoadBrd_Uart_Status(MONITOR_UART) == SET)
   1153          
   1154          #else
   1155                  // Turn Off BGM_LED LED.
   1156                  RoadBrd_gpio_Off( MICRO_LED );
   1157                  Status = RoadBrd_UART_Receive(MONITOR_UART, tempBffr, RECEIVE_SZ);
   1158                  // Turn On BGM_LED LED.
   1159          #ifndef LED_OFF
   1160                  RoadBrd_gpio_On( MICRO_LED );
   1161          #endif
   1162                  // Send <CR><LF> to UART..
   1163                  strcpy( (char *)tempBffr2, "\r\n");
   1164                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);
   1165                  if (Status != HAL_OK)
   1166                    Error_Handler();
   1167                  switch(  Status )
   1168                  {
   1169                    case HAL_OK:
   1170                      // We have a good Tasking String. Time to determine action.
   1171                      Status = RoadBrd_ParseString((char *)tempBffr, false);
   1172                      // We have a good Tasking String. Time to determine action.
   1173                      if (Status != HAL_OK)
   1174                        Error_Handler();
   1175                      break;
   1176                    case HAL_ERROR:
   1177                      // ERROR. We are done.
   1178                      Error_Handler();
   1179                      break;
   1180                    case HAL_BUSY:
   1181                      // ERROR. We are done.
   1182                      Error_Handler();
   1183                      break;
   1184                    case HAL_TIMEOUT:
   1185                      // Nothing to do. Try again.
   1186                      break;
   1187                    default:
   1188                      // ERROR. We are done.
   1189                      Error_Handler();
   1190                      break;
   1191                    
   1192                  } // EndSwitch (  Status )
   1193          #endif
   1194          //********************END PATCH_UART NOT ACTIVE*******************************************
   1195          #endif
   1196                // Wait 50msec.
   1197                RoadBrd_Delay( 50 );
   \                     ??main_48: (+1)
   \   00000602   0x2032             MOVS     R0,#+50
   \   00000604   0x.... 0x....      BL       RoadBrd_Delay
   \   00000608   0xE70D             B.N      ??main_41
   1198                //************************* END Road BRD VERSION *************************************   
   1199                #endif
   1200            /*****************************************************************************
   1201             *    END NORMAL FLOW HERE
   1202             ****************************************************************************/
   1203              //******************EndElse TEST2
   1204              #endif
   1205          
   1206            //******************EndElse TEST
   1207            #endif
   1208            } // EndWhile (1)
   1209          //********************ENDIF TASKING
   1210          #endif
   1211            /* USER CODE END 3 */
   1212          
   1213          }
   1214          
   1215          /** System Clock Configuration
   1216          */

   \                                 In section .text, align 2, keep-with-next
   1217          void SystemClock_Config(void)
   1218          {
   \                     SystemClock_Config: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB093             SUB      SP,SP,#+76
   1219          
   1220            RCC_OscInitTypeDef RCC_OscInitStruct;
   1221            RCC_ClkInitTypeDef RCC_ClkInitStruct;
   1222          
   1223            __HAL_RCC_PWR_CLK_ENABLE();
   \   00000004   0x....             LDR.N    R0,??DataTable1_15  ;; 0x40023824
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0xF050 0x5080      ORRS     R0,R0,#0x10000000
   \   0000000C   0x....             LDR.N    R1,??DataTable1_15  ;; 0x40023824
   \   0000000E   0x6008             STR      R0,[R1, #+0]
   \   00000010   0x....             LDR.N    R0,??DataTable1_15  ;; 0x40023824
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0xF010 0x5080      ANDS     R0,R0,#0x10000000
   \   00000018   0x9000             STR      R0,[SP, #+0]
   \   0000001A   0x9800             LDR      R0,[SP, #+0]
   1224          
   1225            __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
   \   0000001C   0x....             LDR.N    R0,??DataTable1_16  ;; 0x40007000
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0xF430 0x50C0      BICS     R0,R0,#0x1800
   \   00000024   0xF450 0x6000      ORRS     R0,R0,#0x800
   \   00000028   0x....             LDR.N    R1,??DataTable1_16  ;; 0x40007000
   \   0000002A   0x6008             STR      R0,[R1, #+0]
   1226          
   1227            RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
   \   0000002C   0x2003             MOVS     R0,#+3
   \   0000002E   0x9006             STR      R0,[SP, #+24]
   1228            RCC_OscInitStruct.HSEState = RCC_HSE_ON;
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0x9007             STR      R0,[SP, #+28]
   1229            RCC_OscInitStruct.HSIState = RCC_HSI_ON;
   \   00000034   0x2001             MOVS     R0,#+1
   \   00000036   0x9009             STR      R0,[SP, #+36]
   1230            RCC_OscInitStruct.HSICalibrationValue = 16;
   \   00000038   0x2010             MOVS     R0,#+16
   \   0000003A   0x900A             STR      R0,[SP, #+40]
   1231            RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
   \   0000003C   0x2002             MOVS     R0,#+2
   \   0000003E   0x900F             STR      R0,[SP, #+60]
   1232            RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
   \   00000040   0xF45F 0x3080      MOVS     R0,#+65536
   \   00000044   0x9010             STR      R0,[SP, #+64]
   1233            RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
   \   00000046   0xF45F 0x1080      MOVS     R0,#+1048576
   \   0000004A   0x9011             STR      R0,[SP, #+68]
   1234            RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
   \   0000004C   0xF45F 0x0000      MOVS     R0,#+8388608
   \   00000050   0x9012             STR      R0,[SP, #+72]
   1235            if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
   \   00000052   0xA806             ADD      R0,SP,#+24
   \   00000054   0x.... 0x....      BL       HAL_RCC_OscConfig
   \   00000058   0x2800             CMP      R0,#+0
   \   0000005A   0xD001             BEQ.N    ??SystemClock_Config_0
   1236            {
   1237              Error_Handler();
   \   0000005C   0x.... 0x....      BL       Error_Handler
   1238            }
   1239          
   1240            RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
   1241                                        |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
   \                     ??SystemClock_Config_0: (+1)
   \   00000060   0x200F             MOVS     R0,#+15
   \   00000062   0x9001             STR      R0,[SP, #+4]
   1242            RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
   \   00000064   0x2003             MOVS     R0,#+3
   \   00000066   0x9002             STR      R0,[SP, #+8]
   1243            RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
   \   00000068   0x2000             MOVS     R0,#+0
   \   0000006A   0x9003             STR      R0,[SP, #+12]
   1244            RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
   \   0000006C   0x2000             MOVS     R0,#+0
   \   0000006E   0x9004             STR      R0,[SP, #+16]
   1245            RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
   \   00000070   0x2000             MOVS     R0,#+0
   \   00000072   0x9005             STR      R0,[SP, #+20]
   1246            if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
   \   00000074   0x2101             MOVS     R1,#+1
   \   00000076   0xA801             ADD      R0,SP,#+4
   \   00000078   0x.... 0x....      BL       HAL_RCC_ClockConfig
   \   0000007C   0x2800             CMP      R0,#+0
   \   0000007E   0xD001             BEQ.N    ??SystemClock_Config_1
   1247            {
   1248              Error_Handler();
   \   00000080   0x.... 0x....      BL       Error_Handler
   1249            }
   1250          
   1251            HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
   \                     ??SystemClock_Config_1: (+1)
   \   00000084   0x.... 0x....      BL       HAL_RCC_GetHCLKFreq
   \   00000088   0xF44F 0x717A      MOV      R1,#+1000
   \   0000008C   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000090   0x.... 0x....      BL       HAL_SYSTICK_Config
   1252          
   1253            HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
   \   00000094   0x2004             MOVS     R0,#+4
   \   00000096   0x.... 0x....      BL       HAL_SYSTICK_CLKSourceConfig
   1254          
   1255            /* SysTick_IRQn interrupt configuration */
   1256            HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
   \   0000009A   0x2200             MOVS     R2,#+0
   \   0000009C   0x210F             MOVS     R1,#+15
   \   0000009E   0xF05F 0x30FF      MOVS     R0,#-1
   \   000000A2   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1257          }
   \   000000A6   0xB013             ADD      SP,SP,#+76
   \   000000A8   0xBD00             POP      {PC}             ;; return
   1258          
   1259          /* USER CODE BEGIN 4 */
   1260          
   1261          /* USER CODE END 4 */
   1262          
   1263          /**
   1264            * @brief  This function is executed in case of error occurrence.
   1265            * @param  None
   1266            * @retval None
   1267            */

   \                                 In section .text, align 2, keep-with-next
   1268          void Error_Handler(void)
   1269          {
   \                     Error_Handler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1270            /* USER CODE BEGIN Error_Handler */
   1271            /* User can add his own implementation to report the HAL error return state */
   1272            // Turn LED2 on
   1273          #ifdef NUCLEO
   1274            BSP_LED_On(LED2);
   1275          #else
   1276            RoadBrd_LED_On(BLUE_LED);
   \   00000002   0x2001             MOVS     R0,#+1
   \   00000004   0x.... 0x....      BL       RoadBrd_LED_On
   1277            RoadBrd_LED_On(GREEN_LED);
   \   00000008   0x2002             MOVS     R0,#+2
   \   0000000A   0x.... 0x....      BL       RoadBrd_LED_On
   1278            RoadBrd_LED_On(YELLOW_LED);
   \   0000000E   0x2003             MOVS     R0,#+3
   \   00000010   0x.... 0x....      BL       RoadBrd_LED_On
   1279          #endif
   1280            while(1) 
   1281            {
   1282              // Error if LED2 is slowly blinking (1 sec. period)
   1283          #ifdef NUCLEO
   1284              BSP_LED_Toggle(LED2); 
   1285          #else
   1286              RoadBrd_LED_Toggle(BLUE_LED); 
   \                     ??Error_Handler_0: (+1)
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x.... 0x....      BL       RoadBrd_LED_Toggle
   1287              RoadBrd_LED_Toggle(GREEN_LED); 
   \   0000001A   0x2002             MOVS     R0,#+2
   \   0000001C   0x.... 0x....      BL       RoadBrd_LED_Toggle
   1288              RoadBrd_LED_Toggle(YELLOW_LED); 
   \   00000020   0x2003             MOVS     R0,#+3
   \   00000022   0x.... 0x....      BL       RoadBrd_LED_Toggle
   1289          #endif
   1290              HAL_Delay(50); 
   \   00000026   0x2032             MOVS     R0,#+50
   \   00000028   0x.... 0x....      BL       HAL_Delay
   \   0000002C   0xE7F2             B.N      ??Error_Handler_0
   1291            }
   1292            /* USER CODE END Error_Handler */ 
   1293          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x........         DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x........         DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \   00000000   0x........         DC32     ?_5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \   00000000   0x........         DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_7:
   \   00000000   0x41200000         DC32     0x41200000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_8:
   \   00000000   0x........         DC32     ?_6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_9:
   \   00000000   0x........         DC32     ?_7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_10:
   \   00000000   0x........         DC32     ?_8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_11:
   \   00000000   0x........         DC32     ?_9

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_12:
   \   00000000   0x........         DC32     ?_10

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_13:
   \   00000000   0x........         DC32     ?_11

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_14:
   \   00000000   0x........         DC32     ?_12

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_15:
   \   00000000   0x40023824         DC32     0x40023824

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_16:
   \   00000000   0x40007000         DC32     0x40007000

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x2A 0x2A          DC8 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH
   \              0x2A 0x2A    
   \              0x2A 0x2A    
   \              0x2A 0x2A    
   \   00000008   0x2A 0x2A          DC8 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH
   \              0x2A 0x2A    
   \              0x2A 0x2A    
   \              0x2A 0x2A    
   \   00000010   0x2A 0x2A          DC8 2AH, 2AH, 2AH, 2AH, 2AH, 20H, 20H, 57H
   \              0x2A 0x2A    
   \              0x2A 0x20    
   \              0x20 0x57    
   \   00000018   0x45 0x41          DC8 45H, 41H, 54H, 48H, 45H, 52H, 43H, 4CH
   \              0x54 0x48    
   \              0x45 0x52    
   \              0x43 0x4C    
   \   00000020   0x4F 0x55          DC8 4FH, 55H, 44H, 20H, 2AH, 2AH, 2AH, 2AH
   \              0x44 0x20    
   \              0x2A 0x2A    
   \              0x2A 0x2A    
   \   00000028   0x2A 0x2A          DC8 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH
   \              0x2A 0x2A    
   \              0x2A 0x2A    
   \              0x2A 0x2A    
   \   00000030   0x2A 0x2A          DC8 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH
   \              0x2A 0x2A    
   \              0x2A 0x2A    
   \              0x2A 0x2A    
   \   00000038   0x2A 0x0D          DC8 2AH, 0DH, 0AH, 0DH, 0AH, 0
   \              0x0A 0x0D    
   \              0x0A 0x00    
   \   0000003E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x20 0x20          DC8 "     Road Board Monitor %s Hardware Version %s \015\012"
   \              0x20 0x20    
   \              0x20 0x52    
   \              0x6F 0x61    
   \              0x64 0x20    
   \              0x42 0x6F    
   \              0x61 0x72    
   \              0x64 0x20    
   \              0x4D 0x6F    
   \              0x6E 0x69    
   \              0x74 0x6F    
   \              0x72 0x20    
   \              0x25 0x73    
   \              0x20 0x48    
   \              0x61 0x72    
   \              0x64 0x77    
   \              0x61 0x72    
   \              0x65 0x20    
   \              0x56 0x65    
   \              0x72 0x73    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x25 0x73    
   \              0x20 0x0D    
   \              0x0A 0x00    
   \   00000032   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x4E 0x2E          DC8 "N.8.8"
   \              0x38 0x2E    
   \              0x38 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x52 0x65          DC8 "Rev M"
   \              0x76 0x20    
   \              0x4D 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_4:
   \   00000000   0x20 0x20          DC8 "                  Copyright %s. \015\012\015\012"
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x43 0x6F    
   \              0x70 0x79    
   \              0x72 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \              0x25 0x73    
   \              0x2E 0x20    
   \              0x0D 0x0A    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_5:
   \   00000000   0x53 0x65          DC8 "Sep 12, 2017"
   \              0x70 0x20    
   \              0x31 0x32    
   \              0x2C 0x20    
   \              0x32 0x30    
   \              0x31 0x37    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_6:
   \   00000000   0x52 0x64          DC8 "RdSnd Sample Rate:  %3.1f Seconds.\015\012"
   \              0x53 0x6E    
   \              0x64 0x20    
   \              0x53 0x61    
   \              0x6D 0x70    
   \              0x6C 0x65    
   \              0x20 0x52    
   \              0x61 0x74    
   \              0x65 0x3A    
   \              0x20 0x20    
   \              0x25 0x33    
   \              0x2E 0x31    
   \              0x66 0x20    
   \              0x53 0x65    
   \              0x63 0x6F    
   \              0x6E 0x64    
   \              0x73 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_7:
   \   00000000   0x53 0x65          DC8 "Sensor Sample Rate: %3.1f Seconds.\015\012"
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \              0x61 0x6D    
   \              0x70 0x6C    
   \              0x65 0x20    
   \              0x52 0x61    
   \              0x74 0x65    
   \              0x3A 0x20    
   \              0x25 0x33    
   \              0x2E 0x31    
   \              0x66 0x20    
   \              0x53 0x65    
   \              0x63 0x6F    
   \              0x6E 0x64    
   \              0x73 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_8:
   \   00000000   0x54 0x41          DC8 "TACK Limit: %d.\015\012"
   \              0x43 0x4B    
   \              0x20 0x4C    
   \              0x69 0x6D    
   \              0x69 0x74    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_9:
   \   00000000   0x42 0x6F          DC8 "Boot Delay: %d Seconds.\015\012"
   \              0x6F 0x74    
   \              0x20 0x44    
   \              0x65 0x6C    
   \              0x61 0x79    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x20 0x53    
   \              0x65 0x63    
   \              0x6F 0x6E    
   \              0x64 0x73    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_10:
   \   00000000   0x55 0x6E          DC8 "Units XML State: ENABLED\015\012\015\012> "
   \              0x69 0x74    
   \              0x73 0x20    
   \              0x58 0x4D    
   \              0x4C 0x20    
   \              0x53 0x74    
   \              0x61 0x74    
   \              0x65 0x3A    
   \              0x20 0x45    
   \              0x4E 0x41    
   \              0x42 0x4C    
   \              0x45 0x44    
   \              0x0D 0x0A    
   \              0x0D 0x0A    
   \              0x3E 0x20    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_11:
   \   00000000   0x55 0x6E          DC8 "Units XML State: DISABLED\015\012\015\012> "
   \              0x69 0x74    
   \              0x73 0x20    
   \              0x58 0x4D    
   \              0x4C 0x20    
   \              0x53 0x74    
   \              0x61 0x74    
   \              0x65 0x3A    
   \              0x20 0x44    
   \              0x49 0x53    
   \              0x41 0x42    
   \              0x4C 0x45    
   \              0x44 0x0D    
   \              0x0A 0x0D    
   \              0x0A 0x3E    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_12:
   \   00000000   0x42 0x47          DC8 42H, 47H, 4DH, 31H, 31H, 31H, 5FH, 50H
   \              0x4D 0x31    
   \              0x31 0x31    
   \              0x5F 0x50    
   \   00000008   0x72 0x6F          DC8 72H, 6FH, 63H, 65H, 73H, 73H, 49H, 6EH
   \              0x63 0x65    
   \              0x73 0x73    
   \              0x49 0x6E    
   \   00000010   0x70 0x75          DC8 70H, 75H, 74H, 20H, 45H, 52H, 52H, 4FH
   \              0x74 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \   00000018   0x52 0x3A          DC8 52H, 3AH, 20H, 53H, 65H, 6EH, 73H, 6FH
   \              0x20 0x53    
   \              0x65 0x6E    
   \              0x73 0x6F    
   \   00000020   0x72 0x73          DC8 72H, 73H, 20H, 72H, 65H, 70H, 6FH, 72H
   \              0x20 0x72    
   \              0x65 0x70    
   \              0x6F 0x72    
   \   00000028   0x74 0x65          DC8 74H, 65H, 64H, 20H, 42H, 61H, 63H, 6BH
   \              0x64 0x20    
   \              0x42 0x61    
   \              0x63 0x6B    
   \   00000030   0x67 0x72          DC8 67H, 72H, 6FH, 75H, 6EH, 64H, 20H, 65H
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x20 0x65    
   \   00000038   0x72 0x72          DC8 72H, 72H, 6FH, 72H, 2EH, 0DH, 0AH, 0
   \              0x6F 0x72    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \   00000000   0x0D 0x0A          DC8 "\015\012"
   \              0x00         
   \   00000003   0x00               DC8 0
   1294          
   1295          #ifdef USE_FULL_ASSERT
   1296          
   1297          /**
   1298             * @brief Reports the name of the source file and the source line number
   1299             * where the assert_param error has occurred.
   1300             * @param file: pointer to the source file name
   1301             * @param line: assert_param error line source number
   1302             * @retval None
   1303             */
   1304          void assert_failed(uint8_t* file, uint32_t line)
   1305          {
   1306            /* USER CODE BEGIN 6 */
   1307            /* User can add his own implementation to report the file name and line number,
   1308              ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
   1309            /* USER CODE END 6 */
   1310          
   1311          }
   1312          #endif
   1313          
   1314          /**
   1315            * @}
   1316            */ 
   1317          
   1318          /**
   1319            * @}
   1320          */ 
   1321          
   1322          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   Error_Handler
         8   -> HAL_Delay
         8   -> RoadBrd_LED_On
         8   -> RoadBrd_LED_Toggle
      80   SystemClock_Config
        80   -> Error_Handler
        80   -> HAL_NVIC_SetPriority
        80   -> HAL_RCC_ClockConfig
        80   -> HAL_RCC_GetHCLKFreq
        80   -> HAL_RCC_OscConfig
        80   -> HAL_SYSTICK_CLKSourceConfig
        80   -> HAL_SYSTICK_Config
     168   main
       168   -> ADC_Config
       168   -> BGM111_Connected
       168   -> BGM111_DataConnected
       168   -> BGM111_Init
       168   -> BGM111_ProcessInput
       168   -> BGM111_Ready
       168   -> BGM111_SyncModeTest
       168   -> Error_Handler
       168   -> Get_DriverStates
       168   -> HAL_Init
       168   -> HAL_NVIC_EnableIRQ
       168   -> HAL_TIM_StartTimer2
       168   -> HAL_TIM_StartTimer3
       168   -> HAL_UART_EnableBGM_RX
       168   -> I2C_WaitBusyFlag
       168   -> InitSensors
       168   -> MX_ADC_Init
       168   -> MX_DMA_Init
       168   -> MX_GPIO_Init
       168   -> MX_I2C1_Init
       168   -> MX_TIM2_Init
       168   -> MX_TIM3_Init
       168   -> MX_USART2_UART_Init
       168   -> MX_USART3_UART_Init
       168   -> MX_WWDG_Init
       168   -> Proc_Timer2
       168   -> ProcessSensorState
       168   -> RdBrd_ErrCdLogErrCd
       168   -> Reset_DriverStates
       168   -> RoadBrd_CAL_InitializeFrmFlash
       168   -> RoadBrd_CAL_VerifyFrame
       168   -> RoadBrd_CoolEyeInit
       168   -> RoadBrd_Delay
       168   -> RoadBrd_Get_BootDelay
       168   -> RoadBrd_Get_RdSndTickCnt
       168   -> RoadBrd_Get_SnsrTickCnt
       168   -> RoadBrd_Get_TackLimit
       168   -> RoadBrd_Get_UnitsFlag
       168   -> RoadBrd_GridEyeInit
       168   -> RoadBrd_HumidityInit
       168   -> RoadBrd_Init_Barometer
       168   -> RoadBrd_Init_VMonitor
       168   -> RoadBrd_ParseString
       168   -> RoadBrd_ParserInit
       168   -> RoadBrd_ProcessParserTsk
       168   -> RoadBrd_RGBInit
       168   -> RoadBrd_ReadTemp
       168   -> RoadBrd_SetBffrFlg
       168   -> RoadBrd_TestI2C
       168   -> RoadBrd_UART_Receive_IT
       168   -> RoadBrd_UART_Transmit
       168   -> RoadBrd_UART_Transmit_IT
       168   -> RoadBrd_Uart_Status
       168   -> RoadBrd_WWDG_InitializeDateString
       168   -> RoadBrd_WWDG_InitializeFrmFlash
       168   -> RoadBrd_WWDG_Refresh
       168   -> RoadBrd_WWDG_Start
       168   -> RoadBrd_WWDG_VerifyFrame
       168   -> RoadBrd_gpio_Off
       168   -> RoadBrd_gpio_On
       168   -> Set_DriverStates
       168   -> Set_TickCounts
       168   -> SystemClock_Config
       168   -> Tst_Bypass
       168   -> __aeabi_f2d
       168   -> __aeabi_fdiv
       168   -> __aeabi_ui2f
       168   -> clrUsartState
       168   -> sprintf
       168   -> strcpy


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_10
       4  ??DataTable1_11
       4  ??DataTable1_12
       4  ??DataTable1_13
       4  ??DataTable1_14
       4  ??DataTable1_15
       4  ??DataTable1_16
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
       4  ??DataTable1_7
       4  ??DataTable1_8
       4  ??DataTable1_9
      64  ?_0
      52  ?_1
      32  ?_10
      32  ?_11
      64  ?_12
       4  ?_13
       8  ?_2
       8  ?_3
      40  ?_4
      16  ?_5
      40  ?_6
      40  ?_7
      20  ?_8
      28  ?_9
      46  Error_Handler
     170  SystemClock_Config
    1546  main

 
   448 bytes in section .rodata
 1 830 bytes in section .text
 
 1 830 bytes of CODE  memory
   448 bytes of CONST memory

Errors: none
Warnings: none
