###############################################################################
#
# IAR ANSI C/C++ Compiler V7.60.2.11341/W32 for ARM       18/Jul/2017  09:21:03
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\parser.c
#    Command line =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\parser.c
#        -D USE_HAL_DRIVER -D STM32L152xE -D USE_STM32L1XX_NUCLEO -D ASCII -D
#        REV_L -D LONG_DELAY -lCN
#        "D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\Road
#        Brd MSTR Rev L Long Always\List" -o
#        "D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\Road
#        Brd MSTR Rev L Long Always\Obj" --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_clustering --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.4\arm\INC\c\DLib_Config_Full.h" -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/STM32L1xx_HAL_Driver/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/STM32L1xx_HAL_Driver/Inc/Legacy\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/BSP/STM32L1xx_Nucleo\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/portable/IAR/ARM_CM3\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Core/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/CMSIS/Include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/CMSIS/Device/ST/STM32L1xx/Include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\..\Middlewares\Third_Party\BgLib\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.4\arm\CMSIS\Include\"
#    Locale       =  English_United States.1252
#    List file    =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\Road
#        Brd MSTR Rev L Long Always\List\parser.lst
#    Object file  =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\Road
#        Brd MSTR Rev L Long Always\Obj\parser.o
#
###############################################################################

D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\parser.c
      1          /**
      2            ******************************************************************************
      3            * File Name          : parser.c
      4            * Description        : This file provides code that parses the passed string and 
      5            *                      performs the requested operation. It then returns a string
      6            *                      hardware based on the LPS22HB chip.
      7            ******************************************************************************
      8            *
      9            * COPYRIGHT(c) 2016 WeatherCloud
     10            *
     11            * Redistribution and use in source and binary forms, with or without modification,
     12            * are permitted provided that the following conditions are met:
     13            *   1. Redistributions of source code must retain the above copyright notice,
     14            *      this list of conditions and the following disclaimer.
     15            *   2. Redistributions in binary form must reproduce the above copyright notice,
     16            *      this list of conditions and the following disclaimer in the documentation
     17            *      and/or other materials provided with the distribution.
     18            *   3. Neither the name of WeatherCloud nor the names of its contributors
     19            *      may be used to endorse or promote products derived from this software
     20            *      without specific prior written permission.
     21            *
     22            * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     23            * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     24            * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     25            * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
     26            * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     27            * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     28            * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
     29            * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
     30            * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
     31            * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     32            *
     33            ******************************************************************************
     34            */
     35          
     36          /* Includes ------------------------------------------------------------------*/
     37          #include "parser.h"
     38          #include "ErrorCodes.h"
     39          #include <ctype.h>
     40          #include <stdlib.h>
     41          #include "wwdg.h"
     42          #include "Calibration.h"
     43          

   \                                 In section .bss, align 1
     44          static bool Bypass = false;
   \                     Bypass:
   \   00000000                      DS8 1
     45          
     46          /* Parser function */
     47          
     48          /**
     49            * @brief  This routine parses the passed string and performs the passed operation
     50            * @param  *tempBffr: String to be parsed.
     51            * @retval HAL_StatusTypeDef:     HAL_OK:       Tasking of block of data to UART success.
     52            *                                HAL_ERROR:    Error found in Tasking or data passed.
     53            *                                HAL_BUSY:     UART is busy.
     54            *                                HAL_TIMEOUT:  UART timed out.
     55            */

   \                                 In section .text, align 4, keep-with-next
     56          HAL_StatusTypeDef RoadBrd_ParseString(char *tempBffr)
     57          {
   \                     RoadBrd_ParseString: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xF5AD 0x6D80      SUB      SP,SP,#+1024
   \   00000008   0xB093             SUB      SP,SP,#+76
   \   0000000A   0x0004             MOVS     R4,R0
     58          #ifdef TEST2
     59            #define RECEIVE_SZ      5
     60            uint8_t Size;
     61            uint8_t i2cData[80];
     62            uint8_t tempBffr3[10];
     63            char tempBffr2[5];
     64            int Loop_cnt;
     65            HAL_StatusTypeDef Status, Save_Status;
     66            int Address;
     67            int num_bytes;
     68            int num_bytes_received;
     69            int Error, x;
     70            char tempstr[20];
     71            char* tempPstr;
     72            int new_value, flag;
     73            float Temp_C, Temp_F, Shunt_V, Bus_V, Crrnt, Power;
     74            uint32_t Err_code;
     75          #else
     76            #ifdef TEST
     77              #define RECEIVE_SZ      5
     78            #else
     79              #define RECEIVE_SZ      30
     80              uint16_t DriverStatus;
     81              int8_t tempBffr2[120];
     82              int8_t tempBffr3[10];
     83              int8_t* BufferPntr;
     84              HAL_StatusTypeDef Status, Save_Status;
     85              uint8_t Size;
     86              int Address;
     87              int num_bytes;
     88              int num_bytes_received;
     89              uint8_t i2cData[80];
     90              int Error, x, y;
     91              Voltage VMeasure, VMeasureScaled;
     92              Current CMeasure, CMeasureScaled;
     93              Power PMeasure, PMeasureScaled;
     94              Temperature TMeasure, TMeasureScaled;
     95              Humidity HMeasure, HMeasureScaled;
     96              RGBInitialize RGBMeasure;
     97              RGBIdent IDMeasure;
     98              RGBStatus RGBSMeasure;
     99              RGBLight RGBValues;
    100              char uuid[10];
    101              float Scale, Offset;
    102          //    PRStatus PRMeasure;
    103              PRPressure PRPMeasure, PRPMeasureScaled;
    104              BinString RSFFTBins;
    105              GridEye     GridMeasure, GridMeasureScaled;
    106              uint32_t Err_code;
    107              uint8_t op_mode, ds_range, adc_rsl, sync, cmp_adjst, cmp_offst, int_assgn, int_persist, cnvrsn_int;
    108              int new_value, flag;
    109              char* tempPstr;
    110              char tempstr[20];
    111            #endif
    112          #endif
    113          
    114              Size = strlen((char *)tempBffr);
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       strlen
   \   00000012   0x4680             MOV      R8,R0
    115              
    116              // Test Bypass. If set, then we are in streaming mode.
    117              if ( Bypass )
   \   00000014   0xF8DF 0x0D9C      LDR.W    R0,??RoadBrd_ParseString_0
   \   00000018   0x7800             LDRB     R0,[R0, #+0]
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD01E             BEQ.N    ??RoadBrd_ParseString_1
    118              {
    119                if (tempBffr[0] == 0x1B)
   \   0000001E   0x7820             LDRB     R0,[R4, #+0]
   \   00000020   0x281B             CMP      R0,#+27
   \   00000022   0xD115             BNE.N    ??RoadBrd_ParseString_2
    120                {
    121                  Bypass = false;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0xF8DF 0x1D8C      LDR.W    R1,??RoadBrd_ParseString_0
   \   0000002A   0x7008             STRB     R0,[R1, #+0]
    122                  strcpy( (char *)tempBffr2, "\r\n\r\n T........TERMINATING MONITOR MODE.........\r\n\r\n> ");
   \   0000002C   0xF8DF 0x1D88      LDR.W    R1,??RoadBrd_ParseString_0+0x4
   \   00000030   0xA810             ADD      R0,SP,#+64
   \   00000032   0x.... 0x....      BL       strcpy
    123          #ifdef NUCLEO
    124                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    125          #else
    126                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000036   0xA910             ADD      R1,SP,#+64
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000003E   0x0005             MOVS     R5,R0
    127          #endif
    128                  if (Status != HAL_OK)
   \   00000040   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000042   0x2D00             CMP      R5,#+0
   \   00000044   0xF002 0x832D      BEQ.W    ??RoadBrd_ParseString_3
    129                    return Status;
   \   00000048   0x0028             MOVS     R0,R5
   \   0000004A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004C   0xF002 0xBB2B      B.W      ??RoadBrd_ParseString_4
    130                }
    131                else
    132                {
    133                  // Transmit Character to BGM111.
    134                  BGM111_Transmit(1, (uint8_t *)tempBffr);
   \                     ??RoadBrd_ParseString_2: (+1)
   \   00000050   0x0021             MOVS     R1,R4
   \   00000052   0x2001             MOVS     R0,#+1
   \   00000054   0x.... 0x....      BL       BGM111_Transmit
   \   00000058   0xF002 0xBB23      B.W      ??RoadBrd_ParseString_3
    135                }
    136              }// EndIf ( Bypass )
    137              else
    138              {
    139                // Normal Mode
    140              
    141                      // We have a good Tasking String. Time to determine action.
    142                      switch( tempBffr[0] )
   \                     ??RoadBrd_ParseString_1: (+1)
   \   0000005C   0x7820             LDRB     R0,[R4, #+0]
   \   0000005E   0x2830             CMP      R0,#+48
   \   00000060   0xD02E             BEQ.N    ??RoadBrd_ParseString_5
   \   00000062   0x2831             CMP      R0,#+49
   \   00000064   0xD039             BEQ.N    ??RoadBrd_ParseString_6
   \   00000066   0x2832             CMP      R0,#+50
   \   00000068   0xD05B             BEQ.N    ??RoadBrd_ParseString_7
   \   0000006A   0x2833             CMP      R0,#+51
   \   0000006C   0xD07D             BEQ.N    ??RoadBrd_ParseString_8
   \   0000006E   0x2834             CMP      R0,#+52
   \   00000070   0xF000 0x809F      BEQ.W    ??RoadBrd_ParseString_9
   \   00000074   0x2835             CMP      R0,#+53
   \   00000076   0xF000 0x80C0      BEQ.W    ??RoadBrd_ParseString_10
   \   0000007A   0x2836             CMP      R0,#+54
   \   0000007C   0xF000 0x810C      BEQ.W    ??RoadBrd_ParseString_11
   \   00000080   0x2841             CMP      R0,#+65
   \   00000082   0xF000 0x8114      BEQ.W    ??RoadBrd_ParseString_12
   \   00000086   0x2842             CMP      R0,#+66
   \   00000088   0xF000 0x8235      BEQ.W    ??RoadBrd_ParseString_13
   \   0000008C   0x2843             CMP      R0,#+67
   \   0000008E   0xF000 0x84A7      BEQ.W    ??RoadBrd_ParseString_14
   \   00000092   0x2844             CMP      R0,#+68
   \   00000094   0xF000 0x861E      BEQ.W    ??RoadBrd_ParseString_15
   \   00000098   0x2845             CMP      R0,#+69
   \   0000009A   0xF000 0x8747      BEQ.W    ??RoadBrd_ParseString_16
   \   0000009E   0x2846             CMP      R0,#+70
   \   000000A0   0xF000 0x874B      BEQ.W    ??RoadBrd_ParseString_17
   \   000000A4   0x2847             CMP      R0,#+71
   \   000000A6   0xF000 0x8755      BEQ.W    ??RoadBrd_ParseString_18
   \   000000AA   0x2848             CMP      R0,#+72
   \   000000AC   0xF000 0x87C0      BEQ.W    ??RoadBrd_ParseString_19
   \   000000B0   0x2850             CMP      R0,#+80
   \   000000B2   0xF001 0x8255      BEQ.W    ??RoadBrd_ParseString_20
   \   000000B6   0x2854             CMP      R0,#+84
   \   000000B8   0xF001 0x8270      BEQ.W    ??RoadBrd_ParseString_21
   \   000000BC   0xF002 0xBA77      B.W      ??RoadBrd_ParseString_22
    143                      {
    144          //**************************************************************************************************
    145                      case '0':
    146                        // Enable Road sound and fill buffer. 
    147                        Status = RoadBrdSnd_ProcessSound();
   \                     ??RoadBrd_ParseString_5: (+1)
   \   000000C0   0x.... 0x....      BL       RoadBrdSnd_ProcessSound
   \   000000C4   0x0005             MOVS     R5,R0
    148                        if (Status == HAL_OK)
   \   000000C6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000C8   0x2D00             CMP      R5,#+0
   \   000000CA   0xD104             BNE.N    ??RoadBrd_ParseString_23
    149                        {
    150                          strcpy( (char *)tempBffr2, "Road Sound: Road Sound loaded, processed, and sent to FFT Bins.\r\n");;
   \   000000CC   0xF8DF 0x1DC4      LDR.W    R1,??RoadBrd_ParseString_24
   \   000000D0   0xA810             ADD      R0,SP,#+64
   \   000000D2   0x.... 0x....      BL       strcpy
    151                        }
    152                        break;
   \                     ??RoadBrd_ParseString_23: (+1)
   \   000000D6   0xF002 0xBA6E      B.W      ??RoadBrd_ParseString_25
    153          //**************************************************************************************************
    154                      case '1':
    155                        // Rd_Sound FFT Measurements 0-15. 
    156                        Status = RoadBrdSnd_DumpBin0( &RSFFTBins );
   \                     ??RoadBrd_ParseString_6: (+1)
   \   000000DA   0xA8A0             ADD      R0,SP,#+640
   \   000000DC   0x.... 0x....      BL       RoadBrdSnd_DumpBin0
   \   000000E0   0x0005             MOVS     R5,R0
    157                        strcpy( (char *)tempBffr2, "Road Sound: FFT Measurements 0-15.\r\n");
   \   000000E2   0xF8DF 0x1DB4      LDR.W    R1,??RoadBrd_ParseString_24+0x4
   \   000000E6   0xA810             ADD      R0,SP,#+64
   \   000000E8   0x.... 0x....      BL       strcpy
    158          #ifdef NUCLEO
    159                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    160          #else
    161                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000000EC   0xA910             ADD      R1,SP,#+64
   \   000000EE   0x2000             MOVS     R0,#+0
   \   000000F0   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000000F4   0x0005             MOVS     R5,R0
    162          #endif
    163                        if (Status != HAL_OK)
   \   000000F6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000F8   0x2D00             CMP      R5,#+0
   \   000000FA   0xD003             BEQ.N    ??RoadBrd_ParseString_26
    164                          return Status;
   \   000000FC   0x0028             MOVS     R0,R5
   \   000000FE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000100   0xF002 0xBAD1      B.W      ??RoadBrd_ParseString_4
    165                        // NOW, Build Data String..
    166                        sprintf( (char *)tempBffr2, "     FFT Measurements 0-15: " );
   \                     ??RoadBrd_ParseString_26: (+1)
   \   00000104   0xF8DF 0x1D94      LDR.W    R1,??RoadBrd_ParseString_24+0x8
   \   00000108   0xA810             ADD      R0,SP,#+64
   \   0000010A   0x.... 0x....      BL       sprintf
    167                        strcat( (char *)tempBffr2, (char *)RSFFTBins.dumpStr );
   \   0000010E   0xA9A0             ADD      R1,SP,#+640
   \   00000110   0xA810             ADD      R0,SP,#+64
   \   00000112   0x.... 0x....      BL       strcat
    168                        strcat( (char *)tempBffr2, "\r\n" );
   \   00000116   0xA1C4             ADR.N    R1,??RoadBrd_ParseString_27  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000118   0xA810             ADD      R0,SP,#+64
   \   0000011A   0x.... 0x....      BL       strcat
    169                       break;
   \   0000011E   0xF002 0xBA4A      B.W      ??RoadBrd_ParseString_25
    170          //**************************************************************************************************
    171                      case '2':
    172                        // Rd_Sound FFT Measurements 16-31. 
    173                        Status = RoadBrdSnd_DumpBin16( &RSFFTBins );
   \                     ??RoadBrd_ParseString_7: (+1)
   \   00000122   0xA8A0             ADD      R0,SP,#+640
   \   00000124   0x.... 0x....      BL       RoadBrdSnd_DumpBin16
   \   00000128   0x0005             MOVS     R5,R0
    174                        strcpy( (char *)tempBffr2, "Road Sound: FFT Measurements 16-31.\r\n");
   \   0000012A   0xF8DF 0x1D74      LDR.W    R1,??RoadBrd_ParseString_24+0xC
   \   0000012E   0xA810             ADD      R0,SP,#+64
   \   00000130   0x.... 0x....      BL       strcpy
    175          #ifdef NUCLEO
    176                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    177          #else
    178                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000134   0xA910             ADD      R1,SP,#+64
   \   00000136   0x2000             MOVS     R0,#+0
   \   00000138   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000013C   0x0005             MOVS     R5,R0
    179          #endif
    180                        if (Status != HAL_OK)
   \   0000013E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000140   0x2D00             CMP      R5,#+0
   \   00000142   0xD003             BEQ.N    ??RoadBrd_ParseString_28
    181                          return Status;
   \   00000144   0x0028             MOVS     R0,R5
   \   00000146   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000148   0xF002 0xBAAD      B.W      ??RoadBrd_ParseString_4
    182                        // NOW, Build Data String..
    183                        sprintf( (char *)tempBffr2, "     FFT Measurements 16-31: " );
   \                     ??RoadBrd_ParseString_28: (+1)
   \   0000014C   0xF8DF 0x1DF8      LDR.W    R1,??RoadBrd_ParseString_29
   \   00000150   0xA810             ADD      R0,SP,#+64
   \   00000152   0x.... 0x....      BL       sprintf
    184                        strcat( (char *)tempBffr2, (char *)RSFFTBins.dumpStr );
   \   00000156   0xA9A0             ADD      R1,SP,#+640
   \   00000158   0xA810             ADD      R0,SP,#+64
   \   0000015A   0x.... 0x....      BL       strcat
    185                        strcat( (char *)tempBffr2, "\r\n" );
   \   0000015E   0xA1B2             ADR.N    R1,??RoadBrd_ParseString_27  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000160   0xA810             ADD      R0,SP,#+64
   \   00000162   0x.... 0x....      BL       strcat
    186                        break;
   \   00000166   0xF002 0xBA26      B.W      ??RoadBrd_ParseString_25
    187          //**************************************************************************************************
    188                      case '3':
    189                        // Rd_Sound FFT Measurements 32-47. 
    190                        Status = RoadBrdSnd_DumpBin32( &RSFFTBins );
   \                     ??RoadBrd_ParseString_8: (+1)
   \   0000016A   0xA8A0             ADD      R0,SP,#+640
   \   0000016C   0x.... 0x....      BL       RoadBrdSnd_DumpBin32
   \   00000170   0x0005             MOVS     R5,R0
    191                        strcpy( (char *)tempBffr2, "Road Sound: FFT Measurements 32-47.\r\n");
   \   00000172   0xF8DF 0x1DD8      LDR.W    R1,??RoadBrd_ParseString_29+0x4
   \   00000176   0xA810             ADD      R0,SP,#+64
   \   00000178   0x.... 0x....      BL       strcpy
    192          #ifdef NUCLEO
    193                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    194          #else
    195                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000017C   0xA910             ADD      R1,SP,#+64
   \   0000017E   0x2000             MOVS     R0,#+0
   \   00000180   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000184   0x0005             MOVS     R5,R0
    196          #endif
    197                        if (Status != HAL_OK)
   \   00000186   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000188   0x2D00             CMP      R5,#+0
   \   0000018A   0xD003             BEQ.N    ??RoadBrd_ParseString_30
    198                          return Status;
   \   0000018C   0x0028             MOVS     R0,R5
   \   0000018E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000190   0xF002 0xBA89      B.W      ??RoadBrd_ParseString_4
    199                        // NOW, Build Data String..
    200                        sprintf( (char *)tempBffr2, "     FFT Measurements 32-47: " );
   \                     ??RoadBrd_ParseString_30: (+1)
   \   00000194   0xF8DF 0x1DB8      LDR.W    R1,??RoadBrd_ParseString_29+0x8
   \   00000198   0xA810             ADD      R0,SP,#+64
   \   0000019A   0x.... 0x....      BL       sprintf
    201                        strcat( (char *)tempBffr2, (char *)RSFFTBins.dumpStr );
   \   0000019E   0xA9A0             ADD      R1,SP,#+640
   \   000001A0   0xA810             ADD      R0,SP,#+64
   \   000001A2   0x.... 0x....      BL       strcat
    202                        strcat( (char *)tempBffr2, "\r\n" );
   \   000001A6   0xA1A0             ADR.N    R1,??RoadBrd_ParseString_27  ;; 0x0D, 0x0A, 0x00, 0x00
   \   000001A8   0xA810             ADD      R0,SP,#+64
   \   000001AA   0x.... 0x....      BL       strcat
    203                        break;
   \   000001AE   0xF002 0xBA02      B.W      ??RoadBrd_ParseString_25
    204          //**************************************************************************************************
    205                      case '4':
    206                        // Rd_Sound FFT Measurements 48-63. 
    207                        Status = RoadBrdSnd_DumpBin48( &RSFFTBins );
   \                     ??RoadBrd_ParseString_9: (+1)
   \   000001B2   0xA8A0             ADD      R0,SP,#+640
   \   000001B4   0x.... 0x....      BL       RoadBrdSnd_DumpBin48
   \   000001B8   0x0005             MOVS     R5,R0
    208                        strcpy( (char *)tempBffr2, "Road Sound: FFT Measurements 48-63.\r\n");
   \   000001BA   0xF8DF 0x1E04      LDR.W    R1,??RoadBrd_ParseString_31
   \   000001BE   0xA810             ADD      R0,SP,#+64
   \   000001C0   0x.... 0x....      BL       strcpy
    209          #ifdef NUCLEO
    210                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    211          #else
    212                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000001C4   0xA910             ADD      R1,SP,#+64
   \   000001C6   0x2000             MOVS     R0,#+0
   \   000001C8   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000001CC   0x0005             MOVS     R5,R0
    213          #endif
    214                        if (Status != HAL_OK)
   \   000001CE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000001D0   0x2D00             CMP      R5,#+0
   \   000001D2   0xD003             BEQ.N    ??RoadBrd_ParseString_32
    215                          return Status;
   \   000001D4   0x0028             MOVS     R0,R5
   \   000001D6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001D8   0xF002 0xBA65      B.W      ??RoadBrd_ParseString_4
    216                        // NOW, Build Data String..
    217                        sprintf( (char *)tempBffr2, "     FFT Measurements 48-63: " );
   \                     ??RoadBrd_ParseString_32: (+1)
   \   000001DC   0xF8DF 0x1DE4      LDR.W    R1,??RoadBrd_ParseString_31+0x4
   \   000001E0   0xA810             ADD      R0,SP,#+64
   \   000001E2   0x.... 0x....      BL       sprintf
    218                        strcat( (char *)tempBffr2, (char *)RSFFTBins.dumpStr );
   \   000001E6   0xA9A0             ADD      R1,SP,#+640
   \   000001E8   0xA810             ADD      R0,SP,#+64
   \   000001EA   0x.... 0x....      BL       strcat
    219                        strcat( (char *)tempBffr2, "\r\n" );
   \   000001EE   0xA18E             ADR.N    R1,??RoadBrd_ParseString_27  ;; 0x0D, 0x0A, 0x00, 0x00
   \   000001F0   0xA810             ADD      R0,SP,#+64
   \   000001F2   0x.... 0x....      BL       strcat
    220                       break;
   \   000001F6   0xF002 0xB9DE      B.W      ??RoadBrd_ParseString_25
    221          //**************************************************************************************************
    222                      case '5':
    223                        // dump results of save Buffer. BufferPntr
    224                        BufferPntr = RoadBrdSnd_getSaveBffr();
   \                     ??RoadBrd_ParseString_10: (+1)
   \   000001FA   0x.... 0x....      BL       RoadBrdSnd_getSaveBffr
   \   000001FE   0x9048             STR      R0,[SP, #+288]
    225                        strcpy( (char *)tempBffr2, "Road Sound: Results of save Buffer.\r\n");
   \   00000200   0xF8DF 0x1DC4      LDR.W    R1,??RoadBrd_ParseString_31+0x8
   \   00000204   0xA810             ADD      R0,SP,#+64
   \   00000206   0x.... 0x....      BL       strcpy
    226                        Status = RoadBrdSnd_DumpBin0( &RSFFTBins );
   \   0000020A   0xA8A0             ADD      R0,SP,#+640
   \   0000020C   0x.... 0x....      BL       RoadBrdSnd_DumpBin0
   \   00000210   0x0005             MOVS     R5,R0
    227          #ifdef NUCLEO
    228                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    229          #else
    230                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000212   0xA910             ADD      R1,SP,#+64
   \   00000214   0x2000             MOVS     R0,#+0
   \   00000216   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000021A   0x0005             MOVS     R5,R0
    231          #endif
    232                        if (Status != HAL_OK)
   \   0000021C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000021E   0x2D00             CMP      R5,#+0
   \   00000220   0xD003             BEQ.N    ??RoadBrd_ParseString_33
    233                          return Status;
   \   00000222   0x0028             MOVS     R0,R5
   \   00000224   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000226   0xF002 0xBA3E      B.W      ??RoadBrd_ParseString_4
    234                        // NOW, Build Data String..
    235                        y=0;
   \                     ??RoadBrd_ParseString_33: (+1)
   \   0000022A   0x2000             MOVS     R0,#+0
   \   0000022C   0x0007             MOVS     R7,R0
    236                        sprintf( (char *)tempBffr2, "" );
   \   0000022E   0xA1AD             ADR.N    R1,??RoadBrd_ParseString_34  ;; ""
   \   00000230   0xA810             ADD      R0,SP,#+64
   \   00000232   0x.... 0x....      BL       sprintf
    237                        for (x=0; x<FFT_BUFFER_SIZE; x++)
   \   00000236   0x2000             MOVS     R0,#+0
   \   00000238   0x0006             MOVS     R6,R0
   \                     ??RoadBrd_ParseString_35: (+1)
   \   0000023A   0x2E80             CMP      R6,#+128
   \   0000023C   0xDA25             BGE.N    ??RoadBrd_ParseString_36
    238                        {
    239          //                sprintf( (char *)tempBffr3, "%02x ", BufferPntr[x]);
    240                          sprintf( (char *)tempBffr3, "%04d ", BufferPntr[x]);
   \   0000023E   0x9848             LDR      R0,[SP, #+288]
   \   00000240   0x5782             LDRSB    R2,[R0, R6]
   \   00000242   0xF8DF 0x1DD8      LDR.W    R1,??RoadBrd_ParseString_37
   \   00000246   0xA80C             ADD      R0,SP,#+48
   \   00000248   0x.... 0x....      BL       sprintf
    241                          strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   0000024C   0xA90C             ADD      R1,SP,#+48
   \   0000024E   0xA810             ADD      R0,SP,#+64
   \   00000250   0x.... 0x....      BL       strcat
    242                          y++;
   \   00000254   0x1C7F             ADDS     R7,R7,#+1
    243                          if (y>=16)
   \   00000256   0x2F10             CMP      R7,#+16
   \   00000258   0xDB15             BLT.N    ??RoadBrd_ParseString_38
    244                          {
    245                            strcat( (char *)tempBffr2, "\r\n" );
   \   0000025A   0xA173             ADR.N    R1,??RoadBrd_ParseString_27  ;; 0x0D, 0x0A, 0x00, 0x00
   \   0000025C   0xA810             ADD      R0,SP,#+64
   \   0000025E   0x.... 0x....      BL       strcat
    246                            y=0;
   \   00000262   0x2000             MOVS     R0,#+0
   \   00000264   0x0007             MOVS     R7,R0
    247           #ifdef NUCLEO
    248                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    249          #else
    250                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000266   0xA910             ADD      R1,SP,#+64
   \   00000268   0x2000             MOVS     R0,#+0
   \   0000026A   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000026E   0x0005             MOVS     R5,R0
    251          #endif
    252                            if (Status != HAL_OK)
   \   00000270   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000272   0x2D00             CMP      R5,#+0
   \   00000274   0xD003             BEQ.N    ??RoadBrd_ParseString_39
    253                              return Status;
   \   00000276   0x0028             MOVS     R0,R5
   \   00000278   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000027A   0xF002 0xBA14      B.W      ??RoadBrd_ParseString_4
    254                            sprintf( (char *)tempBffr2, "" );
   \                     ??RoadBrd_ParseString_39: (+1)
   \   0000027E   0xA199             ADR.N    R1,??RoadBrd_ParseString_34  ;; ""
   \   00000280   0xA810             ADD      R0,SP,#+64
   \   00000282   0x.... 0x....      BL       sprintf
    255                          }
    256                        }
   \                     ??RoadBrd_ParseString_38: (+1)
   \   00000286   0x1C76             ADDS     R6,R6,#+1
   \   00000288   0xE7D7             B.N      ??RoadBrd_ParseString_35
    257                        sprintf( (char *)tempBffr2, "     ---COMPLETE---" );
   \                     ??RoadBrd_ParseString_36: (+1)
   \   0000028A   0xF8DF 0x1D94      LDR.W    R1,??RoadBrd_ParseString_37+0x4
   \   0000028E   0xA810             ADD      R0,SP,#+64
   \   00000290   0x.... 0x....      BL       sprintf
    258                        break;
   \   00000294   0xF002 0xB98F      B.W      ??RoadBrd_ParseString_25
    259          //**************************************************************************************************
    260                      case '6':
    261                        // Clear all buffers. 
    262                        Status = HAL_OK;
   \                     ??RoadBrd_ParseString_11: (+1)
   \   00000298   0x2000             MOVS     R0,#+0
   \   0000029A   0x0005             MOVS     R5,R0
    263                        RoadBrdSnd_ClrBffrs();
   \   0000029C   0x.... 0x....      BL       RoadBrdSnd_ClrBffrs
    264                        strcpy( (char *)tempBffr2, "Road Sound: All buffers cleared.\r\n");;
   \   000002A0   0xF8DF 0x1D84      LDR.W    R1,??RoadBrd_ParseString_37+0xC
   \   000002A4   0xA810             ADD      R0,SP,#+64
   \   000002A6   0x.... 0x....      BL       strcpy
    265                        break;
   \   000002AA   0xF002 0xB984      B.W      ??RoadBrd_ParseString_25
    266          //**************************************************************************************************
    267                      case 'A':
    268                        // Barometer. 
    269                        if (Size == 1)
   \                     ??RoadBrd_ParseString_12: (+1)
   \   000002AE   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000002B2   0xF1B8 0x0F01      CMP      R8,#+1
   \   000002B6   0xF000 0x811C      BEQ.W    ??RoadBrd_ParseString_40
    270                        {
    271          //------------------ A Command...Read Pressure...PRESS_OUT_XL...PRESS_OUT_L...PRESS_OUT_H     
    272                        }
    273                        else
    274                        {
    275                          switch( tempBffr[1] )
   \   000002BA   0x7860             LDRB     R0,[R4, #+1]
   \   000002BC   0x2836             CMP      R0,#+54
   \   000002BE   0xD02B             BEQ.N    ??RoadBrd_ParseString_41
   \   000002C0   0x2838             CMP      R0,#+56
   \   000002C2   0xF000 0x8099      BEQ.W    ??RoadBrd_ParseString_42
   \   000002C6   0x2839             CMP      R0,#+57
   \   000002C8   0xF000 0x80F7      BEQ.W    ??RoadBrd_ParseString_43
   \   000002CC   0x2849             CMP      R0,#+73
   \   000002CE   0xF040 0x810B      BNE.W    ??RoadBrd_ParseString_44
    276                          {
    277          //------------------ AI Command...Initialize Barometer Sensor     
    278                            case 'I':
    279                              // Clean out old pressure.
    280          //                    Status = RoadBrd_Baro_ReadPressure( &PRPMeasure );
    281                              // Clean out old Temp data.
    282          //                    Status = RoadBrd_Baro_ReadTemp( i2cData );
    283                              //************ Wait 50msec.
    284          //                    RoadBrd_Delay(500);  
    285                   
    286                              Status = RoadBrd_Init_Barometer();
   \                     ??RoadBrd_ParseString_45: (+1)
   \   000002D2   0x.... 0x....      BL       RoadBrd_Init_Barometer
   \   000002D6   0x0005             MOVS     R5,R0
    287                              if (Status == HAL_OK)
   \   000002D8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000002DA   0x2D00             CMP      R5,#+0
   \   000002DC   0xD105             BNE.N    ??RoadBrd_ParseString_46
    288                              {
    289                                  strcpy( (char *)tempBffr2, "Initialize Barometer Sensor Passed.\r\n");;
   \   000002DE   0xF8DF 0x1D4C      LDR.W    R1,??RoadBrd_ParseString_37+0x10
   \   000002E2   0xA810             ADD      R0,SP,#+64
   \   000002E4   0x.... 0x....      BL       strcpy
   \   000002E8   0xE015             B.N      ??RoadBrd_ParseString_47
    290                              }
    291                              else
    292                              {
    293                                  strcpy( (char *)tempBffr2, "Initialize Barometer Sensor FAILED.\r\n");
   \                     ??RoadBrd_ParseString_46: (+1)
   \   000002EA   0xF8DF 0x1E14      LDR.W    R1,??RoadBrd_ParseString_48
   \   000002EE   0xA810             ADD      R0,SP,#+64
   \   000002F0   0x.... 0x....      BL       strcpy
    294                                  Save_Status = Status;
   \   000002F4   0xF88D 0x503C      STRB     R5,[SP, #+60]
    295          #ifdef NUCLEO
    296                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    297          #else
    298                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000002F8   0xA910             ADD      R1,SP,#+64
   \   000002FA   0x2000             MOVS     R0,#+0
   \   000002FC   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000300   0x0005             MOVS     R5,R0
    299          #endif
    300                                  if (Status != HAL_OK)
   \   00000302   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000304   0x2D00             CMP      R5,#+0
   \   00000306   0xD003             BEQ.N    ??RoadBrd_ParseString_49
    301                                    return Status;
   \   00000308   0x0028             MOVS     R0,R5
   \   0000030A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000030C   0xF002 0xB9CB      B.W      ??RoadBrd_ParseString_4
    302                                  else
    303                                    Status = Save_Status;
   \                     ??RoadBrd_ParseString_49: (+1)
   \   00000310   0xF89D 0x003C      LDRB     R0,[SP, #+60]
   \   00000314   0x0005             MOVS     R5,R0
    304                              }
    305                              break;
   \                     ??RoadBrd_ParseString_47: (+1)
   \   00000316   0xE0EC             B.N      ??RoadBrd_ParseString_40
    306          //------------------ A0 Command...Enable Barometer     
    307          #if 0                  
    308                          case '0':
    309                              Status = RoadBrd_Enable_Barometer();
    310                              if (Status == HAL_OK)
    311                              {
    312                                  strcpy( (char *)tempBffr2, "Barometer Sensor: Enable Barometer Passed.\r\n");;
    313                              }
    314                              else
    315                              {
    316                                  strcpy( (char *)tempBffr2, "Barometer Sensor: Enable Barometer FAILED.\r\n");;
    317                              }
    318                              break;
    319          //------------------ A1 Command...Disable Barometer     
    320                            case '1':
    321                              Status = RoadBrd_Disable_Barometer();
    322                              if (Status == HAL_OK)
    323                              {
    324                                  strcpy( (char *)tempBffr2, "Barometer Sensor: Disable Barometer Passed.\r\n");;
    325                              }
    326                              else
    327                              {
    328                                  strcpy( (char *)tempBffr2, "Barometer Sensor: Disable Barometer FAILED.\r\n");;
    329                                  Save_Status = Status;
    330          #ifdef NUCLEO
    331                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    332          #else
    333                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
    334          #endif
    335                                  if (Status != HAL_OK)
    336                                    return Status;
    337                                  else
    338                                    Status = Save_Status;
    339                              }
    340                              break;
    341          //------------------ A2 Command...Start the Barometer but do not wait.     
    342                            case '2':
    343                              Status = RoadBrd_StartSample_Barometer();
    344                              if (Status == HAL_OK)
    345                              {
    346                                  strcpy( (char *)tempBffr2, "Start the Barometer but do not wait Passed.\r\n");;
    347                              }
    348                              else
    349                              {
    350                                  strcpy( (char *)tempBffr2, "Start the Barometer but do not wait FAILED.\r\n");;
    351                                  Save_Status = Status;
    352          #ifdef NUCLEO
    353                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    354          #else
    355                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
    356          #endif
    357                                  if (Status != HAL_OK)
    358                                    return Status;
    359                                  else
    360                                    Status = Save_Status;
    361                              }
    362                              break;
    363          //------------------ A3 Command...Start the Barometer and wait for response.    
    364                            case '3':
    365                              Status = RoadBrd_StartSample_BarometerWait();
    366                              if (Status == HAL_OK)
    367                              {
    368                                  strcpy( (char *)tempBffr2, "Start the Barometer and wait for response Passed.\r\n");;
    369                              }
    370                              else
    371                              {
    372                                  strcpy( (char *)tempBffr2, "Start the Barometer and wait for response FAILED.\r\n");;
    373                                  Save_Status = Status;
    374          #ifdef NUCLEO
    375                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    376          #else
    377                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
    378          #endif
    379                                  if (Status != HAL_OK)
    380                                    return Status;
    381                                  else
    382                                    Status = Save_Status;
    383                              }
    384                              break;
    385          //------------------ A4 Command...Return Status    
    386                            case '4':
    387                              Status = RoadBrd_Barometer_Status( &PRMeasure );
    388                              if (Status == HAL_OK)
    389                              {
    390                                sprintf( (char *)tempBffr2, "Barometer Sensor Status: %02x / ", PRMeasure.Status );
    391                                strcat( (char *)tempBffr2, (char *)PRMeasure.Raw );
    392                                strcat( (char *)tempBffr2, "\r\n" );
    393                              }
    394                              break;
    395          //------------------ A5 Command...Wait for Pressure to be complete. 
    396                            case '5':
    397                              Status = RoadBrd_WaitForPressure( (uint16_t)BARO_WAITCNT );
    398                              if (Status == HAL_OK)
    399                              {
    400                                  strcpy( (char *)tempBffr2, "Wait for Pressure to be complete Passed.\r\n");;
    401                              }
    402                              else
    403                              {
    404                                  strcpy( (char *)tempBffr2, "Wait for Pressure to be complete FAILED.\r\n");;
    405                                  Save_Status = Status;
    406          #ifdef NUCLEO
    407                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    408          #else
    409                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
    410          #endif
    411                                  if (Status != HAL_OK)
    412                                    return Status;
    413                                  else
    414                                    Status = Save_Status;
    415                              }
    416                              break;
    417          #endif
    418          //------------------ A6 Command...Read Pressure...PRESS_OUT_XL...PRESS_OUT_L...PRESS_OUT_H     
    419                            case '6':
    420                              //Status = RoadBrd_Barometer_Status( &PRMeasure );
    421                              Status = RoadBrd_Baro_ReadPressure( &PRPMeasure );
   \                     ??RoadBrd_ParseString_41: (+1)
   \   00000318   0xA8A9             ADD      R0,SP,#+676
   \   0000031A   0x.... 0x....      BL       RoadBrd_Baro_ReadPressure
   \   0000031E   0x0005             MOVS     R5,R0
    422                              if (Status == HAL_OK)
   \   00000320   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000322   0x2D00             CMP      R5,#+0
   \   00000324   0xD104             BNE.N    ??RoadBrd_ParseString_50
    423                                Status = RoadBrd_Baro_ReadPressure_Scaled( &PRPMeasureScaled );
   \   00000326   0xA8FF             ADD      R0,SP,#+1020
   \   00000328   0x3030             ADDS     R0,R0,#+48
   \   0000032A   0x.... 0x....      BL       RoadBrd_Baro_ReadPressure_Scaled
   \   0000032E   0x0005             MOVS     R5,R0
    424                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_50: (+1)
   \   00000330   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000332   0x2D00             CMP      R5,#+0
   \   00000334   0xD149             BNE.N    ??RoadBrd_ParseString_51
    425                              {
    426                                strcpy( (char *)tempBffr2, "A6 Command...Read Pressure Passed.\r\n");;
   \   00000336   0xF8DF 0x1DCC      LDR.W    R1,??RoadBrd_ParseString_48+0x4
   \   0000033A   0xA810             ADD      R0,SP,#+64
   \   0000033C   0x.... 0x....      BL       strcpy
    427          #ifdef NUCLEO
    428                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    429          #else
    430                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000340   0xA910             ADD      R1,SP,#+64
   \   00000342   0x2000             MOVS     R0,#+0
   \   00000344   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000348   0x0005             MOVS     R5,R0
    431          #endif
    432                                if (Status != HAL_OK)
   \   0000034A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000034C   0x2D00             CMP      R5,#+0
   \   0000034E   0xD003             BEQ.N    ??RoadBrd_ParseString_52
    433                                  return Status;
   \   00000350   0x0028             MOVS     R0,R5
   \   00000352   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000354   0xF002 0xB9A7      B.W      ??RoadBrd_ParseString_4
    434                                // NOW, Build Data String..
    435                                sprintf( (char *)tempBffr2, " PRESSURE(PRESS_OUT_H...PRESS_OUT_L...PRESS_OUT_XL)\r\n" );
   \                     ??RoadBrd_ParseString_52: (+1)
   \   00000358   0xF8DF 0x1E0C      LDR.W    R1,??RoadBrd_ParseString_53
   \   0000035C   0xA810             ADD      R0,SP,#+64
   \   0000035E   0x.... 0x....      BL       sprintf
    436          #ifdef NUCLEO
    437                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    438          #else
    439                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000362   0xA910             ADD      R1,SP,#+64
   \   00000364   0x2000             MOVS     R0,#+0
   \   00000366   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000036A   0x0005             MOVS     R5,R0
    440          #endif
    441                                if (Status != HAL_OK)
   \   0000036C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000036E   0x2D00             CMP      R5,#+0
   \   00000370   0xD003             BEQ.N    ??RoadBrd_ParseString_54
    442                                  return Status;
   \   00000372   0x0028             MOVS     R0,R5
   \   00000374   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000376   0xF002 0xB996      B.W      ??RoadBrd_ParseString_4
    443                               
    444                                // Now show Decimal value of items.
    445                                sprintf( (char *)tempBffr2, " PRESSURE: %s/%s\r\n", (char *)PRPMeasure.Pressure, (char *)PRPMeasureScaled.Pressure );
   \                     ??RoadBrd_ParseString_54: (+1)
   \   0000037A   0xABFF             ADD      R3,SP,#+1020
   \   0000037C   0x3330             ADDS     R3,R3,#+48
   \   0000037E   0xAAA9             ADD      R2,SP,#+676
   \   00000380   0xF8DF 0x1DE8      LDR.W    R1,??RoadBrd_ParseString_53+0x4
   \   00000384   0xA810             ADD      R0,SP,#+64
   \   00000386   0x.... 0x....      BL       sprintf
    446          #ifdef NUCLEO
    447                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    448          #else
    449                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000038A   0xA910             ADD      R1,SP,#+64
   \   0000038C   0x2000             MOVS     R0,#+0
   \   0000038E   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000392   0x0005             MOVS     R5,R0
    450          #endif
    451                                if (Status != HAL_OK)
   \   00000394   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000396   0x2D00             CMP      R5,#+0
   \   00000398   0xD003             BEQ.N    ??RoadBrd_ParseString_55
    452                                  return Status;
   \   0000039A   0x0028             MOVS     R0,R5
   \   0000039C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000039E   0xF002 0xB982      B.W      ??RoadBrd_ParseString_4
    453                                // Now show hex value of items.
    454                                sprintf( (char *)tempBffr2, " PRESSURE:  " );
   \                     ??RoadBrd_ParseString_55: (+1)
   \   000003A2   0xF8DF 0x1DCC      LDR.W    R1,??RoadBrd_ParseString_53+0x8
   \   000003A6   0xA810             ADD      R0,SP,#+64
   \   000003A8   0x.... 0x....      BL       sprintf
    455                                strcat( (char *)tempBffr2, (char *)PRPMeasure.Raw );
   \   000003AC   0xA9AC             ADD      R1,SP,#+688
   \   000003AE   0xA810             ADD      R0,SP,#+64
   \   000003B0   0x.... 0x....      BL       strcat
    456                                sprintf( (char *)tempBffr3, "  -  %08x\r\n", PRPMeasure.RawC);
   \   000003B4   0x9AAF             LDR      R2,[SP, #+700]
   \   000003B6   0xF8DF 0x1DBC      LDR.W    R1,??RoadBrd_ParseString_53+0xC
   \   000003BA   0xA80C             ADD      R0,SP,#+48
   \   000003BC   0x.... 0x....      BL       sprintf
    457                                strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   000003C0   0xA90C             ADD      R1,SP,#+48
   \   000003C2   0xA810             ADD      R0,SP,#+64
   \   000003C4   0x.... 0x....      BL       strcat
   \   000003C8   0xE015             B.N      ??RoadBrd_ParseString_56
    458                              }
    459                              else
    460                              {
    461                                  strcpy( (char *)tempBffr2, "A6 Command...Read Pressure FAILED.\r\n");;
   \                     ??RoadBrd_ParseString_51: (+1)
   \   000003CA   0xF8DF 0x1DAC      LDR.W    R1,??RoadBrd_ParseString_53+0x10
   \   000003CE   0xA810             ADD      R0,SP,#+64
   \   000003D0   0x.... 0x....      BL       strcpy
    462                                  Save_Status = Status;
   \   000003D4   0xF88D 0x503C      STRB     R5,[SP, #+60]
    463          #ifdef NUCLEO
    464                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    465          #else
    466                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000003D8   0xA910             ADD      R1,SP,#+64
   \   000003DA   0x2000             MOVS     R0,#+0
   \   000003DC   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000003E0   0x0005             MOVS     R5,R0
    467          #endif
    468                                  if (Status != HAL_OK)
   \   000003E2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000003E4   0x2D00             CMP      R5,#+0
   \   000003E6   0xD003             BEQ.N    ??RoadBrd_ParseString_57
    469                                    return Status;
   \   000003E8   0x0028             MOVS     R0,R5
   \   000003EA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000003EC   0xF002 0xB95B      B.W      ??RoadBrd_ParseString_4
    470                                  else
    471                                    Status = Save_Status;
   \                     ??RoadBrd_ParseString_57: (+1)
   \   000003F0   0xF89D 0x003C      LDRB     R0,[SP, #+60]
   \   000003F4   0x0005             MOVS     R5,R0
    472                              }
    473                              break;
   \                     ??RoadBrd_ParseString_56: (+1)
   \   000003F6   0xE07C             B.N      ??RoadBrd_ParseString_40
    474          
    475          //------------------ A8 Command...Read Temperature....TEMP_OUT_L...TEMP_OUT_H    
    476                            case '8':
    477                              Status = RoadBrd_Baro_ReadTemp( &TMeasure );
   \                     ??RoadBrd_ParseString_42: (+1)
   \   000003F8   0xA838             ADD      R0,SP,#+224
   \   000003FA   0x.... 0x....      BL       RoadBrd_Baro_ReadTemp
   \   000003FE   0x0005             MOVS     R5,R0
    478                              if (Status == HAL_OK)
   \   00000400   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000402   0x2D00             CMP      R5,#+0
   \   00000404   0xD129             BNE.N    ??RoadBrd_ParseString_58
    479                              {
    480                                // Send string to UART..
    481                                strcpy( (char *)tempBffr2, "A8 Command...Read Temperature Passed.\r\n");
   \   00000406   0xF8DF 0x1E04      LDR.W    R1,??RoadBrd_ParseString_59
   \   0000040A   0xA810             ADD      R0,SP,#+64
   \   0000040C   0x.... 0x....      BL       strcpy
    482          #ifdef NUCLEO
    483                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    484          #else
    485                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000410   0xA910             ADD      R1,SP,#+64
   \   00000412   0x2000             MOVS     R0,#+0
   \   00000414   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000418   0x0005             MOVS     R5,R0
    486          #endif
    487                                if (Status != HAL_OK)
   \   0000041A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000041C   0x2D00             CMP      R5,#+0
   \   0000041E   0xD005             BEQ.N    ??RoadBrd_ParseString_60
    488                                  return Status;
   \   00000420   0x0028             MOVS     R0,R5
   \   00000422   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000424   0xF002 0xB93F      B.W      ??RoadBrd_ParseString_4
   \                     ??RoadBrd_ParseString_27:
   \   00000428   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
    489                                // NOW, Build Data String..
    490                                sprintf( (char *)tempBffr2, "     TEMP DATA: " );
   \                     ??RoadBrd_ParseString_60: (+1)
   \   0000042C   0xF8DF 0x1DE0      LDR.W    R1,??RoadBrd_ParseString_59+0x4
   \   00000430   0xA810             ADD      R0,SP,#+64
   \   00000432   0x.... 0x....      BL       sprintf
    491                                strcat( (char *)tempBffr2, (char *)TMeasure.Raw );
   \   00000436   0xF10D 0x01EE      ADD      R1,SP,#+238
   \   0000043A   0xA810             ADD      R0,SP,#+64
   \   0000043C   0x.... 0x....      BL       strcat
    492                                strcat( (char *)tempBffr2, "\r\n" );
   \   00000440   0xA1CD             ADR.N    R1,??RoadBrd_ParseString_61  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000442   0xA810             ADD      R0,SP,#+64
   \   00000444   0x.... 0x....      BL       strcat
    493                              }
    494                              else
    495                                break;
    496          #ifdef NUCLEO
    497                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    498          #else
    499                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000448   0xA910             ADD      R1,SP,#+64
   \   0000044A   0x2000             MOVS     R0,#+0
   \   0000044C   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000450   0x0005             MOVS     R5,R0
    500          #endif
    501                              if (Status != HAL_OK)
   \   00000452   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000454   0x2D00             CMP      R5,#+0
   \   00000456   0xD101             BNE.N    ??RoadBrd_ParseString_62
   \   00000458   0xE004             B.N      ??RoadBrd_ParseString_63
   \                     ??RoadBrd_ParseString_58: (+1)
   \   0000045A   0xE04A             B.N      ??RoadBrd_ParseString_40
    502                                return Status;
   \                     ??RoadBrd_ParseString_62: (+1)
   \   0000045C   0x0028             MOVS     R0,R5
   \   0000045E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000460   0xF002 0xB921      B.W      ??RoadBrd_ParseString_4
    503                              // NOW, Build Data String..
    504                              sprintf( (char *)tempBffr2, "     TEMP DATA(Decimal): %d\r\n", TMeasure.RawC );
   \                     ??RoadBrd_ParseString_63: (+1)
   \   00000464   0xF8BD 0x20F6      LDRH     R2,[SP, #+246]
   \   00000468   0xF8DF 0x1DEC      LDR.W    R1,??RoadBrd_ParseString_64
   \   0000046C   0xA810             ADD      R0,SP,#+64
   \   0000046E   0x.... 0x....      BL       sprintf
    505          #ifdef NUCLEO
    506                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    507          #else
    508                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000472   0xA910             ADD      R1,SP,#+64
   \   00000474   0x2000             MOVS     R0,#+0
   \   00000476   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000047A   0x0005             MOVS     R5,R0
    509          #endif
    510                              if (Status != HAL_OK)
   \   0000047C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000047E   0x2D00             CMP      R5,#+0
   \   00000480   0xD003             BEQ.N    ??RoadBrd_ParseString_65
    511                                return Status;
   \   00000482   0x0028             MOVS     R0,R5
   \   00000484   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000486   0xF002 0xB90E      B.W      ??RoadBrd_ParseString_4
    512                              // Now calculate Celcius and Farenheit Temp.
    513                              sprintf( (char *)tempBffr2, "     TempC: " );
   \                     ??RoadBrd_ParseString_65: (+1)
   \   0000048A   0xF8DF 0x1DD0      LDR.W    R1,??RoadBrd_ParseString_64+0x4
   \   0000048E   0xA810             ADD      R0,SP,#+64
   \   00000490   0x.... 0x....      BL       sprintf
    514                              strcat( (char *)tempBffr2, (char *)TMeasure.TempC );
   \   00000494   0xA938             ADD      R1,SP,#+224
   \   00000496   0xA810             ADD      R0,SP,#+64
   \   00000498   0x.... 0x....      BL       strcat
    515                              strcat( (char *)tempBffr2, "     TempF: " );
   \   0000049C   0xF8DF 0x1DC0      LDR.W    R1,??RoadBrd_ParseString_64+0x8
   \   000004A0   0xA810             ADD      R0,SP,#+64
   \   000004A2   0x.... 0x....      BL       strcat
    516                              strcat( (char *)tempBffr2, (char *)TMeasure.TempF );
   \   000004A6   0xF10D 0x01E7      ADD      R1,SP,#+231
   \   000004AA   0xA810             ADD      R0,SP,#+64
   \   000004AC   0x.... 0x....      BL       strcat
    517                              strcat( (char *)tempBffr2, "\r\n" );
   \   000004B0   0xA1B1             ADR.N    R1,??RoadBrd_ParseString_61  ;; 0x0D, 0x0A, 0x00, 0x00
   \   000004B2   0xA810             ADD      R0,SP,#+64
   \   000004B4   0x.... 0x....      BL       strcat
    518          /*                    if (Status == HAL_OK)
    519                              {
    520                                strcpy( (char *)tempBffr2, "A8 Command...Read Temperature Passed.\r\n");;
    521          #ifdef NUCLEO
    522                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    523          #else
    524                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
    525          #endif
    526                                if (Status != HAL_OK)
    527                                  return Status;
    528                                // NOW, Build Data String..
    529                                sprintf( (char *)tempBffr2, " Temperature(TEMP_OUT_L...TEMP_OUT_H)\r\n" );
    530          #ifdef NUCLEO
    531                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    532          #else
    533                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
    534          #endif
    535                                if (Status != HAL_OK)
    536                                  return Status;
    537                                sprintf( (char *)tempBffr2, " Temperature:  %02x   %02x\r\n", i2cData[0], i2cData[1] );
    538                              }
    539                              else
    540                              {
    541                                  strcpy( (char *)tempBffr2, "A8 Command...Read Temperature FAILED.\r\n");;
    542                                  Save_Status = Status;
    543          #ifdef NUCLEO
    544                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    545          #else
    546                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
    547          #endif
    548                                  if (Status != HAL_OK)
    549                                    return Status;
    550                                  else
    551                                    Status = Save_Status;
    552                              }*/
    553                              break;
   \   000004B8   0xE01B             B.N      ??RoadBrd_ParseString_40
    554          //------------------ A9 Command...Test and Verify WHO_AM_I     
    555                            case '9':
    556                              Status = RoadBrd_TestandRead_Barometer();
   \                     ??RoadBrd_ParseString_43: (+1)
   \   000004BA   0x.... 0x....      BL       RoadBrd_TestandRead_Barometer
   \   000004BE   0x0005             MOVS     R5,R0
    557                              if (Status == HAL_OK)
   \   000004C0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000004C2   0x2D00             CMP      R5,#+0
   \   000004C4   0xD105             BNE.N    ??RoadBrd_ParseString_66
    558                              {
    559                                  strcpy( (char *)tempBffr2, "Barometer Sensor: WHO_AM_I Passed.\r\n");
   \   000004C6   0xF8DF 0x1DE4      LDR.W    R1,??RoadBrd_ParseString_67
   \   000004CA   0xA810             ADD      R0,SP,#+64
   \   000004CC   0x.... 0x....      BL       strcpy
   \   000004D0   0xE006             B.N      ??RoadBrd_ParseString_68
    560                              }
    561                              else
    562                              {
    563                                  strcpy( (char *)tempBffr2, "Barometer Sensor: WHO_AM_I FAILED.\r\n");
   \                     ??RoadBrd_ParseString_66: (+1)
   \   000004D2   0xF8DF 0x1DDC      LDR.W    R1,??RoadBrd_ParseString_67+0x4
   \   000004D6   0xA810             ADD      R0,SP,#+64
   \   000004D8   0x.... 0x....      BL       strcpy
    564                                  Status = HAL_OK;
   \   000004DC   0x2000             MOVS     R0,#+0
   \   000004DE   0x0005             MOVS     R5,R0
    565                              }
    566                              break;
   \                     ??RoadBrd_ParseString_68: (+1)
   \   000004E0   0xE007             B.N      ??RoadBrd_ParseString_40
   \   000004E2   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_34:
   \   000004E4   0x00 0x00          DC8      "",0x0,0x0,0x0
   \              0x00 0x00    
    567                            default:
    568                              strcpy( (char *)tempBffr2, "ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_44: (+1)
   \   000004E8   0xF8DF 0x1DC8      LDR.W    R1,??RoadBrd_ParseString_67+0x8
   \   000004EC   0xA810             ADD      R0,SP,#+64
   \   000004EE   0x.... 0x....      BL       strcpy
    569                              break;
    570                          } //EndSwitch
    571                        } //EndElse (Size == 1)
    572                        break;
   \                     ??RoadBrd_ParseString_40: (+1)
   \   000004F2   0xF002 0xB860      B.W      ??RoadBrd_ParseString_25
    573          //**************************************************************************************************
    574                      case 'B':
    575                        // Read Cool Eye. 
    576          //++++++++++++++++++++++++++++++++++++++++++  Cool Eye/Grid Eye Monitor Commands.
    577                        if (Size == 1)
   \                     ??RoadBrd_ParseString_13: (+1)
   \   000004F6   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000004FA   0xF1B8 0x0F01      CMP      R8,#+1
   \   000004FE   0xF040 0x8126      BNE.W    ??RoadBrd_ParseString_69
    578                        {
    579          //------------------ B Command: Read Cool Eye/Grid Eye Values      
    580                          // Read Cool Eye/Grid Eye Values.....
    581                          if ( Get_DriverStates( GRIDEYE_MNTR_TASK ))
   \   00000502   0x2005             MOVS     R0,#+5
   \   00000504   0x.... 0x....      BL       Get_DriverStates
   \   00000508   0x2800             CMP      R0,#+0
   \   0000050A   0xD00B             BEQ.N    ??RoadBrd_ParseString_70
    582                          {
    583                            Status = RoadBrd_GridEye_ReadValues( &GridMeasure );
   \   0000050C   0xA84D             ADD      R0,SP,#+308
   \   0000050E   0x.... 0x....      BL       RoadBrd_GridEye_ReadValues
   \   00000512   0x0005             MOVS     R5,R0
    584                            if (Status == HAL_OK)
   \   00000514   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000516   0x2D00             CMP      R5,#+0
   \   00000518   0xD117             BNE.N    ??RoadBrd_ParseString_71
    585                              Status = RoadBrd_GridEye_ReadValues_Scaled( &GridMeasureScaled );
   \   0000051A   0xA8C2             ADD      R0,SP,#+776
   \   0000051C   0x.... 0x....      BL       RoadBrd_GridEye_ReadValues_Scaled
   \   00000520   0x0005             MOVS     R5,R0
   \   00000522   0xE012             B.N      ??RoadBrd_ParseString_71
    586                          }
    587                          else if ( Get_DriverStates( COOLEYE_MNTR_TASK ))
   \                     ??RoadBrd_ParseString_70: (+1)
   \   00000524   0x2006             MOVS     R0,#+6
   \   00000526   0x.... 0x....      BL       Get_DriverStates
   \   0000052A   0x2800             CMP      R0,#+0
   \   0000052C   0xD00B             BEQ.N    ??RoadBrd_ParseString_72
    588                          {
    589                            Status = RoadBrd_CoolEye_ReadValues( &GridMeasure );
   \   0000052E   0xA84D             ADD      R0,SP,#+308
   \   00000530   0x.... 0x....      BL       RoadBrd_CoolEye_ReadValues
   \   00000534   0x0005             MOVS     R5,R0
    590                            if (Status == HAL_OK)
   \   00000536   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000538   0x2D00             CMP      R5,#+0
   \   0000053A   0xD106             BNE.N    ??RoadBrd_ParseString_71
    591                              Status = RoadBrd_CoolEye_ReadValues_Scaled( &GridMeasureScaled );
   \   0000053C   0xA8C2             ADD      R0,SP,#+776
   \   0000053E   0x.... 0x....      BL       RoadBrd_CoolEye_ReadValues_Scaled
   \   00000542   0x0005             MOVS     R5,R0
   \   00000544   0xE001             B.N      ??RoadBrd_ParseString_71
    592                          }
    593                          else
    594                            Status = HAL_ERROR;
   \                     ??RoadBrd_ParseString_72: (+1)
   \   00000546   0x2001             MOVS     R0,#+1
   \   00000548   0x0005             MOVS     R5,R0
    595                          
    596                          if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_71: (+1)
   \   0000054A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000054C   0x2D00             CMP      R5,#+0
   \   0000054E   0xF040 0x80FC      BNE.W    ??RoadBrd_ParseString_73
    597                          {
    598                            // Send string to UART..
    599                            strcpy( (char *)tempBffr2, "Voltage Monitor/Shunt Voltage...\r\n");
   \   00000552   0xF8DF 0x1DEC      LDR.W    R1,??RoadBrd_ParseString_74
   \   00000556   0xA810             ADD      R0,SP,#+64
   \   00000558   0x.... 0x....      BL       strcpy
    600          #ifdef NUCLEO
    601                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    602          #else
    603                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000055C   0xA910             ADD      R1,SP,#+64
   \   0000055E   0x2000             MOVS     R0,#+0
   \   00000560   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000564   0x0005             MOVS     R5,R0
    604          #endif
    605                            if (Status != HAL_OK)
   \   00000566   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000568   0x2D00             CMP      R5,#+0
   \   0000056A   0xD003             BEQ.N    ??RoadBrd_ParseString_75
    606                              return Status;
   \   0000056C   0x0028             MOVS     R0,R5
   \   0000056E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000570   0xF002 0xB899      B.W      ??RoadBrd_ParseString_4
    607                            // NOW, Build Data String..
    608                            for (x=0; x<9; x++)
   \                     ??RoadBrd_ParseString_75: (+1)
   \   00000574   0x2000             MOVS     R0,#+0
   \   00000576   0x0006             MOVS     R6,R0
   \                     ??RoadBrd_ParseString_76: (+1)
   \   00000578   0x2E09             CMP      R6,#+9
   \   0000057A   0xF280 0x80D3      BGE.W    ??RoadBrd_ParseString_77
    609                            {
    610                              // Build String
    611                              switch(x)
   \   0000057E   0x2E00             CMP      R6,#+0
   \   00000580   0xD00F             BEQ.N    ??RoadBrd_ParseString_78
   \   00000582   0x2E02             CMP      R6,#+2
   \   00000584   0xD035             BEQ.N    ??RoadBrd_ParseString_79
   \   00000586   0xD320             BCC.N    ??RoadBrd_ParseString_80
   \   00000588   0x2E04             CMP      R6,#+4
   \   0000058A   0xD05A             BEQ.N    ??RoadBrd_ParseString_81
   \   0000058C   0xD345             BCC.N    ??RoadBrd_ParseString_82
   \   0000058E   0x2E06             CMP      R6,#+6
   \   00000590   0xF000 0x807F      BEQ.W    ??RoadBrd_ParseString_83
   \   00000594   0xD369             BCC.N    ??RoadBrd_ParseString_84
   \   00000596   0x2E08             CMP      R6,#+8
   \   00000598   0xF000 0x80A3      BEQ.W    ??RoadBrd_ParseString_85
   \   0000059C   0xF0C0 0x808D      BCC.W    ??RoadBrd_ParseString_86
   \   000005A0   0xE0B2             B.N      ??RoadBrd_ParseString_87
    612                              {
    613                                case 0: //Thermistor Values
    614                                  sprintf( (char *)tempBffr2, "     Thermistor DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.Thermistor.Raw,
    615                                                                                                         GridMeasure.Thermistor.TempC,GridMeasureScaled.Thermistor.TempC,
    616                                                                                                         GridMeasure.Thermistor.TempF,GridMeasureScaled.Thermistor.TempF,
    617                                                                                                         GridMeasure.Thermistor.RawC );
   \                     ??RoadBrd_ParseString_78: (+1)
   \   000005A2   0xF8BD 0x014A      LDRH     R0,[SP, #+330]
   \   000005A6   0x9003             STR      R0,[SP, #+12]
   \   000005A8   0xA8C3             ADD      R0,SP,#+780
   \   000005AA   0x1CC0             ADDS     R0,R0,#+3
   \   000005AC   0x9002             STR      R0,[SP, #+8]
   \   000005AE   0xA84E             ADD      R0,SP,#+312
   \   000005B0   0x1CC0             ADDS     R0,R0,#+3
   \   000005B2   0x9001             STR      R0,[SP, #+4]
   \   000005B4   0xA8C2             ADD      R0,SP,#+776
   \   000005B6   0x9000             STR      R0,[SP, #+0]
   \   000005B8   0xAB4D             ADD      R3,SP,#+308
   \   000005BA   0xF50D 0x72A1      ADD      R2,SP,#+322
   \   000005BE   0xF8DF 0x1D84      LDR.W    R1,??RoadBrd_ParseString_74+0x4
   \   000005C2   0xA810             ADD      R0,SP,#+64
   \   000005C4   0x.... 0x....      BL       sprintf
    618          //                        sprintf( (char *)tempBffr2, "     Thermistor DATA: %s   %s   %s   %d\r\n", GridMeasure.Thermistor.Raw,
    619          //                                                                                               GridMeasure.Thermistor.TempC,
    620          //                                                                                               GridMeasure.Thermistor.TempF,
    621          //                                                                                               GridMeasure.Thermistor.RawC );
    622                                  break;
   \   000005C8   0xE09E             B.N      ??RoadBrd_ParseString_87
    623                                case 1: //GridEye1 Values
    624                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye1.Raw,
    625                                                                                                         GridMeasure.GridEye1.TempC,GridMeasureScaled.GridEye1.TempC,
    626                                                                                                         GridMeasure.GridEye1.TempF,GridMeasureScaled.GridEye1.TempF,
    627                                                                                                         GridMeasure.GridEye1.RawC );
   \                     ??RoadBrd_ParseString_80: (+1)
   \   000005CA   0xF8BD 0x0162      LDRH     R0,[SP, #+354]
   \   000005CE   0x9003             STR      R0,[SP, #+12]
   \   000005D0   0xA8C9             ADD      R0,SP,#+804
   \   000005D2   0x1CC0             ADDS     R0,R0,#+3
   \   000005D4   0x9002             STR      R0,[SP, #+8]
   \   000005D6   0xA854             ADD      R0,SP,#+336
   \   000005D8   0x1CC0             ADDS     R0,R0,#+3
   \   000005DA   0x9001             STR      R0,[SP, #+4]
   \   000005DC   0xA8C8             ADD      R0,SP,#+800
   \   000005DE   0x9000             STR      R0,[SP, #+0]
   \   000005E0   0xAB53             ADD      R3,SP,#+332
   \   000005E2   0xF50D 0x72AD      ADD      R2,SP,#+346
   \   000005E6   0xF8DF 0x1DEC      LDR.W    R1,??RoadBrd_ParseString_88
   \   000005EA   0xA810             ADD      R0,SP,#+64
   \   000005EC   0x.... 0x....      BL       sprintf
    628          //                        sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye1.Raw,
    629          //                                                                                               GridMeasure.GridEye1.TempC,
    630          //                                                                                               GridMeasure.GridEye1.TempF,
    631          //                                                                                               GridMeasure.GridEye1.RawC );
    632                                  break;
   \   000005F0   0xE08A             B.N      ??RoadBrd_ParseString_87
    633                                case 2: //GridEye2 Values
    634                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye2.Raw,
    635                                                                                                         GridMeasure.GridEye2.TempC,GridMeasureScaled.GridEye2.TempC,
    636                                                                                                         GridMeasure.GridEye2.TempF,GridMeasureScaled.GridEye2.TempF,
    637                                                                                                         GridMeasure.GridEye2.RawC );
   \                     ??RoadBrd_ParseString_79: (+1)
   \   000005F2   0xF8BD 0x017A      LDRH     R0,[SP, #+378]
   \   000005F6   0x9003             STR      R0,[SP, #+12]
   \   000005F8   0xA8CF             ADD      R0,SP,#+828
   \   000005FA   0x1CC0             ADDS     R0,R0,#+3
   \   000005FC   0x9002             STR      R0,[SP, #+8]
   \   000005FE   0xA85A             ADD      R0,SP,#+360
   \   00000600   0x1CC0             ADDS     R0,R0,#+3
   \   00000602   0x9001             STR      R0,[SP, #+4]
   \   00000604   0xA8CE             ADD      R0,SP,#+824
   \   00000606   0x9000             STR      R0,[SP, #+0]
   \   00000608   0xAB59             ADD      R3,SP,#+356
   \   0000060A   0xF50D 0x72B9      ADD      R2,SP,#+370
   \   0000060E   0xF8DF 0x1DC4      LDR.W    R1,??RoadBrd_ParseString_88
   \   00000612   0xA810             ADD      R0,SP,#+64
   \   00000614   0x.... 0x....      BL       sprintf
    638          //                        sprintf( (char *)tempBffr2, "     Grid 34 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye2.Raw,
    639          //                                                                                               GridMeasure.GridEye2.TempC,
    640          //                                                                                               GridMeasure.GridEye2.TempF,
    641          //                                                                                               GridMeasure.GridEye2.RawC );
    642                                  break;
   \   00000618   0xE076             B.N      ??RoadBrd_ParseString_87
    643                                case 3: //GridEye3 Values
    644                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye3.Raw,
    645                                                                                                         GridMeasure.GridEye3.TempC,GridMeasureScaled.GridEye3.TempC,
    646                                                                                                         GridMeasure.GridEye3.TempF,GridMeasureScaled.GridEye3.TempF,
    647                                                                                                         GridMeasure.GridEye3.RawC );
   \                     ??RoadBrd_ParseString_82: (+1)
   \   0000061A   0xF8BD 0x0192      LDRH     R0,[SP, #+402]
   \   0000061E   0x9003             STR      R0,[SP, #+12]
   \   00000620   0xA8D5             ADD      R0,SP,#+852
   \   00000622   0x1CC0             ADDS     R0,R0,#+3
   \   00000624   0x9002             STR      R0,[SP, #+8]
   \   00000626   0xA860             ADD      R0,SP,#+384
   \   00000628   0x1CC0             ADDS     R0,R0,#+3
   \   0000062A   0x9001             STR      R0,[SP, #+4]
   \   0000062C   0xA8D4             ADD      R0,SP,#+848
   \   0000062E   0x9000             STR      R0,[SP, #+0]
   \   00000630   0xAB5F             ADD      R3,SP,#+380
   \   00000632   0xF50D 0x72C5      ADD      R2,SP,#+394
   \   00000636   0xF8DF 0x1D9C      LDR.W    R1,??RoadBrd_ParseString_88
   \   0000063A   0xA810             ADD      R0,SP,#+64
   \   0000063C   0x.... 0x....      BL       sprintf
    648          //                        sprintf( (char *)tempBffr2, "     Grid 35 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye3.Raw,
    649          //                                                                                               GridMeasure.GridEye3.TempC,
    650          //                                                                                               GridMeasure.GridEye3.TempF,
    651          //                                                                                               GridMeasure.GridEye3.RawC );
    652                                  break;
   \   00000640   0xE062             B.N      ??RoadBrd_ParseString_87
    653                                case 4: //GridEye4 Values
    654                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye4.Raw,
    655                                                                                                         GridMeasure.GridEye4.TempC,GridMeasureScaled.GridEye4.TempC,
    656                                                                                                         GridMeasure.GridEye4.TempF,GridMeasureScaled.GridEye4.TempF,
    657                                                                                                         GridMeasure.GridEye4.RawC );
   \                     ??RoadBrd_ParseString_81: (+1)
   \   00000642   0xF8BD 0x01AA      LDRH     R0,[SP, #+426]
   \   00000646   0x9003             STR      R0,[SP, #+12]
   \   00000648   0xA8DB             ADD      R0,SP,#+876
   \   0000064A   0x1CC0             ADDS     R0,R0,#+3
   \   0000064C   0x9002             STR      R0,[SP, #+8]
   \   0000064E   0xA866             ADD      R0,SP,#+408
   \   00000650   0x1CC0             ADDS     R0,R0,#+3
   \   00000652   0x9001             STR      R0,[SP, #+4]
   \   00000654   0xA8DA             ADD      R0,SP,#+872
   \   00000656   0x9000             STR      R0,[SP, #+0]
   \   00000658   0xAB65             ADD      R3,SP,#+404
   \   0000065A   0xF50D 0x72D1      ADD      R2,SP,#+418
   \   0000065E   0xF8DF 0x1D74      LDR.W    R1,??RoadBrd_ParseString_88
   \   00000662   0xA810             ADD      R0,SP,#+64
   \   00000664   0x.... 0x....      BL       sprintf
    658          //                        sprintf( (char *)tempBffr2, "     Grid 36 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye4.Raw,
    659          //                                                                                               GridMeasure.GridEye4.TempC,
    660          //                                                                                               GridMeasure.GridEye4.TempF,
    661          //                                                                                               GridMeasure.GridEye4.RawC );
    662                                  break;
   \   00000668   0xE04E             B.N      ??RoadBrd_ParseString_87
    663                                case 5: //GridEye5 Values
    664                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye5.Raw,
    665                                                                                                         GridMeasure.GridEye5.TempC,GridMeasureScaled.GridEye5.TempC,
    666                                                                                                         GridMeasure.GridEye5.TempF,GridMeasureScaled.GridEye5.TempF,
    667                                                                                                         GridMeasure.GridEye5.RawC );
   \                     ??RoadBrd_ParseString_84: (+1)
   \   0000066A   0xF8BD 0x01C2      LDRH     R0,[SP, #+450]
   \   0000066E   0x9003             STR      R0,[SP, #+12]
   \   00000670   0xA8E1             ADD      R0,SP,#+900
   \   00000672   0x1CC0             ADDS     R0,R0,#+3
   \   00000674   0x9002             STR      R0,[SP, #+8]
   \   00000676   0xA86C             ADD      R0,SP,#+432
   \   00000678   0x1CC0             ADDS     R0,R0,#+3
   \   0000067A   0x9001             STR      R0,[SP, #+4]
   \   0000067C   0xA8E0             ADD      R0,SP,#+896
   \   0000067E   0x9000             STR      R0,[SP, #+0]
   \   00000680   0xAB6B             ADD      R3,SP,#+428
   \   00000682   0xF50D 0x72DD      ADD      R2,SP,#+442
   \   00000686   0xF8DF 0x1D4C      LDR.W    R1,??RoadBrd_ParseString_88
   \   0000068A   0xA810             ADD      R0,SP,#+64
   \   0000068C   0x.... 0x....      BL       sprintf
    668          //                        sprintf( (char *)tempBffr2, "     Grid 37 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye5.Raw,
    669          //                                                                                               GridMeasure.GridEye5.TempC,
    670          //                                                                                               GridMeasure.GridEye5.TempF,
    671          //                                                                                               GridMeasure.GridEye5.RawC );
    672                                  break;
   \   00000690   0xE03A             B.N      ??RoadBrd_ParseString_87
    673                                case 6: //GridEye6 Values
    674                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye6.Raw,
    675                                                                                                         GridMeasure.GridEye6.TempC,GridMeasureScaled.GridEye6.TempC,
    676                                                                                                         GridMeasure.GridEye6.TempF,GridMeasureScaled.GridEye6.TempF,
    677                                                                                                         GridMeasure.GridEye6.RawC );
   \                     ??RoadBrd_ParseString_83: (+1)
   \   00000692   0xF8BD 0x01DA      LDRH     R0,[SP, #+474]
   \   00000696   0x9003             STR      R0,[SP, #+12]
   \   00000698   0xA8E7             ADD      R0,SP,#+924
   \   0000069A   0x1CC0             ADDS     R0,R0,#+3
   \   0000069C   0x9002             STR      R0,[SP, #+8]
   \   0000069E   0xA872             ADD      R0,SP,#+456
   \   000006A0   0x1CC0             ADDS     R0,R0,#+3
   \   000006A2   0x9001             STR      R0,[SP, #+4]
   \   000006A4   0xA8E6             ADD      R0,SP,#+920
   \   000006A6   0x9000             STR      R0,[SP, #+0]
   \   000006A8   0xAB71             ADD      R3,SP,#+452
   \   000006AA   0xF50D 0x72E9      ADD      R2,SP,#+466
   \   000006AE   0xF8DF 0x1D24      LDR.W    R1,??RoadBrd_ParseString_88
   \   000006B2   0xA810             ADD      R0,SP,#+64
   \   000006B4   0x.... 0x....      BL       sprintf
    678          //                        sprintf( (char *)tempBffr2, "     Grid 38 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye6.Raw,
    679          //                                                                                               GridMeasure.GridEye6.TempC,
    680          //                                                                                               GridMeasure.GridEye6.TempF,
    681          //                                                                                               GridMeasure.GridEye6.RawC );
    682                                  break;
   \   000006B8   0xE026             B.N      ??RoadBrd_ParseString_87
    683                                case 7: //GridEye7 Values
    684                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye7.Raw,
    685                                                                                                         GridMeasure.GridEye7.TempC,GridMeasureScaled.GridEye7.TempC,
    686                                                                                                         GridMeasure.GridEye7.TempF,GridMeasureScaled.GridEye7.TempF,
    687                                                                                                         GridMeasure.GridEye7.RawC );
   \                     ??RoadBrd_ParseString_86: (+1)
   \   000006BA   0xF8BD 0x01F2      LDRH     R0,[SP, #+498]
   \   000006BE   0x9003             STR      R0,[SP, #+12]
   \   000006C0   0xA8ED             ADD      R0,SP,#+948
   \   000006C2   0x1CC0             ADDS     R0,R0,#+3
   \   000006C4   0x9002             STR      R0,[SP, #+8]
   \   000006C6   0xA878             ADD      R0,SP,#+480
   \   000006C8   0x1CC0             ADDS     R0,R0,#+3
   \   000006CA   0x9001             STR      R0,[SP, #+4]
   \   000006CC   0xA8EC             ADD      R0,SP,#+944
   \   000006CE   0x9000             STR      R0,[SP, #+0]
   \   000006D0   0xAB77             ADD      R3,SP,#+476
   \   000006D2   0xF50D 0x72F5      ADD      R2,SP,#+490
   \   000006D6   0xF8DF 0x1CFC      LDR.W    R1,??RoadBrd_ParseString_88
   \   000006DA   0xA810             ADD      R0,SP,#+64
   \   000006DC   0x.... 0x....      BL       sprintf
    688          //                        sprintf( (char *)tempBffr2, "     Grid 39 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye7.Raw,
    689          //                                                                                               GridMeasure.GridEye7.TempC,
    690          //                                                                                               GridMeasure.GridEye7.TempF,
    691          //                                                                                               GridMeasure.GridEye7.RawC );
    692                                  break;
   \   000006E0   0xE012             B.N      ??RoadBrd_ParseString_87
    693                                case 8: //GridEye8 Values
    694                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye8.Raw,
    695                                                                                                         GridMeasure.GridEye8.TempC,GridMeasureScaled.GridEye8.TempC,
    696                                                                                                         GridMeasure.GridEye8.TempF,GridMeasureScaled.GridEye8.TempF,
    697                                                                                                         GridMeasure.GridEye8.RawC );
   \                     ??RoadBrd_ParseString_85: (+1)
   \   000006E2   0xF8BD 0x020A      LDRH     R0,[SP, #+522]
   \   000006E6   0x9003             STR      R0,[SP, #+12]
   \   000006E8   0xA8F3             ADD      R0,SP,#+972
   \   000006EA   0x1CC0             ADDS     R0,R0,#+3
   \   000006EC   0x9002             STR      R0,[SP, #+8]
   \   000006EE   0xA87E             ADD      R0,SP,#+504
   \   000006F0   0x1CC0             ADDS     R0,R0,#+3
   \   000006F2   0x9001             STR      R0,[SP, #+4]
   \   000006F4   0xA8F2             ADD      R0,SP,#+968
   \   000006F6   0x9000             STR      R0,[SP, #+0]
   \   000006F8   0xAB7D             ADD      R3,SP,#+500
   \   000006FA   0xAA80             ADD      R2,SP,#+512
   \   000006FC   0x1C92             ADDS     R2,R2,#+2
   \   000006FE   0xF8DF 0x1CD4      LDR.W    R1,??RoadBrd_ParseString_88
   \   00000702   0xA810             ADD      R0,SP,#+64
   \   00000704   0x.... 0x....      BL       sprintf
    698          //                        sprintf( (char *)tempBffr2, "     Grid 40 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye8.Raw,
    699          //                                                                                               GridMeasure.GridEye8.TempC,
    700          //                                                                                               GridMeasure.GridEye8.TempF,
    701          //                                                                                               GridMeasure.GridEye8.RawC );
    702                                  break;
    703                              } // EndSwitch(x)
    704                              // Now Print String.
    705           #ifdef NUCLEO
    706                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    707          #else
    708                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \                     ??RoadBrd_ParseString_87: (+1)
   \   00000708   0xA910             ADD      R1,SP,#+64
   \   0000070A   0x2000             MOVS     R0,#+0
   \   0000070C   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000710   0x0005             MOVS     R5,R0
    709          #endif
    710                              if (Status != HAL_OK)
   \   00000712   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000714   0x2D00             CMP      R5,#+0
   \   00000716   0xD003             BEQ.N    ??RoadBrd_ParseString_89
    711                                return Status;
   \   00000718   0x0028             MOVS     R0,R5
   \   0000071A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000071C   0xF001 0xBFC3      B.W      ??RoadBrd_ParseString_4
    712                            } // EndFor(x=0; x<9; x++)
   \                     ??RoadBrd_ParseString_89: (+1)
   \   00000720   0x1C76             ADDS     R6,R6,#+1
   \   00000722   0xE729             B.N      ??RoadBrd_ParseString_76
    713                            sprintf( (char *)tempBffr2, "     SHNT VLTG DATA: " );
   \                     ??RoadBrd_ParseString_77: (+1)
   \   00000724   0xF8DF 0x1DD8      LDR.W    R1,??RoadBrd_ParseString_90
   \   00000728   0xA810             ADD      R0,SP,#+64
   \   0000072A   0x.... 0x....      BL       sprintf
    714                            strcat( (char *)tempBffr2, (char *)VMeasure.Raw );
   \   0000072E   0xA946             ADD      R1,SP,#+280
   \   00000730   0xA810             ADD      R0,SP,#+64
   \   00000732   0x.... 0x....      BL       strcat
    715                            strcat( (char *)tempBffr2, "\r\n" );
   \   00000736   0xA110             ADR.N    R1,??RoadBrd_ParseString_61  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000738   0xA810             ADD      R0,SP,#+64
   \   0000073A   0x.... 0x....      BL       strcat
    716                          } //Endif(Status == HAL_OK)
    717                          else
    718                            break;
    719                          sprintf( (char *)tempBffr2, "     COMPLETE.\r\n" );
   \   0000073E   0xF8DF 0x1DC4      LDR.W    R1,??RoadBrd_ParseString_90+0x4
   \   00000742   0xA810             ADD      R0,SP,#+64
   \   00000744   0x.... 0x....      BL       sprintf
   \   00000748   0xE148             B.N      ??RoadBrd_ParseString_91
   \                     ??RoadBrd_ParseString_73: (+1)
   \   0000074A   0xF001 0xBF34      B.W      ??RoadBrd_ParseString_25
    720                        }
    721                        else
    722                        {
    723                          switch( tempBffr[1] )
   \                     ??RoadBrd_ParseString_69: (+1)
   \   0000074E   0x7860             LDRB     R0,[R4, #+1]
   \   00000750   0x2830             CMP      R0,#+48
   \   00000752   0xD013             BEQ.N    ??RoadBrd_ParseString_92
   \   00000754   0x2831             CMP      R0,#+49
   \   00000756   0xF000 0x8136      BEQ.W    ??RoadBrd_ParseString_93
   \   0000075A   0x2849             CMP      R0,#+73
   \   0000075C   0xF040 0x813E      BNE.W    ??RoadBrd_ParseString_91
    724                          {
    725          //------------------ BI Command: Initialize Cool Eye/Grid Eye Sensor
    726                            case 'I':
    727                              // Initialize Cool Eye/Grid Eye Sensor.
    728                              Status = RoadBrd_GridEyeInit();
   \                     ??RoadBrd_ParseString_94: (+1)
   \   00000760   0x.... 0x....      BL       RoadBrd_GridEyeInit
   \   00000764   0x0005             MOVS     R5,R0
    729                              if (Status == HAL_OK)
   \   00000766   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000768   0x2D00             CMP      R5,#+0
   \   0000076A   0xD104             BNE.N    ??RoadBrd_ParseString_95
    730                              {
    731                                strcpy( (char *)tempBffr2, "Cool Eye/Grid Eye Sensor: Initialization Complete.\r\n");;
   \   0000076C   0xF8DF 0x1DDC      LDR.W    R1,??RoadBrd_ParseString_96
   \   00000770   0xA810             ADD      R0,SP,#+64
   \   00000772   0x.... 0x....      BL       strcpy
    732                              }
    733                              break;
   \                     ??RoadBrd_ParseString_95: (+1)
   \   00000776   0xE131             B.N      ??RoadBrd_ParseString_91
   \                     ??RoadBrd_ParseString_61:
   \   00000778   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
    734          //------------------ B0 Command...Read Cool Eye/Grid Eye Values.....
    735                            case '0':
    736                              // Read Cool Eye/Grid Eye Values.....
    737                              if ( Get_DriverStates( GRIDEYE_MNTR_TASK ))
   \                     ??RoadBrd_ParseString_92: (+1)
   \   0000077C   0x2005             MOVS     R0,#+5
   \   0000077E   0x.... 0x....      BL       Get_DriverStates
   \   00000782   0x2800             CMP      R0,#+0
   \   00000784   0xD00B             BEQ.N    ??RoadBrd_ParseString_97
    738                              {
    739                                Status = RoadBrd_GridEye_ReadValues( &GridMeasure );
   \   00000786   0xA84D             ADD      R0,SP,#+308
   \   00000788   0x.... 0x....      BL       RoadBrd_GridEye_ReadValues
   \   0000078C   0x0005             MOVS     R5,R0
    740                                if (Status == HAL_OK)
   \   0000078E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000790   0x2D00             CMP      R5,#+0
   \   00000792   0xD117             BNE.N    ??RoadBrd_ParseString_98
    741                                  Status = RoadBrd_GridEye_ReadValues_Scaled( &GridMeasureScaled );
   \   00000794   0xA8C2             ADD      R0,SP,#+776
   \   00000796   0x.... 0x....      BL       RoadBrd_GridEye_ReadValues_Scaled
   \   0000079A   0x0005             MOVS     R5,R0
   \   0000079C   0xE012             B.N      ??RoadBrd_ParseString_98
    742                              }
    743                              else if ( Get_DriverStates( COOLEYE_MNTR_TASK ))
   \                     ??RoadBrd_ParseString_97: (+1)
   \   0000079E   0x2006             MOVS     R0,#+6
   \   000007A0   0x.... 0x....      BL       Get_DriverStates
   \   000007A4   0x2800             CMP      R0,#+0
   \   000007A6   0xD00B             BEQ.N    ??RoadBrd_ParseString_99
    744                              {
    745                                Status = RoadBrd_CoolEye_ReadValues( &GridMeasure );
   \   000007A8   0xA84D             ADD      R0,SP,#+308
   \   000007AA   0x.... 0x....      BL       RoadBrd_CoolEye_ReadValues
   \   000007AE   0x0005             MOVS     R5,R0
    746                                if (Status == HAL_OK)
   \   000007B0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000007B2   0x2D00             CMP      R5,#+0
   \   000007B4   0xD106             BNE.N    ??RoadBrd_ParseString_98
    747                                  Status = RoadBrd_CoolEye_ReadValues_Scaled( &GridMeasureScaled );
   \   000007B6   0xA8C2             ADD      R0,SP,#+776
   \   000007B8   0x.... 0x....      BL       RoadBrd_CoolEye_ReadValues_Scaled
   \   000007BC   0x0005             MOVS     R5,R0
   \   000007BE   0xE001             B.N      ??RoadBrd_ParseString_98
    748                              }
    749                              else
    750                                Status = HAL_ERROR;
   \                     ??RoadBrd_ParseString_99: (+1)
   \   000007C0   0x2001             MOVS     R0,#+1
   \   000007C2   0x0005             MOVS     R5,R0
    751          
    752                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_98: (+1)
   \   000007C4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000007C6   0x2D00             CMP      R5,#+0
   \   000007C8   0xF040 0x80FC      BNE.W    ??RoadBrd_ParseString_100
    753                              {
    754                                // Send string to UART..
    755                                strcpy( (char *)tempBffr2, "Voltage Monitor/Shunt Voltage...\r\n");
   \   000007CC   0xF8DF 0x1B70      LDR.W    R1,??RoadBrd_ParseString_74
   \   000007D0   0xA810             ADD      R0,SP,#+64
   \   000007D2   0x.... 0x....      BL       strcpy
    756          #ifdef NUCLEO
    757                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    758          #else
    759                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000007D6   0xA910             ADD      R1,SP,#+64
   \   000007D8   0x2000             MOVS     R0,#+0
   \   000007DA   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000007DE   0x0005             MOVS     R5,R0
    760          #endif
    761                                if (Status != HAL_OK)
   \   000007E0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000007E2   0x2D00             CMP      R5,#+0
   \   000007E4   0xD003             BEQ.N    ??RoadBrd_ParseString_101
    762                                  return Status;
   \   000007E6   0x0028             MOVS     R0,R5
   \   000007E8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000007EA   0xF001 0xBF5C      B.W      ??RoadBrd_ParseString_4
    763                                // NOW, Build Data String..
    764                                for (x=0; x<9; x++)
   \                     ??RoadBrd_ParseString_101: (+1)
   \   000007EE   0x2000             MOVS     R0,#+0
   \   000007F0   0x0006             MOVS     R6,R0
   \                     ??RoadBrd_ParseString_102: (+1)
   \   000007F2   0x2E09             CMP      R6,#+9
   \   000007F4   0xF280 0x80D3      BGE.W    ??RoadBrd_ParseString_103
    765                                {
    766                                  // Build String
    767                                  switch(x)
   \   000007F8   0x2E00             CMP      R6,#+0
   \   000007FA   0xD00F             BEQ.N    ??RoadBrd_ParseString_104
   \   000007FC   0x2E02             CMP      R6,#+2
   \   000007FE   0xD035             BEQ.N    ??RoadBrd_ParseString_105
   \   00000800   0xD320             BCC.N    ??RoadBrd_ParseString_106
   \   00000802   0x2E04             CMP      R6,#+4
   \   00000804   0xD05A             BEQ.N    ??RoadBrd_ParseString_107
   \   00000806   0xD345             BCC.N    ??RoadBrd_ParseString_108
   \   00000808   0x2E06             CMP      R6,#+6
   \   0000080A   0xF000 0x807F      BEQ.W    ??RoadBrd_ParseString_109
   \   0000080E   0xD369             BCC.N    ??RoadBrd_ParseString_110
   \   00000810   0x2E08             CMP      R6,#+8
   \   00000812   0xF000 0x80A3      BEQ.W    ??RoadBrd_ParseString_111
   \   00000816   0xF0C0 0x808D      BCC.W    ??RoadBrd_ParseString_112
   \   0000081A   0xE0B2             B.N      ??RoadBrd_ParseString_113
    768                                  {
    769                                  case 0: //Thermistor Values
    770                                    sprintf( (char *)tempBffr2, "     Thermistor DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.Thermistor.Raw,
    771                                            GridMeasure.Thermistor.TempC,GridMeasureScaled.Thermistor.TempC,
    772                                            GridMeasure.Thermistor.TempF,GridMeasureScaled.Thermistor.TempF,
    773                                            GridMeasure.Thermistor.RawC );
   \                     ??RoadBrd_ParseString_104: (+1)
   \   0000081C   0xF8BD 0x014A      LDRH     R0,[SP, #+330]
   \   00000820   0x9003             STR      R0,[SP, #+12]
   \   00000822   0xA8C3             ADD      R0,SP,#+780
   \   00000824   0x1CC0             ADDS     R0,R0,#+3
   \   00000826   0x9002             STR      R0,[SP, #+8]
   \   00000828   0xA84E             ADD      R0,SP,#+312
   \   0000082A   0x1CC0             ADDS     R0,R0,#+3
   \   0000082C   0x9001             STR      R0,[SP, #+4]
   \   0000082E   0xA8C2             ADD      R0,SP,#+776
   \   00000830   0x9000             STR      R0,[SP, #+0]
   \   00000832   0xAB4D             ADD      R3,SP,#+308
   \   00000834   0xF50D 0x72A1      ADD      R2,SP,#+322
   \   00000838   0xF8DF 0x1B08      LDR.W    R1,??RoadBrd_ParseString_74+0x4
   \   0000083C   0xA810             ADD      R0,SP,#+64
   \   0000083E   0x.... 0x....      BL       sprintf
    774                                    //                        sprintf( (char *)tempBffr2, "     Thermistor DATA: %s   %s   %s   %d\r\n", GridMeasure.Thermistor.Raw,
    775                                    //                                                                                               GridMeasure.Thermistor.TempC,
    776                                    //                                                                                               GridMeasure.Thermistor.TempF,
    777                                    //                                                                                               GridMeasure.Thermistor.RawC );
    778                                    break;
   \   00000842   0xE09E             B.N      ??RoadBrd_ParseString_113
    779                                  case 1: //GridEye1 Values
    780                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye1.Raw,
    781                                            GridMeasure.GridEye1.TempC,GridMeasureScaled.GridEye1.TempC,
    782                                            GridMeasure.GridEye1.TempF,GridMeasureScaled.GridEye1.TempF,
    783                                            GridMeasure.GridEye1.RawC );
   \                     ??RoadBrd_ParseString_106: (+1)
   \   00000844   0xF8BD 0x0162      LDRH     R0,[SP, #+354]
   \   00000848   0x9003             STR      R0,[SP, #+12]
   \   0000084A   0xA8C9             ADD      R0,SP,#+804
   \   0000084C   0x1CC0             ADDS     R0,R0,#+3
   \   0000084E   0x9002             STR      R0,[SP, #+8]
   \   00000850   0xA854             ADD      R0,SP,#+336
   \   00000852   0x1CC0             ADDS     R0,R0,#+3
   \   00000854   0x9001             STR      R0,[SP, #+4]
   \   00000856   0xA8C8             ADD      R0,SP,#+800
   \   00000858   0x9000             STR      R0,[SP, #+0]
   \   0000085A   0xAB53             ADD      R3,SP,#+332
   \   0000085C   0xF50D 0x72AD      ADD      R2,SP,#+346
   \   00000860   0xF8DF 0x1B70      LDR.W    R1,??RoadBrd_ParseString_88
   \   00000864   0xA810             ADD      R0,SP,#+64
   \   00000866   0x.... 0x....      BL       sprintf
    784                                    //                        sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye1.Raw,
    785                                    //                                                                                               GridMeasure.GridEye1.TempC,
    786                                    //                                                                                               GridMeasure.GridEye1.TempF,
    787                                    //                                                                                               GridMeasure.GridEye1.RawC );
    788                                    break;
   \   0000086A   0xE08A             B.N      ??RoadBrd_ParseString_113
    789                                  case 2: //GridEye2 Values
    790                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye2.Raw,
    791                                            GridMeasure.GridEye2.TempC,GridMeasureScaled.GridEye2.TempC,
    792                                            GridMeasure.GridEye2.TempF,GridMeasureScaled.GridEye2.TempF,
    793                                            GridMeasure.GridEye2.RawC );
   \                     ??RoadBrd_ParseString_105: (+1)
   \   0000086C   0xF8BD 0x017A      LDRH     R0,[SP, #+378]
   \   00000870   0x9003             STR      R0,[SP, #+12]
   \   00000872   0xA8CF             ADD      R0,SP,#+828
   \   00000874   0x1CC0             ADDS     R0,R0,#+3
   \   00000876   0x9002             STR      R0,[SP, #+8]
   \   00000878   0xA85A             ADD      R0,SP,#+360
   \   0000087A   0x1CC0             ADDS     R0,R0,#+3
   \   0000087C   0x9001             STR      R0,[SP, #+4]
   \   0000087E   0xA8CE             ADD      R0,SP,#+824
   \   00000880   0x9000             STR      R0,[SP, #+0]
   \   00000882   0xAB59             ADD      R3,SP,#+356
   \   00000884   0xF50D 0x72B9      ADD      R2,SP,#+370
   \   00000888   0xF8DF 0x1B48      LDR.W    R1,??RoadBrd_ParseString_88
   \   0000088C   0xA810             ADD      R0,SP,#+64
   \   0000088E   0x.... 0x....      BL       sprintf
    794                                    //                        sprintf( (char *)tempBffr2, "     Grid 34 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye2.Raw,
    795                                    //                                                                                               GridMeasure.GridEye2.TempC,
    796                                    //                                                                                               GridMeasure.GridEye2.TempF,
    797                                    //                                                                                               GridMeasure.GridEye2.RawC );
    798                                    break;
   \   00000892   0xE076             B.N      ??RoadBrd_ParseString_113
    799                                  case 3: //GridEye3 Values
    800                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye3.Raw,
    801                                            GridMeasure.GridEye3.TempC,GridMeasureScaled.GridEye3.TempC,
    802                                            GridMeasure.GridEye3.TempF,GridMeasureScaled.GridEye3.TempF,
    803                                            GridMeasure.GridEye3.RawC );
   \                     ??RoadBrd_ParseString_108: (+1)
   \   00000894   0xF8BD 0x0192      LDRH     R0,[SP, #+402]
   \   00000898   0x9003             STR      R0,[SP, #+12]
   \   0000089A   0xA8D5             ADD      R0,SP,#+852
   \   0000089C   0x1CC0             ADDS     R0,R0,#+3
   \   0000089E   0x9002             STR      R0,[SP, #+8]
   \   000008A0   0xA860             ADD      R0,SP,#+384
   \   000008A2   0x1CC0             ADDS     R0,R0,#+3
   \   000008A4   0x9001             STR      R0,[SP, #+4]
   \   000008A6   0xA8D4             ADD      R0,SP,#+848
   \   000008A8   0x9000             STR      R0,[SP, #+0]
   \   000008AA   0xAB5F             ADD      R3,SP,#+380
   \   000008AC   0xF50D 0x72C5      ADD      R2,SP,#+394
   \   000008B0   0xF8DF 0x1B20      LDR.W    R1,??RoadBrd_ParseString_88
   \   000008B4   0xA810             ADD      R0,SP,#+64
   \   000008B6   0x.... 0x....      BL       sprintf
    804                                    //                        sprintf( (char *)tempBffr2, "     Grid 35 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye3.Raw,
    805                                    //                                                                                               GridMeasure.GridEye3.TempC,
    806                                    //                                                                                               GridMeasure.GridEye3.TempF,
    807                                    //                                                                                               GridMeasure.GridEye3.RawC );
    808                                    break;
   \   000008BA   0xE062             B.N      ??RoadBrd_ParseString_113
    809                                  case 4: //GridEye4 Values
    810                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye4.Raw,
    811                                            GridMeasure.GridEye4.TempC,GridMeasureScaled.GridEye4.TempC,
    812                                            GridMeasure.GridEye4.TempF,GridMeasureScaled.GridEye4.TempF,
    813                                            GridMeasure.GridEye4.RawC );
   \                     ??RoadBrd_ParseString_107: (+1)
   \   000008BC   0xF8BD 0x01AA      LDRH     R0,[SP, #+426]
   \   000008C0   0x9003             STR      R0,[SP, #+12]
   \   000008C2   0xA8DB             ADD      R0,SP,#+876
   \   000008C4   0x1CC0             ADDS     R0,R0,#+3
   \   000008C6   0x9002             STR      R0,[SP, #+8]
   \   000008C8   0xA866             ADD      R0,SP,#+408
   \   000008CA   0x1CC0             ADDS     R0,R0,#+3
   \   000008CC   0x9001             STR      R0,[SP, #+4]
   \   000008CE   0xA8DA             ADD      R0,SP,#+872
   \   000008D0   0x9000             STR      R0,[SP, #+0]
   \   000008D2   0xAB65             ADD      R3,SP,#+404
   \   000008D4   0xF50D 0x72D1      ADD      R2,SP,#+418
   \   000008D8   0xF8DF 0x1AF8      LDR.W    R1,??RoadBrd_ParseString_88
   \   000008DC   0xA810             ADD      R0,SP,#+64
   \   000008DE   0x.... 0x....      BL       sprintf
    814                                    //                        sprintf( (char *)tempBffr2, "     Grid 36 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye4.Raw,
    815                                    //                                                                                               GridMeasure.GridEye4.TempC,
    816                                    //                                                                                               GridMeasure.GridEye4.TempF,
    817                                    //                                                                                               GridMeasure.GridEye4.RawC );
    818                                    break;
   \   000008E2   0xE04E             B.N      ??RoadBrd_ParseString_113
    819                                  case 5: //GridEye5 Values
    820                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye5.Raw,
    821                                            GridMeasure.GridEye5.TempC,GridMeasureScaled.GridEye5.TempC,
    822                                            GridMeasure.GridEye5.TempF,GridMeasureScaled.GridEye5.TempF,
    823                                            GridMeasure.GridEye5.RawC );
   \                     ??RoadBrd_ParseString_110: (+1)
   \   000008E4   0xF8BD 0x01C2      LDRH     R0,[SP, #+450]
   \   000008E8   0x9003             STR      R0,[SP, #+12]
   \   000008EA   0xA8E1             ADD      R0,SP,#+900
   \   000008EC   0x1CC0             ADDS     R0,R0,#+3
   \   000008EE   0x9002             STR      R0,[SP, #+8]
   \   000008F0   0xA86C             ADD      R0,SP,#+432
   \   000008F2   0x1CC0             ADDS     R0,R0,#+3
   \   000008F4   0x9001             STR      R0,[SP, #+4]
   \   000008F6   0xA8E0             ADD      R0,SP,#+896
   \   000008F8   0x9000             STR      R0,[SP, #+0]
   \   000008FA   0xAB6B             ADD      R3,SP,#+428
   \   000008FC   0xF50D 0x72DD      ADD      R2,SP,#+442
   \   00000900   0xF8DF 0x1AD0      LDR.W    R1,??RoadBrd_ParseString_88
   \   00000904   0xA810             ADD      R0,SP,#+64
   \   00000906   0x.... 0x....      BL       sprintf
    824                                    //                        sprintf( (char *)tempBffr2, "     Grid 37 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye5.Raw,
    825                                    //                                                                                               GridMeasure.GridEye5.TempC,
    826                                    //                                                                                               GridMeasure.GridEye5.TempF,
    827                                    //                                                                                               GridMeasure.GridEye5.RawC );
    828                                    break;
   \   0000090A   0xE03A             B.N      ??RoadBrd_ParseString_113
    829                                  case 6: //GridEye6 Values
    830                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye6.Raw,
    831                                            GridMeasure.GridEye6.TempC,GridMeasureScaled.GridEye6.TempC,
    832                                            GridMeasure.GridEye6.TempF,GridMeasureScaled.GridEye6.TempF,
    833                                            GridMeasure.GridEye6.RawC );
   \                     ??RoadBrd_ParseString_109: (+1)
   \   0000090C   0xF8BD 0x01DA      LDRH     R0,[SP, #+474]
   \   00000910   0x9003             STR      R0,[SP, #+12]
   \   00000912   0xA8E7             ADD      R0,SP,#+924
   \   00000914   0x1CC0             ADDS     R0,R0,#+3
   \   00000916   0x9002             STR      R0,[SP, #+8]
   \   00000918   0xA872             ADD      R0,SP,#+456
   \   0000091A   0x1CC0             ADDS     R0,R0,#+3
   \   0000091C   0x9001             STR      R0,[SP, #+4]
   \   0000091E   0xA8E6             ADD      R0,SP,#+920
   \   00000920   0x9000             STR      R0,[SP, #+0]
   \   00000922   0xAB71             ADD      R3,SP,#+452
   \   00000924   0xF50D 0x72E9      ADD      R2,SP,#+466
   \   00000928   0xF8DF 0x1AA8      LDR.W    R1,??RoadBrd_ParseString_88
   \   0000092C   0xA810             ADD      R0,SP,#+64
   \   0000092E   0x.... 0x....      BL       sprintf
    834                                    //                        sprintf( (char *)tempBffr2, "     Grid 38 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye6.Raw,
    835                                    //                                                                                               GridMeasure.GridEye6.TempC,
    836                                    //                                                                                               GridMeasure.GridEye6.TempF,
    837                                    //                                                                                               GridMeasure.GridEye6.RawC );
    838                                    break;
   \   00000932   0xE026             B.N      ??RoadBrd_ParseString_113
    839                                  case 7: //GridEye7 Values
    840                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye7.Raw,
    841                                            GridMeasure.GridEye7.TempC,GridMeasureScaled.GridEye7.TempC,
    842                                            GridMeasure.GridEye7.TempF,GridMeasureScaled.GridEye7.TempF,
    843                                            GridMeasure.GridEye7.RawC );
   \                     ??RoadBrd_ParseString_112: (+1)
   \   00000934   0xF8BD 0x01F2      LDRH     R0,[SP, #+498]
   \   00000938   0x9003             STR      R0,[SP, #+12]
   \   0000093A   0xA8ED             ADD      R0,SP,#+948
   \   0000093C   0x1CC0             ADDS     R0,R0,#+3
   \   0000093E   0x9002             STR      R0,[SP, #+8]
   \   00000940   0xA878             ADD      R0,SP,#+480
   \   00000942   0x1CC0             ADDS     R0,R0,#+3
   \   00000944   0x9001             STR      R0,[SP, #+4]
   \   00000946   0xA8EC             ADD      R0,SP,#+944
   \   00000948   0x9000             STR      R0,[SP, #+0]
   \   0000094A   0xAB77             ADD      R3,SP,#+476
   \   0000094C   0xF50D 0x72F5      ADD      R2,SP,#+490
   \   00000950   0xF8DF 0x1A80      LDR.W    R1,??RoadBrd_ParseString_88
   \   00000954   0xA810             ADD      R0,SP,#+64
   \   00000956   0x.... 0x....      BL       sprintf
    844                                    //                        sprintf( (char *)tempBffr2, "     Grid 39 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye7.Raw,
    845                                    //                                                                                               GridMeasure.GridEye7.TempC,
    846                                    //                                                                                               GridMeasure.GridEye7.TempF,
    847                                    //                                                                                               GridMeasure.GridEye7.RawC );
    848                                    break;
   \   0000095A   0xE012             B.N      ??RoadBrd_ParseString_113
    849                                  case 8: //GridEye8 Values
    850                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye8.Raw,
    851                                            GridMeasure.GridEye8.TempC,GridMeasureScaled.GridEye8.TempC,
    852                                            GridMeasure.GridEye8.TempF,GridMeasureScaled.GridEye8.TempF,
    853                                            GridMeasure.GridEye8.RawC );
   \                     ??RoadBrd_ParseString_111: (+1)
   \   0000095C   0xF8BD 0x020A      LDRH     R0,[SP, #+522]
   \   00000960   0x9003             STR      R0,[SP, #+12]
   \   00000962   0xA8F3             ADD      R0,SP,#+972
   \   00000964   0x1CC0             ADDS     R0,R0,#+3
   \   00000966   0x9002             STR      R0,[SP, #+8]
   \   00000968   0xA87E             ADD      R0,SP,#+504
   \   0000096A   0x1CC0             ADDS     R0,R0,#+3
   \   0000096C   0x9001             STR      R0,[SP, #+4]
   \   0000096E   0xA8F2             ADD      R0,SP,#+968
   \   00000970   0x9000             STR      R0,[SP, #+0]
   \   00000972   0xAB7D             ADD      R3,SP,#+500
   \   00000974   0xAA80             ADD      R2,SP,#+512
   \   00000976   0x1C92             ADDS     R2,R2,#+2
   \   00000978   0xF8DF 0x1A58      LDR.W    R1,??RoadBrd_ParseString_88
   \   0000097C   0xA810             ADD      R0,SP,#+64
   \   0000097E   0x.... 0x....      BL       sprintf
    854                                    //                        sprintf( (char *)tempBffr2, "     Grid 40 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye8.Raw,
    855                                    //                                                                                               GridMeasure.GridEye8.TempC,
    856                                    //                                                                                               GridMeasure.GridEye8.TempF,
    857                                    //                                                                                               GridMeasure.GridEye8.RawC );
    858                                    break;
    859                                  } // EndSwitch(x)
    860                                  // Now Print String.
    861           #ifdef NUCLEO
    862                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    863          #else
    864                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \                     ??RoadBrd_ParseString_113: (+1)
   \   00000982   0xA910             ADD      R1,SP,#+64
   \   00000984   0x2000             MOVS     R0,#+0
   \   00000986   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000098A   0x0005             MOVS     R5,R0
    865          #endif
    866                                  if (Status != HAL_OK)
   \   0000098C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000098E   0x2D00             CMP      R5,#+0
   \   00000990   0xD003             BEQ.N    ??RoadBrd_ParseString_114
    867                                    return Status;
   \   00000992   0x0028             MOVS     R0,R5
   \   00000994   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000996   0xF001 0xBE86      B.W      ??RoadBrd_ParseString_4
    868                               } // EndFor(x=0; x<9; x++)
   \                     ??RoadBrd_ParseString_114: (+1)
   \   0000099A   0x1C76             ADDS     R6,R6,#+1
   \   0000099C   0xE729             B.N      ??RoadBrd_ParseString_102
    869                                sprintf( (char *)tempBffr2, "     SHNT VLTG DATA: " );
   \                     ??RoadBrd_ParseString_103: (+1)
   \   0000099E   0xF8DF 0x1B60      LDR.W    R1,??RoadBrd_ParseString_90
   \   000009A2   0xA810             ADD      R0,SP,#+64
   \   000009A4   0x.... 0x....      BL       sprintf
    870                                strcat( (char *)tempBffr2, (char *)VMeasure.Raw );
   \   000009A8   0xA946             ADD      R1,SP,#+280
   \   000009AA   0xA810             ADD      R0,SP,#+64
   \   000009AC   0x.... 0x....      BL       strcat
    871                                strcat( (char *)tempBffr2, "\r\n" );
   \   000009B0   0xA1C7             ADR.N    R1,??RoadBrd_ParseString_115  ;; 0x0D, 0x0A, 0x00, 0x00
   \   000009B2   0xA810             ADD      R0,SP,#+64
   \   000009B4   0x.... 0x....      BL       strcat
    872                              } //Endif(Status == HAL_OK)
    873                              else
    874                                break;
    875                              sprintf( (char *)tempBffr2, "     COMPLETE.\r\n" );
   \   000009B8   0xF8DF 0x1B48      LDR.W    R1,??RoadBrd_ParseString_90+0x4
   \   000009BC   0xA810             ADD      R0,SP,#+64
   \   000009BE   0x.... 0x....      BL       sprintf
    876                              break;
   \   000009C2   0xE00B             B.N      ??RoadBrd_ParseString_91
   \                     ??RoadBrd_ParseString_100: (+1)
   \   000009C4   0xE00A             B.N      ??RoadBrd_ParseString_91
    877          //------------------ B1 Command...Reset Cool Eye/Grid Eye Sensor..... 
    878                            case '1':
    879                              // Reset Cool Eye/Grid Eye Sensor.
    880                              Status = RoadBrd_GridEyeReset();
   \                     ??RoadBrd_ParseString_93: (+1)
   \   000009C6   0x.... 0x....      BL       RoadBrd_GridEyeReset
   \   000009CA   0x0005             MOVS     R5,R0
    881                              if (Status == HAL_OK)
   \   000009CC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000009CE   0x2D00             CMP      R5,#+0
   \   000009D0   0xD104             BNE.N    ??RoadBrd_ParseString_116
    882                              {
    883                                strcpy( (char *)tempBffr2, "Cool Eye/Grid Eye Sensor: Reset Complete.\r\n");;
   \   000009D2   0xF8DF 0x1DC4      LDR.W    R1,??RoadBrd_ParseString_117+0x4
   \   000009D6   0xA810             ADD      R0,SP,#+64
   \   000009D8   0x.... 0x....      BL       strcpy
    884                              }
    885                              break;
    886                          } //EndSwitch
    887                        } //EndElse (Size == 1)
    888                        break;
   \                     ??RoadBrd_ParseString_116: (+1)
   \                     ??RoadBrd_ParseString_91: (+1)
   \   000009DC   0xF001 0xBDEB      B.W      ??RoadBrd_ParseString_25
    889          //**************************************************************************************************
    890                      case 'C':
    891                        // Read Voltage. 
    892          //++++++++++++++++++++++++++++++++++++++++++  Voltage Monitor Commands.
    893                        if (Size == 1)
   \                     ??RoadBrd_ParseString_14: (+1)
   \   000009E0   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000009E4   0xF1B8 0x0F01      CMP      R8,#+1
   \   000009E8   0xD142             BNE.N    ??RoadBrd_ParseString_118
    894                        {
    895          //------------------ C Command       
    896                          // Read Bus Voltage and return as 2 Byte Field.
    897                          Status = RoadBrd_VMonitor_RdVoltage( &VMeasure );
   \   000009EA   0xA844             ADD      R0,SP,#+272
   \   000009EC   0x.... 0x....      BL       RoadBrd_VMonitor_RdVoltage
   \   000009F0   0x0005             MOVS     R5,R0
    898                          if (Status == HAL_OK)
   \   000009F2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000009F4   0x2D00             CMP      R5,#+0
   \   000009F6   0xD103             BNE.N    ??RoadBrd_ParseString_119
    899                            Status = RoadBrd_VMonitor_RdVoltage_Scaled( &VMeasureScaled );
   \   000009F8   0xA883             ADD      R0,SP,#+524
   \   000009FA   0x.... 0x....      BL       RoadBrd_VMonitor_RdVoltage_Scaled
   \   000009FE   0x0005             MOVS     R5,R0
    900                          if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_119: (+1)
   \   00000A00   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000A02   0x2D00             CMP      R5,#+0
   \   00000A04   0xD126             BNE.N    ??RoadBrd_ParseString_120
    901                          {
    902                            // Send string to UART..
    903                            strcpy( (char *)tempBffr2, "Voltage Monitor/Read Bus Voltage...\r\n");
   \   00000A06   0xF8DF 0x1D94      LDR.W    R1,??RoadBrd_ParseString_117+0x8
   \   00000A0A   0xA810             ADD      R0,SP,#+64
   \   00000A0C   0x.... 0x....      BL       strcpy
    904          #ifdef NUCLEO
    905                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    906          #else
    907                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000A10   0xA910             ADD      R1,SP,#+64
   \   00000A12   0x2000             MOVS     R0,#+0
   \   00000A14   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000A18   0x0005             MOVS     R5,R0
    908          #endif
    909                            if (Status != HAL_OK)
   \   00000A1A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000A1C   0x2D00             CMP      R5,#+0
   \   00000A1E   0xD003             BEQ.N    ??RoadBrd_ParseString_121
    910                            return Status;
   \   00000A20   0x0028             MOVS     R0,R5
   \   00000A22   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000A24   0xF001 0xBE3F      B.W      ??RoadBrd_ParseString_4
    911                            // NOW, Build Data String..
    912                            sprintf( (char *)tempBffr2, "     BUS VOLTAGE DATA: " );
   \                     ??RoadBrd_ParseString_121: (+1)
   \   00000A28   0xF8DF 0x1DDC      LDR.W    R1,??RoadBrd_ParseString_122
   \   00000A2C   0xA810             ADD      R0,SP,#+64
   \   00000A2E   0x.... 0x....      BL       sprintf
    913                            strcat( (char *)tempBffr2, (char *)VMeasure.Raw );
   \   00000A32   0xA946             ADD      R1,SP,#+280
   \   00000A34   0xA810             ADD      R0,SP,#+64
   \   00000A36   0x.... 0x....      BL       strcat
    914                            strcat( (char *)tempBffr2, "\r\n" );
   \   00000A3A   0xA1A5             ADR.N    R1,??RoadBrd_ParseString_115  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000A3C   0xA810             ADD      R0,SP,#+64
   \   00000A3E   0x.... 0x....      BL       strcat
    915                          }
    916                          else
    917                            break;
    918          #ifdef NUCLEO
    919                          Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    920          #else
    921                          Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000A42   0xA910             ADD      R1,SP,#+64
   \   00000A44   0x2000             MOVS     R0,#+0
   \   00000A46   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000A4A   0x0005             MOVS     R5,R0
    922          #endif
    923                          if (Status != HAL_OK)
   \   00000A4C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000A4E   0x2D00             CMP      R5,#+0
   \   00000A50   0xD102             BNE.N    ??RoadBrd_ParseString_123
   \   00000A52   0xE005             B.N      ??RoadBrd_ParseString_124
   \                     ??RoadBrd_ParseString_120: (+1)
   \   00000A54   0xF001 0xBDAF      B.W      ??RoadBrd_ParseString_25
    924                            return Status;
   \                     ??RoadBrd_ParseString_123: (+1)
   \   00000A58   0x0028             MOVS     R0,R5
   \   00000A5A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000A5C   0xF001 0xBE23      B.W      ??RoadBrd_ParseString_4
    925                          // Now calculate Bus Voltage.
    926                          sprintf( (char *)tempBffr2, "     Bus Voltage: %s/%s\r\n", (char *)VMeasure.Voltage, (char *)VMeasureScaled.Voltage );
   \                     ??RoadBrd_ParseString_124: (+1)
   \   00000A60   0xAB83             ADD      R3,SP,#+524
   \   00000A62   0xAA44             ADD      R2,SP,#+272
   \   00000A64   0xF8DF 0x1DA4      LDR.W    R1,??RoadBrd_ParseString_122+0x4
   \   00000A68   0xA810             ADD      R0,SP,#+64
   \   00000A6A   0x.... 0x....      BL       sprintf
   \   00000A6E   0xE12C             B.N      ??RoadBrd_ParseString_125
    927                        }
    928                        else
    929                        {
    930                          switch( tempBffr[1] )
   \                     ??RoadBrd_ParseString_118: (+1)
   \   00000A70   0x7860             LDRB     R0,[R4, #+1]
   \   00000A72   0x2830             CMP      R0,#+48
   \   00000A74   0xD016             BEQ.N    ??RoadBrd_ParseString_126
   \   00000A76   0x2831             CMP      R0,#+49
   \   00000A78   0xD056             BEQ.N    ??RoadBrd_ParseString_127
   \   00000A7A   0x2832             CMP      R0,#+50
   \   00000A7C   0xF000 0x8099      BEQ.W    ??RoadBrd_ParseString_128
   \   00000A80   0x2833             CMP      R0,#+51
   \   00000A82   0xF000 0x80DB      BEQ.W    ??RoadBrd_ParseString_129
   \   00000A86   0x2849             CMP      R0,#+73
   \   00000A88   0xF040 0x811A      BNE.W    ??RoadBrd_ParseString_130
    931                          {
    932          //------------------ CI Command       
    933                            case 'I':
    934                              // Initialize and load Calibration Register.
    935                              // Read Calibration Value first.
    936                              Status = RoadBrd_Init_VMonitor();
   \                     ??RoadBrd_ParseString_131: (+1)
   \   00000A8C   0x.... 0x....      BL       RoadBrd_Init_VMonitor
   \   00000A90   0x0005             MOVS     R5,R0
    937                              if (Status == HAL_OK)
   \   00000A92   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000A94   0x2D00             CMP      R5,#+0
   \   00000A96   0xD104             BNE.N    ??RoadBrd_ParseString_132
    938                              {
    939                                strcpy( (char *)tempBffr2, "Voltage Monitor: Initialization Complete.\r\n");;
   \   00000A98   0xF8DF 0x1DDC      LDR.W    R1,??RoadBrd_ParseString_133
   \   00000A9C   0xA810             ADD      R0,SP,#+64
   \   00000A9E   0x.... 0x....      BL       strcpy
    940                              }
    941                              break;
   \                     ??RoadBrd_ParseString_132: (+1)
   \   00000AA2   0xE112             B.N      ??RoadBrd_ParseString_125
    942          //------------------ C0 Command...Read Shunt Voltage and return results.....
    943                            case '0':
    944                              // Read Shunt Voltage and return results.....
    945                              Status = RoadBrd_VMonitor_RdShntVltg( &VMeasure );
   \                     ??RoadBrd_ParseString_126: (+1)
   \   00000AA4   0xA844             ADD      R0,SP,#+272
   \   00000AA6   0x.... 0x....      BL       RoadBrd_VMonitor_RdShntVltg
   \   00000AAA   0x0005             MOVS     R5,R0
    946                              if (Status == HAL_OK)
   \   00000AAC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000AAE   0x2D00             CMP      R5,#+0
   \   00000AB0   0xD103             BNE.N    ??RoadBrd_ParseString_134
    947                                Status = RoadBrd_VMonitor_RdShntVltg_Scaled( &VMeasureScaled );
   \   00000AB2   0xA883             ADD      R0,SP,#+524
   \   00000AB4   0x.... 0x....      BL       RoadBrd_VMonitor_RdShntVltg_Scaled
   \   00000AB8   0x0005             MOVS     R5,R0
    948                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_134: (+1)
   \   00000ABA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000ABC   0x2D00             CMP      R5,#+0
   \   00000ABE   0xD126             BNE.N    ??RoadBrd_ParseString_135
    949                              {
    950                                // Send string to UART..
    951                                strcpy( (char *)tempBffr2, "Voltage Monitor/Shunt Voltage...\r\n");
   \   00000AC0   0xF8DF 0x187C      LDR.W    R1,??RoadBrd_ParseString_74
   \   00000AC4   0xA810             ADD      R0,SP,#+64
   \   00000AC6   0x.... 0x....      BL       strcpy
    952          #ifdef NUCLEO
    953                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    954          #else
    955                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000ACA   0xA910             ADD      R1,SP,#+64
   \   00000ACC   0x2000             MOVS     R0,#+0
   \   00000ACE   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000AD2   0x0005             MOVS     R5,R0
    956          #endif
    957                                if (Status != HAL_OK)
   \   00000AD4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000AD6   0x2D00             CMP      R5,#+0
   \   00000AD8   0xD003             BEQ.N    ??RoadBrd_ParseString_136
    958                                  return Status;
   \   00000ADA   0x0028             MOVS     R0,R5
   \   00000ADC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000ADE   0xF001 0xBDE2      B.W      ??RoadBrd_ParseString_4
    959                                // NOW, Build Data String..
    960                                sprintf( (char *)tempBffr2, "     SHNT VLTG DATA: " );
   \                     ??RoadBrd_ParseString_136: (+1)
   \   00000AE2   0xF8DF 0x1A1C      LDR.W    R1,??RoadBrd_ParseString_90
   \   00000AE6   0xA810             ADD      R0,SP,#+64
   \   00000AE8   0x.... 0x....      BL       sprintf
    961                                strcat( (char *)tempBffr2, (char *)VMeasure.Raw );
   \   00000AEC   0xA946             ADD      R1,SP,#+280
   \   00000AEE   0xA810             ADD      R0,SP,#+64
   \   00000AF0   0x.... 0x....      BL       strcat
    962                                strcat( (char *)tempBffr2, "\r\n" );
   \   00000AF4   0xA176             ADR.N    R1,??RoadBrd_ParseString_115  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000AF6   0xA810             ADD      R0,SP,#+64
   \   00000AF8   0x.... 0x....      BL       strcat
    963                              }
    964                              else
    965                                break;
    966          #ifdef NUCLEO
    967                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    968          #else
    969                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000AFC   0xA910             ADD      R1,SP,#+64
   \   00000AFE   0x2000             MOVS     R0,#+0
   \   00000B00   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000B04   0x0005             MOVS     R5,R0
    970          #endif
    971                              if (Status != HAL_OK)
   \   00000B06   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000B08   0x2D00             CMP      R5,#+0
   \   00000B0A   0xD101             BNE.N    ??RoadBrd_ParseString_137
   \   00000B0C   0xE004             B.N      ??RoadBrd_ParseString_138
   \                     ??RoadBrd_ParseString_135: (+1)
   \   00000B0E   0xE0DC             B.N      ??RoadBrd_ParseString_125
    972                                return Status;
   \                     ??RoadBrd_ParseString_137: (+1)
   \   00000B10   0x0028             MOVS     R0,R5
   \   00000B12   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000B14   0xF001 0xBDC7      B.W      ??RoadBrd_ParseString_4
    973                              // Now calculate Shunt Voltage.
    974                              sprintf( (char *)tempBffr2, "     Shunt Voltage: %s/%s\r\n", (char *)VMeasure.Voltage, (char *)VMeasureScaled.Voltage );
   \                     ??RoadBrd_ParseString_138: (+1)
   \   00000B18   0xAB83             ADD      R3,SP,#+524
   \   00000B1A   0xAA44             ADD      R2,SP,#+272
   \   00000B1C   0xF8DF 0x1D5C      LDR.W    R1,??RoadBrd_ParseString_133+0x4
   \   00000B20   0xA810             ADD      R0,SP,#+64
   \   00000B22   0x.... 0x....      BL       sprintf
    975                              break;
   \   00000B26   0xE0D0             B.N      ??RoadBrd_ParseString_125
    976          //------------------ C1 Command...Read Current and return results..... 
    977                            case '1':
    978                              // Read Current and return results.....
    979                              Status = RoadBrd_VMonitor_RdCurrent( &CMeasure );
   \                     ??RoadBrd_ParseString_127: (+1)
   \   00000B28   0xA8BE             ADD      R0,SP,#+760
   \   00000B2A   0x.... 0x....      BL       RoadBrd_VMonitor_RdCurrent
   \   00000B2E   0x0005             MOVS     R5,R0
    980                              if (Status == HAL_OK)
   \   00000B30   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000B32   0x2D00             CMP      R5,#+0
   \   00000B34   0xD104             BNE.N    ??RoadBrd_ParseString_139
    981                                Status = RoadBrd_VMonitor_RdCurrent_Scaled( &CMeasureScaled );
   \   00000B36   0xA8FF             ADD      R0,SP,#+1020
   \   00000B38   0x3020             ADDS     R0,R0,#+32
   \   00000B3A   0x.... 0x....      BL       RoadBrd_VMonitor_RdCurrent_Scaled
   \   00000B3E   0x0005             MOVS     R5,R0
    982                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_139: (+1)
   \   00000B40   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000B42   0x2D00             CMP      R5,#+0
   \   00000B44   0xD127             BNE.N    ??RoadBrd_ParseString_140
    983                              {
    984                                // Send string to UART..
    985                                strcpy( (char *)tempBffr2, "Voltage Monitor/Read Current...\r\n");
   \   00000B46   0xF8DF 0x1D38      LDR.W    R1,??RoadBrd_ParseString_133+0x8
   \   00000B4A   0xA810             ADD      R0,SP,#+64
   \   00000B4C   0x.... 0x....      BL       strcpy
    986          #ifdef NUCLEO
    987                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    988          #else
    989                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000B50   0xA910             ADD      R1,SP,#+64
   \   00000B52   0x2000             MOVS     R0,#+0
   \   00000B54   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000B58   0x0005             MOVS     R5,R0
    990          #endif
    991                                if (Status != HAL_OK)
   \   00000B5A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000B5C   0x2D00             CMP      R5,#+0
   \   00000B5E   0xD003             BEQ.N    ??RoadBrd_ParseString_141
    992                                  return Status;
   \   00000B60   0x0028             MOVS     R0,R5
   \   00000B62   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000B64   0xF001 0xBD9F      B.W      ??RoadBrd_ParseString_4
    993                                // NOW, Build Data String..
    994                                sprintf( (char *)tempBffr2, "     CURRENT DATA: " );
   \                     ??RoadBrd_ParseString_141: (+1)
   \   00000B68   0xF8DF 0x1D18      LDR.W    R1,??RoadBrd_ParseString_133+0xC
   \   00000B6C   0xA810             ADD      R0,SP,#+64
   \   00000B6E   0x.... 0x....      BL       sprintf
    995                                strcat( (char *)tempBffr2, (char *)CMeasure.Raw );
   \   00000B72   0xA9C0             ADD      R1,SP,#+768
   \   00000B74   0x1C49             ADDS     R1,R1,#+1
   \   00000B76   0xA810             ADD      R0,SP,#+64
   \   00000B78   0x.... 0x....      BL       strcat
    996                                strcat( (char *)tempBffr2, "\r\n" );
   \   00000B7C   0xA154             ADR.N    R1,??RoadBrd_ParseString_115  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000B7E   0xA810             ADD      R0,SP,#+64
   \   00000B80   0x.... 0x....      BL       strcat
    997                              }
    998                              else
    999                                break;
   1000          #ifdef NUCLEO
   1001                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1002          #else
   1003                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000B84   0xA910             ADD      R1,SP,#+64
   \   00000B86   0x2000             MOVS     R0,#+0
   \   00000B88   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000B8C   0x0005             MOVS     R5,R0
   1004          #endif
   1005                              if (Status != HAL_OK)
   \   00000B8E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000B90   0x2D00             CMP      R5,#+0
   \   00000B92   0xD101             BNE.N    ??RoadBrd_ParseString_142
   \   00000B94   0xE004             B.N      ??RoadBrd_ParseString_143
   \                     ??RoadBrd_ParseString_140: (+1)
   \   00000B96   0xE098             B.N      ??RoadBrd_ParseString_125
   1006                                return Status;
   \                     ??RoadBrd_ParseString_142: (+1)
   \   00000B98   0x0028             MOVS     R0,R5
   \   00000B9A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000B9C   0xF001 0xBD83      B.W      ??RoadBrd_ParseString_4
   1007                              // Now calculate Current.
   1008                              sprintf( (char *)tempBffr2, "     Current: %s/%s\r\n", (char *)CMeasure.Current, (char *)CMeasureScaled.Current );
   \                     ??RoadBrd_ParseString_143: (+1)
   \   00000BA0   0xABFF             ADD      R3,SP,#+1020
   \   00000BA2   0x3320             ADDS     R3,R3,#+32
   \   00000BA4   0xAABE             ADD      R2,SP,#+760
   \   00000BA6   0xF8DF 0x1DD8      LDR.W    R1,??RoadBrd_ParseString_144
   \   00000BAA   0xA810             ADD      R0,SP,#+64
   \   00000BAC   0x.... 0x....      BL       sprintf
   1009                              break;
   \   00000BB0   0xE08B             B.N      ??RoadBrd_ParseString_125
   1010          //------------------ C2 Command...Read Power and return results.....     
   1011                            case '2':
   1012                              // Read Power and return results.....
   1013                              Status = RoadBrd_VMonitor_RdPower( &PMeasure );
   \                     ??RoadBrd_ParseString_128: (+1)
   \   00000BB2   0xA8BA             ADD      R0,SP,#+744
   \   00000BB4   0x.... 0x....      BL       RoadBrd_VMonitor_RdPower
   \   00000BB8   0x0005             MOVS     R5,R0
   1014                              if (Status == HAL_OK)
   \   00000BBA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000BBC   0x2D00             CMP      R5,#+0
   \   00000BBE   0xD104             BNE.N    ??RoadBrd_ParseString_145
   1015                                Status = RoadBrd_VMonitor_RdPower_Scaled( &PMeasureScaled );
   \   00000BC0   0xA8FF             ADD      R0,SP,#+1020
   \   00000BC2   0x3010             ADDS     R0,R0,#+16
   \   00000BC4   0x.... 0x....      BL       RoadBrd_VMonitor_RdPower_Scaled
   \   00000BC8   0x0005             MOVS     R5,R0
   1016                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_145: (+1)
   \   00000BCA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000BCC   0x2D00             CMP      R5,#+0
   \   00000BCE   0xD127             BNE.N    ??RoadBrd_ParseString_146
   1017                              {
   1018                                // Send string to UART..
   1019                                strcpy( (char *)tempBffr2, "Voltage Monitor/Read Power...\r\n");
   \   00000BD0   0xF8DF 0x1DB0      LDR.W    R1,??RoadBrd_ParseString_144+0x4
   \   00000BD4   0xA810             ADD      R0,SP,#+64
   \   00000BD6   0x.... 0x....      BL       strcpy
   1020          #ifdef NUCLEO
   1021                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1022          #else
   1023                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000BDA   0xA910             ADD      R1,SP,#+64
   \   00000BDC   0x2000             MOVS     R0,#+0
   \   00000BDE   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000BE2   0x0005             MOVS     R5,R0
   1024          #endif
   1025                                if (Status != HAL_OK)
   \   00000BE4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000BE6   0x2D00             CMP      R5,#+0
   \   00000BE8   0xD003             BEQ.N    ??RoadBrd_ParseString_147
   1026                                  return Status;
   \   00000BEA   0x0028             MOVS     R0,R5
   \   00000BEC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000BEE   0xF001 0xBD5A      B.W      ??RoadBrd_ParseString_4
   1027                                // NOW, Build Data String..
   1028                                sprintf( (char *)tempBffr2, "     POWER DATA: " );
   \                     ??RoadBrd_ParseString_147: (+1)
   \   00000BF2   0xF8DF 0x1D94      LDR.W    R1,??RoadBrd_ParseString_144+0x8
   \   00000BF6   0xA810             ADD      R0,SP,#+64
   \   00000BF8   0x.... 0x....      BL       sprintf
   1029                                strcat( (char *)tempBffr2, (char *)PMeasure.Raw );
   \   00000BFC   0xA9BC             ADD      R1,SP,#+752
   \   00000BFE   0x1C49             ADDS     R1,R1,#+1
   \   00000C00   0xA810             ADD      R0,SP,#+64
   \   00000C02   0x.... 0x....      BL       strcat
   1030                                strcat( (char *)tempBffr2, "\r\n" );
   \   00000C06   0xA132             ADR.N    R1,??RoadBrd_ParseString_115  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000C08   0xA810             ADD      R0,SP,#+64
   \   00000C0A   0x.... 0x....      BL       strcat
   1031                              }
   1032                              else
   1033                                break;
   1034          #ifdef NUCLEO
   1035                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1036          #else
   1037                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000C0E   0xA910             ADD      R1,SP,#+64
   \   00000C10   0x2000             MOVS     R0,#+0
   \   00000C12   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000C16   0x0005             MOVS     R5,R0
   1038          #endif
   1039                              if (Status != HAL_OK)
   \   00000C18   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000C1A   0x2D00             CMP      R5,#+0
   \   00000C1C   0xD101             BNE.N    ??RoadBrd_ParseString_148
   \   00000C1E   0xE004             B.N      ??RoadBrd_ParseString_149
   \                     ??RoadBrd_ParseString_146: (+1)
   \   00000C20   0xE053             B.N      ??RoadBrd_ParseString_125
   1040                                return Status;
   \                     ??RoadBrd_ParseString_148: (+1)
   \   00000C22   0x0028             MOVS     R0,R5
   \   00000C24   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000C26   0xF001 0xBD3E      B.W      ??RoadBrd_ParseString_4
   1041                              // Now calculate Power.
   1042                              sprintf( (char *)tempBffr2, "     Power: %s/%s\r\n", (char *)PMeasure.Power, (char *)PMeasureScaled.Power );
   \                     ??RoadBrd_ParseString_149: (+1)
   \   00000C2A   0xABFF             ADD      R3,SP,#+1020
   \   00000C2C   0x3310             ADDS     R3,R3,#+16
   \   00000C2E   0xAABA             ADD      R2,SP,#+744
   \   00000C30   0xF8DF 0x1DB8      LDR.W    R1,??RoadBrd_ParseString_150
   \   00000C34   0xA810             ADD      R0,SP,#+64
   \   00000C36   0x.... 0x....      BL       sprintf
   1043                              break;
   \   00000C3A   0xE046             B.N      ??RoadBrd_ParseString_125
   1044          //------------------ C3 Command...Read Bus Voltage and return results.....
   1045                            case '3':
   1046                              // Read Bus Voltage and return results.....
   1047                              Status = RoadBrd_VMonitor_RdVoltage( &VMeasure );
   \                     ??RoadBrd_ParseString_129: (+1)
   \   00000C3C   0xA844             ADD      R0,SP,#+272
   \   00000C3E   0x.... 0x....      BL       RoadBrd_VMonitor_RdVoltage
   \   00000C42   0x0005             MOVS     R5,R0
   1048                              if (Status == HAL_OK)
   \   00000C44   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000C46   0x2D00             CMP      R5,#+0
   \   00000C48   0xD103             BNE.N    ??RoadBrd_ParseString_151
   1049                                Status = RoadBrd_VMonitor_RdVoltage_Scaled( &VMeasureScaled );
   \   00000C4A   0xA883             ADD      R0,SP,#+524
   \   00000C4C   0x.... 0x....      BL       RoadBrd_VMonitor_RdVoltage_Scaled
   \   00000C50   0x0005             MOVS     R5,R0
   1050                                
   1051                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_151: (+1)
   \   00000C52   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000C54   0x2D00             CMP      R5,#+0
   \   00000C56   0xD126             BNE.N    ??RoadBrd_ParseString_152
   1052                              {
   1053                                // Send string to UART..
   1054                                strcpy( (char *)tempBffr2, "Voltage Monitor/Read Bus Voltage...\r\n");
   \   00000C58   0xF8DF 0x1B40      LDR.W    R1,??RoadBrd_ParseString_117+0x8
   \   00000C5C   0xA810             ADD      R0,SP,#+64
   \   00000C5E   0x.... 0x....      BL       strcpy
   1055          #ifdef NUCLEO
   1056                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1057          #else
   1058                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000C62   0xA910             ADD      R1,SP,#+64
   \   00000C64   0x2000             MOVS     R0,#+0
   \   00000C66   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000C6A   0x0005             MOVS     R5,R0
   1059          #endif
   1060                                if (Status != HAL_OK)
   \   00000C6C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000C6E   0x2D00             CMP      R5,#+0
   \   00000C70   0xD003             BEQ.N    ??RoadBrd_ParseString_153
   1061                                  return Status;
   \   00000C72   0x0028             MOVS     R0,R5
   \   00000C74   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000C76   0xF001 0xBD16      B.W      ??RoadBrd_ParseString_4
   1062                                // NOW, Build Data String..
   1063                                sprintf( (char *)tempBffr2, "     BUS VOLTAGE DATA: " );
   \                     ??RoadBrd_ParseString_153: (+1)
   \   00000C7A   0xF8DF 0x1B8C      LDR.W    R1,??RoadBrd_ParseString_122
   \   00000C7E   0xA810             ADD      R0,SP,#+64
   \   00000C80   0x.... 0x....      BL       sprintf
   1064                                strcat( (char *)tempBffr2, (char *)VMeasure.Raw );
   \   00000C84   0xA946             ADD      R1,SP,#+280
   \   00000C86   0xA810             ADD      R0,SP,#+64
   \   00000C88   0x.... 0x....      BL       strcat
   1065                                strcat( (char *)tempBffr2, "\r\n" );
   \   00000C8C   0xA110             ADR.N    R1,??RoadBrd_ParseString_115  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000C8E   0xA810             ADD      R0,SP,#+64
   \   00000C90   0x.... 0x....      BL       strcat
   1066                              }
   1067                              else
   1068                                break;
   1069          #ifdef NUCLEO
   1070                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1071          #else
   1072                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000C94   0xA910             ADD      R1,SP,#+64
   \   00000C96   0x2000             MOVS     R0,#+0
   \   00000C98   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000C9C   0x0005             MOVS     R5,R0
   1073          #endif
   1074                              if (Status != HAL_OK)
   \   00000C9E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000CA0   0x2D00             CMP      R5,#+0
   \   00000CA2   0xD101             BNE.N    ??RoadBrd_ParseString_154
   \   00000CA4   0xE004             B.N      ??RoadBrd_ParseString_155
   \                     ??RoadBrd_ParseString_152: (+1)
   \   00000CA6   0xE010             B.N      ??RoadBrd_ParseString_125
   1075                                return Status;
   \                     ??RoadBrd_ParseString_154: (+1)
   \   00000CA8   0x0028             MOVS     R0,R5
   \   00000CAA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000CAC   0xF001 0xBCFB      B.W      ??RoadBrd_ParseString_4
   1076                              // Now calculate Bus Voltage.
   1077                              sprintf( (char *)tempBffr2, "     Bus Voltage: %s/%s\r\n", (char *)VMeasure.Voltage, (char *)VMeasureScaled.Voltage );
   \                     ??RoadBrd_ParseString_155: (+1)
   \   00000CB0   0xAB83             ADD      R3,SP,#+524
   \   00000CB2   0xAA44             ADD      R2,SP,#+272
   \   00000CB4   0xF8DF 0x1B54      LDR.W    R1,??RoadBrd_ParseString_122+0x4
   \   00000CB8   0xA810             ADD      R0,SP,#+64
   \   00000CBA   0x.... 0x....      BL       sprintf
   1078                              break;
   \   00000CBE   0xE004             B.N      ??RoadBrd_ParseString_125
   1079                            default:
   1080                              strcpy( (char *)tempBffr2, "ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_130: (+1)
   \   00000CC0   0xF8DF 0x15F0      LDR.W    R1,??RoadBrd_ParseString_67+0x8
   \   00000CC4   0xA810             ADD      R0,SP,#+64
   \   00000CC6   0x.... 0x....      BL       strcpy
   1081                              break;
   1082                          } //EndSwitch
   1083                        } //EndElse (Size == 1)
   1084                        break;
   \                     ??RoadBrd_ParseString_125: (+1)
   \   00000CCA   0xF001 0xBC74      B.W      ??RoadBrd_ParseString_25
   \   00000CCE   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_115:
   \   00000CD0   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
   1085          //**************************************************************************************************
   1086                      case 'D':
   1087                        // Read Humidity. 
   1088                        if (Size == 1)
   \                     ??RoadBrd_ParseString_15: (+1)
   \   00000CD4   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000CD8   0xF1B8 0x0F01      CMP      R8,#+1
   \   00000CDC   0xD155             BNE.N    ??RoadBrd_ParseString_156
   1089                        {
   1090          //------------------ D Command: Read Humidity Values      
   1091                          // Read Humidity Sensor sensor and return Humidity results....
   1092                          Status = RoadBrd_Humidity_ReadHumidity( &HMeasure );
   \   00000CDE   0xA83F             ADD      R0,SP,#+252
   \   00000CE0   0x.... 0x....      BL       RoadBrd_Humidity_ReadHumidity
   \   00000CE4   0x0005             MOVS     R5,R0
   1093                          if (Status == HAL_OK)
   \   00000CE6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000CE8   0x2D00             CMP      R5,#+0
   \   00000CEA   0xD103             BNE.N    ??RoadBrd_ParseString_157
   1094                            Status = RoadBrd_Humidity_ReadHumidity_Scaled( &HMeasureScaled );
   \   00000CEC   0xA8F8             ADD      R0,SP,#+992
   \   00000CEE   0x.... 0x....      BL       RoadBrd_Humidity_ReadHumidity_Scaled
   \   00000CF2   0x0005             MOVS     R5,R0
   1095                          if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_157: (+1)
   \   00000CF4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000CF6   0x2D00             CMP      R5,#+0
   \   00000CF8   0xD126             BNE.N    ??RoadBrd_ParseString_158
   1096                          {
   1097                            // Send string to UART..
   1098                            strcpy( (char *)tempBffr2, "Humidity SENSOR...\r\n");
   \   00000CFA   0xF8DF 0x1D98      LDR.W    R1,??RoadBrd_ParseString_159
   \   00000CFE   0xA810             ADD      R0,SP,#+64
   \   00000D00   0x.... 0x....      BL       strcpy
   1099          #ifdef NUCLEO
   1100                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1101          #else
   1102                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000D04   0xA910             ADD      R1,SP,#+64
   \   00000D06   0x2000             MOVS     R0,#+0
   \   00000D08   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000D0C   0x0005             MOVS     R5,R0
   1103          #endif
   1104                            if (Status != HAL_OK)
   \   00000D0E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000D10   0x2D00             CMP      R5,#+0
   \   00000D12   0xD003             BEQ.N    ??RoadBrd_ParseString_160
   1105                              return Status;
   \   00000D14   0x0028             MOVS     R0,R5
   \   00000D16   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000D18   0xF001 0xBCC5      B.W      ??RoadBrd_ParseString_4
   1106                            // NOW, Build Data String..
   1107                            sprintf( (char *)tempBffr2, "     Humidity DATA: " );
   \                     ??RoadBrd_ParseString_160: (+1)
   \   00000D1C   0xF8DF 0x1D78      LDR.W    R1,??RoadBrd_ParseString_159+0x4
   \   00000D20   0xA810             ADD      R0,SP,#+64
   \   00000D22   0x.... 0x....      BL       sprintf
   1108                            strcat( (char *)tempBffr2, (char *)HMeasure.HRaw );
   \   00000D26   0xA941             ADD      R1,SP,#+260
   \   00000D28   0xA810             ADD      R0,SP,#+64
   \   00000D2A   0x.... 0x....      BL       strcat
   1109                            strcat( (char *)tempBffr2, "\r\n" );
   \   00000D2E   0xA1BD             ADR.N    R1,??RoadBrd_ParseString_37+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000D30   0xA810             ADD      R0,SP,#+64
   \   00000D32   0x.... 0x....      BL       strcat
   1110                          }
   1111                          else
   1112                            break;
   1113          #ifdef NUCLEO
   1114                          Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1115          #else
   1116                          Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000D36   0xA910             ADD      R1,SP,#+64
   \   00000D38   0x2000             MOVS     R0,#+0
   \   00000D3A   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000D3E   0x0005             MOVS     R5,R0
   1117          #endif
   1118                          if (Status != HAL_OK)
   \   00000D40   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000D42   0x2D00             CMP      R5,#+0
   \   00000D44   0xD102             BNE.N    ??RoadBrd_ParseString_161
   \   00000D46   0xE005             B.N      ??RoadBrd_ParseString_162
   \                     ??RoadBrd_ParseString_158: (+1)
   \   00000D48   0xF001 0xBC35      B.W      ??RoadBrd_ParseString_25
   1119                            return Status;
   \                     ??RoadBrd_ParseString_161: (+1)
   \   00000D4C   0x0028             MOVS     R0,R5
   \   00000D4E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000D50   0xF001 0xBCA9      B.W      ??RoadBrd_ParseString_4
   1120                          // NOW, Build Data String..
   1121                          sprintf( (char *)tempBffr2, "     Humidity DATA(Decimal): %d\r\n", HMeasure.HRawC );
   \                     ??RoadBrd_ParseString_162: (+1)
   \   00000D54   0xF8BD 0x210C      LDRH     R2,[SP, #+268]
   \   00000D58   0xF8DF 0x1D40      LDR.W    R1,??RoadBrd_ParseString_159+0x8
   \   00000D5C   0xA810             ADD      R0,SP,#+64
   \   00000D5E   0x.... 0x....      BL       sprintf
   1122          #ifdef NUCLEO
   1123                          Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1124          #else
   1125                          Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000D62   0xA910             ADD      R1,SP,#+64
   \   00000D64   0x2000             MOVS     R0,#+0
   \   00000D66   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000D6A   0x0005             MOVS     R5,R0
   1126          #endif
   1127                          if (Status != HAL_OK)
   \   00000D6C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000D6E   0x2D00             CMP      R5,#+0
   \   00000D70   0xD003             BEQ.N    ??RoadBrd_ParseString_163
   1128                            return Status;
   \   00000D72   0x0028             MOVS     R0,R5
   \   00000D74   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000D76   0xF001 0xBC96      B.W      ??RoadBrd_ParseString_4
   1129                          // Now calculate Celcius and Farenheit Temp.
   1130                          sprintf( (char *)tempBffr2, "     Humidity: %s/%s\r\n", (char *)HMeasure.Humidity, (char *)HMeasureScaled.Humidity );
   \                     ??RoadBrd_ParseString_163: (+1)
   \   00000D7A   0xABF8             ADD      R3,SP,#+992
   \   00000D7C   0xAA3F             ADD      R2,SP,#+252
   \   00000D7E   0xF8DF 0x1D20      LDR.W    R1,??RoadBrd_ParseString_159+0xC
   \   00000D82   0xA810             ADD      R0,SP,#+64
   \   00000D84   0x.... 0x....      BL       sprintf
   \   00000D88   0xE0CE             B.N      ??RoadBrd_ParseString_164
   1131                        }
   1132                        else
   1133                        {
   1134                          switch( tempBffr[1] )
   \                     ??RoadBrd_ParseString_156: (+1)
   \   00000D8A   0x7860             LDRB     R0,[R4, #+1]
   \   00000D8C   0x2830             CMP      R0,#+48
   \   00000D8E   0xD015             BEQ.N    ??RoadBrd_ParseString_165
   \   00000D90   0x2831             CMP      R0,#+49
   \   00000D92   0xD067             BEQ.N    ??RoadBrd_ParseString_166
   \   00000D94   0x2849             CMP      R0,#+73
   \   00000D96   0xF040 0x80C7      BNE.W    ??RoadBrd_ParseString_164
   1135                          {
   1136          //------------------ DI Command: Initialize Humidity Sensor
   1137                            case 'I':
   1138                              // Initialize Humidity Sensor.
   1139                              Status = RoadBrd_HumidityInit();
   \                     ??RoadBrd_ParseString_167: (+1)
   \   00000D9A   0x.... 0x....      BL       RoadBrd_HumidityInit
   \   00000D9E   0x0005             MOVS     R5,R0
   1140                              if (Status == HAL_OK)
   \   00000DA0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000DA2   0x2D00             CMP      R5,#+0
   \   00000DA4   0xD104             BNE.N    ??RoadBrd_ParseString_168
   1141                              {
   1142                                strcpy( (char *)tempBffr2, "Humidity Sensor: Initialization Complete.\r\n");;
   \   00000DA6   0xF8DF 0x1DDC      LDR.W    R1,??RoadBrd_ParseString_169
   \   00000DAA   0xA810             ADD      R0,SP,#+64
   \   00000DAC   0x.... 0x....      BL       strcpy
   1143                              }
   1144                              break;
   \                     ??RoadBrd_ParseString_168: (+1)
   \   00000DB0   0xE0BA             B.N      ??RoadBrd_ParseString_164
   \   00000DB2   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_0:
   \   00000DB4   0x........         DC32     Bypass
   \   00000DB8   0x........         DC32     ?_0
   1145          //------------------ D0 Command...Read Humidity Values.....
   1146                            case '0':
   1147                              // Read Humidity Sensor sensor and return Humidity results....
   1148                              Status = RoadBrd_Humidity_ReadHumidity( &HMeasure );
   \                     ??RoadBrd_ParseString_165: (+1)
   \   00000DBC   0xA83F             ADD      R0,SP,#+252
   \   00000DBE   0x.... 0x....      BL       RoadBrd_Humidity_ReadHumidity
   \   00000DC2   0x0005             MOVS     R5,R0
   1149                              if (Status == HAL_OK)
   \   00000DC4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000DC6   0x2D00             CMP      R5,#+0
   \   00000DC8   0xD126             BNE.N    ??RoadBrd_ParseString_170
   1150                              {
   1151                                // Send string to UART..
   1152                                strcpy( (char *)tempBffr2, "Humidity SENSOR...\r\n");
   \   00000DCA   0xF8DF 0x1CC8      LDR.W    R1,??RoadBrd_ParseString_159
   \   00000DCE   0xA810             ADD      R0,SP,#+64
   \   00000DD0   0x.... 0x....      BL       strcpy
   1153          #ifdef NUCLEO
   1154                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1155          #else
   1156                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000DD4   0xA910             ADD      R1,SP,#+64
   \   00000DD6   0x2000             MOVS     R0,#+0
   \   00000DD8   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000DDC   0x0005             MOVS     R5,R0
   1157          #endif
   1158                                if (Status != HAL_OK)
   \   00000DDE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000DE0   0x2D00             CMP      R5,#+0
   \   00000DE2   0xD003             BEQ.N    ??RoadBrd_ParseString_171
   1159                                  return Status;
   \   00000DE4   0x0028             MOVS     R0,R5
   \   00000DE6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000DE8   0xF001 0xBC5D      B.W      ??RoadBrd_ParseString_4
   1160                                // NOW, Build Data String..
   1161                                sprintf( (char *)tempBffr2, "     Humidity DATA: " );
   \                     ??RoadBrd_ParseString_171: (+1)
   \   00000DEC   0xF8DF 0x1CA8      LDR.W    R1,??RoadBrd_ParseString_159+0x4
   \   00000DF0   0xA810             ADD      R0,SP,#+64
   \   00000DF2   0x.... 0x....      BL       sprintf
   1162                                strcat( (char *)tempBffr2, (char *)HMeasure.HRaw );
   \   00000DF6   0xA941             ADD      R1,SP,#+260
   \   00000DF8   0xA810             ADD      R0,SP,#+64
   \   00000DFA   0x.... 0x....      BL       strcat
   1163                                strcat( (char *)tempBffr2, "\r\n" );
   \   00000DFE   0xA189             ADR.N    R1,??RoadBrd_ParseString_37+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000E00   0xA810             ADD      R0,SP,#+64
   \   00000E02   0x.... 0x....      BL       strcat
   1164                              }
   1165                              else
   1166                                break;
   1167          #ifdef NUCLEO
   1168                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1169          #else
   1170                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000E06   0xA910             ADD      R1,SP,#+64
   \   00000E08   0x2000             MOVS     R0,#+0
   \   00000E0A   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000E0E   0x0005             MOVS     R5,R0
   1171          #endif
   1172                              if (Status != HAL_OK)
   \   00000E10   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000E12   0x2D00             CMP      R5,#+0
   \   00000E14   0xD101             BNE.N    ??RoadBrd_ParseString_172
   \   00000E16   0xE004             B.N      ??RoadBrd_ParseString_173
   \                     ??RoadBrd_ParseString_170: (+1)
   \   00000E18   0xE086             B.N      ??RoadBrd_ParseString_164
   1173                                return Status;
   \                     ??RoadBrd_ParseString_172: (+1)
   \   00000E1A   0x0028             MOVS     R0,R5
   \   00000E1C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000E1E   0xF001 0xBC42      B.W      ??RoadBrd_ParseString_4
   1174                              // NOW, Build Data String..
   1175                              sprintf( (char *)tempBffr2, "     Humidity DATA(Decimal): %d\r\n", HMeasure.HRawC );
   \                     ??RoadBrd_ParseString_173: (+1)
   \   00000E22   0xF8BD 0x210C      LDRH     R2,[SP, #+268]
   \   00000E26   0xF8DF 0x1C74      LDR.W    R1,??RoadBrd_ParseString_159+0x8
   \   00000E2A   0xA810             ADD      R0,SP,#+64
   \   00000E2C   0x.... 0x....      BL       sprintf
   1176          #ifdef NUCLEO
   1177                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1178          #else
   1179                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000E30   0xA910             ADD      R1,SP,#+64
   \   00000E32   0x2000             MOVS     R0,#+0
   \   00000E34   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000E38   0x0005             MOVS     R5,R0
   1180          #endif
   1181                              if (Status != HAL_OK)
   \   00000E3A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000E3C   0x2D00             CMP      R5,#+0
   \   00000E3E   0xD003             BEQ.N    ??RoadBrd_ParseString_174
   1182                                return Status;
   \   00000E40   0x0028             MOVS     R0,R5
   \   00000E42   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000E44   0xF001 0xBC2F      B.W      ??RoadBrd_ParseString_4
   1183                              // Now calculate Humidity.
   1184                              sprintf( (char *)tempBffr2, "     Humidity: " );
   \                     ??RoadBrd_ParseString_174: (+1)
   \   00000E48   0xF8DF 0x1D98      LDR.W    R1,??RoadBrd_ParseString_175+0x4
   \   00000E4C   0xA810             ADD      R0,SP,#+64
   \   00000E4E   0x.... 0x....      BL       sprintf
   1185                              strcat( (char *)tempBffr2, (char *)HMeasure.Humidity );
   \   00000E52   0xA93F             ADD      R1,SP,#+252
   \   00000E54   0xA810             ADD      R0,SP,#+64
   \   00000E56   0x.... 0x....      BL       strcat
   1186                              strcat( (char *)tempBffr2, "\r\n" );
   \   00000E5A   0xA172             ADR.N    R1,??RoadBrd_ParseString_37+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000E5C   0xA810             ADD      R0,SP,#+64
   \   00000E5E   0x.... 0x....      BL       strcat
   1187                              break;
   \   00000E62   0xE061             B.N      ??RoadBrd_ParseString_164
   1188          //------------------ D1 Command...Read Temperature Values..... 
   1189                            case '1':
   1190                              // Read Humidity Sensor sensor and return Temperature results....
   1191                              Status = RoadBrd_Humidity_ReadTemperature( &TMeasure );
   \                     ??RoadBrd_ParseString_166: (+1)
   \   00000E64   0xA838             ADD      R0,SP,#+224
   \   00000E66   0x.... 0x....      BL       RoadBrd_Humidity_ReadTemperature
   \   00000E6A   0x0005             MOVS     R5,R0
   1192                              if (Status == HAL_OK)
   \   00000E6C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000E6E   0x2D00             CMP      R5,#+0
   \   00000E70   0xD12E             BNE.N    ??RoadBrd_ParseString_176
   1193                              {
   1194                                // Send string to UART..
   1195                                strcpy( (char *)tempBffr2, "Humidity SENSOR...\r\n");
   \   00000E72   0xF8DF 0x1C20      LDR.W    R1,??RoadBrd_ParseString_159
   \   00000E76   0xA810             ADD      R0,SP,#+64
   \   00000E78   0x.... 0x....      BL       strcpy
   1196          #ifdef NUCLEO
   1197                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1198          #else
   1199                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000E7C   0xA910             ADD      R1,SP,#+64
   \   00000E7E   0x2000             MOVS     R0,#+0
   \   00000E80   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000E84   0x0005             MOVS     R5,R0
   1200          #endif
   1201                                if (Status != HAL_OK)
   \   00000E86   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000E88   0x2D00             CMP      R5,#+0
   \   00000E8A   0xD00B             BEQ.N    ??RoadBrd_ParseString_177
   1202                                  return Status;
   \   00000E8C   0x0028             MOVS     R0,R5
   \   00000E8E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000E90   0xF001 0xBC09      B.W      ??RoadBrd_ParseString_4
   \                     ??RoadBrd_ParseString_24:
   \   00000E94   0x........         DC32     ?_1
   \   00000E98   0x........         DC32     ?_2
   \   00000E9C   0x........         DC32     ?_3
   \   00000EA0   0x........         DC32     ?_5
   1203                                // NOW, Build Data String..
   1204                                sprintf( (char *)tempBffr2, "     TEMP DATA: " );
   \                     ??RoadBrd_ParseString_177: (+1)
   \   00000EA4   0x49DA             LDR.N    R1,??RoadBrd_ParseString_59+0x4
   \   00000EA6   0xA810             ADD      R0,SP,#+64
   \   00000EA8   0x.... 0x....      BL       sprintf
   1205                                strcat( (char *)tempBffr2, (char *)TMeasure.Raw );
   \   00000EAC   0xF10D 0x01EE      ADD      R1,SP,#+238
   \   00000EB0   0xA810             ADD      R0,SP,#+64
   \   00000EB2   0x.... 0x....      BL       strcat
   1206                                strcat( (char *)tempBffr2, "\r\n" );
   \   00000EB6   0xA15B             ADR.N    R1,??RoadBrd_ParseString_37+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000EB8   0xA810             ADD      R0,SP,#+64
   \   00000EBA   0x.... 0x....      BL       strcat
   1207                              }
   1208                              else
   1209                                break;
   1210          #ifdef NUCLEO
   1211                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1212          #else
   1213                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000EBE   0xA910             ADD      R1,SP,#+64
   \   00000EC0   0x2000             MOVS     R0,#+0
   \   00000EC2   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000EC6   0x0005             MOVS     R5,R0
   1214          #endif
   1215                              if (Status != HAL_OK)
   \   00000EC8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000ECA   0x2D00             CMP      R5,#+0
   \   00000ECC   0xD101             BNE.N    ??RoadBrd_ParseString_178
   \   00000ECE   0xE004             B.N      ??RoadBrd_ParseString_179
   \                     ??RoadBrd_ParseString_176: (+1)
   \   00000ED0   0xE02A             B.N      ??RoadBrd_ParseString_164
   1216                                return Status;
   \                     ??RoadBrd_ParseString_178: (+1)
   \   00000ED2   0x0028             MOVS     R0,R5
   \   00000ED4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000ED6   0xF001 0xBBE6      B.W      ??RoadBrd_ParseString_4
   1217                              // NOW, Build Data String..
   1218                              sprintf( (char *)tempBffr2, "     TEMP DATA(Decimal): %d\r\n", TMeasure.RawC );
   \                     ??RoadBrd_ParseString_179: (+1)
   \   00000EDA   0xF8BD 0x20F6      LDRH     R2,[SP, #+246]
   \   00000EDE   0x49DE             LDR.N    R1,??RoadBrd_ParseString_64
   \   00000EE0   0xA810             ADD      R0,SP,#+64
   \   00000EE2   0x.... 0x....      BL       sprintf
   1219          #ifdef NUCLEO
   1220                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1221          #else
   1222                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000EE6   0xA910             ADD      R1,SP,#+64
   \   00000EE8   0x2000             MOVS     R0,#+0
   \   00000EEA   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000EEE   0x0005             MOVS     R5,R0
   1223          #endif
   1224                              if (Status != HAL_OK)
   \   00000EF0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000EF2   0x2D00             CMP      R5,#+0
   \   00000EF4   0xD003             BEQ.N    ??RoadBrd_ParseString_180
   1225                                return Status;
   \   00000EF6   0x0028             MOVS     R0,R5
   \   00000EF8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000EFA   0xF001 0xBBD4      B.W      ??RoadBrd_ParseString_4
   1226                              // Now calculate Celcius and Farenheit Temp.
   1227                              sprintf( (char *)tempBffr2, "     TempC: " );
   \                     ??RoadBrd_ParseString_180: (+1)
   \   00000EFE   0x49D7             LDR.N    R1,??RoadBrd_ParseString_64+0x4
   \   00000F00   0xA810             ADD      R0,SP,#+64
   \   00000F02   0x.... 0x....      BL       sprintf
   1228                              strcat( (char *)tempBffr2, (char *)TMeasure.TempC );
   \   00000F06   0xA938             ADD      R1,SP,#+224
   \   00000F08   0xA810             ADD      R0,SP,#+64
   \   00000F0A   0x.... 0x....      BL       strcat
   1229                              strcat( (char *)tempBffr2, "     TempF: " );
   \   00000F0E   0x49D4             LDR.N    R1,??RoadBrd_ParseString_64+0x8
   \   00000F10   0xA810             ADD      R0,SP,#+64
   \   00000F12   0x.... 0x....      BL       strcat
   1230                              strcat( (char *)tempBffr2, (char *)TMeasure.TempF );
   \   00000F16   0xF10D 0x01E7      ADD      R1,SP,#+231
   \   00000F1A   0xA810             ADD      R0,SP,#+64
   \   00000F1C   0x.... 0x....      BL       strcat
   1231                              strcat( (char *)tempBffr2, "\r\n" );
   \   00000F20   0xA140             ADR.N    R1,??RoadBrd_ParseString_37+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000F22   0xA810             ADD      R0,SP,#+64
   \   00000F24   0x.... 0x....      BL       strcat
   1232                              break;
   1233                          } //EndSwitch
   1234                        } //EndElse (Size == 1)
   1235                        break;
   \                     ??RoadBrd_ParseString_164: (+1)
   \   00000F28   0xF001 0xBB45      B.W      ??RoadBrd_ParseString_25
   1236          //**************************************************************************************************
   1237                      case 'E':
   1238                        // Read Temp and Pressure. 
   1239                        strcpy( (char *)tempBffr2, "TBD: Read Temp and Pressure NOT IMPLEMENTED\r\n");
   \                     ??RoadBrd_ParseString_16: (+1)
   \   00000F2C   0xF8DF 0x1DA8      LDR.W    R1,??RoadBrd_ParseString_181
   \   00000F30   0xA810             ADD      R0,SP,#+64
   \   00000F32   0x.... 0x....      BL       strcpy
   1240                        break;
   \   00000F36   0xF001 0xBB3E      B.W      ??RoadBrd_ParseString_25
   1241          //**************************************************************************************************
   1242                      case 'F':
   1243                        // NO ACTION. 
   1244                        strcpy( (char *)tempBffr2, "NO Action...(0x00).\r\n");
   \                     ??RoadBrd_ParseString_17: (+1)
   \   00000F3A   0xF8DF 0x1DDC      LDR.W    R1,??RoadBrd_ParseString_182
   \   00000F3E   0xA810             ADD      R0,SP,#+64
   \   00000F40   0x.... 0x....      BL       strcpy
   1245                        break;
   \   00000F44   0xF001 0xBB37      B.W      ??RoadBrd_ParseString_25
   \                     ??RoadBrd_ParseString_29:
   \   00000F48   0x........         DC32     ?_6
   \   00000F4C   0x........         DC32     ?_7
   \   00000F50   0x........         DC32     ?_8
   1246          //**************************************************************************************************
   1247                      case 'G':
   1248                        // Read Temperature sensor and return results....Temperature Sensor U10(PCT2075GVJ).  Addr: 0x94
   1249                        Status = RoadBrd_ReadTemp( &TMeasure );
   \                     ??RoadBrd_ParseString_18: (+1)
   \   00000F54   0xA838             ADD      R0,SP,#+224
   \   00000F56   0x.... 0x....      BL       RoadBrd_ReadTemp
   \   00000F5A   0x0005             MOVS     R5,R0
   1250                        if (Status == HAL_OK)
   \   00000F5C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000F5E   0x2D00             CMP      R5,#+0
   \   00000F60   0xD103             BNE.N    ??RoadBrd_ParseString_183
   1251                          Status = RoadBrd_ReadTemp_Scaled( &TMeasureScaled );
   \   00000F62   0xA8FD             ADD      R0,SP,#+1012
   \   00000F64   0x.... 0x....      BL       RoadBrd_ReadTemp_Scaled
   \   00000F68   0x0005             MOVS     R5,R0
   1252                        if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_183: (+1)
   \   00000F6A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000F6C   0x2D00             CMP      R5,#+0
   \   00000F6E   0xD12D             BNE.N    ??RoadBrd_ParseString_184
   1253                        {
   1254                          // Send string to UART..
   1255                          strcpy( (char *)tempBffr2, "TEMP SENSOR...\r\n");
   \   00000F70   0xF8DF 0x1DA8      LDR.W    R1,??RoadBrd_ParseString_182+0x4
   \   00000F74   0xA810             ADD      R0,SP,#+64
   \   00000F76   0x.... 0x....      BL       strcpy
   1256          #ifdef NUCLEO
   1257                          Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1258          #else
   1259                          Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000F7A   0xA910             ADD      R1,SP,#+64
   \   00000F7C   0x2000             MOVS     R0,#+0
   \   00000F7E   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000F82   0x0005             MOVS     R5,R0
   1260          #endif
   1261                          if (Status != HAL_OK)
   \   00000F84   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000F86   0x2D00             CMP      R5,#+0
   \   00000F88   0xD003             BEQ.N    ??RoadBrd_ParseString_185
   1262                            return Status;
   \   00000F8A   0x0028             MOVS     R0,R5
   \   00000F8C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000F8E   0xF001 0xBB8A      B.W      ??RoadBrd_ParseString_4
   1263                          // NOW, Build Data String..
   1264                          sprintf( (char *)tempBffr2, "     TEMP DATA: " );
   \                     ??RoadBrd_ParseString_185: (+1)
   \   00000F92   0x499F             LDR.N    R1,??RoadBrd_ParseString_59+0x4
   \   00000F94   0xA810             ADD      R0,SP,#+64
   \   00000F96   0x.... 0x....      BL       sprintf
   1265                          strcat( (char *)tempBffr2, (char *)TMeasure.Raw );
   \   00000F9A   0xF10D 0x01EE      ADD      R1,SP,#+238
   \   00000F9E   0xA810             ADD      R0,SP,#+64
   \   00000FA0   0x.... 0x....      BL       strcat
   1266                          strcat( (char *)tempBffr2, "\r\n" );
   \   00000FA4   0xA11F             ADR.N    R1,??RoadBrd_ParseString_37+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000FA6   0xA810             ADD      R0,SP,#+64
   \   00000FA8   0x.... 0x....      BL       strcat
   1267                        }
   1268                        else
   1269                          break;
   1270          #ifdef NUCLEO
   1271                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1272          #else
   1273                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000FAC   0xA910             ADD      R1,SP,#+64
   \   00000FAE   0x2000             MOVS     R0,#+0
   \   00000FB0   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000FB4   0x0005             MOVS     R5,R0
   1274          #endif
   1275                        if (Status != HAL_OK)
   \   00000FB6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000FB8   0x2D00             CMP      R5,#+0
   \   00000FBA   0xD109             BNE.N    ??RoadBrd_ParseString_186
   \   00000FBC   0xE00C             B.N      ??RoadBrd_ParseString_187
   \   00000FBE   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_31:
   \   00000FC0   0x........         DC32     ?_9
   \   00000FC4   0x........         DC32     ?_10
   \   00000FC8   0x........         DC32     ?_11
   \                     ??RoadBrd_ParseString_184: (+1)
   \   00000FCC   0xF001 0xBAF3      B.W      ??RoadBrd_ParseString_25
   1276                          return Status;
   \                     ??RoadBrd_ParseString_186: (+1)
   \   00000FD0   0x0028             MOVS     R0,R5
   \   00000FD2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000FD4   0xF001 0xBB67      B.W      ??RoadBrd_ParseString_4
   1277                        // NOW, Build Data String..
   1278                        sprintf( (char *)tempBffr2, "     TEMP DATA(Decimal): %d\r\n", TMeasure.RawC );
   \                     ??RoadBrd_ParseString_187: (+1)
   \   00000FD8   0xF8BD 0x20F6      LDRH     R2,[SP, #+246]
   \   00000FDC   0x499E             LDR.N    R1,??RoadBrd_ParseString_64
   \   00000FDE   0xA810             ADD      R0,SP,#+64
   \   00000FE0   0x.... 0x....      BL       sprintf
   1279          #ifdef NUCLEO
   1280                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1281          #else
   1282                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000FE4   0xA910             ADD      R1,SP,#+64
   \   00000FE6   0x2000             MOVS     R0,#+0
   \   00000FE8   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000FEC   0x0005             MOVS     R5,R0
   1283          #endif
   1284                        if (Status != HAL_OK)
   \   00000FEE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000FF0   0x2D00             CMP      R5,#+0
   \   00000FF2   0xD003             BEQ.N    ??RoadBrd_ParseString_188
   1285                          return Status;
   \   00000FF4   0x0028             MOVS     R0,R5
   \   00000FF6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000FF8   0xF001 0xBB55      B.W      ??RoadBrd_ParseString_4
   1286                        // Now calculate Celcius and Farenheit Temp.
   1287                        sprintf( (char *)tempBffr2, "     TempC: %s/%s     TempF: %s/%s\r\n", 
   1288                                (char *)TMeasure.TempC, 
   1289                                (char *)TMeasureScaled.TempC,
   1290                                (char *)TMeasure.TempF, 
   1291                                (char *)TMeasureScaled.TempF);
   \                     ??RoadBrd_ParseString_188: (+1)
   \   00000FFC   0xA8FE             ADD      R0,SP,#+1016
   \   00000FFE   0x1CC0             ADDS     R0,R0,#+3
   \   00001000   0x9001             STR      R0,[SP, #+4]
   \   00001002   0xF10D 0x00E7      ADD      R0,SP,#+231
   \   00001006   0x9000             STR      R0,[SP, #+0]
   \   00001008   0xABFD             ADD      R3,SP,#+1012
   \   0000100A   0xAA38             ADD      R2,SP,#+224
   \   0000100C   0xF8DF 0x1DC4      LDR.W    R1,??RoadBrd_ParseString_189
   \   00001010   0xA810             ADD      R0,SP,#+64
   \   00001012   0x.... 0x....      BL       sprintf
   1292                        break;
   \   00001016   0xF001 0xBACE      B.W      ??RoadBrd_ParseString_25
   \   0000101A   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_37:
   \   0000101C   0x........         DC32     ?_13
   \   00001020   0x........         DC32     ?_14
   \   00001024   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
   \   00001028   0x........         DC32     ?_15
   \   0000102C   0x........         DC32     ?_16
   1293          //**************************************************************************************************
   1294                      case 'H':
   1295                        // RGB Color Light Sensor U15(ISL91250).  Addr: 0x88
   1296                        if (Size == 1)
   \                     ??RoadBrd_ParseString_19: (+1)
   \   00001030   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00001034   0xF1B8 0x0F01      CMP      R8,#+1
   \   00001038   0xD168             BNE.N    ??RoadBrd_ParseString_190
   1297                        {
   1298          //------------------ H Command...Read RGB Values and Return as 3 (2 Byte Fields)....REDmsb,REDlsb,GREENmsb,GREENlsb,BLUEmsb,BLUElsb.....     
   1299                          // 1. Time to send Command and collect status.
   1300                          Status = RoadBrd_RGBReadValues( &RGBValues );
   \   0000103A   0xA8B0             ADD      R0,SP,#+704
   \   0000103C   0x.... 0x....      BL       RoadBrd_RGBReadValues
   \   00001040   0x0005             MOVS     R5,R0
   1301                          if (Status == HAL_OK)
   \   00001042   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001044   0x2D00             CMP      R5,#+0
   \   00001046   0xD15F             BNE.N    ??RoadBrd_ParseString_191
   1302                          {
   1303                            // Send string to UART..
   1304                            strcpy( (char *)tempBffr2, "RGB Color Light Sensor...\r\n");
   \   00001048   0xF8DF 0x1DC8      LDR.W    R1,??RoadBrd_ParseString_192
   \   0000104C   0xA810             ADD      R0,SP,#+64
   \   0000104E   0x.... 0x....      BL       strcpy
   1305          #ifdef NUCLEO
   1306                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1307          #else
   1308                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00001052   0xA910             ADD      R1,SP,#+64
   \   00001054   0x2000             MOVS     R0,#+0
   \   00001056   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000105A   0x0005             MOVS     R5,R0
   1309          #endif
   1310                            if (Status != HAL_OK)
   \   0000105C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000105E   0x2D00             CMP      R5,#+0
   \   00001060   0xD003             BEQ.N    ??RoadBrd_ParseString_193
   1311                              return Status;
   \   00001062   0x0028             MOVS     R0,R5
   \   00001064   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001066   0xF001 0xBB1E      B.W      ??RoadBrd_ParseString_4
   1312                            // NOW, Build Data String..
   1313                            sprintf( (char *)tempBffr2, " RGB(REDmsb,REDlsb,GREENmsb,GREENlsb,BLUEmsb,BLUElsb)\r\n" );
   \                     ??RoadBrd_ParseString_193: (+1)
   \   0000106A   0xF8DF 0x1DAC      LDR.W    R1,??RoadBrd_ParseString_192+0x4
   \   0000106E   0xA810             ADD      R0,SP,#+64
   \   00001070   0x.... 0x....      BL       sprintf
   1314          #ifdef NUCLEO
   1315                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1316          #else
   1317                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00001074   0xA910             ADD      R1,SP,#+64
   \   00001076   0x2000             MOVS     R0,#+0
   \   00001078   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000107C   0x0005             MOVS     R5,R0
   1318          #endif
   1319                            if (Status != HAL_OK)
   \   0000107E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001080   0x2D00             CMP      R5,#+0
   \   00001082   0xD003             BEQ.N    ??RoadBrd_ParseString_194
   1320                              return Status;
   \   00001084   0x0028             MOVS     R0,R5
   \   00001086   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001088   0xF001 0xBB0D      B.W      ??RoadBrd_ParseString_4
   1321                            strcpy( (char *)tempBffr2, "       DATA: ");
   \                     ??RoadBrd_ParseString_194: (+1)
   \   0000108C   0xF8DF 0x1DC8      LDR.W    R1,??RoadBrd_ParseString_195
   \   00001090   0xA810             ADD      R0,SP,#+64
   \   00001092   0x.... 0x....      BL       strcpy
   1322                            strcat( (char *)tempBffr2, (char *)RGBValues.Raw );
   \   00001096   0xA9B6             ADD      R1,SP,#+728
   \   00001098   0xA810             ADD      R0,SP,#+64
   \   0000109A   0x.... 0x....      BL       strcat
   1323                            strcat( (char *)tempBffr2, "\r\n" );
   \   0000109E   0xA1CE             ADR.N    R1,??RoadBrd_ParseString_88+0x4  ;; 0x0D, 0x0A, 0x00, 0x00
   \   000010A0   0xA810             ADD      R0,SP,#+64
   \   000010A2   0x.... 0x....      BL       strcat
   1324          #ifdef NUCLEO
   1325                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1326          #else
   1327                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000010A6   0xA910             ADD      R1,SP,#+64
   \   000010A8   0x2000             MOVS     R0,#+0
   \   000010AA   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000010AE   0x0005             MOVS     R5,R0
   1328          #endif
   1329                            if (Status != HAL_OK)
   \   000010B0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000010B2   0x2D00             CMP      R5,#+0
   \   000010B4   0xD003             BEQ.N    ??RoadBrd_ParseString_196
   1330                              return Status;
   \   000010B6   0x0028             MOVS     R0,R5
   \   000010B8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000010BA   0xF001 0xBAF4      B.W      ??RoadBrd_ParseString_4
   1331                            // Now DisplayEach Value Calculated.
   1332                            strcpy( (char *)tempBffr2, "    Red: ");
   \                     ??RoadBrd_ParseString_196: (+1)
   \   000010BE   0xF8DF 0x1D9C      LDR.W    R1,??RoadBrd_ParseString_195+0x4
   \   000010C2   0xA810             ADD      R0,SP,#+64
   \   000010C4   0x.... 0x....      BL       strcpy
   1333                            strcat( (char *)tempBffr2, (char *)RGBValues.Red );
   \   000010C8   0xA9B0             ADD      R1,SP,#+704
   \   000010CA   0xA810             ADD      R0,SP,#+64
   \   000010CC   0x.... 0x....      BL       strcat
   1334                            strcat( (char *)tempBffr2, "    Green: ");
   \   000010D0   0xF8DF 0x1D8C      LDR.W    R1,??RoadBrd_ParseString_195+0x8
   \   000010D4   0xA810             ADD      R0,SP,#+64
   \   000010D6   0x.... 0x....      BL       strcat
   1335                            strcat( (char *)tempBffr2, (char *)RGBValues.Green );
   \   000010DA   0xA9B2             ADD      R1,SP,#+712
   \   000010DC   0xA810             ADD      R0,SP,#+64
   \   000010DE   0x.... 0x....      BL       strcat
   1336                            strcat( (char *)tempBffr2, "    Blue: ");
   \   000010E2   0xF8DF 0x1D80      LDR.W    R1,??RoadBrd_ParseString_195+0xC
   \   000010E6   0xA810             ADD      R0,SP,#+64
   \   000010E8   0x.... 0x....      BL       strcat
   1337                            strcat( (char *)tempBffr2, (char *)RGBValues.Blue );
   \   000010EC   0xA9B4             ADD      R1,SP,#+720
   \   000010EE   0xA810             ADD      R0,SP,#+64
   \   000010F0   0x.... 0x....      BL       strcat
   1338                            strcat( (char *)tempBffr2, "\r\n" );
   \   000010F4   0xA1B8             ADR.N    R1,??RoadBrd_ParseString_88+0x4  ;; 0x0D, 0x0A, 0x00, 0x00
   \   000010F6   0xA810             ADD      R0,SP,#+64
   \   000010F8   0x.... 0x....      BL       strcat
   \   000010FC   0xE22E             B.N      ??RoadBrd_ParseString_197
   \   000010FE   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_48:
   \   00001100   0x........         DC32     ?_17
   \   00001104   0x........         DC32     ?_18
   1339                          }
   1340                          else
   1341                            break;
   \                     ??RoadBrd_ParseString_191: (+1)
   \   00001108   0xF001 0xBA55      B.W      ??RoadBrd_ParseString_25
   1342                        }
   1343                        else
   1344                        {
   1345                          switch( tempBffr[1] )
   \                     ??RoadBrd_ParseString_190: (+1)
   \   0000110C   0x7860             LDRB     R0,[R4, #+1]
   \   0000110E   0x2830             CMP      R0,#+48
   \   00001110   0xF000 0x8164      BEQ.W    ??RoadBrd_ParseString_198
   \   00001114   0x2831             CMP      R0,#+49
   \   00001116   0xF000 0x81C4      BEQ.W    ??RoadBrd_ParseString_199
   \   0000111A   0x2832             CMP      R0,#+50
   \   0000111C   0xF000 0x81E3      BEQ.W    ??RoadBrd_ParseString_200
   \   00001120   0x2833             CMP      R0,#+51
   \   00001122   0xF000 0x81F2      BEQ.W    ??RoadBrd_ParseString_201
   \   00001126   0x2849             CMP      R0,#+73
   \   00001128   0xF040 0x8213      BNE.W    ??RoadBrd_ParseString_202
   1346                          {
   1347          //------------------ HI Command...Initialize RGB Color Light Sensor.....     
   1348                            case 'I':
   1349                              if (Size == 2)
   \                     ??RoadBrd_ParseString_203: (+1)
   \   0000112C   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00001130   0xF1B8 0x0F02      CMP      R8,#+2
   \   00001134   0xD10C             BNE.N    ??RoadBrd_ParseString_204
   1350                              {
   1351                                // This is the default init. Assume Default Parms and write them.
   1352                                Status = RoadBrd_RGBInit();
   \   00001136   0x.... 0x....      BL       RoadBrd_RGBInit
   \   0000113A   0x0005             MOVS     R5,R0
   1353          
   1354                                if (Status == HAL_OK)
   \   0000113C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000113E   0x2D00             CMP      R5,#+0
   \   00001140   0xF040 0x8146      BNE.W    ??RoadBrd_ParseString_205
   1355                                {
   1356                                  strcpy( (char *)tempBffr2, "RGB Color Light Sensor: Initialization Complete with DEFAULT Values.\r\n");;
   \   00001144   0xF8DF 0x1D94      LDR.W    R1,??RoadBrd_ParseString_206
   \   00001148   0xA810             ADD      R0,SP,#+64
   \   0000114A   0x.... 0x....      BL       strcpy
   \   0000114E   0xE13F             B.N      ??RoadBrd_ParseString_205
   1357                                }
   1358                                
   1359                              }
   1360                              else
   1361                              {
   1362                                // This is the Parameter init. Will have to verify all parameters first.
   1363                                if ( Size != 29 )
   \                     ??RoadBrd_ParseString_204: (+1)
   \   00001150   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00001154   0xF1B8 0x0F1D      CMP      R8,#+29
   \   00001158   0xD010             BEQ.N    ??RoadBrd_ParseString_207
   1364                                {
   1365                                  strcpy( (char *)tempBffr2, "RGB Color Light Sensor: SYNTAX Error. Parameters are not correct.\r\n");;
   \   0000115A   0xF8DF 0x1DC0      LDR.W    R1,??RoadBrd_ParseString_208
   \   0000115E   0xA810             ADD      R0,SP,#+64
   \   00001160   0x.... 0x....      BL       strcpy
   \   00001164   0xE134             B.N      ??RoadBrd_ParseString_205
   \   00001166   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_53:
   \   00001168   0x........         DC32     ?_19
   \   0000116C   0x........         DC32     ?_20
   \   00001170   0x........         DC32     ?_21
   \   00001174   0x........         DC32     ?_22
   \   00001178   0x........         DC32     ?_23
   1366                                }
   1367                                else
   1368                                {
   1369                                  // Step 1. Validate format.
   1370                                  if( (tempBffr[2]!=':') ||
   1371                                      (tempBffr[5]!='.') || 
   1372                                      (tempBffr[8]!='.') || 
   1373                                      (tempBffr[11]!='.') || 
   1374                                      (tempBffr[14]!='.') || 
   1375                                      (tempBffr[17]!='.') || 
   1376                                      (tempBffr[20]!='.') || 
   1377                                      (tempBffr[23]!='.') || 
   1378                                      (tempBffr[26]!='.') )
   \                     ??RoadBrd_ParseString_207: (+1)
   \   0000117C   0x78A0             LDRB     R0,[R4, #+2]
   \   0000117E   0x283A             CMP      R0,#+58
   \   00001180   0xD117             BNE.N    ??RoadBrd_ParseString_209
   \   00001182   0x7960             LDRB     R0,[R4, #+5]
   \   00001184   0x282E             CMP      R0,#+46
   \   00001186   0xD114             BNE.N    ??RoadBrd_ParseString_209
   \   00001188   0x7A20             LDRB     R0,[R4, #+8]
   \   0000118A   0x282E             CMP      R0,#+46
   \   0000118C   0xD111             BNE.N    ??RoadBrd_ParseString_209
   \   0000118E   0x7AE0             LDRB     R0,[R4, #+11]
   \   00001190   0x282E             CMP      R0,#+46
   \   00001192   0xD10E             BNE.N    ??RoadBrd_ParseString_209
   \   00001194   0x7BA0             LDRB     R0,[R4, #+14]
   \   00001196   0x282E             CMP      R0,#+46
   \   00001198   0xD10B             BNE.N    ??RoadBrd_ParseString_209
   \   0000119A   0x7C60             LDRB     R0,[R4, #+17]
   \   0000119C   0x282E             CMP      R0,#+46
   \   0000119E   0xD108             BNE.N    ??RoadBrd_ParseString_209
   \   000011A0   0x7D20             LDRB     R0,[R4, #+20]
   \   000011A2   0x282E             CMP      R0,#+46
   \   000011A4   0xD105             BNE.N    ??RoadBrd_ParseString_209
   \   000011A6   0x7DE0             LDRB     R0,[R4, #+23]
   \   000011A8   0x282E             CMP      R0,#+46
   \   000011AA   0xD102             BNE.N    ??RoadBrd_ParseString_209
   \   000011AC   0x7EA0             LDRB     R0,[R4, #+26]
   \   000011AE   0x282E             CMP      R0,#+46
   \   000011B0   0xD005             BEQ.N    ??RoadBrd_ParseString_210
   1379                                  {
   1380                                    strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: Not correct format. Punctuation!\r\n");
   \                     ??RoadBrd_ParseString_209: (+1)
   \   000011B2   0xF8DF 0x1D6C      LDR.W    R1,??RoadBrd_ParseString_208+0x4
   \   000011B6   0xA810             ADD      R0,SP,#+64
   \   000011B8   0x.... 0x....      BL       strcpy
   \   000011BC   0xE108             B.N      ??RoadBrd_ParseString_205
   1381                                  }
   1382                                  else
   1383                                  {
   1384                                    // Syntax correct. Time to grab parameters.
   1385                                    Error = 0;
   \                     ??RoadBrd_ParseString_210: (+1)
   \   000011BE   0x2000             MOVS     R0,#+0
   \   000011C0   0x9031             STR      R0,[SP, #+196]
   1386                                    for (x=0; x<9; x++)
   \   000011C2   0x2000             MOVS     R0,#+0
   \   000011C4   0x0006             MOVS     R6,R0
   \                     ??RoadBrd_ParseString_211: (+1)
   \   000011C6   0x2E09             CMP      R6,#+9
   \   000011C8   0xDA2B             BGE.N    ??RoadBrd_ParseString_212
   1387                                    {
   1388                                      tempBffr3[0] = tempBffr[3+x*3];
   \   000011CA   0x2003             MOVS     R0,#+3
   \   000011CC   0xFB00 0xF006      MUL      R0,R0,R6
   \   000011D0   0x4420             ADD      R0,R4,R0
   \   000011D2   0xF990 0x0003      LDRSB    R0,[R0, #+3]
   \   000011D6   0xF88D 0x0030      STRB     R0,[SP, #+48]
   1389                                      tempBffr3[1] = tempBffr[4+x*3];
   \   000011DA   0x2003             MOVS     R0,#+3
   \   000011DC   0xFB00 0xF006      MUL      R0,R0,R6
   \   000011E0   0x4420             ADD      R0,R4,R0
   \   000011E2   0xF990 0x0004      LDRSB    R0,[R0, #+4]
   \   000011E6   0xF88D 0x0031      STRB     R0,[SP, #+49]
   1390                                      tempBffr3[2] = 0x00;
   \   000011EA   0x2000             MOVS     R0,#+0
   \   000011EC   0xF88D 0x0032      STRB     R0,[SP, #+50]
   1391                                      if (isHexNum( (char *)tempBffr3 ) == 0)
   \   000011F0   0xA80C             ADD      R0,SP,#+48
   \   000011F2   0x.... 0x....      BL       isHexNum
   \   000011F6   0x2800             CMP      R0,#+0
   \   000011F8   0xD10C             BNE.N    ??RoadBrd_ParseString_213
   1392                                      {
   1393                                        strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR:Parameters not HEX Value.\r\n");
   \   000011FA   0xF8DF 0x1D9C      LDR.W    R1,??RoadBrd_ParseString_214
   \   000011FE   0xA810             ADD      R0,SP,#+64
   \   00001200   0x.... 0x....      BL       strcpy
   1394                                        Error = 1;
   \   00001204   0x2001             MOVS     R0,#+1
   \   00001206   0x9031             STR      R0,[SP, #+196]
   1395                                        break;
   \   00001208   0xE00B             B.N      ??RoadBrd_ParseString_212
   \   0000120A   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_59:
   \   0000120C   0x........         DC32     ?_24
   \   00001210   0x........         DC32     ?_25
   1396                                      }
   1397                                      else
   1398                                      {
   1399                                        i2cData[x] =  hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_213: (+1)
   \   00001214   0xA80C             ADD      R0,SP,#+48
   \   00001216   0x.... 0x....      BL       hatoi
   \   0000121A   0xA987             ADD      R1,SP,#+540
   \   0000121C   0x5588             STRB     R0,[R1, R6]
   1400                                      } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)
   1401                                    } //EndFor (x=0; x<num_bytes; x++)
   \   0000121E   0x1C76             ADDS     R6,R6,#+1
   \   00001220   0xE7D1             B.N      ??RoadBrd_ParseString_211
   1402                                    // Format and parameters now in i2cData array. Pull them out and validate them.
   1403                                    // OP_MODE Verify.
   1404                                    if(i2cData[0]>7)
   \                     ??RoadBrd_ParseString_212: (+1)
   \   00001222   0xF89D 0x021C      LDRB     R0,[SP, #+540]
   \   00001226   0x2808             CMP      R0,#+8
   \   00001228   0xDB05             BLT.N    ??RoadBrd_ParseString_215
   1405                                    {
   1406                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: OP_MODE.\r\n");
   \   0000122A   0xF8DF 0x1DAC      LDR.W    R1,??RoadBrd_ParseString_216
   \   0000122E   0xA810             ADD      R0,SP,#+64
   \   00001230   0x.... 0x....      BL       strcpy
   1407                                      break;
   \   00001234   0xE192             B.N      ??RoadBrd_ParseString_197
   1408                                    }
   1409                                    else
   1410                                      op_mode = (i2cData[0] & 0x07) * 1;
   \                     ??RoadBrd_ParseString_215: (+1)
   \   00001236   0xF89D 0x021C      LDRB     R0,[SP, #+540]
   \   0000123A   0xF010 0x0007      ANDS     R0,R0,#0x7
   \   0000123E   0xF88D 0x00BD      STRB     R0,[SP, #+189]
   1411                                    // DS_RANGE Verify.
   1412                                    if(i2cData[1]>1)
   \   00001242   0xF89D 0x021D      LDRB     R0,[SP, #+541]
   \   00001246   0x2802             CMP      R0,#+2
   \   00001248   0xDB0C             BLT.N    ??RoadBrd_ParseString_217
   1413                                    {
   1414                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: DS_RANGE.\r\n");
   \   0000124A   0xF8DF 0x1D90      LDR.W    R1,??RoadBrd_ParseString_216+0x4
   \   0000124E   0xA810             ADD      R0,SP,#+64
   \   00001250   0x.... 0x....      BL       strcpy
   1415                                      break;
   \   00001254   0xE182             B.N      ??RoadBrd_ParseString_197
   \   00001256   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_64:
   \   00001258   0x........         DC32     ?_26
   \   0000125C   0x........         DC32     ?_27
   \   00001260   0x........         DC32     ?_28
   1416                                    }
   1417                                    else
   1418                                      ds_range = (i2cData[1] & 0x01) * 8;
   \                     ??RoadBrd_ParseString_217: (+1)
   \   00001264   0xF89D 0x021D      LDRB     R0,[SP, #+541]
   \   00001268   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   0000126C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000126E   0x00C0             LSLS     R0,R0,#+3
   \   00001270   0xF88D 0x00BC      STRB     R0,[SP, #+188]
   1419                                    // ADC_RSL Verify.
   1420                                    if(i2cData[2]>1)
   \   00001274   0xF89D 0x021E      LDRB     R0,[SP, #+542]
   \   00001278   0x2802             CMP      R0,#+2
   \   0000127A   0xDB05             BLT.N    ??RoadBrd_ParseString_218
   1421                                    {
   1422                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: ADC_RSL.\r\n");
   \   0000127C   0xF8DF 0x1D9C      LDR.W    R1,??RoadBrd_ParseString_219
   \   00001280   0xA810             ADD      R0,SP,#+64
   \   00001282   0x.... 0x....      BL       strcpy
   1423                                      break;
   \   00001286   0xE169             B.N      ??RoadBrd_ParseString_197
   1424                                    }
   1425                                    else
   1426                                      adc_rsl = (i2cData[2] & 0x01) * 16;
   \                     ??RoadBrd_ParseString_218: (+1)
   \   00001288   0xF89D 0x021E      LDRB     R0,[SP, #+542]
   \   0000128C   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00001290   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001292   0x0100             LSLS     R0,R0,#+4
   \   00001294   0xF88D 0x00BB      STRB     R0,[SP, #+187]
   1427                                    // SYNC Verify.
   1428                                    if(i2cData[3]>1)
   \   00001298   0xF89D 0x021F      LDRB     R0,[SP, #+543]
   \   0000129C   0x2802             CMP      R0,#+2
   \   0000129E   0xDB0B             BLT.N    ??RoadBrd_ParseString_220
   1429                                    {
   1430                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: SYNC.\r\n");
   \   000012A0   0xF8DF 0x1DB8      LDR.W    R1,??RoadBrd_ParseString_221
   \   000012A4   0xA810             ADD      R0,SP,#+64
   \   000012A6   0x.... 0x....      BL       strcpy
   1431                                      break;
   \   000012AA   0xE157             B.N      ??RoadBrd_ParseString_197
   \                     ??RoadBrd_ParseString_67:
   \   000012AC   0x........         DC32     ?_29
   \   000012B0   0x........         DC32     ?_30
   \   000012B4   0x........         DC32     ?_31
   1432                                    }
   1433                                    else
   1434                                      sync = (i2cData[3] & 0x01) * 32;
   \                     ??RoadBrd_ParseString_220: (+1)
   \   000012B8   0xF89D 0x021F      LDRB     R0,[SP, #+543]
   \   000012BC   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   000012C0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000012C2   0x0140             LSLS     R0,R0,#+5
   \   000012C4   0xF88D 0x00BA      STRB     R0,[SP, #+186]
   1435                                    // CMP_ADJST Verify.
   1436                                    if(i2cData[4]>63)
   \   000012C8   0xF89D 0x0220      LDRB     R0,[SP, #+544]
   \   000012CC   0x2840             CMP      R0,#+64
   \   000012CE   0xDB05             BLT.N    ??RoadBrd_ParseString_222
   1437                                    {
   1438                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: CMP_ADJST.\r\n");
   \   000012D0   0xF8DF 0x1D8C      LDR.W    R1,??RoadBrd_ParseString_221+0x4
   \   000012D4   0xA810             ADD      R0,SP,#+64
   \   000012D6   0x.... 0x....      BL       strcpy
   1439                                      break;
   \   000012DA   0xE13F             B.N      ??RoadBrd_ParseString_197
   1440                                    }
   1441                                    else
   1442                                      cmp_adjst = (i2cData[4] & 0x3f) * 1;
   \                     ??RoadBrd_ParseString_222: (+1)
   \   000012DC   0xF89D 0x0220      LDRB     R0,[SP, #+544]
   \   000012E0   0xF010 0x003F      ANDS     R0,R0,#0x3F
   \   000012E4   0xF88D 0x00B9      STRB     R0,[SP, #+185]
   1443                                    // CMP_OFFST Verify.
   1444                                    if(i2cData[5]>1)
   \   000012E8   0xF89D 0x0221      LDRB     R0,[SP, #+545]
   \   000012EC   0x2802             CMP      R0,#+2
   \   000012EE   0xDB05             BLT.N    ??RoadBrd_ParseString_223
   1445                                    {
   1446                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: CMP_OFFST.\r\n");
   \   000012F0   0xF8DF 0x1DAC      LDR.W    R1,??RoadBrd_ParseString_224
   \   000012F4   0xA810             ADD      R0,SP,#+64
   \   000012F6   0x.... 0x....      BL       strcpy
   1447                                      break;
   \   000012FA   0xE12F             B.N      ??RoadBrd_ParseString_197
   1448                                    }
   1449                                    else
   1450                                      cmp_offst = (i2cData[5] & 0x01) * 128;
   \                     ??RoadBrd_ParseString_223: (+1)
   \   000012FC   0xF89D 0x0221      LDRB     R0,[SP, #+545]
   \   00001300   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00001304   0x2180             MOVS     R1,#+128
   \   00001306   0x4348             MULS     R0,R1,R0
   \   00001308   0xF88D 0x00B8      STRB     R0,[SP, #+184]
   1451                                    // INT_ASSGN Verify.
   1452                                    if(i2cData[6]>3)
   \   0000130C   0xF89D 0x0222      LDRB     R0,[SP, #+546]
   \   00001310   0x2804             CMP      R0,#+4
   \   00001312   0xDB05             BLT.N    ??RoadBrd_ParseString_225
   1453                                    {
   1454                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: INT_ASSGN.\r\n");
   \   00001314   0xF8DF 0x1DC8      LDR.W    R1,??RoadBrd_ParseString_226
   \   00001318   0xA810             ADD      R0,SP,#+64
   \   0000131A   0x.... 0x....      BL       strcpy
   1455                                      break;
   \   0000131E   0xE11D             B.N      ??RoadBrd_ParseString_197
   1456                                    }
   1457                                    else
   1458                                      int_assgn = (i2cData[6] & 0x03) * 1;
   \                     ??RoadBrd_ParseString_225: (+1)
   \   00001320   0xF89D 0x0222      LDRB     R0,[SP, #+546]
   \   00001324   0xF010 0x0003      ANDS     R0,R0,#0x3
   \   00001328   0xF88D 0x003F      STRB     R0,[SP, #+63]
   1459                                    // INT_PERSIST Verify.
   1460                                    if(i2cData[7]>3)
   \   0000132C   0xF89D 0x0223      LDRB     R0,[SP, #+547]
   \   00001330   0x2804             CMP      R0,#+4
   \   00001332   0xDB09             BLT.N    ??RoadBrd_ParseString_227
   1461                                    {
   1462                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: INT_PERSIST.\r\n");
   \   00001334   0xF8DF 0x1DAC      LDR.W    R1,??RoadBrd_ParseString_226+0x4
   \   00001338   0xA810             ADD      R0,SP,#+64
   \   0000133A   0x.... 0x....      BL       strcpy
   1463                                      break;
   \   0000133E   0xE10D             B.N      ??RoadBrd_ParseString_197
   \                     ??RoadBrd_ParseString_74:
   \   00001340   0x........         DC32     ?_32
   \   00001344   0x........         DC32     ?_33
   1464                                    }
   1465                                    else
   1466                                      int_persist = (i2cData[7] & 0x03) * 4;
   \                     ??RoadBrd_ParseString_227: (+1)
   \   00001348   0xF89D 0x0223      LDRB     R0,[SP, #+547]
   \   0000134C   0xF010 0x0003      ANDS     R0,R0,#0x3
   \   00001350   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001352   0x0080             LSLS     R0,R0,#+2
   \   00001354   0xF88D 0x003E      STRB     R0,[SP, #+62]
   1467                                    // CNVRSN_INT Verify.
   1468                                    if(i2cData[8]>1)
   \   00001358   0xF89D 0x0224      LDRB     R0,[SP, #+548]
   \   0000135C   0x2802             CMP      R0,#+2
   \   0000135E   0xDB05             BLT.N    ??RoadBrd_ParseString_228
   1469                                    {
   1470                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: CNVRSN_INT.\r\n");
   \   00001360   0xF8DF 0x1D84      LDR.W    R1,??RoadBrd_ParseString_226+0x8
   \   00001364   0xA810             ADD      R0,SP,#+64
   \   00001366   0x.... 0x....      BL       strcpy
   1471                                      break;
   \   0000136A   0xE0F7             B.N      ??RoadBrd_ParseString_197
   1472                                    }
   1473                                    else
   1474                                      cnvrsn_int = (i2cData[8] & 0x01) * 16;
   \                     ??RoadBrd_ParseString_228: (+1)
   \   0000136C   0xF89D 0x0224      LDRB     R0,[SP, #+548]
   \   00001370   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00001374   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001376   0x0100             LSLS     R0,R0,#+4
   \   00001378   0xF88D 0x003D      STRB     R0,[SP, #+61]
   1475                                    // OK, all parameters have been verified. Time to build final params.
   1476                                    RGBMeasure.config1 = op_mode + ds_range + adc_rsl + sync;
   \   0000137C   0xF89D 0x00BD      LDRB     R0,[SP, #+189]
   \   00001380   0xF89D 0x10BC      LDRB     R1,[SP, #+188]
   \   00001384   0x1808             ADDS     R0,R1,R0
   \   00001386   0xF89D 0x10BB      LDRB     R1,[SP, #+187]
   \   0000138A   0x1808             ADDS     R0,R1,R0
   \   0000138C   0xF89D 0x10BA      LDRB     R1,[SP, #+186]
   \   00001390   0x1808             ADDS     R0,R1,R0
   \   00001392   0xF88D 0x00DC      STRB     R0,[SP, #+220]
   1477                                    RGBMeasure.config2 = cmp_adjst + cmp_offst;
   \   00001396   0xF89D 0x00B9      LDRB     R0,[SP, #+185]
   \   0000139A   0xF89D 0x10B8      LDRB     R1,[SP, #+184]
   \   0000139E   0x1808             ADDS     R0,R1,R0
   \   000013A0   0xF88D 0x00DD      STRB     R0,[SP, #+221]
   1478                                    RGBMeasure.config3 = int_assgn + int_persist + cnvrsn_int;
   \   000013A4   0xF89D 0x003F      LDRB     R0,[SP, #+63]
   \   000013A8   0xF89D 0x103E      LDRB     R1,[SP, #+62]
   \   000013AC   0x1808             ADDS     R0,R1,R0
   \   000013AE   0xF89D 0x103D      LDRB     R1,[SP, #+61]
   \   000013B2   0x1808             ADDS     R0,R1,R0
   \   000013B4   0xF88D 0x00DE      STRB     R0,[SP, #+222]
   1479                                    // Load Config Register with Config Settings
   1480                                    Status = RoadBrd_RGBFullInit( &RGBMeasure );
   \   000013B8   0xA837             ADD      R0,SP,#+220
   \   000013BA   0x.... 0x....      BL       RoadBrd_RGBFullInit
   \   000013BE   0x0005             MOVS     R5,R0
   1481          
   1482                                    if (Status == HAL_OK)
   \   000013C0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000013C2   0x2D00             CMP      R5,#+0
   \   000013C4   0xD104             BNE.N    ??RoadBrd_ParseString_205
   1483                                    {
   1484                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor: Initialization Complete with USER Values.\r\n");;
   \   000013C6   0xF8DF 0x1D98      LDR.W    R1,??RoadBrd_ParseString_229
   \   000013CA   0xA810             ADD      R0,SP,#+64
   \   000013CC   0x.... 0x....      BL       strcpy
   1485                                    }
   1486                                  } //ElseIf Validate format.
   1487                                } //ElseIf ( Size != 29 )
   1488                              } //ElseIf (Size == 2)
   1489                              break;
   \                     ??RoadBrd_ParseString_205: (+1)
   \   000013D0   0xE0C4             B.N      ??RoadBrd_ParseString_197
   \   000013D2   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_88:
   \   000013D4   0x........         DC32     ?_34
   \   000013D8   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
   1490          //------------------ H0 Command...Read RGB Values and Return as 3 (2 Byte Fields)....REDmsb,REDlsb,GREENmsb,GREENlsb,BLUEmsb,BLUElsb.....     
   1491                            case '0':
   1492                              // 1. Time to send Command and collect status.
   1493                              Status = RoadBrd_RGBReadValues( &RGBValues );
   \                     ??RoadBrd_ParseString_198: (+1)
   \   000013DC   0xA8B0             ADD      R0,SP,#+704
   \   000013DE   0x.... 0x....      BL       RoadBrd_RGBReadValues
   \   000013E2   0x0005             MOVS     R5,R0
   1494                              if (Status == HAL_OK)
   \   000013E4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000013E6   0x2D00             CMP      R5,#+0
   \   000013E8   0xD15A             BNE.N    ??RoadBrd_ParseString_230
   1495                              {
   1496                                // Send string to UART..
   1497                                strcpy( (char *)tempBffr2, "RGB Color Light Sensor...\r\n");
   \   000013EA   0xF8DF 0x1A28      LDR.W    R1,??RoadBrd_ParseString_192
   \   000013EE   0xA810             ADD      R0,SP,#+64
   \   000013F0   0x.... 0x....      BL       strcpy
   1498          #ifdef NUCLEO
   1499                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1500          #else
   1501                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000013F4   0xA910             ADD      R1,SP,#+64
   \   000013F6   0x2000             MOVS     R0,#+0
   \   000013F8   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000013FC   0x0005             MOVS     R5,R0
   1502          #endif
   1503                                if (Status != HAL_OK)
   \   000013FE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001400   0x2D00             CMP      R5,#+0
   \   00001402   0xD003             BEQ.N    ??RoadBrd_ParseString_231
   1504                                  return Status;
   \   00001404   0x0028             MOVS     R0,R5
   \   00001406   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001408   0xF001 0xB94D      B.W      ??RoadBrd_ParseString_4
   1505                                // NOW, Build Data String..
   1506                                sprintf( (char *)tempBffr2, " RGB(REDmsb,REDlsb,GREENmsb,GREENlsb,BLUEmsb,BLUElsb)\r\n" );
   \                     ??RoadBrd_ParseString_231: (+1)
   \   0000140C   0xF8DF 0x1A08      LDR.W    R1,??RoadBrd_ParseString_192+0x4
   \   00001410   0xA810             ADD      R0,SP,#+64
   \   00001412   0x.... 0x....      BL       sprintf
   1507          #ifdef NUCLEO
   1508                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1509          #else
   1510                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00001416   0xA910             ADD      R1,SP,#+64
   \   00001418   0x2000             MOVS     R0,#+0
   \   0000141A   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000141E   0x0005             MOVS     R5,R0
   1511          #endif
   1512                                if (Status != HAL_OK)
   \   00001420   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001422   0x2D00             CMP      R5,#+0
   \   00001424   0xD003             BEQ.N    ??RoadBrd_ParseString_232
   1513                                  return Status;
   \   00001426   0x0028             MOVS     R0,R5
   \   00001428   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000142A   0xF001 0xB93C      B.W      ??RoadBrd_ParseString_4
   1514                                strcpy( (char *)tempBffr2, "       DATA: ");
   \                     ??RoadBrd_ParseString_232: (+1)
   \   0000142E   0xF8DF 0x1A28      LDR.W    R1,??RoadBrd_ParseString_195
   \   00001432   0xA810             ADD      R0,SP,#+64
   \   00001434   0x.... 0x....      BL       strcpy
   1515                                strcat( (char *)tempBffr2, (char *)RGBValues.Raw );
   \   00001438   0xA9B6             ADD      R1,SP,#+728
   \   0000143A   0xA810             ADD      R0,SP,#+64
   \   0000143C   0x.... 0x....      BL       strcat
   1516                                strcat( (char *)tempBffr2, "\r\n" );
   \   00001440   0xA1D4             ADR.N    R1,??RoadBrd_ParseString_117  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001442   0xA810             ADD      R0,SP,#+64
   \   00001444   0x.... 0x....      BL       strcat
   1517          #ifdef NUCLEO
   1518                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1519          #else
   1520                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00001448   0xA910             ADD      R1,SP,#+64
   \   0000144A   0x2000             MOVS     R0,#+0
   \   0000144C   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001450   0x0005             MOVS     R5,R0
   1521          #endif
   1522                                if (Status != HAL_OK)
   \   00001452   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001454   0x2D00             CMP      R5,#+0
   \   00001456   0xD003             BEQ.N    ??RoadBrd_ParseString_233
   1523                                  return Status;
   \   00001458   0x0028             MOVS     R0,R5
   \   0000145A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000145C   0xF001 0xB923      B.W      ??RoadBrd_ParseString_4
   1524                                // Now DisplayEach Value Calculated.
   1525                                strcpy( (char *)tempBffr2, "    Red: ");
   \                     ??RoadBrd_ParseString_233: (+1)
   \   00001460   0xF8DF 0x19F8      LDR.W    R1,??RoadBrd_ParseString_195+0x4
   \   00001464   0xA810             ADD      R0,SP,#+64
   \   00001466   0x.... 0x....      BL       strcpy
   1526                                strcat( (char *)tempBffr2, (char *)RGBValues.Red );
   \   0000146A   0xA9B0             ADD      R1,SP,#+704
   \   0000146C   0xA810             ADD      R0,SP,#+64
   \   0000146E   0x.... 0x....      BL       strcat
   1527                                strcat( (char *)tempBffr2, "    Green: ");
   \   00001472   0xF8DF 0x19EC      LDR.W    R1,??RoadBrd_ParseString_195+0x8
   \   00001476   0xA810             ADD      R0,SP,#+64
   \   00001478   0x.... 0x....      BL       strcat
   1528                                strcat( (char *)tempBffr2, (char *)RGBValues.Green );
   \   0000147C   0xA9B2             ADD      R1,SP,#+712
   \   0000147E   0xA810             ADD      R0,SP,#+64
   \   00001480   0x.... 0x....      BL       strcat
   1529                                strcat( (char *)tempBffr2, "    Blue: ");
   \   00001484   0xF8DF 0x19DC      LDR.W    R1,??RoadBrd_ParseString_195+0xC
   \   00001488   0xA810             ADD      R0,SP,#+64
   \   0000148A   0x.... 0x....      BL       strcat
   1530                                strcat( (char *)tempBffr2, (char *)RGBValues.Blue );
   \   0000148E   0xA9B4             ADD      R1,SP,#+720
   \   00001490   0xA810             ADD      R0,SP,#+64
   \   00001492   0x.... 0x....      BL       strcat
   1531                                strcat( (char *)tempBffr2, "\r\n" );
   \   00001496   0xA1BF             ADR.N    R1,??RoadBrd_ParseString_117  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001498   0xA810             ADD      R0,SP,#+64
   \   0000149A   0x.... 0x....      BL       strcat
   1532                              }
   1533                              else
   1534                                break;
   1535                              break;
   \   0000149E   0xE05D             B.N      ??RoadBrd_ParseString_197
   \                     ??RoadBrd_ParseString_230: (+1)
   \   000014A0   0xE05C             B.N      ??RoadBrd_ParseString_197
   1536          //------------------ H1 Command...Read Status.....     
   1537                            case '1':
   1538                              // 1. Time to send Command and collect status.  RGBSMeasure
   1539                              Status = RoadBrd_RGBReadStatus( &RGBSMeasure );
   \                     ??RoadBrd_ParseString_199: (+1)
   \   000014A2   0xA849             ADD      R0,SP,#+292
   \   000014A4   0x.... 0x....      BL       RoadBrd_RGBReadStatus
   \   000014A8   0x0005             MOVS     R5,R0
   1540          
   1541                              if (Status == HAL_OK)
   \   000014AA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000014AC   0x2D00             CMP      R5,#+0
   \   000014AE   0xD119             BNE.N    ??RoadBrd_ParseString_234
   1542                              {
   1543                                // Build Status
   1544                                strcpy( (char *)tempBffr2, "RGB Color Light Sensor Status: ");
   \   000014B0   0xF8DF 0x1D98      LDR.W    R1,??RoadBrd_ParseString_235
   \   000014B4   0xA810             ADD      R0,SP,#+64
   \   000014B6   0x.... 0x....      BL       strcpy
   1545                                sprintf( (char *)tempBffr3, "%02x / ", RGBSMeasure.status);
   \   000014BA   0xF89D 0x2124      LDRB     R2,[SP, #+292]
   \   000014BE   0xF8DF 0x1D90      LDR.W    R1,??RoadBrd_ParseString_235+0x4
   \   000014C2   0xA80C             ADD      R0,SP,#+48
   \   000014C4   0x.... 0x....      BL       sprintf
   1546                                strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   000014C8   0xA90C             ADD      R1,SP,#+48
   \   000014CA   0xA810             ADD      R0,SP,#+64
   \   000014CC   0x.... 0x....      BL       strcat
   1547                                strcat( (char *)tempBffr2, (char *)RGBSMeasure.Raw );
   \   000014D0   0xA949             ADD      R1,SP,#+292
   \   000014D2   0x1C49             ADDS     R1,R1,#+1
   \   000014D4   0xA810             ADD      R0,SP,#+64
   \   000014D6   0x.... 0x....      BL       strcat
   1548                                strcat( (char *)tempBffr2, "\r\n" );
   \   000014DA   0xA1AE             ADR.N    R1,??RoadBrd_ParseString_117  ;; 0x0D, 0x0A, 0x00, 0x00
   \   000014DC   0xA810             ADD      R0,SP,#+64
   \   000014DE   0x.... 0x....      BL       strcat
   1549                              }
   1550                              else
   1551                                break;
   1552                              break;
   \   000014E2   0xE03B             B.N      ??RoadBrd_ParseString_197
   \                     ??RoadBrd_ParseString_234: (+1)
   \   000014E4   0xE03A             B.N      ??RoadBrd_ParseString_197
   1553          //------------------ H2 Command...Reset Hardware......     
   1554                            case '2':
   1555                              Status = RoadBrd_RGBReset();
   \                     ??RoadBrd_ParseString_200: (+1)
   \   000014E6   0x.... 0x....      BL       RoadBrd_RGBReset
   \   000014EA   0x0005             MOVS     R5,R0
   1556                              if (Status == HAL_OK)
   \   000014EC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000014EE   0x2D00             CMP      R5,#+0
   \   000014F0   0xD10A             BNE.N    ??RoadBrd_ParseString_236
   1557                              {
   1558                                // Build Status
   1559                                strcpy( (char *)tempBffr2, "RGB Color Light Sensor: RESET CMD Sent Succesful.\r\n" );
   \   000014F2   0xF8DF 0x1DAC      LDR.W    R1,??RoadBrd_ParseString_237
   \   000014F6   0xA810             ADD      R0,SP,#+64
   \   000014F8   0x.... 0x....      BL       strcpy
   1560                              }
   1561                              else
   1562                                break;
   1563                              break;
   \   000014FC   0xE02E             B.N      ??RoadBrd_ParseString_197
   \   000014FE   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_90:
   \   00001500   0x........         DC32     ?_35
   \   00001504   0x........         DC32     ?_36
   \                     ??RoadBrd_ParseString_236: (+1)
   \   00001508   0xE028             B.N      ??RoadBrd_ParseString_197
   1564          //------------------ H3 Command...Read ID.....     
   1565                            case '3':
   1566                              // 1. Time to send Command and collect status.  IDMeasure
   1567                              Status = RoadBrd_RGBReadID( &IDMeasure );
   \                     ??RoadBrd_ParseString_201: (+1)
   \   0000150A   0xA84B             ADD      R0,SP,#+300
   \   0000150C   0x.... 0x....      BL       RoadBrd_RGBReadID
   \   00001510   0x0005             MOVS     R5,R0
   1568                              if (Status == HAL_OK)
   \   00001512   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001514   0x2D00             CMP      R5,#+0
   \   00001516   0xD11B             BNE.N    ??RoadBrd_ParseString_238
   1569                              {
   1570                                // Build Status
   1571                                strcpy( (char *)tempBffr2, "RGB Color Light Sensor ID Code: ");
   \   00001518   0xF8DF 0x1D88      LDR.W    R1,??RoadBrd_ParseString_237+0x4
   \   0000151C   0xA810             ADD      R0,SP,#+64
   \   0000151E   0x.... 0x....      BL       strcpy
   1572                                sprintf( (char *)tempBffr3, "%02x / ", IDMeasure.id);
   \   00001522   0xF89D 0x212C      LDRB     R2,[SP, #+300]
   \   00001526   0xF8DF 0x1D28      LDR.W    R1,??RoadBrd_ParseString_235+0x4
   \   0000152A   0xA80C             ADD      R0,SP,#+48
   \   0000152C   0x.... 0x....      BL       sprintf
   1573                                strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   00001530   0xA90C             ADD      R1,SP,#+48
   \   00001532   0xA810             ADD      R0,SP,#+64
   \   00001534   0x.... 0x....      BL       strcat
   1574                                strcat( (char *)tempBffr2, (char *)IDMeasure.Raw );
   \   00001538   0xA94B             ADD      R1,SP,#+300
   \   0000153A   0x1C49             ADDS     R1,R1,#+1
   \   0000153C   0xA810             ADD      R0,SP,#+64
   \   0000153E   0x.... 0x....      BL       strcat
   1575                                strcat( (char *)tempBffr2, "\r\n" );
   \   00001542   0xA194             ADR.N    R1,??RoadBrd_ParseString_117  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001544   0xA810             ADD      R0,SP,#+64
   \   00001546   0x.... 0x....      BL       strcat
   1576                             }
   1577                              else
   1578                                break;
   1579                              break;
   \   0000154A   0xE007             B.N      ??RoadBrd_ParseString_197
   \                     ??RoadBrd_ParseString_96:
   \   0000154C   0x........         DC32     ?_37
   \                     ??RoadBrd_ParseString_238: (+1)
   \   00001550   0xE004             B.N      ??RoadBrd_ParseString_197
   1580                            default:
   1581                              strcpy( (char *)tempBffr2, "ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_202: (+1)
   \   00001552   0xF8DF 0x1D54      LDR.W    R1,??RoadBrd_ParseString_237+0x8
   \   00001556   0xA810             ADD      R0,SP,#+64
   \   00001558   0x.... 0x....      BL       strcpy
   1582                              break;
   1583                          } //EndSwitch
   1584                        } //EndElse (Size == 1)
   1585                        break;    
   \                     ??RoadBrd_ParseString_197: (+1)
   \   0000155C   0xF001 0xB82B      B.W      ??RoadBrd_ParseString_25
   1586          //**************************************************************************************************
   1587                      case 'P':
   1588                        // POWER SYSTEM. 
   1589                        switch( tempBffr[1] )
   \                     ??RoadBrd_ParseString_20: (+1)
   \   00001560   0x7860             LDRB     R0,[R4, #+1]
   \   00001562   0x2844             CMP      R0,#+68
   \   00001564   0xD00A             BEQ.N    ??RoadBrd_ParseString_239
   \   00001566   0x2855             CMP      R0,#+85
   \   00001568   0xD111             BNE.N    ??RoadBrd_ParseString_240
   1590                        {
   1591          //++++++++++++++++++++++++++++++++++++++++++  5V Power Supply Commands.
   1592                          case 'U':
   1593                            // Turn on 5V Power Supply.
   1594                            RoadBrd_gpio_On( gTAM_PWR );
   \                     ??RoadBrd_ParseString_241: (+1)
   \   0000156A   0x2004             MOVS     R0,#+4
   \   0000156C   0x.... 0x....      BL       RoadBrd_gpio_On
   1595                            strcpy( (char *)tempBffr2, "5V Power Plane Powered UP.\r\n");
   \   00001570   0xF8DF 0x1D94      LDR.W    R1,??RoadBrd_ParseString_242
   \   00001574   0xA810             ADD      R0,SP,#+64
   \   00001576   0x.... 0x....      BL       strcpy
   1596                            break;
   \   0000157A   0xE00D             B.N      ??RoadBrd_ParseString_243
   1597                          case 'D':
   1598                            // Turn off 5V Power Supply.
   1599                            RoadBrd_gpio_Off( gTAM_PWR );
   \                     ??RoadBrd_ParseString_239: (+1)
   \   0000157C   0x2004             MOVS     R0,#+4
   \   0000157E   0x.... 0x....      BL       RoadBrd_gpio_Off
   1600                            strcpy( (char *)tempBffr2, "5V Power Plane Powered DOWN.\r\n");
   \   00001582   0xF8DF 0x1D88      LDR.W    R1,??RoadBrd_ParseString_242+0x4
   \   00001586   0xA810             ADD      R0,SP,#+64
   \   00001588   0x.... 0x....      BL       strcpy
   1601                            break;
   \   0000158C   0xE004             B.N      ??RoadBrd_ParseString_243
   1602                          default:
   1603                            strcpy( (char *)tempBffr2, "ERROR: Illegal 5V Power Plane Command.\r\n");
   \                     ??RoadBrd_ParseString_240: (+1)
   \   0000158E   0xF8DF 0x1DB0      LDR.W    R1,??RoadBrd_ParseString_244
   \   00001592   0xA810             ADD      R0,SP,#+64
   \   00001594   0x.... 0x....      BL       strcpy
   1604                            break;
   1605                        }
   1606                        break;
   \                     ??RoadBrd_ParseString_243: (+1)
   \   00001598   0xF001 0xB80D      B.W      ??RoadBrd_ParseString_25
   1607          //**************************************************************************************************
   1608                      case 'T':
   1609                        // TEST CMDS. 
   1610                        // Test Size to make sure we have enough Characters for this operation
   1611                        if (Size <= 1)
   \                     ??RoadBrd_ParseString_21: (+1)
   \   0000159C   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000015A0   0xF1B8 0x0F02      CMP      R8,#+2
   \   000015A4   0xDA06             BGE.N    ??RoadBrd_ParseString_245
   1612                          strcpy( (char *)tempBffr2, "T ERROR: Not a legal command.\r\n");
   \   000015A6   0xF8DF 0x1D9C      LDR.W    R1,??RoadBrd_ParseString_244+0x4
   \   000015AA   0xA810             ADD      R0,SP,#+64
   \   000015AC   0x.... 0x....      BL       strcpy
   \   000015B0   0xF000 0xBFFC      B.W      ??RoadBrd_ParseString_246
   1613                        else
   1614                        {
   1615                          switch( tempBffr[1] )
   \                     ??RoadBrd_ParseString_245: (+1)
   \   000015B4   0x7860             LDRB     R0,[R4, #+1]
   \   000015B6   0x2843             CMP      R0,#+67
   \   000015B8   0xF000 0x8274      BEQ.W    ??RoadBrd_ParseString_247
   \   000015BC   0x2844             CMP      R0,#+68
   \   000015BE   0xF000 0x86C3      BEQ.W    ??RoadBrd_ParseString_248
   \   000015C2   0x2849             CMP      R0,#+73
   \   000015C4   0xD00A             BEQ.N    ??RoadBrd_ParseString_249
   \   000015C6   0x284B             CMP      R0,#+75
   \   000015C8   0xF000 0x86D2      BEQ.W    ??RoadBrd_ParseString_250
   \   000015CC   0x284D             CMP      R0,#+77
   \   000015CE   0xF000 0x87CD      BEQ.W    ??RoadBrd_ParseString_251
   \   000015D2   0x2852             CMP      R0,#+82
   \   000015D4   0xF000 0x86C4      BEQ.W    ??RoadBrd_ParseString_252
   \   000015D8   0xF000 0xBFE4      B.W      ??RoadBrd_ParseString_253
   1616                          {
   1617          //++++++++++++++++++++++++++++++++++++++++++  I2C Commands.
   1618                            case 'I':
   1619                              // I2C Commands.
   1620                              // Test Size to make sure we have enough Characters for this operation
   1621                              if (Size < 9)
   \                     ??RoadBrd_ParseString_249: (+1)
   \   000015DC   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000015E0   0xF1B8 0x0F09      CMP      R8,#+9
   \   000015E4   0xDA05             BGE.N    ??RoadBrd_ParseString_254
   1622                              strcpy( (char *)tempBffr2, "TI SYNTAX ERROR: Not correct format.\r\n");
   \   000015E6   0xF8DF 0x1DA4      LDR.W    R1,??RoadBrd_ParseString_255
   \   000015EA   0xA810             ADD      R0,SP,#+64
   \   000015EC   0x.... 0x....      BL       strcpy
   \   000015F0   0xE24D             B.N      ??RoadBrd_ParseString_256
   1623                              else
   1624                              {
   1625                                switch( tempBffr[2] )
   \                     ??RoadBrd_ParseString_254: (+1)
   \   000015F2   0x78A0             LDRB     R0,[R4, #+2]
   \   000015F4   0x2851             CMP      R0,#+81
   \   000015F6   0xF000 0x81B7      BEQ.W    ??RoadBrd_ParseString_257
   \   000015FA   0xF0C0 0x8243      BCC.W    ??RoadBrd_ParseString_258
   \   000015FE   0x2853             CMP      R0,#+83
   \   00001600   0xD002             BEQ.N    ??RoadBrd_ParseString_259
   \   00001602   0xF0C0 0x80A1      BCC.W    ??RoadBrd_ParseString_260
   \   00001606   0xE23D             B.N      ??RoadBrd_ParseString_258
   1626                                {
   1627          //------------------
   1628                                  case 'S':
   1629                                    //I2C Send Command.
   1630                                    // Step 1. Validate format.
   1631                                    if( (tempBffr[3]!=':') ||
   1632                                        (tempBffr[6]!='.') )
   \                     ??RoadBrd_ParseString_259: (+1)
   \   00001608   0x78E0             LDRB     R0,[R4, #+3]
   \   0000160A   0x283A             CMP      R0,#+58
   \   0000160C   0xD102             BNE.N    ??RoadBrd_ParseString_261
   \   0000160E   0x79A0             LDRB     R0,[R4, #+6]
   \   00001610   0x282E             CMP      R0,#+46
   \   00001612   0xD005             BEQ.N    ??RoadBrd_ParseString_262
   1633                                    {
   1634                                      strcpy( (char *)tempBffr2, "TIS SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_261: (+1)
   \   00001614   0xF8DF 0x1D78      LDR.W    R1,??RoadBrd_ParseString_255+0x4
   \   00001618   0xA810             ADD      R0,SP,#+64
   \   0000161A   0x.... 0x....      BL       strcpy
   \   0000161E   0xE092             B.N      ??RoadBrd_ParseString_263
   1635                                    }
   1636                                    else
   1637                                    {
   1638                                      // 2. Grab Address and validate a legal number
   1639                                      tempBffr3[0] = tempBffr[4];
   \                     ??RoadBrd_ParseString_262: (+1)
   \   00001620   0xF994 0x0004      LDRSB    R0,[R4, #+4]
   \   00001624   0xF88D 0x0030      STRB     R0,[SP, #+48]
   1640                                      tempBffr3[1] = tempBffr[5];
   \   00001628   0xF994 0x0005      LDRSB    R0,[R4, #+5]
   \   0000162C   0xF88D 0x0031      STRB     R0,[SP, #+49]
   1641                                      tempBffr3[2] = 0x00;
   \   00001630   0x2000             MOVS     R0,#+0
   \   00001632   0xF88D 0x0032      STRB     R0,[SP, #+50]
   1642                                      if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001636   0xA80C             ADD      R0,SP,#+48
   \   00001638   0x.... 0x....      BL       isHexNum
   \   0000163C   0x2800             CMP      R0,#+0
   \   0000163E   0xD105             BNE.N    ??RoadBrd_ParseString_264
   1643                                        strcpy( (char *)tempBffr2, "TIS SYNTAX ERROR: Address not HEX Value.\r\n");
   \   00001640   0xF8DF 0x1D50      LDR.W    R1,??RoadBrd_ParseString_255+0x8
   \   00001644   0xA810             ADD      R0,SP,#+64
   \   00001646   0x.... 0x....      BL       strcpy
   \   0000164A   0xE07C             B.N      ??RoadBrd_ParseString_263
   1644                                      else
   1645                                      {
   1646                                        // Legal Address. Save it as value
   1647                                        Address = hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_264: (+1)
   \   0000164C   0xA80C             ADD      R0,SP,#+48
   \   0000164E   0x.... 0x....      BL       hatoi
   \   00001652   0x4682             MOV      R10,R0
   1648                                        // 3. Now get the number of bytes of data from field.
   1649          //                              sprintf( (char *)tempBffr2, "TIS: Good Address: %x.\r\n", Address);
   1650                                        tempBffr3[0] = tempBffr[7];
   \   00001654   0xF994 0x0007      LDRSB    R0,[R4, #+7]
   \   00001658   0xF88D 0x0030      STRB     R0,[SP, #+48]
   1651                                        tempBffr3[1] = tempBffr[8];
   \   0000165C   0xF994 0x0008      LDRSB    R0,[R4, #+8]
   \   00001660   0xF88D 0x0031      STRB     R0,[SP, #+49]
   1652                                        tempBffr3[2] = 0x00;
   \   00001664   0x2000             MOVS     R0,#+0
   \   00001666   0xF88D 0x0032      STRB     R0,[SP, #+50]
   1653                                        if (isHexNum( (char *)tempBffr3 ) == 0)
   \   0000166A   0xA80C             ADD      R0,SP,#+48
   \   0000166C   0x.... 0x....      BL       isHexNum
   \   00001670   0x2800             CMP      R0,#+0
   \   00001672   0xD105             BNE.N    ??RoadBrd_ParseString_265
   1654                                          strcpy( (char *)tempBffr2, "TIS SYNTAX ERROR: Number of Bytes not HEX Value.\r\n");
   \   00001674   0xF8DF 0x1D20      LDR.W    R1,??RoadBrd_ParseString_255+0xC
   \   00001678   0xA810             ADD      R0,SP,#+64
   \   0000167A   0x.... 0x....      BL       strcpy
   \   0000167E   0xE062             B.N      ??RoadBrd_ParseString_263
   1655                                        else
   1656                                        {
   1657                                          // Legal NUMBER BYTES. Save it as value
   1658                                          num_bytes = hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_265: (+1)
   \   00001680   0xA80C             ADD      R0,SP,#+48
   \   00001682   0x.... 0x....      BL       hatoi
   \   00001686   0x4681             MOV      R9,R0
   1659                                          // 4. Test num_bytes. If Zero, We are done
   1660                                          if (num_bytes == 0)
   \   00001688   0xF1B9 0x0F00      CMP      R9,#+0
   \   0000168C   0xD106             BNE.N    ??RoadBrd_ParseString_266
   1661                                          {
   1662                                            sprintf( (char *)tempBffr2, "TIS: GOOD CMD: %x.\r\n", Address);
   \   0000168E   0x4652             MOV      R2,R10
   \   00001690   0xF8DF 0x1D08      LDR.W    R1,??RoadBrd_ParseString_255+0x10
   \   00001694   0xA810             ADD      R0,SP,#+64
   \   00001696   0x.... 0x....      BL       sprintf
   \   0000169A   0xE02C             B.N      ??RoadBrd_ParseString_267
   1663                                          }
   1664                                          else
   1665                                          {
   1666                                            // 5. Time to get all the data.
   1667                                            Error = 0;
   \                     ??RoadBrd_ParseString_266: (+1)
   \   0000169C   0x2000             MOVS     R0,#+0
   \   0000169E   0x9031             STR      R0,[SP, #+196]
   1668                                            for (x=0; x<num_bytes; x++)
   \   000016A0   0x2000             MOVS     R0,#+0
   \   000016A2   0x0006             MOVS     R6,R0
   \                     ??RoadBrd_ParseString_268: (+1)
   \   000016A4   0x454E             CMP      R6,R9
   \   000016A6   0xDA26             BGE.N    ??RoadBrd_ParseString_267
   1669                                            {
   1670                                              tempBffr3[0] = tempBffr[10+x*3];
   \   000016A8   0x2003             MOVS     R0,#+3
   \   000016AA   0xFB00 0xF006      MUL      R0,R0,R6
   \   000016AE   0x4420             ADD      R0,R4,R0
   \   000016B0   0xF990 0x000A      LDRSB    R0,[R0, #+10]
   \   000016B4   0xF88D 0x0030      STRB     R0,[SP, #+48]
   1671                                              tempBffr3[1] = tempBffr[11+x*3];
   \   000016B8   0x2003             MOVS     R0,#+3
   \   000016BA   0xFB00 0xF006      MUL      R0,R0,R6
   \   000016BE   0x4420             ADD      R0,R4,R0
   \   000016C0   0xF990 0x000B      LDRSB    R0,[R0, #+11]
   \   000016C4   0xF88D 0x0031      STRB     R0,[SP, #+49]
   1672                                              tempBffr3[2] = 0x00;
   \   000016C8   0x2000             MOVS     R0,#+0
   \   000016CA   0xF88D 0x0032      STRB     R0,[SP, #+50]
   1673                                              if (isHexNum( (char *)tempBffr3 ) == 0)
   \   000016CE   0xA80C             ADD      R0,SP,#+48
   \   000016D0   0x.... 0x....      BL       isHexNum
   \   000016D4   0x2800             CMP      R0,#+0
   \   000016D6   0xD107             BNE.N    ??RoadBrd_ParseString_269
   1674                                              {
   1675                                                strcpy( (char *)tempBffr2, "TIS SYNTAX ERROR: Address not HEX Value.\r\n");
   \   000016D8   0xF8DF 0x1CB8      LDR.W    R1,??RoadBrd_ParseString_255+0x8
   \   000016DC   0xA810             ADD      R0,SP,#+64
   \   000016DE   0x.... 0x....      BL       strcpy
   1676                                                Error = 1;
   \   000016E2   0x2001             MOVS     R0,#+1
   \   000016E4   0x9031             STR      R0,[SP, #+196]
   1677                                                break;
   \   000016E6   0xE006             B.N      ??RoadBrd_ParseString_267
   1678                                              }
   1679                                              else
   1680                                              {
   1681                                                i2cData[x] =  hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_269: (+1)
   \   000016E8   0xA80C             ADD      R0,SP,#+48
   \   000016EA   0x.... 0x....      BL       hatoi
   \   000016EE   0xA987             ADD      R1,SP,#+540
   \   000016F0   0x5588             STRB     R0,[R1, R6]
   1682                                              } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)
   1683                                            } //EndFor (x=0; x<num_bytes; x++)
   \   000016F2   0x1C76             ADDS     R6,R6,#+1
   \   000016F4   0xE7D6             B.N      ??RoadBrd_ParseString_268
   1684                                          } //EndElse (num_bytes == 0)
   1685                                          if (Error==0)
   \                     ??RoadBrd_ParseString_267: (+1)
   \   000016F6   0x9831             LDR      R0,[SP, #+196]
   \   000016F8   0x2800             CMP      R0,#+0
   \   000016FA   0xD105             BNE.N    ??RoadBrd_ParseString_270
   1686                                          {
   1687                                            sprintf( (char *)tempBffr2, "TIS: GOOD CMD: %x.", Address);
   \   000016FC   0x4652             MOV      R2,R10
   \   000016FE   0xF8DF 0x1D60      LDR.W    R1,??RoadBrd_ParseString_271
   \   00001702   0xA810             ADD      R0,SP,#+64
   \   00001704   0x.... 0x....      BL       sprintf
   1688                                          }
   1689                                          for(x=0; x<num_bytes; x++)
   \                     ??RoadBrd_ParseString_270: (+1)
   \   00001708   0x2000             MOVS     R0,#+0
   \   0000170A   0x0006             MOVS     R6,R0
   \                     ??RoadBrd_ParseString_272: (+1)
   \   0000170C   0x454E             CMP      R6,R9
   \   0000170E   0xDA0B             BGE.N    ??RoadBrd_ParseString_273
   1690                                          {
   1691                                            sprintf( (char *)tempBffr3, "%x.", i2cData[x]);
   \   00001710   0xA887             ADD      R0,SP,#+540
   \   00001712   0x5D82             LDRB     R2,[R0, R6]
   \   00001714   0xA1B6             ADR.N    R1,??RoadBrd_ParseString_150+0x4  ;; "%x."
   \   00001716   0xA80C             ADD      R0,SP,#+48
   \   00001718   0x.... 0x....      BL       sprintf
   1692                                            strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   0000171C   0xA90C             ADD      R1,SP,#+48
   \   0000171E   0xA810             ADD      R0,SP,#+64
   \   00001720   0x.... 0x....      BL       strcat
   1693                                          }
   \   00001724   0x1C76             ADDS     R6,R6,#+1
   \   00001726   0xE7F1             B.N      ??RoadBrd_ParseString_272
   1694                                          strcat( (char *)tempBffr2, "\r\n" );
   \                     ??RoadBrd_ParseString_273: (+1)
   \   00001728   0xA11A             ADR.N    R1,??RoadBrd_ParseString_117  ;; 0x0D, 0x0A, 0x00, 0x00
   \   0000172A   0xA810             ADD      R0,SP,#+64
   \   0000172C   0x.... 0x....      BL       strcat
   1695                                          // 6. Time to send Command and collect status.
   1696                                          Status =  RoadBrd_I2C_Master_Transmit((uint16_t)Address, i2cData, (uint16_t)num_bytes, I2C_TIMEOUT);
   \   00001730   0xF44F 0x73FA      MOV      R3,#+500
   \   00001734   0x4648             MOV      R0,R9
   \   00001736   0x0002             MOVS     R2,R0
   \   00001738   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000173A   0xA987             ADD      R1,SP,#+540
   \   0000173C   0x4650             MOV      R0,R10
   \   0000173E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00001740   0x.... 0x....      BL       RoadBrd_I2C_Master_Transmit
   \   00001744   0x0005             MOVS     R5,R0
   1697                                          
   1698                                        } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)...NUMBER BYTES
   1699                                        
   1700                                      } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)...Address
   1701                                      
   1702                                    } //EndElse ( (tempBffr[2]!=':') || (tempBffr[5]!='.') )
   1703                                
   1704                                    break;
   \                     ??RoadBrd_ParseString_263: (+1)
   \   00001746   0xE1A2             B.N      ??RoadBrd_ParseString_256
   1705          //------------------
   1706                                  case 'R':
   1707                                    //I2C Receive Command
   1708                                    // Step 1. Validate format.
   1709                                    if( (tempBffr[3]!=':') ||
   1710                                        (tempBffr[6]!='.') ||
   1711                                        (tempBffr[9]!='.')  )
   \                     ??RoadBrd_ParseString_260: (+1)
   \   00001748   0x78E0             LDRB     R0,[R4, #+3]
   \   0000174A   0x283A             CMP      R0,#+58
   \   0000174C   0xD105             BNE.N    ??RoadBrd_ParseString_274
   \   0000174E   0x79A0             LDRB     R0,[R4, #+6]
   \   00001750   0x282E             CMP      R0,#+46
   \   00001752   0xD102             BNE.N    ??RoadBrd_ParseString_274
   \   00001754   0x7A60             LDRB     R0,[R4, #+9]
   \   00001756   0x282E             CMP      R0,#+46
   \   00001758   0xD005             BEQ.N    ??RoadBrd_ParseString_275
   1712                                    {
   1713                                      strcpy( (char *)tempBffr2, "TIR SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_274: (+1)
   \   0000175A   0xF8DF 0x1D8C      LDR.W    R1,??RoadBrd_ParseString_276
   \   0000175E   0xA810             ADD      R0,SP,#+64
   \   00001760   0x.... 0x....      BL       strcpy
   \   00001764   0xE0FF             B.N      ??RoadBrd_ParseString_277
   1714                                    }
   1715                                    else
   1716                                    {
   1717                                      // 2. Grab Address and validate a legal number
   1718                                      tempBffr3[0] = tempBffr[4];
   \                     ??RoadBrd_ParseString_275: (+1)
   \   00001766   0xF994 0x0004      LDRSB    R0,[R4, #+4]
   \   0000176A   0xF88D 0x0030      STRB     R0,[SP, #+48]
   1719                                      tempBffr3[1] = tempBffr[5];
   \   0000176E   0xF994 0x0005      LDRSB    R0,[R4, #+5]
   \   00001772   0xF88D 0x0031      STRB     R0,[SP, #+49]
   1720                                      tempBffr3[2] = 0x00;
   \   00001776   0x2000             MOVS     R0,#+0
   \   00001778   0xF88D 0x0032      STRB     R0,[SP, #+50]
   1721                                      if (isHexNum( (char *)tempBffr3 ) == 0)
   \   0000177C   0xA80C             ADD      R0,SP,#+48
   \   0000177E   0x.... 0x....      BL       isHexNum
   \   00001782   0x2800             CMP      R0,#+0
   \   00001784   0xD10C             BNE.N    ??RoadBrd_ParseString_278
   1722                                        strcpy( (char *)tempBffr2, "TIR SYNTAX ERROR: Address not HEX Value.\r\n");
   \   00001786   0xF8DF 0x1DA0      LDR.W    R1,??RoadBrd_ParseString_279
   \   0000178A   0xA810             ADD      R0,SP,#+64
   \   0000178C   0x.... 0x....      BL       strcpy
   \   00001790   0xE0E9             B.N      ??RoadBrd_ParseString_277
   \   00001792   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_117:
   \   00001794   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
   \   00001798   0x........         DC32     ?_38
   \   0000179C   0x........         DC32     ?_39
   1723                                      else
   1724                                      {
   1725                                        // Legal Address. Save it as value
   1726                                        Address = hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_278: (+1)
   \   000017A0   0xA80C             ADD      R0,SP,#+48
   \   000017A2   0x.... 0x....      BL       hatoi
   \   000017A6   0x4682             MOV      R10,R0
   1727                                        // 3. Now get the number of bytes of data from field.
   1728                                        tempBffr3[0] = tempBffr[7];
   \   000017A8   0xF994 0x0007      LDRSB    R0,[R4, #+7]
   \   000017AC   0xF88D 0x0030      STRB     R0,[SP, #+48]
   1729                                        tempBffr3[1] = tempBffr[8];
   \   000017B0   0xF994 0x0008      LDRSB    R0,[R4, #+8]
   \   000017B4   0xF88D 0x0031      STRB     R0,[SP, #+49]
   1730                                        tempBffr3[2] = 0x00;
   \   000017B8   0x2000             MOVS     R0,#+0
   \   000017BA   0xF88D 0x0032      STRB     R0,[SP, #+50]
   1731                                        if (isHexNum( (char *)tempBffr3 ) == 0)
   \   000017BE   0xA80C             ADD      R0,SP,#+48
   \   000017C0   0x.... 0x....      BL       isHexNum
   \   000017C4   0x2800             CMP      R0,#+0
   \   000017C6   0xD105             BNE.N    ??RoadBrd_ParseString_280
   1732                                          strcpy( (char *)tempBffr2, "TIR SYNTAX ERROR: Number of Bytes not HEX Value.\r\n");
   \   000017C8   0xF8DF 0x1D88      LDR.W    R1,??RoadBrd_ParseString_281+0x4
   \   000017CC   0xA810             ADD      R0,SP,#+64
   \   000017CE   0x.... 0x....      BL       strcpy
   \   000017D2   0xE0C8             B.N      ??RoadBrd_ParseString_277
   1733                                        else
   1734                                        {
   1735                                          // Legal NUMBER BYTES. Save it as value
   1736                                          num_bytes = hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_280: (+1)
   \   000017D4   0xA80C             ADD      R0,SP,#+48
   \   000017D6   0x.... 0x....      BL       hatoi
   \   000017DA   0x4681             MOV      R9,R0
   1737                                          
   1738                                          // 3a. Now get the number of bytes Received of data from field.
   1739                                          tempBffr3[0] = tempBffr[10];
   \   000017DC   0xF994 0x000A      LDRSB    R0,[R4, #+10]
   \   000017E0   0xF88D 0x0030      STRB     R0,[SP, #+48]
   1740                                          tempBffr3[1] = tempBffr[11];
   \   000017E4   0xF994 0x000B      LDRSB    R0,[R4, #+11]
   \   000017E8   0xF88D 0x0031      STRB     R0,[SP, #+49]
   1741                                          tempBffr3[2] = 0x00;
   \   000017EC   0x2000             MOVS     R0,#+0
   \   000017EE   0xF88D 0x0032      STRB     R0,[SP, #+50]
   1742                                          if (isHexNum( (char *)tempBffr3 ) == 0)
   \   000017F2   0xA80C             ADD      R0,SP,#+48
   \   000017F4   0x.... 0x....      BL       isHexNum
   \   000017F8   0x2800             CMP      R0,#+0
   \   000017FA   0xD109             BNE.N    ??RoadBrd_ParseString_282
   1743                                            strcpy( (char *)tempBffr2, "TIR SYNTAX ERROR: Number of Bytes RECEIVED not HEX Value.\r\n");
   \   000017FC   0xF8DF 0x1D8C      LDR.W    R1,??RoadBrd_ParseString_283
   \   00001800   0xA810             ADD      R0,SP,#+64
   \   00001802   0x.... 0x....      BL       strcpy
   \   00001806   0xE0AE             B.N      ??RoadBrd_ParseString_277
   \                     ??RoadBrd_ParseString_122:
   \   00001808   0x........         DC32     ?_40
   \   0000180C   0x........         DC32     ?_41
   1744                                          else
   1745                                          {
   1746                                            // Legal NUMBER BYTES. Save it as value
   1747                                            num_bytes_received = hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_282: (+1)
   \   00001810   0xA80C             ADD      R0,SP,#+48
   \   00001812   0x.... 0x....      BL       hatoi
   \   00001816   0x9036             STR      R0,[SP, #+216]
   1748                                            // 4. Test num_bytes. If Zero, We are done
   1749                                            if (num_bytes == 0)
   \   00001818   0xF1B9 0x0F00      CMP      R9,#+0
   \   0000181C   0xD106             BNE.N    ??RoadBrd_ParseString_284
   1750                                            {
   1751                                              sprintf( (char *)tempBffr2, "TIR: GOOD CMD: %x.\r\n", Address);
   \   0000181E   0x4652             MOV      R2,R10
   \   00001820   0xF8DF 0x1D7C      LDR.W    R1,??RoadBrd_ParseString_285
   \   00001824   0xA810             ADD      R0,SP,#+64
   \   00001826   0x.... 0x....      BL       sprintf
   \   0000182A   0xE034             B.N      ??RoadBrd_ParseString_286
   1752                                            }
   1753                                            else
   1754                                            {
   1755                                              // 5. Time to get all the data.
   1756                                              Error = 0;
   \                     ??RoadBrd_ParseString_284: (+1)
   \   0000182C   0x2000             MOVS     R0,#+0
   \   0000182E   0x9031             STR      R0,[SP, #+196]
   1757                                              for (x=0; x<num_bytes; x++)
   \   00001830   0x2000             MOVS     R0,#+0
   \   00001832   0x0006             MOVS     R6,R0
   \                     ??RoadBrd_ParseString_287: (+1)
   \   00001834   0x454E             CMP      R6,R9
   \   00001836   0xDA2E             BGE.N    ??RoadBrd_ParseString_286
   1758                                              {
   1759                                                tempBffr3[0] = tempBffr[13+x*3];
   \   00001838   0x2003             MOVS     R0,#+3
   \   0000183A   0xFB00 0xF006      MUL      R0,R0,R6
   \   0000183E   0x4420             ADD      R0,R4,R0
   \   00001840   0xF990 0x000D      LDRSB    R0,[R0, #+13]
   \   00001844   0xF88D 0x0030      STRB     R0,[SP, #+48]
   1760                                                tempBffr3[1] = tempBffr[14+x*3];
   \   00001848   0x2003             MOVS     R0,#+3
   \   0000184A   0xFB00 0xF006      MUL      R0,R0,R6
   \   0000184E   0x4420             ADD      R0,R4,R0
   \   00001850   0xF990 0x000E      LDRSB    R0,[R0, #+14]
   \   00001854   0xF88D 0x0031      STRB     R0,[SP, #+49]
   1761                                                tempBffr3[2] = 0x00;
   \   00001858   0x2000             MOVS     R0,#+0
   \   0000185A   0xF88D 0x0032      STRB     R0,[SP, #+50]
   1762                                                if (isHexNum( (char *)tempBffr3 ) == 0)
   \   0000185E   0xA80C             ADD      R0,SP,#+48
   \   00001860   0x.... 0x....      BL       isHexNum
   \   00001864   0x2800             CMP      R0,#+0
   \   00001866   0xD10F             BNE.N    ??RoadBrd_ParseString_288
   1763                                                {
   1764                                                  strcpy( (char *)tempBffr2, "TIR SYNTAX ERROR: Data not HEX Value.\r\n");
   \   00001868   0xF8DF 0x1D5C      LDR.W    R1,??RoadBrd_ParseString_289
   \   0000186C   0xA810             ADD      R0,SP,#+64
   \   0000186E   0x.... 0x....      BL       strcpy
   1765                                                  Error = 1;
   \   00001872   0x2001             MOVS     R0,#+1
   \   00001874   0x9031             STR      R0,[SP, #+196]
   1766                                                  break;
   \   00001876   0xE00E             B.N      ??RoadBrd_ParseString_286
   \                     ??RoadBrd_ParseString_133:
   \   00001878   0x........         DC32     ?_42
   \   0000187C   0x........         DC32     ?_43
   \   00001880   0x........         DC32     ?_44
   \   00001884   0x........         DC32     ?_45
   1767                                                }
   1768                                                else
   1769                                                {
   1770                                                  i2cData[x] =  hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_288: (+1)
   \   00001888   0xA80C             ADD      R0,SP,#+48
   \   0000188A   0x.... 0x....      BL       hatoi
   \   0000188E   0xA987             ADD      R1,SP,#+540
   \   00001890   0x5588             STRB     R0,[R1, R6]
   1771                                                } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)
   1772                                              } //EndFor (x=0; x<num_bytes; x++)
   \   00001892   0x1C76             ADDS     R6,R6,#+1
   \   00001894   0xE7CE             B.N      ??RoadBrd_ParseString_287
   1773                                            } //EndElse (num_bytes == 0)
   1774                                            if (Error==0)
   \                     ??RoadBrd_ParseString_286: (+1)
   \   00001896   0x9831             LDR      R0,[SP, #+196]
   \   00001898   0x2800             CMP      R0,#+0
   \   0000189A   0xD105             BNE.N    ??RoadBrd_ParseString_290
   1775                                            {
   1776                                              sprintf( (char *)tempBffr2, "TIR: GOOD CMD: %x.", Address);
   \   0000189C   0x4652             MOV      R2,R10
   \   0000189E   0xF8DF 0x1D70      LDR.W    R1,??RoadBrd_ParseString_291
   \   000018A2   0xA810             ADD      R0,SP,#+64
   \   000018A4   0x.... 0x....      BL       sprintf
   1777                                            }
   1778                                            for(x=0; x<num_bytes; x++)
   \                     ??RoadBrd_ParseString_290: (+1)
   \   000018A8   0x2000             MOVS     R0,#+0
   \   000018AA   0x0006             MOVS     R6,R0
   \                     ??RoadBrd_ParseString_292: (+1)
   \   000018AC   0x454E             CMP      R6,R9
   \   000018AE   0xDA0B             BGE.N    ??RoadBrd_ParseString_293
   1779                                            {
   1780                                              sprintf( (char *)tempBffr3, "%x.", i2cData[x]);
   \   000018B0   0xA887             ADD      R0,SP,#+540
   \   000018B2   0x5D82             LDRB     R2,[R0, R6]
   \   000018B4   0xA14E             ADR.N    R1,??RoadBrd_ParseString_150+0x4  ;; "%x."
   \   000018B6   0xA80C             ADD      R0,SP,#+48
   \   000018B8   0x.... 0x....      BL       sprintf
   1781                                              strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   000018BC   0xA90C             ADD      R1,SP,#+48
   \   000018BE   0xA810             ADD      R0,SP,#+64
   \   000018C0   0x.... 0x....      BL       strcat
   1782                                            }
   \   000018C4   0x1C76             ADDS     R6,R6,#+1
   \   000018C6   0xE7F1             B.N      ??RoadBrd_ParseString_292
   1783                                            strcat( (char *)tempBffr2, "\r\n" );
   \                     ??RoadBrd_ParseString_293: (+1)
   \   000018C8   0xA1C5             ADR.N    R1,??RoadBrd_ParseString_175  ;; 0x0D, 0x0A, 0x00, 0x00
   \   000018CA   0xA810             ADD      R0,SP,#+64
   \   000018CC   0x.... 0x....      BL       strcat
   1784                                            // 6. Time to send Command and collect status.
   1785                                            Status =  RoadBrd_I2C_Master_Transmit((uint16_t)Address, i2cData, (uint16_t)num_bytes, I2C_TIMEOUT);
   \   000018D0   0xF44F 0x73FA      MOV      R3,#+500
   \   000018D4   0x4648             MOV      R0,R9
   \   000018D6   0x0002             MOVS     R2,R0
   \   000018D8   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   000018DA   0xA987             ADD      R1,SP,#+540
   \   000018DC   0x4650             MOV      R0,R10
   \   000018DE   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000018E0   0x.... 0x....      BL       RoadBrd_I2C_Master_Transmit
   \   000018E4   0x0005             MOVS     R5,R0
   1786                                            // 6a. Wait for Command to complete(100ms).
   1787           
   1788                                            // 7. If Status was good, Time to get response.
   1789                                            if (Status == HAL_OK)
   \   000018E6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000018E8   0x2D00             CMP      R5,#+0
   \   000018EA   0xD10E             BNE.N    ??RoadBrd_ParseString_294
   1790                                            {
   1791                                              Status =  RoadBrd_I2C_Master_Receive((uint16_t)Address, i2cData, (uint16_t)num_bytes_received, I2C_TIMEOUT);
   \   000018EC   0xF44F 0x73FA      MOV      R3,#+500
   \   000018F0   0x9836             LDR      R0,[SP, #+216]
   \   000018F2   0x0002             MOVS     R2,R0
   \   000018F4   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   000018F6   0xA987             ADD      R1,SP,#+540
   \   000018F8   0x4650             MOV      R0,R10
   \   000018FA   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000018FC   0x.... 0x....      BL       RoadBrd_I2C_Master_Receive
   \   00001900   0x0005             MOVS     R5,R0
   1792                                            }
   1793                                            else
   1794                                              break;
   1795                                            // 7a. Wait for Command to complete(100ms).
   1796                                            if (Status == HAL_OK)
   \   00001902   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001904   0x2D00             CMP      R5,#+0
   \   00001906   0xD105             BNE.N    ??RoadBrd_ParseString_295
   \   00001908   0xE000             B.N      ??RoadBrd_ParseString_296
   \                     ??RoadBrd_ParseString_294: (+1)
   \   0000190A   0xE0C0             B.N      ??RoadBrd_ParseString_256
   1797                                            {
   1798                                              Status = RoadBrd_WaitForState( 20 );
   \                     ??RoadBrd_ParseString_296: (+1)
   \   0000190C   0x2014             MOVS     R0,#+20
   \   0000190E   0x.... 0x....      BL       RoadBrd_WaitForState
   \   00001912   0x0005             MOVS     R5,R0
   1799                                            }
   1800          
   1801                                            // 8. IfGood report, Need to Output Data.
   1802                                            if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_295: (+1)
   \   00001914   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001916   0x2D00             CMP      R5,#+0
   \   00001918   0xD125             BNE.N    ??RoadBrd_ParseString_277
   1803                                            {
   1804                                              // Send string to UART..
   1805          #ifdef NUCLEO
   1806                                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1807          #else
   1808                                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000191A   0xA910             ADD      R1,SP,#+64
   \   0000191C   0x2000             MOVS     R0,#+0
   \   0000191E   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001922   0x0005             MOVS     R5,R0
   1809          #endif
   1810                                              if (Status != HAL_OK)
   \   00001924   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001926   0x2D00             CMP      R5,#+0
   \   00001928   0xD003             BEQ.N    ??RoadBrd_ParseString_297
   1811                                                return Status;
   \   0000192A   0x0028             MOVS     R0,R5
   \   0000192C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000192E   0xF000 0xBEBA      B.W      ??RoadBrd_ParseString_4
   1812                                              // NOW, Build Data String..
   1813                                              sprintf( (char *)tempBffr2, "     DATA: " );
   \                     ??RoadBrd_ParseString_297: (+1)
   \   00001932   0xF8DF 0x1D4C      LDR.W    R1,??RoadBrd_ParseString_298
   \   00001936   0xA810             ADD      R0,SP,#+64
   \   00001938   0x.... 0x....      BL       sprintf
   1814                                              for(x=0; x<num_bytes_received; x++)
   \   0000193C   0x2000             MOVS     R0,#+0
   \   0000193E   0x0006             MOVS     R6,R0
   \                     ??RoadBrd_ParseString_299: (+1)
   \   00001940   0x9836             LDR      R0,[SP, #+216]
   \   00001942   0x4286             CMP      R6,R0
   \   00001944   0xDA0B             BGE.N    ??RoadBrd_ParseString_300
   1815                                              {
   1816                                                sprintf( (char *)tempBffr3, "%x.", i2cData[x]);
   \   00001946   0xA887             ADD      R0,SP,#+540
   \   00001948   0x5D82             LDRB     R2,[R0, R6]
   \   0000194A   0xA129             ADR.N    R1,??RoadBrd_ParseString_150+0x4  ;; "%x."
   \   0000194C   0xA80C             ADD      R0,SP,#+48
   \   0000194E   0x.... 0x....      BL       sprintf
   1817                                                strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   00001952   0xA90C             ADD      R1,SP,#+48
   \   00001954   0xA810             ADD      R0,SP,#+64
   \   00001956   0x.... 0x....      BL       strcat
   1818                                              }
   \   0000195A   0x1C76             ADDS     R6,R6,#+1
   \   0000195C   0xE7F0             B.N      ??RoadBrd_ParseString_299
   1819                                              strcat( (char *)tempBffr2, "\r\n" );
   \                     ??RoadBrd_ParseString_300: (+1)
   \   0000195E   0xA1A0             ADR.N    R1,??RoadBrd_ParseString_175  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001960   0xA810             ADD      R0,SP,#+64
   \   00001962   0x.... 0x....      BL       strcat
   1820                                            }
   1821                                          }
   1822                                        } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)...NUMBER BYTES
   1823                                        
   1824                                      } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)...Address
   1825                                      
   1826                                    } //EndElse ( (tempBffr[2]!=':') || (tempBffr[5]!='.') )
   1827                                
   1828                                    break;
   \                     ??RoadBrd_ParseString_277: (+1)
   \   00001966   0xE092             B.N      ??RoadBrd_ParseString_256
   1829          //------------------
   1830                                  case 'Q':
   1831                                    //I2C Receive Command
   1832                                    // Step 1. Validate format.
   1833                                    if( (tempBffr[3]!=':') ||
   1834                                        (tempBffr[6]!='.')  )
   \                     ??RoadBrd_ParseString_257: (+1)
   \   00001968   0x78E0             LDRB     R0,[R4, #+3]
   \   0000196A   0x283A             CMP      R0,#+58
   \   0000196C   0xD102             BNE.N    ??RoadBrd_ParseString_301
   \   0000196E   0x79A0             LDRB     R0,[R4, #+6]
   \   00001970   0x282E             CMP      R0,#+46
   \   00001972   0xD00B             BEQ.N    ??RoadBrd_ParseString_302
   1835                                    {
   1836                                      strcpy( (char *)tempBffr2, "TIQ SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_301: (+1)
   \   00001974   0x.... 0x....      LDR.W    R1,??DataTable0
   \   00001978   0xA810             ADD      R0,SP,#+64
   \   0000197A   0x.... 0x....      BL       strcpy
   \   0000197E   0xE080             B.N      ??RoadBrd_ParseString_303
   \                     ??RoadBrd_ParseString_144:
   \   00001980   0x........         DC32     ?_46
   \   00001984   0x........         DC32     ?_47
   \   00001988   0x........         DC32     ?_48
   1837                                    }
   1838                                    else
   1839                                    {
   1840                                      // 2. Grab Address and validate a legal number
   1841                                      tempBffr3[0] = tempBffr[4];
   \                     ??RoadBrd_ParseString_302: (+1)
   \   0000198C   0xF994 0x0004      LDRSB    R0,[R4, #+4]
   \   00001990   0xF88D 0x0030      STRB     R0,[SP, #+48]
   1842                                      tempBffr3[1] = tempBffr[5];
   \   00001994   0xF994 0x0005      LDRSB    R0,[R4, #+5]
   \   00001998   0xF88D 0x0031      STRB     R0,[SP, #+49]
   1843                                      tempBffr3[2] = 0x00;
   \   0000199C   0x2000             MOVS     R0,#+0
   \   0000199E   0xF88D 0x0032      STRB     R0,[SP, #+50]
   1844                                      if (isHexNum( (char *)tempBffr3 ) == 0)
   \   000019A2   0xA80C             ADD      R0,SP,#+48
   \   000019A4   0x.... 0x....      BL       isHexNum
   \   000019A8   0x2800             CMP      R0,#+0
   \   000019AA   0xD105             BNE.N    ??RoadBrd_ParseString_304
   1845                                        strcpy( (char *)tempBffr2, "TIQ SYNTAX ERROR: Address not HEX Value.\r\n");
   \   000019AC   0x.... 0x....      LDR.W    R1,??DataTable0_1
   \   000019B0   0xA810             ADD      R0,SP,#+64
   \   000019B2   0x.... 0x....      BL       strcpy
   \   000019B6   0xE064             B.N      ??RoadBrd_ParseString_303
   1846                                      else
   1847                                      {
   1848                                        // Legal Address. Save it as value
   1849                                        Address = hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_304: (+1)
   \   000019B8   0xA80C             ADD      R0,SP,#+48
   \   000019BA   0x.... 0x....      BL       hatoi
   \   000019BE   0x4682             MOV      R10,R0
   1850                                        // 3. Now get the number of bytes Received of data from field.
   1851                                        tempBffr3[0] = tempBffr[7];
   \   000019C0   0xF994 0x0007      LDRSB    R0,[R4, #+7]
   \   000019C4   0xF88D 0x0030      STRB     R0,[SP, #+48]
   1852                                        tempBffr3[1] = tempBffr[8];
   \   000019C8   0xF994 0x0008      LDRSB    R0,[R4, #+8]
   \   000019CC   0xF88D 0x0031      STRB     R0,[SP, #+49]
   1853                                        tempBffr3[2] = 0x00;
   \   000019D0   0x2000             MOVS     R0,#+0
   \   000019D2   0xF88D 0x0032      STRB     R0,[SP, #+50]
   1854                                        if (isHexNum( (char *)tempBffr3 ) == 0)
   \   000019D6   0xA80C             ADD      R0,SP,#+48
   \   000019D8   0x.... 0x....      BL       isHexNum
   \   000019DC   0x2800             CMP      R0,#+0
   \   000019DE   0xD109             BNE.N    ??RoadBrd_ParseString_305
   1855                                          strcpy( (char *)tempBffr2, "TIQ SYNTAX ERROR: Number of Bytes not HEX Value.\r\n");
   \   000019E0   0x.... 0x....      LDR.W    R1,??DataTable0_2
   \   000019E4   0xA810             ADD      R0,SP,#+64
   \   000019E6   0x.... 0x....      BL       strcpy
   \   000019EA   0xE04A             B.N      ??RoadBrd_ParseString_303
   \                     ??RoadBrd_ParseString_150:
   \   000019EC   0x........         DC32     ?_49
   \   000019F0   0x25 0x78          DC8      "%x."
   \              0x2E 0x00    
   1856                                        else
   1857                                        {
   1858                                            // Legal NUMBER BYTES. Save it as value
   1859                                            num_bytes_received = hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_305: (+1)
   \   000019F4   0xA80C             ADD      R0,SP,#+48
   \   000019F6   0x.... 0x....      BL       hatoi
   \   000019FA   0x9036             STR      R0,[SP, #+216]
   1860                                            // 4. Test num_bytes. If Zero, We are done
   1861                                            sprintf( (char *)tempBffr2, "TIR: GOOD CMD: %x.\r\n", Address);
   \   000019FC   0x4652             MOV      R2,R10
   \   000019FE   0xF8DF 0x1BA0      LDR.W    R1,??RoadBrd_ParseString_285
   \   00001A02   0xA810             ADD      R0,SP,#+64
   \   00001A04   0x.... 0x....      BL       sprintf
   1862                                            // 7. If Status was good, Time to get response.
   1863                                            Status =  RoadBrd_I2C_Master_Receive((uint16_t)Address, i2cData, (uint16_t)num_bytes_received, I2C_TIMEOUT);
   \   00001A08   0xF44F 0x73FA      MOV      R3,#+500
   \   00001A0C   0x9836             LDR      R0,[SP, #+216]
   \   00001A0E   0x0002             MOVS     R2,R0
   \   00001A10   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00001A12   0xA987             ADD      R1,SP,#+540
   \   00001A14   0x4650             MOV      R0,R10
   \   00001A16   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00001A18   0x.... 0x....      BL       RoadBrd_I2C_Master_Receive
   \   00001A1C   0x0005             MOVS     R5,R0
   1864                                            // 7a. Wait for Command to complete(100ms).
   1865                                            if (Status == HAL_OK)
   \   00001A1E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001A20   0x2D00             CMP      R5,#+0
   \   00001A22   0xD107             BNE.N    ??RoadBrd_ParseString_306
   1866                                            {
   1867                                              Status = RoadBrd_WaitForState( 20 );
   \   00001A24   0x2014             MOVS     R0,#+20
   \   00001A26   0x.... 0x....      BL       RoadBrd_WaitForState
   \   00001A2A   0x0005             MOVS     R5,R0
   1868                                            }
   1869                                            else
   1870                                              break;
   1871                                            // 8. IfGood report, Need to Output Data.
   1872                                            if (Status == HAL_OK)
   \   00001A2C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001A2E   0x2D00             CMP      R5,#+0
   \   00001A30   0xD127             BNE.N    ??RoadBrd_ParseString_303
   \   00001A32   0xE000             B.N      ??RoadBrd_ParseString_307
   \                     ??RoadBrd_ParseString_306: (+1)
   \   00001A34   0xE02B             B.N      ??RoadBrd_ParseString_256
   1873                                            {
   1874                                              // Send string to UART..
   1875          #ifdef NUCLEO
   1876                                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1877          #else
   1878                                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \                     ??RoadBrd_ParseString_307: (+1)
   \   00001A36   0xA910             ADD      R1,SP,#+64
   \   00001A38   0x2000             MOVS     R0,#+0
   \   00001A3A   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001A3E   0x0005             MOVS     R5,R0
   1879          #endif
   1880                                              if (Status != HAL_OK)
   \   00001A40   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001A42   0x2D00             CMP      R5,#+0
   \   00001A44   0xD003             BEQ.N    ??RoadBrd_ParseString_308
   1881                                                return Status;
   \   00001A46   0x0028             MOVS     R0,R5
   \   00001A48   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001A4A   0xF000 0xBE2C      B.W      ??RoadBrd_ParseString_4
   1882                                              // NOW, Build Data String..
   1883                                              sprintf( (char *)tempBffr2, "     DATA: " );
   \                     ??RoadBrd_ParseString_308: (+1)
   \   00001A4E   0xF8DF 0x1C30      LDR.W    R1,??RoadBrd_ParseString_298
   \   00001A52   0xA810             ADD      R0,SP,#+64
   \   00001A54   0x.... 0x....      BL       sprintf
   1884                                              for(x=0; x<num_bytes_received; x++)
   \   00001A58   0x2000             MOVS     R0,#+0
   \   00001A5A   0x0006             MOVS     R6,R0
   \                     ??RoadBrd_ParseString_309: (+1)
   \   00001A5C   0x9836             LDR      R0,[SP, #+216]
   \   00001A5E   0x4286             CMP      R6,R0
   \   00001A60   0xDA0B             BGE.N    ??RoadBrd_ParseString_310
   1885                                              {
   1886                                                sprintf( (char *)tempBffr3, "%x.", i2cData[x]);
   \   00001A62   0xA887             ADD      R0,SP,#+540
   \   00001A64   0x5D82             LDRB     R2,[R0, R6]
   \   00001A66   0xA1CB             ADR.N    R1,??RoadBrd_ParseString_311  ;; "%x."
   \   00001A68   0xA80C             ADD      R0,SP,#+48
   \   00001A6A   0x.... 0x....      BL       sprintf
   1887                                                strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   00001A6E   0xA90C             ADD      R1,SP,#+48
   \   00001A70   0xA810             ADD      R0,SP,#+64
   \   00001A72   0x.... 0x....      BL       strcat
   1888                                              }
   \   00001A76   0x1C76             ADDS     R6,R6,#+1
   \   00001A78   0xE7F0             B.N      ??RoadBrd_ParseString_309
   1889                                              strcat( (char *)tempBffr2, "\r\n" );
   \                     ??RoadBrd_ParseString_310: (+1)
   \   00001A7A   0xA159             ADR.N    R1,??RoadBrd_ParseString_175  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001A7C   0xA810             ADD      R0,SP,#+64
   \   00001A7E   0x.... 0x....      BL       strcat
   1890                                          }
   1891                                        } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)...NUMBER BYTES
   1892                                        
   1893                                      } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)...Address
   1894                                      
   1895                                    } //EndElse ( (tempBffr[2]!=':') || (tempBffr[5]!='.') )
   1896                                
   1897                                    break;
   \                     ??RoadBrd_ParseString_303: (+1)
   \   00001A82   0xE004             B.N      ??RoadBrd_ParseString_256
   1898                                  default:
   1899                                    strcpy( (char *)tempBffr2, "ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_258: (+1)
   \   00001A84   0xF8DF 0x1820      LDR.W    R1,??RoadBrd_ParseString_237+0x8
   \   00001A88   0xA810             ADD      R0,SP,#+64
   \   00001A8A   0x.... 0x....      BL       strcpy
   1900                                    break;
   1901                                } //EndSwitch ( tempBffr[2] )
   1902                              } //EndElse (Size < 9)
   1903                              break;
   \                     ??RoadBrd_ParseString_256: (+1)
   \   00001A8E   0xF000 0xBD8D      B.W      ??RoadBrd_ParseString_246
   \   00001A92   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_159:
   \   00001A94   0x........         DC32     ?_50
   \   00001A98   0x........         DC32     ?_51
   \   00001A9C   0x........         DC32     ?_52
   \   00001AA0   0x........         DC32     ?_53
   1904          //++++++++++++++++++++++++++++++++++++++++++  Calibration Commands.
   1905                            case 'C':
   1906                              Status = HAL_OK;
   \                     ??RoadBrd_ParseString_247: (+1)
   \   00001AA4   0x2000             MOVS     R0,#+0
   \   00001AA6   0x0005             MOVS     R5,R0
   1907                              if (Size == 2)
   \   00001AA8   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00001AAC   0xF1B8 0x0F02      CMP      R8,#+2
   \   00001AB0   0xD176             BNE.N    ??RoadBrd_ParseString_312
   1908                              {
   1909                                //------------------ TC Command: Dump Calibration Settings.      
   1910                                // Read Cool Eye/Grid Eye Values.....
   1911                                if ( Get_DriverStates( GRIDEYE_MNTR_TASK ))
   \   00001AB2   0x2005             MOVS     R0,#+5
   \   00001AB4   0x.... 0x....      BL       Get_DriverStates
   \   00001AB8   0x2800             CMP      R0,#+0
   \   00001ABA   0xD004             BEQ.N    ??RoadBrd_ParseString_313
   1912                                {
   1913                                  Status = RoadBrd_GridEye_ReadValues( &GridMeasure );
   \   00001ABC   0xA84D             ADD      R0,SP,#+308
   \   00001ABE   0x.... 0x....      BL       RoadBrd_GridEye_ReadValues
   \   00001AC2   0x0005             MOVS     R5,R0
   \   00001AC4   0xE00B             B.N      ??RoadBrd_ParseString_314
   1914                                }
   1915                                else if ( Get_DriverStates( COOLEYE_MNTR_TASK ))
   \                     ??RoadBrd_ParseString_313: (+1)
   \   00001AC6   0x2006             MOVS     R0,#+6
   \   00001AC8   0x.... 0x....      BL       Get_DriverStates
   \   00001ACC   0x2800             CMP      R0,#+0
   \   00001ACE   0xD004             BEQ.N    ??RoadBrd_ParseString_315
   1916                                {
   1917                                  Status = RoadBrd_CoolEye_ReadValues( &GridMeasure );
   \   00001AD0   0xA84D             ADD      R0,SP,#+308
   \   00001AD2   0x.... 0x....      BL       RoadBrd_CoolEye_ReadValues
   \   00001AD6   0x0005             MOVS     R5,R0
   \   00001AD8   0xE001             B.N      ??RoadBrd_ParseString_314
   1918                                }
   1919                                else
   1920                                  Status = HAL_ERROR;
   \                     ??RoadBrd_ParseString_315: (+1)
   \   00001ADA   0x2001             MOVS     R0,#+1
   \   00001ADC   0x0005             MOVS     R5,R0
   1921                                
   1922                                if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_314: (+1)
   \   00001ADE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001AE0   0x2D00             CMP      R5,#+0
   \   00001AE2   0xD157             BNE.N    ??RoadBrd_ParseString_316
   1923                                {
   1924                                  // OK Next Sensor.
   1925                                  // Read Temperature sensor and return results....Temperature Sensor U10(PCT2075GVJ).  Addr: 0x94
   1926                                  Status = RoadBrd_ReadTemp( &TMeasure );
   \   00001AE4   0xA838             ADD      R0,SP,#+224
   \   00001AE6   0x.... 0x....      BL       RoadBrd_ReadTemp
   \   00001AEA   0x0005             MOVS     R5,R0
   1927                                  if (Status == HAL_OK)
   \   00001AEC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001AEE   0x2D00             CMP      R5,#+0
   \   00001AF0   0xD14A             BNE.N    ??RoadBrd_ParseString_317
   1928                                  {
   1929                                    // OK Next Sensor.
   1930                                    // Read Humidity Sensor sensor and return Humidity results....
   1931                                    Status = RoadBrd_Humidity_ReadHumidity( &HMeasure );
   \   00001AF2   0xA83F             ADD      R0,SP,#+252
   \   00001AF4   0x.... 0x....      BL       RoadBrd_Humidity_ReadHumidity
   \   00001AF8   0x0005             MOVS     R5,R0
   1932                                    if (Status == HAL_OK)
   \   00001AFA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001AFC   0x2D00             CMP      R5,#+0
   \   00001AFE   0xD13A             BNE.N    ??RoadBrd_ParseString_318
   1933                                    {
   1934                                      // OK Next Sensor.
   1935                                      //Status = RoadBrd_Barometer_Status( &PRMeasure );
   1936                                      Status = RoadBrd_Baro_ReadPressure( &PRPMeasure );
   \   00001B00   0xA8A9             ADD      R0,SP,#+676
   \   00001B02   0x.... 0x....      BL       RoadBrd_Baro_ReadPressure
   \   00001B06   0x0005             MOVS     R5,R0
   1937                                      if (Status == HAL_OK)
   \   00001B08   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001B0A   0x2D00             CMP      R5,#+0
   \   00001B0C   0xD12D             BNE.N    ??RoadBrd_ParseString_319
   1938                                      {
   1939                                        //sprintf( (char *)tempBffr2, "Driver Status: %04x\r\n", DriverStatus );
   1940                                        sprintf( (char *)tempBffr2, "%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\r\n", (char *)GridMeasure.GridEye1.TempC,
   1941                                                (char *)GridMeasure.GridEye2.TempC,
   1942                                                (char *)GridMeasure.GridEye3.TempC,
   1943                                                (char *)GridMeasure.GridEye4.TempC,
   1944                                                (char *)GridMeasure.GridEye5.TempC,
   1945                                                (char *)GridMeasure.GridEye6.TempC,
   1946                                                (char *)GridMeasure.GridEye7.TempC,
   1947                                                (char *)GridMeasure.GridEye8.TempC,
   1948                                                (char *)GridMeasure.Thermistor.TempC,
   1949                                                (char *)TMeasure.TempC,
   1950                                                (char *)HMeasure.Humidity,
   1951                                                (char *)PRPMeasure.Pressure);
   \   00001B0E   0xA8A9             ADD      R0,SP,#+676
   \   00001B10   0x9009             STR      R0,[SP, #+36]
   \   00001B12   0xA83F             ADD      R0,SP,#+252
   \   00001B14   0x9008             STR      R0,[SP, #+32]
   \   00001B16   0xA838             ADD      R0,SP,#+224
   \   00001B18   0x9007             STR      R0,[SP, #+28]
   \   00001B1A   0xA84D             ADD      R0,SP,#+308
   \   00001B1C   0x9006             STR      R0,[SP, #+24]
   \   00001B1E   0xA87D             ADD      R0,SP,#+500
   \   00001B20   0x9005             STR      R0,[SP, #+20]
   \   00001B22   0xA877             ADD      R0,SP,#+476
   \   00001B24   0x9004             STR      R0,[SP, #+16]
   \   00001B26   0xA871             ADD      R0,SP,#+452
   \   00001B28   0x9003             STR      R0,[SP, #+12]
   \   00001B2A   0xA86B             ADD      R0,SP,#+428
   \   00001B2C   0x9002             STR      R0,[SP, #+8]
   \   00001B2E   0xA865             ADD      R0,SP,#+404
   \   00001B30   0x9001             STR      R0,[SP, #+4]
   \   00001B32   0xA85F             ADD      R0,SP,#+380
   \   00001B34   0x9000             STR      R0,[SP, #+0]
   \   00001B36   0xAB59             ADD      R3,SP,#+356
   \   00001B38   0xAA53             ADD      R2,SP,#+332
   \   00001B3A   0x.... 0x....      LDR.W    R1,??DataTable0_3
   \   00001B3E   0xA810             ADD      R0,SP,#+64
   \   00001B40   0x.... 0x....      BL       sprintf
   1952                                        // Send string to UART..
   1953          #ifdef NUCLEO
   1954                                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1955          #else
   1956                                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00001B44   0xA910             ADD      R1,SP,#+64
   \   00001B46   0x2000             MOVS     R0,#+0
   \   00001B48   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001B4C   0x0005             MOVS     R5,R0
   1957          #endif
   1958                                        if (Status != HAL_OK)
   \   00001B4E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001B50   0x2D00             CMP      R5,#+0
   \   00001B52   0xD003             BEQ.N    ??RoadBrd_ParseString_320
   1959                                          return Status;
   \   00001B54   0x0028             MOVS     R0,R5
   \   00001B56   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001B58   0xF000 0xBDA5      B.W      ??RoadBrd_ParseString_4
   1960                                        // NOW, Build Data String..
   1961                                        sprintf( (char *)tempBffr2, "COMPLETE" );
   \                     ??RoadBrd_ParseString_320: (+1)
   \   00001B5C   0x.... 0x....      LDR.W    R1,??DataTable0_4
   \   00001B60   0xA810             ADD      R0,SP,#+64
   \   00001B62   0x.... 0x....      BL       sprintf
   \   00001B66   0xF000 0xBBEA      B.W      ??RoadBrd_ParseString_321
   1962                                      } // Endif (Status == HAL_OK) RoadBrd_Baro_ReadPressure
   1963                                      else
   1964                                      {
   1965                                        sprintf( (char *)tempBffr2, "Pressure TASKING ERROR!" );
   \                     ??RoadBrd_ParseString_319: (+1)
   \   00001B6A   0x.... 0x....      LDR.W    R1,??DataTable0_5
   \   00001B6E   0xA810             ADD      R0,SP,#+64
   \   00001B70   0x.... 0x....      BL       sprintf
   \   00001B74   0xE3E3             B.N      ??RoadBrd_ParseString_321
   1966                                      } // EndElse (Status == HAL_OK) RoadBrd_Baro_ReadPressure
   1967                                    } // Endif (Status == HAL_OK) RoadBrd_Humidity_ReadHumidity
   1968                                    else
   1969                                    {
   1970                                      sprintf( (char *)tempBffr2, "Humidity TASKING ERROR!" );
   \                     ??RoadBrd_ParseString_318: (+1)
   \   00001B76   0x.... 0x....      LDR.W    R1,??DataTable0_6
   \   00001B7A   0xA810             ADD      R0,SP,#+64
   \   00001B7C   0x.... 0x....      BL       sprintf
   \   00001B80   0xE3DD             B.N      ??RoadBrd_ParseString_321
   \   00001B82   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_169:
   \   00001B84   0x........         DC32     ?_54
   1971                                    } // EndElse (Status == HAL_OK) RoadBrd_Humidity_ReadHumidity
   1972                                  } // Endif (Status == HAL_OK) RoadBrd_ReadTemp
   1973                                  else
   1974                                  {
   1975                                    sprintf( (char *)tempBffr2, "AMBIENT TEMPERATURE TASKING ERROR!" );
   \                     ??RoadBrd_ParseString_317: (+1)
   \   00001B88   0x.... 0x....      LDR.W    R1,??DataTable0_7
   \   00001B8C   0xA810             ADD      R0,SP,#+64
   \   00001B8E   0x.... 0x....      BL       sprintf
   \   00001B92   0xE3D4             B.N      ??RoadBrd_ParseString_321
   1976                                  } // EndElse (Status == HAL_OK) RoadBrd_ReadTemp
   1977                                } // Endif (Status == HAL_OK) RoadBrd_CoolEye_ReadValues
   1978                                else
   1979                                {
   1980                                  sprintf( (char *)tempBffr2, "GRID EYE/COOL EYE TASKING ERROR!" );
   \                     ??RoadBrd_ParseString_316: (+1)
   \   00001B94   0x.... 0x....      LDR.W    R1,??DataTable0_8
   \   00001B98   0xA810             ADD      R0,SP,#+64
   \   00001B9A   0x.... 0x....      BL       sprintf
   \   00001B9E   0xE3CE             B.N      ??RoadBrd_ParseString_321
   1981                                } // EndElse (Status == HAL_OK) RoadBrd_CoolEye_ReadValues
   1982                              }
   1983                              else
   1984                              {
   1985                                switch( tempBffr[2] )
   \                     ??RoadBrd_ParseString_312: (+1)
   \   00001BA0   0x78A0             LDRB     R0,[R4, #+2]
   \   00001BA2   0x2852             CMP      R0,#+82
   \   00001BA4   0xF000 0x830F      BEQ.W    ??RoadBrd_ParseString_322
   \   00001BA8   0xF0C0 0x83C9      BCC.W    ??RoadBrd_ParseString_321
   \   00001BAC   0x2854             CMP      R0,#+84
   \   00001BAE   0xF000 0x835F      BEQ.W    ??RoadBrd_ParseString_323
   \   00001BB2   0xF080 0x83C4      BCS.W    ??RoadBrd_ParseString_321
   1986                                {
   1987                                  //------------------ TCS Command: Calibration Set Command
   1988                                case 'S':
   1989                                  // Step 1. Validate format.
   1990                                  if(tempBffr[3]!=':')
   \                     ??RoadBrd_ParseString_324: (+1)
   \   00001BB6   0x78E0             LDRB     R0,[R4, #+3]
   \   00001BB8   0x283A             CMP      R0,#+58
   \   00001BBA   0xD005             BEQ.N    ??RoadBrd_ParseString_325
   1991                                  {
   1992                                    strcpy( (char *)tempBffr2, "TCS SYNTAX ERROR: Not correct format.\r\n");
   \   00001BBC   0x.... 0x....      LDR.W    R1,??DataTable0_9
   \   00001BC0   0xA810             ADD      R0,SP,#+64
   \   00001BC2   0x.... 0x....      BL       strcpy
   \   00001BC6   0xE2FD             B.N      ??RoadBrd_ParseString_326
   1993                                  } // Endif (tempBffr[3]!=':')
   1994                                  else
   1995                                  {
   1996                                    // 2. Verify if remaining string is digits
   1997                                    if (Size <= 4)
   \                     ??RoadBrd_ParseString_325: (+1)
   \   00001BC8   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00001BCC   0xF1B8 0x0F05      CMP      R8,#+5
   \   00001BD0   0xDA0A             BGE.N    ??RoadBrd_ParseString_327
   1998                                    {
   1999                                      strcpy( (char *)tempBffr2, "TCS SYNTAX ERROR: Bad Parameter.\r\n");
   \   00001BD2   0x.... 0x....      LDR.W    R1,??DataTable0_10
   \   00001BD6   0xA810             ADD      R0,SP,#+64
   \   00001BD8   0x.... 0x....      BL       strcpy
   \   00001BDC   0xE2F2             B.N      ??RoadBrd_ParseString_326
   \   00001BDE   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_175:
   \   00001BE0   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
   \   00001BE4   0x........         DC32     ?_55
   2000                                    } // EndIf (Size > 4)
   2001                                    else
   2002                                    {
   2003                                      // 3. Grab remaining string and convert to integer.
   2004                                      tempPstr = &tempBffr[4];
   \                     ??RoadBrd_ParseString_327: (+1)
   \   00001BE8   0x1D20             ADDS     R0,R4,#+4
   \   00001BEA   0x9035             STR      R0,[SP, #+212]
   2005                                      strcpy(tempstr, tempPstr);
   \   00001BEC   0x9935             LDR      R1,[SP, #+212]
   \   00001BEE   0xA89B             ADD      R0,SP,#+620
   \   00001BF0   0x.... 0x....      BL       strcpy
   2006                                      // Time to parse and test remaining string
   2007                                      Scale = 0.0;
   \   00001BF4   0x2000             MOVS     R0,#+0
   \   00001BF6   0x900B             STR      R0,[SP, #+44]
   2008                                      Offset = 0.0;
   \   00001BF8   0x2000             MOVS     R0,#+0
   \   00001BFA   0x900A             STR      R0,[SP, #+40]
   2009                                      if (sscanf (tempstr, "%s %f %f", uuid, &Scale, &Offset) == 3)
   \   00001BFC   0xA80A             ADD      R0,SP,#+40
   \   00001BFE   0x9000             STR      R0,[SP, #+0]
   \   00001C00   0xAB0B             ADD      R3,SP,#+44
   \   00001C02   0xAA32             ADD      R2,SP,#+200
   \   00001C04   0x.... 0x....      LDR.W    R1,??DataTable1
   \   00001C08   0xA89B             ADD      R0,SP,#+620
   \   00001C0A   0x.... 0x....      BL       sscanf
   \   00001C0E   0x2803             CMP      R0,#+3
   \   00001C10   0xF040 0x82D3      BNE.W    ??RoadBrd_ParseString_328
   2010                                      {
   2011                                        sprintf( (char *)tempBffr2, "Parms: %s, %f, %f.\r\n", uuid, Scale, Offset );
   \   00001C14   0x980A             LDR      R0,[SP, #+40]
   \   00001C16   0x.... 0x....      BL       __aeabi_f2d
   \   00001C1A   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00001C1E   0x980B             LDR      R0,[SP, #+44]
   \   00001C20   0x.... 0x....      BL       __aeabi_f2d
   \   00001C24   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00001C28   0xAA32             ADD      R2,SP,#+200
   \   00001C2A   0x.... 0x....      LDR.W    R1,??DataTable1_1
   \   00001C2E   0xA810             ADD      R0,SP,#+64
   \   00001C30   0x.... 0x....      BL       sprintf
   2012                                        // OK, We have 3 good parameters... NOW Need to determine if UUID is good.
   2013                                        if (strncmp((char *)uuid,"0002",4) == 0) // Shnt_Vltg
   \   00001C34   0x2204             MOVS     R2,#+4
   \   00001C36   0x.... 0x....      LDR.W    R1,??DataTable1_2
   \   00001C3A   0xA832             ADD      R0,SP,#+200
   \   00001C3C   0x.... 0x....      BL       strncmp
   \   00001C40   0x2800             CMP      R0,#+0
   \   00001C42   0xD114             BNE.N    ??RoadBrd_ParseString_329
   2014                                        {
   2015                                          Status = RoadBrd_CAL_Set_CalItem( CAL_SHNT_VLTG, Offset, Scale);
   \   00001C44   0x9A0B             LDR      R2,[SP, #+44]
   \   00001C46   0x990A             LDR      R1,[SP, #+40]
   \   00001C48   0x2000             MOVS     R0,#+0
   \   00001C4A   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00001C4E   0x0005             MOVS     R5,R0
   2016                                          if (Status == HAL_OK)
   \   00001C50   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001C52   0x2D00             CMP      R5,#+0
   \   00001C54   0xD105             BNE.N    ??RoadBrd_ParseString_330
   2017                                            sprintf( (char *)tempBffr2, "Shnt_Vltg Set COMPLETE.\r\n" );
   \   00001C56   0x.... 0x....      LDR.W    R1,??DataTable1_3
   \   00001C5A   0xA810             ADD      R0,SP,#+64
   \   00001C5C   0x.... 0x....      BL       sprintf
   \   00001C60   0xE2A8             B.N      ??RoadBrd_ParseString_331
   2018                                          else
   2019                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_330: (+1)
   \   00001C62   0x.... 0x....      LDR.W    R1,??DataTable1_4
   \   00001C66   0xA810             ADD      R0,SP,#+64
   \   00001C68   0x.... 0x....      BL       sprintf
   \   00001C6C   0xE2A2             B.N      ??RoadBrd_ParseString_331
   2020                                        }
   2021                                        else if (strncmp((char *)uuid,"0004",4) == 0) // Current
   \                     ??RoadBrd_ParseString_329: (+1)
   \   00001C6E   0x2204             MOVS     R2,#+4
   \   00001C70   0x.... 0x....      LDR.W    R1,??DataTable1_5
   \   00001C74   0xA832             ADD      R0,SP,#+200
   \   00001C76   0x.... 0x....      BL       strncmp
   \   00001C7A   0x2800             CMP      R0,#+0
   \   00001C7C   0xD114             BNE.N    ??RoadBrd_ParseString_332
   2022                                        {
   2023                                          Status = RoadBrd_CAL_Set_CalItem( CAL_CURRENT, Offset, Scale);
   \   00001C7E   0x9A0B             LDR      R2,[SP, #+44]
   \   00001C80   0x990A             LDR      R1,[SP, #+40]
   \   00001C82   0x2001             MOVS     R0,#+1
   \   00001C84   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00001C88   0x0005             MOVS     R5,R0
   2024                                          if (Status == HAL_OK)
   \   00001C8A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001C8C   0x2D00             CMP      R5,#+0
   \   00001C8E   0xD105             BNE.N    ??RoadBrd_ParseString_333
   2025                                            sprintf( (char *)tempBffr2, "Current Set COMPLETE." );
   \   00001C90   0x.... 0x....      LDR.W    R1,??DataTable1_6
   \   00001C94   0xA810             ADD      R0,SP,#+64
   \   00001C96   0x.... 0x....      BL       sprintf
   \   00001C9A   0xE28B             B.N      ??RoadBrd_ParseString_331
   2026                                          else
   2027                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_333: (+1)
   \   00001C9C   0x.... 0x....      LDR.W    R1,??DataTable1_4
   \   00001CA0   0xA810             ADD      R0,SP,#+64
   \   00001CA2   0x.... 0x....      BL       sprintf
   \   00001CA6   0xE285             B.N      ??RoadBrd_ParseString_331
   2028                                        }
   2029                                        else if (strncmp((char *)uuid,"0006",4) == 0) // Power
   \                     ??RoadBrd_ParseString_332: (+1)
   \   00001CA8   0x2204             MOVS     R2,#+4
   \   00001CAA   0x.... 0x....      LDR.W    R1,??DataTable1_7
   \   00001CAE   0xA832             ADD      R0,SP,#+200
   \   00001CB0   0x.... 0x....      BL       strncmp
   \   00001CB4   0x2800             CMP      R0,#+0
   \   00001CB6   0xD117             BNE.N    ??RoadBrd_ParseString_334
   2030                                        {
   2031                                          Status = RoadBrd_CAL_Set_CalItem( CAL_POWER, Offset, Scale);
   \   00001CB8   0x9A0B             LDR      R2,[SP, #+44]
   \   00001CBA   0x990A             LDR      R1,[SP, #+40]
   \   00001CBC   0x2002             MOVS     R0,#+2
   \   00001CBE   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00001CC2   0x0005             MOVS     R5,R0
   2032                                          if (Status == HAL_OK)
   \   00001CC4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001CC6   0x2D00             CMP      R5,#+0
   \   00001CC8   0xD108             BNE.N    ??RoadBrd_ParseString_335
   2033                                            sprintf( (char *)tempBffr2, "Power Set COMPLETE." );
   \   00001CCA   0x.... 0x....      LDR.W    R1,??DataTable1_8
   \   00001CCE   0xA810             ADD      R0,SP,#+64
   \   00001CD0   0x.... 0x....      BL       sprintf
   \   00001CD4   0xE26E             B.N      ??RoadBrd_ParseString_331
   \   00001CD6   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_181:
   \   00001CD8   0x........         DC32     ?_56
   2034                                          else
   2035                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_335: (+1)
   \   00001CDC   0x.... 0x....      LDR.W    R1,??DataTable1_4
   \   00001CE0   0xA810             ADD      R0,SP,#+64
   \   00001CE2   0x.... 0x....      BL       sprintf
   \   00001CE6   0xE265             B.N      ??RoadBrd_ParseString_331
   2036                                        }
   2037                                        else if (strncmp((char *)uuid,"0008",4) == 0) // Voltage
   \                     ??RoadBrd_ParseString_334: (+1)
   \   00001CE8   0x2204             MOVS     R2,#+4
   \   00001CEA   0x.... 0x....      LDR.W    R1,??DataTable1_9
   \   00001CEE   0xA832             ADD      R0,SP,#+200
   \   00001CF0   0x.... 0x....      BL       strncmp
   \   00001CF4   0x2800             CMP      R0,#+0
   \   00001CF6   0xD119             BNE.N    ??RoadBrd_ParseString_336
   2038                                        {
   2039                                          Status = RoadBrd_CAL_Set_CalItem( CAL_VOLTAGE, Offset, Scale);
   \   00001CF8   0x9A0B             LDR      R2,[SP, #+44]
   \   00001CFA   0x990A             LDR      R1,[SP, #+40]
   \   00001CFC   0x2003             MOVS     R0,#+3
   \   00001CFE   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00001D02   0x0005             MOVS     R5,R0
   2040                                          if (Status == HAL_OK)
   \   00001D04   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001D06   0x2D00             CMP      R5,#+0
   \   00001D08   0xD10A             BNE.N    ??RoadBrd_ParseString_337
   2041                                            sprintf( (char *)tempBffr2, "Voltage Set COMPLETE." );
   \   00001D0A   0x.... 0x....      LDR.W    R1,??DataTable1_10
   \   00001D0E   0xA810             ADD      R0,SP,#+64
   \   00001D10   0x.... 0x....      BL       sprintf
   \   00001D14   0xE24E             B.N      ??RoadBrd_ParseString_331
   \   00001D16   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_182:
   \   00001D18   0x........         DC32     ?_57
   \   00001D1C   0x........         DC32     ?_58
   2042                                          else
   2043                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_337: (+1)
   \   00001D20   0x.... 0x....      LDR.W    R1,??DataTable1_4
   \   00001D24   0xA810             ADD      R0,SP,#+64
   \   00001D26   0x.... 0x....      BL       sprintf
   \   00001D2A   0xE243             B.N      ??RoadBrd_ParseString_331
   2044                                        }
   2045                                        else if (strncmp((char *)uuid,"000A",4) == 0) // TempC
   \                     ??RoadBrd_ParseString_336: (+1)
   \   00001D2C   0x2204             MOVS     R2,#+4
   \   00001D2E   0x.... 0x....      LDR.W    R1,??DataTable1_11
   \   00001D32   0xA832             ADD      R0,SP,#+200
   \   00001D34   0x.... 0x....      BL       strncmp
   \   00001D38   0x2800             CMP      R0,#+0
   \   00001D3A   0xD114             BNE.N    ??RoadBrd_ParseString_338
   2046                                        {
   2047                                          Status = RoadBrd_CAL_Set_CalItem( CAL_TEMPC, Offset, Scale);
   \   00001D3C   0x9A0B             LDR      R2,[SP, #+44]
   \   00001D3E   0x990A             LDR      R1,[SP, #+40]
   \   00001D40   0x2004             MOVS     R0,#+4
   \   00001D42   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00001D46   0x0005             MOVS     R5,R0
   2048                                          if (Status == HAL_OK)
   \   00001D48   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001D4A   0x2D00             CMP      R5,#+0
   \   00001D4C   0xD105             BNE.N    ??RoadBrd_ParseString_339
   2049                                            sprintf( (char *)tempBffr2, "TempC Set COMPLETE." );
   \   00001D4E   0x.... 0x....      LDR.W    R1,??DataTable1_12
   \   00001D52   0xA810             ADD      R0,SP,#+64
   \   00001D54   0x.... 0x....      BL       sprintf
   \   00001D58   0xE22C             B.N      ??RoadBrd_ParseString_331
   2050                                          else
   2051                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_339: (+1)
   \   00001D5A   0x.... 0x....      LDR.W    R1,??DataTable1_4
   \   00001D5E   0xA810             ADD      R0,SP,#+64
   \   00001D60   0x.... 0x....      BL       sprintf
   \   00001D64   0xE226             B.N      ??RoadBrd_ParseString_331
   2052                                        }
   2053                                        else if (strncmp((char *)uuid,"000B",4) == 0) // TempF
   \                     ??RoadBrd_ParseString_338: (+1)
   \   00001D66   0x2204             MOVS     R2,#+4
   \   00001D68   0x.... 0x....      LDR.W    R1,??DataTable1_13
   \   00001D6C   0xA832             ADD      R0,SP,#+200
   \   00001D6E   0x.... 0x....      BL       strncmp
   \   00001D72   0x2800             CMP      R0,#+0
   \   00001D74   0xD116             BNE.N    ??RoadBrd_ParseString_340
   2054                                        {
   2055                                          Status = RoadBrd_CAL_Set_CalItem( CAL_TEMPF, Offset, Scale);
   \   00001D76   0x9A0B             LDR      R2,[SP, #+44]
   \   00001D78   0x990A             LDR      R1,[SP, #+40]
   \   00001D7A   0x2005             MOVS     R0,#+5
   \   00001D7C   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00001D80   0x0005             MOVS     R5,R0
   2056                                          if (Status == HAL_OK)
   \   00001D82   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001D84   0x2D00             CMP      R5,#+0
   \   00001D86   0xD107             BNE.N    ??RoadBrd_ParseString_341
   2057                                            sprintf( (char *)tempBffr2, "TempF Set COMPLETE." );
   \   00001D88   0x.... 0x....      LDR.W    R1,??DataTable1_14
   \   00001D8C   0xA810             ADD      R0,SP,#+64
   \   00001D8E   0x.... 0x....      BL       sprintf
   \   00001D92   0xE20F             B.N      ??RoadBrd_ParseString_331
   \                     ??RoadBrd_ParseString_311:
   \   00001D94   0x25 0x78          DC8      "%x."
   \              0x2E 0x00    
   2058                                          else
   2059                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_341: (+1)
   \   00001D98   0x.... 0x....      LDR.W    R1,??DataTable1_4
   \   00001D9C   0xA810             ADD      R0,SP,#+64
   \   00001D9E   0x.... 0x....      BL       sprintf
   \   00001DA2   0xE207             B.N      ??RoadBrd_ParseString_331
   2060                                        }
   2061                                        else if (strncmp((char *)uuid,"0011",4) == 0) // Pressure
   \                     ??RoadBrd_ParseString_340: (+1)
   \   00001DA4   0x2204             MOVS     R2,#+4
   \   00001DA6   0x.... 0x....      LDR.W    R1,??DataTable1_15
   \   00001DAA   0xA832             ADD      R0,SP,#+200
   \   00001DAC   0x.... 0x....      BL       strncmp
   \   00001DB0   0x2800             CMP      R0,#+0
   \   00001DB2   0xD117             BNE.N    ??RoadBrd_ParseString_342
   2062                                        {
   2063                                          Status = RoadBrd_CAL_Set_CalItem( CAL_PRESSURE, Offset, Scale);
   \   00001DB4   0x9A0B             LDR      R2,[SP, #+44]
   \   00001DB6   0x990A             LDR      R1,[SP, #+40]
   \   00001DB8   0x2006             MOVS     R0,#+6
   \   00001DBA   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00001DBE   0x0005             MOVS     R5,R0
   2064                                          if (Status == HAL_OK)
   \   00001DC0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001DC2   0x2D00             CMP      R5,#+0
   \   00001DC4   0xD108             BNE.N    ??RoadBrd_ParseString_343
   2065                                            sprintf( (char *)tempBffr2, "Pressure Set COMPLETE." );
   \   00001DC6   0x.... 0x....      LDR.W    R1,??DataTable1_16
   \   00001DCA   0xA810             ADD      R0,SP,#+64
   \   00001DCC   0x.... 0x....      BL       sprintf
   \   00001DD0   0xE1F0             B.N      ??RoadBrd_ParseString_331
   \   00001DD2   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_189:
   \   00001DD4   0x........         DC32     ?_59
   2066                                          else
   2067                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_343: (+1)
   \   00001DD8   0x.... 0x....      LDR.W    R1,??DataTable1_4
   \   00001DDC   0xA810             ADD      R0,SP,#+64
   \   00001DDE   0x.... 0x....      BL       sprintf
   \   00001DE2   0xE1E7             B.N      ??RoadBrd_ParseString_331
   2068                                        }
   2069                                        else if (strncmp((char *)uuid,"0030",4) == 0) // Humidity
   \                     ??RoadBrd_ParseString_342: (+1)
   \   00001DE4   0x2204             MOVS     R2,#+4
   \   00001DE6   0x.... 0x....      LDR.W    R1,??DataTable1_17
   \   00001DEA   0xA832             ADD      R0,SP,#+200
   \   00001DEC   0x.... 0x....      BL       strncmp
   \   00001DF0   0x2800             CMP      R0,#+0
   \   00001DF2   0xD119             BNE.N    ??RoadBrd_ParseString_344
   2070                                        {
   2071                                          Status = RoadBrd_CAL_Set_CalItem( CAL_HUMIDITY, Offset, Scale);
   \   00001DF4   0x9A0B             LDR      R2,[SP, #+44]
   \   00001DF6   0x990A             LDR      R1,[SP, #+40]
   \   00001DF8   0x2007             MOVS     R0,#+7
   \   00001DFA   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00001DFE   0x0005             MOVS     R5,R0
   2072                                          if (Status == HAL_OK)
   \   00001E00   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001E02   0x2D00             CMP      R5,#+0
   \   00001E04   0xD10A             BNE.N    ??RoadBrd_ParseString_345
   2073                                            sprintf( (char *)tempBffr2, "Humidity Set COMPLETE." );
   \   00001E06   0x.... 0x....      LDR.W    R1,??DataTable1_18
   \   00001E0A   0xA810             ADD      R0,SP,#+64
   \   00001E0C   0x.... 0x....      BL       sprintf
   \   00001E10   0xE1D0             B.N      ??RoadBrd_ParseString_331
   \   00001E12   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_192:
   \   00001E14   0x........         DC32     ?_60
   \   00001E18   0x........         DC32     ?_61
   2074                                          else
   2075                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_345: (+1)
   \   00001E1C   0x.... 0x....      LDR.W    R1,??DataTable1_4
   \   00001E20   0xA810             ADD      R0,SP,#+64
   \   00001E22   0x.... 0x....      BL       sprintf
   \   00001E26   0xE1C5             B.N      ??RoadBrd_ParseString_331
   2076                                        }
   2077                                        else if (strncmp((char *)uuid,"0032",4) == 0) // Hum_TempC
   \                     ??RoadBrd_ParseString_344: (+1)
   \   00001E28   0x2204             MOVS     R2,#+4
   \   00001E2A   0x.... 0x....      LDR.W    R1,??DataTable1_19
   \   00001E2E   0xA832             ADD      R0,SP,#+200
   \   00001E30   0x.... 0x....      BL       strncmp
   \   00001E34   0x2800             CMP      R0,#+0
   \   00001E36   0xD11D             BNE.N    ??RoadBrd_ParseString_346
   2078                                        {
   2079                                          Status = RoadBrd_CAL_Set_CalItem( CAL_HUM_TEMPC, Offset, Scale);
   \   00001E38   0x9A0B             LDR      R2,[SP, #+44]
   \   00001E3A   0x990A             LDR      R1,[SP, #+40]
   \   00001E3C   0x2008             MOVS     R0,#+8
   \   00001E3E   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00001E42   0x0005             MOVS     R5,R0
   2080                                          if (Status == HAL_OK)
   \   00001E44   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001E46   0x2D00             CMP      R5,#+0
   \   00001E48   0xD10E             BNE.N    ??RoadBrd_ParseString_347
   2081                                            sprintf( (char *)tempBffr2, "Hum_TempC Set COMPLETE." );
   \   00001E4A   0x.... 0x....      LDR.W    R1,??DataTable1_20
   \   00001E4E   0xA810             ADD      R0,SP,#+64
   \   00001E50   0x.... 0x....      BL       sprintf
   \   00001E54   0xE1AE             B.N      ??RoadBrd_ParseString_331
   \   00001E56   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_195:
   \   00001E58   0x........         DC32     ?_62
   \   00001E5C   0x........         DC32     ?_63
   \   00001E60   0x........         DC32     ?_64
   \   00001E64   0x........         DC32     ?_65
   2082                                          else
   2083                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_347: (+1)
   \   00001E68   0x.... 0x....      LDR.W    R1,??DataTable1_4
   \   00001E6C   0xA810             ADD      R0,SP,#+64
   \   00001E6E   0x.... 0x....      BL       sprintf
   \   00001E72   0xE19F             B.N      ??RoadBrd_ParseString_331
   2084                                        }
   2085                                        else if (strncmp((char *)uuid,"0033",4) == 0) // Hum_TempF
   \                     ??RoadBrd_ParseString_346: (+1)
   \   00001E74   0x2204             MOVS     R2,#+4
   \   00001E76   0x.... 0x....      LDR.W    R1,??DataTable1_21
   \   00001E7A   0xA832             ADD      R0,SP,#+200
   \   00001E7C   0x.... 0x....      BL       strncmp
   \   00001E80   0x2800             CMP      R0,#+0
   \   00001E82   0xD114             BNE.N    ??RoadBrd_ParseString_348
   2086                                        {
   2087                                          Status = RoadBrd_CAL_Set_CalItem( CAL_HUM_TEMPF, Offset, Scale);
   \   00001E84   0x9A0B             LDR      R2,[SP, #+44]
   \   00001E86   0x990A             LDR      R1,[SP, #+40]
   \   00001E88   0x2009             MOVS     R0,#+9
   \   00001E8A   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00001E8E   0x0005             MOVS     R5,R0
   2088                                          if (Status == HAL_OK)
   \   00001E90   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001E92   0x2D00             CMP      R5,#+0
   \   00001E94   0xD105             BNE.N    ??RoadBrd_ParseString_349
   2089                                            sprintf( (char *)tempBffr2, "Hum_TempF Set COMPLETE." );
   \   00001E96   0x.... 0x....      LDR.W    R1,??DataTable1_22
   \   00001E9A   0xA810             ADD      R0,SP,#+64
   \   00001E9C   0x.... 0x....      BL       sprintf
   \   00001EA0   0xE188             B.N      ??RoadBrd_ParseString_331
   2090                                          else
   2091                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_349: (+1)
   \   00001EA2   0x.... 0x....      LDR.W    R1,??DataTable1_4
   \   00001EA6   0xA810             ADD      R0,SP,#+64
   \   00001EA8   0x.... 0x....      BL       sprintf
   \   00001EAC   0xE182             B.N      ??RoadBrd_ParseString_331
   2092                                        }
   2093                                        else if (strncmp((char *)uuid,"000D",4) == 0) // RGB_Red
   \                     ??RoadBrd_ParseString_348: (+1)
   \   00001EAE   0x2204             MOVS     R2,#+4
   \   00001EB0   0x.... 0x....      LDR.W    R1,??DataTable1_23
   \   00001EB4   0xA832             ADD      R0,SP,#+200
   \   00001EB6   0x.... 0x....      BL       strncmp
   \   00001EBA   0x2800             CMP      R0,#+0
   \   00001EBC   0xD116             BNE.N    ??RoadBrd_ParseString_350
   2094                                        {
   2095                                          Status = RoadBrd_CAL_Set_CalItem( CAL_RGB_RED, Offset, Scale);
   \   00001EBE   0x9A0B             LDR      R2,[SP, #+44]
   \   00001EC0   0x990A             LDR      R1,[SP, #+40]
   \   00001EC2   0x200A             MOVS     R0,#+10
   \   00001EC4   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00001EC8   0x0005             MOVS     R5,R0
   2096                                          if (Status == HAL_OK)
   \   00001ECA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001ECC   0x2D00             CMP      R5,#+0
   \   00001ECE   0xD107             BNE.N    ??RoadBrd_ParseString_351
   2097                                            sprintf( (char *)tempBffr2, "RGB_Red Set COMPLETE." );
   \   00001ED0   0x.... 0x....      LDR.W    R1,??DataTable1_24
   \   00001ED4   0xA810             ADD      R0,SP,#+64
   \   00001ED6   0x.... 0x....      BL       sprintf
   \   00001EDA   0xE16B             B.N      ??RoadBrd_ParseString_331
   \                     ??RoadBrd_ParseString_206:
   \   00001EDC   0x........         DC32     ?_66
   2098                                          else
   2099                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_351: (+1)
   \   00001EE0   0x.... 0x....      LDR.W    R1,??DataTable1_4
   \   00001EE4   0xA810             ADD      R0,SP,#+64
   \   00001EE6   0x.... 0x....      BL       sprintf
   \   00001EEA   0xE163             B.N      ??RoadBrd_ParseString_331
   2100                                        }
   2101                                        else if (strncmp((char *)uuid,"000E",4) == 0) // RGB_Green
   \                     ??RoadBrd_ParseString_350: (+1)
   \   00001EEC   0x2204             MOVS     R2,#+4
   \   00001EEE   0x.... 0x....      LDR.W    R1,??DataTable1_25
   \   00001EF2   0xA832             ADD      R0,SP,#+200
   \   00001EF4   0x.... 0x....      BL       strncmp
   \   00001EF8   0x2800             CMP      R0,#+0
   \   00001EFA   0xD119             BNE.N    ??RoadBrd_ParseString_352
   2102                                        {
   2103                                          Status = RoadBrd_CAL_Set_CalItem( CAL_RGB_GREEN, Offset, Scale);
   \   00001EFC   0x9A0B             LDR      R2,[SP, #+44]
   \   00001EFE   0x990A             LDR      R1,[SP, #+40]
   \   00001F00   0x200B             MOVS     R0,#+11
   \   00001F02   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00001F06   0x0005             MOVS     R5,R0
   2104                                          if (Status == HAL_OK)
   \   00001F08   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001F0A   0x2D00             CMP      R5,#+0
   \   00001F0C   0xD10A             BNE.N    ??RoadBrd_ParseString_353
   2105                                            sprintf( (char *)tempBffr2, "RGB_Green Set COMPLETE." );
   \   00001F0E   0x.... 0x....      LDR.W    R1,??DataTable1_26
   \   00001F12   0xA810             ADD      R0,SP,#+64
   \   00001F14   0x.... 0x....      BL       sprintf
   \   00001F18   0xE14C             B.N      ??RoadBrd_ParseString_331
   \   00001F1A   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_208:
   \   00001F1C   0x........         DC32     ?_67
   \   00001F20   0x........         DC32     ?_68
   2106                                          else
   2107                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_353: (+1)
   \   00001F24   0x.... 0x....      LDR.W    R1,??DataTable1_4
   \   00001F28   0xA810             ADD      R0,SP,#+64
   \   00001F2A   0x.... 0x....      BL       sprintf
   \   00001F2E   0xE141             B.N      ??RoadBrd_ParseString_331
   2108                                        }
   2109                                        else if (strncmp((char *)uuid,"000F",4) == 0) // RGB_Blue
   \                     ??RoadBrd_ParseString_352: (+1)
   \   00001F30   0x2204             MOVS     R2,#+4
   \   00001F32   0x.... 0x....      LDR.W    R1,??DataTable1_27
   \   00001F36   0xA832             ADD      R0,SP,#+200
   \   00001F38   0x.... 0x....      BL       strncmp
   \   00001F3C   0x2800             CMP      R0,#+0
   \   00001F3E   0xD114             BNE.N    ??RoadBrd_ParseString_354
   2110                                        {
   2111                                          Status = RoadBrd_CAL_Set_CalItem( CAL_RGB_BLUE, Offset, Scale);
   \   00001F40   0x9A0B             LDR      R2,[SP, #+44]
   \   00001F42   0x990A             LDR      R1,[SP, #+40]
   \   00001F44   0x200C             MOVS     R0,#+12
   \   00001F46   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00001F4A   0x0005             MOVS     R5,R0
   2112                                          if (Status == HAL_OK)
   \   00001F4C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001F4E   0x2D00             CMP      R5,#+0
   \   00001F50   0xD105             BNE.N    ??RoadBrd_ParseString_355
   2113                                            sprintf( (char *)tempBffr2, "RGB_Blue Set COMPLETE." );
   \   00001F52   0x.... 0x....      LDR.W    R1,??DataTable1_28
   \   00001F56   0xA810             ADD      R0,SP,#+64
   \   00001F58   0x.... 0x....      BL       sprintf
   \   00001F5C   0xE12A             B.N      ??RoadBrd_ParseString_331
   2114                                          else
   2115                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_355: (+1)
   \   00001F5E   0x.... 0x....      LDR.W    R1,??DataTable1_4
   \   00001F62   0xA810             ADD      R0,SP,#+64
   \   00001F64   0x.... 0x....      BL       sprintf
   \   00001F68   0xE124             B.N      ??RoadBrd_ParseString_331
   2116                                        }
   2117                                        else if (strncmp((char *)uuid,"0017",4) == 0) // Therm_C
   \                     ??RoadBrd_ParseString_354: (+1)
   \   00001F6A   0x2204             MOVS     R2,#+4
   \   00001F6C   0x.... 0x....      LDR.W    R1,??DataTable1_29
   \   00001F70   0xA832             ADD      R0,SP,#+200
   \   00001F72   0x.... 0x....      BL       strncmp
   \   00001F76   0x2800             CMP      R0,#+0
   \   00001F78   0xD116             BNE.N    ??RoadBrd_ParseString_356
   2118                                        {
   2119                                          Status = RoadBrd_CAL_Set_CalItem( CAL_THERM_C, Offset, Scale);
   \   00001F7A   0x9A0B             LDR      R2,[SP, #+44]
   \   00001F7C   0x990A             LDR      R1,[SP, #+40]
   \   00001F7E   0x200D             MOVS     R0,#+13
   \   00001F80   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00001F84   0x0005             MOVS     R5,R0
   2120                                          if (Status == HAL_OK)
   \   00001F86   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001F88   0x2D00             CMP      R5,#+0
   \   00001F8A   0xD107             BNE.N    ??RoadBrd_ParseString_357
   2121                                            sprintf( (char *)tempBffr2, "Therm_C Set COMPLETE." );
   \   00001F8C   0x.... 0x....      LDR.W    R1,??DataTable1_30
   \   00001F90   0xA810             ADD      R0,SP,#+64
   \   00001F92   0x.... 0x....      BL       sprintf
   \   00001F96   0xE10D             B.N      ??RoadBrd_ParseString_331
   \                     ??RoadBrd_ParseString_214:
   \   00001F98   0x........         DC32     ?_69
   2122                                          else
   2123                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_357: (+1)
   \   00001F9C   0x.... 0x....      LDR.W    R1,??DataTable1_4
   \   00001FA0   0xA810             ADD      R0,SP,#+64
   \   00001FA2   0x.... 0x....      BL       sprintf
   \   00001FA6   0xE105             B.N      ??RoadBrd_ParseString_331
   2124                                        }
   2125                                        else if (strncmp((char *)uuid,"0019",4) == 0) // RoadT_1C
   \                     ??RoadBrd_ParseString_356: (+1)
   \   00001FA8   0x2204             MOVS     R2,#+4
   \   00001FAA   0x.... 0x....      LDR.W    R1,??DataTable1_31
   \   00001FAE   0xA832             ADD      R0,SP,#+200
   \   00001FB0   0x.... 0x....      BL       strncmp
   \   00001FB4   0x2800             CMP      R0,#+0
   \   00001FB6   0xD119             BNE.N    ??RoadBrd_ParseString_358
   2126                                        {
   2127                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_1C, Offset, Scale);
   \   00001FB8   0x9A0B             LDR      R2,[SP, #+44]
   \   00001FBA   0x990A             LDR      R1,[SP, #+40]
   \   00001FBC   0x200E             MOVS     R0,#+14
   \   00001FBE   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00001FC2   0x0005             MOVS     R5,R0
   2128                                          if (Status == HAL_OK)
   \   00001FC4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001FC6   0x2D00             CMP      R5,#+0
   \   00001FC8   0xD10A             BNE.N    ??RoadBrd_ParseString_359
   2129                                            sprintf( (char *)tempBffr2, "RoadT_1C Set COMPLETE." );
   \   00001FCA   0x.... 0x....      LDR.W    R1,??DataTable1_32
   \   00001FCE   0xA810             ADD      R0,SP,#+64
   \   00001FD0   0x.... 0x....      BL       sprintf
   \   00001FD4   0xE0EE             B.N      ??RoadBrd_ParseString_331
   \   00001FD6   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_216:
   \   00001FD8   0x........         DC32     ?_70
   \   00001FDC   0x........         DC32     ?_71
   2130                                          else
   2131                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_359: (+1)
   \   00001FE0   0x.... 0x....      LDR.W    R1,??DataTable1_4
   \   00001FE4   0xA810             ADD      R0,SP,#+64
   \   00001FE6   0x.... 0x....      BL       sprintf
   \   00001FEA   0xE0E3             B.N      ??RoadBrd_ParseString_331
   2132                                        }
   2133                                        else if (strncmp((char *)uuid,"001B",4) == 0) // RoadT_2C
   \                     ??RoadBrd_ParseString_358: (+1)
   \   00001FEC   0x2204             MOVS     R2,#+4
   \   00001FEE   0x.... 0x....      LDR.W    R1,??DataTable1_33
   \   00001FF2   0xA832             ADD      R0,SP,#+200
   \   00001FF4   0x.... 0x....      BL       strncmp
   \   00001FF8   0x2800             CMP      R0,#+0
   \   00001FFA   0xD117             BNE.N    ??RoadBrd_ParseString_360
   2134                                        {
   2135                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_2C, Offset, Scale);
   \   00001FFC   0x9A0B             LDR      R2,[SP, #+44]
   \   00001FFE   0x990A             LDR      R1,[SP, #+40]
   \   00002000   0x200F             MOVS     R0,#+15
   \   00002002   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002006   0x0005             MOVS     R5,R0
   2136                                          if (Status == HAL_OK)
   \   00002008   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000200A   0x2D00             CMP      R5,#+0
   \   0000200C   0xD108             BNE.N    ??RoadBrd_ParseString_361
   2137                                            sprintf( (char *)tempBffr2, "RoadT_2C Set COMPLETE." );
   \   0000200E   0x.... 0x....      LDR.W    R1,??DataTable1_34
   \   00002012   0xA810             ADD      R0,SP,#+64
   \   00002014   0x.... 0x....      BL       sprintf
   \   00002018   0xE0CC             B.N      ??RoadBrd_ParseString_331
   \   0000201A   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_219:
   \   0000201C   0x........         DC32     ?_72
   2138                                          else
   2139                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_361: (+1)
   \   00002020   0x.... 0x....      LDR.W    R1,??DataTable1_4
   \   00002024   0xA810             ADD      R0,SP,#+64
   \   00002026   0x.... 0x....      BL       sprintf
   \   0000202A   0xE0C3             B.N      ??RoadBrd_ParseString_331
   2140                                        }
   2141                                        else if (strncmp((char *)uuid,"001D",4) == 0) // RoadT_3C
   \                     ??RoadBrd_ParseString_360: (+1)
   \   0000202C   0x2204             MOVS     R2,#+4
   \   0000202E   0x.... 0x....      LDR.W    R1,??DataTable1_35
   \   00002032   0xA832             ADD      R0,SP,#+200
   \   00002034   0x.... 0x....      BL       strncmp
   \   00002038   0x2800             CMP      R0,#+0
   \   0000203A   0xD119             BNE.N    ??RoadBrd_ParseString_362
   2142                                        {
   2143                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_3C, Offset, Scale);
   \   0000203C   0x9A0B             LDR      R2,[SP, #+44]
   \   0000203E   0x990A             LDR      R1,[SP, #+40]
   \   00002040   0x2010             MOVS     R0,#+16
   \   00002042   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002046   0x0005             MOVS     R5,R0
   2144                                          if (Status == HAL_OK)
   \   00002048   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000204A   0x2D00             CMP      R5,#+0
   \   0000204C   0xD10A             BNE.N    ??RoadBrd_ParseString_363
   2145                                            sprintf( (char *)tempBffr2, "RoadT_3C Set COMPLETE." );
   \   0000204E   0x.... 0x....      LDR.W    R1,??DataTable1_36
   \   00002052   0xA810             ADD      R0,SP,#+64
   \   00002054   0x.... 0x....      BL       sprintf
   \   00002058   0xE0AC             B.N      ??RoadBrd_ParseString_331
   \   0000205A   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_221:
   \   0000205C   0x........         DC32     ?_73
   \   00002060   0x........         DC32     ?_74
   2146                                          else
   2147                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_363: (+1)
   \   00002064   0x.... 0x....      LDR.W    R1,??DataTable1_4
   \   00002068   0xA810             ADD      R0,SP,#+64
   \   0000206A   0x.... 0x....      BL       sprintf
   \   0000206E   0xE0A1             B.N      ??RoadBrd_ParseString_331
   2148                                        }
   2149                                        else if (strncmp((char *)uuid,"001F",4) == 0) // RoadT_4C
   \                     ??RoadBrd_ParseString_362: (+1)
   \   00002070   0x2204             MOVS     R2,#+4
   \   00002072   0x.... 0x....      LDR.W    R1,??DataTable1_37
   \   00002076   0xA832             ADD      R0,SP,#+200
   \   00002078   0x.... 0x....      BL       strncmp
   \   0000207C   0x2800             CMP      R0,#+0
   \   0000207E   0xD117             BNE.N    ??RoadBrd_ParseString_364
   2150                                        {
   2151                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_4C, Offset, Scale);
   \   00002080   0x9A0B             LDR      R2,[SP, #+44]
   \   00002082   0x990A             LDR      R1,[SP, #+40]
   \   00002084   0x2011             MOVS     R0,#+17
   \   00002086   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   0000208A   0x0005             MOVS     R5,R0
   2152                                          if (Status == HAL_OK)
   \   0000208C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000208E   0x2D00             CMP      R5,#+0
   \   00002090   0xD108             BNE.N    ??RoadBrd_ParseString_365
   2153                                            sprintf( (char *)tempBffr2, "RoadT_4C Set COMPLETE." );
   \   00002092   0x.... 0x....      LDR.W    R1,??DataTable1_38
   \   00002096   0xA810             ADD      R0,SP,#+64
   \   00002098   0x.... 0x....      BL       sprintf
   \   0000209C   0xE08A             B.N      ??RoadBrd_ParseString_331
   \   0000209E   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_224:
   \   000020A0   0x........         DC32     ?_75
   2154                                          else
   2155                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_365: (+1)
   \   000020A4   0x.... 0x....      LDR.W    R1,??DataTable1_4
   \   000020A8   0xA810             ADD      R0,SP,#+64
   \   000020AA   0x.... 0x....      BL       sprintf
   \   000020AE   0xE081             B.N      ??RoadBrd_ParseString_331
   2156                                        }
   2157                                        else if (strncmp((char *)uuid,"0021",4) == 0) // RoadT_5C
   \                     ??RoadBrd_ParseString_364: (+1)
   \   000020B0   0x2204             MOVS     R2,#+4
   \   000020B2   0x.... 0x....      LDR.W    R1,??DataTable1_39
   \   000020B6   0xA832             ADD      R0,SP,#+200
   \   000020B8   0x.... 0x....      BL       strncmp
   \   000020BC   0x2800             CMP      R0,#+0
   \   000020BE   0xD11B             BNE.N    ??RoadBrd_ParseString_366
   2158                                        {
   2159                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_5C, Offset, Scale);
   \   000020C0   0x9A0B             LDR      R2,[SP, #+44]
   \   000020C2   0x990A             LDR      R1,[SP, #+40]
   \   000020C4   0x2012             MOVS     R0,#+18
   \   000020C6   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   000020CA   0x0005             MOVS     R5,R0
   2160                                          if (Status == HAL_OK)
   \   000020CC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000020CE   0x2D00             CMP      R5,#+0
   \   000020D0   0xD10C             BNE.N    ??RoadBrd_ParseString_367
   2161                                            sprintf( (char *)tempBffr2, "RoadT_5C Set COMPLETE." );
   \   000020D2   0x.... 0x....      LDR.W    R1,??DataTable1_40
   \   000020D6   0xA810             ADD      R0,SP,#+64
   \   000020D8   0x.... 0x....      BL       sprintf
   \   000020DC   0xE06A             B.N      ??RoadBrd_ParseString_331
   \   000020DE   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_226:
   \   000020E0   0x........         DC32     ?_76
   \   000020E4   0x........         DC32     ?_77
   \   000020E8   0x........         DC32     ?_78
   2162                                          else
   2163                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_367: (+1)
   \   000020EC   0x.... 0x....      LDR.W    R1,??DataTable1_4
   \   000020F0   0xA810             ADD      R0,SP,#+64
   \   000020F2   0x.... 0x....      BL       sprintf
   \   000020F6   0xE05D             B.N      ??RoadBrd_ParseString_331
   2164                                        }
   2165                                        else if (strncmp((char *)uuid,"0023",4) == 0) // RoadT_6C
   \                     ??RoadBrd_ParseString_366: (+1)
   \   000020F8   0x2204             MOVS     R2,#+4
   \   000020FA   0x.... 0x....      LDR.W    R1,??DataTable1_41
   \   000020FE   0xA832             ADD      R0,SP,#+200
   \   00002100   0x.... 0x....      BL       strncmp
   \   00002104   0x2800             CMP      R0,#+0
   \   00002106   0xD114             BNE.N    ??RoadBrd_ParseString_368
   2166                                        {
   2167                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_6C, Offset, Scale);
   \   00002108   0x9A0B             LDR      R2,[SP, #+44]
   \   0000210A   0x990A             LDR      R1,[SP, #+40]
   \   0000210C   0x2013             MOVS     R0,#+19
   \   0000210E   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002112   0x0005             MOVS     R5,R0
   2168                                          if (Status == HAL_OK)
   \   00002114   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002116   0x2D00             CMP      R5,#+0
   \   00002118   0xD105             BNE.N    ??RoadBrd_ParseString_369
   2169                                            sprintf( (char *)tempBffr2, "RoadT_6C Set COMPLETE." );
   \   0000211A   0x.... 0x....      LDR.W    R1,??DataTable1_42
   \   0000211E   0xA810             ADD      R0,SP,#+64
   \   00002120   0x.... 0x....      BL       sprintf
   \   00002124   0xE046             B.N      ??RoadBrd_ParseString_331
   2170                                          else
   2171                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_369: (+1)
   \   00002126   0x.... 0x....      LDR.W    R1,??DataTable1_4
   \   0000212A   0xA810             ADD      R0,SP,#+64
   \   0000212C   0x.... 0x....      BL       sprintf
   \   00002130   0xE040             B.N      ??RoadBrd_ParseString_331
   2172                                        }
   2173                                        else if (strncmp((char *)uuid,"0025",4) == 0) // RoadT_7C
   \                     ??RoadBrd_ParseString_368: (+1)
   \   00002132   0x2204             MOVS     R2,#+4
   \   00002134   0x.... 0x....      LDR.W    R1,??DataTable1_43
   \   00002138   0xA832             ADD      R0,SP,#+200
   \   0000213A   0x.... 0x....      BL       strncmp
   \   0000213E   0x2800             CMP      R0,#+0
   \   00002140   0xD116             BNE.N    ??RoadBrd_ParseString_370
   2174                                        {
   2175                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_7C, Offset, Scale);
   \   00002142   0x9A0B             LDR      R2,[SP, #+44]
   \   00002144   0x990A             LDR      R1,[SP, #+40]
   \   00002146   0x2014             MOVS     R0,#+20
   \   00002148   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   0000214C   0x0005             MOVS     R5,R0
   2176                                          if (Status == HAL_OK)
   \   0000214E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002150   0x2D00             CMP      R5,#+0
   \   00002152   0xD107             BNE.N    ??RoadBrd_ParseString_371
   2177                                            sprintf( (char *)tempBffr2, "RoadT_7C Set COMPLETE." );
   \   00002154   0x.... 0x....      LDR.W    R1,??DataTable1_44
   \   00002158   0xA810             ADD      R0,SP,#+64
   \   0000215A   0x.... 0x....      BL       sprintf
   \   0000215E   0xE029             B.N      ??RoadBrd_ParseString_331
   \                     ??RoadBrd_ParseString_229:
   \   00002160   0x........         DC32     ?_79
   2178                                          else
   2179                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_371: (+1)
   \   00002164   0x.... 0x....      LDR.W    R1,??DataTable1_4
   \   00002168   0xA810             ADD      R0,SP,#+64
   \   0000216A   0x.... 0x....      BL       sprintf
   \   0000216E   0xE021             B.N      ??RoadBrd_ParseString_331
   2180                                        }
   2181                                        else if (strncmp((char *)uuid,"0027",4) == 0) // RoadT_8C
   \                     ??RoadBrd_ParseString_370: (+1)
   \   00002170   0x2204             MOVS     R2,#+4
   \   00002172   0x.... 0x....      LDR.W    R1,??DataTable1_45
   \   00002176   0xA832             ADD      R0,SP,#+200
   \   00002178   0x.... 0x....      BL       strncmp
   \   0000217C   0x2800             CMP      R0,#+0
   \   0000217E   0xD114             BNE.N    ??RoadBrd_ParseString_372
   2182                                        {
   2183                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_8C, Offset, Scale);
   \   00002180   0x9A0B             LDR      R2,[SP, #+44]
   \   00002182   0x990A             LDR      R1,[SP, #+40]
   \   00002184   0x2015             MOVS     R0,#+21
   \   00002186   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   0000218A   0x0005             MOVS     R5,R0
   2184                                          if (Status == HAL_OK)
   \   0000218C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000218E   0x2D00             CMP      R5,#+0
   \   00002190   0xD105             BNE.N    ??RoadBrd_ParseString_373
   2185                                            sprintf( (char *)tempBffr2, "RoadT_8C Set COMPLETE." );
   \   00002192   0x.... 0x....      LDR.W    R1,??DataTable1_46
   \   00002196   0xA810             ADD      R0,SP,#+64
   \   00002198   0x.... 0x....      BL       sprintf
   \   0000219C   0xE00A             B.N      ??RoadBrd_ParseString_331
   2186                                          else
   2187                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_373: (+1)
   \   0000219E   0x.... 0x....      LDR.W    R1,??DataTable1_4
   \   000021A2   0xA810             ADD      R0,SP,#+64
   \   000021A4   0x.... 0x....      BL       sprintf
   \   000021A8   0xE004             B.N      ??RoadBrd_ParseString_331
   2188                                        }
   2189                                        else
   2190                                        {
   2191                                          sprintf( (char *)tempBffr2, "TCS SYNTAX ERROR: Bad UUID.\r\n" );
   \                     ??RoadBrd_ParseString_372: (+1)
   \   000021AA   0x.... 0x....      LDR.W    R1,??DataTable1_47
   \   000021AE   0xA810             ADD      R0,SP,#+64
   \   000021B0   0x.... 0x....      BL       sprintf
   2192                                        }
   2193                                        Status = HAL_OK;
   \                     ??RoadBrd_ParseString_331: (+1)
   \   000021B4   0x2000             MOVS     R0,#+0
   \   000021B6   0x0005             MOVS     R5,R0
   \   000021B8   0xE004             B.N      ??RoadBrd_ParseString_326
   2194                                      }
   2195                                      else
   2196                                      {
   2197                                        strcpy( (char *)tempBffr2, "TCS SYNTAX ERROR: Wrong Number of Parameters.\r\n");
   \                     ??RoadBrd_ParseString_328: (+1)
   \   000021BA   0x.... 0x....      LDR.W    R1,??DataTable1_48
   \   000021BE   0xA810             ADD      R0,SP,#+64
   \   000021C0   0x.... 0x....      BL       strcpy
   2198                                      }
   2199                                    } // EndElse (flag == 0)
   2200                                  } // EndElse (tempBffr[3]!=':')
   2201                                  break;
   \                     ??RoadBrd_ParseString_326: (+1)
   \   000021C4   0xE0BB             B.N      ??RoadBrd_ParseString_321
   2202                                  //------------------ TCR Command: Calibration Read Command
   2203                                case 'R':
   2204                                  // Read Humidity Sensor sensor and return Humidity results....
   2205                                  Status = RoadBrd_Humidity_ReadHumidity( &HMeasure );
   \                     ??RoadBrd_ParseString_322: (+1)
   \   000021C6   0xA83F             ADD      R0,SP,#+252
   \   000021C8   0x.... 0x....      BL       RoadBrd_Humidity_ReadHumidity
   \   000021CC   0x0005             MOVS     R5,R0
   2206                                  if (Status == HAL_OK)
   \   000021CE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000021D0   0x2D00             CMP      R5,#+0
   \   000021D2   0xD125             BNE.N    ??RoadBrd_ParseString_374
   2207                                  {
   2208                                    // Send string to UART..
   2209                                    strcpy( (char *)tempBffr2, "Humidity SENSOR...\r\n");
   \   000021D4   0x.... 0x....      LDR.W    R1,??DataTable1_49
   \   000021D8   0xA810             ADD      R0,SP,#+64
   \   000021DA   0x.... 0x....      BL       strcpy
   2210          #ifdef NUCLEO
   2211                                    Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   2212          #else
   2213                                    Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000021DE   0xA910             ADD      R1,SP,#+64
   \   000021E0   0x2000             MOVS     R0,#+0
   \   000021E2   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000021E6   0x0005             MOVS     R5,R0
   2214          #endif
   2215                                    if (Status != HAL_OK)
   \   000021E8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000021EA   0x2D00             CMP      R5,#+0
   \   000021EC   0xD002             BEQ.N    ??RoadBrd_ParseString_375
   2216                                      return Status;
   \   000021EE   0x0028             MOVS     R0,R5
   \   000021F0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000021F2   0xE258             B.N      ??RoadBrd_ParseString_4
   2217                                    // NOW, Build Data String..
   2218                                    sprintf( (char *)tempBffr2, "     Humidity DATA: " );
   \                     ??RoadBrd_ParseString_375: (+1)
   \   000021F4   0x.... 0x....      LDR.W    R1,??DataTable1_50
   \   000021F8   0xA810             ADD      R0,SP,#+64
   \   000021FA   0x.... 0x....      BL       sprintf
   2219                                    strcat( (char *)tempBffr2, (char *)HMeasure.HRaw );
   \   000021FE   0xA941             ADD      R1,SP,#+260
   \   00002200   0xA810             ADD      R0,SP,#+64
   \   00002202   0x.... 0x....      BL       strcat
   2220                                    strcat( (char *)tempBffr2, "\r\n" );
   \   00002206   0xA1D2             ADR.N    R1,??RoadBrd_ParseString_281  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00002208   0xA810             ADD      R0,SP,#+64
   \   0000220A   0x.... 0x....      BL       strcat
   2221                                  }
   2222                                  else
   2223                                    break;
   2224          #ifdef NUCLEO
   2225                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   2226          #else
   2227                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000220E   0xA910             ADD      R1,SP,#+64
   \   00002210   0x2000             MOVS     R0,#+0
   \   00002212   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00002216   0x0005             MOVS     R5,R0
   2228          #endif
   2229                                  if (Status != HAL_OK)
   \   00002218   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000221A   0x2D00             CMP      R5,#+0
   \   0000221C   0xD101             BNE.N    ??RoadBrd_ParseString_376
   \   0000221E   0xE003             B.N      ??RoadBrd_ParseString_377
   \                     ??RoadBrd_ParseString_374: (+1)
   \   00002220   0xE08D             B.N      ??RoadBrd_ParseString_321
   2230                                    return Status;
   \                     ??RoadBrd_ParseString_376: (+1)
   \   00002222   0x0028             MOVS     R0,R5
   \   00002224   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002226   0xE23E             B.N      ??RoadBrd_ParseString_4
   2231                                  // NOW, Build Data String..
   2232                                  sprintf( (char *)tempBffr2, "     Humidity DATA(Decimal): %d\r\n", HMeasure.HRawC );
   \                     ??RoadBrd_ParseString_377: (+1)
   \   00002228   0xF8BD 0x210C      LDRH     R2,[SP, #+268]
   \   0000222C   0x.... 0x....      LDR.W    R1,??DataTable1_51
   \   00002230   0xA810             ADD      R0,SP,#+64
   \   00002232   0x.... 0x....      BL       sprintf
   2233          #ifdef NUCLEO
   2234                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   2235          #else
   2236                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00002236   0xA910             ADD      R1,SP,#+64
   \   00002238   0x2000             MOVS     R0,#+0
   \   0000223A   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000223E   0x0005             MOVS     R5,R0
   2237          #endif
   2238                                  if (Status != HAL_OK)
   \   00002240   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002242   0x2D00             CMP      R5,#+0
   \   00002244   0xD006             BEQ.N    ??RoadBrd_ParseString_378
   2239                                    return Status;
   \   00002246   0x0028             MOVS     R0,R5
   \   00002248   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000224A   0xE22C             B.N      ??RoadBrd_ParseString_4
   \                     ??RoadBrd_ParseString_235:
   \   0000224C   0x........         DC32     ?_80
   \   00002250   0x........         DC32     ?_81
   2240                                  // Now calculate Humidity.
   2241                                  sprintf( (char *)tempBffr2, "     Humidity: " );
   \                     ??RoadBrd_ParseString_378: (+1)
   \   00002254   0x.... 0x....      LDR.W    R1,??DataTable1_52
   \   00002258   0xA810             ADD      R0,SP,#+64
   \   0000225A   0x.... 0x....      BL       sprintf
   2242                                  strcat( (char *)tempBffr2, (char *)HMeasure.Humidity );
   \   0000225E   0xA93F             ADD      R1,SP,#+252
   \   00002260   0xA810             ADD      R0,SP,#+64
   \   00002262   0x.... 0x....      BL       strcat
   2243                                  strcat( (char *)tempBffr2, "\r\n" );
   \   00002266   0xA1BA             ADR.N    R1,??RoadBrd_ParseString_281  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00002268   0xA810             ADD      R0,SP,#+64
   \   0000226A   0x.... 0x....      BL       strcat
   2244                                  break;
   \   0000226E   0xE066             B.N      ??RoadBrd_ParseString_321
   2245                                  //------------------ TCT Command: Calibration Set Time Command
   2246                                case 'T':
   2247                                  // Read Humidity Sensor sensor and return Temperature results....
   2248                                  Status = RoadBrd_Humidity_ReadTemperature( &TMeasure );
   \                     ??RoadBrd_ParseString_323: (+1)
   \   00002270   0xA838             ADD      R0,SP,#+224
   \   00002272   0x.... 0x....      BL       RoadBrd_Humidity_ReadTemperature
   \   00002276   0x0005             MOVS     R5,R0
   2249                                  if (Status == HAL_OK)
   \   00002278   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000227A   0x2D00             CMP      R5,#+0
   \   0000227C   0xD12D             BNE.N    ??RoadBrd_ParseString_379
   2250                                  {
   2251                                    // Send string to UART..
   2252                                    strcpy( (char *)tempBffr2, "Humidity SENSOR...\r\n");
   \   0000227E   0x.... 0x....      LDR.W    R1,??DataTable1_49
   \   00002282   0xA810             ADD      R0,SP,#+64
   \   00002284   0x.... 0x....      BL       strcpy
   2253          #ifdef NUCLEO
   2254                                    Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   2255          #else
   2256                                    Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00002288   0xA910             ADD      R1,SP,#+64
   \   0000228A   0x2000             MOVS     R0,#+0
   \   0000228C   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00002290   0x0005             MOVS     R5,R0
   2257          #endif
   2258                                    if (Status != HAL_OK)
   \   00002292   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002294   0x2D00             CMP      R5,#+0
   \   00002296   0xD009             BEQ.N    ??RoadBrd_ParseString_380
   2259                                      return Status;
   \   00002298   0x0028             MOVS     R0,R5
   \   0000229A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000229C   0xE203             B.N      ??RoadBrd_ParseString_4
   \   0000229E   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_237:
   \   000022A0   0x........         DC32     ?_82
   \   000022A4   0x........         DC32     ?_83
   \   000022A8   0x........         DC32     ?_31
   2260                                    // NOW, Build Data String..
   2261                                    sprintf( (char *)tempBffr2, "     TEMP DATA: " );
   \                     ??RoadBrd_ParseString_380: (+1)
   \   000022AC   0x.... 0x....      LDR.W    R1,??DataTable1_53
   \   000022B0   0xA810             ADD      R0,SP,#+64
   \   000022B2   0x.... 0x....      BL       sprintf
   2262                                    strcat( (char *)tempBffr2, (char *)TMeasure.Raw );
   \   000022B6   0xF10D 0x01EE      ADD      R1,SP,#+238
   \   000022BA   0xA810             ADD      R0,SP,#+64
   \   000022BC   0x.... 0x....      BL       strcat
   2263                                    strcat( (char *)tempBffr2, "\r\n" );
   \   000022C0   0xA1A3             ADR.N    R1,??RoadBrd_ParseString_281  ;; 0x0D, 0x0A, 0x00, 0x00
   \   000022C2   0xA810             ADD      R0,SP,#+64
   \   000022C4   0x.... 0x....      BL       strcat
   2264                                  }
   2265                                  else
   2266                                    break;
   2267          #ifdef NUCLEO
   2268                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   2269          #else
   2270                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000022C8   0xA910             ADD      R1,SP,#+64
   \   000022CA   0x2000             MOVS     R0,#+0
   \   000022CC   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000022D0   0x0005             MOVS     R5,R0
   2271          #endif
   2272                                  if (Status != HAL_OK)
   \   000022D2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000022D4   0x2D00             CMP      R5,#+0
   \   000022D6   0xD101             BNE.N    ??RoadBrd_ParseString_381
   \   000022D8   0xE003             B.N      ??RoadBrd_ParseString_382
   \                     ??RoadBrd_ParseString_379: (+1)
   \   000022DA   0xE030             B.N      ??RoadBrd_ParseString_321
   2273                                    return Status;
   \                     ??RoadBrd_ParseString_381: (+1)
   \   000022DC   0x0028             MOVS     R0,R5
   \   000022DE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000022E0   0xE1E1             B.N      ??RoadBrd_ParseString_4
   2274                                  // NOW, Build Data String..
   2275                                  sprintf( (char *)tempBffr2, "     TEMP DATA(Decimal): %d\r\n", TMeasure.RawC );
   \                     ??RoadBrd_ParseString_382: (+1)
   \   000022E2   0xF8BD 0x20F6      LDRH     R2,[SP, #+246]
   \   000022E6   0x.... 0x....      LDR.W    R1,??DataTable1_54
   \   000022EA   0xA810             ADD      R0,SP,#+64
   \   000022EC   0x.... 0x....      BL       sprintf
   2276          #ifdef NUCLEO
   2277                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   2278          #else
   2279                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000022F0   0xA910             ADD      R1,SP,#+64
   \   000022F2   0x2000             MOVS     R0,#+0
   \   000022F4   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000022F8   0x0005             MOVS     R5,R0
   2280          #endif
   2281                                  if (Status != HAL_OK)
   \   000022FA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000022FC   0x2D00             CMP      R5,#+0
   \   000022FE   0xD007             BEQ.N    ??RoadBrd_ParseString_383
   2282                                    return Status;
   \   00002300   0x0028             MOVS     R0,R5
   \   00002302   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002304   0xE1CF             B.N      ??RoadBrd_ParseString_4
   \   00002306   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_242:
   \   00002308   0x........         DC32     ?_84
   \   0000230C   0x........         DC32     ?_85
   2283                                  // Now calculate Celcius and Farenheit Temp.
   2284                                  sprintf( (char *)tempBffr2, "     TempC: " );
   \                     ??RoadBrd_ParseString_383: (+1)
   \   00002310   0x.... 0x....      LDR.W    R1,??DataTable1_55
   \   00002314   0xA810             ADD      R0,SP,#+64
   \   00002316   0x.... 0x....      BL       sprintf
   2285                                  strcat( (char *)tempBffr2, (char *)TMeasure.TempC );
   \   0000231A   0xA938             ADD      R1,SP,#+224
   \   0000231C   0xA810             ADD      R0,SP,#+64
   \   0000231E   0x.... 0x....      BL       strcat
   2286                                  strcat( (char *)tempBffr2, "     TempF: " );
   \   00002322   0x.... 0x....      LDR.W    R1,??DataTable1_56
   \   00002326   0xA810             ADD      R0,SP,#+64
   \   00002328   0x.... 0x....      BL       strcat
   2287                                  strcat( (char *)tempBffr2, (char *)TMeasure.TempF );
   \   0000232C   0xF10D 0x01E7      ADD      R1,SP,#+231
   \   00002330   0xA810             ADD      R0,SP,#+64
   \   00002332   0x.... 0x....      BL       strcat
   2288                                  strcat( (char *)tempBffr2, "\r\n" );
   \   00002336   0xA186             ADR.N    R1,??RoadBrd_ParseString_281  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00002338   0xA810             ADD      R0,SP,#+64
   \   0000233A   0x.... 0x....      BL       strcat
   2289                                  break;
   2290                                } //EndSwitch
   2291                              } //EndElse (Size == 2)
   2292                              break;
   \                     ??RoadBrd_ParseString_321: (+1)
   \   0000233E   0xE135             B.N      ??RoadBrd_ParseString_246
   \                     ??RoadBrd_ParseString_244:
   \   00002340   0x........         DC32     ?_86
   \   00002344   0x........         DC32     ?_87
   2293          //++++++++++++++++++++++++++++++++++++++++++  Dump Driver State.
   2294                            case 'D':
   2295                              // Read Driver Status
   2296                              DriverStatus = Get_DriverStatus();
   \                     ??RoadBrd_ParseString_248: (+1)
   \   00002348   0x.... 0x....      BL       Get_DriverStatus
   \   0000234C   0xF8AD 0x00BE      STRH     R0,[SP, #+190]
   2297                              sprintf( (char *)tempBffr2, "Driver Status: %04x\r\n", DriverStatus );
   \   00002350   0xF8BD 0x20BE      LDRH     R2,[SP, #+190]
   \   00002354   0x.... 0x....      LDR.W    R1,??DataTable1_57
   \   00002358   0xA810             ADD      R0,SP,#+64
   \   0000235A   0x.... 0x....      BL       sprintf
   2298                              break;
   \   0000235E   0xE125             B.N      ??RoadBrd_ParseString_246
   2299          //++++++++++++++++++++++++++++++++++++++++++  RESET Micro.
   2300                            case 'R':
   2301                              // Read Driver Status
   2302                              HAL_NVIC_SystemReset();
   \                     ??RoadBrd_ParseString_252: (+1)
   \   00002360   0x.... 0x....      BL       HAL_NVIC_SystemReset
   2303                              sprintf( (char *)tempBffr2, "RESET CALLED BUT NO RESPONSE!!\r\n" );
   \   00002364   0x.... 0x....      LDR.W    R1,??DataTable1_58
   \   00002368   0xA810             ADD      R0,SP,#+64
   \   0000236A   0x.... 0x....      BL       sprintf
   2304                              break;
   \   0000236E   0xE11D             B.N      ??RoadBrd_ParseString_246
   2305          //++++++++++++++++++++++++++++++++++++++++++  Key Flash Variable Commands.
   2306                            case 'K':
   2307                              // Key Flash Variable Commands.
   2308                              // Test Size to make sure we have enough Characters for this operation
   2309                              Status = HAL_OK;
   \                     ??RoadBrd_ParseString_250: (+1)
   \   00002370   0x2000             MOVS     R0,#+0
   \   00002372   0x0005             MOVS     R5,R0
   2310                              if (Size < 4)
   \   00002374   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00002378   0xF1B8 0x0F04      CMP      R8,#+4
   \   0000237C   0xDA10             BGE.N    ??RoadBrd_ParseString_384
   2311                                strcpy( (char *)tempBffr2, "TK SYNTAX ERROR: Not correct format.\r\n");
   \   0000237E   0x.... 0x....      LDR.W    R1,??DataTable1_59
   \   00002382   0xA810             ADD      R0,SP,#+64
   \   00002384   0x.... 0x....      BL       strcpy
   \   00002388   0xE0EF             B.N      ??RoadBrd_ParseString_385
   \   0000238A   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_255:
   \   0000238C   0x........         DC32     ?_88
   \   00002390   0x........         DC32     ?_89
   \   00002394   0x........         DC32     ?_90
   \   00002398   0x........         DC32     ?_91
   \   0000239C   0x........         DC32     ?_92
   2312                              else
   2313                              {
   2314                                switch( tempBffr[2] )
   \                     ??RoadBrd_ParseString_384: (+1)
   \   000023A0   0x78A0             LDRB     R0,[R4, #+2]
   \   000023A2   0x2852             CMP      R0,#+82
   \   000023A4   0xF000 0x80A8      BEQ.W    ??RoadBrd_ParseString_386
   \   000023A8   0x2853             CMP      R0,#+83
   \   000023AA   0xF040 0x80DA      BNE.W    ??RoadBrd_ParseString_387
   2315                                {
   2316          //------------------
   2317                                  case 'S':
   2318                                    //Key Flash Variable Set Command.
   2319                                    switch( tempBffr[3] )
   \                     ??RoadBrd_ParseString_388: (+1)
   \   000023AE   0x78E0             LDRB     R0,[R4, #+3]
   \   000023B0   0x2852             CMP      R0,#+82
   \   000023B2   0xD002             BEQ.N    ??RoadBrd_ParseString_389
   \   000023B4   0x2853             CMP      R0,#+83
   \   000023B6   0xD04A             BEQ.N    ??RoadBrd_ParseString_390
   \   000023B8   0xE098             B.N      ??RoadBrd_ParseString_391
   2320                                    {
   2321          //------------------
   2322                                      case 'R':
   2323                                        //Key Flash Variable Set Road Sound Sample Rate Command.
   2324                                        // Step 1. Validate format.
   2325                                        if(tempBffr[4]!=':')
   \                     ??RoadBrd_ParseString_389: (+1)
   \   000023BA   0x7920             LDRB     R0,[R4, #+4]
   \   000023BC   0x283A             CMP      R0,#+58
   \   000023BE   0xD005             BEQ.N    ??RoadBrd_ParseString_392
   2326                                        {
   2327                                          strcpy( (char *)tempBffr2, "TKSR SYNTAX ERROR: Not correct format.\r\n");
   \   000023C0   0x.... 0x....      LDR.W    R1,??DataTable1_60
   \   000023C4   0xA810             ADD      R0,SP,#+64
   \   000023C6   0x.... 0x....      BL       strcpy
   \   000023CA   0xE03F             B.N      ??RoadBrd_ParseString_393
   2328                                        } // Endif (tempBffr[4]!=':')
   2329                                        else
   2330                                        {
   2331                                          // 2. Verify if remaining string is digits
   2332                                          if (Size > 5)
   \                     ??RoadBrd_ParseString_392: (+1)
   \   000023CC   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000023D0   0xF1B8 0x0F06      CMP      R8,#+6
   \   000023D4   0xDB10             BLT.N    ??RoadBrd_ParseString_394
   2333                                          {
   2334                                            flag = 1;
   \   000023D6   0x2001             MOVS     R0,#+1
   \   000023D8   0x4683             MOV      R11,R0
   2335                                            for (x=5; x< Size; x++)
   \   000023DA   0x2005             MOVS     R0,#+5
   \   000023DC   0x0006             MOVS     R6,R0
   \                     ??RoadBrd_ParseString_395: (+1)
   \   000023DE   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000023E2   0x4546             CMP      R6,R8
   \   000023E4   0xDA0A             BGE.N    ??RoadBrd_ParseString_396
   2336                                            {
   2337                                              if (isdigit(tempBffr[x]) == 0)
   \   000023E6   0x5DA0             LDRB     R0,[R4, R6]
   \   000023E8   0x.... 0x....      BL       isdigit
   \   000023EC   0x2800             CMP      R0,#+0
   \   000023EE   0xD101             BNE.N    ??RoadBrd_ParseString_397
   2338                                                flag = 0;
   \   000023F0   0x2000             MOVS     R0,#+0
   \   000023F2   0x4683             MOV      R11,R0
   2339                                            }
   \                     ??RoadBrd_ParseString_397: (+1)
   \   000023F4   0x1C76             ADDS     R6,R6,#+1
   \   000023F6   0xE7F2             B.N      ??RoadBrd_ParseString_395
   2340                                          } // EndIf (Size > 5)
   2341                                          else
   2342                                            flag = 0;
   \                     ??RoadBrd_ParseString_394: (+1)
   \   000023F8   0x2000             MOVS     R0,#+0
   \   000023FA   0x4683             MOV      R11,R0
   2343                                          if (flag == 0)
   \                     ??RoadBrd_ParseString_396: (+1)
   \   000023FC   0xF1BB 0x0F00      CMP      R11,#+0
   \   00002400   0xD105             BNE.N    ??RoadBrd_ParseString_398
   2344                                          {
   2345                                            strcpy( (char *)tempBffr2, "TKSR SYNTAX ERROR: Bad Parameter.\r\n");
   \   00002402   0x.... 0x....      LDR.W    R1,??DataTable1_61
   \   00002406   0xA810             ADD      R0,SP,#+64
   \   00002408   0x.... 0x....      BL       strcpy
   \   0000240C   0xE01E             B.N      ??RoadBrd_ParseString_393
   2346                                          }
   2347                                          else
   2348                                          {
   2349                                            // 3. Grab remaining string and convert to integer.
   2350                                            tempPstr = &tempBffr[5];
   \                     ??RoadBrd_ParseString_398: (+1)
   \   0000240E   0x1D60             ADDS     R0,R4,#+5
   \   00002410   0x9035             STR      R0,[SP, #+212]
   2351                                            strcpy(tempstr, tempPstr);
   \   00002412   0x9935             LDR      R1,[SP, #+212]
   \   00002414   0xA89B             ADD      R0,SP,#+620
   \   00002416   0x.... 0x....      BL       strcpy
   2352                                            new_value = atoi( tempstr );
   \   0000241A   0xA89B             ADD      R0,SP,#+620
   \   0000241C   0x.... 0x....      BL       atoi
   \   00002420   0x9030             STR      R0,[SP, #+192]
   2353                                            if((new_value > 9999) ||
   2354                                               (new_value < 0))
   \   00002422   0x9830             LDR      R0,[SP, #+192]
   \   00002424   0xF242 0x7110      MOVW     R1,#+10000
   \   00002428   0x4288             CMP      R0,R1
   \   0000242A   0xDA02             BGE.N    ??RoadBrd_ParseString_399
   \   0000242C   0x9830             LDR      R0,[SP, #+192]
   \   0000242E   0x2800             CMP      R0,#+0
   \   00002430   0xD505             BPL.N    ??RoadBrd_ParseString_400
   2355                                            {
   2356                                              strcpy( (char *)tempBffr2, "TKSR SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_399: (+1)
   \   00002432   0x.... 0x....      LDR.W    R1,??DataTable1_61
   \   00002436   0xA810             ADD      R0,SP,#+64
   \   00002438   0x.... 0x....      BL       strcpy
   \   0000243C   0xE006             B.N      ??RoadBrd_ParseString_393
   2357                                            }
   2358                                            else
   2359                                            {
   2360                                              // Time to set new Road Sound Sample Rate.
   2361                                              RoadBrd_Set_RdSndTickCnt( new_value );
   \                     ??RoadBrd_ParseString_400: (+1)
   \   0000243E   0x9830             LDR      R0,[SP, #+192]
   \   00002440   0x.... 0x....      BL       RoadBrd_Set_RdSndTickCnt
   2362                                              // NOW, Build Data String..
   2363                                              sprintf( (char *)tempBffr2, "COMPLETE" );
   \   00002444   0x....             LDR.N    R1,??DataTable0_4
   \   00002446   0xA810             ADD      R0,SP,#+64
   \   00002448   0x.... 0x....      BL       sprintf
   2364                                            } // EndElse ((new_value > 9999) || (new_value < 0))
   2365                                          } // EndElse (flag == 0)
   2366                                        } // EndElse (tempBffr[4]!=':')
   2367                                        break;
   \                     ??RoadBrd_ParseString_393: (+1)
   \   0000244C   0xE053             B.N      ??RoadBrd_ParseString_401
   2368          //------------------
   2369                                      case 'S':
   2370                                        //Key Flash Variable Set Sensor Sample Rate Command.
   2371                                        // Step 1. Validate format.
   2372                                        if(tempBffr[4]!=':')
   \                     ??RoadBrd_ParseString_390: (+1)
   \   0000244E   0x7920             LDRB     R0,[R4, #+4]
   \   00002450   0x283A             CMP      R0,#+58
   \   00002452   0xD007             BEQ.N    ??RoadBrd_ParseString_402
   2373                                        {
   2374                                          strcpy( (char *)tempBffr2, "TKSS SYNTAX ERROR: Not correct format.\r\n");
   \   00002454   0x.... 0x....      LDR.W    R1,??DataTable1_62
   \   00002458   0xA810             ADD      R0,SP,#+64
   \   0000245A   0x.... 0x....      BL       strcpy
   \   0000245E   0xE041             B.N      ??RoadBrd_ParseString_403
   \                     ??RoadBrd_ParseString_271:
   \   00002460   0x........         DC32     ?_93
   2375                                        } // Endif (tempBffr[4]!=':')
   2376                                        else
   2377                                        {
   2378                                          // 2. Verify if remaining string is digits
   2379                                          if (Size > 5)
   \                     ??RoadBrd_ParseString_402: (+1)
   \   00002464   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00002468   0xF1B8 0x0F06      CMP      R8,#+6
   \   0000246C   0xDB10             BLT.N    ??RoadBrd_ParseString_404
   2380                                          {
   2381                                            flag = 1;
   \   0000246E   0x2001             MOVS     R0,#+1
   \   00002470   0x4683             MOV      R11,R0
   2382                                            for (x=5; x< Size; x++)
   \   00002472   0x2005             MOVS     R0,#+5
   \   00002474   0x0006             MOVS     R6,R0
   \                     ??RoadBrd_ParseString_405: (+1)
   \   00002476   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000247A   0x4546             CMP      R6,R8
   \   0000247C   0xDA0A             BGE.N    ??RoadBrd_ParseString_406
   2383                                            {
   2384                                              if (isdigit(tempBffr[x]) == 0)
   \   0000247E   0x5DA0             LDRB     R0,[R4, R6]
   \   00002480   0x.... 0x....      BL       isdigit
   \   00002484   0x2800             CMP      R0,#+0
   \   00002486   0xD101             BNE.N    ??RoadBrd_ParseString_407
   2385                                                flag = 0;
   \   00002488   0x2000             MOVS     R0,#+0
   \   0000248A   0x4683             MOV      R11,R0
   2386                                            }
   \                     ??RoadBrd_ParseString_407: (+1)
   \   0000248C   0x1C76             ADDS     R6,R6,#+1
   \   0000248E   0xE7F2             B.N      ??RoadBrd_ParseString_405
   2387                                          } // EndIf (Size > 5)
   2388                                          else
   2389                                            flag = 0;
   \                     ??RoadBrd_ParseString_404: (+1)
   \   00002490   0x2000             MOVS     R0,#+0
   \   00002492   0x4683             MOV      R11,R0
   2390                                          if (flag == 0)
   \                     ??RoadBrd_ParseString_406: (+1)
   \   00002494   0xF1BB 0x0F00      CMP      R11,#+0
   \   00002498   0xD105             BNE.N    ??RoadBrd_ParseString_408
   2391                                          {
   2392                                            strcpy( (char *)tempBffr2, "TKSS SYNTAX ERROR: Bad Parameter.\r\n");
   \   0000249A   0x.... 0x....      LDR.W    R1,??DataTable1_63
   \   0000249E   0xA810             ADD      R0,SP,#+64
   \   000024A0   0x.... 0x....      BL       strcpy
   \   000024A4   0xE01E             B.N      ??RoadBrd_ParseString_403
   2393                                          }
   2394                                          else
   2395                                          {
   2396                                            // 3. Grab remaining string and convert to integer.
   2397                                            tempPstr = &tempBffr[5];
   \                     ??RoadBrd_ParseString_408: (+1)
   \   000024A6   0x1D60             ADDS     R0,R4,#+5
   \   000024A8   0x9035             STR      R0,[SP, #+212]
   2398                                            strcpy(tempstr, tempPstr);
   \   000024AA   0x9935             LDR      R1,[SP, #+212]
   \   000024AC   0xA89B             ADD      R0,SP,#+620
   \   000024AE   0x.... 0x....      BL       strcpy
   2399                                            new_value = atoi( tempstr );
   \   000024B2   0xA89B             ADD      R0,SP,#+620
   \   000024B4   0x.... 0x....      BL       atoi
   \   000024B8   0x9030             STR      R0,[SP, #+192]
   2400                                            if((new_value > 9999) ||
   2401                                               (new_value < 0))
   \   000024BA   0x9830             LDR      R0,[SP, #+192]
   \   000024BC   0xF242 0x7110      MOVW     R1,#+10000
   \   000024C0   0x4288             CMP      R0,R1
   \   000024C2   0xDA02             BGE.N    ??RoadBrd_ParseString_409
   \   000024C4   0x9830             LDR      R0,[SP, #+192]
   \   000024C6   0x2800             CMP      R0,#+0
   \   000024C8   0xD505             BPL.N    ??RoadBrd_ParseString_410
   2402                                            {
   2403                                              strcpy( (char *)tempBffr2, "TKSS SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_409: (+1)
   \   000024CA   0x.... 0x....      LDR.W    R1,??DataTable1_63
   \   000024CE   0xA810             ADD      R0,SP,#+64
   \   000024D0   0x.... 0x....      BL       strcpy
   \   000024D4   0xE006             B.N      ??RoadBrd_ParseString_403
   2404                                            }
   2405                                            else
   2406                                            {
   2407                                              // Time to set new Road Sound Sample Rate.
   2408                                              RoadBrd_Set_SnsrTickCnt( new_value );
   \                     ??RoadBrd_ParseString_410: (+1)
   \   000024D6   0x9830             LDR      R0,[SP, #+192]
   \   000024D8   0x.... 0x....      BL       RoadBrd_Set_SnsrTickCnt
   2409                                              // NOW, Build Data String..
   2410                                              sprintf( (char *)tempBffr2, "COMPLETE" );
   \   000024DC   0x....             LDR.N    R1,??DataTable0_4
   \   000024DE   0xA810             ADD      R0,SP,#+64
   \   000024E0   0x.... 0x....      BL       sprintf
   2411                                            } // EndElse ((new_value > 9999) || (new_value < 0))
   2412                                          } // EndElse (flag == 0)
   2413                                        } // EndElse (tempBffr[4]!=':')
   2414                                        break;
   \                     ??RoadBrd_ParseString_403: (+1)
   \   000024E4   0xE007             B.N      ??RoadBrd_ParseString_401
   \   000024E6   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_276:
   \   000024E8   0x........         DC32     ?_95
   2415                                      default:
   2416                                        strcpy( (char *)tempBffr2, "TKS ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_391: (+1)
   \   000024EC   0x.... 0x....      LDR.W    R1,??DataTable1_64
   \   000024F0   0xA810             ADD      R0,SP,#+64
   \   000024F2   0x.... 0x....      BL       strcpy
   2417                                        break;
   2418                                    } // EndSwitch ( tempBffr[3] )
   2419                                    break;
   \                     ??RoadBrd_ParseString_401: (+1)
   \   000024F6   0xE038             B.N      ??RoadBrd_ParseString_385
   2420          //------------------
   2421                                  case 'R':
   2422                                    //Key Flash Variable Read Command
   2423                                    //Key Flash Variable Set Command.
   2424                                    switch( tempBffr[3] )
   \                     ??RoadBrd_ParseString_386: (+1)
   \   000024F8   0x78E0             LDRB     R0,[R4, #+3]
   \   000024FA   0x2852             CMP      R0,#+82
   \   000024FC   0xD002             BEQ.N    ??RoadBrd_ParseString_411
   \   000024FE   0x2853             CMP      R0,#+83
   \   00002500   0xD014             BEQ.N    ??RoadBrd_ParseString_412
   \   00002502   0xE029             B.N      ??RoadBrd_ParseString_413
   2425                                    {
   2426          //------------------
   2427                                      case 'R':
   2428                                        //Key Flash Variable Read Road Sound Sample Rate Command.
   2429                                        sprintf( (char *)tempBffr2, "RdSnd Sample Rate:  %3.1f Seconds.\r\n", ((float)RoadBrd_Get_RdSndTickCnt()/10));
   \                     ??RoadBrd_ParseString_411: (+1)
   \   00002504   0x.... 0x....      BL       RoadBrd_Get_RdSndTickCnt
   \   00002508   0x.... 0x....      BL       __aeabi_ui2f
   \   0000250C   0x.... 0x....      LDR.W    R1,??DataTable1_65  ;; 0x41200000
   \   00002510   0x.... 0x....      BL       __aeabi_fdiv
   \   00002514   0x.... 0x....      BL       __aeabi_f2d
   \   00002518   0x0002             MOVS     R2,R0
   \   0000251A   0x000B             MOVS     R3,R1
   \   0000251C   0x.... 0x....      LDR.W    R1,??DataTable1_66
   \   00002520   0xA810             ADD      R0,SP,#+64
   \   00002522   0x.... 0x....      BL       sprintf
   2430                                        break;
   \   00002526   0xE01B             B.N      ??RoadBrd_ParseString_414
   \                     ??RoadBrd_ParseString_279:
   \   00002528   0x........         DC32     ?_96
   2431          //------------------
   2432                                      case 'S':
   2433                                        //Key Flash Variable Read Sensor Sample Rate Command.
   2434                                        sprintf( (char *)tempBffr2, "Sensor Sample Rate: %3.1f Seconds.\r\n\r\n> ", ((float)RoadBrd_Get_SnsrTickCnt()/10));
   \                     ??RoadBrd_ParseString_412: (+1)
   \   0000252C   0x.... 0x....      BL       RoadBrd_Get_SnsrTickCnt
   \   00002530   0x.... 0x....      BL       __aeabi_ui2f
   \   00002534   0x.... 0x....      LDR.W    R1,??DataTable1_65  ;; 0x41200000
   \   00002538   0x.... 0x....      BL       __aeabi_fdiv
   \   0000253C   0x.... 0x....      BL       __aeabi_f2d
   \   00002540   0x0002             MOVS     R2,R0
   \   00002542   0x000B             MOVS     R3,R1
   \   00002544   0x.... 0x....      LDR.W    R1,??DataTable1_67
   \   00002548   0xA810             ADD      R0,SP,#+64
   \   0000254A   0x.... 0x....      BL       sprintf
   2435                                        break;
   \   0000254E   0xE007             B.N      ??RoadBrd_ParseString_414
   \                     ??RoadBrd_ParseString_281:
   \   00002550   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
   \   00002554   0x........         DC32     ?_97
   2436                                      default:
   2437                                        strcpy( (char *)tempBffr2, "TKS ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_413: (+1)
   \   00002558   0x....             LDR.N    R1,??DataTable1_64
   \   0000255A   0xA810             ADD      R0,SP,#+64
   \   0000255C   0x.... 0x....      BL       strcpy
   2438                                        break;
   2439                                    } // EndSwitch ( tempBffr[3] )
   2440                               
   2441           
   2442                                    
   2443                                    
   2444                                    break;
   \                     ??RoadBrd_ParseString_414: (+1)
   \   00002560   0xE003             B.N      ??RoadBrd_ParseString_385
   2445                                  default:
   2446                                    strcpy( (char *)tempBffr2, "ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_387: (+1)
   \   00002562   0x....             LDR.N    R1,??DataTable1_68
   \   00002564   0xA810             ADD      R0,SP,#+64
   \   00002566   0x.... 0x....      BL       strcpy
   2447                                    break;
   2448                                } //EndSwitch ( tempBffr[2] )
   2449                              } //EndElse (Size < 3)
   2450          
   2451          
   2452          
   2453          
   2454          
   2455          
   2456                              break;
   \                     ??RoadBrd_ParseString_385: (+1)
   \   0000256A   0xE01F             B.N      ??RoadBrd_ParseString_246
   2457          //**************************************************************************************************
   2458          //++++++++++++++++++++++++++++++++++++++++++  Special Monitor Mode to intercept traffic from UART and pass to BGM111
   2459                            case 'M':
   2460                              strcpy( (char *)tempBffr2, "BGM111 MONITOR MODE.\r\n\r\n");
   \                     ??RoadBrd_ParseString_251: (+1)
   \   0000256C   0x....             LDR.N    R1,??DataTable1_69
   \   0000256E   0xA810             ADD      R0,SP,#+64
   \   00002570   0x.... 0x....      BL       strcpy
   2461          #ifdef NUCLEO
   2462                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   2463          #else
   2464                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00002574   0xA910             ADD      R1,SP,#+64
   \   00002576   0x2000             MOVS     R0,#+0
   \   00002578   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000257C   0x0005             MOVS     R5,R0
   2465          #endif
   2466                              if (Status != HAL_OK)
   \   0000257E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002580   0x2D00             CMP      R5,#+0
   \   00002582   0xD005             BEQ.N    ??RoadBrd_ParseString_415
   2467                                return Status;
   \   00002584   0x0028             MOVS     R0,R5
   \   00002586   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002588   0xE08D             B.N      ??RoadBrd_ParseString_4
   \   0000258A   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_283:
   \   0000258C   0x........         DC32     ?_98
   2468                              strcpy( (char *)tempBffr2, "Use <ESC> to exit mode.\r\n\r\n");
   \                     ??RoadBrd_ParseString_415: (+1)
   \   00002590   0x....             LDR.N    R1,??DataTable1_70
   \   00002592   0xA810             ADD      R0,SP,#+64
   \   00002594   0x.... 0x....      BL       strcpy
   2469                              // Set Bypass Flag
   2470                              Bypass = true;
   \   00002598   0x2001             MOVS     R0,#+1
   \   0000259A   0x....             LDR.N    R1,??DataTable1_71
   \   0000259C   0x7008             STRB     R0,[R1, #+0]
   2471                              break;
   \   0000259E   0xE005             B.N      ??RoadBrd_ParseString_246
   \                     ??RoadBrd_ParseString_285:
   \   000025A0   0x........         DC32     ?_99
   2472          
   2473                            default:
   2474                              // ERROR if we get here.. 
   2475                              strcpy( (char *)tempBffr2, "ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_253: (+1)
   \   000025A4   0x....             LDR.N    R1,??DataTable1_68
   \   000025A6   0xA810             ADD      R0,SP,#+64
   \   000025A8   0x.... 0x....      BL       strcpy
   2476                              break;
   2477                           
   2478                          } //EndSwitch ( tempBffr[1] )
   2479                        } //EndElse (Size <= 1)
   2480                        break;
   \                     ??RoadBrd_ParseString_246: (+1)
   \   000025AC   0xE003             B.N      ??RoadBrd_ParseString_25
   2481          #if 0
   2482          //**************************************************************************************************
   2483                      case 'S':
   2484                        // Sleep Mode. 
   2485                        switch( tempBffr[1] )
   2486                        {
   2487          //++++++++++++++++++++++++++++++++++++++++++  5V Power Supply Commands.
   2488                          case 'S':
   2489                            strcpy( (char *)tempBffr2, "Micro in Sleep Mode NOW.\r\n");
   2490          #ifdef NUCLEO
   2491                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   2492          #else
   2493                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   2494          #endif
   2495                            if (Status != HAL_OK)
   2496                              return Status;
   2497                            // Sleep Micro NOW!
   2498                            //sleep();
   2499                            break;
   2500                          case 'D':
   2501                            // Turn off 5V Power Supply.
   2502                            strcpy( (char *)tempBffr2, "Micro in Deep Sleep Mode NOW.\r\n");
   2503          #ifdef NUCLEO
   2504                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   2505          #else
   2506                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   2507          #endif
   2508                            if (Status != HAL_OK)
   2509                              return Status;
   2510                            // Sleep Micro NOW!
   2511                            //deepsleep();
   2512                            break;
   2513                        }
   2514                        break;
   2515          #endif
   2516                      default:
   2517                        // ERROR if we get here.. 
   2518                        strcpy( (char *)tempBffr2, "ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_22: (+1)
   \   000025AE   0x....             LDR.N    R1,??DataTable1_68
   \   000025B0   0xA810             ADD      R0,SP,#+64
   \   000025B2   0x.... 0x....      BL       strcpy
   2519                        break;
   2520                      } // EndSwitch
   2521                      
   2522          
   2523                      // Test last I2C Status to determine next msg.
   2524                      switch( Status )
   \                     ??RoadBrd_ParseString_25: (+1)
   \   000025B6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000025B8   0x2D00             CMP      R5,#+0
   \   000025BA   0xD007             BEQ.N    ??RoadBrd_ParseString_416
   \   000025BC   0x2D02             CMP      R5,#+2
   \   000025BE   0xD03F             BEQ.N    ??RoadBrd_ParseString_417
   \   000025C0   0xD305             BCC.N    ??RoadBrd_ParseString_418
   \   000025C2   0x2D03             CMP      R5,#+3
   \   000025C4   0xD043             BEQ.N    ??RoadBrd_ParseString_419
   \   000025C6   0xE049             B.N      ??RoadBrd_ParseString_420
   \                     ??RoadBrd_ParseString_289:
   \   000025C8   0x........         DC32     ?_100
   2525                      {
   2526                        case HAL_OK:
   2527                          break;
   \                     ??RoadBrd_ParseString_416: (+1)
   \   000025CC   0xE04C             B.N      ??RoadBrd_ParseString_421
   2528                        case HAL_ERROR:
   2529                          // Determine what kind of error.
   2530                          Err_code = RoadBrd_I2C_GetError();
   \                     ??RoadBrd_ParseString_418: (+1)
   \   000025CE   0x.... 0x....      BL       RoadBrd_I2C_GetError
   \   000025D2   0x903E             STR      R0,[SP, #+248]
   2531                          switch( Err_code )
   \   000025D4   0x983E             LDR      R0,[SP, #+248]
   \   000025D6   0x2801             CMP      R0,#+1
   \   000025D8   0xD00A             BEQ.N    ??RoadBrd_ParseString_422
   \   000025DA   0x2802             CMP      R0,#+2
   \   000025DC   0xD00D             BEQ.N    ??RoadBrd_ParseString_423
   \   000025DE   0x2804             CMP      R0,#+4
   \   000025E0   0xD010             BEQ.N    ??RoadBrd_ParseString_424
   \   000025E2   0x2808             CMP      R0,#+8
   \   000025E4   0xD016             BEQ.N    ??RoadBrd_ParseString_425
   \   000025E6   0x2810             CMP      R0,#+16
   \   000025E8   0xD019             BEQ.N    ??RoadBrd_ParseString_426
   \   000025EA   0x2820             CMP      R0,#+32
   \   000025EC   0xD01C             BEQ.N    ??RoadBrd_ParseString_427
   \   000025EE   0xE020             B.N      ??RoadBrd_ParseString_428
   2532                          {
   2533                            case HAL_I2C_ERROR_BERR:
   2534                              strcpy( (char *)tempBffr2, "I2C ERROR: BERR: Bus Error reported.\r\n");
   \                     ??RoadBrd_ParseString_422: (+1)
   \   000025F0   0x....             LDR.N    R1,??DataTable1_72
   \   000025F2   0xA810             ADD      R0,SP,#+64
   \   000025F4   0x.... 0x....      BL       strcpy
   2535                              break;
   \   000025F8   0xE01F             B.N      ??RoadBrd_ParseString_429
   2536                            case HAL_I2C_ERROR_ARLO:
   2537                              strcpy( (char *)tempBffr2, "I2C ERROR: ARLO: Arbitration lost reported.\r\n");
   \                     ??RoadBrd_ParseString_423: (+1)
   \   000025FA   0x....             LDR.N    R1,??DataTable1_73
   \   000025FC   0xA810             ADD      R0,SP,#+64
   \   000025FE   0x.... 0x....      BL       strcpy
   2538                              break;
   \   00002602   0xE01A             B.N      ??RoadBrd_ParseString_429
   2539                            case HAL_I2C_ERROR_AF:
   2540                              strcpy( (char *)tempBffr2, "I2C ERROR: AF: Acknowledge failure reported.\r\n");
   \                     ??RoadBrd_ParseString_424: (+1)
   \   00002604   0x....             LDR.N    R1,??DataTable1_74
   \   00002606   0xA810             ADD      R0,SP,#+64
   \   00002608   0x.... 0x....      BL       strcpy
   2541                              break;
   \   0000260C   0xE015             B.N      ??RoadBrd_ParseString_429
   \   0000260E   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_291:
   \   00002610   0x........         DC32     ?_101
   2542                            case HAL_I2C_ERROR_OVR:
   2543                              strcpy( (char *)tempBffr2, "I2C ERROR: OVR: Overrun/Underrun reported.\r\n");
   \                     ??RoadBrd_ParseString_425: (+1)
   \   00002614   0x....             LDR.N    R1,??DataTable1_75
   \   00002616   0xA810             ADD      R0,SP,#+64
   \   00002618   0x.... 0x....      BL       strcpy
   2544                              break;
   \   0000261C   0xE00D             B.N      ??RoadBrd_ParseString_429
   2545                            case HAL_I2C_ERROR_DMA:
   2546                              strcpy( (char *)tempBffr2, "I2C ERROR: DMA: DMA Error reported.\r\n");
   \                     ??RoadBrd_ParseString_426: (+1)
   \   0000261E   0x....             LDR.N    R1,??DataTable1_76
   \   00002620   0xA810             ADD      R0,SP,#+64
   \   00002622   0x.... 0x....      BL       strcpy
   2547                              break;
   \   00002626   0xE008             B.N      ??RoadBrd_ParseString_429
   2548                            case HAL_I2C_ERROR_TIMEOUT:
   2549                              strcpy( (char *)tempBffr2, "I2C ERROR: TIMEOUT: Timeout Error reported.\r\n");
   \                     ??RoadBrd_ParseString_427: (+1)
   \   00002628   0x....             LDR.N    R1,??DataTable1_77
   \   0000262A   0xA810             ADD      R0,SP,#+64
   \   0000262C   0x.... 0x....      BL       strcpy
   2550                              break;
   \   00002630   0xE003             B.N      ??RoadBrd_ParseString_429
   2551                            default:
   2552                              strcpy( (char *)tempBffr2, "I2C ERROR: Unknown Error reported.\r\n");
   \                     ??RoadBrd_ParseString_428: (+1)
   \   00002632   0x....             LDR.N    R1,??DataTable1_78
   \   00002634   0xA810             ADD      R0,SP,#+64
   \   00002636   0x.... 0x....      BL       strcpy
   2553                              break;
   2554                           
   2555                          }
   2556                          // Re-Initialize I2C....It has been corrupted.
   2557                          MX_I2C1_Reset();
   \                     ??RoadBrd_ParseString_429: (+1)
   \   0000263A   0x.... 0x....      BL       MX_I2C1_Reset
   2558                          break;
   \   0000263E   0xE013             B.N      ??RoadBrd_ParseString_421
   2559                        case HAL_BUSY:
   2560                          strcpy( (char *)tempBffr2, "I2C BUSY: I2C reported BUSY error.\r\n");
   \                     ??RoadBrd_ParseString_417: (+1)
   \   00002640   0x....             LDR.N    R1,??DataTable1_79
   \   00002642   0xA810             ADD      R0,SP,#+64
   \   00002644   0x.... 0x....      BL       strcpy
   2561                          // Re-Initialize I2C....It has been corrupted.
   2562                          MX_I2C1_Reset();
   \   00002648   0x.... 0x....      BL       MX_I2C1_Reset
   2563                          break;
   \   0000264C   0xE00C             B.N      ??RoadBrd_ParseString_421
   2564                        case HAL_TIMEOUT:
   2565                          strcpy( (char *)tempBffr2, "I2C TIMEOUT: I2C reported TIMEOUT.\r\n");
   \                     ??RoadBrd_ParseString_419: (+1)
   \   0000264E   0x....             LDR.N    R1,??DataTable1_80
   \   00002650   0xA810             ADD      R0,SP,#+64
   \   00002652   0x.... 0x....      BL       strcpy
   2566                          // Re-Initialize I2C....It has been corrupted.
   2567                          MX_I2C1_Reset();
   \   00002656   0x.... 0x....      BL       MX_I2C1_Reset
   2568                          break;
   \   0000265A   0xE005             B.N      ??RoadBrd_ParseString_421
   2569                        default:  
   2570                          strcpy( (char *)tempBffr2, "I2C ERROR: I2C reported unnown error.\r\n");
   \                     ??RoadBrd_ParseString_420: (+1)
   \   0000265C   0x....             LDR.N    R1,??DataTable1_81
   \   0000265E   0xA810             ADD      R0,SP,#+64
   \   00002660   0x.... 0x....      BL       strcpy
   2571                          // Re-Initialize I2C....It has been corrupted.
   2572                          MX_I2C1_Reset();
   \   00002664   0x.... 0x....      BL       MX_I2C1_Reset
   2573                          break;
   2574                      }
   2575                      // Send string to UART..
   2576          #ifdef NUCLEO
   2577                      Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);
   2578          #else
   2579                      Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \                     ??RoadBrd_ParseString_421: (+1)
   \   00002668   0xA910             ADD      R1,SP,#+64
   \   0000266A   0x2000             MOVS     R0,#+0
   \   0000266C   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00002670   0x0005             MOVS     R5,R0
   2580          #endif
   2581                     if (Status != HAL_OK)
   \   00002672   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002674   0x2D00             CMP      R5,#+0
   \   00002676   0xD005             BEQ.N    ??RoadBrd_ParseString_430
   2582                        return Status;
   \   00002678   0x0028             MOVS     R0,R5
   \   0000267A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000267C   0xE013             B.N      ??RoadBrd_ParseString_4
   \   0000267E   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_298:
   \   00002680   0x........         DC32     ?_102
   2583                      // Send Prompt to UART..
   2584                      strcpy( (char *)tempBffr2, "\r\n\r\n> ");
   \                     ??RoadBrd_ParseString_430: (+1)
   \   00002684   0x....             LDR.N    R1,??DataTable1_82
   \   00002686   0xA810             ADD      R0,SP,#+64
   \   00002688   0x.... 0x....      BL       strcpy
   2585          #ifdef NUCLEO
   2586                      Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);
   2587          #else
   2588                      Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000268C   0xA910             ADD      R1,SP,#+64
   \   0000268E   0x2000             MOVS     R0,#+0
   \   00002690   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00002694   0x0005             MOVS     R5,R0
   2589          #endif
   2590                      if (Status != HAL_OK)
   \   00002696   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002698   0x2D00             CMP      R5,#+0
   \   0000269A   0xD002             BEQ.N    ??RoadBrd_ParseString_3
   2591                        return Status;
   \   0000269C   0x0028             MOVS     R0,R5
   \   0000269E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000026A0   0xE001             B.N      ??RoadBrd_ParseString_4
   2592              } // EndElse ( Bypass )
   2593            return Status;
   \                     ??RoadBrd_ParseString_3: (+1)
   \   000026A2   0x0028             MOVS     R0,R5
   \   000026A4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??RoadBrd_ParseString_4: (+1)
   \   000026A6   0xF50D 0x6D80      ADD      SP,SP,#+1024
   \   000026AA   0xB013             ADD      SP,SP,#+76
   \   000026AC   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   2594          }
   2595          
   2596          /**
   2597            * @brief  This function tests the passed string to make sure it is Hex format.
   2598            * @param  char *ptr: Ptr to string to be tested. NULL terminated
   2599            * @retval int: 1: String is HEX.
   2600            *              0:   String is not HEX.
   2601            */

   \                                 In section .text, align 2, keep-with-next
   2602          int isHexNum(char *ptr)
   2603          {
   \                     isHexNum: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   2604            int Size, x, test1;
   2605            
   2606            Size = strlen(ptr);
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       strlen
   \   0000000A   0x0005             MOVS     R5,R0
   2607            test1 = 0;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x0007             MOVS     R7,R0
   2608            for (x=0; x<Size; x++)
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x0006             MOVS     R6,R0
   \                     ??isHexNum_0: (+1)
   \   00000014   0x42AE             CMP      R6,R5
   \   00000016   0xDA16             BGE.N    ??isHexNum_1
   2609            {
   2610              if (((ptr[x] <= '9') && (ptr[x] >= '0')) ||
   2611                  ((ptr[x] <= 'F') && (ptr[x] >= 'A')))
   \   00000018   0x5DA0             LDRB     R0,[R4, R6]
   \   0000001A   0x283A             CMP      R0,#+58
   \   0000001C   0xDA02             BGE.N    ??isHexNum_2
   \   0000001E   0x5DA0             LDRB     R0,[R4, R6]
   \   00000020   0x2830             CMP      R0,#+48
   \   00000022   0xDA05             BGE.N    ??isHexNum_3
   \                     ??isHexNum_2: (+1)
   \   00000024   0x5DA0             LDRB     R0,[R4, R6]
   \   00000026   0x2847             CMP      R0,#+71
   \   00000028   0xDA05             BGE.N    ??isHexNum_4
   \   0000002A   0x5DA0             LDRB     R0,[R4, R6]
   \   0000002C   0x2841             CMP      R0,#+65
   \   0000002E   0xDB02             BLT.N    ??isHexNum_4
   2612                test1 = 0;
   \                     ??isHexNum_3: (+1)
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x0007             MOVS     R7,R0
   \   00000034   0xE001             B.N      ??isHexNum_5
   2613              else
   2614                test1 = 1;
   \                     ??isHexNum_4: (+1)
   \   00000036   0x2001             MOVS     R0,#+1
   \   00000038   0x0007             MOVS     R7,R0
   2615              if (test1 == 1)
   \                     ??isHexNum_5: (+1)
   \   0000003A   0x2F01             CMP      R7,#+1
   \   0000003C   0xD101             BNE.N    ??isHexNum_6
   2616                return 0;
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0xE002             B.N      ??isHexNum_7
   2617            }
   \                     ??isHexNum_6: (+1)
   \   00000042   0x1C76             ADDS     R6,R6,#+1
   \   00000044   0xE7E6             B.N      ??isHexNum_0
   2618            return 1;
   \                     ??isHexNum_1: (+1)
   \   00000046   0x2001             MOVS     R0,#+1
   \                     ??isHexNum_7: (+1)
   \   00000048   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
   2619          }
   2620          
   2621          /**
   2622            * @brief  This function converts the passed Hex String to an Integer value.
   2623            * @param  char *ptr: Ptr to string to be converted. NULL terminated
   2624            * @retval int: -1: Error in String
   2625            *              Value converted returned.
   2626            */

   \                                 In section .text, align 2, keep-with-next
   2627          int hatoi( char *ptr )
   2628          {
   \                     hatoi: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   2629            int Size, x;
   2630            int Value = 0;
   \   00000006   0x2700             MOVS     R7,#+0
   2631            int FinalValue = 0;
   \   00000008   0xF05F 0x0800      MOVS     R8,#+0
   2632            
   2633            Size = strlen(ptr);
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       strlen
   \   00000012   0x0005             MOVS     R5,R0
   2634            for (x=0; x<Size; x++)
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x0006             MOVS     R6,R0
   \                     ??hatoi_0: (+1)
   \   00000018   0x42AE             CMP      R6,R5
   \   0000001A   0xDA1A             BGE.N    ??hatoi_1
   2635            {
   2636              if ((ptr[x] <= '9') && (ptr[x] >= '0'))
   \   0000001C   0x5DA0             LDRB     R0,[R4, R6]
   \   0000001E   0x283A             CMP      R0,#+58
   \   00000020   0xDA06             BGE.N    ??hatoi_2
   \   00000022   0x5DA0             LDRB     R0,[R4, R6]
   \   00000024   0x2830             CMP      R0,#+48
   \   00000026   0xDB03             BLT.N    ??hatoi_2
   2637                Value = ptr[x] - '0';
   \   00000028   0x5DA0             LDRB     R0,[R4, R6]
   \   0000002A   0x3830             SUBS     R0,R0,#+48
   \   0000002C   0x0007             MOVS     R7,R0
   \   0000002E   0xE00C             B.N      ??hatoi_3
   2638              else if((ptr[x] <= 'F') && (ptr[x] >= 'A'))
   \                     ??hatoi_2: (+1)
   \   00000030   0x5DA0             LDRB     R0,[R4, R6]
   \   00000032   0x2847             CMP      R0,#+71
   \   00000034   0xDA06             BGE.N    ??hatoi_4
   \   00000036   0x5DA0             LDRB     R0,[R4, R6]
   \   00000038   0x2841             CMP      R0,#+65
   \   0000003A   0xDB03             BLT.N    ??hatoi_4
   2639                Value = ptr[x] - 'A' + 10;
   \   0000003C   0x5DA0             LDRB     R0,[R4, R6]
   \   0000003E   0x3837             SUBS     R0,R0,#+55
   \   00000040   0x0007             MOVS     R7,R0
   \   00000042   0xE002             B.N      ??hatoi_3
   2640              else
   2641                return -1;
   \                     ??hatoi_4: (+1)
   \   00000044   0xF05F 0x30FF      MOVS     R0,#-1
   \   00000048   0xE004             B.N      ??hatoi_5
   2642              FinalValue = FinalValue*16 + Value;
   \                     ??hatoi_3: (+1)
   \   0000004A   0xEB17 0x1808      ADDS     R8,R7,R8, LSL #+4
   2643            }
   \   0000004E   0x1C76             ADDS     R6,R6,#+1
   \   00000050   0xE7E2             B.N      ??hatoi_0
   2644            return FinalValue;
   \                     ??hatoi_1: (+1)
   \   00000052   0x4640             MOV      R0,R8
   \                     ??hatoi_5: (+1)
   \   00000054   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   2645          }
   2646          
   2647          

   \                                 In section .text, align 2, keep-with-next
   2648          bool Tst_Bypass( void)
   2649          {
   2650            return Bypass;
   \                     Tst_Bypass: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable1_71
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return
   2651          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0x........         DC32     ?_103

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_1:
   \   00000000   0x........         DC32     ?_104

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_2:
   \   00000000   0x........         DC32     ?_105

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_3:
   \   00000000   0x........         DC32     ?_106

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_4:
   \   00000000   0x........         DC32     ?_107

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_5:
   \   00000000   0x........         DC32     ?_108

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_6:
   \   00000000   0x........         DC32     ?_109

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_7:
   \   00000000   0x........         DC32     ?_110

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_8:
   \   00000000   0x........         DC32     ?_111

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_9:
   \   00000000   0x........         DC32     ?_112

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_10:
   \   00000000   0x........         DC32     ?_113

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     ?_114

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x........         DC32     ?_115

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x........         DC32     ?_116

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x........         DC32     ?_117

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0x........         DC32     ?_118

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \   00000000   0x........         DC32     ?_119

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \   00000000   0x........         DC32     ?_120

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_7:
   \   00000000   0x........         DC32     ?_121

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_8:
   \   00000000   0x........         DC32     ?_122

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_9:
   \   00000000   0x........         DC32     ?_123

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_10:
   \   00000000   0x........         DC32     ?_124

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_11:
   \   00000000   0x........         DC32     ?_125

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_12:
   \   00000000   0x........         DC32     ?_126

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_13:
   \   00000000   0x........         DC32     ?_127

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_14:
   \   00000000   0x........         DC32     ?_128

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_15:
   \   00000000   0x........         DC32     ?_129

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_16:
   \   00000000   0x........         DC32     ?_130

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_17:
   \   00000000   0x........         DC32     ?_131

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_18:
   \   00000000   0x........         DC32     ?_132

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_19:
   \   00000000   0x........         DC32     ?_133

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_20:
   \   00000000   0x........         DC32     ?_134

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_21:
   \   00000000   0x........         DC32     ?_135

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_22:
   \   00000000   0x........         DC32     ?_136

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_23:
   \   00000000   0x........         DC32     ?_137

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_24:
   \   00000000   0x........         DC32     ?_138

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_25:
   \   00000000   0x........         DC32     ?_139

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_26:
   \   00000000   0x........         DC32     ?_140

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_27:
   \   00000000   0x........         DC32     ?_141

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_28:
   \   00000000   0x........         DC32     ?_142

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_29:
   \   00000000   0x........         DC32     ?_143

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_30:
   \   00000000   0x........         DC32     ?_144

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_31:
   \   00000000   0x........         DC32     ?_145

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_32:
   \   00000000   0x........         DC32     ?_146

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_33:
   \   00000000   0x........         DC32     ?_147

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_34:
   \   00000000   0x........         DC32     ?_148

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_35:
   \   00000000   0x........         DC32     ?_149

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_36:
   \   00000000   0x........         DC32     ?_150

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_37:
   \   00000000   0x........         DC32     ?_151

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_38:
   \   00000000   0x........         DC32     ?_152

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_39:
   \   00000000   0x........         DC32     ?_153

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_40:
   \   00000000   0x........         DC32     ?_154

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_41:
   \   00000000   0x........         DC32     ?_155

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_42:
   \   00000000   0x........         DC32     ?_156

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_43:
   \   00000000   0x........         DC32     ?_157

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_44:
   \   00000000   0x........         DC32     ?_158

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_45:
   \   00000000   0x........         DC32     ?_159

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_46:
   \   00000000   0x........         DC32     ?_160

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_47:
   \   00000000   0x........         DC32     ?_161

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_48:
   \   00000000   0x........         DC32     ?_162

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_49:
   \   00000000   0x........         DC32     ?_50

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_50:
   \   00000000   0x........         DC32     ?_51

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_51:
   \   00000000   0x........         DC32     ?_52

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_52:
   \   00000000   0x........         DC32     ?_55

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_53:
   \   00000000   0x........         DC32     ?_25

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_54:
   \   00000000   0x........         DC32     ?_26

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_55:
   \   00000000   0x........         DC32     ?_27

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_56:
   \   00000000   0x........         DC32     ?_28

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_57:
   \   00000000   0x........         DC32     ?_163

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_58:
   \   00000000   0x........         DC32     ?_164

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_59:
   \   00000000   0x........         DC32     ?_165

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_60:
   \   00000000   0x........         DC32     ?_166

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_61:
   \   00000000   0x........         DC32     ?_167

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_62:
   \   00000000   0x........         DC32     ?_168

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_63:
   \   00000000   0x........         DC32     ?_169

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_64:
   \   00000000   0x........         DC32     ?_170

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_65:
   \   00000000   0x41200000         DC32     0x41200000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_66:
   \   00000000   0x........         DC32     ?_171

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_67:
   \   00000000   0x........         DC32     ?_172

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_68:
   \   00000000   0x........         DC32     ?_31

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_69:
   \   00000000   0x........         DC32     ?_173

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_70:
   \   00000000   0x........         DC32     ?_174

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_71:
   \   00000000   0x........         DC32     Bypass

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_72:
   \   00000000   0x........         DC32     ?_175

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_73:
   \   00000000   0x........         DC32     ?_176

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_74:
   \   00000000   0x........         DC32     ?_177

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_75:
   \   00000000   0x........         DC32     ?_178

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_76:
   \   00000000   0x........         DC32     ?_179

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_77:
   \   00000000   0x........         DC32     ?_180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_78:
   \   00000000   0x........         DC32     ?_181

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_79:
   \   00000000   0x........         DC32     ?_182

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_80:
   \   00000000   0x........         DC32     ?_183

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_81:
   \   00000000   0x........         DC32     ?_184

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_82:
   \   00000000   0x........         DC32     ?_185

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x0D 0x0A          DC8 0DH, 0AH, 0DH, 0AH, 20H, 54H, 2EH, 2EH
   \              0x0D 0x0A    
   \              0x20 0x54    
   \              0x2E 0x2E    
   \   00000008   0x2E 0x2E          DC8 2EH, 2EH, 2EH, 2EH, 2EH, 2EH, 54H, 45H
   \              0x2E 0x2E    
   \              0x2E 0x2E    
   \              0x54 0x45    
   \   00000010   0x52 0x4D          DC8 52H, 4DH, 49H, 4EH, 41H, 54H, 49H, 4EH
   \              0x49 0x4E    
   \              0x41 0x54    
   \              0x49 0x4E    
   \   00000018   0x47 0x20          DC8 47H, 20H, 4DH, 4FH, 4EH, 49H, 54H, 4FH
   \              0x4D 0x4F    
   \              0x4E 0x49    
   \              0x54 0x4F    
   \   00000020   0x52 0x20          DC8 52H, 20H, 4DH, 4FH, 44H, 45H, 2EH, 2EH
   \              0x4D 0x4F    
   \              0x44 0x45    
   \              0x2E 0x2E    
   \   00000028   0x2E 0x2E          DC8 2EH, 2EH, 2EH, 2EH, 2EH, 2EH, 2EH, 0DH
   \              0x2E 0x2E    
   \              0x2E 0x2E    
   \              0x2E 0x0D    
   \   00000030   0x0A 0x0D          DC8 0AH, 0DH, 0AH, 3EH, 20H, 0
   \              0x0A 0x3E    
   \              0x20 0x00    
   \   00000036   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x52 0x6F          DC8 52H, 6FH, 61H, 64H, 20H, 53H, 6FH, 75H
   \              0x61 0x64    
   \              0x20 0x53    
   \              0x6F 0x75    
   \   00000008   0x6E 0x64          DC8 6EH, 64H, 3AH, 20H, 52H, 6FH, 61H, 64H
   \              0x3A 0x20    
   \              0x52 0x6F    
   \              0x61 0x64    
   \   00000010   0x20 0x53          DC8 20H, 53H, 6FH, 75H, 6EH, 64H, 20H, 6CH
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x20 0x6C    
   \   00000018   0x6F 0x61          DC8 6FH, 61H, 64H, 65H, 64H, 2CH, 20H, 70H
   \              0x64 0x65    
   \              0x64 0x2C    
   \              0x20 0x70    
   \   00000020   0x72 0x6F          DC8 72H, 6FH, 63H, 65H, 73H, 73H, 65H, 64H
   \              0x63 0x65    
   \              0x73 0x73    
   \              0x65 0x64    
   \   00000028   0x2C 0x20          DC8 2CH, 20H, 61H, 6EH, 64H, 20H, 73H, 65H
   \              0x61 0x6E    
   \              0x64 0x20    
   \              0x73 0x65    
   \   00000030   0x6E 0x74          DC8 6EH, 74H, 20H, 74H, 6FH, 20H, 46H, 46H
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x46 0x46    
   \   00000038   0x54 0x20          DC8 54H, 20H, 42H, 69H, 6EH, 73H, 2EH, 0DH
   \              0x42 0x69    
   \              0x6E 0x73    
   \              0x2E 0x0D    
   \   00000040   0x0A 0x00          DC8 0AH, 0
   \   00000042   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x52 0x6F          DC8 "Road Sound: FFT Measurements 0-15.\015\012"
   \              0x61 0x64    
   \              0x20 0x53    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x3A 0x20    
   \              0x46 0x46    
   \              0x54 0x20    
   \              0x4D 0x65    
   \              0x61 0x73    
   \              0x75 0x72    
   \              0x65 0x6D    
   \              0x65 0x6E    
   \              0x74 0x73    
   \              0x20 0x30    
   \              0x2D 0x31    
   \              0x35 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x20 0x20          DC8 "     FFT Measurements 0-15: "
   \              0x20 0x20    
   \              0x20 0x46    
   \              0x46 0x54    
   \              0x20 0x4D    
   \              0x65 0x61    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x6D 0x65    
   \              0x6E 0x74    
   \              0x73 0x20    
   \              0x30 0x2D    
   \              0x31 0x35    
   \              0x3A 0x20    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \   00000000   0x0D 0x0A          DC8 "\015\012"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_5:
   \   00000000   0x52 0x6F          DC8 "Road Sound: FFT Measurements 16-31.\015\012"
   \              0x61 0x64    
   \              0x20 0x53    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x3A 0x20    
   \              0x46 0x46    
   \              0x54 0x20    
   \              0x4D 0x65    
   \              0x61 0x73    
   \              0x75 0x72    
   \              0x65 0x6D    
   \              0x65 0x6E    
   \              0x74 0x73    
   \              0x20 0x31    
   \              0x36 0x2D    
   \              0x33 0x31    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_6:
   \   00000000   0x20 0x20          DC8 "     FFT Measurements 16-31: "
   \              0x20 0x20    
   \              0x20 0x46    
   \              0x46 0x54    
   \              0x20 0x4D    
   \              0x65 0x61    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x6D 0x65    
   \              0x6E 0x74    
   \              0x73 0x20    
   \              0x31 0x36    
   \              0x2D 0x33    
   \              0x31 0x3A    
   \              0x20 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_7:
   \   00000000   0x52 0x6F          DC8 "Road Sound: FFT Measurements 32-47.\015\012"
   \              0x61 0x64    
   \              0x20 0x53    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x3A 0x20    
   \              0x46 0x46    
   \              0x54 0x20    
   \              0x4D 0x65    
   \              0x61 0x73    
   \              0x75 0x72    
   \              0x65 0x6D    
   \              0x65 0x6E    
   \              0x74 0x73    
   \              0x20 0x33    
   \              0x32 0x2D    
   \              0x34 0x37    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_8:
   \   00000000   0x20 0x20          DC8 "     FFT Measurements 32-47: "
   \              0x20 0x20    
   \              0x20 0x46    
   \              0x46 0x54    
   \              0x20 0x4D    
   \              0x65 0x61    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x6D 0x65    
   \              0x6E 0x74    
   \              0x73 0x20    
   \              0x33 0x32    
   \              0x2D 0x34    
   \              0x37 0x3A    
   \              0x20 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_9:
   \   00000000   0x52 0x6F          DC8 "Road Sound: FFT Measurements 48-63.\015\012"
   \              0x61 0x64    
   \              0x20 0x53    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x3A 0x20    
   \              0x46 0x46    
   \              0x54 0x20    
   \              0x4D 0x65    
   \              0x61 0x73    
   \              0x75 0x72    
   \              0x65 0x6D    
   \              0x65 0x6E    
   \              0x74 0x73    
   \              0x20 0x34    
   \              0x38 0x2D    
   \              0x36 0x33    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_10:
   \   00000000   0x20 0x20          DC8 "     FFT Measurements 48-63: "
   \              0x20 0x20    
   \              0x20 0x46    
   \              0x46 0x54    
   \              0x20 0x4D    
   \              0x65 0x61    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x6D 0x65    
   \              0x6E 0x74    
   \              0x73 0x20    
   \              0x34 0x38    
   \              0x2D 0x36    
   \              0x33 0x3A    
   \              0x20 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_11:
   \   00000000   0x52 0x6F          DC8 "Road Sound: Results of save Buffer.\015\012"
   \              0x61 0x64    
   \              0x20 0x53    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x3A 0x20    
   \              0x52 0x65    
   \              0x73 0x75    
   \              0x6C 0x74    
   \              0x73 0x20    
   \              0x6F 0x66    
   \              0x20 0x73    
   \              0x61 0x76    
   \              0x65 0x20    
   \              0x42 0x75    
   \              0x66 0x66    
   \              0x65 0x72    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 1
   \   00000000   0x00               DC8 ""

   \                                 In section .rodata, align 4
   \                     ?_13:
   \   00000000   0x25 0x30          DC8 "%04d "
   \              0x34 0x64    
   \              0x20 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_14:
   \   00000000   0x20 0x20          DC8 "     ---COMPLETE---"
   \              0x20 0x20    
   \              0x20 0x2D    
   \              0x2D 0x2D    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2D 0x2D    
   \              0x2D 0x00    

   \                                 In section .rodata, align 4
   \                     ?_15:
   \   00000000   0x52 0x6F          DC8 "Road Sound: All buffers cleared.\015\012"
   \              0x61 0x64    
   \              0x20 0x53    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x3A 0x20    
   \              0x41 0x6C    
   \              0x6C 0x20    
   \              0x62 0x75    
   \              0x66 0x66    
   \              0x65 0x72    
   \              0x73 0x20    
   \              0x63 0x6C    
   \              0x65 0x61    
   \              0x72 0x65    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_16:
   \   00000000   0x49 0x6E          DC8 "Initialize Barometer Sensor Passed.\015\012"
   \              0x69 0x74    
   \              0x69 0x61    
   \              0x6C 0x69    
   \              0x7A 0x65    
   \              0x20 0x42    
   \              0x61 0x72    
   \              0x6F 0x6D    
   \              0x65 0x74    
   \              0x65 0x72    
   \              0x20 0x53    
   \              0x65 0x6E    
   \              0x73 0x6F    
   \              0x72 0x20    
   \              0x50 0x61    
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_17:
   \   00000000   0x49 0x6E          DC8 "Initialize Barometer Sensor FAILED.\015\012"
   \              0x69 0x74    
   \              0x69 0x61    
   \              0x6C 0x69    
   \              0x7A 0x65    
   \              0x20 0x42    
   \              0x61 0x72    
   \              0x6F 0x6D    
   \              0x65 0x74    
   \              0x65 0x72    
   \              0x20 0x53    
   \              0x65 0x6E    
   \              0x73 0x6F    
   \              0x72 0x20    
   \              0x46 0x41    
   \              0x49 0x4C    
   \              0x45 0x44    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_18:
   \   00000000   0x41 0x36          DC8 "A6 Command...Read Pressure Passed.\015\012"
   \              0x20 0x43    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x2E    
   \              0x2E 0x52    
   \              0x65 0x61    
   \              0x64 0x20    
   \              0x50 0x72    
   \              0x65 0x73    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x20 0x50    
   \              0x61 0x73    
   \              0x73 0x65    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_19:
   \   00000000   0x20 0x50          DC8 20H, 50H, 52H, 45H, 53H, 53H, 55H, 52H
   \              0x52 0x45    
   \              0x53 0x53    
   \              0x55 0x52    
   \   00000008   0x45 0x28          DC8 45H, 28H, 50H, 52H, 45H, 53H, 53H, 5FH
   \              0x50 0x52    
   \              0x45 0x53    
   \              0x53 0x5F    
   \   00000010   0x4F 0x55          DC8 4FH, 55H, 54H, 5FH, 48H, 2EH, 2EH, 2EH
   \              0x54 0x5F    
   \              0x48 0x2E    
   \              0x2E 0x2E    
   \   00000018   0x50 0x52          DC8 50H, 52H, 45H, 53H, 53H, 5FH, 4FH, 55H
   \              0x45 0x53    
   \              0x53 0x5F    
   \              0x4F 0x55    
   \   00000020   0x54 0x5F          DC8 54H, 5FH, 4CH, 2EH, 2EH, 2EH, 50H, 52H
   \              0x4C 0x2E    
   \              0x2E 0x2E    
   \              0x50 0x52    
   \   00000028   0x45 0x53          DC8 45H, 53H, 53H, 5FH, 4FH, 55H, 54H, 5FH
   \              0x53 0x5F    
   \              0x4F 0x55    
   \              0x54 0x5F    
   \   00000030   0x58 0x4C          DC8 58H, 4CH, 29H, 0DH, 0AH, 0
   \              0x29 0x0D    
   \              0x0A 0x00    
   \   00000036   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_20:
   \   00000000   0x20 0x50          DC8 " PRESSURE: %s/%s\015\012"
   \              0x52 0x45    
   \              0x53 0x53    
   \              0x55 0x52    
   \              0x45 0x3A    
   \              0x20 0x25    
   \              0x73 0x2F    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_21:
   \   00000000   0x20 0x50          DC8 " PRESSURE:  "
   \              0x52 0x45    
   \              0x53 0x53    
   \              0x55 0x52    
   \              0x45 0x3A    
   \              0x20 0x20    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_22:
   \   00000000   0x20 0x20          DC8 "  -  %08x\015\012"
   \              0x2D 0x20    
   \              0x20 0x25    
   \              0x30 0x38    
   \              0x78 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_23:
   \   00000000   0x41 0x36          DC8 "A6 Command...Read Pressure FAILED.\015\012"
   \              0x20 0x43    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x2E    
   \              0x2E 0x52    
   \              0x65 0x61    
   \              0x64 0x20    
   \              0x50 0x72    
   \              0x65 0x73    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x20 0x46    
   \              0x41 0x49    
   \              0x4C 0x45    
   \              0x44 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_24:
   \   00000000   0x41 0x38          DC8 "A8 Command...Read Temperature Passed.\015\012"
   \              0x20 0x43    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x2E    
   \              0x2E 0x52    
   \              0x65 0x61    
   \              0x64 0x20    
   \              0x54 0x65    
   \              0x6D 0x70    
   \              0x65 0x72    
   \              0x61 0x74    
   \              0x75 0x72    
   \              0x65 0x20    
   \              0x50 0x61    
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_25:
   \   00000000   0x20 0x20          DC8 "     TEMP DATA: "
   \              0x20 0x20    
   \              0x20 0x54    
   \              0x45 0x4D    
   \              0x50 0x20    
   \              0x44 0x41    
   \              0x54 0x41    
   \              0x3A 0x20    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_26:
   \   00000000   0x20 0x20          DC8 "     TEMP DATA(Decimal): %d\015\012"
   \              0x20 0x20    
   \              0x20 0x54    
   \              0x45 0x4D    
   \              0x50 0x20    
   \              0x44 0x41    
   \              0x54 0x41    
   \              0x28 0x44    
   \              0x65 0x63    
   \              0x69 0x6D    
   \              0x61 0x6C    
   \              0x29 0x3A    
   \              0x20 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_27:
   \   00000000   0x20 0x20          DC8 "     TempC: "
   \              0x20 0x20    
   \              0x20 0x54    
   \              0x65 0x6D    
   \              0x70 0x43    
   \              0x3A 0x20    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_28:
   \   00000000   0x20 0x20          DC8 "     TempF: "
   \              0x20 0x20    
   \              0x20 0x54    
   \              0x65 0x6D    
   \              0x70 0x46    
   \              0x3A 0x20    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_29:
   \   00000000   0x42 0x61          DC8 "Barometer Sensor: WHO_AM_I Passed.\015\012"
   \              0x72 0x6F    
   \              0x6D 0x65    
   \              0x74 0x65    
   \              0x72 0x20    
   \              0x53 0x65    
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x3A 0x20    
   \              0x57 0x48    
   \              0x4F 0x5F    
   \              0x41 0x4D    
   \              0x5F 0x49    
   \              0x20 0x50    
   \              0x61 0x73    
   \              0x73 0x65    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_30:
   \   00000000   0x42 0x61          DC8 "Barometer Sensor: WHO_AM_I FAILED.\015\012"
   \              0x72 0x6F    
   \              0x6D 0x65    
   \              0x74 0x65    
   \              0x72 0x20    
   \              0x53 0x65    
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x3A 0x20    
   \              0x57 0x48    
   \              0x4F 0x5F    
   \              0x41 0x4D    
   \              0x5F 0x49    
   \              0x20 0x46    
   \              0x41 0x49    
   \              0x4C 0x45    
   \              0x44 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_31:
   \   00000000   0x45 0x52          DC8 "ERROR: Not a legal command.\015\012"
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x61    
   \              0x20 0x6C    
   \              0x65 0x67    
   \              0x61 0x6C    
   \              0x20 0x63    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_32:
   \   00000000   0x56 0x6F          DC8 "Voltage Monitor/Shunt Voltage...\015\012"
   \              0x6C 0x74    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x4D 0x6F    
   \              0x6E 0x69    
   \              0x74 0x6F    
   \              0x72 0x2F    
   \              0x53 0x68    
   \              0x75 0x6E    
   \              0x74 0x20    
   \              0x56 0x6F    
   \              0x6C 0x74    
   \              0x61 0x67    
   \              0x65 0x2E    
   \              0x2E 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_33:
   \   00000000   0x20 0x20          DC8 "     Thermistor DATA: %s   %s/%s   %s/%s   %d\015\012"
   \              0x20 0x20    
   \              0x20 0x54    
   \              0x68 0x65    
   \              0x72 0x6D    
   \              0x69 0x73    
   \              0x74 0x6F    
   \              0x72 0x20    
   \              0x44 0x41    
   \              0x54 0x41    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x20 0x20    
   \              0x20 0x25    
   \              0x73 0x2F    
   \              0x25 0x73    
   \              0x20 0x20    
   \              0x20 0x25    
   \              0x73 0x2F    
   \              0x25 0x73    
   \              0x20 0x20    
   \              0x20 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_34:
   \   00000000   0x20 0x20          DC8 "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\015\012"
   \              0x20 0x20    
   \              0x20 0x47    
   \              0x72 0x69    
   \              0x64 0x20    
   \              0x33 0x33    
   \              0x20 0x44    
   \              0x41 0x54    
   \              0x41 0x3A    
   \              0x20 0x25    
   \              0x73 0x20    
   \              0x20 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x20    
   \              0x20 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x20    
   \              0x20 0x20    
   \              0x25 0x64    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_35:
   \   00000000   0x20 0x20          DC8 "     SHNT VLTG DATA: "
   \              0x20 0x20    
   \              0x20 0x53    
   \              0x48 0x4E    
   \              0x54 0x20    
   \              0x56 0x4C    
   \              0x54 0x47    
   \              0x20 0x44    
   \              0x41 0x54    
   \              0x41 0x3A    
   \              0x20 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_36:
   \   00000000   0x20 0x20          DC8 "     COMPLETE.\015\012"
   \              0x20 0x20    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_37:
   \   00000000   0x43 0x6F          DC8 43H, 6FH, 6FH, 6CH, 20H, 45H, 79H, 65H
   \              0x6F 0x6C    
   \              0x20 0x45    
   \              0x79 0x65    
   \   00000008   0x2F 0x47          DC8 2FH, 47H, 72H, 69H, 64H, 20H, 45H, 79H
   \              0x72 0x69    
   \              0x64 0x20    
   \              0x45 0x79    
   \   00000010   0x65 0x20          DC8 65H, 20H, 53H, 65H, 6EH, 73H, 6FH, 72H
   \              0x53 0x65    
   \              0x6E 0x73    
   \              0x6F 0x72    
   \   00000018   0x3A 0x20          DC8 3AH, 20H, 49H, 6EH, 69H, 74H, 69H, 61H
   \              0x49 0x6E    
   \              0x69 0x74    
   \              0x69 0x61    
   \   00000020   0x6C 0x69          DC8 6CH, 69H, 7AH, 61H, 74H, 69H, 6FH, 6EH
   \              0x7A 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \   00000028   0x20 0x43          DC8 20H, 43H, 6FH, 6DH, 70H, 6CH, 65H, 74H
   \              0x6F 0x6D    
   \              0x70 0x6C    
   \              0x65 0x74    
   \   00000030   0x65 0x2E          DC8 65H, 2EH, 0DH, 0AH, 0
   \              0x0D 0x0A    
   \              0x00         
   \   00000035   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_38:
   \   00000000   0x43 0x6F          DC8 "Cool Eye/Grid Eye Sensor: Reset Complete.\015\012"
   \              0x6F 0x6C    
   \              0x20 0x45    
   \              0x79 0x65    
   \              0x2F 0x47    
   \              0x72 0x69    
   \              0x64 0x20    
   \              0x45 0x79    
   \              0x65 0x20    
   \              0x53 0x65    
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x3A 0x20    
   \              0x52 0x65    
   \              0x73 0x65    
   \              0x74 0x20    
   \              0x43 0x6F    
   \              0x6D 0x70    
   \              0x6C 0x65    
   \              0x74 0x65    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_39:
   \   00000000   0x56 0x6F          DC8 "Voltage Monitor/Read Bus Voltage...\015\012"
   \              0x6C 0x74    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x4D 0x6F    
   \              0x6E 0x69    
   \              0x74 0x6F    
   \              0x72 0x2F    
   \              0x52 0x65    
   \              0x61 0x64    
   \              0x20 0x42    
   \              0x75 0x73    
   \              0x20 0x56    
   \              0x6F 0x6C    
   \              0x74 0x61    
   \              0x67 0x65    
   \              0x2E 0x2E    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_40:
   \   00000000   0x20 0x20          DC8 "     BUS VOLTAGE DATA: "
   \              0x20 0x20    
   \              0x20 0x42    
   \              0x55 0x53    
   \              0x20 0x56    
   \              0x4F 0x4C    
   \              0x54 0x41    
   \              0x47 0x45    
   \              0x20 0x44    
   \              0x41 0x54    
   \              0x41 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_41:
   \   00000000   0x20 0x20          DC8 "     Bus Voltage: %s/%s\015\012"
   \              0x20 0x20    
   \              0x20 0x42    
   \              0x75 0x73    
   \              0x20 0x56    
   \              0x6F 0x6C    
   \              0x74 0x61    
   \              0x67 0x65    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x0D    
   \              0x0A 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_42:
   \   00000000   0x56 0x6F          DC8 "Voltage Monitor: Initialization Complete.\015\012"
   \              0x6C 0x74    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x4D 0x6F    
   \              0x6E 0x69    
   \              0x74 0x6F    
   \              0x72 0x3A    
   \              0x20 0x49    
   \              0x6E 0x69    
   \              0x74 0x69    
   \              0x61 0x6C    
   \              0x69 0x7A    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x43 0x6F    
   \              0x6D 0x70    
   \              0x6C 0x65    
   \              0x74 0x65    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_43:
   \   00000000   0x20 0x20          DC8 "     Shunt Voltage: %s/%s\015\012"
   \              0x20 0x20    
   \              0x20 0x53    
   \              0x68 0x75    
   \              0x6E 0x74    
   \              0x20 0x56    
   \              0x6F 0x6C    
   \              0x74 0x61    
   \              0x67 0x65    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_44:
   \   00000000   0x56 0x6F          DC8 "Voltage Monitor/Read Current...\015\012"
   \              0x6C 0x74    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x4D 0x6F    
   \              0x6E 0x69    
   \              0x74 0x6F    
   \              0x72 0x2F    
   \              0x52 0x65    
   \              0x61 0x64    
   \              0x20 0x43    
   \              0x75 0x72    
   \              0x72 0x65    
   \              0x6E 0x74    
   \              0x2E 0x2E    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_45:
   \   00000000   0x20 0x20          DC8 "     CURRENT DATA: "
   \              0x20 0x20    
   \              0x20 0x43    
   \              0x55 0x52    
   \              0x52 0x45    
   \              0x4E 0x54    
   \              0x20 0x44    
   \              0x41 0x54    
   \              0x41 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_46:
   \   00000000   0x20 0x20          DC8 "     Current: %s/%s\015\012"
   \              0x20 0x20    
   \              0x20 0x43    
   \              0x75 0x72    
   \              0x72 0x65    
   \              0x6E 0x74    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x0D    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_47:
   \   00000000   0x56 0x6F          DC8 "Voltage Monitor/Read Power...\015\012"
   \              0x6C 0x74    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x4D 0x6F    
   \              0x6E 0x69    
   \              0x74 0x6F    
   \              0x72 0x2F    
   \              0x52 0x65    
   \              0x61 0x64    
   \              0x20 0x50    
   \              0x6F 0x77    
   \              0x65 0x72    
   \              0x2E 0x2E    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_48:
   \   00000000   0x20 0x20          DC8 "     POWER DATA: "
   \              0x20 0x20    
   \              0x20 0x50    
   \              0x4F 0x57    
   \              0x45 0x52    
   \              0x20 0x44    
   \              0x41 0x54    
   \              0x41 0x3A    
   \              0x20 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_49:
   \   00000000   0x20 0x20          DC8 "     Power: %s/%s\015\012"
   \              0x20 0x20    
   \              0x20 0x50    
   \              0x6F 0x77    
   \              0x65 0x72    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_50:
   \   00000000   0x48 0x75          DC8 "Humidity SENSOR...\015\012"
   \              0x6D 0x69    
   \              0x64 0x69    
   \              0x74 0x79    
   \              0x20 0x53    
   \              0x45 0x4E    
   \              0x53 0x4F    
   \              0x52 0x2E    
   \              0x2E 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_51:
   \   00000000   0x20 0x20          DC8 "     Humidity DATA: "
   \              0x20 0x20    
   \              0x20 0x48    
   \              0x75 0x6D    
   \              0x69 0x64    
   \              0x69 0x74    
   \              0x79 0x20    
   \              0x44 0x41    
   \              0x54 0x41    
   \              0x3A 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_52:
   \   00000000   0x20 0x20          DC8 "     Humidity DATA(Decimal): %d\015\012"
   \              0x20 0x20    
   \              0x20 0x48    
   \              0x75 0x6D    
   \              0x69 0x64    
   \              0x69 0x74    
   \              0x79 0x20    
   \              0x44 0x41    
   \              0x54 0x41    
   \              0x28 0x44    
   \              0x65 0x63    
   \              0x69 0x6D    
   \              0x61 0x6C    
   \              0x29 0x3A    
   \              0x20 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_53:
   \   00000000   0x20 0x20          DC8 "     Humidity: %s/%s\015\012"
   \              0x20 0x20    
   \              0x20 0x48    
   \              0x75 0x6D    
   \              0x69 0x64    
   \              0x69 0x74    
   \              0x79 0x3A    
   \              0x20 0x25    
   \              0x73 0x2F    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_54:
   \   00000000   0x48 0x75          DC8 "Humidity Sensor: Initialization Complete.\015\012"
   \              0x6D 0x69    
   \              0x64 0x69    
   \              0x74 0x79    
   \              0x20 0x53    
   \              0x65 0x6E    
   \              0x73 0x6F    
   \              0x72 0x3A    
   \              0x20 0x49    
   \              0x6E 0x69    
   \              0x74 0x69    
   \              0x61 0x6C    
   \              0x69 0x7A    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x43 0x6F    
   \              0x6D 0x70    
   \              0x6C 0x65    
   \              0x74 0x65    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_55:
   \   00000000   0x20 0x20          DC8 "     Humidity: "
   \              0x20 0x20    
   \              0x20 0x48    
   \              0x75 0x6D    
   \              0x69 0x64    
   \              0x69 0x74    
   \              0x79 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_56:
   \   00000000   0x54 0x42          DC8 "TBD: Read Temp and Pressure NOT IMPLEMENTED\015\012"
   \              0x44 0x3A    
   \              0x20 0x52    
   \              0x65 0x61    
   \              0x64 0x20    
   \              0x54 0x65    
   \              0x6D 0x70    
   \              0x20 0x61    
   \              0x6E 0x64    
   \              0x20 0x50    
   \              0x72 0x65    
   \              0x73 0x73    
   \              0x75 0x72    
   \              0x65 0x20    
   \              0x4E 0x4F    
   \              0x54 0x20    
   \              0x49 0x4D    
   \              0x50 0x4C    
   \              0x45 0x4D    
   \              0x45 0x4E    
   \              0x54 0x45    
   \              0x44 0x0D    
   \              0x0A 0x00    
   \   0000002E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_57:
   \   00000000   0x4E 0x4F          DC8 "NO Action...(0x00).\015\012"
   \              0x20 0x41    
   \              0x63 0x74    
   \              0x69 0x6F    
   \              0x6E 0x2E    
   \              0x2E 0x2E    
   \              0x28 0x30    
   \              0x78 0x30    
   \              0x30 0x29    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_58:
   \   00000000   0x54 0x45          DC8 "TEMP SENSOR...\015\012"
   \              0x4D 0x50    
   \              0x20 0x53    
   \              0x45 0x4E    
   \              0x53 0x4F    
   \              0x52 0x2E    
   \              0x2E 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_59:
   \   00000000   0x20 0x20          DC8 "     TempC: %s/%s     TempF: %s/%s\015\012"
   \              0x20 0x20    
   \              0x20 0x54    
   \              0x65 0x6D    
   \              0x70 0x43    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x54 0x65    
   \              0x6D 0x70    
   \              0x46 0x3A    
   \              0x20 0x25    
   \              0x73 0x2F    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_60:
   \   00000000   0x52 0x47          DC8 "RGB Color Light Sensor...\015\012"
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \              0x72 0x20    
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \              0x53 0x65    
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x2E 0x2E    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_61:
   \   00000000   0x20 0x52          DC8 20H, 52H, 47H, 42H, 28H, 52H, 45H, 44H
   \              0x47 0x42    
   \              0x28 0x52    
   \              0x45 0x44    
   \   00000008   0x6D 0x73          DC8 6DH, 73H, 62H, 2CH, 52H, 45H, 44H, 6CH
   \              0x62 0x2C    
   \              0x52 0x45    
   \              0x44 0x6C    
   \   00000010   0x73 0x62          DC8 73H, 62H, 2CH, 47H, 52H, 45H, 45H, 4EH
   \              0x2C 0x47    
   \              0x52 0x45    
   \              0x45 0x4E    
   \   00000018   0x6D 0x73          DC8 6DH, 73H, 62H, 2CH, 47H, 52H, 45H, 45H
   \              0x62 0x2C    
   \              0x47 0x52    
   \              0x45 0x45    
   \   00000020   0x4E 0x6C          DC8 4EH, 6CH, 73H, 62H, 2CH, 42H, 4CH, 55H
   \              0x73 0x62    
   \              0x2C 0x42    
   \              0x4C 0x55    
   \   00000028   0x45 0x6D          DC8 45H, 6DH, 73H, 62H, 2CH, 42H, 4CH, 55H
   \              0x73 0x62    
   \              0x2C 0x42    
   \              0x4C 0x55    
   \   00000030   0x45 0x6C          DC8 45H, 6CH, 73H, 62H, 29H, 0DH, 0AH, 0
   \              0x73 0x62    
   \              0x29 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_62:
   \   00000000   0x20 0x20          DC8 "       DATA: "
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x44    
   \              0x41 0x54    
   \              0x41 0x3A    
   \              0x20 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_63:
   \   00000000   0x20 0x20          DC8 "    Red: "
   \              0x20 0x20    
   \              0x52 0x65    
   \              0x64 0x3A    
   \              0x20 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_64:
   \   00000000   0x20 0x20          DC8 "    Green: "
   \              0x20 0x20    
   \              0x47 0x72    
   \              0x65 0x65    
   \              0x6E 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_65:
   \   00000000   0x20 0x20          DC8 "    Blue: "
   \              0x20 0x20    
   \              0x42 0x6C    
   \              0x75 0x65    
   \              0x3A 0x20    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_66:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 3AH, 20H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x3A 0x20    
   \   00000018   0x49 0x6E          DC8 49H, 6EH, 69H, 74H, 69H, 61H, 6CH, 69H
   \              0x69 0x74    
   \              0x69 0x61    
   \              0x6C 0x69    
   \   00000020   0x7A 0x61          DC8 7AH, 61H, 74H, 69H, 6FH, 6EH, 20H, 43H
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x43    
   \   00000028   0x6F 0x6D          DC8 6FH, 6DH, 70H, 6CH, 65H, 74H, 65H, 20H
   \              0x70 0x6C    
   \              0x65 0x74    
   \              0x65 0x20    
   \   00000030   0x77 0x69          DC8 77H, 69H, 74H, 68H, 20H, 44H, 45H, 46H
   \              0x74 0x68    
   \              0x20 0x44    
   \              0x45 0x46    
   \   00000038   0x41 0x55          DC8 41H, 55H, 4CH, 54H, 20H, 56H, 61H, 6CH
   \              0x4C 0x54    
   \              0x20 0x56    
   \              0x61 0x6C    
   \   00000040   0x75 0x65          DC8 75H, 65H, 73H, 2EH, 0DH, 0AH, 0
   \              0x73 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000047   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_67:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 3AH, 20H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x3A 0x20    
   \   00000018   0x53 0x59          DC8 53H, 59H, 4EH, 54H, 41H, 58H, 20H, 45H
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \   00000020   0x72 0x72          DC8 72H, 72H, 6FH, 72H, 2EH, 20H, 50H, 61H
   \              0x6F 0x72    
   \              0x2E 0x20    
   \              0x50 0x61    
   \   00000028   0x72 0x61          DC8 72H, 61H, 6DH, 65H, 74H, 65H, 72H, 73H
   \              0x6D 0x65    
   \              0x74 0x65    
   \              0x72 0x73    
   \   00000030   0x20 0x61          DC8 20H, 61H, 72H, 65H, 20H, 6EH, 6FH, 74H
   \              0x72 0x65    
   \              0x20 0x6E    
   \              0x6F 0x74    
   \   00000038   0x20 0x63          DC8 20H, 63H, 6FH, 72H, 72H, 65H, 63H, 74H
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \   00000040   0x2E 0x0D          DC8 2EH, 0DH, 0AH, 0
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_68:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 4EH, 6FH, 74H
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \   00000028   0x20 0x63          DC8 20H, 63H, 6FH, 72H, 72H, 65H, 63H, 74H
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \   00000030   0x20 0x66          DC8 20H, 66H, 6FH, 72H, 6DH, 61H, 74H, 2EH
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \   00000038   0x20 0x50          DC8 20H, 50H, 75H, 6EH, 63H, 74H, 75H, 61H
   \              0x75 0x6E    
   \              0x63 0x74    
   \              0x75 0x61    
   \   00000040   0x74 0x69          DC8 74H, 69H, 6FH, 6EH, 21H, 0DH, 0AH, 0
   \              0x6F 0x6E    
   \              0x21 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_69:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 50H, 61H, 72H, 61H
   \              0x52 0x3A    
   \              0x50 0x61    
   \              0x72 0x61    
   \   00000028   0x6D 0x65          DC8 6DH, 65H, 74H, 65H, 72H, 73H, 20H, 6EH
   \              0x74 0x65    
   \              0x72 0x73    
   \              0x20 0x6E    
   \   00000030   0x6F 0x74          DC8 6FH, 74H, 20H, 48H, 45H, 58H, 20H, 56H
   \              0x20 0x48    
   \              0x45 0x58    
   \              0x20 0x56    
   \   00000038   0x61 0x6C          DC8 61H, 6CH, 75H, 65H, 2EH, 0DH, 0AH, 0
   \              0x75 0x65    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_70:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x4F 0x50          DC8 4FH, 50H, 5FH, 4DH, 4FH, 44H, 45H, 2EH
   \              0x5F 0x4D    
   \              0x4F 0x44    
   \              0x45 0x2E    
   \   00000038   0x0D 0x0A          DC8 0DH, 0AH, 0
   \              0x00         
   \   0000003B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_71:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x44 0x53          DC8 44H, 53H, 5FH, 52H, 41H, 4EH, 47H, 45H
   \              0x5F 0x52    
   \              0x41 0x4E    
   \              0x47 0x45    
   \   00000038   0x2E 0x0D          DC8 2EH, 0DH, 0AH, 0
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_72:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x41 0x44          DC8 41H, 44H, 43H, 5FH, 52H, 53H, 4CH, 2EH
   \              0x43 0x5F    
   \              0x52 0x53    
   \              0x4C 0x2E    
   \   00000038   0x0D 0x0A          DC8 0DH, 0AH, 0
   \              0x00         
   \   0000003B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_73:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x53 0x59          DC8 53H, 59H, 4EH, 43H, 2EH, 0DH, 0AH, 0
   \              0x4E 0x43    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_74:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x43 0x4D          DC8 43H, 4DH, 50H, 5FH, 41H, 44H, 4AH, 53H
   \              0x50 0x5F    
   \              0x41 0x44    
   \              0x4A 0x53    
   \   00000038   0x54 0x2E          DC8 54H, 2EH, 0DH, 0AH, 0
   \              0x0D 0x0A    
   \              0x00         
   \   0000003D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_75:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x43 0x4D          DC8 43H, 4DH, 50H, 5FH, 4FH, 46H, 46H, 53H
   \              0x50 0x5F    
   \              0x4F 0x46    
   \              0x46 0x53    
   \   00000038   0x54 0x2E          DC8 54H, 2EH, 0DH, 0AH, 0
   \              0x0D 0x0A    
   \              0x00         
   \   0000003D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_76:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x49 0x4E          DC8 49H, 4EH, 54H, 5FH, 41H, 53H, 53H, 47H
   \              0x54 0x5F    
   \              0x41 0x53    
   \              0x53 0x47    
   \   00000038   0x4E 0x2E          DC8 4EH, 2EH, 0DH, 0AH, 0
   \              0x0D 0x0A    
   \              0x00         
   \   0000003D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_77:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x49 0x4E          DC8 49H, 4EH, 54H, 5FH, 50H, 45H, 52H, 53H
   \              0x54 0x5F    
   \              0x50 0x45    
   \              0x52 0x53    
   \   00000038   0x49 0x53          DC8 49H, 53H, 54H, 2EH, 0DH, 0AH, 0
   \              0x54 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000003F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_78:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x43 0x4E          DC8 43H, 4EH, 56H, 52H, 53H, 4EH, 5FH, 49H
   \              0x56 0x52    
   \              0x53 0x4E    
   \              0x5F 0x49    
   \   00000038   0x4E 0x54          DC8 4EH, 54H, 2EH, 0DH, 0AH, 0
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   0000003E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_79:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 3AH, 20H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x3A 0x20    
   \   00000018   0x49 0x6E          DC8 49H, 6EH, 69H, 74H, 69H, 61H, 6CH, 69H
   \              0x69 0x74    
   \              0x69 0x61    
   \              0x6C 0x69    
   \   00000020   0x7A 0x61          DC8 7AH, 61H, 74H, 69H, 6FH, 6EH, 20H, 43H
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x43    
   \   00000028   0x6F 0x6D          DC8 6FH, 6DH, 70H, 6CH, 65H, 74H, 65H, 20H
   \              0x70 0x6C    
   \              0x65 0x74    
   \              0x65 0x20    
   \   00000030   0x77 0x69          DC8 77H, 69H, 74H, 68H, 20H, 55H, 53H, 45H
   \              0x74 0x68    
   \              0x20 0x55    
   \              0x53 0x45    
   \   00000038   0x52 0x20          DC8 52H, 20H, 56H, 61H, 6CH, 75H, 65H, 73H
   \              0x56 0x61    
   \              0x6C 0x75    
   \              0x65 0x73    
   \   00000040   0x2E 0x0D          DC8 2EH, 0DH, 0AH, 0
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_80:
   \   00000000   0x52 0x47          DC8 "RGB Color Light Sensor Status: "
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \              0x72 0x20    
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \              0x53 0x65    
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \              0x74 0x61    
   \              0x74 0x75    
   \              0x73 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_81:
   \   00000000   0x25 0x30          DC8 "%02x / "
   \              0x32 0x78    
   \              0x20 0x2F    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_82:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 3AH, 20H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x3A 0x20    
   \   00000018   0x52 0x45          DC8 52H, 45H, 53H, 45H, 54H, 20H, 43H, 4DH
   \              0x53 0x45    
   \              0x54 0x20    
   \              0x43 0x4D    
   \   00000020   0x44 0x20          DC8 44H, 20H, 53H, 65H, 6EH, 74H, 20H, 53H
   \              0x53 0x65    
   \              0x6E 0x74    
   \              0x20 0x53    
   \   00000028   0x75 0x63          DC8 75H, 63H, 63H, 65H, 73H, 66H, 75H, 6CH
   \              0x63 0x65    
   \              0x73 0x66    
   \              0x75 0x6C    
   \   00000030   0x2E 0x0D          DC8 2EH, 0DH, 0AH, 0
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_83:
   \   00000000   0x52 0x47          DC8 "RGB Color Light Sensor ID Code: "
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \              0x72 0x20    
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \              0x53 0x65    
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x49    
   \              0x44 0x20    
   \              0x43 0x6F    
   \              0x64 0x65    
   \              0x3A 0x20    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_84:
   \   00000000   0x35 0x56          DC8 "5V Power Plane Powered UP.\015\012"
   \              0x20 0x50    
   \              0x6F 0x77    
   \              0x65 0x72    
   \              0x20 0x50    
   \              0x6C 0x61    
   \              0x6E 0x65    
   \              0x20 0x50    
   \              0x6F 0x77    
   \              0x65 0x72    
   \              0x65 0x64    
   \              0x20 0x55    
   \              0x50 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_85:
   \   00000000   0x35 0x56          DC8 "5V Power Plane Powered DOWN.\015\012"
   \              0x20 0x50    
   \              0x6F 0x77    
   \              0x65 0x72    
   \              0x20 0x50    
   \              0x6C 0x61    
   \              0x6E 0x65    
   \              0x20 0x50    
   \              0x6F 0x77    
   \              0x65 0x72    
   \              0x65 0x64    
   \              0x20 0x44    
   \              0x4F 0x57    
   \              0x4E 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_86:
   \   00000000   0x45 0x52          DC8 "ERROR: Illegal 5V Power Plane Command.\015\012"
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x49    
   \              0x6C 0x6C    
   \              0x65 0x67    
   \              0x61 0x6C    
   \              0x20 0x35    
   \              0x56 0x20    
   \              0x50 0x6F    
   \              0x77 0x65    
   \              0x72 0x20    
   \              0x50 0x6C    
   \              0x61 0x6E    
   \              0x65 0x20    
   \              0x43 0x6F    
   \              0x6D 0x6D    
   \              0x61 0x6E    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_87:
   \   00000000   0x54 0x20          DC8 "T ERROR: Not a legal command.\015\012"
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x61    
   \              0x20 0x6C    
   \              0x65 0x67    
   \              0x61 0x6C    
   \              0x20 0x63    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_88:
   \   00000000   0x54 0x49          DC8 "TI SYNTAX ERROR: Not correct format.\015\012"
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x63    
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_89:
   \   00000000   0x54 0x49          DC8 "TIS SYNTAX ERROR: Not correct format.\015\012"
   \              0x53 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x4E 0x6F    
   \              0x74 0x20    
   \              0x63 0x6F    
   \              0x72 0x72    
   \              0x65 0x63    
   \              0x74 0x20    
   \              0x66 0x6F    
   \              0x72 0x6D    
   \              0x61 0x74    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_90:
   \   00000000   0x54 0x49          DC8 "TIS SYNTAX ERROR: Address not HEX Value.\015\012"
   \              0x53 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x41 0x64    
   \              0x64 0x72    
   \              0x65 0x73    
   \              0x73 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x48 0x45    
   \              0x58 0x20    
   \              0x56 0x61    
   \              0x6C 0x75    
   \              0x65 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_91:
   \   00000000   0x54 0x49          DC8 54H, 49H, 53H, 20H, 53H, 59H, 4EH, 54H
   \              0x53 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \   00000008   0x41 0x58          DC8 41H, 58H, 20H, 45H, 52H, 52H, 4FH, 52H
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \   00000010   0x3A 0x20          DC8 3AH, 20H, 4EH, 75H, 6DH, 62H, 65H, 72H
   \              0x4E 0x75    
   \              0x6D 0x62    
   \              0x65 0x72    
   \   00000018   0x20 0x6F          DC8 20H, 6FH, 66H, 20H, 42H, 79H, 74H, 65H
   \              0x66 0x20    
   \              0x42 0x79    
   \              0x74 0x65    
   \   00000020   0x73 0x20          DC8 73H, 20H, 6EH, 6FH, 74H, 20H, 48H, 45H
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x48 0x45    
   \   00000028   0x58 0x20          DC8 58H, 20H, 56H, 61H, 6CH, 75H, 65H, 2EH
   \              0x56 0x61    
   \              0x6C 0x75    
   \              0x65 0x2E    
   \   00000030   0x0D 0x0A          DC8 0DH, 0AH, 0
   \              0x00         
   \   00000033   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_92:
   \   00000000   0x54 0x49          DC8 "TIS: GOOD CMD: %x.\015\012"
   \              0x53 0x3A    
   \              0x20 0x47    
   \              0x4F 0x4F    
   \              0x44 0x20    
   \              0x43 0x4D    
   \              0x44 0x3A    
   \              0x20 0x25    
   \              0x78 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_93:
   \   00000000   0x54 0x49          DC8 "TIS: GOOD CMD: %x."
   \              0x53 0x3A    
   \              0x20 0x47    
   \              0x4F 0x4F    
   \              0x44 0x20    
   \              0x43 0x4D    
   \              0x44 0x3A    
   \              0x20 0x25    
   \              0x78 0x2E    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \   00000000   0x25 0x78          DC8 "%x."
   \              0x2E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_95:
   \   00000000   0x54 0x49          DC8 "TIR SYNTAX ERROR: Not correct format.\015\012"
   \              0x52 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x4E 0x6F    
   \              0x74 0x20    
   \              0x63 0x6F    
   \              0x72 0x72    
   \              0x65 0x63    
   \              0x74 0x20    
   \              0x66 0x6F    
   \              0x72 0x6D    
   \              0x61 0x74    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_96:
   \   00000000   0x54 0x49          DC8 "TIR SYNTAX ERROR: Address not HEX Value.\015\012"
   \              0x52 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x41 0x64    
   \              0x64 0x72    
   \              0x65 0x73    
   \              0x73 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x48 0x45    
   \              0x58 0x20    
   \              0x56 0x61    
   \              0x6C 0x75    
   \              0x65 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_97:
   \   00000000   0x54 0x49          DC8 54H, 49H, 52H, 20H, 53H, 59H, 4EH, 54H
   \              0x52 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \   00000008   0x41 0x58          DC8 41H, 58H, 20H, 45H, 52H, 52H, 4FH, 52H
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \   00000010   0x3A 0x20          DC8 3AH, 20H, 4EH, 75H, 6DH, 62H, 65H, 72H
   \              0x4E 0x75    
   \              0x6D 0x62    
   \              0x65 0x72    
   \   00000018   0x20 0x6F          DC8 20H, 6FH, 66H, 20H, 42H, 79H, 74H, 65H
   \              0x66 0x20    
   \              0x42 0x79    
   \              0x74 0x65    
   \   00000020   0x73 0x20          DC8 73H, 20H, 6EH, 6FH, 74H, 20H, 48H, 45H
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x48 0x45    
   \   00000028   0x58 0x20          DC8 58H, 20H, 56H, 61H, 6CH, 75H, 65H, 2EH
   \              0x56 0x61    
   \              0x6C 0x75    
   \              0x65 0x2E    
   \   00000030   0x0D 0x0A          DC8 0DH, 0AH, 0
   \              0x00         
   \   00000033   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_98:
   \   00000000   0x54 0x49          DC8 54H, 49H, 52H, 20H, 53H, 59H, 4EH, 54H
   \              0x52 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \   00000008   0x41 0x58          DC8 41H, 58H, 20H, 45H, 52H, 52H, 4FH, 52H
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \   00000010   0x3A 0x20          DC8 3AH, 20H, 4EH, 75H, 6DH, 62H, 65H, 72H
   \              0x4E 0x75    
   \              0x6D 0x62    
   \              0x65 0x72    
   \   00000018   0x20 0x6F          DC8 20H, 6FH, 66H, 20H, 42H, 79H, 74H, 65H
   \              0x66 0x20    
   \              0x42 0x79    
   \              0x74 0x65    
   \   00000020   0x73 0x20          DC8 73H, 20H, 52H, 45H, 43H, 45H, 49H, 56H
   \              0x52 0x45    
   \              0x43 0x45    
   \              0x49 0x56    
   \   00000028   0x45 0x44          DC8 45H, 44H, 20H, 6EH, 6FH, 74H, 20H, 48H
   \              0x20 0x6E    
   \              0x6F 0x74    
   \              0x20 0x48    
   \   00000030   0x45 0x58          DC8 45H, 58H, 20H, 56H, 61H, 6CH, 75H, 65H
   \              0x20 0x56    
   \              0x61 0x6C    
   \              0x75 0x65    
   \   00000038   0x2E 0x0D          DC8 2EH, 0DH, 0AH, 0
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_99:
   \   00000000   0x54 0x49          DC8 "TIR: GOOD CMD: %x.\015\012"
   \              0x52 0x3A    
   \              0x20 0x47    
   \              0x4F 0x4F    
   \              0x44 0x20    
   \              0x43 0x4D    
   \              0x44 0x3A    
   \              0x20 0x25    
   \              0x78 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_100:
   \   00000000   0x54 0x49          DC8 "TIR SYNTAX ERROR: Data not HEX Value.\015\012"
   \              0x52 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x44 0x61    
   \              0x74 0x61    
   \              0x20 0x6E    
   \              0x6F 0x74    
   \              0x20 0x48    
   \              0x45 0x58    
   \              0x20 0x56    
   \              0x61 0x6C    
   \              0x75 0x65    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_101:
   \   00000000   0x54 0x49          DC8 "TIR: GOOD CMD: %x."
   \              0x52 0x3A    
   \              0x20 0x47    
   \              0x4F 0x4F    
   \              0x44 0x20    
   \              0x43 0x4D    
   \              0x44 0x3A    
   \              0x20 0x25    
   \              0x78 0x2E    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_102:
   \   00000000   0x20 0x20          DC8 "     DATA: "
   \              0x20 0x20    
   \              0x20 0x44    
   \              0x41 0x54    
   \              0x41 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_103:
   \   00000000   0x54 0x49          DC8 "TIQ SYNTAX ERROR: Not correct format.\015\012"
   \              0x51 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x4E 0x6F    
   \              0x74 0x20    
   \              0x63 0x6F    
   \              0x72 0x72    
   \              0x65 0x63    
   \              0x74 0x20    
   \              0x66 0x6F    
   \              0x72 0x6D    
   \              0x61 0x74    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_104:
   \   00000000   0x54 0x49          DC8 "TIQ SYNTAX ERROR: Address not HEX Value.\015\012"
   \              0x51 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x41 0x64    
   \              0x64 0x72    
   \              0x65 0x73    
   \              0x73 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x48 0x45    
   \              0x58 0x20    
   \              0x56 0x61    
   \              0x6C 0x75    
   \              0x65 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_105:
   \   00000000   0x54 0x49          DC8 54H, 49H, 51H, 20H, 53H, 59H, 4EH, 54H
   \              0x51 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \   00000008   0x41 0x58          DC8 41H, 58H, 20H, 45H, 52H, 52H, 4FH, 52H
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \   00000010   0x3A 0x20          DC8 3AH, 20H, 4EH, 75H, 6DH, 62H, 65H, 72H
   \              0x4E 0x75    
   \              0x6D 0x62    
   \              0x65 0x72    
   \   00000018   0x20 0x6F          DC8 20H, 6FH, 66H, 20H, 42H, 79H, 74H, 65H
   \              0x66 0x20    
   \              0x42 0x79    
   \              0x74 0x65    
   \   00000020   0x73 0x20          DC8 73H, 20H, 6EH, 6FH, 74H, 20H, 48H, 45H
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x48 0x45    
   \   00000028   0x58 0x20          DC8 58H, 20H, 56H, 61H, 6CH, 75H, 65H, 2EH
   \              0x56 0x61    
   \              0x6C 0x75    
   \              0x65 0x2E    
   \   00000030   0x0D 0x0A          DC8 0DH, 0AH, 0
   \              0x00         
   \   00000033   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_106:
   \   00000000   0x25 0x73          DC8 "%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\015\012"
   \              0x2C 0x25    
   \              0x73 0x2C    
   \              0x25 0x73    
   \              0x2C 0x25    
   \              0x73 0x2C    
   \              0x25 0x73    
   \              0x2C 0x25    
   \              0x73 0x2C    
   \              0x25 0x73    
   \              0x2C 0x25    
   \              0x73 0x2C    
   \              0x25 0x73    
   \              0x2C 0x25    
   \              0x73 0x2C    
   \              0x25 0x73    
   \              0x2C 0x25    
   \              0x73 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_107:
   \   00000000   0x43 0x4F          DC8 "COMPLETE"
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_108:
   \   00000000   0x50 0x72          DC8 "Pressure TASKING ERROR!"
   \              0x65 0x73    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x20 0x54    
   \              0x41 0x53    
   \              0x4B 0x49    
   \              0x4E 0x47    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x21 0x00    

   \                                 In section .rodata, align 4
   \                     ?_109:
   \   00000000   0x48 0x75          DC8 "Humidity TASKING ERROR!"
   \              0x6D 0x69    
   \              0x64 0x69    
   \              0x74 0x79    
   \              0x20 0x54    
   \              0x41 0x53    
   \              0x4B 0x49    
   \              0x4E 0x47    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x21 0x00    

   \                                 In section .rodata, align 4
   \                     ?_110:
   \   00000000   0x41 0x4D          DC8 "AMBIENT TEMPERATURE TASKING ERROR!"
   \              0x42 0x49    
   \              0x45 0x4E    
   \              0x54 0x20    
   \              0x54 0x45    
   \              0x4D 0x50    
   \              0x45 0x52    
   \              0x41 0x54    
   \              0x55 0x52    
   \              0x45 0x20    
   \              0x54 0x41    
   \              0x53 0x4B    
   \              0x49 0x4E    
   \              0x47 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x21    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_111:
   \   00000000   0x47 0x52          DC8 "GRID EYE/COOL EYE TASKING ERROR!"
   \              0x49 0x44    
   \              0x20 0x45    
   \              0x59 0x45    
   \              0x2F 0x43    
   \              0x4F 0x4F    
   \              0x4C 0x20    
   \              0x45 0x59    
   \              0x45 0x20    
   \              0x54 0x41    
   \              0x53 0x4B    
   \              0x49 0x4E    
   \              0x47 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x21    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_112:
   \   00000000   0x54 0x43          DC8 "TCS SYNTAX ERROR: Not correct format.\015\012"
   \              0x53 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x4E 0x6F    
   \              0x74 0x20    
   \              0x63 0x6F    
   \              0x72 0x72    
   \              0x65 0x63    
   \              0x74 0x20    
   \              0x66 0x6F    
   \              0x72 0x6D    
   \              0x61 0x74    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_113:
   \   00000000   0x54 0x43          DC8 "TCS SYNTAX ERROR: Bad Parameter.\015\012"
   \              0x53 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x42 0x61    
   \              0x64 0x20    
   \              0x50 0x61    
   \              0x72 0x61    
   \              0x6D 0x65    
   \              0x74 0x65    
   \              0x72 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_114:
   \   00000000   0x25 0x73          DC8 "%s %f %f"
   \              0x20 0x25    
   \              0x66 0x20    
   \              0x25 0x66    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_115:
   \   00000000   0x50 0x61          DC8 "Parms: %s, %f, %f.\015\012"
   \              0x72 0x6D    
   \              0x73 0x3A    
   \              0x20 0x25    
   \              0x73 0x2C    
   \              0x20 0x25    
   \              0x66 0x2C    
   \              0x20 0x25    
   \              0x66 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_116:
   \   00000000   0x30 0x30          DC8 "0002"
   \              0x30 0x32    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_117:
   \   00000000   0x53 0x68          DC8 "Shnt_Vltg Set COMPLETE.\015\012"
   \              0x6E 0x74    
   \              0x5F 0x56    
   \              0x6C 0x74    
   \              0x67 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_118:
   \   00000000   0x54 0x43          DC8 "TCS SET ERROR: FAILED.\015\012"
   \              0x53 0x20    
   \              0x53 0x45    
   \              0x54 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x46    
   \              0x41 0x49    
   \              0x4C 0x45    
   \              0x44 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_119:
   \   00000000   0x30 0x30          DC8 "0004"
   \              0x30 0x34    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_120:
   \   00000000   0x43 0x75          DC8 "Current Set COMPLETE."
   \              0x72 0x72    
   \              0x65 0x6E    
   \              0x74 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_121:
   \   00000000   0x30 0x30          DC8 "0006"
   \              0x30 0x36    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_122:
   \   00000000   0x50 0x6F          DC8 "Power Set COMPLETE."
   \              0x77 0x65    
   \              0x72 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_123:
   \   00000000   0x30 0x30          DC8 "0008"
   \              0x30 0x38    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_124:
   \   00000000   0x56 0x6F          DC8 "Voltage Set COMPLETE."
   \              0x6C 0x74    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_125:
   \   00000000   0x30 0x30          DC8 "000A"
   \              0x30 0x41    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_126:
   \   00000000   0x54 0x65          DC8 "TempC Set COMPLETE."
   \              0x6D 0x70    
   \              0x43 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_127:
   \   00000000   0x30 0x30          DC8 "000B"
   \              0x30 0x42    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_128:
   \   00000000   0x54 0x65          DC8 "TempF Set COMPLETE."
   \              0x6D 0x70    
   \              0x46 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_129:
   \   00000000   0x30 0x30          DC8 "0011"
   \              0x31 0x31    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_130:
   \   00000000   0x50 0x72          DC8 "Pressure Set COMPLETE."
   \              0x65 0x73    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_131:
   \   00000000   0x30 0x30          DC8 "0030"
   \              0x33 0x30    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_132:
   \   00000000   0x48 0x75          DC8 "Humidity Set COMPLETE."
   \              0x6D 0x69    
   \              0x64 0x69    
   \              0x74 0x79    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_133:
   \   00000000   0x30 0x30          DC8 "0032"
   \              0x33 0x32    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_134:
   \   00000000   0x48 0x75          DC8 "Hum_TempC Set COMPLETE."
   \              0x6D 0x5F    
   \              0x54 0x65    
   \              0x6D 0x70    
   \              0x43 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_135:
   \   00000000   0x30 0x30          DC8 "0033"
   \              0x33 0x33    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_136:
   \   00000000   0x48 0x75          DC8 "Hum_TempF Set COMPLETE."
   \              0x6D 0x5F    
   \              0x54 0x65    
   \              0x6D 0x70    
   \              0x46 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_137:
   \   00000000   0x30 0x30          DC8 "000D"
   \              0x30 0x44    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_138:
   \   00000000   0x52 0x47          DC8 "RGB_Red Set COMPLETE."
   \              0x42 0x5F    
   \              0x52 0x65    
   \              0x64 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_139:
   \   00000000   0x30 0x30          DC8 "000E"
   \              0x30 0x45    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_140:
   \   00000000   0x52 0x47          DC8 "RGB_Green Set COMPLETE."
   \              0x42 0x5F    
   \              0x47 0x72    
   \              0x65 0x65    
   \              0x6E 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_141:
   \   00000000   0x30 0x30          DC8 "000F"
   \              0x30 0x46    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_142:
   \   00000000   0x52 0x47          DC8 "RGB_Blue Set COMPLETE."
   \              0x42 0x5F    
   \              0x42 0x6C    
   \              0x75 0x65    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_143:
   \   00000000   0x30 0x30          DC8 "0017"
   \              0x31 0x37    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_144:
   \   00000000   0x54 0x68          DC8 "Therm_C Set COMPLETE."
   \              0x65 0x72    
   \              0x6D 0x5F    
   \              0x43 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_145:
   \   00000000   0x30 0x30          DC8 "0019"
   \              0x31 0x39    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_146:
   \   00000000   0x52 0x6F          DC8 "RoadT_1C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x31 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_147:
   \   00000000   0x30 0x30          DC8 "001B"
   \              0x31 0x42    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_148:
   \   00000000   0x52 0x6F          DC8 "RoadT_2C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x32 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_149:
   \   00000000   0x30 0x30          DC8 "001D"
   \              0x31 0x44    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_150:
   \   00000000   0x52 0x6F          DC8 "RoadT_3C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x33 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_151:
   \   00000000   0x30 0x30          DC8 "001F"
   \              0x31 0x46    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_152:
   \   00000000   0x52 0x6F          DC8 "RoadT_4C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x34 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_153:
   \   00000000   0x30 0x30          DC8 "0021"
   \              0x32 0x31    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_154:
   \   00000000   0x52 0x6F          DC8 "RoadT_5C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x35 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_155:
   \   00000000   0x30 0x30          DC8 "0023"
   \              0x32 0x33    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_156:
   \   00000000   0x52 0x6F          DC8 "RoadT_6C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x36 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_157:
   \   00000000   0x30 0x30          DC8 "0025"
   \              0x32 0x35    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_158:
   \   00000000   0x52 0x6F          DC8 "RoadT_7C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x37 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_159:
   \   00000000   0x30 0x30          DC8 "0027"
   \              0x32 0x37    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_160:
   \   00000000   0x52 0x6F          DC8 "RoadT_8C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x38 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_161:
   \   00000000   0x54 0x43          DC8 "TCS SYNTAX ERROR: Bad UUID.\015\012"
   \              0x53 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x42 0x61    
   \              0x64 0x20    
   \              0x55 0x55    
   \              0x49 0x44    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_162:
   \   00000000   0x54 0x43          DC8 "TCS SYNTAX ERROR: Wrong Number of Parameters.\015\012"
   \              0x53 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x57 0x72    
   \              0x6F 0x6E    
   \              0x67 0x20    
   \              0x4E 0x75    
   \              0x6D 0x62    
   \              0x65 0x72    
   \              0x20 0x6F    
   \              0x66 0x20    
   \              0x50 0x61    
   \              0x72 0x61    
   \              0x6D 0x65    
   \              0x74 0x65    
   \              0x72 0x73    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_163:
   \   00000000   0x44 0x72          DC8 "Driver Status: %04x\015\012"
   \              0x69 0x76    
   \              0x65 0x72    
   \              0x20 0x53    
   \              0x74 0x61    
   \              0x74 0x75    
   \              0x73 0x3A    
   \              0x20 0x25    
   \              0x30 0x34    
   \              0x78 0x0D    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_164:
   \   00000000   0x52 0x45          DC8 "RESET CALLED BUT NO RESPONSE!!\015\012"
   \              0x53 0x45    
   \              0x54 0x20    
   \              0x43 0x41    
   \              0x4C 0x4C    
   \              0x45 0x44    
   \              0x20 0x42    
   \              0x55 0x54    
   \              0x20 0x4E    
   \              0x4F 0x20    
   \              0x52 0x45    
   \              0x53 0x50    
   \              0x4F 0x4E    
   \              0x53 0x45    
   \              0x21 0x21    
   \              0x0D 0x0A    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_165:
   \   00000000   0x54 0x4B          DC8 "TK SYNTAX ERROR: Not correct format.\015\012"
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x63    
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_166:
   \   00000000   0x54 0x4B          DC8 "TKSR SYNTAX ERROR: Not correct format.\015\012"
   \              0x53 0x52    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x63    
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_167:
   \   00000000   0x54 0x4B          DC8 "TKSR SYNTAX ERROR: Bad Parameter.\015\012"
   \              0x53 0x52    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x61 0x64    
   \              0x20 0x50    
   \              0x61 0x72    
   \              0x61 0x6D    
   \              0x65 0x74    
   \              0x65 0x72    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_168:
   \   00000000   0x54 0x4B          DC8 "TKSS SYNTAX ERROR: Not correct format.\015\012"
   \              0x53 0x53    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x63    
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_169:
   \   00000000   0x54 0x4B          DC8 "TKSS SYNTAX ERROR: Bad Parameter.\015\012"
   \              0x53 0x53    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x61 0x64    
   \              0x20 0x50    
   \              0x61 0x72    
   \              0x61 0x6D    
   \              0x65 0x74    
   \              0x65 0x72    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_170:
   \   00000000   0x54 0x4B          DC8 "TKS ERROR: Not a legal command.\015\012"
   \              0x53 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x61    
   \              0x20 0x6C    
   \              0x65 0x67    
   \              0x61 0x6C    
   \              0x20 0x63    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_171:
   \   00000000   0x52 0x64          DC8 "RdSnd Sample Rate:  %3.1f Seconds.\015\012"
   \              0x53 0x6E    
   \              0x64 0x20    
   \              0x53 0x61    
   \              0x6D 0x70    
   \              0x6C 0x65    
   \              0x20 0x52    
   \              0x61 0x74    
   \              0x65 0x3A    
   \              0x20 0x20    
   \              0x25 0x33    
   \              0x2E 0x31    
   \              0x66 0x20    
   \              0x53 0x65    
   \              0x63 0x6F    
   \              0x6E 0x64    
   \              0x73 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_172:
   \   00000000   0x53 0x65          DC8 "Sensor Sample Rate: %3.1f Seconds.\015\012\015\012> "
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \              0x61 0x6D    
   \              0x70 0x6C    
   \              0x65 0x20    
   \              0x52 0x61    
   \              0x74 0x65    
   \              0x3A 0x20    
   \              0x25 0x33    
   \              0x2E 0x31    
   \              0x66 0x20    
   \              0x53 0x65    
   \              0x63 0x6F    
   \              0x6E 0x64    
   \              0x73 0x2E    
   \              0x0D 0x0A    
   \              0x0D 0x0A    
   \              0x3E 0x20    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_173:
   \   00000000   0x42 0x47          DC8 "BGM111 MONITOR MODE.\015\012\015\012"
   \              0x4D 0x31    
   \              0x31 0x31    
   \              0x20 0x4D    
   \              0x4F 0x4E    
   \              0x49 0x54    
   \              0x4F 0x52    
   \              0x20 0x4D    
   \              0x4F 0x44    
   \              0x45 0x2E    
   \              0x0D 0x0A    
   \              0x0D 0x0A    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_174:
   \   00000000   0x55 0x73          DC8 "Use <ESC> to exit mode.\015\012\015\012"
   \              0x65 0x20    
   \              0x3C 0x45    
   \              0x53 0x43    
   \              0x3E 0x20    
   \              0x74 0x6F    
   \              0x20 0x65    
   \              0x78 0x69    
   \              0x74 0x20    
   \              0x6D 0x6F    
   \              0x64 0x65    
   \              0x2E 0x0D    
   \              0x0A 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_175:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: BERR: Bus Error reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x45 0x52    
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x75 0x73    
   \              0x20 0x45    
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x20 0x72    
   \              0x65 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_176:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: ARLO: Arbitration lost reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x41    
   \              0x52 0x4C    
   \              0x4F 0x3A    
   \              0x20 0x41    
   \              0x72 0x62    
   \              0x69 0x74    
   \              0x72 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x6C    
   \              0x6F 0x73    
   \              0x74 0x20    
   \              0x72 0x65    
   \              0x70 0x6F    
   \              0x72 0x74    
   \              0x65 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   0000002E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_177:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: AF: Acknowledge failure reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x41    
   \              0x46 0x3A    
   \              0x20 0x41    
   \              0x63 0x6B    
   \              0x6E 0x6F    
   \              0x77 0x6C    
   \              0x65 0x64    
   \              0x67 0x65    
   \              0x20 0x66    
   \              0x61 0x69    
   \              0x6C 0x75    
   \              0x72 0x65    
   \              0x20 0x72    
   \              0x65 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_178:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: OVR: Overrun/Underrun reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4F    
   \              0x56 0x52    
   \              0x3A 0x20    
   \              0x4F 0x76    
   \              0x65 0x72    
   \              0x72 0x75    
   \              0x6E 0x2F    
   \              0x55 0x6E    
   \              0x64 0x65    
   \              0x72 0x72    
   \              0x75 0x6E    
   \              0x20 0x72    
   \              0x65 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_179:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: DMA: DMA Error reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x44    
   \              0x4D 0x41    
   \              0x3A 0x20    
   \              0x44 0x4D    
   \              0x41 0x20    
   \              0x45 0x72    
   \              0x72 0x6F    
   \              0x72 0x20    
   \              0x72 0x65    
   \              0x70 0x6F    
   \              0x72 0x74    
   \              0x65 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_180:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: TIMEOUT: Timeout Error reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x54    
   \              0x49 0x4D    
   \              0x45 0x4F    
   \              0x55 0x54    
   \              0x3A 0x20    
   \              0x54 0x69    
   \              0x6D 0x65    
   \              0x6F 0x75    
   \              0x74 0x20    
   \              0x45 0x72    
   \              0x72 0x6F    
   \              0x72 0x20    
   \              0x72 0x65    
   \              0x70 0x6F    
   \              0x72 0x74    
   \              0x65 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   0000002E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_181:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: Unknown Error reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x55    
   \              0x6E 0x6B    
   \              0x6E 0x6F    
   \              0x77 0x6E    
   \              0x20 0x45    
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x20 0x72    
   \              0x65 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_182:
   \   00000000   0x49 0x32          DC8 "I2C BUSY: I2C reported BUSY error.\015\012"
   \              0x43 0x20    
   \              0x42 0x55    
   \              0x53 0x59    
   \              0x3A 0x20    
   \              0x49 0x32    
   \              0x43 0x20    
   \              0x72 0x65    
   \              0x70 0x6F    
   \              0x72 0x74    
   \              0x65 0x64    
   \              0x20 0x42    
   \              0x55 0x53    
   \              0x59 0x20    
   \              0x65 0x72    
   \              0x72 0x6F    
   \              0x72 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_183:
   \   00000000   0x49 0x32          DC8 "I2C TIMEOUT: I2C reported TIMEOUT.\015\012"
   \              0x43 0x20    
   \              0x54 0x49    
   \              0x4D 0x45    
   \              0x4F 0x55    
   \              0x54 0x3A    
   \              0x20 0x49    
   \              0x32 0x43    
   \              0x20 0x72    
   \              0x65 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x20    
   \              0x54 0x49    
   \              0x4D 0x45    
   \              0x4F 0x55    
   \              0x54 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_184:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: I2C reported unnown error.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x49    
   \              0x32 0x43    
   \              0x20 0x72    
   \              0x65 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x20    
   \              0x75 0x6E    
   \              0x6E 0x6F    
   \              0x77 0x6E    
   \              0x20 0x65    
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_185:
   \   00000000   0x0D 0x0A          DC8 "\015\012\015\012> "
   \              0x0D 0x0A    
   \              0x3E 0x20    
   \              0x00         
   \   00000007   0x00               DC8 0
   2652          
   2653          /*void sleep(void) {
   2654          //    TimMasterHandle.Instance = TIM5;
   2655           
   2656              // Disable HAL tick interrupt
   2657          //    __HAL_TIM_DISABLE_IT(&TimMasterHandle, TIM_IT_CC2);
   2658           
   2659              // Request to enter SLEEP mode
   2660              HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
   2661           
   2662              // Enable HAL tick interrupt
   2663          //    __HAL_TIM_ENABLE_IT(&TimMasterHandle, TIM_IT_CC2);
   2664          }*/
   2665           
   2666          /*void deepsleep(void) {
   2667              // Request to enter STOP mode with regulator in low power mode
   2668              HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
   2669           
   2670              // After wake-up from STOP reconfigure the PLL
   2671              //SetSysClock();
   2672              SystemClock_Config();
   2673          }*/
   2674          
   2675          /************************ (C) COPYRIGHT WeatherCloud *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
    1136   RoadBrd_ParseString
      1136   -> BGM111_Transmit
      1136   -> Get_DriverStates
      1136   -> Get_DriverStatus
      1136   -> HAL_NVIC_SystemReset
      1136   -> MX_I2C1_Reset
      1136   -> RoadBrdSnd_ClrBffrs
      1136   -> RoadBrdSnd_DumpBin0
      1136   -> RoadBrdSnd_DumpBin16
      1136   -> RoadBrdSnd_DumpBin32
      1136   -> RoadBrdSnd_DumpBin48
      1136   -> RoadBrdSnd_ProcessSound
      1136   -> RoadBrdSnd_getSaveBffr
      1136   -> RoadBrd_Baro_ReadPressure
      1136   -> RoadBrd_Baro_ReadPressure_Scaled
      1136   -> RoadBrd_Baro_ReadTemp
      1136   -> RoadBrd_CAL_Set_CalItem
      1136   -> RoadBrd_CoolEye_ReadValues
      1136   -> RoadBrd_CoolEye_ReadValues_Scaled
      1136   -> RoadBrd_Get_RdSndTickCnt
      1136   -> RoadBrd_Get_SnsrTickCnt
      1136   -> RoadBrd_GridEyeInit
      1136   -> RoadBrd_GridEyeReset
      1136   -> RoadBrd_GridEye_ReadValues
      1136   -> RoadBrd_GridEye_ReadValues_Scaled
      1136   -> RoadBrd_HumidityInit
      1136   -> RoadBrd_Humidity_ReadHumidity
      1136   -> RoadBrd_Humidity_ReadHumidity_Scaled
      1136   -> RoadBrd_Humidity_ReadTemperature
      1136   -> RoadBrd_I2C_GetError
      1136   -> RoadBrd_I2C_Master_Receive
      1136   -> RoadBrd_I2C_Master_Transmit
      1136   -> RoadBrd_Init_Barometer
      1136   -> RoadBrd_Init_VMonitor
      1136   -> RoadBrd_RGBFullInit
      1136   -> RoadBrd_RGBInit
      1136   -> RoadBrd_RGBReadID
      1136   -> RoadBrd_RGBReadStatus
      1136   -> RoadBrd_RGBReadValues
      1136   -> RoadBrd_RGBReset
      1136   -> RoadBrd_ReadTemp
      1136   -> RoadBrd_ReadTemp_Scaled
      1136   -> RoadBrd_Set_RdSndTickCnt
      1136   -> RoadBrd_Set_SnsrTickCnt
      1136   -> RoadBrd_TestandRead_Barometer
      1136   -> RoadBrd_UART_Transmit
      1136   -> RoadBrd_VMonitor_RdCurrent
      1136   -> RoadBrd_VMonitor_RdCurrent_Scaled
      1136   -> RoadBrd_VMonitor_RdPower
      1136   -> RoadBrd_VMonitor_RdPower_Scaled
      1136   -> RoadBrd_VMonitor_RdShntVltg
      1136   -> RoadBrd_VMonitor_RdShntVltg_Scaled
      1136   -> RoadBrd_VMonitor_RdVoltage
      1136   -> RoadBrd_VMonitor_RdVoltage_Scaled
      1136   -> RoadBrd_WaitForState
      1136   -> RoadBrd_gpio_Off
      1136   -> RoadBrd_gpio_On
      1136   -> __aeabi_f2d
      1136   -> __aeabi_fdiv
      1136   -> __aeabi_ui2f
      1136   -> atoi
      1136   -> hatoi
      1136   -> isHexNum
      1136   -> isdigit
      1136   -> sprintf
      1136   -> sscanf
      1136   -> strcat
      1136   -> strcpy
      1136   -> strlen
      1136   -> strncmp
       0   Tst_Bypass
      24   hatoi
        24   -> strlen
      24   isHexNum
        24   -> strlen


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
       4  ??DataTable0_1
       4  ??DataTable0_10
       4  ??DataTable0_2
       4  ??DataTable0_3
       4  ??DataTable0_4
       4  ??DataTable0_5
       4  ??DataTable0_6
       4  ??DataTable0_7
       4  ??DataTable0_8
       4  ??DataTable0_9
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_10
       4  ??DataTable1_11
       4  ??DataTable1_12
       4  ??DataTable1_13
       4  ??DataTable1_14
       4  ??DataTable1_15
       4  ??DataTable1_16
       4  ??DataTable1_17
       4  ??DataTable1_18
       4  ??DataTable1_19
       4  ??DataTable1_2
       4  ??DataTable1_20
       4  ??DataTable1_21
       4  ??DataTable1_22
       4  ??DataTable1_23
       4  ??DataTable1_24
       4  ??DataTable1_25
       4  ??DataTable1_26
       4  ??DataTable1_27
       4  ??DataTable1_28
       4  ??DataTable1_29
       4  ??DataTable1_3
       4  ??DataTable1_30
       4  ??DataTable1_31
       4  ??DataTable1_32
       4  ??DataTable1_33
       4  ??DataTable1_34
       4  ??DataTable1_35
       4  ??DataTable1_36
       4  ??DataTable1_37
       4  ??DataTable1_38
       4  ??DataTable1_39
       4  ??DataTable1_4
       4  ??DataTable1_40
       4  ??DataTable1_41
       4  ??DataTable1_42
       4  ??DataTable1_43
       4  ??DataTable1_44
       4  ??DataTable1_45
       4  ??DataTable1_46
       4  ??DataTable1_47
       4  ??DataTable1_48
       4  ??DataTable1_49
       4  ??DataTable1_5
       4  ??DataTable1_50
       4  ??DataTable1_51
       4  ??DataTable1_52
       4  ??DataTable1_53
       4  ??DataTable1_54
       4  ??DataTable1_55
       4  ??DataTable1_56
       4  ??DataTable1_57
       4  ??DataTable1_58
       4  ??DataTable1_59
       4  ??DataTable1_6
       4  ??DataTable1_60
       4  ??DataTable1_61
       4  ??DataTable1_62
       4  ??DataTable1_63
       4  ??DataTable1_64
       4  ??DataTable1_65
       4  ??DataTable1_66
       4  ??DataTable1_67
       4  ??DataTable1_68
       4  ??DataTable1_69
       4  ??DataTable1_7
       4  ??DataTable1_70
       4  ??DataTable1_71
       4  ??DataTable1_72
       4  ??DataTable1_73
       4  ??DataTable1_74
       4  ??DataTable1_75
       4  ??DataTable1_76
       4  ??DataTable1_77
       4  ??DataTable1_78
       4  ??DataTable1_79
       4  ??DataTable1_8
       4  ??DataTable1_80
       4  ??DataTable1_81
       4  ??DataTable1_82
       4  ??DataTable1_9
      56  ?_0
      68  ?_1
      32  ?_10
      40  ?_100
      20  ?_101
      12  ?_102
      40  ?_103
      44  ?_104
      52  ?_105
      40  ?_106
      12  ?_107
      24  ?_108
      24  ?_109
      40  ?_11
      36  ?_110
      36  ?_111
      40  ?_112
      36  ?_113
      12  ?_114
      24  ?_115
       8  ?_116
      28  ?_117
      28  ?_118
       8  ?_119
       1  ?_12
      24  ?_120
       8  ?_121
      20  ?_122
       8  ?_123
      24  ?_124
       8  ?_125
      20  ?_126
       8  ?_127
      20  ?_128
       8  ?_129
       8  ?_13
      24  ?_130
       8  ?_131
      24  ?_132
       8  ?_133
      24  ?_134
       8  ?_135
      24  ?_136
       8  ?_137
      24  ?_138
       8  ?_139
      20  ?_14
      24  ?_140
       8  ?_141
      24  ?_142
       8  ?_143
      24  ?_144
       8  ?_145
      24  ?_146
       8  ?_147
      24  ?_148
       8  ?_149
      36  ?_15
      24  ?_150
       8  ?_151
      24  ?_152
       8  ?_153
      24  ?_154
       8  ?_155
      24  ?_156
       8  ?_157
      24  ?_158
       8  ?_159
      40  ?_16
      24  ?_160
      32  ?_161
      48  ?_162
      24  ?_163
      36  ?_164
      40  ?_165
      44  ?_166
      36  ?_167
      44  ?_168
      36  ?_169
      40  ?_17
      36  ?_170
      40  ?_171
      44  ?_172
      28  ?_173
      28  ?_174
      40  ?_175
      48  ?_176
      48  ?_177
      48  ?_178
      40  ?_179
      40  ?_18
      48  ?_180
      40  ?_181
      40  ?_182
      40  ?_183
      40  ?_184
       8  ?_185
      56  ?_19
      40  ?_2
      20  ?_20
      16  ?_21
      12  ?_22
      40  ?_23
      40  ?_24
      20  ?_25
      32  ?_26
      16  ?_27
      16  ?_28
      40  ?_29
      32  ?_3
      40  ?_30
      32  ?_31
      36  ?_32
      48  ?_33
      48  ?_34
      24  ?_35
      20  ?_36
      56  ?_37
      44  ?_38
      40  ?_39
       4  ?_4
      24  ?_40
      28  ?_41
      44  ?_42
      28  ?_43
      36  ?_44
      20  ?_45
      24  ?_46
      32  ?_47
      20  ?_48
      20  ?_49
      40  ?_5
      24  ?_50
      24  ?_51
      36  ?_52
      24  ?_53
      44  ?_54
      16  ?_55
      48  ?_56
      24  ?_57
      20  ?_58
      40  ?_59
      32  ?_6
      28  ?_60
      56  ?_61
      16  ?_62
      12  ?_63
      12  ?_64
      12  ?_65
      72  ?_66
      68  ?_67
      72  ?_68
      64  ?_69
      40  ?_7
      60  ?_70
      60  ?_71
      60  ?_72
      56  ?_73
      64  ?_74
      64  ?_75
      64  ?_76
      64  ?_77
      64  ?_78
      68  ?_79
      32  ?_8
      32  ?_80
       8  ?_81
      52  ?_82
      36  ?_83
      32  ?_84
      32  ?_85
      44  ?_86
      32  ?_87
      40  ?_88
      40  ?_89
      40  ?_9
      44  ?_90
      52  ?_91
      24  ?_92
      20  ?_93
       4  ?_94
      40  ?_95
      44  ?_96
      52  ?_97
      60  ?_98
      24  ?_99
       1  Bypass
    9904  RoadBrd_ParseString
       6  Tst_Bypass
      88  hatoi
      74  isHexNum

 
      1 byte  in section .bss
  5 833 bytes in section .rodata
 10 448 bytes in section .text
 
 10 448 bytes of CODE  memory
  5 833 bytes of CONST memory
      1 byte  of DATA  memory

Errors: none
Warnings: none
