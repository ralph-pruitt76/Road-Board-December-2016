###############################################################################
#
# IAR ANSI C/C++ Compiler V7.60.2.11341/W32 for ARM       31/Jan/2018  11:51:08
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\ErrorCodes.c
#    Command line =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\ErrorCodes.c
#        -D USE_HAL_DRIVER -D STM32L152xE -D USE_STM32L1XX_NUCLEO -D ASCII -D
#        REV_L -D LONG_DELAY -D XML_SHRT -D WM -lCN
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\WeatherMesh\List
#        -o
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\WeatherMesh\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.4\arm\INC\c\DLib_Config_Full.h"
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/STM32L1xx_HAL_Driver/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/STM32L1xx_HAL_Driver/Inc/Legacy\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/BSP/STM32L1xx_Nucleo\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/portable/IAR/ARM_CM3\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Core/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/CMSIS/Include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/CMSIS/Device/ST/STM32L1xx/Include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\..\Middlewares\Third_Party\BgLib\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.4\arm\CMSIS\Include\"
#    Locale       =  English_United States.1252
#    List file    =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\WeatherMesh\List\ErrorCodes.lst
#    Object file  =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\WeatherMesh\Obj\ErrorCodes.o
#
###############################################################################

D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\ErrorCodes.c
      1          /**
      2            ******************************************************************************
      3            * File Name          : ErrorCodes.c
      4            * Description        : This file provides code for the processing and control
      5            * error buffer.
      6            ******************************************************************************
      7            *
      8            * COPYRIGHT(c) 2016 WeatherCloud
      9            *
     10            * Redistribution and use in source and binary forms, with or without modification,
     11            * are permitted provided that the following conditions are met:
     12            *   1. Redistributions of source code must retain the above copyright notice,
     13            *      this list of conditions and the following disclaimer.
     14            *   2. Redistributions in binary form must reproduce the above copyright notice,
     15            *      this list of conditions and the following disclaimer in the documentation
     16            *      and/or other materials provided with the distribution.
     17            *   3. Neither the name of WeatherCloud nor the names of its contributors
     18            *      may be used to endorse or promote products derived from this software
     19            *      without specific prior written permission.
     20            *
     21            * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     22            * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     23            * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     24            * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
     25            * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     26            * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     27            * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
     28            * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
     29            * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
     30            * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     31            *
     32            ******************************************************************************
     33            */
     34          
     35          /* Includes ------------------------------------------------------------------*/
     36          #include "ErrorCodes.h"
     37          #include "usart.h"
     38          #include "gpio.h"
     39          #include "i2c.h"
     40          #include "parser.h"
     41          #include <stdio.h>
     42          #include <string.h>
     43          
     44          
     45          // Constant Strings Definition

   \                                 In section .rodata, align 4
     46          const char * const CodesArray[] = { "       ",                      // CODE 000: NULL...NO Error Code
   \                     CodesArray:
   \   00000000   0x........         DC32 ?_0, ?_1, ?_2, ?_3, ?_4, ?_5, ?_6, ?_7, ?_8, ?_9, ?_10, ?_11, ?_12
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \   00000034   0x........         DC32 ?_13, ?_14, ?_15, ?_16, ?_17, ?_18, ?_19, ?_20, ?_0, ?_0, ?_0
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
     47                                              "I2CBUSY",                      // CODE 001: I2C Bus detected busy. Rogue I2C part holding bus low.
     48                                              "VM_INIT",                      // CODE 002: Initialization of V Monitor Code failed.
     49                                              "BGMSYNC",                      // CODE 003: BGM111 processing code has detected a sync error on traffic from BGM111.
     50                                              "GEYE_IN",                      // CODE 004: Initialization of Grid Eye Sensor failed.
     51                                              "PRSS_IN",                      // CODE 005: Initialization of Pressure Sensor failed.
     52                                              "BGMRFUL",                      // CODE 006: BGM111 processing code has detected a Receive Buffer Full error on traffic from BGM111.
     53                                              "HUMD_IN",                      // CODE 007: Initialization of Humidity Sensor failed.
     54                                              "RGBINIT",                      // CODE 008: Initialization of RGB Sensor failed.
     55                                              "TEMPINI",                      // CODE 009: Initialization of Temperature Sensor failed.
     56                                              "CEYE_IN",                      // CODE 010: Initialization of Cool Eye Sensor failed.
     57                                              "I2CSCLK",                      // CODE 011: I2C Bus Test Failed. SCLK held low.
     58                                              "I2CSDAT",                      // CODE 012: I2C Bus Test Failed. SDAT held low.
     59                                              "BGMCNCT",                      // CODE 013: BGM111 processing code has detected a Connection Dropped Event.
     60                                              "BGMHRBT",                      // CODE 014: BGM111 processing code has detected a Heart Beat Timeout Event.
     61                                              "BGTXFUL",                      // CODE 015: BGM111 processing code has detected a Transmit Buffer Full error on traffic to BGM111.
     62                                              "FRMINIT",                      // CODE 016: Could not Initialize Flash Frame.
     63                                              "BGMOVFL",                      // CODE 017: BGM111 processing code has detected Serial Stream Overflow.
     64                                              "BGMSCNC",                      // CODE 018: BGM111 processing code has detected a SYNC Connection Dropped Event.
     65                                              "CALINIT",                      // CODE 019: Could not Initialize Calibration Flash Structure.
     66                                              "RPR_I2C",                      // CODE 020: I2C Bus has been repaired.
     67                                              "       ",                      // CODE 021: NULL...
     68                                              "       ",                      // CODE 022: NULL...
     69                                              "       " };                    // CODE 023: NULL...

   \                                 In section .rodata, align 4
     70          const char * const ModuleArray[] = { "       ",                     // CODE 000: NULL...NO Device Code
   \                     ModuleArray:
   \   00000000   0x........         DC32 ?_0, ?_21, ?_22, ?_23, ?_24, ?_0, ?_0, ?_0
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
     71                                               "   main",                     // CODE 001: module: main.c
     72                                               " bgm111",                     // CODE 002: module: bgm111.c
     73                                               "    i2c",                     // CODE 003: module: i2c.c...
     74                                               "AppData",                     // CODE 004: module: app_data.c
     75                                               "       ",                     // CODE 005: module: NULL...
     76                                               "       ",                     // CODE 006: module: NULL...
     77                                               "       " };                   // CODE 007: module: NULL...
     78              
     79          /* Error Code structure */
     80          struct
     81          {
     82            ErrorElement error_buf[ERR_DATA_LENGTH];
     83            volatile uint16_t error_wr;
     84            uint16_t error_rd;

   \                                 In section .bss, align 4
     85          } static errStruct;
   \                     errStruct:
   \   00000000                      DS8 804
     86          
     87          //*
     88          //* Define Internal Buffer handling routines.
     89          //* 
     90          

   \                                 In section .text, align 2, keep-with-next
     91          void RBBuffer_LowLevel_Init(void)
     92          {
     93            errStruct.error_wr = 0;
   \                     RBBuffer_LowLevel_Init: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x....             LDR.N    R1,??DataTable4
   \   00000004   0xF8A1 0x0320      STRH     R0,[R1, #+800]
     94            errStruct.error_rd = 0;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x....             LDR.N    R1,??DataTable4
   \   0000000C   0xF8A1 0x0322      STRH     R0,[R1, #+802]
     95          }
   \   00000010   0x4770             BX       LR               ;; return
     96          
     97          /* Next buffer index based on current index and buffer size */
     98          //#pragma inline=forced

   \                                 In section .text, align 2, keep-with-next
     99          uint16_t RBNextBufIdx(uint16_t idx)
    100          {
    101            idx++;
   \                     RBNextBufIdx: (+1)
   \   00000000   0x1C40             ADDS     R0,R0,#+1
    102            return idx < ERR_DATA_LENGTH ? idx : 0;
   \   00000002   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000004   0x2864             CMP      R0,#+100
   \   00000006   0xDB00             BLT.N    ??RBNextBufIdx_0
   \                     ??RBNextBufIdx_1: (+1)
   \   00000008   0x2000             MOVS     R0,#+0
   \                     ??RBNextBufIdx_0: (+1)
   \   0000000A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000000C   0x4770             BX       LR               ;; return
    103          }
    104          
    105          /* Report if the buffer is full based on its indexes */
    106          //#pragma inline=forced

   \                                 In section .text, align 2, keep-with-next
    107          bool RBIsBufFull(uint16_t wr_idx, uint16_t rd_idx)
    108          {
   \                     RBIsBufFull: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    109            return RBNextBufIdx(wr_idx) == rd_idx;
   \   00000006   0x0020             MOVS     R0,R4
   \   00000008   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000000A   0x.... 0x....      BL       RBNextBufIdx
   \   0000000E   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000010   0x42A8             CMP      R0,R5
   \   00000012   0xD101             BNE.N    ??RBIsBufFull_0
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0xE000             B.N      ??RBIsBufFull_1
   \                     ??RBIsBufFull_0: (+1)
   \   00000018   0x2000             MOVS     R0,#+0
   \                     ??RBIsBufFull_1: (+1)
   \   0000001A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001C   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    110          }
    111          
    112          /* Get the used space in the buffer based on its indexes */
    113          //#pragma inline=forced

   \                                 In section .text, align 2, keep-with-next
    114          uint16_t RBBufUsed(uint16_t wr_idx, uint16_t rd_idx)
    115          {
   \                     RBBufUsed: (+1)
   \   00000000   0x0002             MOVS     R2,R0
    116            int size = (int)wr_idx - (int)rd_idx;
   \   00000002   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000004   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000006   0x1A50             SUBS     R0,R2,R1
    117            if (size < 0)
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD500             BPL.N    ??RBBufUsed_0
    118            {
    119              size = ERR_DATA_LENGTH + size;
   \   0000000C   0x3064             ADDS     R0,R0,#+100
    120            }
    121            return size;
   \                     ??RBBufUsed_0: (+1)
   \   0000000E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000010   0x4770             BX       LR               ;; return
    122          }
    123          
    124          /* Get the free space in the buffer based on its indexes */
    125          //#pragma inline=forced

   \                                 In section .text, align 2, keep-with-next
    126          uint16_t RBBufFree(uint16_t wr_idx, uint16_t rd_idx)
    127          {
   \                     RBBufFree: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    128            return (ERR_DATA_LENGTH - 1) - RBBufUsed(wr_idx, rd_idx);
   \   00000006   0x0029             MOVS     R1,R5
   \   00000008   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000000E   0x.... 0x....      BL       RBBufUsed
   \   00000012   0xF1D0 0x0063      RSBS     R0,R0,#+99
   \   00000016   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000018   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    129          }
    130          
    131          /**
    132            * @brief  This function initializes the Error Code Tracking Structure.
    133            * @retval HAL_StatusTypeDef:     HAL_OK:       No Errors
    134            *                                HAL_ERROR:    Error Found during initialization.
    135            */

   \                                 In section .text, align 2, keep-with-next
    136          HAL_StatusTypeDef RdBrd_ErrCdInit( void )
    137          {
   \                     RdBrd_ErrCdInit: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    138            RBBuffer_LowLevel_Init();              // Reset all Internal Pointers.
   \   00000002   0x.... 0x....      BL       RBBuffer_LowLevel_Init
    139            return HAL_OK;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0xBD02             POP      {R1,PC}          ;; return
    140          }
    141          
    142          /**
    143            * @brief  This function returns the current Error Count in the Error Buffer..
    144            * @retval uint16_t:     Number of errors being tracked
    145            */

   \                                 In section .text, align 2, keep-with-next
    146          uint16_t  RdBrd_ErrCdGetErrCnt( void )
    147          {
   \                     RdBrd_ErrCdGetErrCnt: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    148            return RBBufUsed(errStruct.error_wr, errStruct.error_rd);
   \   00000002   0x....             LDR.N    R0,??DataTable4
   \   00000004   0xF8B0 0x1322      LDRH     R1,[R0, #+802]
   \   00000008   0x....             LDR.N    R0,??DataTable4
   \   0000000A   0xF8B0 0x0320      LDRH     R0,[R0, #+800]
   \   0000000E   0x.... 0x....      BL       RBBufUsed
   \   00000012   0xBD02             POP      {R1,PC}          ;; return
    149          }
    150          
    151           /**
    152            * @brief  This function returns the current pointer at the next code to be processed.
    153            * @retval ErrorElmntPtr:     Points to the next code to be processed.
    154            */

   \                                 In section .text, align 2, keep-with-next
    155          ErrorElmntPtr  RdBrd_ErrCdGetCrntErrCd( void )
    156          {
    157            return &errStruct.error_buf[errStruct.error_rd];
   \                     RdBrd_ErrCdGetCrntErrCd: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable4
   \   00000002   0x....             LDR.N    R1,??DataTable4
   \   00000004   0xF8B1 0x1322      LDRH     R1,[R1, #+802]
   \   00000008   0xEB00 0x00C1      ADD      R0,R0,R1, LSL #+3
   \   0000000C   0x4770             BX       LR               ;; return
    158          }
    159          
    160           /**
    161            * @brief  This function returns the current pointer at the next code to be processed and
    162            * 		   and increments the pointer to the next code.
    163            * @retval ErrorElmntPtr:     Points to the next code to be processed.
    164            */

   \                                 In section .text, align 2, keep-with-next
    165          ErrorElmntPtr  RdBrd_ErrCdGetNxtErrCd( void )
    166          {
   \                     RdBrd_ErrCdGetNxtErrCd: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    167            ErrorElmntPtr TempPtr;
    168            
    169            // Get Current Pointer
    170            TempPtr = &errStruct.error_buf[errStruct.error_rd];
   \   00000002   0x....             LDR.N    R0,??DataTable4
   \   00000004   0x....             LDR.N    R1,??DataTable4
   \   00000006   0xF8B1 0x1322      LDRH     R1,[R1, #+802]
   \   0000000A   0xEB00 0x00C1      ADD      R0,R0,R1, LSL #+3
   \   0000000E   0x0004             MOVS     R4,R0
    171            // Update Read Pointer and return.
    172            errStruct.error_rd = RBNextBufIdx(errStruct.error_rd);
   \   00000010   0x....             LDR.N    R0,??DataTable4
   \   00000012   0xF8B0 0x0322      LDRH     R0,[R0, #+802]
   \   00000016   0x.... 0x....      BL       RBNextBufIdx
   \   0000001A   0x....             LDR.N    R1,??DataTable4
   \   0000001C   0xF8A1 0x0322      STRH     R0,[R1, #+802]
    173            return TempPtr;
   \   00000020   0x0020             MOVS     R0,R4
   \   00000022   0xBD10             POP      {R4,PC}          ;; return
    174          }
    175          
    176          /**
    177            * @brief  This function returns the current pointer at the next code to be processed and
    178            * 		   and increments the pointer to the next code.
    179            * @retval HAL_StatusTypeDef:     HAL_OK:       Error Code logged
    180            *                                HAL_ERROR:    Error Log full or Bad Code
    181            */

   \                                 In section .text, align 2, keep-with-next
    182          HAL_StatusTypeDef RdBrd_ErrCdLogErrCd( ErrorCodes ErrorCd, ModuleCodes DeviceCd )
    183          {
   \                     RdBrd_ErrCdLogErrCd: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB095             SUB      SP,SP,#+84
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    184            uint8_t tempBffr2[80];
    185            HAL_StatusTypeDef Status;
    186            
    187            // Is Buffer Full?
    188            if ( RBIsBufFull(errStruct.error_wr, errStruct.error_rd) )
   \   00000008   0x....             LDR.N    R0,??DataTable4
   \   0000000A   0xF8B0 0x1322      LDRH     R1,[R0, #+802]
   \   0000000E   0x....             LDR.N    R0,??DataTable4
   \   00000010   0xF8B0 0x0320      LDRH     R0,[R0, #+800]
   \   00000014   0x.... 0x....      BL       RBIsBufFull
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD001             BEQ.N    ??RdBrd_ErrCdLogErrCd_0
    189              return HAL_ERROR;
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0xE05D             B.N      ??RdBrd_ErrCdLogErrCd_1
    190            
    191            // Pass passed Information to indexed Entry.
    192            errStruct.error_buf[errStruct.error_wr].DeviceCd = DeviceCd;
   \                     ??RdBrd_ErrCdLogErrCd_0: (+1)
   \   00000020   0x....             LDR.N    R0,??DataTable4
   \   00000022   0x....             LDR.N    R1,??DataTable4
   \   00000024   0xF8B1 0x1320      LDRH     R1,[R1, #+800]
   \   00000028   0xEB00 0x00C1      ADD      R0,R0,R1, LSL #+3
   \   0000002C   0x8045             STRH     R5,[R0, #+2]
    193            errStruct.error_buf[errStruct.error_wr].ErrorCd = ErrorCd;
   \   0000002E   0x....             LDR.N    R0,??DataTable4
   \   00000030   0x....             LDR.N    R1,??DataTable4
   \   00000032   0xF8B1 0x1320      LDRH     R1,[R1, #+800]
   \   00000036   0xF820 0x4031      STRH     R4,[R0, R1, LSL #+3]
    194            errStruct.error_buf[errStruct.error_wr].halTick = HAL_GetTick();
   \   0000003A   0x....             LDR.N    R0,??DataTable4
   \   0000003C   0xF8B0 0x7320      LDRH     R7,[R0, #+800]
   \   00000040   0x.... 0x....      BL       HAL_GetTick
   \   00000044   0x....             LDR.N    R1,??DataTable4
   \   00000046   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000048   0xEB01 0x01C7      ADD      R1,R1,R7, LSL #+3
   \   0000004C   0x6048             STR      R0,[R1, #+4]
    195            
    196            // Update Write Pointer.
    197            errStruct.error_wr = RBNextBufIdx(errStruct.error_wr);
   \   0000004E   0x....             LDR.N    R0,??DataTable4
   \   00000050   0xF8B0 0x0320      LDRH     R0,[R0, #+800]
   \   00000054   0x.... 0x....      BL       RBNextBufIdx
   \   00000058   0x....             LDR.N    R1,??DataTable4
   \   0000005A   0xF8A1 0x0320      STRH     R0,[R1, #+800]
    198            //strcpy( (char *)tempBffr2, "ERROR: ERROR_I2CBUSY\r\n\r\n");
    199            //strcpy( (char *)tempBffr2, CodesArray[ErrorCd]);
    200            sprintf( (char *)tempBffr2, "%s ERROR: %s\r\n\r\n", ModuleArray[DeviceCd], CodesArray[ErrorCd]);
   \   0000005E   0x....             LDR.N    R0,??DataTable4_1
   \   00000060   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000062   0xF850 0x3024      LDR      R3,[R0, R4, LSL #+2]
   \   00000066   0x....             LDR.N    R0,??DataTable4_2
   \   00000068   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000006A   0xF850 0x2025      LDR      R2,[R0, R5, LSL #+2]
   \   0000006E   0x....             LDR.N    R1,??DataTable4_3
   \   00000070   0x4668             MOV      R0,SP
   \   00000072   0x.... 0x....      BL       sprintf
    201            // Send msg to App via Characteristics.
    202            SendApp_String( tempBffr2 );
   \   00000076   0x4668             MOV      R0,SP
   \   00000078   0x.... 0x....      BL       SendApp_String
    203            // Send string to UART..
    204          /*#ifdef REV_L
    205            Status = RoadBrd_UART_Transmit_IT(MONITOR_UART, (uint8_t *)tempBffr2);
    206            // Wait for msg to be completed.
    207            while (RoadBrd_Uart_Status(MONITOR_UART) != SET)
    208            {
    209            }
    210            // Clear State for Next Transfer.
    211            clrUsartState( MONITOR_UART );
    212          #else */
    213            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);
   \   0000007C   0x4669             MOV      R1,SP
   \   0000007E   0x2000             MOVS     R0,#+0
   \   00000080   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000084   0x0006             MOVS     R6,R0
    214            // Only Generate BLEHD messages once BLEHD Channel active.
    215            if ( BGM111_DataConnected())
   \   00000086   0x.... 0x....      BL       BGM111_DataConnected
   \   0000008A   0x2800             CMP      R0,#+0
   \   0000008C   0xD024             BEQ.N    ??RdBrd_ErrCdLogErrCd_2
    216            {
    217              // Generate BLEHD Status Message
    218              sprintf( (char *)tempBffr2, "<STATUS>%s ERROR: %s</STATUS>",
    219                      ModuleArray[DeviceCd],
    220                      CodesArray[ErrorCd]);
   \   0000008E   0x....             LDR.N    R0,??DataTable4_1
   \   00000090   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000092   0xF850 0x3024      LDR      R3,[R0, R4, LSL #+2]
   \   00000096   0x....             LDR.N    R0,??DataTable4_2
   \   00000098   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000009A   0xF850 0x2025      LDR      R2,[R0, R5, LSL #+2]
   \   0000009E   0x....             LDR.N    R1,??DataTable4_4
   \   000000A0   0x4668             MOV      R0,SP
   \   000000A2   0x.... 0x....      BL       sprintf
    221              // Task String to BGM Task to syncronously send error.
    222              RoadBrd_BGMTsk((char *)tempBffr2);
   \   000000A6   0x4668             MOV      R0,SP
   \   000000A8   0x.... 0x....      BL       RoadBrd_BGMTsk
    223              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);
   \   000000AC   0x4669             MOV      R1,SP
   \   000000AE   0x2000             MOVS     R0,#+0
   \   000000B0   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000000B4   0x0006             MOVS     R6,R0
    224              if (Status != HAL_OK)
   \   000000B6   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000B8   0x2E00             CMP      R6,#+0
   \   000000BA   0xD002             BEQ.N    ??RdBrd_ErrCdLogErrCd_3
    225                return Status;
   \   000000BC   0x0030             MOVS     R0,R6
   \   000000BE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000C0   0xE00C             B.N      ??RdBrd_ErrCdLogErrCd_1
    226              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)"\r\n\r\n");
   \                     ??RdBrd_ErrCdLogErrCd_3: (+1)
   \   000000C2   0x....             LDR.N    R1,??DataTable4_5
   \   000000C4   0x2000             MOVS     R0,#+0
   \   000000C6   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000000CA   0x0006             MOVS     R6,R0
    227              if (Status != HAL_OK)
   \   000000CC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000CE   0x2E00             CMP      R6,#+0
   \   000000D0   0xD002             BEQ.N    ??RdBrd_ErrCdLogErrCd_2
    228                return Status;
   \   000000D2   0x0030             MOVS     R0,R6
   \   000000D4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000D6   0xE001             B.N      ??RdBrd_ErrCdLogErrCd_1
    229            }
    230          
    231          //#endif
    232            
    233            return Status;
   \                     ??RdBrd_ErrCdLogErrCd_2: (+1)
   \   000000D8   0x0030             MOVS     R0,R6
   \   000000DA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??RdBrd_ErrCdLogErrCd_1: (+1)
   \   000000DC   0xB015             ADD      SP,SP,#+84
   \   000000DE   0xBDF0             POP      {R4-R7,PC}       ;; return
    234          }
    235          

   \                                 In section .text, align 2, keep-with-next
    236          void RdBrd_BlinkErrCd( ErrorCodes ErrorCd )
    237          {
   \                     RdBrd_BlinkErrCd: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    238            int x;
    239            // Pull the BGM111 reset pin low 
    240            RoadBrd_gpio_Off( gRESET_BGM111 );
   \   00000004   0x2006             MOVS     R0,#+6
   \   00000006   0x.... 0x....      BL       RoadBrd_gpio_Off
    241          
    242            for (x=0; x<ErrorCd; x++)
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x0005             MOVS     R5,R0
   \                     ??RdBrd_BlinkErrCd_0: (+1)
   \   0000000E   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000010   0x42A5             CMP      R5,R4
   \   00000012   0xDA0D             BGE.N    ??RdBrd_BlinkErrCd_1
    243            {
    244              //SetLED(true);
    245              RoadBrd_gpio_On(BLUE_LED);
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x.... 0x....      BL       RoadBrd_gpio_On
    246              RoadBrd_Delay2( 100 );
   \   0000001A   0x2064             MOVS     R0,#+100
   \   0000001C   0x.... 0x....      BL       RoadBrd_Delay2
    247              //SetLED(false);
    248              RoadBrd_gpio_Off(BLUE_LED);
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0x.... 0x....      BL       RoadBrd_gpio_Off
    249              RoadBrd_Delay2( 100 );
   \   00000026   0x2064             MOVS     R0,#+100
   \   00000028   0x.... 0x....      BL       RoadBrd_Delay2
    250            }
   \   0000002C   0x1C6D             ADDS     R5,R5,#+1
   \   0000002E   0xE7EE             B.N      ??RdBrd_BlinkErrCd_0
    251            //SetLED(true);
    252            RoadBrd_gpio_On(BLUE_LED);
   \                     ??RdBrd_BlinkErrCd_1: (+1)
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0x.... 0x....      BL       RoadBrd_gpio_On
    253            RoadBrd_Delay2( 1000 );
   \   00000036   0xF44F 0x707A      MOV      R0,#+1000
   \   0000003A   0x.... 0x....      BL       RoadBrd_Delay2
    254            //SetLED(false
    255            RoadBrd_gpio_Off(BLUE_LED);
   \   0000003E   0x2001             MOVS     R0,#+1
   \   00000040   0x.... 0x....      BL       RoadBrd_gpio_Off
    256            RoadBrd_Delay2( 1000 );
   \   00000044   0xF44F 0x707A      MOV      R0,#+1000
   \   00000048   0x.... 0x....      BL       RoadBrd_Delay2
    257          }
   \   0000004C   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    258          
    259          /**
    260            * @brief  void RoadBrd_Delay( __IO uint32_t Delay ): Implement Delay by calling looping.
    261            *             NOTE: This avoids HAL_Delay since this could hang the processor in error handling.
    262            * @param Delay: specifies the delay time length, in milliseconds.
    263            * @retval None
    264            */

   \                                 In section .text, align 2, keep-with-next
    265          void RoadBrd_Delay2( __IO uint32_t Delay )
    266          {
   \                     RoadBrd_Delay2: (+1)
   \   00000000   0xB501             PUSH     {R0,LR}
    267            while( Delay != 0)
   \                     ??RoadBrd_Delay2_0: (+1)
   \   00000002   0x9800             LDR      R0,[SP, #+0]
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xD005             BEQ.N    ??RoadBrd_Delay2_1
    268            {
    269              delay_1ms();
   \   00000008   0x.... 0x....      BL       delay_1ms
    270              Delay--;
   \   0000000C   0x9800             LDR      R0,[SP, #+0]
   \   0000000E   0x1E40             SUBS     R0,R0,#+1
   \   00000010   0x9000             STR      R0,[SP, #+0]
   \   00000012   0xE7F6             B.N      ??RoadBrd_Delay2_0
    271            }
    272          }
   \                     ??RoadBrd_Delay2_1: (+1)
   \   00000014   0xBD01             POP      {R0,PC}          ;; return
    273          
    274          /**
    275            * @brief  This routine delays for 1 msec and returns
    276            *         from the BGM111
    277            * @param  none
    278            * @retval none
    279            */

   \                                 In section .text, align 2, keep-with-next
    280          void delay_1ms( void )
    281          {
    282            uint32_t count = 4400;      // Delay loop for 10msec
   \                     delay_1ms: (+1)
   \   00000000   0xF241 0x1030      MOVW     R0,#+4400
    283            
    284            while (count != 0)
   \                     ??delay_1ms_0: (+1)
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xD001             BEQ.N    ??delay_1ms_1
    285            {
    286              count--;
   \   00000008   0x1E40             SUBS     R0,R0,#+1
   \   0000000A   0xE7FB             B.N      ??delay_1ms_0
    287            }
    288          }
   \                     ??delay_1ms_1: (+1)
   \   0000000C   0x4770             BX       LR               ;; return
    289          
    290          //*****************************************************************************************************
    291          //*
    292          //* Exception Processing Code Here
    293          //*
    294          //*****************************************************************************************************
    295          
    296          /**
    297            * @brief  Hard Fault Exception Handler
    298            * @param  none
    299            * @retval none
    300            */

   \                                 In section .text, align 2, keep-with-next
    301          void HardFault_Handler(void)
    302          { 
   \                     HardFault_Handler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    303            SystemInit();
   \   00000002   0x.... 0x....      BL       SystemInit
    304            RdBrd_ErrCdLogErrCd( ERROR_BGM_OVERFLOW, MODULE_bgm111 );
   \   00000006   0x2102             MOVS     R1,#+2
   \   00000008   0x2011             MOVS     R0,#+17
   \   0000000A   0x.... 0x....      BL       RdBrd_ErrCdLogErrCd
    305            HAL_NVIC_SystemReset();
   \   0000000E   0x.... 0x....      BL       HAL_NVIC_SystemReset
    306          }
   \   00000012   0xBD01             POP      {R0,PC}          ;; return
    307          
    308          /**
    309            * @brief  Hard Fault Exception Handler
    310            * @param  none
    311            * @retval none
    312            */

   \                                 In section .text, align 2, keep-with-next
    313          void MemManage_Handler(void)
    314          { 
   \                     MemManage_Handler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    315            SystemInit();
   \   00000002   0x.... 0x....      BL       SystemInit
    316            RdBrd_ErrCdLogErrCd( ERROR_BGM_OVERFLOW, MODULE_bgm111 );
   \   00000006   0x2102             MOVS     R1,#+2
   \   00000008   0x2011             MOVS     R0,#+17
   \   0000000A   0x.... 0x....      BL       RdBrd_ErrCdLogErrCd
    317            HAL_NVIC_SystemReset();
   \   0000000E   0x.... 0x....      BL       HAL_NVIC_SystemReset
    318          }
   \   00000012   0xBD01             POP      {R0,PC}          ;; return
    319          
    320          /**
    321            * @brief  Useage Fault Exception Handler
    322            * @param  none
    323            * @retval none
    324            */

   \                                 In section .text, align 2, keep-with-next
    325          void UsageFault_Handler(void)
    326          { 
   \                     UsageFault_Handler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    327            SystemInit();
   \   00000002   0x.... 0x....      BL       SystemInit
    328            RdBrd_ErrCdLogErrCd( ERROR_BGM_OVERFLOW, MODULE_bgm111 );
   \   00000006   0x2102             MOVS     R1,#+2
   \   00000008   0x2011             MOVS     R0,#+17
   \   0000000A   0x.... 0x....      BL       RdBrd_ErrCdLogErrCd
    329            HAL_NVIC_SystemReset();
   \   0000000E   0x.... 0x....      BL       HAL_NVIC_SystemReset
    330          }
   \   00000012   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     errStruct

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x........         DC32     CodesArray

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x........         DC32     ModuleArray

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x........         DC32     ?_25

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x........         DC32     ?_26

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x........         DC32     ?_27

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x20 0x20          DC8 "       "
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x49 0x32          DC8 "I2CBUSY"
   \              0x43 0x42    
   \              0x55 0x53    
   \              0x59 0x00    

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x56 0x4D          DC8 "VM_INIT"
   \              0x5F 0x49    
   \              0x4E 0x49    
   \              0x54 0x00    

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x42 0x47          DC8 "BGMSYNC"
   \              0x4D 0x53    
   \              0x59 0x4E    
   \              0x43 0x00    

   \                                 In section .rodata, align 4
   \                     ?_4:
   \   00000000   0x47 0x45          DC8 "GEYE_IN"
   \              0x59 0x45    
   \              0x5F 0x49    
   \              0x4E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_5:
   \   00000000   0x50 0x52          DC8 "PRSS_IN"
   \              0x53 0x53    
   \              0x5F 0x49    
   \              0x4E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_6:
   \   00000000   0x42 0x47          DC8 "BGMRFUL"
   \              0x4D 0x52    
   \              0x46 0x55    
   \              0x4C 0x00    

   \                                 In section .rodata, align 4
   \                     ?_7:
   \   00000000   0x48 0x55          DC8 "HUMD_IN"
   \              0x4D 0x44    
   \              0x5F 0x49    
   \              0x4E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_8:
   \   00000000   0x52 0x47          DC8 "RGBINIT"
   \              0x42 0x49    
   \              0x4E 0x49    
   \              0x54 0x00    

   \                                 In section .rodata, align 4
   \                     ?_9:
   \   00000000   0x54 0x45          DC8 "TEMPINI"
   \              0x4D 0x50    
   \              0x49 0x4E    
   \              0x49 0x00    

   \                                 In section .rodata, align 4
   \                     ?_10:
   \   00000000   0x43 0x45          DC8 "CEYE_IN"
   \              0x59 0x45    
   \              0x5F 0x49    
   \              0x4E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_11:
   \   00000000   0x49 0x32          DC8 "I2CSCLK"
   \              0x43 0x53    
   \              0x43 0x4C    
   \              0x4B 0x00    

   \                                 In section .rodata, align 4
   \                     ?_12:
   \   00000000   0x49 0x32          DC8 "I2CSDAT"
   \              0x43 0x53    
   \              0x44 0x41    
   \              0x54 0x00    

   \                                 In section .rodata, align 4
   \                     ?_13:
   \   00000000   0x42 0x47          DC8 "BGMCNCT"
   \              0x4D 0x43    
   \              0x4E 0x43    
   \              0x54 0x00    

   \                                 In section .rodata, align 4
   \                     ?_14:
   \   00000000   0x42 0x47          DC8 "BGMHRBT"
   \              0x4D 0x48    
   \              0x52 0x42    
   \              0x54 0x00    

   \                                 In section .rodata, align 4
   \                     ?_15:
   \   00000000   0x42 0x47          DC8 "BGTXFUL"
   \              0x54 0x58    
   \              0x46 0x55    
   \              0x4C 0x00    

   \                                 In section .rodata, align 4
   \                     ?_16:
   \   00000000   0x46 0x52          DC8 "FRMINIT"
   \              0x4D 0x49    
   \              0x4E 0x49    
   \              0x54 0x00    

   \                                 In section .rodata, align 4
   \                     ?_17:
   \   00000000   0x42 0x47          DC8 "BGMOVFL"
   \              0x4D 0x4F    
   \              0x56 0x46    
   \              0x4C 0x00    

   \                                 In section .rodata, align 4
   \                     ?_18:
   \   00000000   0x42 0x47          DC8 "BGMSCNC"
   \              0x4D 0x53    
   \              0x43 0x4E    
   \              0x43 0x00    

   \                                 In section .rodata, align 4
   \                     ?_19:
   \   00000000   0x43 0x41          DC8 "CALINIT"
   \              0x4C 0x49    
   \              0x4E 0x49    
   \              0x54 0x00    

   \                                 In section .rodata, align 4
   \                     ?_20:
   \   00000000   0x52 0x50          DC8 "RPR_I2C"
   \              0x52 0x5F    
   \              0x49 0x32    
   \              0x43 0x00    

   \                                 In section .rodata, align 4
   \                     ?_21:
   \   00000000   0x20 0x20          DC8 "   main"
   \              0x20 0x6D    
   \              0x61 0x69    
   \              0x6E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_22:
   \   00000000   0x20 0x62          DC8 " bgm111"
   \              0x67 0x6D    
   \              0x31 0x31    
   \              0x31 0x00    

   \                                 In section .rodata, align 4
   \                     ?_23:
   \   00000000   0x20 0x20          DC8 "    i2c"
   \              0x20 0x20    
   \              0x69 0x32    
   \              0x63 0x00    

   \                                 In section .rodata, align 4
   \                     ?_24:
   \   00000000   0x41 0x70          DC8 "AppData"
   \              0x70 0x44    
   \              0x61 0x74    
   \              0x61 0x00    

   \                                 In section .rodata, align 4
   \                     ?_25:
   \   00000000   0x25 0x73          DC8 "%s ERROR: %s\015\012\015\012"
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x0D 0x0A    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_26:
   \   00000000   0x3C 0x53          DC8 "<STATUS>%s ERROR: %s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x25 0x73    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_27:
   \   00000000   0x0D 0x0A          DC8 "\015\012\015\012"
   \              0x0D 0x0A    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    331          
    332          
    333          
    334          /************************ (C) COPYRIGHT WeatherCloud *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   HardFault_Handler
         8   -> HAL_NVIC_SystemReset
         8   -> RdBrd_ErrCdLogErrCd
         8   -> SystemInit
       8   MemManage_Handler
         8   -> HAL_NVIC_SystemReset
         8   -> RdBrd_ErrCdLogErrCd
         8   -> SystemInit
      16   RBBufFree
        16   -> RBBufUsed
       0   RBBufUsed
       0   RBBuffer_LowLevel_Init
      16   RBIsBufFull
        16   -> RBNextBufIdx
       0   RBNextBufIdx
      16   RdBrd_BlinkErrCd
        16   -> RoadBrd_Delay2
        16   -> RoadBrd_gpio_Off
        16   -> RoadBrd_gpio_On
       0   RdBrd_ErrCdGetCrntErrCd
       8   RdBrd_ErrCdGetErrCnt
         8   -> RBBufUsed
       8   RdBrd_ErrCdGetNxtErrCd
         8   -> RBNextBufIdx
       8   RdBrd_ErrCdInit
         8   -> RBBuffer_LowLevel_Init
     104   RdBrd_ErrCdLogErrCd
       104   -> BGM111_DataConnected
       104   -> HAL_GetTick
       104   -> RBIsBufFull
       104   -> RBNextBufIdx
       104   -> RoadBrd_BGMTsk
       104   -> RoadBrd_UART_Transmit
       104   -> SendApp_String
       104   -> sprintf
       8   RoadBrd_Delay2
         8   -> delay_1ms
       8   UsageFault_Handler
         8   -> HAL_NVIC_SystemReset
         8   -> RdBrd_ErrCdLogErrCd
         8   -> SystemInit
       0   delay_1ms


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       8  ?_0
       8  ?_1
       8  ?_10
       8  ?_11
       8  ?_12
       8  ?_13
       8  ?_14
       8  ?_15
       8  ?_16
       8  ?_17
       8  ?_18
       8  ?_19
       8  ?_2
       8  ?_20
       8  ?_21
       8  ?_22
       8  ?_23
       8  ?_24
      20  ?_25
      32  ?_26
       8  ?_27
       8  ?_3
       8  ?_4
       8  ?_5
       8  ?_6
       8  ?_7
       8  ?_8
       8  ?_9
      96  CodesArray
      20  HardFault_Handler
      20  MemManage_Handler
      32  ModuleArray
      26  RBBufFree
      18  RBBufUsed
      18  RBBuffer_LowLevel_Init
      30  RBIsBufFull
      14  RBNextBufIdx
      78  RdBrd_BlinkErrCd
      14  RdBrd_ErrCdGetCrntErrCd
      20  RdBrd_ErrCdGetErrCnt
      36  RdBrd_ErrCdGetNxtErrCd
      10  RdBrd_ErrCdInit
     224  RdBrd_ErrCdLogErrCd
      22  RoadBrd_Delay2
      20  UsageFault_Handler
      14  delay_1ms
     804  errStruct

 
 804 bytes in section .bss
 388 bytes in section .rodata
 608 bytes in section .text
 
 608 bytes of CODE  memory
 388 bytes of CONST memory
 804 bytes of DATA  memory

Errors: none
Warnings: none
