###############################################################################
#
# IAR ANSI C/C++ Compiler V7.60.2.11341/W32 for ARM       30/Jan/2018  13:45:43
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\Humidity.c
#    Command line =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\Humidity.c
#        -D USE_HAL_DRIVER -D STM32L152xE -D USE_STM32L1XX_NUCLEO -D ASCII -D
#        REV_L -D LONG_DELAY -D XML_SHRT -D WM -lCN
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\WeatherMesh\List
#        -o
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\WeatherMesh\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.4\arm\INC\c\DLib_Config_Full.h"
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/STM32L1xx_HAL_Driver/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/STM32L1xx_HAL_Driver/Inc/Legacy\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/BSP/STM32L1xx_Nucleo\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/portable/IAR/ARM_CM3\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Core/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/CMSIS/Include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/CMSIS/Device/ST/STM32L1xx/Include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\..\Middlewares\Third_Party\BgLib\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.4\arm\CMSIS\Include\"
#    Locale       =  English_United States.1252
#    List file    =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\WeatherMesh\List\Humidity.lst
#    Object file  =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\WeatherMesh\Obj\Humidity.o
#
###############################################################################

D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\Humidity.c
      1          /**
      2            ******************************************************************************
      3            * File Name          : Humidity.c
      4            * Description        : This file provides code for the control of the Humidity
      5            *                      sensor hardware based on the HTS221TR chip.
      6            ******************************************************************************
      7            *
      8            * COPYRIGHT(c) 2016 WeatherCloud
      9            *
     10            * Redistribution and use in source and binary forms, with or without modification,
     11            * are permitted provided that the following conditions are met:
     12            *   1. Redistributions of source code must retain the above copyright notice,
     13            *      this list of conditions and the following disclaimer.
     14            *   2. Redistributions in binary form must reproduce the above copyright notice,
     15            *      this list of conditions and the following disclaimer in the documentation
     16            *      and/or other materials provided with the distribution.
     17            *   3. Neither the name of WeatherCloud nor the names of its contributors
     18            *      may be used to endorse or promote products derived from this software
     19            *      without specific prior written permission.
     20            *
     21            * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     22            * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     23            * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     24            * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
     25            * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     26            * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     27            * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
     28            * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
     29            * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
     30            * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     31            *
     32            ******************************************************************************
     33            */
     34          
     35          /* Includes ------------------------------------------------------------------*/
     36          #include "Humidity.h"
     37          #include "Calibration.h"
     38          
     39            /**
     40            * @brief  This function initializes the Humidity sensor Hardware. 
     41            * @retval HAL_StatusTypeDef:     HAL_OK:       Tasking of block of data to UART success.
     42            *                                HAL_ERROR:    Error found in Tasking or data passed.
     43            *                                HAL_BUSY:     UART is busy.
     44            *                                HAL_TIMEOUT:  UART timed out.
     45            */

   \                                 In section .text, align 2, keep-with-next
     46          HAL_StatusTypeDef RoadBrd_HumidityInit( void )
     47          {
   \                     RoadBrd_HumidityInit: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
     48            HAL_StatusTypeDef Status;
     49            int num_bytes;
     50            uint8_t i2cData[4];  
     51          
     52            // Load Humidity and temperature average configuration..
     53            num_bytes = 1;    // No Data to Pass.
   \   00000002   0x2001             MOVS     R0,#+1
   \   00000004   0x0005             MOVS     R5,R0
     54            i2cData[0] = (uint8_t)(HMDTY_SNSR_AVGHx2_5 + HMDTY_SNSR_AVGTx2_0);
   \   00000006   0x2005             MOVS     R0,#+5
   \   00000008   0xF88D 0x0000      STRB     R0,[SP, #+0]
     55            i2cData[1] = 0x00;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0xF88D 0x0001      STRB     R0,[SP, #+1]
     56          #ifdef REV_L
     57            Status = RoadBrd_I2C_Master_Transmit_CMDData_IT((uint16_t)HMDTY_SNSR, (uint8_t)HMDTY_SNSR_AV_CONF, i2cData, (uint16_t)num_bytes);
   \   00000012   0x0028             MOVS     R0,R5
   \   00000014   0x0003             MOVS     R3,R0
   \   00000016   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000018   0x466A             MOV      R2,SP
   \   0000001A   0x2110             MOVS     R1,#+16
   \   0000001C   0x20BE             MOVS     R0,#+190
   \   0000001E   0x.... 0x....      BL       RoadBrd_I2C_Master_Transmit_CMDData_IT
   \   00000022   0x0004             MOVS     R4,R0
     58            // 2. If Status was good, Time to get response.
     59            if (Status == HAL_OK)
   \   00000024   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000026   0x2C00             CMP      R4,#+0
   \   00000028   0xD10D             BNE.N    ??RoadBrd_HumidityInit_0
     60            {
     61              // Now wait for completion of XMIT.
     62              Status = RoadBrd_WaitForState( (uint16_t)( I2C_TIMEOUT/5 ));
   \   0000002A   0x2064             MOVS     R0,#+100
   \   0000002C   0x.... 0x....      BL       RoadBrd_WaitForState
   \   00000030   0x0004             MOVS     R4,R0
     63              if (Status != HAL_OK)
   \   00000032   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000034   0x2C00             CMP      R4,#+0
   \   00000036   0xD002             BEQ.N    ??RoadBrd_HumidityInit_1
     64                return Status;
   \   00000038   0x0020             MOVS     R0,R4
   \   0000003A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003C   0xE032             B.N      ??RoadBrd_HumidityInit_2
     65            }// EndIf (Status == HAL_OK) RoadBrd_I2C_Master_Transmit_CMDData_IT
     66            else
     67              return Status;
     68          #else
     69            Status = RoadBrd_I2C_Master_Transmit_CMDData((uint16_t)HMDTY_SNSR, (uint8_t)HMDTY_SNSR_AV_CONF, i2cData, (uint16_t)num_bytes, I2C_TIMEOUT);
     70          #endif
     71            if (Status != HAL_OK)
   \                     ??RoadBrd_HumidityInit_1: (+1)
   \   0000003E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000040   0x2C00             CMP      R4,#+0
   \   00000042   0xD103             BNE.N    ??RoadBrd_HumidityInit_3
   \   00000044   0xE005             B.N      ??RoadBrd_HumidityInit_4
   \                     ??RoadBrd_HumidityInit_0: (+1)
   \   00000046   0x0020             MOVS     R0,R4
   \   00000048   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004A   0xE02B             B.N      ??RoadBrd_HumidityInit_2
     72              return Status;
   \                     ??RoadBrd_HumidityInit_3: (+1)
   \   0000004C   0x0020             MOVS     R0,R4
   \   0000004E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000050   0xE028             B.N      ??RoadBrd_HumidityInit_2
     73            
     74            // Load Control register 1, 2 and3.
     75            num_bytes = 3;    // No Data to Pass.
   \                     ??RoadBrd_HumidityInit_4: (+1)
   \   00000052   0x2003             MOVS     R0,#+3
   \   00000054   0x0005             MOVS     R5,R0
     76            i2cData[0] = (uint8_t)(HMDTY_SNSR_PD_ON + HMDTY_SNSR_BDU_CONT + HMDTY_SNSR_ODR_1Hz);
   \   00000056   0x2081             MOVS     R0,#+129
   \   00000058   0xF88D 0x0000      STRB     R0,[SP, #+0]
     77            i2cData[1] = (uint8_t)(HMDTY_SNSR_BOOT_NRML + HMDTY_SNSR_HEATER_OFF);
   \   0000005C   0x2000             MOVS     R0,#+0
   \   0000005E   0xF88D 0x0001      STRB     R0,[SP, #+1]
     78            i2cData[2] = (uint8_t)(HMDTY_SNSR_DRDYHL_ACTVH + HMDTY_SNSR_PPOD_PSHPLL + HMDTY_SNSR_DRDY_NO);
   \   00000062   0x2000             MOVS     R0,#+0
   \   00000064   0xF88D 0x0002      STRB     R0,[SP, #+2]
     79            i2cData[3] = 0x00;
   \   00000068   0x2000             MOVS     R0,#+0
   \   0000006A   0xF88D 0x0003      STRB     R0,[SP, #+3]
     80          #ifdef REV_L
     81            Status = RoadBrd_I2C_Master_Transmit_CMDData_IT((uint16_t)HMDTY_SNSR, (uint8_t)(HMDTY_SNSR_CTRL_REG1 | 0x80), i2cData, (uint16_t)num_bytes);
   \   0000006E   0x0028             MOVS     R0,R5
   \   00000070   0x0003             MOVS     R3,R0
   \   00000072   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000074   0x466A             MOV      R2,SP
   \   00000076   0x21A0             MOVS     R1,#+160
   \   00000078   0x20BE             MOVS     R0,#+190
   \   0000007A   0x.... 0x....      BL       RoadBrd_I2C_Master_Transmit_CMDData_IT
   \   0000007E   0x0004             MOVS     R4,R0
     82            // 2. If Status was good, Time to get response.
     83            if (Status == HAL_OK)
   \   00000080   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000082   0x2C00             CMP      R4,#+0
   \   00000084   0xD10C             BNE.N    ??RoadBrd_HumidityInit_5
     84            {
     85              // Now wait for completion of XMIT.
     86              Status = RoadBrd_WaitForState( (uint16_t)( I2C_TIMEOUT/5 ));
   \   00000086   0x2064             MOVS     R0,#+100
   \   00000088   0x.... 0x....      BL       RoadBrd_WaitForState
   \   0000008C   0x0004             MOVS     R4,R0
     87              if (Status != HAL_OK)
   \   0000008E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000090   0x2C00             CMP      R4,#+0
   \   00000092   0xD002             BEQ.N    ??RoadBrd_HumidityInit_6
     88                return Status;
   \   00000094   0x0020             MOVS     R0,R4
   \   00000096   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000098   0xE004             B.N      ??RoadBrd_HumidityInit_2
     89            }// EndIf (Status == HAL_OK) RoadBrd_I2C_Master_Transmit_CMDData_IT
     90            else
     91              return Status;
     92          #else
     93            Status = RoadBrd_I2C_Master_Transmit_CMDData((uint16_t)HMDTY_SNSR, (uint8_t)(HMDTY_SNSR_CTRL_REG1 | 0x80), i2cData, (uint16_t)num_bytes, I2C_TIMEOUT);
     94          #endif
     95            return Status;
   \                     ??RoadBrd_HumidityInit_6: (+1)
   \   0000009A   0x0020             MOVS     R0,R4
   \   0000009C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000009E   0xE001             B.N      ??RoadBrd_HumidityInit_2
   \                     ??RoadBrd_HumidityInit_5: (+1)
   \   000000A0   0x0020             MOVS     R0,R4
   \   000000A2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??RoadBrd_HumidityInit_2: (+1)
   \   000000A4   0xBD32             POP      {R1,R4,R5,PC}    ;; return
     96          }
     97          
     98          /**
     99            * @brief  This function reads HTS221 Humidity output registers, and calculates humidity. It
    100            * then loads these values to the passed Humidity Structure.
    101            * @param  HumidtyPtr HPtr: Ptr to structure to receive the final values of Humidity.
    102            * @retval HAL_StatusTypeDef:     HAL_OK:       Tasking of block of data to UART success.
    103            *                                HAL_ERROR:    Error found in Tasking or data passed.
    104            *                                HAL_BUSY:     UART is busy.
    105            *                                HAL_TIMEOUT:  UART timed out.
    106            */

   \                                 In section .text, align 2, keep-with-next
    107          HAL_StatusTypeDef RoadBrd_Humidity_ReadHumidity_Scaled( HumidtyPtr HPtr )
    108          {
   \                     RoadBrd_Humidity_ReadHumidity_Scaled: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB085             SUB      SP,SP,#+20
   \   00000006   0x0004             MOVS     R4,R0
    109            HAL_StatusTypeDef Status;
    110            int num_bytes;
    111            uint8_t i2cData[4];  
    112            int16_t H0_T0_out, H1_T0_out, H_T_out;
    113            int16_t H0_rh, H1_rh, tmp3;
    114            char tempBffr2[5];
    115            float tmp, tmp2;
    116            
    117            Status = HAL_OK;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x0005             MOVS     R5,R0
    118            
    119            /* 1. Read H0_rH and H1_rH coefficients*/
    120            num_bytes = 0;    // No Data to Pass.
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x4680             MOV      R8,R0
    121            i2cData[0] = 0x00;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xF88D 0x0000      STRB     R0,[SP, #+0]
    122          #ifdef REV_L
    123            Status = RoadBrd_I2C_Master_Transmit_CMDData_IT((uint16_t)HMDTY_SNSR, (uint8_t)(HMDTY_SNSR_H0rH_x2 | 0x80), i2cData, (uint16_t)num_bytes);
   \   00000016   0x4640             MOV      R0,R8
   \   00000018   0x0003             MOVS     R3,R0
   \   0000001A   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000001C   0x466A             MOV      R2,SP
   \   0000001E   0x21B0             MOVS     R1,#+176
   \   00000020   0x20BE             MOVS     R0,#+190
   \   00000022   0x.... 0x....      BL       RoadBrd_I2C_Master_Transmit_CMDData_IT
   \   00000026   0x0005             MOVS     R5,R0
    124            // If Status was good, Time to get response.
    125            if (Status == HAL_OK)
   \   00000028   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000002A   0x2D00             CMP      R5,#+0
   \   0000002C   0xD13E             BNE.N    ??RoadBrd_Humidity_ReadHumidity_Scaled_0
    126            {
    127              // Now wait for completion of XMIT.
    128              Status = RoadBrd_WaitForState( (uint16_t)( I2C_TIMEOUT/5 ));
   \   0000002E   0x2064             MOVS     R0,#+100
   \   00000030   0x.... 0x....      BL       RoadBrd_WaitForState
   \   00000034   0x0005             MOVS     R5,R0
    129              if (Status != HAL_OK)
   \   00000036   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000038   0x2D00             CMP      R5,#+0
   \   0000003A   0xD002             BEQ.N    ??RoadBrd_Humidity_ReadHumidity_Scaled_1
    130                return Status;
   \   0000003C   0x0028             MOVS     R0,R5
   \   0000003E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000040   0xE15E             B.N      ??RoadBrd_Humidity_ReadHumidity_Scaled_2
    131              else
    132              {
    133                Status =  RoadBrd_I2C_Master_Receive_IT((uint16_t)HMDTY_SNSR, i2cData, (uint16_t)2);
   \                     ??RoadBrd_Humidity_ReadHumidity_Scaled_1: (+1)
   \   00000042   0x2202             MOVS     R2,#+2
   \   00000044   0x4669             MOV      R1,SP
   \   00000046   0x20BE             MOVS     R0,#+190
   \   00000048   0x.... 0x....      BL       RoadBrd_I2C_Master_Receive_IT
   \   0000004C   0x0005             MOVS     R5,R0
    134                if (Status == HAL_OK)
   \   0000004E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000050   0x2D00             CMP      R5,#+0
   \   00000052   0xD128             BNE.N    ??RoadBrd_Humidity_ReadHumidity_Scaled_3
    135                {
    136                  // Now wait for completion of Receive.
    137                  Status = RoadBrd_WaitForState( (uint16_t)( I2C_TIMEOUT/5 ));
   \   00000054   0x2064             MOVS     R0,#+100
   \   00000056   0x.... 0x....      BL       RoadBrd_WaitForState
   \   0000005A   0x0005             MOVS     R5,R0
    138                  if (Status != HAL_OK)
   \   0000005C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000005E   0x2D00             CMP      R5,#+0
   \   00000060   0xD002             BEQ.N    ??RoadBrd_Humidity_ReadHumidity_Scaled_4
    139                    return Status;
   \   00000062   0x0028             MOVS     R0,R5
   \   00000064   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000066   0xE14B             B.N      ??RoadBrd_Humidity_ReadHumidity_Scaled_2
    140                } // EndIf (Status == HAL_OK) RoadBrd_I2C_Master_Receive_IT
    141                else
    142                  return Status;
    143              } // EndElse (Status != HAL_OK) RoadBrd_WaitForState
    144            }// EndIf (Status == HAL_OK) RoadBrd_I2C_Master_Transmit_CMDData_IT
    145            else
    146              return Status;
    147          #else
    148            Status = RoadBrd_I2C_Master_Transmit_CMDData((uint16_t)HMDTY_SNSR, (uint8_t)(HMDTY_SNSR_H0rH_x2 | 0x80), i2cData, (uint16_t)num_bytes, I2C_TIMEOUT);
    149            // If Status was good, Time to get response.
    150            if (Status == HAL_OK)
    151            {
    152              Status =  RoadBrd_I2C_Master_Receive((uint16_t)HMDTY_SNSR, i2cData, (uint16_t)2, I2C_TIMEOUT);
    153              if (Status != HAL_OK)
    154                return Status;
    155            }
    156            else
    157              return Status;
    158          #endif
    159            
    160            // 1a. Now extract Coefficients.
    161            H0_rh = i2cData[0]>>1;
   \                     ??RoadBrd_Humidity_ReadHumidity_Scaled_4: (+1)
   \   00000068   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000006C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000006E   0x0840             LSRS     R0,R0,#+1
   \   00000070   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000072   0x4681             MOV      R9,R0
    162            H1_rh = i2cData[1]>>1;
   \   00000074   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   00000078   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000007A   0x0840             LSRS     R0,R0,#+1
   \   0000007C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000007E   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    163            
    164            /*2. Read H0_T0_OUT */
    165            num_bytes = 0;    // No Data to Pass.
   \   00000082   0x2000             MOVS     R0,#+0
   \   00000084   0x4680             MOV      R8,R0
    166            i2cData[0] = 0x00;
   \   00000086   0x2000             MOVS     R0,#+0
   \   00000088   0xF88D 0x0000      STRB     R0,[SP, #+0]
    167          #ifdef REV_L
    168            Status = RoadBrd_I2C_Master_Transmit_CMDData_IT((uint16_t)HMDTY_SNSR, (uint8_t)(HMDTY_SNSR_H0_T0_OUT | 0x80), i2cData, (uint16_t)num_bytes);
   \   0000008C   0x4640             MOV      R0,R8
   \   0000008E   0x0003             MOVS     R3,R0
   \   00000090   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000092   0x466A             MOV      R2,SP
   \   00000094   0x21B6             MOVS     R1,#+182
   \   00000096   0x20BE             MOVS     R0,#+190
   \   00000098   0x.... 0x....      BL       RoadBrd_I2C_Master_Transmit_CMDData_IT
   \   0000009C   0x0005             MOVS     R5,R0
    169            // If Status was good, Time to get response.
    170            if (Status == HAL_OK)
   \   0000009E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000A0   0x2D00             CMP      R5,#+0
   \   000000A2   0xD13F             BNE.N    ??RoadBrd_Humidity_ReadHumidity_Scaled_5
   \   000000A4   0xE005             B.N      ??RoadBrd_Humidity_ReadHumidity_Scaled_6
   \                     ??RoadBrd_Humidity_ReadHumidity_Scaled_3: (+1)
   \   000000A6   0x0028             MOVS     R0,R5
   \   000000A8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000AA   0xE129             B.N      ??RoadBrd_Humidity_ReadHumidity_Scaled_2
   \                     ??RoadBrd_Humidity_ReadHumidity_Scaled_0: (+1)
   \   000000AC   0x0028             MOVS     R0,R5
   \   000000AE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000B0   0xE126             B.N      ??RoadBrd_Humidity_ReadHumidity_Scaled_2
    171            {
    172              // Now wait for completion of XMIT.
    173              Status = RoadBrd_WaitForState( (uint16_t)( I2C_TIMEOUT/5 ));
   \                     ??RoadBrd_Humidity_ReadHumidity_Scaled_6: (+1)
   \   000000B2   0x2064             MOVS     R0,#+100
   \   000000B4   0x.... 0x....      BL       RoadBrd_WaitForState
   \   000000B8   0x0005             MOVS     R5,R0
    174              if (Status != HAL_OK)
   \   000000BA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000BC   0x2D00             CMP      R5,#+0
   \   000000BE   0xD002             BEQ.N    ??RoadBrd_Humidity_ReadHumidity_Scaled_7
    175                return Status;
   \   000000C0   0x0028             MOVS     R0,R5
   \   000000C2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000C4   0xE11C             B.N      ??RoadBrd_Humidity_ReadHumidity_Scaled_2
    176              else
    177              {
    178                Status =  RoadBrd_I2C_Master_Receive_IT((uint16_t)HMDTY_SNSR, i2cData, (uint16_t)2);
   \                     ??RoadBrd_Humidity_ReadHumidity_Scaled_7: (+1)
   \   000000C6   0x2202             MOVS     R2,#+2
   \   000000C8   0x4669             MOV      R1,SP
   \   000000CA   0x20BE             MOVS     R0,#+190
   \   000000CC   0x.... 0x....      BL       RoadBrd_I2C_Master_Receive_IT
   \   000000D0   0x0005             MOVS     R5,R0
    179                if (Status == HAL_OK)
   \   000000D2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000D4   0x2D00             CMP      R5,#+0
   \   000000D6   0xD122             BNE.N    ??RoadBrd_Humidity_ReadHumidity_Scaled_8
    180                {
    181                  // Now wait for completion of Receive.
    182                  Status = RoadBrd_WaitForState( (uint16_t)( I2C_TIMEOUT/5 ));
   \   000000D8   0x2064             MOVS     R0,#+100
   \   000000DA   0x.... 0x....      BL       RoadBrd_WaitForState
   \   000000DE   0x0005             MOVS     R5,R0
    183                  if (Status != HAL_OK)
   \   000000E0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000E2   0x2D00             CMP      R5,#+0
   \   000000E4   0xD002             BEQ.N    ??RoadBrd_Humidity_ReadHumidity_Scaled_9
    184                    return Status;
   \   000000E6   0x0028             MOVS     R0,R5
   \   000000E8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000EA   0xE109             B.N      ??RoadBrd_Humidity_ReadHumidity_Scaled_2
    185                } // EndIf (Status == HAL_OK) RoadBrd_I2C_Master_Receive_IT
    186                else
    187                  return Status;
    188              } // EndElse (Status != HAL_OK) RoadBrd_WaitForState
    189            }// EndIf (Status == HAL_OK) RoadBrd_I2C_Master_Transmit_CMDData_IT
    190            else
    191              return Status;
    192          #else
    193            Status = RoadBrd_I2C_Master_Transmit_CMDData((uint16_t)HMDTY_SNSR, (uint8_t)(HMDTY_SNSR_H0_T0_OUT | 0x80), i2cData, (uint16_t)num_bytes, I2C_TIMEOUT);
    194            // If Status was good, Time to get response.
    195            if (Status == HAL_OK)
    196            {
    197              Status =  RoadBrd_I2C_Master_Receive((uint16_t)HMDTY_SNSR, i2cData, (uint16_t)2, I2C_TIMEOUT);
    198              if (Status != HAL_OK)
    199                return Status;
    200            }
    201            else
    202              return Status;
    203          #endif
    204            H0_T0_out = (((uint16_t)i2cData[1])<<8) | (uint16_t)i2cData[0];
   \                     ??RoadBrd_Humidity_ReadHumidity_Scaled_9: (+1)
   \   000000EC   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   000000F0   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   000000F4   0xEA51 0x2000      ORRS     R0,R1,R0, LSL #+8
   \   000000F8   0x4682             MOV      R10,R0
    205            
    206            /*3. Read H1_T0_OUT */
    207            num_bytes = 0;    // No Data to Pass.
   \   000000FA   0x2000             MOVS     R0,#+0
   \   000000FC   0x4680             MOV      R8,R0
    208            i2cData[0] = 0x00;
   \   000000FE   0x2000             MOVS     R0,#+0
   \   00000100   0xF88D 0x0000      STRB     R0,[SP, #+0]
    209          #ifdef REV_L
    210            Status = RoadBrd_I2C_Master_Transmit_CMDData_IT((uint16_t)HMDTY_SNSR, (uint8_t)(HMDTY_SNSR_H1_T0_OUT | 0x80), i2cData, (uint16_t)num_bytes);
   \   00000104   0x4640             MOV      R0,R8
   \   00000106   0x0003             MOVS     R3,R0
   \   00000108   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000010A   0x466A             MOV      R2,SP
   \   0000010C   0x21BA             MOVS     R1,#+186
   \   0000010E   0x20BE             MOVS     R0,#+190
   \   00000110   0x.... 0x....      BL       RoadBrd_I2C_Master_Transmit_CMDData_IT
   \   00000114   0x0005             MOVS     R5,R0
    211            // If Status was good, Time to get response.
    212            if (Status == HAL_OK)
   \   00000116   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000118   0x2D00             CMP      R5,#+0
   \   0000011A   0xD140             BNE.N    ??RoadBrd_Humidity_ReadHumidity_Scaled_10
   \   0000011C   0xE005             B.N      ??RoadBrd_Humidity_ReadHumidity_Scaled_11
   \                     ??RoadBrd_Humidity_ReadHumidity_Scaled_8: (+1)
   \   0000011E   0x0028             MOVS     R0,R5
   \   00000120   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000122   0xE0ED             B.N      ??RoadBrd_Humidity_ReadHumidity_Scaled_2
   \                     ??RoadBrd_Humidity_ReadHumidity_Scaled_5: (+1)
   \   00000124   0x0028             MOVS     R0,R5
   \   00000126   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000128   0xE0EA             B.N      ??RoadBrd_Humidity_ReadHumidity_Scaled_2
    213            {
    214              // Now wait for completion of XMIT.
    215              Status = RoadBrd_WaitForState( (uint16_t)( I2C_TIMEOUT/5 ));
   \                     ??RoadBrd_Humidity_ReadHumidity_Scaled_11: (+1)
   \   0000012A   0x2064             MOVS     R0,#+100
   \   0000012C   0x.... 0x....      BL       RoadBrd_WaitForState
   \   00000130   0x0005             MOVS     R5,R0
    216              if (Status != HAL_OK)
   \   00000132   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000134   0x2D00             CMP      R5,#+0
   \   00000136   0xD002             BEQ.N    ??RoadBrd_Humidity_ReadHumidity_Scaled_12
    217                return Status;
   \   00000138   0x0028             MOVS     R0,R5
   \   0000013A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000013C   0xE0E0             B.N      ??RoadBrd_Humidity_ReadHumidity_Scaled_2
    218              else
    219              {
    220                Status =  RoadBrd_I2C_Master_Receive_IT((uint16_t)HMDTY_SNSR, i2cData, (uint16_t)2);
   \                     ??RoadBrd_Humidity_ReadHumidity_Scaled_12: (+1)
   \   0000013E   0x2202             MOVS     R2,#+2
   \   00000140   0x4669             MOV      R1,SP
   \   00000142   0x20BE             MOVS     R0,#+190
   \   00000144   0x.... 0x....      BL       RoadBrd_I2C_Master_Receive_IT
   \   00000148   0x0005             MOVS     R5,R0
    221                if (Status == HAL_OK)
   \   0000014A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000014C   0x2D00             CMP      R5,#+0
   \   0000014E   0xD123             BNE.N    ??RoadBrd_Humidity_ReadHumidity_Scaled_13
    222                {
    223                  // Now wait for completion of Receive.
    224                  Status = RoadBrd_WaitForState( (uint16_t)( I2C_TIMEOUT/5 ));
   \   00000150   0x2064             MOVS     R0,#+100
   \   00000152   0x.... 0x....      BL       RoadBrd_WaitForState
   \   00000156   0x0005             MOVS     R5,R0
    225                  if (Status != HAL_OK)
   \   00000158   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000015A   0x2D00             CMP      R5,#+0
   \   0000015C   0xD002             BEQ.N    ??RoadBrd_Humidity_ReadHumidity_Scaled_14
    226                    return Status;
   \   0000015E   0x0028             MOVS     R0,R5
   \   00000160   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000162   0xE0CD             B.N      ??RoadBrd_Humidity_ReadHumidity_Scaled_2
    227                } // EndIf (Status == HAL_OK) RoadBrd_I2C_Master_Receive_IT
    228                else
    229                  return Status;
    230              } // EndElse (Status != HAL_OK) RoadBrd_WaitForState
    231            }// EndIf (Status == HAL_OK) RoadBrd_I2C_Master_Transmit_CMDData_IT
    232            else
    233              return Status;
    234          #else
    235            Status = RoadBrd_I2C_Master_Transmit_CMDData((uint16_t)HMDTY_SNSR, (uint8_t)(HMDTY_SNSR_H1_T0_OUT | 0x80), i2cData, (uint16_t)num_bytes, I2C_TIMEOUT);
    236            // If Status was good, Time to get response.
    237            if (Status == HAL_OK)
    238            {
    239              Status =  RoadBrd_I2C_Master_Receive((uint16_t)HMDTY_SNSR, i2cData, (uint16_t)2, I2C_TIMEOUT);
    240              if (Status != HAL_OK)
    241                return Status;
    242            }
    243            else
    244              return Status;
    245          #endif
    246            H1_T0_out = (((uint16_t)i2cData[1])<<8) | (uint16_t)i2cData[0];
   \                     ??RoadBrd_Humidity_ReadHumidity_Scaled_14: (+1)
   \   00000164   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   00000168   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   0000016C   0xEA51 0x2000      ORRS     R0,R1,R0, LSL #+8
   \   00000170   0xF8AD 0x000A      STRH     R0,[SP, #+10]
    247            
    248            /*4. Read H_T_OUT */
    249            num_bytes = 0;    // No Data to Pass.
   \   00000174   0x2000             MOVS     R0,#+0
   \   00000176   0x4680             MOV      R8,R0
    250            i2cData[0] = 0x00;
   \   00000178   0x2000             MOVS     R0,#+0
   \   0000017A   0xF88D 0x0000      STRB     R0,[SP, #+0]
    251          #ifdef REV_L
    252            Status = RoadBrd_I2C_Master_Transmit_CMDData_IT((uint16_t)HMDTY_SNSR, (uint8_t)(HMDTY_SNSR_HUMIDITY_OUT_L | 0x80), i2cData, (uint16_t)num_bytes);
   \   0000017E   0x4640             MOV      R0,R8
   \   00000180   0x0003             MOVS     R3,R0
   \   00000182   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000184   0x466A             MOV      R2,SP
   \   00000186   0x21A8             MOVS     R1,#+168
   \   00000188   0x20BE             MOVS     R0,#+190
   \   0000018A   0x.... 0x....      BL       RoadBrd_I2C_Master_Transmit_CMDData_IT
   \   0000018E   0x0005             MOVS     R5,R0
    253            // If Status was good, Time to get response.
    254            if (Status == HAL_OK)
   \   00000190   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000192   0x2D00             CMP      R5,#+0
   \   00000194   0xD16B             BNE.N    ??RoadBrd_Humidity_ReadHumidity_Scaled_15
   \   00000196   0xE005             B.N      ??RoadBrd_Humidity_ReadHumidity_Scaled_16
   \                     ??RoadBrd_Humidity_ReadHumidity_Scaled_13: (+1)
   \   00000198   0x0028             MOVS     R0,R5
   \   0000019A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000019C   0xE0B0             B.N      ??RoadBrd_Humidity_ReadHumidity_Scaled_2
   \                     ??RoadBrd_Humidity_ReadHumidity_Scaled_10: (+1)
   \   0000019E   0x0028             MOVS     R0,R5
   \   000001A0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001A2   0xE0AD             B.N      ??RoadBrd_Humidity_ReadHumidity_Scaled_2
    255            {
    256              // Now wait for completion of XMIT.
    257              Status = RoadBrd_WaitForState( (uint16_t)( I2C_TIMEOUT/5 ));
   \                     ??RoadBrd_Humidity_ReadHumidity_Scaled_16: (+1)
   \   000001A4   0x2064             MOVS     R0,#+100
   \   000001A6   0x.... 0x....      BL       RoadBrd_WaitForState
   \   000001AA   0x0005             MOVS     R5,R0
    258              if (Status != HAL_OK)
   \   000001AC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000001AE   0x2D00             CMP      R5,#+0
   \   000001B0   0xD002             BEQ.N    ??RoadBrd_Humidity_ReadHumidity_Scaled_17
    259                return Status;
   \   000001B2   0x0028             MOVS     R0,R5
   \   000001B4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001B6   0xE0A3             B.N      ??RoadBrd_Humidity_ReadHumidity_Scaled_2
    260              else
    261              {
    262                Status =  RoadBrd_I2C_Master_Receive_IT((uint16_t)HMDTY_SNSR, i2cData, (uint16_t)2);
   \                     ??RoadBrd_Humidity_ReadHumidity_Scaled_17: (+1)
   \   000001B8   0x2202             MOVS     R2,#+2
   \   000001BA   0x4669             MOV      R1,SP
   \   000001BC   0x20BE             MOVS     R0,#+190
   \   000001BE   0x.... 0x....      BL       RoadBrd_I2C_Master_Receive_IT
   \   000001C2   0x0005             MOVS     R5,R0
    263                if (Status == HAL_OK)
   \   000001C4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000001C6   0x2D00             CMP      R5,#+0
   \   000001C8   0xD14E             BNE.N    ??RoadBrd_Humidity_ReadHumidity_Scaled_18
    264                {
    265                  // Now wait for completion of Receive.
    266                  Status = RoadBrd_WaitForState( (uint16_t)( I2C_TIMEOUT/5 ));
   \   000001CA   0x2064             MOVS     R0,#+100
   \   000001CC   0x.... 0x....      BL       RoadBrd_WaitForState
   \   000001D0   0x0005             MOVS     R5,R0
    267                  if (Status != HAL_OK)
   \   000001D2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000001D4   0x2D00             CMP      R5,#+0
   \   000001D6   0xD002             BEQ.N    ??RoadBrd_Humidity_ReadHumidity_Scaled_19
    268                    return Status;
   \   000001D8   0x0028             MOVS     R0,R5
   \   000001DA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001DC   0xE090             B.N      ??RoadBrd_Humidity_ReadHumidity_Scaled_2
    269                } // EndIf (Status == HAL_OK) RoadBrd_I2C_Master_Receive_IT
    270                else
    271                  return Status;
    272              } // EndElse (Status != HAL_OK) RoadBrd_WaitForState
    273            }// EndIf (Status == HAL_OK) RoadBrd_I2C_Master_Transmit_CMDData_IT
    274            else
    275              return Status;
    276          #else
    277            Status = RoadBrd_I2C_Master_Transmit_CMDData((uint16_t)HMDTY_SNSR, (uint8_t)(HMDTY_SNSR_HUMIDITY_OUT_L | 0x80), i2cData, (uint16_t)num_bytes, I2C_TIMEOUT);
    278            // If Status was good, Time to get response.
    279            if (Status == HAL_OK)
    280            {
    281              Status =  RoadBrd_I2C_Master_Receive((uint16_t)HMDTY_SNSR, i2cData, (uint16_t)2, I2C_TIMEOUT);
    282              if (Status != HAL_OK)
    283                return Status;
    284            }
    285            else
    286              return Status;
    287          #endif
    288            H_T_out = (((uint16_t)i2cData[1])<<8) | (uint16_t)i2cData[0];
   \                     ??RoadBrd_Humidity_ReadHumidity_Scaled_19: (+1)
   \   000001DE   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   000001E2   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   000001E6   0xEA51 0x2000      ORRS     R0,R1,R0, LSL #+8
   \   000001EA   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    289          
    290            /*5. Compute the RH [%] value by linear interpolation */
    291            tmp = ((float)(H_T_out - H0_T0_out)) * ((float)(H1_rh - H0_rh)*10);
   \   000001EE   0xF9BD 0x0008      LDRSH    R0,[SP, #+8]
   \   000001F2   0xFA0F 0xFA8A      SXTH     R10,R10          ;; SignExt  R10,R10,#+16,#+16
   \   000001F6   0xEBB0 0x000A      SUBS     R0,R0,R10
   \   000001FA   0x.... 0x....      BL       __aeabi_i2f
   \   000001FE   0x4683             MOV      R11,R0
   \   00000200   0xF9BD 0x0006      LDRSH    R0,[SP, #+6]
   \   00000204   0xFA0F 0xF989      SXTH     R9,R9            ;; SignExt  R9,R9,#+16,#+16
   \   00000208   0xEBB0 0x0009      SUBS     R0,R0,R9
   \   0000020C   0x.... 0x....      BL       __aeabi_i2f
   \   00000210   0x.... 0x....      LDR.W    R1,??DataTable3  ;; 0x41200000
   \   00000214   0x.... 0x....      BL       __aeabi_fmul
   \   00000218   0x4659             MOV      R1,R11
   \   0000021A   0x.... 0x....      BL       __aeabi_fmul
   \   0000021E   0x0006             MOVS     R6,R0
    292            tmp = tmp/(float)(H1_T0_out - H0_T0_out) + (float)(H0_rh*10);
   \   00000220   0xF9BD 0x000A      LDRSH    R0,[SP, #+10]
   \   00000224   0xFA0F 0xFA8A      SXTH     R10,R10          ;; SignExt  R10,R10,#+16,#+16
   \   00000228   0xEBB0 0x000A      SUBS     R0,R0,R10
   \   0000022C   0x.... 0x....      BL       __aeabi_i2f
   \   00000230   0x0001             MOVS     R1,R0
   \   00000232   0x0030             MOVS     R0,R6
   \   00000234   0x.... 0x....      BL       __aeabi_fdiv
   \   00000238   0x0006             MOVS     R6,R0
   \   0000023A   0xFA0F 0xF989      SXTH     R9,R9            ;; SignExt  R9,R9,#+16,#+16
   \   0000023E   0x200A             MOVS     R0,#+10
   \   00000240   0xFB00 0xF009      MUL      R0,R0,R9
   \   00000244   0x.... 0x....      BL       __aeabi_i2f
   \   00000248   0x0031             MOVS     R1,R6
   \   0000024A   0x.... 0x....      BL       __aeabi_fadd
   \   0000024E   0x0006             MOVS     R6,R0
    293            tmp = RoadBrd_CAL_ScaleValue( CAL_HUMIDITY, tmp);
   \   00000250   0x0031             MOVS     R1,R6
   \   00000252   0x2007             MOVS     R0,#+7
   \   00000254   0x.... 0x....      BL       RoadBrd_CAL_ScaleValue
   \   00000258   0x0006             MOVS     R6,R0
    294            
    295            /* Saturation cond ition*/
    296            if(tmp>1000 ) 
   \   0000025A   0x0030             MOVS     R0,R6
   \   0000025C   0x.... 0x....      LDR.W    R1,??DataTable3_1  ;; 0x447a0001
   \   00000260   0x.... 0x....      BL       __aeabi_cfrcmple
   \   00000264   0xD809             BHI.N    ??RoadBrd_Humidity_ReadHumidity_Scaled_20
   \   00000266   0xE005             B.N      ??RoadBrd_Humidity_ReadHumidity_Scaled_21
   \                     ??RoadBrd_Humidity_ReadHumidity_Scaled_18: (+1)
   \   00000268   0x0028             MOVS     R0,R5
   \   0000026A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000026C   0xE048             B.N      ??RoadBrd_Humidity_ReadHumidity_Scaled_2
   \                     ??RoadBrd_Humidity_ReadHumidity_Scaled_15: (+1)
   \   0000026E   0x0028             MOVS     R0,R5
   \   00000270   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000272   0xE045             B.N      ??RoadBrd_Humidity_ReadHumidity_Scaled_2
    297              tmp = 1000;
   \                     ??RoadBrd_Humidity_ReadHumidity_Scaled_21: (+1)
   \   00000274   0x.... 0x....      LDR.W    R0,??DataTable3_2  ;; 0x447a0000
   \   00000278   0x0006             MOVS     R6,R0
    298            
    299            // Now Build results.
    300            HPtr->HRawC = (uint16_t)(tmp);
   \                     ??RoadBrd_Humidity_ReadHumidity_Scaled_20: (+1)
   \   0000027A   0x0030             MOVS     R0,R6
   \   0000027C   0x.... 0x....      BL       __aeabi_f2iz
   \   00000280   0x8220             STRH     R0,[R4, #+16]
    301            sprintf( (char *)HPtr->Humidity, "%02.1f", (float)(tmp/10) );
   \   00000282   0x0030             MOVS     R0,R6
   \   00000284   0x.... 0x....      LDR.W    R1,??DataTable3  ;; 0x41200000
   \   00000288   0x.... 0x....      BL       __aeabi_fdiv
   \   0000028C   0x.... 0x....      BL       __aeabi_f2d
   \   00000290   0x0002             MOVS     R2,R0
   \   00000292   0x000B             MOVS     R3,R1
   \   00000294   0x.... 0x....      LDR.W    R1,??DataTable3_3
   \   00000298   0x0020             MOVS     R0,R4
   \   0000029A   0x.... 0x....      BL       sprintf
    302            // NOW, Build Raw Data String..
    303            sprintf( (char *)HPtr->HRaw, "%02x", ((HPtr->HRawC & 0xff00)>>8));
   \   0000029E   0x8A20             LDRH     R0,[R4, #+16]
   \   000002A0   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000002A2   0x0A02             LSRS     R2,R0,#+8
   \   000002A4   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   000002A6   0x.... 0x....      LDR.W    R1,??DataTable3_4
   \   000002AA   0xF114 0x0008      ADDS     R0,R4,#+8
   \   000002AE   0x.... 0x....      BL       sprintf
    304            sprintf( (char *)tempBffr2, "%02x", (HPtr->HRawC & 0x00ff));
   \   000002B2   0x7C20             LDRB     R0,[R4, #+16]
   \   000002B4   0xF000 0x02FF      AND      R2,R0,#0xFF
   \   000002B8   0x.... 0x....      LDR.W    R1,??DataTable3_4
   \   000002BC   0xA803             ADD      R0,SP,#+12
   \   000002BE   0x.... 0x....      BL       sprintf
    305            strcat( (char *)HPtr->HRaw, (char *)tempBffr2 );
   \   000002C2   0xA903             ADD      R1,SP,#+12
   \   000002C4   0xF114 0x0008      ADDS     R0,R4,#+8
   \   000002C8   0x.... 0x....      BL       strcat
    306            //strcat( (char *)HPtr->HRaw, "Rw" );
    307            // Calculate Legacy Value.
    308            tmp2 = (tmp/10) + HUMIDITY_SCALE2;
   \   000002CC   0x0030             MOVS     R0,R6
   \   000002CE   0x.... 0x....      LDR.W    R1,??DataTable3  ;; 0x41200000
   \   000002D2   0x.... 0x....      BL       __aeabi_fdiv
   \   000002D6   0x.... 0x....      LDR.W    R1,??DataTable3_5  ;; 0x40c00000
   \   000002DA   0x.... 0x....      BL       __aeabi_fadd
   \   000002DE   0x0007             MOVS     R7,R0
    309            tmp2 = tmp2 * HUMIDITY_SCALE1;
   \   000002E0   0x.... 0x....      LDR.W    R0,??DataTable3_6  ;; 0x44030000
   \   000002E4   0x0039             MOVS     R1,R7
   \   000002E6   0x.... 0x....      BL       __aeabi_fmul
   \   000002EA   0x0007             MOVS     R7,R0
    310            tmp3 = (uint16_t)tmp2;
   \   000002EC   0x0038             MOVS     R0,R7
   \   000002EE   0x.... 0x....      BL       __aeabi_f2iz
   \   000002F2   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    311            HPtr->HRawC = tmp3;
   \   000002F6   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \   000002FA   0x8220             STRH     R0,[R4, #+16]
    312          
    313            return Status;
   \   000002FC   0x0028             MOVS     R0,R5
   \   000002FE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??RoadBrd_Humidity_ReadHumidity_Scaled_2: (+1)
   \   00000300   0xB005             ADD      SP,SP,#+20
   \   00000302   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    314          }
    315          
    316          /**
    317            * @brief  This function reads HTS221 Humidity output registers, and calculates humidity. It
    318            * then loads these values to the passed Humidity Structure.
    319            * @param  HumidtyPtr HPtr: Ptr to structure to receive the final values of Humidity.
    320            * @retval HAL_StatusTypeDef:     HAL_OK:       Tasking of block of data to UART success.
    321            *                                HAL_ERROR:    Error found in Tasking or data passed.
    322            *                                HAL_BUSY:     UART is busy.
    323            *                                HAL_TIMEOUT:  UART timed out.
    324            */

   \                                 In section .text, align 2, keep-with-next
    325          HAL_StatusTypeDef RoadBrd_Humidity_ReadHumidity( HumidtyPtr HPtr )
    326          {
   \                     RoadBrd_Humidity_ReadHumidity: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB085             SUB      SP,SP,#+20
   \   00000006   0x0004             MOVS     R4,R0
    327            HAL_StatusTypeDef Status;
    328            int num_bytes;
    329            uint8_t i2cData[4];  
    330            int16_t H0_T0_out, H1_T0_out, H_T_out;
    331            int16_t H0_rh, H1_rh, tmp3;
    332            char tempBffr2[5];
    333            float tmp, tmp2;
    334            
    335            Status = HAL_OK;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x0005             MOVS     R5,R0
    336            
    337            /* 1. Read H0_rH and H1_rH coefficients*/
    338            num_bytes = 0;    // No Data to Pass.
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x4680             MOV      R8,R0
    339            i2cData[0] = 0x00;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xF88D 0x0000      STRB     R0,[SP, #+0]
    340          #ifdef REV_L
    341            Status = RoadBrd_I2C_Master_Transmit_CMDData_IT((uint16_t)HMDTY_SNSR, (uint8_t)(HMDTY_SNSR_H0rH_x2 | 0x80), i2cData, (uint16_t)num_bytes);
   \   00000016   0x4640             MOV      R0,R8
   \   00000018   0x0003             MOVS     R3,R0
   \   0000001A   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000001C   0x466A             MOV      R2,SP
   \   0000001E   0x21B0             MOVS     R1,#+176
   \   00000020   0x20BE             MOVS     R0,#+190
   \   00000022   0x.... 0x....      BL       RoadBrd_I2C_Master_Transmit_CMDData_IT
   \   00000026   0x0005             MOVS     R5,R0
    342            // If Status was good, Time to get response.
    343            if (Status == HAL_OK)
   \   00000028   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000002A   0x2D00             CMP      R5,#+0
   \   0000002C   0xD13E             BNE.N    ??RoadBrd_Humidity_ReadHumidity_0
    344            {
    345              // Now wait for completion of XMIT.
    346              Status = RoadBrd_WaitForState( (uint16_t)( I2C_TIMEOUT/5 ));
   \   0000002E   0x2064             MOVS     R0,#+100
   \   00000030   0x.... 0x....      BL       RoadBrd_WaitForState
   \   00000034   0x0005             MOVS     R5,R0
    347              if (Status != HAL_OK)
   \   00000036   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000038   0x2D00             CMP      R5,#+0
   \   0000003A   0xD002             BEQ.N    ??RoadBrd_Humidity_ReadHumidity_1
    348                return Status;
   \   0000003C   0x0028             MOVS     R0,R5
   \   0000003E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000040   0xE159             B.N      ??RoadBrd_Humidity_ReadHumidity_2
    349              else
    350              {
    351                Status =  RoadBrd_I2C_Master_Receive_IT((uint16_t)HMDTY_SNSR, i2cData, (uint16_t)2);
   \                     ??RoadBrd_Humidity_ReadHumidity_1: (+1)
   \   00000042   0x2202             MOVS     R2,#+2
   \   00000044   0x4669             MOV      R1,SP
   \   00000046   0x20BE             MOVS     R0,#+190
   \   00000048   0x.... 0x....      BL       RoadBrd_I2C_Master_Receive_IT
   \   0000004C   0x0005             MOVS     R5,R0
    352                if (Status == HAL_OK)
   \   0000004E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000050   0x2D00             CMP      R5,#+0
   \   00000052   0xD128             BNE.N    ??RoadBrd_Humidity_ReadHumidity_3
    353                {
    354                  // Now wait for completion of Receive.
    355                  Status = RoadBrd_WaitForState( (uint16_t)( I2C_TIMEOUT/5 ));
   \   00000054   0x2064             MOVS     R0,#+100
   \   00000056   0x.... 0x....      BL       RoadBrd_WaitForState
   \   0000005A   0x0005             MOVS     R5,R0
    356                  if (Status != HAL_OK)
   \   0000005C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000005E   0x2D00             CMP      R5,#+0
   \   00000060   0xD002             BEQ.N    ??RoadBrd_Humidity_ReadHumidity_4
    357                    return Status;
   \   00000062   0x0028             MOVS     R0,R5
   \   00000064   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000066   0xE146             B.N      ??RoadBrd_Humidity_ReadHumidity_2
    358                } // EndIf (Status == HAL_OK) RoadBrd_I2C_Master_Receive_IT
    359                else
    360                  return Status;
    361              } // EndElse (Status != HAL_OK) RoadBrd_WaitForState
    362            }// EndIf (Status == HAL_OK) RoadBrd_I2C_Master_Transmit_CMDData_IT
    363            else
    364              return Status;
    365          #else
    366            Status = RoadBrd_I2C_Master_Transmit_CMDData((uint16_t)HMDTY_SNSR, (uint8_t)(HMDTY_SNSR_H0rH_x2 | 0x80), i2cData, (uint16_t)num_bytes, I2C_TIMEOUT);
    367            // If Status was good, Time to get response.
    368            if (Status == HAL_OK)
    369            {
    370              Status =  RoadBrd_I2C_Master_Receive((uint16_t)HMDTY_SNSR, i2cData, (uint16_t)2, I2C_TIMEOUT);
    371              if (Status != HAL_OK)
    372                return Status;
    373            }
    374            else
    375              return Status;
    376          #endif
    377            
    378            // 1a. Now extract Coefficients.
    379            H0_rh = i2cData[0]>>1;
   \                     ??RoadBrd_Humidity_ReadHumidity_4: (+1)
   \   00000068   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000006C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000006E   0x0840             LSRS     R0,R0,#+1
   \   00000070   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000072   0x4681             MOV      R9,R0
    380            H1_rh = i2cData[1]>>1;
   \   00000074   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   00000078   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000007A   0x0840             LSRS     R0,R0,#+1
   \   0000007C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000007E   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    381            
    382            /*2. Read H0_T0_OUT */
    383            num_bytes = 0;    // No Data to Pass.
   \   00000082   0x2000             MOVS     R0,#+0
   \   00000084   0x4680             MOV      R8,R0
    384            i2cData[0] = 0x00;
   \   00000086   0x2000             MOVS     R0,#+0
   \   00000088   0xF88D 0x0000      STRB     R0,[SP, #+0]
    385          #ifdef REV_L
    386            Status = RoadBrd_I2C_Master_Transmit_CMDData_IT((uint16_t)HMDTY_SNSR, (uint8_t)(HMDTY_SNSR_H0_T0_OUT | 0x80), i2cData, (uint16_t)num_bytes);
   \   0000008C   0x4640             MOV      R0,R8
   \   0000008E   0x0003             MOVS     R3,R0
   \   00000090   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000092   0x466A             MOV      R2,SP
   \   00000094   0x21B6             MOVS     R1,#+182
   \   00000096   0x20BE             MOVS     R0,#+190
   \   00000098   0x.... 0x....      BL       RoadBrd_I2C_Master_Transmit_CMDData_IT
   \   0000009C   0x0005             MOVS     R5,R0
    387            // If Status was good, Time to get response.
    388            if (Status == HAL_OK)
   \   0000009E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000A0   0x2D00             CMP      R5,#+0
   \   000000A2   0xD13F             BNE.N    ??RoadBrd_Humidity_ReadHumidity_5
   \   000000A4   0xE005             B.N      ??RoadBrd_Humidity_ReadHumidity_6
   \                     ??RoadBrd_Humidity_ReadHumidity_3: (+1)
   \   000000A6   0x0028             MOVS     R0,R5
   \   000000A8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000AA   0xE124             B.N      ??RoadBrd_Humidity_ReadHumidity_2
   \                     ??RoadBrd_Humidity_ReadHumidity_0: (+1)
   \   000000AC   0x0028             MOVS     R0,R5
   \   000000AE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000B0   0xE121             B.N      ??RoadBrd_Humidity_ReadHumidity_2
    389            {
    390              // Now wait for completion of XMIT.
    391              Status = RoadBrd_WaitForState( (uint16_t)( I2C_TIMEOUT/5 ));
   \                     ??RoadBrd_Humidity_ReadHumidity_6: (+1)
   \   000000B2   0x2064             MOVS     R0,#+100
   \   000000B4   0x.... 0x....      BL       RoadBrd_WaitForState
   \   000000B8   0x0005             MOVS     R5,R0
    392              if (Status != HAL_OK)
   \   000000BA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000BC   0x2D00             CMP      R5,#+0
   \   000000BE   0xD002             BEQ.N    ??RoadBrd_Humidity_ReadHumidity_7
    393                return Status;
   \   000000C0   0x0028             MOVS     R0,R5
   \   000000C2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000C4   0xE117             B.N      ??RoadBrd_Humidity_ReadHumidity_2
    394              else
    395              {
    396                Status =  RoadBrd_I2C_Master_Receive_IT((uint16_t)HMDTY_SNSR, i2cData, (uint16_t)2);
   \                     ??RoadBrd_Humidity_ReadHumidity_7: (+1)
   \   000000C6   0x2202             MOVS     R2,#+2
   \   000000C8   0x4669             MOV      R1,SP
   \   000000CA   0x20BE             MOVS     R0,#+190
   \   000000CC   0x.... 0x....      BL       RoadBrd_I2C_Master_Receive_IT
   \   000000D0   0x0005             MOVS     R5,R0
    397                if (Status == HAL_OK)
   \   000000D2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000D4   0x2D00             CMP      R5,#+0
   \   000000D6   0xD122             BNE.N    ??RoadBrd_Humidity_ReadHumidity_8
    398                {
    399                  // Now wait for completion of Receive.
    400                  Status = RoadBrd_WaitForState( (uint16_t)( I2C_TIMEOUT/5 ));
   \   000000D8   0x2064             MOVS     R0,#+100
   \   000000DA   0x.... 0x....      BL       RoadBrd_WaitForState
   \   000000DE   0x0005             MOVS     R5,R0
    401                  if (Status != HAL_OK)
   \   000000E0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000E2   0x2D00             CMP      R5,#+0
   \   000000E4   0xD002             BEQ.N    ??RoadBrd_Humidity_ReadHumidity_9
    402                    return Status;
   \   000000E6   0x0028             MOVS     R0,R5
   \   000000E8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000EA   0xE104             B.N      ??RoadBrd_Humidity_ReadHumidity_2
    403                } // EndIf (Status == HAL_OK) RoadBrd_I2C_Master_Receive_IT
    404                else
    405                  return Status;
    406              } // EndElse (Status != HAL_OK) RoadBrd_WaitForState
    407            }// EndIf (Status == HAL_OK) RoadBrd_I2C_Master_Transmit_CMDData_IT
    408            else
    409              return Status;
    410          #else
    411            Status = RoadBrd_I2C_Master_Transmit_CMDData((uint16_t)HMDTY_SNSR, (uint8_t)(HMDTY_SNSR_H0_T0_OUT | 0x80), i2cData, (uint16_t)num_bytes, I2C_TIMEOUT);
    412            // If Status was good, Time to get response.
    413            if (Status == HAL_OK)
    414            {
    415              Status =  RoadBrd_I2C_Master_Receive((uint16_t)HMDTY_SNSR, i2cData, (uint16_t)2, I2C_TIMEOUT);
    416              if (Status != HAL_OK)
    417                return Status;
    418            }
    419            else
    420              return Status;
    421          #endif
    422            H0_T0_out = (((uint16_t)i2cData[1])<<8) | (uint16_t)i2cData[0];
   \                     ??RoadBrd_Humidity_ReadHumidity_9: (+1)
   \   000000EC   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   000000F0   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   000000F4   0xEA51 0x2000      ORRS     R0,R1,R0, LSL #+8
   \   000000F8   0x4682             MOV      R10,R0
    423            
    424            /*3. Read H1_T0_OUT */
    425            num_bytes = 0;    // No Data to Pass.
   \   000000FA   0x2000             MOVS     R0,#+0
   \   000000FC   0x4680             MOV      R8,R0
    426            i2cData[0] = 0x00;
   \   000000FE   0x2000             MOVS     R0,#+0
   \   00000100   0xF88D 0x0000      STRB     R0,[SP, #+0]
    427          #ifdef REV_L
    428            Status = RoadBrd_I2C_Master_Transmit_CMDData_IT((uint16_t)HMDTY_SNSR, (uint8_t)(HMDTY_SNSR_H1_T0_OUT | 0x80), i2cData, (uint16_t)num_bytes);
   \   00000104   0x4640             MOV      R0,R8
   \   00000106   0x0003             MOVS     R3,R0
   \   00000108   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000010A   0x466A             MOV      R2,SP
   \   0000010C   0x21BA             MOVS     R1,#+186
   \   0000010E   0x20BE             MOVS     R0,#+190
   \   00000110   0x.... 0x....      BL       RoadBrd_I2C_Master_Transmit_CMDData_IT
   \   00000114   0x0005             MOVS     R5,R0
    429            // If Status was good, Time to get response.
    430            if (Status == HAL_OK)
   \   00000116   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000118   0x2D00             CMP      R5,#+0
   \   0000011A   0xD140             BNE.N    ??RoadBrd_Humidity_ReadHumidity_10
   \   0000011C   0xE005             B.N      ??RoadBrd_Humidity_ReadHumidity_11
   \                     ??RoadBrd_Humidity_ReadHumidity_8: (+1)
   \   0000011E   0x0028             MOVS     R0,R5
   \   00000120   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000122   0xE0E8             B.N      ??RoadBrd_Humidity_ReadHumidity_2
   \                     ??RoadBrd_Humidity_ReadHumidity_5: (+1)
   \   00000124   0x0028             MOVS     R0,R5
   \   00000126   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000128   0xE0E5             B.N      ??RoadBrd_Humidity_ReadHumidity_2
    431            {
    432              // Now wait for completion of XMIT.
    433              Status = RoadBrd_WaitForState( (uint16_t)( I2C_TIMEOUT/5 ));
   \                     ??RoadBrd_Humidity_ReadHumidity_11: (+1)
   \   0000012A   0x2064             MOVS     R0,#+100
   \   0000012C   0x.... 0x....      BL       RoadBrd_WaitForState
   \   00000130   0x0005             MOVS     R5,R0
    434              if (Status != HAL_OK)
   \   00000132   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000134   0x2D00             CMP      R5,#+0
   \   00000136   0xD002             BEQ.N    ??RoadBrd_Humidity_ReadHumidity_12
    435                return Status;
   \   00000138   0x0028             MOVS     R0,R5
   \   0000013A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000013C   0xE0DB             B.N      ??RoadBrd_Humidity_ReadHumidity_2
    436              else
    437              {
    438                Status =  RoadBrd_I2C_Master_Receive_IT((uint16_t)HMDTY_SNSR, i2cData, (uint16_t)2);
   \                     ??RoadBrd_Humidity_ReadHumidity_12: (+1)
   \   0000013E   0x2202             MOVS     R2,#+2
   \   00000140   0x4669             MOV      R1,SP
   \   00000142   0x20BE             MOVS     R0,#+190
   \   00000144   0x.... 0x....      BL       RoadBrd_I2C_Master_Receive_IT
   \   00000148   0x0005             MOVS     R5,R0
    439                if (Status == HAL_OK)
   \   0000014A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000014C   0x2D00             CMP      R5,#+0
   \   0000014E   0xD123             BNE.N    ??RoadBrd_Humidity_ReadHumidity_13
    440                {
    441                  // Now wait for completion of Receive.
    442                  Status = RoadBrd_WaitForState( (uint16_t)( I2C_TIMEOUT/5 ));
   \   00000150   0x2064             MOVS     R0,#+100
   \   00000152   0x.... 0x....      BL       RoadBrd_WaitForState
   \   00000156   0x0005             MOVS     R5,R0
    443                  if (Status != HAL_OK)
   \   00000158   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000015A   0x2D00             CMP      R5,#+0
   \   0000015C   0xD002             BEQ.N    ??RoadBrd_Humidity_ReadHumidity_14
    444                    return Status;
   \   0000015E   0x0028             MOVS     R0,R5
   \   00000160   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000162   0xE0C8             B.N      ??RoadBrd_Humidity_ReadHumidity_2
    445                } // EndIf (Status == HAL_OK) RoadBrd_I2C_Master_Receive_IT
    446                else
    447                  return Status;
    448              } // EndElse (Status != HAL_OK) RoadBrd_WaitForState
    449            }// EndIf (Status == HAL_OK) RoadBrd_I2C_Master_Transmit_CMDData_IT
    450            else
    451              return Status;
    452          #else
    453            Status = RoadBrd_I2C_Master_Transmit_CMDData((uint16_t)HMDTY_SNSR, (uint8_t)(HMDTY_SNSR_H1_T0_OUT | 0x80), i2cData, (uint16_t)num_bytes, I2C_TIMEOUT);
    454            // If Status was good, Time to get response.
    455            if (Status == HAL_OK)
    456            {
    457              Status =  RoadBrd_I2C_Master_Receive((uint16_t)HMDTY_SNSR, i2cData, (uint16_t)2, I2C_TIMEOUT);
    458              if (Status != HAL_OK)
    459                return Status;
    460            }
    461            else
    462              return Status;
    463          #endif
    464            H1_T0_out = (((uint16_t)i2cData[1])<<8) | (uint16_t)i2cData[0];
   \                     ??RoadBrd_Humidity_ReadHumidity_14: (+1)
   \   00000164   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   00000168   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   0000016C   0xEA51 0x2000      ORRS     R0,R1,R0, LSL #+8
   \   00000170   0xF8AD 0x000A      STRH     R0,[SP, #+10]
    465            
    466            /*4. Read H_T_OUT */
    467            num_bytes = 0;    // No Data to Pass.
   \   00000174   0x2000             MOVS     R0,#+0
   \   00000176   0x4680             MOV      R8,R0
    468            i2cData[0] = 0x00;
   \   00000178   0x2000             MOVS     R0,#+0
   \   0000017A   0xF88D 0x0000      STRB     R0,[SP, #+0]
    469          #ifdef REV_L
    470            Status = RoadBrd_I2C_Master_Transmit_CMDData_IT((uint16_t)HMDTY_SNSR, (uint8_t)(HMDTY_SNSR_HUMIDITY_OUT_L | 0x80), i2cData, (uint16_t)num_bytes);
   \   0000017E   0x4640             MOV      R0,R8
   \   00000180   0x0003             MOVS     R3,R0
   \   00000182   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000184   0x466A             MOV      R2,SP
   \   00000186   0x21A8             MOVS     R1,#+168
   \   00000188   0x20BE             MOVS     R0,#+190
   \   0000018A   0x.... 0x....      BL       RoadBrd_I2C_Master_Transmit_CMDData_IT
   \   0000018E   0x0005             MOVS     R5,R0
    471            // If Status was good, Time to get response.
    472            if (Status == HAL_OK)
   \   00000190   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000192   0x2D00             CMP      R5,#+0
   \   00000194   0xD166             BNE.N    ??RoadBrd_Humidity_ReadHumidity_15
   \   00000196   0xE005             B.N      ??RoadBrd_Humidity_ReadHumidity_16
   \                     ??RoadBrd_Humidity_ReadHumidity_13: (+1)
   \   00000198   0x0028             MOVS     R0,R5
   \   0000019A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000019C   0xE0AB             B.N      ??RoadBrd_Humidity_ReadHumidity_2
   \                     ??RoadBrd_Humidity_ReadHumidity_10: (+1)
   \   0000019E   0x0028             MOVS     R0,R5
   \   000001A0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001A2   0xE0A8             B.N      ??RoadBrd_Humidity_ReadHumidity_2
    473            {
    474              // Now wait for completion of XMIT.
    475              Status = RoadBrd_WaitForState( (uint16_t)( I2C_TIMEOUT/5 ));
   \                     ??RoadBrd_Humidity_ReadHumidity_16: (+1)
   \   000001A4   0x2064             MOVS     R0,#+100
   \   000001A6   0x.... 0x....      BL       RoadBrd_WaitForState
   \   000001AA   0x0005             MOVS     R5,R0
    476              if (Status != HAL_OK)
   \   000001AC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000001AE   0x2D00             CMP      R5,#+0
   \   000001B0   0xD002             BEQ.N    ??RoadBrd_Humidity_ReadHumidity_17
    477                return Status;
   \   000001B2   0x0028             MOVS     R0,R5
   \   000001B4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001B6   0xE09E             B.N      ??RoadBrd_Humidity_ReadHumidity_2
    478              else
    479              {
    480                Status =  RoadBrd_I2C_Master_Receive_IT((uint16_t)HMDTY_SNSR, i2cData, (uint16_t)2);
   \                     ??RoadBrd_Humidity_ReadHumidity_17: (+1)
   \   000001B8   0x2202             MOVS     R2,#+2
   \   000001BA   0x4669             MOV      R1,SP
   \   000001BC   0x20BE             MOVS     R0,#+190
   \   000001BE   0x.... 0x....      BL       RoadBrd_I2C_Master_Receive_IT
   \   000001C2   0x0005             MOVS     R5,R0
    481                if (Status == HAL_OK)
   \   000001C4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000001C6   0x2D00             CMP      R5,#+0
   \   000001C8   0xD149             BNE.N    ??RoadBrd_Humidity_ReadHumidity_18
    482                {
    483                  // Now wait for completion of Receive.
    484                  Status = RoadBrd_WaitForState( (uint16_t)( I2C_TIMEOUT/5 ));
   \   000001CA   0x2064             MOVS     R0,#+100
   \   000001CC   0x.... 0x....      BL       RoadBrd_WaitForState
   \   000001D0   0x0005             MOVS     R5,R0
    485                  if (Status != HAL_OK)
   \   000001D2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000001D4   0x2D00             CMP      R5,#+0
   \   000001D6   0xD002             BEQ.N    ??RoadBrd_Humidity_ReadHumidity_19
    486                    return Status;
   \   000001D8   0x0028             MOVS     R0,R5
   \   000001DA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001DC   0xE08B             B.N      ??RoadBrd_Humidity_ReadHumidity_2
    487                } // EndIf (Status == HAL_OK) RoadBrd_I2C_Master_Receive_IT
    488                else
    489                  return Status;
    490              } // EndElse (Status != HAL_OK) RoadBrd_WaitForState
    491            }// EndIf (Status == HAL_OK) RoadBrd_I2C_Master_Transmit_CMDData_IT
    492            else
    493              return Status;
    494          #else
    495            Status = RoadBrd_I2C_Master_Transmit_CMDData((uint16_t)HMDTY_SNSR, (uint8_t)(HMDTY_SNSR_HUMIDITY_OUT_L | 0x80), i2cData, (uint16_t)num_bytes, I2C_TIMEOUT);
    496            // If Status was good, Time to get response.
    497            if (Status == HAL_OK)
    498            {
    499              Status =  RoadBrd_I2C_Master_Receive((uint16_t)HMDTY_SNSR, i2cData, (uint16_t)2, I2C_TIMEOUT);
    500              if (Status != HAL_OK)
    501                return Status;
    502            }
    503            else
    504              return Status;
    505          #endif
    506            H_T_out = (((uint16_t)i2cData[1])<<8) | (uint16_t)i2cData[0];
   \                     ??RoadBrd_Humidity_ReadHumidity_19: (+1)
   \   000001DE   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   000001E2   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   000001E6   0xEA51 0x2000      ORRS     R0,R1,R0, LSL #+8
   \   000001EA   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    507          
    508            /*5. Compute the RH [%] value by linea r interpolation */
    509            tmp = ((float)(H_T_out - H0_T0_out)) * ((float)(H1_rh - H0_rh)*10);
   \   000001EE   0xF9BD 0x0008      LDRSH    R0,[SP, #+8]
   \   000001F2   0xFA0F 0xFA8A      SXTH     R10,R10          ;; SignExt  R10,R10,#+16,#+16
   \   000001F6   0xEBB0 0x000A      SUBS     R0,R0,R10
   \   000001FA   0x.... 0x....      BL       __aeabi_i2f
   \   000001FE   0x4683             MOV      R11,R0
   \   00000200   0xF9BD 0x0006      LDRSH    R0,[SP, #+6]
   \   00000204   0xFA0F 0xF989      SXTH     R9,R9            ;; SignExt  R9,R9,#+16,#+16
   \   00000208   0xEBB0 0x0009      SUBS     R0,R0,R9
   \   0000020C   0x.... 0x....      BL       __aeabi_i2f
   \   00000210   0x.... 0x....      LDR.W    R1,??DataTable3  ;; 0x41200000
   \   00000214   0x.... 0x....      BL       __aeabi_fmul
   \   00000218   0x4659             MOV      R1,R11
   \   0000021A   0x.... 0x....      BL       __aeabi_fmul
   \   0000021E   0x0006             MOVS     R6,R0
    510            tmp = tmp/(float)(H1_T0_out - H0_T0_out) + (float)(H0_rh*10);
   \   00000220   0xF9BD 0x000A      LDRSH    R0,[SP, #+10]
   \   00000224   0xFA0F 0xFA8A      SXTH     R10,R10          ;; SignExt  R10,R10,#+16,#+16
   \   00000228   0xEBB0 0x000A      SUBS     R0,R0,R10
   \   0000022C   0x.... 0x....      BL       __aeabi_i2f
   \   00000230   0x0001             MOVS     R1,R0
   \   00000232   0x0030             MOVS     R0,R6
   \   00000234   0x.... 0x....      BL       __aeabi_fdiv
   \   00000238   0x0006             MOVS     R6,R0
   \   0000023A   0xFA0F 0xF989      SXTH     R9,R9            ;; SignExt  R9,R9,#+16,#+16
   \   0000023E   0x200A             MOVS     R0,#+10
   \   00000240   0xFB00 0xF009      MUL      R0,R0,R9
   \   00000244   0x.... 0x....      BL       __aeabi_i2f
   \   00000248   0x0031             MOVS     R1,R6
   \   0000024A   0x.... 0x....      BL       __aeabi_fadd
   \   0000024E   0x0006             MOVS     R6,R0
    511          
    512            /* Saturation cond ition*/
    513            if(tmp>1000 ) 
   \   00000250   0x0030             MOVS     R0,R6
   \   00000252   0x.... 0x....      LDR.W    R1,??DataTable3_1  ;; 0x447a0001
   \   00000256   0x.... 0x....      BL       __aeabi_cfrcmple
   \   0000025A   0xD809             BHI.N    ??RoadBrd_Humidity_ReadHumidity_20
   \   0000025C   0xE005             B.N      ??RoadBrd_Humidity_ReadHumidity_21
   \                     ??RoadBrd_Humidity_ReadHumidity_18: (+1)
   \   0000025E   0x0028             MOVS     R0,R5
   \   00000260   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000262   0xE048             B.N      ??RoadBrd_Humidity_ReadHumidity_2
   \                     ??RoadBrd_Humidity_ReadHumidity_15: (+1)
   \   00000264   0x0028             MOVS     R0,R5
   \   00000266   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000268   0xE045             B.N      ??RoadBrd_Humidity_ReadHumidity_2
    514              tmp = 1000;
   \                     ??RoadBrd_Humidity_ReadHumidity_21: (+1)
   \   0000026A   0x.... 0x....      LDR.W    R0,??DataTable3_2  ;; 0x447a0000
   \   0000026E   0x0006             MOVS     R6,R0
    515            
    516            // Now Build results.
    517            HPtr->HRawC = (uint16_t)(tmp);
   \                     ??RoadBrd_Humidity_ReadHumidity_20: (+1)
   \   00000270   0x0030             MOVS     R0,R6
   \   00000272   0x.... 0x....      BL       __aeabi_f2iz
   \   00000276   0x8220             STRH     R0,[R4, #+16]
    518            sprintf( (char *)HPtr->Humidity, "%02.1f", (float)(tmp/10) );
   \   00000278   0x0030             MOVS     R0,R6
   \   0000027A   0x.... 0x....      LDR.W    R1,??DataTable3  ;; 0x41200000
   \   0000027E   0x.... 0x....      BL       __aeabi_fdiv
   \   00000282   0x.... 0x....      BL       __aeabi_f2d
   \   00000286   0x0002             MOVS     R2,R0
   \   00000288   0x000B             MOVS     R3,R1
   \   0000028A   0x.... 0x....      LDR.W    R1,??DataTable3_3
   \   0000028E   0x0020             MOVS     R0,R4
   \   00000290   0x.... 0x....      BL       sprintf
    519            // NOW, Build Raw Data String..
    520            sprintf( (char *)HPtr->HRaw, "%02x", ((HPtr->HRawC & 0xff00)>>8));
   \   00000294   0x8A20             LDRH     R0,[R4, #+16]
   \   00000296   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000298   0x0A02             LSRS     R2,R0,#+8
   \   0000029A   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000029C   0x.... 0x....      LDR.W    R1,??DataTable3_4
   \   000002A0   0xF114 0x0008      ADDS     R0,R4,#+8
   \   000002A4   0x.... 0x....      BL       sprintf
    521            sprintf( (char *)tempBffr2, "%02x", (HPtr->HRawC & 0x00ff));
   \   000002A8   0x7C20             LDRB     R0,[R4, #+16]
   \   000002AA   0xF000 0x02FF      AND      R2,R0,#0xFF
   \   000002AE   0x.... 0x....      LDR.W    R1,??DataTable3_4
   \   000002B2   0xA803             ADD      R0,SP,#+12
   \   000002B4   0x.... 0x....      BL       sprintf
    522            strcat( (char *)HPtr->HRaw, (char *)tempBffr2 );
   \   000002B8   0xA903             ADD      R1,SP,#+12
   \   000002BA   0xF114 0x0008      ADDS     R0,R4,#+8
   \   000002BE   0x.... 0x....      BL       strcat
    523            //strcat( (char *)HPtr->HRaw, "Rw" );
    524            // Calculate Legacy Value.
    525            tmp2 = (tmp/10) + HUMIDITY_SCALE2;
   \   000002C2   0x0030             MOVS     R0,R6
   \   000002C4   0x.... 0x....      LDR.W    R1,??DataTable3  ;; 0x41200000
   \   000002C8   0x.... 0x....      BL       __aeabi_fdiv
   \   000002CC   0x.... 0x....      LDR.W    R1,??DataTable3_5  ;; 0x40c00000
   \   000002D0   0x.... 0x....      BL       __aeabi_fadd
   \   000002D4   0x0007             MOVS     R7,R0
    526            tmp2 = tmp2 * HUMIDITY_SCALE1;
   \   000002D6   0x.... 0x....      LDR.W    R0,??DataTable3_6  ;; 0x44030000
   \   000002DA   0x0039             MOVS     R1,R7
   \   000002DC   0x.... 0x....      BL       __aeabi_fmul
   \   000002E0   0x0007             MOVS     R7,R0
    527            tmp3 = (uint16_t)tmp2;
   \   000002E2   0x0038             MOVS     R0,R7
   \   000002E4   0x.... 0x....      BL       __aeabi_f2iz
   \   000002E8   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    528            HPtr->HRawC = tmp3;
   \   000002EC   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \   000002F0   0x8220             STRH     R0,[R4, #+16]
    529          
    530            return Status;
   \   000002F2   0x0028             MOVS     R0,R5
   \   000002F4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??RoadBrd_Humidity_ReadHumidity_2: (+1)
   \   000002F6   0xB005             ADD      SP,SP,#+20
   \   000002F8   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    531          }
    532          
    533          /**
    534            * @brief  This function reads HTS221 Humidity output registers, and calculates temperature. It
    535            * then loads these values to the passed temperature Structure.
    536            * @param  TempPtr TPtr: Ptr to structure to receive the final values of Temperature.
    537            * @retval HAL_StatusTypeDef:     HAL_OK:       Tasking of block of data to UART success.
    538            *                                HAL_ERROR:    Error found in Tasking or data passed.
    539            *                                HAL_BUSY:     UART is busy.
    540            *                                HAL_TIMEOUT:  UART timed out.
    541            */

   \                                 In section .text, align 2, keep-with-next
    542          HAL_StatusTypeDef RoadBrd_Humidity_ReadTemperature_Scaled( TempPtr TPtr )
    543          {
   \                     RoadBrd_Humidity_ReadTemperature_Scaled: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB089             SUB      SP,SP,#+36
   \   00000006   0x0004             MOVS     R4,R0
    544            HAL_StatusTypeDef Status;
    545            int num_bytes;
    546            uint8_t i2cData[5];  
    547            int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
    548            int16_t T0_degC, T1_degC;
    549            char tempBffr2[5];
    550            uint8_t buffer[4], tmp;
    551            uint32_t tmp32;
    552            float Temp_C, Temp_F;
    553            uint16_t tempC;
    554            
    555            Status = HAL_OK;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x0005             MOVS     R5,R0
    556            
    557            /*1. Read from 0x32 & 0x33 registers the value of coefficients T0_d egC_x8 and T1_de gC_x8*/
    558            num_bytes = 0;    // No Data to Pass. | 0x80)
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x4681             MOV      R9,R0
    559            i2cData[0] = 0x00;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xF88D 0x0010      STRB     R0,[SP, #+16]
    560          #ifdef REV_L
    561            Status = RoadBrd_I2C_Master_Transmit_CMDData_IT((uint16_t)HMDTY_SNSR, (uint8_t)(HMDTY_SNSR_T0_degC_x8 | 0x80), i2cData, (uint16_t)num_bytes);
   \   00000016   0x4648             MOV      R0,R9
   \   00000018   0x0003             MOVS     R3,R0
   \   0000001A   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000001C   0xAA04             ADD      R2,SP,#+16
   \   0000001E   0x21B2             MOVS     R1,#+178
   \   00000020   0x20BE             MOVS     R0,#+190
   \   00000022   0x.... 0x....      BL       RoadBrd_I2C_Master_Transmit_CMDData_IT
   \   00000026   0x0005             MOVS     R5,R0
    562            // If Status was good, Time to get response.
    563            if (Status == HAL_OK)
   \   00000028   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000002A   0x2D00             CMP      R5,#+0
   \   0000002C   0xD131             BNE.N    ??RoadBrd_Humidity_ReadTemperature_Scaled_0
    564            {
    565              // Now wait for completion of XMIT.
    566              Status = RoadBrd_WaitForState( (uint16_t)( I2C_TIMEOUT/5 ));
   \   0000002E   0x2064             MOVS     R0,#+100
   \   00000030   0x.... 0x....      BL       RoadBrd_WaitForState
   \   00000034   0x0005             MOVS     R5,R0
    567              if (Status != HAL_OK)
   \   00000036   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000038   0x2D00             CMP      R5,#+0
   \   0000003A   0xD002             BEQ.N    ??RoadBrd_Humidity_ReadTemperature_Scaled_1
    568                return Status;
   \   0000003C   0x0028             MOVS     R0,R5
   \   0000003E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000040   0xE15C             B.N      ??RoadBrd_Humidity_ReadTemperature_Scaled_2
    569              else
    570              {
    571                Status =  RoadBrd_I2C_Master_Receive_IT((uint16_t)HMDTY_SNSR, buffer, (uint16_t)2);
   \                     ??RoadBrd_Humidity_ReadTemperature_Scaled_1: (+1)
   \   00000042   0x2202             MOVS     R2,#+2
   \   00000044   0x4669             MOV      R1,SP
   \   00000046   0x20BE             MOVS     R0,#+190
   \   00000048   0x.... 0x....      BL       RoadBrd_I2C_Master_Receive_IT
   \   0000004C   0x0005             MOVS     R5,R0
    572                if (Status == HAL_OK)
   \   0000004E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000050   0x2D00             CMP      R5,#+0
   \   00000052   0xD11B             BNE.N    ??RoadBrd_Humidity_ReadTemperature_Scaled_3
    573                {
    574                  // Now wait for completion of Receive.
    575                  Status = RoadBrd_WaitForState( (uint16_t)( I2C_TIMEOUT/5 ));
   \   00000054   0x2064             MOVS     R0,#+100
   \   00000056   0x.... 0x....      BL       RoadBrd_WaitForState
   \   0000005A   0x0005             MOVS     R5,R0
    576                  if (Status != HAL_OK)
   \   0000005C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000005E   0x2D00             CMP      R5,#+0
   \   00000060   0xD002             BEQ.N    ??RoadBrd_Humidity_ReadTemperature_Scaled_4
    577                    return Status;
   \   00000062   0x0028             MOVS     R0,R5
   \   00000064   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000066   0xE149             B.N      ??RoadBrd_Humidity_ReadTemperature_Scaled_2
    578                } // EndIf (Status == HAL_OK) RoadBrd_I2C_Master_Receive_IT
    579                else
    580                  return Status;
    581              } // EndElse (Status != HAL_OK) RoadBrd_WaitForState
    582            }// EndIf (Status == HAL_OK) RoadBrd_I2C_Master_Transmit_CMDData_IT
    583            else
    584              return Status;
    585          #else
    586            Status = RoadBrd_I2C_Master_Transmit_CMDData((uint16_t)HMDTY_SNSR, (uint8_t)(HMDTY_SNSR_T0_degC_x8 | 0x80), i2cData, (uint16_t)num_bytes, I2C_TIMEOUT);
    587            // If Status was good, Time to get response.
    588            if (Status == HAL_OK)
    589            {
    590              Status =  RoadBrd_I2C_Master_Receive((uint16_t)HMDTY_SNSR, buffer, (uint16_t)2, I2C_TIMEOUT);
    591              if (Status != HAL_OK)
    592                return Status;
    593            }
    594            else
    595              return Status;
    596          #endif
    597          
    598            /*2. Read from 0x35 register the value of the MSB bits of T1_deg C and T0_deg C */
    599            num_bytes = 0;    // No Data to Pass.
   \                     ??RoadBrd_Humidity_ReadTemperature_Scaled_4: (+1)
   \   00000068   0x2000             MOVS     R0,#+0
   \   0000006A   0x4681             MOV      R9,R0
    600            i2cData[0] = 0x00;
   \   0000006C   0x2000             MOVS     R0,#+0
   \   0000006E   0xF88D 0x0010      STRB     R0,[SP, #+16]
    601          #ifdef REV_L
    602            Status = RoadBrd_I2C_Master_Transmit_CMDData_IT((uint16_t)HMDTY_SNSR, (uint8_t)(HMDTY_SNSR_T1_T0_msb | 0x80), i2cData, (uint16_t)num_bytes);
   \   00000072   0x4648             MOV      R0,R9
   \   00000074   0x0003             MOVS     R3,R0
   \   00000076   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000078   0xAA04             ADD      R2,SP,#+16
   \   0000007A   0x21B5             MOVS     R1,#+181
   \   0000007C   0x20BE             MOVS     R0,#+190
   \   0000007E   0x.... 0x....      BL       RoadBrd_I2C_Master_Transmit_CMDData_IT
   \   00000082   0x0005             MOVS     R5,R0
    603            // If Status was good, Time to get response.
    604            if (Status == HAL_OK)
   \   00000084   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000086   0x2D00             CMP      R5,#+0
   \   00000088   0xD155             BNE.N    ??RoadBrd_Humidity_ReadTemperature_Scaled_5
   \   0000008A   0xE005             B.N      ??RoadBrd_Humidity_ReadTemperature_Scaled_6
   \                     ??RoadBrd_Humidity_ReadTemperature_Scaled_3: (+1)
   \   0000008C   0x0028             MOVS     R0,R5
   \   0000008E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000090   0xE134             B.N      ??RoadBrd_Humidity_ReadTemperature_Scaled_2
   \                     ??RoadBrd_Humidity_ReadTemperature_Scaled_0: (+1)
   \   00000092   0x0028             MOVS     R0,R5
   \   00000094   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000096   0xE131             B.N      ??RoadBrd_Humidity_ReadTemperature_Scaled_2
    605            {
    606              // Now wait for completion of XMIT.
    607              Status = RoadBrd_WaitForState( (uint16_t)( I2C_TIMEOUT/5 ));
   \                     ??RoadBrd_Humidity_ReadTemperature_Scaled_6: (+1)
   \   00000098   0x2064             MOVS     R0,#+100
   \   0000009A   0x.... 0x....      BL       RoadBrd_WaitForState
   \   0000009E   0x0005             MOVS     R5,R0
    608              if (Status != HAL_OK)
   \   000000A0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000A2   0x2D00             CMP      R5,#+0
   \   000000A4   0xD002             BEQ.N    ??RoadBrd_Humidity_ReadTemperature_Scaled_7
    609                return Status;
   \   000000A6   0x0028             MOVS     R0,R5
   \   000000A8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000AA   0xE127             B.N      ??RoadBrd_Humidity_ReadTemperature_Scaled_2
    610              else
    611              {
    612                Status =  RoadBrd_I2C_Master_Receive_IT((uint16_t)HMDTY_SNSR, &tmp, (uint16_t)1);
   \                     ??RoadBrd_Humidity_ReadTemperature_Scaled_7: (+1)
   \   000000AC   0x2201             MOVS     R2,#+1
   \   000000AE   0xA901             ADD      R1,SP,#+4
   \   000000B0   0x20BE             MOVS     R0,#+190
   \   000000B2   0x.... 0x....      BL       RoadBrd_I2C_Master_Receive_IT
   \   000000B6   0x0005             MOVS     R5,R0
    613                if (Status == HAL_OK)
   \   000000B8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000BA   0x2D00             CMP      R5,#+0
   \   000000BC   0xD138             BNE.N    ??RoadBrd_Humidity_ReadTemperature_Scaled_8
    614                {
    615                  // Now wait for completion of Receive.
    616                  Status = RoadBrd_WaitForState( (uint16_t)( I2C_TIMEOUT/5 ));
   \   000000BE   0x2064             MOVS     R0,#+100
   \   000000C0   0x.... 0x....      BL       RoadBrd_WaitForState
   \   000000C4   0x0005             MOVS     R5,R0
    617                  if (Status != HAL_OK)
   \   000000C6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000C8   0x2D00             CMP      R5,#+0
   \   000000CA   0xD002             BEQ.N    ??RoadBrd_Humidity_ReadTemperature_Scaled_9
    618                    return Status;
   \   000000CC   0x0028             MOVS     R0,R5
   \   000000CE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000D0   0xE114             B.N      ??RoadBrd_Humidity_ReadTemperature_Scaled_2
    619                } // EndIf (Status == HAL_OK) RoadBrd_I2C_Master_Receive_IT
    620                else
    621                  return Status;
    622              } // EndElse (Status != HAL_OK) RoadBrd_WaitForState
    623            }// EndIf (Status == HAL_OK) RoadBrd_I2C_Master_Transmit_CMDData_IT
    624            else
    625              return Status;
    626          #else
    627            Status = RoadBrd_I2C_Master_Transmit_CMDData((uint16_t)HMDTY_SNSR, (uint8_t)(HMDTY_SNSR_T1_T0_msb | 0x80), i2cData, (uint16_t)num_bytes, I2C_TIMEOUT);
    628            // If Status was good, Time to get response.
    629            if (Status == HAL_OK)
    630            {
    631              Status =  RoadBrd_I2C_Master_Receive((uint16_t)HMDTY_SNSR, &tmp, (uint16_t)1, I2C_TIMEOUT);
    632              if (Status != HAL_OK)
    633                return Status;
    634            }
    635            else
    636              return Status;
    637          #endif
    638            /*2a. Calculate the T0_deg C and T1_degC values*/
    639            T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
   \                     ??RoadBrd_Humidity_ReadTemperature_Scaled_9: (+1)
   \   000000D2   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   000000D6   0xF010 0x0003      ANDS     R0,R0,#0x3
   \   000000DA   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   000000DE   0xEA51 0x2000      ORRS     R0,R1,R0, LSL #+8
   \   000000E2   0xF8AD 0x000C      STRH     R0,[SP, #+12]
    640            T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
   \   000000E6   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   000000EA   0xF010 0x000C      ANDS     R0,R0,#0xC
   \   000000EE   0xF89D 0x1001      LDRB     R1,[SP, #+1]
   \   000000F2   0xEA51 0x1080      ORRS     R0,R1,R0, LSL #+6
   \   000000F6   0xF8AD 0x000A      STRH     R0,[SP, #+10]
    641            T0_degC = T0_degC_x8_u16>>3;
   \   000000FA   0xF9BD 0x000C      LDRSH    R0,[SP, #+12]
   \   000000FE   0x10C0             ASRS     R0,R0,#+3
   \   00000100   0x4683             MOV      R11,R0
    642            T1_degC = T1_degC_x8_u16>>3;
   \   00000102   0xF9BD 0x000A      LDRSH    R0,[SP, #+10]
   \   00000106   0x10C0             ASRS     R0,R0,#+3
   \   00000108   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    643          
    644            /*3. Read from 0x3C & 0x3D registers the value of T0_OUT*/
    645            /*4. Read from 0x3E & 0x3F registers the value of T1_OUT*/
    646            num_bytes = 0;    // No Data to Pass.
   \   0000010C   0x2000             MOVS     R0,#+0
   \   0000010E   0x4681             MOV      R9,R0
    647            i2cData[0] = 0x00;
   \   00000110   0x2000             MOVS     R0,#+0
   \   00000112   0xF88D 0x0010      STRB     R0,[SP, #+16]
    648          #ifdef REV_L
    649            Status = RoadBrd_I2C_Master_Transmit_CMDData_IT((uint16_t)HMDTY_SNSR, (uint8_t)(HMDTY_SNSR_T0_OUT | 0x80), i2cData, (uint16_t)num_bytes);
   \   00000116   0x4648             MOV      R0,R9
   \   00000118   0x0003             MOVS     R3,R0
   \   0000011A   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000011C   0xAA04             ADD      R2,SP,#+16
   \   0000011E   0x21BC             MOVS     R1,#+188
   \   00000120   0x20BE             MOVS     R0,#+190
   \   00000122   0x.... 0x....      BL       RoadBrd_I2C_Master_Transmit_CMDData_IT
   \   00000126   0x0005             MOVS     R5,R0
    650            // If Status was good, Time to get response.
    651            if (Status == HAL_OK)
   \   00000128   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000012A   0x2D00             CMP      R5,#+0
   \   0000012C   0xD149             BNE.N    ??RoadBrd_Humidity_ReadTemperature_Scaled_10
   \   0000012E   0xE005             B.N      ??RoadBrd_Humidity_ReadTemperature_Scaled_11
   \                     ??RoadBrd_Humidity_ReadTemperature_Scaled_8: (+1)
   \   00000130   0x0028             MOVS     R0,R5
   \   00000132   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000134   0xE0E2             B.N      ??RoadBrd_Humidity_ReadTemperature_Scaled_2
   \                     ??RoadBrd_Humidity_ReadTemperature_Scaled_5: (+1)
   \   00000136   0x0028             MOVS     R0,R5
   \   00000138   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000013A   0xE0DF             B.N      ??RoadBrd_Humidity_ReadTemperature_Scaled_2
    652            {
    653              // Now wait for completion of XMIT.
    654              Status = RoadBrd_WaitForState( (uint16_t)( I2C_TIMEOUT/5 ));
   \                     ??RoadBrd_Humidity_ReadTemperature_Scaled_11: (+1)
   \   0000013C   0x2064             MOVS     R0,#+100
   \   0000013E   0x.... 0x....      BL       RoadBrd_WaitForState
   \   00000142   0x0005             MOVS     R5,R0
    655              if (Status != HAL_OK)
   \   00000144   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000146   0x2D00             CMP      R5,#+0
   \   00000148   0xD002             BEQ.N    ??RoadBrd_Humidity_ReadTemperature_Scaled_12
    656                return Status;
   \   0000014A   0x0028             MOVS     R0,R5
   \   0000014C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000014E   0xE0D5             B.N      ??RoadBrd_Humidity_ReadTemperature_Scaled_2
    657              else
    658              {
    659                Status =  RoadBrd_I2C_Master_Receive_IT((uint16_t)HMDTY_SNSR, buffer, (uint16_t)4);
   \                     ??RoadBrd_Humidity_ReadTemperature_Scaled_12: (+1)
   \   00000150   0x2204             MOVS     R2,#+4
   \   00000152   0x4669             MOV      R1,SP
   \   00000154   0x20BE             MOVS     R0,#+190
   \   00000156   0x.... 0x....      BL       RoadBrd_I2C_Master_Receive_IT
   \   0000015A   0x0005             MOVS     R5,R0
    660                if (Status == HAL_OK)
   \   0000015C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000015E   0x2D00             CMP      R5,#+0
   \   00000160   0xD12C             BNE.N    ??RoadBrd_Humidity_ReadTemperature_Scaled_13
    661                {
    662                  // Now wait for completion of Receive.
    663                  Status = RoadBrd_WaitForState( (uint16_t)( I2C_TIMEOUT/5 ));
   \   00000162   0x2064             MOVS     R0,#+100
   \   00000164   0x.... 0x....      BL       RoadBrd_WaitForState
   \   00000168   0x0005             MOVS     R5,R0
    664                  if (Status != HAL_OK)
   \   0000016A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000016C   0x2D00             CMP      R5,#+0
   \   0000016E   0xD002             BEQ.N    ??RoadBrd_Humidity_ReadTemperature_Scaled_14
    665                    return Status;
   \   00000170   0x0028             MOVS     R0,R5
   \   00000172   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000174   0xE0C2             B.N      ??RoadBrd_Humidity_ReadTemperature_Scaled_2
    666                } // EndIf (Status == HAL_OK) RoadBrd_I2C_Master_Receive_IT
    667                else
    668                  return Status;
    669              } // EndElse (Status != HAL_OK) RoadBrd_WaitForState
    670            }// EndIf (Status == HAL_OK) RoadBrd_I2C_Master_Transmit_CMDData_IT
    671            else
    672              return Status;
    673          #else
    674            Status = RoadBrd_I2C_Master_Transmit_CMDData((uint16_t)HMDTY_SNSR, (uint8_t)(HMDTY_SNSR_T0_OUT | 0x80), i2cData, (uint16_t)num_bytes, I2C_TIMEOUT);
    675            // If Status was good, Time to get response.
    676            if (Status == HAL_OK)
    677            {
    678              Status =  RoadBrd_I2C_Master_Receive((uint16_t)HMDTY_SNSR, buffer, (uint16_t)4, I2C_TIMEOUT);
    679              if (Status != HAL_OK)
    680                return Status;
    681            }
    682            else
    683              return Status;
    684          #endif
    685            T0_out = (((uint16_t)buffer[1])<<8) | (uint16_t)buffer[0];
   \                     ??RoadBrd_Humidity_ReadTemperature_Scaled_14: (+1)
   \   00000176   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   0000017A   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   0000017E   0xEA51 0x2000      ORRS     R0,R1,R0, LSL #+8
   \   00000182   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    686            T1_out = (((uint16_t)buffer[3])<<8) | (uint16_t)buffer[2];
   \   00000186   0xF89D 0x0003      LDRB     R0,[SP, #+3]
   \   0000018A   0xF89D 0x1002      LDRB     R1,[SP, #+2]
   \   0000018E   0xEA51 0x2000      ORRS     R0,R1,R0, LSL #+8
   \   00000192   0xF8AD 0x0018      STRH     R0,[SP, #+24]
    687          
    688            /* 5.Read from 0x2A & 0x2B registers the value T_OUT (ADC_OUT).*/
    689            num_bytes = 0;    // No Data to Pass.
   \   00000196   0x2000             MOVS     R0,#+0
   \   00000198   0x4681             MOV      R9,R0
    690            i2cData[0] = 0x00;
   \   0000019A   0x2000             MOVS     R0,#+0
   \   0000019C   0xF88D 0x0010      STRB     R0,[SP, #+16]
    691          #ifdef REV_L
    692            Status = RoadBrd_I2C_Master_Transmit_CMDData_IT((uint16_t)HMDTY_SNSR, (uint8_t)(HMDTY_SNSR_TEMP_OUT_L | 0x80), i2cData, (uint16_t)num_bytes);
   \   000001A0   0x4648             MOV      R0,R9
   \   000001A2   0x0003             MOVS     R3,R0
   \   000001A4   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   000001A6   0xAA04             ADD      R2,SP,#+16
   \   000001A8   0x21AA             MOVS     R1,#+170
   \   000001AA   0x20BE             MOVS     R0,#+190
   \   000001AC   0x.... 0x....      BL       RoadBrd_I2C_Master_Transmit_CMDData_IT
   \   000001B0   0x0005             MOVS     R5,R0
    693            // If Status was good, Time to get response.
    694            if (Status == HAL_OK)
   \   000001B2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000001B4   0x2D00             CMP      R5,#+0
   \   000001B6   0xF040 0x809F      BNE.W    ??RoadBrd_Humidity_ReadTemperature_Scaled_15
   \   000001BA   0xE005             B.N      ??RoadBrd_Humidity_ReadTemperature_Scaled_16
   \                     ??RoadBrd_Humidity_ReadTemperature_Scaled_13: (+1)
   \   000001BC   0x0028             MOVS     R0,R5
   \   000001BE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001C0   0xE09C             B.N      ??RoadBrd_Humidity_ReadTemperature_Scaled_2
   \                     ??RoadBrd_Humidity_ReadTemperature_Scaled_10: (+1)
   \   000001C2   0x0028             MOVS     R0,R5
   \   000001C4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001C6   0xE099             B.N      ??RoadBrd_Humidity_ReadTemperature_Scaled_2
    695            {
    696              // Now wait for completion of XMIT.
    697              Status = RoadBrd_WaitForState( (uint16_t)( I2C_TIMEOUT/5 ));
   \                     ??RoadBrd_Humidity_ReadTemperature_Scaled_16: (+1)
   \   000001C8   0x2064             MOVS     R0,#+100
   \   000001CA   0x.... 0x....      BL       RoadBrd_WaitForState
   \   000001CE   0x0005             MOVS     R5,R0
    698              if (Status != HAL_OK)
   \   000001D0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000001D2   0x2D00             CMP      R5,#+0
   \   000001D4   0xD002             BEQ.N    ??RoadBrd_Humidity_ReadTemperature_Scaled_17
    699                return Status;
   \   000001D6   0x0028             MOVS     R0,R5
   \   000001D8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001DA   0xE08F             B.N      ??RoadBrd_Humidity_ReadTemperature_Scaled_2
    700              else
    701              {
    702                Status =  RoadBrd_I2C_Master_Receive_IT((uint16_t)HMDTY_SNSR, buffer, (uint16_t)2);
   \                     ??RoadBrd_Humidity_ReadTemperature_Scaled_17: (+1)
   \   000001DC   0x2202             MOVS     R2,#+2
   \   000001DE   0x4669             MOV      R1,SP
   \   000001E0   0x20BE             MOVS     R0,#+190
   \   000001E2   0x.... 0x....      BL       RoadBrd_I2C_Master_Receive_IT
   \   000001E6   0x0005             MOVS     R5,R0
    703                if (Status == HAL_OK)
   \   000001E8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000001EA   0x2D00             CMP      R5,#+0
   \   000001EC   0xF040 0x8081      BNE.W    ??RoadBrd_Humidity_ReadTemperature_Scaled_18
    704                {
    705                  // Now wait for completion of Receive.
    706                  Status = RoadBrd_WaitForState( (uint16_t)( I2C_TIMEOUT/5 ));
   \   000001F0   0x2064             MOVS     R0,#+100
   \   000001F2   0x.... 0x....      BL       RoadBrd_WaitForState
   \   000001F6   0x0005             MOVS     R5,R0
    707                  if (Status != HAL_OK)
   \   000001F8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000001FA   0x2D00             CMP      R5,#+0
   \   000001FC   0xD002             BEQ.N    ??RoadBrd_Humidity_ReadTemperature_Scaled_19
    708                    return Status;
   \   000001FE   0x0028             MOVS     R0,R5
   \   00000200   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000202   0xE07B             B.N      ??RoadBrd_Humidity_ReadTemperature_Scaled_2
    709                } // EndIf (Status == HAL_OK) RoadBrd_I2C_Master_Receive_IT
    710                else
    711                  return Status;
    712              } // EndElse (Status != HAL_OK) RoadBrd_WaitForState
    713            }// EndIf (Status == HAL_OK) RoadBrd_I2C_Master_Transmit_CMDData_IT
    714            else
    715              return Status;
    716          #else
    717            Status = RoadBrd_I2C_Master_Transmit_CMDData((uint16_t)HMDTY_SNSR, (uint8_t)(HMDTY_SNSR_TEMP_OUT_L | 0x80), i2cData, (uint16_t)num_bytes, I2C_TIMEOUT);
    718            // If Status was good, Time to get response.
    719            if (Status == HAL_OK)
    720            {
    721              Status =  RoadBrd_I2C_Master_Receive((uint16_t)HMDTY_SNSR, buffer, (uint16_t)2, I2C_TIMEOUT);
    722              if (Status != HAL_OK)
    723                return Status;
    724            }
    725            else
    726              return Status;
    727          #endif
    728            T_out = (((uint16_t)buffer[1])<<8) | (uint16_t)buffer[0];
   \                     ??RoadBrd_Humidity_ReadTemperature_Scaled_19: (+1)
   \   00000204   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   00000208   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   0000020C   0xEA51 0x2000      ORRS     R0,R1,R0, LSL #+8
   \   00000210   0xF8AD 0x000E      STRH     R0,[SP, #+14]
    729          
    730            /* 6. Compute the Temperature value by line r interpolation*/
    731            tmp32 = ((uint32_t)(T_out - T0_out)) * ((uint32_t)(T1_degC - T0_degC)*10);
   \   00000214   0xF9BD 0x000E      LDRSH    R0,[SP, #+14]
   \   00000218   0xF9BD 0x1006      LDRSH    R1,[SP, #+6]
   \   0000021C   0x1A40             SUBS     R0,R0,R1
   \   0000021E   0xF9BD 0x1008      LDRSH    R1,[SP, #+8]
   \   00000222   0xFA0F 0xFB8B      SXTH     R11,R11          ;; SignExt  R11,R11,#+16,#+16
   \   00000226   0xEBB1 0x010B      SUBS     R1,R1,R11
   \   0000022A   0x4348             MULS     R0,R1,R0
   \   0000022C   0x210A             MOVS     R1,#+10
   \   0000022E   0x4348             MULS     R0,R1,R0
   \   00000230   0x0006             MOVS     R6,R0
    732            tmp32 = tmp32 /(T1_out - T0_out) + T0_degC*10;
   \   00000232   0xF9BD 0x0018      LDRSH    R0,[SP, #+24]
   \   00000236   0xF9BD 0x1006      LDRSH    R1,[SP, #+6]
   \   0000023A   0x1A40             SUBS     R0,R0,R1
   \   0000023C   0xFBB6 0xF0F0      UDIV     R0,R6,R0
   \   00000240   0xFA0F 0xFB8B      SXTH     R11,R11          ;; SignExt  R11,R11,#+16,#+16
   \   00000244   0x210A             MOVS     R1,#+10
   \   00000246   0xFB01 0x060B      MLA      R6,R1,R11,R0
    733            tempC = (uint16_t)tmp32;
   \   0000024A   0x0030             MOVS     R0,R6
   \   0000024C   0x4680             MOV      R8,R0
    734          
    735            // Now Build results.
    736            Temp_C = tmp32;
   \   0000024E   0x0030             MOVS     R0,R6
   \   00000250   0x.... 0x....      BL       __aeabi_ui2f
   \   00000254   0x0007             MOVS     R7,R0
    737            Temp_C = Temp_C/10;
   \   00000256   0x0038             MOVS     R0,R7
   \   00000258   0x.... 0x....      LDR.W    R1,??DataTable3  ;; 0x41200000
   \   0000025C   0x.... 0x....      BL       __aeabi_fdiv
   \   00000260   0x0007             MOVS     R7,R0
    738            Temp_F = (Temp_C * 1.8) + 32;
   \   00000262   0x0038             MOVS     R0,R7
   \   00000264   0x.... 0x....      BL       __aeabi_f2d
   \   00000268   0x.... 0x....      LDR.W    R2,??DataTable3_7  ;; 0xcccccccd
   \   0000026C   0x.... 0x....      LDR.W    R3,??DataTable3_8  ;; 0x3ffccccc
   \   00000270   0x.... 0x....      BL       __aeabi_dmul
   \   00000274   0x2200             MOVS     R2,#+0
   \   00000276   0x.... 0x....      LDR.W    R3,??DataTable3_9  ;; 0x40400000
   \   0000027A   0x.... 0x....      BL       __aeabi_dadd
   \   0000027E   0x.... 0x....      BL       __aeabi_d2f
   \   00000282   0x4682             MOV      R10,R0
    739          
    740            Temp_C = RoadBrd_CAL_ScaleValue( CAL_HUM_TEMPC, Temp_C);
   \   00000284   0x0039             MOVS     R1,R7
   \   00000286   0x2008             MOVS     R0,#+8
   \   00000288   0x.... 0x....      BL       RoadBrd_CAL_ScaleValue
   \   0000028C   0x0007             MOVS     R7,R0
    741            Temp_F = RoadBrd_CAL_ScaleValue( CAL_HUM_TEMPF, Temp_F);
   \   0000028E   0x4651             MOV      R1,R10
   \   00000290   0x2009             MOVS     R0,#+9
   \   00000292   0x.... 0x....      BL       RoadBrd_CAL_ScaleValue
   \   00000296   0x4682             MOV      R10,R0
    742            
    743            TPtr->RawC = tempC;
   \   00000298   0xF8A4 0x8016      STRH     R8,[R4, #+22]
    744            sprintf( (char *)TPtr->TempC, "%3.1f", Temp_C );
   \   0000029C   0x0038             MOVS     R0,R7
   \   0000029E   0x.... 0x....      BL       __aeabi_f2d
   \   000002A2   0x0002             MOVS     R2,R0
   \   000002A4   0x000B             MOVS     R3,R1
   \   000002A6   0x....             LDR.N    R1,??DataTable3_10
   \   000002A8   0x0020             MOVS     R0,R4
   \   000002AA   0x.... 0x....      BL       sprintf
    745            sprintf( (char *)TPtr->TempF, "%3.1f", Temp_F );
   \   000002AE   0x4650             MOV      R0,R10
   \   000002B0   0x.... 0x....      BL       __aeabi_f2d
   \   000002B4   0x0002             MOVS     R2,R0
   \   000002B6   0x000B             MOVS     R3,R1
   \   000002B8   0x....             LDR.N    R1,??DataTable3_10
   \   000002BA   0x1DE0             ADDS     R0,R4,#+7
   \   000002BC   0x.... 0x....      BL       sprintf
    746            // NOW, Build Raw Data String..
    747            sprintf( (char *)TPtr->Raw, "%02x", ((tempC & 0xff00)>>8));
   \   000002C0   0x4640             MOV      R0,R8
   \   000002C2   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000002C4   0x0A02             LSRS     R2,R0,#+8
   \   000002C6   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   000002C8   0x....             LDR.N    R1,??DataTable3_4
   \   000002CA   0xF114 0x000E      ADDS     R0,R4,#+14
   \   000002CE   0x.... 0x....      BL       sprintf
    748            sprintf( (char *)tempBffr2, "%02x", (tempC & 0x00ff));
   \   000002D2   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   000002D6   0xF008 0x02FF      AND      R2,R8,#0xFF
   \   000002DA   0x....             LDR.N    R1,??DataTable3_4
   \   000002DC   0xA807             ADD      R0,SP,#+28
   \   000002DE   0x.... 0x....      BL       sprintf
    749            strcat( (char *)TPtr->Raw, (char *)tempBffr2 );
   \   000002E2   0xA907             ADD      R1,SP,#+28
   \   000002E4   0xF114 0x000E      ADDS     R0,R4,#+14
   \   000002E8   0x.... 0x....      BL       strcat
    750            //strcat( (char *)TPtr->Raw, "Rw" );
    751          
    752            return Status;
   \   000002EC   0x0028             MOVS     R0,R5
   \   000002EE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000002F0   0xE004             B.N      ??RoadBrd_Humidity_ReadTemperature_Scaled_2
   \                     ??RoadBrd_Humidity_ReadTemperature_Scaled_18: (+1)
   \   000002F2   0x0028             MOVS     R0,R5
   \   000002F4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000002F6   0xE001             B.N      ??RoadBrd_Humidity_ReadTemperature_Scaled_2
   \                     ??RoadBrd_Humidity_ReadTemperature_Scaled_15: (+1)
   \   000002F8   0x0028             MOVS     R0,R5
   \   000002FA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??RoadBrd_Humidity_ReadTemperature_Scaled_2: (+1)
   \   000002FC   0xB009             ADD      SP,SP,#+36
   \   000002FE   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    753          }
    754          
    755          /**
    756            * @brief  This function reads HTS221 Humidity output registers, and calculates temperature. It
    757            * then loads these values to the passed temperature Structure.
    758            * @param  TempPtr TPtr: Ptr to structure to receive the final values of Temperature.
    759            * @retval HAL_StatusTypeDef:     HAL_OK:       Tasking of block of data to UART success.
    760            *                                HAL_ERROR:    Error found in Tasking or data passed.
    761            *                                HAL_BUSY:     UART is busy.
    762            *                                HAL_TIMEOUT:  UART timed out.
    763            */

   \                                 In section .text, align 2, keep-with-next
    764          HAL_StatusTypeDef RoadBrd_Humidity_ReadTemperature( TempPtr TPtr )
    765          {
   \                     RoadBrd_Humidity_ReadTemperature: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB089             SUB      SP,SP,#+36
   \   00000006   0x0004             MOVS     R4,R0
    766            HAL_StatusTypeDef Status;
    767            int num_bytes;
    768            uint8_t i2cData[5];  
    769            int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
    770            int16_t T0_degC, T1_degC;
    771            char tempBffr2[5];
    772            uint8_t buffer[4], tmp;
    773            uint32_t tmp32;
    774            float Temp_C, Temp_F;
    775            uint16_t tempC;
    776            
    777            Status = HAL_OK;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x0005             MOVS     R5,R0
    778            
    779            /*1. Read from 0x32 & 0x33 registers the value of coefficients T0_d egC_x8 and T1_de gC_x8*/
    780            num_bytes = 0;    // No Data to Pass. | 0x80)
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x4681             MOV      R9,R0
    781            i2cData[0] = 0x00;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xF88D 0x0010      STRB     R0,[SP, #+16]
    782          #ifdef REV_L
    783            Status = RoadBrd_I2C_Master_Transmit_CMDData_IT((uint16_t)HMDTY_SNSR, (uint8_t)(HMDTY_SNSR_T0_degC_x8 | 0x80), i2cData, (uint16_t)num_bytes);
   \   00000016   0x4648             MOV      R0,R9
   \   00000018   0x0003             MOVS     R3,R0
   \   0000001A   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000001C   0xAA04             ADD      R2,SP,#+16
   \   0000001E   0x21B2             MOVS     R1,#+178
   \   00000020   0x20BE             MOVS     R0,#+190
   \   00000022   0x.... 0x....      BL       RoadBrd_I2C_Master_Transmit_CMDData_IT
   \   00000026   0x0005             MOVS     R5,R0
    784            // If Status was good, Time to get response.
    785            if (Status == HAL_OK)
   \   00000028   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000002A   0x2D00             CMP      R5,#+0
   \   0000002C   0xD131             BNE.N    ??RoadBrd_Humidity_ReadTemperature_0
    786            {
    787              // Now wait for completion of XMIT.
    788              Status = RoadBrd_WaitForState( (uint16_t)( I2C_TIMEOUT/5 ));
   \   0000002E   0x2064             MOVS     R0,#+100
   \   00000030   0x.... 0x....      BL       RoadBrd_WaitForState
   \   00000034   0x0005             MOVS     R5,R0
    789              if (Status != HAL_OK)
   \   00000036   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000038   0x2D00             CMP      R5,#+0
   \   0000003A   0xD002             BEQ.N    ??RoadBrd_Humidity_ReadTemperature_1
    790                return Status;
   \   0000003C   0x0028             MOVS     R0,R5
   \   0000003E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000040   0xE14E             B.N      ??RoadBrd_Humidity_ReadTemperature_2
    791              else
    792              {
    793                Status =  RoadBrd_I2C_Master_Receive_IT((uint16_t)HMDTY_SNSR, buffer, (uint16_t)2);
   \                     ??RoadBrd_Humidity_ReadTemperature_1: (+1)
   \   00000042   0x2202             MOVS     R2,#+2
   \   00000044   0x4669             MOV      R1,SP
   \   00000046   0x20BE             MOVS     R0,#+190
   \   00000048   0x.... 0x....      BL       RoadBrd_I2C_Master_Receive_IT
   \   0000004C   0x0005             MOVS     R5,R0
    794                if (Status == HAL_OK)
   \   0000004E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000050   0x2D00             CMP      R5,#+0
   \   00000052   0xD11B             BNE.N    ??RoadBrd_Humidity_ReadTemperature_3
    795                {
    796                  // Now wait for completion of Receive.
    797                  Status = RoadBrd_WaitForState( (uint16_t)( I2C_TIMEOUT/5 ));
   \   00000054   0x2064             MOVS     R0,#+100
   \   00000056   0x.... 0x....      BL       RoadBrd_WaitForState
   \   0000005A   0x0005             MOVS     R5,R0
    798                  if (Status != HAL_OK)
   \   0000005C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000005E   0x2D00             CMP      R5,#+0
   \   00000060   0xD002             BEQ.N    ??RoadBrd_Humidity_ReadTemperature_4
    799                    return Status;
   \   00000062   0x0028             MOVS     R0,R5
   \   00000064   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000066   0xE13B             B.N      ??RoadBrd_Humidity_ReadTemperature_2
    800                } // EndIf (Status == HAL_OK) RoadBrd_I2C_Master_Receive_IT
    801                else
    802                  return Status;
    803              } // EndElse (Status != HAL_OK) RoadBrd_WaitForState
    804            }// EndIf (Status == HAL_OK) RoadBrd_I2C_Master_Transmit_CMDData_IT
    805            else
    806              return Status;
    807          #else
    808            Status = RoadBrd_I2C_Master_Transmit_CMDData((uint16_t)HMDTY_SNSR, (uint8_t)(HMDTY_SNSR_T0_degC_x8 | 0x80), i2cData, (uint16_t)num_bytes, I2C_TIMEOUT);
    809            // If Status was good, Time to get response.
    810            if (Status == HAL_OK)
    811            {
    812              Status =  RoadBrd_I2C_Master_Receive((uint16_t)HMDTY_SNSR, buffer, (uint16_t)2, I2C_TIMEOUT);
    813              if (Status != HAL_OK)
    814                return Status;
    815            }
    816            else
    817              return Status;
    818          #endif
    819          
    820            /*2. Read from 0x35 register the value of the MSB bits of T1_deg C and T0_deg C */
    821            num_bytes = 0;    // No Data to Pass.
   \                     ??RoadBrd_Humidity_ReadTemperature_4: (+1)
   \   00000068   0x2000             MOVS     R0,#+0
   \   0000006A   0x4681             MOV      R9,R0
    822            i2cData[0] = 0x00;
   \   0000006C   0x2000             MOVS     R0,#+0
   \   0000006E   0xF88D 0x0010      STRB     R0,[SP, #+16]
    823          #ifdef REV_L
    824            Status = RoadBrd_I2C_Master_Transmit_CMDData_IT((uint16_t)HMDTY_SNSR, (uint8_t)(HMDTY_SNSR_T1_T0_msb | 0x80), i2cData, (uint16_t)num_bytes);
   \   00000072   0x4648             MOV      R0,R9
   \   00000074   0x0003             MOVS     R3,R0
   \   00000076   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000078   0xAA04             ADD      R2,SP,#+16
   \   0000007A   0x21B5             MOVS     R1,#+181
   \   0000007C   0x20BE             MOVS     R0,#+190
   \   0000007E   0x.... 0x....      BL       RoadBrd_I2C_Master_Transmit_CMDData_IT
   \   00000082   0x0005             MOVS     R5,R0
    825            // If Status was good, Time to get response.
    826            if (Status == HAL_OK)
   \   00000084   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000086   0x2D00             CMP      R5,#+0
   \   00000088   0xD155             BNE.N    ??RoadBrd_Humidity_ReadTemperature_5
   \   0000008A   0xE005             B.N      ??RoadBrd_Humidity_ReadTemperature_6
   \                     ??RoadBrd_Humidity_ReadTemperature_3: (+1)
   \   0000008C   0x0028             MOVS     R0,R5
   \   0000008E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000090   0xE126             B.N      ??RoadBrd_Humidity_ReadTemperature_2
   \                     ??RoadBrd_Humidity_ReadTemperature_0: (+1)
   \   00000092   0x0028             MOVS     R0,R5
   \   00000094   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000096   0xE123             B.N      ??RoadBrd_Humidity_ReadTemperature_2
    827            {
    828              // Now wait for completion of XMIT.
    829              Status = RoadBrd_WaitForState( (uint16_t)( I2C_TIMEOUT/5 ));
   \                     ??RoadBrd_Humidity_ReadTemperature_6: (+1)
   \   00000098   0x2064             MOVS     R0,#+100
   \   0000009A   0x.... 0x....      BL       RoadBrd_WaitForState
   \   0000009E   0x0005             MOVS     R5,R0
    830              if (Status != HAL_OK)
   \   000000A0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000A2   0x2D00             CMP      R5,#+0
   \   000000A4   0xD002             BEQ.N    ??RoadBrd_Humidity_ReadTemperature_7
    831                return Status;
   \   000000A6   0x0028             MOVS     R0,R5
   \   000000A8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000AA   0xE119             B.N      ??RoadBrd_Humidity_ReadTemperature_2
    832              else
    833              {
    834                Status =  RoadBrd_I2C_Master_Receive_IT((uint16_t)HMDTY_SNSR, &tmp, (uint16_t)1);
   \                     ??RoadBrd_Humidity_ReadTemperature_7: (+1)
   \   000000AC   0x2201             MOVS     R2,#+1
   \   000000AE   0xA901             ADD      R1,SP,#+4
   \   000000B0   0x20BE             MOVS     R0,#+190
   \   000000B2   0x.... 0x....      BL       RoadBrd_I2C_Master_Receive_IT
   \   000000B6   0x0005             MOVS     R5,R0
    835                if (Status == HAL_OK)
   \   000000B8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000BA   0x2D00             CMP      R5,#+0
   \   000000BC   0xD138             BNE.N    ??RoadBrd_Humidity_ReadTemperature_8
    836                {
    837                  // Now wait for completion of Receive.
    838                  Status = RoadBrd_WaitForState( (uint16_t)( I2C_TIMEOUT/5 ));
   \   000000BE   0x2064             MOVS     R0,#+100
   \   000000C0   0x.... 0x....      BL       RoadBrd_WaitForState
   \   000000C4   0x0005             MOVS     R5,R0
    839                  if (Status != HAL_OK)
   \   000000C6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000C8   0x2D00             CMP      R5,#+0
   \   000000CA   0xD002             BEQ.N    ??RoadBrd_Humidity_ReadTemperature_9
    840                    return Status;
   \   000000CC   0x0028             MOVS     R0,R5
   \   000000CE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000D0   0xE106             B.N      ??RoadBrd_Humidity_ReadTemperature_2
    841                } // EndIf (Status == HAL_OK) RoadBrd_I2C_Master_Receive_IT
    842                else
    843                  return Status;
    844              } // EndElse (Status != HAL_OK) RoadBrd_WaitForState
    845            }// EndIf (Status == HAL_OK) RoadBrd_I2C_Master_Transmit_CMDData_IT
    846            else
    847              return Status;
    848          #else
    849            Status = RoadBrd_I2C_Master_Transmit_CMDData((uint16_t)HMDTY_SNSR, (uint8_t)(HMDTY_SNSR_T1_T0_msb | 0x80), i2cData, (uint16_t)num_bytes, I2C_TIMEOUT);
    850            // If Status was good, Time to get response.
    851            if (Status == HAL_OK)
    852            {
    853              Status =  RoadBrd_I2C_Master_Receive((uint16_t)HMDTY_SNSR, &tmp, (uint16_t)1, I2C_TIMEOUT);
    854              if (Status != HAL_OK)
    855                return Status;
    856            }
    857            else
    858              return Status;
    859          #endif
    860            /*2a. Calculate the T0_deg C and T1_degC values*/
    861            T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
   \                     ??RoadBrd_Humidity_ReadTemperature_9: (+1)
   \   000000D2   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   000000D6   0xF010 0x0003      ANDS     R0,R0,#0x3
   \   000000DA   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   000000DE   0xEA51 0x2000      ORRS     R0,R1,R0, LSL #+8
   \   000000E2   0xF8AD 0x000A      STRH     R0,[SP, #+10]
    862            T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
   \   000000E6   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   000000EA   0xF010 0x000C      ANDS     R0,R0,#0xC
   \   000000EE   0xF89D 0x1001      LDRB     R1,[SP, #+1]
   \   000000F2   0xEA51 0x1080      ORRS     R0,R1,R0, LSL #+6
   \   000000F6   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    863            T0_degC = T0_degC_x8_u16>>3;
   \   000000FA   0xF9BD 0x000A      LDRSH    R0,[SP, #+10]
   \   000000FE   0x10C0             ASRS     R0,R0,#+3
   \   00000100   0x4682             MOV      R10,R0
    864            T1_degC = T1_degC_x8_u16>>3;
   \   00000102   0xF9BD 0x0008      LDRSH    R0,[SP, #+8]
   \   00000106   0x10C0             ASRS     R0,R0,#+3
   \   00000108   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    865          
    866            /*3. Read from 0x3C & 0x3D registers the value of T0_OUT*/
    867            /*4. Read from 0x3E & 0x3F registers the value of T1_OUT*/
    868            num_bytes = 0;    // No Data to Pass.
   \   0000010C   0x2000             MOVS     R0,#+0
   \   0000010E   0x4681             MOV      R9,R0
    869            i2cData[0] = 0x00;
   \   00000110   0x2000             MOVS     R0,#+0
   \   00000112   0xF88D 0x0010      STRB     R0,[SP, #+16]
    870          #ifdef REV_L
    871            Status = RoadBrd_I2C_Master_Transmit_CMDData_IT((uint16_t)HMDTY_SNSR, (uint8_t)(HMDTY_SNSR_T0_OUT | 0x80), i2cData, (uint16_t)num_bytes);
   \   00000116   0x4648             MOV      R0,R9
   \   00000118   0x0003             MOVS     R3,R0
   \   0000011A   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000011C   0xAA04             ADD      R2,SP,#+16
   \   0000011E   0x21BC             MOVS     R1,#+188
   \   00000120   0x20BE             MOVS     R0,#+190
   \   00000122   0x.... 0x....      BL       RoadBrd_I2C_Master_Transmit_CMDData_IT
   \   00000126   0x0005             MOVS     R5,R0
    872            // If Status was good, Time to get response.
    873            if (Status == HAL_OK)
   \   00000128   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000012A   0x2D00             CMP      R5,#+0
   \   0000012C   0xD148             BNE.N    ??RoadBrd_Humidity_ReadTemperature_10
   \   0000012E   0xE005             B.N      ??RoadBrd_Humidity_ReadTemperature_11
   \                     ??RoadBrd_Humidity_ReadTemperature_8: (+1)
   \   00000130   0x0028             MOVS     R0,R5
   \   00000132   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000134   0xE0D4             B.N      ??RoadBrd_Humidity_ReadTemperature_2
   \                     ??RoadBrd_Humidity_ReadTemperature_5: (+1)
   \   00000136   0x0028             MOVS     R0,R5
   \   00000138   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000013A   0xE0D1             B.N      ??RoadBrd_Humidity_ReadTemperature_2
    874            {
    875              // Now wait for completion of XMIT.
    876              Status = RoadBrd_WaitForState( (uint16_t)( I2C_TIMEOUT/5 ));
   \                     ??RoadBrd_Humidity_ReadTemperature_11: (+1)
   \   0000013C   0x2064             MOVS     R0,#+100
   \   0000013E   0x.... 0x....      BL       RoadBrd_WaitForState
   \   00000142   0x0005             MOVS     R5,R0
    877              if (Status != HAL_OK)
   \   00000144   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000146   0x2D00             CMP      R5,#+0
   \   00000148   0xD002             BEQ.N    ??RoadBrd_Humidity_ReadTemperature_12
    878                return Status;
   \   0000014A   0x0028             MOVS     R0,R5
   \   0000014C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000014E   0xE0C7             B.N      ??RoadBrd_Humidity_ReadTemperature_2
    879              else
    880              {
    881                Status =  RoadBrd_I2C_Master_Receive_IT((uint16_t)HMDTY_SNSR, buffer, (uint16_t)4);
   \                     ??RoadBrd_Humidity_ReadTemperature_12: (+1)
   \   00000150   0x2204             MOVS     R2,#+4
   \   00000152   0x4669             MOV      R1,SP
   \   00000154   0x20BE             MOVS     R0,#+190
   \   00000156   0x.... 0x....      BL       RoadBrd_I2C_Master_Receive_IT
   \   0000015A   0x0005             MOVS     R5,R0
    882                if (Status == HAL_OK)
   \   0000015C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000015E   0x2D00             CMP      R5,#+0
   \   00000160   0xD12B             BNE.N    ??RoadBrd_Humidity_ReadTemperature_13
    883                {
    884                  // Now wait for completion of Receive.
    885                  Status = RoadBrd_WaitForState( (uint16_t)( I2C_TIMEOUT/5 ));
   \   00000162   0x2064             MOVS     R0,#+100
   \   00000164   0x.... 0x....      BL       RoadBrd_WaitForState
   \   00000168   0x0005             MOVS     R5,R0
    886                  if (Status != HAL_OK)
   \   0000016A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000016C   0x2D00             CMP      R5,#+0
   \   0000016E   0xD002             BEQ.N    ??RoadBrd_Humidity_ReadTemperature_14
    887                    return Status;
   \   00000170   0x0028             MOVS     R0,R5
   \   00000172   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000174   0xE0B4             B.N      ??RoadBrd_Humidity_ReadTemperature_2
    888                } // EndIf (Status == HAL_OK) RoadBrd_I2C_Master_Receive_IT
    889                else
    890                  return Status;
    891              } // EndElse (Status != HAL_OK) RoadBrd_WaitForState
    892            }// EndIf (Status == HAL_OK) RoadBrd_I2C_Master_Transmit_CMDData_IT
    893            else
    894              return Status;
    895          #else
    896            Status = RoadBrd_I2C_Master_Transmit_CMDData((uint16_t)HMDTY_SNSR, (uint8_t)(HMDTY_SNSR_T0_OUT | 0x80), i2cData, (uint16_t)num_bytes, I2C_TIMEOUT);
    897            // If Status was good, Time to get response.
    898            if (Status == HAL_OK)
    899            {
    900              Status =  RoadBrd_I2C_Master_Receive((uint16_t)HMDTY_SNSR, buffer, (uint16_t)4, I2C_TIMEOUT);
    901              if (Status != HAL_OK)
    902                return Status;
    903            }
    904            else
    905              return Status;
    906          #endif
    907            T0_out = (((uint16_t)buffer[1])<<8) | (uint16_t)buffer[0];
   \                     ??RoadBrd_Humidity_ReadTemperature_14: (+1)
   \   00000176   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   0000017A   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   0000017E   0xEA51 0x2000      ORRS     R0,R1,R0, LSL #+8
   \   00000182   0x4683             MOV      R11,R0
    908            T1_out = (((uint16_t)buffer[3])<<8) | (uint16_t)buffer[2];
   \   00000184   0xF89D 0x0003      LDRB     R0,[SP, #+3]
   \   00000188   0xF89D 0x1002      LDRB     R1,[SP, #+2]
   \   0000018C   0xEA51 0x2000      ORRS     R0,R1,R0, LSL #+8
   \   00000190   0xF8AD 0x000E      STRH     R0,[SP, #+14]
    909          
    910            /* 5.Read from 0x2A & 0x2B registers the value T_OUT (ADC_OUT).*/
    911            num_bytes = 0;    // No Data to Pass.
   \   00000194   0x2000             MOVS     R0,#+0
   \   00000196   0x4681             MOV      R9,R0
    912            i2cData[0] = 0x00;
   \   00000198   0x2000             MOVS     R0,#+0
   \   0000019A   0xF88D 0x0010      STRB     R0,[SP, #+16]
    913          #ifdef REV_L
    914            Status = RoadBrd_I2C_Master_Transmit_CMDData_IT((uint16_t)HMDTY_SNSR, (uint8_t)(HMDTY_SNSR_TEMP_OUT_L | 0x80), i2cData, (uint16_t)num_bytes);
   \   0000019E   0x4648             MOV      R0,R9
   \   000001A0   0x0003             MOVS     R3,R0
   \   000001A2   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   000001A4   0xAA04             ADD      R2,SP,#+16
   \   000001A6   0x21AA             MOVS     R1,#+170
   \   000001A8   0x20BE             MOVS     R0,#+190
   \   000001AA   0x.... 0x....      BL       RoadBrd_I2C_Master_Transmit_CMDData_IT
   \   000001AE   0x0005             MOVS     R5,R0
    915            // If Status was good, Time to get response.
    916            if (Status == HAL_OK)
   \   000001B0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000001B2   0x2D00             CMP      R5,#+0
   \   000001B4   0xF040 0x8092      BNE.W    ??RoadBrd_Humidity_ReadTemperature_15
   \   000001B8   0xE005             B.N      ??RoadBrd_Humidity_ReadTemperature_16
   \                     ??RoadBrd_Humidity_ReadTemperature_13: (+1)
   \   000001BA   0x0028             MOVS     R0,R5
   \   000001BC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001BE   0xE08F             B.N      ??RoadBrd_Humidity_ReadTemperature_2
   \                     ??RoadBrd_Humidity_ReadTemperature_10: (+1)
   \   000001C0   0x0028             MOVS     R0,R5
   \   000001C2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001C4   0xE08C             B.N      ??RoadBrd_Humidity_ReadTemperature_2
    917            {
    918              // Now wait for completion of XMIT.
    919              Status = RoadBrd_WaitForState( (uint16_t)( I2C_TIMEOUT/5 ));
   \                     ??RoadBrd_Humidity_ReadTemperature_16: (+1)
   \   000001C6   0x2064             MOVS     R0,#+100
   \   000001C8   0x.... 0x....      BL       RoadBrd_WaitForState
   \   000001CC   0x0005             MOVS     R5,R0
    920              if (Status != HAL_OK)
   \   000001CE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000001D0   0x2D00             CMP      R5,#+0
   \   000001D2   0xD002             BEQ.N    ??RoadBrd_Humidity_ReadTemperature_17
    921                return Status;
   \   000001D4   0x0028             MOVS     R0,R5
   \   000001D6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001D8   0xE082             B.N      ??RoadBrd_Humidity_ReadTemperature_2
    922              else
    923              {
    924                Status =  RoadBrd_I2C_Master_Receive_IT((uint16_t)HMDTY_SNSR, buffer, (uint16_t)2);
   \                     ??RoadBrd_Humidity_ReadTemperature_17: (+1)
   \   000001DA   0x2202             MOVS     R2,#+2
   \   000001DC   0x4669             MOV      R1,SP
   \   000001DE   0x20BE             MOVS     R0,#+190
   \   000001E0   0x.... 0x....      BL       RoadBrd_I2C_Master_Receive_IT
   \   000001E4   0x0005             MOVS     R5,R0
    925                if (Status == HAL_OK)
   \   000001E6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000001E8   0x2D00             CMP      R5,#+0
   \   000001EA   0xD174             BNE.N    ??RoadBrd_Humidity_ReadTemperature_18
    926                {
    927                  // Now wait for completion of Receive.
    928                  Status = RoadBrd_WaitForState( (uint16_t)( I2C_TIMEOUT/5 ));
   \   000001EC   0x2064             MOVS     R0,#+100
   \   000001EE   0x.... 0x....      BL       RoadBrd_WaitForState
   \   000001F2   0x0005             MOVS     R5,R0
    929                  if (Status != HAL_OK)
   \   000001F4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000001F6   0x2D00             CMP      R5,#+0
   \   000001F8   0xD002             BEQ.N    ??RoadBrd_Humidity_ReadTemperature_19
    930                    return Status;
   \   000001FA   0x0028             MOVS     R0,R5
   \   000001FC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001FE   0xE06F             B.N      ??RoadBrd_Humidity_ReadTemperature_2
    931                } // EndIf (Status == HAL_OK) RoadBrd_I2C_Master_Receive_IT
    932                else
    933                  return Status;
    934              } // EndElse (Status != HAL_OK) RoadBrd_WaitForState
    935            }// EndIf (Status == HAL_OK) RoadBrd_I2C_Master_Transmit_CMDData_IT
    936            else
    937              return Status;
    938          #else
    939            Status = RoadBrd_I2C_Master_Transmit_CMDData((uint16_t)HMDTY_SNSR, (uint8_t)(HMDTY_SNSR_TEMP_OUT_L | 0x80), i2cData, (uint16_t)num_bytes, I2C_TIMEOUT);
    940            // If Status was good, Time to get response.
    941            if (Status == HAL_OK)
    942            {
    943              Status =  RoadBrd_I2C_Master_Receive((uint16_t)HMDTY_SNSR, buffer, (uint16_t)2, I2C_TIMEOUT);
    944              if (Status != HAL_OK)
    945                return Status;
    946            }
    947            else
    948              return Status;
    949          #endif
    950            T_out = (((uint16_t)buffer[1])<<8) | (uint16_t)buffer[0];
   \                     ??RoadBrd_Humidity_ReadTemperature_19: (+1)
   \   00000200   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   00000204   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   00000208   0xEA51 0x2000      ORRS     R0,R1,R0, LSL #+8
   \   0000020C   0xF8AD 0x000C      STRH     R0,[SP, #+12]
    951          
    952            /* 6. Compute the Temperature value by line r interpolation*/
    953            tmp32 = ((uint32_t)(T_out - T0_out)) * ((uint32_t)(T1_degC - T0_degC)*10);
   \   00000210   0xF9BD 0x000C      LDRSH    R0,[SP, #+12]
   \   00000214   0xFA0F 0xFB8B      SXTH     R11,R11          ;; SignExt  R11,R11,#+16,#+16
   \   00000218   0xEBB0 0x000B      SUBS     R0,R0,R11
   \   0000021C   0xF9BD 0x1006      LDRSH    R1,[SP, #+6]
   \   00000220   0xFA0F 0xFA8A      SXTH     R10,R10          ;; SignExt  R10,R10,#+16,#+16
   \   00000224   0xEBB1 0x010A      SUBS     R1,R1,R10
   \   00000228   0x4348             MULS     R0,R1,R0
   \   0000022A   0x210A             MOVS     R1,#+10
   \   0000022C   0x4348             MULS     R0,R1,R0
   \   0000022E   0x0006             MOVS     R6,R0
    954            tmp32 = tmp32 /(T1_out - T0_out) + T0_degC*10;
   \   00000230   0xF9BD 0x000E      LDRSH    R0,[SP, #+14]
   \   00000234   0xFA0F 0xFB8B      SXTH     R11,R11          ;; SignExt  R11,R11,#+16,#+16
   \   00000238   0xEBB0 0x000B      SUBS     R0,R0,R11
   \   0000023C   0xFBB6 0xF0F0      UDIV     R0,R6,R0
   \   00000240   0xFA0F 0xFA8A      SXTH     R10,R10          ;; SignExt  R10,R10,#+16,#+16
   \   00000244   0x210A             MOVS     R1,#+10
   \   00000246   0xFB01 0x060A      MLA      R6,R1,R10,R0
    955            tempC = (uint16_t)tmp32;
   \   0000024A   0x0030             MOVS     R0,R6
   \   0000024C   0x4680             MOV      R8,R0
    956          
    957            // Now Build results.
    958            Temp_C = tmp32;
   \   0000024E   0x0030             MOVS     R0,R6
   \   00000250   0x.... 0x....      BL       __aeabi_ui2f
   \   00000254   0x0007             MOVS     R7,R0
    959            Temp_C = Temp_C/10;
   \   00000256   0x0038             MOVS     R0,R7
   \   00000258   0x....             LDR.N    R1,??DataTable3  ;; 0x41200000
   \   0000025A   0x.... 0x....      BL       __aeabi_fdiv
   \   0000025E   0x0007             MOVS     R7,R0
    960            Temp_F = (Temp_C * 1.8) + 32;
   \   00000260   0x0038             MOVS     R0,R7
   \   00000262   0x.... 0x....      BL       __aeabi_f2d
   \   00000266   0x....             LDR.N    R2,??DataTable3_7  ;; 0xcccccccd
   \   00000268   0x....             LDR.N    R3,??DataTable3_8  ;; 0x3ffccccc
   \   0000026A   0x.... 0x....      BL       __aeabi_dmul
   \   0000026E   0x2200             MOVS     R2,#+0
   \   00000270   0x....             LDR.N    R3,??DataTable3_9  ;; 0x40400000
   \   00000272   0x.... 0x....      BL       __aeabi_dadd
   \   00000276   0x.... 0x....      BL       __aeabi_d2f
   \   0000027A   0x9006             STR      R0,[SP, #+24]
    961            
    962            TPtr->RawC = tempC;
   \   0000027C   0xF8A4 0x8016      STRH     R8,[R4, #+22]
    963            sprintf( (char *)TPtr->TempC, "%3.1f", Temp_C );
   \   00000280   0x0038             MOVS     R0,R7
   \   00000282   0x.... 0x....      BL       __aeabi_f2d
   \   00000286   0x0002             MOVS     R2,R0
   \   00000288   0x000B             MOVS     R3,R1
   \   0000028A   0x....             LDR.N    R1,??DataTable3_10
   \   0000028C   0x0020             MOVS     R0,R4
   \   0000028E   0x.... 0x....      BL       sprintf
    964            sprintf( (char *)TPtr->TempF, "%3.1f", Temp_F );
   \   00000292   0x9806             LDR      R0,[SP, #+24]
   \   00000294   0x.... 0x....      BL       __aeabi_f2d
   \   00000298   0x0002             MOVS     R2,R0
   \   0000029A   0x000B             MOVS     R3,R1
   \   0000029C   0x....             LDR.N    R1,??DataTable3_10
   \   0000029E   0x1DE0             ADDS     R0,R4,#+7
   \   000002A0   0x.... 0x....      BL       sprintf
    965            // NOW, Build Raw Data String..
    966            sprintf( (char *)TPtr->Raw, "%02x", ((tempC & 0xff00)>>8));
   \   000002A4   0x4640             MOV      R0,R8
   \   000002A6   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000002A8   0x0A02             LSRS     R2,R0,#+8
   \   000002AA   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   000002AC   0x....             LDR.N    R1,??DataTable3_4
   \   000002AE   0xF114 0x000E      ADDS     R0,R4,#+14
   \   000002B2   0x.... 0x....      BL       sprintf
    967            sprintf( (char *)tempBffr2, "%02x", (tempC & 0x00ff));
   \   000002B6   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   000002BA   0xF008 0x02FF      AND      R2,R8,#0xFF
   \   000002BE   0x....             LDR.N    R1,??DataTable3_4
   \   000002C0   0xA807             ADD      R0,SP,#+28
   \   000002C2   0x.... 0x....      BL       sprintf
    968            strcat( (char *)TPtr->Raw, (char *)tempBffr2 );
   \   000002C6   0xA907             ADD      R1,SP,#+28
   \   000002C8   0xF114 0x000E      ADDS     R0,R4,#+14
   \   000002CC   0x.... 0x....      BL       strcat
    969            //strcat( (char *)TPtr->Raw, "Rw" );
    970          
    971            return Status;
   \   000002D0   0x0028             MOVS     R0,R5
   \   000002D2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000002D4   0xE004             B.N      ??RoadBrd_Humidity_ReadTemperature_2
   \                     ??RoadBrd_Humidity_ReadTemperature_18: (+1)
   \   000002D6   0x0028             MOVS     R0,R5
   \   000002D8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000002DA   0xE001             B.N      ??RoadBrd_Humidity_ReadTemperature_2
   \                     ??RoadBrd_Humidity_ReadTemperature_15: (+1)
   \   000002DC   0x0028             MOVS     R0,R5
   \   000002DE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??RoadBrd_Humidity_ReadTemperature_2: (+1)
   \   000002E0   0xB009             ADD      SP,SP,#+36
   \   000002E2   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    972          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x41200000         DC32     0x41200000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x447A0001         DC32     0x447a0001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x447A0000         DC32     0x447a0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x40C00000         DC32     0x40c00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0x44030000         DC32     0x44030000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   0xCCCCCCCD         DC32     0xcccccccd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \   00000000   0x3FFCCCCC         DC32     0x3ffccccc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_9:
   \   00000000   0x40400000         DC32     0x40400000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_10:
   \   00000000   0x........         DC32     ?_2

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x25 0x30          DC8 "%02.1f"
   \              0x32 0x2E    
   \              0x31 0x66    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x25 0x30          DC8 "%02x"
   \              0x32 0x78    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x25 0x33          DC8 "%3.1f"
   \              0x2E 0x31    
   \              0x66 0x00    
   \   00000006   0x00 0x00          DC8 0, 0
    973          
    974          /************************ (C) COPYRIGHT WeatherCloud *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   RoadBrd_HumidityInit
        16   -> RoadBrd_I2C_Master_Transmit_CMDData_IT
        16   -> RoadBrd_WaitForState
      56   RoadBrd_Humidity_ReadHumidity
        56   -> RoadBrd_I2C_Master_Receive_IT
        56   -> RoadBrd_I2C_Master_Transmit_CMDData_IT
        56   -> RoadBrd_WaitForState
        56   -> __aeabi_f2d
        56   -> __aeabi_f2iz
        56   -> __aeabi_fadd
        56   -> __aeabi_fdiv
        56   -> __aeabi_fmul
        56   -> __aeabi_i2f
        56   -> sprintf
        56   -> strcat
        56 __aeabi_cfrcmple
      56   RoadBrd_Humidity_ReadHumidity_Scaled
        56   -> RoadBrd_CAL_ScaleValue
        56   -> RoadBrd_I2C_Master_Receive_IT
        56   -> RoadBrd_I2C_Master_Transmit_CMDData_IT
        56   -> RoadBrd_WaitForState
        56   -> __aeabi_f2d
        56   -> __aeabi_f2iz
        56   -> __aeabi_fadd
        56   -> __aeabi_fdiv
        56   -> __aeabi_fmul
        56   -> __aeabi_i2f
        56   -> sprintf
        56   -> strcat
        56 __aeabi_cfrcmple
      72   RoadBrd_Humidity_ReadTemperature
        72   -> RoadBrd_I2C_Master_Receive_IT
        72   -> RoadBrd_I2C_Master_Transmit_CMDData_IT
        72   -> RoadBrd_WaitForState
        72   -> __aeabi_d2f
        72   -> __aeabi_dadd
        72   -> __aeabi_dmul
        72   -> __aeabi_f2d
        72   -> __aeabi_fdiv
        72   -> __aeabi_ui2f
        72   -> sprintf
        72   -> strcat
      72   RoadBrd_Humidity_ReadTemperature_Scaled
        72   -> RoadBrd_CAL_ScaleValue
        72   -> RoadBrd_I2C_Master_Receive_IT
        72   -> RoadBrd_I2C_Master_Transmit_CMDData_IT
        72   -> RoadBrd_WaitForState
        72   -> __aeabi_d2f
        72   -> __aeabi_dadd
        72   -> __aeabi_dmul
        72   -> __aeabi_f2d
        72   -> __aeabi_fdiv
        72   -> __aeabi_ui2f
        72   -> sprintf
        72   -> strcat


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_10
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable3_9
       8  ?_0
       8  ?_1
       8  ?_2
     166  RoadBrd_HumidityInit
     764  RoadBrd_Humidity_ReadHumidity
     774  RoadBrd_Humidity_ReadHumidity_Scaled
     742  RoadBrd_Humidity_ReadTemperature
     770  RoadBrd_Humidity_ReadTemperature_Scaled

 
    24 bytes in section .rodata
 3 260 bytes in section .text
 
 3 260 bytes of CODE  memory
    24 bytes of CONST memory

Errors: none
Warnings: none
