###############################################################################
#
# IAR ANSI C/C++ Compiler V7.60.2.11341/W32 for ARM       30/Jan/2018  09:25:56
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\BootMonitor.c
#    Command line =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\BootMonitor.c
#        -D USE_HAL_DRIVER -D STM32L152xE -D USE_STM32L1XX_NUCLEO -D ASCII -D
#        REV_L -D LONG_DELAY -D XML_SHRT -D WM -lCN
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\WeatherMesh\List
#        -o
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\WeatherMesh\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.4\arm\INC\c\DLib_Config_Full.h"
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/STM32L1xx_HAL_Driver/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/STM32L1xx_HAL_Driver/Inc/Legacy\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/BSP/STM32L1xx_Nucleo\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/portable/IAR/ARM_CM3\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Core/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/CMSIS/Include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/CMSIS/Device/ST/STM32L1xx/Include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\..\Middlewares\Third_Party\BgLib\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.4\arm\CMSIS\Include\"
#    Locale       =  English_United States.1252
#    List file    =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\WeatherMesh\List\BootMonitor.lst
#    Object file  =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\WeatherMesh\Obj\BootMonitor.o
#
###############################################################################

D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\BootMonitor.c
      1          /**
      2            ******************************************************************************
      3            * File Name          : BootMonitor.c
      4            * Description        : This file provides code that parses the passed string and 
      5            *                      performs the requested operation. It is the Stand Alone
      6            *                      Boot Monitor Code Module.
      7            ******************************************************************************
      8            *
      9            * COPYRIGHT(c) 2017 WeatherCloud
     10            *
     11            * Redistribution and use in source and binary forms, with or without modification,
     12            * are permitted provided that the following conditions are met:
     13            *   1. Redistributions of source code must retain the above copyright notice,
     14            *      this list of conditions and the following disclaimer.
     15            *   2. Redistributions in binary form must reproduce the above copyright notice,
     16            *      this list of conditions and the following disclaimer in the documentation
     17            *      and/or other materials provided with the distribution.
     18            *   3. Neither the name of WeatherCloud nor the names of its contributors
     19            *      may be used to endorse or promote products derived from this software
     20            *      without specific prior written permission.
     21            *
     22            * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     23            * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     24            * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     25            * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
     26            * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     27            * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     28            * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
     29            * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
     30            * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
     31            * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     32            *
     33            ******************************************************************************
     34            */
     35          
     36          /* Includes ------------------------------------------------------------------*/
     37          #include "BootMonitor.h"
     38          #include "ErrorCodes.h"
     39          #include <ctype.h>
     40          #include <stdlib.h>
     41          #include "wwdg.h"
     42          #include "Calibration.h"
     43          #include "s_record.h"
     44          

   \                                 In section .bss, align 1
     45          static bool Boot_Bypass = false;
   \                     Boot_Bypass:
   \   00000000                      DS8 1
     46          
     47          /**
     48            * @brief  This function tests the passed string to make sure it is Hex format.
     49            * @param  char *ptr: Ptr to string to be tested. NULL terminated
     50            * @retval int: 1: String is HEX.
     51            *              0:   String is not HEX.
     52            */
     53          /*int isHexNum(char *ptr)
     54          {
     55            int Size, x, test1;
     56            
     57            Size = strlen(ptr);
     58            test1 = 0;
     59            for (x=0; x<Size; x++)
     60            {
     61              if (((ptr[x] <= '9') && (ptr[x] >= '0')) ||
     62                  ((ptr[x] <= 'F') && (ptr[x] >= 'A')))
     63                test1 = 0;
     64              else
     65                test1 = 1;
     66              if (test1 == 1)
     67                return 0;
     68            }
     69            return 1;
     70          } */
     71          
     72          /**
     73            * @brief  This function converts the passed Hex String to an Integer value.
     74            * @param  char *ptr: Ptr to string to be converted. NULL terminated
     75            * @retval int: -1: Error in String
     76            *              Value converted returned.
     77            */
     78          /*int hatoi( char *ptr )
     79          {
     80            int Size, x;
     81            int Value = 0;
     82            int FinalValue = 0;
     83            
     84            Size = strlen(ptr);
     85            for (x=0; x<Size; x++)
     86            {
     87              if ((ptr[x] <= '9') && (ptr[x] >= '0'))
     88                Value = ptr[x] - '0';
     89              else if((ptr[x] <= 'F') && (ptr[x] >= 'A'))
     90                Value = ptr[x] - 'A' + 10;
     91              else
     92                return -1;
     93              FinalValue = FinalValue*16 + Value;
     94            }
     95            return FinalValue;
     96          }*/
     97          /**
     98            * @brief  This routine parses the passed string and performs the passed operation
     99            * @param  *tempBffr: String to be parsed.
    100            * @retval HAL_StatusTypeDef:     HAL_OK:       Tasking of block of data to UART success.
    101            *                                HAL_ERROR:    Error found in Tasking or data passed.
    102            *                                HAL_BUSY:     UART is busy.
    103            *                                HAL_TIMEOUT:  UART timed out.
    104            */

   \                                 In section .text, align 4, keep-with-next
    105          HAL_StatusTypeDef Parse_BootString(char *tempBffr, bool BLE_Flag)
    106          {
   \                     Parse_BootString: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB0E5             SUB      SP,SP,#+404
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
    107            #define RECEIVE_SZ      30
    108            uint16_t DriverStatus;
    109            int8_t tempBffr2[120];
    110            int8_t tempBffr3[10];
    111            int8_t s_cmd[5];
    112            int8_t s_recrd[120];
    113            HAL_StatusTypeDef Status;
    114            uint8_t Size;
    115            int Numbr_Rcrds;
    116            int x, y;
    117            Temperature TMeasure, TMeasureScaled;
    118            SrecElement Srec_Elem;
    119            uint32_t Err_code;
    120            
    121            Size = strlen((char *)tempBffr);
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0x.... 0x....      BL       strlen
   \   00000010   0xF88D 0x0008      STRB     R0,[SP, #+8]
    122            Status = HAL_OK;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x4682             MOV      R10,R0
    123            
    124              // Test esc. If set, then exit mode.
    125              if ((tempBffr[0] == 0x1B) ||
    126                  (tempBffr[0] == 'X'))
   \   00000018   0x7820             LDRB     R0,[R4, #+0]
   \   0000001A   0x281B             CMP      R0,#+27
   \   0000001C   0xD002             BEQ.N    ??Parse_BootString_0
   \   0000001E   0x7820             LDRB     R0,[R4, #+0]
   \   00000020   0x2858             CMP      R0,#+88
   \   00000022   0xD116             BNE.N    ??Parse_BootString_1
    127              {
    128                Boot_Bypass = false;
   \                     ??Parse_BootString_0: (+1)
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x.... 0x....      LDR.W    R1,??DataTable2_2
   \   0000002A   0x7008             STRB     R0,[R1, #+0]
    129                strcpy( (char *)tempBffr2, "\r\n\r\n T........TERMINATING BOOT-MONITOR MODE.........\r\n\r\n> ");
   \   0000002C   0x.... 0x....      LDR.W    R1,??DataTable2_3
   \   00000030   0xA803             ADD      R0,SP,#+12
   \   00000032   0x.... 0x....      BL       strcpy
    130          #ifdef NUCLEO
    131                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    132          #else
    133                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000036   0xA903             ADD      R1,SP,#+12
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000003E   0x4682             MOV      R10,R0
    134          #endif
    135                if (Status != HAL_OK)
   \   00000040   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   00000044   0xF1BA 0x0F00      CMP      R10,#+0
   \   00000048   0xF000 0x8356      BEQ.W    ??Parse_BootString_2
    136                  return Status;
   \   0000004C   0x4650             MOV      R0,R10
   \   0000004E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000050   0xE354             B.N      ??Parse_BootString_3
    137              } //EndIf (tempBffr[0] == 0x1B)
    138              else
    139              {
    140                // Normal Mode
    141              
    142                      // We have a good Tasking String. Time to determine action.
    143                      switch( tempBffr[0] )
   \                     ??Parse_BootString_1: (+1)
   \   00000052   0x7820             LDRB     R0,[R4, #+0]
   \   00000054   0x2845             CMP      R0,#+69
   \   00000056   0xD00A             BEQ.N    ??Parse_BootString_4
   \   00000058   0x2846             CMP      R0,#+70
   \   0000005A   0xD01C             BEQ.N    ??Parse_BootString_5
   \   0000005C   0x2847             CMP      R0,#+71
   \   0000005E   0xD02E             BEQ.N    ??Parse_BootString_6
   \   00000060   0x2850             CMP      R0,#+80
   \   00000062   0xF000 0x80A5      BEQ.W    ??Parse_BootString_7
   \   00000066   0x2854             CMP      R0,#+84
   \   00000068   0xF000 0x80CD      BEQ.W    ??Parse_BootString_8
   \   0000006C   0xE2BD             B.N      ??Parse_BootString_9
    144                      {
    145          //**************************************************************************************************
    146                      case 'E':
    147                        // Read Temp and Pressure. 
    148                        // Is this a BLE Operation?
    149                        if ( BLE_Flag )
   \                     ??Parse_BootString_4: (+1)
   \   0000006E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000070   0x2D00             CMP      R5,#+0
   \   00000072   0xD00A             BEQ.N    ??Parse_BootString_10
    150                        {
    151                          // Yes...Build and Send BLE Response NOW.
    152                          strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00000074   0x.... 0x....      LDR.W    R1,??DataTable2_4
   \   00000078   0xA803             ADD      R0,SP,#+12
   \   0000007A   0x.... 0x....      BL       strcpy
    153                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000007E   0xA803             ADD      R0,SP,#+12
   \   00000080   0x.... 0x....      BL       strlen
   \   00000084   0xA903             ADD      R1,SP,#+12
   \   00000086   0x.... 0x....      BL       BGM111_Transmit
    154                        }
    155                        
    156                        strcpy( (char *)tempBffr2, "TBD: Read Temp and Pressure NOT IMPLEMENTED\r\n");
   \                     ??Parse_BootString_10: (+1)
   \   0000008A   0x.... 0x....      LDR.W    R1,??DataTable2_5
   \   0000008E   0xA803             ADD      R0,SP,#+12
   \   00000090   0x.... 0x....      BL       strcpy
    157                        break;
   \   00000094   0xE2BA             B.N      ??Parse_BootString_11
    158          //**************************************************************************************************
    159                      case 'F':
    160                        // NO ACTION. 
    161                        // Is this a BLE Operation?
    162                        if ( BLE_Flag )
   \                     ??Parse_BootString_5: (+1)
   \   00000096   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000098   0x2D00             CMP      R5,#+0
   \   0000009A   0xD00A             BEQ.N    ??Parse_BootString_12
    163                        {
    164                          // Yes...Build and Send BLE Response NOW.
    165                          strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   0000009C   0x.... 0x....      LDR.W    R1,??DataTable2_4
   \   000000A0   0xA803             ADD      R0,SP,#+12
   \   000000A2   0x.... 0x....      BL       strcpy
    166                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000000A6   0xA803             ADD      R0,SP,#+12
   \   000000A8   0x.... 0x....      BL       strlen
   \   000000AC   0xA903             ADD      R1,SP,#+12
   \   000000AE   0x.... 0x....      BL       BGM111_Transmit
    167                        }
    168                        
    169                        strcpy( (char *)tempBffr2, "NO Action...(0x00).\r\n");
   \                     ??Parse_BootString_12: (+1)
   \   000000B2   0x.... 0x....      LDR.W    R1,??DataTable2_6
   \   000000B6   0xA803             ADD      R0,SP,#+12
   \   000000B8   0x.... 0x....      BL       strcpy
    170                        break;
   \   000000BC   0xE2A6             B.N      ??Parse_BootString_11
    171          //**************************************************************************************************
    172                      case 'G':
    173                        // Read Temperature sensor and return results....Temperature Sensor U10(PCT2075GVJ).  Addr: 0x94
    174                        Status = RoadBrd_ReadTemp( &TMeasure );
   \                     ??Parse_BootString_6: (+1)
   \   000000BE   0xA827             ADD      R0,SP,#+156
   \   000000C0   0x.... 0x....      BL       RoadBrd_ReadTemp
   \   000000C4   0x4682             MOV      R10,R0
    175                        if (Status == HAL_OK)
   \   000000C6   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   000000CA   0xF1BA 0x0F00      CMP      R10,#+0
   \   000000CE   0xD103             BNE.N    ??Parse_BootString_13
    176                          Status = RoadBrd_ReadTemp_Scaled( &TMeasureScaled );
   \   000000D0   0xA821             ADD      R0,SP,#+132
   \   000000D2   0x.... 0x....      BL       RoadBrd_ReadTemp_Scaled
   \   000000D6   0x4682             MOV      R10,R0
    177                        if (Status == HAL_OK)
   \                     ??Parse_BootString_13: (+1)
   \   000000D8   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   000000DC   0xF1BA 0x0F00      CMP      R10,#+0
   \   000000E0   0xD12A             BNE.N    ??Parse_BootString_14
    178                        {
    179                          // Send string to UART..
    180                          strcpy( (char *)tempBffr2, "TEMP SENSOR...\r\n");
   \   000000E2   0x.... 0x....      LDR.W    R1,??DataTable2_7
   \   000000E6   0xA803             ADD      R0,SP,#+12
   \   000000E8   0x.... 0x....      BL       strcpy
    181          #ifdef NUCLEO
    182                          Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    183          #else
    184                          Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000000EC   0xA903             ADD      R1,SP,#+12
   \   000000EE   0x2000             MOVS     R0,#+0
   \   000000F0   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000000F4   0x4682             MOV      R10,R0
    185          #endif
    186                          if (Status != HAL_OK)
   \   000000F6   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   000000FA   0xF1BA 0x0F00      CMP      R10,#+0
   \   000000FE   0xD002             BEQ.N    ??Parse_BootString_15
    187                            return Status;
   \   00000100   0x4650             MOV      R0,R10
   \   00000102   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000104   0xE2FA             B.N      ??Parse_BootString_3
    188                          // NOW, Build Data String..
    189                          sprintf( (char *)tempBffr2, "     TEMP DATA: " );
   \                     ??Parse_BootString_15: (+1)
   \   00000106   0x.... 0x....      LDR.W    R1,??DataTable2_8
   \   0000010A   0xA803             ADD      R0,SP,#+12
   \   0000010C   0x.... 0x....      BL       sprintf
    190                          strcat( (char *)tempBffr2, (char *)TMeasure.Raw );
   \   00000110   0xF10D 0x01AA      ADD      R1,SP,#+170
   \   00000114   0xA803             ADD      R0,SP,#+12
   \   00000116   0x.... 0x....      BL       strcat
    191                          strcat( (char *)tempBffr2, "\r\n" );
   \   0000011A   0xA1C8             ADR.N    R1,??Parse_BootString_16  ;; 0x0D, 0x0A, 0x00, 0x00
   \   0000011C   0xA803             ADD      R0,SP,#+12
   \   0000011E   0x.... 0x....      BL       strcat
    192                        }
    193                        else
    194                          break;
    195          #ifdef NUCLEO
    196                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    197          #else
    198                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000122   0xA903             ADD      R1,SP,#+12
   \   00000124   0x2000             MOVS     R0,#+0
   \   00000126   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000012A   0x4682             MOV      R10,R0
    199          #endif
    200                        if (Status != HAL_OK)
   \   0000012C   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   00000130   0xF1BA 0x0F00      CMP      R10,#+0
   \   00000134   0xD101             BNE.N    ??Parse_BootString_17
   \   00000136   0xE003             B.N      ??Parse_BootString_18
   \                     ??Parse_BootString_14: (+1)
   \   00000138   0xE268             B.N      ??Parse_BootString_11
    201                          return Status;
   \                     ??Parse_BootString_17: (+1)
   \   0000013A   0x4650             MOV      R0,R10
   \   0000013C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000013E   0xE2DD             B.N      ??Parse_BootString_3
    202                        // NOW, Build Data String..
    203                        sprintf( (char *)tempBffr2, "     TEMP DATA(Decimal): %d\r\n", TMeasure.RawC );
   \                     ??Parse_BootString_18: (+1)
   \   00000140   0xF8BD 0x20B2      LDRH     R2,[SP, #+178]
   \   00000144   0x.... 0x....      LDR.W    R1,??DataTable2_9
   \   00000148   0xA803             ADD      R0,SP,#+12
   \   0000014A   0x.... 0x....      BL       sprintf
    204          #ifdef NUCLEO
    205                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    206          #else
    207                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000014E   0xA903             ADD      R1,SP,#+12
   \   00000150   0x2000             MOVS     R0,#+0
   \   00000152   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000156   0x4682             MOV      R10,R0
    208          #endif
    209                        if (Status != HAL_OK)
   \   00000158   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   0000015C   0xF1BA 0x0F00      CMP      R10,#+0
   \   00000160   0xD002             BEQ.N    ??Parse_BootString_19
    210                          return Status;
   \   00000162   0x4650             MOV      R0,R10
   \   00000164   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000166   0xE2C9             B.N      ??Parse_BootString_3
    211                        // Is this a BLE Operation?
    212                        if ( BLE_Flag )
   \                     ??Parse_BootString_19: (+1)
   \   00000168   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000016A   0x2D00             CMP      R5,#+0
   \   0000016C   0xD012             BEQ.N    ??Parse_BootString_20
    213                        {
    214                          // Yes...Build and Send BLE Response NOW.
    215                          sprintf( (char *)tempBffr2, "<STATUS>TEMPC:%s/%s//TEMPF:%s/%s</STATUS>", 
    216                                  (char *)TMeasure.TempC, 
    217                                  (char *)TMeasureScaled.TempC,
    218                                  (char *)TMeasure.TempF, 
    219                                  (char *)TMeasureScaled.TempF);
   \   0000016E   0xF10D 0x008B      ADD      R0,SP,#+139
   \   00000172   0x9001             STR      R0,[SP, #+4]
   \   00000174   0xF10D 0x00A3      ADD      R0,SP,#+163
   \   00000178   0x9000             STR      R0,[SP, #+0]
   \   0000017A   0xAB21             ADD      R3,SP,#+132
   \   0000017C   0xAA27             ADD      R2,SP,#+156
   \   0000017E   0x.... 0x....      LDR.W    R1,??DataTable2_10
   \   00000182   0xA803             ADD      R0,SP,#+12
   \   00000184   0x.... 0x....      BL       sprintf
    220                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000188   0xA803             ADD      R0,SP,#+12
   \   0000018A   0x.... 0x....      BL       strlen
   \   0000018E   0xA903             ADD      R1,SP,#+12
   \   00000190   0x.... 0x....      BL       BGM111_Transmit
    221                        }
    222                        
    223                        // Now calculate Celcius and Farenheit Temp.
    224                        sprintf( (char *)tempBffr2, "     TempC: %s/%s     TempF: %s/%s\r\n", 
    225                                (char *)TMeasure.TempC, 
    226                                (char *)TMeasureScaled.TempC,
    227                                (char *)TMeasure.TempF, 
    228                                (char *)TMeasureScaled.TempF);
   \                     ??Parse_BootString_20: (+1)
   \   00000194   0xF10D 0x008B      ADD      R0,SP,#+139
   \   00000198   0x9001             STR      R0,[SP, #+4]
   \   0000019A   0xF10D 0x00A3      ADD      R0,SP,#+163
   \   0000019E   0x9000             STR      R0,[SP, #+0]
   \   000001A0   0xAB21             ADD      R3,SP,#+132
   \   000001A2   0xAA27             ADD      R2,SP,#+156
   \   000001A4   0x.... 0x....      LDR.W    R1,??DataTable2_11
   \   000001A8   0xA803             ADD      R0,SP,#+12
   \   000001AA   0x.... 0x....      BL       sprintf
    229                        break;
   \   000001AE   0xE22D             B.N      ??Parse_BootString_11
    230          //**************************************************************************************************
    231                      case 'P':
    232                        // POWER SYSTEM. 
    233                        switch( tempBffr[1] )
   \                     ??Parse_BootString_7: (+1)
   \   000001B0   0x7860             LDRB     R0,[R4, #+1]
   \   000001B2   0x2844             CMP      R0,#+68
   \   000001B4   0xD018             BEQ.N    ??Parse_BootString_21
   \   000001B6   0x2855             CMP      R0,#+85
   \   000001B8   0xD11F             BNE.N    ??Parse_BootString_22
    234                        {
    235          //++++++++++++++++++++++++++++++++++++++++++  5V Power Supply Commands.
    236                          case 'U':
    237                            // Turn on 5V Power Supply.
    238                            RoadBrd_gpio_On( gTAM_PWR );
   \                     ??Parse_BootString_23: (+1)
   \   000001BA   0x2004             MOVS     R0,#+4
   \   000001BC   0x.... 0x....      BL       RoadBrd_gpio_On
    239                            // Is this a BLE Operation?
    240                            if ( BLE_Flag )
   \   000001C0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000001C2   0x2D00             CMP      R5,#+0
   \   000001C4   0xD00A             BEQ.N    ??Parse_BootString_24
    241                            {
    242                              // Yes...Build and Send BLE Response NOW.
    243                              strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000001C6   0x.... 0x....      LDR.W    R1,??DataTable2_4
   \   000001CA   0xA803             ADD      R0,SP,#+12
   \   000001CC   0x.... 0x....      BL       strcpy
    244                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000001D0   0xA803             ADD      R0,SP,#+12
   \   000001D2   0x.... 0x....      BL       strlen
   \   000001D6   0xA903             ADD      R1,SP,#+12
   \   000001D8   0x.... 0x....      BL       BGM111_Transmit
    245                            }
    246                            
    247                            strcpy( (char *)tempBffr2, "5V Power Plane Powered UP.\r\n");
   \                     ??Parse_BootString_24: (+1)
   \   000001DC   0x.... 0x....      LDR.W    R1,??DataTable2_12
   \   000001E0   0xA803             ADD      R0,SP,#+12
   \   000001E2   0x.... 0x....      BL       strcpy
    248                            break;
   \   000001E6   0xE00D             B.N      ??Parse_BootString_25
    249                          case 'D':
    250                            // Turn off 5V Power Supply.
    251                            RoadBrd_gpio_Off( gTAM_PWR );
   \                     ??Parse_BootString_21: (+1)
   \   000001E8   0x2004             MOVS     R0,#+4
   \   000001EA   0x.... 0x....      BL       RoadBrd_gpio_Off
    252                            strcpy( (char *)tempBffr2, "5V Power Plane Powered DOWN.\r\n");
   \   000001EE   0x.... 0x....      LDR.W    R1,??DataTable2_13
   \   000001F2   0xA803             ADD      R0,SP,#+12
   \   000001F4   0x.... 0x....      BL       strcpy
    253                            break;
   \   000001F8   0xE004             B.N      ??Parse_BootString_25
    254                          default:
    255                            strcpy( (char *)tempBffr2, "ERROR: Illegal 5V Power Plane Command.\r\n");
   \                     ??Parse_BootString_22: (+1)
   \   000001FA   0x.... 0x....      LDR.W    R1,??DataTable2_14
   \   000001FE   0xA803             ADD      R0,SP,#+12
   \   00000200   0x.... 0x....      BL       strcpy
    256                            break;
    257                        }
    258                        break;
   \                     ??Parse_BootString_25: (+1)
   \   00000204   0xE202             B.N      ??Parse_BootString_11
    259          //**************************************************************************************************
    260                      case 'T':
    261                        // TEST CMDS. 
    262                        // Test Size to make sure we have enough Characters for this operation
    263                        if (Size <= 1)
   \                     ??Parse_BootString_8: (+1)
   \   00000206   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   0000020A   0x2802             CMP      R0,#+2
   \   0000020C   0xDA13             BGE.N    ??Parse_BootString_26
    264                        {
    265                          // Is this a BLE Operation?
    266                          if ( BLE_Flag )
   \   0000020E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000210   0x2D00             CMP      R5,#+0
   \   00000212   0xD00A             BEQ.N    ??Parse_BootString_27
    267                          {
    268                            // Yes...Build and Send BLE Response NOW.
    269                            strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00000214   0x.... 0x....      LDR.W    R1,??DataTable2_4
   \   00000218   0xA803             ADD      R0,SP,#+12
   \   0000021A   0x.... 0x....      BL       strcpy
    270                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000021E   0xA803             ADD      R0,SP,#+12
   \   00000220   0x.... 0x....      BL       strlen
   \   00000224   0xA903             ADD      R1,SP,#+12
   \   00000226   0x.... 0x....      BL       BGM111_Transmit
    271                          }
    272                          
    273                          strcpy( (char *)tempBffr2, "T ERROR: Not a legal command.\r\n");
   \                     ??Parse_BootString_27: (+1)
   \   0000022A   0x.... 0x....      LDR.W    R1,??DataTable2_15
   \   0000022E   0xA803             ADD      R0,SP,#+12
   \   00000230   0x.... 0x....      BL       strcpy
   \   00000234   0xE1D8             B.N      ??Parse_BootString_28
    274                        }
    275                        else
    276                        {
    277                          switch( tempBffr[1] )
   \                     ??Parse_BootString_26: (+1)
   \   00000236   0x7860             LDRB     R0,[R4, #+1]
   \   00000238   0x2844             CMP      R0,#+68
   \   0000023A   0xD009             BEQ.N    ??Parse_BootString_29
   \   0000023C   0x2846             CMP      R0,#+70
   \   0000023E   0xD03B             BEQ.N    ??Parse_BootString_30
   \   00000240   0x284C             CMP      R0,#+76
   \   00000242   0xD04F             BEQ.N    ??Parse_BootString_31
   \   00000244   0x2852             CMP      R0,#+82
   \   00000246   0xD01E             BEQ.N    ??Parse_BootString_32
   \   00000248   0x2853             CMP      R0,#+83
   \   0000024A   0xF000 0x807F      BEQ.W    ??Parse_BootString_33
   \   0000024E   0xE1BA             B.N      ??Parse_BootString_34
    278                          {
    279          //++++++++++++++++++++++++++++++++++++++++++  Dump Driver State.
    280                            case 'D':
    281                              // Read Driver Status
    282                              DriverStatus = Get_DriverStatus();
   \                     ??Parse_BootString_29: (+1)
   \   00000250   0x.... 0x....      BL       Get_DriverStatus
   \   00000254   0x0006             MOVS     R6,R0
    283                              // Is this a BLE Operation?
    284                              if ( BLE_Flag )
   \   00000256   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000258   0x2D00             CMP      R5,#+0
   \   0000025A   0xD00C             BEQ.N    ??Parse_BootString_35
    285                              {
    286                                // Yes...Build and Send BLE Response NOW.
    287                                sprintf( (char *)tempBffr2, "<STATUS>ST_DRIVER:%04x</STATUS>", DriverStatus );
   \   0000025C   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000025E   0x0032             MOVS     R2,R6
   \   00000260   0x.... 0x....      LDR.W    R1,??DataTable2_16
   \   00000264   0xA803             ADD      R0,SP,#+12
   \   00000266   0x.... 0x....      BL       sprintf
    288                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000026A   0xA803             ADD      R0,SP,#+12
   \   0000026C   0x.... 0x....      BL       strlen
   \   00000270   0xA903             ADD      R1,SP,#+12
   \   00000272   0x.... 0x....      BL       BGM111_Transmit
    289                              }
    290                              
    291                              sprintf( (char *)tempBffr2, "Driver Status: %04x\r\n", DriverStatus );
   \                     ??Parse_BootString_35: (+1)
   \   00000276   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000278   0x0032             MOVS     R2,R6
   \   0000027A   0x.... 0x....      LDR.W    R1,??DataTable2_17
   \   0000027E   0xA803             ADD      R0,SP,#+12
   \   00000280   0x.... 0x....      BL       sprintf
    292                              break;
   \   00000284   0xE1B0             B.N      ??Parse_BootString_28
    293          //++++++++++++++++++++++++++++++++++++++++++  RESET Micro.
    294                            case 'R':
    295                              // RESET
    296                              // Is this a BLE Operation?
    297                              if ( BLE_Flag )
   \                     ??Parse_BootString_32: (+1)
   \   00000286   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000288   0x2D00             CMP      R5,#+0
   \   0000028A   0xD00D             BEQ.N    ??Parse_BootString_36
    298                              {
    299                                // Yes...Build and Send BLE Response NOW.
    300                                strcpy( (char *)tempBffr2, "<STATUS>ST_RESET_ACK</STATUS>");
   \   0000028C   0x.... 0x....      LDR.W    R1,??DataTable2_18
   \   00000290   0xA803             ADD      R0,SP,#+12
   \   00000292   0x.... 0x....      BL       strcpy
    301                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000296   0xA803             ADD      R0,SP,#+12
   \   00000298   0x.... 0x....      BL       strlen
   \   0000029C   0xA903             ADD      R1,SP,#+12
   \   0000029E   0x.... 0x....      BL       BGM111_Transmit
    302                                HAL_Delay(100);           // Wait 100ms
   \   000002A2   0x2064             MOVS     R0,#+100
   \   000002A4   0x.... 0x....      BL       HAL_Delay
    303                              }
    304                              HAL_NVIC_SystemReset();
   \                     ??Parse_BootString_36: (+1)
   \   000002A8   0x.... 0x....      BL       HAL_NVIC_SystemReset
    305                              sprintf( (char *)tempBffr2, "RESET CALLED BUT NO RESPONSE!!\r\n" );
   \   000002AC   0x.... 0x....      LDR.W    R1,??DataTable2_19
   \   000002B0   0xA803             ADD      R0,SP,#+12
   \   000002B2   0x.... 0x....      BL       sprintf
    306                              break;
   \   000002B6   0xE197             B.N      ??Parse_BootString_28
    307          //++++++++++++++++++++++++++++++++++++++++++  Reset Flash Frame Variables(Factory).
    308                            case 'F':
    309                              // Reset Flash Frame Variables.
    310                              RoadBrd_WWDG_InitializeFrmFlash();
   \                     ??Parse_BootString_30: (+1)
   \   000002B8   0x.... 0x....      BL       RoadBrd_WWDG_InitializeFrmFlash
    311                              // Is this a BLE Operation?
    312                              if ( BLE_Flag )
   \   000002BC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000002BE   0x2D00             CMP      R5,#+0
   \   000002C0   0xD00A             BEQ.N    ??Parse_BootString_37
    313                              {
    314                                // Yes...Build and Send BLE Response NOW.
    315                                sprintf( (char *)tempBffr2, "<STATUS>TF_ACK</STATUS>" );
   \   000002C2   0x.... 0x....      LDR.W    R1,??DataTable2_20
   \   000002C6   0xA803             ADD      R0,SP,#+12
   \   000002C8   0x.... 0x....      BL       sprintf
    316                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000002CC   0xA803             ADD      R0,SP,#+12
   \   000002CE   0x.... 0x....      BL       strlen
   \   000002D2   0xA903             ADD      R1,SP,#+12
   \   000002D4   0x.... 0x....      BL       BGM111_Transmit
    317                              }
    318                              
    319                              sprintf( (char *)tempBffr2, "Flash Frame Variables Reset to Factory Values.\r\n" );
   \                     ??Parse_BootString_37: (+1)
   \   000002D8   0x.... 0x....      LDR.W    R1,??DataTable2_21
   \   000002DC   0xA803             ADD      R0,SP,#+12
   \   000002DE   0x.... 0x....      BL       sprintf
    320                              break;
   \   000002E2   0xE181             B.N      ??Parse_BootString_28
    321          //++++++++++++++++++++++++++++++++++++++++++  Lock Code to allow stable Program of BLE Module.
    322                            case 'L':
    323                              // Is this a BLE Operation?
    324                              if ( BLE_Flag )
   \                     ??Parse_BootString_31: (+1)
   \   000002E4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000002E6   0x2D00             CMP      R5,#+0
   \   000002E8   0xD00B             BEQ.N    ??Parse_BootString_38
    325                              {
    326                                // Yes...Build and Send BLE Response NOW.
    327                                sprintf( (char *)tempBffr2, "<STATUS>TL_ERROR</STATUS>" );
   \   000002EA   0x.... 0x....      LDR.W    R1,??DataTable2_22
   \   000002EE   0xA803             ADD      R0,SP,#+12
   \   000002F0   0x.... 0x....      BL       sprintf
    328                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000002F4   0xA803             ADD      R0,SP,#+12
   \   000002F6   0x.... 0x....      BL       strlen
   \   000002FA   0xA903             ADD      R1,SP,#+12
   \   000002FC   0x.... 0x....      BL       BGM111_Transmit
    329                              }
    330                              else
    331                              {
    332                                sprintf( (char *)tempBffr2, "Code Locked for Programming!\r\n\r\n" );
    333          #ifdef NUCLEO
    334                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    335          #else
    336                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
    337          #endif
    338                                if (Status != HAL_OK)
    339                                  return Status;
    340                                sprintf( (char *)tempBffr2, "   HARD RESET NEEDED TO EXIT MODE\r\n" );
    341          #ifdef NUCLEO
    342                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    343          #else
    344                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
    345          #endif
    346                                if (Status != HAL_OK)
    347                                  return Status;
    348                                // Start Hard Loop
    349                                for (;;)
    350                                {
    351                                }
    352                              }
    353                              break;
   \   00000300   0xE172             B.N      ??Parse_BootString_28
   \                     ??Parse_BootString_38: (+1)
   \   00000302   0x.... 0x....      LDR.W    R1,??DataTable2_23
   \   00000306   0xA803             ADD      R0,SP,#+12
   \   00000308   0x.... 0x....      BL       sprintf
   \   0000030C   0xA903             ADD      R1,SP,#+12
   \   0000030E   0x2000             MOVS     R0,#+0
   \   00000310   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000314   0x4682             MOV      R10,R0
   \   00000316   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   0000031A   0xF1BA 0x0F00      CMP      R10,#+0
   \   0000031E   0xD002             BEQ.N    ??Parse_BootString_39
   \   00000320   0x4650             MOV      R0,R10
   \   00000322   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000324   0xE1EA             B.N      ??Parse_BootString_3
   \                     ??Parse_BootString_39: (+1)
   \   00000326   0x.... 0x....      LDR.W    R1,??DataTable2_24
   \   0000032A   0xA803             ADD      R0,SP,#+12
   \   0000032C   0x.... 0x....      BL       sprintf
   \   00000330   0xA903             ADD      R1,SP,#+12
   \   00000332   0x2000             MOVS     R0,#+0
   \   00000334   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000338   0x4682             MOV      R10,R0
   \   0000033A   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   0000033E   0xF1BA 0x0F00      CMP      R10,#+0
   \   00000342   0xD002             BEQ.N    ??Parse_BootString_40
   \   00000344   0x4650             MOV      R0,R10
   \   00000346   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000348   0xE1D8             B.N      ??Parse_BootString_3
   \                     ??Parse_BootString_40: (+1)
   \   0000034A   0xE7FE             B.N      ??Parse_BootString_40
    354          
    355          //++++++++++++++++++++++++++++++++++++++++++  S-Record Test Monitor.
    356                            case 'S':
    357                              // S-Record Test Monitor.
    358                              // Is this a BLE Operation?
    359                              if ( BLE_Flag )
   \                     ??Parse_BootString_33: (+1)
   \   0000034C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000034E   0x2D00             CMP      R5,#+0
   \   00000350   0xD00D             BEQ.N    ??Parse_BootString_41
    360                              {
    361                                // Yes...Build and Send BLE Response NOW.
    362                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00000352   0x.... 0x....      LDR.W    R1,??DataTable2_4
   \   00000356   0xA803             ADD      R0,SP,#+12
   \   00000358   0x.... 0x....      BL       strcpy
    363                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000035C   0xA803             ADD      R0,SP,#+12
   \   0000035E   0x.... 0x....      BL       strlen
   \   00000362   0xA903             ADD      R1,SP,#+12
   \   00000364   0x.... 0x....      BL       BGM111_Transmit
    364                                HAL_Delay(100);           // Wait 100ms
   \   00000368   0x2064             MOVS     R0,#+100
   \   0000036A   0x.... 0x....      BL       HAL_Delay
    365                              }
    366                              // Parse Data and extract S-Record.
    367                              Numbr_Rcrds = sscanf (tempBffr, "%s %s", s_cmd, s_recrd);
   \                     ??Parse_BootString_41: (+1)
   \   0000036E   0xAB47             ADD      R3,SP,#+284
   \   00000370   0xAA2D             ADD      R2,SP,#+180
   \   00000372   0x.... 0x....      LDR.W    R1,??DataTable2_25
   \   00000376   0x0020             MOVS     R0,R4
   \   00000378   0x.... 0x....      BL       sscanf
   \   0000037C   0x0007             MOVS     R7,R0
    368          //                    if (sscanf (tempBffr, "%s %s", s_cmd, s_recrd) == 2)
    369                              if (Numbr_Rcrds == 2)
   \   0000037E   0x2F02             CMP      R7,#+2
   \   00000380   0xF040 0x811C      BNE.W    ??Parse_BootString_42
    370                              {
    371                                sprintf( (char *)tempBffr2, "TS: %s\r\n", s_recrd );
   \   00000384   0xAA47             ADD      R2,SP,#+284
   \   00000386   0x.... 0x....      LDR.W    R1,??DataTable2_26
   \   0000038A   0xA803             ADD      R0,SP,#+12
   \   0000038C   0x.... 0x....      BL       sprintf
    372          #ifdef NUCLEO
    373                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    374          #else
    375                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000390   0xA903             ADD      R1,SP,#+12
   \   00000392   0x2000             MOVS     R0,#+0
   \   00000394   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000398   0x4682             MOV      R10,R0
    376          #endif
    377                                if (Status != HAL_OK)
   \   0000039A   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   0000039E   0xF1BA 0x0F00      CMP      R10,#+0
   \   000003A2   0xD002             BEQ.N    ??Parse_BootString_43
    378                                  return Status;
   \   000003A4   0x4650             MOV      R0,R10
   \   000003A6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000003A8   0xE1A8             B.N      ??Parse_BootString_3
    379                                // Pass to S-Record Parser..
    380                                Status = Parse_srecord( (char *)s_recrd, &Srec_Elem );
   \                     ??Parse_BootString_43: (+1)
   \   000003AA   0xA932             ADD      R1,SP,#+200
   \   000003AC   0xA847             ADD      R0,SP,#+284
   \   000003AE   0x.... 0x....      BL       Parse_srecord
   \   000003B2   0x4682             MOV      R10,R0
    381                                if (Status != HAL_OK)
   \   000003B4   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   000003B8   0xF1BA 0x0F00      CMP      R10,#+0
   \   000003BC   0xD040             BEQ.N    ??Parse_BootString_44
    382                                {
    383                                  // Report Failed Parse Operation
    384                                  switch(Srec_Elem.Srec_Err)
   \   000003BE   0xF89D 0x00C9      LDRB     R0,[SP, #+201]
   \   000003C2   0x2800             CMP      R0,#+0
   \   000003C4   0xD009             BEQ.N    ??Parse_BootString_45
   \   000003C6   0x2802             CMP      R0,#+2
   \   000003C8   0xD013             BEQ.N    ??Parse_BootString_46
   \   000003CA   0xD30C             BCC.N    ??Parse_BootString_47
   \   000003CC   0x2804             CMP      R0,#+4
   \   000003CE   0xD01C             BEQ.N    ??Parse_BootString_48
   \   000003D0   0xD315             BCC.N    ??Parse_BootString_49
   \   000003D2   0x2806             CMP      R0,#+6
   \   000003D4   0xD025             BEQ.N    ??Parse_BootString_50
   \   000003D6   0xD31E             BCC.N    ??Parse_BootString_51
   \   000003D8   0xE029             B.N      ??Parse_BootString_52
    385                                  {
    386                                    case NO_ERROR:
    387                                      sprintf( (char *)tempBffr2, "NO ERROR FOUND.\r\n" );
   \                     ??Parse_BootString_45: (+1)
   \   000003DA   0x.... 0x....      LDR.W    R1,??DataTable2_27
   \   000003DE   0xA803             ADD      R0,SP,#+12
   \   000003E0   0x.... 0x....      BL       sprintf
    388                                      break;
   \   000003E4   0xE0EE             B.N      ??Parse_BootString_53
    389                                    case ILLEGAL_SREC:
    390                                      sprintf( (char *)tempBffr2, "ERROR: ILLEGAL S-Record.\r\n" );
   \                     ??Parse_BootString_47: (+1)
   \   000003E6   0x.... 0x....      LDR.W    R1,??DataTable2_28
   \   000003EA   0xA803             ADD      R0,SP,#+12
   \   000003EC   0x.... 0x....      BL       sprintf
    391                                      break;
   \   000003F0   0xE0E8             B.N      ??Parse_BootString_53
    392                                    case ILLEGAL_RECORD:
    393                                      sprintf( (char *)tempBffr2, "ERROR: ILLEGAL Record.\r\n" );
   \                     ??Parse_BootString_46: (+1)
   \   000003F2   0x.... 0x....      LDR.W    R1,??DataTable2_29
   \   000003F6   0xA803             ADD      R0,SP,#+12
   \   000003F8   0x.... 0x....      BL       sprintf
    394                                      break;
   \   000003FC   0xE0E2             B.N      ??Parse_BootString_53
    395                                    case RESERVED_RECORD:
    396                                      sprintf( (char *)tempBffr2, "ERROR: Reserved S-Record Type.\r\n" );
   \                     ??Parse_BootString_49: (+1)
   \   000003FE   0x.... 0x....      LDR.W    R1,??DataTable2_30
   \   00000402   0xA803             ADD      R0,SP,#+12
   \   00000404   0x.... 0x....      BL       sprintf
    397                                      break;
   \   00000408   0xE0DC             B.N      ??Parse_BootString_53
    398                                    case ILLEGAL_BYTE_CNT:
    399                                      sprintf( (char *)tempBffr2, "ERROR: Illegal Byte Count.\r\n" );
   \                     ??Parse_BootString_48: (+1)
   \   0000040A   0x.... 0x....      LDR.W    R1,??DataTable2_31
   \   0000040E   0xA803             ADD      R0,SP,#+12
   \   00000410   0x.... 0x....      BL       sprintf
    400                                      break;
   \   00000414   0xE0D6             B.N      ??Parse_BootString_53
    401                                    case ILLEGAL_BYTE_DATA:
    402                                      sprintf( (char *)tempBffr2, "ERROR: Reserved S-Record Type.\r\n" );
   \                     ??Parse_BootString_51: (+1)
   \   00000416   0x.... 0x....      LDR.W    R1,??DataTable2_30
   \   0000041A   0xA803             ADD      R0,SP,#+12
   \   0000041C   0x.... 0x....      BL       sprintf
    403                                      break;
   \   00000420   0xE0D0             B.N      ??Parse_BootString_53
    404                                    case BAD_CHECKSUM:
    405                                      sprintf( (char *)tempBffr2, "ERROR: Illegal Byte Data.\r\n" );
   \                     ??Parse_BootString_50: (+1)
   \   00000422   0x.... 0x....      LDR.W    R1,??DataTable2_32
   \   00000426   0xA803             ADD      R0,SP,#+12
   \   00000428   0x.... 0x....      BL       sprintf
    406                                      break;
   \   0000042C   0xE0CA             B.N      ??Parse_BootString_53
    407                                    default:
    408                                      sprintf( (char *)tempBffr2, "ERROR: Checksum did not match data.\r\n" );
   \                     ??Parse_BootString_52: (+1)
   \   0000042E   0x.... 0x....      LDR.W    R1,??DataTable2_33
   \   00000432   0xA803             ADD      R0,SP,#+12
   \   00000434   0x.... 0x....      BL       sprintf
    409                                      break;
   \   00000438   0xE0C4             B.N      ??Parse_BootString_53
   \   0000043A   0xBF00             Nop      
   \                     ??Parse_BootString_16:
   \   0000043C   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
    410                                  } // EndSwitch (Srec_Elem.Srec_Err)
    411                                } // EndIf (Status != HAL_OK)..Parse_srecord
    412                                else
    413                                {
    414                                  // Display Type of S-Record
    415                                  switch(Srec_Elem.RecordType)
   \                     ??Parse_BootString_44: (+1)
   \   00000440   0xF89D 0x00C8      LDRB     R0,[SP, #+200]
   \   00000444   0x2800             CMP      R0,#+0
   \   00000446   0xD00E             BEQ.N    ??Parse_BootString_54
   \   00000448   0x2802             CMP      R0,#+2
   \   0000044A   0xD016             BEQ.N    ??Parse_BootString_55
   \   0000044C   0xD310             BCC.N    ??Parse_BootString_56
   \   0000044E   0x2804             CMP      R0,#+4
   \   00000450   0xD01D             BEQ.N    ??Parse_BootString_57
   \   00000452   0xD317             BCC.N    ??Parse_BootString_58
   \   00000454   0x2806             CMP      R0,#+6
   \   00000456   0xD024             BEQ.N    ??Parse_BootString_59
   \   00000458   0xD31E             BCC.N    ??Parse_BootString_60
   \   0000045A   0x2808             CMP      R0,#+8
   \   0000045C   0xD02B             BEQ.N    ??Parse_BootString_61
   \   0000045E   0xD325             BCC.N    ??Parse_BootString_62
   \   00000460   0x2809             CMP      R0,#+9
   \   00000462   0xD02D             BEQ.N    ??Parse_BootString_63
   \   00000464   0xE031             B.N      ??Parse_BootString_64
    416                                  {
    417                                    case S0_HEADER:
    418                                      sprintf( (char *)tempBffr2, "Record Type: S0_HEADER: Vendor specific ASCII text.\r\n" );
   \                     ??Parse_BootString_54: (+1)
   \   00000466   0x....             LDR.N    R1,??DataTable2_34
   \   00000468   0xA803             ADD      R0,SP,#+12
   \   0000046A   0x.... 0x....      BL       sprintf
    419                                      break;
   \   0000046E   0xE030             B.N      ??Parse_BootString_65
    420                                    case S1_DATA:
    421                                      sprintf( (char *)tempBffr2, "Record Type: S1_DATA: Data that starts at the 16-bit address field.\r\n" );
   \                     ??Parse_BootString_56: (+1)
   \   00000470   0x....             LDR.N    R1,??DataTable2_35
   \   00000472   0xA803             ADD      R0,SP,#+12
   \   00000474   0x.... 0x....      BL       sprintf
    422                                      break;
   \   00000478   0xE02B             B.N      ??Parse_BootString_65
    423                                    case S2_DATA:
    424                                      sprintf( (char *)tempBffr2, "Record Type: S2_DATA: Data that starts at the 24-bit address field.\r\n" );
   \                     ??Parse_BootString_55: (+1)
   \   0000047A   0x....             LDR.N    R1,??DataTable2_36
   \   0000047C   0xA803             ADD      R0,SP,#+12
   \   0000047E   0x.... 0x....      BL       sprintf
    425                                      break;
   \   00000482   0xE026             B.N      ??Parse_BootString_65
    426                                    case S3_DATA:
    427                                      sprintf( (char *)tempBffr2, "Record Type: S3_DATA: Data that starts at the 32-bit address field.\r\n" );
   \                     ??Parse_BootString_58: (+1)
   \   00000484   0x....             LDR.N    R1,??DataTable2_37
   \   00000486   0xA803             ADD      R0,SP,#+12
   \   00000488   0x.... 0x....      BL       sprintf
    428                                      break;
   \   0000048C   0xE021             B.N      ??Parse_BootString_65
    429                                    case S4_RESERVED:
    430                                      sprintf( (char *)tempBffr2, "Record Type: S4_RESERVED\r\n" );
   \                     ??Parse_BootString_57: (+1)
   \   0000048E   0x....             LDR.N    R1,??DataTable2_38
   \   00000490   0xA803             ADD      R0,SP,#+12
   \   00000492   0x.... 0x....      BL       sprintf
    431                                      break;
   \   00000496   0xE01C             B.N      ??Parse_BootString_65
    432                                    case S5_COUNT:
    433                                      sprintf( (char *)tempBffr2, "Record Type: S5_COUNT: 16-bit count of S1 / S2 / S3 records.\r\n" );
   \                     ??Parse_BootString_60: (+1)
   \   00000498   0x....             LDR.N    R1,??DataTable2_39
   \   0000049A   0xA803             ADD      R0,SP,#+12
   \   0000049C   0x.... 0x....      BL       sprintf
    434                                      break;
   \   000004A0   0xE017             B.N      ??Parse_BootString_65
    435                                    case S6_COUNT:
    436                                      sprintf( (char *)tempBffr2, "Record Type: S6_COUNT: 24-bit count of S1 / S2 / S3 records.\r\n" );
   \                     ??Parse_BootString_59: (+1)
   \   000004A2   0x....             LDR.N    R1,??DataTable2_40
   \   000004A4   0xA803             ADD      R0,SP,#+12
   \   000004A6   0x.... 0x....      BL       sprintf
    437                                      break;
   \   000004AA   0xE012             B.N      ??Parse_BootString_65
    438                                    case S7_START:
    439                                      sprintf( (char *)tempBffr2, "Record Type: S7_START: Starting execution location at a 32-bit address.\r\n" );
   \                     ??Parse_BootString_62: (+1)
   \   000004AC   0x....             LDR.N    R1,??DataTable2_41
   \   000004AE   0xA803             ADD      R0,SP,#+12
   \   000004B0   0x.... 0x....      BL       sprintf
    440                                      break;
   \   000004B4   0xE00D             B.N      ??Parse_BootString_65
    441                                    case S8_START:
    442                                      sprintf( (char *)tempBffr2, "Record Type: S8_START: Starting execution location at a 24-bit address.\r\n" );
   \                     ??Parse_BootString_61: (+1)
   \   000004B6   0x....             LDR.N    R1,??DataTable2_42
   \   000004B8   0xA803             ADD      R0,SP,#+12
   \   000004BA   0x.... 0x....      BL       sprintf
    443                                      break;
   \   000004BE   0xE008             B.N      ??Parse_BootString_65
    444                                    case S9_START:
    445                                      sprintf( (char *)tempBffr2, "Record Type: S9_START: Starting execution location at a 16-bit address.\r\n" );
   \                     ??Parse_BootString_63: (+1)
   \   000004C0   0x....             LDR.N    R1,??DataTable2_43
   \   000004C2   0xA803             ADD      R0,SP,#+12
   \   000004C4   0x.... 0x....      BL       sprintf
    446                                      break;
   \   000004C8   0xE003             B.N      ??Parse_BootString_65
    447                                    default:
    448                                      sprintf( (char *)tempBffr2, "Record Type: UNKNOWN.\r\n" );
   \                     ??Parse_BootString_64: (+1)
   \   000004CA   0x....             LDR.N    R1,??DataTable2_44
   \   000004CC   0xA803             ADD      R0,SP,#+12
   \   000004CE   0x.... 0x....      BL       sprintf
    449                                      break;
    450                                  } // EndSwitch (Srec_Elem.RecordType)
    451          #ifdef NUCLEO
    452                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    453          #else
    454                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \                     ??Parse_BootString_65: (+1)
   \   000004D2   0xA903             ADD      R1,SP,#+12
   \   000004D4   0x2000             MOVS     R0,#+0
   \   000004D6   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000004DA   0x4682             MOV      R10,R0
    455          #endif
    456                                  if (Status != HAL_OK)
   \   000004DC   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   000004E0   0xF1BA 0x0F00      CMP      R10,#+0
   \   000004E4   0xD002             BEQ.N    ??Parse_BootString_66
    457                                    return Status;
   \   000004E6   0x4650             MOV      R0,R10
   \   000004E8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000004EA   0xE107             B.N      ??Parse_BootString_3
    458                                  // Display Byte Count Field.
    459                                  sprintf( (char *)tempBffr2, "Byte Count: %08x\r\n", Srec_Elem.ByteCount );
   \                     ??Parse_BootString_66: (+1)
   \   000004EC   0x9A33             LDR      R2,[SP, #+204]
   \   000004EE   0x....             LDR.N    R1,??DataTable2_45
   \   000004F0   0xA803             ADD      R0,SP,#+12
   \   000004F2   0x.... 0x....      BL       sprintf
    460          #ifdef NUCLEO
    461                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    462          #else
    463                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000004F6   0xA903             ADD      R1,SP,#+12
   \   000004F8   0x2000             MOVS     R0,#+0
   \   000004FA   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000004FE   0x4682             MOV      R10,R0
    464          #endif
    465                                  if (Status != HAL_OK)
   \   00000500   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   00000504   0xF1BA 0x0F00      CMP      R10,#+0
   \   00000508   0xD002             BEQ.N    ??Parse_BootString_67
    466                                    return Status;
   \   0000050A   0x4650             MOV      R0,R10
   \   0000050C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000050E   0xE0F5             B.N      ??Parse_BootString_3
    467                                  // Display Address Field.
    468                                  sprintf( (char *)tempBffr2, "Address: %08x\r\n", Srec_Elem.Address );
   \                     ??Parse_BootString_67: (+1)
   \   00000510   0x9A34             LDR      R2,[SP, #+208]
   \   00000512   0x....             LDR.N    R1,??DataTable2_46
   \   00000514   0xA803             ADD      R0,SP,#+12
   \   00000516   0x.... 0x....      BL       sprintf
    469          #ifdef NUCLEO
    470                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    471          #else
    472                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000051A   0xA903             ADD      R1,SP,#+12
   \   0000051C   0x2000             MOVS     R0,#+0
   \   0000051E   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000522   0x4682             MOV      R10,R0
    473          #endif
    474                                  // If S-Record Type is type 0 then display Buffer as String terminated by nulls.
    475                                  if (Srec_Elem.RecordType == S0_HEADER)
   \   00000524   0xF89D 0x00C8      LDRB     R0,[SP, #+200]
   \   00000528   0x2800             CMP      R0,#+0
   \   0000052A   0xD10B             BNE.N    ??Parse_BootString_68
    476                                  {
    477                                    sprintf( (char *)tempBffr2, "Header: %s\r\n", (char *)Srec_Elem.Data);
   \   0000052C   0xF10D 0x02D5      ADD      R2,SP,#+213
   \   00000530   0x....             LDR.N    R1,??DataTable2_47
   \   00000532   0xA803             ADD      R0,SP,#+12
   \   00000534   0x.... 0x....      BL       sprintf
    478          #ifdef NUCLEO
    479                                    Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    480          #else
    481                                    Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000538   0xA903             ADD      R1,SP,#+12
   \   0000053A   0x2000             MOVS     R0,#+0
   \   0000053C   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000540   0x4682             MOV      R10,R0
   \   00000542   0xE034             B.N      ??Parse_BootString_69
    482          #endif
    483                                  }
    484                                  else
    485                                  {
    486                                    // Dump Buffer of S-Record.
    487                                    y=0;
   \                     ??Parse_BootString_68: (+1)
   \   00000544   0x2000             MOVS     R0,#+0
   \   00000546   0x4681             MOV      R9,R0
    488                                    sprintf( (char *)tempBffr2, "" );
   \   00000548   0x....             ADR.N    R1,??DataTable2  ;; ""
   \   0000054A   0xA803             ADD      R0,SP,#+12
   \   0000054C   0x.... 0x....      BL       sprintf
    489                                    for (x=0; x<BYTE_BFFR_SIZE; x++)
   \   00000550   0x2000             MOVS     R0,#+0
   \   00000552   0x4683             MOV      R11,R0
   \                     ??Parse_BootString_70: (+1)
   \   00000554   0xF1BB 0x0F2D      CMP      R11,#+45
   \   00000558   0xDA29             BGE.N    ??Parse_BootString_69
    490                                    {
    491                                      sprintf( (char *)tempBffr3, "%02x ", Srec_Elem.Data[x]);
   \   0000055A   0xA832             ADD      R0,SP,#+200
   \   0000055C   0x4458             ADD      R0,R0,R11
   \   0000055E   0x7B42             LDRB     R2,[R0, #+13]
   \   00000560   0x....             LDR.N    R1,??DataTable2_48
   \   00000562   0xA82F             ADD      R0,SP,#+188
   \   00000564   0x.... 0x....      BL       sprintf
    492                                      strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   00000568   0xA92F             ADD      R1,SP,#+188
   \   0000056A   0xA803             ADD      R0,SP,#+12
   \   0000056C   0x.... 0x....      BL       strcat
    493                                      y++;
   \   00000570   0xF119 0x0901      ADDS     R9,R9,#+1
    494                                      if (y>=16)
   \   00000574   0xF1B9 0x0F10      CMP      R9,#+16
   \   00000578   0xDB16             BLT.N    ??Parse_BootString_71
    495                                      {
    496                                        strcat( (char *)tempBffr2, "\r\n" );
   \   0000057A   0x....             ADR.N    R1,??DataTable2_1  ;; 0x0D, 0x0A, 0x00, 0x00
   \   0000057C   0xA803             ADD      R0,SP,#+12
   \   0000057E   0x.... 0x....      BL       strcat
    497                                        y=0;
   \   00000582   0x2000             MOVS     R0,#+0
   \   00000584   0x4681             MOV      R9,R0
    498          #ifdef NUCLEO
    499                                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    500          #else
    501                                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000586   0xA903             ADD      R1,SP,#+12
   \   00000588   0x2000             MOVS     R0,#+0
   \   0000058A   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000058E   0x4682             MOV      R10,R0
    502          #endif
    503                                        if (Status != HAL_OK)
   \   00000590   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   00000594   0xF1BA 0x0F00      CMP      R10,#+0
   \   00000598   0xD002             BEQ.N    ??Parse_BootString_72
    504                                          return Status;
   \   0000059A   0x4650             MOV      R0,R10
   \   0000059C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000059E   0xE0AD             B.N      ??Parse_BootString_3
    505                                        sprintf( (char *)tempBffr2, "" );
   \                     ??Parse_BootString_72: (+1)
   \   000005A0   0x....             ADR.N    R1,??DataTable2  ;; ""
   \   000005A2   0xA803             ADD      R0,SP,#+12
   \   000005A4   0x.... 0x....      BL       sprintf
    506                                      }
    507                                    }
   \                     ??Parse_BootString_71: (+1)
   \   000005A8   0xF11B 0x0B01      ADDS     R11,R11,#+1
   \   000005AC   0xE7D2             B.N      ??Parse_BootString_70
    508                                  }
    509                                  // Finally Display Checksum.
    510                                  sprintf( (char *)tempBffr2, "Checksum: %02x\r\n", Srec_Elem.Checksum );
   \                     ??Parse_BootString_69: (+1)
   \   000005AE   0xF89D 0x20D4      LDRB     R2,[SP, #+212]
   \   000005B2   0x....             LDR.N    R1,??DataTable2_49
   \   000005B4   0xA803             ADD      R0,SP,#+12
   \   000005B6   0x.... 0x....      BL       sprintf
   \   000005BA   0xE003             B.N      ??Parse_BootString_53
    511                                }// EndElse (Status != HAL_OK)..Parse_srecord
    512                              } // EndIf (Numbr_Rcrds == 2)
    513                              else
    514                              {
    515                                strcpy( (char *)tempBffr2, "TS SYNTAX ERROR: Too many parameters.\r\n");
   \                     ??Parse_BootString_42: (+1)
   \   000005BC   0x....             LDR.N    R1,??DataTable2_50
   \   000005BE   0xA803             ADD      R0,SP,#+12
   \   000005C0   0x.... 0x....      BL       strcpy
    516                              } // EndElse (Numbr_Rcrds == 2)
    517                              break;
   \                     ??Parse_BootString_53: (+1)
   \   000005C4   0xE010             B.N      ??Parse_BootString_28
    518          //**************************************************************************************************
    519                            default:
    520                              // Is this a BLE Operation?
    521                              if ( BLE_Flag )
   \                     ??Parse_BootString_34: (+1)
   \   000005C6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000005C8   0x2D00             CMP      R5,#+0
   \   000005CA   0xD009             BEQ.N    ??Parse_BootString_73
    522                              {
    523                                // Yes...Build and Send BLE Response NOW.
    524                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000005CC   0x....             LDR.N    R1,??DataTable2_4
   \   000005CE   0xA803             ADD      R0,SP,#+12
   \   000005D0   0x.... 0x....      BL       strcpy
    525                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000005D4   0xA803             ADD      R0,SP,#+12
   \   000005D6   0x.... 0x....      BL       strlen
   \   000005DA   0xA903             ADD      R1,SP,#+12
   \   000005DC   0x.... 0x....      BL       BGM111_Transmit
    526                              }
    527                              
    528                              // ERROR if we get here.. 
    529                              strcpy( (char *)tempBffr2, "ERROR: Not a legal command.\r\n");
   \                     ??Parse_BootString_73: (+1)
   \   000005E0   0x....             LDR.N    R1,??DataTable2_51
   \   000005E2   0xA803             ADD      R0,SP,#+12
   \   000005E4   0x.... 0x....      BL       strcpy
    530                              break;
    531                           
    532                          } //EndSwitch ( tempBffr[1] )
    533                        } //EndElse (Size <= 1)
    534                        break;
   \                     ??Parse_BootString_28: (+1)
   \   000005E8   0xE010             B.N      ??Parse_BootString_11
    535          //++++++++++++++++++++++++++++++++++++++++++  Unknown Command.
    536                      default:
    537                        // Is this a BLE Operation?
    538                        if ( BLE_Flag )
   \                     ??Parse_BootString_9: (+1)
   \   000005EA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000005EC   0x2D00             CMP      R5,#+0
   \   000005EE   0xD009             BEQ.N    ??Parse_BootString_74
    539                        {
    540                          // Yes...Build and Send BLE Response NOW.
    541                          strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000005F0   0x....             LDR.N    R1,??DataTable2_4
   \   000005F2   0xA803             ADD      R0,SP,#+12
   \   000005F4   0x.... 0x....      BL       strcpy
    542                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000005F8   0xA803             ADD      R0,SP,#+12
   \   000005FA   0x.... 0x....      BL       strlen
   \   000005FE   0xA903             ADD      R1,SP,#+12
   \   00000600   0x.... 0x....      BL       BGM111_Transmit
    543                        }
    544                        
    545                        // ERROR if we get here.. 
    546                        strcpy( (char *)tempBffr2, "ERROR: Not a legal command.\r\n");
   \                     ??Parse_BootString_74: (+1)
   \   00000604   0x....             LDR.N    R1,??DataTable2_51
   \   00000606   0xA803             ADD      R0,SP,#+12
   \   00000608   0x.... 0x....      BL       strcpy
    547                        break;
    548                      } // EndSwitch
    549                      
    550          
    551                      // Test last I2C Status to determine next msg.
    552                      switch( Status )
   \                     ??Parse_BootString_11: (+1)
   \   0000060C   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   00000610   0xF1BA 0x0F00      CMP      R10,#+0
   \   00000614   0xD007             BEQ.N    ??Parse_BootString_75
   \   00000616   0xF1BA 0x0F02      CMP      R10,#+2
   \   0000061A   0xD03B             BEQ.N    ??Parse_BootString_76
   \   0000061C   0xD304             BCC.N    ??Parse_BootString_77
   \   0000061E   0xF1BA 0x0F03      CMP      R10,#+3
   \   00000622   0xD03E             BEQ.N    ??Parse_BootString_78
   \   00000624   0xE044             B.N      ??Parse_BootString_79
    553                      {
    554                        case HAL_OK:
    555                          break;
   \                     ??Parse_BootString_75: (+1)
   \   00000626   0xE049             B.N      ??Parse_BootString_80
    556                        case HAL_ERROR:
    557                          // Determine what kind of error.
    558                          Err_code = RoadBrd_I2C_GetError();
   \                     ??Parse_BootString_77: (+1)
   \   00000628   0x.... 0x....      BL       RoadBrd_I2C_GetError
   \   0000062C   0x4680             MOV      R8,R0
    559                          switch( Err_code )
   \   0000062E   0x4640             MOV      R0,R8
   \   00000630   0x2801             CMP      R0,#+1
   \   00000632   0xD00A             BEQ.N    ??Parse_BootString_81
   \   00000634   0x2802             CMP      R0,#+2
   \   00000636   0xD00D             BEQ.N    ??Parse_BootString_82
   \   00000638   0x2804             CMP      R0,#+4
   \   0000063A   0xD010             BEQ.N    ??Parse_BootString_83
   \   0000063C   0x2808             CMP      R0,#+8
   \   0000063E   0xD013             BEQ.N    ??Parse_BootString_84
   \   00000640   0x2810             CMP      R0,#+16
   \   00000642   0xD016             BEQ.N    ??Parse_BootString_85
   \   00000644   0x2820             CMP      R0,#+32
   \   00000646   0xD019             BEQ.N    ??Parse_BootString_86
   \   00000648   0xE01D             B.N      ??Parse_BootString_87
    560                          {
    561                            case HAL_I2C_ERROR_BERR:
    562                              strcpy( (char *)tempBffr2, "I2C ERROR: BERR: Bus Error reported.\r\n");
   \                     ??Parse_BootString_81: (+1)
   \   0000064A   0x....             LDR.N    R1,??DataTable2_52
   \   0000064C   0xA803             ADD      R0,SP,#+12
   \   0000064E   0x.... 0x....      BL       strcpy
    563                              break;
   \   00000652   0xE01C             B.N      ??Parse_BootString_88
    564                            case HAL_I2C_ERROR_ARLO:
    565                              strcpy( (char *)tempBffr2, "I2C ERROR: ARLO: Arbitration lost reported.\r\n");
   \                     ??Parse_BootString_82: (+1)
   \   00000654   0x....             LDR.N    R1,??DataTable2_53
   \   00000656   0xA803             ADD      R0,SP,#+12
   \   00000658   0x.... 0x....      BL       strcpy
    566                              break;
   \   0000065C   0xE017             B.N      ??Parse_BootString_88
    567                            case HAL_I2C_ERROR_AF:
    568                              strcpy( (char *)tempBffr2, "I2C ERROR: AF: Acknowledge failure reported.\r\n");
   \                     ??Parse_BootString_83: (+1)
   \   0000065E   0x....             LDR.N    R1,??DataTable2_54
   \   00000660   0xA803             ADD      R0,SP,#+12
   \   00000662   0x.... 0x....      BL       strcpy
    569                              break;
   \   00000666   0xE012             B.N      ??Parse_BootString_88
    570                            case HAL_I2C_ERROR_OVR:
    571                              strcpy( (char *)tempBffr2, "I2C ERROR: OVR: Overrun/Underrun reported.\r\n");
   \                     ??Parse_BootString_84: (+1)
   \   00000668   0x....             LDR.N    R1,??DataTable2_55
   \   0000066A   0xA803             ADD      R0,SP,#+12
   \   0000066C   0x.... 0x....      BL       strcpy
    572                              break;
   \   00000670   0xE00D             B.N      ??Parse_BootString_88
    573                            case HAL_I2C_ERROR_DMA:
    574                              strcpy( (char *)tempBffr2, "I2C ERROR: DMA: DMA Error reported.\r\n");
   \                     ??Parse_BootString_85: (+1)
   \   00000672   0x....             LDR.N    R1,??DataTable2_56
   \   00000674   0xA803             ADD      R0,SP,#+12
   \   00000676   0x.... 0x....      BL       strcpy
    575                              break;
   \   0000067A   0xE008             B.N      ??Parse_BootString_88
    576                            case HAL_I2C_ERROR_TIMEOUT:
    577                              strcpy( (char *)tempBffr2, "I2C ERROR: TIMEOUT: Timeout Error reported.\r\n");
   \                     ??Parse_BootString_86: (+1)
   \   0000067C   0x....             LDR.N    R1,??DataTable2_57
   \   0000067E   0xA803             ADD      R0,SP,#+12
   \   00000680   0x.... 0x....      BL       strcpy
    578                              break;
   \   00000684   0xE003             B.N      ??Parse_BootString_88
    579                            default:
    580                              strcpy( (char *)tempBffr2, "I2C ERROR: Unknown Error reported.\r\n");
   \                     ??Parse_BootString_87: (+1)
   \   00000686   0x....             LDR.N    R1,??DataTable2_58
   \   00000688   0xA803             ADD      R0,SP,#+12
   \   0000068A   0x.... 0x....      BL       strcpy
    581                              break;
    582                           
    583                          }
    584                          // Re-Initialize I2C....It has been corrupted.
    585                          MX_I2C1_Reset();
   \                     ??Parse_BootString_88: (+1)
   \   0000068E   0x.... 0x....      BL       MX_I2C1_Reset
    586                          break;
   \   00000692   0xE013             B.N      ??Parse_BootString_80
    587                        case HAL_BUSY:
    588                          strcpy( (char *)tempBffr2, "I2C BUSY: I2C reported BUSY error.\r\n");
   \                     ??Parse_BootString_76: (+1)
   \   00000694   0x....             LDR.N    R1,??DataTable2_59
   \   00000696   0xA803             ADD      R0,SP,#+12
   \   00000698   0x.... 0x....      BL       strcpy
    589                          // Re-Initialize I2C....It has been corrupted.
    590                          MX_I2C1_Reset();
   \   0000069C   0x.... 0x....      BL       MX_I2C1_Reset
    591                          break;
   \   000006A0   0xE00C             B.N      ??Parse_BootString_80
    592                        case HAL_TIMEOUT:
    593                          strcpy( (char *)tempBffr2, "I2C TIMEOUT: I2C reported TIMEOUT.\r\n");
   \                     ??Parse_BootString_78: (+1)
   \   000006A2   0x....             LDR.N    R1,??DataTable2_60
   \   000006A4   0xA803             ADD      R0,SP,#+12
   \   000006A6   0x.... 0x....      BL       strcpy
    594                          // Re-Initialize I2C....It has been corrupted.
    595                          MX_I2C1_Reset();
   \   000006AA   0x.... 0x....      BL       MX_I2C1_Reset
    596                          break;
   \   000006AE   0xE005             B.N      ??Parse_BootString_80
    597                        default:  
    598                          strcpy( (char *)tempBffr2, "I2C ERROR: I2C reported unnown error.\r\n");
   \                     ??Parse_BootString_79: (+1)
   \   000006B0   0x....             LDR.N    R1,??DataTable2_61
   \   000006B2   0xA803             ADD      R0,SP,#+12
   \   000006B4   0x.... 0x....      BL       strcpy
    599                          // Re-Initialize I2C....It has been corrupted.
    600                          MX_I2C1_Reset();
   \   000006B8   0x.... 0x....      BL       MX_I2C1_Reset
    601                          break;
    602                      }
    603                      // Send string to UART..
    604          #ifdef NUCLEO
    605                      Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);
    606          #else
    607                      Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \                     ??Parse_BootString_80: (+1)
   \   000006BC   0xA903             ADD      R1,SP,#+12
   \   000006BE   0x2000             MOVS     R0,#+0
   \   000006C0   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000006C4   0x4682             MOV      R10,R0
    608          #endif
    609                     if (Status != HAL_OK)
   \   000006C6   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   000006CA   0xF1BA 0x0F00      CMP      R10,#+0
   \   000006CE   0xD002             BEQ.N    ??Parse_BootString_89
    610                        return Status;
   \   000006D0   0x4650             MOV      R0,R10
   \   000006D2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000006D4   0xE012             B.N      ??Parse_BootString_3
    611                      // Send Prompt to UART..
    612                      strcpy( (char *)tempBffr2, "\r\n\r\n> ");
   \                     ??Parse_BootString_89: (+1)
   \   000006D6   0x....             LDR.N    R1,??DataTable2_62
   \   000006D8   0xA803             ADD      R0,SP,#+12
   \   000006DA   0x.... 0x....      BL       strcpy
    613          #ifdef NUCLEO
    614                      Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);
    615          #else
    616                      Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000006DE   0xA903             ADD      R1,SP,#+12
   \   000006E0   0x2000             MOVS     R0,#+0
   \   000006E2   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000006E6   0x4682             MOV      R10,R0
    617          #endif
    618                      if (Status != HAL_OK)
   \   000006E8   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   000006EC   0xF1BA 0x0F00      CMP      R10,#+0
   \   000006F0   0xD002             BEQ.N    ??Parse_BootString_2
    619                        return Status;
   \   000006F2   0x4650             MOV      R0,R10
   \   000006F4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000006F6   0xE001             B.N      ??Parse_BootString_3
    620              } // EndElse (tempBffr[0] == 0x1B)
    621            return Status;
   \                     ??Parse_BootString_2: (+1)
   \   000006F8   0x4650             MOV      R0,R10
   \   000006FA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??Parse_BootString_3: (+1)
   \   000006FC   0xB065             ADD      SP,SP,#+404
   \   000006FE   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    622          }
    623          

   \                                 In section .text, align 2, keep-with-next
    624          bool Tst_Boot_Bypass( void)
    625          {
    626            return Boot_Bypass;
   \                     Tst_Boot_Bypass: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable2_2
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return
    627          }
    628          

   \                                 In section .text, align 2, keep-with-next
    629          void Set_Boot_Bypass( void )
    630          {
    631            Boot_Bypass =  true;
   \                     Set_Boot_Bypass: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x....             LDR.N    R1,??DataTable2_2
   \   00000004   0x7008             STRB     R0,[R1, #+0]
    632          }
   \   00000006   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x00 0x00          DC8      "",0x0,0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x........         DC32     Boot_Bypass

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   0x........         DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \   00000000   0x........         DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \   00000000   0x........         DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_8:
   \   00000000   0x........         DC32     ?_5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_9:
   \   00000000   0x........         DC32     ?_7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_10:
   \   00000000   0x........         DC32     ?_8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_11:
   \   00000000   0x........         DC32     ?_9

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_12:
   \   00000000   0x........         DC32     ?_10

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_13:
   \   00000000   0x........         DC32     ?_11

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_14:
   \   00000000   0x........         DC32     ?_12

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_15:
   \   00000000   0x........         DC32     ?_13

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_16:
   \   00000000   0x........         DC32     ?_14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_17:
   \   00000000   0x........         DC32     ?_15

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_18:
   \   00000000   0x........         DC32     ?_16

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_19:
   \   00000000   0x........         DC32     ?_17

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_20:
   \   00000000   0x........         DC32     ?_18

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_21:
   \   00000000   0x........         DC32     ?_19

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_22:
   \   00000000   0x........         DC32     ?_20

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_23:
   \   00000000   0x........         DC32     ?_21

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_24:
   \   00000000   0x........         DC32     ?_22

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_25:
   \   00000000   0x........         DC32     ?_23

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_26:
   \   00000000   0x........         DC32     ?_24

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_27:
   \   00000000   0x........         DC32     ?_25

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_28:
   \   00000000   0x........         DC32     ?_26

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_29:
   \   00000000   0x........         DC32     ?_27

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_30:
   \   00000000   0x........         DC32     ?_28

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_31:
   \   00000000   0x........         DC32     ?_29

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_32:
   \   00000000   0x........         DC32     ?_30

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_33:
   \   00000000   0x........         DC32     ?_31

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_34:
   \   00000000   0x........         DC32     ?_32

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_35:
   \   00000000   0x........         DC32     ?_33

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_36:
   \   00000000   0x........         DC32     ?_34

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_37:
   \   00000000   0x........         DC32     ?_35

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_38:
   \   00000000   0x........         DC32     ?_36

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_39:
   \   00000000   0x........         DC32     ?_37

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_40:
   \   00000000   0x........         DC32     ?_38

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_41:
   \   00000000   0x........         DC32     ?_39

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_42:
   \   00000000   0x........         DC32     ?_40

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_43:
   \   00000000   0x........         DC32     ?_41

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_44:
   \   00000000   0x........         DC32     ?_42

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_45:
   \   00000000   0x........         DC32     ?_43

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_46:
   \   00000000   0x........         DC32     ?_44

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_47:
   \   00000000   0x........         DC32     ?_45

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_48:
   \   00000000   0x........         DC32     ?_47

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_49:
   \   00000000   0x........         DC32     ?_48

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_50:
   \   00000000   0x........         DC32     ?_49

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_51:
   \   00000000   0x........         DC32     ?_50

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_52:
   \   00000000   0x........         DC32     ?_51

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_53:
   \   00000000   0x........         DC32     ?_52

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_54:
   \   00000000   0x........         DC32     ?_53

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_55:
   \   00000000   0x........         DC32     ?_54

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_56:
   \   00000000   0x........         DC32     ?_55

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_57:
   \   00000000   0x........         DC32     ?_56

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_58:
   \   00000000   0x........         DC32     ?_57

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_59:
   \   00000000   0x........         DC32     ?_58

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_60:
   \   00000000   0x........         DC32     ?_59

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_61:
   \   00000000   0x........         DC32     ?_60

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_62:
   \   00000000   0x........         DC32     ?_61

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x0D 0x0A          DC8 0DH, 0AH, 0DH, 0AH, 20H, 54H, 2EH, 2EH
   \              0x0D 0x0A    
   \              0x20 0x54    
   \              0x2E 0x2E    
   \   00000008   0x2E 0x2E          DC8 2EH, 2EH, 2EH, 2EH, 2EH, 2EH, 54H, 45H
   \              0x2E 0x2E    
   \              0x2E 0x2E    
   \              0x54 0x45    
   \   00000010   0x52 0x4D          DC8 52H, 4DH, 49H, 4EH, 41H, 54H, 49H, 4EH
   \              0x49 0x4E    
   \              0x41 0x54    
   \              0x49 0x4E    
   \   00000018   0x47 0x20          DC8 47H, 20H, 42H, 4FH, 4FH, 54H, 2DH, 4DH
   \              0x42 0x4F    
   \              0x4F 0x54    
   \              0x2D 0x4D    
   \   00000020   0x4F 0x4E          DC8 4FH, 4EH, 49H, 54H, 4FH, 52H, 20H, 4DH
   \              0x49 0x54    
   \              0x4F 0x52    
   \              0x20 0x4D    
   \   00000028   0x4F 0x44          DC8 4FH, 44H, 45H, 2EH, 2EH, 2EH, 2EH, 2EH
   \              0x45 0x2E    
   \              0x2E 0x2E    
   \              0x2E 0x2E    
   \   00000030   0x2E 0x2E          DC8 2EH, 2EH, 2EH, 2EH, 0DH, 0AH, 0DH, 0AH
   \              0x2E 0x2E    
   \              0x0D 0x0A    
   \              0x0D 0x0A    
   \   00000038   0x3E 0x20          DC8 3EH, 20H, 0
   \              0x00         
   \   0000003B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_NOSUPPORT</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x4E 0x4F    
   \              0x53 0x55    
   \              0x50 0x50    
   \              0x4F 0x52    
   \              0x54 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x54 0x42          DC8 "TBD: Read Temp and Pressure NOT IMPLEMENTED\015\012"
   \              0x44 0x3A    
   \              0x20 0x52    
   \              0x65 0x61    
   \              0x64 0x20    
   \              0x54 0x65    
   \              0x6D 0x70    
   \              0x20 0x61    
   \              0x6E 0x64    
   \              0x20 0x50    
   \              0x72 0x65    
   \              0x73 0x73    
   \              0x75 0x72    
   \              0x65 0x20    
   \              0x4E 0x4F    
   \              0x54 0x20    
   \              0x49 0x4D    
   \              0x50 0x4C    
   \              0x45 0x4D    
   \              0x45 0x4E    
   \              0x54 0x45    
   \              0x44 0x0D    
   \              0x0A 0x00    
   \   0000002E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x4E 0x4F          DC8 "NO Action...(0x00).\015\012"
   \              0x20 0x41    
   \              0x63 0x74    
   \              0x69 0x6F    
   \              0x6E 0x2E    
   \              0x2E 0x2E    
   \              0x28 0x30    
   \              0x78 0x30    
   \              0x30 0x29    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_4:
   \   00000000   0x54 0x45          DC8 "TEMP SENSOR...\015\012"
   \              0x4D 0x50    
   \              0x20 0x53    
   \              0x45 0x4E    
   \              0x53 0x4F    
   \              0x52 0x2E    
   \              0x2E 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_5:
   \   00000000   0x20 0x20          DC8 "     TEMP DATA: "
   \              0x20 0x20    
   \              0x20 0x54    
   \              0x45 0x4D    
   \              0x50 0x20    
   \              0x44 0x41    
   \              0x54 0x41    
   \              0x3A 0x20    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \   00000000   0x0D 0x0A          DC8 "\015\012"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_7:
   \   00000000   0x20 0x20          DC8 "     TEMP DATA(Decimal): %d\015\012"
   \              0x20 0x20    
   \              0x20 0x54    
   \              0x45 0x4D    
   \              0x50 0x20    
   \              0x44 0x41    
   \              0x54 0x41    
   \              0x28 0x44    
   \              0x65 0x63    
   \              0x69 0x6D    
   \              0x61 0x6C    
   \              0x29 0x3A    
   \              0x20 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_8:
   \   00000000   0x3C 0x53          DC8 "<STATUS>TEMPC:%s/%s//TEMPF:%s/%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x54 0x45    
   \              0x4D 0x50    
   \              0x43 0x3A    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x2F    
   \              0x2F 0x54    
   \              0x45 0x4D    
   \              0x50 0x46    
   \              0x3A 0x25    
   \              0x73 0x2F    
   \              0x25 0x73    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000002A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_9:
   \   00000000   0x20 0x20          DC8 "     TempC: %s/%s     TempF: %s/%s\015\012"
   \              0x20 0x20    
   \              0x20 0x54    
   \              0x65 0x6D    
   \              0x70 0x43    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x54 0x65    
   \              0x6D 0x70    
   \              0x46 0x3A    
   \              0x20 0x25    
   \              0x73 0x2F    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_10:
   \   00000000   0x35 0x56          DC8 "5V Power Plane Powered UP.\015\012"
   \              0x20 0x50    
   \              0x6F 0x77    
   \              0x65 0x72    
   \              0x20 0x50    
   \              0x6C 0x61    
   \              0x6E 0x65    
   \              0x20 0x50    
   \              0x6F 0x77    
   \              0x65 0x72    
   \              0x65 0x64    
   \              0x20 0x55    
   \              0x50 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_11:
   \   00000000   0x35 0x56          DC8 "5V Power Plane Powered DOWN.\015\012"
   \              0x20 0x50    
   \              0x6F 0x77    
   \              0x65 0x72    
   \              0x20 0x50    
   \              0x6C 0x61    
   \              0x6E 0x65    
   \              0x20 0x50    
   \              0x6F 0x77    
   \              0x65 0x72    
   \              0x65 0x64    
   \              0x20 0x44    
   \              0x4F 0x57    
   \              0x4E 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_12:
   \   00000000   0x45 0x52          DC8 "ERROR: Illegal 5V Power Plane Command.\015\012"
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x49    
   \              0x6C 0x6C    
   \              0x65 0x67    
   \              0x61 0x6C    
   \              0x20 0x35    
   \              0x56 0x20    
   \              0x50 0x6F    
   \              0x77 0x65    
   \              0x72 0x20    
   \              0x50 0x6C    
   \              0x61 0x6E    
   \              0x65 0x20    
   \              0x43 0x6F    
   \              0x6D 0x6D    
   \              0x61 0x6E    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_13:
   \   00000000   0x54 0x20          DC8 "T ERROR: Not a legal command.\015\012"
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x61    
   \              0x20 0x6C    
   \              0x65 0x67    
   \              0x61 0x6C    
   \              0x20 0x63    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_14:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_DRIVER:%04x</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x44    
   \              0x52 0x49    
   \              0x56 0x45    
   \              0x52 0x3A    
   \              0x25 0x30    
   \              0x34 0x78    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_15:
   \   00000000   0x44 0x72          DC8 "Driver Status: %04x\015\012"
   \              0x69 0x76    
   \              0x65 0x72    
   \              0x20 0x53    
   \              0x74 0x61    
   \              0x74 0x75    
   \              0x73 0x3A    
   \              0x20 0x25    
   \              0x30 0x34    
   \              0x78 0x0D    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_16:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_RESET_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x52    
   \              0x45 0x53    
   \              0x45 0x54    
   \              0x5F 0x41    
   \              0x43 0x4B    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_17:
   \   00000000   0x52 0x45          DC8 "RESET CALLED BUT NO RESPONSE!!\015\012"
   \              0x53 0x45    
   \              0x54 0x20    
   \              0x43 0x41    
   \              0x4C 0x4C    
   \              0x45 0x44    
   \              0x20 0x42    
   \              0x55 0x54    
   \              0x20 0x4E    
   \              0x4F 0x20    
   \              0x52 0x45    
   \              0x53 0x50    
   \              0x4F 0x4E    
   \              0x53 0x45    
   \              0x21 0x21    
   \              0x0D 0x0A    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_18:
   \   00000000   0x3C 0x53          DC8 "<STATUS>TF_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x54 0x46    
   \              0x5F 0x41    
   \              0x43 0x4B    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_19:
   \   00000000   0x46 0x6C          DC8 "Flash Frame Variables Reset to Factory Values.\015\012"
   \              0x61 0x73    
   \              0x68 0x20    
   \              0x46 0x72    
   \              0x61 0x6D    
   \              0x65 0x20    
   \              0x56 0x61    
   \              0x72 0x69    
   \              0x61 0x62    
   \              0x6C 0x65    
   \              0x73 0x20    
   \              0x52 0x65    
   \              0x73 0x65    
   \              0x74 0x20    
   \              0x74 0x6F    
   \              0x20 0x46    
   \              0x61 0x63    
   \              0x74 0x6F    
   \              0x72 0x79    
   \              0x20 0x56    
   \              0x61 0x6C    
   \              0x75 0x65    
   \              0x73 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000031   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_20:
   \   00000000   0x3C 0x53          DC8 "<STATUS>TL_ERROR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x54 0x4C    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_21:
   \   00000000   0x43 0x6F          DC8 "Code Locked for Programming!\015\012\015\012"
   \              0x64 0x65    
   \              0x20 0x4C    
   \              0x6F 0x63    
   \              0x6B 0x65    
   \              0x64 0x20    
   \              0x66 0x6F    
   \              0x72 0x20    
   \              0x50 0x72    
   \              0x6F 0x67    
   \              0x72 0x61    
   \              0x6D 0x6D    
   \              0x69 0x6E    
   \              0x67 0x21    
   \              0x0D 0x0A    
   \              0x0D 0x0A    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_22:
   \   00000000   0x20 0x20          DC8 "   HARD RESET NEEDED TO EXIT MODE\015\012"
   \              0x20 0x48    
   \              0x41 0x52    
   \              0x44 0x20    
   \              0x52 0x45    
   \              0x53 0x45    
   \              0x54 0x20    
   \              0x4E 0x45    
   \              0x45 0x44    
   \              0x45 0x44    
   \              0x20 0x54    
   \              0x4F 0x20    
   \              0x45 0x58    
   \              0x49 0x54    
   \              0x20 0x4D    
   \              0x4F 0x44    
   \              0x45 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_23:
   \   00000000   0x25 0x73          DC8 "%s %s"
   \              0x20 0x25    
   \              0x73 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_24:
   \   00000000   0x54 0x53          DC8 "TS: %s\015\012"
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_25:
   \   00000000   0x4E 0x4F          DC8 "NO ERROR FOUND.\015\012"
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x20 0x46    
   \              0x4F 0x55    
   \              0x4E 0x44    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_26:
   \   00000000   0x45 0x52          DC8 "ERROR: ILLEGAL S-Record.\015\012"
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x49    
   \              0x4C 0x4C    
   \              0x45 0x47    
   \              0x41 0x4C    
   \              0x20 0x53    
   \              0x2D 0x52    
   \              0x65 0x63    
   \              0x6F 0x72    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_27:
   \   00000000   0x45 0x52          DC8 "ERROR: ILLEGAL Record.\015\012"
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x49    
   \              0x4C 0x4C    
   \              0x45 0x47    
   \              0x41 0x4C    
   \              0x20 0x52    
   \              0x65 0x63    
   \              0x6F 0x72    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_28:
   \   00000000   0x45 0x52          DC8 "ERROR: Reserved S-Record Type.\015\012"
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x52    
   \              0x65 0x73    
   \              0x65 0x72    
   \              0x76 0x65    
   \              0x64 0x20    
   \              0x53 0x2D    
   \              0x52 0x65    
   \              0x63 0x6F    
   \              0x72 0x64    
   \              0x20 0x54    
   \              0x79 0x70    
   \              0x65 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_29:
   \   00000000   0x45 0x52          DC8 "ERROR: Illegal Byte Count.\015\012"
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x49    
   \              0x6C 0x6C    
   \              0x65 0x67    
   \              0x61 0x6C    
   \              0x20 0x42    
   \              0x79 0x74    
   \              0x65 0x20    
   \              0x43 0x6F    
   \              0x75 0x6E    
   \              0x74 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_30:
   \   00000000   0x45 0x52          DC8 "ERROR: Illegal Byte Data.\015\012"
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x49    
   \              0x6C 0x6C    
   \              0x65 0x67    
   \              0x61 0x6C    
   \              0x20 0x42    
   \              0x79 0x74    
   \              0x65 0x20    
   \              0x44 0x61    
   \              0x74 0x61    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_31:
   \   00000000   0x45 0x52          DC8 "ERROR: Checksum did not match data.\015\012"
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x43    
   \              0x68 0x65    
   \              0x63 0x6B    
   \              0x73 0x75    
   \              0x6D 0x20    
   \              0x64 0x69    
   \              0x64 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x6D 0x61    
   \              0x74 0x63    
   \              0x68 0x20    
   \              0x64 0x61    
   \              0x74 0x61    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_32:
   \   00000000   0x52 0x65          DC8 52H, 65H, 63H, 6FH, 72H, 64H, 20H, 54H
   \              0x63 0x6F    
   \              0x72 0x64    
   \              0x20 0x54    
   \   00000008   0x79 0x70          DC8 79H, 70H, 65H, 3AH, 20H, 53H, 30H, 5FH
   \              0x65 0x3A    
   \              0x20 0x53    
   \              0x30 0x5F    
   \   00000010   0x48 0x45          DC8 48H, 45H, 41H, 44H, 45H, 52H, 3AH, 20H
   \              0x41 0x44    
   \              0x45 0x52    
   \              0x3A 0x20    
   \   00000018   0x56 0x65          DC8 56H, 65H, 6EH, 64H, 6FH, 72H, 20H, 73H
   \              0x6E 0x64    
   \              0x6F 0x72    
   \              0x20 0x73    
   \   00000020   0x70 0x65          DC8 70H, 65H, 63H, 69H, 66H, 69H, 63H, 20H
   \              0x63 0x69    
   \              0x66 0x69    
   \              0x63 0x20    
   \   00000028   0x41 0x53          DC8 41H, 53H, 43H, 49H, 49H, 20H, 74H, 65H
   \              0x43 0x49    
   \              0x49 0x20    
   \              0x74 0x65    
   \   00000030   0x78 0x74          DC8 78H, 74H, 2EH, 0DH, 0AH, 0
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000036   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_33:
   \   00000000   0x52 0x65          DC8 52H, 65H, 63H, 6FH, 72H, 64H, 20H, 54H
   \              0x63 0x6F    
   \              0x72 0x64    
   \              0x20 0x54    
   \   00000008   0x79 0x70          DC8 79H, 70H, 65H, 3AH, 20H, 53H, 31H, 5FH
   \              0x65 0x3A    
   \              0x20 0x53    
   \              0x31 0x5F    
   \   00000010   0x44 0x41          DC8 44H, 41H, 54H, 41H, 3AH, 20H, 44H, 61H
   \              0x54 0x41    
   \              0x3A 0x20    
   \              0x44 0x61    
   \   00000018   0x74 0x61          DC8 74H, 61H, 20H, 74H, 68H, 61H, 74H, 20H
   \              0x20 0x74    
   \              0x68 0x61    
   \              0x74 0x20    
   \   00000020   0x73 0x74          DC8 73H, 74H, 61H, 72H, 74H, 73H, 20H, 61H
   \              0x61 0x72    
   \              0x74 0x73    
   \              0x20 0x61    
   \   00000028   0x74 0x20          DC8 74H, 20H, 74H, 68H, 65H, 20H, 31H, 36H
   \              0x74 0x68    
   \              0x65 0x20    
   \              0x31 0x36    
   \   00000030   0x2D 0x62          DC8 2DH, 62H, 69H, 74H, 20H, 61H, 64H, 64H
   \              0x69 0x74    
   \              0x20 0x61    
   \              0x64 0x64    
   \   00000038   0x72 0x65          DC8 72H, 65H, 73H, 73H, 20H, 66H, 69H, 65H
   \              0x73 0x73    
   \              0x20 0x66    
   \              0x69 0x65    
   \   00000040   0x6C 0x64          DC8 6CH, 64H, 2EH, 0DH, 0AH, 0
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000046   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_34:
   \   00000000   0x52 0x65          DC8 52H, 65H, 63H, 6FH, 72H, 64H, 20H, 54H
   \              0x63 0x6F    
   \              0x72 0x64    
   \              0x20 0x54    
   \   00000008   0x79 0x70          DC8 79H, 70H, 65H, 3AH, 20H, 53H, 32H, 5FH
   \              0x65 0x3A    
   \              0x20 0x53    
   \              0x32 0x5F    
   \   00000010   0x44 0x41          DC8 44H, 41H, 54H, 41H, 3AH, 20H, 44H, 61H
   \              0x54 0x41    
   \              0x3A 0x20    
   \              0x44 0x61    
   \   00000018   0x74 0x61          DC8 74H, 61H, 20H, 74H, 68H, 61H, 74H, 20H
   \              0x20 0x74    
   \              0x68 0x61    
   \              0x74 0x20    
   \   00000020   0x73 0x74          DC8 73H, 74H, 61H, 72H, 74H, 73H, 20H, 61H
   \              0x61 0x72    
   \              0x74 0x73    
   \              0x20 0x61    
   \   00000028   0x74 0x20          DC8 74H, 20H, 74H, 68H, 65H, 20H, 32H, 34H
   \              0x74 0x68    
   \              0x65 0x20    
   \              0x32 0x34    
   \   00000030   0x2D 0x62          DC8 2DH, 62H, 69H, 74H, 20H, 61H, 64H, 64H
   \              0x69 0x74    
   \              0x20 0x61    
   \              0x64 0x64    
   \   00000038   0x72 0x65          DC8 72H, 65H, 73H, 73H, 20H, 66H, 69H, 65H
   \              0x73 0x73    
   \              0x20 0x66    
   \              0x69 0x65    
   \   00000040   0x6C 0x64          DC8 6CH, 64H, 2EH, 0DH, 0AH, 0
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000046   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_35:
   \   00000000   0x52 0x65          DC8 52H, 65H, 63H, 6FH, 72H, 64H, 20H, 54H
   \              0x63 0x6F    
   \              0x72 0x64    
   \              0x20 0x54    
   \   00000008   0x79 0x70          DC8 79H, 70H, 65H, 3AH, 20H, 53H, 33H, 5FH
   \              0x65 0x3A    
   \              0x20 0x53    
   \              0x33 0x5F    
   \   00000010   0x44 0x41          DC8 44H, 41H, 54H, 41H, 3AH, 20H, 44H, 61H
   \              0x54 0x41    
   \              0x3A 0x20    
   \              0x44 0x61    
   \   00000018   0x74 0x61          DC8 74H, 61H, 20H, 74H, 68H, 61H, 74H, 20H
   \              0x20 0x74    
   \              0x68 0x61    
   \              0x74 0x20    
   \   00000020   0x73 0x74          DC8 73H, 74H, 61H, 72H, 74H, 73H, 20H, 61H
   \              0x61 0x72    
   \              0x74 0x73    
   \              0x20 0x61    
   \   00000028   0x74 0x20          DC8 74H, 20H, 74H, 68H, 65H, 20H, 33H, 32H
   \              0x74 0x68    
   \              0x65 0x20    
   \              0x33 0x32    
   \   00000030   0x2D 0x62          DC8 2DH, 62H, 69H, 74H, 20H, 61H, 64H, 64H
   \              0x69 0x74    
   \              0x20 0x61    
   \              0x64 0x64    
   \   00000038   0x72 0x65          DC8 72H, 65H, 73H, 73H, 20H, 66H, 69H, 65H
   \              0x73 0x73    
   \              0x20 0x66    
   \              0x69 0x65    
   \   00000040   0x6C 0x64          DC8 6CH, 64H, 2EH, 0DH, 0AH, 0
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000046   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_36:
   \   00000000   0x52 0x65          DC8 "Record Type: S4_RESERVED\015\012"
   \              0x63 0x6F    
   \              0x72 0x64    
   \              0x20 0x54    
   \              0x79 0x70    
   \              0x65 0x3A    
   \              0x20 0x53    
   \              0x34 0x5F    
   \              0x52 0x45    
   \              0x53 0x45    
   \              0x52 0x56    
   \              0x45 0x44    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_37:
   \   00000000   0x52 0x65          DC8 52H, 65H, 63H, 6FH, 72H, 64H, 20H, 54H
   \              0x63 0x6F    
   \              0x72 0x64    
   \              0x20 0x54    
   \   00000008   0x79 0x70          DC8 79H, 70H, 65H, 3AH, 20H, 53H, 35H, 5FH
   \              0x65 0x3A    
   \              0x20 0x53    
   \              0x35 0x5F    
   \   00000010   0x43 0x4F          DC8 43H, 4FH, 55H, 4EH, 54H, 3AH, 20H, 31H
   \              0x55 0x4E    
   \              0x54 0x3A    
   \              0x20 0x31    
   \   00000018   0x36 0x2D          DC8 36H, 2DH, 62H, 69H, 74H, 20H, 63H, 6FH
   \              0x62 0x69    
   \              0x74 0x20    
   \              0x63 0x6F    
   \   00000020   0x75 0x6E          DC8 75H, 6EH, 74H, 20H, 6FH, 66H, 20H, 53H
   \              0x74 0x20    
   \              0x6F 0x66    
   \              0x20 0x53    
   \   00000028   0x31 0x20          DC8 31H, 20H, 2FH, 20H, 53H, 32H, 20H, 2FH
   \              0x2F 0x20    
   \              0x53 0x32    
   \              0x20 0x2F    
   \   00000030   0x20 0x53          DC8 20H, 53H, 33H, 20H, 72H, 65H, 63H, 6FH
   \              0x33 0x20    
   \              0x72 0x65    
   \              0x63 0x6F    
   \   00000038   0x72 0x64          DC8 72H, 64H, 73H, 2EH, 0DH, 0AH, 0
   \              0x73 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000003F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_38:
   \   00000000   0x52 0x65          DC8 52H, 65H, 63H, 6FH, 72H, 64H, 20H, 54H
   \              0x63 0x6F    
   \              0x72 0x64    
   \              0x20 0x54    
   \   00000008   0x79 0x70          DC8 79H, 70H, 65H, 3AH, 20H, 53H, 36H, 5FH
   \              0x65 0x3A    
   \              0x20 0x53    
   \              0x36 0x5F    
   \   00000010   0x43 0x4F          DC8 43H, 4FH, 55H, 4EH, 54H, 3AH, 20H, 32H
   \              0x55 0x4E    
   \              0x54 0x3A    
   \              0x20 0x32    
   \   00000018   0x34 0x2D          DC8 34H, 2DH, 62H, 69H, 74H, 20H, 63H, 6FH
   \              0x62 0x69    
   \              0x74 0x20    
   \              0x63 0x6F    
   \   00000020   0x75 0x6E          DC8 75H, 6EH, 74H, 20H, 6FH, 66H, 20H, 53H
   \              0x74 0x20    
   \              0x6F 0x66    
   \              0x20 0x53    
   \   00000028   0x31 0x20          DC8 31H, 20H, 2FH, 20H, 53H, 32H, 20H, 2FH
   \              0x2F 0x20    
   \              0x53 0x32    
   \              0x20 0x2F    
   \   00000030   0x20 0x53          DC8 20H, 53H, 33H, 20H, 72H, 65H, 63H, 6FH
   \              0x33 0x20    
   \              0x72 0x65    
   \              0x63 0x6F    
   \   00000038   0x72 0x64          DC8 72H, 64H, 73H, 2EH, 0DH, 0AH, 0
   \              0x73 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000003F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_39:
   \   00000000   0x52 0x65          DC8 52H, 65H, 63H, 6FH, 72H, 64H, 20H, 54H
   \              0x63 0x6F    
   \              0x72 0x64    
   \              0x20 0x54    
   \   00000008   0x79 0x70          DC8 79H, 70H, 65H, 3AH, 20H, 53H, 37H, 5FH
   \              0x65 0x3A    
   \              0x20 0x53    
   \              0x37 0x5F    
   \   00000010   0x53 0x54          DC8 53H, 54H, 41H, 52H, 54H, 3AH, 20H, 53H
   \              0x41 0x52    
   \              0x54 0x3A    
   \              0x20 0x53    
   \   00000018   0x74 0x61          DC8 74H, 61H, 72H, 74H, 69H, 6EH, 67H, 20H
   \              0x72 0x74    
   \              0x69 0x6E    
   \              0x67 0x20    
   \   00000020   0x65 0x78          DC8 65H, 78H, 65H, 63H, 75H, 74H, 69H, 6FH
   \              0x65 0x63    
   \              0x75 0x74    
   \              0x69 0x6F    
   \   00000028   0x6E 0x20          DC8 6EH, 20H, 6CH, 6FH, 63H, 61H, 74H, 69H
   \              0x6C 0x6F    
   \              0x63 0x61    
   \              0x74 0x69    
   \   00000030   0x6F 0x6E          DC8 6FH, 6EH, 20H, 61H, 74H, 20H, 61H, 20H
   \              0x20 0x61    
   \              0x74 0x20    
   \              0x61 0x20    
   \   00000038   0x33 0x32          DC8 33H, 32H, 2DH, 62H, 69H, 74H, 20H, 61H
   \              0x2D 0x62    
   \              0x69 0x74    
   \              0x20 0x61    
   \   00000040   0x64 0x64          DC8 64H, 64H, 72H, 65H, 73H, 73H, 2EH, 0DH
   \              0x72 0x65    
   \              0x73 0x73    
   \              0x2E 0x0D    
   \   00000048   0x0A 0x00          DC8 0AH, 0
   \   0000004A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_40:
   \   00000000   0x52 0x65          DC8 52H, 65H, 63H, 6FH, 72H, 64H, 20H, 54H
   \              0x63 0x6F    
   \              0x72 0x64    
   \              0x20 0x54    
   \   00000008   0x79 0x70          DC8 79H, 70H, 65H, 3AH, 20H, 53H, 38H, 5FH
   \              0x65 0x3A    
   \              0x20 0x53    
   \              0x38 0x5F    
   \   00000010   0x53 0x54          DC8 53H, 54H, 41H, 52H, 54H, 3AH, 20H, 53H
   \              0x41 0x52    
   \              0x54 0x3A    
   \              0x20 0x53    
   \   00000018   0x74 0x61          DC8 74H, 61H, 72H, 74H, 69H, 6EH, 67H, 20H
   \              0x72 0x74    
   \              0x69 0x6E    
   \              0x67 0x20    
   \   00000020   0x65 0x78          DC8 65H, 78H, 65H, 63H, 75H, 74H, 69H, 6FH
   \              0x65 0x63    
   \              0x75 0x74    
   \              0x69 0x6F    
   \   00000028   0x6E 0x20          DC8 6EH, 20H, 6CH, 6FH, 63H, 61H, 74H, 69H
   \              0x6C 0x6F    
   \              0x63 0x61    
   \              0x74 0x69    
   \   00000030   0x6F 0x6E          DC8 6FH, 6EH, 20H, 61H, 74H, 20H, 61H, 20H
   \              0x20 0x61    
   \              0x74 0x20    
   \              0x61 0x20    
   \   00000038   0x32 0x34          DC8 32H, 34H, 2DH, 62H, 69H, 74H, 20H, 61H
   \              0x2D 0x62    
   \              0x69 0x74    
   \              0x20 0x61    
   \   00000040   0x64 0x64          DC8 64H, 64H, 72H, 65H, 73H, 73H, 2EH, 0DH
   \              0x72 0x65    
   \              0x73 0x73    
   \              0x2E 0x0D    
   \   00000048   0x0A 0x00          DC8 0AH, 0
   \   0000004A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_41:
   \   00000000   0x52 0x65          DC8 52H, 65H, 63H, 6FH, 72H, 64H, 20H, 54H
   \              0x63 0x6F    
   \              0x72 0x64    
   \              0x20 0x54    
   \   00000008   0x79 0x70          DC8 79H, 70H, 65H, 3AH, 20H, 53H, 39H, 5FH
   \              0x65 0x3A    
   \              0x20 0x53    
   \              0x39 0x5F    
   \   00000010   0x53 0x54          DC8 53H, 54H, 41H, 52H, 54H, 3AH, 20H, 53H
   \              0x41 0x52    
   \              0x54 0x3A    
   \              0x20 0x53    
   \   00000018   0x74 0x61          DC8 74H, 61H, 72H, 74H, 69H, 6EH, 67H, 20H
   \              0x72 0x74    
   \              0x69 0x6E    
   \              0x67 0x20    
   \   00000020   0x65 0x78          DC8 65H, 78H, 65H, 63H, 75H, 74H, 69H, 6FH
   \              0x65 0x63    
   \              0x75 0x74    
   \              0x69 0x6F    
   \   00000028   0x6E 0x20          DC8 6EH, 20H, 6CH, 6FH, 63H, 61H, 74H, 69H
   \              0x6C 0x6F    
   \              0x63 0x61    
   \              0x74 0x69    
   \   00000030   0x6F 0x6E          DC8 6FH, 6EH, 20H, 61H, 74H, 20H, 61H, 20H
   \              0x20 0x61    
   \              0x74 0x20    
   \              0x61 0x20    
   \   00000038   0x31 0x36          DC8 31H, 36H, 2DH, 62H, 69H, 74H, 20H, 61H
   \              0x2D 0x62    
   \              0x69 0x74    
   \              0x20 0x61    
   \   00000040   0x64 0x64          DC8 64H, 64H, 72H, 65H, 73H, 73H, 2EH, 0DH
   \              0x72 0x65    
   \              0x73 0x73    
   \              0x2E 0x0D    
   \   00000048   0x0A 0x00          DC8 0AH, 0
   \   0000004A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_42:
   \   00000000   0x52 0x65          DC8 "Record Type: UNKNOWN.\015\012"
   \              0x63 0x6F    
   \              0x72 0x64    
   \              0x20 0x54    
   \              0x79 0x70    
   \              0x65 0x3A    
   \              0x20 0x55    
   \              0x4E 0x4B    
   \              0x4E 0x4F    
   \              0x57 0x4E    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_43:
   \   00000000   0x42 0x79          DC8 "Byte Count: %08x\015\012"
   \              0x74 0x65    
   \              0x20 0x43    
   \              0x6F 0x75    
   \              0x6E 0x74    
   \              0x3A 0x20    
   \              0x25 0x30    
   \              0x38 0x78    
   \              0x0D 0x0A    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_44:
   \   00000000   0x41 0x64          DC8 "Address: %08x\015\012"
   \              0x64 0x72    
   \              0x65 0x73    
   \              0x73 0x3A    
   \              0x20 0x25    
   \              0x30 0x38    
   \              0x78 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_45:
   \   00000000   0x48 0x65          DC8 "Header: %s\015\012"
   \              0x61 0x64    
   \              0x65 0x72    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 1
   \   00000000   0x00               DC8 ""

   \                                 In section .rodata, align 4
   \                     ?_47:
   \   00000000   0x25 0x30          DC8 "%02x "
   \              0x32 0x78    
   \              0x20 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_48:
   \   00000000   0x43 0x68          DC8 "Checksum: %02x\015\012"
   \              0x65 0x63    
   \              0x6B 0x73    
   \              0x75 0x6D    
   \              0x3A 0x20    
   \              0x25 0x30    
   \              0x32 0x78    
   \              0x0D 0x0A    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_49:
   \   00000000   0x54 0x53          DC8 "TS SYNTAX ERROR: Too many parameters.\015\012"
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x54    
   \              0x6F 0x6F    
   \              0x20 0x6D    
   \              0x61 0x6E    
   \              0x79 0x20    
   \              0x70 0x61    
   \              0x72 0x61    
   \              0x6D 0x65    
   \              0x74 0x65    
   \              0x72 0x73    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_50:
   \   00000000   0x45 0x52          DC8 "ERROR: Not a legal command.\015\012"
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x61    
   \              0x20 0x6C    
   \              0x65 0x67    
   \              0x61 0x6C    
   \              0x20 0x63    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_51:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: BERR: Bus Error reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x45 0x52    
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x75 0x73    
   \              0x20 0x45    
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x20 0x72    
   \              0x65 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_52:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: ARLO: Arbitration lost reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x41    
   \              0x52 0x4C    
   \              0x4F 0x3A    
   \              0x20 0x41    
   \              0x72 0x62    
   \              0x69 0x74    
   \              0x72 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x6C    
   \              0x6F 0x73    
   \              0x74 0x20    
   \              0x72 0x65    
   \              0x70 0x6F    
   \              0x72 0x74    
   \              0x65 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   0000002E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_53:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: AF: Acknowledge failure reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x41    
   \              0x46 0x3A    
   \              0x20 0x41    
   \              0x63 0x6B    
   \              0x6E 0x6F    
   \              0x77 0x6C    
   \              0x65 0x64    
   \              0x67 0x65    
   \              0x20 0x66    
   \              0x61 0x69    
   \              0x6C 0x75    
   \              0x72 0x65    
   \              0x20 0x72    
   \              0x65 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_54:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: OVR: Overrun/Underrun reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4F    
   \              0x56 0x52    
   \              0x3A 0x20    
   \              0x4F 0x76    
   \              0x65 0x72    
   \              0x72 0x75    
   \              0x6E 0x2F    
   \              0x55 0x6E    
   \              0x64 0x65    
   \              0x72 0x72    
   \              0x75 0x6E    
   \              0x20 0x72    
   \              0x65 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_55:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: DMA: DMA Error reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x44    
   \              0x4D 0x41    
   \              0x3A 0x20    
   \              0x44 0x4D    
   \              0x41 0x20    
   \              0x45 0x72    
   \              0x72 0x6F    
   \              0x72 0x20    
   \              0x72 0x65    
   \              0x70 0x6F    
   \              0x72 0x74    
   \              0x65 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_56:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: TIMEOUT: Timeout Error reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x54    
   \              0x49 0x4D    
   \              0x45 0x4F    
   \              0x55 0x54    
   \              0x3A 0x20    
   \              0x54 0x69    
   \              0x6D 0x65    
   \              0x6F 0x75    
   \              0x74 0x20    
   \              0x45 0x72    
   \              0x72 0x6F    
   \              0x72 0x20    
   \              0x72 0x65    
   \              0x70 0x6F    
   \              0x72 0x74    
   \              0x65 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   0000002E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_57:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: Unknown Error reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x55    
   \              0x6E 0x6B    
   \              0x6E 0x6F    
   \              0x77 0x6E    
   \              0x20 0x45    
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x20 0x72    
   \              0x65 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_58:
   \   00000000   0x49 0x32          DC8 "I2C BUSY: I2C reported BUSY error.\015\012"
   \              0x43 0x20    
   \              0x42 0x55    
   \              0x53 0x59    
   \              0x3A 0x20    
   \              0x49 0x32    
   \              0x43 0x20    
   \              0x72 0x65    
   \              0x70 0x6F    
   \              0x72 0x74    
   \              0x65 0x64    
   \              0x20 0x42    
   \              0x55 0x53    
   \              0x59 0x20    
   \              0x65 0x72    
   \              0x72 0x6F    
   \              0x72 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_59:
   \   00000000   0x49 0x32          DC8 "I2C TIMEOUT: I2C reported TIMEOUT.\015\012"
   \              0x43 0x20    
   \              0x54 0x49    
   \              0x4D 0x45    
   \              0x4F 0x55    
   \              0x54 0x3A    
   \              0x20 0x49    
   \              0x32 0x43    
   \              0x20 0x72    
   \              0x65 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x20    
   \              0x54 0x49    
   \              0x4D 0x45    
   \              0x4F 0x55    
   \              0x54 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_60:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: I2C reported unnown error.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x49    
   \              0x32 0x43    
   \              0x20 0x72    
   \              0x65 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x20    
   \              0x75 0x6E    
   \              0x6E 0x6F    
   \              0x77 0x6E    
   \              0x20 0x65    
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_61:
   \   00000000   0x0D 0x0A          DC8 "\015\012\015\012> "
   \              0x0D 0x0A    
   \              0x3E 0x20    
   \              0x00         
   \   00000007   0x00               DC8 0
    633          /************************ (C) COPYRIGHT WeatherCloud *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
     440   Parse_BootString
       440   -> BGM111_Transmit
       440   -> Get_DriverStatus
       440   -> HAL_Delay
       440   -> HAL_NVIC_SystemReset
       440   -> MX_I2C1_Reset
       440   -> Parse_srecord
       440   -> RoadBrd_I2C_GetError
       440   -> RoadBrd_ReadTemp
       440   -> RoadBrd_ReadTemp_Scaled
       440   -> RoadBrd_UART_Transmit
       440   -> RoadBrd_WWDG_InitializeFrmFlash
       440   -> RoadBrd_gpio_Off
       440   -> RoadBrd_gpio_On
       440   -> sprintf
       440   -> sscanf
       440   -> strcat
       440   -> strcpy
       440   -> strlen
       0   Set_Boot_Bypass
       0   Tst_Boot_Bypass


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_10
       4  ??DataTable2_11
       4  ??DataTable2_12
       4  ??DataTable2_13
       4  ??DataTable2_14
       4  ??DataTable2_15
       4  ??DataTable2_16
       4  ??DataTable2_17
       4  ??DataTable2_18
       4  ??DataTable2_19
       4  ??DataTable2_2
       4  ??DataTable2_20
       4  ??DataTable2_21
       4  ??DataTable2_22
       4  ??DataTable2_23
       4  ??DataTable2_24
       4  ??DataTable2_25
       4  ??DataTable2_26
       4  ??DataTable2_27
       4  ??DataTable2_28
       4  ??DataTable2_29
       4  ??DataTable2_3
       4  ??DataTable2_30
       4  ??DataTable2_31
       4  ??DataTable2_32
       4  ??DataTable2_33
       4  ??DataTable2_34
       4  ??DataTable2_35
       4  ??DataTable2_36
       4  ??DataTable2_37
       4  ??DataTable2_38
       4  ??DataTable2_39
       4  ??DataTable2_4
       4  ??DataTable2_40
       4  ??DataTable2_41
       4  ??DataTable2_42
       4  ??DataTable2_43
       4  ??DataTable2_44
       4  ??DataTable2_45
       4  ??DataTable2_46
       4  ??DataTable2_47
       4  ??DataTable2_48
       4  ??DataTable2_49
       4  ??DataTable2_5
       4  ??DataTable2_50
       4  ??DataTable2_51
       4  ??DataTable2_52
       4  ??DataTable2_53
       4  ??DataTable2_54
       4  ??DataTable2_55
       4  ??DataTable2_56
       4  ??DataTable2_57
       4  ??DataTable2_58
       4  ??DataTable2_59
       4  ??DataTable2_6
       4  ??DataTable2_60
       4  ??DataTable2_61
       4  ??DataTable2_62
       4  ??DataTable2_7
       4  ??DataTable2_8
       4  ??DataTable2_9
      60  ?_0
      32  ?_1
      32  ?_10
      32  ?_11
      44  ?_12
      32  ?_13
      32  ?_14
      24  ?_15
      32  ?_16
      36  ?_17
      24  ?_18
      52  ?_19
      48  ?_2
      28  ?_20
      36  ?_21
      36  ?_22
       8  ?_23
      12  ?_24
      20  ?_25
      28  ?_26
      28  ?_27
      36  ?_28
      32  ?_29
      24  ?_3
      28  ?_30
      40  ?_31
      56  ?_32
      72  ?_33
      72  ?_34
      72  ?_35
      28  ?_36
      64  ?_37
      64  ?_38
      76  ?_39
      20  ?_4
      76  ?_40
      76  ?_41
      24  ?_42
      20  ?_43
      16  ?_44
      16  ?_45
       1  ?_46
       8  ?_47
      20  ?_48
      40  ?_49
      20  ?_5
      32  ?_50
      40  ?_51
      48  ?_52
      48  ?_53
      48  ?_54
      40  ?_55
      48  ?_56
      40  ?_57
      40  ?_58
      40  ?_59
       4  ?_6
      40  ?_60
       8  ?_61
      32  ?_7
      44  ?_8
      40  ?_9
       1  Boot_Bypass
    1794  Parse_BootString
       8  Set_Boot_Bypass
       6  Tst_Boot_Bypass

 
     1 byte  in section .bss
 2 269 bytes in section .rodata
 2 060 bytes in section .text
 
 2 060 bytes of CODE  memory
 2 269 bytes of CONST memory
     1 byte  of DATA  memory

Errors: none
Warnings: none
