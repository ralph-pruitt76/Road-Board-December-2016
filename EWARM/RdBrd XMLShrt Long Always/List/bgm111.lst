###############################################################################
#
# IAR ANSI C/C++ Compiler V7.60.2.11341/W32 for ARM       12/Sep/2017  11:32:02
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\bgm111.c
#    Command line =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\bgm111.c
#        -D USE_HAL_DRIVER -D STM32L152xE -D USE_STM32L1XX_NUCLEO -D ASCII -D
#        REV_L -D LONG_DELAY -D XML_SHRT -lCN
#        "D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\RdBrd
#        XMLShrt Long Always\List" -o
#        "D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\RdBrd
#        XMLShrt Long Always\Obj" --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_clustering --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.4\arm\INC\c\DLib_Config_Full.h" -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/STM32L1xx_HAL_Driver/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/STM32L1xx_HAL_Driver/Inc/Legacy\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/BSP/STM32L1xx_Nucleo\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/portable/IAR/ARM_CM3\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Core/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/CMSIS/Include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/CMSIS/Device/ST/STM32L1xx/Include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\..\Middlewares\Third_Party\BgLib\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.4\arm\CMSIS\Include\"
#    Locale       =  English_United States.1252
#    List file    =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\RdBrd
#        XMLShrt Long Always\List\bgm111.lst
#    Object file  =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\RdBrd
#        XMLShrt Long Always\Obj\bgm111.o
#
###############################################################################

D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\bgm111.c
      1          /* SiLabs BGM111 module access implementation using BGLib */
      2          
      3          #include "bgm111.h"
      4          #include <string.h>

   \                                 In section .text, align 2
   \   __intrinsic __nounwind __interwork __softfp char *strstr(char const *, char const *)
   \                     strstr: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0029             MOVS     R1,R5
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0x.... 0x....      BL       __iar_Strstr
   \   0000000E   0xBD32             POP      {R1,R4,R5,PC}    ;; return
      5          #include "gecko_bglib.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp struct gecko_msg_le_gap_set_mode_rsp_t *gecko_cmd_le_gap_set_mode(uint8, uint8)
   \                     gecko_cmd_le_gap_set_mode: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable23
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0x7104             STRB     R4,[R0, #+4]
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable23
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0x7145             STRB     R5,[R0, #+5]
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable23_1  ;; 0x1030220
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable23
   \   0000001E   0x6809             LDR      R1,[R1, #+0]
   \   00000020   0x6008             STR      R0,[R1, #+0]
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable23
   \   00000026   0x6800             LDR      R0,[R0, #+0]
   \   00000028   0x1D01             ADDS     R1,R0,#+4
   \   0000002A   0x.... 0x....      LDR.W    R0,??DataTable23
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0x6800             LDR      R0,[R0, #+0]
   \   00000032   0x.... 0x....      BL       gecko_handle_command
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable23_2
   \   0000003A   0x6800             LDR      R0,[R0, #+0]
   \   0000003C   0x1D00             ADDS     R0,R0,#+4
   \   0000003E   0xBD32             POP      {R1,R4,R5,PC}    ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp struct gecko_msg_gatt_server_write_attribute_value_rsp_t *gecko_cmd_gatt_server_write_attribute_value(uint16, uint16, uint8, uint8 const *)
   \                     gecko_cmd_gatt_server_write_attribute_value: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
   \   0000000A   0x001F             MOVS     R7,R3
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable23
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0x8084             STRH     R4,[R0, #+4]
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable23
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0x80C5             STRH     R5,[R0, #+6]
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable23
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0x7206             STRB     R6,[R0, #+8]
   \   00000024   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable23
   \   0000002A   0x6800             LDR      R0,[R0, #+0]
   \   0000002C   0xF110 0x0809      ADDS     R8,R0,#+9
   \   00000030   0x0032             MOVS     R2,R6
   \   00000032   0x0039             MOVS     R1,R7
   \   00000034   0x4640             MOV      R0,R8
   \   00000036   0x.... 0x....      BL       __aeabi_memcpy
   \   0000003A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable23_3  ;; 0x20a0520
   \   00000040   0xEB10 0x2006      ADDS     R0,R0,R6, LSL #+8
   \   00000044   0x.... 0x....      LDR.W    R1,??DataTable23
   \   00000048   0x6809             LDR      R1,[R1, #+0]
   \   0000004A   0x6008             STR      R0,[R1, #+0]
   \   0000004C   0x.... 0x....      LDR.W    R0,??DataTable23
   \   00000050   0x6800             LDR      R0,[R0, #+0]
   \   00000052   0x1D01             ADDS     R1,R0,#+4
   \   00000054   0x.... 0x....      LDR.W    R0,??DataTable23
   \   00000058   0x6800             LDR      R0,[R0, #+0]
   \   0000005A   0x6800             LDR      R0,[R0, #+0]
   \   0000005C   0x.... 0x....      BL       gecko_handle_command
   \   00000060   0x.... 0x....      LDR.W    R0,??DataTable23_2
   \   00000064   0x6800             LDR      R0,[R0, #+0]
   \   00000066   0x1D00             ADDS     R0,R0,#+4
   \   00000068   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp struct gecko_msg_gatt_server_send_characteristic_notification_rsp_t *gecko_cmd_gatt_server_send_characteristic_notification(uint8, uint16, uint8, uint8 const *)
   \                     gecko_cmd_gatt_server_send_characteristic_notification: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
   \   0000000A   0x001F             MOVS     R7,R3
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable23
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0x7104             STRB     R4,[R0, #+4]
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable23
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0xF8A0 0x5005      STRH     R5,[R0, #+5]
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable23
   \   00000022   0x6800             LDR      R0,[R0, #+0]
   \   00000024   0x71C6             STRB     R6,[R0, #+7]
   \   00000026   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable23
   \   0000002C   0x6800             LDR      R0,[R0, #+0]
   \   0000002E   0xF110 0x0808      ADDS     R8,R0,#+8
   \   00000032   0x0032             MOVS     R2,R6
   \   00000034   0x0039             MOVS     R1,R7
   \   00000036   0x4640             MOV      R0,R8
   \   00000038   0x.... 0x....      BL       __aeabi_memcpy
   \   0000003C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable23_4  ;; 0x50a0420
   \   00000042   0xEB10 0x2006      ADDS     R0,R0,R6, LSL #+8
   \   00000046   0x.... 0x....      LDR.W    R1,??DataTable23
   \   0000004A   0x6809             LDR      R1,[R1, #+0]
   \   0000004C   0x6008             STR      R0,[R1, #+0]
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable23
   \   00000052   0x6800             LDR      R0,[R0, #+0]
   \   00000054   0x1D01             ADDS     R1,R0,#+4
   \   00000056   0x.... 0x....      LDR.W    R0,??DataTable23
   \   0000005A   0x6800             LDR      R0,[R0, #+0]
   \   0000005C   0x6800             LDR      R0,[R0, #+0]
   \   0000005E   0x.... 0x....      BL       gecko_handle_command
   \   00000062   0x.... 0x....      LDR.W    R0,??DataTable23_2
   \   00000066   0x6800             LDR      R0,[R0, #+0]
   \   00000068   0x1D00             ADDS     R0,R0,#+4
   \   0000006A   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
      6          #include "stm32l1xx_hal.h"
      7          #include "usart.h"
      8          #include "gpio.h"
      9          #include "ErrorCodes.h"
     10          #include "i2c.h"
     11          #include "wwdg.h"
     12          #include "tim.h"
     13          #include "Parser.h"
     14          
     15          /* BGLib instantiation */
     16          

   \                                 In section .bss, align 4
     17          BGLIB_DEFINE();
   \                     _gecko_cmd_msg:
   \   00000000                      DS8 132

   \                                 In section .bss, align 4
   \   __absolute struct gecko_cmd_packet _gecko_rsp_msg
   \                     _gecko_rsp_msg:
   \   00000000                      DS8 132

   \                                 In section .data, align 4
   \   __absolute struct gecko_cmd_packet *gecko_cmd_msg
   \                     gecko_cmd_msg:
   \   00000000   0x........         DC32 _gecko_cmd_msg

   \                                 In section .bss, align 4
   \   __absolute struct gecko_cmd_packet *gecko_evt_msg
   \                     gecko_evt_msg:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \   __absolute void (*bglib_output)(uint32_t, uint8_t *)
   \                     bglib_output:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \   __absolute int32_t (*bglib_input)(uint32_t, uint8_t *)
   \                     bglib_input:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \   __absolute int32_t (*bglib_peek)(void)
   \                     bglib_peek:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \   __absolute struct gecko_cmd_packet gecko_queue[30]
   \                     gecko_queue:
   \   00000000                      DS8 3960

   \                                 In section .bss, align 4
   \   __absolute int gecko_queue_w
   \                     gecko_queue_w:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \   __absolute int gecko_queue_r
   \                     gecko_queue_r:
   \   00000000                      DS8 4

   \                                 In section .data, align 4
   \   __absolute struct gecko_cmd_packet *gecko_rsp_msg
   \                     gecko_rsp_msg:
   \   00000000   0x........         DC32 _gecko_rsp_msg
     18          
     19          /* Define buffer size for BLE communication */
     20          
     21          // #define BG_DATA_LENGTH          70   // Code fills this buffer size full on the RX side...11/18/16 RP
     22          #define BG_DATA_LENGTH          200   
     23          
     24          /* Define number of free bytes in buffer when we need to process a packet
     25           * even if that means we need to wait in a loop */
     26          
     27          #define BG_DATA_LOW_WATERMARK   5
     28          
     29          /* BG reception states */
     30          
     31          enum BgRxState
     32          {
     33            BGRX_SYNC,
     34            BGRX_HDR,
     35            BGRX_DATA
     36          };
     37          
     38          
     39          /* MSG LOGGER */
     40          struct
     41          {
     42            uint32_t msgBuff[BG_DATA_LENGTH];
     43            uint16_t tx_wr;

   \                                 In section .bss, align 4
     44          } static blemsgs;
   \                     blemsgs:
   \   00000000                      DS8 804
     45          
     46          /* BLE communication structure */
     47          struct
     48          {
     49            uint8_t tx_buf[BG_DATA_LENGTH];
     50            uint8_t tx_wr;
     51            volatile uint8_t tx_rd;
     52            uint8_t rx_buf[BG_DATA_LENGTH];
     53            volatile uint8_t rx_wr;
     54            uint8_t rx_rd;
     55            volatile enum BgRxState rx_state;
     56            volatile bool req_exec;
     57            bool booted;
     58            bool connection;
     59            bool data_Connection;
     60            bool CMD_Mode;
     61            uint8_t TackArmed;
     62            uint8_t TackCnt;
     63            uint8_t SyncFlag;
     64            struct gecko_cmd_packet *evt;

   \                                 In section .bss, align 4
     65          } static ble;
   \                     `ble`:
   \   00000000                      DS8 420
     66          
     67          
     68          /* BGM111 module low level init */
     69          

   \                                 In section .text, align 2, keep-with-next
     70          void BGM111_LowLevel_Init(void)
     71          {
     72            blemsgs.tx_wr = 0;
   \                     BGM111_LowLevel_Init: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x.... 0x....      LDR.W    R1,??DataTable23_5
   \   00000006   0xF8A1 0x0320      STRH     R0,[R1, #+800]
     73            ble.booted =  false;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x.... 0x....      LDR.W    R1,??DataTable23_6
   \   00000010   0xF881 0x0196      STRB     R0,[R1, #+406]
     74            ble.connection = false;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x.... 0x....      LDR.W    R1,??DataTable23_6
   \   0000001A   0xF881 0x0197      STRB     R0,[R1, #+407]
     75            ble.data_Connection = false;
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x.... 0x....      LDR.W    R1,??DataTable23_6
   \   00000024   0xF881 0x0198      STRB     R0,[R1, #+408]
     76            ble.CMD_Mode = false;
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0x.... 0x....      LDR.W    R1,??DataTable23_6
   \   0000002E   0xF881 0x0199      STRB     R0,[R1, #+409]
     77            ble.TackArmed = TACK_OFF;
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x.... 0x....      LDR.W    R1,??DataTable23_6
   \   00000038   0xF881 0x019A      STRB     R0,[R1, #+410]
     78            ble.TackCnt = 0;
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0x.... 0x....      LDR.W    R1,??DataTable23_6
   \   00000042   0xF881 0x019B      STRB     R0,[R1, #+411]
     79            ble.SyncFlag = SYNC_PROC;
   \   00000046   0x2001             MOVS     R0,#+1
   \   00000048   0x.... 0x....      LDR.W    R1,??DataTable23_6
   \   0000004C   0xF881 0x019C      STRB     R0,[R1, #+412]
     80          }
   \   00000050   0x4770             BX       LR               ;; return
     81          
     82          /* Next buffer index based on current index and buffer size */
     83          
     84          //#pragma inline=forced

   \                                 In section .text, align 2, keep-with-next
     85          uint8_t NextBufIdx(uint8_t idx)
     86          {
     87            idx++;
   \                     NextBufIdx: (+1)
   \   00000000   0x1C40             ADDS     R0,R0,#+1
     88            return idx < BG_DATA_LENGTH ? idx : 0;
   \   00000002   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000004   0x28C8             CMP      R0,#+200
   \   00000006   0xDB00             BLT.N    ??NextBufIdx_0
   \                     ??NextBufIdx_1: (+1)
   \   00000008   0x2000             MOVS     R0,#+0
   \                     ??NextBufIdx_0: (+1)
   \   0000000A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000C   0x4770             BX       LR               ;; return
     89          }
     90          
     91          /* Report if the buffer is full based on its indexes */
     92          
     93          //#pragma inline=forced

   \                                 In section .text, align 2, keep-with-next
     94          bool IsBufFull(uint8_t wr_idx, uint8_t rd_idx)
     95          {
   \                     IsBufFull: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
     96            return NextBufIdx(wr_idx) == rd_idx;
   \   00000006   0x0020             MOVS     R0,R4
   \   00000008   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000A   0x.... 0x....      BL       NextBufIdx
   \   0000000E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000010   0x42A8             CMP      R0,R5
   \   00000012   0xD101             BNE.N    ??IsBufFull_0
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0xE000             B.N      ??IsBufFull_1
   \                     ??IsBufFull_0: (+1)
   \   00000018   0x2000             MOVS     R0,#+0
   \                     ??IsBufFull_1: (+1)
   \   0000001A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001C   0xBD32             POP      {R1,R4,R5,PC}    ;; return
     97          }
     98          
     99          /* Get the used space in the buffer based on its indexes */
    100          
    101          //#pragma inline=forced

   \                                 In section .text, align 2, keep-with-next
    102          uint8_t BufUsed(uint8_t wr_idx, uint8_t rd_idx)
    103          {
   \                     BufUsed: (+1)
   \   00000000   0x0002             MOVS     R2,R0
    104            int size = (int)wr_idx - (int)rd_idx;
   \   00000002   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000004   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000006   0x1A50             SUBS     R0,R2,R1
    105            if (size < 0)
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD500             BPL.N    ??BufUsed_0
    106            {
    107              size = BG_DATA_LENGTH + size;
   \   0000000C   0x30C8             ADDS     R0,R0,#+200
    108            }
    109            return size;
   \                     ??BufUsed_0: (+1)
   \   0000000E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000010   0x4770             BX       LR               ;; return
    110          }
    111          
    112          /* Get the free space in the buffer based on its indexes */
    113          
    114          //#pragma inline=forced

   \                                 In section .text, align 2, keep-with-next
    115          uint8_t BufFree(uint8_t wr_idx, uint8_t rd_idx)
    116          {
   \                     BufFree: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    117            return (BG_DATA_LENGTH - 1) - BufUsed(wr_idx, rd_idx);
   \   00000006   0x0029             MOVS     R1,R5
   \   00000008   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000E   0x.... 0x....      BL       BufUsed
   \   00000012   0xF1D0 0x00C7      RSBS     R0,R0,#+199
   \   00000016   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000018   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    118          }
    119          
    120          /* Receive data from the BGM111 module */
    121          

   \                                 In section .text, align 2, keep-with-next
    122          int BGM111_Receive(uint32_t len, uint8_t *data)
    123          {
   \                     BGM111_Receive: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    124            
    125            /* Wait until we received the requested number of data bytes */
    126            while (len)
   \                     ??BGM111_Receive_0: (+1)
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD027             BEQ.N    ??BGM111_Receive_1
    127            {
    128              /* Is there a byte in the receive buffer? */
    129              if (ble.rx_rd != ble.rx_wr)
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable23_6
   \   0000000E   0xF890 0x0193      LDRB     R0,[R0, #+403]
   \   00000012   0x.... 0x....      LDR.W    R1,??DataTable23_6
   \   00000016   0xF891 0x1192      LDRB     R1,[R1, #+402]
   \   0000001A   0x4288             CMP      R0,R1
   \   0000001C   0xD01B             BEQ.N    ??BGM111_Receive_2
    130              {
    131                /* Disable interrupt */
    132          //      NVIC_DisableIRQ(BGM111_UART_IRQn);
    133                /* Clear the request to execute the BLE stack now we're doing it */
    134                ble.req_exec = false;
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x.... 0x....      LDR.W    R1,??DataTable23_6
   \   00000024   0xF881 0x0195      STRB     R0,[R1, #+405]
    135                /* Write to the output buffer */
    136                *data++ = ble.rx_buf[ble.rx_rd];
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable23_6
   \   0000002C   0x.... 0x....      LDR.W    R1,??DataTable23_6
   \   00000030   0xF891 0x1193      LDRB     R1,[R1, #+403]
   \   00000034   0x4408             ADD      R0,R0,R1
   \   00000036   0xF890 0x00CA      LDRB     R0,[R0, #+202]
   \   0000003A   0x7028             STRB     R0,[R5, #+0]
   \   0000003C   0x1C6D             ADDS     R5,R5,#+1
    137                /* Next byte in the receive buffer */
    138                ble.rx_rd = NextBufIdx(ble.rx_rd);
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable23_6
   \   00000042   0xF890 0x0193      LDRB     R0,[R0, #+403]
   \   00000046   0x.... 0x....      BL       NextBufIdx
   \   0000004A   0x.... 0x....      LDR.W    R1,??DataTable23_6
   \   0000004E   0xF881 0x0193      STRB     R0,[R1, #+403]
    139                /* Enable interrupt */
    140          //      NVIC_EnableIRQ(BGM111_UART_IRQn);
    141          
    142                /* One byte less to wait for */
    143                len--;
   \   00000052   0x1E64             SUBS     R4,R4,#+1
   \   00000054   0xE7D7             B.N      ??BGM111_Receive_0
    144              }
    145              else
    146              {
    147                // Time to prime the pump again....
    148                HAL_UART_EnableBGM_RX();
   \                     ??BGM111_Receive_2: (+1)
   \   00000056   0x.... 0x....      BL       HAL_UART_EnableBGM_RX
    149                break;
    150              }
    151            }
    152            return 0;
   \                     ??BGM111_Receive_1: (+1)
   \   0000005A   0x2000             MOVS     R0,#+0
   \   0000005C   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    153          }
    154          
    155          /* Check whether there is input data from the BGM111 module */
    156          

   \                                 In section .text, align 2, keep-with-next
    157          int BGM111_Peek(void)
    158          {
    159            return ble.req_exec;
   \                     BGM111_Peek: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable23_6
   \   00000004   0xF890 0x0195      LDRB     R0,[R0, #+405]
   \   00000008   0x4770             BX       LR               ;; return
    160          }
    161          
    162          /* Initialize the BGM111 module and BGLib */
    163          

   \                                 In section .text, align 2, keep-with-next
    164          void BGM111_Init(void)
    165          {
   \                     BGM111_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    166            /* Perform low level init to initialize the UART for use with the 
    167             * BGM111 module */
    168            BGM111_LowLevel_Init();
   \   00000002   0x.... 0x....      BL       BGM111_LowLevel_Init
    169            /* Pull the BGM111 reset pin low */
    170            RoadBrd_gpio_Off( gRESET_BGM111 );
   \   00000006   0x2006             MOVS     R0,#+6
   \   00000008   0x.... 0x....      BL       RoadBrd_gpio_Off
    171            /* Initialize BGLib with our transmit, receive and peek routines */
    172            BGLIB_INITIALIZE_NONBLOCK(BGM111_Transmit, BGM111_Receive, BGM111_Peek);
   \   0000000C   0x.... 0x....      ADR.W    R0,BGM111_Transmit
   \   00000010   0x.... 0x....      LDR.W    R1,??DataTable23_7
   \   00000014   0x6008             STR      R0,[R1, #+0]
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable23_8
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable23_9
   \   0000001E   0x6008             STR      R0,[R1, #+0]
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable23_10
   \   00000024   0x.... 0x....      LDR.W    R1,??DataTable23_11
   \   00000028   0x6008             STR      R0,[R1, #+0]
    173            /* Release the BGM111 reset pin */
    174            RoadBrd_gpio_On( gRESET_BGM111 );
   \   0000002A   0x2006             MOVS     R0,#+6
   \   0000002C   0x.... 0x....      BL       RoadBrd_gpio_On
    175          }
   \   00000030   0xBD01             POP      {R0,PC}          ;; return
    176          
    177          /* Process any input from the BLE module */
    178          

   \                                 In section .text, align 2, keep-with-next
    179          void BGM111_ProcessInput(void)
    180          {
   \                     BGM111_ProcessInput: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
    181            /* Event structure */
    182            uint32_t temp1;
    183            uint8_t tempBffr2[20];
    184            bool Boot_evt = false;
   \   00000004   0x2500             MOVS     R5,#+0
    185            struct gecko_msg_le_gap_set_mode_rsp_t *Result_Ptr;
    186            /* Check whether there is an event to service */
    187            if (!ble.evt)
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable23_6
   \   0000000A   0xF8D0 0x01A0      LDR      R0,[R0, #+416]
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD105             BNE.N    ??BGM111_ProcessInput_0
    188            {
    189              ble.evt = gecko_peek_event();
   \   00000012   0x.... 0x....      BL       gecko_peek_event
   \   00000016   0x.... 0x....      LDR.W    R1,??DataTable23_6
   \   0000001A   0xF8C1 0x01A0      STR      R0,[R1, #+416]
    190            }
    191            if (ble.evt)
   \                     ??BGM111_ProcessInput_0: (+1)
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable23_6
   \   00000022   0xF8D0 0x01A0      LDR      R0,[R0, #+416]
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xF000 0x80EF      BEQ.W    ??BGM111_ProcessInput_1
    192            {
    193              // Log Event
    194              blemsgs.msgBuff[blemsgs.tx_wr] = BGLIB_MSG_ID(ble.evt->header);
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable23_6
   \   00000030   0xF8D0 0x01A0      LDR      R0,[R0, #+416]
   \   00000034   0x6800             LDR      R0,[R0, #+0]
   \   00000036   0x.... 0x....      LDR.W    R1,??DataTable23_12  ;; 0xffff00f8
   \   0000003A   0x4008             ANDS     R0,R1,R0
   \   0000003C   0x.... 0x....      LDR.W    R1,??DataTable23_5
   \   00000040   0x.... 0x....      LDR.W    R2,??DataTable23_5
   \   00000044   0xF8B2 0x2320      LDRH     R2,[R2, #+800]
   \   00000048   0xF841 0x0022      STR      R0,[R1, R2, LSL #+2]
    195              blemsgs.tx_wr = NextBufIdx(blemsgs.tx_wr);
   \   0000004C   0x.... 0x....      LDR.W    R0,??DataTable23_5
   \   00000050   0xF8B0 0x0320      LDRH     R0,[R0, #+800]
   \   00000054   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000056   0x.... 0x....      BL       NextBufIdx
   \   0000005A   0x.... 0x....      LDR.W    R1,??DataTable23_5
   \   0000005E   0xF8A1 0x0320      STRH     R0,[R1, #+800]
    196              
    197              /* Service based on event header message ID */
    198              temp1 = BGLIB_MSG_ID(ble.evt->header);
   \   00000062   0x.... 0x....      LDR.W    R0,??DataTable23_6
   \   00000066   0xF8D0 0x01A0      LDR      R0,[R0, #+416]
   \   0000006A   0x6800             LDR      R0,[R0, #+0]
   \   0000006C   0x.... 0x....      LDR.W    R1,??DataTable23_12  ;; 0xffff00f8
   \   00000070   0x4008             ANDS     R0,R1,R0
   \   00000072   0x0004             MOVS     R4,R0
    199              switch(temp1)
   \   00000074   0x0020             MOVS     R0,R4
   \   00000076   0x.... 0x....      LDR.W    R1,??DataTable23_13  ;; 0x100a0
   \   0000007A   0x4288             CMP      R0,R1
   \   0000007C   0xD02A             BEQ.N    ??BGM111_ProcessInput_2
   \   0000007E   0x.... 0x....      LDR.W    R1,??DataTable23_14  ;; 0x800a0
   \   00000082   0x4288             CMP      R0,R1
   \   00000084   0xD058             BEQ.N    ??BGM111_ProcessInput_3
   \   00000086   0x.... 0x....      LDR.W    R1,??DataTable23_15  ;; 0x900a0
   \   0000008A   0x4288             CMP      R0,R1
   \   0000008C   0xF000 0x8082      BEQ.W    ??BGM111_ProcessInput_4
   \   00000090   0x.... 0x....      LDR.W    R1,??DataTable23_16  ;; 0x10800a0
   \   00000094   0x4288             CMP      R0,R1
   \   00000096   0xD029             BEQ.N    ??BGM111_ProcessInput_5
   \   00000098   0x.... 0x....      LDR.W    R1,??DataTable23_17  ;; 0x20800a0
   \   0000009C   0x4288             CMP      R0,R1
   \   0000009E   0xD079             BEQ.N    ??BGM111_ProcessInput_4
   \   000000A0   0x.... 0x....      LDR.W    R1,??DataTable23_18  ;; 0x20a0020
   \   000000A4   0x4288             CMP      R0,R1
   \   000000A6   0xD057             BEQ.N    ??BGM111_ProcessInput_6
   \   000000A8   0x.... 0x....      LDR.W    R1,??DataTable23_19  ;; 0x20b00a0
   \   000000AC   0x4288             CMP      R0,R1
   \   000000AE   0xF000 0x8092      BEQ.W    ??BGM111_ProcessInput_7
   \   000000B2   0x.... 0x....      LDR.W    R1,??DataTable23_20  ;; 0x30a00a0
   \   000000B6   0x4288             CMP      R0,R1
   \   000000B8   0xD05A             BEQ.N    ??BGM111_ProcessInput_8
   \   000000BA   0x.... 0x....      LDR.W    R1,??DataTable23_21  ;; 0x50a0020
   \   000000BE   0x4288             CMP      R0,R1
   \   000000C0   0xD062             BEQ.N    ??BGM111_ProcessInput_9
   \   000000C2   0x.... 0x....      LDR.W    R1,??DataTable23_22  ;; 0x8090020
   \   000000C6   0x4288             CMP      R0,R1
   \   000000C8   0xD064             BEQ.N    ??BGM111_ProcessInput_4
   \   000000CA   0x.... 0x....      LDR.W    R1,??DataTable23_23  ;; 0x200000a0
   \   000000CE   0x4288             CMP      R0,R1
   \   000000D0   0xD05A             BEQ.N    ??BGM111_ProcessInput_9
   \   000000D2   0xE08B             B.N      ??BGM111_ProcessInput_10
    200              //switch (BGLIB_MSG_ID(ble.evt->header))
    201              {
    202                /* System boot handler */
    203                case gecko_evt_system_boot_id:
    204                  RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)"<BGM_BOOT>");
   \                     ??BGM111_ProcessInput_2: (+1)
   \   000000D4   0x.... 0x....      LDR.W    R1,??DataTable23_24
   \   000000D8   0x2000             MOVS     R0,#+0
   \   000000DA   0x.... 0x....      BL       RoadBrd_UART_Transmit
    205                  Boot_evt = true;
   \   000000DE   0x2001             MOVS     R0,#+1
   \   000000E0   0x0005             MOVS     R5,R0
    206                  /* Flag that the BLE module has booted */
    207                  ble.booted = true;
   \   000000E2   0x2001             MOVS     R0,#+1
   \   000000E4   0x.... 0x....      LDR.W    R1,??DataTable23_6
   \   000000E8   0xF881 0x0196      STRB     R0,[R1, #+406]
    208                  /* Fallthrough intentional */
    209                /* Connection closed handler */
    210                case gecko_evt_le_connection_closed_id:
    211                  // Wait for power to stabilize...200msec
    212          //        RoadBrd_Delay( 100 );
    213          //        gecko_cmd_le_gap_set_mode(le_gap_general_discoverable, le_gap_undirected_connectable);
    214          //        RoadBrd_Delay( 100 );
    215          //        gecko_cmd_le_gap_set_mode(le_gap_non_discoverable, le_gap_non_connectable);
    216          //        RoadBrd_Delay( 100 );
    217                  /* Set GAP mode: discoverable and connectable */
    218                  ble.connection = false;
   \                     ??BGM111_ProcessInput_5: (+1)
   \   000000EC   0x2000             MOVS     R0,#+0
   \   000000EE   0x.... 0x....      LDR.W    R1,??DataTable23_6
   \   000000F2   0xF881 0x0197      STRB     R0,[R1, #+407]
    219          //        Result_Ptr = gecko_cmd_le_gap_set_mode(le_gap_limited_discoverable, le_gap_undirected_connectable);
    220                  Result_Ptr = gecko_cmd_le_gap_set_mode(le_gap_general_discoverable, le_gap_undirected_connectable);
   \   000000F6   0x2102             MOVS     R1,#+2
   \   000000F8   0x2002             MOVS     R0,#+2
   \   000000FA   0x.... 0x....      BL       gecko_cmd_le_gap_set_mode
   \   000000FE   0x0006             MOVS     R6,R0
    221                  if ( Result_Ptr->result == 0)
   \   00000100   0x8830             LDRH     R0,[R6, #+0]
   \   00000102   0x2800             CMP      R0,#+0
   \   00000104   0xD117             BNE.N    ??BGM111_ProcessInput_11
    222          //        if (gecko_cmd_le_gap_set_mode(le_gap_general_discoverable, le_gap_undirected_connectable)->result == 0)
    223          //        if (gecko_cmd_le_gap_set_mode(le_gap_limited_discoverable, le_gap_undirected_connectable)->result < bg_errspc_bg)
    224                  {
    225                    // Don't reset first time. This is legitimate
    226                    // The following is a simple patch...Best way right now to recover is to force HARD Reset....
    227                    if (Boot_evt == false)
   \   00000106   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000108   0x2D00             CMP      R5,#+0
   \   0000010A   0xD10F             BNE.N    ??BGM111_ProcessInput_12
    228                    {
    229                      RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)"<BGM_CNCTCLOSE>");
   \   0000010C   0x.... 0x....      LDR.W    R1,??DataTable23_25
   \   00000110   0x2000             MOVS     R0,#+0
   \   00000112   0x.... 0x....      BL       RoadBrd_UART_Transmit
    230                      RdBrd_ErrCdLogErrCd( ERROR_BGM_CNNCT, MODULE_bgm111 );
   \   00000116   0x2102             MOVS     R1,#+2
   \   00000118   0x200D             MOVS     R0,#+13
   \   0000011A   0x.... 0x....      BL       RdBrd_ErrCdLogErrCd
    231                      Clr_HrtBeat_Cnt();
   \   0000011E   0x.... 0x....      BL       Clr_HrtBeat_Cnt
    232                      RdBrd_BlinkErrCd( ERROR_BGM_CNNCT );
   \   00000122   0x200D             MOVS     R0,#+13
   \   00000124   0x.... 0x....      BL       RdBrd_BlinkErrCd
    233                      //RoadBrd_Delay( 1000 );
    234                      HAL_NVIC_SystemReset();
   \   00000128   0x.... 0x....      BL       HAL_NVIC_SystemReset
    235                    }
    236                    /* We succeeded, don't handle this event again */
    237                    ble.evt = NULL;
   \                     ??BGM111_ProcessInput_12: (+1)
   \   0000012C   0x2000             MOVS     R0,#+0
   \   0000012E   0x.... 0x....      LDR.W    R1,??DataTable23_6
   \   00000132   0xF8C1 0x01A0      STR      R0,[R1, #+416]
    238                  }
    239                  break;
   \                     ??BGM111_ProcessInput_11: (+1)
   \   00000136   0xE068             B.N      ??BGM111_ProcessInput_1
    240                //case 0x000800A0:
    241                case gecko_evt_le_connection_opened_id:
    242                  /* Open Event...Set Active Connection Flag */
    243                  /* Don't handle this event again */
    244                  RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)"<BGM_CNCTOPEN>");
   \                     ??BGM111_ProcessInput_3: (+1)
   \   00000138   0x.... 0x....      LDR.W    R1,??DataTable23_26
   \   0000013C   0x2000             MOVS     R0,#+0
   \   0000013E   0x.... 0x....      BL       RoadBrd_UART_Transmit
    245                  ble.connection = true;
   \   00000142   0x2001             MOVS     R0,#+1
   \   00000144   0x.... 0x....      LDR.W    R1,??DataTable23_6
   \   00000148   0xF881 0x0197      STRB     R0,[R1, #+407]
    246                  ble.evt = NULL;
   \   0000014C   0x2000             MOVS     R0,#+0
   \   0000014E   0x.... 0x....      LDR.W    R1,??DataTable23_6
   \   00000152   0xF8C1 0x01A0      STR      R0,[R1, #+416]
    247                  break;
   \   00000156   0xE058             B.N      ??BGM111_ProcessInput_1
    248                // gecko_evt_gatt_server_user_write_request_id
    249                case 0x020A0020:
    250                  // Clear Heart Beat... We have detected it.
    251                  RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)"-*-");
   \                     ??BGM111_ProcessInput_6: (+1)
   \   00000158   0x....             ADR.N    R1,??DataTable20  ;; "-*-"
   \   0000015A   0x2000             MOVS     R0,#+0
   \   0000015C   0x.... 0x....      BL       RoadBrd_UART_Transmit
    252                  Clr_HeartBeat();
   \   00000160   0x.... 0x....      BL       Clr_HeartBeat
    253                  ble.evt = NULL;
   \   00000164   0x2000             MOVS     R0,#+0
   \   00000166   0x.... 0x....      LDR.W    R1,??DataTable23_6
   \   0000016A   0xF8C1 0x01A0      STR      R0,[R1, #+416]
    254                  break;
   \   0000016E   0xE04C             B.N      ??BGM111_ProcessInput_1
    255                //case 0x030A0000:
    256                case gecko_evt_gatt_server_characteristic_status_id:
    257                  // Clear Heart Beat... We have detected it.
    258                  RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)"-O-");
   \                     ??BGM111_ProcessInput_8: (+1)
   \   00000170   0x....             ADR.N    R1,??DataTable20_1  ;; "-O-"
   \   00000172   0x2000             MOVS     R0,#+0
   \   00000174   0x.... 0x....      BL       RoadBrd_UART_Transmit
    259                  Clr_HeartBeat();
   \   00000178   0x.... 0x....      BL       Clr_HeartBeat
    260                  ble.evt = NULL;
   \   0000017C   0x2000             MOVS     R0,#+0
   \   0000017E   0x.... 0x....      LDR.W    R1,??DataTable23_6
   \   00000182   0xF8C1 0x01A0      STR      R0,[R1, #+416]
    261                  break;
   \   00000186   0xE040             B.N      ??BGM111_ProcessInput_1
    262          //      case 0x080000A0:
    263          //      case 0x020B00A0:
    264          //      case 0x000000A0:
    265                case 0x200000A0:
    266                case 0x050A0020:
    267          //      case 0x200000A0:
    268          //      case gecko_cmd_gatt_server_send_characteristic_notification_id: */
    269                /* Dummy catchall */
    270                  /* Don't handle this event again */
    271                  ble.evt = NULL;
   \                     ??BGM111_ProcessInput_9: (+1)
   \   00000188   0x2000             MOVS     R0,#+0
   \   0000018A   0x.... 0x....      LDR.W    R1,??DataTable23_6
   \   0000018E   0xF8C1 0x01A0      STR      R0,[R1, #+416]
    272                  break;
   \   00000192   0xE03A             B.N      ??BGM111_ProcessInput_1
    273                case gecko_rsp_gatt_read_characteristic_value_by_uuid_id:
    274                case 0x020800A0:
    275                case 0x000900A0:
    276                  RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)"<rsp_read_ch_value_by_uuid_id>");
   \                     ??BGM111_ProcessInput_4: (+1)
   \   00000194   0x.... 0x....      LDR.W    R1,??DataTable23_27
   \   00000198   0x2000             MOVS     R0,#+0
   \   0000019A   0x.... 0x....      BL       RoadBrd_UART_Transmit
    277                  if (ble.evt->data.evt_gatt_server_attribute_value.value.len != 0)
   \   0000019E   0x.... 0x....      LDR.W    R0,??DataTable23_6
   \   000001A2   0xF8D0 0x01A0      LDR      R0,[R0, #+416]
   \   000001A6   0x7A80             LDRB     R0,[R0, #+10]
   \   000001A8   0x2800             CMP      R0,#+0
   \   000001AA   0xD00E             BEQ.N    ??BGM111_ProcessInput_13
    278                  {
    279                    sprintf( (char *)tempBffr2, "<STR:%s>", ble.evt->data.evt_gatt_server_attribute_value.value.data);
   \   000001AC   0x.... 0x....      LDR.W    R0,??DataTable23_6
   \   000001B0   0xF8D0 0x01A0      LDR      R0,[R0, #+416]
   \   000001B4   0xF110 0x020B      ADDS     R2,R0,#+11
   \   000001B8   0x.... 0x....      LDR.W    R1,??DataTable23_28
   \   000001BC   0x4668             MOV      R0,SP
   \   000001BE   0x.... 0x....      BL       sprintf
    280                    RoadBrd_UART_Transmit(MONITOR_UART, tempBffr2);
   \   000001C2   0x4669             MOV      R1,SP
   \   000001C4   0x2000             MOVS     R0,#+0
   \   000001C6   0x.... 0x....      BL       RoadBrd_UART_Transmit
    281                  }
    282                  ble.evt = NULL;
   \                     ??BGM111_ProcessInput_13: (+1)
   \   000001CA   0x2000             MOVS     R0,#+0
   \   000001CC   0x.... 0x....      LDR.W    R1,??DataTable23_6
   \   000001D0   0xF8C1 0x01A0      STR      R0,[R1, #+416]
    283                  break;
   \   000001D4   0xE019             B.N      ??BGM111_ProcessInput_1
    284                case gecko_evt_endpoint_status_id:
    285                  RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)"<evt_endpoint_status_id>");
   \                     ??BGM111_ProcessInput_7: (+1)
   \   000001D6   0x.... 0x....      LDR.W    R1,??DataTable23_29
   \   000001DA   0x2000             MOVS     R0,#+0
   \   000001DC   0x.... 0x....      BL       RoadBrd_UART_Transmit
    286                  ble.evt = NULL;
   \   000001E0   0x2000             MOVS     R0,#+0
   \   000001E2   0x.... 0x....      LDR.W    R1,??DataTable23_6
   \   000001E6   0xF8C1 0x01A0      STR      R0,[R1, #+416]
    287                  break;
   \   000001EA   0xE00E             B.N      ??BGM111_ProcessInput_1
    288                /* Dummy catchall */
    289                default:
    290                  sprintf( (char *)tempBffr2, "<UNKN:%08x>", temp1);
   \                     ??BGM111_ProcessInput_10: (+1)
   \   000001EC   0x0022             MOVS     R2,R4
   \   000001EE   0x.... 0x....      LDR.W    R1,??DataTable23_30
   \   000001F2   0x4668             MOV      R0,SP
   \   000001F4   0x.... 0x....      BL       sprintf
    291                  RoadBrd_UART_Transmit(MONITOR_UART, tempBffr2);
   \   000001F8   0x4669             MOV      R1,SP
   \   000001FA   0x2000             MOVS     R0,#+0
   \   000001FC   0x.... 0x....      BL       RoadBrd_UART_Transmit
    292                  /* Don't handle this event again */
    293                  ble.evt = NULL;
   \   00000200   0x2000             MOVS     R0,#+0
   \   00000202   0x.... 0x....      LDR.W    R1,??DataTable23_6
   \   00000206   0xF8C1 0x01A0      STR      R0,[R1, #+416]
    294                  break;
    295              };
    296              // Test RX Buffer and Set req_exec flag.
    297          //    if (BufUsed(ble.rx_wr, ble.rx_rd) != 0)
    298          //    {
    299          //      /* Indicate we need to execute the BLE stack to process 
    300          //       * the received packet */
    301          //      ble.req_exec = true;
    302          //    }
    303            } // EndIf (ble.evt)
    304          }
   \                     ??BGM111_ProcessInput_1: (+1)
   \   0000020A   0xB006             ADD      SP,SP,#+24
   \   0000020C   0xBD70             POP      {R4-R6,PC}       ;; return
    305          
    306          /* BLE write characteristic */
    307          

   \                                 In section .text, align 2, keep-with-next
    308          void BGM111_WriteCharacteristic(uint16_t handle, uint8_t len, uint8_t *data)
    309          {
   \                     BGM111_WriteCharacteristic: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    310            /* Write the attribute */
    311            gecko_cmd_gatt_server_write_attribute_value(handle, 0, len, data);
   \   00000008   0x0033             MOVS     R3,R6
   \   0000000A   0x002A             MOVS     R2,R5
   \   0000000C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0x0020             MOVS     R0,R4
   \   00000012   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000014   0x.... 0x....      BL       gecko_cmd_gatt_server_write_attribute_value
    312            /* Also trigger notify if enabled */
    313            gecko_cmd_gatt_server_send_characteristic_notification(0xFF,
    314                      handle, len, data);
   \   00000018   0x0033             MOVS     R3,R6
   \   0000001A   0x002A             MOVS     R2,R5
   \   0000001C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000001E   0x0021             MOVS     R1,R4
   \   00000020   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000022   0x20FF             MOVS     R0,#+255
   \   00000024   0x.... 0x....      BL       gecko_cmd_gatt_server_send_characteristic_notification
    315          }
   \   00000028   0xBD70             POP      {R4-R6,PC}       ;; return
    316          
    317          /**
    318            * @brief  Check whether the BLE module has booted and is ready for a command.
    319            * @retval bool:         true(1):        BGAPI IS ready.
    320            *                       false(0):         BGAPI NOT ready.
    321            */

   \                                 In section .text, align 2, keep-with-next
    322          bool BGM111_Ready(void)
    323          {
    324            return ble.booted;
   \                     BGM111_Ready: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable23_6
   \   00000004   0xF890 0x0196      LDRB     R0,[R0, #+406]
   \   00000008   0x4770             BX       LR               ;; return
    325          }
    326          
    327          /**
    328            * @brief  Check whether the BLE module is connected.
    329            * @retval bool:         true(1):        Connection is Active.
    330            *                       false(0):       NO Connection.
    331            */

   \                                 In section .text, align 2, keep-with-next
    332          bool BGM111_Connected(void)
    333          {
    334            return ble.connection;
   \                     BGM111_Connected: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable23_6
   \   00000004   0xF890 0x0197      LDRB     R0,[R0, #+407]
   \   00000008   0x4770             BX       LR               ;; return
    335          }
    336          
    337          /**
    338            * @brief  Check whether the BLE module is DATA connected.
    339            * @retval bool:         true(1):        DATA Connection is Active.
    340            *                       false(0):       NO DATA Connection.
    341            */

   \                                 In section .text, align 2, keep-with-next
    342          bool BGM111_DataConnected(void)
    343          {
    344            return ble.data_Connection;
   \                     BGM111_DataConnected: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable23_6
   \   00000004   0xF890 0x0198      LDRB     R0,[R0, #+408]
   \   00000008   0x4770             BX       LR               ;; return
    345          }
    346          
    347          /**
    348            * @brief  Check whether the BLE module is in CMD Mode.
    349            * @retval bool:         true(1):        CMD Mode is Active.
    350            *                       false(0):       CMD Mode is  not Active.
    351            */

   \                                 In section .text, align 2, keep-with-next
    352          bool BGM111_CMD_Mode(void)
    353          {
    354            return ble.CMD_Mode;
   \                     BGM111_CMD_Mode: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable23_6
   \   00000004   0xF890 0x0199      LDRB     R0,[R0, #+409]
   \   00000008   0x4770             BX       LR               ;; return
    355          }
    356          
    357          /**
    358            * @brief  Set the BLE module is DATA connected.
    359            * @param bool:         true(1):        DATA Connection is Active.
    360            *                      false(0):       NO DATA Connection.
    361            */

   \                                 In section .text, align 2, keep-with-next
    362          void BGM111_SetDataConnected(bool NewMode)
    363          {
    364            ble.data_Connection = NewMode;
   \                     BGM111_SetDataConnected: (+1)
   \   00000000   0x.... 0x....      LDR.W    R1,??DataTable23_6
   \   00000004   0xF881 0x0198      STRB     R0,[R1, #+408]
    365          }
   \   00000008   0x4770             BX       LR               ;; return
    366          
    367          /**
    368            * @brief  Set new BLE CMD Mode.
    369            * @param bool:         true(1):        CMD Mode is Active.
    370            *                      false(0):       CMD Mode is  not Active.
    371            */

   \                                 In section .text, align 2, keep-with-next
    372          void BGM111_SetCMD_Mode(bool NewMode)
    373          {
    374            ble.CMD_Mode = NewMode;
   \                     BGM111_SetCMD_Mode: (+1)
   \   00000000   0x.... 0x....      LDR.W    R1,??DataTable23_6
   \   00000004   0xF881 0x0199      STRB     R0,[R1, #+409]
    375          }
   \   00000008   0x4770             BX       LR               ;; return
    376          
    377          /**
    378            * @brief  Check whether the BLE module is in Sync Mode and Waiting for ACK.
    379            * @retval bool:         true(1):        Sync Ready for Processing next Frame.
    380            *                       false(0):       Sync needs to wait.
    381            */

   \                                 In section .text, align 2, keep-with-next
    382          bool BGM111_SyncModeTest(void)
    383          {
   \                     BGM111_SyncModeTest: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
    384            uint8_t tempBffr2[20];
    385          
    386            // Is Sync Mode armed? Yes.. Then Need to test SyncFlag
    387            if (ble.TackArmed == TACK_SYNC)
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable23_6
   \   00000008   0xF890 0x019A      LDRB     R0,[R0, #+410]
   \   0000000C   0x2803             CMP      R0,#+3
   \   0000000E   0xD140             BNE.N    ??BGM111_SyncModeTest_0
    388            {
    389              // If SyncFlag is SYNC_PROC, then allow Frame send.
    390              if (ble.SyncFlag == SYNC_PROC)
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable23_6
   \   00000014   0xF890 0x019C      LDRB     R0,[R0, #+412]
   \   00000018   0x2801             CMP      R0,#+1
   \   0000001A   0xD101             BNE.N    ??BGM111_SyncModeTest_1
    391                return true;
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0xE039             B.N      ??BGM111_SyncModeTest_2
    392              // NO, then Incrment count, We are one step closer to Reset Code.
    393              else
    394              {
    395                // Test to see if we have had a timing tick yet...
    396                if ( TstDataReady() )
   \                     ??BGM111_SyncModeTest_1: (+1)
   \   00000020   0x.... 0x....      BL       TstDataReady
   \   00000024   0x2800             CMP      R0,#+0
   \   00000026   0xD032             BEQ.N    ??BGM111_SyncModeTest_3
    397                {
    398                  // Clear Flag for next Tick Event.
    399                  ClrDataReady();
   \   00000028   0x.... 0x....      BL       ClrDataReady
    400                  // Increment Cnt and Report...
    401                  ble.TackCnt++;
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable23_6
   \   00000030   0xF890 0x019B      LDRB     R0,[R0, #+411]
   \   00000034   0x1C40             ADDS     R0,R0,#+1
   \   00000036   0x.... 0x....      LDR.W    R1,??DataTable23_6
   \   0000003A   0xF881 0x019B      STRB     R0,[R1, #+411]
    402                  sprintf( (char *)tempBffr2, "<TACK Strike:%d/%d>", ble.TackCnt, RoadBrd_Get_TackLimit() );
   \   0000003E   0x.... 0x....      BL       RoadBrd_Get_TackLimit
   \   00000042   0x0003             MOVS     R3,R0
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable23_6
   \   00000048   0xF890 0x219B      LDRB     R2,[R0, #+411]
   \   0000004C   0x.... 0x....      LDR.W    R1,??DataTable23_31
   \   00000050   0x4668             MOV      R0,SP
   \   00000052   0x.... 0x....      BL       sprintf
    403                  RoadBrd_UART_Transmit(MONITOR_UART, tempBffr2);
   \   00000056   0x4669             MOV      R1,SP
   \   00000058   0x2000             MOVS     R0,#+0
   \   0000005A   0x.... 0x....      BL       RoadBrd_UART_Transmit
    404          
    405                  if (ble.TackCnt > RoadBrd_Get_TackLimit())
   \   0000005E   0x.... 0x....      BL       RoadBrd_Get_TackLimit
   \   00000062   0x.... 0x....      LDR.W    R1,??DataTable23_6
   \   00000066   0xF891 0x119B      LDRB     R1,[R1, #+411]
   \   0000006A   0x4288             CMP      R0,R1
   \   0000006C   0xD20F             BCS.N    ??BGM111_SyncModeTest_3
    406                  {
    407                    // Time to process error and reset code....NO Choice.
    408                    RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)"<BGMSYNC_CNCTCLOSE>");
   \   0000006E   0x.... 0x....      LDR.W    R1,??DataTable23_32
   \   00000072   0x2000             MOVS     R0,#+0
   \   00000074   0x.... 0x....      BL       RoadBrd_UART_Transmit
    409                    RdBrd_ErrCdLogErrCd( ERROR_BGM_SYNCCNCT, MODULE_bgm111 );
   \   00000078   0x2102             MOVS     R1,#+2
   \   0000007A   0x2012             MOVS     R0,#+18
   \   0000007C   0x.... 0x....      BL       RdBrd_ErrCdLogErrCd
    410                    Clr_HrtBeat_Cnt();
   \   00000080   0x.... 0x....      BL       Clr_HrtBeat_Cnt
    411                    RdBrd_BlinkErrCd( ERROR_BGM_SYNCCNCT );
   \   00000084   0x2012             MOVS     R0,#+18
   \   00000086   0x.... 0x....      BL       RdBrd_BlinkErrCd
    412                    //RoadBrd_Delay( 1000 );
    413                    HAL_NVIC_SystemReset();
   \   0000008A   0x.... 0x....      BL       HAL_NVIC_SystemReset
    414                  } // EndIf (ble.TackCnt >TACK_LIMIT)
    415                } // EndIf ( TstDataReady() )
    416                return false;
   \                     ??BGM111_SyncModeTest_3: (+1)
   \   0000008E   0x2000             MOVS     R0,#+0
   \   00000090   0xE000             B.N      ??BGM111_SyncModeTest_2
    417              } // EndElse (ble.SyncFlag == SYNC_PROC)
    418            } // EndIf (ble.TackArmed == TACK_SYNC)
    419            // No....Then we can continue process. Return true.
    420            else
    421              return true;
   \                     ??BGM111_SyncModeTest_0: (+1)
   \   00000092   0x2001             MOVS     R0,#+1
   \                     ??BGM111_SyncModeTest_2: (+1)
   \   00000094   0xB005             ADD      SP,SP,#+20
   \   00000096   0xBD00             POP      {PC}             ;; return
    422          }
    423          
    424          /**
    425            * @brief  Check whether the BLE module is in Sync Mode and Waiting for ACK.
    426            * @retval bool:         true(1):        Sync Ready for Processing next Frame.
    427            *                       false(0):       Sync needs to wait.
    428            */

   \                                 In section .text, align 2, keep-with-next
    429          bool BGM111_SyncModeTestNoInc(void)
    430          {
    431            // Is Sync Mode armed? Yes.. Then Need to test SyncFlag
    432            if (ble.TackArmed == TACK_SYNC)
   \                     BGM111_SyncModeTestNoInc: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable23_6
   \   00000004   0xF890 0x019A      LDRB     R0,[R0, #+410]
   \   00000008   0x2803             CMP      R0,#+3
   \   0000000A   0xD109             BNE.N    ??BGM111_SyncModeTestNoInc_0
    433            {
    434              // If SyncFlag is SYNC_PROC, then allow Frame send.
    435              if (ble.SyncFlag == SYNC_PROC)
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable23_6
   \   00000010   0xF890 0x019C      LDRB     R0,[R0, #+412]
   \   00000014   0x2801             CMP      R0,#+1
   \   00000016   0xD101             BNE.N    ??BGM111_SyncModeTestNoInc_1
    436                return true;
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0xE002             B.N      ??BGM111_SyncModeTestNoInc_2
    437              else
    438                return false;
   \                     ??BGM111_SyncModeTestNoInc_1: (+1)
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0xE000             B.N      ??BGM111_SyncModeTestNoInc_2
    439            } // EndIf (ble.TackArmed == TACK_SYNC)
    440            // No....Then we can continue process. Return true.
    441            else
    442              return true;
   \                     ??BGM111_SyncModeTestNoInc_0: (+1)
   \   00000020   0x2001             MOVS     R0,#+1
   \                     ??BGM111_SyncModeTestNoInc_2: (+1)
   \   00000022   0x4770             BX       LR               ;; return
    443          }
    444          
    445          /**
    446            * @brief  Set new Value for Sync Flag.
    447            * @param uint8_t:       SYNC_WAIT(0):       Force Wait on all tests to send additional data
    448            *                       SYNC_PROC(1):       Allow sending of additional frame of data.
    449            * @retval None
    450            */

   \                                 In section .text, align 2, keep-with-next
    451          void BGM111_SetSyncFlg(uint8_t NewFlag)
    452          {
    453            ble.SyncFlag = NewFlag;
   \                     BGM111_SetSyncFlg: (+1)
   \   00000000   0x.... 0x....      LDR.W    R1,??DataTable23_6
   \   00000004   0xF881 0x019C      STRB     R0,[R1, #+412]
    454          }
   \   00000008   0x4770             BX       LR               ;; return
    455          
    456          /**
    457            * @brief  Set new Value for Sync Flag if in SYNC Mode.
    458            * @param uint8_t:       SYNC_WAIT(0):       Force Wait on all tests to send additional data
    459            *                       SYNC_PROC(1):       Allow sending of additional frame of data.
    460            * @retval None
    461            */

   \                                 In section .text, align 2, keep-with-next
    462          void BGM111_cntrlSetSyncFlg(uint8_t NewFlag)
    463          {
    464            // Is Sync Mode armed? Yes.. Then Need to test SyncFlag
    465            if (ble.TackArmed == TACK_SYNC)
   \                     BGM111_cntrlSetSyncFlg: (+1)
   \   00000000   0x.... 0x....      LDR.W    R1,??DataTable23_6
   \   00000004   0xF891 0x119A      LDRB     R1,[R1, #+410]
   \   00000008   0x2903             CMP      R1,#+3
   \   0000000A   0xD103             BNE.N    ??BGM111_cntrlSetSyncFlg_0
    466            {
    467              ble.SyncFlag = NewFlag;
   \   0000000C   0x.... 0x....      LDR.W    R1,??DataTable23_6
   \   00000010   0xF881 0x019C      STRB     R0,[R1, #+412]
    468            }
    469          }
   \                     ??BGM111_cntrlSetSyncFlg_0: (+1)
   \   00000014   0x4770             BX       LR               ;; return
    470          
    471          /**
    472            * @brief  Return Tack State.
    473            * @retval uint8_t:      TACK_OFF      = 0        Power Up Initialized Value.
    474            *                       TACK_ARMED    = 1        Set when Connection has been detected.
    475            *                       TACK_ARMED2   = 2        Set when First Tick Generated assuming TACK_ARMED State detected.
    476            *                       TACK_SYNC     = 3        Set when first TACK detected while a TACK_ARMED2 State detected.
    477            *                       TACK_ASYNC    = 4        Set when next TICK detected while TACK_ARMED2 State active.
    478            */

   \                                 In section .text, align 2, keep-with-next
    479          uint8_t BGM111_GetTackState(void)
    480          {
    481            return ble.TackArmed;
   \                     BGM111_GetTackState: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable23_6
   \   00000004   0xF890 0x019A      LDRB     R0,[R0, #+410]
   \   00000008   0x4770             BX       LR               ;; return
    482          }
    483          
    484          /**
    485            * @brief  Set Tack State.
    486            * @param uint8_t:       TACK_OFF      = 0        Power Up Initialized Value.
    487            *                       TACK_ARMED    = 1        Set when Connection has been detected.
    488            *                       TACK_ARMED2   = 2        Set when First Tick Generated assuming TACK_ARMED State detected.
    489            *                       TACK_SYNC     = 3        Set when first TACK detected while a TACK_ARMED2 State detected.
    490            *                       TACK_ASYNC    = 4        Set when next TICK detected while TACK_ARMED2 State active.
    491            * @retval None
    492            */

   \                                 In section .text, align 2, keep-with-next
    493          void BGM111_SetTackState(uint8_t NewValue)
    494          {
    495            ble.TackArmed = NewValue;
   \                     BGM111_SetTackState: (+1)
   \   00000000   0x.... 0x....      LDR.W    R1,??DataTable23_6
   \   00000004   0xF881 0x019A      STRB     R0,[R1, #+410]
    496          }
   \   00000008   0x4770             BX       LR               ;; return
    497          
    498          /**
    499            * @brief  This interrupt handler is called to handle the Usart3 interruptes.
    500            *         from the BGM111
    501            * @param  None
    502            * @retval None
    503            */

   \                                 In section .text, align 2, keep-with-next
    504          void BGM111_UART_IRQHandler(UART_HandleTypeDef *huart)
    505          {
   \                     BGM111_UART_IRQHandler: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    506            /* Transmit register empty? */
    507            //if (USART_GetITStatus(BGM111_UART, USART_IT_TXE) == SET)
    508            if (__HAL_UART_GET_FLAG(huart, UART_FLAG_TXE) == SET)
   \   00000004   0x6820             LDR      R0,[R4, #+0]
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x0600             LSLS     R0,R0,#+24
   \   0000000A   0xD526             BPL.N    ??BGM111_UART_IRQHandler_0
    509            {
    510              /* Are we still sending data? */
    511              if (ble.tx_rd != ble.tx_wr)
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable23_6
   \   00000010   0xF890 0x00C9      LDRB     R0,[R0, #+201]
   \   00000014   0x.... 0x....      LDR.W    R1,??DataTable23_6
   \   00000018   0xF891 0x10C8      LDRB     R1,[R1, #+200]
   \   0000001C   0x4288             CMP      R0,R1
   \   0000001E   0xD015             BEQ.N    ??BGM111_UART_IRQHandler_1
    512              {
    513                /* Send a byte */
    514                USART_SendData(huart, ble.tx_buf[ble.tx_rd]);
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable23_6
   \   00000024   0x.... 0x....      LDR.W    R1,??DataTable23_6
   \   00000028   0xF891 0x10C9      LDRB     R1,[R1, #+201]
   \   0000002C   0x5C41             LDRB     R1,[R0, R1]
   \   0000002E   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000030   0x0020             MOVS     R0,R4
   \   00000032   0x.... 0x....      BL       USART_SendData
    515                /* Bump the index */
    516                ble.tx_rd = NextBufIdx(ble.tx_rd);
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable23_6
   \   0000003A   0xF890 0x00C9      LDRB     R0,[R0, #+201]
   \   0000003E   0x.... 0x....      BL       NextBufIdx
   \   00000042   0x.... 0x....      LDR.W    R1,??DataTable23_6
   \   00000046   0xF881 0x00C9      STRB     R0,[R1, #+201]
   \   0000004A   0xE006             B.N      ??BGM111_UART_IRQHandler_0
    517              }
    518              else
    519              {
    520                /* Turn off the transmit interrupt */
    521                __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
   \                     ??BGM111_UART_IRQHandler_1: (+1)
   \   0000004C   0x6820             LDR      R0,[R4, #+0]
   \   0000004E   0x68C0             LDR      R0,[R0, #+12]
   \   00000050   0xF07F 0x0180      MVNS     R1,#+128
   \   00000054   0x4008             ANDS     R0,R1,R0
   \   00000056   0x6821             LDR      R1,[R4, #+0]
   \   00000058   0x60C8             STR      R0,[R1, #+12]
    522              }
    523            }
    524            
    525            /* Was there an error? */
    526            if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE | 
    527                HAL_UART_ERROR_PE | UART_FLAG_NE | UART_FLAG_FE) == SET)
   \                     ??BGM111_UART_IRQHandler_0: (+1)
   \   0000005A   0x6820             LDR      R0,[R4, #+0]
   \   0000005C   0x6800             LDR      R0,[R0, #+0]
   \   0000005E   0xF010 0x000F      ANDS     R0,R0,#0xF
   \   00000062   0x280F             CMP      R0,#+15
   \   00000064   0xD108             BNE.N    ??BGM111_UART_IRQHandler_2
    528            {
    529              /* Reset the receive state */
    530              ble.rx_state = BGRX_SYNC;
   \   00000066   0x2000             MOVS     R0,#+0
   \   00000068   0x.... 0x....      LDR.W    R1,??DataTable23_6
   \   0000006C   0xF881 0x0194      STRB     R0,[R1, #+404]
    531              /* Clear the error by reading the data register */
    532              USART_ReceiveData(huart);
   \   00000070   0x0020             MOVS     R0,R4
   \   00000072   0x.... 0x....      BL       USART_ReceiveData
    533              /* We're done */
    534              return;
   \   00000076   0xE00B             B.N      ??BGM111_UART_IRQHandler_3
    535            }
    536          
    537            /* Was a new byte received? */
    538            if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE) == SET)
   \                     ??BGM111_UART_IRQHandler_2: (+1)
   \   00000078   0x6820             LDR      R0,[R4, #+0]
   \   0000007A   0x6800             LDR      R0,[R0, #+0]
   \   0000007C   0x0680             LSLS     R0,R0,#+26
   \   0000007E   0xD507             BPL.N    ??BGM111_UART_IRQHandler_4
    539            {
    540              /* Get the byte (this also clears the flag) */
    541              uint8_t c = USART_ReceiveData(huart);
   \   00000080   0x0020             MOVS     R0,R4
   \   00000082   0x.... 0x....      BL       USART_ReceiveData
   \   00000086   0x0005             MOVS     R5,R0
    542              /* Process the received character... */
    543              RoadBrd_ProcessBGMChar(c);
   \   00000088   0x0028             MOVS     R0,R5
   \   0000008A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000008C   0x.... 0x....      BL       RoadBrd_ProcessBGMChar
    544            }
    545          }
   \                     ??BGM111_UART_IRQHandler_4: (+1)
   \                     ??BGM111_UART_IRQHandler_3: (+1)
   \   00000090   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    546          
    547          /* Transmit data to the BGM111 module */
    548          /**
    549            * @brief  Returns the most recent received data by the USARTx peripheral.
    550            * @param  USARTx: Select the USART peripheral. 
    551            *   This parameter can be one of the following values:
    552            *   USART1, USART2, USART3, UART4 or UART5.
    553            * @retval The received data.
    554            */

   \                                 In section .text, align 4, keep-with-next
    555          void BGM111_Transmit(uint32_t len, uint8_t *data)
    556          {
   \                     BGM111_Transmit: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    557            uint32_t tempmsg;
    558            uint32_t timeout_Cnt;
    559            
    560            // Log MSG into buffer
    561            tempmsg = 0xff000000 | len;
   \   00000008   0xF054 0x407F      ORRS     R0,R4,#0xFF000000
   \   0000000C   0x0006             MOVS     R6,R0
    562            blemsgs.msgBuff[blemsgs.tx_wr] = tempmsg;
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable23_5
   \   00000012   0x.... 0x....      LDR.W    R1,??DataTable23_5
   \   00000016   0xF8B1 0x1320      LDRH     R1,[R1, #+800]
   \   0000001A   0xF840 0x6021      STR      R6,[R0, R1, LSL #+2]
    563            blemsgs.tx_wr = NextBufIdx(blemsgs.tx_wr);
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable23_5
   \   00000022   0xF8B0 0x0320      LDRH     R0,[R0, #+800]
   \   00000026   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000028   0x.... 0x....      BL       NextBufIdx
   \   0000002C   0x.... 0x....      LDR.W    R1,??DataTable23_5
   \   00000030   0xF8A1 0x0320      STRH     R0,[R1, #+800]
    564            tempmsg = (uint32_t)(data[0]<<24) + (uint32_t)(data[1]<<16) + (uint32_t)(data[2]<<8) + (uint32_t)(data[3]);
   \   00000034   0x7828             LDRB     R0,[R5, #+0]
   \   00000036   0x7869             LDRB     R1,[R5, #+1]
   \   00000038   0x0409             LSLS     R1,R1,#+16
   \   0000003A   0xEB11 0x6000      ADDS     R0,R1,R0, LSL #+24
   \   0000003E   0x78A9             LDRB     R1,[R5, #+2]
   \   00000040   0xEB10 0x2001      ADDS     R0,R0,R1, LSL #+8
   \   00000044   0x78E9             LDRB     R1,[R5, #+3]
   \   00000046   0x1808             ADDS     R0,R1,R0
   \   00000048   0x0006             MOVS     R6,R0
    565            blemsgs.msgBuff[blemsgs.tx_wr] = tempmsg;
   \   0000004A   0x.... 0x....      LDR.W    R0,??DataTable23_5
   \   0000004E   0x.... 0x....      LDR.W    R1,??DataTable23_5
   \   00000052   0xF8B1 0x1320      LDRH     R1,[R1, #+800]
   \   00000056   0xF840 0x6021      STR      R6,[R0, R1, LSL #+2]
    566            blemsgs.tx_wr = NextBufIdx(blemsgs.tx_wr);
   \   0000005A   0x.... 0x....      LDR.W    R0,??DataTable23_5
   \   0000005E   0xF8B0 0x0320      LDRH     R0,[R0, #+800]
   \   00000062   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000064   0x.... 0x....      BL       NextBufIdx
   \   00000068   0x.... 0x....      LDR.W    R1,??DataTable23_5
   \   0000006C   0xF8A1 0x0320      STRH     R0,[R1, #+800]
    567            tempmsg = (uint32_t)(data[4]<<24) + (uint32_t)(data[5]<<16) + (uint32_t)(data[6]<<8) + (uint32_t)(data[7]);
   \   00000070   0x7928             LDRB     R0,[R5, #+4]
   \   00000072   0x7969             LDRB     R1,[R5, #+5]
   \   00000074   0x0409             LSLS     R1,R1,#+16
   \   00000076   0xEB11 0x6000      ADDS     R0,R1,R0, LSL #+24
   \   0000007A   0x79A9             LDRB     R1,[R5, #+6]
   \   0000007C   0xEB10 0x2001      ADDS     R0,R0,R1, LSL #+8
   \   00000080   0x79E9             LDRB     R1,[R5, #+7]
   \   00000082   0x1808             ADDS     R0,R1,R0
   \   00000084   0x0006             MOVS     R6,R0
    568            blemsgs.msgBuff[blemsgs.tx_wr] = tempmsg;
   \   00000086   0x.... 0x....      LDR.W    R0,??DataTable23_5
   \   0000008A   0x.... 0x....      LDR.W    R1,??DataTable23_5
   \   0000008E   0xF8B1 0x1320      LDRH     R1,[R1, #+800]
   \   00000092   0xF840 0x6021      STR      R6,[R0, R1, LSL #+2]
    569            blemsgs.tx_wr = NextBufIdx(blemsgs.tx_wr);
   \   00000096   0x.... 0x....      LDR.W    R0,??DataTable23_5
   \   0000009A   0xF8B0 0x0320      LDRH     R0,[R0, #+800]
   \   0000009E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000A0   0x.... 0x....      BL       NextBufIdx
   \   000000A4   0x.... 0x....      LDR.W    R1,??DataTable23_5
   \   000000A8   0xF8A1 0x0320      STRH     R0,[R1, #+800]
    570            
    571            /* Add bytes when there is space, wait if necessary */
    572            // OK...But we Can't wait forever...Will place a timeout Count.
    573            timeout_Cnt = TX_TIMEOUT_CNT;
   \   000000AC   0xF44F 0x60FA      MOV      R0,#+2000
   \   000000B0   0x0007             MOVS     R7,R0
    574            
    575            while (len) {
   \                     ??BGM111_Transmit_0: (+1)
   \   000000B2   0x2C00             CMP      R4,#+0
   \   000000B4   0xD045             BEQ.N    ??BGM111_Transmit_1
    576              /* Get the next write index */
    577              uint8_t nextidx = NextBufIdx(ble.tx_wr);
   \   000000B6   0x.... 0x....      LDR.W    R0,??DataTable23_6
   \   000000BA   0xF890 0x00C8      LDRB     R0,[R0, #+200]
   \   000000BE   0x.... 0x....      BL       NextBufIdx
   \   000000C2   0x4680             MOV      R8,R0
    578              /* We're not hitting the read index? (There is space?) */
    579              if (nextidx != ble.tx_rd)
   \   000000C4   0x4640             MOV      R0,R8
   \   000000C6   0x.... 0x....      LDR.W    R1,??DataTable23_6
   \   000000CA   0xF891 0x10C9      LDRB     R1,[R1, #+201]
   \   000000CE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000D0   0x4288             CMP      R0,R1
   \   000000D2   0xD023             BEQ.N    ??BGM111_Transmit_2
    580              {
    581                /* Put the data in the buffer */
    582                ble.tx_buf[ble.tx_wr] = *data;
   \   000000D4   0x7828             LDRB     R0,[R5, #+0]
   \   000000D6   0x.... 0x....      LDR.W    R1,??DataTable23_6
   \   000000DA   0x.... 0x....      LDR.W    R2,??DataTable23_6
   \   000000DE   0xF892 0x20C8      LDRB     R2,[R2, #+200]
   \   000000E2   0x5488             STRB     R0,[R1, R2]
    583          
    584                /* Disable interrupt */
    585                HAL_NVIC_DisableIRQ(USART3_IRQn);
   \   000000E4   0x2027             MOVS     R0,#+39
   \   000000E6   0x.... 0x....      BL       HAL_NVIC_DisableIRQ
    586                /* Trigger an interrupt if we're starting with an empty buffer */
    587                if (ble.tx_wr == ble.tx_rd)
   \   000000EA   0x.... 0x....      LDR.W    R0,??DataTable23_6
   \   000000EE   0xF890 0x00C8      LDRB     R0,[R0, #+200]
   \   000000F2   0x.... 0x....      LDR.W    R1,??DataTable23_6
   \   000000F6   0xF891 0x10C9      LDRB     R1,[R1, #+201]
   \   000000FA   0x4288             CMP      R0,R1
   \   000000FC   0xD101             BNE.N    ??BGM111_Transmit_3
    588                {
    589                  HAL_UART_EnableBGM_TXE();
   \   000000FE   0x.... 0x....      BL       HAL_UART_EnableBGM_TXE
    590                }
    591                /* Increment the write index */
    592                ble.tx_wr = nextidx;
   \                     ??BGM111_Transmit_3: (+1)
   \   00000102   0x.... 0x....      LDR.W    R0,??DataTable23_6
   \   00000106   0xF880 0x80C8      STRB     R8,[R0, #+200]
    593                /* Enable interrupt */
    594                HAL_NVIC_EnableIRQ(USART3_IRQn);
   \   0000010A   0x2027             MOVS     R0,#+39
   \   0000010C   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    595          
    596                /* Update the incoming data length and pointer */
    597                len--;
   \   00000110   0x1E64             SUBS     R4,R4,#+1
    598                data++;
   \   00000112   0x1C6D             ADDS     R5,R5,#+1
    599                //Found Space...Reset Count.
    600                timeout_Cnt = TX_TIMEOUT_CNT;
   \   00000114   0xF44F 0x60FA      MOV      R0,#+2000
   \   00000118   0x0007             MOVS     R7,R0
   \   0000011A   0xE7CA             B.N      ??BGM111_Transmit_0
    601              }
    602              else
    603              {
    604                //Decrement Count
    605                if ( timeout_Cnt-- == 0)
   \                     ??BGM111_Transmit_2: (+1)
   \   0000011C   0x0038             MOVS     R0,R7
   \   0000011E   0x1E47             SUBS     R7,R0,#+1
   \   00000120   0x2800             CMP      R0,#+0
   \   00000122   0xD1C6             BNE.N    ??BGM111_Transmit_0
    606                {
    607                  // If this happens...NOT BOOTED..Clear ths flag or infinite loop.
    608                  ble.booted = false;
   \   00000124   0x2000             MOVS     R0,#+0
   \   00000126   0x.... 0x....      LDR.W    R1,??DataTable23_6
   \   0000012A   0xF881 0x0196      STRB     R0,[R1, #+406]
    609                  // We have detected a ERROR_TXBGMBUF_FULL error on BGM111...Log it!
    610                  RdBrd_ErrCdLogErrCd( ERROR_TXBGMBUF_FULL, MODULE_bgm111 );
   \   0000012E   0x2102             MOVS     R1,#+2
   \   00000130   0x200F             MOVS     R0,#+15
   \   00000132   0x.... 0x....      BL       RdBrd_ErrCdLogErrCd
    611                  RdBrd_BlinkErrCd( ERROR_TXBGMBUF_FULL );
   \   00000136   0x200F             MOVS     R0,#+15
   \   00000138   0x.... 0x....      BL       RdBrd_BlinkErrCd
    612                  HAL_NVIC_SystemReset();
   \   0000013C   0x.... 0x....      BL       HAL_NVIC_SystemReset
   \   00000140   0xE7B7             B.N      ??BGM111_Transmit_0
    613                }
    614              }
    615            }
    616          }
   \                     ??BGM111_Transmit_1: (+1)
   \   00000142   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    617          
    618          /**
    619            * @brief  Transmits single data through the USARTx peripheral.
    620            * @param  USARTx: Select the USART peripheral. 
    621            *   This parameter can be one of the following values:
    622            *   USART1, USART2, USART3, UART4 or UART5.
    623            * @param  Data: the data to transmit.
    624            * @retval None.
    625            */

   \                                 In section .text, align 2, keep-with-next
    626          void USART_SendData(UART_HandleTypeDef *huart, uint16_t Data)
    627          {
    628            /* Transmit Data */
    629            huart->Instance->DR = (Data & (uint16_t)0x01FF);
   \                     USART_SendData: (+1)
   \   00000000   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000002   0x05CA             LSLS     R2,R1,#+23       ;; ZeroExtS R2,R1,#+23,#+23
   \   00000004   0x0DD2             LSRS     R2,R2,#+23
   \   00000006   0x6803             LDR      R3,[R0, #+0]
   \   00000008   0x605A             STR      R2,[R3, #+4]
    630          }
   \   0000000A   0x4770             BX       LR               ;; return
    631          
    632          /**
    633            * @brief  Returns the most recent received data by the USARTx peripheral.
    634            * @param  USARTx: Select the USART peripheral. 
    635            *   This parameter can be one of the following values:
    636            *   USART1, USART2, USART3, UART4 or UART5.
    637            * @retval The received data.
    638            */

   \                                 In section .text, align 2, keep-with-next
    639          uint16_t USART_ReceiveData(UART_HandleTypeDef *huart)
    640          {
    641            /* Receive Data */
    642            return (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
   \                     USART_ReceiveData: (+1)
   \   00000000   0x6800             LDR      R0,[R0, #+0]
   \   00000002   0x6840             LDR      R0,[R0, #+4]
   \   00000004   0x05C0             LSLS     R0,R0,#+23       ;; ZeroExtS R0,R0,#+23,#+23
   \   00000006   0x0DC0             LSRS     R0,R0,#+23
   \   00000008   0x4770             BX       LR               ;; return
    643          }
    644          
    645          /**
    646            * @brief  This routine Process the passed character as part of the process of building status
    647            *         from the BGM111
    648            * @param  uint8_t c: Character to process.
    649            * @retval HAL_StatusTypeDef:     HAL_OK:       Tasking of block of data to UART success.
    650            *                                HAL_ERROR:    Error found in Tasking or data passed.
    651            *                                HAL_BUSY:     UART is busy.
    652            *                                HAL_TIMEOUT:  UART timed out.
    653            */

   \                                 In section .text, align 2, keep-with-next
    654          HAL_StatusTypeDef RoadBrd_ProcessBGMChar(uint8_t c)
    655          {
   \                     RoadBrd_ProcessBGMChar: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB09E             SUB      SP,SP,#+120
   \   00000004   0x0004             MOVS     R4,R0
    656          //  static uint8_t header_cnt, payload_cnt, payload_len;
    657            HAL_StatusTypeDef Status;
    658            static uint8_t tempBffr2[60];
    659            char* tempPstr;
    660            char tempstr[60];
    661          #ifndef XML_SHRT  
    662            char tempstr2[60];
    663          #endif
    664          //  int x;
    665          
    666            uint8_t tempBffr3[60];
    667            static uint8_t in_ptr = 0;
    668            
    669            // First pull new character into buffer.
    670            tempBffr2[in_ptr++] = c;
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable23_33
   \   0000000A   0x.... 0x....      LDR.W    R1,??DataTable23_34
   \   0000000E   0x7809             LDRB     R1,[R1, #+0]
   \   00000010   0x5444             STRB     R4,[R0, R1]
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable23_34
   \   00000016   0x7800             LDRB     R0,[R0, #+0]
   \   00000018   0x1C40             ADDS     R0,R0,#+1
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable23_34
   \   0000001E   0x7008             STRB     R0,[R1, #+0]
    671            // Now, Did we get a termination character?
    672            if( (c == 0x0a)  ||
    673                (c == '?') )
   \   00000020   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000022   0x2C0A             CMP      R4,#+10
   \   00000024   0xD003             BEQ.N    ??RoadBrd_ProcessBGMChar_0
   \   00000026   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000028   0x2C3F             CMP      R4,#+63
   \   0000002A   0xF040 0x8180      BNE.W    ??RoadBrd_ProcessBGMChar_1
    674            {
    675              // Reset Ptr.
    676              in_ptr = 0;
   \                     ??RoadBrd_ProcessBGMChar_0: (+1)
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x.... 0x....      LDR.W    R1,??DataTable23_34
   \   00000034   0x7008             STRB     R0,[R1, #+0]
    677          
    678              // Yes...We will now test contents of buffer. And then reset ptr back to 0.
    679              sprintf( (char *)tempBffr3, "\r\n<<FULL STRING>>: %s \r\n", tempBffr2);
   \   00000036   0x.... 0x....      LDR.W    R2,??DataTable23_33
   \   0000003A   0x.... 0x....      LDR.W    R1,??DataTable23_35
   \   0000003E   0x4668             MOV      R0,SP
   \   00000040   0x.... 0x....      BL       sprintf
    680              Status = RoadBrd_UART_Transmit(MONITOR_UART, tempBffr3);
   \   00000044   0x4669             MOV      R1,SP
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000004C   0x0006             MOVS     R6,R0
    681              if (Status != HAL_OK)
   \   0000004E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000050   0x2E00             CMP      R6,#+0
   \   00000052   0xD002             BEQ.N    ??RoadBrd_ProcessBGMChar_2
    682                return Status;
   \   00000054   0x0030             MOVS     R0,R6
   \   00000056   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000058   0xE16B             B.N      ??RoadBrd_ProcessBGMChar_3
    683              // Test Strings for Key items.
    684              // Boot String?
    685              if (strncmp((char *)tempBffr2,"Boot",4) == 0)
   \                     ??RoadBrd_ProcessBGMChar_2: (+1)
   \   0000005A   0x2204             MOVS     R2,#+4
   \   0000005C   0x.... 0x....      LDR.W    R1,??DataTable23_36
   \   00000060   0x.... 0x....      LDR.W    R0,??DataTable23_33
   \   00000064   0x.... 0x....      BL       strncmp
   \   00000068   0x2800             CMP      R0,#+0
   \   0000006A   0xD112             BNE.N    ??RoadBrd_ProcessBGMChar_4
    686              {
    687                // Yes....Set Boot Flag.
    688                ble.booted = true;
   \   0000006C   0x2001             MOVS     R0,#+1
   \   0000006E   0x....             LDR.N    R1,??DataTable23_6
   \   00000070   0xF881 0x0196      STRB     R0,[R1, #+406]
    689                // If we are booted....Then lets arm TACK Test Code.
    690                ble.data_Connection = false;
   \   00000074   0x2000             MOVS     R0,#+0
   \   00000076   0x....             LDR.N    R1,??DataTable23_6
   \   00000078   0xF881 0x0198      STRB     R0,[R1, #+408]
    691                ble.CMD_Mode = false;
   \   0000007C   0x2000             MOVS     R0,#+0
   \   0000007E   0x....             LDR.N    R1,??DataTable23_6
   \   00000080   0xF881 0x0199      STRB     R0,[R1, #+409]
    692                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)"<ble.booted> ");
   \   00000084   0x.... 0x....      LDR.W    R1,??DataTable23_37
   \   00000088   0x2000             MOVS     R0,#+0
   \   0000008A   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000008E   0x0006             MOVS     R6,R0
   \   00000090   0xE14D             B.N      ??RoadBrd_ProcessBGMChar_1
    693              }
    694              // Connection String?
    695              else if (strncmp((char *)tempBffr2,"Connected",9) == 0)
   \                     ??RoadBrd_ProcessBGMChar_4: (+1)
   \   00000092   0x2209             MOVS     R2,#+9
   \   00000094   0x....             LDR.N    R1,??DataTable23_38
   \   00000096   0x....             LDR.N    R0,??DataTable23_33
   \   00000098   0x.... 0x....      BL       strncmp
   \   0000009C   0x2800             CMP      R0,#+0
   \   0000009E   0xD115             BNE.N    ??RoadBrd_ProcessBGMChar_5
    696              {
    697                // Yes....Set Boot Flag.
    698                ble.connection = true;
   \   000000A0   0x2001             MOVS     R0,#+1
   \   000000A2   0x....             LDR.N    R1,??DataTable23_6
   \   000000A4   0xF881 0x0197      STRB     R0,[R1, #+407]
    699                ble.TackArmed = TACK_ARMED;
   \   000000A8   0x2001             MOVS     R0,#+1
   \   000000AA   0x....             LDR.N    R1,??DataTable23_6
   \   000000AC   0xF881 0x019A      STRB     R0,[R1, #+410]
    700                ble.TackCnt = 0;
   \   000000B0   0x2000             MOVS     R0,#+0
   \   000000B2   0x....             LDR.N    R1,??DataTable23_6
   \   000000B4   0xF881 0x019B      STRB     R0,[R1, #+411]
    701                RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)"<ble.TackArmed = TACK_ARMED>");
   \   000000B8   0x....             LDR.N    R1,??DataTable23_39
   \   000000BA   0x2000             MOVS     R0,#+0
   \   000000BC   0x.... 0x....      BL       RoadBrd_UART_Transmit
    702                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)"<ble.connection> ");
   \   000000C0   0x....             LDR.N    R1,??DataTable23_40
   \   000000C2   0x2000             MOVS     R0,#+0
   \   000000C4   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000000C8   0x0006             MOVS     R6,R0
   \   000000CA   0xE130             B.N      ??RoadBrd_ProcessBGMChar_1
    703          
    704              }
    705              // Disconnection String?
    706              else if (strncmp((char *)tempBffr2,"Disconnected",12) == 0)
   \                     ??RoadBrd_ProcessBGMChar_5: (+1)
   \   000000CC   0x220C             MOVS     R2,#+12
   \   000000CE   0x....             LDR.N    R1,??DataTable23_41
   \   000000D0   0x....             LDR.N    R0,??DataTable23_33
   \   000000D2   0x.... 0x....      BL       strncmp
   \   000000D6   0x2800             CMP      R0,#+0
   \   000000D8   0xD121             BNE.N    ??RoadBrd_ProcessBGMChar_6
    707              {
    708                // Yes....Clear Flags.
    709                ble.connection = false;
   \   000000DA   0x2000             MOVS     R0,#+0
   \   000000DC   0x....             LDR.N    R1,??DataTable23_6
   \   000000DE   0xF881 0x0197      STRB     R0,[R1, #+407]
    710                ble.data_Connection = false;
   \   000000E2   0x2000             MOVS     R0,#+0
   \   000000E4   0x....             LDR.N    R1,??DataTable23_6
   \   000000E6   0xF881 0x0198      STRB     R0,[R1, #+408]
    711                ble.CMD_Mode = false;
   \   000000EA   0x2000             MOVS     R0,#+0
   \   000000EC   0x....             LDR.N    R1,??DataTable23_6
   \   000000EE   0xF881 0x0199      STRB     R0,[R1, #+409]
    712                ble.TackArmed = TACK_ARMED;
   \   000000F2   0x2001             MOVS     R0,#+1
   \   000000F4   0x....             LDR.N    R1,??DataTable23_6
   \   000000F6   0xF881 0x019A      STRB     R0,[R1, #+410]
    713                ble.TackCnt = 0;
   \   000000FA   0x2000             MOVS     R0,#+0
   \   000000FC   0x....             LDR.N    R1,??DataTable23_6
   \   000000FE   0xF881 0x019B      STRB     R0,[R1, #+411]
    714                RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)"<ble.TackArmed = TACK_ARMED>");
   \   00000102   0x....             LDR.N    R1,??DataTable23_39
   \   00000104   0x2000             MOVS     R0,#+0
   \   00000106   0x.... 0x....      BL       RoadBrd_UART_Transmit
    715                ClrDataStructure();                           // Clear Backup data structure.
   \   0000010A   0x.... 0x....      BL       ClrDataStructure
    716                ClrAnalyticsRepeat();                          // Clear Frame Repeat Count.
   \   0000010E   0x.... 0x....      BL       ClrAnalyticsRepeat
    717                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)"<DISCONNECTED> ");
   \   00000112   0x....             LDR.N    R1,??DataTable23_42
   \   00000114   0x2000             MOVS     R0,#+0
   \   00000116   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000011A   0x0006             MOVS     R6,R0
   \   0000011C   0xE107             B.N      ??RoadBrd_ProcessBGMChar_1
    718              }
    719              // Data String?
    720              else if (strncmp((char *)tempBffr2,"DATA",4) == 0)
   \                     ??RoadBrd_ProcessBGMChar_6: (+1)
   \   0000011E   0x2204             MOVS     R2,#+4
   \   00000120   0x....             LDR.N    R1,??DataTable23_43
   \   00000122   0x....             LDR.N    R0,??DataTable23_33
   \   00000124   0x.... 0x....      BL       strncmp
   \   00000128   0x2800             CMP      R0,#+0
   \   0000012A   0xD120             BNE.N    ??RoadBrd_ProcessBGMChar_7
    721              {
    722                // 1. Send String to Server to indicate new CMD Mode.
    723                sprintf( (char *)tempBffr2, "<STATUS>CMD</STATUS>" );
   \   0000012C   0x....             LDR.N    R1,??DataTable23_44
   \   0000012E   0x....             LDR.N    R0,??DataTable23_33
   \   00000130   0x.... 0x....      BL       sprintf
    724                Status = RoadBrd_UART_Transmit(MONITOR_UART, tempBffr2);
   \   00000134   0x....             LDR.N    R1,??DataTable23_33
   \   00000136   0x2000             MOVS     R0,#+0
   \   00000138   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000013C   0x0006             MOVS     R6,R0
    725                if (Status != HAL_OK)
   \   0000013E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000140   0x2E00             CMP      R6,#+0
   \   00000142   0xD002             BEQ.N    ??RoadBrd_ProcessBGMChar_8
    726                  return Status;
   \   00000144   0x0030             MOVS     R0,R6
   \   00000146   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000148   0xE0F3             B.N      ??RoadBrd_ProcessBGMChar_3
    727                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), tempBffr2);
   \                     ??RoadBrd_ProcessBGMChar_8: (+1)
   \   0000014A   0x....             LDR.N    R0,??DataTable23_33
   \   0000014C   0x.... 0x....      BL       strlen
   \   00000150   0x....             LDR.N    R1,??DataTable23_33
   \   00000152   0x.... 0x....      BL       BGM111_Transmit
    728                
    729                // 2. Set the Timer to the RD_Sound at 1 Second Increments.
    730                RoadBrd_Set_TmpRdSndTickCnt( CMD_TIME );                  // One Second Ticks.
   \   00000156   0x200A             MOVS     R0,#+10
   \   00000158   0x.... 0x....      BL       RoadBrd_Set_TmpRdSndTickCnt
    731                
    732                // 3. Set CMD_Mode Active.
    733                BGM111_SetCMD_Mode( true );
   \   0000015C   0x2001             MOVS     R0,#+1
   \   0000015E   0x.... 0x....      BL       BGM111_SetCMD_Mode
    734                
    735                // Final Status.
    736                //ble.data_Connection = true;
    737                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)"<ble.data_Connection> ");
   \   00000162   0x....             LDR.N    R1,??DataTable23_45
   \   00000164   0x2000             MOVS     R0,#+0
   \   00000166   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000016A   0x0006             MOVS     R6,R0
   \   0000016C   0xE0DF             B.N      ??RoadBrd_ProcessBGMChar_1
    738              }
    739              // TACK String?
    740              else if (strncmp((char *)tempBffr2,"<TACK>",6) == 0)
   \                     ??RoadBrd_ProcessBGMChar_7: (+1)
   \   0000016E   0x2206             MOVS     R2,#+6
   \   00000170   0x....             LDR.N    R1,??DataTable23_46
   \   00000172   0x....             LDR.N    R0,??DataTable23_33
   \   00000174   0x.... 0x....      BL       strncmp
   \   00000178   0x2800             CMP      R0,#+0
   \   0000017A   0xF040 0x80C2      BNE.W    ??RoadBrd_ProcessBGMChar_9
    741              {
    742                // CMD_Mode active?
    743                if ( BGM111_CMD_Mode() )
   \   0000017E   0x.... 0x....      BL       BGM111_CMD_Mode
   \   00000182   0x2800             CMP      R0,#+0
   \   00000184   0xD02E             BEQ.N    ??RoadBrd_ProcessBGMChar_10
    744                {
    745                  // Send String to Server.
    746                  sprintf( (char *)tempBffr3, "<STATUS>DATA_SYNC</STATUS>" );
   \   00000186   0x....             LDR.N    R1,??DataTable23_47
   \   00000188   0x4668             MOV      R0,SP
   \   0000018A   0x.... 0x....      BL       sprintf
    747                  Status = RoadBrd_UART_Transmit(MONITOR_UART, tempBffr3);
   \   0000018E   0x4669             MOV      R1,SP
   \   00000190   0x2000             MOVS     R0,#+0
   \   00000192   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000196   0x0006             MOVS     R6,R0
    748                  if (Status != HAL_OK)
   \   00000198   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000019A   0x2E00             CMP      R6,#+0
   \   0000019C   0xD002             BEQ.N    ??RoadBrd_ProcessBGMChar_11
    749                    return Status;
   \   0000019E   0x0030             MOVS     R0,R6
   \   000001A0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001A2   0xE0C6             B.N      ??RoadBrd_ProcessBGMChar_3
    750                  BGM111_Transmit((uint32_t)(strlen((char *)tempBffr3)), tempBffr3);
   \                     ??RoadBrd_ProcessBGMChar_11: (+1)
   \   000001A4   0x4668             MOV      R0,SP
   \   000001A6   0x.... 0x....      BL       strlen
   \   000001AA   0x4669             MOV      R1,SP
   \   000001AC   0x.... 0x....      BL       BGM111_Transmit
    751                  // Clear CMD_Mode.
    752                  BGM111_SetCMD_Mode( false );
   \   000001B0   0x2000             MOVS     R0,#+0
   \   000001B2   0x.... 0x....      BL       BGM111_SetCMD_Mode
    753                  // Set Data_Connection Mode.
    754                  BGM111_SetDataConnected( true );
   \   000001B6   0x2001             MOVS     R0,#+1
   \   000001B8   0x.... 0x....      BL       BGM111_SetDataConnected
    755                  // Change RD_Sound Timer to correct value for Data Mode.
    756                  // First Reload FLASH Frames
    757                  RoadBrd_WWDG_VerifyFrame();
   \   000001BC   0x.... 0x....      BL       RoadBrd_WWDG_VerifyFrame
    758                  // NOW...Reload Active Timer.
    759                  Set_RdSndTickCnt( RoadBrd_Get_RdSndTickCnt() );
   \   000001C0   0x.... 0x....      BL       RoadBrd_Get_RdSndTickCnt
   \   000001C4   0x.... 0x....      BL       Set_RdSndTickCnt
    760                  // Now Set Correct SYNC Mode.
    761                  ble.TackArmed = TACK_SYNC;
   \   000001C8   0x2003             MOVS     R0,#+3
   \   000001CA   0x....             LDR.N    R1,??DataTable23_6
   \   000001CC   0xF881 0x019A      STRB     R0,[R1, #+410]
    762                  ble.TackCnt = 0;
   \   000001D0   0x2000             MOVS     R0,#+0
   \   000001D2   0x....             LDR.N    R1,??DataTable23_6
   \   000001D4   0xF881 0x019B      STRB     R0,[R1, #+411]
    763                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)"<ble.TackArmed=TACK_SYNC>");
   \   000001D8   0x....             LDR.N    R1,??DataTable23_48
   \   000001DA   0x2000             MOVS     R0,#+0
   \   000001DC   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000001E0   0x0006             MOVS     R6,R0
   \   000001E2   0xE038             B.N      ??RoadBrd_ProcessBGMChar_12
    764                }
    765                else if (ble.TackArmed == TACK_ARMED2)
   \                     ??RoadBrd_ProcessBGMChar_10: (+1)
   \   000001E4   0x....             LDR.N    R0,??DataTable23_6
   \   000001E6   0xF890 0x019A      LDRB     R0,[R0, #+410]
   \   000001EA   0x2802             CMP      R0,#+2
   \   000001EC   0xD122             BNE.N    ??RoadBrd_ProcessBGMChar_13
    766                {
    767                  ble.TackArmed = TACK_SYNC;
   \   000001EE   0x2003             MOVS     R0,#+3
   \   000001F0   0x....             LDR.N    R1,??DataTable23_6
   \   000001F2   0xF881 0x019A      STRB     R0,[R1, #+410]
    768                  ble.TackCnt = 0;
   \   000001F6   0x2000             MOVS     R0,#+0
   \   000001F8   0x....             LDR.N    R1,??DataTable23_6
   \   000001FA   0xF881 0x019B      STRB     R0,[R1, #+411]
    769                  sprintf( (char *)tempBffr3, "<STATUS>DATA_SYNC</STATUS>" );
   \   000001FE   0x....             LDR.N    R1,??DataTable23_47
   \   00000200   0x4668             MOV      R0,SP
   \   00000202   0x.... 0x....      BL       sprintf
    770                  Status = RoadBrd_UART_Transmit(MONITOR_UART, tempBffr3);
   \   00000206   0x4669             MOV      R1,SP
   \   00000208   0x2000             MOVS     R0,#+0
   \   0000020A   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000020E   0x0006             MOVS     R6,R0
    771                  if (Status != HAL_OK)
   \   00000210   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000212   0x2E00             CMP      R6,#+0
   \   00000214   0xD002             BEQ.N    ??RoadBrd_ProcessBGMChar_14
    772                    return Status;
   \   00000216   0x0030             MOVS     R0,R6
   \   00000218   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000021A   0xE08A             B.N      ??RoadBrd_ProcessBGMChar_3
    773                  BGM111_Transmit((uint32_t)(strlen((char *)tempBffr3)), tempBffr3);
   \                     ??RoadBrd_ProcessBGMChar_14: (+1)
   \   0000021C   0x4668             MOV      R0,SP
   \   0000021E   0x.... 0x....      BL       strlen
   \   00000222   0x4669             MOV      R1,SP
   \   00000224   0x.... 0x....      BL       BGM111_Transmit
    774                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)"<ble.TackArmed=TACK_SYNC>");
   \   00000228   0x....             LDR.N    R1,??DataTable23_48
   \   0000022A   0x2000             MOVS     R0,#+0
   \   0000022C   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000230   0x0006             MOVS     R6,R0
   \   00000232   0xE010             B.N      ??RoadBrd_ProcessBGMChar_12
    775                }
    776                else if (ble.TackArmed == TACK_SYNC)
   \                     ??RoadBrd_ProcessBGMChar_13: (+1)
   \   00000234   0x....             LDR.N    R0,??DataTable23_6
   \   00000236   0xF890 0x019A      LDRB     R0,[R0, #+410]
   \   0000023A   0x2803             CMP      R0,#+3
   \   0000023C   0xD10B             BNE.N    ??RoadBrd_ProcessBGMChar_12
    777                {
    778                  ble.TackCnt = 0;
   \   0000023E   0x2000             MOVS     R0,#+0
   \   00000240   0x....             LDR.N    R1,??DataTable23_6
   \   00000242   0xF881 0x019B      STRB     R0,[R1, #+411]
    779                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)"<TACK Received.>");
   \   00000246   0x....             LDR.N    R1,??DataTable23_49
   \   00000248   0x2000             MOVS     R0,#+0
   \   0000024A   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000024E   0x0006             MOVS     R6,R0
    780                  // Set Sync Flag for Frame.
    781                    BGM111_SetSyncFlg( SYNC_PROC );
   \   00000250   0x2001             MOVS     R0,#+1
   \   00000252   0x.... 0x....      BL       BGM111_SetSyncFlg
    782                }
    783                // OK...Now we need to process what is in the TACK Section.
    784          #ifdef XML_SHRT      
    785                //********************************************************************************
    786                //*
    787                //*  Abbreviate XML Code Processing here for Platinum Initial Release
    788                //*
    789                //********************************************************************************
    790                // A. Strip off Opening <TACK>.
    791                tempPstr = (char *)&tempBffr2[6];
   \                     ??RoadBrd_ProcessBGMChar_12: (+1)
   \   00000256   0x....             LDR.N    R0,??DataTable23_50
   \   00000258   0x0005             MOVS     R5,R0
    792                strcpy(tempstr, tempPstr);
   \   0000025A   0x0029             MOVS     R1,R5
   \   0000025C   0xA80F             ADD      R0,SP,#+60
   \   0000025E   0x.... 0x....      BL       strcpy
    793                //************************ SEQUENCE OF TEST TO TYPE OF OPERATION
    794                // B. Time to Test String
    795                // Is this a <CMD>/Monitor Command
    796                tempPstr = strstr( tempstr, "</TACK>" );
   \   00000262   0x....             LDR.N    R1,??DataTable23_51
   \   00000264   0xA80F             ADD      R0,SP,#+60
   \   00000266   0x.... 0x....      BL       strstr
   \   0000026A   0x0005             MOVS     R5,R0
    797                if (tempPstr  != NULL)
   \   0000026C   0x2D00             CMP      R5,#+0
   \   0000026E   0xD02F             BEQ.N    ??RoadBrd_ProcessBGMChar_15
    798                {
    799                  // Now NULL Out where Tag is at.
    800                  *tempPstr = NULL;
   \   00000270   0x2000             MOVS     R0,#+0
   \   00000272   0x7028             STRB     R0,[R5, #+0]
    801                  // Is this a Monitor Command?
    802                  if (strlen(tempstr) > 0)
   \   00000274   0xA80F             ADD      R0,SP,#+60
   \   00000276   0x.... 0x....      BL       strlen
   \   0000027A   0x2800             CMP      R0,#+0
   \   0000027C   0xD028             BEQ.N    ??RoadBrd_ProcessBGMChar_15
    803                  {
    804                    // Finally, Send string to Parser.
    805                    Status = RoadBrd_ParserTsk(tempstr);
   \   0000027E   0xA80F             ADD      R0,SP,#+60
   \   00000280   0x.... 0x....      BL       RoadBrd_ParserTsk
   \   00000284   0x0006             MOVS     R6,R0
    806                    if (Status == HAL_BUSY)
   \   00000286   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000288   0x2E02             CMP      R6,#+2
   \   0000028A   0xD10F             BNE.N    ??RoadBrd_ProcessBGMChar_16
    807                    {
    808                      sprintf( (char *)tempBffr3, "<STATUS>CMD_BUSY</STATUS>" );
   \   0000028C   0x....             LDR.N    R1,??DataTable23_52
   \   0000028E   0x4668             MOV      R0,SP
   \   00000290   0x.... 0x....      BL       sprintf
    809                      Status = RoadBrd_UART_Transmit(MONITOR_UART, tempBffr3);
   \   00000294   0x4669             MOV      R1,SP
   \   00000296   0x2000             MOVS     R0,#+0
   \   00000298   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000029C   0x0006             MOVS     R6,R0
    810                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), tempBffr2);
   \   0000029E   0x....             LDR.N    R0,??DataTable23_33
   \   000002A0   0x.... 0x....      BL       strlen
   \   000002A4   0x....             LDR.N    R1,??DataTable23_33
   \   000002A6   0x.... 0x....      BL       BGM111_Transmit
   \   000002AA   0xE011             B.N      ??RoadBrd_ProcessBGMChar_15
    811                    }
    812                    else if (Status != HAL_OK)
   \                     ??RoadBrd_ProcessBGMChar_16: (+1)
   \   000002AC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000002AE   0x2E00             CMP      R6,#+0
   \   000002B0   0xD00E             BEQ.N    ??RoadBrd_ProcessBGMChar_15
    813                    {
    814                      sprintf( (char *)tempBffr3, "<STATUS>CMD_ERROR</STATUS>" );
   \   000002B2   0x....             LDR.N    R1,??DataTable23_53
   \   000002B4   0x4668             MOV      R0,SP
   \   000002B6   0x.... 0x....      BL       sprintf
    815                      Status = RoadBrd_UART_Transmit(MONITOR_UART, tempBffr3);
   \   000002BA   0x4669             MOV      R1,SP
   \   000002BC   0x2000             MOVS     R0,#+0
   \   000002BE   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000002C2   0x0006             MOVS     R6,R0
    816                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), tempBffr2);
   \   000002C4   0x....             LDR.N    R0,??DataTable23_33
   \   000002C6   0x.... 0x....      BL       strlen
   \   000002CA   0x....             LDR.N    R1,??DataTable23_33
   \   000002CC   0x.... 0x....      BL       BGM111_Transmit
    817                    }
    818                  }
    819                }
    820                // Generate an ACK Report.
    821                sprintf( (char *)tempBffr2, "<STATUS>ST_ACK:%s</STATUS>", RoadBrd_WWDG_GetTickString() );
   \                     ??RoadBrd_ProcessBGMChar_15: (+1)
   \   000002D0   0x.... 0x....      BL       RoadBrd_WWDG_GetTickString
   \   000002D4   0x0002             MOVS     R2,R0
   \   000002D6   0x....             LDR.N    R1,??DataTable23_54
   \   000002D8   0x....             LDR.N    R0,??DataTable23_33
   \   000002DA   0x.... 0x....      BL       sprintf
    822                Status = RoadBrd_UART_Transmit(MONITOR_UART, tempBffr2);
   \   000002DE   0x....             LDR.N    R1,??DataTable23_33
   \   000002E0   0x2000             MOVS     R0,#+0
   \   000002E2   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000002E6   0x0006             MOVS     R6,R0
    823                if (Status != HAL_OK)
   \   000002E8   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000002EA   0x2E00             CMP      R6,#+0
   \   000002EC   0xD002             BEQ.N    ??RoadBrd_ProcessBGMChar_17
    824                  return Status;
   \   000002EE   0x0030             MOVS     R0,R6
   \   000002F0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000002F2   0xE01E             B.N      ??RoadBrd_ProcessBGMChar_3
    825                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), tempBffr2);
   \                     ??RoadBrd_ProcessBGMChar_17: (+1)
   \   000002F4   0x....             LDR.N    R0,??DataTable23_33
   \   000002F6   0x.... 0x....      BL       strlen
   \   000002FA   0x....             LDR.N    R1,??DataTable23_33
   \   000002FC   0x.... 0x....      BL       BGM111_Transmit
   \   00000300   0xE015             B.N      ??RoadBrd_ProcessBGMChar_1
    826                //********************************************************************************
    827                //*  END OF CUSTOM SECTION...Abbreviate XML Code Processing here for Platinum Initial Release
    828                //********************************************************************************
    829          #else      
    830                //********************************************************************************
    831                //*
    832                //*  Normal XML Code Processing here for Platinum Release
    833                //*
    834                //********************************************************************************
    835                // A. Strip off Opening <TACK>.
    836                tempPstr = (char *)&tempBffr2[6];
    837                strcpy(tempstr, tempPstr);
    838                // A1. Find if we have a <DATE> Tag.
    839                tempPstr = strstr( tempstr, "<DATE>" );
    840                if (tempPstr != NULL)
    841                {
    842                  // Found DATE TAG....Set Focus to DATE Tag.
    843                  strcpy(tempstr, tempPstr);
    844                  // Now Strip out DATE Tag and Get Date.
    845                  tempPstr = (char *)&tempstr[6];
    846                  strcpy(tempstr2, tempPstr);
    847                  strcpy(tempstr, tempPstr);
    848                  // Find </DATE>
    849                  tempPstr = strstr( tempstr2, "</DATE>" );
    850                  if (tempPstr != NULL)
    851                  {
    852                    // Found Second String.....NULL It so that we can get Date
    853                    //x = (int)tempPstr;
    854                    //tempstr[x] = NULL;
    855                    *tempPstr = NULL;
    856                    //Now save Date String.
    857                    RoadBrd_WWDG_SetDateString(tempstr2);
    858                  }
    859                  // Let's Advance past this date string.
    860                  tempPstr = strstr( tempstr, "</DATE>" );
    861                  strcpy(tempstr, tempPstr);
    862                  // Now Strip out /DATE Tag and Get Date.
    863                  tempPstr = (char *)&tempstr[7];
    864                  strcpy(tempstr, tempPstr);
    865                } 
    866                //************************ SEQUENCE OF TEST TO TYPE OF OPERATION
    867                // B. Time to Test String
    868                // Is this a <CMD>/Monitor Command
    869                tempPstr = strstr( tempstr, "<CMD>" );
    870                if (tempPstr  != NULL)
    871                {
    872                  // Yes This is a Monitor CMD... Parse out Key CMD and pass to parser.
    873                  strcpy((char *)tempBffr2, tempPstr);
    874                  tempPstr = (char *)&tempBffr2[5];
    875                  strcpy(tempstr, tempPstr);
    876                  // Finally, Send string to Parser.
    877                  Status = RoadBrd_ParserTsk(tempstr);
    878                  if (Status == HAL_BUSY)
    879                  {
    880                    sprintf( (char *)tempBffr3, "<STATUS>CMD_BUSY</STATUS>" );
    881                    Status = RoadBrd_UART_Transmit(MONITOR_UART, tempBffr3);
    882                  }
    883                  else if (Status != HAL_OK)
    884                  {
    885                    sprintf( (char *)tempBffr3, "<STATUS>CMD_ERROR</STATUS>" );
    886                    Status = RoadBrd_UART_Transmit(MONITOR_UART, tempBffr3);
    887                  }
    888                }
    889                else
    890                {
    891                  // Generate an ACK Report.
    892                  sprintf( (char *)tempBffr2, "<STATUS>ST_ACK:%s</STATUS>", RoadBrd_WWDG_GetDateString() );
    893                  Status = RoadBrd_UART_Transmit(MONITOR_UART, tempBffr2);
    894                  if (Status != HAL_OK)
    895                    return Status;
    896                  BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), tempBffr2);
    897                }
    898                //********************************************************************************
    899                //*  END OF CUSTOM SECTION...Normal XML Code Processing here for Platinum Release
    900                //********************************************************************************
    901          #endif      
    902              } // EndIf (strncmp((char *)tempBffr2,"<TACK>",6) == 0)
    903              // NOW TEST ERROR CONDITIONS!!!
    904              // OVERFLOW?
    905              else if (strncmp((char *)tempBffr2,"OVERFLOW",8) == 0)
   \                     ??RoadBrd_ProcessBGMChar_9: (+1)
   \   00000302   0x2208             MOVS     R2,#+8
   \   00000304   0x....             LDR.N    R1,??DataTable23_55
   \   00000306   0x....             LDR.N    R0,??DataTable23_33
   \   00000308   0x.... 0x....      BL       strncmp
   \   0000030C   0x2800             CMP      R0,#+0
   \   0000030E   0xD109             BNE.N    ??RoadBrd_ProcessBGMChar_18
    906              {
    907                // Yes....Report Error and Reset.
    908                // We have detected a ERROR_TXBGMBUF_FULL error on BGM111...Log it!
    909                RdBrd_ErrCdLogErrCd( ERROR_BGM_OVERFLOW, MODULE_bgm111 );
   \   00000310   0x2102             MOVS     R1,#+2
   \   00000312   0x2011             MOVS     R0,#+17
   \   00000314   0x.... 0x....      BL       RdBrd_ErrCdLogErrCd
    910                RdBrd_BlinkErrCd( ERROR_BGM_OVERFLOW );
   \   00000318   0x2011             MOVS     R0,#+17
   \   0000031A   0x.... 0x....      BL       RdBrd_BlinkErrCd
    911                HAL_NVIC_SystemReset();
   \   0000031E   0x.... 0x....      BL       HAL_NVIC_SystemReset
   \   00000322   0xE004             B.N      ??RoadBrd_ProcessBGMChar_1
    912              }
    913              else
    914              {
    915                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)"<UNKNOWN STATUS> ");
   \                     ??RoadBrd_ProcessBGMChar_18: (+1)
   \   00000324   0x....             LDR.N    R1,??DataTable23_56
   \   00000326   0x2000             MOVS     R0,#+0
   \   00000328   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000032C   0x0006             MOVS     R6,R0
    916              }
    917            }
    918            //tempBffr2[0] = c;
    919            //tempBffr2[1] = 0x00;
    920            //Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);
    921            return Status;
   \                     ??RoadBrd_ProcessBGMChar_1: (+1)
   \   0000032E   0x0030             MOVS     R0,R6
   \   00000330   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??RoadBrd_ProcessBGMChar_3: (+1)
   \   00000332   0xB01E             ADD      SP,SP,#+120
   \   00000334   0xBD70             POP      {R4-R6,PC}       ;; return
    922          #if 0
    923              Status = HAL_OK;
    924              // Test Buffer. If we are full, An error has occured. Must at least log that.
    925              if (IsBufFull(ble.rx_wr, ble.rx_rd))
    926              {
    927                RdBrd_ErrCdLogErrCd( ERROR_BGMBUF_FULL, MODULE_bgm111 );
    928                Clr_HrtBeat_Cnt();
    929                RdBrd_BlinkErrCd( ERROR_BGMBUF_FULL );
    930                //RoadBrd_Delay( 1000 );
    931                HAL_NVIC_SystemReset();
    932                return HAL_ERROR;
    933              }
    934              /* Execution based on state */
    935              switch (ble.rx_state)
    936              {
    937                /* Waiting for a valid start of header */
    938                default:
    939                case BGRX_SYNC:
    940                  /* Valid start of header? (response or event) */
    941                  if ((c & 0xF8) ==
    942                      ((uint8_t)gecko_dev_type_gecko | (uint8_t)gecko_msg_type_rsp) ||
    943                      (c & 0xF8) ==
    944                      ((uint8_t)gecko_dev_type_gecko | (uint8_t)gecko_msg_type_evt))
    945                  {
    946                    /* Receiving header */
    947                    ble.rx_state = BGRX_HDR;
    948                    /* Initialize header byte counter */
    949                    header_cnt = 0;
    950                  }
    951                  else
    952                  {
    953                    /* Stay in sync state until we receive a valid start of header */
    954                    // We have detected a SYNC error on BGM111...Log it!
    955                    RdBrd_ErrCdLogErrCd( ERROR_BGMSYNC, MODULE_bgm111 );
    956                    Clr_HrtBeat_Cnt();
    957                    if (ble.booted)
    958                      RdBrd_BlinkErrCd( ERROR_BGMSYNC );
    959                    //RoadBrd_Delay( 1000 );
    960                    HAL_NVIC_SystemReset();
    961                    break;
    962                  }
    963                  /* Fallthrough intentional */
    964                /* Receiving header */
    965                case BGRX_HDR:
    966                  if (IsBufFull(ble.rx_wr, ble.rx_rd))
    967                  {
    968                    // Oops...Detected a fatal error...RESET!!!
    969                    // We have detected a SYNC error on BGM111...Log it!
    970                    RdBrd_ErrCdLogErrCd( ERROR_BGMSYNC, MODULE_bgm111 );
    971                    /* Indicate we need to execute the BLE stack, it's the
    972                     * only way to get more space in the buffer */
    973                    ble.req_exec = true;
    974                    /* We're back to synchronizing */
    975                    ble.rx_state = BGRX_SYNC;
    976                  }
    977                  else
    978                  {
    979                    /* Save the received byte */
    980                    /* Save the received byte */
    981                    ble.rx_buf[ble.rx_wr] = c;
    982                    /* Increment the index and header byte counter */
    983                    ble.rx_wr = NextBufIdx(ble.rx_wr);
    984                    header_cnt++;
    985                    /* If this is the second header byte, we can grab the payload
    986                     * length.  We ignore the first byte, since the spec says that
    987                     * due to memory limitations in the modules, the packet is
    988                     * never more than 64 bytes. */
    989                    if (header_cnt == 2)
    990                    {
    991                      /* Get the payload length */
    992                      payload_len = c;
    993                      /* If we have a payload bigger than 60 bytes, something's wrong */
    994                      if (payload_len > 60)
    995                      {
    996                        // We have detected a SYNC error on BGM111...Log it!
    997                        RdBrd_ErrCdLogErrCd( ERROR_BGMSYNC, MODULE_bgm111 );
    998                        /* Reset receive state to synchronizing */
    999                        ble.rx_state = BGRX_SYNC;
   1000                        /* Indicate we need to execute the BLE stack to free space */
   1001                        ble.req_exec = true;
   1002                        Status = HAL_ERROR;
   1003                      }
   1004                    } // EndIf (header_cnt == 2)
   1005                    /* Are we done with the header? */
   1006                    if (header_cnt >= BGLIB_MSG_HEADER_LEN)
   1007                    {
   1008                      /* Is there no payload? */
   1009                      if (payload_len == 0)
   1010                      {
   1011                        /* Reset receive state to synchronizing */
   1012                        ble.rx_state = BGRX_SYNC;
   1013                        /* Indicate we need to execute the BLE stack to process 
   1014                         * the received packet */
   1015                        ble.req_exec = true;
   1016                      }
   1017                      else
   1018                      {
   1019                        /* Start receiving payload data */
   1020                        ble.rx_state = BGRX_DATA;
   1021                        /* Initialize the payload counter */
   1022                        payload_cnt = 0;
   1023                      }
   1024                    } // EndIf (header_cnt >= BGLIB_MSG_HEADER_LEN)
   1025                  } // EndElse (IsBufFull(ble.rx_wr, ble.rx_rd))
   1026                  break;
   1027                /* Receiving data */
   1028                case BGRX_DATA:
   1029                  /* Did we receive a byte, but the buffer is full? */
   1030                  if (IsBufFull(ble.rx_wr, ble.rx_rd))
   1031                  {
   1032                    /* Indicate we need to execute the BLE stack, it's the
   1033                     * only way to get more space in the buffer */
   1034                    ble.req_exec = true;
   1035                    /* We're back to synchronizing */
   1036                    ble.rx_state = BGRX_SYNC;
   1037                  }
   1038                  else
   1039                  {
   1040                    /* Store the byte */
   1041                    ble.rx_buf[ble.rx_wr] = c;
   1042                    /* Increment the index and payload byte counter */
   1043                    ble.rx_wr = NextBufIdx(ble.rx_wr);
   1044                    payload_cnt++;
   1045                    /* Is this the end of the packet? */
   1046                    if (payload_cnt >= payload_len)
   1047                    {
   1048                      /* Reset receive state to synchronizing */
   1049                      ble.rx_state = BGRX_SYNC;
   1050                      /* Indicate we need to execute the BLE stack to process 
   1051                       * the received packet */
   1052                      ble.req_exec = true;
   1053                    }
   1054                    /* Is the buffer almost full? */
   1055                    if (BufFree(ble.rx_wr, ble.rx_rd) <= BG_DATA_LOW_WATERMARK)
   1056                    {
   1057                      /* Indicate we need to execute the BLE stack so it can
   1058                       * start reading data from the buffer */
   1059                      ble.req_exec = true;
   1060                    }
   1061                  } // EndElse (IsBufFull(ble.rx_wr, ble.rx_rd))
   1062                  break;
   1063              } // EndSwitch (ble.rx_state)
   1064              return Status;
   1065          #endif
   1066          }

   \                                 In section .bss, align 4
   \                     `RoadBrd_ProcessBGMChar::tempBffr2`:
   \   00000000                      DS8 60

   \                                 In section .bss, align 1
   \                     `RoadBrd_ProcessBGMChar::in_ptr`:
   \   00000000                      DS8 1
   1067          
   1068          /**
   1069            * @brief  This routine returns the status of the ble.req_exec flag
   1070            *         from the BGM111
   1071            * @param  None
   1072            * @retval bool:     true(1):     Processing of packet about to start
   1073            *                   false(0):      No processing pending.
   1074            */

   \                                 In section .text, align 2, keep-with-next
   1075          bool RoadBrd_tstReqexec( void )
   1076          {
   1077            return ble.req_exec;
   \                     RoadBrd_tstReqexec: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable23_6
   \   00000002   0xF890 0x0195      LDRB     R0,[R0, #+405]
   \   00000006   0x4770             BX       LR               ;; return
   1078          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20:
   \   00000000   0x2D 0x2A          DC8      "-*-"
   \              0x2D 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_1:
   \   00000000   0x2D 0x4F          DC8      "-O-"
   \              0x2D 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23:
   \   00000000   0x........         DC32     gecko_cmd_msg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_1:
   \   00000000   0x01030220         DC32     0x1030220

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_2:
   \   00000000   0x........         DC32     gecko_rsp_msg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_3:
   \   00000000   0x020A0520         DC32     0x20a0520

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_4:
   \   00000000   0x050A0420         DC32     0x50a0420

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_5:
   \   00000000   0x........         DC32     blemsgs

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_6:
   \   00000000   0x........         DC32     `ble`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_7:
   \   00000000   0x........         DC32     bglib_output

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_8:
   \   00000000   0x........         DC32     BGM111_Receive

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_9:
   \   00000000   0x........         DC32     bglib_input

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_10:
   \   00000000   0x........         DC32     BGM111_Peek

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_11:
   \   00000000   0x........         DC32     bglib_peek

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_12:
   \   00000000   0xFFFF00F8         DC32     0xffff00f8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_13:
   \   00000000   0x000100A0         DC32     0x100a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_14:
   \   00000000   0x000800A0         DC32     0x800a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_15:
   \   00000000   0x000900A0         DC32     0x900a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_16:
   \   00000000   0x010800A0         DC32     0x10800a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_17:
   \   00000000   0x020800A0         DC32     0x20800a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_18:
   \   00000000   0x020A0020         DC32     0x20a0020

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_19:
   \   00000000   0x020B00A0         DC32     0x20b00a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_20:
   \   00000000   0x030A00A0         DC32     0x30a00a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_21:
   \   00000000   0x050A0020         DC32     0x50a0020

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_22:
   \   00000000   0x08090020         DC32     0x8090020

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_23:
   \   00000000   0x200000A0         DC32     0x200000a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_24:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_25:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_26:
   \   00000000   0x........         DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_27:
   \   00000000   0x........         DC32     ?_5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_28:
   \   00000000   0x........         DC32     ?_6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_29:
   \   00000000   0x........         DC32     ?_7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_30:
   \   00000000   0x........         DC32     ?_8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_31:
   \   00000000   0x........         DC32     ?_9

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_32:
   \   00000000   0x........         DC32     ?_10

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_33:
   \   00000000   0x........         DC32     `RoadBrd_ProcessBGMChar::tempBffr2`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_34:
   \   00000000   0x........         DC32     `RoadBrd_ProcessBGMChar::in_ptr`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_35:
   \   00000000   0x........         DC32     ?_11

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_36:
   \   00000000   0x........         DC32     ?_12

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_37:
   \   00000000   0x........         DC32     ?_13

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_38:
   \   00000000   0x........         DC32     ?_14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_39:
   \   00000000   0x........         DC32     ?_15

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_40:
   \   00000000   0x........         DC32     ?_16

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_41:
   \   00000000   0x........         DC32     ?_17

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_42:
   \   00000000   0x........         DC32     ?_18

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_43:
   \   00000000   0x........         DC32     ?_19

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_44:
   \   00000000   0x........         DC32     ?_20

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_45:
   \   00000000   0x........         DC32     ?_21

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_46:
   \   00000000   0x........         DC32     ?_22

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_47:
   \   00000000   0x........         DC32     ?_23

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_48:
   \   00000000   0x........         DC32     ?_24

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_49:
   \   00000000   0x........         DC32     ?_25

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_50:
   \   00000000   0x........         DC32     `RoadBrd_ProcessBGMChar::tempBffr2`+0x6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_51:
   \   00000000   0x........         DC32     ?_26

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_52:
   \   00000000   0x........         DC32     ?_27

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_53:
   \   00000000   0x........         DC32     ?_28

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_54:
   \   00000000   0x........         DC32     ?_29

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_55:
   \   00000000   0x........         DC32     ?_30

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_56:
   \   00000000   0x........         DC32     ?_31

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x3C 0x42          DC8 "<BGM_BOOT>"
   \              0x47 0x4D    
   \              0x5F 0x42    
   \              0x4F 0x4F    
   \              0x54 0x3E    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x3C 0x42          DC8 "<BGM_CNCTCLOSE>"
   \              0x47 0x4D    
   \              0x5F 0x43    
   \              0x4E 0x43    
   \              0x54 0x43    
   \              0x4C 0x4F    
   \              0x53 0x45    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x3C 0x42          DC8 "<BGM_CNCTOPEN>"
   \              0x47 0x4D    
   \              0x5F 0x43    
   \              0x4E 0x43    
   \              0x54 0x4F    
   \              0x50 0x45    
   \              0x4E 0x3E    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \   00000000   0x2D 0x2A          DC8 "-*-"
   \              0x2D 0x00    

   \                                 In section .rodata, align 4
   \   00000000   0x2D 0x4F          DC8 "-O-"
   \              0x2D 0x00    

   \                                 In section .rodata, align 4
   \                     ?_5:
   \   00000000   0x3C 0x72          DC8 "<rsp_read_ch_value_by_uuid_id>"
   \              0x73 0x70    
   \              0x5F 0x72    
   \              0x65 0x61    
   \              0x64 0x5F    
   \              0x63 0x68    
   \              0x5F 0x76    
   \              0x61 0x6C    
   \              0x75 0x65    
   \              0x5F 0x62    
   \              0x79 0x5F    
   \              0x75 0x75    
   \              0x69 0x64    
   \              0x5F 0x69    
   \              0x64 0x3E    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_6:
   \   00000000   0x3C 0x53          DC8 "<STR:%s>"
   \              0x54 0x52    
   \              0x3A 0x25    
   \              0x73 0x3E    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_7:
   \   00000000   0x3C 0x65          DC8 "<evt_endpoint_status_id>"
   \              0x76 0x74    
   \              0x5F 0x65    
   \              0x6E 0x64    
   \              0x70 0x6F    
   \              0x69 0x6E    
   \              0x74 0x5F    
   \              0x73 0x74    
   \              0x61 0x74    
   \              0x75 0x73    
   \              0x5F 0x69    
   \              0x64 0x3E    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_8:
   \   00000000   0x3C 0x55          DC8 "<UNKN:%08x>"
   \              0x4E 0x4B    
   \              0x4E 0x3A    
   \              0x25 0x30    
   \              0x38 0x78    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_9:
   \   00000000   0x3C 0x54          DC8 "<TACK Strike:%d/%d>"
   \              0x41 0x43    
   \              0x4B 0x20    
   \              0x53 0x74    
   \              0x72 0x69    
   \              0x6B 0x65    
   \              0x3A 0x25    
   \              0x64 0x2F    
   \              0x25 0x64    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_10:
   \   00000000   0x3C 0x42          DC8 "<BGMSYNC_CNCTCLOSE>"
   \              0x47 0x4D    
   \              0x53 0x59    
   \              0x4E 0x43    
   \              0x5F 0x43    
   \              0x4E 0x43    
   \              0x54 0x43    
   \              0x4C 0x4F    
   \              0x53 0x45    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_11:
   \   00000000   0x0D 0x0A          DC8 "\015\012<<FULL STRING>>: %s \015\012"
   \              0x3C 0x3C    
   \              0x46 0x55    
   \              0x4C 0x4C    
   \              0x20 0x53    
   \              0x54 0x52    
   \              0x49 0x4E    
   \              0x47 0x3E    
   \              0x3E 0x3A    
   \              0x20 0x25    
   \              0x73 0x20    
   \              0x0D 0x0A    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_12:
   \   00000000   0x42 0x6F          DC8 "Boot"
   \              0x6F 0x74    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_13:
   \   00000000   0x3C 0x62          DC8 "<ble.booted> "
   \              0x6C 0x65    
   \              0x2E 0x62    
   \              0x6F 0x6F    
   \              0x74 0x65    
   \              0x64 0x3E    
   \              0x20 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_14:
   \   00000000   0x43 0x6F          DC8 "Connected"
   \              0x6E 0x6E    
   \              0x65 0x63    
   \              0x74 0x65    
   \              0x64 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_15:
   \   00000000   0x3C 0x62          DC8 "<ble.TackArmed = TACK_ARMED>"
   \              0x6C 0x65    
   \              0x2E 0x54    
   \              0x61 0x63    
   \              0x6B 0x41    
   \              0x72 0x6D    
   \              0x65 0x64    
   \              0x20 0x3D    
   \              0x20 0x54    
   \              0x41 0x43    
   \              0x4B 0x5F    
   \              0x41 0x52    
   \              0x4D 0x45    
   \              0x44 0x3E    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_16:
   \   00000000   0x3C 0x62          DC8 "<ble.connection> "
   \              0x6C 0x65    
   \              0x2E 0x63    
   \              0x6F 0x6E    
   \              0x6E 0x65    
   \              0x63 0x74    
   \              0x69 0x6F    
   \              0x6E 0x3E    
   \              0x20 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_17:
   \   00000000   0x44 0x69          DC8 "Disconnected"
   \              0x73 0x63    
   \              0x6F 0x6E    
   \              0x6E 0x65    
   \              0x63 0x74    
   \              0x65 0x64    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_18:
   \   00000000   0x3C 0x44          DC8 "<DISCONNECTED> "
   \              0x49 0x53    
   \              0x43 0x4F    
   \              0x4E 0x4E    
   \              0x45 0x43    
   \              0x54 0x45    
   \              0x44 0x3E    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_19:
   \   00000000   0x44 0x41          DC8 "DATA"
   \              0x54 0x41    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_20:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_21:
   \   00000000   0x3C 0x62          DC8 "<ble.data_Connection> "
   \              0x6C 0x65    
   \              0x2E 0x64    
   \              0x61 0x74    
   \              0x61 0x5F    
   \              0x43 0x6F    
   \              0x6E 0x6E    
   \              0x65 0x63    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x3E 0x20    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_22:
   \   00000000   0x3C 0x54          DC8 "<TACK>"
   \              0x41 0x43    
   \              0x4B 0x3E    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_23:
   \   00000000   0x3C 0x53          DC8 "<STATUS>DATA_SYNC</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x44 0x41    
   \              0x54 0x41    
   \              0x5F 0x53    
   \              0x59 0x4E    
   \              0x43 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_24:
   \   00000000   0x3C 0x62          DC8 "<ble.TackArmed=TACK_SYNC>"
   \              0x6C 0x65    
   \              0x2E 0x54    
   \              0x61 0x63    
   \              0x6B 0x41    
   \              0x72 0x6D    
   \              0x65 0x64    
   \              0x3D 0x54    
   \              0x41 0x43    
   \              0x4B 0x5F    
   \              0x53 0x59    
   \              0x4E 0x43    
   \              0x3E 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_25:
   \   00000000   0x3C 0x54          DC8 "<TACK Received.>"
   \              0x41 0x43    
   \              0x4B 0x20    
   \              0x52 0x65    
   \              0x63 0x65    
   \              0x69 0x76    
   \              0x65 0x64    
   \              0x2E 0x3E    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_26:
   \   00000000   0x3C 0x2F          DC8 "</TACK>"
   \              0x54 0x41    
   \              0x43 0x4B    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_27:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_BUSY</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x42 0x55    
   \              0x53 0x59    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_28:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_ERROR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_29:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_ACK:%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x41    
   \              0x43 0x4B    
   \              0x3A 0x25    
   \              0x73 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_30:
   \   00000000   0x4F 0x56          DC8 "OVERFLOW"
   \              0x45 0x52    
   \              0x46 0x4C    
   \              0x4F 0x57    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_31:
   \   00000000   0x3C 0x55          DC8 "<UNKNOWN STATUS> "
   \              0x4E 0x4B    
   \              0x4E 0x4F    
   \              0x57 0x4E    
   \              0x20 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x20 0x00    
   \   00000012   0x00 0x00          DC8 0, 0
   1079          
   1080          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   BGM111_CMD_Mode
       0   BGM111_Connected
       0   BGM111_DataConnected
       0   BGM111_GetTackState
       8   BGM111_Init
         8   -> BGM111_LowLevel_Init
         8   -> RoadBrd_gpio_Off
         8   -> RoadBrd_gpio_On
       0   BGM111_LowLevel_Init
       0   BGM111_Peek
      40   BGM111_ProcessInput
        40   -> Clr_HeartBeat
        40   -> Clr_HrtBeat_Cnt
        40   -> HAL_NVIC_SystemReset
        40   -> NextBufIdx
        40   -> RdBrd_BlinkErrCd
        40   -> RdBrd_ErrCdLogErrCd
        40   -> RoadBrd_UART_Transmit
        40   -> gecko_cmd_le_gap_set_mode
        40   -> gecko_peek_event
        40   -> sprintf
       0   BGM111_Ready
      16   BGM111_Receive
        16   -> HAL_UART_EnableBGM_RX
        16   -> NextBufIdx
       0   BGM111_SetCMD_Mode
       0   BGM111_SetDataConnected
       0   BGM111_SetSyncFlg
       0   BGM111_SetTackState
      24   BGM111_SyncModeTest
        24   -> ClrDataReady
        24   -> Clr_HrtBeat_Cnt
        24   -> HAL_NVIC_SystemReset
        24   -> RdBrd_BlinkErrCd
        24   -> RdBrd_ErrCdLogErrCd
        24   -> RoadBrd_Get_TackLimit
        24   -> RoadBrd_UART_Transmit
        24   -> TstDataReady
        24   -> sprintf
       0   BGM111_SyncModeTestNoInc
      24   BGM111_Transmit
        24   -> HAL_NVIC_DisableIRQ
        24   -> HAL_NVIC_EnableIRQ
        24   -> HAL_NVIC_SystemReset
        24   -> HAL_UART_EnableBGM_TXE
        24   -> NextBufIdx
        24   -> RdBrd_BlinkErrCd
        24   -> RdBrd_ErrCdLogErrCd
      16   BGM111_UART_IRQHandler
        16   -> NextBufIdx
        16   -> RoadBrd_ProcessBGMChar
        16   -> USART_ReceiveData
        16   -> USART_SendData
      16   BGM111_WriteCharacteristic
        16   -> gecko_cmd_gatt_server_send_characteristic_notification
        16   -> gecko_cmd_gatt_server_write_attribute_value
       0   BGM111_cntrlSetSyncFlg
      16   BufFree
        16   -> BufUsed
       0   BufUsed
      16   IsBufFull
        16   -> NextBufIdx
       0   NextBufIdx
     136   RoadBrd_ProcessBGMChar
       136   -> BGM111_CMD_Mode
       136   -> BGM111_SetCMD_Mode
       136   -> BGM111_SetDataConnected
       136   -> BGM111_SetSyncFlg
       136   -> BGM111_Transmit
       136   -> ClrAnalyticsRepeat
       136   -> ClrDataStructure
       136   -> HAL_NVIC_SystemReset
       136   -> RdBrd_BlinkErrCd
       136   -> RdBrd_ErrCdLogErrCd
       136   -> RoadBrd_Get_RdSndTickCnt
       136   -> RoadBrd_ParserTsk
       136   -> RoadBrd_Set_TmpRdSndTickCnt
       136   -> RoadBrd_UART_Transmit
       136   -> RoadBrd_WWDG_GetTickString
       136   -> RoadBrd_WWDG_VerifyFrame
       136   -> Set_RdSndTickCnt
       136   -> sprintf
       136   -> strcpy
       136   -> strlen
       136   -> strncmp
       136   -> strstr
       0   RoadBrd_tstReqexec
       0   USART_ReceiveData
       0   USART_SendData
      24   gecko_cmd_gatt_server_send_characteristic_notification
        24   -> __aeabi_memcpy
        24   -> gecko_handle_command
      24   gecko_cmd_gatt_server_write_attribute_value
        24   -> __aeabi_memcpy
        24   -> gecko_handle_command
      16   gecko_cmd_le_gap_set_mode
        16   -> gecko_handle_command
      16   strstr
        16   -> __iar_Strstr


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable20
       4  ??DataTable20_1
       4  ??DataTable23
       4  ??DataTable23_1
       4  ??DataTable23_10
       4  ??DataTable23_11
       4  ??DataTable23_12
       4  ??DataTable23_13
       4  ??DataTable23_14
       4  ??DataTable23_15
       4  ??DataTable23_16
       4  ??DataTable23_17
       4  ??DataTable23_18
       4  ??DataTable23_19
       4  ??DataTable23_2
       4  ??DataTable23_20
       4  ??DataTable23_21
       4  ??DataTable23_22
       4  ??DataTable23_23
       4  ??DataTable23_24
       4  ??DataTable23_25
       4  ??DataTable23_26
       4  ??DataTable23_27
       4  ??DataTable23_28
       4  ??DataTable23_29
       4  ??DataTable23_3
       4  ??DataTable23_30
       4  ??DataTable23_31
       4  ??DataTable23_32
       4  ??DataTable23_33
       4  ??DataTable23_34
       4  ??DataTable23_35
       4  ??DataTable23_36
       4  ??DataTable23_37
       4  ??DataTable23_38
       4  ??DataTable23_39
       4  ??DataTable23_4
       4  ??DataTable23_40
       4  ??DataTable23_41
       4  ??DataTable23_42
       4  ??DataTable23_43
       4  ??DataTable23_44
       4  ??DataTable23_45
       4  ??DataTable23_46
       4  ??DataTable23_47
       4  ??DataTable23_48
       4  ??DataTable23_49
       4  ??DataTable23_5
       4  ??DataTable23_50
       4  ??DataTable23_51
       4  ??DataTable23_52
       4  ??DataTable23_53
       4  ??DataTable23_54
       4  ??DataTable23_55
       4  ??DataTable23_56
       4  ??DataTable23_6
       4  ??DataTable23_7
       4  ??DataTable23_8
       4  ??DataTable23_9
      12  ?_0
      16  ?_1
      20  ?_10
      28  ?_11
       8  ?_12
      16  ?_13
      12  ?_14
      32  ?_15
      20  ?_16
      16  ?_17
      16  ?_18
       8  ?_19
      16  ?_2
      24  ?_20
      24  ?_21
       8  ?_22
      28  ?_23
      28  ?_24
      20  ?_25
       8  ?_26
      28  ?_27
      28  ?_28
      28  ?_29
       4  ?_3
      12  ?_30
      20  ?_31
       4  ?_4
      32  ?_5
      12  ?_6
      28  ?_7
      12  ?_8
      20  ?_9
      10  BGM111_CMD_Mode
      10  BGM111_Connected
      10  BGM111_DataConnected
      10  BGM111_GetTackState
      50  BGM111_Init
      82  BGM111_LowLevel_Init
      10  BGM111_Peek
     526  BGM111_ProcessInput
      10  BGM111_Ready
      94  BGM111_Receive
      10  BGM111_SetCMD_Mode
      10  BGM111_SetDataConnected
      10  BGM111_SetSyncFlg
      10  BGM111_SetTackState
     152  BGM111_SyncModeTest
      36  BGM111_SyncModeTestNoInc
     326  BGM111_Transmit
     146  BGM111_UART_IRQHandler
      42  BGM111_WriteCharacteristic
      22  BGM111_cntrlSetSyncFlg
      26  BufFree
      18  BufUsed
      30  IsBufFull
      14  NextBufIdx
     822  RoadBrd_ProcessBGMChar
       8  RoadBrd_tstReqexec
      10  USART_ReceiveData
      12  USART_SendData
     132  _gecko_cmd_msg
     132  _gecko_rsp_msg
       4  bglib_input
       4  bglib_output
       4  bglib_peek
     420  ble
     804  blemsgs
     110  gecko_cmd_gatt_server_send_characteristic_notification
     108  gecko_cmd_gatt_server_write_attribute_value
      64  gecko_cmd_le_gap_set_mode
       4  gecko_cmd_msg
       4  gecko_evt_msg
    3960  gecko_queue
       4  gecko_queue_r
       4  gecko_queue_w
       4  gecko_rsp_msg
       1  in_ptr
      16  strstr
      60  tempBffr2

 
 5 533 bytes in section .bss
     8 bytes in section .data
   588 bytes in section .rodata
 3 050 bytes in section .text
 
 3 034 bytes of CODE  memory (+ 16 bytes shared)
   588 bytes of CONST memory
 5 541 bytes of DATA  memory

Errors: none
Warnings: none
