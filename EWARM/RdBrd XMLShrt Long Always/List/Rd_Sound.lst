###############################################################################
#
# IAR ANSI C/C++ Compiler V7.60.2.11341/W32 for ARM       13/Oct/2017  13:57:18
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\Rd_Sound.c
#    Command line =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\Rd_Sound.c
#        -D USE_HAL_DRIVER -D STM32L152xE -D USE_STM32L1XX_NUCLEO -D ASCII -D
#        REV_L -D LONG_DELAY -D XML_SHRT -lCN
#        "D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\RdBrd
#        XMLShrt Long Always\List" -o
#        "D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\RdBrd
#        XMLShrt Long Always\Obj" --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_clustering --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.4\arm\INC\c\DLib_Config_Full.h" -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/STM32L1xx_HAL_Driver/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/STM32L1xx_HAL_Driver/Inc/Legacy\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/BSP/STM32L1xx_Nucleo\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/portable/IAR/ARM_CM3\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Core/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/CMSIS/Include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/CMSIS/Device/ST/STM32L1xx/Include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\..\Middlewares\Third_Party\BgLib\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.4\arm\CMSIS\Include\"
#    Locale       =  English_United States.1252
#    List file    =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\RdBrd
#        XMLShrt Long Always\List\Rd_Sound.lst
#    Object file  =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\RdBrd
#        XMLShrt Long Always\Obj\Rd_Sound.o
#
###############################################################################

D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\Rd_Sound.c
      1          /**
      2            ******************************************************************************
      3            * File Name          : Rd_Sound.c
      4            * Description        : This file provides code for the implementation of the 
      5            * Sound processing code used to determine the sound characteristics of the road.
      6            ******************************************************************************
      7            *
      8            * COPYRIGHT(c) 2016 WeatherCloud
      9            *
     10            * Redistribution and use in source and binary forms, with or without modification,
     11            * are permitted provided that the following conditions are met:
     12            *   1. Redistributions of source code must retain the above copyright notice,
     13            *      this list of conditions and the following disclaimer.
     14            *   2. Redistributions in binary form must reproduce the above copyright notice,
     15            *      this list of conditions and the following disclaimer in the documentation
     16            *      and/or other materials provided with the distribution.
     17            *   3. Neither the name of WeatherCloud nor the names of its contributors
     18            *      may be used to endorse or promote products derived from this software
     19            *      without specific prior written permission.
     20            *
     21            * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     22            * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     23            * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     24            * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
     25            * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     26            * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     27            * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
     28            * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
     29            * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
     30            * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     31            *
     32            ******************************************************************************
     33            */
     34          
     35          /* Includes ------------------------------------------------------------------*/
     36          #include "Rd_Sound.h"
     37          
     38          
     39          /* Variables and buffer definitions */

   \                                 In section .bss, align 4
     40          static int8_t fr[FFT_BUFFER_SIZE];
   \                     fr:
   \   00000000                      DS8 128

   \                                 In section .bss, align 4
     41          static int8_t fi[FFT_BUFFER_SIZE];
   \                     fi:
   \   00000000                      DS8 128

   \                                 In section .bss, align 4
     42          static int8_t fs[FFT_BUFFER_SIZE];
   \                     fs:
   \   00000000                      DS8 128
     43          
     44            /**
     45            * @brief  This function clears both real and imaginary buffers.
     46            * @param  none.
     47            * @retval none.
     48            */

   \                                 In section .text, align 2, keep-with-next
     49          void RoadBrdSnd_ClearBffrs( void )
     50          {
     51            int x;
     52            
     53            for (x=0; x<FFT_BUFFER_SIZE; x++)
   \                     RoadBrdSnd_ClearBffrs: (+1)
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0x0008             MOVS     R0,R1
   \                     ??RoadBrdSnd_ClearBffrs_0: (+1)
   \   00000004   0x2880             CMP      R0,#+128
   \   00000006   0xDA07             BGE.N    ??RoadBrdSnd_ClearBffrs_1
     54            {
     55              fr[x] = 0;
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x....             LDR.N    R2,??DataTable11_1
   \   0000000C   0x5411             STRB     R1,[R2, R0]
     56              fi[x] = 0;
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0x....             LDR.N    R2,??DataTable11_2
   \   00000012   0x5411             STRB     R1,[R2, R0]
     57            }
   \   00000014   0x1C40             ADDS     R0,R0,#+1
   \   00000016   0xE7F5             B.N      ??RoadBrdSnd_ClearBffrs_0
     58          }
   \                     ??RoadBrdSnd_ClearBffrs_1: (+1)
   \   00000018   0x4770             BX       LR               ;; return
     59          
     60            /**
     61            * @brief  This function clears the real buffer.
     62            * @param  none.
     63            * @retval none.
     64            */

   \                                 In section .text, align 2, keep-with-next
     65          void RoadBrdSnd_ClearRealBffr( void )
     66          {
     67            int x;
     68            
     69            for (x=0; x<FFT_BUFFER_SIZE; x++)
   \                     RoadBrdSnd_ClearRealBffr: (+1)
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0x0008             MOVS     R0,R1
   \                     ??RoadBrdSnd_ClearRealBffr_0: (+1)
   \   00000004   0x2880             CMP      R0,#+128
   \   00000006   0xDA04             BGE.N    ??RoadBrdSnd_ClearRealBffr_1
     70            {
     71              fr[x] = 0;
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x....             LDR.N    R2,??DataTable11_1
   \   0000000C   0x5411             STRB     R1,[R2, R0]
     72            }
   \   0000000E   0x1C40             ADDS     R0,R0,#+1
   \   00000010   0xE7F8             B.N      ??RoadBrdSnd_ClearRealBffr_0
     73          }
   \                     ??RoadBrdSnd_ClearRealBffr_1: (+1)
   \   00000012   0x4770             BX       LR               ;; return
     74          
     75            /**
     76            * @brief  This function clears the imaginary buffer.
     77            * @param  none.
     78            * @retval none.
     79            */

   \                                 In section .text, align 2, keep-with-next
     80          void RoadBrdSnd_ClearImgnryBffr( void )
     81          {
     82            int x;
     83            
     84            for (x=0; x<FFT_BUFFER_SIZE; x++)
   \                     RoadBrdSnd_ClearImgnryBffr: (+1)
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0x0008             MOVS     R0,R1
   \                     ??RoadBrdSnd_ClearImgnryBffr_0: (+1)
   \   00000004   0x2880             CMP      R0,#+128
   \   00000006   0xDA04             BGE.N    ??RoadBrdSnd_ClearImgnryBffr_1
     85            {
     86              fi[x] = 0;
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x....             LDR.N    R2,??DataTable11_2
   \   0000000C   0x5411             STRB     R1,[R2, R0]
     87            }
   \   0000000E   0x1C40             ADDS     R0,R0,#+1
   \   00000010   0xE7F8             B.N      ??RoadBrdSnd_ClearImgnryBffr_0
     88          }
   \                     ??RoadBrdSnd_ClearImgnryBffr_1: (+1)
   \   00000012   0x4770             BX       LR               ;; return
     89          
     90            /**
     91            * @brief  This function return the pointer to the imaginary buffer.
     92            * @param  none.
     93            * @retval none.
     94            */

   \                                 In section .text, align 2, keep-with-next
     95          int8_t* RoadBrdSnd_getImgnryBffr( void )
     96          {
     97            return fi;
   \                     RoadBrdSnd_getImgnryBffr: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable11_2
   \   00000002   0x4770             BX       LR               ;; return
     98          }
     99          
    100             /**
    101            * @brief  This function return the pointer to the Real buffer.
    102            * @param  none.
    103            * @retval none.
    104            */

   \                                 In section .text, align 2, keep-with-next
    105          int8_t* RoadBrdSnd_getRealBffr( void )
    106          {
    107            return fr;
   \                     RoadBrdSnd_getRealBffr: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable11_1
   \   00000002   0x4770             BX       LR               ;; return
    108          }
    109          
    110             /**
    111            * @brief  This function return the pointer to the Save buffer.
    112            * @param  none.
    113            * @retval none.
    114            */

   \                                 In section .text, align 2, keep-with-next
    115          int8_t* RoadBrdSnd_getSaveBffr( void )
    116          {
    117            return fs;
   \                     RoadBrdSnd_getSaveBffr: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable11_3
   \   00000002   0x4770             BX       LR               ;; return
    118          }
    119          
    120           /**
    121            * @brief  This function reads FFT_BUFFER_SIZE(128) sampes into the passed buffer pointer.
    122            * @param  uint8_t* pData: Ptr to the buffer to receive the sampled data.
    123            * @retval HAL_StatusTypeDef:     HAL_OK:       Operation completed with no errors.
    124            *                                HAL_ERROR:    Error found in Tasking or data passed.
    125            *                                HAL_BUSY:     ADC is busy.
    126            *                                HAL_TIMEOUT:  ADC timed out.
    127            */

   \                                 In section .text, align 2, keep-with-next
    128          HAL_StatusTypeDef RoadBrdSnd_SampleSound( int8_t* pData )
    129          {
   \                     RoadBrdSnd_SampleSound: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
    130            HAL_StatusTypeDef Status;
    131            int x;
    132            uint8_t* tempPtr;
    133          
    134            // Start ADC to sample Sound Data and fill buffer pointed to bt pData.
    135            Status = RoadBrd_ADC_Start((uint32_t*)pData, (uint32_t)FFT_BUFFER_SIZE);
   \   00000004   0x2180             MOVS     R1,#+128
   \   00000006   0x0020             MOVS     R0,R4
   \   00000008   0x.... 0x....      BL       RoadBrd_ADC_Start
   \   0000000C   0x0005             MOVS     R5,R0
    136            if(Status != HAL_OK)
   \   0000000E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000010   0x2D00             CMP      R5,#+0
   \   00000012   0xD002             BEQ.N    ??RoadBrdSnd_SampleSound_0
    137              return Status;
   \   00000014   0x0028             MOVS     R0,R5
   \   00000016   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000018   0xE022             B.N      ??RoadBrdSnd_SampleSound_1
    138            
    139            // Wait for Operation to complete.
    140            Status = RoadBrd_ADC_Status();
   \                     ??RoadBrdSnd_SampleSound_0: (+1)
   \   0000001A   0x.... 0x....      BL       RoadBrd_ADC_Status
   \   0000001E   0x0005             MOVS     R5,R0
    141            for( x=0; x<MAX_TIMEOUT; x++)
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x0006             MOVS     R6,R0
   \                     ??RoadBrdSnd_SampleSound_2: (+1)
   \   00000024   0x2EC8             CMP      R6,#+200
   \   00000026   0xDA0A             BGE.N    ??RoadBrdSnd_SampleSound_3
    142            {
    143              Status = RoadBrd_ADC_Status();
   \   00000028   0x.... 0x....      BL       RoadBrd_ADC_Status
   \   0000002C   0x0005             MOVS     R5,R0
    144              if(Status == HAL_OK)
   \   0000002E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000030   0x2D00             CMP      R5,#+0
   \   00000032   0xD004             BEQ.N    ??RoadBrdSnd_SampleSound_3
    145                break;
    146              // If Tasking code...Add wait loop
    147              RoadBrd_Delay(5);
   \                     ??RoadBrdSnd_SampleSound_4: (+1)
   \   00000034   0x2005             MOVS     R0,#+5
   \   00000036   0x.... 0x....      BL       RoadBrd_Delay
    148            }
   \   0000003A   0x1C76             ADDS     R6,R6,#+1
   \   0000003C   0xE7F2             B.N      ??RoadBrdSnd_SampleSound_2
    149            
    150            // Did we timeout?
    151            if(x >= MAX_TIMEOUT)
   \                     ??RoadBrdSnd_SampleSound_3: (+1)
   \   0000003E   0x2EC8             CMP      R6,#+200
   \   00000040   0xDB01             BLT.N    ??RoadBrdSnd_SampleSound_5
    152              return HAL_TIMEOUT;
   \   00000042   0x2003             MOVS     R0,#+3
   \   00000044   0xE00C             B.N      ??RoadBrdSnd_SampleSound_1
    153            else
    154            {
    155              // OK...Adjust the Data for FFT Calculaztion
    156              tempPtr = (uint8_t *)pData;
   \                     ??RoadBrdSnd_SampleSound_5: (+1)
   \   00000046   0x0027             MOVS     R7,R4
    157              for( x=0; x<FFT_BUFFER_SIZE; x++)
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0x0006             MOVS     R6,R0
   \                     ??RoadBrdSnd_SampleSound_6: (+1)
   \   0000004C   0x2E80             CMP      R6,#+128
   \   0000004E   0xDA05             BGE.N    ??RoadBrdSnd_SampleSound_7
    158              {
    159                *tempPtr = *tempPtr-128;
   \   00000050   0x7838             LDRB     R0,[R7, #+0]
   \   00000052   0x3880             SUBS     R0,R0,#+128
   \   00000054   0x7038             STRB     R0,[R7, #+0]
    160                tempPtr++;
   \   00000056   0x1C7F             ADDS     R7,R7,#+1
    161              }
   \   00000058   0x1C76             ADDS     R6,R6,#+1
   \   0000005A   0xE7F7             B.N      ??RoadBrdSnd_SampleSound_6
    162              return Status;
   \                     ??RoadBrdSnd_SampleSound_7: (+1)
   \   0000005C   0x0028             MOVS     R0,R5
   \   0000005E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??RoadBrdSnd_SampleSound_1: (+1)
   \   00000060   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    163            }
    164          }
    165          
    166           /**
    167            * @brief  This function reads Road Sound and processes it to build FFT Bins.
    168            * @param  None.
    169            * @retval HAL_StatusTypeDef:     HAL_OK:       Operation completed with no errors.
    170            *                                HAL_ERROR:    Error found in Tasking or data passed.
    171            *                                HAL_BUSY:     ADC is busy.
    172            *                                HAL_TIMEOUT:  ADC timed out.
    173            */

   \                                 In section .text, align 2, keep-with-next
    174          HAL_StatusTypeDef RoadBrdSnd_ProcessSound( void )
    175          {
   \                     RoadBrdSnd_ProcessSound: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
    176            HAL_StatusTypeDef Status;
    177            float temp_val, temp_real, temp_img;
    178            int x;
    179            
    180            // Sample 128 Sampled from ADC
    181            Status = RoadBrdSnd_SampleSound( fr );
   \   00000004   0x....             LDR.N    R0,??DataTable11_1
   \   00000006   0x.... 0x....      BL       RoadBrdSnd_SampleSound
   \   0000000A   0x4680             MOV      R8,R0
    182            if (Status != HAL_OK)
   \   0000000C   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000010   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000014   0xD002             BEQ.N    ??RoadBrdSnd_ProcessSound_0
    183              return Status;
   \   00000016   0x4640             MOV      R0,R8
   \   00000018   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001A   0xE041             B.N      ??RoadBrdSnd_ProcessSound_1
    184            //TEST CODE....3.704Khz Waveform.
    185            /*uint8_t fTst[FFT_BUFFER_SIZE] = {  0x34, 0x00, 0x00, 0x00, 0x00, 0x72, 0xe2, 0xe1, 0xe0, 0xdf, 0x6d, 0x00, 0x00, 0x00, 0x00, 0x3b,
    186                                               0xe2, 0xe1, 0xe1, 0xe0, 0xa3, 0x00, 0x00, 0x00, 0x00, 0x07, 0xb8, 0xe2, 0xe0, 0xe0, 0xd2, 0x26,
    187                                               0x00, 0x00, 0x00, 0x00, 0x7f, 0xe1, 0xe1, 0xe0, 0xe0, 0x61, 0x00, 0x00, 0x00, 0x00, 0x48, 0xe2,
    188                                               0xe2, 0xe0, 0xe0, 0x96, 0x00, 0x00, 0x00, 0x00, 0x14, 0xc6, 0xe1, 0xe1, 0xe0, 0xc7, 0x17, 0x00,
    189                                               0x00, 0x00, 0x00, 0x8d, 0xe2, 0xe1, 0xdf, 0xdf, 0x53, 0x00, 0x00, 0x00, 0x00, 0x55, 0xe2, 0xe1,
    190                                               0xe0, 0xe0, 0x89, 0x00, 0x00, 0x00, 0x00, 0x20, 0xd4, 0xe1, 0xe1, 0xdf, 0xbc, 0x07, 0x00, 0x00,
    191                                               0x00, 0x00, 0x9c, 0xe2, 0xe1, 0xe0, 0xe0, 0x44, 0x00, 0x00, 0x00, 0x00, 0x63, 0xe2, 0xe1, 0xe1,
    192                                               0xdf, 0x7d, 0x00, 0x00, 0x00, 0x00, 0x2c, 0xde, 0xe1, 0xe1, 0xe0, 0xb0, 0x00, 0x00, 0x00, 0x00 };
    193            
    194            for (x=0; x<FFT_BUFFER_SIZE; x++)
    195              fr[x] = fTst[x];*/
    196            // Save results for possible recall.
    197            for (x=0; x<FFT_BUFFER_SIZE; x++)
   \                     ??RoadBrdSnd_ProcessSound_0: (+1)
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x0007             MOVS     R7,R0
   \                     ??RoadBrdSnd_ProcessSound_2: (+1)
   \   00000020   0x2F80             CMP      R7,#+128
   \   00000022   0xDA05             BGE.N    ??RoadBrdSnd_ProcessSound_3
    198              fs[x] = fr[x];
   \   00000024   0x....             LDR.N    R0,??DataTable11_1
   \   00000026   0x5DC0             LDRB     R0,[R0, R7]
   \   00000028   0x....             LDR.N    R1,??DataTable11_3
   \   0000002A   0x55C8             STRB     R0,[R1, R7]
   \   0000002C   0x1C7F             ADDS     R7,R7,#+1
   \   0000002E   0xE7F7             B.N      ??RoadBrdSnd_ProcessSound_2
    199            
    200            // Clear Imaginary buffer im[128].
    201            RoadBrdSnd_ClearImgnryBffr();
   \                     ??RoadBrdSnd_ProcessSound_3: (+1)
   \   00000030   0x.... 0x....      BL       RoadBrdSnd_ClearImgnryBffr
    202            
    203            // Perform Forward FFT as follows: fix_fft(re,im,7,0).
    204            x = fix_fft(fr, fi, 7, 0);
   \   00000034   0x2300             MOVS     R3,#+0
   \   00000036   0x2207             MOVS     R2,#+7
   \   00000038   0x....             LDR.N    R1,??DataTable11_2
   \   0000003A   0x....             LDR.N    R0,??DataTable11_1
   \   0000003C   0x.... 0x....      BL       fix_fft
   \   00000040   0x0007             MOVS     R7,R0
    205            if (x == -1)
   \   00000042   0xF117 0x0F01      CMN      R7,#+1
   \   00000046   0xD101             BNE.N    ??RoadBrdSnd_ProcessSound_4
    206              return HAL_ERROR;
   \   00000048   0x2001             MOVS     R0,#+1
   \   0000004A   0xE029             B.N      ??RoadBrdSnd_ProcessSound_1
    207            
    208            // For each item of re in sample size 64
    209            //    re[i] = sqrt(re[i] * re[i] + im[i] * im[i])
    210            for (x=0; x<(FFT_BUFFER_SIZE/2); x++)
   \                     ??RoadBrdSnd_ProcessSound_4: (+1)
   \   0000004C   0x2000             MOVS     R0,#+0
   \   0000004E   0x0007             MOVS     R7,R0
   \                     ??RoadBrdSnd_ProcessSound_5: (+1)
   \   00000050   0x2F40             CMP      R7,#+64
   \   00000052   0xDA23             BGE.N    ??RoadBrdSnd_ProcessSound_6
    211            {
    212              temp_real = fr[x];
   \   00000054   0x....             LDR.N    R0,??DataTable11_1
   \   00000056   0x57C0             LDRSB    R0,[R0, R7]
   \   00000058   0x.... 0x....      BL       __aeabi_i2f
   \   0000005C   0x0005             MOVS     R5,R0
    213              temp_img = fi[x];
   \   0000005E   0x....             LDR.N    R0,??DataTable11_2
   \   00000060   0x57C0             LDRSB    R0,[R0, R7]
   \   00000062   0x.... 0x....      BL       __aeabi_i2f
   \   00000066   0x0006             MOVS     R6,R0
    214              temp_val = sqrt((temp_real*temp_real) + (temp_img*temp_img));
   \   00000068   0x0028             MOVS     R0,R5
   \   0000006A   0x0029             MOVS     R1,R5
   \   0000006C   0x.... 0x....      BL       __aeabi_fmul
   \   00000070   0x4681             MOV      R9,R0
   \   00000072   0x0030             MOVS     R0,R6
   \   00000074   0x0031             MOVS     R1,R6
   \   00000076   0x.... 0x....      BL       __aeabi_fmul
   \   0000007A   0x4649             MOV      R1,R9
   \   0000007C   0x.... 0x....      BL       __aeabi_fadd
   \   00000080   0x.... 0x....      BL       __aeabi_f2d
   \   00000084   0x.... 0x....      BL       sqrt
   \   00000088   0x.... 0x....      BL       __aeabi_d2f
   \   0000008C   0x0004             MOVS     R4,R0
    215          //    temp_val = sqrt((fr[x]*fr[x]) + (fi[x]*fi[x]));
    216              fr[x] = ((uint16_t)temp_val & 0xff);
   \   0000008E   0x0020             MOVS     R0,R4
   \   00000090   0x.... 0x....      BL       __aeabi_f2iz
   \   00000094   0x....             LDR.N    R1,??DataTable11_1
   \   00000096   0x55C8             STRB     R0,[R1, R7]
    217            }
   \   00000098   0x1C7F             ADDS     R7,R7,#+1
   \   0000009A   0xE7D9             B.N      ??RoadBrdSnd_ProcessSound_5
    218            
    219            return Status;
   \                     ??RoadBrdSnd_ProcessSound_6: (+1)
   \   0000009C   0x4640             MOV      R0,R8
   \   0000009E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??RoadBrdSnd_ProcessSound_1: (+1)
   \   000000A0   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
    220          }
    221          
    222            /**
    223            * @brief  This function Returns Bins 0-15 in the passed structure pointer.
    224            * @param  BinSPtr BinPtr: Ptr to structure to receive the Bins 0-15 Data.
    225            * @retval HAL_StatusTypeDef:     HAL_OK:       Tasking of block of data to UART success.
    226            *                                HAL_ERROR:    Error found in Tasking or data passed.
    227            *                                HAL_BUSY:     UART is busy.
    228            *                                HAL_TIMEOUT:  UART timed out.
    229            */

   \                                 In section .text, align 2, keep-with-next
    230          HAL_StatusTypeDef RoadBrdSnd_DumpBin0( BinSPtr BinPtr )
    231          {
   \                     RoadBrdSnd_DumpBin0: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
    232            uint8_t tempstr[4];
    233            HAL_StatusTypeDef Status;
    234            int x;
    235            
    236            Status = HAL_OK;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x0005             MOVS     R5,R0
    237            
    238            // Clear pass string fisrt.
    239            sprintf( (char *)BinPtr->dumpStr, "");
   \   0000000A   0x....             ADR.N    R1,??DataTable11  ;; ""
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       sprintf
    240            
    241            for(x=0; x<16; x++)
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x0006             MOVS     R6,R0
   \                     ??RoadBrdSnd_DumpBin0_0: (+1)
   \   00000016   0x2E10             CMP      R6,#+16
   \   00000018   0xDA0B             BGE.N    ??RoadBrdSnd_DumpBin0_1
    242            {
    243              sprintf( (char *)tempstr, "%02x", fr[x]);
   \   0000001A   0x....             LDR.N    R0,??DataTable11_1
   \   0000001C   0x5782             LDRSB    R2,[R0, R6]
   \   0000001E   0x....             LDR.N    R1,??DataTable11_4
   \   00000020   0x4668             MOV      R0,SP
   \   00000022   0x.... 0x....      BL       sprintf
    244              strcat ((char *)BinPtr->dumpStr, (char *)tempstr);
   \   00000026   0x4669             MOV      R1,SP
   \   00000028   0x0020             MOVS     R0,R4
   \   0000002A   0x.... 0x....      BL       strcat
    245            }
   \   0000002E   0x1C76             ADDS     R6,R6,#+1
   \   00000030   0xE7F1             B.N      ??RoadBrdSnd_DumpBin0_0
    246            //strcat((char *)BinPtr->dumpStr, "Bn");
    247            
    248            return Status;
   \                     ??RoadBrdSnd_DumpBin0_1: (+1)
   \   00000032   0x0028             MOVS     R0,R5
   \   00000034   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000036   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
    249          }
    250          
    251            /**
    252            * @brief  This function Returns Bins 16-31 in the passed structure pointer.
    253            * @param  BinSPtr BinPtr: Ptr to structure to receive the Bins 0-15 Data.
    254            * @retval HAL_StatusTypeDef:     HAL_OK:       Tasking of block of data to UART success.
    255            *                                HAL_ERROR:    Error found in Tasking or data passed.
    256            *                                HAL_BUSY:     UART is busy.
    257            *                                HAL_TIMEOUT:  UART timed out.
    258            */

   \                                 In section .text, align 2, keep-with-next
    259          HAL_StatusTypeDef RoadBrdSnd_DumpBin16( BinSPtr BinPtr )
    260          {
   \                     RoadBrdSnd_DumpBin16: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
    261            uint8_t tempstr[4];
    262            HAL_StatusTypeDef Status;
    263            int x;
    264            
    265            Status = HAL_OK;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x0005             MOVS     R5,R0
    266            
    267            // Clear pass string fisrt.
    268            sprintf( (char *)BinPtr->dumpStr, "");
   \   0000000A   0x....             ADR.N    R1,??DataTable11  ;; ""
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       sprintf
    269            
    270            for(x=0; x<16; x++)
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x0006             MOVS     R6,R0
   \                     ??RoadBrdSnd_DumpBin16_0: (+1)
   \   00000016   0x2E10             CMP      R6,#+16
   \   00000018   0xDA0D             BGE.N    ??RoadBrdSnd_DumpBin16_1
    271            {
    272              sprintf( (char *)tempstr, "%02x", fr[x+16]);
   \   0000001A   0x....             LDR.N    R0,??DataTable11_1
   \   0000001C   0x4430             ADD      R0,R0,R6
   \   0000001E   0xF990 0x2010      LDRSB    R2,[R0, #+16]
   \   00000022   0x....             LDR.N    R1,??DataTable11_4
   \   00000024   0x4668             MOV      R0,SP
   \   00000026   0x.... 0x....      BL       sprintf
    273              strcat ((char *)BinPtr->dumpStr, (char *)tempstr);
   \   0000002A   0x4669             MOV      R1,SP
   \   0000002C   0x0020             MOVS     R0,R4
   \   0000002E   0x.... 0x....      BL       strcat
    274            }
   \   00000032   0x1C76             ADDS     R6,R6,#+1
   \   00000034   0xE7EF             B.N      ??RoadBrdSnd_DumpBin16_0
    275            //strcat((char *)BinPtr->dumpStr, "Bn");
    276            
    277            return Status;
   \                     ??RoadBrdSnd_DumpBin16_1: (+1)
   \   00000036   0x0028             MOVS     R0,R5
   \   00000038   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003A   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
    278          }
    279          
    280            /**
    281            * @brief  This function Returns Bins 32-47 in the passed structure pointer.
    282            * @param  BinSPtr BinPtr: Ptr to structure to receive the Bins 0-15 Data.
    283            * @retval HAL_StatusTypeDef:     HAL_OK:       Tasking of block of data to UART success.
    284            *                                HAL_ERROR:    Error found in Tasking or data passed.
    285            *                                HAL_BUSY:     UART is busy.
    286            *                                HAL_TIMEOUT:  UART timed out.
    287            */

   \                                 In section .text, align 2, keep-with-next
    288          HAL_StatusTypeDef RoadBrdSnd_DumpBin32( BinSPtr BinPtr )
    289          {
   \                     RoadBrdSnd_DumpBin32: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
    290            uint8_t tempstr[4];
    291            HAL_StatusTypeDef Status;
    292            int x;
    293            
    294            Status = HAL_OK;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x0005             MOVS     R5,R0
    295            
    296            // Clear pass string fisrt.
    297            sprintf( (char *)BinPtr->dumpStr, "");
   \   0000000A   0x....             ADR.N    R1,??DataTable11  ;; ""
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       sprintf
    298            
    299            for(x=0; x<16; x++)
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x0006             MOVS     R6,R0
   \                     ??RoadBrdSnd_DumpBin32_0: (+1)
   \   00000016   0x2E10             CMP      R6,#+16
   \   00000018   0xDA0D             BGE.N    ??RoadBrdSnd_DumpBin32_1
    300            {
    301              sprintf( (char *)tempstr, "%02x", fr[x+32]);
   \   0000001A   0x....             LDR.N    R0,??DataTable11_1
   \   0000001C   0x4430             ADD      R0,R0,R6
   \   0000001E   0xF990 0x2020      LDRSB    R2,[R0, #+32]
   \   00000022   0x....             LDR.N    R1,??DataTable11_4
   \   00000024   0x4668             MOV      R0,SP
   \   00000026   0x.... 0x....      BL       sprintf
    302              strcat ((char *)BinPtr->dumpStr, (char *)tempstr);
   \   0000002A   0x4669             MOV      R1,SP
   \   0000002C   0x0020             MOVS     R0,R4
   \   0000002E   0x.... 0x....      BL       strcat
    303            }
   \   00000032   0x1C76             ADDS     R6,R6,#+1
   \   00000034   0xE7EF             B.N      ??RoadBrdSnd_DumpBin32_0
    304            //strcat((char *)BinPtr->dumpStr, "Bn");
    305            
    306            return Status;
   \                     ??RoadBrdSnd_DumpBin32_1: (+1)
   \   00000036   0x0028             MOVS     R0,R5
   \   00000038   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003A   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
    307          }
    308          
    309            /**
    310            * @brief  This function Returns Bins 48-63 in the passed structure pointer.
    311            * @param  BinSPtr BinPtr: Ptr to structure to receive the Bins 0-15 Data.
    312            * @retval HAL_StatusTypeDef:     HAL_OK:       Tasking of block of data to UART success.
    313            *                                HAL_ERROR:    Error found in Tasking or data passed.
    314            *                                HAL_BUSY:     UART is busy.
    315            *                                HAL_TIMEOUT:  UART timed out.
    316            */

   \                                 In section .text, align 2, keep-with-next
    317          HAL_StatusTypeDef RoadBrdSnd_DumpBin48( BinSPtr BinPtr )
    318          {
   \                     RoadBrdSnd_DumpBin48: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
    319            uint8_t tempstr[4];
    320            HAL_StatusTypeDef Status;
    321            int x;
    322            
    323            Status = HAL_OK;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x0005             MOVS     R5,R0
    324            
    325            // Clear pass string fisrt.
    326            sprintf( (char *)BinPtr->dumpStr, "");
   \   0000000A   0x....             ADR.N    R1,??DataTable11  ;; ""
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       sprintf
    327            
    328            for(x=0; x<16; x++)
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x0006             MOVS     R6,R0
   \                     ??RoadBrdSnd_DumpBin48_0: (+1)
   \   00000016   0x2E10             CMP      R6,#+16
   \   00000018   0xDA0D             BGE.N    ??RoadBrdSnd_DumpBin48_1
    329            {
    330              sprintf( (char *)tempstr, "%02x", fr[x+48]);
   \   0000001A   0x....             LDR.N    R0,??DataTable11_1
   \   0000001C   0x4430             ADD      R0,R0,R6
   \   0000001E   0xF990 0x2030      LDRSB    R2,[R0, #+48]
   \   00000022   0x....             LDR.N    R1,??DataTable11_4
   \   00000024   0x4668             MOV      R0,SP
   \   00000026   0x.... 0x....      BL       sprintf
    331              strcat ((char *)BinPtr->dumpStr, (char *)tempstr);
   \   0000002A   0x4669             MOV      R1,SP
   \   0000002C   0x0020             MOVS     R0,R4
   \   0000002E   0x.... 0x....      BL       strcat
    332            }
   \   00000032   0x1C76             ADDS     R6,R6,#+1
   \   00000034   0xE7EF             B.N      ??RoadBrdSnd_DumpBin48_0
    333            //strcat((char *)BinPtr->dumpStr, "Bn");
    334            
    335            return Status;
   \                     ??RoadBrdSnd_DumpBin48_1: (+1)
   \   00000036   0x0028             MOVS     R0,R5
   \   00000038   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003A   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
    336          }
    337          
    338            /**
    339            * @brief  This function clears all buffers
    340            * @param  None
    341            * @retval None
    342            */

   \                                 In section .text, align 2, keep-with-next
    343          void RoadBrdSnd_ClrBffrs( void )
    344          {
    345            int x;
    346            
    347            for (x=0; x<FFT_BUFFER_SIZE; x++)
   \                     RoadBrdSnd_ClrBffrs: (+1)
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0x0008             MOVS     R0,R1
   \                     ??RoadBrdSnd_ClrBffrs_0: (+1)
   \   00000004   0x2880             CMP      R0,#+128
   \   00000006   0xDA0A             BGE.N    ??RoadBrdSnd_ClrBffrs_1
    348            {
    349              fr[x] = 0;
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x....             LDR.N    R2,??DataTable11_1
   \   0000000C   0x5411             STRB     R1,[R2, R0]
    350              fi[x] = 0;
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0x....             LDR.N    R2,??DataTable11_2
   \   00000012   0x5411             STRB     R1,[R2, R0]
    351              fs[x] = 0;
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0x....             LDR.N    R2,??DataTable11_3
   \   00000018   0x5411             STRB     R1,[R2, R0]
    352            }
   \   0000001A   0x1C40             ADDS     R0,R0,#+1
   \   0000001C   0xE7F2             B.N      ??RoadBrdSnd_ClrBffrs_0
    353          }
   \                     ??RoadBrdSnd_ClrBffrs_1: (+1)
   \   0000001E   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   0x00 0x00          DC8      "",0x0,0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_1:
   \   00000000   0x........         DC32     fr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_2:
   \   00000000   0x........         DC32     fi

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_3:
   \   00000000   0x........         DC32     fs

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_4:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .rodata, align 1
   \   00000000   0x00               DC8 ""

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x25 0x30          DC8 "%02x"
   \              0x32 0x78    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    354          
    355            
    356          
    357          /************************ (C) COPYRIGHT WeatherCloud *****END OF FILE****/
    358          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   RoadBrdSnd_ClearBffrs
       0   RoadBrdSnd_ClearImgnryBffr
       0   RoadBrdSnd_ClearRealBffr
       0   RoadBrdSnd_ClrBffrs
      24   RoadBrdSnd_DumpBin0
        24   -> sprintf
        24   -> strcat
      24   RoadBrdSnd_DumpBin16
        24   -> sprintf
        24   -> strcat
      24   RoadBrdSnd_DumpBin32
        24   -> sprintf
        24   -> strcat
      24   RoadBrdSnd_DumpBin48
        24   -> sprintf
        24   -> strcat
      32   RoadBrdSnd_ProcessSound
        32   -> RoadBrdSnd_ClearImgnryBffr
        32   -> RoadBrdSnd_SampleSound
        32   -> __aeabi_d2f
        32   -> __aeabi_f2d
        32   -> __aeabi_f2iz
        32   -> __aeabi_fadd
        32   -> __aeabi_fmul
        32   -> __aeabi_i2f
        32   -> fix_fft
        32   -> sqrt
      24   RoadBrdSnd_SampleSound
        24   -> RoadBrd_ADC_Start
        24   -> RoadBrd_ADC_Status
        24   -> RoadBrd_Delay
       0   RoadBrdSnd_getImgnryBffr
       0   RoadBrdSnd_getRealBffr
       0   RoadBrdSnd_getSaveBffr


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable11
       4  ??DataTable11_1
       4  ??DataTable11_2
       4  ??DataTable11_3
       4  ??DataTable11_4
       1  ?_0
       8  ?_1
      26  RoadBrdSnd_ClearBffrs
      20  RoadBrdSnd_ClearImgnryBffr
      20  RoadBrdSnd_ClearRealBffr
      32  RoadBrdSnd_ClrBffrs
      56  RoadBrdSnd_DumpBin0
      60  RoadBrdSnd_DumpBin16
      60  RoadBrdSnd_DumpBin32
      60  RoadBrdSnd_DumpBin48
     164  RoadBrdSnd_ProcessSound
      98  RoadBrdSnd_SampleSound
       4  RoadBrdSnd_getImgnryBffr
       4  RoadBrdSnd_getRealBffr
       4  RoadBrdSnd_getSaveBffr
     128  fi
     128  fr
     128  fs

 
 384 bytes in section .bss
   9 bytes in section .rodata
 628 bytes in section .text
 
 628 bytes of CODE  memory
   9 bytes of CONST memory
 384 bytes of DATA  memory

Errors: none
Warnings: none
