###############################################################################
#
# IAR ANSI C/C++ Compiler V7.60.2.11341/W32 for ARM       07/Dec/2017  20:12:31
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\wwdg.c
#    Command line =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\wwdg.c
#        -D USE_HAL_DRIVER -D STM32L152xE -D USE_STM32L1XX_NUCLEO -D ASCII -D
#        REV_L -D LONG_DELAY -D XML_SHRT -lCN
#        "D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\RdBrd
#        XMLShrt Long Always\List" -o
#        "D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\RdBrd
#        XMLShrt Long Always\Obj" --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_clustering --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.4\arm\INC\c\DLib_Config_Full.h" -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/STM32L1xx_HAL_Driver/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/STM32L1xx_HAL_Driver/Inc/Legacy\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/BSP/STM32L1xx_Nucleo\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/portable/IAR/ARM_CM3\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Core/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/CMSIS/Include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/CMSIS/Device/ST/STM32L1xx/Include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\..\Middlewares\Third_Party\BgLib\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.4\arm\CMSIS\Include\"
#    Locale       =  English_United States.1252
#    List file    =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\RdBrd
#        XMLShrt Long Always\List\wwdg.lst
#    Object file  =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\RdBrd
#        XMLShrt Long Always\Obj\wwdg.o
#
###############################################################################

D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\wwdg.c
      1          /**
      2            ******************************************************************************
      3            * File Name          : WWDG.c
      4            * Description        : This file provides code for the configuration
      5            *                      of the WWDG instances.
      6            ******************************************************************************
      7            *
      8            * COPYRIGHT(c) 2016 STMicroelectronics
      9            *
     10            * Redistribution and use in source and binary forms, with or without modification,
     11            * are permitted provided that the following conditions are met:
     12            *   1. Redistributions of source code must retain the above copyright notice,
     13            *      this list of conditions and the following disclaimer.
     14            *   2. Redistributions in binary form must reproduce the above copyright notice,
     15            *      this list of conditions and the following disclaimer in the documentation
     16            *      and/or other materials provided with the distribution.
     17            *   3. Neither the name of STMicroelectronics nor the names of its contributors
     18            *      may be used to endorse or promote products derived from this software
     19            *      without specific prior written permission.
     20            *
     21            * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     22            * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     23            * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     24            * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
     25            * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     26            * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     27            * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
     28            * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
     29            * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
     30            * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     31            *
     32            ******************************************************************************
     33            */
     34          
     35          /* Includes ------------------------------------------------------------------*/
     36          #include "wwdg.h"
     37          #include "gpio.h"
     38          #include "usart.h"
     39          #include "Flash.h"
     40          #include "tim.h"
     41          
     42          /* USER CODE BEGIN 0 */
     43          // Frame Structure Define
     44          //wwdg_Frames wwdg_HardFrames  @ 0x08070000;

   \                                 In section .bss, at 0x8070000
     45          wwdg_Frames wwdg_HardFrames  @ BASE_FLASH_ADDRESS;
   \                     wwdg_HardFrames:
   \   00000000                      DS8 36
     46          

   \                                 In section .bss, align 4
     47          static wwdg_Frames Save_Frames;
   \                     Save_Frames:
   \   00000000                      DS8 36
     48          

   \                                 In section .bss, align 4
     49          static char DateString[DATE_STRING_LENGTH];             // Current Date String.
   \                     DateString:
   \   00000000                      DS8 32

   \                                 In section .bss, align 4
     50          static char TickString[DATE_STRING_LENGTH];             // Current Tick String.
   \                     TickString:
   \   00000000                      DS8 32
     51          
     52          /* USER CODE END 0 */
     53          

   \                                 In section .bss, align 4
     54          WWDG_HandleTypeDef hwwdg;
   \                     hwwdg:
   \   00000000                      DS8 20
     55          
     56          // wwdg Save Frame

   \                                 In section .bss, align 4
     57          static wwdg_SaveFrame wwdg_Save;
   \                     wwdg_Save:
   \   00000000                      DS8 4
     58          
     59            /**
     60            * @brief  This function initializes the Static Current Date String.
     61            * @param  none
     62            * @retval HAL_StatusTypeDef:     HAL_OK:       Flash Operation success.
     63            */

   \                                 In section .text, align 2, keep-with-next
     64          HAL_StatusTypeDef RoadBrd_WWDG_InitializeDateString( void )
     65          {
   \                     RoadBrd_WWDG_InitializeDateString: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     66            strcpy(DateString, "---NULL---");
   \   00000002   0x.... 0x....      LDR.W    R1,??DataTable32
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable32_1
   \   0000000A   0x.... 0x....      BL       strcpy
     67            return HAL_OK;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xBD02             POP      {R1,PC}          ;; return
     68          }
     69          
     70            /**
     71            * @brief  This function initializes the Static Current Date String.
     72            * @param  none
     73            * @retval char *:     Pointer to Date String.
     74            */

   \                                 In section .text, align 2, keep-with-next
     75          char *RoadBrd_WWDG_GetDateString( void )
     76          {
     77            return &DateString[0];
   \                     RoadBrd_WWDG_GetDateString: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable32_1
   \   00000004   0x4770             BX       LR               ;; return
     78          }
     79          
     80            /**
     81            * @brief  This function initializes the Static Current Date String.
     82            * @param  char* parmString: String to be set.
     83            * @retval HAL_StatusTypeDef:     HAL_OK:       Flash Operation success.
     84            */

   \                                 In section .text, align 2, keep-with-next
     85          HAL_StatusTypeDef RoadBrd_WWDG_SetDateString( char* parmString )
     86          {
   \                     RoadBrd_WWDG_SetDateString: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     87            strcpy(DateString, parmString);
   \   00000004   0x0021             MOVS     R1,R4
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable32_1
   \   0000000A   0x.... 0x....      BL       strcpy
     88            return HAL_OK;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xBD10             POP      {R4,PC}          ;; return
     89          }
     90          
     91            /**
     92            * @brief  This function initializes the Static Current Date String.
     93            * @param  none
     94            * @retval HAL_StatusTypeDef:     HAL_OK:       Flash Operation success.
     95            */

   \                                 In section .text, align 2, keep-with-next
     96          HAL_StatusTypeDef RoadBrd_WWDG_InitializeTickString( void )
     97          {
   \                     RoadBrd_WWDG_InitializeTickString: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     98            strcpy(TickString, "---NULL---");
   \   00000002   0x.... 0x....      LDR.W    R1,??DataTable32
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable32_2
   \   0000000A   0x.... 0x....      BL       strcpy
     99            return HAL_OK;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xBD02             POP      {R1,PC}          ;; return
    100          }
    101          
    102            /**
    103            * @brief  This function initializes the Static Current Date String.
    104            * @param  none
    105            * @retval char *:     Pointer to Date String.
    106            */

   \                                 In section .text, align 2, keep-with-next
    107          char *RoadBrd_WWDG_GetTickString( void )
    108          {
    109            return &TickString[0];
   \                     RoadBrd_WWDG_GetTickString: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable32_2
   \   00000004   0x4770             BX       LR               ;; return
    110          }
    111          
    112            /**
    113            * @brief  This function initializes the Static Current Date String.
    114            * @param  char* parmString: String to be set.
    115            * @retval HAL_StatusTypeDef:     HAL_OK:       Flash Operation success.
    116            */

   \                                 In section .text, align 2, keep-with-next
    117          HAL_StatusTypeDef RoadBrd_WWDG_SetTickString( char* parmString )
    118          {
   \                     RoadBrd_WWDG_SetTickString: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    119            strcpy(TickString, parmString);
   \   00000004   0x0021             MOVS     R1,R4
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable32_2
   \   0000000A   0x.... 0x....      BL       strcpy
    120            return HAL_OK;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xBD10             POP      {R4,PC}          ;; return
    121          }
    122          
    123          /* WWDG init function */

   \                                 In section .text, align 2, keep-with-next
    124          void MX_WWDG_Init(void)
    125          {
   \                     MX_WWDG_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    126          
    127            /*##-2- Configure the WWDG peripheral ######################################*/
    128            /* WWDG clock counter = (PCLK1 (32MHz)/4096)/8) = 976.6 Hz (1.02ms) 
    129               WWDG Window value = 80 means that the WWDG counter should be refreshed only 
    130               when the counter is below 80 (and greater than 64/0x40) otherwise a reset will 
    131               be generated. 
    132               WWDG Counter value = 127, WWDG timeout = ~1024 us * 64 = 65.57 ms */
    133            hwwdg.Instance = WWDG;
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable32_3  ;; 0x40002c00
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable32_4
   \   0000000A   0x6008             STR      R0,[R1, #+0]
    134            hwwdg.Init.Prescaler = WWDG_PRESCALER_8;
   \   0000000C   0xF44F 0x70C0      MOV      R0,#+384
   \   00000010   0x....             LDR.N    R1,??DataTable32_4
   \   00000012   0x6048             STR      R0,[R1, #+4]
    135            hwwdg.Init.Window = ROADBRD_HIGHLMIT;               // Set High end of 102.4 ms. 
   \   00000014   0x2064             MOVS     R0,#+100
   \   00000016   0x....             LDR.N    R1,??DataTable32_4
   \   00000018   0x6088             STR      R0,[R1, #+8]
    136                                                                // Max_Data = 0x80
    137            hwwdg.Init.Counter = ROADBRD_TIMEOUT;               // Set Timer at 130.048 ms.
   \   0000001A   0x207F             MOVS     R0,#+127
   \   0000001C   0x....             LDR.N    R1,??DataTable32_4
   \   0000001E   0x60C8             STR      R0,[R1, #+12]
    138            if (HAL_WWDG_Init(&hwwdg) != HAL_OK)
   \   00000020   0x....             LDR.N    R0,??DataTable32_4
   \   00000022   0x.... 0x....      BL       HAL_WWDG_Init
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xD001             BEQ.N    ??MX_WWDG_Init_0
    139            {
    140              Error_Handler();
   \   0000002A   0x.... 0x....      BL       Error_Handler
    141            }
    142            // Clear Save Frame.
    143            wwdg_Save.event = false;
   \                     ??MX_WWDG_Init_0: (+1)
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x....             LDR.N    R1,??DataTable32_5
   \   00000032   0x7008             STRB     R0,[R1, #+0]
    144          }
   \   00000034   0xBD01             POP      {R0,PC}          ;; return
    145          

   \                                 In section .text, align 2, keep-with-next
    146          void HAL_WWDG_MspInit(WWDG_HandleTypeDef* wwdgHandle)
    147          {
   \                     HAL_WWDG_MspInit: (+1)
   \   00000000   0xB081             SUB      SP,SP,#+4
    148          
    149            if(wwdgHandle->Instance==WWDG)
   \   00000002   0x6801             LDR      R1,[R0, #+0]
   \   00000004   0x....             LDR.N    R2,??DataTable32_3  ;; 0x40002c00
   \   00000006   0x4291             CMP      R1,R2
   \   00000008   0xD10B             BNE.N    ??HAL_WWDG_MspInit_0
    150            {
    151            /* USER CODE BEGIN WWDG_MspInit 0 */
    152          
    153            /* USER CODE END WWDG_MspInit 0 */
    154              /* Peripheral clock enable */
    155              __HAL_RCC_WWDG_CLK_ENABLE();
   \   0000000A   0x....             LDR.N    R1,??DataTable32_6  ;; 0x40023824
   \   0000000C   0x6809             LDR      R1,[R1, #+0]
   \   0000000E   0xF451 0x6100      ORRS     R1,R1,#0x800
   \   00000012   0x....             LDR.N    R2,??DataTable32_6  ;; 0x40023824
   \   00000014   0x6011             STR      R1,[R2, #+0]
   \   00000016   0x....             LDR.N    R1,??DataTable32_6  ;; 0x40023824
   \   00000018   0x6809             LDR      R1,[R1, #+0]
   \   0000001A   0xF411 0x6100      ANDS     R1,R1,#0x800
   \   0000001E   0x9100             STR      R1,[SP, #+0]
   \   00000020   0x9900             LDR      R1,[SP, #+0]
    156            /* USER CODE BEGIN WWDG_MspInit 1 */
    157          
    158            /* USER CODE END WWDG_MspInit 1 */
    159            }
    160          }
   \                     ??HAL_WWDG_MspInit_0: (+1)
   \   00000022   0xB001             ADD      SP,SP,#+4
   \   00000024   0x4770             BX       LR               ;; return
    161          

   \                                 In section .text, align 2, keep-with-next
    162          void HAL_WWDG_MspDeInit(WWDG_HandleTypeDef* wwdgHandle)
    163          {
    164          
    165            if(wwdgHandle->Instance==WWDG)
   \                     HAL_WWDG_MspDeInit: (+1)
   \   00000000   0x6801             LDR      R1,[R0, #+0]
   \   00000002   0x....             LDR.N    R2,??DataTable32_3  ;; 0x40002c00
   \   00000004   0x4291             CMP      R1,R2
   \   00000006   0xD105             BNE.N    ??HAL_WWDG_MspDeInit_0
    166            {
    167            /* USER CODE BEGIN WWDG_MspDeInit 0 */
    168          
    169            /* USER CODE END WWDG_MspDeInit 0 */
    170              /* Peripheral clock disable */
    171              __HAL_RCC_WWDG_CLK_DISABLE();
   \   00000008   0x....             LDR.N    R1,??DataTable32_6  ;; 0x40023824
   \   0000000A   0x6809             LDR      R1,[R1, #+0]
   \   0000000C   0xF431 0x6100      BICS     R1,R1,#0x800
   \   00000010   0x....             LDR.N    R2,??DataTable32_6  ;; 0x40023824
   \   00000012   0x6011             STR      R1,[R2, #+0]
    172            }
    173            /* USER CODE BEGIN WWDG_MspDeInit 1 */
    174          
    175            /* USER CODE END WWDG_MspDeInit 1 */
    176          } 
   \                     ??HAL_WWDG_MspDeInit_0: (+1)
   \   00000014   0x4770             BX       LR               ;; return
    177          
    178          /* USER CODE BEGIN 1 */
    179          /**
    180            * @brief  Start WWDG Timer
    181            * @param  none
    182            * @retval HAL_StatusTypeDef:     HAL_OK:       Error Code logged
    183            *                                HAL_ERROR:    Error Log full or Bad Code
    184            */

   \                                 In section .text, align 2, keep-with-next
    185          HAL_StatusTypeDef RoadBrd_WWDG_Start( void )
    186          {
   \                     RoadBrd_WWDG_Start: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    187            //return HAL_WWDG_Start(&hwwdg);
    188            return HAL_WWDG_Start_IT(&hwwdg);
   \   00000002   0x....             LDR.N    R0,??DataTable32_4
   \   00000004   0x.... 0x....      BL       HAL_WWDG_Start_IT
   \   00000008   0xBD02             POP      {R1,PC}          ;; return
    189          }
    190          
    191          /**
    192            * @brief  Refresh WWDG Timer
    193            * @param  none
    194            * @retval HAL_StatusTypeDef:     HAL_OK:       Error Code logged
    195            *                                HAL_ERROR:    Error Log full or Bad Code
    196            */

   \                                 In section .text, align 2, keep-with-next
    197          HAL_StatusTypeDef RoadBrd_WWDG_Refresh( void )
    198          {
   \                     RoadBrd_WWDG_Refresh: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    199            uint32_t rfrsh_cnt;
    200            
    201            // Let's Only Refresh in Window...
    202            rfrsh_cnt = RoadBrd_WWDG_GetRefreshCnt();
   \   00000002   0x.... 0x....      BL       RoadBrd_WWDG_GetRefreshCnt
   \   00000006   0x0004             MOVS     R4,R0
    203            if ( rfrsh_cnt < ROADBRD_HIGHLMIT)
   \   00000008   0x2C64             CMP      R4,#+100
   \   0000000A   0xD204             BCS.N    ??RoadBrd_WWDG_Refresh_0
    204              return HAL_WWDG_Refresh(&hwwdg, ROADBRD_TIMEOUT);
   \   0000000C   0x217F             MOVS     R1,#+127
   \   0000000E   0x....             LDR.N    R0,??DataTable32_4
   \   00000010   0x.... 0x....      BL       HAL_WWDG_Refresh
   \   00000014   0xE000             B.N      ??RoadBrd_WWDG_Refresh_1
    205            else
    206              return HAL_OK;
   \                     ??RoadBrd_WWDG_Refresh_0: (+1)
   \   00000016   0x2000             MOVS     R0,#+0
   \                     ??RoadBrd_WWDG_Refresh_1: (+1)
   \   00000018   0xBD10             POP      {R4,PC}          ;; return
    207          }
    208          
    209          /**
    210            * @brief  Refresh WWDG Timer
    211            * @param  none
    212            * @retval HAL_StatusTypeDef:     HAL_OK:       Error Code logged
    213            *                                HAL_ERROR:    Error Log full or Bad Code
    214            */

   \                                 In section .text, align 2, keep-with-next
    215          uint32_t RoadBrd_WWDG_GetRefreshCnt( void )
    216          {
    217            // Return the 7-Bit Counter Value.
    218            return(READ_REG(hwwdg.Instance->CR) & 0x7f);                 // hwwdg->Instance->CR
   \                     RoadBrd_WWDG_GetRefreshCnt: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable32_4
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF010 0x007F      ANDS     R0,R0,#0x7F
   \   0000000A   0x4770             BX       LR               ;; return
    219          }
    220          
    221              

   \                                 In section .text, align 2, keep-with-next
    222          void HAL_WWDG_WakeupCallback(WWDG_HandleTypeDef* hwwdg)
    223          {
    224            //uint8_t tempBffr2[20];
    225          
    226            static bool OnceFlg = false;
    227            
    228            if ( OnceFlg )
   \                     HAL_WWDG_WakeupCallback: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable32_7
   \   00000002   0x7809             LDRB     R1,[R1, #+0]
   \   00000004   0x2900             CMP      R1,#+0
   \   00000006   0xD003             BEQ.N    ??HAL_WWDG_WakeupCallback_0
    229            {
    230              wwdg_Save.event = true;   // We have had a wwdg Event...Mark that it did occur.
   \   00000008   0x2101             MOVS     R1,#+1
   \   0000000A   0x....             LDR.N    R2,??DataTable32_5
   \   0000000C   0x7011             STRB     R1,[R2, #+0]
   \   0000000E   0xE002             B.N      ??HAL_WWDG_WakeupCallback_1
    231          //    if (wwdg_Save2.event)
    232          //      OnceFlg = false;
    233            }
    234            else
    235            {
    236              OnceFlg = true;
   \                     ??HAL_WWDG_WakeupCallback_0: (+1)
   \   00000010   0x2101             MOVS     R1,#+1
   \   00000012   0x....             LDR.N    R2,??DataTable32_7
   \   00000014   0x7011             STRB     R1,[R2, #+0]
    237            }
    238          }
   \                     ??HAL_WWDG_WakeupCallback_1: (+1)
   \   00000016   0x4770             BX       LR               ;; return

   \                                 In section .bss, align 1
   \                     `HAL_WWDG_WakeupCallback::OnceFlg`:
   \   00000000                      DS8 1
    239          
    240          /**
    241          * @brief This function handles wwdt global interrupt.
    242          */

   \                                 In section .text, align 2, keep-with-next
    243          void WWDG_IRQHandler(void)
    244          {
   \                     WWDG_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    245            HAL_WWDG_IRQHandler(&hwwdg);
   \   00000002   0x....             LDR.N    R0,??DataTable32_4
   \   00000004   0x.... 0x....      BL       HAL_WWDG_IRQHandler
    246          }
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
    247          

   \                                 In section .text, align 2, keep-with-next
    248          bool RoadBrd_WWDG_TstEvent( void )
    249          {
    250            return wwdg_Save.event;
   \                     RoadBrd_WWDG_TstEvent: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable32_5
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return
    251          }
    252          
    253            /**
    254            * @brief  This function verifies the WWDG Flash Frame Structure.
    255            * @param  none
    256            * @retval bool:     true:       Valid Frames
    257            *                   false:      Frame Bad.
    258            */

   \                                 In section .text, align 2, keep-with-next
    259          bool RoadBrd_WWDG_VerifyFrame( void )
    260          {
   \                     RoadBrd_WWDG_VerifyFrame: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    261            HAL_StatusTypeDef Status;
    262            
    263            Status = HAL_OK;
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x0004             MOVS     R4,R0
    264            // Read Frame from Flash.
    265            Status = RoadBrd_FlashRead(  (uint32_t)&wwdg_HardFrames, (uint32_t *)&Save_Frames, sizeof(Save_Frames));
   \   00000006   0x2224             MOVS     R2,#+36
   \   00000008   0x....             LDR.N    R1,??DataTable32_8
   \   0000000A   0x....             LDR.N    R0,??DataTable32_9  ;; 0x8070000
   \   0000000C   0x.... 0x....      BL       RoadBrd_FlashRead
   \   00000010   0x0004             MOVS     R4,R0
    266            // Compare SYnc Workd and return status.
    267            if (Status != HAL_OK)
   \   00000012   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000014   0x2C00             CMP      R4,#+0
   \   00000016   0xD001             BEQ.N    ??RoadBrd_WWDG_VerifyFrame_0
    268              return false;
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0xE007             B.N      ??RoadBrd_WWDG_VerifyFrame_1
    269            else
    270            {
    271              if (Save_Frames.checksum == FRAME_CHKSUM)
   \                     ??RoadBrd_WWDG_VerifyFrame_0: (+1)
   \   0000001C   0x....             LDR.N    R0,??DataTable32_8
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0xF1B0 0x3F5A      CMP      R0,#+1515870810
   \   00000024   0xD101             BNE.N    ??RoadBrd_WWDG_VerifyFrame_2
    272                return true;
   \   00000026   0x2001             MOVS     R0,#+1
   \   00000028   0xE000             B.N      ??RoadBrd_WWDG_VerifyFrame_1
    273              else
    274                return false;
   \                     ??RoadBrd_WWDG_VerifyFrame_2: (+1)
   \   0000002A   0x2000             MOVS     R0,#+0
   \                     ??RoadBrd_WWDG_VerifyFrame_1: (+1)
   \   0000002C   0xBD10             POP      {R4,PC}          ;; return
   \   0000002E                      REQUIRE wwdg_HardFrames
    275            }
    276          }
    277          
    278            /**
    279            * @brief  This function initializes the key frame structures needed to track wwdg Frames.
    280            * @param  none
    281            * @retval HAL_StatusTypeDef:     HAL_OK:       Flash Operation success.
    282            *                                HAL_ERROR:    Error found in Tasking or data passed.
    283            *                                HAL_BUSY:     Flash is busy.
    284            *                                HAL_TIMEOUT:  Flash timed out.
    285            */

   \                                 In section .text, align 2, keep-with-next
    286          HAL_StatusTypeDef RoadBrd_WWDG_InitializeFrmFlash( void )
    287          {
   \                     RoadBrd_WWDG_InitializeFrmFlash: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    288            HAL_StatusTypeDef Status;
    289            
    290            Status = HAL_OK;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x0004             MOVS     R4,R0
    291            // Initialize Key Structures of Frame
    292            Save_Frames.checksum = FRAME_CHKSUM;
   \   00000008   0xF05F 0x305A      MOVS     R0,#+1515870810
   \   0000000C   0x....             LDR.N    R1,??DataTable32_8
   \   0000000E   0x6008             STR      R0,[R1, #+0]
    293            Save_Frames.RdSndTickCnt = PROCESS_RD_SND_TIME;
   \   00000010   0x207B             MOVS     R0,#+123
   \   00000012   0x....             LDR.N    R1,??DataTable32_8
   \   00000014   0x6048             STR      R0,[R1, #+4]
    294            Save_Frames.SnsrTickCnt = PROCESS_SNSR_TIME;
   \   00000016   0x2064             MOVS     R0,#+100
   \   00000018   0x....             LDR.N    R1,??DataTable32_8
   \   0000001A   0x6088             STR      R0,[R1, #+8]
    295            Save_Frames.TackLimit = TACK_LIMIT;
   \   0000001C   0x2004             MOVS     R0,#+4
   \   0000001E   0x....             LDR.N    R1,??DataTable32_8
   \   00000020   0x60C8             STR      R0,[R1, #+12]
    296            Save_Frames.BootDelay = BOOT_WAIT;
   \   00000022   0x200F             MOVS     R0,#+15
   \   00000024   0x....             LDR.N    R1,??DataTable32_8
   \   00000026   0x6108             STR      R0,[R1, #+16]
    297            Save_Frames.Units_flg = false;
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0x....             LDR.N    R1,??DataTable32_8
   \   0000002C   0x7508             STRB     R0,[R1, #+20]
    298            Save_Frames.Frame_RdPtr = 0;
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x....             LDR.N    R1,??DataTable32_8
   \   00000032   0x7588             STRB     R0,[R1, #+22]
    299            Save_Frames.Frame_WrtPtr = 0;
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x....             LDR.N    R1,??DataTable32_8
   \   00000038   0x7548             STRB     R0,[R1, #+21]
    300            
    301            // Write Structure to Flash Memory.
    302            //Status = RoadBrd_FlashInitWrite( 0x00, 
    303            Status = RoadBrd_FlashWrite( 0x00, 
    304                                         FLASH_TYPEERASE_PAGES, 
    305                                         (uint32_t)&wwdg_HardFrames, 
    306                                         (uint32_t *)&Save_Frames, 
    307                                         sizeof(Save_Frames));
   \   0000003A   0x2024             MOVS     R0,#+36
   \   0000003C   0x9000             STR      R0,[SP, #+0]
   \   0000003E   0x....             LDR.N    R3,??DataTable32_8
   \   00000040   0x....             LDR.N    R2,??DataTable32_9  ;; 0x8070000
   \   00000042   0x2100             MOVS     R1,#+0
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0x.... 0x....      BL       RoadBrd_FlashWrite
   \   0000004A   0x0004             MOVS     R4,R0
    308            return Status;
   \   0000004C   0x0020             MOVS     R0,R4
   \   0000004E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000050   0xBD16             POP      {R1,R2,R4,PC}    ;; return
   \   00000052                      REQUIRE wwdg_HardFrames
    309          }
    310          
    311          
    312          /**
    313            * @brief  Update Key Tick Counts.
    314            * @param  uint32_t PassedRdSndTickCnt
    315            * @param  uint32_t PassedSnsrTickCnt
    316            * @retval HAL_StatusTypeDef:     HAL_OK:       Flash Operation success.
    317            *                                HAL_ERROR:    Error found in Tasking or data passed.
    318            *                                HAL_BUSY:     Flash is busy.
    319            *                                HAL_TIMEOUT:  Flash timed out.
    320            */

   \                                 In section .text, align 2, keep-with-next
    321          HAL_StatusTypeDef RoadBrd_Set_TickCounts( uint32_t PassedRdSndTickCnt, uint32_t PassedSnsrTickCnt )
    322          {
   \                     RoadBrd_Set_TickCounts: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    323            HAL_StatusTypeDef Status;
    324            
    325            Status = HAL_OK;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x0006             MOVS     R6,R0
    326            Save_Frames.RdSndTickCnt = PassedRdSndTickCnt;
   \   0000000C   0x....             LDR.N    R0,??DataTable32_8
   \   0000000E   0x6044             STR      R4,[R0, #+4]
    327            Save_Frames.SnsrTickCnt = PassedSnsrTickCnt;
   \   00000010   0x....             LDR.N    R0,??DataTable32_8
   \   00000012   0x6085             STR      R5,[R0, #+8]
    328            Set_TickCounts( PassedRdSndTickCnt, PassedSnsrTickCnt );
   \   00000014   0x0029             MOVS     R1,R5
   \   00000016   0x0020             MOVS     R0,R4
   \   00000018   0x.... 0x....      BL       Set_TickCounts
    329            // Write Structure to Flash Memory.
    330            //Status = RoadBrd_FlashInitWrite( 0x00, 
    331            Status = RoadBrd_FlashWrite( 0x00, 
    332                                         FLASH_TYPEERASE_PAGES, 
    333                                         (uint32_t)&wwdg_HardFrames, 
    334                                         (uint32_t *)&Save_Frames, 
    335                                         sizeof(Save_Frames));
   \   0000001C   0x2024             MOVS     R0,#+36
   \   0000001E   0x9000             STR      R0,[SP, #+0]
   \   00000020   0x....             LDR.N    R3,??DataTable32_8
   \   00000022   0x....             LDR.N    R2,??DataTable32_9  ;; 0x8070000
   \   00000024   0x2100             MOVS     R1,#+0
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x.... 0x....      BL       RoadBrd_FlashWrite
   \   0000002C   0x0006             MOVS     R6,R0
    336            return Status;
   \   0000002E   0x0030             MOVS     R0,R6
   \   00000030   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000032   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
   \   00000034                      REQUIRE wwdg_HardFrames
    337          }
    338          
    339          /**
    340            * @brief  Update RdSndTickCnt.
    341            * @param  uint32_t PassedRdSndTickCnt
    342            * @retval HAL_StatusTypeDef:     HAL_OK:       Flash Operation success.
    343            *                                HAL_ERROR:    Error found in Tasking or data passed.
    344            *                                HAL_BUSY:     Flash is busy.
    345            *                                HAL_TIMEOUT:  Flash timed out.
    346            */

   \                                 In section .text, align 2, keep-with-next
    347          HAL_StatusTypeDef RoadBrd_Set_RdSndTickCnt( uint32_t PassedRdSndTickCnt )
    348          {
   \                     RoadBrd_Set_RdSndTickCnt: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    349            HAL_StatusTypeDef Status;
    350            
    351            Status = HAL_OK;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x0005             MOVS     R5,R0
    352            Save_Frames.RdSndTickCnt = PassedRdSndTickCnt;
   \   00000008   0x....             LDR.N    R0,??DataTable32_8
   \   0000000A   0x6044             STR      R4,[R0, #+4]
    353            Set_RdSndTickCnt( PassedRdSndTickCnt );
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       Set_RdSndTickCnt
    354            // Write Structure to Flash Memory.
    355            //Status = RoadBrd_FlashInitWrite( 0x00, 
    356            Status = RoadBrd_FlashWrite( 0x00, 
    357                                         FLASH_TYPEERASE_PAGES, 
    358                                         (uint32_t)&wwdg_HardFrames, 
    359                                         (uint32_t *)&Save_Frames, 
    360                                         sizeof(Save_Frames));
   \   00000012   0x2024             MOVS     R0,#+36
   \   00000014   0x9000             STR      R0,[SP, #+0]
   \   00000016   0x....             LDR.N    R3,??DataTable32_8
   \   00000018   0x....             LDR.N    R2,??DataTable32_9  ;; 0x8070000
   \   0000001A   0x2100             MOVS     R1,#+0
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x.... 0x....      BL       RoadBrd_FlashWrite
   \   00000022   0x0005             MOVS     R5,R0
    361            return Status;
   \   00000024   0x0028             MOVS     R0,R5
   \   00000026   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000028   0xBD32             POP      {R1,R4,R5,PC}    ;; return
   \   0000002A                      REQUIRE wwdg_HardFrames
    362          }
    363          
    364          /**
    365            * @brief  Update RdSndTickCnt.
    366            * @param  uint32_t PassedRdSndTickCnt
    367            * @retval HAL_StatusTypeDef:     HAL_OK:       Flash Operation success.
    368            *                                HAL_ERROR:    Error found in Tasking or data passed.
    369            *                                HAL_BUSY:     Flash is busy.
    370            *                                HAL_TIMEOUT:  Flash timed out.
    371            */

   \                                 In section .text, align 2, keep-with-next
    372          HAL_StatusTypeDef RoadBrd_Set_TmpRdSndTickCnt( uint32_t PassedRdSndTickCnt )
    373          {
   \                     RoadBrd_Set_TmpRdSndTickCnt: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    374            Save_Frames.RdSndTickCnt = PassedRdSndTickCnt;
   \   00000004   0x....             LDR.N    R0,??DataTable32_8
   \   00000006   0x6044             STR      R4,[R0, #+4]
    375            Set_RdSndTickCnt( PassedRdSndTickCnt );
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0x.... 0x....      BL       Set_RdSndTickCnt
    376            return HAL_OK;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xBD10             POP      {R4,PC}          ;; return
    377          }
    378          
    379          /**
    380            * @brief  Update SnsrTickCnt.
    381            * @param  uint32_t PassedSnsrTickCnt
    382            * @retval HAL_StatusTypeDef:     HAL_OK:       Flash Operation success.
    383            *                                HAL_ERROR:    Error found in Tasking or data passed.
    384            *                                HAL_BUSY:     Flash is busy.
    385            *                                HAL_TIMEOUT:  Flash timed out.
    386            */

   \                                 In section .text, align 2, keep-with-next
    387          HAL_StatusTypeDef RoadBrd_Set_SnsrTickCnt( uint32_t PassedSnsrTickCnt )
    388          {
   \                     RoadBrd_Set_SnsrTickCnt: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    389            HAL_StatusTypeDef Status;
    390            
    391            Status = HAL_OK;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x0005             MOVS     R5,R0
    392            Save_Frames.SnsrTickCnt = PassedSnsrTickCnt;
   \   00000008   0x....             LDR.N    R0,??DataTable32_8
   \   0000000A   0x6084             STR      R4,[R0, #+8]
    393            Set_SnsrTickCnt( PassedSnsrTickCnt );
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       Set_SnsrTickCnt
    394            // Write Structure to Flash Memory.
    395            //Status = RoadBrd_FlashInitWrite( 0x00, 
    396            Status = RoadBrd_FlashWrite( 0x00, 
    397                                         FLASH_TYPEERASE_PAGES, 
    398                                         (uint32_t)&wwdg_HardFrames, 
    399                                         (uint32_t *)&Save_Frames, 
    400                                         sizeof(Save_Frames));
   \   00000012   0x2024             MOVS     R0,#+36
   \   00000014   0x9000             STR      R0,[SP, #+0]
   \   00000016   0x....             LDR.N    R3,??DataTable32_8
   \   00000018   0x....             LDR.N    R2,??DataTable32_9  ;; 0x8070000
   \   0000001A   0x2100             MOVS     R1,#+0
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x.... 0x....      BL       RoadBrd_FlashWrite
   \   00000022   0x0005             MOVS     R5,R0
    401            return Status;
   \   00000024   0x0028             MOVS     R0,R5
   \   00000026   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000028   0xBD32             POP      {R1,R4,R5,PC}    ;; return
   \   0000002A                      REQUIRE wwdg_HardFrames
    402          }
    403          
    404          /**
    405            * @brief  Update Units_flg.
    406            * @param  bool PassedUnitsFlag
    407            * @retval HAL_StatusTypeDef:     HAL_OK:       Flash Operation success.
    408            *                                HAL_ERROR:    Error found in Tasking or data passed.
    409            *                                HAL_BUSY:     Flash is busy.
    410            *                                HAL_TIMEOUT:  Flash timed out.
    411            */

   \                                 In section .text, align 2, keep-with-next
    412          HAL_StatusTypeDef RoadBrd_Set_UnitsFlag( bool PassedUnitsFlag )
    413          {
   \                     RoadBrd_Set_UnitsFlag: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    414            HAL_StatusTypeDef Status;
    415            
    416            Status = HAL_OK;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x0005             MOVS     R5,R0
    417            Save_Frames.Units_flg = PassedUnitsFlag;
   \   00000008   0x....             LDR.N    R0,??DataTable32_8
   \   0000000A   0x7504             STRB     R4,[R0, #+20]
    418            // Write Structure to Flash Memory.
    419            //Status = RoadBrd_FlashInitWrite( 0x00, 
    420            Status = RoadBrd_FlashWrite( 0x00, 
    421                                         FLASH_TYPEERASE_PAGES, 
    422                                         (uint32_t)&wwdg_HardFrames, 
    423                                         (uint32_t *)&Save_Frames, 
    424                                         sizeof(Save_Frames));
   \   0000000C   0x2024             MOVS     R0,#+36
   \   0000000E   0x9000             STR      R0,[SP, #+0]
   \   00000010   0x....             LDR.N    R3,??DataTable32_8
   \   00000012   0x....             LDR.N    R2,??DataTable32_9  ;; 0x8070000
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x.... 0x....      BL       RoadBrd_FlashWrite
   \   0000001C   0x0005             MOVS     R5,R0
    425            return Status;
   \   0000001E   0x0028             MOVS     R0,R5
   \   00000020   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000022   0xBD32             POP      {R1,R4,R5,PC}    ;; return
   \   00000024                      REQUIRE wwdg_HardFrames
    426          }
    427          
    428          /**
    429            * @brief  Update TackLimit.
    430            * @param  uint32_t PassedTackLimit
    431            * @retval HAL_StatusTypeDef:     HAL_OK:       Flash Operation success.
    432            *                                HAL_ERROR:    Error found in Tasking or data passed.
    433            *                                HAL_BUSY:     Flash is busy.
    434            *                                HAL_TIMEOUT:  Flash timed out.
    435            */

   \                                 In section .text, align 2, keep-with-next
    436          HAL_StatusTypeDef RoadBrd_Set_TackLimit( uint32_t PassedTackLimit )
    437          {
   \                     RoadBrd_Set_TackLimit: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    438            HAL_StatusTypeDef Status;
    439            
    440            Status = HAL_OK;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x0005             MOVS     R5,R0
    441            Save_Frames.TackLimit = PassedTackLimit;
   \   00000008   0x....             LDR.N    R0,??DataTable32_8
   \   0000000A   0x60C4             STR      R4,[R0, #+12]
    442            // Write Structure to Flash Memory.
    443            //Status = RoadBrd_FlashInitWrite( 0x00, 
    444            Status = RoadBrd_FlashWrite( 0x00, 
    445                                         FLASH_TYPEERASE_PAGES, 
    446                                         (uint32_t)&wwdg_HardFrames, 
    447                                         (uint32_t *)&Save_Frames, 
    448                                         sizeof(Save_Frames));
   \   0000000C   0x2024             MOVS     R0,#+36
   \   0000000E   0x9000             STR      R0,[SP, #+0]
   \   00000010   0x....             LDR.N    R3,??DataTable32_8
   \   00000012   0x....             LDR.N    R2,??DataTable32_9  ;; 0x8070000
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x.... 0x....      BL       RoadBrd_FlashWrite
   \   0000001C   0x0005             MOVS     R5,R0
    449            return Status;
   \   0000001E   0x0028             MOVS     R0,R5
   \   00000020   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000022   0xBD32             POP      {R1,R4,R5,PC}    ;; return
   \   00000024                      REQUIRE wwdg_HardFrames
    450          }
    451          
    452          /**
    453            * @brief  Update BootDelay.
    454            * @param  uint32_t PassedBootDelay
    455            * @retval HAL_StatusTypeDef:     HAL_OK:       Flash Operation success.
    456            *                                HAL_ERROR:    Error found in Tasking or data passed.
    457            *                                HAL_BUSY:     Flash is busy.
    458            *                                HAL_TIMEOUT:  Flash timed out.
    459            */

   \                                 In section .text, align 2, keep-with-next
    460          HAL_StatusTypeDef RoadBrd_Set_BootDelay( uint32_t PassedBootDelay )
    461          {
   \                     RoadBrd_Set_BootDelay: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    462            HAL_StatusTypeDef Status;
    463            
    464            Status = HAL_OK;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x0005             MOVS     R5,R0
    465            Save_Frames.BootDelay = PassedBootDelay;
   \   00000008   0x....             LDR.N    R0,??DataTable32_8
   \   0000000A   0x6104             STR      R4,[R0, #+16]
    466            // Write Structure to Flash Memory.
    467            //Status = RoadBrd_FlashInitWrite( 0x00, 
    468            Status = RoadBrd_FlashWrite( 0x00, 
    469                                         FLASH_TYPEERASE_PAGES, 
    470                                         (uint32_t)&wwdg_HardFrames, 
    471                                         (uint32_t *)&Save_Frames, 
    472                                         sizeof(Save_Frames));
   \   0000000C   0x2024             MOVS     R0,#+36
   \   0000000E   0x9000             STR      R0,[SP, #+0]
   \   00000010   0x....             LDR.N    R3,??DataTable32_8
   \   00000012   0x....             LDR.N    R2,??DataTable32_9  ;; 0x8070000
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x.... 0x....      BL       RoadBrd_FlashWrite
   \   0000001C   0x0005             MOVS     R5,R0
    473            return Status;
   \   0000001E   0x0028             MOVS     R0,R5
   \   00000020   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000022   0xBD32             POP      {R1,R4,R5,PC}    ;; return
   \   00000024                      REQUIRE wwdg_HardFrames
    474          }
    475          
    476          /**
    477            * @brief  Retrieve RdSndTickCnt.
    478            * @param  None
    479            * @retval uint32_t Save_Frames.RdSndTickCnt
    480            */

   \                                 In section .text, align 2, keep-with-next
    481          uint32_t RoadBrd_Get_RdSndTickCnt( void )
    482          {
    483            return Save_Frames.RdSndTickCnt;
   \                     RoadBrd_Get_RdSndTickCnt: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable32_8
   \   00000002   0x6840             LDR      R0,[R0, #+4]
   \   00000004   0x4770             BX       LR               ;; return
    484          }
    485          
    486          /**
    487            * @brief  Retrieve SnsrTickCnt.
    488            * @param  None
    489            * @retval uint32_t Save_Frames.SnsrTickCnt
    490            */

   \                                 In section .text, align 2, keep-with-next
    491          uint32_t RoadBrd_Get_SnsrTickCnt( void )
    492          {
    493            return Save_Frames.SnsrTickCnt;
   \                     RoadBrd_Get_SnsrTickCnt: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable32_8
   \   00000002   0x6880             LDR      R0,[R0, #+8]
   \   00000004   0x4770             BX       LR               ;; return
    494          }
    495          
    496           /**
    497            * @brief  Retrieve Units Flag.
    498            * @param  None
    499            * @retval bool Save_Frames.Units_flg
    500            */

   \                                 In section .text, align 2, keep-with-next
    501          bool RoadBrd_Get_UnitsFlag( void )
    502          {
    503            return Save_Frames.Units_flg;
   \                     RoadBrd_Get_UnitsFlag: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable32_8
   \   00000002   0x7D00             LDRB     R0,[R0, #+20]
   \   00000004   0x4770             BX       LR               ;; return
    504          }
    505          
    506          /**
    507            * @brief  Retrieve TackLimit.
    508            * @param  None
    509            * @retval uint32_t Save_Frames.TackLimit
    510            */

   \                                 In section .text, align 2, keep-with-next
    511          uint32_t RoadBrd_Get_TackLimit( void )
    512          {
    513            return Save_Frames.TackLimit;
   \                     RoadBrd_Get_TackLimit: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable32_8
   \   00000002   0x68C0             LDR      R0,[R0, #+12]
   \   00000004   0x4770             BX       LR               ;; return
    514          }
    515          
    516          /**
    517            * @brief  Retrieve BootDelay.
    518            * @param  None
    519            * @retval uint32_t Save_Frames.BootDelay
    520            */

   \                                 In section .text, align 2, keep-with-next
    521          uint32_t RoadBrd_Get_BootDelay( void )
    522          {
    523            return Save_Frames.BootDelay;
   \                     RoadBrd_Get_BootDelay: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable32_8
   \   00000002   0x6900             LDR      R0,[R0, #+16]
   \   00000004   0x4770             BX       LR               ;; return
    524          }
    525          
    526          /**
    527            * @brief  This function Reads the key frame Information from Flash..
    528            * @param  none
    529            * @retval HAL_StatusTypeDef:     HAL_OK:       Flash Operation success.
    530            *                                HAL_ERROR:    Error found in Tasking or data passed.
    531            *                                HAL_BUSY:     Flash is busy.
    532            *                                HAL_TIMEOUT:  Flash timed out.
    533            */

   \                                 In section .text, align 2, keep-with-next
    534          HAL_StatusTypeDef RoadBrd_WWDG_ReadFrmFlash( void )
    535          {
   \                     RoadBrd_WWDG_ReadFrmFlash: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    536            HAL_StatusTypeDef Status;
    537            
    538            Status = HAL_OK;
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x0004             MOVS     R4,R0
    539            // Read Structure from Flash Memory.
    540            Status = RoadBrd_FlashRead(  (uint32_t)&wwdg_HardFrames, 
    541                                         (uint32_t *)&Save_Frames, 
    542                                         sizeof(Save_Frames));
   \   00000006   0x2224             MOVS     R2,#+36
   \   00000008   0x....             LDR.N    R1,??DataTable32_8
   \   0000000A   0x....             LDR.N    R0,??DataTable32_9  ;; 0x8070000
   \   0000000C   0x.... 0x....      BL       RoadBrd_FlashRead
   \   00000010   0x0004             MOVS     R4,R0
    543            return Status;
   \   00000012   0x0020             MOVS     R0,R4
   \   00000014   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000016   0xBD10             POP      {R4,PC}          ;; return
   \   00000018                      REQUIRE wwdg_HardFrames
    544          }
    545          
    546            /**
    547            * @brief  This function writes the key frame Information to Flash..
    548            * @param  none
    549            * @retval HAL_StatusTypeDef:     HAL_OK:       Flash Operation success.
    550            *                                HAL_ERROR:    Error found in Tasking or data passed.
    551            *                                HAL_BUSY:     Flash is busy.
    552            *                                HAL_TIMEOUT:  Flash timed out.
    553            */

   \                                 In section .text, align 2, keep-with-next
    554          HAL_StatusTypeDef RoadBrd_WWDG_WriteFrmFlash( void )
    555          {
   \                     RoadBrd_WWDG_WriteFrmFlash: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    556            HAL_StatusTypeDef Status;
    557            
    558            Status = HAL_OK;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x0004             MOVS     R4,R0
    559            // Write Structure to Flash Memory.
    560            Status = RoadBrd_FlashWrite( 0x00, 
    561                                         FLASH_TYPEERASE_PAGES, 
    562                                         (uint32_t)&wwdg_HardFrames, 
    563                                         (uint32_t *)&Save_Frames, 
    564                                         sizeof(Save_Frames));
   \   00000008   0x2024             MOVS     R0,#+36
   \   0000000A   0x9000             STR      R0,[SP, #+0]
   \   0000000C   0x....             LDR.N    R3,??DataTable32_8
   \   0000000E   0x....             LDR.N    R2,??DataTable32_9  ;; 0x8070000
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x.... 0x....      BL       RoadBrd_FlashWrite
   \   00000018   0x0004             MOVS     R4,R0
    565            return Status;
   \   0000001A   0x0020             MOVS     R0,R4
   \   0000001C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001E   0xBD16             POP      {R1,R2,R4,PC}    ;; return
   \   00000020                      REQUIRE wwdg_HardFrames
    566          }
    567          
    568          /**
    569            * @brief  This function attempts to write the passed Flash frame to the Flash Memory and Save it.
    570            * @param  wwdg_SaveFrame* Write_Frame: WWDG Frame to be written to flash.
    571            * @retval HAL_StatusTypeDef:     HAL_OK:       Flash Operation success.
    572            *                                HAL_ERROR:    Error found in Tasking or data passed.
    573            *                                HAL_BUSY:     Flash is busy.
    574            *                                HAL_TIMEOUT:  Flash timed out.
    575            */

   \                                 In section .text, align 2, keep-with-next
    576          HAL_StatusTypeDef RoadBrd_WWDG_WriteFlash( wwdg_SaveFrame* Write_Frame )
    577          {
   \                     RoadBrd_WWDG_WriteFlash: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    578            // Is Frame Initialized?
    579            if (!(RoadBrd_WWDG_VerifyFrame()))
   \   00000004   0x.... 0x....      BL       RoadBrd_WWDG_VerifyFrame
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD105             BNE.N    ??RoadBrd_WWDG_WriteFlash_0
    580              if (RoadBrd_WWDG_InitializeFrmFlash() != HAL_OK)
   \   0000000C   0x.... 0x....      BL       RoadBrd_WWDG_InitializeFrmFlash
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD001             BEQ.N    ??RoadBrd_WWDG_WriteFlash_0
    581                return HAL_ERROR;
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0xE012             B.N      ??RoadBrd_WWDG_WriteFlash_1
    582            // First, Test to see if there is any room in Current Frame Structure.
    583            if (Save_Frames.Frame_WrtPtr >= FRAME_SIZE)
   \                     ??RoadBrd_WWDG_WriteFlash_0: (+1)
   \   00000018   0x....             LDR.N    R0,??DataTable32_8
   \   0000001A   0x7D40             LDRB     R0,[R0, #+21]
   \   0000001C   0x280A             CMP      R0,#+10
   \   0000001E   0xDB01             BLT.N    ??RoadBrd_WWDG_WriteFlash_2
    584              return HAL_ERROR;
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0xE00C             B.N      ??RoadBrd_WWDG_WriteFlash_1
    585            else
    586            {
    587              // OK, Increment Write Pointer and save data.
    588              Save_Frames.Frame_WrtPtr++;
   \                     ??RoadBrd_WWDG_WriteFlash_2: (+1)
   \   00000024   0x....             LDR.N    R0,??DataTable32_8
   \   00000026   0x7D40             LDRB     R0,[R0, #+21]
   \   00000028   0x1C40             ADDS     R0,R0,#+1
   \   0000002A   0x....             LDR.N    R1,??DataTable32_8
   \   0000002C   0x7548             STRB     R0,[R1, #+21]
    589              Save_Frames.Saved_Frames[Save_Frames.Frame_WrtPtr].event = Write_Frame->event;
   \   0000002E   0x7820             LDRB     R0,[R4, #+0]
   \   00000030   0x....             LDR.N    R1,??DataTable32_8
   \   00000032   0x....             LDR.N    R2,??DataTable32_8
   \   00000034   0x7D52             LDRB     R2,[R2, #+21]
   \   00000036   0x4411             ADD      R1,R1,R2
   \   00000038   0x75C8             STRB     R0,[R1, #+23]
    590              //Write Contents to Flash Memory.
    591              return(RoadBrd_WWDG_WriteFrmFlash());
   \   0000003A   0x.... 0x....      BL       RoadBrd_WWDG_WriteFrmFlash
   \                     ??RoadBrd_WWDG_WriteFlash_1: (+1)
   \   0000003E   0xBD10             POP      {R4,PC}          ;; return
    592            }
    593          }
    594          
    595          /**
    596            * @brief  This function attempts to read from the Flash Memory to the the passed Flash frame.
    597            * @param  wwdg_SaveFrame* Write_Frame: WWDG Frame to be written to flash.
    598            * @retval HAL_StatusTypeDef:     HAL_OK:       Flash Operation success.
    599            *                                HAL_ERROR:    Error found in Tasking or data passed.
    600            *                                HAL_BUSY:     Flash is busy.
    601            *                                HAL_TIMEOUT:  Flash timed out.
    602            */

   \                                 In section .text, align 2, keep-with-next
    603          HAL_StatusTypeDef RoadBrd_WWDG_ReadFlash( wwdg_SaveFrame* Read_Frame )
    604          {
   \                     RoadBrd_WWDG_ReadFlash: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    605            // Is Frame Initialized?
    606            if (Save_Frames.checksum != FRAME_CHKSUM)
   \   00000004   0x....             LDR.N    R0,??DataTable32_8
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0xF1B0 0x3F5A      CMP      R0,#+1515870810
   \   0000000C   0xD001             BEQ.N    ??RoadBrd_WWDG_ReadFlash_0
    607              // Read the Frame.
    608              RoadBrd_WWDG_ReadFrmFlash();
   \   0000000E   0x.... 0x....      BL       RoadBrd_WWDG_ReadFrmFlash
    609            // First, Test to see if there is any room in Current Frame Structure.
    610            if (Save_Frames.Frame_RdPtr >= FRAME_SIZE)
   \                     ??RoadBrd_WWDG_ReadFlash_0: (+1)
   \   00000012   0x....             LDR.N    R0,??DataTable32_8
   \   00000014   0x7D80             LDRB     R0,[R0, #+22]
   \   00000016   0x280A             CMP      R0,#+10
   \   00000018   0xDB01             BLT.N    ??RoadBrd_WWDG_ReadFlash_1
    611              return HAL_ERROR;
   \   0000001A   0x2001             MOVS     R0,#+1
   \   0000001C   0xE00B             B.N      ??RoadBrd_WWDG_ReadFlash_2
    612            else
    613            {
    614              // OK, Increment Read Pointer and Read data.
    615              Save_Frames.Frame_RdPtr++;
   \                     ??RoadBrd_WWDG_ReadFlash_1: (+1)
   \   0000001E   0x....             LDR.N    R0,??DataTable32_8
   \   00000020   0x7D80             LDRB     R0,[R0, #+22]
   \   00000022   0x1C40             ADDS     R0,R0,#+1
   \   00000024   0x....             LDR.N    R1,??DataTable32_8
   \   00000026   0x7588             STRB     R0,[R1, #+22]
    616              Read_Frame->event = Save_Frames.Saved_Frames[Save_Frames.Frame_RdPtr].event;
   \   00000028   0x....             LDR.N    R0,??DataTable32_8
   \   0000002A   0x....             LDR.N    R1,??DataTable32_8
   \   0000002C   0x7D89             LDRB     R1,[R1, #+22]
   \   0000002E   0x4408             ADD      R0,R0,R1
   \   00000030   0x7DC0             LDRB     R0,[R0, #+23]
   \   00000032   0x7020             STRB     R0,[R4, #+0]
    617            }
    618            return HAL_OK;
   \   00000034   0x2000             MOVS     R0,#+0
   \                     ??RoadBrd_WWDG_ReadFlash_2: (+1)
   \   00000036   0xBD10             POP      {R4,PC}          ;; return
    619          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable32:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable32_1:
   \   00000000   0x........         DC32     DateString

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable32_2:
   \   00000000   0x........         DC32     TickString

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable32_3:
   \   00000000   0x40002C00         DC32     0x40002c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable32_4:
   \   00000000   0x........         DC32     hwwdg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable32_5:
   \   00000000   0x........         DC32     wwdg_Save

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable32_6:
   \   00000000   0x40023824         DC32     0x40023824

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable32_7:
   \   00000000   0x........         DC32     `HAL_WWDG_WakeupCallback::OnceFlg`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable32_8:
   \   00000000   0x........         DC32     Save_Frames

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable32_9:
   \   00000000   0x08070000         DC32     0x8070000

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x2D 0x2D          DC8 "---NULL---"
   \              0x2D 0x4E    
   \              0x55 0x4C    
   \              0x4C 0x2D    
   \              0x2D 0x2D    
   \              0x00         
   \   0000000B   0x00               DC8 0
    620          
    621          /* USER CODE END 1 */
    622          
    623          
    624          /**
    625            * @}
    626            */
    627          
    628          /**
    629            * @}
    630            */
    631          
    632          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   HAL_WWDG_MspDeInit
       4   HAL_WWDG_MspInit
       0   HAL_WWDG_WakeupCallback
       8   MX_WWDG_Init
         8   -> Error_Handler
         8   -> HAL_WWDG_Init
       0   RoadBrd_Get_BootDelay
       0   RoadBrd_Get_RdSndTickCnt
       0   RoadBrd_Get_SnsrTickCnt
       0   RoadBrd_Get_TackLimit
       0   RoadBrd_Get_UnitsFlag
      16   RoadBrd_Set_BootDelay
        16   -> RoadBrd_FlashWrite
      16   RoadBrd_Set_RdSndTickCnt
        16   -> RoadBrd_FlashWrite
        16   -> Set_RdSndTickCnt
      16   RoadBrd_Set_SnsrTickCnt
        16   -> RoadBrd_FlashWrite
        16   -> Set_SnsrTickCnt
      16   RoadBrd_Set_TackLimit
        16   -> RoadBrd_FlashWrite
      24   RoadBrd_Set_TickCounts
        24   -> RoadBrd_FlashWrite
        24   -> Set_TickCounts
       8   RoadBrd_Set_TmpRdSndTickCnt
         8   -> Set_RdSndTickCnt
      16   RoadBrd_Set_UnitsFlag
        16   -> RoadBrd_FlashWrite
       0   RoadBrd_WWDG_GetDateString
       0   RoadBrd_WWDG_GetRefreshCnt
       0   RoadBrd_WWDG_GetTickString
       8   RoadBrd_WWDG_InitializeDateString
         8   -> strcpy
      16   RoadBrd_WWDG_InitializeFrmFlash
        16   -> RoadBrd_FlashWrite
       8   RoadBrd_WWDG_InitializeTickString
         8   -> strcpy
       8   RoadBrd_WWDG_ReadFlash
         8   -> RoadBrd_WWDG_ReadFrmFlash
       8   RoadBrd_WWDG_ReadFrmFlash
         8   -> RoadBrd_FlashRead
       8   RoadBrd_WWDG_Refresh
         8   -> HAL_WWDG_Refresh
         8   -> RoadBrd_WWDG_GetRefreshCnt
       8   RoadBrd_WWDG_SetDateString
         8   -> strcpy
       8   RoadBrd_WWDG_SetTickString
         8   -> strcpy
       8   RoadBrd_WWDG_Start
         8   -> HAL_WWDG_Start_IT
       0   RoadBrd_WWDG_TstEvent
       8   RoadBrd_WWDG_VerifyFrame
         8   -> RoadBrd_FlashRead
       8   RoadBrd_WWDG_WriteFlash
         8   -> RoadBrd_WWDG_InitializeFrmFlash
         8   -> RoadBrd_WWDG_VerifyFrame
         8   -> RoadBrd_WWDG_WriteFrmFlash
      16   RoadBrd_WWDG_WriteFrmFlash
        16   -> RoadBrd_FlashWrite
       8   WWDG_IRQHandler
         8   -> HAL_WWDG_IRQHandler


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable32
       4  ??DataTable32_1
       4  ??DataTable32_2
       4  ??DataTable32_3
       4  ??DataTable32_4
       4  ??DataTable32_5
       4  ??DataTable32_6
       4  ??DataTable32_7
       4  ??DataTable32_8
       4  ??DataTable32_9
      12  ?_0
      32  DateString
      22  HAL_WWDG_MspDeInit
      38  HAL_WWDG_MspInit
      24  HAL_WWDG_WakeupCallback
      54  MX_WWDG_Init
       1  OnceFlg
       6  RoadBrd_Get_BootDelay
       6  RoadBrd_Get_RdSndTickCnt
       6  RoadBrd_Get_SnsrTickCnt
       6  RoadBrd_Get_TackLimit
       6  RoadBrd_Get_UnitsFlag
      36  RoadBrd_Set_BootDelay
      42  RoadBrd_Set_RdSndTickCnt
      42  RoadBrd_Set_SnsrTickCnt
      36  RoadBrd_Set_TackLimit
      52  RoadBrd_Set_TickCounts
      18  RoadBrd_Set_TmpRdSndTickCnt
      36  RoadBrd_Set_UnitsFlag
       6  RoadBrd_WWDG_GetDateString
      12  RoadBrd_WWDG_GetRefreshCnt
       6  RoadBrd_WWDG_GetTickString
      18  RoadBrd_WWDG_InitializeDateString
      82  RoadBrd_WWDG_InitializeFrmFlash
      18  RoadBrd_WWDG_InitializeTickString
      56  RoadBrd_WWDG_ReadFlash
      24  RoadBrd_WWDG_ReadFrmFlash
      26  RoadBrd_WWDG_Refresh
      18  RoadBrd_WWDG_SetDateString
      18  RoadBrd_WWDG_SetTickString
      10  RoadBrd_WWDG_Start
       6  RoadBrd_WWDG_TstEvent
      46  RoadBrd_WWDG_VerifyFrame
      64  RoadBrd_WWDG_WriteFlash
      32  RoadBrd_WWDG_WriteFrmFlash
      36  Save_Frames
      32  TickString
      10  WWDG_IRQHandler
      20  hwwdg
      36  wwdg_HardFrames
       4  wwdg_Save

 
 125 bytes in section .bss
  36 bytes in section .bss    (abs)
  12 bytes in section .rodata
 922 bytes in section .text
 
 922 bytes of CODE  memory
  12 bytes of CONST memory
 161 bytes of DATA  memory

Errors: none
Warnings: none
