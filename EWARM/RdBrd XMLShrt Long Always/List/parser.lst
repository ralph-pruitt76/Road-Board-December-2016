###############################################################################
#
# IAR ANSI C/C++ Compiler V7.60.2.11341/W32 for ARM       14/Dec/2017  09:02:38
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\parser.c
#    Command line =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\parser.c
#        -D USE_HAL_DRIVER -D STM32L152xE -D USE_STM32L1XX_NUCLEO -D ASCII -D
#        REV_L -D LONG_DELAY -D XML_SHRT -lCN
#        "D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\RdBrd
#        XMLShrt Long Always\List" -o
#        "D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\RdBrd
#        XMLShrt Long Always\Obj" --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_clustering --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.4\arm\INC\c\DLib_Config_Full.h" -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/STM32L1xx_HAL_Driver/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/STM32L1xx_HAL_Driver/Inc/Legacy\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/BSP/STM32L1xx_Nucleo\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/portable/IAR/ARM_CM3\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Core/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/CMSIS/Include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/CMSIS/Device/ST/STM32L1xx/Include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\..\Middlewares\Third_Party\BgLib\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.4\arm\CMSIS\Include\"
#    Locale       =  English_United States.1252
#    List file    =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\RdBrd
#        XMLShrt Long Always\List\parser.lst
#    Object file  =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\RdBrd
#        XMLShrt Long Always\Obj\parser.o
#
###############################################################################

D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\parser.c
      1          /**
      2            ******************************************************************************
      3            * File Name          : parser.c
      4            * Description        : This file provides code that parses the passed string and 
      5            *                      performs the requested operation. It then returns a string
      6            *                      hardware based on the LPS22HB chip.
      7            ******************************************************************************
      8            *
      9            * COPYRIGHT(c) 2016 WeatherCloud
     10            *
     11            * Redistribution and use in source and binary forms, with or without modification,
     12            * are permitted provided that the following conditions are met:
     13            *   1. Redistributions of source code must retain the above copyright notice,
     14            *      this list of conditions and the following disclaimer.
     15            *   2. Redistributions in binary form must reproduce the above copyright notice,
     16            *      this list of conditions and the following disclaimer in the documentation
     17            *      and/or other materials provided with the distribution.
     18            *   3. Neither the name of WeatherCloud nor the names of its contributors
     19            *      may be used to endorse or promote products derived from this software
     20            *      without specific prior written permission.
     21            *
     22            * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     23            * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     24            * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     25            * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
     26            * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     27            * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     28            * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
     29            * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
     30            * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
     31            * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     32            *
     33            ******************************************************************************
     34            */
     35          
     36          /* Includes ------------------------------------------------------------------*/
     37          #include "parser.h"
     38          #include "ErrorCodes.h"
     39          #include <ctype.h>
     40          #include <stdlib.h>
     41          #include "wwdg.h"
     42          #include "Calibration.h"
     43          
     44          // Enums
     45          typedef enum 
     46          {
     47            NOT_INIT = 0,
     48            AVAILABLE = 1,
     49            BUSY = 2
     50          } ParseTskFlg;
     51          

   \                                 In section .bss, align 1
     52          static bool Bypass = false;
   \                     Bypass:
   \   00000000                      DS8 1
     53          
     54          // Parser Structure for tasks.
     55          struct
     56          {
     57            char          tempBuffer[BUFFER_SIZE];
     58            ParseTskFlg   ParseFlg;

   \                                 In section .bss, align 4
     59          } static ParseString;
   \                     ParseString:
   \   00000000                      DS8 44
     60          
     61          /* Parser functions */
     62          
     63          /**
     64            * @brief  This routine initializes the Parse Task Structure.
     65            * @param  *tempBffr: String to be parsed.
     66            * @retval HAL_StatusTypeDef:     HAL_OK:       Tasking of block of data to UART success.
     67            */

   \                                 In section .text, align 2, keep-with-next
     68          HAL_StatusTypeDef RoadBrd_ParserInit( void )
     69          {
     70            ParseString.ParseFlg = AVAILABLE;
   \                     RoadBrd_ParserInit: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x....             LDR.N    R1,??DataTable2
   \   00000004   0xF881 0x0028      STRB     R0,[R1, #+40]
     71            return HAL_OK;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x4770             BX       LR               ;; return
     72          }
     73          
     74          /**
     75            * @brief  This routine handles the operation of setting up a Parse Event.
     76            * @param  *tempBffr: String to be parsed.
     77            * @retval HAL_StatusTypeDef:     HAL_OK:       Tasking of block of data to UART success.
     78            *                                HAL_ERROR:    Error found in Tasking or data passed.
     79            *                                HAL_BUSY:     UART is busy.
     80            *                                HAL_TIMEOUT:  UART timed out.
     81            */

   \                                 In section .text, align 2, keep-with-next
     82          HAL_StatusTypeDef RoadBrd_ParserTsk(char *tempBffr)
     83          {
   \                     RoadBrd_ParserTsk: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     84            // Test ParseFlg.
     85            if (ParseString.ParseFlg == BUSY)
   \   00000004   0x....             LDR.N    R0,??DataTable2
   \   00000006   0xF890 0x0028      LDRB     R0,[R0, #+40]
   \   0000000A   0x2802             CMP      R0,#+2
   \   0000000C   0xD101             BNE.N    ??RoadBrd_ParserTsk_0
     86              return HAL_BUSY;
   \   0000000E   0x2002             MOVS     R0,#+2
   \   00000010   0xE016             B.N      ??RoadBrd_ParserTsk_1
     87            else if (ParseString.ParseFlg == NOT_INIT)
   \                     ??RoadBrd_ParserTsk_0: (+1)
   \   00000012   0x....             LDR.N    R0,??DataTable2
   \   00000014   0xF890 0x0028      LDRB     R0,[R0, #+40]
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD101             BNE.N    ??RoadBrd_ParserTsk_2
     88              return HAL_ERROR;
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0xE00F             B.N      ??RoadBrd_ParserTsk_1
     89            // Next Lets make sure passed string is not too big.
     90          //  if (strlen((char *)tempBffr) >= BUFFER_SIZE)
     91            if (strlen(tempBffr) >= BUFFER_SIZE)
   \                     ??RoadBrd_ParserTsk_2: (+1)
   \   00000020   0x0020             MOVS     R0,R4
   \   00000022   0x.... 0x....      BL       strlen
   \   00000026   0x2828             CMP      R0,#+40
   \   00000028   0xD301             BCC.N    ??RoadBrd_ParserTsk_3
     92              return HAL_ERROR;
   \   0000002A   0x2001             MOVS     R0,#+1
   \   0000002C   0xE008             B.N      ??RoadBrd_ParserTsk_1
     93            // Copy String into Structure and set as busy.
     94          //  strcpy( (char *)ParseString.tempBuffer, (char *)tempBffr);
     95            strcpy( ParseString.tempBuffer, tempBffr);
   \                     ??RoadBrd_ParserTsk_3: (+1)
   \   0000002E   0x0021             MOVS     R1,R4
   \   00000030   0x....             LDR.N    R0,??DataTable2
   \   00000032   0x.... 0x....      BL       strcpy
     96            ParseString.ParseFlg = BUSY;
   \   00000036   0x2002             MOVS     R0,#+2
   \   00000038   0x....             LDR.N    R1,??DataTable2
   \   0000003A   0xF881 0x0028      STRB     R0,[R1, #+40]
     97            return HAL_OK;
   \   0000003E   0x2000             MOVS     R0,#+0
   \                     ??RoadBrd_ParserTsk_1: (+1)
   \   00000040   0xBD10             POP      {R4,PC}          ;; return
     98          }
     99          
    100          /**
    101            * @brief  This routine handles the operation of processing a Parse Event.
    102            * @param  *tempBffr: String to be parsed.
    103            * @retval HAL_StatusTypeDef:     HAL_OK:       Tasking of block of data to UART success.
    104            *                                HAL_ERROR:    Error found in Tasking or data passed.
    105            *                                HAL_BUSY:     UART is busy.
    106            *                                HAL_TIMEOUT:  UART timed out.
    107            */

   \                                 In section .text, align 2, keep-with-next
    108          HAL_StatusTypeDef RoadBrd_ProcessParserTsk( void )
    109          {
   \                     RoadBrd_ProcessParserTsk: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    110            HAL_StatusTypeDef Status;
    111          
    112            // Test ParseFlg and process.
    113            if (ParseString.ParseFlg == BUSY)
   \   00000002   0x....             LDR.N    R0,??DataTable2
   \   00000004   0xF890 0x0028      LDRB     R0,[R0, #+40]
   \   00000008   0x2802             CMP      R0,#+2
   \   0000000A   0xD10B             BNE.N    ??RoadBrd_ProcessParserTsk_0
    114            {
    115              Status = RoadBrd_ParseString(ParseString.tempBuffer, true);
   \   0000000C   0x2101             MOVS     R1,#+1
   \   0000000E   0x....             LDR.N    R0,??DataTable2
   \   00000010   0x.... 0x....      BL       RoadBrd_ParseString
   \   00000014   0x0004             MOVS     R4,R0
    116              ParseString.ParseFlg = AVAILABLE;
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0x....             LDR.N    R1,??DataTable2
   \   0000001A   0xF881 0x0028      STRB     R0,[R1, #+40]
    117              return Status;
   \   0000001E   0x0020             MOVS     R0,R4
   \   00000020   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000022   0xE000             B.N      ??RoadBrd_ProcessParserTsk_1
    118            }
    119            else
    120              return HAL_OK;
   \                     ??RoadBrd_ProcessParserTsk_0: (+1)
   \   00000024   0x2000             MOVS     R0,#+0
   \                     ??RoadBrd_ProcessParserTsk_1: (+1)
   \   00000026   0xBD10             POP      {R4,PC}          ;; return
    121          }
    122          
    123          
    124          /**
    125            * @brief  This routine parses the passed string and performs the passed operation
    126            * @param  *tempBffr: String to be parsed.
    127            * @retval HAL_StatusTypeDef:     HAL_OK:       Tasking of block of data to UART success.
    128            *                                HAL_ERROR:    Error found in Tasking or data passed.
    129            *                                HAL_BUSY:     UART is busy.
    130            *                                HAL_TIMEOUT:  UART timed out.
    131            */

   \                                 In section .text, align 4, keep-with-next
    132          HAL_StatusTypeDef RoadBrd_ParseString(char *tempBffr, bool BLE_Flag)
    133          {
   \                     RoadBrd_ParseString: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xF5AD 0x6D80      SUB      SP,SP,#+1024
   \   00000008   0xB0B7             SUB      SP,SP,#+220
   \   0000000A   0x0004             MOVS     R4,R0
   \   0000000C   0x000D             MOVS     R5,R1
    134          #ifdef TEST2
    135            #define RECEIVE_SZ      5
    136            uint8_t Size;
    137            uint8_t i2cData[80];
    138            uint8_t tempBffr3[10];
    139            char tempBffr2[5];
    140            int Loop_cnt;
    141            HAL_StatusTypeDef Status, Save_Status;
    142            int Address;
    143            int num_bytes;
    144            int num_bytes_received;
    145            int Error, x;
    146            char tempstr[20];
    147            char* tempPstr;
    148            int new_value, flag;
    149            float Temp_C, Temp_F, Shunt_V, Bus_V, Crrnt, Power;
    150            uint32_t Err_code;
    151          #else
    152            #ifdef TEST
    153              #define RECEIVE_SZ      5
    154            #else
    155              #define RECEIVE_SZ      30
    156              uint16_t DriverStatus;
    157              int8_t tempBffr2[120];
    158              int8_t tempBffr3[10];
    159              int8_t s_cmd[5];
    160              int8_t s_recrd[120];
    161              int8_t* BufferPntr;
    162              HAL_StatusTypeDef Status, Save_Status;
    163              uint8_t Size;
    164              int Address;
    165              int num_bytes;
    166              int Numbr_Rcrds;
    167              int num_bytes_received;
    168              uint8_t i2cData[80];
    169              int Error, x, y;
    170              Voltage VMeasure, VMeasureScaled;
    171              Current CMeasure, CMeasureScaled;
    172              Power PMeasure, PMeasureScaled;
    173              Temperature TMeasure, TMeasureScaled;
    174              Humidity HMeasure, HMeasureScaled;
    175              RGBInitialize RGBMeasure;
    176              RGBIdent IDMeasure;
    177              RGBStatus RGBSMeasure;
    178              RGBLight RGBValues;
    179              char uuid[10];
    180              float Scale, Offset;
    181          //    PRStatus PRMeasure;
    182              PRPressure PRPMeasure, PRPMeasureScaled;
    183              BinString RSFFTBins;
    184              GridEye     GridMeasure, GridMeasureScaled;
    185              uint32_t Err_code;
    186              uint8_t op_mode, ds_range, adc_rsl, sync, cmp_adjst, cmp_offst, int_assgn, int_persist, cnvrsn_int;
    187              int new_value, flag;
    188              char* tempPstr;
    189              char tempstr[20];
    190            #endif
    191          #endif
    192          
    193              Size = strlen((char *)tempBffr);
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0x.... 0x....      BL       strlen
   \   00000014   0x4680             MOV      R8,R0
    194              Status = HAL_OK;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x0006             MOVS     R6,R0
    195              
    196              // Test Bypass. If set, then we are in streaming mode.
    197              if ( Bypass )
   \   0000001A   0xF8DF 0x0DFC      LDR.W    R0,??RoadBrd_ParseString_0
   \   0000001E   0x7800             LDRB     R0,[R0, #+0]
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD01E             BEQ.N    ??RoadBrd_ParseString_1
    198              {
    199                if (tempBffr[0] == 0x1B)
   \   00000024   0x7820             LDRB     R0,[R4, #+0]
   \   00000026   0x281B             CMP      R0,#+27
   \   00000028   0xD115             BNE.N    ??RoadBrd_ParseString_2
    200                {
    201                  Bypass = false;
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0xF8DF 0x1DE8      LDR.W    R1,??RoadBrd_ParseString_0
   \   00000030   0x7008             STRB     R0,[R1, #+0]
    202                  strcpy( (char *)tempBffr2, "\r\n\r\n T........TERMINATING MONITOR MODE.........\r\n\r\n> ");
   \   00000032   0xF8DF 0x1DE8      LDR.W    R1,??RoadBrd_ParseString_0+0x4
   \   00000036   0xA80A             ADD      R0,SP,#+40
   \   00000038   0x.... 0x....      BL       strcpy
    203          #ifdef NUCLEO
    204                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    205          #else
    206                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000003C   0xA90A             ADD      R1,SP,#+40
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000044   0x0006             MOVS     R6,R0
    207          #endif
    208                  if (Status != HAL_OK)
   \   00000046   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000048   0x2E00             CMP      R6,#+0
   \   0000004A   0xF004 0x8478      BEQ.W    ??RoadBrd_ParseString_3
    209                    return Status;
   \   0000004E   0x0030             MOVS     R0,R6
   \   00000050   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000052   0xF004 0xBC76      B.W      ??RoadBrd_ParseString_4
    210                }
    211                else
    212                {
    213                  // Transmit Character to BGM111.
    214                  BGM111_Transmit(1, (uint8_t *)tempBffr);
   \                     ??RoadBrd_ParseString_2: (+1)
   \   00000056   0x0021             MOVS     R1,R4
   \   00000058   0x2001             MOVS     R0,#+1
   \   0000005A   0x.... 0x....      BL       BGM111_Transmit
   \   0000005E   0xF004 0xBC6E      B.W      ??RoadBrd_ParseString_3
    215                }
    216              }// EndIf ( Bypass )
    217              else
    218              {
    219                // Normal Mode
    220              
    221                      // We have a good Tasking String. Time to determine action.
    222                      switch( tempBffr[0] )
   \                     ??RoadBrd_ParseString_1: (+1)
   \   00000062   0x7820             LDRB     R0,[R4, #+0]
   \   00000064   0x2830             CMP      R0,#+48
   \   00000066   0xD02F             BEQ.N    ??RoadBrd_ParseString_5
   \   00000068   0x2831             CMP      R0,#+49
   \   0000006A   0xD048             BEQ.N    ??RoadBrd_ParseString_6
   \   0000006C   0x2832             CMP      R0,#+50
   \   0000006E   0xD079             BEQ.N    ??RoadBrd_ParseString_7
   \   00000070   0x2833             CMP      R0,#+51
   \   00000072   0xF000 0x80AA      BEQ.W    ??RoadBrd_ParseString_8
   \   00000076   0x2834             CMP      R0,#+52
   \   00000078   0xF000 0x80DA      BEQ.W    ??RoadBrd_ParseString_9
   \   0000007C   0x2835             CMP      R0,#+53
   \   0000007E   0xF000 0x810A      BEQ.W    ??RoadBrd_ParseString_10
   \   00000082   0x2836             CMP      R0,#+54
   \   00000084   0xF000 0x817E      BEQ.W    ??RoadBrd_ParseString_11
   \   00000088   0x2841             CMP      R0,#+65
   \   0000008A   0xF000 0x8194      BEQ.W    ??RoadBrd_ParseString_12
   \   0000008E   0x2842             CMP      R0,#+66
   \   00000090   0xF000 0x82F1      BEQ.W    ??RoadBrd_ParseString_13
   \   00000094   0x2843             CMP      R0,#+67
   \   00000096   0xF000 0x85B7      BEQ.W    ??RoadBrd_ParseString_14
   \   0000009A   0x2844             CMP      R0,#+68
   \   0000009C   0xF000 0x87B8      BEQ.W    ??RoadBrd_ParseString_15
   \   000000A0   0x2845             CMP      R0,#+69
   \   000000A2   0xF001 0x8133      BEQ.W    ??RoadBrd_ParseString_16
   \   000000A6   0x2846             CMP      R0,#+70
   \   000000A8   0xF001 0x8145      BEQ.W    ??RoadBrd_ParseString_17
   \   000000AC   0x2847             CMP      R0,#+71
   \   000000AE   0xF001 0x815D      BEQ.W    ??RoadBrd_ParseString_18
   \   000000B2   0x2848             CMP      R0,#+72
   \   000000B4   0xF001 0x81DA      BEQ.W    ??RoadBrd_ParseString_19
   \   000000B8   0x2850             CMP      R0,#+80
   \   000000BA   0xF001 0x84BB      BEQ.W    ??RoadBrd_ParseString_20
   \   000000BE   0x2854             CMP      R0,#+84
   \   000000C0   0xF001 0x84E8      BEQ.W    ??RoadBrd_ParseString_21
   \   000000C4   0xF004 0xBBB2      B.W      ??RoadBrd_ParseString_22
    223                      {
    224          //**************************************************************************************************
    225                      case '0':
    226                        // Enable Road sound and fill buffer. 
    227                        Status = RoadBrdSnd_ProcessSound();
   \                     ??RoadBrd_ParseString_5: (+1)
   \   000000C8   0x.... 0x....      BL       RoadBrdSnd_ProcessSound
   \   000000CC   0x0006             MOVS     R6,R0
    228                        if (Status == HAL_OK)
   \   000000CE   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000D0   0x2E00             CMP      R6,#+0
   \   000000D2   0xD112             BNE.N    ??RoadBrd_ParseString_23
    229                        {
    230                          // Is this a BLE Operation?
    231                          if ( BLE_Flag )
   \   000000D4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000D6   0x2D00             CMP      R5,#+0
   \   000000D8   0xD00A             BEQ.N    ??RoadBrd_ParseString_24
    232                          {
    233                            // Yes...Build and Send BLE Response NOW.
    234                            strcpy( (char *)tempBffr2, "<STATUS>CMD_RDSNDBFFR_FILL</STATUS>");
   \   000000DA   0xF8DF 0x1DBC      LDR.W    R1,??RoadBrd_ParseString_25
   \   000000DE   0xA80A             ADD      R0,SP,#+40
   \   000000E0   0x.... 0x....      BL       strcpy
    235                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000000E4   0xA80A             ADD      R0,SP,#+40
   \   000000E6   0x.... 0x....      BL       strlen
   \   000000EA   0xA90A             ADD      R1,SP,#+40
   \   000000EC   0x.... 0x....      BL       BGM111_Transmit
    236                          }
    237                          strcpy( (char *)tempBffr2, "Road Sound: Road Sound loaded, processed, and sent to FFT Bins.\r\n");
   \                     ??RoadBrd_ParseString_24: (+1)
   \   000000F0   0xF8DF 0x1E10      LDR.W    R1,??RoadBrd_ParseString_26
   \   000000F4   0xA80A             ADD      R0,SP,#+40
   \   000000F6   0x.... 0x....      BL       strcpy
    238                        }
    239                        break;
   \                     ??RoadBrd_ParseString_23: (+1)
   \   000000FA   0xF004 0xBBA8      B.W      ??RoadBrd_ParseString_27
    240          //**************************************************************************************************
    241                      case '1':
    242                        // Rd_Sound FFT Measurements 0-15. 
    243                        Status = RoadBrdSnd_DumpBin0( &RSFFTBins );
   \                     ??RoadBrd_ParseString_6: (+1)
   \   000000FE   0xA891             ADD      R0,SP,#+580
   \   00000100   0x.... 0x....      BL       RoadBrdSnd_DumpBin0
   \   00000104   0x0006             MOVS     R6,R0
    244                        strcpy( (char *)tempBffr2, "Road Sound: FFT Measurements 0-15.\r\n");
   \   00000106   0xF8DF 0x1E04      LDR.W    R1,??RoadBrd_ParseString_26+0x8
   \   0000010A   0xA80A             ADD      R0,SP,#+40
   \   0000010C   0x.... 0x....      BL       strcpy
    245          #ifdef NUCLEO
    246                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    247          #else
    248                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000110   0xA90A             ADD      R1,SP,#+40
   \   00000112   0x2000             MOVS     R0,#+0
   \   00000114   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000118   0x0006             MOVS     R6,R0
    249          #endif
    250                        if (Status != HAL_OK)
   \   0000011A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000011C   0x2E00             CMP      R6,#+0
   \   0000011E   0xD003             BEQ.N    ??RoadBrd_ParseString_28
    251                          return Status;
   \   00000120   0x0030             MOVS     R0,R6
   \   00000122   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000124   0xF004 0xBC0D      B.W      ??RoadBrd_ParseString_4
    252                        // Is this a BLE Operation?
    253                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_28: (+1)
   \   00000128   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000012A   0x2D00             CMP      R5,#+0
   \   0000012C   0xD00B             BEQ.N    ??RoadBrd_ParseString_29
    254                        {
    255                          // Yes...Build and Send BLE Response NOW.
    256                          sprintf( (char *)tempBffr2, "<STATUS>ST_FFT0-15:%s</STATUS>", RSFFTBins.dumpStr );
   \   0000012E   0xAA91             ADD      R2,SP,#+580
   \   00000130   0xF8DF 0x1DDC      LDR.W    R1,??RoadBrd_ParseString_26+0xC
   \   00000134   0xA80A             ADD      R0,SP,#+40
   \   00000136   0x.... 0x....      BL       sprintf
    257                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000013A   0xA80A             ADD      R0,SP,#+40
   \   0000013C   0x.... 0x....      BL       strlen
   \   00000140   0xA90A             ADD      R1,SP,#+40
   \   00000142   0x.... 0x....      BL       BGM111_Transmit
    258                        }
    259                        // NOW, Build Data String..
    260                        sprintf( (char *)tempBffr2, "     FFT Measurements 0-15: " );
   \                     ??RoadBrd_ParseString_29: (+1)
   \   00000146   0xF8DF 0x1DCC      LDR.W    R1,??RoadBrd_ParseString_26+0x10
   \   0000014A   0xA80A             ADD      R0,SP,#+40
   \   0000014C   0x.... 0x....      BL       sprintf
    261                        strcat( (char *)tempBffr2, (char *)RSFFTBins.dumpStr );
   \   00000150   0xA991             ADD      R1,SP,#+580
   \   00000152   0xA80A             ADD      R0,SP,#+40
   \   00000154   0x.... 0x....      BL       strcat
    262                        strcat( (char *)tempBffr2, "\r\n" );
   \   00000158   0xA1DB             ADR.N    R1,??RoadBrd_ParseString_30  ;; 0x0D, 0x0A, 0x00, 0x00
   \   0000015A   0xA80A             ADD      R0,SP,#+40
   \   0000015C   0x.... 0x....      BL       strcat
    263                       break;
   \   00000160   0xF004 0xBB75      B.W      ??RoadBrd_ParseString_27
    264          //**************************************************************************************************
    265                      case '2':
    266                        // Rd_Sound FFT Measurements 16-31. 
    267                        Status = RoadBrdSnd_DumpBin16( &RSFFTBins );
   \                     ??RoadBrd_ParseString_7: (+1)
   \   00000164   0xA891             ADD      R0,SP,#+580
   \   00000166   0x.... 0x....      BL       RoadBrdSnd_DumpBin16
   \   0000016A   0x0006             MOVS     R6,R0
    268                        strcpy( (char *)tempBffr2, "Road Sound: FFT Measurements 16-31.\r\n");
   \   0000016C   0xF8DF 0x1DA8      LDR.W    R1,??RoadBrd_ParseString_26+0x14
   \   00000170   0xA80A             ADD      R0,SP,#+40
   \   00000172   0x.... 0x....      BL       strcpy
    269          #ifdef NUCLEO
    270                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    271          #else
    272                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000176   0xA90A             ADD      R1,SP,#+40
   \   00000178   0x2000             MOVS     R0,#+0
   \   0000017A   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000017E   0x0006             MOVS     R6,R0
    273          #endif
    274                        if (Status != HAL_OK)
   \   00000180   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000182   0x2E00             CMP      R6,#+0
   \   00000184   0xD003             BEQ.N    ??RoadBrd_ParseString_31
    275                          return Status;
   \   00000186   0x0030             MOVS     R0,R6
   \   00000188   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000018A   0xF004 0xBBDA      B.W      ??RoadBrd_ParseString_4
    276                        // Is this a BLE Operation?
    277                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_31: (+1)
   \   0000018E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000190   0x2D00             CMP      R5,#+0
   \   00000192   0xD00B             BEQ.N    ??RoadBrd_ParseString_32
    278                        {
    279                          // Yes...Build and Send BLE Response NOW.
    280                          sprintf( (char *)tempBffr2, "<STATUS>ST_FFT16-31:%s</STATUS>", RSFFTBins.dumpStr );
   \   00000194   0xAA91             ADD      R2,SP,#+580
   \   00000196   0xF8DF 0x1D84      LDR.W    R1,??RoadBrd_ParseString_26+0x18
   \   0000019A   0xA80A             ADD      R0,SP,#+40
   \   0000019C   0x.... 0x....      BL       sprintf
    281                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000001A0   0xA80A             ADD      R0,SP,#+40
   \   000001A2   0x.... 0x....      BL       strlen
   \   000001A6   0xA90A             ADD      R1,SP,#+40
   \   000001A8   0x.... 0x....      BL       BGM111_Transmit
    282                        }
    283                        // NOW, Build Data String..
    284                        sprintf( (char *)tempBffr2, "     FFT Measurements 16-31: " );
   \                     ??RoadBrd_ParseString_32: (+1)
   \   000001AC   0xF8DF 0x1E14      LDR.W    R1,??RoadBrd_ParseString_33
   \   000001B0   0xA80A             ADD      R0,SP,#+40
   \   000001B2   0x.... 0x....      BL       sprintf
    285                        strcat( (char *)tempBffr2, (char *)RSFFTBins.dumpStr );
   \   000001B6   0xA991             ADD      R1,SP,#+580
   \   000001B8   0xA80A             ADD      R0,SP,#+40
   \   000001BA   0x.... 0x....      BL       strcat
    286                        strcat( (char *)tempBffr2, "\r\n" );
   \   000001BE   0xA1C2             ADR.N    R1,??RoadBrd_ParseString_30  ;; 0x0D, 0x0A, 0x00, 0x00
   \   000001C0   0xA80A             ADD      R0,SP,#+40
   \   000001C2   0x.... 0x....      BL       strcat
    287                        break;
   \   000001C6   0xF004 0xBB42      B.W      ??RoadBrd_ParseString_27
    288          //**************************************************************************************************
    289                      case '3':
    290                        // Rd_Sound FFT Measurements 32-47. 
    291                        Status = RoadBrdSnd_DumpBin32( &RSFFTBins );
   \                     ??RoadBrd_ParseString_8: (+1)
   \   000001CA   0xA891             ADD      R0,SP,#+580
   \   000001CC   0x.... 0x....      BL       RoadBrdSnd_DumpBin32
   \   000001D0   0x0006             MOVS     R6,R0
    292                        strcpy( (char *)tempBffr2, "Road Sound: FFT Measurements 32-47.\r\n");
   \   000001D2   0xF8DF 0x1DF4      LDR.W    R1,??RoadBrd_ParseString_33+0x4
   \   000001D6   0xA80A             ADD      R0,SP,#+40
   \   000001D8   0x.... 0x....      BL       strcpy
    293          #ifdef NUCLEO
    294                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    295          #else
    296                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000001DC   0xA90A             ADD      R1,SP,#+40
   \   000001DE   0x2000             MOVS     R0,#+0
   \   000001E0   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000001E4   0x0006             MOVS     R6,R0
    297          #endif
    298                        if (Status != HAL_OK)
   \   000001E6   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000001E8   0x2E00             CMP      R6,#+0
   \   000001EA   0xD003             BEQ.N    ??RoadBrd_ParseString_34
    299                          return Status;
   \   000001EC   0x0030             MOVS     R0,R6
   \   000001EE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001F0   0xF004 0xBBA7      B.W      ??RoadBrd_ParseString_4
    300                        // Is this a BLE Operation?
    301                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_34: (+1)
   \   000001F4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000001F6   0x2D00             CMP      R5,#+0
   \   000001F8   0xD00B             BEQ.N    ??RoadBrd_ParseString_35
    302                        {
    303                          // Yes...Build and Send BLE Response NOW.
    304                          sprintf( (char *)tempBffr2, "<STATUS>ST_FFT32-47:%s</STATUS>", RSFFTBins.dumpStr );
   \   000001FA   0xAA91             ADD      R2,SP,#+580
   \   000001FC   0xF8DF 0x1DF8      LDR.W    R1,??RoadBrd_ParseString_36
   \   00000200   0xA80A             ADD      R0,SP,#+40
   \   00000202   0x.... 0x....      BL       sprintf
    305                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000206   0xA80A             ADD      R0,SP,#+40
   \   00000208   0x.... 0x....      BL       strlen
   \   0000020C   0xA90A             ADD      R1,SP,#+40
   \   0000020E   0x.... 0x....      BL       BGM111_Transmit
    306                        }
    307                        // NOW, Build Data String..
    308                        sprintf( (char *)tempBffr2, "     FFT Measurements 32-47: " );
   \                     ??RoadBrd_ParseString_35: (+1)
   \   00000212   0xF8DF 0x1DE8      LDR.W    R1,??RoadBrd_ParseString_36+0x4
   \   00000216   0xA80A             ADD      R0,SP,#+40
   \   00000218   0x.... 0x....      BL       sprintf
    309                        strcat( (char *)tempBffr2, (char *)RSFFTBins.dumpStr );
   \   0000021C   0xA991             ADD      R1,SP,#+580
   \   0000021E   0xA80A             ADD      R0,SP,#+40
   \   00000220   0x.... 0x....      BL       strcat
    310                        strcat( (char *)tempBffr2, "\r\n" );
   \   00000224   0xA1A8             ADR.N    R1,??RoadBrd_ParseString_30  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000226   0xA80A             ADD      R0,SP,#+40
   \   00000228   0x.... 0x....      BL       strcat
    311                        break;
   \   0000022C   0xF004 0xBB0F      B.W      ??RoadBrd_ParseString_27
    312          //**************************************************************************************************
    313                      case '4':
    314                        // Rd_Sound FFT Measurements 48-63. 
    315                        Status = RoadBrdSnd_DumpBin48( &RSFFTBins );
   \                     ??RoadBrd_ParseString_9: (+1)
   \   00000230   0xA891             ADD      R0,SP,#+580
   \   00000232   0x.... 0x....      BL       RoadBrdSnd_DumpBin48
   \   00000236   0x0006             MOVS     R6,R0
    316                        strcpy( (char *)tempBffr2, "Road Sound: FFT Measurements 48-63.\r\n");
   \   00000238   0xF8DF 0x1DC4      LDR.W    R1,??RoadBrd_ParseString_36+0x8
   \   0000023C   0xA80A             ADD      R0,SP,#+40
   \   0000023E   0x.... 0x....      BL       strcpy
    317          #ifdef NUCLEO
    318                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    319          #else
    320                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000242   0xA90A             ADD      R1,SP,#+40
   \   00000244   0x2000             MOVS     R0,#+0
   \   00000246   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000024A   0x0006             MOVS     R6,R0
    321          #endif
    322                        if (Status != HAL_OK)
   \   0000024C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000024E   0x2E00             CMP      R6,#+0
   \   00000250   0xD003             BEQ.N    ??RoadBrd_ParseString_37
    323                          return Status;
   \   00000252   0x0030             MOVS     R0,R6
   \   00000254   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000256   0xF004 0xBB74      B.W      ??RoadBrd_ParseString_4
    324                        // Is this a BLE Operation?
    325                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_37: (+1)
   \   0000025A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000025C   0x2D00             CMP      R5,#+0
   \   0000025E   0xD00B             BEQ.N    ??RoadBrd_ParseString_38
    326                        {
    327                          // Yes...Build and Send BLE Response NOW.
    328                          sprintf( (char *)tempBffr2, "<STATUS>ST_FFT48-63:%s</STATUS>", RSFFTBins.dumpStr );
   \   00000260   0xAA91             ADD      R2,SP,#+580
   \   00000262   0xF8DF 0x1DA0      LDR.W    R1,??RoadBrd_ParseString_36+0xC
   \   00000266   0xA80A             ADD      R0,SP,#+40
   \   00000268   0x.... 0x....      BL       sprintf
    329                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000026C   0xA80A             ADD      R0,SP,#+40
   \   0000026E   0x.... 0x....      BL       strlen
   \   00000272   0xA90A             ADD      R1,SP,#+40
   \   00000274   0x.... 0x....      BL       BGM111_Transmit
    330                        }
    331                        // NOW, Build Data String..
    332                        sprintf( (char *)tempBffr2, "     FFT Measurements 48-63: " );
   \                     ??RoadBrd_ParseString_38: (+1)
   \   00000278   0xF8DF 0x1D8C      LDR.W    R1,??RoadBrd_ParseString_36+0x10
   \   0000027C   0xA80A             ADD      R0,SP,#+40
   \   0000027E   0x.... 0x....      BL       sprintf
    333                        strcat( (char *)tempBffr2, (char *)RSFFTBins.dumpStr );
   \   00000282   0xA991             ADD      R1,SP,#+580
   \   00000284   0xA80A             ADD      R0,SP,#+40
   \   00000286   0x.... 0x....      BL       strcat
    334                        strcat( (char *)tempBffr2, "\r\n" );
   \   0000028A   0xA18F             ADR.N    R1,??RoadBrd_ParseString_30  ;; 0x0D, 0x0A, 0x00, 0x00
   \   0000028C   0xA80A             ADD      R0,SP,#+40
   \   0000028E   0x.... 0x....      BL       strcat
    335                       break;
   \   00000292   0xF004 0xBADC      B.W      ??RoadBrd_ParseString_27
    336          //**************************************************************************************************
    337                      case '5':
    338                        // dump results of save Buffer. BufferPntr
    339                        BufferPntr = RoadBrdSnd_getSaveBffr();
   \                     ??RoadBrd_ParseString_10: (+1)
   \   00000296   0x.... 0x....      BL       RoadBrdSnd_getSaveBffr
   \   0000029A   0x9048             STR      R0,[SP, #+288]
    340                        strcpy( (char *)tempBffr2, "Road Sound: Results of save Buffer.\r\n");
   \   0000029C   0xF8DF 0x1D6C      LDR.W    R1,??RoadBrd_ParseString_36+0x14
   \   000002A0   0xA80A             ADD      R0,SP,#+40
   \   000002A2   0x.... 0x....      BL       strcpy
    341                        Status = RoadBrdSnd_DumpBin0( &RSFFTBins );
   \   000002A6   0xA891             ADD      R0,SP,#+580
   \   000002A8   0x.... 0x....      BL       RoadBrdSnd_DumpBin0
   \   000002AC   0x0006             MOVS     R6,R0
    342          #ifdef NUCLEO
    343                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    344          #else
    345                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000002AE   0xA90A             ADD      R1,SP,#+40
   \   000002B0   0x2000             MOVS     R0,#+0
   \   000002B2   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000002B6   0x0006             MOVS     R6,R0
    346          #endif
    347                        if (Status != HAL_OK)
   \   000002B8   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000002BA   0x2E00             CMP      R6,#+0
   \   000002BC   0xD003             BEQ.N    ??RoadBrd_ParseString_39
    348                          return Status;
   \   000002BE   0x0030             MOVS     R0,R6
   \   000002C0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000002C2   0xF004 0xBB3E      B.W      ??RoadBrd_ParseString_4
    349                        // Is this a BLE Operation?
    350                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_39: (+1)
   \   000002C6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000002C8   0x2D00             CMP      R5,#+0
   \   000002CA   0xD00A             BEQ.N    ??RoadBrd_ParseString_40
    351                        {
    352                          // Yes...Build and Send BLE Response NOW.
    353                          strcpy( (char *)tempBffr2, "<STATUS>ST_FFTBFFR_DUMP:");
   \   000002CC   0xF8DF 0x1E1C      LDR.W    R1,??RoadBrd_ParseString_41
   \   000002D0   0xA80A             ADD      R0,SP,#+40
   \   000002D2   0x.... 0x....      BL       strcpy
    354                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000002D6   0xA80A             ADD      R0,SP,#+40
   \   000002D8   0x.... 0x....      BL       strlen
   \   000002DC   0xA90A             ADD      R1,SP,#+40
   \   000002DE   0x.... 0x....      BL       BGM111_Transmit
    355                        }
    356                        // NOW, Build Data String..
    357                        y=0;
   \                     ??RoadBrd_ParseString_40: (+1)
   \   000002E2   0x2000             MOVS     R0,#+0
   \   000002E4   0x903A             STR      R0,[SP, #+232]
    358                        sprintf( (char *)tempBffr2, "" );
   \   000002E6   0xA1DB             ADR.N    R1,??RoadBrd_ParseString_42  ;; ""
   \   000002E8   0xA80A             ADD      R0,SP,#+40
   \   000002EA   0x.... 0x....      BL       sprintf
    359                        for (x=0; x<FFT_BUFFER_SIZE; x++)
   \   000002EE   0x2000             MOVS     R0,#+0
   \   000002F0   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_43: (+1)
   \   000002F2   0x2F80             CMP      R7,#+128
   \   000002F4   0xDA31             BGE.N    ??RoadBrd_ParseString_44
    360                        {
    361          //                sprintf( (char *)tempBffr3, "%02x ", BufferPntr[x]);
    362                          sprintf( (char *)tempBffr3, "%04d ", BufferPntr[x]);
   \   000002F6   0x9848             LDR      R0,[SP, #+288]
   \   000002F8   0x57C2             LDRSB    R2,[R0, R7]
   \   000002FA   0xF8DF 0x1DF4      LDR.W    R1,??RoadBrd_ParseString_41+0x4
   \   000002FE   0xA82A             ADD      R0,SP,#+168
   \   00000300   0x.... 0x....      BL       sprintf
    363                          strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   00000304   0xA92A             ADD      R1,SP,#+168
   \   00000306   0xA80A             ADD      R0,SP,#+40
   \   00000308   0x.... 0x....      BL       strcat
    364                          y++;
   \   0000030C   0x983A             LDR      R0,[SP, #+232]
   \   0000030E   0x1C40             ADDS     R0,R0,#+1
   \   00000310   0x903A             STR      R0,[SP, #+232]
    365                          if (y>=16)
   \   00000312   0x983A             LDR      R0,[SP, #+232]
   \   00000314   0x2810             CMP      R0,#+16
   \   00000316   0xDB1E             BLT.N    ??RoadBrd_ParseString_45
    366                          {
    367                            strcat( (char *)tempBffr2, "\r\n" );
   \   00000318   0xA16B             ADR.N    R1,??RoadBrd_ParseString_30  ;; 0x0D, 0x0A, 0x00, 0x00
   \   0000031A   0xA80A             ADD      R0,SP,#+40
   \   0000031C   0x.... 0x....      BL       strcat
    368                            y=0;
   \   00000320   0x2000             MOVS     R0,#+0
   \   00000322   0x903A             STR      R0,[SP, #+232]
    369           #ifdef NUCLEO
    370                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    371          #else
    372                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000324   0xA90A             ADD      R1,SP,#+40
   \   00000326   0x2000             MOVS     R0,#+0
   \   00000328   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000032C   0x0006             MOVS     R6,R0
    373          #endif
    374                            if (Status != HAL_OK)
   \   0000032E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000330   0x2E00             CMP      R6,#+0
   \   00000332   0xD003             BEQ.N    ??RoadBrd_ParseString_46
    375                              return Status;
   \   00000334   0x0030             MOVS     R0,R6
   \   00000336   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000338   0xF004 0xBB03      B.W      ??RoadBrd_ParseString_4
    376                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_46: (+1)
   \   0000033C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000033E   0x2D00             CMP      R5,#+0
   \   00000340   0xD005             BEQ.N    ??RoadBrd_ParseString_47
    377                            {
    378                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000342   0xA80A             ADD      R0,SP,#+40
   \   00000344   0x.... 0x....      BL       strlen
   \   00000348   0xA90A             ADD      R1,SP,#+40
   \   0000034A   0x.... 0x....      BL       BGM111_Transmit
    379                            }
    380                            sprintf( (char *)tempBffr2, "" );
   \                     ??RoadBrd_ParseString_47: (+1)
   \   0000034E   0xA1C1             ADR.N    R1,??RoadBrd_ParseString_42  ;; ""
   \   00000350   0xA80A             ADD      R0,SP,#+40
   \   00000352   0x.... 0x....      BL       sprintf
    381                          }
    382                        }
   \                     ??RoadBrd_ParseString_45: (+1)
   \   00000356   0x1C7F             ADDS     R7,R7,#+1
   \   00000358   0xE7CB             B.N      ??RoadBrd_ParseString_43
    383                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_44: (+1)
   \   0000035A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000035C   0x2D00             CMP      R5,#+0
   \   0000035E   0xD00A             BEQ.N    ??RoadBrd_ParseString_48
    384                        {
    385                          strcpy( (char *)tempBffr2, "</STATUS>");
   \   00000360   0xF8DF 0x1DD4      LDR.W    R1,??RoadBrd_ParseString_49
   \   00000364   0xA80A             ADD      R0,SP,#+40
   \   00000366   0x.... 0x....      BL       strcpy
    386                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000036A   0xA80A             ADD      R0,SP,#+40
   \   0000036C   0x.... 0x....      BL       strlen
   \   00000370   0xA90A             ADD      R1,SP,#+40
   \   00000372   0x.... 0x....      BL       BGM111_Transmit
    387                        }
    388                        sprintf( (char *)tempBffr2, "     ---COMPLETE---" );
   \                     ??RoadBrd_ParseString_48: (+1)
   \   00000376   0xF8DF 0x1DC4      LDR.W    R1,??RoadBrd_ParseString_49+0x4
   \   0000037A   0xA80A             ADD      R0,SP,#+40
   \   0000037C   0x.... 0x....      BL       sprintf
    389                        break;
   \   00000380   0xF004 0xBA65      B.W      ??RoadBrd_ParseString_27
    390          //**************************************************************************************************
    391                      case '6':
    392                        // Clear all buffers. 
    393                        Status = HAL_OK;
   \                     ??RoadBrd_ParseString_11: (+1)
   \   00000384   0x2000             MOVS     R0,#+0
   \   00000386   0x0006             MOVS     R6,R0
    394                        RoadBrdSnd_ClrBffrs();
   \   00000388   0x.... 0x....      BL       RoadBrdSnd_ClrBffrs
    395                        // Is this a BLE Operation?
    396                        if ( BLE_Flag )
   \   0000038C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000038E   0x2D00             CMP      R5,#+0
   \   00000390   0xD00A             BEQ.N    ??RoadBrd_ParseString_50
    397                        {
    398                          // Yes...Build and Send BLE Response NOW.
    399                          strcpy( (char *)tempBffr2, "<STATUS>ST_FFTCLR</STATUS>");
   \   00000392   0xF8DF 0x1DAC      LDR.W    R1,??RoadBrd_ParseString_49+0x8
   \   00000396   0xA80A             ADD      R0,SP,#+40
   \   00000398   0x.... 0x....      BL       strcpy
    400                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000039C   0xA80A             ADD      R0,SP,#+40
   \   0000039E   0x.... 0x....      BL       strlen
   \   000003A2   0xA90A             ADD      R1,SP,#+40
   \   000003A4   0x.... 0x....      BL       BGM111_Transmit
    401                        }
    402                        strcpy( (char *)tempBffr2, "Road Sound: All buffers cleared.\r\n");;
   \                     ??RoadBrd_ParseString_50: (+1)
   \   000003A8   0xF8DF 0x1E10      LDR.W    R1,??RoadBrd_ParseString_51
   \   000003AC   0xA80A             ADD      R0,SP,#+40
   \   000003AE   0x.... 0x....      BL       strcpy
    403                        break;
   \   000003B2   0xF004 0xBA4C      B.W      ??RoadBrd_ParseString_27
    404          //**************************************************************************************************
    405                      case 'A':
    406                        // Barometer. 
    407                        if (Size == 1)
   \                     ??RoadBrd_ParseString_12: (+1)
   \   000003B6   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000003BA   0xF1B8 0x0F01      CMP      R8,#+1
   \   000003BE   0xF000 0x8158      BEQ.W    ??RoadBrd_ParseString_52
    408                        {
    409          //------------------ A Command...Read Pressure...PRESS_OUT_XL...PRESS_OUT_L...PRESS_OUT_H     
    410                        }
    411                        else
    412                        {
    413                          switch( tempBffr[1] )
   \   000003C2   0x7860             LDRB     R0,[R4, #+1]
   \   000003C4   0x2836             CMP      R0,#+54
   \   000003C6   0xD039             BEQ.N    ??RoadBrd_ParseString_53
   \   000003C8   0x2838             CMP      R0,#+56
   \   000003CA   0xF000 0x80BB      BEQ.W    ??RoadBrd_ParseString_54
   \   000003CE   0x2839             CMP      R0,#+57
   \   000003D0   0xF000 0x8125      BEQ.W    ??RoadBrd_ParseString_55
   \   000003D4   0x2849             CMP      R0,#+73
   \   000003D6   0xF040 0x8147      BNE.W    ??RoadBrd_ParseString_56
    414                          {
    415          //------------------ AI Command...Initialize Barometer Sensor     
    416                            case 'I':
    417                              // Clean out old pressure.
    418          //                    Status = RoadBrd_Baro_ReadPressure( &PRPMeasure );
    419                              // Clean out old Temp data.
    420          //                    Status = RoadBrd_Baro_ReadTemp( i2cData );
    421                              //************ Wait 50msec.
    422          //                    RoadBrd_Delay(500);  
    423                   
    424                              Status = RoadBrd_Init_Barometer();
   \                     ??RoadBrd_ParseString_57: (+1)
   \   000003DA   0x.... 0x....      BL       RoadBrd_Init_Barometer
   \   000003DE   0x0006             MOVS     R6,R0
    425                              // Is this a BLE Operation?
    426                              if ( BLE_Flag )
   \   000003E0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000003E2   0x2D00             CMP      R5,#+0
   \   000003E4   0xD00A             BEQ.N    ??RoadBrd_ParseString_58
    427                              {
    428                                // Yes...Build and Send BLE Response NOW.
    429                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000003E6   0xF8DF 0x1DD8      LDR.W    R1,??RoadBrd_ParseString_51+0x4
   \   000003EA   0xA80A             ADD      R0,SP,#+40
   \   000003EC   0x.... 0x....      BL       strcpy
    430                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000003F0   0xA80A             ADD      R0,SP,#+40
   \   000003F2   0x.... 0x....      BL       strlen
   \   000003F6   0xA90A             ADD      R1,SP,#+40
   \   000003F8   0x.... 0x....      BL       BGM111_Transmit
    431                              }
    432                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_58: (+1)
   \   000003FC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000003FE   0x2E00             CMP      R6,#+0
   \   00000400   0xD105             BNE.N    ??RoadBrd_ParseString_59
    433                              {
    434                                  strcpy( (char *)tempBffr2, "Initialize Barometer Sensor Passed.\r\n");;
   \   00000402   0xF8DF 0x1DC0      LDR.W    R1,??RoadBrd_ParseString_51+0x8
   \   00000406   0xA80A             ADD      R0,SP,#+40
   \   00000408   0x.... 0x....      BL       strcpy
   \   0000040C   0xE015             B.N      ??RoadBrd_ParseString_60
    435                              }
    436                              else
    437                              {
    438                                  strcpy( (char *)tempBffr2, "Initialize Barometer Sensor FAILED.\r\n");
   \                     ??RoadBrd_ParseString_59: (+1)
   \   0000040E   0xF8DF 0x1DB8      LDR.W    R1,??RoadBrd_ParseString_51+0xC
   \   00000412   0xA80A             ADD      R0,SP,#+40
   \   00000414   0x.... 0x....      BL       strcpy
    439                                  Save_Status = Status;
   \   00000418   0xF88D 0x60B4      STRB     R6,[SP, #+180]
    440          #ifdef NUCLEO
    441                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    442          #else
    443                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000041C   0xA90A             ADD      R1,SP,#+40
   \   0000041E   0x2000             MOVS     R0,#+0
   \   00000420   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000424   0x0006             MOVS     R6,R0
    444          #endif
    445                                  if (Status != HAL_OK)
   \   00000426   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000428   0x2E00             CMP      R6,#+0
   \   0000042A   0xD003             BEQ.N    ??RoadBrd_ParseString_61
    446                                    return Status;
   \   0000042C   0x0030             MOVS     R0,R6
   \   0000042E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000430   0xF004 0xBA87      B.W      ??RoadBrd_ParseString_4
    447                                  else
    448                                    Status = Save_Status;
   \                     ??RoadBrd_ParseString_61: (+1)
   \   00000434   0xF89D 0x00B4      LDRB     R0,[SP, #+180]
   \   00000438   0x0006             MOVS     R6,R0
    449                              }
    450                              break;
   \                     ??RoadBrd_ParseString_60: (+1)
   \   0000043A   0xE11A             B.N      ??RoadBrd_ParseString_52
    451          //------------------ A0 Command...Enable Barometer     
    452          #if 0                  
    453                          case '0':
    454                              Status = RoadBrd_Enable_Barometer();
    455                              // Is this a BLE Operation?
    456                              if ( BLE_Flag )
    457                              {
    458                                // Yes...Build and Send BLE Response NOW.
    459                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
    460                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
    461                              }
    462                              if (Status == HAL_OK)
    463                              {
    464                                  strcpy( (char *)tempBffr2, "Barometer Sensor: Enable Barometer Passed.\r\n");;
    465                              }
    466                              else
    467                              {
    468                                  strcpy( (char *)tempBffr2, "Barometer Sensor: Enable Barometer FAILED.\r\n");;
    469                              }
    470                              break;
    471          //------------------ A1 Command...Disable Barometer     
    472                            case '1':
    473                              Status = RoadBrd_Disable_Barometer();
    474                              // Is this a BLE Operation?
    475                              if ( BLE_Flag )
    476                              {
    477                                // Yes...Build and Send BLE Response NOW.
    478                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
    479                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
    480                              }
    481                              if (Status == HAL_OK)
    482                              {
    483                                  strcpy( (char *)tempBffr2, "Barometer Sensor: Disable Barometer Passed.\r\n");;
    484                              }
    485                              else
    486                              {
    487                                  strcpy( (char *)tempBffr2, "Barometer Sensor: Disable Barometer FAILED.\r\n");;
    488                                  Save_Status = Status;
    489          #ifdef NUCLEO
    490                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    491          #else
    492                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
    493          #endif
    494                                  if (Status != HAL_OK)
    495                                    return Status;
    496                                  else
    497                                    Status = Save_Status;
    498                              }
    499                              break;
    500          //------------------ A2 Command...Start the Barometer but do not wait.     
    501                            case '2':
    502                              Status = RoadBrd_StartSample_Barometer();
    503                              // Is this a BLE Operation?
    504                              if ( BLE_Flag )
    505                              {
    506                                // Yes...Build and Send BLE Response NOW.
    507                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
    508                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
    509                              }
    510                              if (Status == HAL_OK)
    511                              {
    512                                  strcpy( (char *)tempBffr2, "Start the Barometer but do not wait Passed.\r\n");;
    513                              }
    514                              else
    515                              {
    516                                  strcpy( (char *)tempBffr2, "Start the Barometer but do not wait FAILED.\r\n");;
    517                                  Save_Status = Status;
    518          #ifdef NUCLEO
    519                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    520          #else
    521                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
    522          #endif
    523                                  if (Status != HAL_OK)
    524                                    return Status;
    525                                  else
    526                                    Status = Save_Status;
    527                              }
    528                              break;
    529          //------------------ A3 Command...Start the Barometer and wait for response.    
    530                            case '3':
    531                              Status = RoadBrd_StartSample_BarometerWait();
    532                              // Is this a BLE Operation?
    533                              if ( BLE_Flag )
    534                              {
    535                                // Yes...Build and Send BLE Response NOW.
    536                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
    537                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
    538                              }
    539                              if (Status == HAL_OK)
    540                              {
    541                                  strcpy( (char *)tempBffr2, "Start the Barometer and wait for response Passed.\r\n");;
    542                              }
    543                              else
    544                              {
    545                                  strcpy( (char *)tempBffr2, "Start the Barometer and wait for response FAILED.\r\n");;
    546                                  Save_Status = Status;
    547          #ifdef NUCLEO
    548                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    549          #else
    550                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
    551          #endif
    552                                  if (Status != HAL_OK)
    553                                    return Status;
    554                                  else
    555                                    Status = Save_Status;
    556                              }
    557                              break;
    558          //------------------ A4 Command...Return Status    
    559                            case '4':
    560                              // Is this a BLE Operation?
    561                              if ( BLE_Flag )
    562                              {
    563                                // Yes...Build and Send BLE Response NOW.
    564                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
    565                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
    566                              }
    567                              Status = RoadBrd_Barometer_Status( &PRMeasure );
    568                              if (Status == HAL_OK)
    569                              {
    570                                sprintf( (char *)tempBffr2, "Barometer Sensor Status: %02x / ", PRMeasure.Status );
    571                                strcat( (char *)tempBffr2, (char *)PRMeasure.Raw );
    572                                strcat( (char *)tempBffr2, "\r\n" );
    573                              }
    574                              break;
    575          //------------------ A5 Command...Wait for Pressure to be complete. 
    576                            case '5':
    577                              Status = RoadBrd_WaitForPressure( (uint16_t)BARO_WAITCNT );
    578                              // Is this a BLE Operation?
    579                              if ( BLE_Flag )
    580                              {
    581                                // Yes...Build and Send BLE Response NOW.
    582                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
    583                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
    584                              }
    585                              if (Status == HAL_OK)
    586                              {
    587                                  strcpy( (char *)tempBffr2, "Wait for Pressure to be complete Passed.\r\n");;
    588                              }
    589                              else
    590                              {
    591                                  strcpy( (char *)tempBffr2, "Wait for Pressure to be complete FAILED.\r\n");;
    592                                  Save_Status = Status;
    593          #ifdef NUCLEO
    594                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    595          #else
    596                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
    597          #endif
    598                                  if (Status != HAL_OK)
    599                                    return Status;
    600                                  else
    601                                    Status = Save_Status;
    602                              }
    603                              break;
    604          #endif
    605          //------------------ A6 Command...Read Pressure...PRESS_OUT_XL...PRESS_OUT_L...PRESS_OUT_H     
    606                            case '6':
    607                              //Status = RoadBrd_Barometer_Status( &PRMeasure );
    608                              Status = RoadBrd_Baro_ReadPressure( &PRPMeasure );
   \                     ??RoadBrd_ParseString_53: (+1)
   \   0000043C   0xA8AE             ADD      R0,SP,#+696
   \   0000043E   0x.... 0x....      BL       RoadBrd_Baro_ReadPressure
   \   00000442   0x0006             MOVS     R6,R0
    609                              if (Status == HAL_OK)
   \   00000444   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000446   0x2E00             CMP      R6,#+0
   \   00000448   0xD104             BNE.N    ??RoadBrd_ParseString_62
    610                                Status = RoadBrd_Baro_ReadPressure_Scaled( &PRPMeasureScaled );
   \   0000044A   0xA8FF             ADD      R0,SP,#+1020
   \   0000044C   0x3038             ADDS     R0,R0,#+56
   \   0000044E   0x.... 0x....      BL       RoadBrd_Baro_ReadPressure_Scaled
   \   00000452   0x0006             MOVS     R6,R0
    611                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_62: (+1)
   \   00000454   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000456   0x2E00             CMP      R6,#+0
   \   00000458   0xD15D             BNE.N    ??RoadBrd_ParseString_63
    612                              {
    613                                strcpy( (char *)tempBffr2, "A6 Command...Read Pressure Passed.\r\n");;
   \   0000045A   0xF8DF 0x1E08      LDR.W    R1,??RoadBrd_ParseString_64
   \   0000045E   0xA80A             ADD      R0,SP,#+40
   \   00000460   0x.... 0x....      BL       strcpy
    614          #ifdef NUCLEO
    615                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    616          #else
    617                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000464   0xA90A             ADD      R1,SP,#+40
   \   00000466   0x2000             MOVS     R0,#+0
   \   00000468   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000046C   0x0006             MOVS     R6,R0
    618          #endif
    619                                if (Status != HAL_OK)
   \   0000046E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000470   0x2E00             CMP      R6,#+0
   \   00000472   0xD003             BEQ.N    ??RoadBrd_ParseString_65
    620                                  return Status;
   \   00000474   0x0030             MOVS     R0,R6
   \   00000476   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000478   0xF004 0xBA63      B.W      ??RoadBrd_ParseString_4
    621                                // NOW, Build Data String..
    622                                sprintf( (char *)tempBffr2, " PRESSURE(PRESS_OUT_H...PRESS_OUT_L...PRESS_OUT_XL)\r\n" );
   \                     ??RoadBrd_ParseString_65: (+1)
   \   0000047C   0xF8DF 0x1DE8      LDR.W    R1,??RoadBrd_ParseString_64+0x4
   \   00000480   0xA80A             ADD      R0,SP,#+40
   \   00000482   0x.... 0x....      BL       sprintf
    623          #ifdef NUCLEO
    624                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    625          #else
    626                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000486   0xA90A             ADD      R1,SP,#+40
   \   00000488   0x2000             MOVS     R0,#+0
   \   0000048A   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000048E   0x0006             MOVS     R6,R0
    627          #endif
    628                                if (Status != HAL_OK)
   \   00000490   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000492   0x2E00             CMP      R6,#+0
   \   00000494   0xD003             BEQ.N    ??RoadBrd_ParseString_66
    629                                  return Status;
   \   00000496   0x0030             MOVS     R0,R6
   \   00000498   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000049A   0xF004 0xBA52      B.W      ??RoadBrd_ParseString_4
    630                               
    631                                // Now show Decimal value of items.
    632                                sprintf( (char *)tempBffr2, " PRESSURE: %s/%s\r\n", (char *)PRPMeasure.Pressure, (char *)PRPMeasureScaled.Pressure );
   \                     ??RoadBrd_ParseString_66: (+1)
   \   0000049E   0xABFF             ADD      R3,SP,#+1020
   \   000004A0   0x3338             ADDS     R3,R3,#+56
   \   000004A2   0xAAAE             ADD      R2,SP,#+696
   \   000004A4   0xF8DF 0x1DC4      LDR.W    R1,??RoadBrd_ParseString_64+0x8
   \   000004A8   0xA80A             ADD      R0,SP,#+40
   \   000004AA   0x.... 0x....      BL       sprintf
    633          #ifdef NUCLEO
    634                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    635          #else
    636                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000004AE   0xA90A             ADD      R1,SP,#+40
   \   000004B0   0x2000             MOVS     R0,#+0
   \   000004B2   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000004B6   0x0006             MOVS     R6,R0
    637          #endif
    638                                if (Status != HAL_OK)
   \   000004B8   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000004BA   0x2E00             CMP      R6,#+0
   \   000004BC   0xD006             BEQ.N    ??RoadBrd_ParseString_67
    639                                  return Status;
   \   000004BE   0x0030             MOVS     R0,R6
   \   000004C0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000004C2   0xF004 0xBA3E      B.W      ??RoadBrd_ParseString_4
   \   000004C6   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_30:
   \   000004C8   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
    640                                // Is this a BLE Operation?
    641                                if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_67: (+1)
   \   000004CC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000004CE   0x2D00             CMP      R5,#+0
   \   000004D0   0xD00D             BEQ.N    ??RoadBrd_ParseString_68
    642                                {
    643                                  // Yes...Build and Send BLE Response NOW.
    644                                  sprintf( (char *)tempBffr2, "<STATUS>PRESSURE: %s/%s</STATUS>", (char *)PRPMeasure.Pressure, (char *)PRPMeasureScaled.Pressure );
   \   000004D2   0xABFF             ADD      R3,SP,#+1020
   \   000004D4   0x3338             ADDS     R3,R3,#+56
   \   000004D6   0xAAAE             ADD      R2,SP,#+696
   \   000004D8   0xF8DF 0x1D98      LDR.W    R1,??RoadBrd_ParseString_64+0x10
   \   000004DC   0xA80A             ADD      R0,SP,#+40
   \   000004DE   0x.... 0x....      BL       sprintf
    645                                  BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000004E2   0xA80A             ADD      R0,SP,#+40
   \   000004E4   0x.... 0x....      BL       strlen
   \   000004E8   0xA90A             ADD      R1,SP,#+40
   \   000004EA   0x.... 0x....      BL       BGM111_Transmit
    646                                }
    647                                // Now show hex value of items.
    648                                sprintf( (char *)tempBffr2, " PRESSURE:  " );
   \                     ??RoadBrd_ParseString_68: (+1)
   \   000004EE   0xF8DF 0x1D88      LDR.W    R1,??RoadBrd_ParseString_64+0x14
   \   000004F2   0xA80A             ADD      R0,SP,#+40
   \   000004F4   0x.... 0x....      BL       sprintf
    649                                strcat( (char *)tempBffr2, (char *)PRPMeasure.Raw );
   \   000004F8   0xA9B1             ADD      R1,SP,#+708
   \   000004FA   0xA80A             ADD      R0,SP,#+40
   \   000004FC   0x.... 0x....      BL       strcat
    650                                sprintf( (char *)tempBffr3, "  -  %08x\r\n", PRPMeasure.RawC);
   \   00000500   0x9AB4             LDR      R2,[SP, #+720]
   \   00000502   0xF8DF 0x1D78      LDR.W    R1,??RoadBrd_ParseString_64+0x18
   \   00000506   0xA82A             ADD      R0,SP,#+168
   \   00000508   0x.... 0x....      BL       sprintf
    651                                strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   0000050C   0xA92A             ADD      R1,SP,#+168
   \   0000050E   0xA80A             ADD      R0,SP,#+40
   \   00000510   0x.... 0x....      BL       strcat
   \   00000514   0xE015             B.N      ??RoadBrd_ParseString_69
    652                              }
    653                              else
    654                              {
    655                                  strcpy( (char *)tempBffr2, "A6 Command...Read Pressure FAILED.\r\n");;
   \                     ??RoadBrd_ParseString_63: (+1)
   \   00000516   0xF8DF 0x1D68      LDR.W    R1,??RoadBrd_ParseString_64+0x1C
   \   0000051A   0xA80A             ADD      R0,SP,#+40
   \   0000051C   0x.... 0x....      BL       strcpy
    656                                  Save_Status = Status;
   \   00000520   0xF88D 0x60B4      STRB     R6,[SP, #+180]
    657          #ifdef NUCLEO
    658                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    659          #else
    660                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000524   0xA90A             ADD      R1,SP,#+40
   \   00000526   0x2000             MOVS     R0,#+0
   \   00000528   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000052C   0x0006             MOVS     R6,R0
    661          #endif
    662                                  if (Status != HAL_OK)
   \   0000052E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000530   0x2E00             CMP      R6,#+0
   \   00000532   0xD003             BEQ.N    ??RoadBrd_ParseString_70
    663                                    return Status;
   \   00000534   0x0030             MOVS     R0,R6
   \   00000536   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000538   0xF004 0xBA03      B.W      ??RoadBrd_ParseString_4
    664                                  else
    665                                    Status = Save_Status;
   \                     ??RoadBrd_ParseString_70: (+1)
   \   0000053C   0xF89D 0x00B4      LDRB     R0,[SP, #+180]
   \   00000540   0x0006             MOVS     R6,R0
    666                              }
    667                              break;
   \                     ??RoadBrd_ParseString_69: (+1)
   \   00000542   0xE096             B.N      ??RoadBrd_ParseString_52
    668          
    669          //------------------ A8 Command...Read Temperature....TEMP_OUT_L...TEMP_OUT_H    
    670                            case '8':
    671                              Status = RoadBrd_Baro_ReadTemp( &TMeasure );
   \                     ??RoadBrd_ParseString_54: (+1)
   \   00000544   0xA83C             ADD      R0,SP,#+240
   \   00000546   0x.... 0x....      BL       RoadBrd_Baro_ReadTemp
   \   0000054A   0x0006             MOVS     R6,R0
    672                              if (Status == HAL_OK)
   \   0000054C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000054E   0x2E00             CMP      R6,#+0
   \   00000550   0xD127             BNE.N    ??RoadBrd_ParseString_71
    673                              {
    674                                // Send string to UART..
    675                                strcpy( (char *)tempBffr2, "A8 Command...Read Temperature Passed.\r\n");
   \   00000552   0xF8DF 0x1E0C      LDR.W    R1,??RoadBrd_ParseString_72
   \   00000556   0xA80A             ADD      R0,SP,#+40
   \   00000558   0x.... 0x....      BL       strcpy
    676          #ifdef NUCLEO
    677                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    678          #else
    679                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000055C   0xA90A             ADD      R1,SP,#+40
   \   0000055E   0x2000             MOVS     R0,#+0
   \   00000560   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000564   0x0006             MOVS     R6,R0
    680          #endif
    681                                if (Status != HAL_OK)
   \   00000566   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000568   0x2E00             CMP      R6,#+0
   \   0000056A   0xD003             BEQ.N    ??RoadBrd_ParseString_73
    682                                  return Status;
   \   0000056C   0x0030             MOVS     R0,R6
   \   0000056E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000570   0xF004 0xB9E7      B.W      ??RoadBrd_ParseString_4
    683                                // NOW, Build Data String..
    684                                sprintf( (char *)tempBffr2, "     TEMP DATA: " );
   \                     ??RoadBrd_ParseString_73: (+1)
   \   00000574   0xF8DF 0x1DEC      LDR.W    R1,??RoadBrd_ParseString_72+0x4
   \   00000578   0xA80A             ADD      R0,SP,#+40
   \   0000057A   0x.... 0x....      BL       sprintf
    685                                strcat( (char *)tempBffr2, (char *)TMeasure.Raw );
   \   0000057E   0xF10D 0x01FE      ADD      R1,SP,#+254
   \   00000582   0xA80A             ADD      R0,SP,#+40
   \   00000584   0x.... 0x....      BL       strcat
    686                                strcat( (char *)tempBffr2, "\r\n" );
   \   00000588   0xA1DB             ADR.N    R1,??RoadBrd_ParseString_74  ;; 0x0D, 0x0A, 0x00, 0x00
   \   0000058A   0xA80A             ADD      R0,SP,#+40
   \   0000058C   0x.... 0x....      BL       strcat
    687                              }
    688                              else
    689                                break;
    690          #ifdef NUCLEO
    691                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    692          #else
    693                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000590   0xA90A             ADD      R1,SP,#+40
   \   00000592   0x2000             MOVS     R0,#+0
   \   00000594   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000598   0x0006             MOVS     R6,R0
    694          #endif
    695                              if (Status != HAL_OK)
   \   0000059A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000059C   0x2E00             CMP      R6,#+0
   \   0000059E   0xD101             BNE.N    ??RoadBrd_ParseString_75
   \   000005A0   0xE004             B.N      ??RoadBrd_ParseString_76
   \                     ??RoadBrd_ParseString_71: (+1)
   \   000005A2   0xE066             B.N      ??RoadBrd_ParseString_52
    696                                return Status;
   \                     ??RoadBrd_ParseString_75: (+1)
   \   000005A4   0x0030             MOVS     R0,R6
   \   000005A6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000005A8   0xF004 0xB9CB      B.W      ??RoadBrd_ParseString_4
    697                              // NOW, Build Data String..
    698                              sprintf( (char *)tempBffr2, "     TEMP DATA(Decimal): %d\r\n", TMeasure.RawC );
   \                     ??RoadBrd_ParseString_76: (+1)
   \   000005AC   0xF8BD 0x2106      LDRH     R2,[SP, #+262]
   \   000005B0   0xF8DF 0x1DB4      LDR.W    R1,??RoadBrd_ParseString_72+0x8
   \   000005B4   0xA80A             ADD      R0,SP,#+40
   \   000005B6   0x.... 0x....      BL       sprintf
    699          #ifdef NUCLEO
    700                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    701          #else
    702                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000005BA   0xA90A             ADD      R1,SP,#+40
   \   000005BC   0x2000             MOVS     R0,#+0
   \   000005BE   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000005C2   0x0006             MOVS     R6,R0
    703          #endif
    704                              if (Status != HAL_OK)
   \   000005C4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000005C6   0x2E00             CMP      R6,#+0
   \   000005C8   0xD003             BEQ.N    ??RoadBrd_ParseString_77
    705                                return Status;
   \   000005CA   0x0030             MOVS     R0,R6
   \   000005CC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000005CE   0xF004 0xB9B8      B.W      ??RoadBrd_ParseString_4
    706                              // Is this a BLE Operation?
    707                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_77: (+1)
   \   000005D2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000005D4   0x2D00             CMP      R5,#+0
   \   000005D6   0xD00A             BEQ.N    ??RoadBrd_ParseString_78
    708                              {
    709                                // Yes...Build and Send BLE Response NOW.
    710                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000005D8   0xF8DF 0x1BE4      LDR.W    R1,??RoadBrd_ParseString_51+0x4
   \   000005DC   0xA80A             ADD      R0,SP,#+40
   \   000005DE   0x.... 0x....      BL       strcpy
    711                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000005E2   0xA80A             ADD      R0,SP,#+40
   \   000005E4   0x.... 0x....      BL       strlen
   \   000005E8   0xA90A             ADD      R1,SP,#+40
   \   000005EA   0x.... 0x....      BL       BGM111_Transmit
    712                              }
    713                              // Now calculate Celcius and Farenheit Temp.
    714                              sprintf( (char *)tempBffr2, "     TempC: " );
   \                     ??RoadBrd_ParseString_78: (+1)
   \   000005EE   0xF8DF 0x1E1C      LDR.W    R1,??RoadBrd_ParseString_79
   \   000005F2   0xA80A             ADD      R0,SP,#+40
   \   000005F4   0x.... 0x....      BL       sprintf
    715                              strcat( (char *)tempBffr2, (char *)TMeasure.TempC );
   \   000005F8   0xA93C             ADD      R1,SP,#+240
   \   000005FA   0xA80A             ADD      R0,SP,#+40
   \   000005FC   0x.... 0x....      BL       strcat
    716                              strcat( (char *)tempBffr2, "     TempF: " );
   \   00000600   0xF8DF 0x1E0C      LDR.W    R1,??RoadBrd_ParseString_79+0x4
   \   00000604   0xA80A             ADD      R0,SP,#+40
   \   00000606   0x.... 0x....      BL       strcat
    717                              strcat( (char *)tempBffr2, (char *)TMeasure.TempF );
   \   0000060A   0xF10D 0x01F7      ADD      R1,SP,#+247
   \   0000060E   0xA80A             ADD      R0,SP,#+40
   \   00000610   0x.... 0x....      BL       strcat
    718                              strcat( (char *)tempBffr2, "\r\n" );
   \   00000614   0xA1B8             ADR.N    R1,??RoadBrd_ParseString_74  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000616   0xA80A             ADD      R0,SP,#+40
   \   00000618   0x.... 0x....      BL       strcat
    719          /*                    if (Status == HAL_OK)
    720                              {
    721                                strcpy( (char *)tempBffr2, "A8 Command...Read Temperature Passed.\r\n");;
    722          #ifdef NUCLEO
    723                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    724          #else
    725                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
    726          #endif
    727                                if (Status != HAL_OK)
    728                                  return Status;
    729                                // NOW, Build Data String..
    730                                sprintf( (char *)tempBffr2, " Temperature(TEMP_OUT_L...TEMP_OUT_H)\r\n" );
    731          #ifdef NUCLEO
    732                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    733          #else
    734                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
    735          #endif
    736                                if (Status != HAL_OK)
    737                                  return Status;
    738                                sprintf( (char *)tempBffr2, " Temperature:  %02x   %02x\r\n", i2cData[0], i2cData[1] );
    739                              }
    740                              else
    741                              {
    742                                  strcpy( (char *)tempBffr2, "A8 Command...Read Temperature FAILED.\r\n");;
    743                                  Save_Status = Status;
    744          #ifdef NUCLEO
    745                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    746          #else
    747                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
    748          #endif
    749                                  if (Status != HAL_OK)
    750                                    return Status;
    751                                  else
    752                                    Status = Save_Status;
    753                              }*/
    754                              break;
   \   0000061C   0xE029             B.N      ??RoadBrd_ParseString_52
    755          //------------------ A9 Command...Test and Verify WHO_AM_I     
    756                            case '9':
    757                              Status = RoadBrd_TestandRead_Barometer();
   \                     ??RoadBrd_ParseString_55: (+1)
   \   0000061E   0x.... 0x....      BL       RoadBrd_TestandRead_Barometer
   \   00000622   0x0006             MOVS     R6,R0
    758                              // Is this a BLE Operation?
    759                              if ( BLE_Flag )
   \   00000624   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000626   0x2D00             CMP      R5,#+0
   \   00000628   0xD00A             BEQ.N    ??RoadBrd_ParseString_80
    760                              {
    761                                // Yes...Build and Send BLE Response NOW.
    762                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   0000062A   0xF8DF 0x1B94      LDR.W    R1,??RoadBrd_ParseString_51+0x4
   \   0000062E   0xA80A             ADD      R0,SP,#+40
   \   00000630   0x.... 0x....      BL       strcpy
    763                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000634   0xA80A             ADD      R0,SP,#+40
   \   00000636   0x.... 0x....      BL       strlen
   \   0000063A   0xA90A             ADD      R1,SP,#+40
   \   0000063C   0x.... 0x....      BL       BGM111_Transmit
    764                              }
    765                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_80: (+1)
   \   00000640   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000642   0x2E00             CMP      R6,#+0
   \   00000644   0xD108             BNE.N    ??RoadBrd_ParseString_81
    766                              {
    767                                  strcpy( (char *)tempBffr2, "Barometer Sensor: WHO_AM_I Passed.\r\n");
   \   00000646   0xF8DF 0x1E18      LDR.W    R1,??RoadBrd_ParseString_82
   \   0000064A   0xA80A             ADD      R0,SP,#+40
   \   0000064C   0x.... 0x....      BL       strcpy
   \   00000650   0xE009             B.N      ??RoadBrd_ParseString_83
   \   00000652   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_42:
   \   00000654   0x00 0x00          DC8      "",0x0,0x0,0x0
   \              0x00 0x00    
    768                              }
    769                              else
    770                              {
    771                                  strcpy( (char *)tempBffr2, "Barometer Sensor: WHO_AM_I FAILED.\r\n");
   \                     ??RoadBrd_ParseString_81: (+1)
   \   00000658   0xF8DF 0x1E08      LDR.W    R1,??RoadBrd_ParseString_82+0x4
   \   0000065C   0xA80A             ADD      R0,SP,#+40
   \   0000065E   0x.... 0x....      BL       strcpy
    772                                  Status = HAL_OK;
   \   00000662   0x2000             MOVS     R0,#+0
   \   00000664   0x0006             MOVS     R6,R0
    773                              }
    774                              break;
   \                     ??RoadBrd_ParseString_83: (+1)
   \   00000666   0xE004             B.N      ??RoadBrd_ParseString_52
    775                            default:
    776                              strcpy( (char *)tempBffr2, "ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_56: (+1)
   \   00000668   0xF8DF 0x1DFC      LDR.W    R1,??RoadBrd_ParseString_82+0x8
   \   0000066C   0xA80A             ADD      R0,SP,#+40
   \   0000066E   0x.... 0x....      BL       strcpy
    777                              break;
    778                          } //EndSwitch
    779                        } //EndElse (Size == 1)
    780                        break;
   \                     ??RoadBrd_ParseString_52: (+1)
   \   00000672   0xF004 0xB8EC      B.W      ??RoadBrd_ParseString_27
    781          //**************************************************************************************************
    782                      case 'B':
    783                        // Read Cool Eye. 
    784          //++++++++++++++++++++++++++++++++++++++++++  Cool Eye/Grid Eye Monitor Commands.
    785                        if (Size == 1)
   \                     ??RoadBrd_ParseString_13: (+1)
   \   00000676   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000067A   0xF1B8 0x0F01      CMP      R8,#+1
   \   0000067E   0xF040 0x8150      BNE.W    ??RoadBrd_ParseString_84
    786                        {
    787          //------------------ B Command: Read Cool Eye/Grid Eye Values      
    788                          // Read Cool Eye/Grid Eye Values.....
    789                          if ( Get_DriverStates( GRIDEYE_MNTR_TASK ))
   \   00000682   0x2005             MOVS     R0,#+5
   \   00000684   0x.... 0x....      BL       Get_DriverStates
   \   00000688   0x2800             CMP      R0,#+0
   \   0000068A   0xD00B             BEQ.N    ??RoadBrd_ParseString_85
    790                          {
    791                            Status = RoadBrd_GridEye_ReadValues( &GridMeasure );
   \   0000068C   0xA85B             ADD      R0,SP,#+364
   \   0000068E   0x.... 0x....      BL       RoadBrd_GridEye_ReadValues
   \   00000692   0x0006             MOVS     R6,R0
    792                            if (Status == HAL_OK)
   \   00000694   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000696   0x2E00             CMP      R6,#+0
   \   00000698   0xD117             BNE.N    ??RoadBrd_ParseString_86
    793                              Status = RoadBrd_GridEye_ReadValues_Scaled( &GridMeasureScaled );
   \   0000069A   0xA8D7             ADD      R0,SP,#+860
   \   0000069C   0x.... 0x....      BL       RoadBrd_GridEye_ReadValues_Scaled
   \   000006A0   0x0006             MOVS     R6,R0
   \   000006A2   0xE012             B.N      ??RoadBrd_ParseString_86
    794                          }
    795                          else if ( Get_DriverStates( COOLEYE_MNTR_TASK ))
   \                     ??RoadBrd_ParseString_85: (+1)
   \   000006A4   0x2006             MOVS     R0,#+6
   \   000006A6   0x.... 0x....      BL       Get_DriverStates
   \   000006AA   0x2800             CMP      R0,#+0
   \   000006AC   0xD00B             BEQ.N    ??RoadBrd_ParseString_87
    796                          {
    797                            Status = RoadBrd_CoolEye_ReadValues( &GridMeasure );
   \   000006AE   0xA85B             ADD      R0,SP,#+364
   \   000006B0   0x.... 0x....      BL       RoadBrd_CoolEye_ReadValues
   \   000006B4   0x0006             MOVS     R6,R0
    798                            if (Status == HAL_OK)
   \   000006B6   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000006B8   0x2E00             CMP      R6,#+0
   \   000006BA   0xD106             BNE.N    ??RoadBrd_ParseString_86
    799                              Status = RoadBrd_CoolEye_ReadValues_Scaled( &GridMeasureScaled );
   \   000006BC   0xA8D7             ADD      R0,SP,#+860
   \   000006BE   0x.... 0x....      BL       RoadBrd_CoolEye_ReadValues_Scaled
   \   000006C2   0x0006             MOVS     R6,R0
   \   000006C4   0xE001             B.N      ??RoadBrd_ParseString_86
    800                          }
    801                          else
    802                            Status = HAL_ERROR;
   \                     ??RoadBrd_ParseString_87: (+1)
   \   000006C6   0x2001             MOVS     R0,#+1
   \   000006C8   0x0006             MOVS     R6,R0
    803                          
    804                          // Is this a BLE Operation?
    805                          if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_86: (+1)
   \   000006CA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000006CC   0x2D00             CMP      R5,#+0
   \   000006CE   0xD00A             BEQ.N    ??RoadBrd_ParseString_88
    806                          {
    807                            // Yes...Build and Send BLE Response NOW.
    808                            strcpy( (char *)tempBffr2, "<STATUS>ST_THERMAL_DUMP:");
   \   000006D0   0xF8DF 0x1E28      LDR.W    R1,??RoadBrd_ParseString_89
   \   000006D4   0xA80A             ADD      R0,SP,#+40
   \   000006D6   0x.... 0x....      BL       strcpy
    809                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000006DA   0xA80A             ADD      R0,SP,#+40
   \   000006DC   0x.... 0x....      BL       strlen
   \   000006E0   0xA90A             ADD      R1,SP,#+40
   \   000006E2   0x.... 0x....      BL       BGM111_Transmit
    810                          }
    811                          if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_88: (+1)
   \   000006E6   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000006E8   0x2E00             CMP      R6,#+0
   \   000006EA   0xF040 0x8107      BNE.W    ??RoadBrd_ParseString_90
    812                          {
    813                            // Send string to UART..
    814                            strcpy( (char *)tempBffr2, "Voltage Monitor/Shunt Voltage...\r\n");
   \   000006EE   0xF8DF 0x1E10      LDR.W    R1,??RoadBrd_ParseString_89+0x4
   \   000006F2   0xA80A             ADD      R0,SP,#+40
   \   000006F4   0x.... 0x....      BL       strcpy
    815          #ifdef NUCLEO
    816                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    817          #else
    818                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000006F8   0xA90A             ADD      R1,SP,#+40
   \   000006FA   0x2000             MOVS     R0,#+0
   \   000006FC   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000700   0x0006             MOVS     R6,R0
    819          #endif
    820                            if (Status != HAL_OK)
   \   00000702   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000704   0x2E00             CMP      R6,#+0
   \   00000706   0xD003             BEQ.N    ??RoadBrd_ParseString_91
    821                              return Status;
   \   00000708   0x0030             MOVS     R0,R6
   \   0000070A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000070C   0xF004 0xB919      B.W      ??RoadBrd_ParseString_4
    822                            // NOW, Build Data String..
    823                            for (x=0; x<9; x++)
   \                     ??RoadBrd_ParseString_91: (+1)
   \   00000710   0x2000             MOVS     R0,#+0
   \   00000712   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_92: (+1)
   \   00000714   0x2F09             CMP      R7,#+9
   \   00000716   0xF280 0x80DE      BGE.W    ??RoadBrd_ParseString_93
    824                            {
    825                              // Build String
    826                              switch(x)
   \   0000071A   0x2F00             CMP      R7,#+0
   \   0000071C   0xD00F             BEQ.N    ??RoadBrd_ParseString_94
   \   0000071E   0x2F02             CMP      R7,#+2
   \   00000720   0xD035             BEQ.N    ??RoadBrd_ParseString_95
   \   00000722   0xD320             BCC.N    ??RoadBrd_ParseString_96
   \   00000724   0x2F04             CMP      R7,#+4
   \   00000726   0xD05A             BEQ.N    ??RoadBrd_ParseString_97
   \   00000728   0xD345             BCC.N    ??RoadBrd_ParseString_98
   \   0000072A   0x2F06             CMP      R7,#+6
   \   0000072C   0xF000 0x807F      BEQ.W    ??RoadBrd_ParseString_99
   \   00000730   0xD369             BCC.N    ??RoadBrd_ParseString_100
   \   00000732   0x2F08             CMP      R7,#+8
   \   00000734   0xF000 0x80A4      BEQ.W    ??RoadBrd_ParseString_101
   \   00000738   0xF0C0 0x808D      BCC.W    ??RoadBrd_ParseString_102
   \   0000073C   0xE0B4             B.N      ??RoadBrd_ParseString_103
    827                              {
    828                                case 0: //Thermistor Values
    829                                  sprintf( (char *)tempBffr2, "     Thermistor DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.Thermistor.Raw,
    830                                                                                                         GridMeasure.Thermistor.TempC,GridMeasureScaled.Thermistor.TempC,
    831                                                                                                         GridMeasure.Thermistor.TempF,GridMeasureScaled.Thermistor.TempF,
    832                                                                                                         GridMeasure.Thermistor.RawC );
   \                     ??RoadBrd_ParseString_94: (+1)
   \   0000073E   0xF8BD 0x0182      LDRH     R0,[SP, #+386]
   \   00000742   0x9003             STR      R0,[SP, #+12]
   \   00000744   0xA8D8             ADD      R0,SP,#+864
   \   00000746   0x1CC0             ADDS     R0,R0,#+3
   \   00000748   0x9002             STR      R0,[SP, #+8]
   \   0000074A   0xA85C             ADD      R0,SP,#+368
   \   0000074C   0x1CC0             ADDS     R0,R0,#+3
   \   0000074E   0x9001             STR      R0,[SP, #+4]
   \   00000750   0xA8D7             ADD      R0,SP,#+860
   \   00000752   0x9000             STR      R0,[SP, #+0]
   \   00000754   0xAB5B             ADD      R3,SP,#+364
   \   00000756   0xF50D 0x72BD      ADD      R2,SP,#+378
   \   0000075A   0xF8DF 0x1E0C      LDR.W    R1,??RoadBrd_ParseString_104
   \   0000075E   0xA80A             ADD      R0,SP,#+40
   \   00000760   0x.... 0x....      BL       sprintf
    833          //                        sprintf( (char *)tempBffr2, "     Thermistor DATA: %s   %s   %s   %d\r\n", GridMeasure.Thermistor.Raw,
    834          //                                                                                               GridMeasure.Thermistor.TempC,
    835          //                                                                                               GridMeasure.Thermistor.TempF,
    836          //                                                                                               GridMeasure.Thermistor.RawC );
    837                                  break;
   \   00000764   0xE0A0             B.N      ??RoadBrd_ParseString_103
    838                                case 1: //GridEye1 Values
    839                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye1.Raw,
    840                                                                                                         GridMeasure.GridEye1.TempC,GridMeasureScaled.GridEye1.TempC,
    841                                                                                                         GridMeasure.GridEye1.TempF,GridMeasureScaled.GridEye1.TempF,
    842                                                                                                         GridMeasure.GridEye1.RawC );
   \                     ??RoadBrd_ParseString_96: (+1)
   \   00000766   0xF8BD 0x019A      LDRH     R0,[SP, #+410]
   \   0000076A   0x9003             STR      R0,[SP, #+12]
   \   0000076C   0xA8DE             ADD      R0,SP,#+888
   \   0000076E   0x1CC0             ADDS     R0,R0,#+3
   \   00000770   0x9002             STR      R0,[SP, #+8]
   \   00000772   0xA862             ADD      R0,SP,#+392
   \   00000774   0x1CC0             ADDS     R0,R0,#+3
   \   00000776   0x9001             STR      R0,[SP, #+4]
   \   00000778   0xA8DD             ADD      R0,SP,#+884
   \   0000077A   0x9000             STR      R0,[SP, #+0]
   \   0000077C   0xAB61             ADD      R3,SP,#+388
   \   0000077E   0xF50D 0x72C9      ADD      R2,SP,#+402
   \   00000782   0xF8DF 0x1DE8      LDR.W    R1,??RoadBrd_ParseString_104+0x4
   \   00000786   0xA80A             ADD      R0,SP,#+40
   \   00000788   0x.... 0x....      BL       sprintf
    843          //                        sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye1.Raw,
    844          //                                                                                               GridMeasure.GridEye1.TempC,
    845          //                                                                                               GridMeasure.GridEye1.TempF,
    846          //                                                                                               GridMeasure.GridEye1.RawC );
    847                                  break;
   \   0000078C   0xE08C             B.N      ??RoadBrd_ParseString_103
    848                                case 2: //GridEye2 Values
    849                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye2.Raw,
    850                                                                                                         GridMeasure.GridEye2.TempC,GridMeasureScaled.GridEye2.TempC,
    851                                                                                                         GridMeasure.GridEye2.TempF,GridMeasureScaled.GridEye2.TempF,
    852                                                                                                         GridMeasure.GridEye2.RawC );
   \                     ??RoadBrd_ParseString_95: (+1)
   \   0000078E   0xF8BD 0x01B2      LDRH     R0,[SP, #+434]
   \   00000792   0x9003             STR      R0,[SP, #+12]
   \   00000794   0xA8E4             ADD      R0,SP,#+912
   \   00000796   0x1CC0             ADDS     R0,R0,#+3
   \   00000798   0x9002             STR      R0,[SP, #+8]
   \   0000079A   0xA868             ADD      R0,SP,#+416
   \   0000079C   0x1CC0             ADDS     R0,R0,#+3
   \   0000079E   0x9001             STR      R0,[SP, #+4]
   \   000007A0   0xA8E3             ADD      R0,SP,#+908
   \   000007A2   0x9000             STR      R0,[SP, #+0]
   \   000007A4   0xAB67             ADD      R3,SP,#+412
   \   000007A6   0xF50D 0x72D5      ADD      R2,SP,#+426
   \   000007AA   0xF8DF 0x1DC0      LDR.W    R1,??RoadBrd_ParseString_104+0x4
   \   000007AE   0xA80A             ADD      R0,SP,#+40
   \   000007B0   0x.... 0x....      BL       sprintf
    853          //                        sprintf( (char *)tempBffr2, "     Grid 34 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye2.Raw,
    854          //                                                                                               GridMeasure.GridEye2.TempC,
    855          //                                                                                               GridMeasure.GridEye2.TempF,
    856          //                                                                                               GridMeasure.GridEye2.RawC );
    857                                  break;
   \   000007B4   0xE078             B.N      ??RoadBrd_ParseString_103
    858                                case 3: //GridEye3 Values
    859                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye3.Raw,
    860                                                                                                         GridMeasure.GridEye3.TempC,GridMeasureScaled.GridEye3.TempC,
    861                                                                                                         GridMeasure.GridEye3.TempF,GridMeasureScaled.GridEye3.TempF,
    862                                                                                                         GridMeasure.GridEye3.RawC );
   \                     ??RoadBrd_ParseString_98: (+1)
   \   000007B6   0xF8BD 0x01CA      LDRH     R0,[SP, #+458]
   \   000007BA   0x9003             STR      R0,[SP, #+12]
   \   000007BC   0xA8EA             ADD      R0,SP,#+936
   \   000007BE   0x1CC0             ADDS     R0,R0,#+3
   \   000007C0   0x9002             STR      R0,[SP, #+8]
   \   000007C2   0xA86E             ADD      R0,SP,#+440
   \   000007C4   0x1CC0             ADDS     R0,R0,#+3
   \   000007C6   0x9001             STR      R0,[SP, #+4]
   \   000007C8   0xA8E9             ADD      R0,SP,#+932
   \   000007CA   0x9000             STR      R0,[SP, #+0]
   \   000007CC   0xAB6D             ADD      R3,SP,#+436
   \   000007CE   0xF50D 0x72E1      ADD      R2,SP,#+450
   \   000007D2   0xF8DF 0x1D98      LDR.W    R1,??RoadBrd_ParseString_104+0x4
   \   000007D6   0xA80A             ADD      R0,SP,#+40
   \   000007D8   0x.... 0x....      BL       sprintf
    863          //                        sprintf( (char *)tempBffr2, "     Grid 35 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye3.Raw,
    864          //                                                                                               GridMeasure.GridEye3.TempC,
    865          //                                                                                               GridMeasure.GridEye3.TempF,
    866          //                                                                                               GridMeasure.GridEye3.RawC );
    867                                  break;
   \   000007DC   0xE064             B.N      ??RoadBrd_ParseString_103
    868                                case 4: //GridEye4 Values
    869                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye4.Raw,
    870                                                                                                         GridMeasure.GridEye4.TempC,GridMeasureScaled.GridEye4.TempC,
    871                                                                                                         GridMeasure.GridEye4.TempF,GridMeasureScaled.GridEye4.TempF,
    872                                                                                                         GridMeasure.GridEye4.RawC );
   \                     ??RoadBrd_ParseString_97: (+1)
   \   000007DE   0xF8BD 0x01E2      LDRH     R0,[SP, #+482]
   \   000007E2   0x9003             STR      R0,[SP, #+12]
   \   000007E4   0xA8F0             ADD      R0,SP,#+960
   \   000007E6   0x1CC0             ADDS     R0,R0,#+3
   \   000007E8   0x9002             STR      R0,[SP, #+8]
   \   000007EA   0xA874             ADD      R0,SP,#+464
   \   000007EC   0x1CC0             ADDS     R0,R0,#+3
   \   000007EE   0x9001             STR      R0,[SP, #+4]
   \   000007F0   0xA8EF             ADD      R0,SP,#+956
   \   000007F2   0x9000             STR      R0,[SP, #+0]
   \   000007F4   0xAB73             ADD      R3,SP,#+460
   \   000007F6   0xF50D 0x72ED      ADD      R2,SP,#+474
   \   000007FA   0xF8DF 0x1D70      LDR.W    R1,??RoadBrd_ParseString_104+0x4
   \   000007FE   0xA80A             ADD      R0,SP,#+40
   \   00000800   0x.... 0x....      BL       sprintf
    873          //                        sprintf( (char *)tempBffr2, "     Grid 36 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye4.Raw,
    874          //                                                                                               GridMeasure.GridEye4.TempC,
    875          //                                                                                               GridMeasure.GridEye4.TempF,
    876          //                                                                                               GridMeasure.GridEye4.RawC );
    877                                  break;
   \   00000804   0xE050             B.N      ??RoadBrd_ParseString_103
    878                                case 5: //GridEye5 Values
    879                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye5.Raw,
    880                                                                                                         GridMeasure.GridEye5.TempC,GridMeasureScaled.GridEye5.TempC,
    881                                                                                                         GridMeasure.GridEye5.TempF,GridMeasureScaled.GridEye5.TempF,
    882                                                                                                         GridMeasure.GridEye5.RawC );
   \                     ??RoadBrd_ParseString_100: (+1)
   \   00000806   0xF8BD 0x01FA      LDRH     R0,[SP, #+506]
   \   0000080A   0x9003             STR      R0,[SP, #+12]
   \   0000080C   0xA8F6             ADD      R0,SP,#+984
   \   0000080E   0x1CC0             ADDS     R0,R0,#+3
   \   00000810   0x9002             STR      R0,[SP, #+8]
   \   00000812   0xA87A             ADD      R0,SP,#+488
   \   00000814   0x1CC0             ADDS     R0,R0,#+3
   \   00000816   0x9001             STR      R0,[SP, #+4]
   \   00000818   0xA8F5             ADD      R0,SP,#+980
   \   0000081A   0x9000             STR      R0,[SP, #+0]
   \   0000081C   0xAB79             ADD      R3,SP,#+484
   \   0000081E   0xF50D 0x72F9      ADD      R2,SP,#+498
   \   00000822   0xF8DF 0x1D48      LDR.W    R1,??RoadBrd_ParseString_104+0x4
   \   00000826   0xA80A             ADD      R0,SP,#+40
   \   00000828   0x.... 0x....      BL       sprintf
    883          //                        sprintf( (char *)tempBffr2, "     Grid 37 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye5.Raw,
    884          //                                                                                               GridMeasure.GridEye5.TempC,
    885          //                                                                                               GridMeasure.GridEye5.TempF,
    886          //                                                                                               GridMeasure.GridEye5.RawC );
    887                                  break;
   \   0000082C   0xE03C             B.N      ??RoadBrd_ParseString_103
    888                                case 6: //GridEye6 Values
    889                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye6.Raw,
    890                                                                                                         GridMeasure.GridEye6.TempC,GridMeasureScaled.GridEye6.TempC,
    891                                                                                                         GridMeasure.GridEye6.TempF,GridMeasureScaled.GridEye6.TempF,
    892                                                                                                         GridMeasure.GridEye6.RawC );
   \                     ??RoadBrd_ParseString_99: (+1)
   \   0000082E   0xF8BD 0x0212      LDRH     R0,[SP, #+530]
   \   00000832   0x9003             STR      R0,[SP, #+12]
   \   00000834   0xA8FC             ADD      R0,SP,#+1008
   \   00000836   0x1CC0             ADDS     R0,R0,#+3
   \   00000838   0x9002             STR      R0,[SP, #+8]
   \   0000083A   0xA880             ADD      R0,SP,#+512
   \   0000083C   0x1CC0             ADDS     R0,R0,#+3
   \   0000083E   0x9001             STR      R0,[SP, #+4]
   \   00000840   0xA8FB             ADD      R0,SP,#+1004
   \   00000842   0x9000             STR      R0,[SP, #+0]
   \   00000844   0xAB7F             ADD      R3,SP,#+508
   \   00000846   0xAA82             ADD      R2,SP,#+520
   \   00000848   0x1C92             ADDS     R2,R2,#+2
   \   0000084A   0xF8DF 0x1D20      LDR.W    R1,??RoadBrd_ParseString_104+0x4
   \   0000084E   0xA80A             ADD      R0,SP,#+40
   \   00000850   0x.... 0x....      BL       sprintf
    893          //                        sprintf( (char *)tempBffr2, "     Grid 38 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye6.Raw,
    894          //                                                                                               GridMeasure.GridEye6.TempC,
    895          //                                                                                               GridMeasure.GridEye6.TempF,
    896          //                                                                                               GridMeasure.GridEye6.RawC );
    897                                  break;
   \   00000854   0xE028             B.N      ??RoadBrd_ParseString_103
    898                                case 7: //GridEye7 Values
    899                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye7.Raw,
    900                                                                                                         GridMeasure.GridEye7.TempC,GridMeasureScaled.GridEye7.TempC,
    901                                                                                                         GridMeasure.GridEye7.TempF,GridMeasureScaled.GridEye7.TempF,
    902                                                                                                         GridMeasure.GridEye7.RawC );
   \                     ??RoadBrd_ParseString_102: (+1)
   \   00000856   0xF8BD 0x022A      LDRH     R0,[SP, #+554]
   \   0000085A   0x9003             STR      R0,[SP, #+12]
   \   0000085C   0xA8FF             ADD      R0,SP,#+1020
   \   0000085E   0x300F             ADDS     R0,R0,#+15
   \   00000860   0x9002             STR      R0,[SP, #+8]
   \   00000862   0xA886             ADD      R0,SP,#+536
   \   00000864   0x1CC0             ADDS     R0,R0,#+3
   \   00000866   0x9001             STR      R0,[SP, #+4]
   \   00000868   0xA8FF             ADD      R0,SP,#+1020
   \   0000086A   0x3008             ADDS     R0,R0,#+8
   \   0000086C   0x9000             STR      R0,[SP, #+0]
   \   0000086E   0xAB85             ADD      R3,SP,#+532
   \   00000870   0xAA88             ADD      R2,SP,#+544
   \   00000872   0x1C92             ADDS     R2,R2,#+2
   \   00000874   0xF8DF 0x1CF4      LDR.W    R1,??RoadBrd_ParseString_104+0x4
   \   00000878   0xA80A             ADD      R0,SP,#+40
   \   0000087A   0x.... 0x....      BL       sprintf
    903          //                        sprintf( (char *)tempBffr2, "     Grid 39 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye7.Raw,
    904          //                                                                                               GridMeasure.GridEye7.TempC,
    905          //                                                                                               GridMeasure.GridEye7.TempF,
    906          //                                                                                               GridMeasure.GridEye7.RawC );
    907                                  break;
   \   0000087E   0xE013             B.N      ??RoadBrd_ParseString_103
    908                                case 8: //GridEye8 Values
    909                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye8.Raw,
    910                                                                                                         GridMeasure.GridEye8.TempC,GridMeasureScaled.GridEye8.TempC,
    911                                                                                                         GridMeasure.GridEye8.TempF,GridMeasureScaled.GridEye8.TempF,
    912                                                                                                         GridMeasure.GridEye8.RawC );
   \                     ??RoadBrd_ParseString_101: (+1)
   \   00000880   0xF8BD 0x0242      LDRH     R0,[SP, #+578]
   \   00000884   0x9003             STR      R0,[SP, #+12]
   \   00000886   0xA8FF             ADD      R0,SP,#+1020
   \   00000888   0x3027             ADDS     R0,R0,#+39
   \   0000088A   0x9002             STR      R0,[SP, #+8]
   \   0000088C   0xA88C             ADD      R0,SP,#+560
   \   0000088E   0x1CC0             ADDS     R0,R0,#+3
   \   00000890   0x9001             STR      R0,[SP, #+4]
   \   00000892   0xA8FF             ADD      R0,SP,#+1020
   \   00000894   0x3020             ADDS     R0,R0,#+32
   \   00000896   0x9000             STR      R0,[SP, #+0]
   \   00000898   0xAB8B             ADD      R3,SP,#+556
   \   0000089A   0xAA8E             ADD      R2,SP,#+568
   \   0000089C   0x1C92             ADDS     R2,R2,#+2
   \   0000089E   0xF8DF 0x1CCC      LDR.W    R1,??RoadBrd_ParseString_104+0x4
   \   000008A2   0xA80A             ADD      R0,SP,#+40
   \   000008A4   0x.... 0x....      BL       sprintf
    913          //                        sprintf( (char *)tempBffr2, "     Grid 40 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye8.Raw,
    914          //                                                                                               GridMeasure.GridEye8.TempC,
    915          //                                                                                               GridMeasure.GridEye8.TempF,
    916          //                                                                                               GridMeasure.GridEye8.RawC );
    917                                  break;
    918                              } // EndSwitch(x)
    919                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_103: (+1)
   \   000008A8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000008AA   0x2D00             CMP      R5,#+0
   \   000008AC   0xD005             BEQ.N    ??RoadBrd_ParseString_105
    920                              {
    921                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000008AE   0xA80A             ADD      R0,SP,#+40
   \   000008B0   0x.... 0x....      BL       strlen
   \   000008B4   0xA90A             ADD      R1,SP,#+40
   \   000008B6   0x.... 0x....      BL       BGM111_Transmit
    922                              }
    923                              // Now Print String.
    924           #ifdef NUCLEO
    925                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    926          #else
    927                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \                     ??RoadBrd_ParseString_105: (+1)
   \   000008BA   0xA90A             ADD      R1,SP,#+40
   \   000008BC   0x2000             MOVS     R0,#+0
   \   000008BE   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000008C2   0x0006             MOVS     R6,R0
    928          #endif
    929                              if (Status != HAL_OK)
   \   000008C4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000008C6   0x2E00             CMP      R6,#+0
   \   000008C8   0xD003             BEQ.N    ??RoadBrd_ParseString_106
    930                                return Status;
   \   000008CA   0x0030             MOVS     R0,R6
   \   000008CC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000008CE   0xF004 0xB838      B.W      ??RoadBrd_ParseString_4
    931                            } // EndFor(x=0; x<9; x++)
   \                     ??RoadBrd_ParseString_106: (+1)
   \   000008D2   0x1C7F             ADDS     R7,R7,#+1
   \   000008D4   0xE71E             B.N      ??RoadBrd_ParseString_92
    932                            sprintf( (char *)tempBffr2, "     SHNT VLTG DATA: " );
   \                     ??RoadBrd_ParseString_93: (+1)
   \   000008D6   0xF8DF 0x1E04      LDR.W    R1,??RoadBrd_ParseString_107
   \   000008DA   0xA80A             ADD      R0,SP,#+40
   \   000008DC   0x.... 0x....      BL       sprintf
    933                            strcat( (char *)tempBffr2, (char *)VMeasure.Raw );
   \   000008E0   0xA944             ADD      R1,SP,#+272
   \   000008E2   0xA80A             ADD      R0,SP,#+40
   \   000008E4   0x.... 0x....      BL       strcat
    934                            strcat( (char *)tempBffr2, "\r\n" );
   \   000008E8   0xA103             ADR.N    R1,??RoadBrd_ParseString_74  ;; 0x0D, 0x0A, 0x00, 0x00
   \   000008EA   0xA80A             ADD      R0,SP,#+40
   \   000008EC   0x.... 0x....      BL       strcat
    935                          } //Endif(Status == HAL_OK)
    936                          else
    937                            break;
    938                          if ( BLE_Flag )
   \   000008F0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000008F2   0x2D00             CMP      R5,#+0
   \   000008F4   0xD104             BNE.N    ??RoadBrd_ParseString_108
   \   000008F6   0xE00E             B.N      ??RoadBrd_ParseString_109
   \                     ??RoadBrd_ParseString_74:
   \   000008F8   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
   \                     ??RoadBrd_ParseString_90: (+1)
   \   000008FC   0xF003 0xBFA7      B.W      ??RoadBrd_ParseString_27
    939                          {
    940                            strcpy( (char *)tempBffr2, "</STATUS>");
   \                     ??RoadBrd_ParseString_108: (+1)
   \   00000900   0xF8DF 0x1834      LDR.W    R1,??RoadBrd_ParseString_49
   \   00000904   0xA80A             ADD      R0,SP,#+40
   \   00000906   0x.... 0x....      BL       strcpy
    941                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000090A   0xA80A             ADD      R0,SP,#+40
   \   0000090C   0x.... 0x....      BL       strlen
   \   00000910   0xA90A             ADD      R1,SP,#+40
   \   00000912   0x.... 0x....      BL       BGM111_Transmit
    942                          }
    943                          sprintf( (char *)tempBffr2, "     COMPLETE.\r\n" );
   \                     ??RoadBrd_ParseString_109: (+1)
   \   00000916   0xF8DF 0x1E10      LDR.W    R1,??RoadBrd_ParseString_110
   \   0000091A   0xA80A             ADD      R0,SP,#+40
   \   0000091C   0x.... 0x....      BL       sprintf
   \   00000920   0xE170             B.N      ??RoadBrd_ParseString_111
    944                        }
    945                        else
    946                        {
    947                          switch( tempBffr[1] )
   \                     ??RoadBrd_ParseString_84: (+1)
   \   00000922   0x7860             LDRB     R0,[R4, #+1]
   \   00000924   0x2830             CMP      R0,#+48
   \   00000926   0xD01F             BEQ.N    ??RoadBrd_ParseString_112
   \   00000928   0x2831             CMP      R0,#+49
   \   0000092A   0xF000 0x8152      BEQ.W    ??RoadBrd_ParseString_113
   \   0000092E   0x2849             CMP      R0,#+73
   \   00000930   0xF040 0x8168      BNE.W    ??RoadBrd_ParseString_111
    948                          {
    949          //------------------ BI Command: Initialize Cool Eye/Grid Eye Sensor
    950                            case 'I':
    951                              // Initialize Cool Eye/Grid Eye Sensor.
    952                              Status = RoadBrd_GridEyeInit();
   \                     ??RoadBrd_ParseString_114: (+1)
   \   00000934   0x.... 0x....      BL       RoadBrd_GridEyeInit
   \   00000938   0x0006             MOVS     R6,R0
    953                              // Is this a BLE Operation?
    954                              if ( BLE_Flag )
   \   0000093A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000093C   0x2D00             CMP      R5,#+0
   \   0000093E   0xD00A             BEQ.N    ??RoadBrd_ParseString_115
    955                              {
    956                                // Yes...Build and Send BLE Response NOW.
    957                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00000940   0xF8DF 0x187C      LDR.W    R1,??RoadBrd_ParseString_51+0x4
   \   00000944   0xA80A             ADD      R0,SP,#+40
   \   00000946   0x.... 0x....      BL       strcpy
    958                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000094A   0xA80A             ADD      R0,SP,#+40
   \   0000094C   0x.... 0x....      BL       strlen
   \   00000950   0xA90A             ADD      R1,SP,#+40
   \   00000952   0x.... 0x....      BL       BGM111_Transmit
    959                              }
    960                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_115: (+1)
   \   00000956   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000958   0x2E00             CMP      R6,#+0
   \   0000095A   0xD104             BNE.N    ??RoadBrd_ParseString_116
    961                              {
    962                                strcpy( (char *)tempBffr2, "Cool Eye/Grid Eye Sensor: Initialization Complete.\r\n");;
   \   0000095C   0xF8DF 0x1DCC      LDR.W    R1,??RoadBrd_ParseString_110+0x4
   \   00000960   0xA80A             ADD      R0,SP,#+40
   \   00000962   0x.... 0x....      BL       strcpy
    963                              }
    964                              break;
   \                     ??RoadBrd_ParseString_116: (+1)
   \   00000966   0xE14D             B.N      ??RoadBrd_ParseString_111
    965          //------------------ B0 Command...Read Cool Eye/Grid Eye Values.....
    966                            case '0':
    967                              // Read Cool Eye/Grid Eye Values.....
    968                              if ( Get_DriverStates( GRIDEYE_MNTR_TASK ))
   \                     ??RoadBrd_ParseString_112: (+1)
   \   00000968   0x2005             MOVS     R0,#+5
   \   0000096A   0x.... 0x....      BL       Get_DriverStates
   \   0000096E   0x2800             CMP      R0,#+0
   \   00000970   0xD00B             BEQ.N    ??RoadBrd_ParseString_117
    969                              {
    970                                Status = RoadBrd_GridEye_ReadValues( &GridMeasure );
   \   00000972   0xA85B             ADD      R0,SP,#+364
   \   00000974   0x.... 0x....      BL       RoadBrd_GridEye_ReadValues
   \   00000978   0x0006             MOVS     R6,R0
    971                                if (Status == HAL_OK)
   \   0000097A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000097C   0x2E00             CMP      R6,#+0
   \   0000097E   0xD117             BNE.N    ??RoadBrd_ParseString_118
    972                                  Status = RoadBrd_GridEye_ReadValues_Scaled( &GridMeasureScaled );
   \   00000980   0xA8D7             ADD      R0,SP,#+860
   \   00000982   0x.... 0x....      BL       RoadBrd_GridEye_ReadValues_Scaled
   \   00000986   0x0006             MOVS     R6,R0
   \   00000988   0xE012             B.N      ??RoadBrd_ParseString_118
    973                              }
    974                              else if ( Get_DriverStates( COOLEYE_MNTR_TASK ))
   \                     ??RoadBrd_ParseString_117: (+1)
   \   0000098A   0x2006             MOVS     R0,#+6
   \   0000098C   0x.... 0x....      BL       Get_DriverStates
   \   00000990   0x2800             CMP      R0,#+0
   \   00000992   0xD00B             BEQ.N    ??RoadBrd_ParseString_119
    975                              {
    976                                Status = RoadBrd_CoolEye_ReadValues( &GridMeasure );
   \   00000994   0xA85B             ADD      R0,SP,#+364
   \   00000996   0x.... 0x....      BL       RoadBrd_CoolEye_ReadValues
   \   0000099A   0x0006             MOVS     R6,R0
    977                                if (Status == HAL_OK)
   \   0000099C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000099E   0x2E00             CMP      R6,#+0
   \   000009A0   0xD106             BNE.N    ??RoadBrd_ParseString_118
    978                                  Status = RoadBrd_CoolEye_ReadValues_Scaled( &GridMeasureScaled );
   \   000009A2   0xA8D7             ADD      R0,SP,#+860
   \   000009A4   0x.... 0x....      BL       RoadBrd_CoolEye_ReadValues_Scaled
   \   000009A8   0x0006             MOVS     R6,R0
   \   000009AA   0xE001             B.N      ??RoadBrd_ParseString_118
    979                              }
    980                              else
    981                                Status = HAL_ERROR;
   \                     ??RoadBrd_ParseString_119: (+1)
   \   000009AC   0x2001             MOVS     R0,#+1
   \   000009AE   0x0006             MOVS     R6,R0
    982          
    983                              // Is this a BLE Operation?
    984                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_118: (+1)
   \   000009B0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000009B2   0x2D00             CMP      R5,#+0
   \   000009B4   0xD00A             BEQ.N    ??RoadBrd_ParseString_120
    985                              {
    986                                // Yes...Build and Send BLE Response NOW.
    987                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000009B6   0xF8DF 0x1808      LDR.W    R1,??RoadBrd_ParseString_51+0x4
   \   000009BA   0xA80A             ADD      R0,SP,#+40
   \   000009BC   0x.... 0x....      BL       strcpy
    988                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000009C0   0xA80A             ADD      R0,SP,#+40
   \   000009C2   0x.... 0x....      BL       strlen
   \   000009C6   0xA90A             ADD      R1,SP,#+40
   \   000009C8   0x.... 0x....      BL       BGM111_Transmit
    989                              }
    990          
    991                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_120: (+1)
   \   000009CC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000009CE   0x2E00             CMP      R6,#+0
   \   000009D0   0xF040 0x80FE      BNE.W    ??RoadBrd_ParseString_121
    992                              {
    993                                // Send string to UART..
    994                                strcpy( (char *)tempBffr2, "Voltage Monitor/Shunt Voltage...\r\n");
   \   000009D4   0xF8DF 0x1B28      LDR.W    R1,??RoadBrd_ParseString_89+0x4
   \   000009D8   0xA80A             ADD      R0,SP,#+40
   \   000009DA   0x.... 0x....      BL       strcpy
    995          #ifdef NUCLEO
    996                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    997          #else
    998                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000009DE   0xA90A             ADD      R1,SP,#+40
   \   000009E0   0x2000             MOVS     R0,#+0
   \   000009E2   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000009E6   0x0006             MOVS     R6,R0
    999          #endif
   1000                                if (Status != HAL_OK)
   \   000009E8   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000009EA   0x2E00             CMP      R6,#+0
   \   000009EC   0xD003             BEQ.N    ??RoadBrd_ParseString_122
   1001                                  return Status;
   \   000009EE   0x0030             MOVS     R0,R6
   \   000009F0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000009F2   0xF003 0xBFA6      B.W      ??RoadBrd_ParseString_4
   1002                                // NOW, Build Data String..
   1003                                for (x=0; x<9; x++)
   \                     ??RoadBrd_ParseString_122: (+1)
   \   000009F6   0x2000             MOVS     R0,#+0
   \   000009F8   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_123: (+1)
   \   000009FA   0x2F09             CMP      R7,#+9
   \   000009FC   0xF280 0x80D5      BGE.W    ??RoadBrd_ParseString_124
   1004                                {
   1005                                  // Build String
   1006                                  switch(x)
   \   00000A00   0x2F00             CMP      R7,#+0
   \   00000A02   0xD00F             BEQ.N    ??RoadBrd_ParseString_125
   \   00000A04   0x2F02             CMP      R7,#+2
   \   00000A06   0xD035             BEQ.N    ??RoadBrd_ParseString_126
   \   00000A08   0xD320             BCC.N    ??RoadBrd_ParseString_127
   \   00000A0A   0x2F04             CMP      R7,#+4
   \   00000A0C   0xD05A             BEQ.N    ??RoadBrd_ParseString_128
   \   00000A0E   0xD345             BCC.N    ??RoadBrd_ParseString_129
   \   00000A10   0x2F06             CMP      R7,#+6
   \   00000A12   0xF000 0x807F      BEQ.W    ??RoadBrd_ParseString_130
   \   00000A16   0xD369             BCC.N    ??RoadBrd_ParseString_131
   \   00000A18   0x2F08             CMP      R7,#+8
   \   00000A1A   0xF000 0x80A4      BEQ.W    ??RoadBrd_ParseString_132
   \   00000A1E   0xF0C0 0x808D      BCC.W    ??RoadBrd_ParseString_133
   \   00000A22   0xE0B4             B.N      ??RoadBrd_ParseString_134
   1007                                  {
   1008                                  case 0: //Thermistor Values
   1009                                    sprintf( (char *)tempBffr2, "     Thermistor DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.Thermistor.Raw,
   1010                                            GridMeasure.Thermistor.TempC,GridMeasureScaled.Thermistor.TempC,
   1011                                            GridMeasure.Thermistor.TempF,GridMeasureScaled.Thermistor.TempF,
   1012                                            GridMeasure.Thermistor.RawC );
   \                     ??RoadBrd_ParseString_125: (+1)
   \   00000A24   0xF8BD 0x0182      LDRH     R0,[SP, #+386]
   \   00000A28   0x9003             STR      R0,[SP, #+12]
   \   00000A2A   0xA8D8             ADD      R0,SP,#+864
   \   00000A2C   0x1CC0             ADDS     R0,R0,#+3
   \   00000A2E   0x9002             STR      R0,[SP, #+8]
   \   00000A30   0xA85C             ADD      R0,SP,#+368
   \   00000A32   0x1CC0             ADDS     R0,R0,#+3
   \   00000A34   0x9001             STR      R0,[SP, #+4]
   \   00000A36   0xA8D7             ADD      R0,SP,#+860
   \   00000A38   0x9000             STR      R0,[SP, #+0]
   \   00000A3A   0xAB5B             ADD      R3,SP,#+364
   \   00000A3C   0xF50D 0x72BD      ADD      R2,SP,#+378
   \   00000A40   0xF8DF 0x1B24      LDR.W    R1,??RoadBrd_ParseString_104
   \   00000A44   0xA80A             ADD      R0,SP,#+40
   \   00000A46   0x.... 0x....      BL       sprintf
   1013                                    //                        sprintf( (char *)tempBffr2, "     Thermistor DATA: %s   %s   %s   %d\r\n", GridMeasure.Thermistor.Raw,
   1014                                    //                                                                                               GridMeasure.Thermistor.TempC,
   1015                                    //                                                                                               GridMeasure.Thermistor.TempF,
   1016                                    //                                                                                               GridMeasure.Thermistor.RawC );
   1017                                    break;
   \   00000A4A   0xE0A0             B.N      ??RoadBrd_ParseString_134
   1018                                  case 1: //GridEye1 Values
   1019                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye1.Raw,
   1020                                            GridMeasure.GridEye1.TempC,GridMeasureScaled.GridEye1.TempC,
   1021                                            GridMeasure.GridEye1.TempF,GridMeasureScaled.GridEye1.TempF,
   1022                                            GridMeasure.GridEye1.RawC );
   \                     ??RoadBrd_ParseString_127: (+1)
   \   00000A4C   0xF8BD 0x019A      LDRH     R0,[SP, #+410]
   \   00000A50   0x9003             STR      R0,[SP, #+12]
   \   00000A52   0xA8DE             ADD      R0,SP,#+888
   \   00000A54   0x1CC0             ADDS     R0,R0,#+3
   \   00000A56   0x9002             STR      R0,[SP, #+8]
   \   00000A58   0xA862             ADD      R0,SP,#+392
   \   00000A5A   0x1CC0             ADDS     R0,R0,#+3
   \   00000A5C   0x9001             STR      R0,[SP, #+4]
   \   00000A5E   0xA8DD             ADD      R0,SP,#+884
   \   00000A60   0x9000             STR      R0,[SP, #+0]
   \   00000A62   0xAB61             ADD      R3,SP,#+388
   \   00000A64   0xF50D 0x72C9      ADD      R2,SP,#+402
   \   00000A68   0xF8DF 0x1B00      LDR.W    R1,??RoadBrd_ParseString_104+0x4
   \   00000A6C   0xA80A             ADD      R0,SP,#+40
   \   00000A6E   0x.... 0x....      BL       sprintf
   1023                                    //                        sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye1.Raw,
   1024                                    //                                                                                               GridMeasure.GridEye1.TempC,
   1025                                    //                                                                                               GridMeasure.GridEye1.TempF,
   1026                                    //                                                                                               GridMeasure.GridEye1.RawC );
   1027                                    break;
   \   00000A72   0xE08C             B.N      ??RoadBrd_ParseString_134
   1028                                  case 2: //GridEye2 Values
   1029                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye2.Raw,
   1030                                            GridMeasure.GridEye2.TempC,GridMeasureScaled.GridEye2.TempC,
   1031                                            GridMeasure.GridEye2.TempF,GridMeasureScaled.GridEye2.TempF,
   1032                                            GridMeasure.GridEye2.RawC );
   \                     ??RoadBrd_ParseString_126: (+1)
   \   00000A74   0xF8BD 0x01B2      LDRH     R0,[SP, #+434]
   \   00000A78   0x9003             STR      R0,[SP, #+12]
   \   00000A7A   0xA8E4             ADD      R0,SP,#+912
   \   00000A7C   0x1CC0             ADDS     R0,R0,#+3
   \   00000A7E   0x9002             STR      R0,[SP, #+8]
   \   00000A80   0xA868             ADD      R0,SP,#+416
   \   00000A82   0x1CC0             ADDS     R0,R0,#+3
   \   00000A84   0x9001             STR      R0,[SP, #+4]
   \   00000A86   0xA8E3             ADD      R0,SP,#+908
   \   00000A88   0x9000             STR      R0,[SP, #+0]
   \   00000A8A   0xAB67             ADD      R3,SP,#+412
   \   00000A8C   0xF50D 0x72D5      ADD      R2,SP,#+426
   \   00000A90   0xF8DF 0x1AD8      LDR.W    R1,??RoadBrd_ParseString_104+0x4
   \   00000A94   0xA80A             ADD      R0,SP,#+40
   \   00000A96   0x.... 0x....      BL       sprintf
   1033                                    //                        sprintf( (char *)tempBffr2, "     Grid 34 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye2.Raw,
   1034                                    //                                                                                               GridMeasure.GridEye2.TempC,
   1035                                    //                                                                                               GridMeasure.GridEye2.TempF,
   1036                                    //                                                                                               GridMeasure.GridEye2.RawC );
   1037                                    break;
   \   00000A9A   0xE078             B.N      ??RoadBrd_ParseString_134
   1038                                  case 3: //GridEye3 Values
   1039                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye3.Raw,
   1040                                            GridMeasure.GridEye3.TempC,GridMeasureScaled.GridEye3.TempC,
   1041                                            GridMeasure.GridEye3.TempF,GridMeasureScaled.GridEye3.TempF,
   1042                                            GridMeasure.GridEye3.RawC );
   \                     ??RoadBrd_ParseString_129: (+1)
   \   00000A9C   0xF8BD 0x01CA      LDRH     R0,[SP, #+458]
   \   00000AA0   0x9003             STR      R0,[SP, #+12]
   \   00000AA2   0xA8EA             ADD      R0,SP,#+936
   \   00000AA4   0x1CC0             ADDS     R0,R0,#+3
   \   00000AA6   0x9002             STR      R0,[SP, #+8]
   \   00000AA8   0xA86E             ADD      R0,SP,#+440
   \   00000AAA   0x1CC0             ADDS     R0,R0,#+3
   \   00000AAC   0x9001             STR      R0,[SP, #+4]
   \   00000AAE   0xA8E9             ADD      R0,SP,#+932
   \   00000AB0   0x9000             STR      R0,[SP, #+0]
   \   00000AB2   0xAB6D             ADD      R3,SP,#+436
   \   00000AB4   0xF50D 0x72E1      ADD      R2,SP,#+450
   \   00000AB8   0xF8DF 0x1AB0      LDR.W    R1,??RoadBrd_ParseString_104+0x4
   \   00000ABC   0xA80A             ADD      R0,SP,#+40
   \   00000ABE   0x.... 0x....      BL       sprintf
   1043                                    //                        sprintf( (char *)tempBffr2, "     Grid 35 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye3.Raw,
   1044                                    //                                                                                               GridMeasure.GridEye3.TempC,
   1045                                    //                                                                                               GridMeasure.GridEye3.TempF,
   1046                                    //                                                                                               GridMeasure.GridEye3.RawC );
   1047                                    break;
   \   00000AC2   0xE064             B.N      ??RoadBrd_ParseString_134
   1048                                  case 4: //GridEye4 Values
   1049                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye4.Raw,
   1050                                            GridMeasure.GridEye4.TempC,GridMeasureScaled.GridEye4.TempC,
   1051                                            GridMeasure.GridEye4.TempF,GridMeasureScaled.GridEye4.TempF,
   1052                                            GridMeasure.GridEye4.RawC );
   \                     ??RoadBrd_ParseString_128: (+1)
   \   00000AC4   0xF8BD 0x01E2      LDRH     R0,[SP, #+482]
   \   00000AC8   0x9003             STR      R0,[SP, #+12]
   \   00000ACA   0xA8F0             ADD      R0,SP,#+960
   \   00000ACC   0x1CC0             ADDS     R0,R0,#+3
   \   00000ACE   0x9002             STR      R0,[SP, #+8]
   \   00000AD0   0xA874             ADD      R0,SP,#+464
   \   00000AD2   0x1CC0             ADDS     R0,R0,#+3
   \   00000AD4   0x9001             STR      R0,[SP, #+4]
   \   00000AD6   0xA8EF             ADD      R0,SP,#+956
   \   00000AD8   0x9000             STR      R0,[SP, #+0]
   \   00000ADA   0xAB73             ADD      R3,SP,#+460
   \   00000ADC   0xF50D 0x72ED      ADD      R2,SP,#+474
   \   00000AE0   0xF8DF 0x1A88      LDR.W    R1,??RoadBrd_ParseString_104+0x4
   \   00000AE4   0xA80A             ADD      R0,SP,#+40
   \   00000AE6   0x.... 0x....      BL       sprintf
   1053                                    //                        sprintf( (char *)tempBffr2, "     Grid 36 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye4.Raw,
   1054                                    //                                                                                               GridMeasure.GridEye4.TempC,
   1055                                    //                                                                                               GridMeasure.GridEye4.TempF,
   1056                                    //                                                                                               GridMeasure.GridEye4.RawC );
   1057                                    break;
   \   00000AEA   0xE050             B.N      ??RoadBrd_ParseString_134
   1058                                  case 5: //GridEye5 Values
   1059                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye5.Raw,
   1060                                            GridMeasure.GridEye5.TempC,GridMeasureScaled.GridEye5.TempC,
   1061                                            GridMeasure.GridEye5.TempF,GridMeasureScaled.GridEye5.TempF,
   1062                                            GridMeasure.GridEye5.RawC );
   \                     ??RoadBrd_ParseString_131: (+1)
   \   00000AEC   0xF8BD 0x01FA      LDRH     R0,[SP, #+506]
   \   00000AF0   0x9003             STR      R0,[SP, #+12]
   \   00000AF2   0xA8F6             ADD      R0,SP,#+984
   \   00000AF4   0x1CC0             ADDS     R0,R0,#+3
   \   00000AF6   0x9002             STR      R0,[SP, #+8]
   \   00000AF8   0xA87A             ADD      R0,SP,#+488
   \   00000AFA   0x1CC0             ADDS     R0,R0,#+3
   \   00000AFC   0x9001             STR      R0,[SP, #+4]
   \   00000AFE   0xA8F5             ADD      R0,SP,#+980
   \   00000B00   0x9000             STR      R0,[SP, #+0]
   \   00000B02   0xAB79             ADD      R3,SP,#+484
   \   00000B04   0xF50D 0x72F9      ADD      R2,SP,#+498
   \   00000B08   0xF8DF 0x1A60      LDR.W    R1,??RoadBrd_ParseString_104+0x4
   \   00000B0C   0xA80A             ADD      R0,SP,#+40
   \   00000B0E   0x.... 0x....      BL       sprintf
   1063                                    //                        sprintf( (char *)tempBffr2, "     Grid 37 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye5.Raw,
   1064                                    //                                                                                               GridMeasure.GridEye5.TempC,
   1065                                    //                                                                                               GridMeasure.GridEye5.TempF,
   1066                                    //                                                                                               GridMeasure.GridEye5.RawC );
   1067                                    break;
   \   00000B12   0xE03C             B.N      ??RoadBrd_ParseString_134
   1068                                  case 6: //GridEye6 Values
   1069                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye6.Raw,
   1070                                            GridMeasure.GridEye6.TempC,GridMeasureScaled.GridEye6.TempC,
   1071                                            GridMeasure.GridEye6.TempF,GridMeasureScaled.GridEye6.TempF,
   1072                                            GridMeasure.GridEye6.RawC );
   \                     ??RoadBrd_ParseString_130: (+1)
   \   00000B14   0xF8BD 0x0212      LDRH     R0,[SP, #+530]
   \   00000B18   0x9003             STR      R0,[SP, #+12]
   \   00000B1A   0xA8FC             ADD      R0,SP,#+1008
   \   00000B1C   0x1CC0             ADDS     R0,R0,#+3
   \   00000B1E   0x9002             STR      R0,[SP, #+8]
   \   00000B20   0xA880             ADD      R0,SP,#+512
   \   00000B22   0x1CC0             ADDS     R0,R0,#+3
   \   00000B24   0x9001             STR      R0,[SP, #+4]
   \   00000B26   0xA8FB             ADD      R0,SP,#+1004
   \   00000B28   0x9000             STR      R0,[SP, #+0]
   \   00000B2A   0xAB7F             ADD      R3,SP,#+508
   \   00000B2C   0xAA82             ADD      R2,SP,#+520
   \   00000B2E   0x1C92             ADDS     R2,R2,#+2
   \   00000B30   0xF8DF 0x1A38      LDR.W    R1,??RoadBrd_ParseString_104+0x4
   \   00000B34   0xA80A             ADD      R0,SP,#+40
   \   00000B36   0x.... 0x....      BL       sprintf
   1073                                    //                        sprintf( (char *)tempBffr2, "     Grid 38 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye6.Raw,
   1074                                    //                                                                                               GridMeasure.GridEye6.TempC,
   1075                                    //                                                                                               GridMeasure.GridEye6.TempF,
   1076                                    //                                                                                               GridMeasure.GridEye6.RawC );
   1077                                    break;
   \   00000B3A   0xE028             B.N      ??RoadBrd_ParseString_134
   1078                                  case 7: //GridEye7 Values
   1079                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye7.Raw,
   1080                                            GridMeasure.GridEye7.TempC,GridMeasureScaled.GridEye7.TempC,
   1081                                            GridMeasure.GridEye7.TempF,GridMeasureScaled.GridEye7.TempF,
   1082                                            GridMeasure.GridEye7.RawC );
   \                     ??RoadBrd_ParseString_133: (+1)
   \   00000B3C   0xF8BD 0x022A      LDRH     R0,[SP, #+554]
   \   00000B40   0x9003             STR      R0,[SP, #+12]
   \   00000B42   0xA8FF             ADD      R0,SP,#+1020
   \   00000B44   0x300F             ADDS     R0,R0,#+15
   \   00000B46   0x9002             STR      R0,[SP, #+8]
   \   00000B48   0xA886             ADD      R0,SP,#+536
   \   00000B4A   0x1CC0             ADDS     R0,R0,#+3
   \   00000B4C   0x9001             STR      R0,[SP, #+4]
   \   00000B4E   0xA8FF             ADD      R0,SP,#+1020
   \   00000B50   0x3008             ADDS     R0,R0,#+8
   \   00000B52   0x9000             STR      R0,[SP, #+0]
   \   00000B54   0xAB85             ADD      R3,SP,#+532
   \   00000B56   0xAA88             ADD      R2,SP,#+544
   \   00000B58   0x1C92             ADDS     R2,R2,#+2
   \   00000B5A   0xF8DF 0x1A10      LDR.W    R1,??RoadBrd_ParseString_104+0x4
   \   00000B5E   0xA80A             ADD      R0,SP,#+40
   \   00000B60   0x.... 0x....      BL       sprintf
   1083                                    //                        sprintf( (char *)tempBffr2, "     Grid 39 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye7.Raw,
   1084                                    //                                                                                               GridMeasure.GridEye7.TempC,
   1085                                    //                                                                                               GridMeasure.GridEye7.TempF,
   1086                                    //                                                                                               GridMeasure.GridEye7.RawC );
   1087                                    break;
   \   00000B64   0xE013             B.N      ??RoadBrd_ParseString_134
   1088                                  case 8: //GridEye8 Values
   1089                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye8.Raw,
   1090                                            GridMeasure.GridEye8.TempC,GridMeasureScaled.GridEye8.TempC,
   1091                                            GridMeasure.GridEye8.TempF,GridMeasureScaled.GridEye8.TempF,
   1092                                            GridMeasure.GridEye8.RawC );
   \                     ??RoadBrd_ParseString_132: (+1)
   \   00000B66   0xF8BD 0x0242      LDRH     R0,[SP, #+578]
   \   00000B6A   0x9003             STR      R0,[SP, #+12]
   \   00000B6C   0xA8FF             ADD      R0,SP,#+1020
   \   00000B6E   0x3027             ADDS     R0,R0,#+39
   \   00000B70   0x9002             STR      R0,[SP, #+8]
   \   00000B72   0xA88C             ADD      R0,SP,#+560
   \   00000B74   0x1CC0             ADDS     R0,R0,#+3
   \   00000B76   0x9001             STR      R0,[SP, #+4]
   \   00000B78   0xA8FF             ADD      R0,SP,#+1020
   \   00000B7A   0x3020             ADDS     R0,R0,#+32
   \   00000B7C   0x9000             STR      R0,[SP, #+0]
   \   00000B7E   0xAB8B             ADD      R3,SP,#+556
   \   00000B80   0xAA8E             ADD      R2,SP,#+568
   \   00000B82   0x1C92             ADDS     R2,R2,#+2
   \   00000B84   0xF8DF 0x19E4      LDR.W    R1,??RoadBrd_ParseString_104+0x4
   \   00000B88   0xA80A             ADD      R0,SP,#+40
   \   00000B8A   0x.... 0x....      BL       sprintf
   1093                                    //                        sprintf( (char *)tempBffr2, "     Grid 40 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye8.Raw,
   1094                                    //                                                                                               GridMeasure.GridEye8.TempC,
   1095                                    //                                                                                               GridMeasure.GridEye8.TempF,
   1096                                    //                                                                                               GridMeasure.GridEye8.RawC );
   1097                                    break;
   1098                                  } // EndSwitch(x)
   1099                                  // Now Print String.
   1100           #ifdef NUCLEO
   1101                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1102          #else
   1103                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \                     ??RoadBrd_ParseString_134: (+1)
   \   00000B8E   0xA90A             ADD      R1,SP,#+40
   \   00000B90   0x2000             MOVS     R0,#+0
   \   00000B92   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000B96   0x0006             MOVS     R6,R0
   1104          #endif
   1105                                  if (Status != HAL_OK)
   \   00000B98   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000B9A   0x2E00             CMP      R6,#+0
   \   00000B9C   0xD003             BEQ.N    ??RoadBrd_ParseString_135
   1106                                    return Status;
   \   00000B9E   0x0030             MOVS     R0,R6
   \   00000BA0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000BA2   0xF003 0xBECE      B.W      ??RoadBrd_ParseString_4
   1107                               } // EndFor(x=0; x<9; x++)
   \                     ??RoadBrd_ParseString_135: (+1)
   \   00000BA6   0x1C7F             ADDS     R7,R7,#+1
   \   00000BA8   0xE727             B.N      ??RoadBrd_ParseString_123
   1108                                sprintf( (char *)tempBffr2, "     SHNT VLTG DATA: " );
   \                     ??RoadBrd_ParseString_124: (+1)
   \   00000BAA   0xF8DF 0x1B30      LDR.W    R1,??RoadBrd_ParseString_107
   \   00000BAE   0xA80A             ADD      R0,SP,#+40
   \   00000BB0   0x.... 0x....      BL       sprintf
   1109                                strcat( (char *)tempBffr2, (char *)VMeasure.Raw );
   \   00000BB4   0xA944             ADD      R1,SP,#+272
   \   00000BB6   0xA80A             ADD      R0,SP,#+40
   \   00000BB8   0x.... 0x....      BL       strcat
   1110                                strcat( (char *)tempBffr2, "\r\n" );
   \   00000BBC   0xA1D2             ADR.N    R1,??RoadBrd_ParseString_26+0x4  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000BBE   0xA80A             ADD      R0,SP,#+40
   \   00000BC0   0x.... 0x....      BL       strcat
   1111                              } //Endif(Status == HAL_OK)
   1112                              else
   1113                                break;
   1114                              sprintf( (char *)tempBffr2, "     COMPLETE.\r\n" );
   \   00000BC4   0xF8DF 0x1B60      LDR.W    R1,??RoadBrd_ParseString_110
   \   00000BC8   0xA80A             ADD      R0,SP,#+40
   \   00000BCA   0x.... 0x....      BL       sprintf
   1115                              break;
   \   00000BCE   0xE019             B.N      ??RoadBrd_ParseString_111
   \                     ??RoadBrd_ParseString_121: (+1)
   \   00000BD0   0xE018             B.N      ??RoadBrd_ParseString_111
   1116          //------------------ B1 Command...Reset Cool Eye/Grid Eye Sensor..... 
   1117                            case '1':
   1118                              // Reset Cool Eye/Grid Eye Sensor.
   1119                              Status = RoadBrd_GridEyeReset();
   \                     ??RoadBrd_ParseString_113: (+1)
   \   00000BD2   0x.... 0x....      BL       RoadBrd_GridEyeReset
   \   00000BD6   0x0006             MOVS     R6,R0
   1120                              // Is this a BLE Operation?
   1121                              if ( BLE_Flag )
   \   00000BD8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000BDA   0x2D00             CMP      R5,#+0
   \   00000BDC   0xD00A             BEQ.N    ??RoadBrd_ParseString_136
   1122                              {
   1123                                // Yes...Build and Send BLE Response NOW.
   1124                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00000BDE   0xF8DF 0x15E0      LDR.W    R1,??RoadBrd_ParseString_51+0x4
   \   00000BE2   0xA80A             ADD      R0,SP,#+40
   \   00000BE4   0x.... 0x....      BL       strcpy
   1125                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000BE8   0xA80A             ADD      R0,SP,#+40
   \   00000BEA   0x.... 0x....      BL       strlen
   \   00000BEE   0xA90A             ADD      R1,SP,#+40
   \   00000BF0   0x.... 0x....      BL       BGM111_Transmit
   1126                              }
   1127          
   1128                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_136: (+1)
   \   00000BF4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000BF6   0x2E00             CMP      R6,#+0
   \   00000BF8   0xD104             BNE.N    ??RoadBrd_ParseString_137
   1129                              {
   1130                                strcpy( (char *)tempBffr2, "Cool Eye/Grid Eye Sensor: Reset Complete.\r\n");;
   \   00000BFA   0xF8DF 0x1DBC      LDR.W    R1,??RoadBrd_ParseString_138
   \   00000BFE   0xA80A             ADD      R0,SP,#+40
   \   00000C00   0x.... 0x....      BL       strcpy
   1131                              }
   1132                              break;
   1133                          } //EndSwitch
   1134                        } //EndElse (Size == 1)
   1135                        break;
   \                     ??RoadBrd_ParseString_137: (+1)
   \                     ??RoadBrd_ParseString_111: (+1)
   \   00000C04   0xF003 0xBE23      B.W      ??RoadBrd_ParseString_27
   1136          //**************************************************************************************************
   1137                      case 'C':
   1138                        // Read Voltage. 
   1139          //++++++++++++++++++++++++++++++++++++++++++  Voltage Monitor Commands.
   1140                        if (Size == 1)
   \                     ??RoadBrd_ParseString_14: (+1)
   \   00000C08   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000C0C   0xF1B8 0x0F01      CMP      R8,#+1
   \   00000C10   0xD152             BNE.N    ??RoadBrd_ParseString_139
   1141                        {
   1142          //------------------ C Command       
   1143                          // Read Bus Voltage and return as 2 Byte Field.
   1144                          Status = RoadBrd_VMonitor_RdVoltage( &VMeasure );
   \   00000C12   0xA842             ADD      R0,SP,#+264
   \   00000C14   0x.... 0x....      BL       RoadBrd_VMonitor_RdVoltage
   \   00000C18   0x0006             MOVS     R6,R0
   1145                          if (Status == HAL_OK)
   \   00000C1A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000C1C   0x2E00             CMP      R6,#+0
   \   00000C1E   0xD103             BNE.N    ??RoadBrd_ParseString_140
   1146                            Status = RoadBrd_VMonitor_RdVoltage_Scaled( &VMeasureScaled );
   \   00000C20   0xA84E             ADD      R0,SP,#+312
   \   00000C22   0x.... 0x....      BL       RoadBrd_VMonitor_RdVoltage_Scaled
   \   00000C26   0x0006             MOVS     R6,R0
   1147                          if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_140: (+1)
   \   00000C28   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000C2A   0x2E00             CMP      R6,#+0
   \   00000C2C   0xD126             BNE.N    ??RoadBrd_ParseString_141
   1148                          {
   1149                            // Send string to UART..
   1150                            strcpy( (char *)tempBffr2, "Voltage Monitor/Read Bus Voltage...\r\n");
   \   00000C2E   0xF8DF 0x1DEC      LDR.W    R1,??RoadBrd_ParseString_142
   \   00000C32   0xA80A             ADD      R0,SP,#+40
   \   00000C34   0x.... 0x....      BL       strcpy
   1151          #ifdef NUCLEO
   1152                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1153          #else
   1154                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000C38   0xA90A             ADD      R1,SP,#+40
   \   00000C3A   0x2000             MOVS     R0,#+0
   \   00000C3C   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000C40   0x0006             MOVS     R6,R0
   1155          #endif
   1156                            if (Status != HAL_OK)
   \   00000C42   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000C44   0x2E00             CMP      R6,#+0
   \   00000C46   0xD003             BEQ.N    ??RoadBrd_ParseString_143
   1157                            return Status;
   \   00000C48   0x0030             MOVS     R0,R6
   \   00000C4A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000C4C   0xF003 0xBE79      B.W      ??RoadBrd_ParseString_4
   1158                            // NOW, Build Data String..
   1159                            sprintf( (char *)tempBffr2, "     BUS VOLTAGE DATA: " );
   \                     ??RoadBrd_ParseString_143: (+1)
   \   00000C50   0xF8DF 0x1DCC      LDR.W    R1,??RoadBrd_ParseString_142+0x4
   \   00000C54   0xA80A             ADD      R0,SP,#+40
   \   00000C56   0x.... 0x....      BL       sprintf
   1160                            strcat( (char *)tempBffr2, (char *)VMeasure.Raw );
   \   00000C5A   0xA944             ADD      R1,SP,#+272
   \   00000C5C   0xA80A             ADD      R0,SP,#+40
   \   00000C5E   0x.... 0x....      BL       strcat
   1161                            strcat( (char *)tempBffr2, "\r\n" );
   \   00000C62   0xA1A9             ADR.N    R1,??RoadBrd_ParseString_26+0x4  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000C64   0xA80A             ADD      R0,SP,#+40
   \   00000C66   0x.... 0x....      BL       strcat
   1162                          }
   1163                          else
   1164                            break;
   1165          #ifdef NUCLEO
   1166                          Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1167          #else
   1168                          Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000C6A   0xA90A             ADD      R1,SP,#+40
   \   00000C6C   0x2000             MOVS     R0,#+0
   \   00000C6E   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000C72   0x0006             MOVS     R6,R0
   1169          #endif
   1170                          if (Status != HAL_OK)
   \   00000C74   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000C76   0x2E00             CMP      R6,#+0
   \   00000C78   0xD102             BNE.N    ??RoadBrd_ParseString_144
   \   00000C7A   0xE005             B.N      ??RoadBrd_ParseString_145
   \                     ??RoadBrd_ParseString_141: (+1)
   \   00000C7C   0xF003 0xBDE7      B.W      ??RoadBrd_ParseString_27
   1171                            return Status;
   \                     ??RoadBrd_ParseString_144: (+1)
   \   00000C80   0x0030             MOVS     R0,R6
   \   00000C82   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000C84   0xF003 0xBE5D      B.W      ??RoadBrd_ParseString_4
   1172                          // Is this a BLE Operation?
   1173                          if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_145: (+1)
   \   00000C88   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000C8A   0x2D00             CMP      R5,#+0
   \   00000C8C   0xD00C             BEQ.N    ??RoadBrd_ParseString_146
   1174                          {
   1175                            // Yes...Build and Send BLE Response NOW.
   1176                            sprintf( (char *)tempBffr2, "<STATUS>BUS_VLTG:%s/%s</STATUS>", (char *)VMeasure.Voltage, (char *)VMeasureScaled.Voltage );
   \   00000C8E   0xAB4E             ADD      R3,SP,#+312
   \   00000C90   0xAA42             ADD      R2,SP,#+264
   \   00000C92   0xF8DF 0x1DF8      LDR.W    R1,??RoadBrd_ParseString_147
   \   00000C96   0xA80A             ADD      R0,SP,#+40
   \   00000C98   0x.... 0x....      BL       sprintf
   1177                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000C9C   0xA80A             ADD      R0,SP,#+40
   \   00000C9E   0x.... 0x....      BL       strlen
   \   00000CA2   0xA90A             ADD      R1,SP,#+40
   \   00000CA4   0x.... 0x....      BL       BGM111_Transmit
   1178                          }
   1179                          // Now calculate Bus Voltage.
   1180                          sprintf( (char *)tempBffr2, "     Bus Voltage: %s/%s\r\n", (char *)VMeasure.Voltage, (char *)VMeasureScaled.Voltage );
   \                     ??RoadBrd_ParseString_146: (+1)
   \   00000CA8   0xAB4E             ADD      R3,SP,#+312
   \   00000CAA   0xAA42             ADD      R2,SP,#+264
   \   00000CAC   0xF8DF 0x1DE0      LDR.W    R1,??RoadBrd_ParseString_147+0x4
   \   00000CB0   0xA80A             ADD      R0,SP,#+40
   \   00000CB2   0x.... 0x....      BL       sprintf
   \   00000CB6   0xE19C             B.N      ??RoadBrd_ParseString_148
   1181                        }
   1182                        else
   1183                        {
   1184                          switch( tempBffr[1] )
   \                     ??RoadBrd_ParseString_139: (+1)
   \   00000CB8   0x7860             LDRB     R0,[R4, #+1]
   \   00000CBA   0x2830             CMP      R0,#+48
   \   00000CBC   0xD024             BEQ.N    ??RoadBrd_ParseString_149
   \   00000CBE   0x2831             CMP      R0,#+49
   \   00000CC0   0xD074             BEQ.N    ??RoadBrd_ParseString_150
   \   00000CC2   0x2832             CMP      R0,#+50
   \   00000CC4   0xF000 0x80C9      BEQ.W    ??RoadBrd_ParseString_151
   \   00000CC8   0x2833             CMP      R0,#+51
   \   00000CCA   0xF000 0x8129      BEQ.W    ??RoadBrd_ParseString_152
   \   00000CCE   0x2849             CMP      R0,#+73
   \   00000CD0   0xF040 0x817C      BNE.W    ??RoadBrd_ParseString_153
   1185                          {
   1186          //------------------ CI Command       
   1187                            case 'I':
   1188                              // Initialize and load Calibration Register.
   1189                              // Read Calibration Value first.
   1190                              Status = RoadBrd_Init_VMonitor();
   \                     ??RoadBrd_ParseString_154: (+1)
   \   00000CD4   0x.... 0x....      BL       RoadBrd_Init_VMonitor
   \   00000CD8   0x0006             MOVS     R6,R0
   1191                              // Is this a BLE Operation?
   1192                              if ( BLE_Flag )
   \   00000CDA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000CDC   0x2D00             CMP      R5,#+0
   \   00000CDE   0xD00A             BEQ.N    ??RoadBrd_ParseString_155
   1193                              {
   1194                                // Yes...Build and Send BLE Response NOW.
   1195                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00000CE0   0xF8DF 0x14DC      LDR.W    R1,??RoadBrd_ParseString_51+0x4
   \   00000CE4   0xA80A             ADD      R0,SP,#+40
   \   00000CE6   0x.... 0x....      BL       strcpy
   1196                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000CEA   0xA80A             ADD      R0,SP,#+40
   \   00000CEC   0x.... 0x....      BL       strlen
   \   00000CF0   0xA90A             ADD      R1,SP,#+40
   \   00000CF2   0x.... 0x....      BL       BGM111_Transmit
   1197                              }
   1198                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_155: (+1)
   \   00000CF6   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000CF8   0x2E00             CMP      R6,#+0
   \   00000CFA   0xD104             BNE.N    ??RoadBrd_ParseString_156
   1199                              {
   1200                                strcpy( (char *)tempBffr2, "Voltage Monitor: Initialization Complete.\r\n");;
   \   00000CFC   0xF8DF 0x1DC8      LDR.W    R1,??RoadBrd_ParseString_157
   \   00000D00   0xA80A             ADD      R0,SP,#+40
   \   00000D02   0x.... 0x....      BL       strcpy
   1201                              }
   1202                              break;
   \                     ??RoadBrd_ParseString_156: (+1)
   \   00000D06   0xE174             B.N      ??RoadBrd_ParseString_148
   1203          //------------------ C0 Command...Read Shunt Voltage and return results.....
   1204                            case '0':
   1205                              // Read Shunt Voltage and return results.....
   1206                              Status = RoadBrd_VMonitor_RdShntVltg( &VMeasure );
   \                     ??RoadBrd_ParseString_149: (+1)
   \   00000D08   0xA842             ADD      R0,SP,#+264
   \   00000D0A   0x.... 0x....      BL       RoadBrd_VMonitor_RdShntVltg
   \   00000D0E   0x0006             MOVS     R6,R0
   1207                              if (Status == HAL_OK)
   \   00000D10   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000D12   0x2E00             CMP      R6,#+0
   \   00000D14   0xD103             BNE.N    ??RoadBrd_ParseString_158
   1208                                Status = RoadBrd_VMonitor_RdShntVltg_Scaled( &VMeasureScaled );
   \   00000D16   0xA84E             ADD      R0,SP,#+312
   \   00000D18   0x.... 0x....      BL       RoadBrd_VMonitor_RdShntVltg_Scaled
   \   00000D1C   0x0006             MOVS     R6,R0
   1209                              // Is this a BLE Operation?
   1210                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_158: (+1)
   \   00000D1E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000D20   0x2E00             CMP      R6,#+0
   \   00000D22   0xD126             BNE.N    ??RoadBrd_ParseString_159
   1211                              {
   1212                                // Send string to UART..
   1213                                strcpy( (char *)tempBffr2, "Voltage Monitor/Shunt Voltage...\r\n");
   \   00000D24   0xF8DF 0x17D8      LDR.W    R1,??RoadBrd_ParseString_89+0x4
   \   00000D28   0xA80A             ADD      R0,SP,#+40
   \   00000D2A   0x.... 0x....      BL       strcpy
   1214          #ifdef NUCLEO
   1215                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1216          #else
   1217                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000D2E   0xA90A             ADD      R1,SP,#+40
   \   00000D30   0x2000             MOVS     R0,#+0
   \   00000D32   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000D36   0x0006             MOVS     R6,R0
   1218          #endif
   1219                                if (Status != HAL_OK)
   \   00000D38   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000D3A   0x2E00             CMP      R6,#+0
   \   00000D3C   0xD003             BEQ.N    ??RoadBrd_ParseString_160
   1220                                  return Status;
   \   00000D3E   0x0030             MOVS     R0,R6
   \   00000D40   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000D42   0xF003 0xBDFE      B.W      ??RoadBrd_ParseString_4
   1221                                // NOW, Build Data String..
   1222                                sprintf( (char *)tempBffr2, "     SHNT VLTG DATA: " );
   \                     ??RoadBrd_ParseString_160: (+1)
   \   00000D46   0xF8DF 0x1994      LDR.W    R1,??RoadBrd_ParseString_107
   \   00000D4A   0xA80A             ADD      R0,SP,#+40
   \   00000D4C   0x.... 0x....      BL       sprintf
   1223                                strcat( (char *)tempBffr2, (char *)VMeasure.Raw );
   \   00000D50   0xA944             ADD      R1,SP,#+272
   \   00000D52   0xA80A             ADD      R0,SP,#+40
   \   00000D54   0x.... 0x....      BL       strcat
   1224                                strcat( (char *)tempBffr2, "\r\n" );
   \   00000D58   0xA16B             ADR.N    R1,??RoadBrd_ParseString_26+0x4  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000D5A   0xA80A             ADD      R0,SP,#+40
   \   00000D5C   0x.... 0x....      BL       strcat
   1225                              }
   1226                              else
   1227                                break;
   1228          #ifdef NUCLEO
   1229                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1230          #else
   1231                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000D60   0xA90A             ADD      R1,SP,#+40
   \   00000D62   0x2000             MOVS     R0,#+0
   \   00000D64   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000D68   0x0006             MOVS     R6,R0
   1232          #endif
   1233                              if (Status != HAL_OK)
   \   00000D6A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000D6C   0x2E00             CMP      R6,#+0
   \   00000D6E   0xD101             BNE.N    ??RoadBrd_ParseString_161
   \   00000D70   0xE004             B.N      ??RoadBrd_ParseString_162
   \                     ??RoadBrd_ParseString_159: (+1)
   \   00000D72   0xE13E             B.N      ??RoadBrd_ParseString_148
   1234                                return Status;
   \                     ??RoadBrd_ParseString_161: (+1)
   \   00000D74   0x0030             MOVS     R0,R6
   \   00000D76   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000D78   0xF003 0xBDE3      B.W      ??RoadBrd_ParseString_4
   1235                              // Now calculate Shunt Voltage.
   1236                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_162: (+1)
   \   00000D7C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000D7E   0x2D00             CMP      R5,#+0
   \   00000D80   0xD00C             BEQ.N    ??RoadBrd_ParseString_163
   1237                              {
   1238                                // Yes...Build and Send BLE Response NOW.
   1239                                sprintf( (char *)tempBffr2, "<STATUS>SHNT_VLTG:%s/%s</STATUS>", (char *)VMeasure.Voltage, (char *)VMeasureScaled.Voltage );
   \   00000D82   0xAB4E             ADD      R3,SP,#+312
   \   00000D84   0xAA42             ADD      R2,SP,#+264
   \   00000D86   0xF8DF 0x1E00      LDR.W    R1,??RoadBrd_ParseString_164
   \   00000D8A   0xA80A             ADD      R0,SP,#+40
   \   00000D8C   0x.... 0x....      BL       sprintf
   1240                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000D90   0xA80A             ADD      R0,SP,#+40
   \   00000D92   0x.... 0x....      BL       strlen
   \   00000D96   0xA90A             ADD      R1,SP,#+40
   \   00000D98   0x.... 0x....      BL       BGM111_Transmit
   1241                              }
   1242                              sprintf( (char *)tempBffr2, "     Shunt Voltage: %s/%s\r\n", (char *)VMeasure.Voltage, (char *)VMeasureScaled.Voltage );
   \                     ??RoadBrd_ParseString_163: (+1)
   \   00000D9C   0xAB4E             ADD      R3,SP,#+312
   \   00000D9E   0xAA42             ADD      R2,SP,#+264
   \   00000DA0   0xF8DF 0x1DE8      LDR.W    R1,??RoadBrd_ParseString_164+0x4
   \   00000DA4   0xA80A             ADD      R0,SP,#+40
   \   00000DA6   0x.... 0x....      BL       sprintf
   1243                              break;
   \   00000DAA   0xE122             B.N      ??RoadBrd_ParseString_148
   1244          //------------------ C1 Command...Read Current and return results..... 
   1245                            case '1':
   1246                              // Read Current and return results.....
   1247                              Status = RoadBrd_VMonitor_RdCurrent( &CMeasure );
   \                     ??RoadBrd_ParseString_150: (+1)
   \   00000DAC   0xA8D1             ADD      R0,SP,#+836
   \   00000DAE   0x.... 0x....      BL       RoadBrd_VMonitor_RdCurrent
   \   00000DB2   0x0006             MOVS     R6,R0
   1248                              if (Status == HAL_OK)
   \   00000DB4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000DB6   0x2E00             CMP      R6,#+0
   \   00000DB8   0xD103             BNE.N    ??RoadBrd_ParseString_165
   1249                                Status = RoadBrd_VMonitor_RdCurrent_Scaled( &CMeasureScaled );
   \   00000DBA   0xA8CD             ADD      R0,SP,#+820
   \   00000DBC   0x.... 0x....      BL       RoadBrd_VMonitor_RdCurrent_Scaled
   \   00000DC0   0x0006             MOVS     R6,R0
   1250                              // Is this a BLE Operation?
   1251                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_165: (+1)
   \   00000DC2   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000DC4   0x2E00             CMP      R6,#+0
   \   00000DC6   0xD12B             BNE.N    ??RoadBrd_ParseString_166
   1252                              {
   1253                                // Send string to UART..
   1254                                strcpy( (char *)tempBffr2, "Voltage Monitor/Read Current...\r\n");
   \   00000DC8   0xF8DF 0x1DC4      LDR.W    R1,??RoadBrd_ParseString_164+0x8
   \   00000DCC   0xA80A             ADD      R0,SP,#+40
   \   00000DCE   0x.... 0x....      BL       strcpy
   1255          #ifdef NUCLEO
   1256                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1257          #else
   1258                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000DD2   0xA90A             ADD      R1,SP,#+40
   \   00000DD4   0x2000             MOVS     R0,#+0
   \   00000DD6   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000DDA   0x0006             MOVS     R6,R0
   1259          #endif
   1260                                if (Status != HAL_OK)
   \   00000DDC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000DDE   0x2E00             CMP      R6,#+0
   \   00000DE0   0xD003             BEQ.N    ??RoadBrd_ParseString_167
   1261                                  return Status;
   \   00000DE2   0x0030             MOVS     R0,R6
   \   00000DE4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000DE6   0xF003 0xBDAC      B.W      ??RoadBrd_ParseString_4
   1262                                // NOW, Build Data String..
   1263                                sprintf( (char *)tempBffr2, "     CURRENT DATA: " );
   \                     ??RoadBrd_ParseString_167: (+1)
   \   00000DEA   0xF8DF 0x1DA8      LDR.W    R1,??RoadBrd_ParseString_164+0xC
   \   00000DEE   0xA80A             ADD      R0,SP,#+40
   \   00000DF0   0x.... 0x....      BL       sprintf
   1264                                strcat( (char *)tempBffr2, (char *)CMeasure.Raw );
   \   00000DF4   0xA9D3             ADD      R1,SP,#+844
   \   00000DF6   0x1C49             ADDS     R1,R1,#+1
   \   00000DF8   0xA80A             ADD      R0,SP,#+40
   \   00000DFA   0x.... 0x....      BL       strcat
   1265                                strcat( (char *)tempBffr2, "\r\n" );
   \   00000DFE   0xA142             ADR.N    R1,??RoadBrd_ParseString_26+0x4  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000E00   0xA80A             ADD      R0,SP,#+40
   \   00000E02   0x.... 0x....      BL       strcat
   1266                              }
   1267                              else
   1268                                break;
   1269          #ifdef NUCLEO
   1270                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1271          #else
   1272                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000E06   0xA90A             ADD      R1,SP,#+40
   \   00000E08   0x2000             MOVS     R0,#+0
   \   00000E0A   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000E0E   0x0006             MOVS     R6,R0
   1273          #endif
   1274                              if (Status != HAL_OK)
   \   00000E10   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000E12   0x2E00             CMP      R6,#+0
   \   00000E14   0xD105             BNE.N    ??RoadBrd_ParseString_168
   \   00000E16   0xE008             B.N      ??RoadBrd_ParseString_169
   \                     ??RoadBrd_ParseString_0:
   \   00000E18   0x........         DC32     Bypass
   \   00000E1C   0x........         DC32     ?_0
   \                     ??RoadBrd_ParseString_166: (+1)
   \   00000E20   0xE0E7             B.N      ??RoadBrd_ParseString_148
   1275                                return Status;
   \                     ??RoadBrd_ParseString_168: (+1)
   \   00000E22   0x0030             MOVS     R0,R6
   \   00000E24   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000E26   0xF003 0xBD8C      B.W      ??RoadBrd_ParseString_4
   1276                              // Now calculate Current.
   1277                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_169: (+1)
   \   00000E2A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000E2C   0x2D00             CMP      R5,#+0
   \   00000E2E   0xD00C             BEQ.N    ??RoadBrd_ParseString_170
   1278                              {
   1279                                // Yes...Build and Send BLE Response NOW.
   1280                                sprintf( (char *)tempBffr2, "<STATUS>SHNT_CRNT:%s/%s</STATUS>", (char *)CMeasure.Current, (char *)CMeasureScaled.Current );
   \   00000E30   0xABCD             ADD      R3,SP,#+820
   \   00000E32   0xAAD1             ADD      R2,SP,#+836
   \   00000E34   0xF8DF 0x1DFC      LDR.W    R1,??RoadBrd_ParseString_171+0x4
   \   00000E38   0xA80A             ADD      R0,SP,#+40
   \   00000E3A   0x.... 0x....      BL       sprintf
   1281                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000E3E   0xA80A             ADD      R0,SP,#+40
   \   00000E40   0x.... 0x....      BL       strlen
   \   00000E44   0xA90A             ADD      R1,SP,#+40
   \   00000E46   0x.... 0x....      BL       BGM111_Transmit
   1282                              }
   1283                              sprintf( (char *)tempBffr2, "     Current: %s/%s\r\n", (char *)CMeasure.Current, (char *)CMeasureScaled.Current );
   \                     ??RoadBrd_ParseString_170: (+1)
   \   00000E4A   0xABCD             ADD      R3,SP,#+820
   \   00000E4C   0xAAD1             ADD      R2,SP,#+836
   \   00000E4E   0xF8DF 0x1DE8      LDR.W    R1,??RoadBrd_ParseString_171+0x8
   \   00000E52   0xA80A             ADD      R0,SP,#+40
   \   00000E54   0x.... 0x....      BL       sprintf
   1284                              break;
   \   00000E58   0xE0CB             B.N      ??RoadBrd_ParseString_148
   1285          //------------------ C2 Command...Read Power and return results.....     
   1286                            case '2':
   1287                              // Read Power and return results.....
   1288                              Status = RoadBrd_VMonitor_RdPower( &PMeasure );
   \                     ??RoadBrd_ParseString_151: (+1)
   \   00000E5A   0xA8C9             ADD      R0,SP,#+804
   \   00000E5C   0x.... 0x....      BL       RoadBrd_VMonitor_RdPower
   \   00000E60   0x0006             MOVS     R6,R0
   1289                              if (Status == HAL_OK)
   \   00000E62   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000E64   0x2E00             CMP      R6,#+0
   \   00000E66   0xD103             BNE.N    ??RoadBrd_ParseString_172
   1290                                Status = RoadBrd_VMonitor_RdPower_Scaled( &PMeasureScaled );
   \   00000E68   0xA8C5             ADD      R0,SP,#+788
   \   00000E6A   0x.... 0x....      BL       RoadBrd_VMonitor_RdPower_Scaled
   \   00000E6E   0x0006             MOVS     R6,R0
   1291                              // Is this a BLE Operation?
   1292                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_172: (+1)
   \   00000E70   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000E72   0x2E00             CMP      R6,#+0
   \   00000E74   0xD129             BNE.N    ??RoadBrd_ParseString_173
   1293                              {
   1294                                // Send string to UART..
   1295                                strcpy( (char *)tempBffr2, "Voltage Monitor/Read Power...\r\n");
   \   00000E76   0xF8DF 0x1DC4      LDR.W    R1,??RoadBrd_ParseString_171+0xC
   \   00000E7A   0xA80A             ADD      R0,SP,#+40
   \   00000E7C   0x.... 0x....      BL       strcpy
   1296          #ifdef NUCLEO
   1297                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1298          #else
   1299                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000E80   0xA90A             ADD      R1,SP,#+40
   \   00000E82   0x2000             MOVS     R0,#+0
   \   00000E84   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000E88   0x0006             MOVS     R6,R0
   1300          #endif
   1301                                if (Status != HAL_OK)
   \   00000E8A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000E8C   0x2E00             CMP      R6,#+0
   \   00000E8E   0xD005             BEQ.N    ??RoadBrd_ParseString_174
   1302                                  return Status;
   \   00000E90   0x0030             MOVS     R0,R6
   \   00000E92   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000E94   0xF003 0xBD55      B.W      ??RoadBrd_ParseString_4
   \                     ??RoadBrd_ParseString_25:
   \   00000E98   0x........         DC32     ?_1
   1303                                // NOW, Build Data String..
   1304                                sprintf( (char *)tempBffr2, "     POWER DATA: " );
   \                     ??RoadBrd_ParseString_174: (+1)
   \   00000E9C   0xF8DF 0x1DA0      LDR.W    R1,??RoadBrd_ParseString_171+0x10
   \   00000EA0   0xA80A             ADD      R0,SP,#+40
   \   00000EA2   0x.... 0x....      BL       sprintf
   1305                                strcat( (char *)tempBffr2, (char *)PMeasure.Raw );
   \   00000EA6   0xA9CB             ADD      R1,SP,#+812
   \   00000EA8   0x1C49             ADDS     R1,R1,#+1
   \   00000EAA   0xA80A             ADD      R0,SP,#+40
   \   00000EAC   0x.... 0x....      BL       strcat
   1306                                strcat( (char *)tempBffr2, "\r\n" );
   \   00000EB0   0xA115             ADR.N    R1,??RoadBrd_ParseString_26+0x4  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000EB2   0xA80A             ADD      R0,SP,#+40
   \   00000EB4   0x.... 0x....      BL       strcat
   1307                              }
   1308                              else
   1309                                break;
   1310          #ifdef NUCLEO
   1311                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1312          #else
   1313                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000EB8   0xA90A             ADD      R1,SP,#+40
   \   00000EBA   0x2000             MOVS     R0,#+0
   \   00000EBC   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000EC0   0x0006             MOVS     R6,R0
   1314          #endif
   1315                              if (Status != HAL_OK)
   \   00000EC2   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000EC4   0x2E00             CMP      R6,#+0
   \   00000EC6   0xD101             BNE.N    ??RoadBrd_ParseString_175
   \   00000EC8   0xE004             B.N      ??RoadBrd_ParseString_176
   \                     ??RoadBrd_ParseString_173: (+1)
   \   00000ECA   0xE092             B.N      ??RoadBrd_ParseString_148
   1316                                return Status;
   \                     ??RoadBrd_ParseString_175: (+1)
   \   00000ECC   0x0030             MOVS     R0,R6
   \   00000ECE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000ED0   0xF003 0xBD37      B.W      ??RoadBrd_ParseString_4
   1317                              // Now calculate Power.
   1318                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_176: (+1)
   \   00000ED4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000ED6   0x2D00             CMP      R5,#+0
   \   00000ED8   0xD00C             BEQ.N    ??RoadBrd_ParseString_177
   1319                              {
   1320                                // Yes...Build and Send BLE Response NOW.
   1321                                sprintf( (char *)tempBffr2, "<STATUS>POWER:%s/%s</STATUS>", (char *)PMeasure.Power, (char *)PMeasureScaled.Power );
   \   00000EDA   0xABC5             ADD      R3,SP,#+788
   \   00000EDC   0xAAC9             ADD      R2,SP,#+804
   \   00000EDE   0xF8DF 0x1D64      LDR.W    R1,??RoadBrd_ParseString_171+0x14
   \   00000EE2   0xA80A             ADD      R0,SP,#+40
   \   00000EE4   0x.... 0x....      BL       sprintf
   1322                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000EE8   0xA80A             ADD      R0,SP,#+40
   \   00000EEA   0x.... 0x....      BL       strlen
   \   00000EEE   0xA90A             ADD      R1,SP,#+40
   \   00000EF0   0x.... 0x....      BL       BGM111_Transmit
   1323                              }
   1324                              sprintf( (char *)tempBffr2, "     Power: %s/%s\r\n", (char *)PMeasure.Power, (char *)PMeasureScaled.Power );
   \                     ??RoadBrd_ParseString_177: (+1)
   \   00000EF4   0xABC5             ADD      R3,SP,#+788
   \   00000EF6   0xAAC9             ADD      R2,SP,#+804
   \   00000EF8   0xF8DF 0x1D4C      LDR.W    R1,??RoadBrd_ParseString_171+0x18
   \   00000EFC   0xA80A             ADD      R0,SP,#+40
   \   00000EFE   0x.... 0x....      BL       sprintf
   1325                              break;
   \   00000F02   0xE076             B.N      ??RoadBrd_ParseString_148
   \                     ??RoadBrd_ParseString_26:
   \   00000F04   0x........         DC32     ?_2
   \   00000F08   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
   \   00000F0C   0x........         DC32     ?_3
   \   00000F10   0x........         DC32     ?_4
   \   00000F14   0x........         DC32     ?_5
   \   00000F18   0x........         DC32     ?_7
   \   00000F1C   0x........         DC32     ?_8
   1326          //------------------ C3 Command...Read Bus Voltage and return results.....
   1327                            case '3':
   1328                              // Read Bus Voltage and return results.....
   1329                              Status = RoadBrd_VMonitor_RdVoltage( &VMeasure );
   \                     ??RoadBrd_ParseString_152: (+1)
   \   00000F20   0xA842             ADD      R0,SP,#+264
   \   00000F22   0x.... 0x....      BL       RoadBrd_VMonitor_RdVoltage
   \   00000F26   0x0006             MOVS     R6,R0
   1330                              if (Status == HAL_OK)
   \   00000F28   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000F2A   0x2E00             CMP      R6,#+0
   \   00000F2C   0xD103             BNE.N    ??RoadBrd_ParseString_178
   1331                                Status = RoadBrd_VMonitor_RdVoltage_Scaled( &VMeasureScaled );
   \   00000F2E   0xA84E             ADD      R0,SP,#+312
   \   00000F30   0x.... 0x....      BL       RoadBrd_VMonitor_RdVoltage_Scaled
   \   00000F34   0x0006             MOVS     R6,R0
   1332                                
   1333                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_178: (+1)
   \   00000F36   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000F38   0x2E00             CMP      R6,#+0
   \   00000F3A   0xD126             BNE.N    ??RoadBrd_ParseString_179
   1334                              {
   1335                                // Send string to UART..
   1336                                strcpy( (char *)tempBffr2, "Voltage Monitor/Read Bus Voltage...\r\n");
   \   00000F3C   0xF8DF 0x1ADC      LDR.W    R1,??RoadBrd_ParseString_142
   \   00000F40   0xA80A             ADD      R0,SP,#+40
   \   00000F42   0x.... 0x....      BL       strcpy
   1337          #ifdef NUCLEO
   1338                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1339          #else
   1340                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000F46   0xA90A             ADD      R1,SP,#+40
   \   00000F48   0x2000             MOVS     R0,#+0
   \   00000F4A   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000F4E   0x0006             MOVS     R6,R0
   1341          #endif
   1342                                if (Status != HAL_OK)
   \   00000F50   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000F52   0x2E00             CMP      R6,#+0
   \   00000F54   0xD003             BEQ.N    ??RoadBrd_ParseString_180
   1343                                  return Status;
   \   00000F56   0x0030             MOVS     R0,R6
   \   00000F58   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000F5A   0xF003 0xBCF2      B.W      ??RoadBrd_ParseString_4
   1344                                // NOW, Build Data String..
   1345                                sprintf( (char *)tempBffr2, "     BUS VOLTAGE DATA: " );
   \                     ??RoadBrd_ParseString_180: (+1)
   \   00000F5E   0xF8DF 0x1AC0      LDR.W    R1,??RoadBrd_ParseString_142+0x4
   \   00000F62   0xA80A             ADD      R0,SP,#+40
   \   00000F64   0x.... 0x....      BL       sprintf
   1346                                strcat( (char *)tempBffr2, (char *)VMeasure.Raw );
   \   00000F68   0xA944             ADD      R1,SP,#+272
   \   00000F6A   0xA80A             ADD      R0,SP,#+40
   \   00000F6C   0x.... 0x....      BL       strcat
   1347                                strcat( (char *)tempBffr2, "\r\n" );
   \   00000F70   0xA1BF             ADR.N    R1,??RoadBrd_ParseString_64+0xC  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000F72   0xA80A             ADD      R0,SP,#+40
   \   00000F74   0x.... 0x....      BL       strcat
   1348                              }
   1349                              else
   1350                                break;
   1351          #ifdef NUCLEO
   1352                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1353          #else
   1354                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000F78   0xA90A             ADD      R1,SP,#+40
   \   00000F7A   0x2000             MOVS     R0,#+0
   \   00000F7C   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000F80   0x0006             MOVS     R6,R0
   1355          #endif
   1356                              if (Status != HAL_OK)
   \   00000F82   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000F84   0x2E00             CMP      R6,#+0
   \   00000F86   0xD101             BNE.N    ??RoadBrd_ParseString_181
   \   00000F88   0xE004             B.N      ??RoadBrd_ParseString_182
   \                     ??RoadBrd_ParseString_179: (+1)
   \   00000F8A   0xE032             B.N      ??RoadBrd_ParseString_148
   1357                                return Status;
   \                     ??RoadBrd_ParseString_181: (+1)
   \   00000F8C   0x0030             MOVS     R0,R6
   \   00000F8E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000F90   0xF003 0xBCD7      B.W      ??RoadBrd_ParseString_4
   1358                              // Now calculate Bus Voltage.
   1359                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_182: (+1)
   \   00000F94   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000F96   0x2D00             CMP      R5,#+0
   \   00000F98   0xD00C             BEQ.N    ??RoadBrd_ParseString_183
   1360                              {
   1361                                // Yes...Build and Send BLE Response NOW.
   1362                                sprintf( (char *)tempBffr2, "<STATUS>BUS_VLTG:%s/%s</STATUS>", (char *)VMeasure.Voltage, (char *)VMeasureScaled.Voltage );
   \   00000F9A   0xAB4E             ADD      R3,SP,#+312
   \   00000F9C   0xAA42             ADD      R2,SP,#+264
   \   00000F9E   0xF8DF 0x1AEC      LDR.W    R1,??RoadBrd_ParseString_147
   \   00000FA2   0xA80A             ADD      R0,SP,#+40
   \   00000FA4   0x.... 0x....      BL       sprintf
   1363                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000FA8   0xA80A             ADD      R0,SP,#+40
   \   00000FAA   0x.... 0x....      BL       strlen
   \   00000FAE   0xA90A             ADD      R1,SP,#+40
   \   00000FB0   0x.... 0x....      BL       BGM111_Transmit
   1364                              }
   1365                              sprintf( (char *)tempBffr2, "     Bus Voltage: %s/%s\r\n", (char *)VMeasure.Voltage, (char *)VMeasureScaled.Voltage );
   \                     ??RoadBrd_ParseString_183: (+1)
   \   00000FB4   0xAB4E             ADD      R3,SP,#+312
   \   00000FB6   0xAA42             ADD      R2,SP,#+264
   \   00000FB8   0xF8DF 0x1AD4      LDR.W    R1,??RoadBrd_ParseString_147+0x4
   \   00000FBC   0xA80A             ADD      R0,SP,#+40
   \   00000FBE   0x.... 0x....      BL       sprintf
   1366                              break;
   \   00000FC2   0xE016             B.N      ??RoadBrd_ParseString_148
   \                     ??RoadBrd_ParseString_33:
   \   00000FC4   0x........         DC32     ?_9
   \   00000FC8   0x........         DC32     ?_10
   1367                            default:
   1368                              // Is this a BLE Operation?
   1369                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_153: (+1)
   \   00000FCC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000FCE   0x2D00             CMP      R5,#+0
   \   00000FD0   0xD00A             BEQ.N    ??RoadBrd_ParseString_184
   1370                              {
   1371                                // Yes...Build and Send BLE Response NOW.
   1372                                strcpy( (char *)tempBffr2, "<STATUS>CMD_C_SYNTAX</STATUS>");
   \   00000FD2   0xF8DF 0x1DDC      LDR.W    R1,??RoadBrd_ParseString_185
   \   00000FD6   0xA80A             ADD      R0,SP,#+40
   \   00000FD8   0x.... 0x....      BL       strcpy
   1373                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000FDC   0xA80A             ADD      R0,SP,#+40
   \   00000FDE   0x.... 0x....      BL       strlen
   \   00000FE2   0xA90A             ADD      R1,SP,#+40
   \   00000FE4   0x.... 0x....      BL       BGM111_Transmit
   1374                              }
   1375                              strcpy( (char *)tempBffr2, "ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_184: (+1)
   \   00000FE8   0xF8DF 0x147C      LDR.W    R1,??RoadBrd_ParseString_82+0x8
   \   00000FEC   0xA80A             ADD      R0,SP,#+40
   \   00000FEE   0x.... 0x....      BL       strcpy
   1376                              break;
   1377                          } //EndSwitch
   1378                        } //EndElse (Size == 1)
   1379                        break;
   \                     ??RoadBrd_ParseString_148: (+1)
   \   00000FF2   0xF003 0xBC2C      B.W      ??RoadBrd_ParseString_27
   \   00000FF6   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_36:
   \   00000FF8   0x........         DC32     ?_11
   \   00000FFC   0x........         DC32     ?_12
   \   00001000   0x........         DC32     ?_13
   \   00001004   0x........         DC32     ?_14
   \   00001008   0x........         DC32     ?_15
   \   0000100C   0x........         DC32     ?_16
   1380          //**************************************************************************************************
   1381                      case 'D':
   1382                        // Read Humidity. 
   1383                        if (Size == 1)
   \                     ??RoadBrd_ParseString_15: (+1)
   \   00001010   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00001014   0xF1B8 0x0F01      CMP      R8,#+1
   \   00001018   0xD16C             BNE.N    ??RoadBrd_ParseString_186
   1384                        {
   1385          //------------------ D Command: Read Humidity Values      
   1386                          // Read Humidity Sensor sensor and return Humidity results....
   1387                          Status = RoadBrd_Humidity_ReadHumidity( &HMeasure );
   \   0000101A   0xA849             ADD      R0,SP,#+292
   \   0000101C   0x.... 0x....      BL       RoadBrd_Humidity_ReadHumidity
   \   00001020   0x0006             MOVS     R6,R0
   1388                          if (Status == HAL_OK)
   \   00001022   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001024   0x2E00             CMP      R6,#+0
   \   00001026   0xD104             BNE.N    ??RoadBrd_ParseString_187
   1389                            Status = RoadBrd_Humidity_ReadHumidity_Scaled( &HMeasureScaled );
   \   00001028   0xF50D 0x608A      ADD      R0,SP,#+1104
   \   0000102C   0x.... 0x....      BL       RoadBrd_Humidity_ReadHumidity_Scaled
   \   00001030   0x0006             MOVS     R6,R0
   1390                          // Is this a BLE Operation?
   1391                          if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_187: (+1)
   \   00001032   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001034   0x2E00             CMP      R6,#+0
   \   00001036   0xD126             BNE.N    ??RoadBrd_ParseString_188
   1392                          {
   1393                            // Send string to UART..
   1394                            strcpy( (char *)tempBffr2, "Humidity SENSOR...\r\n");
   \   00001038   0xF8DF 0x1D78      LDR.W    R1,??RoadBrd_ParseString_185+0x4
   \   0000103C   0xA80A             ADD      R0,SP,#+40
   \   0000103E   0x.... 0x....      BL       strcpy
   1395          #ifdef NUCLEO
   1396                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1397          #else
   1398                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00001042   0xA90A             ADD      R1,SP,#+40
   \   00001044   0x2000             MOVS     R0,#+0
   \   00001046   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000104A   0x0006             MOVS     R6,R0
   1399          #endif
   1400                            if (Status != HAL_OK)
   \   0000104C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000104E   0x2E00             CMP      R6,#+0
   \   00001050   0xD003             BEQ.N    ??RoadBrd_ParseString_189
   1401                              return Status;
   \   00001052   0x0030             MOVS     R0,R6
   \   00001054   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001056   0xF003 0xBC74      B.W      ??RoadBrd_ParseString_4
   1402                            // NOW, Build Data String..
   1403                            sprintf( (char *)tempBffr2, "     Humidity DATA: " );
   \                     ??RoadBrd_ParseString_189: (+1)
   \   0000105A   0xF8DF 0x1DFC      LDR.W    R1,??RoadBrd_ParseString_190
   \   0000105E   0xA80A             ADD      R0,SP,#+40
   \   00001060   0x.... 0x....      BL       sprintf
   1404                            strcat( (char *)tempBffr2, (char *)HMeasure.HRaw );
   \   00001064   0xA94B             ADD      R1,SP,#+300
   \   00001066   0xA80A             ADD      R0,SP,#+40
   \   00001068   0x.... 0x....      BL       strcat
   1405                            strcat( (char *)tempBffr2, "\r\n" );
   \   0000106C   0xA180             ADR.N    R1,??RoadBrd_ParseString_64+0xC  ;; 0x0D, 0x0A, 0x00, 0x00
   \   0000106E   0xA80A             ADD      R0,SP,#+40
   \   00001070   0x.... 0x....      BL       strcat
   1406                          }
   1407                          else
   1408                            break;
   1409          #ifdef NUCLEO
   1410                          Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1411          #else
   1412                          Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00001074   0xA90A             ADD      R1,SP,#+40
   \   00001076   0x2000             MOVS     R0,#+0
   \   00001078   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000107C   0x0006             MOVS     R6,R0
   1413          #endif
   1414                          if (Status != HAL_OK)
   \   0000107E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001080   0x2E00             CMP      R6,#+0
   \   00001082   0xD102             BNE.N    ??RoadBrd_ParseString_191
   \   00001084   0xE005             B.N      ??RoadBrd_ParseString_192
   \                     ??RoadBrd_ParseString_188: (+1)
   \   00001086   0xF003 0xBBE2      B.W      ??RoadBrd_ParseString_27
   1415                            return Status;
   \                     ??RoadBrd_ParseString_191: (+1)
   \   0000108A   0x0030             MOVS     R0,R6
   \   0000108C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000108E   0xF003 0xBC58      B.W      ??RoadBrd_ParseString_4
   1416                          // NOW, Build Data String..
   1417                          sprintf( (char *)tempBffr2, "     Humidity DATA(Decimal): %d\r\n", HMeasure.HRawC );
   \                     ??RoadBrd_ParseString_192: (+1)
   \   00001092   0xF8BD 0x2134      LDRH     R2,[SP, #+308]
   \   00001096   0xF8DF 0x1DC4      LDR.W    R1,??RoadBrd_ParseString_190+0x4
   \   0000109A   0xA80A             ADD      R0,SP,#+40
   \   0000109C   0x.... 0x....      BL       sprintf
   1418          #ifdef NUCLEO
   1419                          Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1420          #else
   1421                          Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000010A0   0xA90A             ADD      R1,SP,#+40
   \   000010A2   0x2000             MOVS     R0,#+0
   \   000010A4   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000010A8   0x0006             MOVS     R6,R0
   1422          #endif
   1423                          if (Status != HAL_OK)
   \   000010AA   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000010AC   0x2E00             CMP      R6,#+0
   \   000010AE   0xD003             BEQ.N    ??RoadBrd_ParseString_193
   1424                            return Status;
   \   000010B0   0x0030             MOVS     R0,R6
   \   000010B2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000010B4   0xF003 0xBC45      B.W      ??RoadBrd_ParseString_4
   1425                          // Now calculate Celcius and Farenheit Temp.
   1426                          if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_193: (+1)
   \   000010B8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000010BA   0x2D00             CMP      R5,#+0
   \   000010BC   0xD00D             BEQ.N    ??RoadBrd_ParseString_194
   1427                          {
   1428                            // Yes...Build and Send BLE Response NOW.
   1429                            sprintf( (char *)tempBffr2, "<STATUS>HUMIDITY:%s/%s</STATUS>", (char *)HMeasure.Humidity, (char *)HMeasureScaled.Humidity );
   \   000010BE   0xF50D 0x638A      ADD      R3,SP,#+1104
   \   000010C2   0xAA49             ADD      R2,SP,#+292
   \   000010C4   0xF8DF 0x1D98      LDR.W    R1,??RoadBrd_ParseString_190+0x8
   \   000010C8   0xA80A             ADD      R0,SP,#+40
   \   000010CA   0x.... 0x....      BL       sprintf
   1430                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000010CE   0xA80A             ADD      R0,SP,#+40
   \   000010D0   0x.... 0x....      BL       strlen
   \   000010D4   0xA90A             ADD      R1,SP,#+40
   \   000010D6   0x.... 0x....      BL       BGM111_Transmit
   1431                          }
   1432                          sprintf( (char *)tempBffr2, "     Humidity: %s/%s\r\n", (char *)HMeasure.Humidity, (char *)HMeasureScaled.Humidity );
   \                     ??RoadBrd_ParseString_194: (+1)
   \   000010DA   0xF50D 0x638A      ADD      R3,SP,#+1104
   \   000010DE   0xAA49             ADD      R2,SP,#+292
   \   000010E0   0xF8DF 0x1D80      LDR.W    R1,??RoadBrd_ParseString_190+0xC
   \   000010E4   0xA80A             ADD      R0,SP,#+40
   \   000010E6   0x.... 0x....      BL       sprintf
   \   000010EA   0xE10D             B.N      ??RoadBrd_ParseString_195
   \                     ??RoadBrd_ParseString_41:
   \   000010EC   0x........         DC32     ?_17
   \   000010F0   0x........         DC32     ?_19
   1433                        }
   1434                        else
   1435                        {
   1436                          switch( tempBffr[1] )
   \                     ??RoadBrd_ParseString_186: (+1)
   \   000010F4   0x7860             LDRB     R0,[R4, #+1]
   \   000010F6   0x2830             CMP      R0,#+48
   \   000010F8   0xD024             BEQ.N    ??RoadBrd_ParseString_196
   \   000010FA   0x2831             CMP      R0,#+49
   \   000010FC   0xF000 0x808C      BEQ.W    ??RoadBrd_ParseString_197
   \   00001100   0x2849             CMP      R0,#+73
   \   00001102   0xF040 0x8101      BNE.W    ??RoadBrd_ParseString_195
   1437                          {
   1438          //------------------ DI Command: Initialize Humidity Sensor
   1439                            case 'I':
   1440                              // Initialize Humidity Sensor.
   1441                              Status = RoadBrd_HumidityInit();
   \                     ??RoadBrd_ParseString_198: (+1)
   \   00001106   0x.... 0x....      BL       RoadBrd_HumidityInit
   \   0000110A   0x0006             MOVS     R6,R0
   1442                              // Is this a BLE Operation?
   1443                              if ( BLE_Flag )
   \   0000110C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000110E   0x2D00             CMP      R5,#+0
   \   00001110   0xD009             BEQ.N    ??RoadBrd_ParseString_199
   1444                              {
   1445                                // Yes...Build and Send BLE Response NOW.
   1446                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001112   0x492B             LDR.N    R1,??RoadBrd_ParseString_51+0x4
   \   00001114   0xA80A             ADD      R0,SP,#+40
   \   00001116   0x.... 0x....      BL       strcpy
   1447                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000111A   0xA80A             ADD      R0,SP,#+40
   \   0000111C   0x.... 0x....      BL       strlen
   \   00001120   0xA90A             ADD      R1,SP,#+40
   \   00001122   0x.... 0x....      BL       BGM111_Transmit
   1448                              }
   1449          
   1450                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_199: (+1)
   \   00001126   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001128   0x2E00             CMP      R6,#+0
   \   0000112A   0xD104             BNE.N    ??RoadBrd_ParseString_200
   1451                              {
   1452                                strcpy( (char *)tempBffr2, "Humidity Sensor: Initialization Complete.\r\n");;
   \   0000112C   0xF8DF 0x1D38      LDR.W    R1,??RoadBrd_ParseString_190+0x10
   \   00001130   0xA80A             ADD      R0,SP,#+40
   \   00001132   0x.... 0x....      BL       strcpy
   1453                              }
   1454                              break;
   \                     ??RoadBrd_ParseString_200: (+1)
   \   00001136   0xE0E7             B.N      ??RoadBrd_ParseString_195
   \                     ??RoadBrd_ParseString_49:
   \   00001138   0x........         DC32     ?_20
   \   0000113C   0x........         DC32     ?_21
   \   00001140   0x........         DC32     ?_22
   1455          //------------------ D0 Command...Read Humidity Values.....
   1456                            case '0':
   1457                              // Read Humidity Sensor sensor and return Humidity results....
   1458                              Status = RoadBrd_Humidity_ReadHumidity( &HMeasure );
   \                     ??RoadBrd_ParseString_196: (+1)
   \   00001144   0xA849             ADD      R0,SP,#+292
   \   00001146   0x.... 0x....      BL       RoadBrd_Humidity_ReadHumidity
   \   0000114A   0x0006             MOVS     R6,R0
   1459                              // Is this a BLE Operation?
   1460                              if ( BLE_Flag )
   \   0000114C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000114E   0x2D00             CMP      R5,#+0
   \   00001150   0xD009             BEQ.N    ??RoadBrd_ParseString_201
   1461                              {
   1462                                // Yes...Build and Send BLE Response NOW.
   1463                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001152   0x491B             LDR.N    R1,??RoadBrd_ParseString_51+0x4
   \   00001154   0xA80A             ADD      R0,SP,#+40
   \   00001156   0x.... 0x....      BL       strcpy
   1464                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000115A   0xA80A             ADD      R0,SP,#+40
   \   0000115C   0x.... 0x....      BL       strlen
   \   00001160   0xA90A             ADD      R1,SP,#+40
   \   00001162   0x.... 0x....      BL       BGM111_Transmit
   1465                              }
   1466          
   1467                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_201: (+1)
   \   00001166   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001168   0x2E00             CMP      R6,#+0
   \   0000116A   0xD12F             BNE.N    ??RoadBrd_ParseString_202
   1468                              {
   1469                                // Send string to UART..
   1470                                strcpy( (char *)tempBffr2, "Humidity SENSOR...\r\n");
   \   0000116C   0xF8DF 0x1C44      LDR.W    R1,??RoadBrd_ParseString_185+0x4
   \   00001170   0xA80A             ADD      R0,SP,#+40
   \   00001172   0x.... 0x....      BL       strcpy
   1471          #ifdef NUCLEO
   1472                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1473          #else
   1474                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00001176   0xA90A             ADD      R1,SP,#+40
   \   00001178   0x2000             MOVS     R0,#+0
   \   0000117A   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000117E   0x0006             MOVS     R6,R0
   1475          #endif
   1476                                if (Status != HAL_OK)
   \   00001180   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001182   0x2E00             CMP      R6,#+0
   \   00001184   0xD003             BEQ.N    ??RoadBrd_ParseString_203
   1477                                  return Status;
   \   00001186   0x0030             MOVS     R0,R6
   \   00001188   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000118A   0xF003 0xBBDA      B.W      ??RoadBrd_ParseString_4
   1478                                // NOW, Build Data String..
   1479                                sprintf( (char *)tempBffr2, "     Humidity DATA: " );
   \                     ??RoadBrd_ParseString_203: (+1)
   \   0000118E   0xF8DF 0x1CC8      LDR.W    R1,??RoadBrd_ParseString_190
   \   00001192   0xA80A             ADD      R0,SP,#+40
   \   00001194   0x.... 0x....      BL       sprintf
   1480                                strcat( (char *)tempBffr2, (char *)HMeasure.HRaw );
   \   00001198   0xA94B             ADD      R1,SP,#+300
   \   0000119A   0xA80A             ADD      R0,SP,#+40
   \   0000119C   0x.... 0x....      BL       strcat
   1481                                strcat( (char *)tempBffr2, "\r\n" );
   \   000011A0   0xA133             ADR.N    R1,??RoadBrd_ParseString_64+0xC  ;; 0x0D, 0x0A, 0x00, 0x00
   \   000011A2   0xA80A             ADD      R0,SP,#+40
   \   000011A4   0x.... 0x....      BL       strcat
   1482                              }
   1483                              else
   1484                                break;
   1485          #ifdef NUCLEO
   1486                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1487          #else
   1488                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000011A8   0xA90A             ADD      R1,SP,#+40
   \   000011AA   0x2000             MOVS     R0,#+0
   \   000011AC   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000011B0   0x0006             MOVS     R6,R0
   1489          #endif
   1490                              if (Status != HAL_OK)
   \   000011B2   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000011B4   0x2E00             CMP      R6,#+0
   \   000011B6   0xD10A             BNE.N    ??RoadBrd_ParseString_204
   \   000011B8   0xE00D             B.N      ??RoadBrd_ParseString_205
   \   000011BA   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_51:
   \   000011BC   0x........         DC32     ?_23
   \   000011C0   0x........         DC32     ?_24
   \   000011C4   0x........         DC32     ?_25
   \   000011C8   0x........         DC32     ?_26
   \                     ??RoadBrd_ParseString_202: (+1)
   \   000011CC   0xE09C             B.N      ??RoadBrd_ParseString_195
   1491                                return Status;
   \                     ??RoadBrd_ParseString_204: (+1)
   \   000011CE   0x0030             MOVS     R0,R6
   \   000011D0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000011D2   0xF003 0xBBB6      B.W      ??RoadBrd_ParseString_4
   1492                              // NOW, Build Data String..
   1493                              sprintf( (char *)tempBffr2, "     Humidity DATA(Decimal): %d\r\n", HMeasure.HRawC );
   \                     ??RoadBrd_ParseString_205: (+1)
   \   000011D6   0xF8BD 0x2134      LDRH     R2,[SP, #+308]
   \   000011DA   0xF8DF 0x1C80      LDR.W    R1,??RoadBrd_ParseString_190+0x4
   \   000011DE   0xA80A             ADD      R0,SP,#+40
   \   000011E0   0x.... 0x....      BL       sprintf
   1494          #ifdef NUCLEO
   1495                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1496          #else
   1497                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000011E4   0xA90A             ADD      R1,SP,#+40
   \   000011E6   0x2000             MOVS     R0,#+0
   \   000011E8   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000011EC   0x0006             MOVS     R6,R0
   1498          #endif
   1499                              if (Status != HAL_OK)
   \   000011EE   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000011F0   0x2E00             CMP      R6,#+0
   \   000011F2   0xD003             BEQ.N    ??RoadBrd_ParseString_206
   1500                                return Status;
   \   000011F4   0x0030             MOVS     R0,R6
   \   000011F6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000011F8   0xF003 0xBBA3      B.W      ??RoadBrd_ParseString_4
   1501                              // Now calculate Humidity.
   1502                              sprintf( (char *)tempBffr2, "     Humidity: " );
   \                     ??RoadBrd_ParseString_206: (+1)
   \   000011FC   0xF8DF 0x1DC8      LDR.W    R1,??RoadBrd_ParseString_207
   \   00001200   0xA80A             ADD      R0,SP,#+40
   \   00001202   0x.... 0x....      BL       sprintf
   1503                              strcat( (char *)tempBffr2, (char *)HMeasure.Humidity );
   \   00001206   0xA949             ADD      R1,SP,#+292
   \   00001208   0xA80A             ADD      R0,SP,#+40
   \   0000120A   0x.... 0x....      BL       strcat
   1504                              strcat( (char *)tempBffr2, "\r\n" );
   \   0000120E   0xA118             ADR.N    R1,??RoadBrd_ParseString_64+0xC  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001210   0xA80A             ADD      R0,SP,#+40
   \   00001212   0x.... 0x....      BL       strcat
   1505                              break;
   \   00001216   0xE077             B.N      ??RoadBrd_ParseString_195
   1506          //------------------ D1 Command...Read Temperature Values..... 
   1507                            case '1':
   1508                              // Read Humidity Sensor sensor and return Temperature results....
   1509                              Status = RoadBrd_Humidity_ReadTemperature( &TMeasure );
   \                     ??RoadBrd_ParseString_197: (+1)
   \   00001218   0xA83C             ADD      R0,SP,#+240
   \   0000121A   0x.... 0x....      BL       RoadBrd_Humidity_ReadTemperature
   \   0000121E   0x0006             MOVS     R6,R0
   1510                              // Is this a BLE Operation?
   1511                              if ( BLE_Flag )
   \   00001220   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001222   0x2D00             CMP      R5,#+0
   \   00001224   0xD00A             BEQ.N    ??RoadBrd_ParseString_208
   1512                              {
   1513                                // Yes...Build and Send BLE Response NOW.
   1514                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001226   0xF8DF 0x1DA4      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   0000122A   0xA80A             ADD      R0,SP,#+40
   \   0000122C   0x.... 0x....      BL       strcpy
   1515                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001230   0xA80A             ADD      R0,SP,#+40
   \   00001232   0x.... 0x....      BL       strlen
   \   00001236   0xA90A             ADD      R1,SP,#+40
   \   00001238   0x.... 0x....      BL       BGM111_Transmit
   1516                              }
   1517          
   1518                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_208: (+1)
   \   0000123C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000123E   0x2E00             CMP      R6,#+0
   \   00001240   0xD136             BNE.N    ??RoadBrd_ParseString_209
   1519                              {
   1520                                // Send string to UART..
   1521                                strcpy( (char *)tempBffr2, "Humidity SENSOR...\r\n");
   \   00001242   0xF8DF 0x1B70      LDR.W    R1,??RoadBrd_ParseString_185+0x4
   \   00001246   0xA80A             ADD      R0,SP,#+40
   \   00001248   0x.... 0x....      BL       strcpy
   1522          #ifdef NUCLEO
   1523                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1524          #else
   1525                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000124C   0xA90A             ADD      R1,SP,#+40
   \   0000124E   0x2000             MOVS     R0,#+0
   \   00001250   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001254   0x0006             MOVS     R6,R0
   1526          #endif
   1527                                if (Status != HAL_OK)
   \   00001256   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001258   0x2E00             CMP      R6,#+0
   \   0000125A   0xD013             BEQ.N    ??RoadBrd_ParseString_210
   1528                                  return Status;
   \   0000125C   0x0030             MOVS     R0,R6
   \   0000125E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001260   0xF003 0xBB6F      B.W      ??RoadBrd_ParseString_4
   \                     ??RoadBrd_ParseString_64:
   \   00001264   0x........         DC32     ?_27
   \   00001268   0x........         DC32     ?_28
   \   0000126C   0x........         DC32     ?_29
   \   00001270   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
   \   00001274   0x........         DC32     ?_30
   \   00001278   0x........         DC32     ?_31
   \   0000127C   0x........         DC32     ?_32
   \   00001280   0x........         DC32     ?_33
   1529                                // NOW, Build Data String..
   1530                                sprintf( (char *)tempBffr2, "     TEMP DATA: " );
   \                     ??RoadBrd_ParseString_210: (+1)
   \   00001284   0x4937             LDR.N    R1,??RoadBrd_ParseString_72+0x4
   \   00001286   0xA80A             ADD      R0,SP,#+40
   \   00001288   0x.... 0x....      BL       sprintf
   1531                                strcat( (char *)tempBffr2, (char *)TMeasure.Raw );
   \   0000128C   0xF10D 0x01FE      ADD      R1,SP,#+254
   \   00001290   0xA80A             ADD      R0,SP,#+40
   \   00001292   0x.... 0x....      BL       strcat
   1532                                strcat( (char *)tempBffr2, "\r\n" );
   \   00001296   0xA1B6             ADR.N    R1,??RoadBrd_ParseString_104+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001298   0xA80A             ADD      R0,SP,#+40
   \   0000129A   0x.... 0x....      BL       strcat
   1533                              }
   1534                              else
   1535                                break;
   1536          #ifdef NUCLEO
   1537                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1538          #else
   1539                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000129E   0xA90A             ADD      R1,SP,#+40
   \   000012A0   0x2000             MOVS     R0,#+0
   \   000012A2   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000012A6   0x0006             MOVS     R6,R0
   1540          #endif
   1541                              if (Status != HAL_OK)
   \   000012A8   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000012AA   0x2E00             CMP      R6,#+0
   \   000012AC   0xD101             BNE.N    ??RoadBrd_ParseString_211
   \   000012AE   0xE004             B.N      ??RoadBrd_ParseString_212
   \                     ??RoadBrd_ParseString_209: (+1)
   \   000012B0   0xE02A             B.N      ??RoadBrd_ParseString_195
   1542                                return Status;
   \                     ??RoadBrd_ParseString_211: (+1)
   \   000012B2   0x0030             MOVS     R0,R6
   \   000012B4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000012B6   0xF003 0xBB44      B.W      ??RoadBrd_ParseString_4
   1543                              // NOW, Build Data String..
   1544                              sprintf( (char *)tempBffr2, "     TEMP DATA(Decimal): %d\r\n", TMeasure.RawC );
   \                     ??RoadBrd_ParseString_212: (+1)
   \   000012BA   0xF8BD 0x2106      LDRH     R2,[SP, #+262]
   \   000012BE   0x492A             LDR.N    R1,??RoadBrd_ParseString_72+0x8
   \   000012C0   0xA80A             ADD      R0,SP,#+40
   \   000012C2   0x.... 0x....      BL       sprintf
   1545          #ifdef NUCLEO
   1546                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1547          #else
   1548                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000012C6   0xA90A             ADD      R1,SP,#+40
   \   000012C8   0x2000             MOVS     R0,#+0
   \   000012CA   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000012CE   0x0006             MOVS     R6,R0
   1549          #endif
   1550                              if (Status != HAL_OK)
   \   000012D0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000012D2   0x2E00             CMP      R6,#+0
   \   000012D4   0xD003             BEQ.N    ??RoadBrd_ParseString_213
   1551                                return Status;
   \   000012D6   0x0030             MOVS     R0,R6
   \   000012D8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000012DA   0xF003 0xBB32      B.W      ??RoadBrd_ParseString_4
   1552                              // Now calculate Celcius and Farenheit Temp.
   1553                              sprintf( (char *)tempBffr2, "     TempC: " );
   \                     ??RoadBrd_ParseString_213: (+1)
   \   000012DE   0x494B             LDR.N    R1,??RoadBrd_ParseString_79
   \   000012E0   0xA80A             ADD      R0,SP,#+40
   \   000012E2   0x.... 0x....      BL       sprintf
   1554                              strcat( (char *)tempBffr2, (char *)TMeasure.TempC );
   \   000012E6   0xA93C             ADD      R1,SP,#+240
   \   000012E8   0xA80A             ADD      R0,SP,#+40
   \   000012EA   0x.... 0x....      BL       strcat
   1555                              strcat( (char *)tempBffr2, "     TempF: " );
   \   000012EE   0x4948             LDR.N    R1,??RoadBrd_ParseString_79+0x4
   \   000012F0   0xA80A             ADD      R0,SP,#+40
   \   000012F2   0x.... 0x....      BL       strcat
   1556                              strcat( (char *)tempBffr2, (char *)TMeasure.TempF );
   \   000012F6   0xF10D 0x01F7      ADD      R1,SP,#+247
   \   000012FA   0xA80A             ADD      R0,SP,#+40
   \   000012FC   0x.... 0x....      BL       strcat
   1557                              strcat( (char *)tempBffr2, "\r\n" );
   \   00001300   0xA19B             ADR.N    R1,??RoadBrd_ParseString_104+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001302   0xA80A             ADD      R0,SP,#+40
   \   00001304   0x.... 0x....      BL       strcat
   1558                              break;
   1559                          } //EndSwitch
   1560                        } //EndElse (Size == 1)
   1561                        break;
   \                     ??RoadBrd_ParseString_195: (+1)
   \   00001308   0xF003 0xBAA1      B.W      ??RoadBrd_ParseString_27
   1562          //**************************************************************************************************
   1563                      case 'E':
   1564                        // Read Temp and Pressure. 
   1565                        // Is this a BLE Operation?
   1566                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_16: (+1)
   \   0000130C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000130E   0x2D00             CMP      R5,#+0
   \   00001310   0xD00A             BEQ.N    ??RoadBrd_ParseString_214
   1567                        {
   1568                          // Yes...Build and Send BLE Response NOW.
   1569                          strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001312   0xF8DF 0x1CB8      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   00001316   0xA80A             ADD      R0,SP,#+40
   \   00001318   0x.... 0x....      BL       strcpy
   1570                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000131C   0xA80A             ADD      R0,SP,#+40
   \   0000131E   0x.... 0x....      BL       strlen
   \   00001322   0xA90A             ADD      R1,SP,#+40
   \   00001324   0x.... 0x....      BL       BGM111_Transmit
   1571                        }
   1572                        
   1573                        strcpy( (char *)tempBffr2, "TBD: Read Temp and Pressure NOT IMPLEMENTED\r\n");
   \                     ??RoadBrd_ParseString_214: (+1)
   \   00001328   0xF8DF 0x1D80      LDR.W    R1,??RoadBrd_ParseString_215
   \   0000132C   0xA80A             ADD      R0,SP,#+40
   \   0000132E   0x.... 0x....      BL       strcpy
   1574                        break;
   \   00001332   0xF003 0xBA8C      B.W      ??RoadBrd_ParseString_27
   1575          //**************************************************************************************************
   1576                      case 'F':
   1577                        // NO ACTION. 
   1578                        // Is this a BLE Operation?
   1579                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_17: (+1)
   \   00001336   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001338   0x2D00             CMP      R5,#+0
   \   0000133A   0xD00A             BEQ.N    ??RoadBrd_ParseString_216
   1580                        {
   1581                          // Yes...Build and Send BLE Response NOW.
   1582                          strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   0000133C   0xF8DF 0x1C8C      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   00001340   0xA80A             ADD      R0,SP,#+40
   \   00001342   0x.... 0x....      BL       strcpy
   1583                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001346   0xA80A             ADD      R0,SP,#+40
   \   00001348   0x.... 0x....      BL       strlen
   \   0000134C   0xA90A             ADD      R1,SP,#+40
   \   0000134E   0x.... 0x....      BL       BGM111_Transmit
   1584                        }
   1585                        
   1586                        strcpy( (char *)tempBffr2, "NO Action...(0x00).\r\n");
   \                     ??RoadBrd_ParseString_216: (+1)
   \   00001352   0xF8DF 0x1D5C      LDR.W    R1,??RoadBrd_ParseString_215+0x4
   \   00001356   0xA80A             ADD      R0,SP,#+40
   \   00001358   0x.... 0x....      BL       strcpy
   1587                        break;
   \   0000135C   0xF003 0xBA77      B.W      ??RoadBrd_ParseString_27
   \                     ??RoadBrd_ParseString_72:
   \   00001360   0x........         DC32     ?_34
   \   00001364   0x........         DC32     ?_35
   \   00001368   0x........         DC32     ?_36
   1588          //**************************************************************************************************
   1589                      case 'G':
   1590                        // Read Temperature sensor and return results....Temperature Sensor U10(PCT2075GVJ).  Addr: 0x94
   1591                        Status = RoadBrd_ReadTemp( &TMeasure );
   \                     ??RoadBrd_ParseString_18: (+1)
   \   0000136C   0xA83C             ADD      R0,SP,#+240
   \   0000136E   0x.... 0x....      BL       RoadBrd_ReadTemp
   \   00001372   0x0006             MOVS     R6,R0
   1592                        if (Status == HAL_OK)
   \   00001374   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001376   0x2E00             CMP      R6,#+0
   \   00001378   0xD103             BNE.N    ??RoadBrd_ParseString_217
   1593                          Status = RoadBrd_ReadTemp_Scaled( &TMeasureScaled );
   \   0000137A   0xA8BF             ADD      R0,SP,#+764
   \   0000137C   0x.... 0x....      BL       RoadBrd_ReadTemp_Scaled
   \   00001380   0x0006             MOVS     R6,R0
   1594                        if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_217: (+1)
   \   00001382   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001384   0x2E00             CMP      R6,#+0
   \   00001386   0xD127             BNE.N    ??RoadBrd_ParseString_218
   1595                        {
   1596                          // Send string to UART..
   1597                          strcpy( (char *)tempBffr2, "TEMP SENSOR...\r\n");
   \   00001388   0xF8DF 0x1D28      LDR.W    R1,??RoadBrd_ParseString_215+0x8
   \   0000138C   0xA80A             ADD      R0,SP,#+40
   \   0000138E   0x.... 0x....      BL       strcpy
   1598          #ifdef NUCLEO
   1599                          Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1600          #else
   1601                          Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00001392   0xA90A             ADD      R1,SP,#+40
   \   00001394   0x2000             MOVS     R0,#+0
   \   00001396   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000139A   0x0006             MOVS     R6,R0
   1602          #endif
   1603                          if (Status != HAL_OK)
   \   0000139C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000139E   0x2E00             CMP      R6,#+0
   \   000013A0   0xD003             BEQ.N    ??RoadBrd_ParseString_219
   1604                            return Status;
   \   000013A2   0x0030             MOVS     R0,R6
   \   000013A4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000013A6   0xF003 0xBACC      B.W      ??RoadBrd_ParseString_4
   1605                          // NOW, Build Data String..
   1606                          sprintf( (char *)tempBffr2, "     TEMP DATA: " );
   \                     ??RoadBrd_ParseString_219: (+1)
   \   000013AA   0xF8DF 0x1D0C      LDR.W    R1,??RoadBrd_ParseString_215+0xC
   \   000013AE   0xA80A             ADD      R0,SP,#+40
   \   000013B0   0x.... 0x....      BL       sprintf
   1607                          strcat( (char *)tempBffr2, (char *)TMeasure.Raw );
   \   000013B4   0xF10D 0x01FE      ADD      R1,SP,#+254
   \   000013B8   0xA80A             ADD      R0,SP,#+40
   \   000013BA   0x.... 0x....      BL       strcat
   1608                          strcat( (char *)tempBffr2, "\r\n" );
   \   000013BE   0xA16C             ADR.N    R1,??RoadBrd_ParseString_104+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   000013C0   0xA80A             ADD      R0,SP,#+40
   \   000013C2   0x.... 0x....      BL       strcat
   1609                        }
   1610                        else
   1611                          break;
   1612          #ifdef NUCLEO
   1613                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1614          #else
   1615                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000013C6   0xA90A             ADD      R1,SP,#+40
   \   000013C8   0x2000             MOVS     R0,#+0
   \   000013CA   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000013CE   0x0006             MOVS     R6,R0
   1616          #endif
   1617                        if (Status != HAL_OK)
   \   000013D0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000013D2   0x2E00             CMP      R6,#+0
   \   000013D4   0xD102             BNE.N    ??RoadBrd_ParseString_220
   \   000013D6   0xE005             B.N      ??RoadBrd_ParseString_221
   \                     ??RoadBrd_ParseString_218: (+1)
   \   000013D8   0xF003 0xBA39      B.W      ??RoadBrd_ParseString_27
   1618                          return Status;
   \                     ??RoadBrd_ParseString_220: (+1)
   \   000013DC   0x0030             MOVS     R0,R6
   \   000013DE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000013E0   0xF003 0xBAAF      B.W      ??RoadBrd_ParseString_4
   1619                        // NOW, Build Data String..
   1620                        sprintf( (char *)tempBffr2, "     TEMP DATA(Decimal): %d\r\n", TMeasure.RawC );
   \                     ??RoadBrd_ParseString_221: (+1)
   \   000013E4   0xF8BD 0x2106      LDRH     R2,[SP, #+262]
   \   000013E8   0xF8DF 0x1DF0      LDR.W    R1,??RoadBrd_ParseString_222
   \   000013EC   0xA80A             ADD      R0,SP,#+40
   \   000013EE   0x.... 0x....      BL       sprintf
   1621          #ifdef NUCLEO
   1622                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1623          #else
   1624                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000013F2   0xA90A             ADD      R1,SP,#+40
   \   000013F4   0x2000             MOVS     R0,#+0
   \   000013F6   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000013FA   0x0006             MOVS     R6,R0
   1625          #endif
   1626                        if (Status != HAL_OK)
   \   000013FC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000013FE   0x2E00             CMP      R6,#+0
   \   00001400   0xD008             BEQ.N    ??RoadBrd_ParseString_223
   1627                          return Status;
   \   00001402   0x0030             MOVS     R0,R6
   \   00001404   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001406   0xF003 0xBA9C      B.W      ??RoadBrd_ParseString_4
   \   0000140A   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_79:
   \   0000140C   0x........         DC32     ?_37
   \   00001410   0x........         DC32     ?_38
   1628                        // Is this a BLE Operation?
   1629                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_223: (+1)
   \   00001414   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001416   0x2D00             CMP      R5,#+0
   \   00001418   0xD012             BEQ.N    ??RoadBrd_ParseString_224
   1630                        {
   1631                          // Yes...Build and Send BLE Response NOW.
   1632                          sprintf( (char *)tempBffr2, "<STATUS>TEMPC:%s/%s//TEMPF:%s/%s</STATUS>", 
   1633                                  (char *)TMeasure.TempC, 
   1634                                  (char *)TMeasureScaled.TempC,
   1635                                  (char *)TMeasure.TempF, 
   1636                                  (char *)TMeasureScaled.TempF);
   \   0000141A   0xA8C0             ADD      R0,SP,#+768
   \   0000141C   0x1CC0             ADDS     R0,R0,#+3
   \   0000141E   0x9001             STR      R0,[SP, #+4]
   \   00001420   0xF10D 0x00F7      ADD      R0,SP,#+247
   \   00001424   0x9000             STR      R0,[SP, #+0]
   \   00001426   0xABBF             ADD      R3,SP,#+764
   \   00001428   0xAA3C             ADD      R2,SP,#+240
   \   0000142A   0xF8DF 0x1DE0      LDR.W    R1,??RoadBrd_ParseString_225
   \   0000142E   0xA80A             ADD      R0,SP,#+40
   \   00001430   0x.... 0x....      BL       sprintf
   1637                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001434   0xA80A             ADD      R0,SP,#+40
   \   00001436   0x.... 0x....      BL       strlen
   \   0000143A   0xA90A             ADD      R1,SP,#+40
   \   0000143C   0x.... 0x....      BL       BGM111_Transmit
   1638                        }
   1639                        
   1640                        // Now calculate Celcius and Farenheit Temp.
   1641                        sprintf( (char *)tempBffr2, "     TempC: %s/%s     TempF: %s/%s\r\n", 
   1642                                (char *)TMeasure.TempC, 
   1643                                (char *)TMeasureScaled.TempC,
   1644                                (char *)TMeasure.TempF, 
   1645                                (char *)TMeasureScaled.TempF);
   \                     ??RoadBrd_ParseString_224: (+1)
   \   00001440   0xA8C0             ADD      R0,SP,#+768
   \   00001442   0x1CC0             ADDS     R0,R0,#+3
   \   00001444   0x9001             STR      R0,[SP, #+4]
   \   00001446   0xF10D 0x00F7      ADD      R0,SP,#+247
   \   0000144A   0x9000             STR      R0,[SP, #+0]
   \   0000144C   0xABBF             ADD      R3,SP,#+764
   \   0000144E   0xAA3C             ADD      R2,SP,#+240
   \   00001450   0xF8DF 0x1DE8      LDR.W    R1,??RoadBrd_ParseString_226
   \   00001454   0xA80A             ADD      R0,SP,#+40
   \   00001456   0x.... 0x....      BL       sprintf
   1646                        break;
   \   0000145A   0xF003 0xB9F8      B.W      ??RoadBrd_ParseString_27
   \   0000145E   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_82:
   \   00001460   0x........         DC32     ?_39
   \   00001464   0x........         DC32     ?_40
   \   00001468   0x........         DC32     ?_41
   1647          //**************************************************************************************************
   1648                      case 'H':
   1649                        // RGB Color Light Sensor U15(ISL91250).  Addr: 0x88
   1650                        if (Size == 1)
   \                     ??RoadBrd_ParseString_19: (+1)
   \   0000146C   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00001470   0xF1B8 0x0F01      CMP      R8,#+1
   \   00001474   0xF040 0x8080      BNE.W    ??RoadBrd_ParseString_227
   1651                        {
   1652          //------------------ H Command...Read RGB Values and Return as 3 (2 Byte Fields)....REDmsb,REDlsb,GREENmsb,GREENlsb,BLUEmsb,BLUElsb.....     
   1653                          // 1. Time to send Command and collect status.
   1654                          Status = RoadBrd_RGBReadValues( &RGBValues );
   \   00001478   0xA8B5             ADD      R0,SP,#+724
   \   0000147A   0x.... 0x....      BL       RoadBrd_RGBReadValues
   \   0000147E   0x0006             MOVS     R6,R0
   1655                          if (Status == HAL_OK)
   \   00001480   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001482   0x2E00             CMP      R6,#+0
   \   00001484   0xD176             BNE.N    ??RoadBrd_ParseString_228
   1656                          {
   1657                            // Send string to UART..
   1658                            strcpy( (char *)tempBffr2, "RGB Color Light Sensor...\r\n");
   \   00001486   0xF8DF 0x1DE4      LDR.W    R1,??RoadBrd_ParseString_229
   \   0000148A   0xA80A             ADD      R0,SP,#+40
   \   0000148C   0x.... 0x....      BL       strcpy
   1659          #ifdef NUCLEO
   1660                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1661          #else
   1662                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00001490   0xA90A             ADD      R1,SP,#+40
   \   00001492   0x2000             MOVS     R0,#+0
   \   00001494   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001498   0x0006             MOVS     R6,R0
   1663          #endif
   1664                            if (Status != HAL_OK)
   \   0000149A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000149C   0x2E00             CMP      R6,#+0
   \   0000149E   0xD003             BEQ.N    ??RoadBrd_ParseString_230
   1665                              return Status;
   \   000014A0   0x0030             MOVS     R0,R6
   \   000014A2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000014A4   0xF003 0xBA4D      B.W      ??RoadBrd_ParseString_4
   1666                            // NOW, Build Data String..
   1667                            sprintf( (char *)tempBffr2, " RGB(REDmsb,REDlsb,GREENmsb,GREENlsb,BLUEmsb,BLUElsb)\r\n" );
   \                     ??RoadBrd_ParseString_230: (+1)
   \   000014A8   0xF8DF 0x1DF0      LDR.W    R1,??RoadBrd_ParseString_231
   \   000014AC   0xA80A             ADD      R0,SP,#+40
   \   000014AE   0x.... 0x....      BL       sprintf
   1668          #ifdef NUCLEO
   1669                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1670          #else
   1671                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000014B2   0xA90A             ADD      R1,SP,#+40
   \   000014B4   0x2000             MOVS     R0,#+0
   \   000014B6   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000014BA   0x0006             MOVS     R6,R0
   1672          #endif
   1673                            if (Status != HAL_OK)
   \   000014BC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000014BE   0x2E00             CMP      R6,#+0
   \   000014C0   0xD003             BEQ.N    ??RoadBrd_ParseString_232
   1674                              return Status;
   \   000014C2   0x0030             MOVS     R0,R6
   \   000014C4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000014C6   0xF003 0xBA3C      B.W      ??RoadBrd_ParseString_4
   1675                            strcpy( (char *)tempBffr2, "       DATA: ");
   \                     ??RoadBrd_ParseString_232: (+1)
   \   000014CA   0xF8DF 0x1DD4      LDR.W    R1,??RoadBrd_ParseString_231+0x4
   \   000014CE   0xA80A             ADD      R0,SP,#+40
   \   000014D0   0x.... 0x....      BL       strcpy
   1676                            strcat( (char *)tempBffr2, (char *)RGBValues.Raw );
   \   000014D4   0xA9BB             ADD      R1,SP,#+748
   \   000014D6   0xA80A             ADD      R0,SP,#+40
   \   000014D8   0x.... 0x....      BL       strcat
   1677                            strcat( (char *)tempBffr2, "\r\n" );
   \   000014DC   0xA124             ADR.N    R1,??RoadBrd_ParseString_104+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   000014DE   0xA80A             ADD      R0,SP,#+40
   \   000014E0   0x.... 0x....      BL       strcat
   1678          #ifdef NUCLEO
   1679                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1680          #else
   1681                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000014E4   0xA90A             ADD      R1,SP,#+40
   \   000014E6   0x2000             MOVS     R0,#+0
   \   000014E8   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000014EC   0x0006             MOVS     R6,R0
   1682          #endif
   1683                            if (Status != HAL_OK)
   \   000014EE   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000014F0   0x2E00             CMP      R6,#+0
   \   000014F2   0xD007             BEQ.N    ??RoadBrd_ParseString_233
   1684                              return Status;
   \   000014F4   0x0030             MOVS     R0,R6
   \   000014F6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000014F8   0xF003 0xBA23      B.W      ??RoadBrd_ParseString_4
   \                     ??RoadBrd_ParseString_89:
   \   000014FC   0x........         DC32     ?_42
   \   00001500   0x........         DC32     ?_43
   1685                            // Is this a BLE Operation?
   1686                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_233: (+1)
   \   00001504   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001506   0x2D00             CMP      R5,#+0
   \   00001508   0xD00E             BEQ.N    ??RoadBrd_ParseString_234
   1687                            {
   1688                              // Yes...Build and Send BLE Response NOW.
   1689                              sprintf( (char *)tempBffr2, "<STATUS>RED:%s/GREEN:%s/BLUE:%s</STATUS>", 
   1690                                      (char *)RGBValues.Red, 
   1691                                      (char *)RGBValues.Green,
   1692                                      (char *)RGBValues.Blue);
   \   0000150A   0xA8B9             ADD      R0,SP,#+740
   \   0000150C   0x9000             STR      R0,[SP, #+0]
   \   0000150E   0xABB7             ADD      R3,SP,#+732
   \   00001510   0xAAB5             ADD      R2,SP,#+724
   \   00001512   0xF8DF 0x1DDC      LDR.W    R1,??RoadBrd_ParseString_235
   \   00001516   0xA80A             ADD      R0,SP,#+40
   \   00001518   0x.... 0x....      BL       sprintf
   1693                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000151C   0xA80A             ADD      R0,SP,#+40
   \   0000151E   0x.... 0x....      BL       strlen
   \   00001522   0xA90A             ADD      R1,SP,#+40
   \   00001524   0x.... 0x....      BL       BGM111_Transmit
   1694                            }
   1695                            
   1696                            // Now DisplayEach Value Calculated.
   1697                            strcpy( (char *)tempBffr2, "    Red: ");
   \                     ??RoadBrd_ParseString_234: (+1)
   \   00001528   0xF8DF 0x1DC8      LDR.W    R1,??RoadBrd_ParseString_235+0x4
   \   0000152C   0xA80A             ADD      R0,SP,#+40
   \   0000152E   0x.... 0x....      BL       strcpy
   1698                            strcat( (char *)tempBffr2, (char *)RGBValues.Red );
   \   00001532   0xA9B5             ADD      R1,SP,#+724
   \   00001534   0xA80A             ADD      R0,SP,#+40
   \   00001536   0x.... 0x....      BL       strcat
   1699                            strcat( (char *)tempBffr2, "    Green: ");
   \   0000153A   0xF8DF 0x1DBC      LDR.W    R1,??RoadBrd_ParseString_235+0x8
   \   0000153E   0xA80A             ADD      R0,SP,#+40
   \   00001540   0x.... 0x....      BL       strcat
   1700                            strcat( (char *)tempBffr2, (char *)RGBValues.Green );
   \   00001544   0xA9B7             ADD      R1,SP,#+732
   \   00001546   0xA80A             ADD      R0,SP,#+40
   \   00001548   0x.... 0x....      BL       strcat
   1701                            strcat( (char *)tempBffr2, "    Blue: ");
   \   0000154C   0xF8DF 0x1DE0      LDR.W    R1,??RoadBrd_ParseString_236
   \   00001550   0xA80A             ADD      R0,SP,#+40
   \   00001552   0x.... 0x....      BL       strcat
   1702                            strcat( (char *)tempBffr2, (char *)RGBValues.Blue );
   \   00001556   0xA9B9             ADD      R1,SP,#+740
   \   00001558   0xA80A             ADD      R0,SP,#+40
   \   0000155A   0x.... 0x....      BL       strcat
   1703                            strcat( (char *)tempBffr2, "\r\n" );
   \   0000155E   0xA104             ADR.N    R1,??RoadBrd_ParseString_104+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001560   0xA80A             ADD      R0,SP,#+40
   \   00001562   0x.... 0x....      BL       strcat
   \   00001566   0xE263             B.N      ??RoadBrd_ParseString_237
   \                     ??RoadBrd_ParseString_104:
   \   00001568   0x........         DC32     ?_44
   \   0000156C   0x........         DC32     ?_45
   \   00001570   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
   1704                          }
   1705                          else
   1706                            break;
   \                     ??RoadBrd_ParseString_228: (+1)
   \   00001574   0xF003 0xB96B      B.W      ??RoadBrd_ParseString_27
   1707                        }
   1708                        else
   1709                        {
   1710                          switch( tempBffr[1] )
   \                     ??RoadBrd_ParseString_227: (+1)
   \   00001578   0x7860             LDRB     R0,[R4, #+1]
   \   0000157A   0x2830             CMP      R0,#+48
   \   0000157C   0xF000 0x8161      BEQ.W    ??RoadBrd_ParseString_238
   \   00001580   0x2831             CMP      R0,#+49
   \   00001582   0xF000 0x81CF      BEQ.W    ??RoadBrd_ParseString_239
   \   00001586   0x2832             CMP      R0,#+50
   \   00001588   0xF000 0x81FC      BEQ.W    ??RoadBrd_ParseString_240
   \   0000158C   0x2833             CMP      R0,#+51
   \   0000158E   0xF000 0x8216      BEQ.W    ??RoadBrd_ParseString_241
   \   00001592   0x2849             CMP      R0,#+73
   \   00001594   0xF040 0x8247      BNE.W    ??RoadBrd_ParseString_242
   1711                          {
   1712          //------------------ HI Command...Initialize RGB Color Light Sensor.....     
   1713                            case 'I':
   1714                              if (Size == 2)
   \                     ??RoadBrd_ParseString_243: (+1)
   \   00001598   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000159C   0xF1B8 0x0F02      CMP      R8,#+2
   \   000015A0   0xD11A             BNE.N    ??RoadBrd_ParseString_244
   1715                              {
   1716                                // This is the default init. Assume Default Parms and write them.
   1717                                Status = RoadBrd_RGBInit();
   \   000015A2   0x.... 0x....      BL       RoadBrd_RGBInit
   \   000015A6   0x0006             MOVS     R6,R0
   1718          
   1719                                // Is this a BLE Operation?
   1720                                if ( BLE_Flag )
   \   000015A8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000015AA   0x2D00             CMP      R5,#+0
   \   000015AC   0xD00A             BEQ.N    ??RoadBrd_ParseString_245
   1721                                {
   1722                                  // Yes...Build and Send BLE Response NOW.
   1723                                  strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000015AE   0xF8DF 0x1A1C      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   000015B2   0xA80A             ADD      R0,SP,#+40
   \   000015B4   0x.... 0x....      BL       strcpy
   1724                                  BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000015B8   0xA80A             ADD      R0,SP,#+40
   \   000015BA   0x.... 0x....      BL       strlen
   \   000015BE   0xA90A             ADD      R1,SP,#+40
   \   000015C0   0x.... 0x....      BL       BGM111_Transmit
   1725                                }
   1726                                
   1727                                if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_245: (+1)
   \   000015C4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000015C6   0x2E00             CMP      R6,#+0
   \   000015C8   0xF040 0x813A      BNE.W    ??RoadBrd_ParseString_246
   1728                                {
   1729                                  strcpy( (char *)tempBffr2, "RGB Color Light Sensor: Initialization Complete with DEFAULT Values.\r\n");;
   \   000015CC   0xF8DF 0x1D64      LDR.W    R1,??RoadBrd_ParseString_236+0x4
   \   000015D0   0xA80A             ADD      R0,SP,#+40
   \   000015D2   0x.... 0x....      BL       strcpy
   \   000015D6   0xE133             B.N      ??RoadBrd_ParseString_246
   1730                                }
   1731                                
   1732                              }
   1733                              else
   1734                              {
   1735                                // Is this a BLE Operation?
   1736                                if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_244: (+1)
   \   000015D8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000015DA   0x2D00             CMP      R5,#+0
   \   000015DC   0xD00A             BEQ.N    ??RoadBrd_ParseString_247
   1737                                {
   1738                                  // Yes...Build and Send BLE Response NOW.
   1739                                  strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000015DE   0xF8DF 0x19EC      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   000015E2   0xA80A             ADD      R0,SP,#+40
   \   000015E4   0x.... 0x....      BL       strcpy
   1740                                  BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000015E8   0xA80A             ADD      R0,SP,#+40
   \   000015EA   0x.... 0x....      BL       strlen
   \   000015EE   0xA90A             ADD      R1,SP,#+40
   \   000015F0   0x.... 0x....      BL       BGM111_Transmit
   1741                                }
   1742                                
   1743                                // This is the Parameter init. Will have to verify all parameters first.
   1744                                if ( Size != 29 )
   \                     ??RoadBrd_ParseString_247: (+1)
   \   000015F4   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000015F8   0xF1B8 0x0F1D      CMP      R8,#+29
   \   000015FC   0xD005             BEQ.N    ??RoadBrd_ParseString_248
   1745                                {
   1746                                  strcpy( (char *)tempBffr2, "RGB Color Light Sensor: SYNTAX Error. Parameters are not correct.\r\n");;
   \   000015FE   0xF8DF 0x1DD0      LDR.W    R1,??RoadBrd_ParseString_249
   \   00001602   0xA80A             ADD      R0,SP,#+40
   \   00001604   0x.... 0x....      BL       strcpy
   \   00001608   0xE11A             B.N      ??RoadBrd_ParseString_246
   1747                                }
   1748                                else
   1749                                {
   1750                                  // Step 1. Validate format.
   1751                                  if( (tempBffr[2]!=':') ||
   1752                                      (tempBffr[5]!='.') || 
   1753                                      (tempBffr[8]!='.') || 
   1754                                      (tempBffr[11]!='.') || 
   1755                                      (tempBffr[14]!='.') || 
   1756                                      (tempBffr[17]!='.') || 
   1757                                      (tempBffr[20]!='.') || 
   1758                                      (tempBffr[23]!='.') || 
   1759                                      (tempBffr[26]!='.') )
   \                     ??RoadBrd_ParseString_248: (+1)
   \   0000160A   0x78A0             LDRB     R0,[R4, #+2]
   \   0000160C   0x283A             CMP      R0,#+58
   \   0000160E   0xD117             BNE.N    ??RoadBrd_ParseString_250
   \   00001610   0x7960             LDRB     R0,[R4, #+5]
   \   00001612   0x282E             CMP      R0,#+46
   \   00001614   0xD114             BNE.N    ??RoadBrd_ParseString_250
   \   00001616   0x7A20             LDRB     R0,[R4, #+8]
   \   00001618   0x282E             CMP      R0,#+46
   \   0000161A   0xD111             BNE.N    ??RoadBrd_ParseString_250
   \   0000161C   0x7AE0             LDRB     R0,[R4, #+11]
   \   0000161E   0x282E             CMP      R0,#+46
   \   00001620   0xD10E             BNE.N    ??RoadBrd_ParseString_250
   \   00001622   0x7BA0             LDRB     R0,[R4, #+14]
   \   00001624   0x282E             CMP      R0,#+46
   \   00001626   0xD10B             BNE.N    ??RoadBrd_ParseString_250
   \   00001628   0x7C60             LDRB     R0,[R4, #+17]
   \   0000162A   0x282E             CMP      R0,#+46
   \   0000162C   0xD108             BNE.N    ??RoadBrd_ParseString_250
   \   0000162E   0x7D20             LDRB     R0,[R4, #+20]
   \   00001630   0x282E             CMP      R0,#+46
   \   00001632   0xD105             BNE.N    ??RoadBrd_ParseString_250
   \   00001634   0x7DE0             LDRB     R0,[R4, #+23]
   \   00001636   0x282E             CMP      R0,#+46
   \   00001638   0xD102             BNE.N    ??RoadBrd_ParseString_250
   \   0000163A   0x7EA0             LDRB     R0,[R4, #+26]
   \   0000163C   0x282E             CMP      R0,#+46
   \   0000163E   0xD005             BEQ.N    ??RoadBrd_ParseString_251
   1760                                  {
   1761                                    strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: Not correct format. Punctuation!\r\n");
   \                     ??RoadBrd_ParseString_250: (+1)
   \   00001640   0xF8DF 0x1D98      LDR.W    R1,??RoadBrd_ParseString_249+0xC
   \   00001644   0xA80A             ADD      R0,SP,#+40
   \   00001646   0x.... 0x....      BL       strcpy
   \   0000164A   0xE0F9             B.N      ??RoadBrd_ParseString_246
   1762                                  }
   1763                                  else
   1764                                  {
   1765                                    // Syntax correct. Time to grab parameters.
   1766                                    Error = 0;
   \                     ??RoadBrd_ParseString_251: (+1)
   \   0000164C   0x2000             MOVS     R0,#+0
   \   0000164E   0x9035             STR      R0,[SP, #+212]
   1767                                    for (x=0; x<9; x++)
   \   00001650   0x2000             MOVS     R0,#+0
   \   00001652   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_252: (+1)
   \   00001654   0x2F09             CMP      R7,#+9
   \   00001656   0xDA26             BGE.N    ??RoadBrd_ParseString_253
   1768                                    {
   1769                                      tempBffr3[0] = tempBffr[3+x*3];
   \   00001658   0x2003             MOVS     R0,#+3
   \   0000165A   0xFB00 0xF007      MUL      R0,R0,R7
   \   0000165E   0x4420             ADD      R0,R4,R0
   \   00001660   0xF990 0x0003      LDRSB    R0,[R0, #+3]
   \   00001664   0xF88D 0x00A8      STRB     R0,[SP, #+168]
   1770                                      tempBffr3[1] = tempBffr[4+x*3];
   \   00001668   0x2003             MOVS     R0,#+3
   \   0000166A   0xFB00 0xF007      MUL      R0,R0,R7
   \   0000166E   0x4420             ADD      R0,R4,R0
   \   00001670   0xF990 0x0004      LDRSB    R0,[R0, #+4]
   \   00001674   0xF88D 0x00A9      STRB     R0,[SP, #+169]
   1771                                      tempBffr3[2] = 0x00;
   \   00001678   0x2000             MOVS     R0,#+0
   \   0000167A   0xF88D 0x00AA      STRB     R0,[SP, #+170]
   1772                                      if (isHexNum( (char *)tempBffr3 ) == 0)
   \   0000167E   0xA82A             ADD      R0,SP,#+168
   \   00001680   0x.... 0x....      BL       isHexNum
   \   00001684   0x2800             CMP      R0,#+0
   \   00001686   0xD107             BNE.N    ??RoadBrd_ParseString_254
   1773                                      {
   1774                                        strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR:Parameters not HEX Value.\r\n");
   \   00001688   0xF8DF 0x1DCC      LDR.W    R1,??RoadBrd_ParseString_255
   \   0000168C   0xA80A             ADD      R0,SP,#+40
   \   0000168E   0x.... 0x....      BL       strcpy
   1775                                        Error = 1;
   \   00001692   0x2001             MOVS     R0,#+1
   \   00001694   0x9035             STR      R0,[SP, #+212]
   1776                                        break;
   \   00001696   0xE006             B.N      ??RoadBrd_ParseString_253
   1777                                      }
   1778                                      else
   1779                                      {
   1780                                        i2cData[x] =  hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_254: (+1)
   \   00001698   0xA82A             ADD      R0,SP,#+168
   \   0000169A   0x.... 0x....      BL       hatoi
   \   0000169E   0xA99A             ADD      R1,SP,#+616
   \   000016A0   0x55C8             STRB     R0,[R1, R7]
   1781                                      } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)
   1782                                    } //EndFor (x=0; x<num_bytes; x++)
   \   000016A2   0x1C7F             ADDS     R7,R7,#+1
   \   000016A4   0xE7D6             B.N      ??RoadBrd_ParseString_252
   1783                                    // Format and parameters now in i2cData array. Pull them out and validate them.
   1784                                    // OP_MODE Verify.
   1785                                    if(i2cData[0]>7)
   \                     ??RoadBrd_ParseString_253: (+1)
   \   000016A6   0xF89D 0x0268      LDRB     R0,[SP, #+616]
   \   000016AA   0x2808             CMP      R0,#+8
   \   000016AC   0xDB05             BLT.N    ??RoadBrd_ParseString_256
   1786                                    {
   1787                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: OP_MODE.\r\n");
   \   000016AE   0xF8DF 0x1DAC      LDR.W    R1,??RoadBrd_ParseString_255+0x4
   \   000016B2   0xA80A             ADD      R0,SP,#+40
   \   000016B4   0x.... 0x....      BL       strcpy
   1788                                      break;
   \   000016B8   0xE1BA             B.N      ??RoadBrd_ParseString_237
   1789                                    }
   1790                                    else
   1791                                      op_mode = (i2cData[0] & 0x07) * 1;
   \                     ??RoadBrd_ParseString_256: (+1)
   \   000016BA   0xF89D 0x0268      LDRB     R0,[SP, #+616]
   \   000016BE   0xF010 0x0007      ANDS     R0,R0,#0x7
   \   000016C2   0xF88D 0x00CD      STRB     R0,[SP, #+205]
   1792                                    // DS_RANGE Verify.
   1793                                    if(i2cData[1]>1)
   \   000016C6   0xF89D 0x0269      LDRB     R0,[SP, #+617]
   \   000016CA   0x2802             CMP      R0,#+2
   \   000016CC   0xDB08             BLT.N    ??RoadBrd_ParseString_257
   1794                                    {
   1795                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: DS_RANGE.\r\n");
   \   000016CE   0xF8DF 0x1E08      LDR.W    R1,??RoadBrd_ParseString_258
   \   000016D2   0xA80A             ADD      R0,SP,#+40
   \   000016D4   0x.... 0x....      BL       strcpy
   1796                                      break;
   \   000016D8   0xE1AA             B.N      ??RoadBrd_ParseString_237
   \   000016DA   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_107:
   \   000016DC   0x........         DC32     ?_46
   1797                                    }
   1798                                    else
   1799                                      ds_range = (i2cData[1] & 0x01) * 8;
   \                     ??RoadBrd_ParseString_257: (+1)
   \   000016E0   0xF89D 0x0269      LDRB     R0,[SP, #+617]
   \   000016E4   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   000016E8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000016EA   0x00C0             LSLS     R0,R0,#+3
   \   000016EC   0xF88D 0x00CC      STRB     R0,[SP, #+204]
   1800                                    // ADC_RSL Verify.
   1801                                    if(i2cData[2]>1)
   \   000016F0   0xF89D 0x026A      LDRB     R0,[SP, #+618]
   \   000016F4   0x2802             CMP      R0,#+2
   \   000016F6   0xDB05             BLT.N    ??RoadBrd_ParseString_259
   1802                                    {
   1803                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: ADC_RSL.\r\n");
   \   000016F8   0xF8DF 0x1DE0      LDR.W    R1,??RoadBrd_ParseString_258+0x4
   \   000016FC   0xA80A             ADD      R0,SP,#+40
   \   000016FE   0x.... 0x....      BL       strcpy
   1804                                      break;
   \   00001702   0xE195             B.N      ??RoadBrd_ParseString_237
   1805                                    }
   1806                                    else
   1807                                      adc_rsl = (i2cData[2] & 0x01) * 16;
   \                     ??RoadBrd_ParseString_259: (+1)
   \   00001704   0xF89D 0x026A      LDRB     R0,[SP, #+618]
   \   00001708   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   0000170C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000170E   0x0100             LSLS     R0,R0,#+4
   \   00001710   0xF88D 0x00CB      STRB     R0,[SP, #+203]
   1808                                    // SYNC Verify.
   1809                                    if(i2cData[3]>1)
   \   00001714   0xF89D 0x026B      LDRB     R0,[SP, #+619]
   \   00001718   0x2802             CMP      R0,#+2
   \   0000171A   0xDB09             BLT.N    ??RoadBrd_ParseString_260
   1810                                    {
   1811                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: SYNC.\r\n");
   \   0000171C   0xF8DF 0x1DC0      LDR.W    R1,??RoadBrd_ParseString_258+0x8
   \   00001720   0xA80A             ADD      R0,SP,#+40
   \   00001722   0x.... 0x....      BL       strcpy
   1812                                      break;
   \   00001726   0xE183             B.N      ??RoadBrd_ParseString_237
   \                     ??RoadBrd_ParseString_110:
   \   00001728   0x........         DC32     ?_47
   \   0000172C   0x........         DC32     ?_48
   1813                                    }
   1814                                    else
   1815                                      sync = (i2cData[3] & 0x01) * 32;
   \                     ??RoadBrd_ParseString_260: (+1)
   \   00001730   0xF89D 0x026B      LDRB     R0,[SP, #+619]
   \   00001734   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00001738   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000173A   0x0140             LSLS     R0,R0,#+5
   \   0000173C   0xF88D 0x00CA      STRB     R0,[SP, #+202]
   1816                                    // CMP_ADJST Verify.
   1817                                    if(i2cData[4]>63)
   \   00001740   0xF89D 0x026C      LDRB     R0,[SP, #+620]
   \   00001744   0x2840             CMP      R0,#+64
   \   00001746   0xDB05             BLT.N    ??RoadBrd_ParseString_261
   1818                                    {
   1819                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: CMP_ADJST.\r\n");
   \   00001748   0xF8DF 0x1E10      LDR.W    R1,??RoadBrd_ParseString_262
   \   0000174C   0xA80A             ADD      R0,SP,#+40
   \   0000174E   0x.... 0x....      BL       strcpy
   1820                                      break;
   \   00001752   0xE16D             B.N      ??RoadBrd_ParseString_237
   1821                                    }
   1822                                    else
   1823                                      cmp_adjst = (i2cData[4] & 0x3f) * 1;
   \                     ??RoadBrd_ParseString_261: (+1)
   \   00001754   0xF89D 0x026C      LDRB     R0,[SP, #+620]
   \   00001758   0xF010 0x003F      ANDS     R0,R0,#0x3F
   \   0000175C   0xF88D 0x00C9      STRB     R0,[SP, #+201]
   1824                                    // CMP_OFFST Verify.
   1825                                    if(i2cData[5]>1)
   \   00001760   0xF89D 0x026D      LDRB     R0,[SP, #+621]
   \   00001764   0x2802             CMP      R0,#+2
   \   00001766   0xDB05             BLT.N    ??RoadBrd_ParseString_263
   1826                                    {
   1827                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: CMP_OFFST.\r\n");
   \   00001768   0xF8DF 0x1DF4      LDR.W    R1,??RoadBrd_ParseString_262+0x4
   \   0000176C   0xA80A             ADD      R0,SP,#+40
   \   0000176E   0x.... 0x....      BL       strcpy
   1828                                      break;
   \   00001772   0xE15D             B.N      ??RoadBrd_ParseString_237
   1829                                    }
   1830                                    else
   1831                                      cmp_offst = (i2cData[5] & 0x01) * 128;
   \                     ??RoadBrd_ParseString_263: (+1)
   \   00001774   0xF89D 0x026D      LDRB     R0,[SP, #+621]
   \   00001778   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   0000177C   0x2180             MOVS     R1,#+128
   \   0000177E   0x4348             MULS     R0,R1,R0
   \   00001780   0xF88D 0x00C8      STRB     R0,[SP, #+200]
   1832                                    // INT_ASSGN Verify.
   1833                                    if(i2cData[6]>3)
   \   00001784   0xF89D 0x026E      LDRB     R0,[SP, #+622]
   \   00001788   0x2804             CMP      R0,#+4
   \   0000178A   0xDB05             BLT.N    ??RoadBrd_ParseString_264
   1834                                    {
   1835                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: INT_ASSGN.\r\n");
   \   0000178C   0xF8DF 0x1DD4      LDR.W    R1,??RoadBrd_ParseString_262+0x8
   \   00001790   0xA80A             ADD      R0,SP,#+40
   \   00001792   0x.... 0x....      BL       strcpy
   1836                                      break;
   \   00001796   0xE14B             B.N      ??RoadBrd_ParseString_237
   1837                                    }
   1838                                    else
   1839                                      int_assgn = (i2cData[6] & 0x03) * 1;
   \                     ??RoadBrd_ParseString_264: (+1)
   \   00001798   0xF89D 0x026E      LDRB     R0,[SP, #+622]
   \   0000179C   0xF010 0x0003      ANDS     R0,R0,#0x3
   \   000017A0   0xF88D 0x00B7      STRB     R0,[SP, #+183]
   1840                                    // INT_PERSIST Verify.
   1841                                    if(i2cData[7]>3)
   \   000017A4   0xF89D 0x026F      LDRB     R0,[SP, #+623]
   \   000017A8   0x2804             CMP      R0,#+4
   \   000017AA   0xDB05             BLT.N    ??RoadBrd_ParseString_265
   1842                                    {
   1843                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: INT_PERSIST.\r\n");
   \   000017AC   0xF8DF 0x1E30      LDR.W    R1,??RoadBrd_ParseString_266
   \   000017B0   0xA80A             ADD      R0,SP,#+40
   \   000017B2   0x.... 0x....      BL       strcpy
   1844                                      break;
   \   000017B6   0xE13B             B.N      ??RoadBrd_ParseString_237
   1845                                    }
   1846                                    else
   1847                                      int_persist = (i2cData[7] & 0x03) * 4;
   \                     ??RoadBrd_ParseString_265: (+1)
   \   000017B8   0xF89D 0x026F      LDRB     R0,[SP, #+623]
   \   000017BC   0xF010 0x0003      ANDS     R0,R0,#0x3
   \   000017C0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000017C2   0x0080             LSLS     R0,R0,#+2
   \   000017C4   0xF88D 0x00B6      STRB     R0,[SP, #+182]
   1848                                    // CNVRSN_INT Verify.
   1849                                    if(i2cData[8]>1)
   \   000017C8   0xF89D 0x0270      LDRB     R0,[SP, #+624]
   \   000017CC   0x2802             CMP      R0,#+2
   \   000017CE   0xDB05             BLT.N    ??RoadBrd_ParseString_267
   1850                                    {
   1851                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: CNVRSN_INT.\r\n");
   \   000017D0   0xF8DF 0x1E10      LDR.W    R1,??RoadBrd_ParseString_266+0x4
   \   000017D4   0xA80A             ADD      R0,SP,#+40
   \   000017D6   0x.... 0x....      BL       strcpy
   1852                                      break;
   \   000017DA   0xE129             B.N      ??RoadBrd_ParseString_237
   1853                                    }
   1854                                    else
   1855                                      cnvrsn_int = (i2cData[8] & 0x01) * 16;
   \                     ??RoadBrd_ParseString_267: (+1)
   \   000017DC   0xF89D 0x0270      LDRB     R0,[SP, #+624]
   \   000017E0   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   000017E4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000017E6   0x0100             LSLS     R0,R0,#+4
   \   000017E8   0xF88D 0x00B5      STRB     R0,[SP, #+181]
   1856                                    // OK, all parameters have been verified. Time to build final params.
   1857                                    RGBMeasure.config1 = op_mode + ds_range + adc_rsl + sync;
   \   000017EC   0xF89D 0x00CD      LDRB     R0,[SP, #+205]
   \   000017F0   0xF89D 0x10CC      LDRB     R1,[SP, #+204]
   \   000017F4   0x1808             ADDS     R0,R1,R0
   \   000017F6   0xF89D 0x10CB      LDRB     R1,[SP, #+203]
   \   000017FA   0x1808             ADDS     R0,R1,R0
   \   000017FC   0xF89D 0x10CA      LDRB     R1,[SP, #+202]
   \   00001800   0x1808             ADDS     R0,R1,R0
   \   00001802   0xF88D 0x00EC      STRB     R0,[SP, #+236]
   1858                                    RGBMeasure.config2 = cmp_adjst + cmp_offst;
   \   00001806   0xF89D 0x00C9      LDRB     R0,[SP, #+201]
   \   0000180A   0xF89D 0x10C8      LDRB     R1,[SP, #+200]
   \   0000180E   0x1808             ADDS     R0,R1,R0
   \   00001810   0xF88D 0x00ED      STRB     R0,[SP, #+237]
   1859                                    RGBMeasure.config3 = int_assgn + int_persist + cnvrsn_int;
   \   00001814   0xF89D 0x00B7      LDRB     R0,[SP, #+183]
   \   00001818   0xF89D 0x10B6      LDRB     R1,[SP, #+182]
   \   0000181C   0x1808             ADDS     R0,R1,R0
   \   0000181E   0xF89D 0x10B5      LDRB     R1,[SP, #+181]
   \   00001822   0x1808             ADDS     R0,R1,R0
   \   00001824   0xF88D 0x00EE      STRB     R0,[SP, #+238]
   1860                                    // Load Config Register with Config Settings
   1861                                    Status = RoadBrd_RGBFullInit( &RGBMeasure );
   \   00001828   0xA83B             ADD      R0,SP,#+236
   \   0000182A   0x.... 0x....      BL       RoadBrd_RGBFullInit
   \   0000182E   0x0006             MOVS     R6,R0
   1862          
   1863                                    if (Status == HAL_OK)
   \   00001830   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001832   0x2E00             CMP      R6,#+0
   \   00001834   0xD104             BNE.N    ??RoadBrd_ParseString_246
   1864                                    {
   1865                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor: Initialization Complete with USER Values.\r\n");;
   \   00001836   0xF8DF 0x1DB0      LDR.W    R1,??RoadBrd_ParseString_266+0x8
   \   0000183A   0xA80A             ADD      R0,SP,#+40
   \   0000183C   0x.... 0x....      BL       strcpy
   1866                                    }
   1867                                  } //ElseIf Validate format.
   1868                                } //ElseIf ( Size != 29 )
   1869                              } //ElseIf (Size == 2)
   1870                              break;
   \                     ??RoadBrd_ParseString_246: (+1)
   \   00001840   0xE0F6             B.N      ??RoadBrd_ParseString_237
   1871          //------------------ H0 Command...Read RGB Values and Return as 3 (2 Byte Fields)....REDmsb,REDlsb,GREENmsb,GREENlsb,BLUEmsb,BLUElsb.....     
   1872                            case '0':
   1873                              // 1. Time to send Command and collect status.
   1874                              Status = RoadBrd_RGBReadValues( &RGBValues );
   \                     ??RoadBrd_ParseString_238: (+1)
   \   00001842   0xA8B5             ADD      R0,SP,#+724
   \   00001844   0x.... 0x....      BL       RoadBrd_RGBReadValues
   \   00001848   0x0006             MOVS     R6,R0
   1875                              // Is this a BLE Operation?
   1876                              if ( BLE_Flag )
   \   0000184A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000184C   0x2D00             CMP      R5,#+0
   \   0000184E   0xD00A             BEQ.N    ??RoadBrd_ParseString_268
   1877                              {
   1878                                // Yes...Build and Send BLE Response NOW.
   1879                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001850   0xF8DF 0x1778      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   00001854   0xA80A             ADD      R0,SP,#+40
   \   00001856   0x.... 0x....      BL       strcpy
   1880                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000185A   0xA80A             ADD      R0,SP,#+40
   \   0000185C   0x.... 0x....      BL       strlen
   \   00001860   0xA90A             ADD      R1,SP,#+40
   \   00001862   0x.... 0x....      BL       BGM111_Transmit
   1881                              }
   1882                              
   1883                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_268: (+1)
   \   00001866   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001868   0x2E00             CMP      R6,#+0
   \   0000186A   0xD15A             BNE.N    ??RoadBrd_ParseString_269
   1884                              {
   1885                                // Send string to UART..
   1886                                strcpy( (char *)tempBffr2, "RGB Color Light Sensor...\r\n");
   \   0000186C   0xF8DF 0x19FC      LDR.W    R1,??RoadBrd_ParseString_229
   \   00001870   0xA80A             ADD      R0,SP,#+40
   \   00001872   0x.... 0x....      BL       strcpy
   1887          #ifdef NUCLEO
   1888                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1889          #else
   1890                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00001876   0xA90A             ADD      R1,SP,#+40
   \   00001878   0x2000             MOVS     R0,#+0
   \   0000187A   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000187E   0x0006             MOVS     R6,R0
   1891          #endif
   1892                                if (Status != HAL_OK)
   \   00001880   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001882   0x2E00             CMP      R6,#+0
   \   00001884   0xD003             BEQ.N    ??RoadBrd_ParseString_270
   1893                                  return Status;
   \   00001886   0x0030             MOVS     R0,R6
   \   00001888   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000188A   0xF003 0xB85A      B.W      ??RoadBrd_ParseString_4
   1894                                // NOW, Build Data String..
   1895                                sprintf( (char *)tempBffr2, " RGB(REDmsb,REDlsb,GREENmsb,GREENlsb,BLUEmsb,BLUElsb)\r\n" );
   \                     ??RoadBrd_ParseString_270: (+1)
   \   0000188E   0xF8DF 0x1A0C      LDR.W    R1,??RoadBrd_ParseString_231
   \   00001892   0xA80A             ADD      R0,SP,#+40
   \   00001894   0x.... 0x....      BL       sprintf
   1896          #ifdef NUCLEO
   1897                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1898          #else
   1899                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00001898   0xA90A             ADD      R1,SP,#+40
   \   0000189A   0x2000             MOVS     R0,#+0
   \   0000189C   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000018A0   0x0006             MOVS     R6,R0
   1900          #endif
   1901                                if (Status != HAL_OK)
   \   000018A2   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000018A4   0x2E00             CMP      R6,#+0
   \   000018A6   0xD003             BEQ.N    ??RoadBrd_ParseString_271
   1902                                  return Status;
   \   000018A8   0x0030             MOVS     R0,R6
   \   000018AA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000018AC   0xF003 0xB849      B.W      ??RoadBrd_ParseString_4
   1903                                strcpy( (char *)tempBffr2, "       DATA: ");
   \                     ??RoadBrd_ParseString_271: (+1)
   \   000018B0   0xF8DF 0x19EC      LDR.W    R1,??RoadBrd_ParseString_231+0x4
   \   000018B4   0xA80A             ADD      R0,SP,#+40
   \   000018B6   0x.... 0x....      BL       strcpy
   1904                                strcat( (char *)tempBffr2, (char *)RGBValues.Raw );
   \   000018BA   0xA9BB             ADD      R1,SP,#+748
   \   000018BC   0xA80A             ADD      R0,SP,#+40
   \   000018BE   0x.... 0x....      BL       strcat
   1905                                strcat( (char *)tempBffr2, "\r\n" );
   \   000018C2   0xA1DB             ADR.N    R1,??RoadBrd_ParseString_171  ;; 0x0D, 0x0A, 0x00, 0x00
   \   000018C4   0xA80A             ADD      R0,SP,#+40
   \   000018C6   0x.... 0x....      BL       strcat
   1906          #ifdef NUCLEO
   1907                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1908          #else
   1909                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000018CA   0xA90A             ADD      R1,SP,#+40
   \   000018CC   0x2000             MOVS     R0,#+0
   \   000018CE   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000018D2   0x0006             MOVS     R6,R0
   1910          #endif
   1911                                if (Status != HAL_OK)
   \   000018D4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000018D6   0x2E00             CMP      R6,#+0
   \   000018D8   0xD003             BEQ.N    ??RoadBrd_ParseString_272
   1912                                  return Status;
   \   000018DA   0x0030             MOVS     R0,R6
   \   000018DC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000018DE   0xF003 0xB830      B.W      ??RoadBrd_ParseString_4
   1913                                // Now DisplayEach Value Calculated.
   1914                                strcpy( (char *)tempBffr2, "    Red: ");
   \                     ??RoadBrd_ParseString_272: (+1)
   \   000018E2   0xF8DF 0x1A10      LDR.W    R1,??RoadBrd_ParseString_235+0x4
   \   000018E6   0xA80A             ADD      R0,SP,#+40
   \   000018E8   0x.... 0x....      BL       strcpy
   1915                                strcat( (char *)tempBffr2, (char *)RGBValues.Red );
   \   000018EC   0xA9B5             ADD      R1,SP,#+724
   \   000018EE   0xA80A             ADD      R0,SP,#+40
   \   000018F0   0x.... 0x....      BL       strcat
   1916                                strcat( (char *)tempBffr2, "    Green: ");
   \   000018F4   0xF8DF 0x1A00      LDR.W    R1,??RoadBrd_ParseString_235+0x8
   \   000018F8   0xA80A             ADD      R0,SP,#+40
   \   000018FA   0x.... 0x....      BL       strcat
   1917                                strcat( (char *)tempBffr2, (char *)RGBValues.Green );
   \   000018FE   0xA9B7             ADD      R1,SP,#+732
   \   00001900   0xA80A             ADD      R0,SP,#+40
   \   00001902   0x.... 0x....      BL       strcat
   1918                                strcat( (char *)tempBffr2, "    Blue: ");
   \   00001906   0xF8DF 0x1A28      LDR.W    R1,??RoadBrd_ParseString_236
   \   0000190A   0xA80A             ADD      R0,SP,#+40
   \   0000190C   0x.... 0x....      BL       strcat
   1919                                strcat( (char *)tempBffr2, (char *)RGBValues.Blue );
   \   00001910   0xA9B9             ADD      R1,SP,#+740
   \   00001912   0xA80A             ADD      R0,SP,#+40
   \   00001914   0x.... 0x....      BL       strcat
   1920                                strcat( (char *)tempBffr2, "\r\n" );
   \   00001918   0xA1C5             ADR.N    R1,??RoadBrd_ParseString_171  ;; 0x0D, 0x0A, 0x00, 0x00
   \   0000191A   0xA80A             ADD      R0,SP,#+40
   \   0000191C   0x.... 0x....      BL       strcat
   1921                              }
   1922                              else
   1923                                break;
   1924                              break;
   \   00001920   0xE086             B.N      ??RoadBrd_ParseString_237
   \                     ??RoadBrd_ParseString_269: (+1)
   \   00001922   0xE085             B.N      ??RoadBrd_ParseString_237
   1925          //------------------ H1 Command...Read Status.....     
   1926                            case '1':
   1927                              // 1. Time to send Command and collect status.  RGBSMeasure
   1928                              Status = RoadBrd_RGBReadStatus( &RGBSMeasure );
   \                     ??RoadBrd_ParseString_239: (+1)
   \   00001924   0xA857             ADD      R0,SP,#+348
   \   00001926   0x.... 0x....      BL       RoadBrd_RGBReadStatus
   \   0000192A   0x0006             MOVS     R6,R0
   1929          
   1930                              // Is this a BLE Operation?
   1931                              if ( BLE_Flag )
   \   0000192C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000192E   0x2D00             CMP      R5,#+0
   \   00001930   0xD00A             BEQ.N    ??RoadBrd_ParseString_273
   1932                              {
   1933                                // Yes...Build and Send BLE Response NOW.
   1934                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001932   0xF8DF 0x1698      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   00001936   0xA80A             ADD      R0,SP,#+40
   \   00001938   0x.... 0x....      BL       strcpy
   1935                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000193C   0xA80A             ADD      R0,SP,#+40
   \   0000193E   0x.... 0x....      BL       strlen
   \   00001942   0xA90A             ADD      R1,SP,#+40
   \   00001944   0x.... 0x....      BL       BGM111_Transmit
   1936                              }
   1937                              
   1938                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_273: (+1)
   \   00001948   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000194A   0x2E00             CMP      R6,#+0
   \   0000194C   0xD119             BNE.N    ??RoadBrd_ParseString_274
   1939                              {
   1940                                // Build Status
   1941                                strcpy( (char *)tempBffr2, "RGB Color Light Sensor Status: ");
   \   0000194E   0xF8DF 0x1DF8      LDR.W    R1,??RoadBrd_ParseString_275
   \   00001952   0xA80A             ADD      R0,SP,#+40
   \   00001954   0x.... 0x....      BL       strcpy
   1942                                sprintf( (char *)tempBffr3, "%02x / ", RGBSMeasure.status);
   \   00001958   0xF89D 0x215C      LDRB     R2,[SP, #+348]
   \   0000195C   0xF8DF 0x1DEC      LDR.W    R1,??RoadBrd_ParseString_275+0x4
   \   00001960   0xA82A             ADD      R0,SP,#+168
   \   00001962   0x.... 0x....      BL       sprintf
   1943                                strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   00001966   0xA92A             ADD      R1,SP,#+168
   \   00001968   0xA80A             ADD      R0,SP,#+40
   \   0000196A   0x.... 0x....      BL       strcat
   1944                                strcat( (char *)tempBffr2, (char *)RGBSMeasure.Raw );
   \   0000196E   0xA957             ADD      R1,SP,#+348
   \   00001970   0x1C49             ADDS     R1,R1,#+1
   \   00001972   0xA80A             ADD      R0,SP,#+40
   \   00001974   0x.... 0x....      BL       strcat
   1945                                strcat( (char *)tempBffr2, "\r\n" );
   \   00001978   0xA1AD             ADR.N    R1,??RoadBrd_ParseString_171  ;; 0x0D, 0x0A, 0x00, 0x00
   \   0000197A   0xA80A             ADD      R0,SP,#+40
   \   0000197C   0x.... 0x....      BL       strcat
   1946                              }
   1947                              else
   1948                                break;
   1949                              break;
   \   00001980   0xE056             B.N      ??RoadBrd_ParseString_237
   \                     ??RoadBrd_ParseString_274: (+1)
   \   00001982   0xE055             B.N      ??RoadBrd_ParseString_237
   1950          //------------------ H2 Command...Reset Hardware......     
   1951                            case '2':
   1952                              Status = RoadBrd_RGBReset();
   \                     ??RoadBrd_ParseString_240: (+1)
   \   00001984   0x.... 0x....      BL       RoadBrd_RGBReset
   \   00001988   0x0006             MOVS     R6,R0
   1953                              // Is this a BLE Operation?
   1954                              if ( BLE_Flag )
   \   0000198A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000198C   0x2D00             CMP      R5,#+0
   \   0000198E   0xD00A             BEQ.N    ??RoadBrd_ParseString_276
   1955                              {
   1956                                // Yes...Build and Send BLE Response NOW.
   1957                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001990   0xF8DF 0x1638      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   00001994   0xA80A             ADD      R0,SP,#+40
   \   00001996   0x.... 0x....      BL       strcpy
   1958                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000199A   0xA80A             ADD      R0,SP,#+40
   \   0000199C   0x.... 0x....      BL       strlen
   \   000019A0   0xA90A             ADD      R1,SP,#+40
   \   000019A2   0x.... 0x....      BL       BGM111_Transmit
   1959                              }
   1960                              
   1961                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_276: (+1)
   \   000019A6   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000019A8   0x2E00             CMP      R6,#+0
   \   000019AA   0xD107             BNE.N    ??RoadBrd_ParseString_277
   1962                              {
   1963                                // Build Status
   1964                                strcpy( (char *)tempBffr2, "RGB Color Light Sensor: RESET CMD Sent Succesful.\r\n" );
   \   000019AC   0xF8DF 0x1E14      LDR.W    R1,??RoadBrd_ParseString_278
   \   000019B0   0xA80A             ADD      R0,SP,#+40
   \   000019B2   0x.... 0x....      BL       strcpy
   1965                              }
   1966                              else
   1967                                break;
   1968                              break;
   \   000019B6   0xE03B             B.N      ??RoadBrd_ParseString_237
   \                     ??RoadBrd_ParseString_138:
   \   000019B8   0x........         DC32     ?_49
   \                     ??RoadBrd_ParseString_277: (+1)
   \   000019BC   0xE038             B.N      ??RoadBrd_ParseString_237
   1969          //------------------ H3 Command...Read ID.....     
   1970                            case '3':
   1971                              // 1. Time to send Command and collect status.  IDMeasure
   1972                              Status = RoadBrd_RGBReadID( &IDMeasure );
   \                     ??RoadBrd_ParseString_241: (+1)
   \   000019BE   0xA859             ADD      R0,SP,#+356
   \   000019C0   0x.... 0x....      BL       RoadBrd_RGBReadID
   \   000019C4   0x0006             MOVS     R6,R0
   1973                              // Is this a BLE Operation?
   1974                              if ( BLE_Flag )
   \   000019C6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000019C8   0x2D00             CMP      R5,#+0
   \   000019CA   0xD00A             BEQ.N    ??RoadBrd_ParseString_279
   1975                              {
   1976                                // Yes...Build and Send BLE Response NOW.
   1977                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000019CC   0xF8DF 0x15FC      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   000019D0   0xA80A             ADD      R0,SP,#+40
   \   000019D2   0x.... 0x....      BL       strcpy
   1978                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000019D6   0xA80A             ADD      R0,SP,#+40
   \   000019D8   0x.... 0x....      BL       strlen
   \   000019DC   0xA90A             ADD      R1,SP,#+40
   \   000019DE   0x.... 0x....      BL       BGM111_Transmit
   1979                              }
   1980                              
   1981                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_279: (+1)
   \   000019E2   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000019E4   0x2E00             CMP      R6,#+0
   \   000019E6   0xD11D             BNE.N    ??RoadBrd_ParseString_280
   1982                              {
   1983                                // Build Status
   1984                                strcpy( (char *)tempBffr2, "RGB Color Light Sensor ID Code: ");
   \   000019E8   0xF8DF 0x1DDC      LDR.W    R1,??RoadBrd_ParseString_278+0x4
   \   000019EC   0xA80A             ADD      R0,SP,#+40
   \   000019EE   0x.... 0x....      BL       strcpy
   1985                                sprintf( (char *)tempBffr3, "%02x / ", IDMeasure.id);
   \   000019F2   0xF89D 0x2164      LDRB     R2,[SP, #+356]
   \   000019F6   0xF8DF 0x1D54      LDR.W    R1,??RoadBrd_ParseString_275+0x4
   \   000019FA   0xA82A             ADD      R0,SP,#+168
   \   000019FC   0x.... 0x....      BL       sprintf
   1986                                strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   00001A00   0xA92A             ADD      R1,SP,#+168
   \   00001A02   0xA80A             ADD      R0,SP,#+40
   \   00001A04   0x.... 0x....      BL       strcat
   1987                                strcat( (char *)tempBffr2, (char *)IDMeasure.Raw );
   \   00001A08   0xA959             ADD      R1,SP,#+356
   \   00001A0A   0x1C49             ADDS     R1,R1,#+1
   \   00001A0C   0xA80A             ADD      R0,SP,#+40
   \   00001A0E   0x.... 0x....      BL       strcat
   1988                                strcat( (char *)tempBffr2, "\r\n" );
   \   00001A12   0xA187             ADR.N    R1,??RoadBrd_ParseString_171  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001A14   0xA80A             ADD      R0,SP,#+40
   \   00001A16   0x.... 0x....      BL       strcat
   1989                             }
   1990                              else
   1991                                break;
   1992                              break;
   \   00001A1A   0xE009             B.N      ??RoadBrd_ParseString_237
   \                     ??RoadBrd_ParseString_142:
   \   00001A1C   0x........         DC32     ?_50
   \   00001A20   0x........         DC32     ?_51
   \                     ??RoadBrd_ParseString_280: (+1)
   \   00001A24   0xE004             B.N      ??RoadBrd_ParseString_237
   1993                            default:
   1994                              strcpy( (char *)tempBffr2, "ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_242: (+1)
   \   00001A26   0xF8DF 0x1E18      LDR.W    R1,??RoadBrd_ParseString_281
   \   00001A2A   0xA80A             ADD      R0,SP,#+40
   \   00001A2C   0x.... 0x....      BL       strcpy
   1995                              break;
   1996                          } //EndSwitch
   1997                        } //EndElse (Size == 1)
   1998                        break;    
   \                     ??RoadBrd_ParseString_237: (+1)
   \   00001A30   0xF002 0xBF0D      B.W      ??RoadBrd_ParseString_27
   1999          //**************************************************************************************************
   2000                      case 'P':
   2001                        // POWER SYSTEM. 
   2002                        switch( tempBffr[1] )
   \                     ??RoadBrd_ParseString_20: (+1)
   \   00001A34   0x7860             LDRB     R0,[R4, #+1]
   \   00001A36   0x2844             CMP      R0,#+68
   \   00001A38   0xD018             BEQ.N    ??RoadBrd_ParseString_282
   \   00001A3A   0x2855             CMP      R0,#+85
   \   00001A3C   0xD11F             BNE.N    ??RoadBrd_ParseString_283
   2003                        {
   2004          //++++++++++++++++++++++++++++++++++++++++++  5V Power Supply Commands.
   2005                          case 'U':
   2006                            // Turn on 5V Power Supply.
   2007                            RoadBrd_gpio_On( gTAM_PWR );
   \                     ??RoadBrd_ParseString_284: (+1)
   \   00001A3E   0x2004             MOVS     R0,#+4
   \   00001A40   0x.... 0x....      BL       RoadBrd_gpio_On
   2008                            // Is this a BLE Operation?
   2009                            if ( BLE_Flag )
   \   00001A44   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001A46   0x2D00             CMP      R5,#+0
   \   00001A48   0xD00A             BEQ.N    ??RoadBrd_ParseString_285
   2010                            {
   2011                              // Yes...Build and Send BLE Response NOW.
   2012                              strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001A4A   0xF8DF 0x1580      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   00001A4E   0xA80A             ADD      R0,SP,#+40
   \   00001A50   0x.... 0x....      BL       strcpy
   2013                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001A54   0xA80A             ADD      R0,SP,#+40
   \   00001A56   0x.... 0x....      BL       strlen
   \   00001A5A   0xA90A             ADD      R1,SP,#+40
   \   00001A5C   0x.... 0x....      BL       BGM111_Transmit
   2014                            }
   2015                            
   2016                            strcpy( (char *)tempBffr2, "5V Power Plane Powered UP.\r\n");
   \                     ??RoadBrd_ParseString_285: (+1)
   \   00001A60   0xF8DF 0x1DE0      LDR.W    R1,??RoadBrd_ParseString_281+0x4
   \   00001A64   0xA80A             ADD      R0,SP,#+40
   \   00001A66   0x.... 0x....      BL       strcpy
   2017                            break;
   \   00001A6A   0xE00D             B.N      ??RoadBrd_ParseString_286
   2018                          case 'D':
   2019                            // Turn off 5V Power Supply.
   2020                            RoadBrd_gpio_Off( gTAM_PWR );
   \                     ??RoadBrd_ParseString_282: (+1)
   \   00001A6C   0x2004             MOVS     R0,#+4
   \   00001A6E   0x.... 0x....      BL       RoadBrd_gpio_Off
   2021                            strcpy( (char *)tempBffr2, "5V Power Plane Powered DOWN.\r\n");
   \   00001A72   0xF8DF 0x1DD4      LDR.W    R1,??RoadBrd_ParseString_281+0x8
   \   00001A76   0xA80A             ADD      R0,SP,#+40
   \   00001A78   0x.... 0x....      BL       strcpy
   2022                            break;
   \   00001A7C   0xE004             B.N      ??RoadBrd_ParseString_286
   2023                          default:
   2024                            strcpy( (char *)tempBffr2, "ERROR: Illegal 5V Power Plane Command.\r\n");
   \                     ??RoadBrd_ParseString_283: (+1)
   \   00001A7E   0xF8DF 0x1DCC      LDR.W    R1,??RoadBrd_ParseString_281+0xC
   \   00001A82   0xA80A             ADD      R0,SP,#+40
   \   00001A84   0x.... 0x....      BL       strcpy
   2025                            break;
   2026                        }
   2027                        break;
   \                     ??RoadBrd_ParseString_286: (+1)
   \   00001A88   0xF002 0xBEE1      B.W      ??RoadBrd_ParseString_27
   \                     ??RoadBrd_ParseString_147:
   \   00001A8C   0x........         DC32     ?_52
   \   00001A90   0x........         DC32     ?_53
   2028          //**************************************************************************************************
   2029                      case 'T':
   2030                        // TEST CMDS. 
   2031                        // Test Size to make sure we have enough Characters for this operation
   2032                        if (Size <= 1)
   \                     ??RoadBrd_ParseString_21: (+1)
   \   00001A94   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00001A98   0xF1B8 0x0F02      CMP      R8,#+2
   \   00001A9C   0xDA16             BGE.N    ??RoadBrd_ParseString_287
   2033                        {
   2034                          // Is this a BLE Operation?
   2035                          if ( BLE_Flag )
   \   00001A9E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001AA0   0x2D00             CMP      R5,#+0
   \   00001AA2   0xD00A             BEQ.N    ??RoadBrd_ParseString_288
   2036                          {
   2037                            // Yes...Build and Send BLE Response NOW.
   2038                            strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001AA4   0xF8DF 0x1524      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   00001AA8   0xA80A             ADD      R0,SP,#+40
   \   00001AAA   0x.... 0x....      BL       strcpy
   2039                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001AAE   0xA80A             ADD      R0,SP,#+40
   \   00001AB0   0x.... 0x....      BL       strlen
   \   00001AB4   0xA90A             ADD      R1,SP,#+40
   \   00001AB6   0x.... 0x....      BL       BGM111_Transmit
   2040                          }
   2041                          
   2042                          strcpy( (char *)tempBffr2, "T ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_288: (+1)
   \   00001ABA   0xF8DF 0x1E08      LDR.W    R1,??RoadBrd_ParseString_289
   \   00001ABE   0xA80A             ADD      R0,SP,#+40
   \   00001AC0   0x.... 0x....      BL       strcpy
   \   00001AC4   0xF002 0xBEB1      B.W      ??RoadBrd_ParseString_290
   \                     ??RoadBrd_ParseString_157:
   \   00001AC8   0x........         DC32     ?_54
   2043                        }
   2044                        else
   2045                        {
   2046                          switch( tempBffr[1] )
   \                     ??RoadBrd_ParseString_287: (+1)
   \   00001ACC   0x7860             LDRB     R0,[R4, #+1]
   \   00001ACE   0x2843             CMP      R0,#+67
   \   00001AD0   0xF000 0x82F4      BEQ.W    ??RoadBrd_ParseString_291
   \   00001AD4   0x2844             CMP      R0,#+68
   \   00001AD6   0xF002 0x8222      BEQ.W    ??RoadBrd_ParseString_292
   \   00001ADA   0x2846             CMP      R0,#+70
   \   00001ADC   0xF002 0x861E      BEQ.W    ??RoadBrd_ParseString_293
   \   00001AE0   0x2849             CMP      R0,#+73
   \   00001AE2   0xD013             BEQ.N    ??RoadBrd_ParseString_294
   \   00001AE4   0x284B             CMP      R0,#+75
   \   00001AE6   0xF002 0x8255      BEQ.W    ??RoadBrd_ParseString_295
   \   00001AEA   0x284C             CMP      R0,#+76
   \   00001AEC   0xF002 0x862E      BEQ.W    ??RoadBrd_ParseString_296
   \   00001AF0   0x284D             CMP      R0,#+77
   \   00001AF2   0xF002 0x85E9      BEQ.W    ??RoadBrd_ParseString_297
   \   00001AF6   0x2852             CMP      R0,#+82
   \   00001AF8   0xF002 0x8230      BEQ.W    ??RoadBrd_ParseString_298
   \   00001AFC   0x2853             CMP      R0,#+83
   \   00001AFE   0xF002 0x865A      BEQ.W    ??RoadBrd_ParseString_299
   \   00001B02   0x2855             CMP      R0,#+85
   \   00001B04   0xF002 0x8578      BEQ.W    ??RoadBrd_ParseString_300
   \   00001B08   0xF002 0xBE7E      B.W      ??RoadBrd_ParseString_301
   2047                          {
   2048          //++++++++++++++++++++++++++++++++++++++++++  I2C Commands.
   2049                            case 'I':
   2050                              // I2C Commands.
   2051                              // Test Size to make sure we have enough Characters for this operation
   2052                              if (Size < 9)
   \                     ??RoadBrd_ParseString_294: (+1)
   \   00001B0C   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00001B10   0xF1B8 0x0F09      CMP      R8,#+9
   \   00001B14   0xDA13             BGE.N    ??RoadBrd_ParseString_302
   2053                              {
   2054                                // Is this a BLE Operation?
   2055                                if ( BLE_Flag )
   \   00001B16   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001B18   0x2D00             CMP      R5,#+0
   \   00001B1A   0xD00A             BEQ.N    ??RoadBrd_ParseString_303
   2056                                {
   2057                                  // Yes...Build and Send BLE Response NOW.
   2058                                  strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001B1C   0xF8DF 0x14AC      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   00001B20   0xA80A             ADD      R0,SP,#+40
   \   00001B22   0x.... 0x....      BL       strcpy
   2059                                  BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001B26   0xA80A             ADD      R0,SP,#+40
   \   00001B28   0x.... 0x....      BL       strlen
   \   00001B2C   0xA90A             ADD      R1,SP,#+40
   \   00001B2E   0x.... 0x....      BL       BGM111_Transmit
   2060                                }
   2061                                
   2062                                strcpy( (char *)tempBffr2, "TI SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_303: (+1)
   \   00001B32   0xF8DF 0x1E08      LDR.W    R1,??RoadBrd_ParseString_304
   \   00001B36   0xA80A             ADD      R0,SP,#+40
   \   00001B38   0x.... 0x....      BL       strcpy
   \   00001B3C   0xE2B3             B.N      ??RoadBrd_ParseString_305
   2063                              }
   2064                              else
   2065                              {
   2066                                switch( tempBffr[2] )
   \                     ??RoadBrd_ParseString_302: (+1)
   \   00001B3E   0x78A0             LDRB     R0,[R4, #+2]
   \   00001B40   0x2851             CMP      R0,#+81
   \   00001B42   0xF000 0x8204      BEQ.W    ??RoadBrd_ParseString_306
   \   00001B46   0xF0C0 0x82A9      BCC.W    ??RoadBrd_ParseString_307
   \   00001B4A   0x2853             CMP      R0,#+83
   \   00001B4C   0xD002             BEQ.N    ??RoadBrd_ParseString_308
   \   00001B4E   0xF0C0 0x80D5      BCC.W    ??RoadBrd_ParseString_309
   \   00001B52   0xE2A3             B.N      ??RoadBrd_ParseString_307
   2067                                {
   2068          //------------------
   2069                                  case 'S':
   2070                                    //I2C Send Command.
   2071                                    // Step 1. Validate format.
   2072                                    if( (tempBffr[3]!=':') ||
   2073                                        (tempBffr[6]!='.') )
   \                     ??RoadBrd_ParseString_308: (+1)
   \   00001B54   0x78E0             LDRB     R0,[R4, #+3]
   \   00001B56   0x283A             CMP      R0,#+58
   \   00001B58   0xD102             BNE.N    ??RoadBrd_ParseString_310
   \   00001B5A   0x79A0             LDRB     R0,[R4, #+6]
   \   00001B5C   0x282E             CMP      R0,#+46
   \   00001B5E   0xD01B             BEQ.N    ??RoadBrd_ParseString_311
   2074                                    {
   2075                                      // Is this a BLE Operation?
   2076                                      if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_310: (+1)
   \   00001B60   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001B62   0x2D00             CMP      R5,#+0
   \   00001B64   0xD00A             BEQ.N    ??RoadBrd_ParseString_312
   2077                                      {
   2078                                        // Yes...Build and Send BLE Response NOW.
   2079                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001B66   0xF8DF 0x1464      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   00001B6A   0xA80A             ADD      R0,SP,#+40
   \   00001B6C   0x.... 0x....      BL       strcpy
   2080                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001B70   0xA80A             ADD      R0,SP,#+40
   \   00001B72   0x.... 0x....      BL       strlen
   \   00001B76   0xA90A             ADD      R1,SP,#+40
   \   00001B78   0x.... 0x....      BL       BGM111_Transmit
   2081                                      }
   2082                                     
   2083                                      strcpy( (char *)tempBffr2, "TIS SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_312: (+1)
   \   00001B7C   0xF8DF 0x1E34      LDR.W    R1,??RoadBrd_ParseString_313
   \   00001B80   0xA80A             ADD      R0,SP,#+40
   \   00001B82   0x.... 0x....      BL       strcpy
   \   00001B86   0xE0B8             B.N      ??RoadBrd_ParseString_314
   \                     ??RoadBrd_ParseString_164:
   \   00001B88   0x........         DC32     ?_55
   \   00001B8C   0x........         DC32     ?_56
   \   00001B90   0x........         DC32     ?_57
   \   00001B94   0x........         DC32     ?_58
   2084                                    }
   2085                                    else
   2086                                    {
   2087                                      // Is this a BLE Operation?
   2088                                      if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_311: (+1)
   \   00001B98   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001B9A   0x2D00             CMP      R5,#+0
   \   00001B9C   0xD00A             BEQ.N    ??RoadBrd_ParseString_315
   2089                                      {
   2090                                        // Yes...Build and Send BLE Response NOW.
   2091                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001B9E   0xF8DF 0x142C      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   00001BA2   0xA80A             ADD      R0,SP,#+40
   \   00001BA4   0x.... 0x....      BL       strcpy
   2092                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001BA8   0xA80A             ADD      R0,SP,#+40
   \   00001BAA   0x.... 0x....      BL       strlen
   \   00001BAE   0xA90A             ADD      R1,SP,#+40
   \   00001BB0   0x.... 0x....      BL       BGM111_Transmit
   2093                                      }
   2094                                      
   2095                                      // 2. Grab Address and validate a legal number
   2096                                      tempBffr3[0] = tempBffr[4];
   \                     ??RoadBrd_ParseString_315: (+1)
   \   00001BB4   0xF994 0x0004      LDRSB    R0,[R4, #+4]
   \   00001BB8   0xF88D 0x00A8      STRB     R0,[SP, #+168]
   2097                                      tempBffr3[1] = tempBffr[5];
   \   00001BBC   0xF994 0x0005      LDRSB    R0,[R4, #+5]
   \   00001BC0   0xF88D 0x00A9      STRB     R0,[SP, #+169]
   2098                                      tempBffr3[2] = 0x00;
   \   00001BC4   0x2000             MOVS     R0,#+0
   \   00001BC6   0xF88D 0x00AA      STRB     R0,[SP, #+170]
   2099                                      if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001BCA   0xA82A             ADD      R0,SP,#+168
   \   00001BCC   0x.... 0x....      BL       isHexNum
   \   00001BD0   0x2800             CMP      R0,#+0
   \   00001BD2   0xD105             BNE.N    ??RoadBrd_ParseString_316
   2100                                        strcpy( (char *)tempBffr2, "TIS SYNTAX ERROR: Address not HEX Value.\r\n");
   \   00001BD4   0xF8DF 0x1DE0      LDR.W    R1,??RoadBrd_ParseString_313+0x4
   \   00001BD8   0xA80A             ADD      R0,SP,#+40
   \   00001BDA   0x.... 0x....      BL       strcpy
   \   00001BDE   0xE08C             B.N      ??RoadBrd_ParseString_314
   2101                                      else
   2102                                      {
   2103                                        // Legal Address. Save it as value
   2104                                        Address = hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_316: (+1)
   \   00001BE0   0xA82A             ADD      R0,SP,#+168
   \   00001BE2   0x.... 0x....      BL       hatoi
   \   00001BE6   0x9031             STR      R0,[SP, #+196]
   2105                                        // 3. Now get the number of bytes of data from field.
   2106          //                              sprintf( (char *)tempBffr2, "TIS: Good Address: %x.\r\n", Address);
   2107                                        tempBffr3[0] = tempBffr[7];
   \   00001BE8   0xF994 0x0007      LDRSB    R0,[R4, #+7]
   \   00001BEC   0xF88D 0x00A8      STRB     R0,[SP, #+168]
   2108                                        tempBffr3[1] = tempBffr[8];
   \   00001BF0   0xF994 0x0008      LDRSB    R0,[R4, #+8]
   \   00001BF4   0xF88D 0x00A9      STRB     R0,[SP, #+169]
   2109                                        tempBffr3[2] = 0x00;
   \   00001BF8   0x2000             MOVS     R0,#+0
   \   00001BFA   0xF88D 0x00AA      STRB     R0,[SP, #+170]
   2110                                        if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001BFE   0xA82A             ADD      R0,SP,#+168
   \   00001C00   0x.... 0x....      BL       isHexNum
   \   00001C04   0x2800             CMP      R0,#+0
   \   00001C06   0xD105             BNE.N    ??RoadBrd_ParseString_317
   2111                                          strcpy( (char *)tempBffr2, "TIS SYNTAX ERROR: Number of Bytes not HEX Value.\r\n");
   \   00001C08   0xF8DF 0x1DB0      LDR.W    R1,??RoadBrd_ParseString_313+0x8
   \   00001C0C   0xA80A             ADD      R0,SP,#+40
   \   00001C0E   0x.... 0x....      BL       strcpy
   \   00001C12   0xE072             B.N      ??RoadBrd_ParseString_314
   2112                                        else
   2113                                        {
   2114                                          // Legal NUMBER BYTES. Save it as value
   2115                                          num_bytes = hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_317: (+1)
   \   00001C14   0xA82A             ADD      R0,SP,#+168
   \   00001C16   0x.... 0x....      BL       hatoi
   \   00001C1A   0x9034             STR      R0,[SP, #+208]
   2116                                          // 4. Test num_bytes. If Zero, We are done
   2117                                          if (num_bytes == 0)
   \   00001C1C   0x9834             LDR      R0,[SP, #+208]
   \   00001C1E   0x2800             CMP      R0,#+0
   \   00001C20   0xD114             BNE.N    ??RoadBrd_ParseString_318
   2118                                          {
   2119                                            sprintf( (char *)tempBffr2, "TIS: GOOD CMD: %x.\r\n", Address);
   \   00001C22   0x9A31             LDR      R2,[SP, #+196]
   \   00001C24   0xF8DF 0x1D98      LDR.W    R1,??RoadBrd_ParseString_313+0xC
   \   00001C28   0xA80A             ADD      R0,SP,#+40
   \   00001C2A   0x.... 0x....      BL       sprintf
   \   00001C2E   0xE03B             B.N      ??RoadBrd_ParseString_319
   \                     ??RoadBrd_ParseString_171:
   \   00001C30   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
   \   00001C34   0x........         DC32     ?_59
   \   00001C38   0x........         DC32     ?_60
   \   00001C3C   0x........         DC32     ?_61
   \   00001C40   0x........         DC32     ?_62
   \   00001C44   0x........         DC32     ?_63
   \   00001C48   0x........         DC32     ?_64
   2120                                          }
   2121                                          else
   2122                                          {
   2123                                            // 5. Time to get all the data.
   2124                                            Error = 0;
   \                     ??RoadBrd_ParseString_318: (+1)
   \   00001C4C   0x2000             MOVS     R0,#+0
   \   00001C4E   0x9035             STR      R0,[SP, #+212]
   2125                                            for (x=0; x<num_bytes; x++)
   \   00001C50   0x2000             MOVS     R0,#+0
   \   00001C52   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_320: (+1)
   \   00001C54   0x9834             LDR      R0,[SP, #+208]
   \   00001C56   0x4287             CMP      R7,R0
   \   00001C58   0xDA26             BGE.N    ??RoadBrd_ParseString_319
   2126                                            {
   2127                                              tempBffr3[0] = tempBffr[10+x*3];
   \   00001C5A   0x2003             MOVS     R0,#+3
   \   00001C5C   0xFB00 0xF007      MUL      R0,R0,R7
   \   00001C60   0x4420             ADD      R0,R4,R0
   \   00001C62   0xF990 0x000A      LDRSB    R0,[R0, #+10]
   \   00001C66   0xF88D 0x00A8      STRB     R0,[SP, #+168]
   2128                                              tempBffr3[1] = tempBffr[11+x*3];
   \   00001C6A   0x2003             MOVS     R0,#+3
   \   00001C6C   0xFB00 0xF007      MUL      R0,R0,R7
   \   00001C70   0x4420             ADD      R0,R4,R0
   \   00001C72   0xF990 0x000B      LDRSB    R0,[R0, #+11]
   \   00001C76   0xF88D 0x00A9      STRB     R0,[SP, #+169]
   2129                                              tempBffr3[2] = 0x00;
   \   00001C7A   0x2000             MOVS     R0,#+0
   \   00001C7C   0xF88D 0x00AA      STRB     R0,[SP, #+170]
   2130                                              if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001C80   0xA82A             ADD      R0,SP,#+168
   \   00001C82   0x.... 0x....      BL       isHexNum
   \   00001C86   0x2800             CMP      R0,#+0
   \   00001C88   0xD107             BNE.N    ??RoadBrd_ParseString_321
   2131                                              {
   2132                                                strcpy( (char *)tempBffr2, "TIS SYNTAX ERROR: Address not HEX Value.\r\n");
   \   00001C8A   0xF8DF 0x1D2C      LDR.W    R1,??RoadBrd_ParseString_313+0x4
   \   00001C8E   0xA80A             ADD      R0,SP,#+40
   \   00001C90   0x.... 0x....      BL       strcpy
   2133                                                Error = 1;
   \   00001C94   0x2001             MOVS     R0,#+1
   \   00001C96   0x9035             STR      R0,[SP, #+212]
   2134                                                break;
   \   00001C98   0xE006             B.N      ??RoadBrd_ParseString_319
   2135                                              }
   2136                                              else
   2137                                              {
   2138                                                i2cData[x] =  hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_321: (+1)
   \   00001C9A   0xA82A             ADD      R0,SP,#+168
   \   00001C9C   0x.... 0x....      BL       hatoi
   \   00001CA0   0xA99A             ADD      R1,SP,#+616
   \   00001CA2   0x55C8             STRB     R0,[R1, R7]
   2139                                              } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)
   2140                                            } //EndFor (x=0; x<num_bytes; x++)
   \   00001CA4   0x1C7F             ADDS     R7,R7,#+1
   \   00001CA6   0xE7D5             B.N      ??RoadBrd_ParseString_320
   2141                                          } //EndElse (num_bytes == 0)
   2142                                          if (Error==0)
   \                     ??RoadBrd_ParseString_319: (+1)
   \   00001CA8   0x9835             LDR      R0,[SP, #+212]
   \   00001CAA   0x2800             CMP      R0,#+0
   \   00001CAC   0xD105             BNE.N    ??RoadBrd_ParseString_322
   2143                                          {
   2144                                            sprintf( (char *)tempBffr2, "TIS: GOOD CMD: %x.", Address);
   \   00001CAE   0x9A31             LDR      R2,[SP, #+196]
   \   00001CB0   0xF8DF 0x1DF4      LDR.W    R1,??RoadBrd_ParseString_323
   \   00001CB4   0xA80A             ADD      R0,SP,#+40
   \   00001CB6   0x.... 0x....      BL       sprintf
   2145                                          }
   2146                                          for(x=0; x<num_bytes; x++)
   \                     ??RoadBrd_ParseString_322: (+1)
   \   00001CBA   0x2000             MOVS     R0,#+0
   \   00001CBC   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_324: (+1)
   \   00001CBE   0x9834             LDR      R0,[SP, #+208]
   \   00001CC0   0x4287             CMP      R7,R0
   \   00001CC2   0xDA0B             BGE.N    ??RoadBrd_ParseString_325
   2147                                          {
   2148                                            sprintf( (char *)tempBffr3, "%x.", i2cData[x]);
   \   00001CC4   0xA89A             ADD      R0,SP,#+616
   \   00001CC6   0x5DC2             LDRB     R2,[R0, R7]
   \   00001CC8   0xA1C1             ADR.N    R1,??RoadBrd_ParseString_207+0x8  ;; "%x."
   \   00001CCA   0xA82A             ADD      R0,SP,#+168
   \   00001CCC   0x.... 0x....      BL       sprintf
   2149                                            strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   00001CD0   0xA92A             ADD      R1,SP,#+168
   \   00001CD2   0xA80A             ADD      R0,SP,#+40
   \   00001CD4   0x.... 0x....      BL       strcat
   2150                                          }
   \   00001CD8   0x1C7F             ADDS     R7,R7,#+1
   \   00001CDA   0xE7F0             B.N      ??RoadBrd_ParseString_324
   2151                                          strcat( (char *)tempBffr2, "\r\n" );
   \                     ??RoadBrd_ParseString_325: (+1)
   \   00001CDC   0xA1BD             ADR.N    R1,??RoadBrd_ParseString_207+0xC  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001CDE   0xA80A             ADD      R0,SP,#+40
   \   00001CE0   0x.... 0x....      BL       strcat
   2152                                          // 6. Time to send Command and collect status.
   2153                                          Status =  RoadBrd_I2C_Master_Transmit((uint16_t)Address, i2cData, (uint16_t)num_bytes, I2C_TIMEOUT);
   \   00001CE4   0xF44F 0x73FA      MOV      R3,#+500
   \   00001CE8   0x9834             LDR      R0,[SP, #+208]
   \   00001CEA   0x0002             MOVS     R2,R0
   \   00001CEC   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00001CEE   0xA99A             ADD      R1,SP,#+616
   \   00001CF0   0x9831             LDR      R0,[SP, #+196]
   \   00001CF2   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00001CF4   0x.... 0x....      BL       RoadBrd_I2C_Master_Transmit
   \   00001CF8   0x0006             MOVS     R6,R0
   2154                                          
   2155                                        } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)...NUMBER BYTES
   2156                                        
   2157                                      } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)...Address
   2158                                      
   2159                                    } //EndElse ( (tempBffr[2]!=':') || (tempBffr[5]!='.') )
   2160                                
   2161                                    break;
   \                     ??RoadBrd_ParseString_314: (+1)
   \   00001CFA   0xE1D4             B.N      ??RoadBrd_ParseString_305
   2162          //------------------
   2163                                  case 'R':
   2164                                    //I2C Receive Command
   2165                                    // Step 1. Validate format.
   2166                                    if( (tempBffr[3]!=':') ||
   2167                                        (tempBffr[6]!='.') ||
   2168                                        (tempBffr[9]!='.')  )
   \                     ??RoadBrd_ParseString_309: (+1)
   \   00001CFC   0x78E0             LDRB     R0,[R4, #+3]
   \   00001CFE   0x283A             CMP      R0,#+58
   \   00001D00   0xD105             BNE.N    ??RoadBrd_ParseString_326
   \   00001D02   0x79A0             LDRB     R0,[R4, #+6]
   \   00001D04   0x282E             CMP      R0,#+46
   \   00001D06   0xD102             BNE.N    ??RoadBrd_ParseString_326
   \   00001D08   0x7A60             LDRB     R0,[R4, #+9]
   \   00001D0A   0x282E             CMP      R0,#+46
   \   00001D0C   0xD012             BEQ.N    ??RoadBrd_ParseString_327
   2169                                    {
   2170                                      // Is this a BLE Operation?
   2171                                      if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_326: (+1)
   \   00001D0E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001D10   0x2D00             CMP      R5,#+0
   \   00001D12   0xD009             BEQ.N    ??RoadBrd_ParseString_328
   2172                                      {
   2173                                        // Yes...Build and Send BLE Response NOW.
   2174                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001D14   0x49AD             LDR.N    R1,??RoadBrd_ParseString_207+0x4
   \   00001D16   0xA80A             ADD      R0,SP,#+40
   \   00001D18   0x.... 0x....      BL       strcpy
   2175                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001D1C   0xA80A             ADD      R0,SP,#+40
   \   00001D1E   0x.... 0x....      BL       strlen
   \   00001D22   0xA90A             ADD      R1,SP,#+40
   \   00001D24   0x.... 0x....      BL       BGM111_Transmit
   2176                                      }
   2177                                      
   2178                                      strcpy( (char *)tempBffr2, "TIR SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_328: (+1)
   \   00001D28   0xF8DF 0x1DF4      LDR.W    R1,??RoadBrd_ParseString_329
   \   00001D2C   0xA80A             ADD      R0,SP,#+40
   \   00001D2E   0x.... 0x....      BL       strcpy
   \   00001D32   0xE10B             B.N      ??RoadBrd_ParseString_330
   2179                                    }
   2180                                    else
   2181                                    {
   2182                                      // Is this a BLE Operation?
   2183                                      if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_327: (+1)
   \   00001D34   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001D36   0x2D00             CMP      R5,#+0
   \   00001D38   0xD009             BEQ.N    ??RoadBrd_ParseString_331
   2184                                      {
   2185                                        // Yes...Build and Send BLE Response NOW.
   2186                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001D3A   0x49A4             LDR.N    R1,??RoadBrd_ParseString_207+0x4
   \   00001D3C   0xA80A             ADD      R0,SP,#+40
   \   00001D3E   0x.... 0x....      BL       strcpy
   2187                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001D42   0xA80A             ADD      R0,SP,#+40
   \   00001D44   0x.... 0x....      BL       strlen
   \   00001D48   0xA90A             ADD      R1,SP,#+40
   \   00001D4A   0x.... 0x....      BL       BGM111_Transmit
   2188                                      }
   2189                                      
   2190                                      // 2. Grab Address and validate a legal number
   2191                                      tempBffr3[0] = tempBffr[4];
   \                     ??RoadBrd_ParseString_331: (+1)
   \   00001D4E   0xF994 0x0004      LDRSB    R0,[R4, #+4]
   \   00001D52   0xF88D 0x00A8      STRB     R0,[SP, #+168]
   2192                                      tempBffr3[1] = tempBffr[5];
   \   00001D56   0xF994 0x0005      LDRSB    R0,[R4, #+5]
   \   00001D5A   0xF88D 0x00A9      STRB     R0,[SP, #+169]
   2193                                      tempBffr3[2] = 0x00;
   \   00001D5E   0x2000             MOVS     R0,#+0
   \   00001D60   0xF88D 0x00AA      STRB     R0,[SP, #+170]
   2194                                      if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001D64   0xA82A             ADD      R0,SP,#+168
   \   00001D66   0x.... 0x....      BL       isHexNum
   \   00001D6A   0x2800             CMP      R0,#+0
   \   00001D6C   0xD105             BNE.N    ??RoadBrd_ParseString_332
   2195                                        strcpy( (char *)tempBffr2, "TIR SYNTAX ERROR: Address not HEX Value.\r\n");
   \   00001D6E   0xF8DF 0x1E28      LDR.W    R1,??RoadBrd_ParseString_333
   \   00001D72   0xA80A             ADD      R0,SP,#+40
   \   00001D74   0x.... 0x....      BL       strcpy
   \   00001D78   0xE0E8             B.N      ??RoadBrd_ParseString_330
   2196                                      else
   2197                                      {
   2198                                        // Legal Address. Save it as value
   2199                                        Address = hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_332: (+1)
   \   00001D7A   0xA82A             ADD      R0,SP,#+168
   \   00001D7C   0x.... 0x....      BL       hatoi
   \   00001D80   0x9031             STR      R0,[SP, #+196]
   2200                                        // 3. Now get the number of bytes of data from field.
   2201                                        tempBffr3[0] = tempBffr[7];
   \   00001D82   0xF994 0x0007      LDRSB    R0,[R4, #+7]
   \   00001D86   0xF88D 0x00A8      STRB     R0,[SP, #+168]
   2202                                        tempBffr3[1] = tempBffr[8];
   \   00001D8A   0xF994 0x0008      LDRSB    R0,[R4, #+8]
   \   00001D8E   0xF88D 0x00A9      STRB     R0,[SP, #+169]
   2203                                        tempBffr3[2] = 0x00;
   \   00001D92   0x2000             MOVS     R0,#+0
   \   00001D94   0xF88D 0x00AA      STRB     R0,[SP, #+170]
   2204                                        if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001D98   0xA82A             ADD      R0,SP,#+168
   \   00001D9A   0x.... 0x....      BL       isHexNum
   \   00001D9E   0x2800             CMP      R0,#+0
   \   00001DA0   0xD10A             BNE.N    ??RoadBrd_ParseString_334
   2205                                          strcpy( (char *)tempBffr2, "TIR SYNTAX ERROR: Number of Bytes not HEX Value.\r\n");
   \   00001DA2   0xF8DF 0x1DF8      LDR.W    R1,??RoadBrd_ParseString_333+0x4
   \   00001DA6   0xA80A             ADD      R0,SP,#+40
   \   00001DA8   0x.... 0x....      BL       strcpy
   \   00001DAC   0xE0CE             B.N      ??RoadBrd_ParseString_330
   \   00001DAE   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_185:
   \   00001DB0   0x........         DC32     ?_65
   \   00001DB4   0x........         DC32     ?_66
   2206                                        else
   2207                                        {
   2208                                          // Legal NUMBER BYTES. Save it as value
   2209                                          num_bytes = hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_334: (+1)
   \   00001DB8   0xA82A             ADD      R0,SP,#+168
   \   00001DBA   0x.... 0x....      BL       hatoi
   \   00001DBE   0x9034             STR      R0,[SP, #+208]
   2210                                          
   2211                                          // 3a. Now get the number of bytes Received of data from field.
   2212                                          tempBffr3[0] = tempBffr[10];
   \   00001DC0   0xF994 0x000A      LDRSB    R0,[R4, #+10]
   \   00001DC4   0xF88D 0x00A8      STRB     R0,[SP, #+168]
   2213                                          tempBffr3[1] = tempBffr[11];
   \   00001DC8   0xF994 0x000B      LDRSB    R0,[R4, #+11]
   \   00001DCC   0xF88D 0x00A9      STRB     R0,[SP, #+169]
   2214                                          tempBffr3[2] = 0x00;
   \   00001DD0   0x2000             MOVS     R0,#+0
   \   00001DD2   0xF88D 0x00AA      STRB     R0,[SP, #+170]
   2215                                          if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001DD6   0xA82A             ADD      R0,SP,#+168
   \   00001DD8   0x.... 0x....      BL       isHexNum
   \   00001DDC   0x2800             CMP      R0,#+0
   \   00001DDE   0xD105             BNE.N    ??RoadBrd_ParseString_335
   2216                                            strcpy( (char *)tempBffr2, "TIR SYNTAX ERROR: Number of Bytes RECEIVED not HEX Value.\r\n");
   \   00001DE0   0xF8DF 0x1E30      LDR.W    R1,??RoadBrd_ParseString_336
   \   00001DE4   0xA80A             ADD      R0,SP,#+40
   \   00001DE6   0x.... 0x....      BL       strcpy
   \   00001DEA   0xE0AF             B.N      ??RoadBrd_ParseString_330
   2217                                          else
   2218                                          {
   2219                                            // Legal NUMBER BYTES. Save it as value
   2220                                            num_bytes_received = hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_335: (+1)
   \   00001DEC   0xA82A             ADD      R0,SP,#+168
   \   00001DEE   0x.... 0x....      BL       hatoi
   \   00001DF2   0x9039             STR      R0,[SP, #+228]
   2221                                            // 4. Test num_bytes. If Zero, We are done
   2222                                            if (num_bytes == 0)
   \   00001DF4   0x9834             LDR      R0,[SP, #+208]
   \   00001DF6   0x2800             CMP      R0,#+0
   \   00001DF8   0xD106             BNE.N    ??RoadBrd_ParseString_337
   2223                                            {
   2224                                              sprintf( (char *)tempBffr2, "TIR: GOOD CMD: %x.\r\n", Address);
   \   00001DFA   0x9A31             LDR      R2,[SP, #+196]
   \   00001DFC   0xF8DF 0x1E18      LDR.W    R1,??RoadBrd_ParseString_336+0x4
   \   00001E00   0xA80A             ADD      R0,SP,#+40
   \   00001E02   0x.... 0x....      BL       sprintf
   \   00001E06   0xE038             B.N      ??RoadBrd_ParseString_338
   2225                                            }
   2226                                            else
   2227                                            {
   2228                                              // 5. Time to get all the data.
   2229                                              Error = 0;
   \                     ??RoadBrd_ParseString_337: (+1)
   \   00001E08   0x2000             MOVS     R0,#+0
   \   00001E0A   0x9035             STR      R0,[SP, #+212]
   2230                                              for (x=0; x<num_bytes; x++)
   \   00001E0C   0x2000             MOVS     R0,#+0
   \   00001E0E   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_339: (+1)
   \   00001E10   0x9834             LDR      R0,[SP, #+208]
   \   00001E12   0x4287             CMP      R7,R0
   \   00001E14   0xDA31             BGE.N    ??RoadBrd_ParseString_338
   2231                                              {
   2232                                                tempBffr3[0] = tempBffr[13+x*3];
   \   00001E16   0x2003             MOVS     R0,#+3
   \   00001E18   0xFB00 0xF007      MUL      R0,R0,R7
   \   00001E1C   0x4420             ADD      R0,R4,R0
   \   00001E1E   0xF990 0x000D      LDRSB    R0,[R0, #+13]
   \   00001E22   0xF88D 0x00A8      STRB     R0,[SP, #+168]
   2233                                                tempBffr3[1] = tempBffr[14+x*3];
   \   00001E26   0x2003             MOVS     R0,#+3
   \   00001E28   0xFB00 0xF007      MUL      R0,R0,R7
   \   00001E2C   0x4420             ADD      R0,R4,R0
   \   00001E2E   0xF990 0x000E      LDRSB    R0,[R0, #+14]
   \   00001E32   0xF88D 0x00A9      STRB     R0,[SP, #+169]
   2234                                                tempBffr3[2] = 0x00;
   \   00001E36   0x2000             MOVS     R0,#+0
   \   00001E38   0xF88D 0x00AA      STRB     R0,[SP, #+170]
   2235                                                if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001E3C   0xA82A             ADD      R0,SP,#+168
   \   00001E3E   0x.... 0x....      BL       isHexNum
   \   00001E42   0x2800             CMP      R0,#+0
   \   00001E44   0xD112             BNE.N    ??RoadBrd_ParseString_340
   2236                                                {
   2237                                                  strcpy( (char *)tempBffr2, "TIR SYNTAX ERROR: Data not HEX Value.\r\n");
   \   00001E46   0xF8DF 0x1DD4      LDR.W    R1,??RoadBrd_ParseString_336+0x8
   \   00001E4A   0xA80A             ADD      R0,SP,#+40
   \   00001E4C   0x.... 0x....      BL       strcpy
   2238                                                  Error = 1;
   \   00001E50   0x2001             MOVS     R0,#+1
   \   00001E52   0x9035             STR      R0,[SP, #+212]
   2239                                                  break;
   \   00001E54   0xE011             B.N      ??RoadBrd_ParseString_338
   \   00001E56   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_190:
   \   00001E58   0x........         DC32     ?_67
   \   00001E5C   0x........         DC32     ?_68
   \   00001E60   0x........         DC32     ?_69
   \   00001E64   0x........         DC32     ?_70
   \   00001E68   0x........         DC32     ?_71
   2240                                                }
   2241                                                else
   2242                                                {
   2243                                                  i2cData[x] =  hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_340: (+1)
   \   00001E6C   0xA82A             ADD      R0,SP,#+168
   \   00001E6E   0x.... 0x....      BL       hatoi
   \   00001E72   0xA99A             ADD      R1,SP,#+616
   \   00001E74   0x55C8             STRB     R0,[R1, R7]
   2244                                                } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)
   2245                                              } //EndFor (x=0; x<num_bytes; x++)
   \   00001E76   0x1C7F             ADDS     R7,R7,#+1
   \   00001E78   0xE7CA             B.N      ??RoadBrd_ParseString_339
   2246                                            } //EndElse (num_bytes == 0)
   2247                                            if (Error==0)
   \                     ??RoadBrd_ParseString_338: (+1)
   \   00001E7A   0x9835             LDR      R0,[SP, #+212]
   \   00001E7C   0x2800             CMP      R0,#+0
   \   00001E7E   0xD105             BNE.N    ??RoadBrd_ParseString_341
   2248                                            {
   2249                                              sprintf( (char *)tempBffr2, "TIR: GOOD CMD: %x.", Address);
   \   00001E80   0x9A31             LDR      R2,[SP, #+196]
   \   00001E82   0xF8DF 0x1E10      LDR.W    R1,??RoadBrd_ParseString_342
   \   00001E86   0xA80A             ADD      R0,SP,#+40
   \   00001E88   0x.... 0x....      BL       sprintf
   2250                                            }
   2251                                            for(x=0; x<num_bytes; x++)
   \                     ??RoadBrd_ParseString_341: (+1)
   \   00001E8C   0x2000             MOVS     R0,#+0
   \   00001E8E   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_343: (+1)
   \   00001E90   0x9834             LDR      R0,[SP, #+208]
   \   00001E92   0x4287             CMP      R7,R0
   \   00001E94   0xDA0B             BGE.N    ??RoadBrd_ParseString_344
   2252                                            {
   2253                                              sprintf( (char *)tempBffr3, "%x.", i2cData[x]);
   \   00001E96   0xA89A             ADD      R0,SP,#+616
   \   00001E98   0x5DC2             LDRB     R2,[R0, R7]
   \   00001E9A   0xA14D             ADR.N    R1,??RoadBrd_ParseString_207+0x8  ;; "%x."
   \   00001E9C   0xA82A             ADD      R0,SP,#+168
   \   00001E9E   0x.... 0x....      BL       sprintf
   2254                                              strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   00001EA2   0xA92A             ADD      R1,SP,#+168
   \   00001EA4   0xA80A             ADD      R0,SP,#+40
   \   00001EA6   0x.... 0x....      BL       strcat
   2255                                            }
   \   00001EAA   0x1C7F             ADDS     R7,R7,#+1
   \   00001EAC   0xE7F0             B.N      ??RoadBrd_ParseString_343
   2256                                            strcat( (char *)tempBffr2, "\r\n" );
   \                     ??RoadBrd_ParseString_344: (+1)
   \   00001EAE   0xA149             ADR.N    R1,??RoadBrd_ParseString_207+0xC  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001EB0   0xA80A             ADD      R0,SP,#+40
   \   00001EB2   0x.... 0x....      BL       strcat
   2257                                            // 6. Time to send Command and collect status.
   2258                                            Status =  RoadBrd_I2C_Master_Transmit((uint16_t)Address, i2cData, (uint16_t)num_bytes, I2C_TIMEOUT);
   \   00001EB6   0xF44F 0x73FA      MOV      R3,#+500
   \   00001EBA   0x9834             LDR      R0,[SP, #+208]
   \   00001EBC   0x0002             MOVS     R2,R0
   \   00001EBE   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00001EC0   0xA99A             ADD      R1,SP,#+616
   \   00001EC2   0x9831             LDR      R0,[SP, #+196]
   \   00001EC4   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00001EC6   0x.... 0x....      BL       RoadBrd_I2C_Master_Transmit
   \   00001ECA   0x0006             MOVS     R6,R0
   2259                                            // 6a. Wait for Command to complete(100ms).
   2260           
   2261                                            // 7. If Status was good, Time to get response.
   2262                                            if (Status == HAL_OK)
   \   00001ECC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001ECE   0x2E00             CMP      R6,#+0
   \   00001ED0   0xD10E             BNE.N    ??RoadBrd_ParseString_345
   2263                                            {
   2264                                              Status =  RoadBrd_I2C_Master_Receive((uint16_t)Address, i2cData, (uint16_t)num_bytes_received, I2C_TIMEOUT);
   \   00001ED2   0xF44F 0x73FA      MOV      R3,#+500
   \   00001ED6   0x9839             LDR      R0,[SP, #+228]
   \   00001ED8   0x0002             MOVS     R2,R0
   \   00001EDA   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00001EDC   0xA99A             ADD      R1,SP,#+616
   \   00001EDE   0x9831             LDR      R0,[SP, #+196]
   \   00001EE0   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00001EE2   0x.... 0x....      BL       RoadBrd_I2C_Master_Receive
   \   00001EE6   0x0006             MOVS     R6,R0
   2265                                            }
   2266                                            else
   2267                                              break;
   2268                                            // 7a. Wait for Command to complete(100ms).
   2269                                            if (Status == HAL_OK)
   \   00001EE8   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001EEA   0x2E00             CMP      R6,#+0
   \   00001EEC   0xD105             BNE.N    ??RoadBrd_ParseString_346
   \   00001EEE   0xE000             B.N      ??RoadBrd_ParseString_347
   \                     ??RoadBrd_ParseString_345: (+1)
   \   00001EF0   0xE0D9             B.N      ??RoadBrd_ParseString_305
   2270                                            {
   2271                                              Status = RoadBrd_WaitForState( 20 );
   \                     ??RoadBrd_ParseString_347: (+1)
   \   00001EF2   0x2014             MOVS     R0,#+20
   \   00001EF4   0x.... 0x....      BL       RoadBrd_WaitForState
   \   00001EF8   0x0006             MOVS     R6,R0
   2272                                            }
   2273          
   2274                                            // 8. IfGood report, Need to Output Data.
   2275                                            if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_346: (+1)
   \   00001EFA   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001EFC   0x2E00             CMP      R6,#+0
   \   00001EFE   0xD125             BNE.N    ??RoadBrd_ParseString_330
   2276                                            {
   2277                                              // Send string to UART..
   2278          #ifdef NUCLEO
   2279                                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   2280          #else
   2281                                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00001F00   0xA90A             ADD      R1,SP,#+40
   \   00001F02   0x2000             MOVS     R0,#+0
   \   00001F04   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001F08   0x0006             MOVS     R6,R0
   2282          #endif
   2283                                              if (Status != HAL_OK)
   \   00001F0A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001F0C   0x2E00             CMP      R6,#+0
   \   00001F0E   0xD003             BEQ.N    ??RoadBrd_ParseString_348
   2284                                                return Status;
   \   00001F10   0x0030             MOVS     R0,R6
   \   00001F12   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001F14   0xF002 0xBD15      B.W      ??RoadBrd_ParseString_4
   2285                                              // NOW, Build Data String..
   2286                                              sprintf( (char *)tempBffr2, "     DATA: " );
   \                     ??RoadBrd_ParseString_348: (+1)
   \   00001F18   0xF8DF 0x1DF0      LDR.W    R1,??RoadBrd_ParseString_349
   \   00001F1C   0xA80A             ADD      R0,SP,#+40
   \   00001F1E   0x.... 0x....      BL       sprintf
   2287                                              for(x=0; x<num_bytes_received; x++)
   \   00001F22   0x2000             MOVS     R0,#+0
   \   00001F24   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_350: (+1)
   \   00001F26   0x9839             LDR      R0,[SP, #+228]
   \   00001F28   0x4287             CMP      R7,R0
   \   00001F2A   0xDA0B             BGE.N    ??RoadBrd_ParseString_351
   2288                                              {
   2289                                                sprintf( (char *)tempBffr3, "%x.", i2cData[x]);
   \   00001F2C   0xA89A             ADD      R0,SP,#+616
   \   00001F2E   0x5DC2             LDRB     R2,[R0, R7]
   \   00001F30   0xA127             ADR.N    R1,??RoadBrd_ParseString_207+0x8  ;; "%x."
   \   00001F32   0xA82A             ADD      R0,SP,#+168
   \   00001F34   0x.... 0x....      BL       sprintf
   2290                                                strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   00001F38   0xA92A             ADD      R1,SP,#+168
   \   00001F3A   0xA80A             ADD      R0,SP,#+40
   \   00001F3C   0x.... 0x....      BL       strcat
   2291                                              }
   \   00001F40   0x1C7F             ADDS     R7,R7,#+1
   \   00001F42   0xE7F0             B.N      ??RoadBrd_ParseString_350
   2292                                              strcat( (char *)tempBffr2, "\r\n" );
   \                     ??RoadBrd_ParseString_351: (+1)
   \   00001F44   0xA123             ADR.N    R1,??RoadBrd_ParseString_207+0xC  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001F46   0xA80A             ADD      R0,SP,#+40
   \   00001F48   0x.... 0x....      BL       strcat
   2293                                            }
   2294                                          }
   2295                                        } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)...NUMBER BYTES
   2296                                        
   2297                                      } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)...Address
   2298                                      
   2299                                    } //EndElse ( (tempBffr[2]!=':') || (tempBffr[5]!='.') )
   2300                                
   2301                                    break;
   \                     ??RoadBrd_ParseString_330: (+1)
   \   00001F4C   0xE0AB             B.N      ??RoadBrd_ParseString_305
   2302          //------------------
   2303                                  case 'Q':
   2304                                    //I2C Receive Command
   2305                                    // Step 1. Validate format.
   2306                                    if( (tempBffr[3]!=':') ||
   2307                                        (tempBffr[6]!='.')  )
   \                     ??RoadBrd_ParseString_306: (+1)
   \   00001F4E   0x78E0             LDRB     R0,[R4, #+3]
   \   00001F50   0x283A             CMP      R0,#+58
   \   00001F52   0xD102             BNE.N    ??RoadBrd_ParseString_352
   \   00001F54   0x79A0             LDRB     R0,[R4, #+6]
   \   00001F56   0x282E             CMP      R0,#+46
   \   00001F58   0xD012             BEQ.N    ??RoadBrd_ParseString_353
   2308                                    {
   2309                                      // Is this a BLE Operation?
   2310                                      if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_352: (+1)
   \   00001F5A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001F5C   0x2D00             CMP      R5,#+0
   \   00001F5E   0xD009             BEQ.N    ??RoadBrd_ParseString_354
   2311                                      {
   2312                                        // Yes...Build and Send BLE Response NOW.
   2313                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001F60   0x491A             LDR.N    R1,??RoadBrd_ParseString_207+0x4
   \   00001F62   0xA80A             ADD      R0,SP,#+40
   \   00001F64   0x.... 0x....      BL       strcpy
   2314                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001F68   0xA80A             ADD      R0,SP,#+40
   \   00001F6A   0x.... 0x....      BL       strlen
   \   00001F6E   0xA90A             ADD      R1,SP,#+40
   \   00001F70   0x.... 0x....      BL       BGM111_Transmit
   2315                                      }
   2316                                      
   2317                                      strcpy( (char *)tempBffr2, "TIQ SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_354: (+1)
   \   00001F74   0xF8DF 0x1E0C      LDR.W    R1,??RoadBrd_ParseString_355
   \   00001F78   0xA80A             ADD      R0,SP,#+40
   \   00001F7A   0x.... 0x....      BL       strcpy
   \   00001F7E   0xE08C             B.N      ??RoadBrd_ParseString_356
   2318                                    }
   2319                                    else
   2320                                    {
   2321                                      // Is this a BLE Operation?
   2322                                      if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_353: (+1)
   \   00001F80   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001F82   0x2D00             CMP      R5,#+0
   \   00001F84   0xD009             BEQ.N    ??RoadBrd_ParseString_357
   2323                                      {
   2324                                        // Yes...Build and Send BLE Response NOW.
   2325                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001F86   0x4911             LDR.N    R1,??RoadBrd_ParseString_207+0x4
   \   00001F88   0xA80A             ADD      R0,SP,#+40
   \   00001F8A   0x.... 0x....      BL       strcpy
   2326                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001F8E   0xA80A             ADD      R0,SP,#+40
   \   00001F90   0x.... 0x....      BL       strlen
   \   00001F94   0xA90A             ADD      R1,SP,#+40
   \   00001F96   0x.... 0x....      BL       BGM111_Transmit
   2327                                      }
   2328                                      
   2329                                      // 2. Grab Address and validate a legal number
   2330                                      tempBffr3[0] = tempBffr[4];
   \                     ??RoadBrd_ParseString_357: (+1)
   \   00001F9A   0xF994 0x0004      LDRSB    R0,[R4, #+4]
   \   00001F9E   0xF88D 0x00A8      STRB     R0,[SP, #+168]
   2331                                      tempBffr3[1] = tempBffr[5];
   \   00001FA2   0xF994 0x0005      LDRSB    R0,[R4, #+5]
   \   00001FA6   0xF88D 0x00A9      STRB     R0,[SP, #+169]
   2332                                      tempBffr3[2] = 0x00;
   \   00001FAA   0x2000             MOVS     R0,#+0
   \   00001FAC   0xF88D 0x00AA      STRB     R0,[SP, #+170]
   2333                                      if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001FB0   0xA82A             ADD      R0,SP,#+168
   \   00001FB2   0x.... 0x....      BL       isHexNum
   \   00001FB6   0x2800             CMP      R0,#+0
   \   00001FB8   0xD10E             BNE.N    ??RoadBrd_ParseString_358
   2334                                        strcpy( (char *)tempBffr2, "TIQ SYNTAX ERROR: Address not HEX Value.\r\n");
   \   00001FBA   0xF8DF 0x1DCC      LDR.W    R1,??RoadBrd_ParseString_355+0x4
   \   00001FBE   0xA80A             ADD      R0,SP,#+40
   \   00001FC0   0x.... 0x....      BL       strcpy
   \   00001FC4   0xE069             B.N      ??RoadBrd_ParseString_356
   \   00001FC6   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_207:
   \   00001FC8   0x........         DC32     ?_72
   \   00001FCC   0x........         DC32     ?_24
   \   00001FD0   0x25 0x78          DC8      "%x."
   \              0x2E 0x00    
   \   00001FD4   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
   2335                                      else
   2336                                      {
   2337                                        // Legal Address. Save it as value
   2338                                        Address = hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_358: (+1)
   \   00001FD8   0xA82A             ADD      R0,SP,#+168
   \   00001FDA   0x.... 0x....      BL       hatoi
   \   00001FDE   0x9031             STR      R0,[SP, #+196]
   2339                                        // 3. Now get the number of bytes Received of data from field.
   2340                                        tempBffr3[0] = tempBffr[7];
   \   00001FE0   0xF994 0x0007      LDRSB    R0,[R4, #+7]
   \   00001FE4   0xF88D 0x00A8      STRB     R0,[SP, #+168]
   2341                                        tempBffr3[1] = tempBffr[8];
   \   00001FE8   0xF994 0x0008      LDRSB    R0,[R4, #+8]
   \   00001FEC   0xF88D 0x00A9      STRB     R0,[SP, #+169]
   2342                                        tempBffr3[2] = 0x00;
   \   00001FF0   0x2000             MOVS     R0,#+0
   \   00001FF2   0xF88D 0x00AA      STRB     R0,[SP, #+170]
   2343                                        if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001FF6   0xA82A             ADD      R0,SP,#+168
   \   00001FF8   0x.... 0x....      BL       isHexNum
   \   00001FFC   0x2800             CMP      R0,#+0
   \   00001FFE   0xD105             BNE.N    ??RoadBrd_ParseString_359
   2344                                          strcpy( (char *)tempBffr2, "TIQ SYNTAX ERROR: Number of Bytes not HEX Value.\r\n");
   \   00002000   0xF8DF 0x1E24      LDR.W    R1,??RoadBrd_ParseString_360
   \   00002004   0xA80A             ADD      R0,SP,#+40
   \   00002006   0x.... 0x....      BL       strcpy
   \   0000200A   0xE046             B.N      ??RoadBrd_ParseString_356
   2345                                        else
   2346                                        {
   2347                                            // Legal NUMBER BYTES. Save it as value
   2348                                            num_bytes_received = hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_359: (+1)
   \   0000200C   0xA82A             ADD      R0,SP,#+168
   \   0000200E   0x.... 0x....      BL       hatoi
   \   00002012   0x9039             STR      R0,[SP, #+228]
   2349                                            // 4. Test num_bytes. If Zero, We are done
   2350                                            sprintf( (char *)tempBffr2, "TIR: GOOD CMD: %x.\r\n", Address);
   \   00002014   0x9A31             LDR      R2,[SP, #+196]
   \   00002016   0xF8DF 0x1C00      LDR.W    R1,??RoadBrd_ParseString_336+0x4
   \   0000201A   0xA80A             ADD      R0,SP,#+40
   \   0000201C   0x.... 0x....      BL       sprintf
   2351                                            // 7. If Status was good, Time to get response.
   2352                                            Status =  RoadBrd_I2C_Master_Receive((uint16_t)Address, i2cData, (uint16_t)num_bytes_received, I2C_TIMEOUT);
   \   00002020   0xF44F 0x73FA      MOV      R3,#+500
   \   00002024   0x9839             LDR      R0,[SP, #+228]
   \   00002026   0x0002             MOVS     R2,R0
   \   00002028   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000202A   0xA99A             ADD      R1,SP,#+616
   \   0000202C   0x9831             LDR      R0,[SP, #+196]
   \   0000202E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00002030   0x.... 0x....      BL       RoadBrd_I2C_Master_Receive
   \   00002034   0x0006             MOVS     R6,R0
   2353                                            // 7a. Wait for Command to complete(100ms).
   2354                                            if (Status == HAL_OK)
   \   00002036   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002038   0x2E00             CMP      R6,#+0
   \   0000203A   0xD107             BNE.N    ??RoadBrd_ParseString_361
   2355                                            {
   2356                                              Status = RoadBrd_WaitForState( 20 );
   \   0000203C   0x2014             MOVS     R0,#+20
   \   0000203E   0x.... 0x....      BL       RoadBrd_WaitForState
   \   00002042   0x0006             MOVS     R6,R0
   2357                                            }
   2358                                            else
   2359                                              break;
   2360                                            // 8. IfGood report, Need to Output Data.
   2361                                            if (Status == HAL_OK)
   \   00002044   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002046   0x2E00             CMP      R6,#+0
   \   00002048   0xD127             BNE.N    ??RoadBrd_ParseString_356
   \   0000204A   0xE000             B.N      ??RoadBrd_ParseString_362
   \                     ??RoadBrd_ParseString_361: (+1)
   \   0000204C   0xE02B             B.N      ??RoadBrd_ParseString_305
   2362                                            {
   2363                                              // Send string to UART..
   2364          #ifdef NUCLEO
   2365                                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   2366          #else
   2367                                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \                     ??RoadBrd_ParseString_362: (+1)
   \   0000204E   0xA90A             ADD      R1,SP,#+40
   \   00002050   0x2000             MOVS     R0,#+0
   \   00002052   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00002056   0x0006             MOVS     R6,R0
   2368          #endif
   2369                                              if (Status != HAL_OK)
   \   00002058   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000205A   0x2E00             CMP      R6,#+0
   \   0000205C   0xD003             BEQ.N    ??RoadBrd_ParseString_363
   2370                                                return Status;
   \   0000205E   0x0030             MOVS     R0,R6
   \   00002060   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002062   0xF002 0xBC6E      B.W      ??RoadBrd_ParseString_4
   2371                                              // NOW, Build Data String..
   2372                                              sprintf( (char *)tempBffr2, "     DATA: " );
   \                     ??RoadBrd_ParseString_363: (+1)
   \   00002066   0xF8DF 0x1CA4      LDR.W    R1,??RoadBrd_ParseString_349
   \   0000206A   0xA80A             ADD      R0,SP,#+40
   \   0000206C   0x.... 0x....      BL       sprintf
   2373                                              for(x=0; x<num_bytes_received; x++)
   \   00002070   0x2000             MOVS     R0,#+0
   \   00002072   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_364: (+1)
   \   00002074   0x9839             LDR      R0,[SP, #+228]
   \   00002076   0x4287             CMP      R7,R0
   \   00002078   0xDA0B             BGE.N    ??RoadBrd_ParseString_365
   2374                                              {
   2375                                                sprintf( (char *)tempBffr3, "%x.", i2cData[x]);
   \   0000207A   0xA89A             ADD      R0,SP,#+616
   \   0000207C   0x5DC2             LDRB     R2,[R0, R7]
   \   0000207E   0xA1D5             ADR.N    R1,??RoadBrd_ParseString_249+0x4  ;; "%x."
   \   00002080   0xA82A             ADD      R0,SP,#+168
   \   00002082   0x.... 0x....      BL       sprintf
   2376                                                strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   00002086   0xA92A             ADD      R1,SP,#+168
   \   00002088   0xA80A             ADD      R0,SP,#+40
   \   0000208A   0x.... 0x....      BL       strcat
   2377                                              }
   \   0000208E   0x1C7F             ADDS     R7,R7,#+1
   \   00002090   0xE7F0             B.N      ??RoadBrd_ParseString_364
   2378                                              strcat( (char *)tempBffr2, "\r\n" );
   \                     ??RoadBrd_ParseString_365: (+1)
   \   00002092   0xA1D1             ADR.N    R1,??RoadBrd_ParseString_249+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00002094   0xA80A             ADD      R0,SP,#+40
   \   00002096   0x.... 0x....      BL       strcat
   2379                                          }
   2380                                        } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)...NUMBER BYTES
   2381                                        
   2382                                      } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)...Address
   2383                                      
   2384                                    } //EndElse ( (tempBffr[2]!=':') || (tempBffr[5]!='.') )
   2385                                
   2386                                    break;
   \                     ??RoadBrd_ParseString_356: (+1)
   \   0000209A   0xE004             B.N      ??RoadBrd_ParseString_305
   2387                                  default:
   2388                                    strcpy( (char *)tempBffr2, "ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_307: (+1)
   \   0000209C   0xF8DF 0x17A0      LDR.W    R1,??RoadBrd_ParseString_281
   \   000020A0   0xA80A             ADD      R0,SP,#+40
   \   000020A2   0x.... 0x....      BL       strcpy
   2389                                    break;
   2390                                } //EndSwitch ( tempBffr[2] )
   2391                              } //EndElse (Size < 9)
   2392                              break;
   \                     ??RoadBrd_ParseString_305: (+1)
   \   000020A6   0xF002 0xBBC0      B.W      ??RoadBrd_ParseString_290
   \   000020AA   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_215:
   \   000020AC   0x........         DC32     ?_73
   \   000020B0   0x........         DC32     ?_74
   \   000020B4   0x........         DC32     ?_75
   \   000020B8   0x........         DC32     ?_35
   2393          //++++++++++++++++++++++++++++++++++++++++++  Calibration Commands.
   2394                            case 'C':
   2395                              Status = HAL_OK;
   \                     ??RoadBrd_ParseString_291: (+1)
   \   000020BC   0x2000             MOVS     R0,#+0
   \   000020BE   0x0006             MOVS     R6,R0
   2396                              if (Size == 2)
   \   000020C0   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000020C4   0xF1B8 0x0F02      CMP      R8,#+2
   \   000020C8   0xF040 0x80EC      BNE.W    ??RoadBrd_ParseString_366
   2397                              {
   2398                                //------------------ TC Command: Dump Calibration Settings.      
   2399                                // Read Cool Eye/Grid Eye Values.....
   2400                                if ( Get_DriverStates( GRIDEYE_MNTR_TASK ))
   \   000020CC   0x2005             MOVS     R0,#+5
   \   000020CE   0x.... 0x....      BL       Get_DriverStates
   \   000020D2   0x2800             CMP      R0,#+0
   \   000020D4   0xD004             BEQ.N    ??RoadBrd_ParseString_367
   2401                                {
   2402                                  Status = RoadBrd_GridEye_ReadValues_Scaled( &GridMeasure );
   \   000020D6   0xA85B             ADD      R0,SP,#+364
   \   000020D8   0x.... 0x....      BL       RoadBrd_GridEye_ReadValues_Scaled
   \   000020DC   0x0006             MOVS     R6,R0
   \   000020DE   0xE00B             B.N      ??RoadBrd_ParseString_368
   2403                                }
   2404                                else if ( Get_DriverStates( COOLEYE_MNTR_TASK ))
   \                     ??RoadBrd_ParseString_367: (+1)
   \   000020E0   0x2006             MOVS     R0,#+6
   \   000020E2   0x.... 0x....      BL       Get_DriverStates
   \   000020E6   0x2800             CMP      R0,#+0
   \   000020E8   0xD004             BEQ.N    ??RoadBrd_ParseString_369
   2405                                {
   2406                                  Status = RoadBrd_CoolEye_ReadValues_Scaled( &GridMeasure );
   \   000020EA   0xA85B             ADD      R0,SP,#+364
   \   000020EC   0x.... 0x....      BL       RoadBrd_CoolEye_ReadValues_Scaled
   \   000020F0   0x0006             MOVS     R6,R0
   \   000020F2   0xE001             B.N      ??RoadBrd_ParseString_368
   2407                                }
   2408                                else
   2409                                  Status = HAL_ERROR;
   \                     ??RoadBrd_ParseString_369: (+1)
   \   000020F4   0x2001             MOVS     R0,#+1
   \   000020F6   0x0006             MOVS     R6,R0
   2410                                
   2411                                // Is this a BLE Operation?
   2412                                if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_368: (+1)
   \   000020F8   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000020FA   0x2E00             CMP      R6,#+0
   \   000020FC   0xF040 0x80B8      BNE.W    ??RoadBrd_ParseString_370
   2413                                {
   2414                                  // OK Next Sensor.
   2415                                  // Read Temperature sensor and return results....Temperature Sensor U10(PCT2075GVJ).  Addr: 0x94
   2416                                  Status = RoadBrd_ReadTemp_Scaled( &TMeasure );
   \   00002100   0xA83C             ADD      R0,SP,#+240
   \   00002102   0x.... 0x....      BL       RoadBrd_ReadTemp_Scaled
   \   00002106   0x0006             MOVS     R6,R0
   2417                                  if (Status == HAL_OK)
   \   00002108   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000210A   0x2E00             CMP      R6,#+0
   \   0000210C   0xF040 0x8098      BNE.W    ??RoadBrd_ParseString_371
   2418                                  {
   2419                                    // OK Next Sensor.
   2420                                    // Read Humidity Sensor sensor and return Humidity results....
   2421                                    Status = RoadBrd_Humidity_ReadHumidity_Scaled( &HMeasure );
   \   00002110   0xA849             ADD      R0,SP,#+292
   \   00002112   0x.... 0x....      BL       RoadBrd_Humidity_ReadHumidity_Scaled
   \   00002116   0x0006             MOVS     R6,R0
   2422                                    if (Status == HAL_OK)
   \   00002118   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000211A   0x2E00             CMP      R6,#+0
   \   0000211C   0xD178             BNE.N    ??RoadBrd_ParseString_372
   2423                                    {
   2424                                      // OK Next Sensor.
   2425                                      //Status = RoadBrd_Barometer_Status( &PRMeasure );
   2426                                      Status = RoadBrd_Baro_ReadPressure_Scaled( &PRPMeasure );
   \   0000211E   0xA8AE             ADD      R0,SP,#+696
   \   00002120   0x.... 0x....      BL       RoadBrd_Baro_ReadPressure_Scaled
   \   00002124   0x0006             MOVS     R6,R0
   2427                                      if (Status == HAL_OK)
   \   00002126   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002128   0x2E00             CMP      R6,#+0
   \   0000212A   0xD159             BNE.N    ??RoadBrd_ParseString_373
   2428                                      {
   2429                                        if ( BLE_Flag )
   \   0000212C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000212E   0x2D00             CMP      R5,#+0
   \   00002130   0xD025             BEQ.N    ??RoadBrd_ParseString_374
   2430                                        {
   2431                                          // Yes...Build and Send BLE Response NOW.
   2432                                          sprintf( (char *)tempBffr2, "<STATUS>%s//%s//%s//%s//%s//%s//%s//%s//%s//%s//%s//%s</STATUS>", (char *)GridMeasure.GridEye1.TempC,
   2433                                                  (char *)GridMeasure.GridEye2.TempC,
   2434                                                  (char *)GridMeasure.GridEye3.TempC,
   2435                                                  (char *)GridMeasure.GridEye4.TempC,
   2436                                                  (char *)GridMeasure.GridEye5.TempC,
   2437                                                  (char *)GridMeasure.GridEye6.TempC,
   2438                                                  (char *)GridMeasure.GridEye7.TempC,
   2439                                                  (char *)GridMeasure.GridEye8.TempC,
   2440                                                  (char *)GridMeasure.Thermistor.TempC,
   2441                                                  (char *)TMeasure.TempC,
   2442                                                  (char *)HMeasure.Humidity,
   2443                                                  (char *)PRPMeasure.Pressure);
   \   00002132   0xA8AE             ADD      R0,SP,#+696
   \   00002134   0x9009             STR      R0,[SP, #+36]
   \   00002136   0xA849             ADD      R0,SP,#+292
   \   00002138   0x9008             STR      R0,[SP, #+32]
   \   0000213A   0xA83C             ADD      R0,SP,#+240
   \   0000213C   0x9007             STR      R0,[SP, #+28]
   \   0000213E   0xA85B             ADD      R0,SP,#+364
   \   00002140   0x9006             STR      R0,[SP, #+24]
   \   00002142   0xA88B             ADD      R0,SP,#+556
   \   00002144   0x9005             STR      R0,[SP, #+20]
   \   00002146   0xA885             ADD      R0,SP,#+532
   \   00002148   0x9004             STR      R0,[SP, #+16]
   \   0000214A   0xA87F             ADD      R0,SP,#+508
   \   0000214C   0x9003             STR      R0,[SP, #+12]
   \   0000214E   0xA879             ADD      R0,SP,#+484
   \   00002150   0x9002             STR      R0,[SP, #+8]
   \   00002152   0xA873             ADD      R0,SP,#+460
   \   00002154   0x9001             STR      R0,[SP, #+4]
   \   00002156   0xA86D             ADD      R0,SP,#+436
   \   00002158   0x9000             STR      R0,[SP, #+0]
   \   0000215A   0xAB67             ADD      R3,SP,#+412
   \   0000215C   0xAA61             ADD      R2,SP,#+388
   \   0000215E   0xF8DF 0x1D8C      LDR.W    R1,??RoadBrd_ParseString_375
   \   00002162   0xA80A             ADD      R0,SP,#+40
   \   00002164   0x.... 0x....      BL       sprintf
   2444                                          strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00002168   0xF8DF 0x1D84      LDR.W    R1,??RoadBrd_ParseString_375+0x4
   \   0000216C   0xA80A             ADD      R0,SP,#+40
   \   0000216E   0x.... 0x....      BL       strcpy
   2445                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002172   0xA80A             ADD      R0,SP,#+40
   \   00002174   0x.... 0x....      BL       strlen
   \   00002178   0xA90A             ADD      R1,SP,#+40
   \   0000217A   0x.... 0x....      BL       BGM111_Transmit
   2446                                        }
   2447                                        
   2448                                        //sprintf( (char *)tempBffr2, "Driver Status: %04x\r\n", DriverStatus );
   2449                                        sprintf( (char *)tempBffr2, "%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\r\n", (char *)GridMeasure.GridEye1.TempC,
   2450                                                (char *)GridMeasure.GridEye2.TempC,
   2451                                                (char *)GridMeasure.GridEye3.TempC,
   2452                                                (char *)GridMeasure.GridEye4.TempC,
   2453                                                (char *)GridMeasure.GridEye5.TempC,
   2454                                                (char *)GridMeasure.GridEye6.TempC,
   2455                                                (char *)GridMeasure.GridEye7.TempC,
   2456                                                (char *)GridMeasure.GridEye8.TempC,
   2457                                                (char *)GridMeasure.Thermistor.TempC,
   2458                                                (char *)TMeasure.TempC,
   2459                                                (char *)HMeasure.Humidity,
   2460                                                (char *)PRPMeasure.Pressure);
   \                     ??RoadBrd_ParseString_374: (+1)
   \   0000217E   0xA8AE             ADD      R0,SP,#+696
   \   00002180   0x9009             STR      R0,[SP, #+36]
   \   00002182   0xA849             ADD      R0,SP,#+292
   \   00002184   0x9008             STR      R0,[SP, #+32]
   \   00002186   0xA83C             ADD      R0,SP,#+240
   \   00002188   0x9007             STR      R0,[SP, #+28]
   \   0000218A   0xA85B             ADD      R0,SP,#+364
   \   0000218C   0x9006             STR      R0,[SP, #+24]
   \   0000218E   0xA88B             ADD      R0,SP,#+556
   \   00002190   0x9005             STR      R0,[SP, #+20]
   \   00002192   0xA885             ADD      R0,SP,#+532
   \   00002194   0x9004             STR      R0,[SP, #+16]
   \   00002196   0xA87F             ADD      R0,SP,#+508
   \   00002198   0x9003             STR      R0,[SP, #+12]
   \   0000219A   0xA879             ADD      R0,SP,#+484
   \   0000219C   0x9002             STR      R0,[SP, #+8]
   \   0000219E   0xA873             ADD      R0,SP,#+460
   \   000021A0   0x9001             STR      R0,[SP, #+4]
   \   000021A2   0xA86D             ADD      R0,SP,#+436
   \   000021A4   0x9000             STR      R0,[SP, #+0]
   \   000021A6   0xAB67             ADD      R3,SP,#+412
   \   000021A8   0xAA61             ADD      R2,SP,#+388
   \   000021AA   0xF8DF 0x1D48      LDR.W    R1,??RoadBrd_ParseString_375+0x8
   \   000021AE   0xA80A             ADD      R0,SP,#+40
   \   000021B0   0x.... 0x....      BL       sprintf
   2461                                        // Send string to UART..
   2462          #ifdef NUCLEO
   2463                                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   2464          #else
   2465                                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000021B4   0xA90A             ADD      R1,SP,#+40
   \   000021B6   0x2000             MOVS     R0,#+0
   \   000021B8   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000021BC   0x0006             MOVS     R6,R0
   2466          #endif
   2467                                        if (Status != HAL_OK)
   \   000021BE   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000021C0   0x2E00             CMP      R6,#+0
   \   000021C2   0xD003             BEQ.N    ??RoadBrd_ParseString_376
   2468                                          return Status;
   \   000021C4   0x0030             MOVS     R0,R6
   \   000021C6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000021C8   0xF002 0xBBBB      B.W      ??RoadBrd_ParseString_4
   2469                                        // NOW, Build Data String..
   2470                                        sprintf( (char *)tempBffr2, "COMPLETE" );
   \                     ??RoadBrd_ParseString_376: (+1)
   \   000021CC   0xF8DF 0x1E38      LDR.W    R1,??RoadBrd_ParseString_377
   \   000021D0   0xA80A             ADD      R0,SP,#+40
   \   000021D2   0x.... 0x....      BL       sprintf
   \   000021D6   0xF001 0xBEA0      B.W      ??RoadBrd_ParseString_378
   \   000021DA   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_222:
   \   000021DC   0x........         DC32     ?_36
   2471                                      } // Endif (Status == HAL_OK) RoadBrd_Baro_ReadPressure
   2472                                      else
   2473                                      {
   2474                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_373: (+1)
   \   000021E0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000021E2   0x2D00             CMP      R5,#+0
   \   000021E4   0xD00A             BEQ.N    ??RoadBrd_ParseString_379
   2475                                        {
   2476                                          // Yes...Build and Send BLE Response NOW.
   2477                                          strcpy( (char *)tempBffr2, "<STATUS>CMD_TC_HWERR_PRESSUE</STATUS>");
   \   000021E6   0xF8DF 0x1E24      LDR.W    R1,??RoadBrd_ParseString_377+0x4
   \   000021EA   0xA80A             ADD      R0,SP,#+40
   \   000021EC   0x.... 0x....      BL       strcpy
   2478                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000021F0   0xA80A             ADD      R0,SP,#+40
   \   000021F2   0x.... 0x....      BL       strlen
   \   000021F6   0xA90A             ADD      R1,SP,#+40
   \   000021F8   0x.... 0x....      BL       BGM111_Transmit
   2479                                        }
   2480                                        
   2481                                        sprintf( (char *)tempBffr2, "Pressure TASKING ERROR!" );
   \                     ??RoadBrd_ParseString_379: (+1)
   \   000021FC   0xF8DF 0x1E10      LDR.W    R1,??RoadBrd_ParseString_377+0x8
   \   00002200   0xA80A             ADD      R0,SP,#+40
   \   00002202   0x.... 0x....      BL       sprintf
   \   00002206   0xF001 0xBE88      B.W      ??RoadBrd_ParseString_378
   \   0000220A   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_225:
   \   0000220C   0x........         DC32     ?_76
   2482                                      } // EndElse (Status == HAL_OK) RoadBrd_Baro_ReadPressure
   2483                                    } // Endif (Status == HAL_OK) RoadBrd_Humidity_ReadHumidity
   2484                                    else
   2485                                    {
   2486                                      if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_372: (+1)
   \   00002210   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002212   0x2D00             CMP      R5,#+0
   \   00002214   0xD00A             BEQ.N    ??RoadBrd_ParseString_380
   2487                                      {
   2488                                        // Yes...Build and Send BLE Response NOW.
   2489                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_TC_HWERR_HUMIDITY</STATUS>");
   \   00002216   0xF8DF 0x1DFC      LDR.W    R1,??RoadBrd_ParseString_377+0xC
   \   0000221A   0xA80A             ADD      R0,SP,#+40
   \   0000221C   0x.... 0x....      BL       strcpy
   2490                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002220   0xA80A             ADD      R0,SP,#+40
   \   00002222   0x.... 0x....      BL       strlen
   \   00002226   0xA90A             ADD      R1,SP,#+40
   \   00002228   0x.... 0x....      BL       BGM111_Transmit
   2491                                      }
   2492                                      
   2493                                      sprintf( (char *)tempBffr2, "Humidity TASKING ERROR!" );
   \                     ??RoadBrd_ParseString_380: (+1)
   \   0000222C   0xF8DF 0x1DE8      LDR.W    R1,??RoadBrd_ParseString_377+0x10
   \   00002230   0xA80A             ADD      R0,SP,#+40
   \   00002232   0x.... 0x....      BL       sprintf
   \   00002236   0xF001 0xBE70      B.W      ??RoadBrd_ParseString_378
   \   0000223A   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_226:
   \   0000223C   0x........         DC32     ?_77
   2494                                    } // EndElse (Status == HAL_OK) RoadBrd_Humidity_ReadHumidity
   2495                                  } // Endif (Status == HAL_OK) RoadBrd_ReadTemp
   2496                                  else
   2497                                  {
   2498                                    if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_371: (+1)
   \   00002240   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002242   0x2D00             CMP      R5,#+0
   \   00002244   0xD00A             BEQ.N    ??RoadBrd_ParseString_381
   2499                                    {
   2500                                      // Yes...Build and Send BLE Response NOW.
   2501                                      strcpy( (char *)tempBffr2, "<STATUS>CMD_TC_HWERR_TEMPERATURE</STATUS>");
   \   00002246   0xF8DF 0x1DD4      LDR.W    R1,??RoadBrd_ParseString_377+0x14
   \   0000224A   0xA80A             ADD      R0,SP,#+40
   \   0000224C   0x.... 0x....      BL       strcpy
   2502                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002250   0xA80A             ADD      R0,SP,#+40
   \   00002252   0x.... 0x....      BL       strlen
   \   00002256   0xA90A             ADD      R1,SP,#+40
   \   00002258   0x.... 0x....      BL       BGM111_Transmit
   2503                                    }
   2504                                    
   2505                                    sprintf( (char *)tempBffr2, "AMBIENT TEMPERATURE TASKING ERROR!" );
   \                     ??RoadBrd_ParseString_381: (+1)
   \   0000225C   0xF8DF 0x1DC0      LDR.W    R1,??RoadBrd_ParseString_377+0x18
   \   00002260   0xA80A             ADD      R0,SP,#+40
   \   00002262   0x.... 0x....      BL       sprintf
   \   00002266   0xF001 0xBE58      B.W      ??RoadBrd_ParseString_378
   \   0000226A   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_229:
   \   0000226C   0x........         DC32     ?_78
   2506                                  } // EndElse (Status == HAL_OK) RoadBrd_ReadTemp
   2507                                } // Endif (Status == HAL_OK) RoadBrd_CoolEye_ReadValues
   2508                                else
   2509                                {
   2510                                  if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_370: (+1)
   \   00002270   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002272   0x2D00             CMP      R5,#+0
   \   00002274   0xD00A             BEQ.N    ??RoadBrd_ParseString_382
   2511                                  {
   2512                                    // Yes...Build and Send BLE Response NOW.
   2513                                    strcpy( (char *)tempBffr2, "<STATUS>CMD_TC_HWERR_IRTEMP</STATUS>");
   \   00002276   0xF8DF 0x1E40      LDR.W    R1,??RoadBrd_ParseString_383
   \   0000227A   0xA80A             ADD      R0,SP,#+40
   \   0000227C   0x.... 0x....      BL       strcpy
   2514                                    BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002280   0xA80A             ADD      R0,SP,#+40
   \   00002282   0x.... 0x....      BL       strlen
   \   00002286   0xA90A             ADD      R1,SP,#+40
   \   00002288   0x.... 0x....      BL       BGM111_Transmit
   2515                                  }
   2516                                  
   2517                                  sprintf( (char *)tempBffr2, "GRID EYE/COOL EYE TASKING ERROR!" );
   \                     ??RoadBrd_ParseString_382: (+1)
   \   0000228C   0xF8DF 0x1E2C      LDR.W    R1,??RoadBrd_ParseString_383+0x4
   \   00002290   0xA80A             ADD      R0,SP,#+40
   \   00002292   0x.... 0x....      BL       sprintf
   \   00002296   0xF001 0xBE40      B.W      ??RoadBrd_ParseString_378
   \   0000229A   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_231:
   \   0000229C   0x........         DC32     ?_79
   \   000022A0   0x........         DC32     ?_80
   2518                                } // EndElse (Status == HAL_OK) RoadBrd_CoolEye_ReadValues
   2519                              }
   2520                              else
   2521                              {
   2522                                switch( tempBffr[2] )
   \                     ??RoadBrd_ParseString_366: (+1)
   \   000022A4   0x78A0             LDRB     R0,[R4, #+2]
   \   000022A6   0x2849             CMP      R0,#+73
   \   000022A8   0xF001 0x860A      BEQ.W    ??RoadBrd_ParseString_384
   \   000022AC   0x2852             CMP      R0,#+82
   \   000022AE   0xF000 0x85E7      BEQ.W    ??RoadBrd_ParseString_385
   \   000022B2   0x2853             CMP      R0,#+83
   \   000022B4   0xD004             BEQ.N    ??RoadBrd_ParseString_386
   \   000022B6   0x2854             CMP      R0,#+84
   \   000022B8   0xF001 0x859D      BEQ.W    ??RoadBrd_ParseString_387
   \   000022BC   0xF001 0xBE2D      B.W      ??RoadBrd_ParseString_378
   2523                                {
   2524                                  //------------------ TCS Command: Calibration Set Command
   2525                                case 'S':
   2526                                  // Step 1. Validate format.
   2527                                  if(tempBffr[3]!=':')
   \                     ??RoadBrd_ParseString_386: (+1)
   \   000022C0   0x78E0             LDRB     R0,[R4, #+3]
   \   000022C2   0x283A             CMP      R0,#+58
   \   000022C4   0xD01A             BEQ.N    ??RoadBrd_ParseString_388
   2528                                  {
   2529                                    // Is this a BLE Operation?
   2530                                    if ( BLE_Flag )
   \   000022C6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000022C8   0x2D00             CMP      R5,#+0
   \   000022CA   0xD00A             BEQ.N    ??RoadBrd_ParseString_389
   2531                                    {
   2532                                      // Yes...Build and Send BLE Response NOW.
   2533                                      strcpy( (char *)tempBffr2, "<STATUS>CMD_TCS_SYNTAX</STATUS>");
   \   000022CC   0xF8DF 0x1DF0      LDR.W    R1,??RoadBrd_ParseString_383+0x8
   \   000022D0   0xA80A             ADD      R0,SP,#+40
   \   000022D2   0x.... 0x....      BL       strcpy
   2534                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000022D6   0xA80A             ADD      R0,SP,#+40
   \   000022D8   0x.... 0x....      BL       strlen
   \   000022DC   0xA90A             ADD      R1,SP,#+40
   \   000022DE   0x.... 0x....      BL       BGM111_Transmit
   2535                                    }
   2536                                    
   2537                                    strcpy( (char *)tempBffr2, "TCS SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_389: (+1)
   \   000022E2   0xF8DF 0x1DE0      LDR.W    R1,??RoadBrd_ParseString_383+0xC
   \   000022E6   0xA80A             ADD      R0,SP,#+40
   \   000022E8   0x.... 0x....      BL       strcpy
   \   000022EC   0xF000 0xBDC6      B.W      ??RoadBrd_ParseString_390
   \                     ??RoadBrd_ParseString_235:
   \   000022F0   0x........         DC32     ?_81
   \   000022F4   0x........         DC32     ?_82
   \   000022F8   0x........         DC32     ?_83
   2538                                  } // Endif (tempBffr[3]!=':')
   2539                                  else
   2540                                  {
   2541                                    // 2. Verify if remaining string is digits
   2542                                    if (Size <= 4)
   \                     ??RoadBrd_ParseString_388: (+1)
   \   000022FC   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00002300   0xF1B8 0x0F05      CMP      R8,#+5
   \   00002304   0xDA18             BGE.N    ??RoadBrd_ParseString_391
   2543                                    {
   2544                                      // Is this a BLE Operation?
   2545                                      if ( BLE_Flag )
   \   00002306   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002308   0x2D00             CMP      R5,#+0
   \   0000230A   0xD00A             BEQ.N    ??RoadBrd_ParseString_392
   2546                                      {
   2547                                        // Yes...Build and Send BLE Response NOW.
   2548                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_TCS_BADPARAM</STATUS>");
   \   0000230C   0xF8DF 0x1E4C      LDR.W    R1,??RoadBrd_ParseString_393
   \   00002310   0xA80A             ADD      R0,SP,#+40
   \   00002312   0x.... 0x....      BL       strcpy
   2549                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002316   0xA80A             ADD      R0,SP,#+40
   \   00002318   0x.... 0x....      BL       strlen
   \   0000231C   0xA90A             ADD      R1,SP,#+40
   \   0000231E   0x.... 0x....      BL       BGM111_Transmit
   2550                                      }
   2551                                      strcpy( (char *)tempBffr2, "TCS SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_392: (+1)
   \   00002322   0xF8DF 0x1E3C      LDR.W    R1,??RoadBrd_ParseString_393+0x4
   \   00002326   0xA80A             ADD      R0,SP,#+40
   \   00002328   0x.... 0x....      BL       strcpy
   \   0000232C   0xF000 0xBDA6      B.W      ??RoadBrd_ParseString_390
   \                     ??RoadBrd_ParseString_236:
   \   00002330   0x........         DC32     ?_84
   \   00002334   0x........         DC32     ?_85
   2552                                    } // EndIf (Size > 4)
   2553                                    else
   2554                                    {
   2555                                      // 3. Grab remaining string and convert to integer.
   2556                                      tempPstr = &tempBffr[4];
   \                     ??RoadBrd_ParseString_391: (+1)
   \   00002338   0x1D20             ADDS     R0,R4,#+4
   \   0000233A   0x9030             STR      R0,[SP, #+192]
   2557                                      strcpy(tempstr, tempPstr);
   \   0000233C   0x9930             LDR      R1,[SP, #+192]
   \   0000233E   0xA852             ADD      R0,SP,#+328
   \   00002340   0x.... 0x....      BL       strcpy
   2558                                      // Time to parse and test remaining string
   2559                                      Scale = 0.0;
   \   00002344   0x2000             MOVS     R0,#+0
   \   00002346   0x9029             STR      R0,[SP, #+164]
   2560                                      Offset = 0.0;
   \   00002348   0x2000             MOVS     R0,#+0
   \   0000234A   0x9028             STR      R0,[SP, #+160]
   2561                                      if (sscanf (tempstr, "%s %f %f", uuid, &Scale, &Offset) == 3)
   \   0000234C   0xA828             ADD      R0,SP,#+160
   \   0000234E   0x9000             STR      R0,[SP, #+0]
   \   00002350   0xAB29             ADD      R3,SP,#+164
   \   00002352   0xAA36             ADD      R2,SP,#+216
   \   00002354   0xF8DF 0x1E0C      LDR.W    R1,??RoadBrd_ParseString_393+0x8
   \   00002358   0xA852             ADD      R0,SP,#+328
   \   0000235A   0x.... 0x....      BL       sscanf
   \   0000235E   0x2803             CMP      R0,#+3
   \   00002360   0xF040 0x857A      BNE.W    ??RoadBrd_ParseString_394
   2562                                      {
   2563                                        sprintf( (char *)tempBffr2, "Parms: %s, %f, %f.\r\n", uuid, Scale, Offset );
   \   00002364   0x9828             LDR      R0,[SP, #+160]
   \   00002366   0x.... 0x....      BL       __aeabi_f2d
   \   0000236A   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   0000236E   0x9829             LDR      R0,[SP, #+164]
   \   00002370   0x.... 0x....      BL       __aeabi_f2d
   \   00002374   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00002378   0xAA36             ADD      R2,SP,#+216
   \   0000237A   0xF8DF 0x1DEC      LDR.W    R1,??RoadBrd_ParseString_393+0xC
   \   0000237E   0xA80A             ADD      R0,SP,#+40
   \   00002380   0x.... 0x....      BL       sprintf
   2564                                        // OK, We have 3 good parameters... NOW Need to determine if UUID is good.
   2565                                        if (strncmp((char *)uuid,"0002",4) == 0) // Shnt_Vltg
   \   00002384   0x2204             MOVS     R2,#+4
   \   00002386   0xF8DF 0x1DE4      LDR.W    R1,??RoadBrd_ParseString_393+0x10
   \   0000238A   0xA836             ADD      R0,SP,#+216
   \   0000238C   0x.... 0x....      BL       strncmp
   \   00002390   0x2800             CMP      R0,#+0
   \   00002392   0xD13A             BNE.N    ??RoadBrd_ParseString_395
   2566                                        {
   2567                                          Status = RoadBrd_CAL_Set_CalItem( CAL_SHNT_VLTG, Offset, Scale);
   \   00002394   0x9A29             LDR      R2,[SP, #+164]
   \   00002396   0x9928             LDR      R1,[SP, #+160]
   \   00002398   0x2000             MOVS     R0,#+0
   \   0000239A   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   0000239E   0x0006             MOVS     R6,R0
   2568                                          if (Status == HAL_OK)
   \   000023A0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000023A2   0x2E00             CMP      R6,#+0
   \   000023A4   0xD11C             BNE.N    ??RoadBrd_ParseString_396
   2569                                          {
   2570                                            // Is this a BLE Operation?
   2571                                            if ( BLE_Flag )
   \   000023A6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000023A8   0x2D00             CMP      R5,#+0
   \   000023AA   0xD00A             BEQ.N    ??RoadBrd_ParseString_397
   2572                                            {
   2573                                              // Yes...Build and Send BLE Response NOW.
   2574                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_SHNT_VLTG</STATUS>");
   \   000023AC   0xF8DF 0x1E54      LDR.W    R1,??RoadBrd_ParseString_398
   \   000023B0   0xA80A             ADD      R0,SP,#+40
   \   000023B2   0x.... 0x....      BL       strcpy
   2575                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000023B6   0xA80A             ADD      R0,SP,#+40
   \   000023B8   0x.... 0x....      BL       strlen
   \   000023BC   0xA90A             ADD      R1,SP,#+40
   \   000023BE   0x.... 0x....      BL       BGM111_Transmit
   2576                                            }
   2577                                            sprintf( (char *)tempBffr2, "Shnt_Vltg Set COMPLETE.\r\n" );
   \                     ??RoadBrd_ParseString_397: (+1)
   \   000023C2   0xF8DF 0x1E44      LDR.W    R1,??RoadBrd_ParseString_398+0x4
   \   000023C6   0xA80A             ADD      R0,SP,#+40
   \   000023C8   0x.... 0x....      BL       sprintf
   \   000023CC   0xF000 0xBD41      B.W      ??RoadBrd_ParseString_399
   \                     ??RoadBrd_ParseString_249:
   \   000023D0   0x........         DC32     ?_86
   \   000023D4   0x25 0x78          DC8      "%x."
   \              0x2E 0x00    
   \   000023D8   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
   \   000023DC   0x........         DC32     ?_87
   2578                                          }
   2579                                          else
   2580                                          {
   2581                                            // Is this a BLE Operation?
   2582                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_396: (+1)
   \   000023E0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000023E2   0x2D00             CMP      R5,#+0
   \   000023E4   0xD00A             BEQ.N    ??RoadBrd_ParseString_400
   2583                                            {
   2584                                              // Yes...Build and Send BLE Response NOW.
   2585                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_SHNT_VLTG_ERR</STATUS>");
   \   000023E6   0xF8DF 0x1E24      LDR.W    R1,??RoadBrd_ParseString_398+0x8
   \   000023EA   0xA80A             ADD      R0,SP,#+40
   \   000023EC   0x.... 0x....      BL       strcpy
   2586                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000023F0   0xA80A             ADD      R0,SP,#+40
   \   000023F2   0x.... 0x....      BL       strlen
   \   000023F6   0xA90A             ADD      R1,SP,#+40
   \   000023F8   0x.... 0x....      BL       BGM111_Transmit
   2587                                            }
   2588                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_400: (+1)
   \   000023FC   0xF8DF 0x1E10      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   00002400   0xA80A             ADD      R0,SP,#+40
   \   00002402   0x.... 0x....      BL       sprintf
   \   00002406   0xF000 0xBD24      B.W      ??RoadBrd_ParseString_399
   2589                                          }
   2590                                        }
   2591                                        else if (strncmp((char *)uuid,"0004",4) == 0) // Current
   \                     ??RoadBrd_ParseString_395: (+1)
   \   0000240A   0x2204             MOVS     R2,#+4
   \   0000240C   0xF8DF 0x1E04      LDR.W    R1,??RoadBrd_ParseString_398+0x10
   \   00002410   0xA836             ADD      R0,SP,#+216
   \   00002412   0x.... 0x....      BL       strncmp
   \   00002416   0x2800             CMP      R0,#+0
   \   00002418   0xD137             BNE.N    ??RoadBrd_ParseString_401
   2592                                        {
   2593                                          Status = RoadBrd_CAL_Set_CalItem( CAL_CURRENT, Offset, Scale);
   \   0000241A   0x9A29             LDR      R2,[SP, #+164]
   \   0000241C   0x9928             LDR      R1,[SP, #+160]
   \   0000241E   0x2001             MOVS     R0,#+1
   \   00002420   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002424   0x0006             MOVS     R6,R0
   2594                                          if (Status == HAL_OK)
   \   00002426   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002428   0x2E00             CMP      R6,#+0
   \   0000242A   0xD119             BNE.N    ??RoadBrd_ParseString_402
   2595                                          {
   2596                                            // Is this a BLE Operation?
   2597                                            if ( BLE_Flag )
   \   0000242C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000242E   0x2D00             CMP      R5,#+0
   \   00002430   0xD00A             BEQ.N    ??RoadBrd_ParseString_403
   2598                                            {
   2599                                              // Yes...Build and Send BLE Response NOW.
   2600                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_CURRENT</STATUS>");
   \   00002432   0xF8DF 0x1DE4      LDR.W    R1,??RoadBrd_ParseString_398+0x14
   \   00002436   0xA80A             ADD      R0,SP,#+40
   \   00002438   0x.... 0x....      BL       strcpy
   2601                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000243C   0xA80A             ADD      R0,SP,#+40
   \   0000243E   0x.... 0x....      BL       strlen
   \   00002442   0xA90A             ADD      R1,SP,#+40
   \   00002444   0x.... 0x....      BL       BGM111_Transmit
   2602                                            }
   2603                                            sprintf( (char *)tempBffr2, "Current Set COMPLETE." );
   \                     ??RoadBrd_ParseString_403: (+1)
   \   00002448   0xF8DF 0x1E64      LDR.W    R1,??RoadBrd_ParseString_404
   \   0000244C   0xA80A             ADD      R0,SP,#+40
   \   0000244E   0x.... 0x....      BL       sprintf
   \   00002452   0xF000 0xBCFE      B.W      ??RoadBrd_ParseString_399
   \   00002456   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_255:
   \   00002458   0x........         DC32     ?_88
   \   0000245C   0x........         DC32     ?_89
   2604                                          }
   2605                                          else
   2606                                          {
   2607                                            // Is this a BLE Operation?
   2608                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_402: (+1)
   \   00002460   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002462   0x2D00             CMP      R5,#+0
   \   00002464   0xD00A             BEQ.N    ??RoadBrd_ParseString_405
   2609                                            {
   2610                                              // Yes...Build and Send BLE Response NOW.
   2611                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_CURRENT_ERR</STATUS>");
   \   00002466   0xF8DF 0x1E4C      LDR.W    R1,??RoadBrd_ParseString_404+0x4
   \   0000246A   0xA80A             ADD      R0,SP,#+40
   \   0000246C   0x.... 0x....      BL       strcpy
   2612                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002470   0xA80A             ADD      R0,SP,#+40
   \   00002472   0x.... 0x....      BL       strlen
   \   00002476   0xA90A             ADD      R1,SP,#+40
   \   00002478   0x.... 0x....      BL       BGM111_Transmit
   2613                                            }
   2614                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_405: (+1)
   \   0000247C   0xF8DF 0x1D90      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   00002480   0xA80A             ADD      R0,SP,#+40
   \   00002482   0x.... 0x....      BL       sprintf
   \   00002486   0xF000 0xBCE4      B.W      ??RoadBrd_ParseString_399
   2615                                          }
   2616                                        }
   2617                                        else if (strncmp((char *)uuid,"0006",4) == 0) // Power
   \                     ??RoadBrd_ParseString_401: (+1)
   \   0000248A   0x2204             MOVS     R2,#+4
   \   0000248C   0xF8DF 0x1E28      LDR.W    R1,??RoadBrd_ParseString_404+0x8
   \   00002490   0xA836             ADD      R0,SP,#+216
   \   00002492   0x.... 0x....      BL       strncmp
   \   00002496   0x2800             CMP      R0,#+0
   \   00002498   0xD139             BNE.N    ??RoadBrd_ParseString_406
   2618                                        {
   2619                                          Status = RoadBrd_CAL_Set_CalItem( CAL_POWER, Offset, Scale);
   \   0000249A   0x9A29             LDR      R2,[SP, #+164]
   \   0000249C   0x9928             LDR      R1,[SP, #+160]
   \   0000249E   0x2002             MOVS     R0,#+2
   \   000024A0   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   000024A4   0x0006             MOVS     R6,R0
   2620                                          if (Status == HAL_OK)
   \   000024A6   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000024A8   0x2E00             CMP      R6,#+0
   \   000024AA   0xD11B             BNE.N    ??RoadBrd_ParseString_407
   2621                                          {
   2622                                            // Is this a BLE Operation?
   2623                                            if ( BLE_Flag )
   \   000024AC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000024AE   0x2D00             CMP      R5,#+0
   \   000024B0   0xD00A             BEQ.N    ??RoadBrd_ParseString_408
   2624                                            {
   2625                                              // Yes...Build and Send BLE Response NOW.
   2626                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_POWER</STATUS>");
   \   000024B2   0xF8DF 0x1E08      LDR.W    R1,??RoadBrd_ParseString_404+0xC
   \   000024B6   0xA80A             ADD      R0,SP,#+40
   \   000024B8   0x.... 0x....      BL       strcpy
   2627                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000024BC   0xA80A             ADD      R0,SP,#+40
   \   000024BE   0x.... 0x....      BL       strlen
   \   000024C2   0xA90A             ADD      R1,SP,#+40
   \   000024C4   0x.... 0x....      BL       BGM111_Transmit
   2628                                            }
   2629                                            sprintf( (char *)tempBffr2, "Power Set COMPLETE." );
   \                     ??RoadBrd_ParseString_408: (+1)
   \   000024C8   0xF8DF 0x1DF4      LDR.W    R1,??RoadBrd_ParseString_404+0x10
   \   000024CC   0xA80A             ADD      R0,SP,#+40
   \   000024CE   0x.... 0x....      BL       sprintf
   \   000024D2   0xF000 0xBCBE      B.W      ??RoadBrd_ParseString_399
   \   000024D6   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_258:
   \   000024D8   0x........         DC32     ?_90
   \   000024DC   0x........         DC32     ?_91
   \   000024E0   0x........         DC32     ?_92
   2630                                          }
   2631                                          else
   2632                                          {
   2633                                            // Is this a BLE Operation?
   2634                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_407: (+1)
   \   000024E4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000024E6   0x2D00             CMP      R5,#+0
   \   000024E8   0xD00A             BEQ.N    ??RoadBrd_ParseString_409
   2635                                            {
   2636                                              // Yes...Build and Send BLE Response NOW.
   2637                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_POWER_ERR</STATUS>");
   \   000024EA   0xF8DF 0x1E6C      LDR.W    R1,??RoadBrd_ParseString_410
   \   000024EE   0xA80A             ADD      R0,SP,#+40
   \   000024F0   0x.... 0x....      BL       strcpy
   2638                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000024F4   0xA80A             ADD      R0,SP,#+40
   \   000024F6   0x.... 0x....      BL       strlen
   \   000024FA   0xA90A             ADD      R1,SP,#+40
   \   000024FC   0x.... 0x....      BL       BGM111_Transmit
   2639                                            }
   2640                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_409: (+1)
   \   00002500   0xF8DF 0x1D0C      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   00002504   0xA80A             ADD      R0,SP,#+40
   \   00002506   0x.... 0x....      BL       sprintf
   \   0000250A   0xF000 0xBCA2      B.W      ??RoadBrd_ParseString_399
   2641                                          }
   2642                                        }
   2643                                        else if (strncmp((char *)uuid,"0008",4) == 0) // Voltage
   \                     ??RoadBrd_ParseString_406: (+1)
   \   0000250E   0x2204             MOVS     R2,#+4
   \   00002510   0xF8DF 0x1E48      LDR.W    R1,??RoadBrd_ParseString_410+0x4
   \   00002514   0xA836             ADD      R0,SP,#+216
   \   00002516   0x.... 0x....      BL       strncmp
   \   0000251A   0x2800             CMP      R0,#+0
   \   0000251C   0xD139             BNE.N    ??RoadBrd_ParseString_411
   2644                                        {
   2645                                          Status = RoadBrd_CAL_Set_CalItem( CAL_VOLTAGE, Offset, Scale);
   \   0000251E   0x9A29             LDR      R2,[SP, #+164]
   \   00002520   0x9928             LDR      R1,[SP, #+160]
   \   00002522   0x2003             MOVS     R0,#+3
   \   00002524   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002528   0x0006             MOVS     R6,R0
   2646                                          if (Status == HAL_OK)
   \   0000252A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000252C   0x2E00             CMP      R6,#+0
   \   0000252E   0xD11B             BNE.N    ??RoadBrd_ParseString_412
   2647                                          {
   2648                                            // Is this a BLE Operation?
   2649                                            if ( BLE_Flag )
   \   00002530   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002532   0x2D00             CMP      R5,#+0
   \   00002534   0xD00A             BEQ.N    ??RoadBrd_ParseString_413
   2650                                            {
   2651                                              // Yes...Build and Send BLE Response NOW.
   2652                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_VOLTAGE</STATUS>");
   \   00002536   0xF8DF 0x1E28      LDR.W    R1,??RoadBrd_ParseString_410+0x8
   \   0000253A   0xA80A             ADD      R0,SP,#+40
   \   0000253C   0x.... 0x....      BL       strcpy
   2653                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002540   0xA80A             ADD      R0,SP,#+40
   \   00002542   0x.... 0x....      BL       strlen
   \   00002546   0xA90A             ADD      R1,SP,#+40
   \   00002548   0x.... 0x....      BL       BGM111_Transmit
   2654                                            }
   2655                                            sprintf( (char *)tempBffr2, "Voltage Set COMPLETE." );
   \                     ??RoadBrd_ParseString_413: (+1)
   \   0000254C   0xF8DF 0x1E14      LDR.W    R1,??RoadBrd_ParseString_410+0xC
   \   00002550   0xA80A             ADD      R0,SP,#+40
   \   00002552   0x.... 0x....      BL       sprintf
   \   00002556   0xF000 0xBC7C      B.W      ??RoadBrd_ParseString_399
   \   0000255A   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_262:
   \   0000255C   0x........         DC32     ?_93
   \   00002560   0x........         DC32     ?_94
   \   00002564   0x........         DC32     ?_95
   2656                                          }
   2657                                          else
   2658                                          {
   2659                                            // Is this a BLE Operation?
   2660                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_412: (+1)
   \   00002568   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000256A   0x2D00             CMP      R5,#+0
   \   0000256C   0xD00A             BEQ.N    ??RoadBrd_ParseString_414
   2661                                            {
   2662                                              // Yes...Build and Send BLE Response NOW.
   2663                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_VOLTAGE_ERR</STATUS>");
   \   0000256E   0xF8DF 0x1DF8      LDR.W    R1,??RoadBrd_ParseString_410+0x10
   \   00002572   0xA80A             ADD      R0,SP,#+40
   \   00002574   0x.... 0x....      BL       strcpy
   2664                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002578   0xA80A             ADD      R0,SP,#+40
   \   0000257A   0x.... 0x....      BL       strlen
   \   0000257E   0xA90A             ADD      R1,SP,#+40
   \   00002580   0x.... 0x....      BL       BGM111_Transmit
   2665                                            }
   2666                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_414: (+1)
   \   00002584   0xF8DF 0x1C88      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   00002588   0xA80A             ADD      R0,SP,#+40
   \   0000258A   0x.... 0x....      BL       sprintf
   \   0000258E   0xF000 0xBC60      B.W      ??RoadBrd_ParseString_399
   2667                                          }
   2668                                        }
   2669                                        else if (strncmp((char *)uuid,"000A",4) == 0) // TempC
   \                     ??RoadBrd_ParseString_411: (+1)
   \   00002592   0x2204             MOVS     R2,#+4
   \   00002594   0xF8DF 0x1E68      LDR.W    R1,??RoadBrd_ParseString_415
   \   00002598   0xA836             ADD      R0,SP,#+216
   \   0000259A   0x.... 0x....      BL       strncmp
   \   0000259E   0x2800             CMP      R0,#+0
   \   000025A0   0xD139             BNE.N    ??RoadBrd_ParseString_416
   2670                                        {
   2671                                          Status = RoadBrd_CAL_Set_CalItem( CAL_TEMPC, Offset, Scale);
   \   000025A2   0x9A29             LDR      R2,[SP, #+164]
   \   000025A4   0x9928             LDR      R1,[SP, #+160]
   \   000025A6   0x2004             MOVS     R0,#+4
   \   000025A8   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   000025AC   0x0006             MOVS     R6,R0
   2672                                          if (Status == HAL_OK)
   \   000025AE   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000025B0   0x2E00             CMP      R6,#+0
   \   000025B2   0xD11B             BNE.N    ??RoadBrd_ParseString_417
   2673                                          {
   2674                                            // Is this a BLE Operation?
   2675                                            if ( BLE_Flag )
   \   000025B4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000025B6   0x2D00             CMP      R5,#+0
   \   000025B8   0xD00A             BEQ.N    ??RoadBrd_ParseString_418
   2676                                            {
   2677                                              // Yes...Build and Send BLE Response NOW.
   2678                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_TEMPC</STATUS>");
   \   000025BA   0xF8DF 0x1E48      LDR.W    R1,??RoadBrd_ParseString_415+0x4
   \   000025BE   0xA80A             ADD      R0,SP,#+40
   \   000025C0   0x.... 0x....      BL       strcpy
   2679                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000025C4   0xA80A             ADD      R0,SP,#+40
   \   000025C6   0x.... 0x....      BL       strlen
   \   000025CA   0xA90A             ADD      R1,SP,#+40
   \   000025CC   0x.... 0x....      BL       BGM111_Transmit
   2680                                            }
   2681                                            sprintf( (char *)tempBffr2, "TempC Set COMPLETE." );
   \                     ??RoadBrd_ParseString_418: (+1)
   \   000025D0   0xF8DF 0x1E34      LDR.W    R1,??RoadBrd_ParseString_415+0x8
   \   000025D4   0xA80A             ADD      R0,SP,#+40
   \   000025D6   0x.... 0x....      BL       sprintf
   \   000025DA   0xF000 0xBC3A      B.W      ??RoadBrd_ParseString_399
   \   000025DE   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_266:
   \   000025E0   0x........         DC32     ?_96
   \   000025E4   0x........         DC32     ?_97
   \   000025E8   0x........         DC32     ?_98
   2682                                          }
   2683                                          else
   2684                                          {
   2685                                            // Is this a BLE Operation?
   2686                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_417: (+1)
   \   000025EC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000025EE   0x2D00             CMP      R5,#+0
   \   000025F0   0xD00A             BEQ.N    ??RoadBrd_ParseString_419
   2687                                            {
   2688                                              // Yes...Build and Send BLE Response NOW.
   2689                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_TEMPC_ERR</STATUS>");
   \   000025F2   0xF8DF 0x1E18      LDR.W    R1,??RoadBrd_ParseString_415+0xC
   \   000025F6   0xA80A             ADD      R0,SP,#+40
   \   000025F8   0x.... 0x....      BL       strcpy
   2690                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000025FC   0xA80A             ADD      R0,SP,#+40
   \   000025FE   0x.... 0x....      BL       strlen
   \   00002602   0xA90A             ADD      R1,SP,#+40
   \   00002604   0x.... 0x....      BL       BGM111_Transmit
   2691                                            }
   2692                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_419: (+1)
   \   00002608   0xF8DF 0x1C04      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   0000260C   0xA80A             ADD      R0,SP,#+40
   \   0000260E   0x.... 0x....      BL       sprintf
   \   00002612   0xF000 0xBC1E      B.W      ??RoadBrd_ParseString_399
   2693                                          }
   2694                                        }
   2695                                        else if (strncmp((char *)uuid,"000B",4) == 0) // TempF
   \                     ??RoadBrd_ParseString_416: (+1)
   \   00002616   0x2204             MOVS     R2,#+4
   \   00002618   0xF8DF 0x1DF4      LDR.W    R1,??RoadBrd_ParseString_415+0x10
   \   0000261C   0xA836             ADD      R0,SP,#+216
   \   0000261E   0x.... 0x....      BL       strncmp
   \   00002622   0x2800             CMP      R0,#+0
   \   00002624   0xD131             BNE.N    ??RoadBrd_ParseString_420
   2696                                        {
   2697                                          Status = RoadBrd_CAL_Set_CalItem( CAL_TEMPF, Offset, Scale);
   \   00002626   0x9A29             LDR      R2,[SP, #+164]
   \   00002628   0x9928             LDR      R1,[SP, #+160]
   \   0000262A   0x2005             MOVS     R0,#+5
   \   0000262C   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002630   0x0006             MOVS     R6,R0
   2698                                          if (Status == HAL_OK)
   \   00002632   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002634   0x2E00             CMP      R6,#+0
   \   00002636   0xD114             BNE.N    ??RoadBrd_ParseString_421
   2699                                          {
   2700                                            // Is this a BLE Operation?
   2701                                            if ( BLE_Flag )
   \   00002638   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000263A   0x2D00             CMP      R5,#+0
   \   0000263C   0xD00A             BEQ.N    ??RoadBrd_ParseString_422
   2702                                            {
   2703                                              // Yes...Build and Send BLE Response NOW.
   2704                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_TEMPF</STATUS>");
   \   0000263E   0xF8DF 0x1E68      LDR.W    R1,??RoadBrd_ParseString_423
   \   00002642   0xA80A             ADD      R0,SP,#+40
   \   00002644   0x.... 0x....      BL       strcpy
   2705                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002648   0xA80A             ADD      R0,SP,#+40
   \   0000264A   0x.... 0x....      BL       strlen
   \   0000264E   0xA90A             ADD      R1,SP,#+40
   \   00002650   0x.... 0x....      BL       BGM111_Transmit
   2706                                            }
   2707                                            sprintf( (char *)tempBffr2, "TempF Set COMPLETE." );
   \                     ??RoadBrd_ParseString_422: (+1)
   \   00002654   0xF8DF 0x1E54      LDR.W    R1,??RoadBrd_ParseString_423+0x4
   \   00002658   0xA80A             ADD      R0,SP,#+40
   \   0000265A   0x.... 0x....      BL       sprintf
   \   0000265E   0xF000 0xBBF8      B.W      ??RoadBrd_ParseString_399
   2708                                          }
   2709                                          else
   2710                                          {
   2711                                            // Is this a BLE Operation?
   2712                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_421: (+1)
   \   00002662   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002664   0x2D00             CMP      R5,#+0
   \   00002666   0xD00A             BEQ.N    ??RoadBrd_ParseString_424
   2713                                            {
   2714                                              // Yes...Build and Send BLE Response NOW.
   2715                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_TEMPF_ERR</STATUS>");
   \   00002668   0xF8DF 0x1E44      LDR.W    R1,??RoadBrd_ParseString_423+0x8
   \   0000266C   0xA80A             ADD      R0,SP,#+40
   \   0000266E   0x.... 0x....      BL       strcpy
   2716                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002672   0xA80A             ADD      R0,SP,#+40
   \   00002674   0x.... 0x....      BL       strlen
   \   00002678   0xA90A             ADD      R1,SP,#+40
   \   0000267A   0x.... 0x....      BL       BGM111_Transmit
   2717                                            }
   2718                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_424: (+1)
   \   0000267E   0xF8DF 0x1B90      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   00002682   0xA80A             ADD      R0,SP,#+40
   \   00002684   0x.... 0x....      BL       sprintf
   \   00002688   0xE3E3             B.N      ??RoadBrd_ParseString_399
   2719                                          }
   2720                                        }
   2721                                        else if (strncmp((char *)uuid,"0011",4) == 0) // Pressure
   \                     ??RoadBrd_ParseString_420: (+1)
   \   0000268A   0x2204             MOVS     R2,#+4
   \   0000268C   0xF8DF 0x1E24      LDR.W    R1,??RoadBrd_ParseString_423+0xC
   \   00002690   0xA836             ADD      R0,SP,#+216
   \   00002692   0x.... 0x....      BL       strncmp
   \   00002696   0x2800             CMP      R0,#+0
   \   00002698   0xD130             BNE.N    ??RoadBrd_ParseString_425
   2722                                        {
   2723                                          Status = RoadBrd_CAL_Set_CalItem( CAL_PRESSURE, Offset, Scale);
   \   0000269A   0x9A29             LDR      R2,[SP, #+164]
   \   0000269C   0x9928             LDR      R1,[SP, #+160]
   \   0000269E   0x2006             MOVS     R0,#+6
   \   000026A0   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   000026A4   0x0006             MOVS     R6,R0
   2724                                          if (Status == HAL_OK)
   \   000026A6   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000026A8   0x2E00             CMP      R6,#+0
   \   000026AA   0xD113             BNE.N    ??RoadBrd_ParseString_426
   2725                                          {
   2726                                            // Is this a BLE Operation?
   2727                                            if ( BLE_Flag )
   \   000026AC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000026AE   0x2D00             CMP      R5,#+0
   \   000026B0   0xD00A             BEQ.N    ??RoadBrd_ParseString_427
   2728                                            {
   2729                                              // Yes...Build and Send BLE Response NOW.
   2730                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_PRESSURE</STATUS>");
   \   000026B2   0xF8DF 0x1E04      LDR.W    R1,??RoadBrd_ParseString_423+0x10
   \   000026B6   0xA80A             ADD      R0,SP,#+40
   \   000026B8   0x.... 0x....      BL       strcpy
   2731                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000026BC   0xA80A             ADD      R0,SP,#+40
   \   000026BE   0x.... 0x....      BL       strlen
   \   000026C2   0xA90A             ADD      R1,SP,#+40
   \   000026C4   0x.... 0x....      BL       BGM111_Transmit
   2732                                            }
   2733                                            sprintf( (char *)tempBffr2, "Pressure Set COMPLETE." );
   \                     ??RoadBrd_ParseString_427: (+1)
   \   000026C8   0xF8DF 0x1E84      LDR.W    R1,??RoadBrd_ParseString_428
   \   000026CC   0xA80A             ADD      R0,SP,#+40
   \   000026CE   0x.... 0x....      BL       sprintf
   \   000026D2   0xE3BE             B.N      ??RoadBrd_ParseString_399
   2734                                          }
   2735                                          else
   2736                                          {
   2737                                            // Is this a BLE Operation?
   2738                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_426: (+1)
   \   000026D4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000026D6   0x2D00             CMP      R5,#+0
   \   000026D8   0xD00A             BEQ.N    ??RoadBrd_ParseString_429
   2739                                            {
   2740                                              // Yes...Build and Send BLE Response NOW.
   2741                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_PRESSURE_ERR</STATUS>");
   \   000026DA   0xF8DF 0x1E78      LDR.W    R1,??RoadBrd_ParseString_428+0x4
   \   000026DE   0xA80A             ADD      R0,SP,#+40
   \   000026E0   0x.... 0x....      BL       strcpy
   2742                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000026E4   0xA80A             ADD      R0,SP,#+40
   \   000026E6   0x.... 0x....      BL       strlen
   \   000026EA   0xA90A             ADD      R1,SP,#+40
   \   000026EC   0x.... 0x....      BL       BGM111_Transmit
   2743                                            }
   2744                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_429: (+1)
   \   000026F0   0xF8DF 0x1B1C      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   000026F4   0xA80A             ADD      R0,SP,#+40
   \   000026F6   0x.... 0x....      BL       sprintf
   \   000026FA   0xE3AA             B.N      ??RoadBrd_ParseString_399
   2745                                          }
   2746                                        }
   2747                                        else if (strncmp((char *)uuid,"0030",4) == 0) // Humidity
   \                     ??RoadBrd_ParseString_425: (+1)
   \   000026FC   0x2204             MOVS     R2,#+4
   \   000026FE   0xF8DF 0x1E58      LDR.W    R1,??RoadBrd_ParseString_428+0x8
   \   00002702   0xA836             ADD      R0,SP,#+216
   \   00002704   0x.... 0x....      BL       strncmp
   \   00002708   0x2800             CMP      R0,#+0
   \   0000270A   0xD135             BNE.N    ??RoadBrd_ParseString_430
   2748                                        {
   2749                                          Status = RoadBrd_CAL_Set_CalItem( CAL_HUMIDITY, Offset, Scale);
   \   0000270C   0x9A29             LDR      R2,[SP, #+164]
   \   0000270E   0x9928             LDR      R1,[SP, #+160]
   \   00002710   0x2007             MOVS     R0,#+7
   \   00002712   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002716   0x0006             MOVS     R6,R0
   2750                                          if (Status == HAL_OK)
   \   00002718   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000271A   0x2E00             CMP      R6,#+0
   \   0000271C   0xD118             BNE.N    ??RoadBrd_ParseString_431
   2751                                          {
   2752                                            // Is this a BLE Operation?
   2753                                            if ( BLE_Flag )
   \   0000271E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002720   0x2D00             CMP      R5,#+0
   \   00002722   0xD00A             BEQ.N    ??RoadBrd_ParseString_432
   2754                                            {
   2755                                              // Yes...Build and Send BLE Response NOW.
   2756                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_HUMIDITY</STATUS>");
   \   00002724   0xF8DF 0x1E34      LDR.W    R1,??RoadBrd_ParseString_428+0xC
   \   00002728   0xA80A             ADD      R0,SP,#+40
   \   0000272A   0x.... 0x....      BL       strcpy
   2757                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000272E   0xA80A             ADD      R0,SP,#+40
   \   00002730   0x.... 0x....      BL       strlen
   \   00002734   0xA90A             ADD      R1,SP,#+40
   \   00002736   0x.... 0x....      BL       BGM111_Transmit
   2758                                            }
   2759                                            sprintf( (char *)tempBffr2, "Humidity Set COMPLETE." );
   \                     ??RoadBrd_ParseString_432: (+1)
   \   0000273A   0xF8DF 0x1E24      LDR.W    R1,??RoadBrd_ParseString_428+0x10
   \   0000273E   0xA80A             ADD      R0,SP,#+40
   \   00002740   0x.... 0x....      BL       sprintf
   \   00002744   0xE385             B.N      ??RoadBrd_ParseString_399
   \   00002746   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_275:
   \   00002748   0x........         DC32     ?_99
   \   0000274C   0x........         DC32     ?_100
   2760                                          }
   2761                                          else
   2762                                          {
   2763                                            // Is this a BLE Operation?
   2764                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_431: (+1)
   \   00002750   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002752   0x2D00             CMP      R5,#+0
   \   00002754   0xD00A             BEQ.N    ??RoadBrd_ParseString_433
   2765                                            {
   2766                                              // Yes...Build and Send BLE Response NOW.
   2767                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_HUMIDITY_ERR</STATUS>");
   \   00002756   0xF8DF 0x1E9C      LDR.W    R1,??RoadBrd_ParseString_434
   \   0000275A   0xA80A             ADD      R0,SP,#+40
   \   0000275C   0x.... 0x....      BL       strcpy
   2768                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002760   0xA80A             ADD      R0,SP,#+40
   \   00002762   0x.... 0x....      BL       strlen
   \   00002766   0xA90A             ADD      R1,SP,#+40
   \   00002768   0x.... 0x....      BL       BGM111_Transmit
   2769                                            }
   2770                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_433: (+1)
   \   0000276C   0xF8DF 0x1AA0      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   00002770   0xA80A             ADD      R0,SP,#+40
   \   00002772   0x.... 0x....      BL       sprintf
   \   00002776   0xE36C             B.N      ??RoadBrd_ParseString_399
   2771                                          }
   2772                                        }
   2773                                        else if (strncmp((char *)uuid,"0032",4) == 0) // Hum_TempC
   \                     ??RoadBrd_ParseString_430: (+1)
   \   00002778   0x2204             MOVS     R2,#+4
   \   0000277A   0xF8DF 0x1E7C      LDR.W    R1,??RoadBrd_ParseString_434+0x4
   \   0000277E   0xA836             ADD      R0,SP,#+216
   \   00002780   0x.... 0x....      BL       strncmp
   \   00002784   0x2800             CMP      R0,#+0
   \   00002786   0xD135             BNE.N    ??RoadBrd_ParseString_435
   2774                                        {
   2775                                          Status = RoadBrd_CAL_Set_CalItem( CAL_HUM_TEMPC, Offset, Scale);
   \   00002788   0x9A29             LDR      R2,[SP, #+164]
   \   0000278A   0x9928             LDR      R1,[SP, #+160]
   \   0000278C   0x2008             MOVS     R0,#+8
   \   0000278E   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002792   0x0006             MOVS     R6,R0
   2776                                          if (Status == HAL_OK)
   \   00002794   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002796   0x2E00             CMP      R6,#+0
   \   00002798   0xD118             BNE.N    ??RoadBrd_ParseString_436
   2777                                          {
   2778                                            // Is this a BLE Operation?
   2779                                            if ( BLE_Flag )
   \   0000279A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000279C   0x2D00             CMP      R5,#+0
   \   0000279E   0xD00A             BEQ.N    ??RoadBrd_ParseString_437
   2780                                            {
   2781                                              // Yes...Build and Send BLE Response NOW.
   2782                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_HUM_TEMPC</STATUS>");
   \   000027A0   0xF8DF 0x1E58      LDR.W    R1,??RoadBrd_ParseString_434+0x8
   \   000027A4   0xA80A             ADD      R0,SP,#+40
   \   000027A6   0x.... 0x....      BL       strcpy
   2783                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000027AA   0xA80A             ADD      R0,SP,#+40
   \   000027AC   0x.... 0x....      BL       strlen
   \   000027B0   0xA90A             ADD      R1,SP,#+40
   \   000027B2   0x.... 0x....      BL       BGM111_Transmit
   2784                                            }
   2785                                            sprintf( (char *)tempBffr2, "Hum_TempC Set COMPLETE." );
   \                     ??RoadBrd_ParseString_437: (+1)
   \   000027B6   0xF8DF 0x1E48      LDR.W    R1,??RoadBrd_ParseString_434+0xC
   \   000027BA   0xA80A             ADD      R0,SP,#+40
   \   000027BC   0x.... 0x....      BL       sprintf
   \   000027C0   0xE347             B.N      ??RoadBrd_ParseString_399
   \   000027C2   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_278:
   \   000027C4   0x........         DC32     ?_101
   \   000027C8   0x........         DC32     ?_102
   2786                                          }
   2787                                          else
   2788                                          {
   2789                                            // Is this a BLE Operation?
   2790                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_436: (+1)
   \   000027CC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000027CE   0x2D00             CMP      R5,#+0
   \   000027D0   0xD00A             BEQ.N    ??RoadBrd_ParseString_438
   2791                                            {
   2792                                              // Yes...Build and Send BLE Response NOW.
   2793                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_HUM_TEMPC_ERR</STATUS>");
   \   000027D2   0xF8DF 0x1E30      LDR.W    R1,??RoadBrd_ParseString_434+0x10
   \   000027D6   0xA80A             ADD      R0,SP,#+40
   \   000027D8   0x.... 0x....      BL       strcpy
   2794                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000027DC   0xA80A             ADD      R0,SP,#+40
   \   000027DE   0x.... 0x....      BL       strlen
   \   000027E2   0xA90A             ADD      R1,SP,#+40
   \   000027E4   0x.... 0x....      BL       BGM111_Transmit
   2795                                            }
   2796                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_438: (+1)
   \   000027E8   0xF8DF 0x1A24      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   000027EC   0xA80A             ADD      R0,SP,#+40
   \   000027EE   0x.... 0x....      BL       sprintf
   \   000027F2   0xE32E             B.N      ??RoadBrd_ParseString_399
   2797                                          }
   2798                                        }
   2799                                        else if (strncmp((char *)uuid,"0033",4) == 0) // Hum_TempF
   \                     ??RoadBrd_ParseString_435: (+1)
   \   000027F4   0x2204             MOVS     R2,#+4
   \   000027F6   0xF8DF 0x1EA0      LDR.W    R1,??RoadBrd_ParseString_439
   \   000027FA   0xA836             ADD      R0,SP,#+216
   \   000027FC   0x.... 0x....      BL       strncmp
   \   00002800   0x2800             CMP      R0,#+0
   \   00002802   0xD139             BNE.N    ??RoadBrd_ParseString_440
   2800                                        {
   2801                                          Status = RoadBrd_CAL_Set_CalItem( CAL_HUM_TEMPF, Offset, Scale);
   \   00002804   0x9A29             LDR      R2,[SP, #+164]
   \   00002806   0x9928             LDR      R1,[SP, #+160]
   \   00002808   0x2009             MOVS     R0,#+9
   \   0000280A   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   0000280E   0x0006             MOVS     R6,R0
   2802                                          if (Status == HAL_OK)
   \   00002810   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002812   0x2E00             CMP      R6,#+0
   \   00002814   0xD11C             BNE.N    ??RoadBrd_ParseString_441
   2803                                          {
   2804                                            // Is this a BLE Operation?
   2805                                            if ( BLE_Flag )
   \   00002816   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002818   0x2D00             CMP      R5,#+0
   \   0000281A   0xD00A             BEQ.N    ??RoadBrd_ParseString_442
   2806                                            {
   2807                                              // Yes...Build and Send BLE Response NOW.
   2808                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_HUM_TEMPF</STATUS>");
   \   0000281C   0xF8DF 0x1E7C      LDR.W    R1,??RoadBrd_ParseString_439+0x4
   \   00002820   0xA80A             ADD      R0,SP,#+40
   \   00002822   0x.... 0x....      BL       strcpy
   2809                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002826   0xA80A             ADD      R0,SP,#+40
   \   00002828   0x.... 0x....      BL       strlen
   \   0000282C   0xA90A             ADD      R1,SP,#+40
   \   0000282E   0x.... 0x....      BL       BGM111_Transmit
   2810                                            }
   2811                                            sprintf( (char *)tempBffr2, "Hum_TempF Set COMPLETE." );
   \                     ??RoadBrd_ParseString_442: (+1)
   \   00002832   0xF8DF 0x1E6C      LDR.W    R1,??RoadBrd_ParseString_439+0x8
   \   00002836   0xA80A             ADD      R0,SP,#+40
   \   00002838   0x.... 0x....      BL       sprintf
   \   0000283C   0xE309             B.N      ??RoadBrd_ParseString_399
   \   0000283E   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_281:
   \   00002840   0x........         DC32     ?_41
   \   00002844   0x........         DC32     ?_103
   \   00002848   0x........         DC32     ?_104
   \   0000284C   0x........         DC32     ?_105
   2812                                          }
   2813                                          else
   2814                                          {
   2815                                            // Is this a BLE Operation?
   2816                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_441: (+1)
   \   00002850   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002852   0x2D00             CMP      R5,#+0
   \   00002854   0xD00A             BEQ.N    ??RoadBrd_ParseString_443
   2817                                            {
   2818                                              // Yes...Build and Send BLE Response NOW.
   2819                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_HUM_TEMPF_ERR</STATUS>");
   \   00002856   0xF8DF 0x1E4C      LDR.W    R1,??RoadBrd_ParseString_439+0xC
   \   0000285A   0xA80A             ADD      R0,SP,#+40
   \   0000285C   0x.... 0x....      BL       strcpy
   2820                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002860   0xA80A             ADD      R0,SP,#+40
   \   00002862   0x.... 0x....      BL       strlen
   \   00002866   0xA90A             ADD      R1,SP,#+40
   \   00002868   0x.... 0x....      BL       BGM111_Transmit
   2821                                            }
   2822                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_443: (+1)
   \   0000286C   0xF8DF 0x19A0      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   00002870   0xA80A             ADD      R0,SP,#+40
   \   00002872   0x.... 0x....      BL       sprintf
   \   00002876   0xE2EC             B.N      ??RoadBrd_ParseString_399
   2823                                          }
   2824                                        }
   2825                                        else if (strncmp((char *)uuid,"000D",4) == 0) // RGB_Red
   \                     ??RoadBrd_ParseString_440: (+1)
   \   00002878   0x2204             MOVS     R2,#+4
   \   0000287A   0xF8DF 0x1E2C      LDR.W    R1,??RoadBrd_ParseString_439+0x10
   \   0000287E   0xA836             ADD      R0,SP,#+216
   \   00002880   0x.... 0x....      BL       strncmp
   \   00002884   0x2800             CMP      R0,#+0
   \   00002886   0xD133             BNE.N    ??RoadBrd_ParseString_444
   2826                                        {
   2827                                          Status = RoadBrd_CAL_Set_CalItem( CAL_RGB_RED, Offset, Scale);
   \   00002888   0x9A29             LDR      R2,[SP, #+164]
   \   0000288A   0x9928             LDR      R1,[SP, #+160]
   \   0000288C   0x200A             MOVS     R0,#+10
   \   0000288E   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002892   0x0006             MOVS     R6,R0
   2828                                          if (Status == HAL_OK)
   \   00002894   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002896   0x2E00             CMP      R6,#+0
   \   00002898   0xD116             BNE.N    ??RoadBrd_ParseString_445
   2829                                          {
   2830                                            // Is this a BLE Operation?
   2831                                            if ( BLE_Flag )
   \   0000289A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000289C   0x2D00             CMP      R5,#+0
   \   0000289E   0xD00A             BEQ.N    ??RoadBrd_ParseString_446
   2832                                            {
   2833                                              // Yes...Build and Send BLE Response NOW.
   2834                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_RGB_RED</STATUS>");
   \   000028A0   0xF8DF 0x1E98      LDR.W    R1,??RoadBrd_ParseString_447
   \   000028A4   0xA80A             ADD      R0,SP,#+40
   \   000028A6   0x.... 0x....      BL       strcpy
   2835                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000028AA   0xA80A             ADD      R0,SP,#+40
   \   000028AC   0x.... 0x....      BL       strlen
   \   000028B0   0xA90A             ADD      R1,SP,#+40
   \   000028B2   0x.... 0x....      BL       BGM111_Transmit
   2836                                            }
   2837                                            sprintf( (char *)tempBffr2, "RGB_Red Set COMPLETE." );
   \                     ??RoadBrd_ParseString_446: (+1)
   \   000028B6   0xF8DF 0x1E88      LDR.W    R1,??RoadBrd_ParseString_447+0x4
   \   000028BA   0xA80A             ADD      R0,SP,#+40
   \   000028BC   0x.... 0x....      BL       sprintf
   \   000028C0   0xE2C7             B.N      ??RoadBrd_ParseString_399
   \   000028C2   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_289:
   \   000028C4   0x........         DC32     ?_106
   2838                                          }
   2839                                          else
   2840                                          {
   2841                                            // Is this a BLE Operation?
   2842                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_445: (+1)
   \   000028C8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000028CA   0x2D00             CMP      R5,#+0
   \   000028CC   0xD00A             BEQ.N    ??RoadBrd_ParseString_448
   2843                                            {
   2844                                              // Yes...Build and Send BLE Response NOW.
   2845                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_RGB_RED_ERR</STATUS>");
   \   000028CE   0xF8DF 0x1E74      LDR.W    R1,??RoadBrd_ParseString_447+0x8
   \   000028D2   0xA80A             ADD      R0,SP,#+40
   \   000028D4   0x.... 0x....      BL       strcpy
   2846                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000028D8   0xA80A             ADD      R0,SP,#+40
   \   000028DA   0x.... 0x....      BL       strlen
   \   000028DE   0xA90A             ADD      R1,SP,#+40
   \   000028E0   0x.... 0x....      BL       BGM111_Transmit
   2847                                            }
   2848                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_448: (+1)
   \   000028E4   0xF8DF 0x1928      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   000028E8   0xA80A             ADD      R0,SP,#+40
   \   000028EA   0x.... 0x....      BL       sprintf
   \   000028EE   0xE2B0             B.N      ??RoadBrd_ParseString_399
   2849                                          }
   2850                                        }
   2851                                        else if (strncmp((char *)uuid,"000E",4) == 0) // RGB_Green
   \                     ??RoadBrd_ParseString_444: (+1)
   \   000028F0   0x2204             MOVS     R2,#+4
   \   000028F2   0xF8DF 0x1E54      LDR.W    R1,??RoadBrd_ParseString_447+0xC
   \   000028F6   0xA836             ADD      R0,SP,#+216
   \   000028F8   0x.... 0x....      BL       strncmp
   \   000028FC   0x2800             CMP      R0,#+0
   \   000028FE   0xD133             BNE.N    ??RoadBrd_ParseString_449
   2852                                        {
   2853                                          Status = RoadBrd_CAL_Set_CalItem( CAL_RGB_GREEN, Offset, Scale);
   \   00002900   0x9A29             LDR      R2,[SP, #+164]
   \   00002902   0x9928             LDR      R1,[SP, #+160]
   \   00002904   0x200B             MOVS     R0,#+11
   \   00002906   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   0000290A   0x0006             MOVS     R6,R0
   2854                                          if (Status == HAL_OK)
   \   0000290C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000290E   0x2E00             CMP      R6,#+0
   \   00002910   0xD116             BNE.N    ??RoadBrd_ParseString_450
   2855                                          {
   2856                                            // Is this a BLE Operation?
   2857                                            if ( BLE_Flag )
   \   00002912   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002914   0x2D00             CMP      R5,#+0
   \   00002916   0xD00A             BEQ.N    ??RoadBrd_ParseString_451
   2858                                            {
   2859                                              // Yes...Build and Send BLE Response NOW.
   2860                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_RGB_GREEN</STATUS>");
   \   00002918   0xF8DF 0x1E30      LDR.W    R1,??RoadBrd_ParseString_447+0x10
   \   0000291C   0xA80A             ADD      R0,SP,#+40
   \   0000291E   0x.... 0x....      BL       strcpy
   2861                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002922   0xA80A             ADD      R0,SP,#+40
   \   00002924   0x.... 0x....      BL       strlen
   \   00002928   0xA90A             ADD      R1,SP,#+40
   \   0000292A   0x.... 0x....      BL       BGM111_Transmit
   2862                                            }
   2863                                            sprintf( (char *)tempBffr2, "RGB_Green Set COMPLETE." );
   \                     ??RoadBrd_ParseString_451: (+1)
   \   0000292E   0xF8DF 0x1EB0      LDR.W    R1,??RoadBrd_ParseString_452
   \   00002932   0xA80A             ADD      R0,SP,#+40
   \   00002934   0x.... 0x....      BL       sprintf
   \   00002938   0xE28B             B.N      ??RoadBrd_ParseString_399
   \   0000293A   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_304:
   \   0000293C   0x........         DC32     ?_107
   2864                                          }
   2865                                          else
   2866                                          {
   2867                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_450: (+1)
   \   00002940   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002942   0x2D00             CMP      R5,#+0
   \   00002944   0xD00A             BEQ.N    ??RoadBrd_ParseString_453
   2868                                            {
   2869                                              // Yes...Build and Send BLE Response NOW.
   2870                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_RGB_GREEN_ERR</STATUS>");
   \   00002946   0xF8DF 0x1E9C      LDR.W    R1,??RoadBrd_ParseString_452+0x4
   \   0000294A   0xA80A             ADD      R0,SP,#+40
   \   0000294C   0x.... 0x....      BL       strcpy
   2871                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002950   0xA80A             ADD      R0,SP,#+40
   \   00002952   0x.... 0x....      BL       strlen
   \   00002956   0xA90A             ADD      R1,SP,#+40
   \   00002958   0x.... 0x....      BL       BGM111_Transmit
   2872                                            }
   2873                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_453: (+1)
   \   0000295C   0xF8DF 0x18B0      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   00002960   0xA80A             ADD      R0,SP,#+40
   \   00002962   0x.... 0x....      BL       sprintf
   \   00002966   0xE274             B.N      ??RoadBrd_ParseString_399
   2874                                          }
   2875                                        }
   2876                                        else if (strncmp((char *)uuid,"000F",4) == 0) // RGB_Blue
   \                     ??RoadBrd_ParseString_449: (+1)
   \   00002968   0x2204             MOVS     R2,#+4
   \   0000296A   0xF8DF 0x1E7C      LDR.W    R1,??RoadBrd_ParseString_452+0x8
   \   0000296E   0xA836             ADD      R0,SP,#+216
   \   00002970   0x.... 0x....      BL       strncmp
   \   00002974   0x2800             CMP      R0,#+0
   \   00002976   0xD139             BNE.N    ??RoadBrd_ParseString_454
   2877                                        {
   2878                                          Status = RoadBrd_CAL_Set_CalItem( CAL_RGB_BLUE, Offset, Scale);
   \   00002978   0x9A29             LDR      R2,[SP, #+164]
   \   0000297A   0x9928             LDR      R1,[SP, #+160]
   \   0000297C   0x200C             MOVS     R0,#+12
   \   0000297E   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002982   0x0006             MOVS     R6,R0
   2879                                          if (Status == HAL_OK)
   \   00002984   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002986   0x2E00             CMP      R6,#+0
   \   00002988   0xD11C             BNE.N    ??RoadBrd_ParseString_455
   2880                                          {
   2881                                            // Is this a BLE Operation?
   2882                                            if ( BLE_Flag )
   \   0000298A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000298C   0x2D00             CMP      R5,#+0
   \   0000298E   0xD00A             BEQ.N    ??RoadBrd_ParseString_456
   2883                                            {
   2884                                              // Yes...Build and Send BLE Response NOW.
   2885                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_RGB_BLUE</STATUS>");
   \   00002990   0xF8DF 0x1E58      LDR.W    R1,??RoadBrd_ParseString_452+0xC
   \   00002994   0xA80A             ADD      R0,SP,#+40
   \   00002996   0x.... 0x....      BL       strcpy
   2886                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000299A   0xA80A             ADD      R0,SP,#+40
   \   0000299C   0x.... 0x....      BL       strlen
   \   000029A0   0xA90A             ADD      R1,SP,#+40
   \   000029A2   0x.... 0x....      BL       BGM111_Transmit
   2887                                            }
   2888                                            sprintf( (char *)tempBffr2, "RGB_Blue Set COMPLETE." );
   \                     ??RoadBrd_ParseString_456: (+1)
   \   000029A6   0xF8DF 0x1E48      LDR.W    R1,??RoadBrd_ParseString_452+0x10
   \   000029AA   0xA80A             ADD      R0,SP,#+40
   \   000029AC   0x.... 0x....      BL       sprintf
   \   000029B0   0xE24F             B.N      ??RoadBrd_ParseString_399
   \   000029B2   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_313:
   \   000029B4   0x........         DC32     ?_108
   \   000029B8   0x........         DC32     ?_109
   \   000029BC   0x........         DC32     ?_110
   \   000029C0   0x........         DC32     ?_111
   2889                                          }
   2890                                          else
   2891                                          {
   2892                                            // Is this a BLE Operation?
   2893                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_455: (+1)
   \   000029C4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000029C6   0x2D00             CMP      R5,#+0
   \   000029C8   0xD00A             BEQ.N    ??RoadBrd_ParseString_457
   2894                                            {
   2895                                              // Yes...Build and Send BLE Response NOW.
   2896                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_RGB_BLUE_ERR</STATUS>");
   \   000029CA   0xF8DF 0x1EB8      LDR.W    R1,??RoadBrd_ParseString_458
   \   000029CE   0xA80A             ADD      R0,SP,#+40
   \   000029D0   0x.... 0x....      BL       strcpy
   2897                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000029D4   0xA80A             ADD      R0,SP,#+40
   \   000029D6   0x.... 0x....      BL       strlen
   \   000029DA   0xA90A             ADD      R1,SP,#+40
   \   000029DC   0x.... 0x....      BL       BGM111_Transmit
   2898                                            }
   2899                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_457: (+1)
   \   000029E0   0xF8DF 0x182C      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   000029E4   0xA80A             ADD      R0,SP,#+40
   \   000029E6   0x.... 0x....      BL       sprintf
   \   000029EA   0xE232             B.N      ??RoadBrd_ParseString_399
   2900                                          }
   2901                                        }
   2902                                        else if (strncmp((char *)uuid,"0017",4) == 0) // Therm_C
   \                     ??RoadBrd_ParseString_454: (+1)
   \   000029EC   0x2204             MOVS     R2,#+4
   \   000029EE   0xF8DF 0x1E98      LDR.W    R1,??RoadBrd_ParseString_458+0x4
   \   000029F2   0xA836             ADD      R0,SP,#+216
   \   000029F4   0x.... 0x....      BL       strncmp
   \   000029F8   0x2800             CMP      R0,#+0
   \   000029FA   0xD130             BNE.N    ??RoadBrd_ParseString_459
   2903                                        {
   2904                                          Status = RoadBrd_CAL_Set_CalItem( CAL_THERM_C, Offset, Scale);
   \   000029FC   0x9A29             LDR      R2,[SP, #+164]
   \   000029FE   0x9928             LDR      R1,[SP, #+160]
   \   00002A00   0x200D             MOVS     R0,#+13
   \   00002A02   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002A06   0x0006             MOVS     R6,R0
   2905                                          if (Status == HAL_OK)
   \   00002A08   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002A0A   0x2E00             CMP      R6,#+0
   \   00002A0C   0xD113             BNE.N    ??RoadBrd_ParseString_460
   2906                                          {
   2907                                            // Is this a BLE Operation?
   2908                                            if ( BLE_Flag )
   \   00002A0E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002A10   0x2D00             CMP      R5,#+0
   \   00002A12   0xD00A             BEQ.N    ??RoadBrd_ParseString_461
   2909                                            {
   2910                                              // Yes...Build and Send BLE Response NOW.
   2911                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_THERM_C</STATUS>");
   \   00002A14   0xF8DF 0x1E74      LDR.W    R1,??RoadBrd_ParseString_458+0x8
   \   00002A18   0xA80A             ADD      R0,SP,#+40
   \   00002A1A   0x.... 0x....      BL       strcpy
   2912                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002A1E   0xA80A             ADD      R0,SP,#+40
   \   00002A20   0x.... 0x....      BL       strlen
   \   00002A24   0xA90A             ADD      R1,SP,#+40
   \   00002A26   0x.... 0x....      BL       BGM111_Transmit
   2913                                            }
   2914                                            sprintf( (char *)tempBffr2, "Therm_C Set COMPLETE." );
   \                     ??RoadBrd_ParseString_461: (+1)
   \   00002A2A   0xF8DF 0x1E64      LDR.W    R1,??RoadBrd_ParseString_458+0xC
   \   00002A2E   0xA80A             ADD      R0,SP,#+40
   \   00002A30   0x.... 0x....      BL       sprintf
   \   00002A34   0xE20D             B.N      ??RoadBrd_ParseString_399
   2915                                          }
   2916                                          else
   2917                                          {
   2918                                            // Is this a BLE Operation?
   2919                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_460: (+1)
   \   00002A36   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002A38   0x2D00             CMP      R5,#+0
   \   00002A3A   0xD00A             BEQ.N    ??RoadBrd_ParseString_462
   2920                                            {
   2921                                              // Yes...Build and Send BLE Response NOW.
   2922                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_THERM_C_ERR</STATUS>");
   \   00002A3C   0xF8DF 0x1E54      LDR.W    R1,??RoadBrd_ParseString_458+0x10
   \   00002A40   0xA80A             ADD      R0,SP,#+40
   \   00002A42   0x.... 0x....      BL       strcpy
   2923                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002A46   0xA80A             ADD      R0,SP,#+40
   \   00002A48   0x.... 0x....      BL       strlen
   \   00002A4C   0xA90A             ADD      R1,SP,#+40
   \   00002A4E   0x.... 0x....      BL       BGM111_Transmit
   2924                                            }
   2925                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_462: (+1)
   \   00002A52   0xF8DF 0x17BC      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   00002A56   0xA80A             ADD      R0,SP,#+40
   \   00002A58   0x.... 0x....      BL       sprintf
   \   00002A5C   0xE1F9             B.N      ??RoadBrd_ParseString_399
   2926                                          }
   2927                                        }
   2928                                        else if (strncmp((char *)uuid,"0019",4) == 0) // RoadT_1C
   \                     ??RoadBrd_ParseString_459: (+1)
   \   00002A5E   0x2204             MOVS     R2,#+4
   \   00002A60   0xF8DF 0x1EC4      LDR.W    R1,??RoadBrd_ParseString_463
   \   00002A64   0xA836             ADD      R0,SP,#+216
   \   00002A66   0x.... 0x....      BL       strncmp
   \   00002A6A   0x2800             CMP      R0,#+0
   \   00002A6C   0xD132             BNE.N    ??RoadBrd_ParseString_464
   2929                                        {
   2930                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_1C, Offset, Scale);
   \   00002A6E   0x9A29             LDR      R2,[SP, #+164]
   \   00002A70   0x9928             LDR      R1,[SP, #+160]
   \   00002A72   0x200E             MOVS     R0,#+14
   \   00002A74   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002A78   0x0006             MOVS     R6,R0
   2931                                          if (Status == HAL_OK)
   \   00002A7A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002A7C   0x2E00             CMP      R6,#+0
   \   00002A7E   0xD115             BNE.N    ??RoadBrd_ParseString_465
   2932                                          {
   2933                                            // Is this a BLE Operation?
   2934                                            if ( BLE_Flag )
   \   00002A80   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002A82   0x2D00             CMP      R5,#+0
   \   00002A84   0xD00A             BEQ.N    ??RoadBrd_ParseString_466
   2935                                            {
   2936                                              // Yes...Build and Send BLE Response NOW.
   2937                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_1C</STATUS>");
   \   00002A86   0xF8DF 0x1EA4      LDR.W    R1,??RoadBrd_ParseString_463+0x4
   \   00002A8A   0xA80A             ADD      R0,SP,#+40
   \   00002A8C   0x.... 0x....      BL       strcpy
   2938                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002A90   0xA80A             ADD      R0,SP,#+40
   \   00002A92   0x.... 0x....      BL       strlen
   \   00002A96   0xA90A             ADD      R1,SP,#+40
   \   00002A98   0x.... 0x....      BL       BGM111_Transmit
   2939                                            }
   2940                                            sprintf( (char *)tempBffr2, "RoadT_1C Set COMPLETE." );
   \                     ??RoadBrd_ParseString_466: (+1)
   \   00002A9C   0xF8DF 0x1E90      LDR.W    R1,??RoadBrd_ParseString_463+0x8
   \   00002AA0   0xA80A             ADD      R0,SP,#+40
   \   00002AA2   0x.... 0x....      BL       sprintf
   \   00002AA6   0xE1D4             B.N      ??RoadBrd_ParseString_399
   \                     ??RoadBrd_ParseString_323:
   \   00002AA8   0x........         DC32     ?_112
   2941                                          }
   2942                                          else
   2943                                          {
   2944                                            // Is this a BLE Operation?
   2945                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_465: (+1)
   \   00002AAC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002AAE   0x2D00             CMP      R5,#+0
   \   00002AB0   0xD00A             BEQ.N    ??RoadBrd_ParseString_467
   2946                                            {
   2947                                              // Yes...Build and Send BLE Response NOW.
   2948                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_1C_ERR</STATUS>");
   \   00002AB2   0xF8DF 0x1E80      LDR.W    R1,??RoadBrd_ParseString_463+0xC
   \   00002AB6   0xA80A             ADD      R0,SP,#+40
   \   00002AB8   0x.... 0x....      BL       strcpy
   2949                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002ABC   0xA80A             ADD      R0,SP,#+40
   \   00002ABE   0x.... 0x....      BL       strlen
   \   00002AC2   0xA90A             ADD      R1,SP,#+40
   \   00002AC4   0x.... 0x....      BL       BGM111_Transmit
   2950                                            }
   2951                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_467: (+1)
   \   00002AC8   0xF8DF 0x1744      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   00002ACC   0xA80A             ADD      R0,SP,#+40
   \   00002ACE   0x.... 0x....      BL       sprintf
   \   00002AD2   0xE1BE             B.N      ??RoadBrd_ParseString_399
   2952                                          }
   2953                                        }
   2954                                        else if (strncmp((char *)uuid,"001B",4) == 0) // RoadT_2C
   \                     ??RoadBrd_ParseString_464: (+1)
   \   00002AD4   0x2204             MOVS     R2,#+4
   \   00002AD6   0xF8DF 0x1E60      LDR.W    R1,??RoadBrd_ParseString_463+0x10
   \   00002ADA   0xA836             ADD      R0,SP,#+216
   \   00002ADC   0x.... 0x....      BL       strncmp
   \   00002AE0   0x2800             CMP      R0,#+0
   \   00002AE2   0xD133             BNE.N    ??RoadBrd_ParseString_468
   2955                                        {
   2956                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_2C, Offset, Scale);
   \   00002AE4   0x9A29             LDR      R2,[SP, #+164]
   \   00002AE6   0x9928             LDR      R1,[SP, #+160]
   \   00002AE8   0x200F             MOVS     R0,#+15
   \   00002AEA   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002AEE   0x0006             MOVS     R6,R0
   2957                                          if (Status == HAL_OK)
   \   00002AF0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002AF2   0x2E00             CMP      R6,#+0
   \   00002AF4   0xD116             BNE.N    ??RoadBrd_ParseString_469
   2958                                          {
   2959                                            // Is this a BLE Operation?
   2960                                            if ( BLE_Flag )
   \   00002AF6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002AF8   0x2D00             CMP      R5,#+0
   \   00002AFA   0xD00A             BEQ.N    ??RoadBrd_ParseString_470
   2961                                            {
   2962                                              // Yes...Build and Send BLE Response NOW.
   2963                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_2C</STATUS>");
   \   00002AFC   0xF8DF 0x1ECC      LDR.W    R1,??RoadBrd_ParseString_471
   \   00002B00   0xA80A             ADD      R0,SP,#+40
   \   00002B02   0x.... 0x....      BL       strcpy
   2964                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002B06   0xA80A             ADD      R0,SP,#+40
   \   00002B08   0x.... 0x....      BL       strlen
   \   00002B0C   0xA90A             ADD      R1,SP,#+40
   \   00002B0E   0x.... 0x....      BL       BGM111_Transmit
   2965                                            }
   2966                                            sprintf( (char *)tempBffr2, "RoadT_2C Set COMPLETE." );
   \                     ??RoadBrd_ParseString_470: (+1)
   \   00002B12   0xF8DF 0x1EBC      LDR.W    R1,??RoadBrd_ParseString_471+0x4
   \   00002B16   0xA80A             ADD      R0,SP,#+40
   \   00002B18   0x.... 0x....      BL       sprintf
   \   00002B1C   0xE199             B.N      ??RoadBrd_ParseString_399
   \   00002B1E   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_329:
   \   00002B20   0x........         DC32     ?_114
   2967                                          }
   2968                                          else
   2969                                          {
   2970                                            // Is this a BLE Operation?
   2971                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_469: (+1)
   \   00002B24   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002B26   0x2D00             CMP      R5,#+0
   \   00002B28   0xD00A             BEQ.N    ??RoadBrd_ParseString_472
   2972                                            {
   2973                                              // Yes...Build and Send BLE Response NOW.
   2974                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_2C_ERR</STATUS>");
   \   00002B2A   0xF8DF 0x1EA8      LDR.W    R1,??RoadBrd_ParseString_471+0x8
   \   00002B2E   0xA80A             ADD      R0,SP,#+40
   \   00002B30   0x.... 0x....      BL       strcpy
   2975                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002B34   0xA80A             ADD      R0,SP,#+40
   \   00002B36   0x.... 0x....      BL       strlen
   \   00002B3A   0xA90A             ADD      R1,SP,#+40
   \   00002B3C   0x.... 0x....      BL       BGM111_Transmit
   2976                                            }
   2977                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_472: (+1)
   \   00002B40   0xF8DF 0x16CC      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   00002B44   0xA80A             ADD      R0,SP,#+40
   \   00002B46   0x.... 0x....      BL       sprintf
   \   00002B4A   0xE182             B.N      ??RoadBrd_ParseString_399
   2978                                          }
   2979                                        }
   2980                                        else if (strncmp((char *)uuid,"001D",4) == 0) // RoadT_3C
   \                     ??RoadBrd_ParseString_468: (+1)
   \   00002B4C   0x2204             MOVS     R2,#+4
   \   00002B4E   0xF8DF 0x1E88      LDR.W    R1,??RoadBrd_ParseString_471+0xC
   \   00002B52   0xA836             ADD      R0,SP,#+216
   \   00002B54   0x.... 0x....      BL       strncmp
   \   00002B58   0x2800             CMP      R0,#+0
   \   00002B5A   0xD135             BNE.N    ??RoadBrd_ParseString_473
   2981                                        {
   2982                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_3C, Offset, Scale);
   \   00002B5C   0x9A29             LDR      R2,[SP, #+164]
   \   00002B5E   0x9928             LDR      R1,[SP, #+160]
   \   00002B60   0x2010             MOVS     R0,#+16
   \   00002B62   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002B66   0x0006             MOVS     R6,R0
   2983                                          if (Status == HAL_OK)
   \   00002B68   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002B6A   0x2E00             CMP      R6,#+0
   \   00002B6C   0xD118             BNE.N    ??RoadBrd_ParseString_474
   2984                                          {
   2985                                            // Is this a BLE Operation?
   2986                                            if ( BLE_Flag )
   \   00002B6E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002B70   0x2D00             CMP      R5,#+0
   \   00002B72   0xD00A             BEQ.N    ??RoadBrd_ParseString_475
   2987                                            {
   2988                                              // Yes...Build and Send BLE Response NOW.
   2989                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_3C</STATUS>");
   \   00002B74   0xF8DF 0x1E64      LDR.W    R1,??RoadBrd_ParseString_471+0x10
   \   00002B78   0xA80A             ADD      R0,SP,#+40
   \   00002B7A   0x.... 0x....      BL       strcpy
   2990                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002B7E   0xA80A             ADD      R0,SP,#+40
   \   00002B80   0x.... 0x....      BL       strlen
   \   00002B84   0xA90A             ADD      R1,SP,#+40
   \   00002B86   0x.... 0x....      BL       BGM111_Transmit
   2991                                            }
   2992                                            sprintf( (char *)tempBffr2, "RoadT_3C Set COMPLETE." );
   \                     ??RoadBrd_ParseString_475: (+1)
   \   00002B8A   0xF8DF 0x1E54      LDR.W    R1,??RoadBrd_ParseString_471+0x14
   \   00002B8E   0xA80A             ADD      R0,SP,#+40
   \   00002B90   0x.... 0x....      BL       sprintf
   \   00002B94   0xE15D             B.N      ??RoadBrd_ParseString_399
   \   00002B96   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_333:
   \   00002B98   0x........         DC32     ?_115
   \   00002B9C   0x........         DC32     ?_116
   2993                                          }
   2994                                          else
   2995                                          {
   2996                                            // Is this a BLE Operation?
   2997                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_474: (+1)
   \   00002BA0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002BA2   0x2D00             CMP      R5,#+0
   \   00002BA4   0xD00A             BEQ.N    ??RoadBrd_ParseString_476
   2998                                            {
   2999                                              // Yes...Build and Send BLE Response NOW.
   3000                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_3C_ERR</STATUS>");
   \   00002BA6   0xF8DF 0x1ECC      LDR.W    R1,??RoadBrd_ParseString_477
   \   00002BAA   0xA80A             ADD      R0,SP,#+40
   \   00002BAC   0x.... 0x....      BL       strcpy
   3001                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002BB0   0xA80A             ADD      R0,SP,#+40
   \   00002BB2   0x.... 0x....      BL       strlen
   \   00002BB6   0xA90A             ADD      R1,SP,#+40
   \   00002BB8   0x.... 0x....      BL       BGM111_Transmit
   3002                                            }
   3003                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_476: (+1)
   \   00002BBC   0xF8DF 0x1650      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   00002BC0   0xA80A             ADD      R0,SP,#+40
   \   00002BC2   0x.... 0x....      BL       sprintf
   \   00002BC6   0xE144             B.N      ??RoadBrd_ParseString_399
   3004                                          }
   3005                                        }
   3006                                        else if (strncmp((char *)uuid,"001F",4) == 0) // RoadT_4C
   \                     ??RoadBrd_ParseString_473: (+1)
   \   00002BC8   0x2204             MOVS     R2,#+4
   \   00002BCA   0xF8DF 0x1EAC      LDR.W    R1,??RoadBrd_ParseString_477+0x4
   \   00002BCE   0xA836             ADD      R0,SP,#+216
   \   00002BD0   0x.... 0x....      BL       strncmp
   \   00002BD4   0x2800             CMP      R0,#+0
   \   00002BD6   0xD137             BNE.N    ??RoadBrd_ParseString_478
   3007                                        {
   3008                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_4C, Offset, Scale);
   \   00002BD8   0x9A29             LDR      R2,[SP, #+164]
   \   00002BDA   0x9928             LDR      R1,[SP, #+160]
   \   00002BDC   0x2011             MOVS     R0,#+17
   \   00002BDE   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002BE2   0x0006             MOVS     R6,R0
   3009                                          if (Status == HAL_OK)
   \   00002BE4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002BE6   0x2E00             CMP      R6,#+0
   \   00002BE8   0xD11A             BNE.N    ??RoadBrd_ParseString_479
   3010                                          {
   3011                                            // Is this a BLE Operation?
   3012                                            if ( BLE_Flag )
   \   00002BEA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002BEC   0x2D00             CMP      R5,#+0
   \   00002BEE   0xD00A             BEQ.N    ??RoadBrd_ParseString_480
   3013                                            {
   3014                                              // Yes...Build and Send BLE Response NOW.
   3015                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_4C</STATUS>");
   \   00002BF0   0xF8DF 0x1E88      LDR.W    R1,??RoadBrd_ParseString_477+0x8
   \   00002BF4   0xA80A             ADD      R0,SP,#+40
   \   00002BF6   0x.... 0x....      BL       strcpy
   3016                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002BFA   0xA80A             ADD      R0,SP,#+40
   \   00002BFC   0x.... 0x....      BL       strlen
   \   00002C00   0xA90A             ADD      R1,SP,#+40
   \   00002C02   0x.... 0x....      BL       BGM111_Transmit
   3017                                            }
   3018                                            sprintf( (char *)tempBffr2, "RoadT_4C Set COMPLETE." );
   \                     ??RoadBrd_ParseString_480: (+1)
   \   00002C06   0xF8DF 0x1E78      LDR.W    R1,??RoadBrd_ParseString_477+0xC
   \   00002C0A   0xA80A             ADD      R0,SP,#+40
   \   00002C0C   0x.... 0x....      BL       sprintf
   \   00002C10   0xE11F             B.N      ??RoadBrd_ParseString_399
   \   00002C12   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_336:
   \   00002C14   0x........         DC32     ?_117
   \   00002C18   0x........         DC32     ?_118
   \   00002C1C   0x........         DC32     ?_119
   3019                                          }
   3020                                          else
   3021                                          {
   3022                                            // Is this a BLE Operation?
   3023                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_479: (+1)
   \   00002C20   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002C22   0x2D00             CMP      R5,#+0
   \   00002C24   0xD00A             BEQ.N    ??RoadBrd_ParseString_481
   3024                                            {
   3025                                              // Yes...Build and Send BLE Response NOW.
   3026                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_4C_ERR</STATUS>");
   \   00002C26   0xF8DF 0x1E5C      LDR.W    R1,??RoadBrd_ParseString_477+0x10
   \   00002C2A   0xA80A             ADD      R0,SP,#+40
   \   00002C2C   0x.... 0x....      BL       strcpy
   3027                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002C30   0xA80A             ADD      R0,SP,#+40
   \   00002C32   0x.... 0x....      BL       strlen
   \   00002C36   0xA90A             ADD      R1,SP,#+40
   \   00002C38   0x.... 0x....      BL       BGM111_Transmit
   3028                                            }
   3029                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_481: (+1)
   \   00002C3C   0xF8DF 0x15D0      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   00002C40   0xA80A             ADD      R0,SP,#+40
   \   00002C42   0x.... 0x....      BL       sprintf
   \   00002C46   0xE104             B.N      ??RoadBrd_ParseString_399
   3030                                          }
   3031                                        }
   3032                                        else if (strncmp((char *)uuid,"0021",4) == 0) // RoadT_5C
   \                     ??RoadBrd_ParseString_478: (+1)
   \   00002C48   0x2204             MOVS     R2,#+4
   \   00002C4A   0xF8DF 0x1ECC      LDR.W    R1,??RoadBrd_ParseString_482
   \   00002C4E   0xA836             ADD      R0,SP,#+216
   \   00002C50   0x.... 0x....      BL       strncmp
   \   00002C54   0x2800             CMP      R0,#+0
   \   00002C56   0xD133             BNE.N    ??RoadBrd_ParseString_483
   3033                                        {
   3034                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_5C, Offset, Scale);
   \   00002C58   0x9A29             LDR      R2,[SP, #+164]
   \   00002C5A   0x9928             LDR      R1,[SP, #+160]
   \   00002C5C   0x2012             MOVS     R0,#+18
   \   00002C5E   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002C62   0x0006             MOVS     R6,R0
   3035                                          if (Status == HAL_OK)
   \   00002C64   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002C66   0x2E00             CMP      R6,#+0
   \   00002C68   0xD116             BNE.N    ??RoadBrd_ParseString_484
   3036                                          {
   3037                                            // Is this a BLE Operation?
   3038                                            if ( BLE_Flag )
   \   00002C6A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002C6C   0x2D00             CMP      R5,#+0
   \   00002C6E   0xD00A             BEQ.N    ??RoadBrd_ParseString_485
   3039                                            {
   3040                                              // Yes...Build and Send BLE Response NOW.
   3041                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_5C</STATUS>");
   \   00002C70   0xF8DF 0x1EA8      LDR.W    R1,??RoadBrd_ParseString_482+0x4
   \   00002C74   0xA80A             ADD      R0,SP,#+40
   \   00002C76   0x.... 0x....      BL       strcpy
   3042                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002C7A   0xA80A             ADD      R0,SP,#+40
   \   00002C7C   0x.... 0x....      BL       strlen
   \   00002C80   0xA90A             ADD      R1,SP,#+40
   \   00002C82   0x.... 0x....      BL       BGM111_Transmit
   3043                                            }
   3044                                            sprintf( (char *)tempBffr2, "RoadT_5C Set COMPLETE." );
   \                     ??RoadBrd_ParseString_485: (+1)
   \   00002C86   0xF8DF 0x1E98      LDR.W    R1,??RoadBrd_ParseString_482+0x8
   \   00002C8A   0xA80A             ADD      R0,SP,#+40
   \   00002C8C   0x.... 0x....      BL       sprintf
   \   00002C90   0xE0DF             B.N      ??RoadBrd_ParseString_399
   \   00002C92   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_342:
   \   00002C94   0x........         DC32     ?_120
   3045                                          }
   3046                                          else
   3047                                          {
   3048                                            // Is this a BLE Operation?
   3049                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_484: (+1)
   \   00002C98   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002C9A   0x2D00             CMP      R5,#+0
   \   00002C9C   0xD00A             BEQ.N    ??RoadBrd_ParseString_486
   3050                                            {
   3051                                              // Yes...Build and Send BLE Response NOW.
   3052                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_5C_ERR</STATUS>");
   \   00002C9E   0xF8DF 0x1E84      LDR.W    R1,??RoadBrd_ParseString_482+0xC
   \   00002CA2   0xA80A             ADD      R0,SP,#+40
   \   00002CA4   0x.... 0x....      BL       strcpy
   3053                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002CA8   0xA80A             ADD      R0,SP,#+40
   \   00002CAA   0x.... 0x....      BL       strlen
   \   00002CAE   0xA90A             ADD      R1,SP,#+40
   \   00002CB0   0x.... 0x....      BL       BGM111_Transmit
   3054                                            }
   3055                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_486: (+1)
   \   00002CB4   0xF8DF 0x1558      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   00002CB8   0xA80A             ADD      R0,SP,#+40
   \   00002CBA   0x.... 0x....      BL       sprintf
   \   00002CBE   0xE0C8             B.N      ??RoadBrd_ParseString_399
   3056                                          }
   3057                                        }
   3058                                        else if (strncmp((char *)uuid,"0023",4) == 0) // RoadT_6C
   \                     ??RoadBrd_ParseString_483: (+1)
   \   00002CC0   0x2204             MOVS     R2,#+4
   \   00002CC2   0xF8DF 0x1E64      LDR.W    R1,??RoadBrd_ParseString_482+0x10
   \   00002CC6   0xA836             ADD      R0,SP,#+216
   \   00002CC8   0x.... 0x....      BL       strncmp
   \   00002CCC   0x2800             CMP      R0,#+0
   \   00002CCE   0xD133             BNE.N    ??RoadBrd_ParseString_487
   3059                                        {
   3060                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_6C, Offset, Scale);
   \   00002CD0   0x9A29             LDR      R2,[SP, #+164]
   \   00002CD2   0x9928             LDR      R1,[SP, #+160]
   \   00002CD4   0x2013             MOVS     R0,#+19
   \   00002CD6   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002CDA   0x0006             MOVS     R6,R0
   3061                                          if (Status == HAL_OK)
   \   00002CDC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002CDE   0x2E00             CMP      R6,#+0
   \   00002CE0   0xD116             BNE.N    ??RoadBrd_ParseString_488
   3062                                          {
   3063                                            // Is this a BLE Operation?
   3064                                            if ( BLE_Flag )
   \   00002CE2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002CE4   0x2D00             CMP      R5,#+0
   \   00002CE6   0xD00A             BEQ.N    ??RoadBrd_ParseString_489
   3065                                            {
   3066                                              // Yes...Build and Send BLE Response NOW.
   3067                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_6C</STATUS>");
   \   00002CE8   0xF8DF 0x1ED0      LDR.W    R1,??RoadBrd_ParseString_490
   \   00002CEC   0xA80A             ADD      R0,SP,#+40
   \   00002CEE   0x.... 0x....      BL       strcpy
   3068                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002CF2   0xA80A             ADD      R0,SP,#+40
   \   00002CF4   0x.... 0x....      BL       strlen
   \   00002CF8   0xA90A             ADD      R1,SP,#+40
   \   00002CFA   0x.... 0x....      BL       BGM111_Transmit
   3069                                            }
   3070                                            sprintf( (char *)tempBffr2, "RoadT_6C Set COMPLETE." );
   \                     ??RoadBrd_ParseString_489: (+1)
   \   00002CFE   0xF8DF 0x1EC0      LDR.W    R1,??RoadBrd_ParseString_490+0x4
   \   00002D02   0xA80A             ADD      R0,SP,#+40
   \   00002D04   0x.... 0x....      BL       sprintf
   \   00002D08   0xE0A3             B.N      ??RoadBrd_ParseString_399
   \   00002D0A   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_349:
   \   00002D0C   0x........         DC32     ?_121
   3071                                          }
   3072                                          else
   3073                                          {
   3074                                            // Is this a BLE Operation?
   3075                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_488: (+1)
   \   00002D10   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002D12   0x2D00             CMP      R5,#+0
   \   00002D14   0xD00A             BEQ.N    ??RoadBrd_ParseString_491
   3076                                            {
   3077                                              // Yes...Build and Send BLE Response NOW.
   3078                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_6C_ERR</STATUS>");
   \   00002D16   0xF8DF 0x1EAC      LDR.W    R1,??RoadBrd_ParseString_490+0x8
   \   00002D1A   0xA80A             ADD      R0,SP,#+40
   \   00002D1C   0x.... 0x....      BL       strcpy
   3079                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002D20   0xA80A             ADD      R0,SP,#+40
   \   00002D22   0x.... 0x....      BL       strlen
   \   00002D26   0xA90A             ADD      R1,SP,#+40
   \   00002D28   0x.... 0x....      BL       BGM111_Transmit
   3080                                            }
   3081                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_491: (+1)
   \   00002D2C   0xF8DF 0x14E0      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   00002D30   0xA80A             ADD      R0,SP,#+40
   \   00002D32   0x.... 0x....      BL       sprintf
   \   00002D36   0xE08C             B.N      ??RoadBrd_ParseString_399
   3082                                          }
   3083                                        }
   3084                                        else if (strncmp((char *)uuid,"0025",4) == 0) // RoadT_7C
   \                     ??RoadBrd_ParseString_487: (+1)
   \   00002D38   0x2204             MOVS     R2,#+4
   \   00002D3A   0xF8DF 0x1E8C      LDR.W    R1,??RoadBrd_ParseString_490+0xC
   \   00002D3E   0xA836             ADD      R0,SP,#+216
   \   00002D40   0x.... 0x....      BL       strncmp
   \   00002D44   0x2800             CMP      R0,#+0
   \   00002D46   0xD135             BNE.N    ??RoadBrd_ParseString_492
   3085                                        {
   3086                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_7C, Offset, Scale);
   \   00002D48   0x9A29             LDR      R2,[SP, #+164]
   \   00002D4A   0x9928             LDR      R1,[SP, #+160]
   \   00002D4C   0x2014             MOVS     R0,#+20
   \   00002D4E   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002D52   0x0006             MOVS     R6,R0
   3087                                          if (Status == HAL_OK)
   \   00002D54   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002D56   0x2E00             CMP      R6,#+0
   \   00002D58   0xD118             BNE.N    ??RoadBrd_ParseString_493
   3088                                          {
   3089                                            // Is this a BLE Operation?
   3090                                            if ( BLE_Flag )
   \   00002D5A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002D5C   0x2D00             CMP      R5,#+0
   \   00002D5E   0xD00A             BEQ.N    ??RoadBrd_ParseString_494
   3091                                            {
   3092                                              // Yes...Build and Send BLE Response NOW.
   3093                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_7C</STATUS>");
   \   00002D60   0xF8DF 0x1EF8      LDR.W    R1,??RoadBrd_ParseString_495
   \   00002D64   0xA80A             ADD      R0,SP,#+40
   \   00002D66   0x.... 0x....      BL       strcpy
   3094                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002D6A   0xA80A             ADD      R0,SP,#+40
   \   00002D6C   0x.... 0x....      BL       strlen
   \   00002D70   0xA90A             ADD      R1,SP,#+40
   \   00002D72   0x.... 0x....      BL       BGM111_Transmit
   3095                                            }
   3096                                            sprintf( (char *)tempBffr2, "RoadT_7C Set COMPLETE." );
   \                     ??RoadBrd_ParseString_494: (+1)
   \   00002D76   0xF8DF 0x1EE8      LDR.W    R1,??RoadBrd_ParseString_495+0x4
   \   00002D7A   0xA80A             ADD      R0,SP,#+40
   \   00002D7C   0x.... 0x....      BL       sprintf
   \   00002D80   0xE067             B.N      ??RoadBrd_ParseString_399
   \   00002D82   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_355:
   \   00002D84   0x........         DC32     ?_122
   \   00002D88   0x........         DC32     ?_123
   3097                                          }
   3098                                          else
   3099                                          {
   3100                                            // Is this a BLE Operation?
   3101                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_493: (+1)
   \   00002D8C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002D8E   0x2D00             CMP      R5,#+0
   \   00002D90   0xD00A             BEQ.N    ??RoadBrd_ParseString_496
   3102                                            {
   3103                                              // Yes...Build and Send BLE Response NOW.
   3104                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_7C_ERR</STATUS>");
   \   00002D92   0xF8DF 0x1ED0      LDR.W    R1,??RoadBrd_ParseString_495+0x8
   \   00002D96   0xA80A             ADD      R0,SP,#+40
   \   00002D98   0x.... 0x....      BL       strcpy
   3105                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002D9C   0xA80A             ADD      R0,SP,#+40
   \   00002D9E   0x.... 0x....      BL       strlen
   \   00002DA2   0xA90A             ADD      R1,SP,#+40
   \   00002DA4   0x.... 0x....      BL       BGM111_Transmit
   3106                                            }
   3107                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_496: (+1)
   \   00002DA8   0xF8DF 0x1464      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   00002DAC   0xA80A             ADD      R0,SP,#+40
   \   00002DAE   0x.... 0x....      BL       sprintf
   \   00002DB2   0xE04E             B.N      ??RoadBrd_ParseString_399
   3108                                          }
   3109                                        }
   3110                                        else if (strncmp((char *)uuid,"0027",4) == 0) // RoadT_8C
   \                     ??RoadBrd_ParseString_492: (+1)
   \   00002DB4   0x2204             MOVS     R2,#+4
   \   00002DB6   0xF8DF 0x1EB0      LDR.W    R1,??RoadBrd_ParseString_495+0xC
   \   00002DBA   0xA836             ADD      R0,SP,#+216
   \   00002DBC   0x.... 0x....      BL       strncmp
   \   00002DC0   0x2800             CMP      R0,#+0
   \   00002DC2   0xD133             BNE.N    ??RoadBrd_ParseString_497
   3111                                        {
   3112                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_8C, Offset, Scale);
   \   00002DC4   0x9A29             LDR      R2,[SP, #+164]
   \   00002DC6   0x9928             LDR      R1,[SP, #+160]
   \   00002DC8   0x2015             MOVS     R0,#+21
   \   00002DCA   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002DCE   0x0006             MOVS     R6,R0
   3113                                          if (Status == HAL_OK)
   \   00002DD0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002DD2   0x2E00             CMP      R6,#+0
   \   00002DD4   0xD113             BNE.N    ??RoadBrd_ParseString_498
   3114                                          {
   3115                                            // Is this a BLE Operation?
   3116                                            if ( BLE_Flag )
   \   00002DD6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002DD8   0x2D00             CMP      R5,#+0
   \   00002DDA   0xD00A             BEQ.N    ??RoadBrd_ParseString_499
   3117                                            {
   3118                                              // Yes...Build and Send BLE Response NOW.
   3119                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_8C</STATUS>");
   \   00002DDC   0xF8DF 0x1E8C      LDR.W    R1,??RoadBrd_ParseString_495+0x10
   \   00002DE0   0xA80A             ADD      R0,SP,#+40
   \   00002DE2   0x.... 0x....      BL       strcpy
   3120                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002DE6   0xA80A             ADD      R0,SP,#+40
   \   00002DE8   0x.... 0x....      BL       strlen
   \   00002DEC   0xA90A             ADD      R1,SP,#+40
   \   00002DEE   0x.... 0x....      BL       BGM111_Transmit
   3121                                            }
   3122                                            sprintf( (char *)tempBffr2, "RoadT_8C Set COMPLETE." );
   \                     ??RoadBrd_ParseString_499: (+1)
   \   00002DF2   0xF8DF 0x1E7C      LDR.W    R1,??RoadBrd_ParseString_495+0x14
   \   00002DF6   0xA80A             ADD      R0,SP,#+40
   \   00002DF8   0x.... 0x....      BL       sprintf
   \   00002DFC   0xE029             B.N      ??RoadBrd_ParseString_399
   3123                                          }
   3124                                          else
   3125                                          {
   3126                                            // Is this a BLE Operation?
   3127                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_498: (+1)
   \   00002DFE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002E00   0x2D00             CMP      R5,#+0
   \   00002E02   0xD00A             BEQ.N    ??RoadBrd_ParseString_500
   3128                                            {
   3129                                              // Yes...Build and Send BLE Response NOW.
   3130                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_8C_ERR</STATUS>");
   \   00002E04   0xF8DF 0x1EFC      LDR.W    R1,??RoadBrd_ParseString_501
   \   00002E08   0xA80A             ADD      R0,SP,#+40
   \   00002E0A   0x.... 0x....      BL       strcpy
   3131                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002E0E   0xA80A             ADD      R0,SP,#+40
   \   00002E10   0x.... 0x....      BL       strlen
   \   00002E14   0xA90A             ADD      R1,SP,#+40
   \   00002E16   0x.... 0x....      BL       BGM111_Transmit
   3132                                            }
   3133                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_500: (+1)
   \   00002E1A   0xF8DF 0x13F4      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   00002E1E   0xA80A             ADD      R0,SP,#+40
   \   00002E20   0x.... 0x....      BL       sprintf
   \   00002E24   0xE015             B.N      ??RoadBrd_ParseString_399
   \   00002E26   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_360:
   \   00002E28   0x........         DC32     ?_124
   3134                                          }
   3135                                        }
   3136                                        else
   3137                                        {
   3138                                          // Is this a BLE Operation?
   3139                                          if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_497: (+1)
   \   00002E2C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002E2E   0x2D00             CMP      R5,#+0
   \   00002E30   0xD00A             BEQ.N    ??RoadBrd_ParseString_502
   3140                                          {
   3141                                            // Yes...Build and Send BLE Response NOW.
   3142                                            strcpy( (char *)tempBffr2, "<STATUS>CMD_TCS_BADUUID</STATUS>");
   \   00002E32   0xF8DF 0x1ED4      LDR.W    R1,??RoadBrd_ParseString_501+0x4
   \   00002E36   0xA80A             ADD      R0,SP,#+40
   \   00002E38   0x.... 0x....      BL       strcpy
   3143                                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002E3C   0xA80A             ADD      R0,SP,#+40
   \   00002E3E   0x.... 0x....      BL       strlen
   \   00002E42   0xA90A             ADD      R1,SP,#+40
   \   00002E44   0x.... 0x....      BL       BGM111_Transmit
   3144                                          }
   3145                                          sprintf( (char *)tempBffr2, "TCS SYNTAX ERROR: Bad UUID.\r\n" );
   \                     ??RoadBrd_ParseString_502: (+1)
   \   00002E48   0xF8DF 0x1EC0      LDR.W    R1,??RoadBrd_ParseString_501+0x8
   \   00002E4C   0xA80A             ADD      R0,SP,#+40
   \   00002E4E   0x.... 0x....      BL       sprintf
   3146                                        }
   3147                                        Status = HAL_OK;
   \                     ??RoadBrd_ParseString_399: (+1)
   \   00002E52   0x2000             MOVS     R0,#+0
   \   00002E54   0x0006             MOVS     R6,R0
   \   00002E56   0xE011             B.N      ??RoadBrd_ParseString_390
   3148                                      }
   3149                                      else
   3150                                      {
   3151                                        // Is this a BLE Operation?
   3152                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_394: (+1)
   \   00002E58   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002E5A   0x2D00             CMP      R5,#+0
   \   00002E5C   0xD009             BEQ.N    ??RoadBrd_ParseString_503
   3153                                        {
   3154                                          // Yes...Build and Send BLE Response NOW.
   3155                                          strcpy( (char *)tempBffr2, "<STATUS>CMD_TCS_BADPARAM</STATUS>");
   \   00002E5E   0x49BF             LDR.N    R1,??RoadBrd_ParseString_393
   \   00002E60   0xA80A             ADD      R0,SP,#+40
   \   00002E62   0x.... 0x....      BL       strcpy
   3156                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002E66   0xA80A             ADD      R0,SP,#+40
   \   00002E68   0x.... 0x....      BL       strlen
   \   00002E6C   0xA90A             ADD      R1,SP,#+40
   \   00002E6E   0x.... 0x....      BL       BGM111_Transmit
   3157                                        }
   3158                                        
   3159                                        strcpy( (char *)tempBffr2, "TCS SYNTAX ERROR: Wrong Number of Parameters.\r\n");
   \                     ??RoadBrd_ParseString_503: (+1)
   \   00002E72   0xF8DF 0x1E9C      LDR.W    R1,??RoadBrd_ParseString_501+0xC
   \   00002E76   0xA80A             ADD      R0,SP,#+40
   \   00002E78   0x.... 0x....      BL       strcpy
   3160                                      }
   3161                                    } // EndElse (flag == 0)
   3162                                  } // EndElse (tempBffr[3]!=':')
   3163                                  break;
   \                     ??RoadBrd_ParseString_390: (+1)
   \   00002E7C   0xF001 0xB84D      B.W      ??RoadBrd_ParseString_378
   3164                                  //------------------ TCR Command: Calibration Read Command
   3165                                case 'R':
   3166                                  // Build Read Calibration Dump Part I....
   3167                                  // Is this a BLE Operation?
   3168                                  if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_385: (+1)
   \   00002E80   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002E82   0x2D00             CMP      R5,#+0
   \   00002E84   0xD00D             BEQ.N    ??RoadBrd_ParseString_504
   3169                                  {
   3170                                    // Yes...Build and Send BLE Response NOW.
   3171                                    sprintf( (char *)tempBffr2, "<STATUS>TCR:%s\\",  RoadBrd_CAL_GetTimeString());
   \   00002E86   0x.... 0x....      BL       RoadBrd_CAL_GetTimeString
   \   00002E8A   0x0002             MOVS     R2,R0
   \   00002E8C   0xF8DF 0x1E84      LDR.W    R1,??RoadBrd_ParseString_501+0x10
   \   00002E90   0xA80A             ADD      R0,SP,#+40
   \   00002E92   0x.... 0x....      BL       sprintf
   3172                                    BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002E96   0xA80A             ADD      R0,SP,#+40
   \   00002E98   0x.... 0x....      BL       strlen
   \   00002E9C   0xA90A             ADD      R1,SP,#+40
   \   00002E9E   0x.... 0x....      BL       BGM111_Transmit
   3173                                  }
   3174                                  
   3175                                  // Send string to UART..
   3176                                  sprintf( (char *)tempBffr2, "CALIBRATION DATA\r\nDate: %s\r\n",  RoadBrd_CAL_GetTimeString());
   \                     ??RoadBrd_ParseString_504: (+1)
   \   00002EA2   0x.... 0x....      BL       RoadBrd_CAL_GetTimeString
   \   00002EA6   0x0002             MOVS     R2,R0
   \   00002EA8   0xF8DF 0x1F14      LDR.W    R1,??RoadBrd_ParseString_505
   \   00002EAC   0xA80A             ADD      R0,SP,#+40
   \   00002EAE   0x.... 0x....      BL       sprintf
   3177          #ifdef NUCLEO
   3178                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   3179          #else
   3180                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00002EB2   0xA90A             ADD      R1,SP,#+40
   \   00002EB4   0x2000             MOVS     R0,#+0
   \   00002EB6   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00002EBA   0x0006             MOVS     R6,R0
   3181          #endif
   3182                                  if (Status != HAL_OK)
   \   00002EBC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002EBE   0x2E00             CMP      R6,#+0
   \   00002EC0   0xD003             BEQ.N    ??RoadBrd_ParseString_506
   3183                                      return Status;
   \   00002EC2   0x0030             MOVS     R0,R6
   \   00002EC4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002EC6   0xF001 0xBD3C      B.W      ??RoadBrd_ParseString_4
   3184                                  // Build Read Calibration Dump Part II....
   3185                                  // Send string to UART..
   3186                                  sprintf( (char *)tempBffr2, "Name		        UUID		Slope		Offset\r\n" );
   \                     ??RoadBrd_ParseString_506: (+1)
   \   00002ECA   0xF8DF 0x1EF8      LDR.W    R1,??RoadBrd_ParseString_505+0x4
   \   00002ECE   0xA80A             ADD      R0,SP,#+40
   \   00002ED0   0x.... 0x....      BL       sprintf
   3187          #ifdef NUCLEO
   3188                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   3189          #else
   3190                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00002ED4   0xA90A             ADD      R1,SP,#+40
   \   00002ED6   0x2000             MOVS     R0,#+0
   \   00002ED8   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00002EDC   0x0006             MOVS     R6,R0
   3191          #endif
   3192                                  if (Status != HAL_OK)
   \   00002EDE   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002EE0   0x2E00             CMP      R6,#+0
   \   00002EE2   0xD009             BEQ.N    ??RoadBrd_ParseString_507
   3193                                      return Status;
   \   00002EE4   0x0030             MOVS     R0,R6
   \   00002EE6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002EE8   0xF001 0xBD2B      B.W      ??RoadBrd_ParseString_4
   \                     ??RoadBrd_ParseString_375:
   \   00002EEC   0x........         DC32     ?_125
   \   00002EF0   0x........         DC32     ?_24
   \   00002EF4   0x........         DC32     ?_126
   3194                                  // NOW, Build Data String..
   3195                                  for (x=0; x<CAL_LAST_VALUE; x++)
   \                     ??RoadBrd_ParseString_507: (+1)
   \   00002EF8   0x2000             MOVS     R0,#+0
   \   00002EFA   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_508: (+1)
   \   00002EFC   0x2F16             CMP      R7,#+22
   \   00002EFE   0xF280 0x8766      BGE.W    ??RoadBrd_ParseString_509
   3196                                  {
   3197                                    // Build String
   3198                                    switch(x)
   \   00002F02   0x2F00             CMP      R7,#+0
   \   00002F04   0xD036             BEQ.N    ??RoadBrd_ParseString_510
   \   00002F06   0x2F02             CMP      R7,#+2
   \   00002F08   0xF000 0x80DE      BEQ.W    ??RoadBrd_ParseString_511
   \   00002F0C   0xF0C0 0x808A      BCC.W    ??RoadBrd_ParseString_512
   \   00002F10   0x2F04             CMP      R7,#+4
   \   00002F12   0xF000 0x8183      BEQ.W    ??RoadBrd_ParseString_513
   \   00002F16   0xF0C0 0x812B      BCC.W    ??RoadBrd_ParseString_514
   \   00002F1A   0x2F06             CMP      R7,#+6
   \   00002F1C   0xF000 0x8226      BEQ.W    ??RoadBrd_ParseString_515
   \   00002F20   0xF0C0 0x81D0      BCC.W    ??RoadBrd_ParseString_516
   \   00002F24   0x2F08             CMP      R7,#+8
   \   00002F26   0xF000 0x82C9      BEQ.W    ??RoadBrd_ParseString_517
   \   00002F2A   0xF0C0 0x8273      BCC.W    ??RoadBrd_ParseString_518
   \   00002F2E   0x2F0A             CMP      R7,#+10
   \   00002F30   0xF000 0x836A      BEQ.W    ??RoadBrd_ParseString_519
   \   00002F34   0xF0C0 0x8316      BCC.W    ??RoadBrd_ParseString_520
   \   00002F38   0x2F0C             CMP      R7,#+12
   \   00002F3A   0xF000 0x8409      BEQ.W    ??RoadBrd_ParseString_521
   \   00002F3E   0xF0C0 0x83B5      BCC.W    ??RoadBrd_ParseString_522
   \   00002F42   0x2F0E             CMP      R7,#+14
   \   00002F44   0xF000 0x84A8      BEQ.W    ??RoadBrd_ParseString_523
   \   00002F48   0xF0C0 0x8454      BCC.W    ??RoadBrd_ParseString_524
   \   00002F4C   0x2F10             CMP      R7,#+16
   \   00002F4E   0xF000 0x8549      BEQ.W    ??RoadBrd_ParseString_525
   \   00002F52   0xF0C0 0x84F3      BCC.W    ??RoadBrd_ParseString_526
   \   00002F56   0x2F12             CMP      R7,#+18
   \   00002F58   0xF000 0x85E8      BEQ.W    ??RoadBrd_ParseString_527
   \   00002F5C   0xF0C0 0x8594      BCC.W    ??RoadBrd_ParseString_528
   \   00002F60   0x2F14             CMP      R7,#+20
   \   00002F62   0xF000 0x8687      BEQ.W    ??RoadBrd_ParseString_529
   \   00002F66   0xF0C0 0x8631      BCC.W    ??RoadBrd_ParseString_530
   \   00002F6A   0x2F15             CMP      R7,#+21
   \   00002F6C   0xF000 0x86D4      BEQ.W    ??RoadBrd_ParseString_531
   \   00002F70   0xF000 0xBF19      B.W      ??RoadBrd_ParseString_532
   3199                                    {
   3200                                      case CAL_SHNT_VLTG: //CAL_SHNT_VLTG Values
   3201                                        // Is this a BLE Operation?
   3202                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_510: (+1)
   \   00002F74   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002F76   0x2D00             CMP      R5,#+0
   \   00002F78   0xD024             BEQ.N    ??RoadBrd_ParseString_533
   3203                                        {
   3204                                          // Yes...Build and Send BLE Response NOW.
   3205                                          sprintf( (char *)tempBffr2, "%s:0002//%1.4f//%2.3f//", 
   3206                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3207                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3208                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00002F7A   0x0038             MOVS     R0,R7
   \   00002F7C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002F7E   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00002F82   0x4683             MOV      R11,R0
   \   00002F84   0x0038             MOVS     R0,R7
   \   00002F86   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002F88   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00002F8C   0x4681             MOV      R9,R0
   \   00002F8E   0x0038             MOVS     R0,R7
   \   00002F90   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002F92   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00002F96   0x4682             MOV      R10,R0
   \   00002F98   0x4658             MOV      R0,R11
   \   00002F9A   0x.... 0x....      BL       __aeabi_f2d
   \   00002F9E   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00002FA2   0x4648             MOV      R0,R9
   \   00002FA4   0x.... 0x....      BL       __aeabi_f2d
   \   00002FA8   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00002FAC   0x4652             MOV      R2,R10
   \   00002FAE   0xF8DF 0x1EE4      LDR.W    R1,??RoadBrd_ParseString_534
   \   00002FB2   0xA80A             ADD      R0,SP,#+40
   \   00002FB4   0x.... 0x....      BL       sprintf
   3209                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002FB8   0xA80A             ADD      R0,SP,#+40
   \   00002FBA   0x.... 0x....      BL       strlen
   \   00002FBE   0xA90A             ADD      R1,SP,#+40
   \   00002FC0   0x.... 0x....      BL       BGM111_Transmit
   3210                                        }
   3211                                        sprintf( (char *)tempBffr2, "%s	0002		%1.4f		%2.3f\r\n", 
   3212                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3213                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3214                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_533: (+1)
   \   00002FC4   0x0038             MOVS     R0,R7
   \   00002FC6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002FC8   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00002FCC   0x4683             MOV      R11,R0
   \   00002FCE   0x0038             MOVS     R0,R7
   \   00002FD0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002FD2   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00002FD6   0x4681             MOV      R9,R0
   \   00002FD8   0x0038             MOVS     R0,R7
   \   00002FDA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002FDC   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00002FE0   0x4682             MOV      R10,R0
   \   00002FE2   0x4658             MOV      R0,R11
   \   00002FE4   0x.... 0x....      BL       __aeabi_f2d
   \   00002FE8   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00002FEC   0x4648             MOV      R0,R9
   \   00002FEE   0x.... 0x....      BL       __aeabi_f2d
   \   00002FF2   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00002FF6   0x4652             MOV      R2,R10
   \   00002FF8   0xF8DF 0x1EF4      LDR.W    R1,??RoadBrd_ParseString_535
   \   00002FFC   0xA80A             ADD      R0,SP,#+40
   \   00002FFE   0x.... 0x....      BL       sprintf
   3215                                        break;
   \   00003002   0xF000 0xBED0      B.W      ??RoadBrd_ParseString_532
   \   00003006   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_377:
   \   00003008   0x........         DC32     ?_127
   \   0000300C   0x........         DC32     ?_128
   \   00003010   0x........         DC32     ?_129
   \   00003014   0x........         DC32     ?_130
   \   00003018   0x........         DC32     ?_131
   \   0000301C   0x........         DC32     ?_132
   \   00003020   0x........         DC32     ?_133
   3216                                      case CAL_CURRENT: //CAL_CURRENT Values
   3217                                        // Is this a BLE Operation?
   3218                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_512: (+1)
   \   00003024   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003026   0x2D00             CMP      R5,#+0
   \   00003028   0xD024             BEQ.N    ??RoadBrd_ParseString_536
   3219                                        {
   3220                                          // Yes...Build and Send BLE Response NOW.
   3221                                          sprintf( (char *)tempBffr2, "%s:0004//%1.4f//%2.3f//", 
   3222                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3223                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3224                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   0000302A   0x0038             MOVS     R0,R7
   \   0000302C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000302E   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003032   0x4683             MOV      R11,R0
   \   00003034   0x0038             MOVS     R0,R7
   \   00003036   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003038   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   0000303C   0x4681             MOV      R9,R0
   \   0000303E   0x0038             MOVS     R0,R7
   \   00003040   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003042   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003046   0x4682             MOV      R10,R0
   \   00003048   0x4658             MOV      R0,R11
   \   0000304A   0x.... 0x....      BL       __aeabi_f2d
   \   0000304E   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003052   0x4648             MOV      R0,R9
   \   00003054   0x.... 0x....      BL       __aeabi_f2d
   \   00003058   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000305C   0x4652             MOV      R2,R10
   \   0000305E   0xF8DF 0x1EF8      LDR.W    R1,??RoadBrd_ParseString_537
   \   00003062   0xA80A             ADD      R0,SP,#+40
   \   00003064   0x.... 0x....      BL       sprintf
   3225                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003068   0xA80A             ADD      R0,SP,#+40
   \   0000306A   0x.... 0x....      BL       strlen
   \   0000306E   0xA90A             ADD      R1,SP,#+40
   \   00003070   0x.... 0x....      BL       BGM111_Transmit
   3226                                        }
   3227                                        sprintf( (char *)tempBffr2, "%s	        0004		%1.4f		%2.3f\r\n", 
   3228                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3229                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3230                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_536: (+1)
   \   00003074   0x0038             MOVS     R0,R7
   \   00003076   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003078   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   0000307C   0x4683             MOV      R11,R0
   \   0000307E   0x0038             MOVS     R0,R7
   \   00003080   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003082   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003086   0x4681             MOV      R9,R0
   \   00003088   0x0038             MOVS     R0,R7
   \   0000308A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000308C   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003090   0x4682             MOV      R10,R0
   \   00003092   0x4658             MOV      R0,R11
   \   00003094   0x.... 0x....      BL       __aeabi_f2d
   \   00003098   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   0000309C   0x4648             MOV      R0,R9
   \   0000309E   0x.... 0x....      BL       __aeabi_f2d
   \   000030A2   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000030A6   0x4652             MOV      R2,R10
   \   000030A8   0xF8DF 0x1EE4      LDR.W    R1,??RoadBrd_ParseString_538
   \   000030AC   0xA80A             ADD      R0,SP,#+40
   \   000030AE   0x.... 0x....      BL       sprintf
   3231                                        break;
   \   000030B2   0xF000 0xBE78      B.W      ??RoadBrd_ParseString_532
   \   000030B6   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_383:
   \   000030B8   0x........         DC32     ?_134
   \   000030BC   0x........         DC32     ?_135
   \   000030C0   0x........         DC32     ?_136
   \   000030C4   0x........         DC32     ?_137
   3232                                      case CAL_POWER: //CAL_POWER Values
   3233                                        // Is this a BLE Operation?
   3234                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_511: (+1)
   \   000030C8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000030CA   0x2D00             CMP      R5,#+0
   \   000030CC   0xD024             BEQ.N    ??RoadBrd_ParseString_539
   3235                                        {
   3236                                          // Yes...Build and Send BLE Response NOW.
   3237                                          sprintf( (char *)tempBffr2, "%s:0006//%1.4f//%2.3f//", 
   3238                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3239                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3240                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   000030CE   0x0038             MOVS     R0,R7
   \   000030D0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000030D2   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000030D6   0x4683             MOV      R11,R0
   \   000030D8   0x0038             MOVS     R0,R7
   \   000030DA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000030DC   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000030E0   0x4681             MOV      R9,R0
   \   000030E2   0x0038             MOVS     R0,R7
   \   000030E4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000030E6   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000030EA   0x4682             MOV      R10,R0
   \   000030EC   0x4658             MOV      R0,R11
   \   000030EE   0x.... 0x....      BL       __aeabi_f2d
   \   000030F2   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000030F6   0x4648             MOV      R0,R9
   \   000030F8   0x.... 0x....      BL       __aeabi_f2d
   \   000030FC   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003100   0x4652             MOV      R2,R10
   \   00003102   0xF8DF 0x1EC8      LDR.W    R1,??RoadBrd_ParseString_540
   \   00003106   0xA80A             ADD      R0,SP,#+40
   \   00003108   0x.... 0x....      BL       sprintf
   3241                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000310C   0xA80A             ADD      R0,SP,#+40
   \   0000310E   0x.... 0x....      BL       strlen
   \   00003112   0xA90A             ADD      R1,SP,#+40
   \   00003114   0x.... 0x....      BL       BGM111_Transmit
   3242                                        }
   3243                                        sprintf( (char *)tempBffr2, "%s	0006		%1.4f		%2.3f\r\n", 
   3244                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3245                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3246                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_539: (+1)
   \   00003118   0x0038             MOVS     R0,R7
   \   0000311A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000311C   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003120   0x4683             MOV      R11,R0
   \   00003122   0x0038             MOVS     R0,R7
   \   00003124   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003126   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   0000312A   0x4681             MOV      R9,R0
   \   0000312C   0x0038             MOVS     R0,R7
   \   0000312E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003130   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003134   0x4682             MOV      R10,R0
   \   00003136   0x4658             MOV      R0,R11
   \   00003138   0x.... 0x....      BL       __aeabi_f2d
   \   0000313C   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003140   0x4648             MOV      R0,R9
   \   00003142   0x.... 0x....      BL       __aeabi_f2d
   \   00003146   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000314A   0x4652             MOV      R2,R10
   \   0000314C   0xF8DF 0x1ED8      LDR.W    R1,??RoadBrd_ParseString_541
   \   00003150   0xA80A             ADD      R0,SP,#+40
   \   00003152   0x.... 0x....      BL       sprintf
   3247                                        break;
   \   00003156   0xF000 0xBE26      B.W      ??RoadBrd_ParseString_532
   \   0000315A   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_393:
   \   0000315C   0x........         DC32     ?_138
   \   00003160   0x........         DC32     ?_139
   \   00003164   0x........         DC32     ?_140
   \   00003168   0x........         DC32     ?_141
   \   0000316C   0x........         DC32     ?_142
   3248                                      case CAL_VOLTAGE: //CAL_VOLTAGE Values
   3249                                        // Is this a BLE Operation?
   3250                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_514: (+1)
   \   00003170   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003172   0x2D00             CMP      R5,#+0
   \   00003174   0xD024             BEQ.N    ??RoadBrd_ParseString_542
   3251                                        {
   3252                                          // Yes...Build and Send BLE Response NOW.
   3253                                          sprintf( (char *)tempBffr2, "%s:0008//%1.4f//%2.3f//", 
   3254                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3255                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3256                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003176   0x0038             MOVS     R0,R7
   \   00003178   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000317A   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   0000317E   0x4683             MOV      R11,R0
   \   00003180   0x0038             MOVS     R0,R7
   \   00003182   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003184   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003188   0x4681             MOV      R9,R0
   \   0000318A   0x0038             MOVS     R0,R7
   \   0000318C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000318E   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003192   0x4682             MOV      R10,R0
   \   00003194   0x4658             MOV      R0,R11
   \   00003196   0x.... 0x....      BL       __aeabi_f2d
   \   0000319A   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   0000319E   0x4648             MOV      R0,R9
   \   000031A0   0x.... 0x....      BL       __aeabi_f2d
   \   000031A4   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000031A8   0x4652             MOV      R2,R10
   \   000031AA   0xF8DF 0x1E80      LDR.W    R1,??RoadBrd_ParseString_541+0x4
   \   000031AE   0xA80A             ADD      R0,SP,#+40
   \   000031B0   0x.... 0x....      BL       sprintf
   3257                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000031B4   0xA80A             ADD      R0,SP,#+40
   \   000031B6   0x.... 0x....      BL       strlen
   \   000031BA   0xA90A             ADD      R1,SP,#+40
   \   000031BC   0x.... 0x....      BL       BGM111_Transmit
   3258                                        }
   3259                                        sprintf( (char *)tempBffr2, "%s	        0008		%1.4f		%2.3f\r\n", 
   3260                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3261                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3262                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_542: (+1)
   \   000031C0   0x0038             MOVS     R0,R7
   \   000031C2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000031C4   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000031C8   0x4683             MOV      R11,R0
   \   000031CA   0x0038             MOVS     R0,R7
   \   000031CC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000031CE   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000031D2   0x4681             MOV      R9,R0
   \   000031D4   0x0038             MOVS     R0,R7
   \   000031D6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000031D8   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000031DC   0x4682             MOV      R10,R0
   \   000031DE   0x4658             MOV      R0,R11
   \   000031E0   0x.... 0x....      BL       __aeabi_f2d
   \   000031E4   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000031E8   0x4648             MOV      R0,R9
   \   000031EA   0x.... 0x....      BL       __aeabi_f2d
   \   000031EE   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000031F2   0x4652             MOV      R2,R10
   \   000031F4   0xF8DF 0x1E38      LDR.W    R1,??RoadBrd_ParseString_541+0x8
   \   000031F8   0xA80A             ADD      R0,SP,#+40
   \   000031FA   0x.... 0x....      BL       sprintf
   3263                                        break;
   \   000031FE   0xF000 0xBDD2      B.W      ??RoadBrd_ParseString_532
   \   00003202   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_398:
   \   00003204   0x........         DC32     ?_143
   \   00003208   0x........         DC32     ?_144
   \   0000320C   0x........         DC32     ?_145
   \   00003210   0x........         DC32     ?_146
   \   00003214   0x........         DC32     ?_147
   \   00003218   0x........         DC32     ?_148
   3264                                      case CAL_TEMPC: //CAL_TEMPC Values
   3265                                        // Is this a BLE Operation?
   3266                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_513: (+1)
   \   0000321C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000321E   0x2D00             CMP      R5,#+0
   \   00003220   0xD024             BEQ.N    ??RoadBrd_ParseString_543
   3267                                        {
   3268                                          // Yes...Build and Send BLE Response NOW.
   3269                                          sprintf( (char *)tempBffr2, "%s:000A//%1.4f//%2.3f//", 
   3270                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3271                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3272                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003222   0x0038             MOVS     R0,R7
   \   00003224   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003226   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   0000322A   0x4683             MOV      R11,R0
   \   0000322C   0x0038             MOVS     R0,R7
   \   0000322E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003230   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003234   0x4681             MOV      R9,R0
   \   00003236   0x0038             MOVS     R0,R7
   \   00003238   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000323A   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   0000323E   0x4682             MOV      R10,R0
   \   00003240   0x4658             MOV      R0,R11
   \   00003242   0x.... 0x....      BL       __aeabi_f2d
   \   00003246   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   0000324A   0x4648             MOV      R0,R9
   \   0000324C   0x.... 0x....      BL       __aeabi_f2d
   \   00003250   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003254   0x4652             MOV      R2,R10
   \   00003256   0xF8DF 0x1E88      LDR.W    R1,??RoadBrd_ParseString_544
   \   0000325A   0xA80A             ADD      R0,SP,#+40
   \   0000325C   0x.... 0x....      BL       sprintf
   3273                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003260   0xA80A             ADD      R0,SP,#+40
   \   00003262   0x.... 0x....      BL       strlen
   \   00003266   0xA90A             ADD      R1,SP,#+40
   \   00003268   0x.... 0x....      BL       BGM111_Transmit
   3274                                        }
   3275                                        sprintf( (char *)tempBffr2, "%s	000A		%1.4f		%2.3f\r\n", 
   3276                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3277                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3278                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_543: (+1)
   \   0000326C   0x0038             MOVS     R0,R7
   \   0000326E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003270   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003274   0x4683             MOV      R11,R0
   \   00003276   0x0038             MOVS     R0,R7
   \   00003278   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000327A   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   0000327E   0x4681             MOV      R9,R0
   \   00003280   0x0038             MOVS     R0,R7
   \   00003282   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003284   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003288   0x4682             MOV      R10,R0
   \   0000328A   0x4658             MOV      R0,R11
   \   0000328C   0x.... 0x....      BL       __aeabi_f2d
   \   00003290   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003294   0x4648             MOV      R0,R9
   \   00003296   0x.... 0x....      BL       __aeabi_f2d
   \   0000329A   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000329E   0x4652             MOV      R2,R10
   \   000032A0   0xF8DF 0x1E9C      LDR.W    R1,??RoadBrd_ParseString_545
   \   000032A4   0xA80A             ADD      R0,SP,#+40
   \   000032A6   0x.... 0x....      BL       sprintf
   3279                                        break;
   \   000032AA   0xF000 0xBD7C      B.W      ??RoadBrd_ParseString_532
   \   000032AE   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_404:
   \   000032B0   0x........         DC32     ?_149
   \   000032B4   0x........         DC32     ?_150
   \   000032B8   0x........         DC32     ?_151
   \   000032BC   0x........         DC32     ?_152
   \   000032C0   0x........         DC32     ?_153
   3280                                      case CAL_TEMPF: //CAL_TEMPF Values
   3281                                        // Is this a BLE Operation?
   3282                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_516: (+1)
   \   000032C4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000032C6   0x2D00             CMP      R5,#+0
   \   000032C8   0xD024             BEQ.N    ??RoadBrd_ParseString_546
   3283                                        {
   3284                                          // Yes...Build and Send BLE Response NOW.
   3285                                          sprintf( (char *)tempBffr2, "%s:000B//%1.4f//%2.3f//", 
   3286                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3287                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3288                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   000032CA   0x0038             MOVS     R0,R7
   \   000032CC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000032CE   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000032D2   0x4683             MOV      R11,R0
   \   000032D4   0x0038             MOVS     R0,R7
   \   000032D6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000032D8   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000032DC   0x4681             MOV      R9,R0
   \   000032DE   0x0038             MOVS     R0,R7
   \   000032E0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000032E2   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000032E6   0x4682             MOV      R10,R0
   \   000032E8   0x4658             MOV      R0,R11
   \   000032EA   0x.... 0x....      BL       __aeabi_f2d
   \   000032EE   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000032F2   0x4648             MOV      R0,R9
   \   000032F4   0x.... 0x....      BL       __aeabi_f2d
   \   000032F8   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000032FC   0x4652             MOV      R2,R10
   \   000032FE   0xF8DF 0x1E44      LDR.W    R1,??RoadBrd_ParseString_545+0x4
   \   00003302   0xA80A             ADD      R0,SP,#+40
   \   00003304   0x.... 0x....      BL       sprintf
   3289                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003308   0xA80A             ADD      R0,SP,#+40
   \   0000330A   0x.... 0x....      BL       strlen
   \   0000330E   0xA90A             ADD      R1,SP,#+40
   \   00003310   0x.... 0x....      BL       BGM111_Transmit
   3290                                        }
   3291                                        sprintf( (char *)tempBffr2, "%s	000B		%1.4f		%2.3f\r\n", 
   3292                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3293                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3294                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_546: (+1)
   \   00003314   0x0038             MOVS     R0,R7
   \   00003316   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003318   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   0000331C   0x4683             MOV      R11,R0
   \   0000331E   0x0038             MOVS     R0,R7
   \   00003320   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003322   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003326   0x4681             MOV      R9,R0
   \   00003328   0x0038             MOVS     R0,R7
   \   0000332A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000332C   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003330   0x4682             MOV      R10,R0
   \   00003332   0x4658             MOV      R0,R11
   \   00003334   0x.... 0x....      BL       __aeabi_f2d
   \   00003338   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   0000333C   0x4648             MOV      R0,R9
   \   0000333E   0x.... 0x....      BL       __aeabi_f2d
   \   00003342   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003346   0x4652             MOV      R2,R10
   \   00003348   0xF8DF 0x1DFC      LDR.W    R1,??RoadBrd_ParseString_545+0x8
   \   0000334C   0xA80A             ADD      R0,SP,#+40
   \   0000334E   0x.... 0x....      BL       sprintf
   3295                                        break;
   \   00003352   0xF000 0xBD28      B.W      ??RoadBrd_ParseString_532
   \   00003356   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_410:
   \   00003358   0x........         DC32     ?_154
   \   0000335C   0x........         DC32     ?_155
   \   00003360   0x........         DC32     ?_156
   \   00003364   0x........         DC32     ?_157
   \   00003368   0x........         DC32     ?_158
   3296                                      case CAL_PRESSURE: //CAL_PRESSURE Values
   3297                                        // Is this a BLE Operation?
   3298                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_515: (+1)
   \   0000336C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000336E   0x2D00             CMP      R5,#+0
   \   00003370   0xD024             BEQ.N    ??RoadBrd_ParseString_547
   3299                                        {
   3300                                          // Yes...Build and Send BLE Response NOW.
   3301                                          sprintf( (char *)tempBffr2, "%s:0011//%1.4f//%2.3f//", 
   3302                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3303                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3304                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003372   0x0038             MOVS     R0,R7
   \   00003374   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003376   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   0000337A   0x4683             MOV      R11,R0
   \   0000337C   0x0038             MOVS     R0,R7
   \   0000337E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003380   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003384   0x4681             MOV      R9,R0
   \   00003386   0x0038             MOVS     R0,R7
   \   00003388   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000338A   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   0000338E   0x4682             MOV      R10,R0
   \   00003390   0x4658             MOV      R0,R11
   \   00003392   0x.... 0x....      BL       __aeabi_f2d
   \   00003396   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   0000339A   0x4648             MOV      R0,R9
   \   0000339C   0x.... 0x....      BL       __aeabi_f2d
   \   000033A0   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000033A4   0x4652             MOV      R2,R10
   \   000033A6   0xF8DF 0x1EAC      LDR.W    R1,??RoadBrd_ParseString_548
   \   000033AA   0xA80A             ADD      R0,SP,#+40
   \   000033AC   0x.... 0x....      BL       sprintf
   3305                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000033B0   0xA80A             ADD      R0,SP,#+40
   \   000033B2   0x.... 0x....      BL       strlen
   \   000033B6   0xA90A             ADD      R1,SP,#+40
   \   000033B8   0x.... 0x....      BL       BGM111_Transmit
   3306                                        }
   3307                                        sprintf( (char *)tempBffr2, "%s	0011		%1.4f		%2.3f\r\n", 
   3308                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3309                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3310                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_547: (+1)
   \   000033BC   0x0038             MOVS     R0,R7
   \   000033BE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000033C0   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000033C4   0x4683             MOV      R11,R0
   \   000033C6   0x0038             MOVS     R0,R7
   \   000033C8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000033CA   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000033CE   0x4681             MOV      R9,R0
   \   000033D0   0x0038             MOVS     R0,R7
   \   000033D2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000033D4   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000033D8   0x4682             MOV      R10,R0
   \   000033DA   0x4658             MOV      R0,R11
   \   000033DC   0x.... 0x....      BL       __aeabi_f2d
   \   000033E0   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000033E4   0x4648             MOV      R0,R9
   \   000033E6   0x.... 0x....      BL       __aeabi_f2d
   \   000033EA   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000033EE   0x4652             MOV      R2,R10
   \   000033F0   0xF8DF 0x1E64      LDR.W    R1,??RoadBrd_ParseString_548+0x4
   \   000033F4   0xA80A             ADD      R0,SP,#+40
   \   000033F6   0x.... 0x....      BL       sprintf
   3311                                        break;
   \   000033FA   0xF000 0xBCD4      B.W      ??RoadBrd_ParseString_532
   \   000033FE   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_415:
   \   00003400   0x........         DC32     ?_159
   \   00003404   0x........         DC32     ?_160
   \   00003408   0x........         DC32     ?_161
   \   0000340C   0x........         DC32     ?_162
   \   00003410   0x........         DC32     ?_163
   3312                                      case CAL_HUMIDITY: //CAL_HUMIDITY Values
   3313                                        // Is this a BLE Operation?
   3314                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_518: (+1)
   \   00003414   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003416   0x2D00             CMP      R5,#+0
   \   00003418   0xD024             BEQ.N    ??RoadBrd_ParseString_549
   3315                                        {
   3316                                          // Yes...Build and Send BLE Response NOW.
   3317                                          sprintf( (char *)tempBffr2, "%s:0030//%1.4f//%2.3f//", 
   3318                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3319                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3320                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   0000341A   0x0038             MOVS     R0,R7
   \   0000341C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000341E   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003422   0x4683             MOV      R11,R0
   \   00003424   0x0038             MOVS     R0,R7
   \   00003426   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003428   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   0000342C   0x4681             MOV      R9,R0
   \   0000342E   0x0038             MOVS     R0,R7
   \   00003430   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003432   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003436   0x4682             MOV      R10,R0
   \   00003438   0x4658             MOV      R0,R11
   \   0000343A   0x.... 0x....      BL       __aeabi_f2d
   \   0000343E   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003442   0x4648             MOV      R0,R9
   \   00003444   0x.... 0x....      BL       __aeabi_f2d
   \   00003448   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000344C   0x4652             MOV      R2,R10
   \   0000344E   0xF8DF 0x1E6C      LDR.W    R1,??RoadBrd_ParseString_550
   \   00003452   0xA80A             ADD      R0,SP,#+40
   \   00003454   0x.... 0x....      BL       sprintf
   3321                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003458   0xA80A             ADD      R0,SP,#+40
   \   0000345A   0x.... 0x....      BL       strlen
   \   0000345E   0xA90A             ADD      R1,SP,#+40
   \   00003460   0x.... 0x....      BL       BGM111_Transmit
   3322                                        }
   3323                                        sprintf( (char *)tempBffr2, "%s	0030		%1.4f		%2.3f\r\n", 
   3324                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3325                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3326                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_549: (+1)
   \   00003464   0x0038             MOVS     R0,R7
   \   00003466   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003468   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   0000346C   0x4683             MOV      R11,R0
   \   0000346E   0x0038             MOVS     R0,R7
   \   00003470   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003472   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003476   0x4681             MOV      R9,R0
   \   00003478   0x0038             MOVS     R0,R7
   \   0000347A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000347C   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003480   0x4682             MOV      R10,R0
   \   00003482   0x4658             MOV      R0,R11
   \   00003484   0x.... 0x....      BL       __aeabi_f2d
   \   00003488   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   0000348C   0x4648             MOV      R0,R9
   \   0000348E   0x.... 0x....      BL       __aeabi_f2d
   \   00003492   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003496   0x4652             MOV      R2,R10
   \   00003498   0xF8DF 0x1E70      LDR.W    R1,??RoadBrd_ParseString_551
   \   0000349C   0xA80A             ADD      R0,SP,#+40
   \   0000349E   0x.... 0x....      BL       sprintf
   3327                                        break;
   \   000034A2   0xF000 0xBC80      B.W      ??RoadBrd_ParseString_532
   \   000034A6   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_423:
   \   000034A8   0x........         DC32     ?_164
   \   000034AC   0x........         DC32     ?_165
   \   000034B0   0x........         DC32     ?_166
   \   000034B4   0x........         DC32     ?_167
   \   000034B8   0x........         DC32     ?_168
   3328                                      case CAL_HUM_TEMPC: //CAL_HUM_TEMPC Values
   3329                                        // Is this a BLE Operation?
   3330                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_517: (+1)
   \   000034BC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000034BE   0x2D00             CMP      R5,#+0
   \   000034C0   0xD024             BEQ.N    ??RoadBrd_ParseString_552
   3331                                        {
   3332                                          // Yes...Build and Send BLE Response NOW.
   3333                                          sprintf( (char *)tempBffr2, "%s:0032//%1.4f//%2.3f//", 
   3334                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3335                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3336                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   000034C2   0x0038             MOVS     R0,R7
   \   000034C4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000034C6   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000034CA   0x4683             MOV      R11,R0
   \   000034CC   0x0038             MOVS     R0,R7
   \   000034CE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000034D0   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000034D4   0x4681             MOV      R9,R0
   \   000034D6   0x0038             MOVS     R0,R7
   \   000034D8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000034DA   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000034DE   0x4682             MOV      R10,R0
   \   000034E0   0x4658             MOV      R0,R11
   \   000034E2   0x.... 0x....      BL       __aeabi_f2d
   \   000034E6   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000034EA   0x4648             MOV      R0,R9
   \   000034EC   0x.... 0x....      BL       __aeabi_f2d
   \   000034F0   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000034F4   0x4652             MOV      R2,R10
   \   000034F6   0xF8DF 0x1E74      LDR.W    R1,??RoadBrd_ParseString_553
   \   000034FA   0xA80A             ADD      R0,SP,#+40
   \   000034FC   0x.... 0x....      BL       sprintf
   3337                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003500   0xA80A             ADD      R0,SP,#+40
   \   00003502   0x.... 0x....      BL       strlen
   \   00003506   0xA90A             ADD      R1,SP,#+40
   \   00003508   0x.... 0x....      BL       BGM111_Transmit
   3338                                        }
   3339                                        sprintf( (char *)tempBffr2, "%s	0032		%1.4f		%2.3f\r\n", 
   3340                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3341                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3342                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_552: (+1)
   \   0000350C   0x0038             MOVS     R0,R7
   \   0000350E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003510   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003514   0x4683             MOV      R11,R0
   \   00003516   0x0038             MOVS     R0,R7
   \   00003518   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000351A   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   0000351E   0x4681             MOV      R9,R0
   \   00003520   0x0038             MOVS     R0,R7
   \   00003522   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003524   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003528   0x4682             MOV      R10,R0
   \   0000352A   0x4658             MOV      R0,R11
   \   0000352C   0x.... 0x....      BL       __aeabi_f2d
   \   00003530   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003534   0x4648             MOV      R0,R9
   \   00003536   0x.... 0x....      BL       __aeabi_f2d
   \   0000353A   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000353E   0x4652             MOV      R2,R10
   \   00003540   0xF8DF 0x1E2C      LDR.W    R1,??RoadBrd_ParseString_553+0x4
   \   00003544   0xA80A             ADD      R0,SP,#+40
   \   00003546   0x.... 0x....      BL       sprintf
   3343                                        break;
   \   0000354A   0xF000 0xBC2C      B.W      ??RoadBrd_ParseString_532
   \   0000354E   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_428:
   \   00003550   0x........         DC32     ?_169
   \   00003554   0x........         DC32     ?_170
   \   00003558   0x........         DC32     ?_171
   \   0000355C   0x........         DC32     ?_172
   \   00003560   0x........         DC32     ?_173
   3344                                      case CAL_HUM_TEMPF: //CAL_HUM_TEMPF Values
   3345                                        // Is this a BLE Operation?
   3346                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_520: (+1)
   \   00003564   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003566   0x2D00             CMP      R5,#+0
   \   00003568   0xD024             BEQ.N    ??RoadBrd_ParseString_554
   3347                                        {
   3348                                          // Yes...Build and Send BLE Response NOW.
   3349                                          sprintf( (char *)tempBffr2, "%s:0033//%1.4f//%2.3f//", 
   3350                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3351                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3352                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   0000356A   0x0038             MOVS     R0,R7
   \   0000356C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000356E   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003572   0x4683             MOV      R11,R0
   \   00003574   0x0038             MOVS     R0,R7
   \   00003576   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003578   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   0000357C   0x4681             MOV      R9,R0
   \   0000357E   0x0038             MOVS     R0,R7
   \   00003580   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003582   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003586   0x4682             MOV      R10,R0
   \   00003588   0x4658             MOV      R0,R11
   \   0000358A   0x.... 0x....      BL       __aeabi_f2d
   \   0000358E   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003592   0x4648             MOV      R0,R9
   \   00003594   0x.... 0x....      BL       __aeabi_f2d
   \   00003598   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000359C   0x4652             MOV      R2,R10
   \   0000359E   0xF8DF 0x1DD4      LDR.W    R1,??RoadBrd_ParseString_553+0x8
   \   000035A2   0xA80A             ADD      R0,SP,#+40
   \   000035A4   0x.... 0x....      BL       sprintf
   3353                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000035A8   0xA80A             ADD      R0,SP,#+40
   \   000035AA   0x.... 0x....      BL       strlen
   \   000035AE   0xA90A             ADD      R1,SP,#+40
   \   000035B0   0x.... 0x....      BL       BGM111_Transmit
   3354                                        }
   3355                                        sprintf( (char *)tempBffr2, "%s	0033		%1.4f		%2.3f\r\n", 
   3356                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3357                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3358                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_554: (+1)
   \   000035B4   0x0038             MOVS     R0,R7
   \   000035B6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000035B8   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000035BC   0x4683             MOV      R11,R0
   \   000035BE   0x0038             MOVS     R0,R7
   \   000035C0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000035C2   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000035C6   0x4681             MOV      R9,R0
   \   000035C8   0x0038             MOVS     R0,R7
   \   000035CA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000035CC   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000035D0   0x4682             MOV      R10,R0
   \   000035D2   0x4658             MOV      R0,R11
   \   000035D4   0x.... 0x....      BL       __aeabi_f2d
   \   000035D8   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000035DC   0x4648             MOV      R0,R9
   \   000035DE   0x.... 0x....      BL       __aeabi_f2d
   \   000035E2   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000035E6   0x4652             MOV      R2,R10
   \   000035E8   0xF8DF 0x1E70      LDR.W    R1,??RoadBrd_ParseString_555
   \   000035EC   0xA80A             ADD      R0,SP,#+40
   \   000035EE   0x.... 0x....      BL       sprintf
   3359                                        break;
   \   000035F2   0xE3D8             B.N      ??RoadBrd_ParseString_532
   \                     ??RoadBrd_ParseString_434:
   \   000035F4   0x........         DC32     ?_174
   \   000035F8   0x........         DC32     ?_175
   \   000035FC   0x........         DC32     ?_176
   \   00003600   0x........         DC32     ?_177
   \   00003604   0x........         DC32     ?_178
   3360                                      case CAL_RGB_RED: //CAL_RGB_RED Values
   3361                                        // Is this a BLE Operation?
   3362                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_519: (+1)
   \   00003608   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000360A   0x2D00             CMP      R5,#+0
   \   0000360C   0xD024             BEQ.N    ??RoadBrd_ParseString_556
   3363                                        {
   3364                                          // Yes...Build and Send BLE Response NOW.
   3365                                          sprintf( (char *)tempBffr2, "%s:000D//%1.4f//%2.3f//", 
   3366                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3367                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3368                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   0000360E   0x0038             MOVS     R0,R7
   \   00003610   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003612   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003616   0x4683             MOV      R11,R0
   \   00003618   0x0038             MOVS     R0,R7
   \   0000361A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000361C   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003620   0x4681             MOV      R9,R0
   \   00003622   0x0038             MOVS     R0,R7
   \   00003624   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003626   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   0000362A   0x4682             MOV      R10,R0
   \   0000362C   0x4658             MOV      R0,R11
   \   0000362E   0x.... 0x....      BL       __aeabi_f2d
   \   00003632   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003636   0x4648             MOV      R0,R9
   \   00003638   0x.... 0x....      BL       __aeabi_f2d
   \   0000363C   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003640   0x4652             MOV      R2,R10
   \   00003642   0xF8DF 0x1E1C      LDR.W    R1,??RoadBrd_ParseString_555+0x4
   \   00003646   0xA80A             ADD      R0,SP,#+40
   \   00003648   0x.... 0x....      BL       sprintf
   3369                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000364C   0xA80A             ADD      R0,SP,#+40
   \   0000364E   0x.... 0x....      BL       strlen
   \   00003652   0xA90A             ADD      R1,SP,#+40
   \   00003654   0x.... 0x....      BL       BGM111_Transmit
   3370                                        }
   3371                                        sprintf( (char *)tempBffr2, "%s	        000D		%1.4f		%2.3f\r\n", 
   3372                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3373                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3374                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_556: (+1)
   \   00003658   0x0038             MOVS     R0,R7
   \   0000365A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000365C   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003660   0x4683             MOV      R11,R0
   \   00003662   0x0038             MOVS     R0,R7
   \   00003664   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003666   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   0000366A   0x4681             MOV      R9,R0
   \   0000366C   0x0038             MOVS     R0,R7
   \   0000366E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003670   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003674   0x4682             MOV      R10,R0
   \   00003676   0x4658             MOV      R0,R11
   \   00003678   0x.... 0x....      BL       __aeabi_f2d
   \   0000367C   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003680   0x4648             MOV      R0,R9
   \   00003682   0x.... 0x....      BL       __aeabi_f2d
   \   00003686   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000368A   0x4652             MOV      R2,R10
   \   0000368C   0xF8DF 0x1E44      LDR.W    R1,??RoadBrd_ParseString_557
   \   00003690   0xA80A             ADD      R0,SP,#+40
   \   00003692   0x.... 0x....      BL       sprintf
   3375                                        break;
   \   00003696   0xE386             B.N      ??RoadBrd_ParseString_532
   \                     ??RoadBrd_ParseString_439:
   \   00003698   0x........         DC32     ?_179
   \   0000369C   0x........         DC32     ?_180
   \   000036A0   0x........         DC32     ?_181
   \   000036A4   0x........         DC32     ?_182
   \   000036A8   0x........         DC32     ?_183
   3376                                      case CAL_RGB_GREEN: //CAL_RGB_GREEN Values
   3377                                        // Is this a BLE Operation?
   3378                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_522: (+1)
   \   000036AC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000036AE   0x2D00             CMP      R5,#+0
   \   000036B0   0xD024             BEQ.N    ??RoadBrd_ParseString_558
   3379                                        {
   3380                                          // Yes...Build and Send BLE Response NOW.
   3381                                          sprintf( (char *)tempBffr2, "%s:000E//%1.4f//%2.3f//", 
   3382                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3383                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3384                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   000036B2   0x0038             MOVS     R0,R7
   \   000036B4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000036B6   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000036BA   0x4683             MOV      R11,R0
   \   000036BC   0x0038             MOVS     R0,R7
   \   000036BE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000036C0   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000036C4   0x4681             MOV      R9,R0
   \   000036C6   0x0038             MOVS     R0,R7
   \   000036C8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000036CA   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000036CE   0x4682             MOV      R10,R0
   \   000036D0   0x4658             MOV      R0,R11
   \   000036D2   0x.... 0x....      BL       __aeabi_f2d
   \   000036D6   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000036DA   0x4648             MOV      R0,R9
   \   000036DC   0x.... 0x....      BL       __aeabi_f2d
   \   000036E0   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000036E4   0x4652             MOV      R2,R10
   \   000036E6   0xF8DF 0x1E48      LDR.W    R1,??RoadBrd_ParseString_559
   \   000036EA   0xA80A             ADD      R0,SP,#+40
   \   000036EC   0x.... 0x....      BL       sprintf
   3385                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000036F0   0xA80A             ADD      R0,SP,#+40
   \   000036F2   0x.... 0x....      BL       strlen
   \   000036F6   0xA90A             ADD      R1,SP,#+40
   \   000036F8   0x.... 0x....      BL       BGM111_Transmit
   3386                                        }
   3387                                        sprintf( (char *)tempBffr2, "%s	000E		%1.4f		%2.3f\r\n", 
   3388                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3389                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3390                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_558: (+1)
   \   000036FC   0x0038             MOVS     R0,R7
   \   000036FE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003700   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003704   0x4683             MOV      R11,R0
   \   00003706   0x0038             MOVS     R0,R7
   \   00003708   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000370A   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   0000370E   0x4681             MOV      R9,R0
   \   00003710   0x0038             MOVS     R0,R7
   \   00003712   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003714   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003718   0x4682             MOV      R10,R0
   \   0000371A   0x4658             MOV      R0,R11
   \   0000371C   0x.... 0x....      BL       __aeabi_f2d
   \   00003720   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003724   0x4648             MOV      R0,R9
   \   00003726   0x.... 0x....      BL       __aeabi_f2d
   \   0000372A   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000372E   0x4652             MOV      R2,R10
   \   00003730   0xF8DF 0x1E34      LDR.W    R1,??RoadBrd_ParseString_560
   \   00003734   0xA80A             ADD      R0,SP,#+40
   \   00003736   0x.... 0x....      BL       sprintf
   3391                                        break;
   \   0000373A   0xE334             B.N      ??RoadBrd_ParseString_532
   \                     ??RoadBrd_ParseString_447:
   \   0000373C   0x........         DC32     ?_184
   \   00003740   0x........         DC32     ?_185
   \   00003744   0x........         DC32     ?_186
   \   00003748   0x........         DC32     ?_187
   \   0000374C   0x........         DC32     ?_188
   3392                                      case CAL_RGB_BLUE: //CAL_RGB_BLUE Values
   3393                                        // Is this a BLE Operation?
   3394                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_521: (+1)
   \   00003750   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003752   0x2D00             CMP      R5,#+0
   \   00003754   0xD024             BEQ.N    ??RoadBrd_ParseString_561
   3395                                        {
   3396                                          // Yes...Build and Send BLE Response NOW.
   3397                                          sprintf( (char *)tempBffr2, "%s:000F//%1.4f//%2.3f//", 
   3398                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3399                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3400                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003756   0x0038             MOVS     R0,R7
   \   00003758   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000375A   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   0000375E   0x4683             MOV      R11,R0
   \   00003760   0x0038             MOVS     R0,R7
   \   00003762   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003764   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003768   0x4681             MOV      R9,R0
   \   0000376A   0x0038             MOVS     R0,R7
   \   0000376C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000376E   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003772   0x4682             MOV      R10,R0
   \   00003774   0x4658             MOV      R0,R11
   \   00003776   0x.... 0x....      BL       __aeabi_f2d
   \   0000377A   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   0000377E   0x4648             MOV      R0,R9
   \   00003780   0x.... 0x....      BL       __aeabi_f2d
   \   00003784   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003788   0x4652             MOV      R2,R10
   \   0000378A   0xF8DF 0x1E3C      LDR.W    R1,??RoadBrd_ParseString_562
   \   0000378E   0xA80A             ADD      R0,SP,#+40
   \   00003790   0x.... 0x....      BL       sprintf
   3401                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003794   0xA80A             ADD      R0,SP,#+40
   \   00003796   0x.... 0x....      BL       strlen
   \   0000379A   0xA90A             ADD      R1,SP,#+40
   \   0000379C   0x.... 0x....      BL       BGM111_Transmit
   3402                                        }
   3403                                        sprintf( (char *)tempBffr2, "%s	000F		%1.4f		%2.3f\r\n", 
   3404                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3405                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3406                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_561: (+1)
   \   000037A0   0x0038             MOVS     R0,R7
   \   000037A2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000037A4   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000037A8   0x4683             MOV      R11,R0
   \   000037AA   0x0038             MOVS     R0,R7
   \   000037AC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000037AE   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000037B2   0x4681             MOV      R9,R0
   \   000037B4   0x0038             MOVS     R0,R7
   \   000037B6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000037B8   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000037BC   0x4682             MOV      R10,R0
   \   000037BE   0x4658             MOV      R0,R11
   \   000037C0   0x.... 0x....      BL       __aeabi_f2d
   \   000037C4   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000037C8   0x4648             MOV      R0,R9
   \   000037CA   0x.... 0x....      BL       __aeabi_f2d
   \   000037CE   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000037D2   0x4652             MOV      R2,R10
   \   000037D4   0xF8DF 0x1DF4      LDR.W    R1,??RoadBrd_ParseString_562+0x4
   \   000037D8   0xA80A             ADD      R0,SP,#+40
   \   000037DA   0x.... 0x....      BL       sprintf
   3407                                        break;
   \   000037DE   0xE2E2             B.N      ??RoadBrd_ParseString_532
   \                     ??RoadBrd_ParseString_452:
   \   000037E0   0x........         DC32     ?_189
   \   000037E4   0x........         DC32     ?_190
   \   000037E8   0x........         DC32     ?_191
   \   000037EC   0x........         DC32     ?_192
   \   000037F0   0x........         DC32     ?_193
   3408                                      case CAL_THERM_C: //CAL_THERM_C Values
   3409                                        // Is this a BLE Operation?
   3410                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_524: (+1)
   \   000037F4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000037F6   0x2D00             CMP      R5,#+0
   \   000037F8   0xD024             BEQ.N    ??RoadBrd_ParseString_563
   3411                                        {
   3412                                          // Yes...Build and Send BLE Response NOW.
   3413                                          sprintf( (char *)tempBffr2, "%s:0017//%1.4f//%2.3f//", 
   3414                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3415                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3416                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   000037FA   0x0038             MOVS     R0,R7
   \   000037FC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000037FE   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003802   0x4683             MOV      R11,R0
   \   00003804   0x0038             MOVS     R0,R7
   \   00003806   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003808   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   0000380C   0x4681             MOV      R9,R0
   \   0000380E   0x0038             MOVS     R0,R7
   \   00003810   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003812   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003816   0x4682             MOV      R10,R0
   \   00003818   0x4658             MOV      R0,R11
   \   0000381A   0x.... 0x....      BL       __aeabi_f2d
   \   0000381E   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003822   0x4648             MOV      R0,R9
   \   00003824   0x.... 0x....      BL       __aeabi_f2d
   \   00003828   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000382C   0x4652             MOV      R2,R10
   \   0000382E   0xF8DF 0x1E38      LDR.W    R1,??RoadBrd_ParseString_564
   \   00003832   0xA80A             ADD      R0,SP,#+40
   \   00003834   0x.... 0x....      BL       sprintf
   3417                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003838   0xA80A             ADD      R0,SP,#+40
   \   0000383A   0x.... 0x....      BL       strlen
   \   0000383E   0xA90A             ADD      R1,SP,#+40
   \   00003840   0x.... 0x....      BL       BGM111_Transmit
   3418                                        }
   3419                                        sprintf( (char *)tempBffr2, "%s	        0017		%1.4f		%2.3f\r\n", 
   3420                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3421                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3422                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_563: (+1)
   \   00003844   0x0038             MOVS     R0,R7
   \   00003846   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003848   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   0000384C   0x4683             MOV      R11,R0
   \   0000384E   0x0038             MOVS     R0,R7
   \   00003850   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003852   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003856   0x4681             MOV      R9,R0
   \   00003858   0x0038             MOVS     R0,R7
   \   0000385A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000385C   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003860   0x4682             MOV      R10,R0
   \   00003862   0x4658             MOV      R0,R11
   \   00003864   0x.... 0x....      BL       __aeabi_f2d
   \   00003868   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   0000386C   0x4648             MOV      R0,R9
   \   0000386E   0x.... 0x....      BL       __aeabi_f2d
   \   00003872   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003876   0x4652             MOV      R2,R10
   \   00003878   0xF8DF 0x1E20      LDR.W    R1,??RoadBrd_ParseString_565
   \   0000387C   0xA80A             ADD      R0,SP,#+40
   \   0000387E   0x.... 0x....      BL       sprintf
   3423                                        break;
   \   00003882   0xE290             B.N      ??RoadBrd_ParseString_532
   \                     ??RoadBrd_ParseString_458:
   \   00003884   0x........         DC32     ?_194
   \   00003888   0x........         DC32     ?_195
   \   0000388C   0x........         DC32     ?_196
   \   00003890   0x........         DC32     ?_197
   \   00003894   0x........         DC32     ?_198
   3424                                      case CAL_ROADT_1C: //CAL_ROADT_1C Values
   3425                                        // Is this a BLE Operation?
   3426                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_523: (+1)
   \   00003898   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000389A   0x2D00             CMP      R5,#+0
   \   0000389C   0xD024             BEQ.N    ??RoadBrd_ParseString_566
   3427                                        {
   3428                                          // Yes...Build and Send BLE Response NOW.
   3429                                          sprintf( (char *)tempBffr2, "%s:0019//%1.4f//%2.3f//", 
   3430                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3431                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3432                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   0000389E   0x0038             MOVS     R0,R7
   \   000038A0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000038A2   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000038A6   0x4683             MOV      R11,R0
   \   000038A8   0x0038             MOVS     R0,R7
   \   000038AA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000038AC   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000038B0   0x4681             MOV      R9,R0
   \   000038B2   0x0038             MOVS     R0,R7
   \   000038B4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000038B6   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000038BA   0x4682             MOV      R10,R0
   \   000038BC   0x4658             MOV      R0,R11
   \   000038BE   0x.... 0x....      BL       __aeabi_f2d
   \   000038C2   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000038C6   0x4648             MOV      R0,R9
   \   000038C8   0x.... 0x....      BL       __aeabi_f2d
   \   000038CC   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000038D0   0x4652             MOV      R2,R10
   \   000038D2   0xF8DF 0x1E30      LDR.W    R1,??RoadBrd_ParseString_567
   \   000038D6   0xA80A             ADD      R0,SP,#+40
   \   000038D8   0x.... 0x....      BL       sprintf
   3433                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000038DC   0xA80A             ADD      R0,SP,#+40
   \   000038DE   0x.... 0x....      BL       strlen
   \   000038E2   0xA90A             ADD      R1,SP,#+40
   \   000038E4   0x.... 0x....      BL       BGM111_Transmit
   3434                                        }
   3435                                        sprintf( (char *)tempBffr2, "%s	0019		%1.4f		%2.3f\r\n", 
   3436                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3437                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3438                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_566: (+1)
   \   000038E8   0x0038             MOVS     R0,R7
   \   000038EA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000038EC   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000038F0   0x4683             MOV      R11,R0
   \   000038F2   0x0038             MOVS     R0,R7
   \   000038F4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000038F6   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000038FA   0x4681             MOV      R9,R0
   \   000038FC   0x0038             MOVS     R0,R7
   \   000038FE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003900   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003904   0x4682             MOV      R10,R0
   \   00003906   0x4658             MOV      R0,R11
   \   00003908   0x.... 0x....      BL       __aeabi_f2d
   \   0000390C   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003910   0x4648             MOV      R0,R9
   \   00003912   0x.... 0x....      BL       __aeabi_f2d
   \   00003916   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000391A   0x4652             MOV      R2,R10
   \   0000391C   0xF8DF 0x1E28      LDR.W    R1,??RoadBrd_ParseString_568
   \   00003920   0xA80A             ADD      R0,SP,#+40
   \   00003922   0x.... 0x....      BL       sprintf
   3439                                        break;
   \   00003926   0xE23E             B.N      ??RoadBrd_ParseString_532
   \                     ??RoadBrd_ParseString_463:
   \   00003928   0x........         DC32     ?_199
   \   0000392C   0x........         DC32     ?_200
   \   00003930   0x........         DC32     ?_201
   \   00003934   0x........         DC32     ?_202
   \   00003938   0x........         DC32     ?_203
   3440                                      case CAL_ROADT_2C: //CAL_ROADT_2C Values
   3441                                        // Is this a BLE Operation?
   3442                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_526: (+1)
   \   0000393C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000393E   0x2D00             CMP      R5,#+0
   \   00003940   0xD024             BEQ.N    ??RoadBrd_ParseString_569
   3443                                        {
   3444                                          // Yes...Build and Send BLE Response NOW.
   3445                                          sprintf( (char *)tempBffr2, "%s:001B//%1.4f//%2.3f//", 
   3446                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3447                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3448                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003942   0x0038             MOVS     R0,R7
   \   00003944   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003946   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   0000394A   0x4683             MOV      R11,R0
   \   0000394C   0x0038             MOVS     R0,R7
   \   0000394E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003950   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003954   0x4681             MOV      R9,R0
   \   00003956   0x0038             MOVS     R0,R7
   \   00003958   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000395A   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   0000395E   0x4682             MOV      R10,R0
   \   00003960   0x4658             MOV      R0,R11
   \   00003962   0x.... 0x....      BL       __aeabi_f2d
   \   00003966   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   0000396A   0x4648             MOV      R0,R9
   \   0000396C   0x.... 0x....      BL       __aeabi_f2d
   \   00003970   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003974   0x4652             MOV      R2,R10
   \   00003976   0xF8DF 0x1E34      LDR.W    R1,??RoadBrd_ParseString_570
   \   0000397A   0xA80A             ADD      R0,SP,#+40
   \   0000397C   0x.... 0x....      BL       sprintf
   3449                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003980   0xA80A             ADD      R0,SP,#+40
   \   00003982   0x.... 0x....      BL       strlen
   \   00003986   0xA90A             ADD      R1,SP,#+40
   \   00003988   0x.... 0x....      BL       BGM111_Transmit
   3450                                        }
   3451                                        sprintf( (char *)tempBffr2, "%s	001B		%1.4f		%2.3f\r\n", 
   3452                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3453                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3454                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_569: (+1)
   \   0000398C   0x0038             MOVS     R0,R7
   \   0000398E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003990   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003994   0x4683             MOV      R11,R0
   \   00003996   0x0038             MOVS     R0,R7
   \   00003998   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000399A   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   0000399E   0x4681             MOV      R9,R0
   \   000039A0   0x0038             MOVS     R0,R7
   \   000039A2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000039A4   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000039A8   0x4682             MOV      R10,R0
   \   000039AA   0x4658             MOV      R0,R11
   \   000039AC   0x.... 0x....      BL       __aeabi_f2d
   \   000039B0   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000039B4   0x4648             MOV      R0,R9
   \   000039B6   0x.... 0x....      BL       __aeabi_f2d
   \   000039BA   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000039BE   0x4652             MOV      R2,R10
   \   000039C0   0xF8DF 0x1DEC      LDR.W    R1,??RoadBrd_ParseString_570+0x4
   \   000039C4   0xA80A             ADD      R0,SP,#+40
   \   000039C6   0x.... 0x....      BL       sprintf
   3455                                        break;
   \   000039CA   0xE1EC             B.N      ??RoadBrd_ParseString_532
   \                     ??RoadBrd_ParseString_471:
   \   000039CC   0x........         DC32     ?_204
   \   000039D0   0x........         DC32     ?_205
   \   000039D4   0x........         DC32     ?_206
   \   000039D8   0x........         DC32     ?_207
   \   000039DC   0x........         DC32     ?_208
   \   000039E0   0x........         DC32     ?_209
   3456                                      case CAL_ROADT_3C: //CAL_ROADT_3C Values
   3457                                        // Is this a BLE Operation?
   3458                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_525: (+1)
   \   000039E4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000039E6   0x2D00             CMP      R5,#+0
   \   000039E8   0xD024             BEQ.N    ??RoadBrd_ParseString_571
   3459                                        {
   3460                                          // Yes...Build and Send BLE Response NOW.
   3461                                          sprintf( (char *)tempBffr2, "%s:001D//%1.4f//%2.3f//", 
   3462                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3463                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3464                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   000039EA   0x0038             MOVS     R0,R7
   \   000039EC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000039EE   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000039F2   0x4683             MOV      R11,R0
   \   000039F4   0x0038             MOVS     R0,R7
   \   000039F6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000039F8   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000039FC   0x4681             MOV      R9,R0
   \   000039FE   0x0038             MOVS     R0,R7
   \   00003A00   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003A02   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003A06   0x4682             MOV      R10,R0
   \   00003A08   0x4658             MOV      R0,R11
   \   00003A0A   0x.... 0x....      BL       __aeabi_f2d
   \   00003A0E   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003A12   0x4648             MOV      R0,R9
   \   00003A14   0x.... 0x....      BL       __aeabi_f2d
   \   00003A18   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003A1C   0x4652             MOV      R2,R10
   \   00003A1E   0xF8DF 0x1DE4      LDR.W    R1,??RoadBrd_ParseString_572
   \   00003A22   0xA80A             ADD      R0,SP,#+40
   \   00003A24   0x.... 0x....      BL       sprintf
   3465                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003A28   0xA80A             ADD      R0,SP,#+40
   \   00003A2A   0x.... 0x....      BL       strlen
   \   00003A2E   0xA90A             ADD      R1,SP,#+40
   \   00003A30   0x.... 0x....      BL       BGM111_Transmit
   3466                                        }
   3467                                        sprintf( (char *)tempBffr2, "%s	001D		%1.4f		%2.3f\r\n", 
   3468                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3469                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3470                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_571: (+1)
   \   00003A34   0x0038             MOVS     R0,R7
   \   00003A36   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003A38   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003A3C   0x4683             MOV      R11,R0
   \   00003A3E   0x0038             MOVS     R0,R7
   \   00003A40   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003A42   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003A46   0x4681             MOV      R9,R0
   \   00003A48   0x0038             MOVS     R0,R7
   \   00003A4A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003A4C   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003A50   0x4682             MOV      R10,R0
   \   00003A52   0x4658             MOV      R0,R11
   \   00003A54   0x.... 0x....      BL       __aeabi_f2d
   \   00003A58   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003A5C   0x4648             MOV      R0,R9
   \   00003A5E   0x.... 0x....      BL       __aeabi_f2d
   \   00003A62   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003A66   0x4652             MOV      R2,R10
   \   00003A68   0xF8DF 0x1DF4      LDR.W    R1,??RoadBrd_ParseString_573
   \   00003A6C   0xA80A             ADD      R0,SP,#+40
   \   00003A6E   0x.... 0x....      BL       sprintf
   3471                                        break;
   \   00003A72   0xE198             B.N      ??RoadBrd_ParseString_532
   \                     ??RoadBrd_ParseString_477:
   \   00003A74   0x........         DC32     ?_210
   \   00003A78   0x........         DC32     ?_211
   \   00003A7C   0x........         DC32     ?_212
   \   00003A80   0x........         DC32     ?_213
   \   00003A84   0x........         DC32     ?_214
   3472                                      case CAL_ROADT_4C: //CAL_ROADT_4C Values
   3473                                        // Is this a BLE Operation?
   3474                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_528: (+1)
   \   00003A88   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003A8A   0x2D00             CMP      R5,#+0
   \   00003A8C   0xD024             BEQ.N    ??RoadBrd_ParseString_574
   3475                                        {
   3476                                          // Yes...Build and Send BLE Response NOW.
   3477                                          sprintf( (char *)tempBffr2, "%s:001F//%1.4f//%2.3f//", 
   3478                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3479                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3480                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003A8E   0x0038             MOVS     R0,R7
   \   00003A90   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003A92   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003A96   0x4683             MOV      R11,R0
   \   00003A98   0x0038             MOVS     R0,R7
   \   00003A9A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003A9C   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003AA0   0x4681             MOV      R9,R0
   \   00003AA2   0x0038             MOVS     R0,R7
   \   00003AA4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003AA6   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003AAA   0x4682             MOV      R10,R0
   \   00003AAC   0x4658             MOV      R0,R11
   \   00003AAE   0x.... 0x....      BL       __aeabi_f2d
   \   00003AB2   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003AB6   0x4648             MOV      R0,R9
   \   00003AB8   0x.... 0x....      BL       __aeabi_f2d
   \   00003ABC   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003AC0   0x4652             MOV      R2,R10
   \   00003AC2   0xF8DF 0x1DE4      LDR.W    R1,??RoadBrd_ParseString_575
   \   00003AC6   0xA80A             ADD      R0,SP,#+40
   \   00003AC8   0x.... 0x....      BL       sprintf
   3481                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003ACC   0xA80A             ADD      R0,SP,#+40
   \   00003ACE   0x.... 0x....      BL       strlen
   \   00003AD2   0xA90A             ADD      R1,SP,#+40
   \   00003AD4   0x.... 0x....      BL       BGM111_Transmit
   3482                                        }
   3483                                        sprintf( (char *)tempBffr2, "%s	001F		%1.4f		%2.3f\r\n", 
   3484                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3485                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3486                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_574: (+1)
   \   00003AD8   0x0038             MOVS     R0,R7
   \   00003ADA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003ADC   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003AE0   0x4683             MOV      R11,R0
   \   00003AE2   0x0038             MOVS     R0,R7
   \   00003AE4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003AE6   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003AEA   0x4681             MOV      R9,R0
   \   00003AEC   0x0038             MOVS     R0,R7
   \   00003AEE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003AF0   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003AF4   0x4682             MOV      R10,R0
   \   00003AF6   0x4658             MOV      R0,R11
   \   00003AF8   0x.... 0x....      BL       __aeabi_f2d
   \   00003AFC   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003B00   0x4648             MOV      R0,R9
   \   00003B02   0x.... 0x....      BL       __aeabi_f2d
   \   00003B06   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003B0A   0x4652             MOV      R2,R10
   \   00003B0C   0xF8DF 0x1DC8      LDR.W    R1,??RoadBrd_ParseString_576
   \   00003B10   0xA80A             ADD      R0,SP,#+40
   \   00003B12   0x.... 0x....      BL       sprintf
   3487                                        break;
   \   00003B16   0xE146             B.N      ??RoadBrd_ParseString_532
   \                     ??RoadBrd_ParseString_482:
   \   00003B18   0x........         DC32     ?_215
   \   00003B1C   0x........         DC32     ?_216
   \   00003B20   0x........         DC32     ?_217
   \   00003B24   0x........         DC32     ?_218
   \   00003B28   0x........         DC32     ?_219
   3488                                      case CAL_ROADT_5C: //CAL_ROADT_5C Values
   3489                                        // Is this a BLE Operation?
   3490                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_527: (+1)
   \   00003B2C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003B2E   0x2D00             CMP      R5,#+0
   \   00003B30   0xD024             BEQ.N    ??RoadBrd_ParseString_577
   3491                                        {
   3492                                          // Yes...Build and Send BLE Response NOW.
   3493                                          sprintf( (char *)tempBffr2, "%s:0021//%1.4f//%2.3f//", 
   3494                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3495                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3496                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003B32   0x0038             MOVS     R0,R7
   \   00003B34   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003B36   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003B3A   0x4683             MOV      R11,R0
   \   00003B3C   0x0038             MOVS     R0,R7
   \   00003B3E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003B40   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003B44   0x4681             MOV      R9,R0
   \   00003B46   0x0038             MOVS     R0,R7
   \   00003B48   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003B4A   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003B4E   0x4682             MOV      R10,R0
   \   00003B50   0x4658             MOV      R0,R11
   \   00003B52   0x.... 0x....      BL       __aeabi_f2d
   \   00003B56   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003B5A   0x4648             MOV      R0,R9
   \   00003B5C   0x.... 0x....      BL       __aeabi_f2d
   \   00003B60   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003B64   0x4652             MOV      R2,R10
   \   00003B66   0xF8DF 0x1DB4      LDR.W    R1,??RoadBrd_ParseString_578
   \   00003B6A   0xA80A             ADD      R0,SP,#+40
   \   00003B6C   0x.... 0x....      BL       sprintf
   3497                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003B70   0xA80A             ADD      R0,SP,#+40
   \   00003B72   0x.... 0x....      BL       strlen
   \   00003B76   0xA90A             ADD      R1,SP,#+40
   \   00003B78   0x.... 0x....      BL       BGM111_Transmit
   3498                                        }
   3499                                        sprintf( (char *)tempBffr2, "%s	0021		%1.4f		%2.3f\r\n", 
   3500                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3501                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3502                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_577: (+1)
   \   00003B7C   0x0038             MOVS     R0,R7
   \   00003B7E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003B80   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003B84   0x4683             MOV      R11,R0
   \   00003B86   0x0038             MOVS     R0,R7
   \   00003B88   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003B8A   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003B8E   0x4681             MOV      R9,R0
   \   00003B90   0x0038             MOVS     R0,R7
   \   00003B92   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003B94   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003B98   0x4682             MOV      R10,R0
   \   00003B9A   0x4658             MOV      R0,R11
   \   00003B9C   0x.... 0x....      BL       __aeabi_f2d
   \   00003BA0   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003BA4   0x4648             MOV      R0,R9
   \   00003BA6   0x.... 0x....      BL       __aeabi_f2d
   \   00003BAA   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003BAE   0x4652             MOV      R2,R10
   \   00003BB0   0x.... 0x....      LDR.W    R1,??DataTable3
   \   00003BB4   0xA80A             ADD      R0,SP,#+40
   \   00003BB6   0x.... 0x....      BL       sprintf
   3503                                        break;
   \   00003BBA   0xE0F4             B.N      ??RoadBrd_ParseString_532
   \                     ??RoadBrd_ParseString_490:
   \   00003BBC   0x........         DC32     ?_220
   \   00003BC0   0x........         DC32     ?_221
   \   00003BC4   0x........         DC32     ?_222
   \   00003BC8   0x........         DC32     ?_223
   3504                                      case CAL_ROADT_6C: //CAL_ROADT_6C Values
   3505                                        // Is this a BLE Operation?
   3506                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_530: (+1)
   \   00003BCC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003BCE   0x2D00             CMP      R5,#+0
   \   00003BD0   0xD024             BEQ.N    ??RoadBrd_ParseString_579
   3507                                        {
   3508                                          // Yes...Build and Send BLE Response NOW.
   3509                                          sprintf( (char *)tempBffr2, "%s:0023//%1.4f//%2.3f//", 
   3510                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3511                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3512                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003BD2   0x0038             MOVS     R0,R7
   \   00003BD4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003BD6   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003BDA   0x4683             MOV      R11,R0
   \   00003BDC   0x0038             MOVS     R0,R7
   \   00003BDE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003BE0   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003BE4   0x4681             MOV      R9,R0
   \   00003BE6   0x0038             MOVS     R0,R7
   \   00003BE8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003BEA   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003BEE   0x4682             MOV      R10,R0
   \   00003BF0   0x4658             MOV      R0,R11
   \   00003BF2   0x.... 0x....      BL       __aeabi_f2d
   \   00003BF6   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003BFA   0x4648             MOV      R0,R9
   \   00003BFC   0x.... 0x....      BL       __aeabi_f2d
   \   00003C00   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003C04   0x4652             MOV      R2,R10
   \   00003C06   0x.... 0x....      LDR.W    R1,??DataTable3_1
   \   00003C0A   0xA80A             ADD      R0,SP,#+40
   \   00003C0C   0x.... 0x....      BL       sprintf
   3513                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003C10   0xA80A             ADD      R0,SP,#+40
   \   00003C12   0x.... 0x....      BL       strlen
   \   00003C16   0xA90A             ADD      R1,SP,#+40
   \   00003C18   0x.... 0x....      BL       BGM111_Transmit
   3514                                        }
   3515                                        sprintf( (char *)tempBffr2, "%s	0023		%1.4f		%2.3f\r\n", 
   3516                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3517                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3518                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_579: (+1)
   \   00003C1C   0x0038             MOVS     R0,R7
   \   00003C1E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003C20   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003C24   0x4683             MOV      R11,R0
   \   00003C26   0x0038             MOVS     R0,R7
   \   00003C28   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003C2A   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003C2E   0x4681             MOV      R9,R0
   \   00003C30   0x0038             MOVS     R0,R7
   \   00003C32   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003C34   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003C38   0x4682             MOV      R10,R0
   \   00003C3A   0x4658             MOV      R0,R11
   \   00003C3C   0x.... 0x....      BL       __aeabi_f2d
   \   00003C40   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003C44   0x4648             MOV      R0,R9
   \   00003C46   0x.... 0x....      BL       __aeabi_f2d
   \   00003C4A   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003C4E   0x4652             MOV      R2,R10
   \   00003C50   0x.... 0x....      LDR.W    R1,??DataTable3_2
   \   00003C54   0xA80A             ADD      R0,SP,#+40
   \   00003C56   0x.... 0x....      BL       sprintf
   3519                                        break;
   \   00003C5A   0xE0A4             B.N      ??RoadBrd_ParseString_532
   \                     ??RoadBrd_ParseString_495:
   \   00003C5C   0x........         DC32     ?_224
   \   00003C60   0x........         DC32     ?_225
   \   00003C64   0x........         DC32     ?_226
   \   00003C68   0x........         DC32     ?_227
   \   00003C6C   0x........         DC32     ?_228
   \   00003C70   0x........         DC32     ?_229
   3520                                      case CAL_ROADT_7C: //CAL_ROADT_7C Values
   3521                                        // Is this a BLE Operation?
   3522                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_529: (+1)
   \   00003C74   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003C76   0x2D00             CMP      R5,#+0
   \   00003C78   0xD024             BEQ.N    ??RoadBrd_ParseString_580
   3523                                        {
   3524                                          // Yes...Build and Send BLE Response NOW.
   3525                                          sprintf( (char *)tempBffr2, "%s:0025//%1.4f//%2.3f//", 
   3526                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3527                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3528                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003C7A   0x0038             MOVS     R0,R7
   \   00003C7C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003C7E   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003C82   0x4683             MOV      R11,R0
   \   00003C84   0x0038             MOVS     R0,R7
   \   00003C86   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003C88   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003C8C   0x4681             MOV      R9,R0
   \   00003C8E   0x0038             MOVS     R0,R7
   \   00003C90   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003C92   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003C96   0x4682             MOV      R10,R0
   \   00003C98   0x4658             MOV      R0,R11
   \   00003C9A   0x.... 0x....      BL       __aeabi_f2d
   \   00003C9E   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003CA2   0x4648             MOV      R0,R9
   \   00003CA4   0x.... 0x....      BL       __aeabi_f2d
   \   00003CA8   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003CAC   0x4652             MOV      R2,R10
   \   00003CAE   0x.... 0x....      LDR.W    R1,??DataTable3_3
   \   00003CB2   0xA80A             ADD      R0,SP,#+40
   \   00003CB4   0x.... 0x....      BL       sprintf
   3529                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003CB8   0xA80A             ADD      R0,SP,#+40
   \   00003CBA   0x.... 0x....      BL       strlen
   \   00003CBE   0xA90A             ADD      R1,SP,#+40
   \   00003CC0   0x.... 0x....      BL       BGM111_Transmit
   3530                                        }
   3531                                        sprintf( (char *)tempBffr2, "%s	0025		%1.4f		%2.3f\r\n", 
   3532                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3533                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3534                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_580: (+1)
   \   00003CC4   0x0038             MOVS     R0,R7
   \   00003CC6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003CC8   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003CCC   0x4683             MOV      R11,R0
   \   00003CCE   0x0038             MOVS     R0,R7
   \   00003CD0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003CD2   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003CD6   0x4681             MOV      R9,R0
   \   00003CD8   0x0038             MOVS     R0,R7
   \   00003CDA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003CDC   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003CE0   0x4682             MOV      R10,R0
   \   00003CE2   0x4658             MOV      R0,R11
   \   00003CE4   0x.... 0x....      BL       __aeabi_f2d
   \   00003CE8   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003CEC   0x4648             MOV      R0,R9
   \   00003CEE   0x.... 0x....      BL       __aeabi_f2d
   \   00003CF2   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003CF6   0x4652             MOV      R2,R10
   \   00003CF8   0x.... 0x....      LDR.W    R1,??DataTable3_4
   \   00003CFC   0xA80A             ADD      R0,SP,#+40
   \   00003CFE   0x.... 0x....      BL       sprintf
   3535                                        break;
   \   00003D02   0xE050             B.N      ??RoadBrd_ParseString_532
   \                     ??RoadBrd_ParseString_501:
   \   00003D04   0x........         DC32     ?_230
   \   00003D08   0x........         DC32     ?_231
   \   00003D0C   0x........         DC32     ?_232
   \   00003D10   0x........         DC32     ?_233
   \   00003D14   0x........         DC32     ?_234
   3536                                      case CAL_ROADT_8C: //CAL_ROADT_8C Values
   3537                                        // Is this a BLE Operation?
   3538                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_531: (+1)
   \   00003D18   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003D1A   0x2D00             CMP      R5,#+0
   \   00003D1C   0xD024             BEQ.N    ??RoadBrd_ParseString_581
   3539                                        {
   3540                                          // Yes...Build and Send BLE Response NOW.
   3541                                          sprintf( (char *)tempBffr2, "%s:0027//%1.4f//%2.3f//", 
   3542                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3543                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3544                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003D1E   0x0038             MOVS     R0,R7
   \   00003D20   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003D22   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003D26   0x4683             MOV      R11,R0
   \   00003D28   0x0038             MOVS     R0,R7
   \   00003D2A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003D2C   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003D30   0x4681             MOV      R9,R0
   \   00003D32   0x0038             MOVS     R0,R7
   \   00003D34   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003D36   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003D3A   0x4682             MOV      R10,R0
   \   00003D3C   0x4658             MOV      R0,R11
   \   00003D3E   0x.... 0x....      BL       __aeabi_f2d
   \   00003D42   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003D46   0x4648             MOV      R0,R9
   \   00003D48   0x.... 0x....      BL       __aeabi_f2d
   \   00003D4C   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003D50   0x4652             MOV      R2,R10
   \   00003D52   0x.... 0x....      LDR.W    R1,??DataTable3_5
   \   00003D56   0xA80A             ADD      R0,SP,#+40
   \   00003D58   0x.... 0x....      BL       sprintf
   3545                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003D5C   0xA80A             ADD      R0,SP,#+40
   \   00003D5E   0x.... 0x....      BL       strlen
   \   00003D62   0xA90A             ADD      R1,SP,#+40
   \   00003D64   0x.... 0x....      BL       BGM111_Transmit
   3546                                        }
   3547                                        sprintf( (char *)tempBffr2, "%s	0027		%1.4f		%2.3f\r\n", 
   3548                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3549                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3550                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_581: (+1)
   \   00003D68   0x0038             MOVS     R0,R7
   \   00003D6A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003D6C   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003D70   0x4683             MOV      R11,R0
   \   00003D72   0x0038             MOVS     R0,R7
   \   00003D74   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003D76   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003D7A   0x4681             MOV      R9,R0
   \   00003D7C   0x0038             MOVS     R0,R7
   \   00003D7E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003D80   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003D84   0x4682             MOV      R10,R0
   \   00003D86   0x4658             MOV      R0,R11
   \   00003D88   0x.... 0x....      BL       __aeabi_f2d
   \   00003D8C   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003D90   0x4648             MOV      R0,R9
   \   00003D92   0x.... 0x....      BL       __aeabi_f2d
   \   00003D96   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003D9A   0x4652             MOV      R2,R10
   \   00003D9C   0x.... 0x....      LDR.W    R1,??DataTable3_6
   \   00003DA0   0xA80A             ADD      R0,SP,#+40
   \   00003DA2   0x.... 0x....      BL       sprintf
   3551                                        break;
   3552                                    } // EndSwitch(x)
   3553                                    // Now Print String.
   3554          #ifdef NUCLEO
   3555                                    Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   3556          #else
   3557                                    Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \                     ??RoadBrd_ParseString_532: (+1)
   \   00003DA6   0xA90A             ADD      R1,SP,#+40
   \   00003DA8   0x2000             MOVS     R0,#+0
   \   00003DAA   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00003DAE   0x0006             MOVS     R6,R0
   3558          #endif
   3559                                    if (Status != HAL_OK)
   \   00003DB0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00003DB2   0x2E00             CMP      R6,#+0
   \   00003DB4   0xD008             BEQ.N    ??RoadBrd_ParseString_582
   3560                                      return Status;
   \   00003DB6   0x0030             MOVS     R0,R6
   \   00003DB8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003DBA   0xF000 0xBDC2      B.W      ??RoadBrd_ParseString_4
   \   00003DBE   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_505:
   \   00003DC0   0x........         DC32     ?_235
   \   00003DC4   0x........         DC32     ?_236
   3561                                  } // EndFor(x=0; x<CAL_LAST_VALUE; x++)
   \                     ??RoadBrd_ParseString_582: (+1)
   \   00003DC8   0x1C7F             ADDS     R7,R7,#+1
   \   00003DCA   0xF7FF 0xB897      B.W      ??RoadBrd_ParseString_508
   3562                                  // Is this a BLE Operation?
   3563                                  if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_509: (+1)
   \   00003DCE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003DD0   0x2D00             CMP      R5,#+0
   \   00003DD2   0xD00A             BEQ.N    ??RoadBrd_ParseString_583
   3564                                  {
   3565                                    // Yes...Build and Send BLE Response NOW.
   3566                                    strcpy( (char *)tempBffr2, "</STATUS>");
   \   00003DD4   0x.... 0x....      LDR.W    R1,??DataTable3_7
   \   00003DD8   0xA80A             ADD      R0,SP,#+40
   \   00003DDA   0x.... 0x....      BL       strcpy
   3567                                    BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003DDE   0xA80A             ADD      R0,SP,#+40
   \   00003DE0   0x.... 0x....      BL       strlen
   \   00003DE4   0xA90A             ADD      R1,SP,#+40
   \   00003DE6   0x.... 0x....      BL       BGM111_Transmit
   3568                                  }
   3569                                  sprintf( (char *)tempBffr2, "\r\n     COMPLETE.\r\n" );
   \                     ??RoadBrd_ParseString_583: (+1)
   \   00003DEA   0x.... 0x....      LDR.W    R1,??DataTable3_8
   \   00003DEE   0xA80A             ADD      R0,SP,#+40
   \   00003DF0   0x.... 0x....      BL       sprintf
   3570                                  break;
   \   00003DF4   0xE091             B.N      ??RoadBrd_ParseString_378
   3571                                  //------------------ TCT Command: Calibration Set Time Command
   3572                                case 'T':
   3573                                  // Step 1. Validate format.
   3574                                  if(tempBffr[3]!=':')
   \                     ??RoadBrd_ParseString_387: (+1)
   \   00003DF6   0x78E0             LDRB     R0,[R4, #+3]
   \   00003DF8   0x283A             CMP      R0,#+58
   \   00003DFA   0xD013             BEQ.N    ??RoadBrd_ParseString_584
   3575                                  {
   3576                                    // Is this a BLE Operation?
   3577                                    if ( BLE_Flag )
   \   00003DFC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003DFE   0x2D00             CMP      R5,#+0
   \   00003E00   0xD00A             BEQ.N    ??RoadBrd_ParseString_585
   3578                                    {
   3579                                      // Yes...Build and Send BLE Response NOW.
   3580                                      strcpy( (char *)tempBffr2, "<STATUS>CMD_TCT_SYNTAX</STATUS>");
   \   00003E02   0x.... 0x....      LDR.W    R1,??DataTable3_9
   \   00003E06   0xA80A             ADD      R0,SP,#+40
   \   00003E08   0x.... 0x....      BL       strcpy
   3581                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003E0C   0xA80A             ADD      R0,SP,#+40
   \   00003E0E   0x.... 0x....      BL       strlen
   \   00003E12   0xA90A             ADD      R1,SP,#+40
   \   00003E14   0x.... 0x....      BL       BGM111_Transmit
   3582                                    }
   3583                                    
   3584                                    strcpy( (char *)tempBffr2, "TCT SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_585: (+1)
   \   00003E18   0x.... 0x....      LDR.W    R1,??DataTable3_10
   \   00003E1C   0xA80A             ADD      R0,SP,#+40
   \   00003E1E   0x.... 0x....      BL       strcpy
   \   00003E22   0xE04C             B.N      ??RoadBrd_ParseString_586
   3585                                  } // Endif (tempBffr[3]!=':')
   3586                                  else
   3587                                  {
   3588                                    // 2. Verify if remaining string is digits
   3589                                    if (Size <= 4)
   \                     ??RoadBrd_ParseString_584: (+1)
   \   00003E24   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00003E28   0xF1B8 0x0F05      CMP      R8,#+5
   \   00003E2C   0xDA13             BGE.N    ??RoadBrd_ParseString_587
   3590                                    {
   3591                                      // Is this a BLE Operation?
   3592                                      if ( BLE_Flag )
   \   00003E2E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003E30   0x2D00             CMP      R5,#+0
   \   00003E32   0xD00A             BEQ.N    ??RoadBrd_ParseString_588
   3593                                      {
   3594                                        // Yes...Build and Send BLE Response NOW.
   3595                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_TCT_BADPARAM</STATUS>");
   \   00003E34   0x.... 0x....      LDR.W    R1,??DataTable3_11
   \   00003E38   0xA80A             ADD      R0,SP,#+40
   \   00003E3A   0x.... 0x....      BL       strcpy
   3596                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003E3E   0xA80A             ADD      R0,SP,#+40
   \   00003E40   0x.... 0x....      BL       strlen
   \   00003E44   0xA90A             ADD      R1,SP,#+40
   \   00003E46   0x.... 0x....      BL       BGM111_Transmit
   3597                                      }
   3598                                      strcpy( (char *)tempBffr2, "TCT SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_588: (+1)
   \   00003E4A   0x.... 0x....      LDR.W    R1,??DataTable4
   \   00003E4E   0xA80A             ADD      R0,SP,#+40
   \   00003E50   0x.... 0x....      BL       strcpy
   \   00003E54   0xE033             B.N      ??RoadBrd_ParseString_586
   3599                                    } // EndIf (Size > 4)
   3600                                    else
   3601                                    {
   3602                                      // 3. Grab remaining string and Save it.
   3603                                      tempPstr = &tempBffr[4];
   \                     ??RoadBrd_ParseString_587: (+1)
   \   00003E56   0x1D20             ADDS     R0,R4,#+4
   \   00003E58   0x9030             STR      R0,[SP, #+192]
   3604                                      strcpy(tempstr, tempPstr);
   \   00003E5A   0x9930             LDR      R1,[SP, #+192]
   \   00003E5C   0xA852             ADD      R0,SP,#+328
   \   00003E5E   0x.... 0x....      BL       strcpy
   3605                                      // NOW...Save it.
   3606                                      Status = RoadBrd_CAL_Set_TimeString( (uint8_t *)tempPstr );
   \   00003E62   0x9830             LDR      R0,[SP, #+192]
   \   00003E64   0x.... 0x....      BL       RoadBrd_CAL_Set_TimeString
   \   00003E68   0x0006             MOVS     R6,R0
   3607                                      if (Status != HAL_OK)
   \   00003E6A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00003E6C   0x2E00             CMP      R6,#+0
   \   00003E6E   0xD013             BEQ.N    ??RoadBrd_ParseString_589
   3608                                      {
   3609                                        // Is this a BLE Operation?
   3610                                        if ( BLE_Flag )
   \   00003E70   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003E72   0x2D00             CMP      R5,#+0
   \   00003E74   0xD00A             BEQ.N    ??RoadBrd_ParseString_590
   3611                                        {
   3612                                          // Yes...Build and Send BLE Response NOW.
   3613                                          strcpy( (char *)tempBffr2, "<STATUS>CMD_TCT_ERR</STATUS>");
   \   00003E76   0x.... 0x....      LDR.W    R1,??DataTable4_1
   \   00003E7A   0xA80A             ADD      R0,SP,#+40
   \   00003E7C   0x.... 0x....      BL       strcpy
   3614                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003E80   0xA80A             ADD      R0,SP,#+40
   \   00003E82   0x.... 0x....      BL       strlen
   \   00003E86   0xA90A             ADD      R1,SP,#+40
   \   00003E88   0x.... 0x....      BL       BGM111_Transmit
   3615                                        }
   3616                                        return Status;
   \                     ??RoadBrd_ParseString_590: (+1)
   \   00003E8C   0x0030             MOVS     R0,R6
   \   00003E8E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003E90   0xF000 0xBD57      B.W      ??RoadBrd_ParseString_4
   \                     ??RoadBrd_ParseString_534:
   \   00003E94   0x........         DC32     ?_237
   3617                                      }
   3618                                      else
   3619                                      {
   3620                                        // Is this a BLE Operation?
   3621                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_589: (+1)
   \   00003E98   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003E9A   0x2D00             CMP      R5,#+0
   \   00003E9C   0xD00A             BEQ.N    ??RoadBrd_ParseString_591
   3622                                        {
   3623                                          // Yes...Build and Send BLE Response NOW.
   3624                                          strcpy( (char *)tempBffr2, "<STATUS>ST_TCT_ACK</STATUS>");
   \   00003E9E   0x.... 0x....      LDR.W    R1,??DataTable4_2
   \   00003EA2   0xA80A             ADD      R0,SP,#+40
   \   00003EA4   0x.... 0x....      BL       strcpy
   3625                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003EA8   0xA80A             ADD      R0,SP,#+40
   \   00003EAA   0x.... 0x....      BL       strlen
   \   00003EAE   0xA90A             ADD      R1,SP,#+40
   \   00003EB0   0x.... 0x....      BL       BGM111_Transmit
   3626                                        }
   3627                                      }
   3628                                      sprintf( (char *)tempBffr2, "\r\n     COMPLETE.\r\n" );
   \                     ??RoadBrd_ParseString_591: (+1)
   \   00003EB4   0x.... 0x....      LDR.W    R1,??DataTable3_8
   \   00003EB8   0xA80A             ADD      R0,SP,#+40
   \   00003EBA   0x.... 0x....      BL       sprintf
   3629                                    } // EndElse (Size > 4)
   3630                                  } // EndElse (tempBffr[3]!=':')
   3631                                  break;
   \                     ??RoadBrd_ParseString_586: (+1)
   \   00003EBE   0xE02C             B.N      ??RoadBrd_ParseString_378
   3632                                  //------------------ TCI Command: Calibration Initialize Cal Table(Reset)
   3633                                case 'I':
   3634                                  Status = RoadBrd_CAL_InitializeFrmFlash();
   \                     ??RoadBrd_ParseString_384: (+1)
   \   00003EC0   0x.... 0x....      BL       RoadBrd_CAL_InitializeFrmFlash
   \   00003EC4   0x0006             MOVS     R6,R0
   3635                                  if (Status != HAL_OK)
   \   00003EC6   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00003EC8   0x2E00             CMP      R6,#+0
   \   00003ECA   0xD013             BEQ.N    ??RoadBrd_ParseString_592
   3636                                  {
   3637                                    // Is this a BLE Operation?
   3638                                    if ( BLE_Flag )
   \   00003ECC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003ECE   0x2D00             CMP      R5,#+0
   \   00003ED0   0xD00A             BEQ.N    ??RoadBrd_ParseString_593
   3639                                    {
   3640                                      // Yes...Build and Send BLE Response NOW.
   3641                                      strcpy( (char *)tempBffr2, "<STATUS>CMD_TCI_ERR</STATUS>");
   \   00003ED2   0x.... 0x....      LDR.W    R1,??DataTable4_3
   \   00003ED6   0xA80A             ADD      R0,SP,#+40
   \   00003ED8   0x.... 0x....      BL       strcpy
   3642                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003EDC   0xA80A             ADD      R0,SP,#+40
   \   00003EDE   0x.... 0x....      BL       strlen
   \   00003EE2   0xA90A             ADD      R1,SP,#+40
   \   00003EE4   0x.... 0x....      BL       BGM111_Transmit
   3643                                    }
   3644                                    return Status;
   \                     ??RoadBrd_ParseString_593: (+1)
   \   00003EE8   0x0030             MOVS     R0,R6
   \   00003EEA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003EEC   0xF000 0xBD29      B.W      ??RoadBrd_ParseString_4
   \                     ??RoadBrd_ParseString_535:
   \   00003EF0   0x........         DC32     ?_238
   3645                                  }
   3646                                  else
   3647                                  {
   3648                                    // Is this a BLE Operation?
   3649                                    if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_592: (+1)
   \   00003EF4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003EF6   0x2D00             CMP      R5,#+0
   \   00003EF8   0xD00A             BEQ.N    ??RoadBrd_ParseString_594
   3650                                    {
   3651                                      // Yes...Build and Send BLE Response NOW.
   3652                                      strcpy( (char *)tempBffr2, "<STATUS>ST_TCI_ACK</STATUS>");
   \   00003EFA   0x.... 0x....      LDR.W    R1,??DataTable4_4
   \   00003EFE   0xA80A             ADD      R0,SP,#+40
   \   00003F00   0x.... 0x....      BL       strcpy
   3653                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003F04   0xA80A             ADD      R0,SP,#+40
   \   00003F06   0x.... 0x....      BL       strlen
   \   00003F0A   0xA90A             ADD      R1,SP,#+40
   \   00003F0C   0x.... 0x....      BL       BGM111_Transmit
   3654                                    }
   3655                                  }
   3656                                  sprintf( (char *)tempBffr2, "\r\n     COMPLETE.\r\n" );
   \                     ??RoadBrd_ParseString_594: (+1)
   \   00003F10   0x.... 0x....      LDR.W    R1,??DataTable3_8
   \   00003F14   0xA80A             ADD      R0,SP,#+40
   \   00003F16   0x.... 0x....      BL       sprintf
   3657                                  break;
   3658                                } //EndSwitch
   3659                              } //EndElse (Size == 2)
   3660                              break;
   \                     ??RoadBrd_ParseString_378: (+1)
   \   00003F1A   0xF000 0xBC86      B.W      ??RoadBrd_ParseString_290
   3661          //++++++++++++++++++++++++++++++++++++++++++  Dump Driver State.
   3662                            case 'D':
   3663                              // Read Driver Status
   3664                              DriverStatus = Get_DriverStatus();
   \                     ??RoadBrd_ParseString_292: (+1)
   \   00003F1E   0x.... 0x....      BL       Get_DriverStatus
   \   00003F22   0xF8AD 0x00CE      STRH     R0,[SP, #+206]
   3665                              // Is this a BLE Operation?
   3666                              if ( BLE_Flag )
   \   00003F26   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003F28   0x2D00             CMP      R5,#+0
   \   00003F2A   0xD00C             BEQ.N    ??RoadBrd_ParseString_595
   3667                              {
   3668                                // Yes...Build and Send BLE Response NOW.
   3669                                sprintf( (char *)tempBffr2, "<STATUS>ST_DRIVER:%04x</STATUS>", DriverStatus );
   \   00003F2C   0xF8BD 0x20CE      LDRH     R2,[SP, #+206]
   \   00003F30   0x.... 0x....      LDR.W    R1,??DataTable4_5
   \   00003F34   0xA80A             ADD      R0,SP,#+40
   \   00003F36   0x.... 0x....      BL       sprintf
   3670                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003F3A   0xA80A             ADD      R0,SP,#+40
   \   00003F3C   0x.... 0x....      BL       strlen
   \   00003F40   0xA90A             ADD      R1,SP,#+40
   \   00003F42   0x.... 0x....      BL       BGM111_Transmit
   3671                              }
   3672                              
   3673                              sprintf( (char *)tempBffr2, "Driver Status: %04x\r\n", DriverStatus );
   \                     ??RoadBrd_ParseString_595: (+1)
   \   00003F46   0xF8BD 0x20CE      LDRH     R2,[SP, #+206]
   \   00003F4A   0x.... 0x....      LDR.W    R1,??DataTable4_6
   \   00003F4E   0xA80A             ADD      R0,SP,#+40
   \   00003F50   0x.... 0x....      BL       sprintf
   3674                              break;
   \   00003F54   0xF000 0xBC69      B.W      ??RoadBrd_ParseString_290
   \                     ??RoadBrd_ParseString_537:
   \   00003F58   0x........         DC32     ?_239
   3675          //++++++++++++++++++++++++++++++++++++++++++  RESET Micro.
   3676                            case 'R':
   3677                              // RESET
   3678                              // Is this a BLE Operation?
   3679                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_298: (+1)
   \   00003F5C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003F5E   0x2D00             CMP      R5,#+0
   \   00003F60   0xD00D             BEQ.N    ??RoadBrd_ParseString_596
   3680                              {
   3681                                // Yes...Build and Send BLE Response NOW.
   3682                                strcpy( (char *)tempBffr2, "<STATUS>ST_RESET_ACK</STATUS>");
   \   00003F62   0x.... 0x....      LDR.W    R1,??DataTable4_7
   \   00003F66   0xA80A             ADD      R0,SP,#+40
   \   00003F68   0x.... 0x....      BL       strcpy
   3683                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003F6C   0xA80A             ADD      R0,SP,#+40
   \   00003F6E   0x.... 0x....      BL       strlen
   \   00003F72   0xA90A             ADD      R1,SP,#+40
   \   00003F74   0x.... 0x....      BL       BGM111_Transmit
   3684                                HAL_Delay(100);           // Wait 100ms
   \   00003F78   0x2064             MOVS     R0,#+100
   \   00003F7A   0x.... 0x....      BL       HAL_Delay
   3685                              }
   3686                              HAL_NVIC_SystemReset();
   \                     ??RoadBrd_ParseString_596: (+1)
   \   00003F7E   0x.... 0x....      BL       HAL_NVIC_SystemReset
   3687                              sprintf( (char *)tempBffr2, "RESET CALLED BUT NO RESPONSE!!\r\n" );
   \   00003F82   0x.... 0x....      LDR.W    R1,??DataTable4_8
   \   00003F86   0xA80A             ADD      R0,SP,#+40
   \   00003F88   0x.... 0x....      BL       sprintf
   3688                              break;
   \   00003F8C   0xF000 0xBC4D      B.W      ??RoadBrd_ParseString_290
   \                     ??RoadBrd_ParseString_538:
   \   00003F90   0x........         DC32     ?_240
   3689          //++++++++++++++++++++++++++++++++++++++++++  Key Flash Variable Commands.
   3690                            case 'K':
   3691                              // Key Flash Variable Commands.
   3692                              // Test Size to make sure we have enough Characters for this operation
   3693                              Status = HAL_OK;
   \                     ??RoadBrd_ParseString_295: (+1)
   \   00003F94   0x2000             MOVS     R0,#+0
   \   00003F96   0x0006             MOVS     R6,R0
   3694                              if (Size < 4)
   \   00003F98   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00003F9C   0xF1B8 0x0F04      CMP      R8,#+4
   \   00003FA0   0xDA16             BGE.N    ??RoadBrd_ParseString_597
   3695                              {
   3696                                // Is this a BLE Operation?
   3697                                if ( BLE_Flag )
   \   00003FA2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003FA4   0x2D00             CMP      R5,#+0
   \   00003FA6   0xD00A             BEQ.N    ??RoadBrd_ParseString_598
   3698                                {
   3699                                  // Yes...Build and Send BLE Response NOW.
   3700                                  strcpy( (char *)tempBffr2, "<STATUS>CMD_TK_SYNTAX</STATUS>");
   \   00003FA8   0x.... 0x....      LDR.W    R1,??DataTable4_9
   \   00003FAC   0xA80A             ADD      R0,SP,#+40
   \   00003FAE   0x.... 0x....      BL       strcpy
   3701                                  BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003FB2   0xA80A             ADD      R0,SP,#+40
   \   00003FB4   0x.... 0x....      BL       strlen
   \   00003FB8   0xA90A             ADD      R1,SP,#+40
   \   00003FBA   0x.... 0x....      BL       BGM111_Transmit
   3702                                }
   3703                                strcpy( (char *)tempBffr2, "TK SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_598: (+1)
   \   00003FBE   0x.... 0x....      LDR.W    R1,??DataTable4_10
   \   00003FC2   0xA80A             ADD      R0,SP,#+40
   \   00003FC4   0x.... 0x....      BL       strcpy
   \   00003FC8   0xE315             B.N      ??RoadBrd_ParseString_599
   \   00003FCA   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_540:
   \   00003FCC   0x........         DC32     ?_241
   3704                              }
   3705                              else
   3706                              {
   3707                                switch( tempBffr[2] )
   \                     ??RoadBrd_ParseString_597: (+1)
   \   00003FD0   0x78A0             LDRB     R0,[R4, #+2]
   \   00003FD2   0x2852             CMP      R0,#+82
   \   00003FD4   0xF000 0x8246      BEQ.W    ??RoadBrd_ParseString_600
   \   00003FD8   0x2853             CMP      R0,#+83
   \   00003FDA   0xF040 0x82F9      BNE.W    ??RoadBrd_ParseString_601
   3708                                {
   3709          //------------------
   3710                                  case 'S':
   3711                                    //Key Flash Variable Set Command.
   3712                                    switch( tempBffr[3] )
   \                     ??RoadBrd_ParseString_602: (+1)
   \   00003FDE   0x78E0             LDRB     R0,[R4, #+3]
   \   00003FE0   0x2842             CMP      R0,#+66
   \   00003FE2   0xF000 0x81AC      BEQ.W    ??RoadBrd_ParseString_603
   \   00003FE6   0x2852             CMP      R0,#+82
   \   00003FE8   0xD006             BEQ.N    ??RoadBrd_ParseString_604
   \   00003FEA   0x2853             CMP      R0,#+83
   \   00003FEC   0xF000 0x8091      BEQ.W    ??RoadBrd_ParseString_605
   \   00003FF0   0x2854             CMP      R0,#+84
   \   00003FF2   0xF000 0x8117      BEQ.W    ??RoadBrd_ParseString_606
   \   00003FF6   0xE22A             B.N      ??RoadBrd_ParseString_607
   3713                                    {
   3714          //------------------
   3715                                      case 'R':
   3716                                        //Key Flash Variable Set Road Sound Sample Rate Command.
   3717                                        // Step 1. Validate format.
   3718                                        if(tempBffr[4]!=':')
   \                     ??RoadBrd_ParseString_604: (+1)
   \   00003FF8   0x7920             LDRB     R0,[R4, #+4]
   \   00003FFA   0x283A             CMP      R0,#+58
   \   00003FFC   0xD01A             BEQ.N    ??RoadBrd_ParseString_608
   3719                                        {
   3720                                          // Is this a BLE Operation?
   3721                                          if ( BLE_Flag )
   \   00003FFE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004000   0x2D00             CMP      R5,#+0
   \   00004002   0xD00A             BEQ.N    ??RoadBrd_ParseString_609
   3722                                          {
   3723                                            // Yes...Build and Send BLE Response NOW.
   3724                                            strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSR_SYNTAX</STATUS>");
   \   00004004   0x.... 0x....      LDR.W    R1,??DataTable4_11
   \   00004008   0xA80A             ADD      R0,SP,#+40
   \   0000400A   0x.... 0x....      BL       strcpy
   3725                                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000400E   0xA80A             ADD      R0,SP,#+40
   \   00004010   0x.... 0x....      BL       strlen
   \   00004014   0xA90A             ADD      R1,SP,#+40
   \   00004016   0x.... 0x....      BL       BGM111_Transmit
   3726                                          }
   3727                                          strcpy( (char *)tempBffr2, "TKSR SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_609: (+1)
   \   0000401A   0x.... 0x....      LDR.W    R1,??DataTable4_12
   \   0000401E   0xA80A             ADD      R0,SP,#+40
   \   00004020   0x.... 0x....      BL       strcpy
   \   00004024   0xE074             B.N      ??RoadBrd_ParseString_610
   \   00004026   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_541:
   \   00004028   0x........         DC32     ?_242
   \   0000402C   0x........         DC32     ?_243
   \   00004030   0x........         DC32     ?_244
   3728                                        } // Endif (tempBffr[4]!=':')
   3729                                        else
   3730                                        {
   3731                                          // 2. Verify if remaining string is digits
   3732                                          if (Size > 5)
   \                     ??RoadBrd_ParseString_608: (+1)
   \   00004034   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00004038   0xF1B8 0x0F06      CMP      R8,#+6
   \   0000403C   0xDB10             BLT.N    ??RoadBrd_ParseString_611
   3733                                          {
   3734                                            flag = 1;
   \   0000403E   0x2001             MOVS     R0,#+1
   \   00004040   0x902E             STR      R0,[SP, #+184]
   3735                                            for (x=5; x< Size; x++)
   \   00004042   0x2005             MOVS     R0,#+5
   \   00004044   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_612: (+1)
   \   00004046   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000404A   0x4547             CMP      R7,R8
   \   0000404C   0xDA0A             BGE.N    ??RoadBrd_ParseString_613
   3736                                            {
   3737                                              if (isdigit(tempBffr[x]) == 0)
   \   0000404E   0x5DE0             LDRB     R0,[R4, R7]
   \   00004050   0x.... 0x....      BL       isdigit
   \   00004054   0x2800             CMP      R0,#+0
   \   00004056   0xD101             BNE.N    ??RoadBrd_ParseString_614
   3738                                                flag = 0;
   \   00004058   0x2000             MOVS     R0,#+0
   \   0000405A   0x902E             STR      R0,[SP, #+184]
   3739                                            }
   \                     ??RoadBrd_ParseString_614: (+1)
   \   0000405C   0x1C7F             ADDS     R7,R7,#+1
   \   0000405E   0xE7F2             B.N      ??RoadBrd_ParseString_612
   3740                                          } // EndIf (Size > 5)
   3741                                          else
   3742                                            flag = 0;
   \                     ??RoadBrd_ParseString_611: (+1)
   \   00004060   0x2000             MOVS     R0,#+0
   \   00004062   0x902E             STR      R0,[SP, #+184]
   3743                                          if (flag == 0)
   \                     ??RoadBrd_ParseString_613: (+1)
   \   00004064   0x982E             LDR      R0,[SP, #+184]
   \   00004066   0x2800             CMP      R0,#+0
   \   00004068   0xD113             BNE.N    ??RoadBrd_ParseString_615
   3744                                          {
   3745                                            // Is this a BLE Operation?
   3746                                            if ( BLE_Flag )
   \   0000406A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000406C   0x2D00             CMP      R5,#+0
   \   0000406E   0xD00A             BEQ.N    ??RoadBrd_ParseString_616
   3747                                            {
   3748                                              // Yes...Build and Send BLE Response NOW.
   3749                                              strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSR_BADPARAM</STATUS>");
   \   00004070   0x.... 0x....      LDR.W    R1,??DataTable4_13
   \   00004074   0xA80A             ADD      R0,SP,#+40
   \   00004076   0x.... 0x....      BL       strcpy
   3750                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000407A   0xA80A             ADD      R0,SP,#+40
   \   0000407C   0x.... 0x....      BL       strlen
   \   00004080   0xA90A             ADD      R1,SP,#+40
   \   00004082   0x.... 0x....      BL       BGM111_Transmit
   3751                                            }
   3752                                            strcpy( (char *)tempBffr2, "TKSR SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_616: (+1)
   \   00004086   0x.... 0x....      LDR.W    R1,??DataTable4_14
   \   0000408A   0xA80A             ADD      R0,SP,#+40
   \   0000408C   0x.... 0x....      BL       strcpy
   \   00004090   0xE03E             B.N      ??RoadBrd_ParseString_610
   3753                                          }
   3754                                          else
   3755                                          {
   3756                                            // 3. Grab remaining string and convert to integer.
   3757                                            tempPstr = &tempBffr[5];
   \                     ??RoadBrd_ParseString_615: (+1)
   \   00004092   0x1D60             ADDS     R0,R4,#+5
   \   00004094   0x9030             STR      R0,[SP, #+192]
   3758                                            strcpy(tempstr, tempPstr);
   \   00004096   0x9930             LDR      R1,[SP, #+192]
   \   00004098   0xA852             ADD      R0,SP,#+328
   \   0000409A   0x.... 0x....      BL       strcpy
   3759                                            new_value = atoi( tempstr );
   \   0000409E   0xA852             ADD      R0,SP,#+328
   \   000040A0   0x.... 0x....      BL       atoi
   \   000040A4   0x902F             STR      R0,[SP, #+188]
   3760                                            if((new_value > 9999) ||
   3761                                               (new_value < 0))
   \   000040A6   0x982F             LDR      R0,[SP, #+188]
   \   000040A8   0xF242 0x7110      MOVW     R1,#+10000
   \   000040AC   0x4288             CMP      R0,R1
   \   000040AE   0xDA02             BGE.N    ??RoadBrd_ParseString_617
   \   000040B0   0x982F             LDR      R0,[SP, #+188]
   \   000040B2   0x2800             CMP      R0,#+0
   \   000040B4   0xD516             BPL.N    ??RoadBrd_ParseString_618
   3762                                            {
   3763                                              // Is this a BLE Operation?
   3764                                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_617: (+1)
   \   000040B6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000040B8   0x2D00             CMP      R5,#+0
   \   000040BA   0xD00A             BEQ.N    ??RoadBrd_ParseString_619
   3765                                              {
   3766                                                // Yes...Build and Send BLE Response NOW.
   3767                                                strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSR_BADPARAM</STATUS>");
   \   000040BC   0x.... 0x....      LDR.W    R1,??DataTable4_13
   \   000040C0   0xA80A             ADD      R0,SP,#+40
   \   000040C2   0x.... 0x....      BL       strcpy
   3768                                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000040C6   0xA80A             ADD      R0,SP,#+40
   \   000040C8   0x.... 0x....      BL       strlen
   \   000040CC   0xA90A             ADD      R1,SP,#+40
   \   000040CE   0x.... 0x....      BL       BGM111_Transmit
   3769                                              }
   3770                                              strcpy( (char *)tempBffr2, "TKSR SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_619: (+1)
   \   000040D2   0x.... 0x....      LDR.W    R1,??DataTable4_14
   \   000040D6   0xA80A             ADD      R0,SP,#+40
   \   000040D8   0x.... 0x....      BL       strcpy
   \   000040DC   0xE018             B.N      ??RoadBrd_ParseString_610
   \   000040DE   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_544:
   \   000040E0   0x........         DC32     ?_245
   3771                                            }
   3772                                            else
   3773                                            {
   3774                                              // Time to set new Road Sound Sample Rate.
   3775                                              RoadBrd_Set_RdSndTickCnt( new_value );
   \                     ??RoadBrd_ParseString_618: (+1)
   \   000040E4   0x982F             LDR      R0,[SP, #+188]
   \   000040E6   0x.... 0x....      BL       RoadBrd_Set_RdSndTickCnt
   3776                                              // NOW, Build Data String..
   3777                                              // Is this a BLE Operation?
   3778                                              if ( BLE_Flag )
   \   000040EA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000040EC   0x2D00             CMP      R5,#+0
   \   000040EE   0xD00A             BEQ.N    ??RoadBrd_ParseString_620
   3779                                              {
   3780                                                // Yes...Build and Send BLE Response NOW.
   3781                                                strcpy( (char *)tempBffr2, "<STATUS>ST_TKSR_ACK</STATUS>");
   \   000040F0   0x.... 0x....      LDR.W    R1,??DataTable4_15
   \   000040F4   0xA80A             ADD      R0,SP,#+40
   \   000040F6   0x.... 0x....      BL       strcpy
   3782                                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000040FA   0xA80A             ADD      R0,SP,#+40
   \   000040FC   0x.... 0x....      BL       strlen
   \   00004100   0xA90A             ADD      R1,SP,#+40
   \   00004102   0x.... 0x....      BL       BGM111_Transmit
   3783                                              }
   3784                                              sprintf( (char *)tempBffr2, "COMPLETE" );
   \                     ??RoadBrd_ParseString_620: (+1)
   \   00004106   0x.... 0x....      LDR.W    R1,??DataTable4_16
   \   0000410A   0xA80A             ADD      R0,SP,#+40
   \   0000410C   0x.... 0x....      BL       sprintf
   3785                                            } // EndElse ((new_value > 9999) || (new_value < 0))
   3786                                          } // EndElse (flag == 0)
   3787                                        } // EndElse (tempBffr[4]!=':')
   3788                                        break;
   \                     ??RoadBrd_ParseString_610: (+1)
   \   00004110   0xE1A2             B.N      ??RoadBrd_ParseString_621
   3789          //------------------
   3790                                      case 'S':
   3791                                        //Key Flash Variable Set Sensor Sample Rate Command.
   3792                                        // Step 1. Validate format.
   3793                                        if(tempBffr[4]!=':')
   \                     ??RoadBrd_ParseString_605: (+1)
   \   00004112   0x7920             LDRB     R0,[R4, #+4]
   \   00004114   0x283A             CMP      R0,#+58
   \   00004116   0xD019             BEQ.N    ??RoadBrd_ParseString_622
   3794                                        {
   3795                                          // Is this a BLE Operation?
   3796                                          if ( BLE_Flag )
   \   00004118   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000411A   0x2D00             CMP      R5,#+0
   \   0000411C   0xD00A             BEQ.N    ??RoadBrd_ParseString_623
   3797                                          {
   3798                                            // Yes...Build and Send BLE Response NOW.
   3799                                            strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSS_SYNTAX</STATUS>");
   \   0000411E   0x.... 0x....      LDR.W    R1,??DataTable4_17
   \   00004122   0xA80A             ADD      R0,SP,#+40
   \   00004124   0x.... 0x....      BL       strcpy
   3800                                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004128   0xA80A             ADD      R0,SP,#+40
   \   0000412A   0x.... 0x....      BL       strlen
   \   0000412E   0xA90A             ADD      R1,SP,#+40
   \   00004130   0x.... 0x....      BL       BGM111_Transmit
   3801                                          }
   3802                                          strcpy( (char *)tempBffr2, "TKSS SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_623: (+1)
   \   00004134   0x.... 0x....      LDR.W    R1,??DataTable4_18
   \   00004138   0xA80A             ADD      R0,SP,#+40
   \   0000413A   0x.... 0x....      BL       strcpy
   \   0000413E   0xE070             B.N      ??RoadBrd_ParseString_624
   \                     ??RoadBrd_ParseString_545:
   \   00004140   0x........         DC32     ?_246
   \   00004144   0x........         DC32     ?_247
   \   00004148   0x........         DC32     ?_248
   3803                                        } // Endif (tempBffr[4]!=':')
   3804                                        else
   3805                                        {
   3806                                          // 2. Verify if remaining string is digits
   3807                                          if (Size > 5)
   \                     ??RoadBrd_ParseString_622: (+1)
   \   0000414C   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00004150   0xF1B8 0x0F06      CMP      R8,#+6
   \   00004154   0xDB10             BLT.N    ??RoadBrd_ParseString_625
   3808                                          {
   3809                                            flag = 1;
   \   00004156   0x2001             MOVS     R0,#+1
   \   00004158   0x902E             STR      R0,[SP, #+184]
   3810                                            for (x=5; x< Size; x++)
   \   0000415A   0x2005             MOVS     R0,#+5
   \   0000415C   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_626: (+1)
   \   0000415E   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00004162   0x4547             CMP      R7,R8
   \   00004164   0xDA0A             BGE.N    ??RoadBrd_ParseString_627
   3811                                            {
   3812                                              if (isdigit(tempBffr[x]) == 0)
   \   00004166   0x5DE0             LDRB     R0,[R4, R7]
   \   00004168   0x.... 0x....      BL       isdigit
   \   0000416C   0x2800             CMP      R0,#+0
   \   0000416E   0xD101             BNE.N    ??RoadBrd_ParseString_628
   3813                                                flag = 0;
   \   00004170   0x2000             MOVS     R0,#+0
   \   00004172   0x902E             STR      R0,[SP, #+184]
   3814                                            }
   \                     ??RoadBrd_ParseString_628: (+1)
   \   00004174   0x1C7F             ADDS     R7,R7,#+1
   \   00004176   0xE7F2             B.N      ??RoadBrd_ParseString_626
   3815                                          } // EndIf (Size > 5)
   3816                                          else
   3817                                            flag = 0;
   \                     ??RoadBrd_ParseString_625: (+1)
   \   00004178   0x2000             MOVS     R0,#+0
   \   0000417A   0x902E             STR      R0,[SP, #+184]
   3818                                          if (flag == 0)
   \                     ??RoadBrd_ParseString_627: (+1)
   \   0000417C   0x982E             LDR      R0,[SP, #+184]
   \   0000417E   0x2800             CMP      R0,#+0
   \   00004180   0xD113             BNE.N    ??RoadBrd_ParseString_629
   3819                                          {
   3820                                            // Is this a BLE Operation?
   3821                                            if ( BLE_Flag )
   \   00004182   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004184   0x2D00             CMP      R5,#+0
   \   00004186   0xD00A             BEQ.N    ??RoadBrd_ParseString_630
   3822                                            {
   3823                                              // Yes...Build and Send BLE Response NOW.
   3824                                              strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSS_BADPARAM</STATUS>");
   \   00004188   0x.... 0x....      LDR.W    R1,??DataTable4_19
   \   0000418C   0xA80A             ADD      R0,SP,#+40
   \   0000418E   0x.... 0x....      BL       strcpy
   3825                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004192   0xA80A             ADD      R0,SP,#+40
   \   00004194   0x.... 0x....      BL       strlen
   \   00004198   0xA90A             ADD      R1,SP,#+40
   \   0000419A   0x.... 0x....      BL       BGM111_Transmit
   3826                                            }
   3827                                            strcpy( (char *)tempBffr2, "TKSS SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_630: (+1)
   \   0000419E   0x.... 0x....      LDR.W    R1,??DataTable4_20
   \   000041A2   0xA80A             ADD      R0,SP,#+40
   \   000041A4   0x.... 0x....      BL       strcpy
   \   000041A8   0xE03B             B.N      ??RoadBrd_ParseString_624
   3828                                          }
   3829                                          else
   3830                                          {
   3831                                            // 3. Grab remaining string and convert to integer.
   3832                                            tempPstr = &tempBffr[5];
   \                     ??RoadBrd_ParseString_629: (+1)
   \   000041AA   0x1D60             ADDS     R0,R4,#+5
   \   000041AC   0x9030             STR      R0,[SP, #+192]
   3833                                            strcpy(tempstr, tempPstr);
   \   000041AE   0x9930             LDR      R1,[SP, #+192]
   \   000041B0   0xA852             ADD      R0,SP,#+328
   \   000041B2   0x.... 0x....      BL       strcpy
   3834                                            new_value = atoi( tempstr );
   \   000041B6   0xA852             ADD      R0,SP,#+328
   \   000041B8   0x.... 0x....      BL       atoi
   \   000041BC   0x902F             STR      R0,[SP, #+188]
   3835                                            if((new_value > 9999) ||
   3836                                               (new_value < 0))
   \   000041BE   0x982F             LDR      R0,[SP, #+188]
   \   000041C0   0xF242 0x7110      MOVW     R1,#+10000
   \   000041C4   0x4288             CMP      R0,R1
   \   000041C6   0xDA02             BGE.N    ??RoadBrd_ParseString_631
   \   000041C8   0x982F             LDR      R0,[SP, #+188]
   \   000041CA   0x2800             CMP      R0,#+0
   \   000041CC   0xD513             BPL.N    ??RoadBrd_ParseString_632
   3837                                            {
   3838                                              // Is this a BLE Operation?
   3839                                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_631: (+1)
   \   000041CE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000041D0   0x2D00             CMP      R5,#+0
   \   000041D2   0xD00A             BEQ.N    ??RoadBrd_ParseString_633
   3840                                              {
   3841                                                // Yes...Build and Send BLE Response NOW.
   3842                                                strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSS_BADPARAM</STATUS>");
   \   000041D4   0x.... 0x....      LDR.W    R1,??DataTable4_19
   \   000041D8   0xA80A             ADD      R0,SP,#+40
   \   000041DA   0x.... 0x....      BL       strcpy
   3843                                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000041DE   0xA80A             ADD      R0,SP,#+40
   \   000041E0   0x.... 0x....      BL       strlen
   \   000041E4   0xA90A             ADD      R1,SP,#+40
   \   000041E6   0x.... 0x....      BL       BGM111_Transmit
   3844                                              }
   3845                                              strcpy( (char *)tempBffr2, "TKSS SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_633: (+1)
   \   000041EA   0x.... 0x....      LDR.W    R1,??DataTable4_20
   \   000041EE   0xA80A             ADD      R0,SP,#+40
   \   000041F0   0x.... 0x....      BL       strcpy
   \   000041F4   0xE015             B.N      ??RoadBrd_ParseString_624
   3846                                            }
   3847                                            else
   3848                                            {
   3849                                              // Time to set new Road Sound Sample Rate.
   3850                                              RoadBrd_Set_SnsrTickCnt( new_value );
   \                     ??RoadBrd_ParseString_632: (+1)
   \   000041F6   0x982F             LDR      R0,[SP, #+188]
   \   000041F8   0x.... 0x....      BL       RoadBrd_Set_SnsrTickCnt
   3851                                              // Is this a BLE Operation?
   3852                                              if ( BLE_Flag )
   \   000041FC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000041FE   0x2D00             CMP      R5,#+0
   \   00004200   0xD00A             BEQ.N    ??RoadBrd_ParseString_634
   3853                                              {
   3854                                                // Yes...Build and Send BLE Response NOW.
   3855                                                strcpy( (char *)tempBffr2, "<STATUS>ST_TKSS_ACK</STATUS>");
   \   00004202   0x.... 0x....      LDR.W    R1,??DataTable4_21
   \   00004206   0xA80A             ADD      R0,SP,#+40
   \   00004208   0x.... 0x....      BL       strcpy
   3856                                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000420C   0xA80A             ADD      R0,SP,#+40
   \   0000420E   0x.... 0x....      BL       strlen
   \   00004212   0xA90A             ADD      R1,SP,#+40
   \   00004214   0x.... 0x....      BL       BGM111_Transmit
   3857                                              }
   3858                                              // NOW, Build Data String..
   3859                                              sprintf( (char *)tempBffr2, "COMPLETE" );
   \                     ??RoadBrd_ParseString_634: (+1)
   \   00004218   0x.... 0x....      LDR.W    R1,??DataTable4_16
   \   0000421C   0xA80A             ADD      R0,SP,#+40
   \   0000421E   0x.... 0x....      BL       sprintf
   3860                                            } // EndElse ((new_value > 9999) || (new_value < 0))
   3861                                          } // EndElse (flag == 0)
   3862                                        } // EndElse (tempBffr[4]!=':')
   3863                                        break;
   \                     ??RoadBrd_ParseString_624: (+1)
   \   00004222   0xE119             B.N      ??RoadBrd_ParseString_621
   3864          //------------------
   3865                                      case 'T':
   3866                                        //Key Flash Variable Set TACK Limit(Multiple of Road Sound Throttles).
   3867                                        // Step 1. Validate format.
   3868                                        if(tempBffr[4]!=':')
   \                     ??RoadBrd_ParseString_606: (+1)
   \   00004224   0x7920             LDRB     R0,[R4, #+4]
   \   00004226   0x283A             CMP      R0,#+58
   \   00004228   0xD018             BEQ.N    ??RoadBrd_ParseString_635
   3869                                        {
   3870                                          // Is this a BLE Operation?
   3871                                          if ( BLE_Flag )
   \   0000422A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000422C   0x2D00             CMP      R5,#+0
   \   0000422E   0xD00A             BEQ.N    ??RoadBrd_ParseString_636
   3872                                          {
   3873                                            // Yes...Build and Send BLE Response NOW.
   3874                                            strcpy( (char *)tempBffr2, "<STATUS>CMD_TKST_SYNTAX</STATUS>");
   \   00004230   0x.... 0x....      LDR.W    R1,??DataTable4_22
   \   00004234   0xA80A             ADD      R0,SP,#+40
   \   00004236   0x.... 0x....      BL       strcpy
   3875                                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000423A   0xA80A             ADD      R0,SP,#+40
   \   0000423C   0x.... 0x....      BL       strlen
   \   00004240   0xA90A             ADD      R1,SP,#+40
   \   00004242   0x.... 0x....      BL       BGM111_Transmit
   3876                                          }
   3877                                          strcpy( (char *)tempBffr2, "TKST SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_636: (+1)
   \   00004246   0x.... 0x....      LDR.W    R1,??DataTable4_23
   \   0000424A   0xA80A             ADD      R0,SP,#+40
   \   0000424C   0x.... 0x....      BL       strcpy
   \   00004250   0xE074             B.N      ??RoadBrd_ParseString_637
   \   00004252   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_548:
   \   00004254   0x........         DC32     ?_249
   \   00004258   0x........         DC32     ?_250
   3878                                        } // Endif (tempBffr[4]!=':')
   3879                                        else
   3880                                        {
   3881                                          // 2. Verify if remaining string is digits
   3882                                          if (Size > 5)
   \                     ??RoadBrd_ParseString_635: (+1)
   \   0000425C   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00004260   0xF1B8 0x0F06      CMP      R8,#+6
   \   00004264   0xDB10             BLT.N    ??RoadBrd_ParseString_638
   3883                                          {
   3884                                            flag = 1;
   \   00004266   0x2001             MOVS     R0,#+1
   \   00004268   0x902E             STR      R0,[SP, #+184]
   3885                                            for (x=5; x< Size; x++)
   \   0000426A   0x2005             MOVS     R0,#+5
   \   0000426C   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_639: (+1)
   \   0000426E   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00004272   0x4547             CMP      R7,R8
   \   00004274   0xDA0A             BGE.N    ??RoadBrd_ParseString_640
   3886                                            {
   3887                                              if (isdigit(tempBffr[x]) == 0)
   \   00004276   0x5DE0             LDRB     R0,[R4, R7]
   \   00004278   0x.... 0x....      BL       isdigit
   \   0000427C   0x2800             CMP      R0,#+0
   \   0000427E   0xD101             BNE.N    ??RoadBrd_ParseString_641
   3888                                                flag = 0;
   \   00004280   0x2000             MOVS     R0,#+0
   \   00004282   0x902E             STR      R0,[SP, #+184]
   3889                                            }
   \                     ??RoadBrd_ParseString_641: (+1)
   \   00004284   0x1C7F             ADDS     R7,R7,#+1
   \   00004286   0xE7F2             B.N      ??RoadBrd_ParseString_639
   3890                                          } // EndIf (Size > 5)
   3891                                          else
   3892                                            flag = 0;
   \                     ??RoadBrd_ParseString_638: (+1)
   \   00004288   0x2000             MOVS     R0,#+0
   \   0000428A   0x902E             STR      R0,[SP, #+184]
   3893                                          if (flag == 0)
   \                     ??RoadBrd_ParseString_640: (+1)
   \   0000428C   0x982E             LDR      R0,[SP, #+184]
   \   0000428E   0x2800             CMP      R0,#+0
   \   00004290   0xD116             BNE.N    ??RoadBrd_ParseString_642
   3894                                          {
   3895                                            // Is this a BLE Operation?
   3896                                            if ( BLE_Flag )
   \   00004292   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004294   0x2D00             CMP      R5,#+0
   \   00004296   0xD00A             BEQ.N    ??RoadBrd_ParseString_643
   3897                                            {
   3898                                              // Yes...Build and Send BLE Response NOW.
   3899                                              strcpy( (char *)tempBffr2, "<STATUS>CMD_TKST_BADPARAM</STATUS>");
   \   00004298   0x.... 0x....      LDR.W    R1,??DataTable4_24
   \   0000429C   0xA80A             ADD      R0,SP,#+40
   \   0000429E   0x.... 0x....      BL       strcpy
   3900                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000042A2   0xA80A             ADD      R0,SP,#+40
   \   000042A4   0x.... 0x....      BL       strlen
   \   000042A8   0xA90A             ADD      R1,SP,#+40
   \   000042AA   0x.... 0x....      BL       BGM111_Transmit
   3901                                            }
   3902                                            strcpy( (char *)tempBffr2, "TKST SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_643: (+1)
   \   000042AE   0x.... 0x....      LDR.W    R1,??DataTable4_25
   \   000042B2   0xA80A             ADD      R0,SP,#+40
   \   000042B4   0x.... 0x....      BL       strcpy
   \   000042B8   0xE040             B.N      ??RoadBrd_ParseString_637
   \   000042BA   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_550:
   \   000042BC   0x........         DC32     ?_251
   3903                                          }
   3904                                          else
   3905                                          {
   3906                                            // 3. Grab remaining string and convert to integer.
   3907                                            tempPstr = &tempBffr[5];
   \                     ??RoadBrd_ParseString_642: (+1)
   \   000042C0   0x1D60             ADDS     R0,R4,#+5
   \   000042C2   0x9030             STR      R0,[SP, #+192]
   3908                                            strcpy(tempstr, tempPstr);
   \   000042C4   0x9930             LDR      R1,[SP, #+192]
   \   000042C6   0xA852             ADD      R0,SP,#+328
   \   000042C8   0x.... 0x....      BL       strcpy
   3909                                            new_value = atoi( tempstr );
   \   000042CC   0xA852             ADD      R0,SP,#+328
   \   000042CE   0x.... 0x....      BL       atoi
   \   000042D2   0x902F             STR      R0,[SP, #+188]
   3910                                            if((new_value > 9999) ||
   3911                                               (new_value < 0))
   \   000042D4   0x982F             LDR      R0,[SP, #+188]
   \   000042D6   0xF242 0x7110      MOVW     R1,#+10000
   \   000042DA   0x4288             CMP      R0,R1
   \   000042DC   0xDA02             BGE.N    ??RoadBrd_ParseString_644
   \   000042DE   0x982F             LDR      R0,[SP, #+188]
   \   000042E0   0x2800             CMP      R0,#+0
   \   000042E2   0xD515             BPL.N    ??RoadBrd_ParseString_645
   3912                                            {
   3913                                              // Is this a BLE Operation?
   3914                                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_644: (+1)
   \   000042E4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000042E6   0x2D00             CMP      R5,#+0
   \   000042E8   0xD00A             BEQ.N    ??RoadBrd_ParseString_646
   3915                                              {
   3916                                                // Yes...Build and Send BLE Response NOW.
   3917                                                strcpy( (char *)tempBffr2, "<STATUS>CMD_TKST_BADPARAM</STATUS>");
   \   000042EA   0x.... 0x....      LDR.W    R1,??DataTable4_24
   \   000042EE   0xA80A             ADD      R0,SP,#+40
   \   000042F0   0x.... 0x....      BL       strcpy
   3918                                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000042F4   0xA80A             ADD      R0,SP,#+40
   \   000042F6   0x.... 0x....      BL       strlen
   \   000042FA   0xA90A             ADD      R1,SP,#+40
   \   000042FC   0x.... 0x....      BL       BGM111_Transmit
   3919                                              }
   3920                                              strcpy( (char *)tempBffr2, "TKSS SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_646: (+1)
   \   00004300   0x.... 0x....      LDR.W    R1,??DataTable4_20
   \   00004304   0xA80A             ADD      R0,SP,#+40
   \   00004306   0x.... 0x....      BL       strcpy
   \   0000430A   0xE017             B.N      ??RoadBrd_ParseString_637
   \                     ??RoadBrd_ParseString_551:
   \   0000430C   0x........         DC32     ?_252
   3921                                            }
   3922                                            else
   3923                                            {
   3924                                              // Time to set new TACK Limit.
   3925                                              RoadBrd_Set_TackLimit( new_value );
   \                     ??RoadBrd_ParseString_645: (+1)
   \   00004310   0x982F             LDR      R0,[SP, #+188]
   \   00004312   0x.... 0x....      BL       RoadBrd_Set_TackLimit
   3926                                              // Is this a BLE Operation?
   3927                                              if ( BLE_Flag )
   \   00004316   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004318   0x2D00             CMP      R5,#+0
   \   0000431A   0xD00A             BEQ.N    ??RoadBrd_ParseString_647
   3928                                              {
   3929                                                // Yes...Build and Send BLE Response NOW.
   3930                                                strcpy( (char *)tempBffr2, "<STATUS>ST_TKST_ACK</STATUS>");
   \   0000431C   0x.... 0x....      LDR.W    R1,??DataTable4_26
   \   00004320   0xA80A             ADD      R0,SP,#+40
   \   00004322   0x.... 0x....      BL       strcpy
   3931                                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004326   0xA80A             ADD      R0,SP,#+40
   \   00004328   0x.... 0x....      BL       strlen
   \   0000432C   0xA90A             ADD      R1,SP,#+40
   \   0000432E   0x.... 0x....      BL       BGM111_Transmit
   3932                                              }
   3933                                              // NOW, Build Data String..
   3934                                              sprintf( (char *)tempBffr2, "COMPLETE" );
   \                     ??RoadBrd_ParseString_647: (+1)
   \   00004332   0x.... 0x....      LDR.W    R1,??DataTable4_16
   \   00004336   0xA80A             ADD      R0,SP,#+40
   \   00004338   0x.... 0x....      BL       sprintf
   3935                                            } // EndElse ((new_value > 9999) || (new_value < 0))
   3936                                          } // EndElse (flag == 0)
   3937                                        } // EndElse (tempBffr[4]!=':')
   3938                                        break;
   \                     ??RoadBrd_ParseString_637: (+1)
   \   0000433C   0xE08C             B.N      ??RoadBrd_ParseString_621
   3939                                      case 'B':
   3940                                        //Key Flash Variable Set Boot Delay(Seconds).
   3941                                        // Step 1. Validate format.
   3942                                        if(tempBffr[4]!=':')
   \                     ??RoadBrd_ParseString_603: (+1)
   \   0000433E   0x7920             LDRB     R0,[R4, #+4]
   \   00004340   0x283A             CMP      R0,#+58
   \   00004342   0xD019             BEQ.N    ??RoadBrd_ParseString_648
   3943                                        {
   3944                                          // Is this a BLE Operation?
   3945                                          if ( BLE_Flag )
   \   00004344   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004346   0x2D00             CMP      R5,#+0
   \   00004348   0xD00A             BEQ.N    ??RoadBrd_ParseString_649
   3946                                          {
   3947                                            // Yes...Build and Send BLE Response NOW.
   3948                                            strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSB_SYNTAX</STATUS>");
   \   0000434A   0x.... 0x....      LDR.W    R1,??DataTable4_27
   \   0000434E   0xA80A             ADD      R0,SP,#+40
   \   00004350   0x.... 0x....      BL       strcpy
   3949                                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004354   0xA80A             ADD      R0,SP,#+40
   \   00004356   0x.... 0x....      BL       strlen
   \   0000435A   0xA90A             ADD      R1,SP,#+40
   \   0000435C   0x.... 0x....      BL       BGM111_Transmit
   3950                                          }
   3951                                          strcpy( (char *)tempBffr2, "TKSB SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_649: (+1)
   \   00004360   0x.... 0x....      LDR.W    R1,??DataTable4_28
   \   00004364   0xA80A             ADD      R0,SP,#+40
   \   00004366   0x.... 0x....      BL       strcpy
   \   0000436A   0xE06F             B.N      ??RoadBrd_ParseString_650
   \                     ??RoadBrd_ParseString_553:
   \   0000436C   0x........         DC32     ?_253
   \   00004370   0x........         DC32     ?_254
   \   00004374   0x........         DC32     ?_255
   3952                                        } // Endif (tempBffr[4]!=':')
   3953                                        else
   3954                                        {
   3955                                          // 2. Verify if remaining string is digits
   3956                                          if (Size > 5)
   \                     ??RoadBrd_ParseString_648: (+1)
   \   00004378   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000437C   0xF1B8 0x0F06      CMP      R8,#+6
   \   00004380   0xDB10             BLT.N    ??RoadBrd_ParseString_651
   3957                                          {
   3958                                            flag = 1;
   \   00004382   0x2001             MOVS     R0,#+1
   \   00004384   0x902E             STR      R0,[SP, #+184]
   3959                                            for (x=5; x< Size; x++)
   \   00004386   0x2005             MOVS     R0,#+5
   \   00004388   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_652: (+1)
   \   0000438A   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000438E   0x4547             CMP      R7,R8
   \   00004390   0xDA0A             BGE.N    ??RoadBrd_ParseString_653
   3960                                            {
   3961                                              if (isdigit(tempBffr[x]) == 0)
   \   00004392   0x5DE0             LDRB     R0,[R4, R7]
   \   00004394   0x.... 0x....      BL       isdigit
   \   00004398   0x2800             CMP      R0,#+0
   \   0000439A   0xD101             BNE.N    ??RoadBrd_ParseString_654
   3962                                                flag = 0;
   \   0000439C   0x2000             MOVS     R0,#+0
   \   0000439E   0x902E             STR      R0,[SP, #+184]
   3963                                            }
   \                     ??RoadBrd_ParseString_654: (+1)
   \   000043A0   0x1C7F             ADDS     R7,R7,#+1
   \   000043A2   0xE7F2             B.N      ??RoadBrd_ParseString_652
   3964                                          } // EndIf (Size > 5)
   3965                                          else
   3966                                            flag = 0;
   \                     ??RoadBrd_ParseString_651: (+1)
   \   000043A4   0x2000             MOVS     R0,#+0
   \   000043A6   0x902E             STR      R0,[SP, #+184]
   3967                                          if (flag == 0)
   \                     ??RoadBrd_ParseString_653: (+1)
   \   000043A8   0x982E             LDR      R0,[SP, #+184]
   \   000043AA   0x2800             CMP      R0,#+0
   \   000043AC   0xD113             BNE.N    ??RoadBrd_ParseString_655
   3968                                          {
   3969                                            // Is this a BLE Operation?
   3970                                            if ( BLE_Flag )
   \   000043AE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000043B0   0x2D00             CMP      R5,#+0
   \   000043B2   0xD00A             BEQ.N    ??RoadBrd_ParseString_656
   3971                                            {
   3972                                              // Yes...Build and Send BLE Response NOW.
   3973                                              strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSB_BADPARAM</STATUS>");
   \   000043B4   0x.... 0x....      LDR.W    R1,??DataTable4_29
   \   000043B8   0xA80A             ADD      R0,SP,#+40
   \   000043BA   0x.... 0x....      BL       strcpy
   3974                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000043BE   0xA80A             ADD      R0,SP,#+40
   \   000043C0   0x.... 0x....      BL       strlen
   \   000043C4   0xA90A             ADD      R1,SP,#+40
   \   000043C6   0x.... 0x....      BL       BGM111_Transmit
   3975                                            }
   3976                                            strcpy( (char *)tempBffr2, "TKSB SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_656: (+1)
   \   000043CA   0x.... 0x....      LDR.W    R1,??DataTable4_30
   \   000043CE   0xA80A             ADD      R0,SP,#+40
   \   000043D0   0x.... 0x....      BL       strcpy
   \   000043D4   0xE03A             B.N      ??RoadBrd_ParseString_650
   3977                                          }
   3978                                          else
   3979                                          {
   3980                                            // 3. Grab remaining string and convert to integer.
   3981                                            tempPstr = &tempBffr[5];
   \                     ??RoadBrd_ParseString_655: (+1)
   \   000043D6   0x1D60             ADDS     R0,R4,#+5
   \   000043D8   0x9030             STR      R0,[SP, #+192]
   3982                                            strcpy(tempstr, tempPstr);
   \   000043DA   0x9930             LDR      R1,[SP, #+192]
   \   000043DC   0xA852             ADD      R0,SP,#+328
   \   000043DE   0x.... 0x....      BL       strcpy
   3983                                            new_value = atoi( tempstr );
   \   000043E2   0xA852             ADD      R0,SP,#+328
   \   000043E4   0x.... 0x....      BL       atoi
   \   000043E8   0x902F             STR      R0,[SP, #+188]
   3984                                            if((new_value > 999) ||
   3985                                               (new_value < 0))
   \   000043EA   0x982F             LDR      R0,[SP, #+188]
   \   000043EC   0xF5B0 0x7F7A      CMP      R0,#+1000
   \   000043F0   0xDA02             BGE.N    ??RoadBrd_ParseString_657
   \   000043F2   0x982F             LDR      R0,[SP, #+188]
   \   000043F4   0x2800             CMP      R0,#+0
   \   000043F6   0xD513             BPL.N    ??RoadBrd_ParseString_658
   3986                                            {
   3987                                              // Is this a BLE Operation?
   3988                                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_657: (+1)
   \   000043F8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000043FA   0x2D00             CMP      R5,#+0
   \   000043FC   0xD00A             BEQ.N    ??RoadBrd_ParseString_659
   3989                                              {
   3990                                                // Yes...Build and Send BLE Response NOW.
   3991                                                strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSB_BADPARAM</STATUS>");
   \   000043FE   0x.... 0x....      LDR.W    R1,??DataTable4_29
   \   00004402   0xA80A             ADD      R0,SP,#+40
   \   00004404   0x.... 0x....      BL       strcpy
   3992                                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004408   0xA80A             ADD      R0,SP,#+40
   \   0000440A   0x.... 0x....      BL       strlen
   \   0000440E   0xA90A             ADD      R1,SP,#+40
   \   00004410   0x.... 0x....      BL       BGM111_Transmit
   3993                                              }
   3994                                              strcpy( (char *)tempBffr2, "TKSB SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_659: (+1)
   \   00004414   0x.... 0x....      LDR.W    R1,??DataTable4_30
   \   00004418   0xA80A             ADD      R0,SP,#+40
   \   0000441A   0x.... 0x....      BL       strcpy
   \   0000441E   0xE015             B.N      ??RoadBrd_ParseString_650
   3995                                            }
   3996                                            else
   3997                                            {
   3998                                              // Time to set new Boot Delay.
   3999                                              RoadBrd_Set_BootDelay( new_value );
   \                     ??RoadBrd_ParseString_658: (+1)
   \   00004420   0x982F             LDR      R0,[SP, #+188]
   \   00004422   0x.... 0x....      BL       RoadBrd_Set_BootDelay
   4000                                              // Is this a BLE Operation?
   4001                                              if ( BLE_Flag )
   \   00004426   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004428   0x2D00             CMP      R5,#+0
   \   0000442A   0xD00A             BEQ.N    ??RoadBrd_ParseString_660
   4002                                              {
   4003                                                // Yes...Build and Send BLE Response NOW.
   4004                                                strcpy( (char *)tempBffr2, "<STATUS>ST_TKSB_ACK</STATUS>");
   \   0000442C   0x.... 0x....      LDR.W    R1,??DataTable4_31
   \   00004430   0xA80A             ADD      R0,SP,#+40
   \   00004432   0x.... 0x....      BL       strcpy
   4005                                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004436   0xA80A             ADD      R0,SP,#+40
   \   00004438   0x.... 0x....      BL       strlen
   \   0000443C   0xA90A             ADD      R1,SP,#+40
   \   0000443E   0x.... 0x....      BL       BGM111_Transmit
   4006                                              }
   4007                                              // NOW, Build Data String..
   4008                                              sprintf( (char *)tempBffr2, "COMPLETE" );
   \                     ??RoadBrd_ParseString_660: (+1)
   \   00004442   0x.... 0x....      LDR.W    R1,??DataTable4_16
   \   00004446   0xA80A             ADD      R0,SP,#+40
   \   00004448   0x.... 0x....      BL       sprintf
   4009                                            } // EndElse ((new_value > 999) || (new_value < 0))
   4010                                          } // EndElse (flag == 0)
   4011                                        } // EndElse (tempBffr[4]!=':')
   4012                                        break;
   \                     ??RoadBrd_ParseString_650: (+1)
   \   0000444C   0xE004             B.N      ??RoadBrd_ParseString_621
   4013                                      default:
   4014                                        strcpy( (char *)tempBffr2, "TKS ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_607: (+1)
   \   0000444E   0x.... 0x....      LDR.W    R1,??DataTable4_32
   \   00004452   0xA80A             ADD      R0,SP,#+40
   \   00004454   0x.... 0x....      BL       strcpy
   4015                                        break;
   4016                                    } // EndSwitch ( tempBffr[3] )
   4017                                    break;
   \                     ??RoadBrd_ParseString_621: (+1)
   \   00004458   0xE0CD             B.N      ??RoadBrd_ParseString_599
   \   0000445A   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_555:
   \   0000445C   0x........         DC32     ?_256
   \   00004460   0x........         DC32     ?_257
   4018          //------------------
   4019                                  case 'R':
   4020                                    //Key Flash Variable Read Command
   4021                                    switch( tempBffr[3] )
   \                     ??RoadBrd_ParseString_600: (+1)
   \   00004464   0x78E0             LDRB     R0,[R4, #+3]
   \   00004466   0x2842             CMP      R0,#+66
   \   00004468   0xF000 0x8080      BEQ.W    ??RoadBrd_ParseString_661
   \   0000446C   0x2852             CMP      R0,#+82
   \   0000446E   0xD004             BEQ.N    ??RoadBrd_ParseString_662
   \   00004470   0x2853             CMP      R0,#+83
   \   00004472   0xD031             BEQ.N    ??RoadBrd_ParseString_663
   \   00004474   0x2854             CMP      R0,#+84
   \   00004476   0xD05D             BEQ.N    ??RoadBrd_ParseString_664
   \   00004478   0xE092             B.N      ??RoadBrd_ParseString_665
   4022                                    {
   4023          //------------------
   4024                                      case 'R':
   4025                                        //Key Flash Variable Read Road Sound Sample Rate Command.
   4026                                        // Is this a BLE Operation?
   4027                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_662: (+1)
   \   0000447A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000447C   0x2D00             CMP      R5,#+0
   \   0000447E   0xD016             BEQ.N    ??RoadBrd_ParseString_666
   4028                                        {
   4029                                          // Yes...Build and Send BLE Response NOW.
   4030                                          sprintf( (char *)tempBffr2, "<STATUS>ST_TKRR:%3.1f</STATUS>", ((float)RoadBrd_Get_RdSndTickCnt()/10));
   \   00004480   0x.... 0x....      BL       RoadBrd_Get_RdSndTickCnt
   \   00004484   0x.... 0x....      BL       __aeabi_ui2f
   \   00004488   0x.... 0x....      LDR.W    R1,??DataTable4_33  ;; 0x41200000
   \   0000448C   0x.... 0x....      BL       __aeabi_fdiv
   \   00004490   0x.... 0x....      BL       __aeabi_f2d
   \   00004494   0x0002             MOVS     R2,R0
   \   00004496   0x000B             MOVS     R3,R1
   \   00004498   0x.... 0x....      LDR.W    R1,??DataTable4_34
   \   0000449C   0xA80A             ADD      R0,SP,#+40
   \   0000449E   0x.... 0x....      BL       sprintf
   4031                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000044A2   0xA80A             ADD      R0,SP,#+40
   \   000044A4   0x.... 0x....      BL       strlen
   \   000044A8   0xA90A             ADD      R1,SP,#+40
   \   000044AA   0x.... 0x....      BL       BGM111_Transmit
   4032                                        }
   4033                                        sprintf( (char *)tempBffr2, "RdSnd Sample Rate:  %3.1f Seconds.\r\n", ((float)RoadBrd_Get_RdSndTickCnt()/10));
   \                     ??RoadBrd_ParseString_666: (+1)
   \   000044AE   0x.... 0x....      BL       RoadBrd_Get_RdSndTickCnt
   \   000044B2   0x.... 0x....      BL       __aeabi_ui2f
   \   000044B6   0x.... 0x....      LDR.W    R1,??DataTable4_33  ;; 0x41200000
   \   000044BA   0x.... 0x....      BL       __aeabi_fdiv
   \   000044BE   0x.... 0x....      BL       __aeabi_f2d
   \   000044C2   0x0002             MOVS     R2,R0
   \   000044C4   0x000B             MOVS     R3,R1
   \   000044C6   0x.... 0x....      LDR.W    R1,??DataTable4_35
   \   000044CA   0xA80A             ADD      R0,SP,#+40
   \   000044CC   0x.... 0x....      BL       sprintf
   4034                                        break;
   \   000044D0   0xE079             B.N      ??RoadBrd_ParseString_667
   \   000044D2   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_557:
   \   000044D4   0x........         DC32     ?_258
   4035          //------------------
   4036                                      case 'S':
   4037                                        //Key Flash Variable Read Sensor Sample Rate Command.
   4038                                        // Is this a BLE Operation?
   4039                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_663: (+1)
   \   000044D8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000044DA   0x2D00             CMP      R5,#+0
   \   000044DC   0xD016             BEQ.N    ??RoadBrd_ParseString_668
   4040                                        {
   4041                                          // Yes...Build and Send BLE Response NOW.
   4042                                          sprintf( (char *)tempBffr2, "<STATUS>ST_TKRS:%3.1f</STATUS>", ((float)RoadBrd_Get_SnsrTickCnt()/10));
   \   000044DE   0x.... 0x....      BL       RoadBrd_Get_SnsrTickCnt
   \   000044E2   0x.... 0x....      BL       __aeabi_ui2f
   \   000044E6   0x.... 0x....      LDR.W    R1,??DataTable4_33  ;; 0x41200000
   \   000044EA   0x.... 0x....      BL       __aeabi_fdiv
   \   000044EE   0x.... 0x....      BL       __aeabi_f2d
   \   000044F2   0x0002             MOVS     R2,R0
   \   000044F4   0x000B             MOVS     R3,R1
   \   000044F6   0x.... 0x....      LDR.W    R1,??DataTable4_36
   \   000044FA   0xA80A             ADD      R0,SP,#+40
   \   000044FC   0x.... 0x....      BL       sprintf
   4043                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004500   0xA80A             ADD      R0,SP,#+40
   \   00004502   0x.... 0x....      BL       strlen
   \   00004506   0xA90A             ADD      R1,SP,#+40
   \   00004508   0x.... 0x....      BL       BGM111_Transmit
   4044                                        }
   4045                                        sprintf( (char *)tempBffr2, "Sensor Sample Rate: %3.1f Seconds.\r\n\r\n> ", ((float)RoadBrd_Get_SnsrTickCnt()/10));
   \                     ??RoadBrd_ParseString_668: (+1)
   \   0000450C   0x.... 0x....      BL       RoadBrd_Get_SnsrTickCnt
   \   00004510   0x.... 0x....      BL       __aeabi_ui2f
   \   00004514   0x.... 0x....      LDR.W    R1,??DataTable4_33  ;; 0x41200000
   \   00004518   0x.... 0x....      BL       __aeabi_fdiv
   \   0000451C   0x.... 0x....      BL       __aeabi_f2d
   \   00004520   0x0002             MOVS     R2,R0
   \   00004522   0x000B             MOVS     R3,R1
   \   00004524   0x.... 0x....      LDR.W    R1,??DataTable4_37
   \   00004528   0xA80A             ADD      R0,SP,#+40
   \   0000452A   0x.... 0x....      BL       sprintf
   4046                                        break;
   \   0000452E   0xE04A             B.N      ??RoadBrd_ParseString_667
   \                     ??RoadBrd_ParseString_559:
   \   00004530   0x........         DC32     ?_259
   4047          //------------------
   4048                                      case 'T':
   4049                                        //Key Flash Variable Read TACK Limit(Multiple of Road Sound Throttles).
   4050                                        // Is this a BLE Operation?
   4051                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_664: (+1)
   \   00004534   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004536   0x2D00             CMP      R5,#+0
   \   00004538   0xD00D             BEQ.N    ??RoadBrd_ParseString_669
   4052                                        {
   4053                                          // Yes...Build and Send BLE Response NOW.
   4054                                          sprintf( (char *)tempBffr2, "<STATUS>ST_TKRT:%d</STATUS>", RoadBrd_Get_TackLimit());
   \   0000453A   0x.... 0x....      BL       RoadBrd_Get_TackLimit
   \   0000453E   0x0002             MOVS     R2,R0
   \   00004540   0x.... 0x....      LDR.W    R1,??DataTable4_38
   \   00004544   0xA80A             ADD      R0,SP,#+40
   \   00004546   0x.... 0x....      BL       sprintf
   4055                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000454A   0xA80A             ADD      R0,SP,#+40
   \   0000454C   0x.... 0x....      BL       strlen
   \   00004550   0xA90A             ADD      R1,SP,#+40
   \   00004552   0x.... 0x....      BL       BGM111_Transmit
   4056                                        }
   4057                                        sprintf( (char *)tempBffr2, "TACK Limit: %d.\r\n\r\n> ", RoadBrd_Get_TackLimit());
   \                     ??RoadBrd_ParseString_669: (+1)
   \   00004556   0x.... 0x....      BL       RoadBrd_Get_TackLimit
   \   0000455A   0x0002             MOVS     R2,R0
   \   0000455C   0x.... 0x....      LDR.W    R1,??DataTable4_39
   \   00004560   0xA80A             ADD      R0,SP,#+40
   \   00004562   0x.... 0x....      BL       sprintf
   4058                                        break;
   \   00004566   0xE02E             B.N      ??RoadBrd_ParseString_667
   \                     ??RoadBrd_ParseString_560:
   \   00004568   0x........         DC32     ?_260
   4059          //------------------
   4060                                      case 'B':
   4061                                        //Key Flash Variable Read Boot Delay.(Seconds).
   4062                                        // Is this a BLE Operation?
   4063                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_661: (+1)
   \   0000456C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000456E   0x2D00             CMP      R5,#+0
   \   00004570   0xD00D             BEQ.N    ??RoadBrd_ParseString_670
   4064                                        {
   4065                                          // Yes...Build and Send BLE Response NOW.
   4066                                          sprintf( (char *)tempBffr2, "<STATUS>ST_TKRB:%d</STATUS>", RoadBrd_Get_BootDelay());
   \   00004572   0x.... 0x....      BL       RoadBrd_Get_BootDelay
   \   00004576   0x0002             MOVS     R2,R0
   \   00004578   0x.... 0x....      LDR.W    R1,??DataTable4_40
   \   0000457C   0xA80A             ADD      R0,SP,#+40
   \   0000457E   0x.... 0x....      BL       sprintf
   4067                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004582   0xA80A             ADD      R0,SP,#+40
   \   00004584   0x.... 0x....      BL       strlen
   \   00004588   0xA90A             ADD      R1,SP,#+40
   \   0000458A   0x.... 0x....      BL       BGM111_Transmit
   4068                                        }
   4069                                        sprintf( (char *)tempBffr2, "Boot Delay: %d Seconds.\r\n\r\n> ", RoadBrd_Get_BootDelay());
   \                     ??RoadBrd_ParseString_670: (+1)
   \   0000458E   0x.... 0x....      BL       RoadBrd_Get_BootDelay
   \   00004592   0x0002             MOVS     R2,R0
   \   00004594   0x.... 0x....      LDR.W    R1,??DataTable4_41
   \   00004598   0xA80A             ADD      R0,SP,#+40
   \   0000459A   0x.... 0x....      BL       sprintf
   4070                                        break;
   \   0000459E   0xE012             B.N      ??RoadBrd_ParseString_667
   4071                                      default:
   4072                                        // Is this a BLE Operation?
   4073                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_665: (+1)
   \   000045A0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000045A2   0x2D00             CMP      R5,#+0
   \   000045A4   0xD00A             BEQ.N    ??RoadBrd_ParseString_671
   4074                                        {
   4075                                          // Yes...Build and Send BLE Response NOW.
   4076                                          strcpy( (char *)tempBffr2, "<STATUS>CMD_TKR_SYNTAX</STATUS>");
   \   000045A6   0x.... 0x....      LDR.W    R1,??DataTable4_42
   \   000045AA   0xA80A             ADD      R0,SP,#+40
   \   000045AC   0x.... 0x....      BL       strcpy
   4077                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000045B0   0xA80A             ADD      R0,SP,#+40
   \   000045B2   0x.... 0x....      BL       strlen
   \   000045B6   0xA90A             ADD      R1,SP,#+40
   \   000045B8   0x.... 0x....      BL       BGM111_Transmit
   4078                                        }
   4079                                        strcpy( (char *)tempBffr2, "TKR ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_671: (+1)
   \   000045BC   0x.... 0x....      LDR.W    R1,??DataTable4_43
   \   000045C0   0xA80A             ADD      R0,SP,#+40
   \   000045C2   0x.... 0x....      BL       strcpy
   4080                                        break;
   4081                                    } // EndSwitch ( tempBffr[3] )
   4082                                    break;
   \                     ??RoadBrd_ParseString_667: (+1)
   \   000045C6   0xE016             B.N      ??RoadBrd_ParseString_599
   \                     ??RoadBrd_ParseString_562:
   \   000045C8   0x........         DC32     ?_261
   \   000045CC   0x........         DC32     ?_262
   4083                                    // Is this a BLE Operation?
   4084                                  default:
   4085                                    if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_601: (+1)
   \   000045D0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000045D2   0x2D00             CMP      R5,#+0
   \   000045D4   0xD00A             BEQ.N    ??RoadBrd_ParseString_672
   4086                                    {
   4087                                      // Yes...Build and Send BLE Response NOW.
   4088                                      strcpy( (char *)tempBffr2, "<STATUS>CMD_TK_SYNTAX</STATUS>");
   \   000045D6   0x.... 0x....      LDR.W    R1,??DataTable4_9
   \   000045DA   0xA80A             ADD      R0,SP,#+40
   \   000045DC   0x.... 0x....      BL       strcpy
   4089                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000045E0   0xA80A             ADD      R0,SP,#+40
   \   000045E2   0x.... 0x....      BL       strlen
   \   000045E6   0xA90A             ADD      R1,SP,#+40
   \   000045E8   0x.... 0x....      BL       BGM111_Transmit
   4090                                    }
   4091                                    strcpy( (char *)tempBffr2, "ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_672: (+1)
   \   000045EC   0x.... 0x....      LDR.W    R1,??DataTable4_44
   \   000045F0   0xA80A             ADD      R0,SP,#+40
   \   000045F2   0x.... 0x....      BL       strcpy
   4092                                    break;
   4093                                } //EndSwitch ( tempBffr[2] )
   4094                              } //EndElse (Size < 3)
   4095                              break;
   \                     ??RoadBrd_ParseString_599: (+1)
   \   000045F6   0xE118             B.N      ??RoadBrd_ParseString_290
   4096          //++++++++++++++++++++++++++++++++++++++++++  Units Enable/Disable Commands.
   4097                            case 'U':
   4098                              // Key Flash Variable Commands.
   4099                              // Test Size to make sure we have enough Characters for this operation
   4100                              Status = HAL_OK;
   \                     ??RoadBrd_ParseString_300: (+1)
   \   000045F8   0x2000             MOVS     R0,#+0
   \   000045FA   0x0006             MOVS     R6,R0
   4101                              if (Size < 3)
   \   000045FC   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00004600   0xF1B8 0x0F03      CMP      R8,#+3
   \   00004604   0xDA13             BGE.N    ??RoadBrd_ParseString_673
   4102                              {
   4103                                // Is this a BLE Operation?
   4104                                if ( BLE_Flag )
   \   00004606   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004608   0x2D00             CMP      R5,#+0
   \   0000460A   0xD00A             BEQ.N    ??RoadBrd_ParseString_674
   4105                                {
   4106                                  // Yes...Build and Send BLE Response NOW.
   4107                                  strcpy( (char *)tempBffr2, "<STATUS>CMD_TU_SYNTAX</STATUS>");
   \   0000460C   0x.... 0x....      LDR.W    R1,??DataTable4_45
   \   00004610   0xA80A             ADD      R0,SP,#+40
   \   00004612   0x.... 0x....      BL       strcpy
   4108                                  BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004616   0xA80A             ADD      R0,SP,#+40
   \   00004618   0x.... 0x....      BL       strlen
   \   0000461C   0xA90A             ADD      R1,SP,#+40
   \   0000461E   0x.... 0x....      BL       BGM111_Transmit
   4109                                }
   4110                                strcpy( (char *)tempBffr2, "TU SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_674: (+1)
   \   00004622   0x.... 0x....      LDR.W    R1,??DataTable4_46
   \   00004626   0xA80A             ADD      R0,SP,#+40
   \   00004628   0x.... 0x....      BL       strcpy
   \   0000462C   0xE04B             B.N      ??RoadBrd_ParseString_675
   4111                              }
   4112                              else
   4113                              {
   4114                                switch( tempBffr[2] )
   \                     ??RoadBrd_ParseString_673: (+1)
   \   0000462E   0x78A0             LDRB     R0,[R4, #+2]
   \   00004630   0x2844             CMP      R0,#+68
   \   00004632   0xD01B             BEQ.N    ??RoadBrd_ParseString_676
   \   00004634   0x2845             CMP      R0,#+69
   \   00004636   0xD133             BNE.N    ??RoadBrd_ParseString_677
   4115                                {
   4116          //------------------
   4117                                  case 'E':
   4118                                    //Units Enable Command.
   4119                                    // Is this a BLE Operation?
   4120                                    if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_678: (+1)
   \   00004638   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000463A   0x2D00             CMP      R5,#+0
   \   0000463C   0xD00A             BEQ.N    ??RoadBrd_ParseString_679
   4121                                    {
   4122                                      // Yes...Build and Send BLE Response NOW.
   4123                                      strcpy( (char *)tempBffr2, "<STATUS>ST_TUE_ACK</STATUS>");
   \   0000463E   0x.... 0x....      LDR.W    R1,??DataTable4_47
   \   00004642   0xA80A             ADD      R0,SP,#+40
   \   00004644   0x.... 0x....      BL       strcpy
   4124                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004648   0xA80A             ADD      R0,SP,#+40
   \   0000464A   0x.... 0x....      BL       strlen
   \   0000464E   0xA90A             ADD      R1,SP,#+40
   \   00004650   0x.... 0x....      BL       BGM111_Transmit
   4125                                    }
   4126                                    sprintf( (char *)tempBffr2, "Units XML State CHANGED: ENABLED\r\n\r\n> ");
   \                     ??RoadBrd_ParseString_679: (+1)
   \   00004654   0x.... 0x....      LDR.W    R1,??DataTable4_48
   \   00004658   0xA80A             ADD      R0,SP,#+40
   \   0000465A   0x.... 0x....      BL       sprintf
   4127                                    Status = RoadBrd_Set_UnitsFlag( true );
   \   0000465E   0x2001             MOVS     R0,#+1
   \   00004660   0x.... 0x....      BL       RoadBrd_Set_UnitsFlag
   \   00004664   0x0006             MOVS     R6,R0
   4128                                    break;
   \   00004666   0xE02E             B.N      ??RoadBrd_ParseString_675
   \                     ??RoadBrd_ParseString_564:
   \   00004668   0x........         DC32     ?_263
   4129          //------------------
   4130                                  case 'D':
   4131                                    //Units Disable Command
   4132                                    // Is this a BLE Operation?
   4133                                    if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_676: (+1)
   \   0000466C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000466E   0x2D00             CMP      R5,#+0
   \   00004670   0xD00A             BEQ.N    ??RoadBrd_ParseString_680
   4134                                    {
   4135                                      // Yes...Build and Send BLE Response NOW.
   4136                                      strcpy( (char *)tempBffr2, "<STATUS>ST_TUD_ACK</STATUS>");
   \   00004672   0x.... 0x....      LDR.W    R1,??DataTable4_49
   \   00004676   0xA80A             ADD      R0,SP,#+40
   \   00004678   0x.... 0x....      BL       strcpy
   4137                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000467C   0xA80A             ADD      R0,SP,#+40
   \   0000467E   0x.... 0x....      BL       strlen
   \   00004682   0xA90A             ADD      R1,SP,#+40
   \   00004684   0x.... 0x....      BL       BGM111_Transmit
   4138                                    }
   4139                                    sprintf( (char *)tempBffr2, "Units XML State CHANGED: DISABLED\r\n\r\n> ");
   \                     ??RoadBrd_ParseString_680: (+1)
   \   00004688   0x.... 0x....      LDR.W    R1,??DataTable4_50
   \   0000468C   0xA80A             ADD      R0,SP,#+40
   \   0000468E   0x.... 0x....      BL       sprintf
   4140                                    Status = RoadBrd_Set_UnitsFlag( false );
   \   00004692   0x2000             MOVS     R0,#+0
   \   00004694   0x.... 0x....      BL       RoadBrd_Set_UnitsFlag
   \   00004698   0x0006             MOVS     R6,R0
   4141                                    break;
   \   0000469A   0xE014             B.N      ??RoadBrd_ParseString_675
   \                     ??RoadBrd_ParseString_565:
   \   0000469C   0x........         DC32     ?_264
   4142                                  default:
   4143                                    // Is this a BLE Operation?
   4144                                    if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_677: (+1)
   \   000046A0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000046A2   0x2D00             CMP      R5,#+0
   \   000046A4   0xD00A             BEQ.N    ??RoadBrd_ParseString_681
   4145                                    {
   4146                                      // Yes...Build and Send BLE Response NOW.
   4147                                      strcpy( (char *)tempBffr2, "<STATUS>CMD_TU_SYNTAX</STATUS>");
   \   000046A6   0x.... 0x....      LDR.W    R1,??DataTable4_45
   \   000046AA   0xA80A             ADD      R0,SP,#+40
   \   000046AC   0x.... 0x....      BL       strcpy
   4148                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000046B0   0xA80A             ADD      R0,SP,#+40
   \   000046B2   0x.... 0x....      BL       strlen
   \   000046B6   0xA90A             ADD      R1,SP,#+40
   \   000046B8   0x.... 0x....      BL       BGM111_Transmit
   4149                                    }
   4150                                    strcpy( (char *)tempBffr2, "TU SYNTAX ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_681: (+1)
   \   000046BC   0x.... 0x....      LDR.W    R1,??DataTable4_51
   \   000046C0   0xA80A             ADD      R0,SP,#+40
   \   000046C2   0x.... 0x....      BL       strcpy
   4151                                    break;
   4152                                } //EndSwitch ( tempBffr[2] )
   4153                              } //EndElse (Size < 3)
   4154                              break;
   \                     ??RoadBrd_ParseString_675: (+1)
   \   000046C6   0xE0B0             B.N      ??RoadBrd_ParseString_290
   4155          //++++++++++++++++++++++++++++++++++++++++++  Special Monitor Mode to intercept traffic from UART and pass to BGM111
   4156                            case 'M':
   4157                              // Is this a BLE Operation?
   4158                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_297: (+1)
   \   000046C8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000046CA   0x2D00             CMP      R5,#+0
   \   000046CC   0xD00A             BEQ.N    ??RoadBrd_ParseString_682
   4159                              {
   4160                                // Yes...Build and Send BLE Response NOW.
   4161                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000046CE   0x.... 0x....      LDR.W    R1,??DataTable4_52
   \   000046D2   0xA80A             ADD      R0,SP,#+40
   \   000046D4   0x.... 0x....      BL       strcpy
   4162                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000046D8   0xA80A             ADD      R0,SP,#+40
   \   000046DA   0x.... 0x....      BL       strlen
   \   000046DE   0xA90A             ADD      R1,SP,#+40
   \   000046E0   0x.... 0x....      BL       BGM111_Transmit
   4163                              }
   4164                              
   4165                              strcpy( (char *)tempBffr2, "BGM111 MONITOR MODE.\r\n\r\n");
   \                     ??RoadBrd_ParseString_682: (+1)
   \   000046E4   0x.... 0x....      LDR.W    R1,??DataTable4_53
   \   000046E8   0xA80A             ADD      R0,SP,#+40
   \   000046EA   0x.... 0x....      BL       strcpy
   4166          #ifdef NUCLEO
   4167                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   4168          #else
   4169                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000046EE   0xA90A             ADD      R1,SP,#+40
   \   000046F0   0x2000             MOVS     R0,#+0
   \   000046F2   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000046F6   0x0006             MOVS     R6,R0
   4170          #endif
   4171                              if (Status != HAL_OK)
   \   000046F8   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000046FA   0x2E00             CMP      R6,#+0
   \   000046FC   0xD004             BEQ.N    ??RoadBrd_ParseString_683
   4172                                return Status;
   \   000046FE   0x0030             MOVS     R0,R6
   \   00004700   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00004702   0xE11E             B.N      ??RoadBrd_ParseString_4
   \                     ??RoadBrd_ParseString_567:
   \   00004704   0x........         DC32     ?_265
   4173                              strcpy( (char *)tempBffr2, "Use <ESC> to exit mode.\r\n\r\n");
   \                     ??RoadBrd_ParseString_683: (+1)
   \   00004708   0x.... 0x....      LDR.W    R1,??DataTable4_54
   \   0000470C   0xA80A             ADD      R0,SP,#+40
   \   0000470E   0x.... 0x....      BL       strcpy
   4174                              // Set Bypass Flag
   4175                              Bypass = true;
   \   00004712   0x2001             MOVS     R0,#+1
   \   00004714   0x.... 0x....      LDR.W    R1,??DataTable4_55
   \   00004718   0x7008             STRB     R0,[R1, #+0]
   4176                              break;
   \   0000471A   0xE086             B.N      ??RoadBrd_ParseString_290
   4177          //++++++++++++++++++++++++++++++++++++++++++  Reset Flash Frame Variables(Factory).
   4178                            case 'F':
   4179                              // Reset Flash Frame Variables.
   4180                              RoadBrd_WWDG_InitializeFrmFlash();
   \                     ??RoadBrd_ParseString_293: (+1)
   \   0000471C   0x.... 0x....      BL       RoadBrd_WWDG_InitializeFrmFlash
   4181                              // Is this a BLE Operation?
   4182                              if ( BLE_Flag )
   \   00004720   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004722   0x2D00             CMP      R5,#+0
   \   00004724   0xD00A             BEQ.N    ??RoadBrd_ParseString_684
   4183                              {
   4184                                // Yes...Build and Send BLE Response NOW.
   4185                                sprintf( (char *)tempBffr2, "<STATUS>TF_ACK</STATUS>" );
   \   00004726   0x.... 0x....      LDR.W    R1,??DataTable4_56
   \   0000472A   0xA80A             ADD      R0,SP,#+40
   \   0000472C   0x.... 0x....      BL       sprintf
   4186                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004730   0xA80A             ADD      R0,SP,#+40
   \   00004732   0x.... 0x....      BL       strlen
   \   00004736   0xA90A             ADD      R1,SP,#+40
   \   00004738   0x.... 0x....      BL       BGM111_Transmit
   4187                              }
   4188                              
   4189                              sprintf( (char *)tempBffr2, "Flash Frame Variables Reset to Factory Values.\r\n" );
   \                     ??RoadBrd_ParseString_684: (+1)
   \   0000473C   0x.... 0x....      LDR.W    R1,??DataTable4_57
   \   00004740   0xA80A             ADD      R0,SP,#+40
   \   00004742   0x.... 0x....      BL       sprintf
   4190                              break;
   \   00004746   0xE070             B.N      ??RoadBrd_ParseString_290
   \                     ??RoadBrd_ParseString_568:
   \   00004748   0x........         DC32     ?_266
   4191          //++++++++++++++++++++++++++++++++++++++++++  Lock Code to allow stable Program of BLE Module.
   4192                            case 'L':
   4193                              // Is this a BLE Operation?
   4194                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_296: (+1)
   \   0000474C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000474E   0x2D00             CMP      R5,#+0
   \   00004750   0xD00B             BEQ.N    ??RoadBrd_ParseString_685
   4195                              {
   4196                                // Yes...Build and Send BLE Response NOW.
   4197                                sprintf( (char *)tempBffr2, "<STATUS>TL_ERROR</STATUS>" );
   \   00004752   0x.... 0x....      LDR.W    R1,??DataTable4_58
   \   00004756   0xA80A             ADD      R0,SP,#+40
   \   00004758   0x.... 0x....      BL       sprintf
   4198                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000475C   0xA80A             ADD      R0,SP,#+40
   \   0000475E   0x.... 0x....      BL       strlen
   \   00004762   0xA90A             ADD      R1,SP,#+40
   \   00004764   0x.... 0x....      BL       BGM111_Transmit
   4199                              }
   4200                              else
   4201                              {
   4202                                sprintf( (char *)tempBffr2, "Code Locked for Programming!\r\n\r\n" );
   4203          #ifdef NUCLEO
   4204                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   4205          #else
   4206                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   4207          #endif
   4208                                if (Status != HAL_OK)
   4209                                  return Status;
   4210                                sprintf( (char *)tempBffr2, "   HARD RESET NEEDED TO EXIT MODE\r\n" );
   4211          #ifdef NUCLEO
   4212                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   4213          #else
   4214                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   4215          #endif
   4216                                if (Status != HAL_OK)
   4217                                  return Status;
   4218                                // Start Hard Loop
   4219                                for (;;)
   4220                                {
   4221                                }
   4222                              }
   4223                              break;
   \   00004768   0xE05F             B.N      ??RoadBrd_ParseString_290
   \                     ??RoadBrd_ParseString_685: (+1)
   \   0000476A   0x.... 0x....      LDR.W    R1,??DataTable4_59
   \   0000476E   0xA80A             ADD      R0,SP,#+40
   \   00004770   0x.... 0x....      BL       sprintf
   \   00004774   0xA90A             ADD      R1,SP,#+40
   \   00004776   0x2000             MOVS     R0,#+0
   \   00004778   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000477C   0x0006             MOVS     R6,R0
   \   0000477E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00004780   0x2E00             CMP      R6,#+0
   \   00004782   0xD002             BEQ.N    ??RoadBrd_ParseString_686
   \   00004784   0x0030             MOVS     R0,R6
   \   00004786   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00004788   0xE0DB             B.N      ??RoadBrd_ParseString_4
   \                     ??RoadBrd_ParseString_686: (+1)
   \   0000478A   0x.... 0x....      LDR.W    R1,??DataTable4_60
   \   0000478E   0xA80A             ADD      R0,SP,#+40
   \   00004790   0x.... 0x....      BL       sprintf
   \   00004794   0xA90A             ADD      R1,SP,#+40
   \   00004796   0x2000             MOVS     R0,#+0
   \   00004798   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000479C   0x0006             MOVS     R6,R0
   \   0000479E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000047A0   0x2E00             CMP      R6,#+0
   \   000047A2   0xD007             BEQ.N    ??RoadBrd_ParseString_687
   \   000047A4   0x0030             MOVS     R0,R6
   \   000047A6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000047A8   0xE0CB             B.N      ??RoadBrd_ParseString_4
   \   000047AA   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_570:
   \   000047AC   0x........         DC32     ?_267
   \   000047B0   0x........         DC32     ?_268
   \                     ??RoadBrd_ParseString_687: (+1)
   \   000047B4   0xE7FE             B.N      ??RoadBrd_ParseString_687
   4224          
   4225          //++++++++++++++++++++++++++++++++++++++++++  S-Record Test Monitor.
   4226                            case 'S':
   4227                              // S-Record Test Monitor.
   4228                              // Is this a BLE Operation?
   4229                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_299: (+1)
   \   000047B6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000047B8   0x2D00             CMP      R5,#+0
   \   000047BA   0xD00C             BEQ.N    ??RoadBrd_ParseString_688
   4230                              {
   4231                                // Yes...Build and Send BLE Response NOW.
   4232                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000047BC   0x....             LDR.N    R1,??DataTable4_52
   \   000047BE   0xA80A             ADD      R0,SP,#+40
   \   000047C0   0x.... 0x....      BL       strcpy
   4233                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000047C4   0xA80A             ADD      R0,SP,#+40
   \   000047C6   0x.... 0x....      BL       strlen
   \   000047CA   0xA90A             ADD      R1,SP,#+40
   \   000047CC   0x.... 0x....      BL       BGM111_Transmit
   4234                                HAL_Delay(100);           // Wait 100ms
   \   000047D0   0x2064             MOVS     R0,#+100
   \   000047D2   0x.... 0x....      BL       HAL_Delay
   4235                              }
   4236                              // Parse Data and extract S-Record.
   4237                              Numbr_Rcrds = sscanf (tempBffr, "%s %s", s_cmd, s_recrd);
   \                     ??RoadBrd_ParseString_688: (+1)
   \   000047D6   0xABFF             ADD      R3,SP,#+1020
   \   000047D8   0x3368             ADDS     R3,R3,#+104
   \   000047DA   0xAAD5             ADD      R2,SP,#+852
   \   000047DC   0x....             LDR.N    R1,??DataTable4_61
   \   000047DE   0x0020             MOVS     R0,R4
   \   000047E0   0x.... 0x....      BL       sscanf
   \   000047E4   0x9047             STR      R0,[SP, #+284]
   4238          //                    if (sscanf (tempBffr, "%s %s", s_cmd, s_recrd) == 2)
   4239                              if (Numbr_Rcrds == 2)
   \   000047E6   0x9847             LDR      R0,[SP, #+284]
   \   000047E8   0x2802             CMP      R0,#+2
   \   000047EA   0xD106             BNE.N    ??RoadBrd_ParseString_689
   4240                              {
   4241                                sprintf( (char *)tempBffr2, "TS: %s\r\n", s_recrd );
   \   000047EC   0xAAFF             ADD      R2,SP,#+1020
   \   000047EE   0x3268             ADDS     R2,R2,#+104
   \   000047F0   0x....             LDR.N    R1,??DataTable4_62
   \   000047F2   0xA80A             ADD      R0,SP,#+40
   \   000047F4   0x.... 0x....      BL       sprintf
   \   000047F8   0xE003             B.N      ??RoadBrd_ParseString_690
   4242                              }
   4243                              else
   4244                              {
   4245                                strcpy( (char *)tempBffr2, "TS SYNTAX ERROR: Too many parameters.\r\n");
   \                     ??RoadBrd_ParseString_689: (+1)
   \   000047FA   0x....             LDR.N    R1,??DataTable4_63
   \   000047FC   0xA80A             ADD      R0,SP,#+40
   \   000047FE   0x.... 0x....      BL       strcpy
   4246                              }
   4247                              break;
   \                     ??RoadBrd_ParseString_690: (+1)
   \   00004802   0xE012             B.N      ??RoadBrd_ParseString_290
   \                     ??RoadBrd_ParseString_572:
   \   00004804   0x........         DC32     ?_269
   4248          //**************************************************************************************************
   4249                            default:
   4250                              // Is this a BLE Operation?
   4251                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_301: (+1)
   \   00004808   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000480A   0x2D00             CMP      R5,#+0
   \   0000480C   0xD009             BEQ.N    ??RoadBrd_ParseString_691
   4252                              {
   4253                                // Yes...Build and Send BLE Response NOW.
   4254                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   0000480E   0x....             LDR.N    R1,??DataTable4_52
   \   00004810   0xA80A             ADD      R0,SP,#+40
   \   00004812   0x.... 0x....      BL       strcpy
   4255                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004816   0xA80A             ADD      R0,SP,#+40
   \   00004818   0x.... 0x....      BL       strlen
   \   0000481C   0xA90A             ADD      R1,SP,#+40
   \   0000481E   0x.... 0x....      BL       BGM111_Transmit
   4256                              }
   4257                              
   4258                              // ERROR if we get here.. 
   4259                              strcpy( (char *)tempBffr2, "ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_691: (+1)
   \   00004822   0x....             LDR.N    R1,??DataTable4_44
   \   00004824   0xA80A             ADD      R0,SP,#+40
   \   00004826   0x.... 0x....      BL       strcpy
   4260                              break;
   4261                           
   4262                          } //EndSwitch ( tempBffr[1] )
   4263                        } //EndElse (Size <= 1)
   4264                        break;
   \                     ??RoadBrd_ParseString_290: (+1)
   \   0000482A   0xE010             B.N      ??RoadBrd_ParseString_27
   4265          #if 0
   4266          //**************************************************************************************************
   4267                      case 'S':
   4268                        // Sleep Mode. 
   4269                        switch( tempBffr[1] )
   4270                        {
   4271          //++++++++++++++++++++++++++++++++++++++++++  5V Power Supply Commands.
   4272                          case 'S':
   4273                            // Is this a BLE Operation?
   4274                            if ( BLE_Flag )
   4275                            {
   4276                              // Yes...Build and Send BLE Response NOW.
   4277                              strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   4278                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   4279                            }
   4280                            
   4281                            strcpy( (char *)tempBffr2, "Micro in Sleep Mode NOW.\r\n");
   4282          #ifdef NUCLEO
   4283                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   4284          #else
   4285                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   4286          #endif
   4287                            if (Status != HAL_OK)
   4288                              return Status;
   4289                            // Sleep Micro NOW!
   4290                            //sleep();
   4291                            break;
   4292                          case 'D':
   4293                            // Is this a BLE Operation?
   4294                            if ( BLE_Flag )
   4295                            {
   4296                              // Yes...Build and Send BLE Response NOW.
   4297                              strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   4298                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   4299                            }
   4300                            
   4301                            // Turn off 5V Power Supply.
   4302                            strcpy( (char *)tempBffr2, "Micro in Deep Sleep Mode NOW.\r\n");
   4303          #ifdef NUCLEO
   4304                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   4305          #else
   4306                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   4307          #endif
   4308                            if (Status != HAL_OK)
   4309                              return Status;
   4310                            // Sleep Micro NOW!
   4311                            //deepsleep();
   4312                            break;
   4313                        }
   4314                        break;
   4315          #endif
   4316          //++++++++++++++++++++++++++++++++++++++++++  Unknown Command.
   4317                      default:
   4318                        // Is this a BLE Operation?
   4319                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_22: (+1)
   \   0000482C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000482E   0x2D00             CMP      R5,#+0
   \   00004830   0xD009             BEQ.N    ??RoadBrd_ParseString_692
   4320                        {
   4321                          // Yes...Build and Send BLE Response NOW.
   4322                          strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00004832   0x....             LDR.N    R1,??DataTable4_52
   \   00004834   0xA80A             ADD      R0,SP,#+40
   \   00004836   0x.... 0x....      BL       strcpy
   4323                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000483A   0xA80A             ADD      R0,SP,#+40
   \   0000483C   0x.... 0x....      BL       strlen
   \   00004840   0xA90A             ADD      R1,SP,#+40
   \   00004842   0x.... 0x....      BL       BGM111_Transmit
   4324                        }
   4325                        
   4326                        // ERROR if we get here.. 
   4327                        strcpy( (char *)tempBffr2, "ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_692: (+1)
   \   00004846   0x....             LDR.N    R1,??DataTable4_44
   \   00004848   0xA80A             ADD      R0,SP,#+40
   \   0000484A   0x.... 0x....      BL       strcpy
   4328                        break;
   4329                      } // EndSwitch
   4330                      
   4331          
   4332                      // Test last I2C Status to determine next msg.
   4333                      switch( Status )
   \                     ??RoadBrd_ParseString_27: (+1)
   \   0000484E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00004850   0x2E00             CMP      R6,#+0
   \   00004852   0xD007             BEQ.N    ??RoadBrd_ParseString_693
   \   00004854   0x2E02             CMP      R6,#+2
   \   00004856   0xD041             BEQ.N    ??RoadBrd_ParseString_694
   \   00004858   0xD305             BCC.N    ??RoadBrd_ParseString_695
   \   0000485A   0x2E03             CMP      R6,#+3
   \   0000485C   0xD045             BEQ.N    ??RoadBrd_ParseString_696
   \   0000485E   0xE04B             B.N      ??RoadBrd_ParseString_697
   \                     ??RoadBrd_ParseString_573:
   \   00004860   0x........         DC32     ?_270
   4334                      {
   4335                        case HAL_OK:
   4336                          break;
   \                     ??RoadBrd_ParseString_693: (+1)
   \   00004864   0xE04E             B.N      ??RoadBrd_ParseString_698
   4337                        case HAL_ERROR:
   4338                          // Determine what kind of error.
   4339                          Err_code = RoadBrd_I2C_GetError();
   \                     ??RoadBrd_ParseString_695: (+1)
   \   00004866   0x.... 0x....      BL       RoadBrd_I2C_GetError
   \   0000486A   0x9046             STR      R0,[SP, #+280]
   4340                          switch( Err_code )
   \   0000486C   0x9846             LDR      R0,[SP, #+280]
   \   0000486E   0x2801             CMP      R0,#+1
   \   00004870   0xD00A             BEQ.N    ??RoadBrd_ParseString_699
   \   00004872   0x2802             CMP      R0,#+2
   \   00004874   0xD00D             BEQ.N    ??RoadBrd_ParseString_700
   \   00004876   0x2804             CMP      R0,#+4
   \   00004878   0xD010             BEQ.N    ??RoadBrd_ParseString_701
   \   0000487A   0x2808             CMP      R0,#+8
   \   0000487C   0xD016             BEQ.N    ??RoadBrd_ParseString_702
   \   0000487E   0x2810             CMP      R0,#+16
   \   00004880   0xD019             BEQ.N    ??RoadBrd_ParseString_703
   \   00004882   0x2820             CMP      R0,#+32
   \   00004884   0xD01C             BEQ.N    ??RoadBrd_ParseString_704
   \   00004886   0xE020             B.N      ??RoadBrd_ParseString_705
   4341                          {
   4342                            case HAL_I2C_ERROR_BERR:
   4343                              strcpy( (char *)tempBffr2, "I2C ERROR: BERR: Bus Error reported.\r\n");
   \                     ??RoadBrd_ParseString_699: (+1)
   \   00004888   0x....             LDR.N    R1,??DataTable4_64
   \   0000488A   0xA80A             ADD      R0,SP,#+40
   \   0000488C   0x.... 0x....      BL       strcpy
   4344                              break;
   \   00004890   0xE01F             B.N      ??RoadBrd_ParseString_706
   4345                            case HAL_I2C_ERROR_ARLO:
   4346                              strcpy( (char *)tempBffr2, "I2C ERROR: ARLO: Arbitration lost reported.\r\n");
   \                     ??RoadBrd_ParseString_700: (+1)
   \   00004892   0x....             LDR.N    R1,??DataTable4_65
   \   00004894   0xA80A             ADD      R0,SP,#+40
   \   00004896   0x.... 0x....      BL       strcpy
   4347                              break;
   \   0000489A   0xE01A             B.N      ??RoadBrd_ParseString_706
   4348                            case HAL_I2C_ERROR_AF:
   4349                              strcpy( (char *)tempBffr2, "I2C ERROR: AF: Acknowledge failure reported.\r\n");
   \                     ??RoadBrd_ParseString_701: (+1)
   \   0000489C   0x....             LDR.N    R1,??DataTable4_66
   \   0000489E   0xA80A             ADD      R0,SP,#+40
   \   000048A0   0x.... 0x....      BL       strcpy
   4350                              break;
   \   000048A4   0xE015             B.N      ??RoadBrd_ParseString_706
   \   000048A6   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_575:
   \   000048A8   0x........         DC32     ?_271
   4351                            case HAL_I2C_ERROR_OVR:
   4352                              strcpy( (char *)tempBffr2, "I2C ERROR: OVR: Overrun/Underrun reported.\r\n");
   \                     ??RoadBrd_ParseString_702: (+1)
   \   000048AC   0x....             LDR.N    R1,??DataTable4_67
   \   000048AE   0xA80A             ADD      R0,SP,#+40
   \   000048B0   0x.... 0x....      BL       strcpy
   4353                              break;
   \   000048B4   0xE00D             B.N      ??RoadBrd_ParseString_706
   4354                            case HAL_I2C_ERROR_DMA:
   4355                              strcpy( (char *)tempBffr2, "I2C ERROR: DMA: DMA Error reported.\r\n");
   \                     ??RoadBrd_ParseString_703: (+1)
   \   000048B6   0x....             LDR.N    R1,??DataTable4_68
   \   000048B8   0xA80A             ADD      R0,SP,#+40
   \   000048BA   0x.... 0x....      BL       strcpy
   4356                              break;
   \   000048BE   0xE008             B.N      ??RoadBrd_ParseString_706
   4357                            case HAL_I2C_ERROR_TIMEOUT:
   4358                              strcpy( (char *)tempBffr2, "I2C ERROR: TIMEOUT: Timeout Error reported.\r\n");
   \                     ??RoadBrd_ParseString_704: (+1)
   \   000048C0   0x....             LDR.N    R1,??DataTable4_69
   \   000048C2   0xA80A             ADD      R0,SP,#+40
   \   000048C4   0x.... 0x....      BL       strcpy
   4359                              break;
   \   000048C8   0xE003             B.N      ??RoadBrd_ParseString_706
   4360                            default:
   4361                              strcpy( (char *)tempBffr2, "I2C ERROR: Unknown Error reported.\r\n");
   \                     ??RoadBrd_ParseString_705: (+1)
   \   000048CA   0x....             LDR.N    R1,??DataTable4_70
   \   000048CC   0xA80A             ADD      R0,SP,#+40
   \   000048CE   0x.... 0x....      BL       strcpy
   4362                              break;
   4363                           
   4364                          }
   4365                          // Re-Initialize I2C....It has been corrupted.
   4366                          MX_I2C1_Reset();
   \                     ??RoadBrd_ParseString_706: (+1)
   \   000048D2   0x.... 0x....      BL       MX_I2C1_Reset
   4367                          break;
   \   000048D6   0xE015             B.N      ??RoadBrd_ParseString_698
   \                     ??RoadBrd_ParseString_576:
   \   000048D8   0x........         DC32     ?_272
   4368                        case HAL_BUSY:
   4369                          strcpy( (char *)tempBffr2, "I2C BUSY: I2C reported BUSY error.\r\n");
   \                     ??RoadBrd_ParseString_694: (+1)
   \   000048DC   0x....             LDR.N    R1,??DataTable4_71
   \   000048DE   0xA80A             ADD      R0,SP,#+40
   \   000048E0   0x.... 0x....      BL       strcpy
   4370                          // Re-Initialize I2C....It has been corrupted.
   4371                          MX_I2C1_Reset();
   \   000048E4   0x.... 0x....      BL       MX_I2C1_Reset
   4372                          break;
   \   000048E8   0xE00C             B.N      ??RoadBrd_ParseString_698
   4373                        case HAL_TIMEOUT:
   4374                          strcpy( (char *)tempBffr2, "I2C TIMEOUT: I2C reported TIMEOUT.\r\n");
   \                     ??RoadBrd_ParseString_696: (+1)
   \   000048EA   0x....             LDR.N    R1,??DataTable4_72
   \   000048EC   0xA80A             ADD      R0,SP,#+40
   \   000048EE   0x.... 0x....      BL       strcpy
   4375                          // Re-Initialize I2C....It has been corrupted.
   4376                          MX_I2C1_Reset();
   \   000048F2   0x.... 0x....      BL       MX_I2C1_Reset
   4377                          break;
   \   000048F6   0xE005             B.N      ??RoadBrd_ParseString_698
   4378                        default:  
   4379                          strcpy( (char *)tempBffr2, "I2C ERROR: I2C reported unnown error.\r\n");
   \                     ??RoadBrd_ParseString_697: (+1)
   \   000048F8   0x....             LDR.N    R1,??DataTable4_73
   \   000048FA   0xA80A             ADD      R0,SP,#+40
   \   000048FC   0x.... 0x....      BL       strcpy
   4380                          // Re-Initialize I2C....It has been corrupted.
   4381                          MX_I2C1_Reset();
   \   00004900   0x.... 0x....      BL       MX_I2C1_Reset
   4382                          break;
   4383                      }
   4384                      // Send string to UART..
   4385          #ifdef NUCLEO
   4386                      Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);
   4387          #else
   4388                      Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \                     ??RoadBrd_ParseString_698: (+1)
   \   00004904   0xA90A             ADD      R1,SP,#+40
   \   00004906   0x2000             MOVS     R0,#+0
   \   00004908   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000490C   0x0006             MOVS     R6,R0
   4389          #endif
   4390                     if (Status != HAL_OK)
   \   0000490E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00004910   0x2E00             CMP      R6,#+0
   \   00004912   0xD005             BEQ.N    ??RoadBrd_ParseString_707
   4391                        return Status;
   \   00004914   0x0030             MOVS     R0,R6
   \   00004916   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00004918   0xE013             B.N      ??RoadBrd_ParseString_4
   \   0000491A   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_578:
   \   0000491C   0x........         DC32     ?_273
   4392                      // Send Prompt to UART..
   4393                      strcpy( (char *)tempBffr2, "\r\n\r\n> ");
   \                     ??RoadBrd_ParseString_707: (+1)
   \   00004920   0x....             LDR.N    R1,??DataTable4_74
   \   00004922   0xA80A             ADD      R0,SP,#+40
   \   00004924   0x.... 0x....      BL       strcpy
   4394          #ifdef NUCLEO
   4395                      Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);
   4396          #else
   4397                      Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00004928   0xA90A             ADD      R1,SP,#+40
   \   0000492A   0x2000             MOVS     R0,#+0
   \   0000492C   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00004930   0x0006             MOVS     R6,R0
   4398          #endif
   4399                      if (Status != HAL_OK)
   \   00004932   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00004934   0x2E00             CMP      R6,#+0
   \   00004936   0xD002             BEQ.N    ??RoadBrd_ParseString_3
   4400                        return Status;
   \   00004938   0x0030             MOVS     R0,R6
   \   0000493A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000493C   0xE001             B.N      ??RoadBrd_ParseString_4
   4401              } // EndElse ( Bypass )
   4402            return Status;
   \                     ??RoadBrd_ParseString_3: (+1)
   \   0000493E   0x0030             MOVS     R0,R6
   \   00004940   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??RoadBrd_ParseString_4: (+1)
   \   00004942   0xF50D 0x6D80      ADD      SP,SP,#+1024
   \   00004946   0xB037             ADD      SP,SP,#+220
   \   00004948   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   4403          }
   4404          
   4405          /**
   4406            * @brief  This function tests the passed string to make sure it is Hex format.
   4407            * @param  char *ptr: Ptr to string to be tested. NULL terminated
   4408            * @retval int: 1: String is HEX.
   4409            *              0:   String is not HEX.
   4410            */

   \                                 In section .text, align 2, keep-with-next
   4411          int isHexNum(char *ptr)
   4412          {
   \                     isHexNum: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   4413            int Size, x, test1;
   4414            
   4415            Size = strlen(ptr);
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       strlen
   \   0000000A   0x0005             MOVS     R5,R0
   4416            test1 = 0;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x0007             MOVS     R7,R0
   4417            for (x=0; x<Size; x++)
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x0006             MOVS     R6,R0
   \                     ??isHexNum_0: (+1)
   \   00000014   0x42AE             CMP      R6,R5
   \   00000016   0xDA16             BGE.N    ??isHexNum_1
   4418            {
   4419              if (((ptr[x] <= '9') && (ptr[x] >= '0')) ||
   4420                  ((ptr[x] <= 'F') && (ptr[x] >= 'A')))
   \   00000018   0x5DA0             LDRB     R0,[R4, R6]
   \   0000001A   0x283A             CMP      R0,#+58
   \   0000001C   0xDA02             BGE.N    ??isHexNum_2
   \   0000001E   0x5DA0             LDRB     R0,[R4, R6]
   \   00000020   0x2830             CMP      R0,#+48
   \   00000022   0xDA05             BGE.N    ??isHexNum_3
   \                     ??isHexNum_2: (+1)
   \   00000024   0x5DA0             LDRB     R0,[R4, R6]
   \   00000026   0x2847             CMP      R0,#+71
   \   00000028   0xDA05             BGE.N    ??isHexNum_4
   \   0000002A   0x5DA0             LDRB     R0,[R4, R6]
   \   0000002C   0x2841             CMP      R0,#+65
   \   0000002E   0xDB02             BLT.N    ??isHexNum_4
   4421                test1 = 0;
   \                     ??isHexNum_3: (+1)
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x0007             MOVS     R7,R0
   \   00000034   0xE001             B.N      ??isHexNum_5
   4422              else
   4423                test1 = 1;
   \                     ??isHexNum_4: (+1)
   \   00000036   0x2001             MOVS     R0,#+1
   \   00000038   0x0007             MOVS     R7,R0
   4424              if (test1 == 1)
   \                     ??isHexNum_5: (+1)
   \   0000003A   0x2F01             CMP      R7,#+1
   \   0000003C   0xD101             BNE.N    ??isHexNum_6
   4425                return 0;
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0xE002             B.N      ??isHexNum_7
   4426            }
   \                     ??isHexNum_6: (+1)
   \   00000042   0x1C76             ADDS     R6,R6,#+1
   \   00000044   0xE7E6             B.N      ??isHexNum_0
   4427            return 1;
   \                     ??isHexNum_1: (+1)
   \   00000046   0x2001             MOVS     R0,#+1
   \                     ??isHexNum_7: (+1)
   \   00000048   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
   4428          }
   4429          
   4430          /**
   4431            * @brief  This function converts the passed Hex String to an Integer value.
   4432            * @param  char *ptr: Ptr to string to be converted. NULL terminated
   4433            * @retval int: -1: Error in String
   4434            *              Value converted returned.
   4435            */

   \                                 In section .text, align 2, keep-with-next
   4436          int hatoi( char *ptr )
   4437          {
   \                     hatoi: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   4438            int Size, x;
   4439            int Value = 0;
   \   00000006   0x2700             MOVS     R7,#+0
   4440            int FinalValue = 0;
   \   00000008   0xF05F 0x0800      MOVS     R8,#+0
   4441            
   4442            Size = strlen(ptr);
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       strlen
   \   00000012   0x0005             MOVS     R5,R0
   4443            for (x=0; x<Size; x++)
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x0006             MOVS     R6,R0
   \                     ??hatoi_0: (+1)
   \   00000018   0x42AE             CMP      R6,R5
   \   0000001A   0xDA1A             BGE.N    ??hatoi_1
   4444            {
   4445              if ((ptr[x] <= '9') && (ptr[x] >= '0'))
   \   0000001C   0x5DA0             LDRB     R0,[R4, R6]
   \   0000001E   0x283A             CMP      R0,#+58
   \   00000020   0xDA06             BGE.N    ??hatoi_2
   \   00000022   0x5DA0             LDRB     R0,[R4, R6]
   \   00000024   0x2830             CMP      R0,#+48
   \   00000026   0xDB03             BLT.N    ??hatoi_2
   4446                Value = ptr[x] - '0';
   \   00000028   0x5DA0             LDRB     R0,[R4, R6]
   \   0000002A   0x3830             SUBS     R0,R0,#+48
   \   0000002C   0x0007             MOVS     R7,R0
   \   0000002E   0xE00C             B.N      ??hatoi_3
   4447              else if((ptr[x] <= 'F') && (ptr[x] >= 'A'))
   \                     ??hatoi_2: (+1)
   \   00000030   0x5DA0             LDRB     R0,[R4, R6]
   \   00000032   0x2847             CMP      R0,#+71
   \   00000034   0xDA06             BGE.N    ??hatoi_4
   \   00000036   0x5DA0             LDRB     R0,[R4, R6]
   \   00000038   0x2841             CMP      R0,#+65
   \   0000003A   0xDB03             BLT.N    ??hatoi_4
   4448                Value = ptr[x] - 'A' + 10;
   \   0000003C   0x5DA0             LDRB     R0,[R4, R6]
   \   0000003E   0x3837             SUBS     R0,R0,#+55
   \   00000040   0x0007             MOVS     R7,R0
   \   00000042   0xE002             B.N      ??hatoi_3
   4449              else
   4450                return -1;
   \                     ??hatoi_4: (+1)
   \   00000044   0xF05F 0x30FF      MOVS     R0,#-1
   \   00000048   0xE004             B.N      ??hatoi_5
   4451              FinalValue = FinalValue*16 + Value;
   \                     ??hatoi_3: (+1)
   \   0000004A   0xEB17 0x1808      ADDS     R8,R7,R8, LSL #+4
   4452            }
   \   0000004E   0x1C76             ADDS     R6,R6,#+1
   \   00000050   0xE7E2             B.N      ??hatoi_0
   4453            return FinalValue;
   \                     ??hatoi_1: (+1)
   \   00000052   0x4640             MOV      R0,R8
   \                     ??hatoi_5: (+1)
   \   00000054   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   4454          }
   4455          
   4456          

   \                                 In section .text, align 2, keep-with-next
   4457          bool Tst_Bypass( void)
   4458          {
   4459            return Bypass;
   \                     Tst_Bypass: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable4_55
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return
   4460          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     ParseString

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x........         DC32     ?_274

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     ?_275

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x........         DC32     ?_276

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x........         DC32     ?_277

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x........         DC32     ?_278

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x........         DC32     ?_279

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0x........         DC32     ?_280

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   0x........         DC32     ?_20

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \   00000000   0x........         DC32     ?_281

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_9:
   \   00000000   0x........         DC32     ?_282

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_10:
   \   00000000   0x........         DC32     ?_283

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_11:
   \   00000000   0x........         DC32     ?_284

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     ?_285

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x........         DC32     ?_286

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x........         DC32     ?_287

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x........         DC32     ?_288

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x........         DC32     ?_289

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x........         DC32     ?_290

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   0x........         DC32     ?_291

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \   00000000   0x........         DC32     ?_292

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \   00000000   0x........         DC32     ?_293

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_9:
   \   00000000   0x........         DC32     ?_294

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_10:
   \   00000000   0x........         DC32     ?_295

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_11:
   \   00000000   0x........         DC32     ?_296

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_12:
   \   00000000   0x........         DC32     ?_297

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_13:
   \   00000000   0x........         DC32     ?_298

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_14:
   \   00000000   0x........         DC32     ?_299

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_15:
   \   00000000   0x........         DC32     ?_300

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_16:
   \   00000000   0x........         DC32     ?_127

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_17:
   \   00000000   0x........         DC32     ?_301

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_18:
   \   00000000   0x........         DC32     ?_302

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_19:
   \   00000000   0x........         DC32     ?_303

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_20:
   \   00000000   0x........         DC32     ?_304

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_21:
   \   00000000   0x........         DC32     ?_305

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_22:
   \   00000000   0x........         DC32     ?_306

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_23:
   \   00000000   0x........         DC32     ?_307

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_24:
   \   00000000   0x........         DC32     ?_308

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_25:
   \   00000000   0x........         DC32     ?_309

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_26:
   \   00000000   0x........         DC32     ?_310

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_27:
   \   00000000   0x........         DC32     ?_311

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_28:
   \   00000000   0x........         DC32     ?_312

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_29:
   \   00000000   0x........         DC32     ?_313

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_30:
   \   00000000   0x........         DC32     ?_314

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_31:
   \   00000000   0x........         DC32     ?_315

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_32:
   \   00000000   0x........         DC32     ?_316

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_33:
   \   00000000   0x41200000         DC32     0x41200000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_34:
   \   00000000   0x........         DC32     ?_317

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_35:
   \   00000000   0x........         DC32     ?_318

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_36:
   \   00000000   0x........         DC32     ?_319

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_37:
   \   00000000   0x........         DC32     ?_320

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_38:
   \   00000000   0x........         DC32     ?_321

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_39:
   \   00000000   0x........         DC32     ?_322

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_40:
   \   00000000   0x........         DC32     ?_323

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_41:
   \   00000000   0x........         DC32     ?_324

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_42:
   \   00000000   0x........         DC32     ?_325

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_43:
   \   00000000   0x........         DC32     ?_326

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_44:
   \   00000000   0x........         DC32     ?_41

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_45:
   \   00000000   0x........         DC32     ?_327

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_46:
   \   00000000   0x........         DC32     ?_328

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_47:
   \   00000000   0x........         DC32     ?_329

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_48:
   \   00000000   0x........         DC32     ?_330

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_49:
   \   00000000   0x........         DC32     ?_331

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_50:
   \   00000000   0x........         DC32     ?_332

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_51:
   \   00000000   0x........         DC32     ?_333

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_52:
   \   00000000   0x........         DC32     ?_24

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_53:
   \   00000000   0x........         DC32     ?_334

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_54:
   \   00000000   0x........         DC32     ?_335

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_55:
   \   00000000   0x........         DC32     Bypass

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_56:
   \   00000000   0x........         DC32     ?_336

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_57:
   \   00000000   0x........         DC32     ?_337

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_58:
   \   00000000   0x........         DC32     ?_338

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_59:
   \   00000000   0x........         DC32     ?_339

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_60:
   \   00000000   0x........         DC32     ?_340

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_61:
   \   00000000   0x........         DC32     ?_341

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_62:
   \   00000000   0x........         DC32     ?_342

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_63:
   \   00000000   0x........         DC32     ?_343

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_64:
   \   00000000   0x........         DC32     ?_344

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_65:
   \   00000000   0x........         DC32     ?_345

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_66:
   \   00000000   0x........         DC32     ?_346

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_67:
   \   00000000   0x........         DC32     ?_347

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_68:
   \   00000000   0x........         DC32     ?_348

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_69:
   \   00000000   0x........         DC32     ?_349

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_70:
   \   00000000   0x........         DC32     ?_350

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_71:
   \   00000000   0x........         DC32     ?_351

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_72:
   \   00000000   0x........         DC32     ?_352

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_73:
   \   00000000   0x........         DC32     ?_353

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_74:
   \   00000000   0x........         DC32     ?_354

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x0D 0x0A          DC8 0DH, 0AH, 0DH, 0AH, 20H, 54H, 2EH, 2EH
   \              0x0D 0x0A    
   \              0x20 0x54    
   \              0x2E 0x2E    
   \   00000008   0x2E 0x2E          DC8 2EH, 2EH, 2EH, 2EH, 2EH, 2EH, 54H, 45H
   \              0x2E 0x2E    
   \              0x2E 0x2E    
   \              0x54 0x45    
   \   00000010   0x52 0x4D          DC8 52H, 4DH, 49H, 4EH, 41H, 54H, 49H, 4EH
   \              0x49 0x4E    
   \              0x41 0x54    
   \              0x49 0x4E    
   \   00000018   0x47 0x20          DC8 47H, 20H, 4DH, 4FH, 4EH, 49H, 54H, 4FH
   \              0x4D 0x4F    
   \              0x4E 0x49    
   \              0x54 0x4F    
   \   00000020   0x52 0x20          DC8 52H, 20H, 4DH, 4FH, 44H, 45H, 2EH, 2EH
   \              0x4D 0x4F    
   \              0x44 0x45    
   \              0x2E 0x2E    
   \   00000028   0x2E 0x2E          DC8 2EH, 2EH, 2EH, 2EH, 2EH, 2EH, 2EH, 0DH
   \              0x2E 0x2E    
   \              0x2E 0x2E    
   \              0x2E 0x0D    
   \   00000030   0x0A 0x0D          DC8 0AH, 0DH, 0AH, 3EH, 20H, 0
   \              0x0A 0x3E    
   \              0x20 0x00    
   \   00000036   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_RDSNDBFFR_FILL</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x52 0x44    
   \              0x53 0x4E    
   \              0x44 0x42    
   \              0x46 0x46    
   \              0x52 0x5F    
   \              0x46 0x49    
   \              0x4C 0x4C    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x52 0x6F          DC8 52H, 6FH, 61H, 64H, 20H, 53H, 6FH, 75H
   \              0x61 0x64    
   \              0x20 0x53    
   \              0x6F 0x75    
   \   00000008   0x6E 0x64          DC8 6EH, 64H, 3AH, 20H, 52H, 6FH, 61H, 64H
   \              0x3A 0x20    
   \              0x52 0x6F    
   \              0x61 0x64    
   \   00000010   0x20 0x53          DC8 20H, 53H, 6FH, 75H, 6EH, 64H, 20H, 6CH
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x20 0x6C    
   \   00000018   0x6F 0x61          DC8 6FH, 61H, 64H, 65H, 64H, 2CH, 20H, 70H
   \              0x64 0x65    
   \              0x64 0x2C    
   \              0x20 0x70    
   \   00000020   0x72 0x6F          DC8 72H, 6FH, 63H, 65H, 73H, 73H, 65H, 64H
   \              0x63 0x65    
   \              0x73 0x73    
   \              0x65 0x64    
   \   00000028   0x2C 0x20          DC8 2CH, 20H, 61H, 6EH, 64H, 20H, 73H, 65H
   \              0x61 0x6E    
   \              0x64 0x20    
   \              0x73 0x65    
   \   00000030   0x6E 0x74          DC8 6EH, 74H, 20H, 74H, 6FH, 20H, 46H, 46H
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x46 0x46    
   \   00000038   0x54 0x20          DC8 54H, 20H, 42H, 69H, 6EH, 73H, 2EH, 0DH
   \              0x42 0x69    
   \              0x6E 0x73    
   \              0x2E 0x0D    
   \   00000040   0x0A 0x00          DC8 0AH, 0
   \   00000042   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x52 0x6F          DC8 "Road Sound: FFT Measurements 0-15.\015\012"
   \              0x61 0x64    
   \              0x20 0x53    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x3A 0x20    
   \              0x46 0x46    
   \              0x54 0x20    
   \              0x4D 0x65    
   \              0x61 0x73    
   \              0x75 0x72    
   \              0x65 0x6D    
   \              0x65 0x6E    
   \              0x74 0x73    
   \              0x20 0x30    
   \              0x2D 0x31    
   \              0x35 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_4:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_FFT0-15:%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x46    
   \              0x46 0x54    
   \              0x30 0x2D    
   \              0x31 0x35    
   \              0x3A 0x25    
   \              0x73 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_5:
   \   00000000   0x20 0x20          DC8 "     FFT Measurements 0-15: "
   \              0x20 0x20    
   \              0x20 0x46    
   \              0x46 0x54    
   \              0x20 0x4D    
   \              0x65 0x61    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x6D 0x65    
   \              0x6E 0x74    
   \              0x73 0x20    
   \              0x30 0x2D    
   \              0x31 0x35    
   \              0x3A 0x20    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \   00000000   0x0D 0x0A          DC8 "\015\012"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_7:
   \   00000000   0x52 0x6F          DC8 "Road Sound: FFT Measurements 16-31.\015\012"
   \              0x61 0x64    
   \              0x20 0x53    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x3A 0x20    
   \              0x46 0x46    
   \              0x54 0x20    
   \              0x4D 0x65    
   \              0x61 0x73    
   \              0x75 0x72    
   \              0x65 0x6D    
   \              0x65 0x6E    
   \              0x74 0x73    
   \              0x20 0x31    
   \              0x36 0x2D    
   \              0x33 0x31    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_8:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_FFT16-31:%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x46    
   \              0x46 0x54    
   \              0x31 0x36    
   \              0x2D 0x33    
   \              0x31 0x3A    
   \              0x25 0x73    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_9:
   \   00000000   0x20 0x20          DC8 "     FFT Measurements 16-31: "
   \              0x20 0x20    
   \              0x20 0x46    
   \              0x46 0x54    
   \              0x20 0x4D    
   \              0x65 0x61    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x6D 0x65    
   \              0x6E 0x74    
   \              0x73 0x20    
   \              0x31 0x36    
   \              0x2D 0x33    
   \              0x31 0x3A    
   \              0x20 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_10:
   \   00000000   0x52 0x6F          DC8 "Road Sound: FFT Measurements 32-47.\015\012"
   \              0x61 0x64    
   \              0x20 0x53    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x3A 0x20    
   \              0x46 0x46    
   \              0x54 0x20    
   \              0x4D 0x65    
   \              0x61 0x73    
   \              0x75 0x72    
   \              0x65 0x6D    
   \              0x65 0x6E    
   \              0x74 0x73    
   \              0x20 0x33    
   \              0x32 0x2D    
   \              0x34 0x37    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_11:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_FFT32-47:%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x46    
   \              0x46 0x54    
   \              0x33 0x32    
   \              0x2D 0x34    
   \              0x37 0x3A    
   \              0x25 0x73    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_12:
   \   00000000   0x20 0x20          DC8 "     FFT Measurements 32-47: "
   \              0x20 0x20    
   \              0x20 0x46    
   \              0x46 0x54    
   \              0x20 0x4D    
   \              0x65 0x61    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x6D 0x65    
   \              0x6E 0x74    
   \              0x73 0x20    
   \              0x33 0x32    
   \              0x2D 0x34    
   \              0x37 0x3A    
   \              0x20 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_13:
   \   00000000   0x52 0x6F          DC8 "Road Sound: FFT Measurements 48-63.\015\012"
   \              0x61 0x64    
   \              0x20 0x53    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x3A 0x20    
   \              0x46 0x46    
   \              0x54 0x20    
   \              0x4D 0x65    
   \              0x61 0x73    
   \              0x75 0x72    
   \              0x65 0x6D    
   \              0x65 0x6E    
   \              0x74 0x73    
   \              0x20 0x34    
   \              0x38 0x2D    
   \              0x36 0x33    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_14:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_FFT48-63:%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x46    
   \              0x46 0x54    
   \              0x34 0x38    
   \              0x2D 0x36    
   \              0x33 0x3A    
   \              0x25 0x73    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_15:
   \   00000000   0x20 0x20          DC8 "     FFT Measurements 48-63: "
   \              0x20 0x20    
   \              0x20 0x46    
   \              0x46 0x54    
   \              0x20 0x4D    
   \              0x65 0x61    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x6D 0x65    
   \              0x6E 0x74    
   \              0x73 0x20    
   \              0x34 0x38    
   \              0x2D 0x36    
   \              0x33 0x3A    
   \              0x20 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_16:
   \   00000000   0x52 0x6F          DC8 "Road Sound: Results of save Buffer.\015\012"
   \              0x61 0x64    
   \              0x20 0x53    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x3A 0x20    
   \              0x52 0x65    
   \              0x73 0x75    
   \              0x6C 0x74    
   \              0x73 0x20    
   \              0x6F 0x66    
   \              0x20 0x73    
   \              0x61 0x76    
   \              0x65 0x20    
   \              0x42 0x75    
   \              0x66 0x66    
   \              0x65 0x72    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_17:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_FFTBFFR_DUMP:"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x46    
   \              0x46 0x54    
   \              0x42 0x46    
   \              0x46 0x52    
   \              0x5F 0x44    
   \              0x55 0x4D    
   \              0x50 0x3A    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 1
   \   00000000   0x00               DC8 ""

   \                                 In section .rodata, align 4
   \                     ?_19:
   \   00000000   0x25 0x30          DC8 "%04d "
   \              0x34 0x64    
   \              0x20 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_20:
   \   00000000   0x3C 0x2F          DC8 "</STATUS>"
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_21:
   \   00000000   0x20 0x20          DC8 "     ---COMPLETE---"
   \              0x20 0x20    
   \              0x20 0x2D    
   \              0x2D 0x2D    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2D 0x2D    
   \              0x2D 0x00    

   \                                 In section .rodata, align 4
   \                     ?_22:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_FFTCLR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x46    
   \              0x46 0x54    
   \              0x43 0x4C    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_23:
   \   00000000   0x52 0x6F          DC8 "Road Sound: All buffers cleared.\015\012"
   \              0x61 0x64    
   \              0x20 0x53    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x3A 0x20    
   \              0x41 0x6C    
   \              0x6C 0x20    
   \              0x62 0x75    
   \              0x66 0x66    
   \              0x65 0x72    
   \              0x73 0x20    
   \              0x63 0x6C    
   \              0x65 0x61    
   \              0x72 0x65    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_24:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_NOSUPPORT</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x4E 0x4F    
   \              0x53 0x55    
   \              0x50 0x50    
   \              0x4F 0x52    
   \              0x54 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_25:
   \   00000000   0x49 0x6E          DC8 "Initialize Barometer Sensor Passed.\015\012"
   \              0x69 0x74    
   \              0x69 0x61    
   \              0x6C 0x69    
   \              0x7A 0x65    
   \              0x20 0x42    
   \              0x61 0x72    
   \              0x6F 0x6D    
   \              0x65 0x74    
   \              0x65 0x72    
   \              0x20 0x53    
   \              0x65 0x6E    
   \              0x73 0x6F    
   \              0x72 0x20    
   \              0x50 0x61    
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_26:
   \   00000000   0x49 0x6E          DC8 "Initialize Barometer Sensor FAILED.\015\012"
   \              0x69 0x74    
   \              0x69 0x61    
   \              0x6C 0x69    
   \              0x7A 0x65    
   \              0x20 0x42    
   \              0x61 0x72    
   \              0x6F 0x6D    
   \              0x65 0x74    
   \              0x65 0x72    
   \              0x20 0x53    
   \              0x65 0x6E    
   \              0x73 0x6F    
   \              0x72 0x20    
   \              0x46 0x41    
   \              0x49 0x4C    
   \              0x45 0x44    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_27:
   \   00000000   0x41 0x36          DC8 "A6 Command...Read Pressure Passed.\015\012"
   \              0x20 0x43    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x2E    
   \              0x2E 0x52    
   \              0x65 0x61    
   \              0x64 0x20    
   \              0x50 0x72    
   \              0x65 0x73    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x20 0x50    
   \              0x61 0x73    
   \              0x73 0x65    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_28:
   \   00000000   0x20 0x50          DC8 20H, 50H, 52H, 45H, 53H, 53H, 55H, 52H
   \              0x52 0x45    
   \              0x53 0x53    
   \              0x55 0x52    
   \   00000008   0x45 0x28          DC8 45H, 28H, 50H, 52H, 45H, 53H, 53H, 5FH
   \              0x50 0x52    
   \              0x45 0x53    
   \              0x53 0x5F    
   \   00000010   0x4F 0x55          DC8 4FH, 55H, 54H, 5FH, 48H, 2EH, 2EH, 2EH
   \              0x54 0x5F    
   \              0x48 0x2E    
   \              0x2E 0x2E    
   \   00000018   0x50 0x52          DC8 50H, 52H, 45H, 53H, 53H, 5FH, 4FH, 55H
   \              0x45 0x53    
   \              0x53 0x5F    
   \              0x4F 0x55    
   \   00000020   0x54 0x5F          DC8 54H, 5FH, 4CH, 2EH, 2EH, 2EH, 50H, 52H
   \              0x4C 0x2E    
   \              0x2E 0x2E    
   \              0x50 0x52    
   \   00000028   0x45 0x53          DC8 45H, 53H, 53H, 5FH, 4FH, 55H, 54H, 5FH
   \              0x53 0x5F    
   \              0x4F 0x55    
   \              0x54 0x5F    
   \   00000030   0x58 0x4C          DC8 58H, 4CH, 29H, 0DH, 0AH, 0
   \              0x29 0x0D    
   \              0x0A 0x00    
   \   00000036   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_29:
   \   00000000   0x20 0x50          DC8 " PRESSURE: %s/%s\015\012"
   \              0x52 0x45    
   \              0x53 0x53    
   \              0x55 0x52    
   \              0x45 0x3A    
   \              0x20 0x25    
   \              0x73 0x2F    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_30:
   \   00000000   0x3C 0x53          DC8 "<STATUS>PRESSURE: %s/%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x50 0x52    
   \              0x45 0x53    
   \              0x53 0x55    
   \              0x52 0x45    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_31:
   \   00000000   0x20 0x50          DC8 " PRESSURE:  "
   \              0x52 0x45    
   \              0x53 0x53    
   \              0x55 0x52    
   \              0x45 0x3A    
   \              0x20 0x20    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_32:
   \   00000000   0x20 0x20          DC8 "  -  %08x\015\012"
   \              0x2D 0x20    
   \              0x20 0x25    
   \              0x30 0x38    
   \              0x78 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_33:
   \   00000000   0x41 0x36          DC8 "A6 Command...Read Pressure FAILED.\015\012"
   \              0x20 0x43    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x2E    
   \              0x2E 0x52    
   \              0x65 0x61    
   \              0x64 0x20    
   \              0x50 0x72    
   \              0x65 0x73    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x20 0x46    
   \              0x41 0x49    
   \              0x4C 0x45    
   \              0x44 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_34:
   \   00000000   0x41 0x38          DC8 "A8 Command...Read Temperature Passed.\015\012"
   \              0x20 0x43    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x2E    
   \              0x2E 0x52    
   \              0x65 0x61    
   \              0x64 0x20    
   \              0x54 0x65    
   \              0x6D 0x70    
   \              0x65 0x72    
   \              0x61 0x74    
   \              0x75 0x72    
   \              0x65 0x20    
   \              0x50 0x61    
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_35:
   \   00000000   0x20 0x20          DC8 "     TEMP DATA: "
   \              0x20 0x20    
   \              0x20 0x54    
   \              0x45 0x4D    
   \              0x50 0x20    
   \              0x44 0x41    
   \              0x54 0x41    
   \              0x3A 0x20    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_36:
   \   00000000   0x20 0x20          DC8 "     TEMP DATA(Decimal): %d\015\012"
   \              0x20 0x20    
   \              0x20 0x54    
   \              0x45 0x4D    
   \              0x50 0x20    
   \              0x44 0x41    
   \              0x54 0x41    
   \              0x28 0x44    
   \              0x65 0x63    
   \              0x69 0x6D    
   \              0x61 0x6C    
   \              0x29 0x3A    
   \              0x20 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_37:
   \   00000000   0x20 0x20          DC8 "     TempC: "
   \              0x20 0x20    
   \              0x20 0x54    
   \              0x65 0x6D    
   \              0x70 0x43    
   \              0x3A 0x20    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_38:
   \   00000000   0x20 0x20          DC8 "     TempF: "
   \              0x20 0x20    
   \              0x20 0x54    
   \              0x65 0x6D    
   \              0x70 0x46    
   \              0x3A 0x20    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_39:
   \   00000000   0x42 0x61          DC8 "Barometer Sensor: WHO_AM_I Passed.\015\012"
   \              0x72 0x6F    
   \              0x6D 0x65    
   \              0x74 0x65    
   \              0x72 0x20    
   \              0x53 0x65    
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x3A 0x20    
   \              0x57 0x48    
   \              0x4F 0x5F    
   \              0x41 0x4D    
   \              0x5F 0x49    
   \              0x20 0x50    
   \              0x61 0x73    
   \              0x73 0x65    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_40:
   \   00000000   0x42 0x61          DC8 "Barometer Sensor: WHO_AM_I FAILED.\015\012"
   \              0x72 0x6F    
   \              0x6D 0x65    
   \              0x74 0x65    
   \              0x72 0x20    
   \              0x53 0x65    
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x3A 0x20    
   \              0x57 0x48    
   \              0x4F 0x5F    
   \              0x41 0x4D    
   \              0x5F 0x49    
   \              0x20 0x46    
   \              0x41 0x49    
   \              0x4C 0x45    
   \              0x44 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_41:
   \   00000000   0x45 0x52          DC8 "ERROR: Not a legal command.\015\012"
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x61    
   \              0x20 0x6C    
   \              0x65 0x67    
   \              0x61 0x6C    
   \              0x20 0x63    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_42:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_THERMAL_DUMP:"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x48 0x45    
   \              0x52 0x4D    
   \              0x41 0x4C    
   \              0x5F 0x44    
   \              0x55 0x4D    
   \              0x50 0x3A    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_43:
   \   00000000   0x56 0x6F          DC8 "Voltage Monitor/Shunt Voltage...\015\012"
   \              0x6C 0x74    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x4D 0x6F    
   \              0x6E 0x69    
   \              0x74 0x6F    
   \              0x72 0x2F    
   \              0x53 0x68    
   \              0x75 0x6E    
   \              0x74 0x20    
   \              0x56 0x6F    
   \              0x6C 0x74    
   \              0x61 0x67    
   \              0x65 0x2E    
   \              0x2E 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_44:
   \   00000000   0x20 0x20          DC8 "     Thermistor DATA: %s   %s/%s   %s/%s   %d\015\012"
   \              0x20 0x20    
   \              0x20 0x54    
   \              0x68 0x65    
   \              0x72 0x6D    
   \              0x69 0x73    
   \              0x74 0x6F    
   \              0x72 0x20    
   \              0x44 0x41    
   \              0x54 0x41    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x20 0x20    
   \              0x20 0x25    
   \              0x73 0x2F    
   \              0x25 0x73    
   \              0x20 0x20    
   \              0x20 0x25    
   \              0x73 0x2F    
   \              0x25 0x73    
   \              0x20 0x20    
   \              0x20 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_45:
   \   00000000   0x20 0x20          DC8 "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\015\012"
   \              0x20 0x20    
   \              0x20 0x47    
   \              0x72 0x69    
   \              0x64 0x20    
   \              0x33 0x33    
   \              0x20 0x44    
   \              0x41 0x54    
   \              0x41 0x3A    
   \              0x20 0x25    
   \              0x73 0x20    
   \              0x20 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x20    
   \              0x20 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x20    
   \              0x20 0x20    
   \              0x25 0x64    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_46:
   \   00000000   0x20 0x20          DC8 "     SHNT VLTG DATA: "
   \              0x20 0x20    
   \              0x20 0x53    
   \              0x48 0x4E    
   \              0x54 0x20    
   \              0x56 0x4C    
   \              0x54 0x47    
   \              0x20 0x44    
   \              0x41 0x54    
   \              0x41 0x3A    
   \              0x20 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_47:
   \   00000000   0x20 0x20          DC8 "     COMPLETE.\015\012"
   \              0x20 0x20    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_48:
   \   00000000   0x43 0x6F          DC8 43H, 6FH, 6FH, 6CH, 20H, 45H, 79H, 65H
   \              0x6F 0x6C    
   \              0x20 0x45    
   \              0x79 0x65    
   \   00000008   0x2F 0x47          DC8 2FH, 47H, 72H, 69H, 64H, 20H, 45H, 79H
   \              0x72 0x69    
   \              0x64 0x20    
   \              0x45 0x79    
   \   00000010   0x65 0x20          DC8 65H, 20H, 53H, 65H, 6EH, 73H, 6FH, 72H
   \              0x53 0x65    
   \              0x6E 0x73    
   \              0x6F 0x72    
   \   00000018   0x3A 0x20          DC8 3AH, 20H, 49H, 6EH, 69H, 74H, 69H, 61H
   \              0x49 0x6E    
   \              0x69 0x74    
   \              0x69 0x61    
   \   00000020   0x6C 0x69          DC8 6CH, 69H, 7AH, 61H, 74H, 69H, 6FH, 6EH
   \              0x7A 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \   00000028   0x20 0x43          DC8 20H, 43H, 6FH, 6DH, 70H, 6CH, 65H, 74H
   \              0x6F 0x6D    
   \              0x70 0x6C    
   \              0x65 0x74    
   \   00000030   0x65 0x2E          DC8 65H, 2EH, 0DH, 0AH, 0
   \              0x0D 0x0A    
   \              0x00         
   \   00000035   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_49:
   \   00000000   0x43 0x6F          DC8 "Cool Eye/Grid Eye Sensor: Reset Complete.\015\012"
   \              0x6F 0x6C    
   \              0x20 0x45    
   \              0x79 0x65    
   \              0x2F 0x47    
   \              0x72 0x69    
   \              0x64 0x20    
   \              0x45 0x79    
   \              0x65 0x20    
   \              0x53 0x65    
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x3A 0x20    
   \              0x52 0x65    
   \              0x73 0x65    
   \              0x74 0x20    
   \              0x43 0x6F    
   \              0x6D 0x70    
   \              0x6C 0x65    
   \              0x74 0x65    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_50:
   \   00000000   0x56 0x6F          DC8 "Voltage Monitor/Read Bus Voltage...\015\012"
   \              0x6C 0x74    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x4D 0x6F    
   \              0x6E 0x69    
   \              0x74 0x6F    
   \              0x72 0x2F    
   \              0x52 0x65    
   \              0x61 0x64    
   \              0x20 0x42    
   \              0x75 0x73    
   \              0x20 0x56    
   \              0x6F 0x6C    
   \              0x74 0x61    
   \              0x67 0x65    
   \              0x2E 0x2E    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_51:
   \   00000000   0x20 0x20          DC8 "     BUS VOLTAGE DATA: "
   \              0x20 0x20    
   \              0x20 0x42    
   \              0x55 0x53    
   \              0x20 0x56    
   \              0x4F 0x4C    
   \              0x54 0x41    
   \              0x47 0x45    
   \              0x20 0x44    
   \              0x41 0x54    
   \              0x41 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_52:
   \   00000000   0x3C 0x53          DC8 "<STATUS>BUS_VLTG:%s/%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x42 0x55    
   \              0x53 0x5F    
   \              0x56 0x4C    
   \              0x54 0x47    
   \              0x3A 0x25    
   \              0x73 0x2F    
   \              0x25 0x73    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_53:
   \   00000000   0x20 0x20          DC8 "     Bus Voltage: %s/%s\015\012"
   \              0x20 0x20    
   \              0x20 0x42    
   \              0x75 0x73    
   \              0x20 0x56    
   \              0x6F 0x6C    
   \              0x74 0x61    
   \              0x67 0x65    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x0D    
   \              0x0A 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_54:
   \   00000000   0x56 0x6F          DC8 "Voltage Monitor: Initialization Complete.\015\012"
   \              0x6C 0x74    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x4D 0x6F    
   \              0x6E 0x69    
   \              0x74 0x6F    
   \              0x72 0x3A    
   \              0x20 0x49    
   \              0x6E 0x69    
   \              0x74 0x69    
   \              0x61 0x6C    
   \              0x69 0x7A    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x43 0x6F    
   \              0x6D 0x70    
   \              0x6C 0x65    
   \              0x74 0x65    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_55:
   \   00000000   0x3C 0x53          DC8 "<STATUS>SHNT_VLTG:%s/%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x48    
   \              0x4E 0x54    
   \              0x5F 0x56    
   \              0x4C 0x54    
   \              0x47 0x3A    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_56:
   \   00000000   0x20 0x20          DC8 "     Shunt Voltage: %s/%s\015\012"
   \              0x20 0x20    
   \              0x20 0x53    
   \              0x68 0x75    
   \              0x6E 0x74    
   \              0x20 0x56    
   \              0x6F 0x6C    
   \              0x74 0x61    
   \              0x67 0x65    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_57:
   \   00000000   0x56 0x6F          DC8 "Voltage Monitor/Read Current...\015\012"
   \              0x6C 0x74    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x4D 0x6F    
   \              0x6E 0x69    
   \              0x74 0x6F    
   \              0x72 0x2F    
   \              0x52 0x65    
   \              0x61 0x64    
   \              0x20 0x43    
   \              0x75 0x72    
   \              0x72 0x65    
   \              0x6E 0x74    
   \              0x2E 0x2E    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_58:
   \   00000000   0x20 0x20          DC8 "     CURRENT DATA: "
   \              0x20 0x20    
   \              0x20 0x43    
   \              0x55 0x52    
   \              0x52 0x45    
   \              0x4E 0x54    
   \              0x20 0x44    
   \              0x41 0x54    
   \              0x41 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_59:
   \   00000000   0x3C 0x53          DC8 "<STATUS>SHNT_CRNT:%s/%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x48    
   \              0x4E 0x54    
   \              0x5F 0x43    
   \              0x52 0x4E    
   \              0x54 0x3A    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_60:
   \   00000000   0x20 0x20          DC8 "     Current: %s/%s\015\012"
   \              0x20 0x20    
   \              0x20 0x43    
   \              0x75 0x72    
   \              0x72 0x65    
   \              0x6E 0x74    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x0D    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_61:
   \   00000000   0x56 0x6F          DC8 "Voltage Monitor/Read Power...\015\012"
   \              0x6C 0x74    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x4D 0x6F    
   \              0x6E 0x69    
   \              0x74 0x6F    
   \              0x72 0x2F    
   \              0x52 0x65    
   \              0x61 0x64    
   \              0x20 0x50    
   \              0x6F 0x77    
   \              0x65 0x72    
   \              0x2E 0x2E    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_62:
   \   00000000   0x20 0x20          DC8 "     POWER DATA: "
   \              0x20 0x20    
   \              0x20 0x50    
   \              0x4F 0x57    
   \              0x45 0x52    
   \              0x20 0x44    
   \              0x41 0x54    
   \              0x41 0x3A    
   \              0x20 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_63:
   \   00000000   0x3C 0x53          DC8 "<STATUS>POWER:%s/%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x50 0x4F    
   \              0x57 0x45    
   \              0x52 0x3A    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_64:
   \   00000000   0x20 0x20          DC8 "     Power: %s/%s\015\012"
   \              0x20 0x20    
   \              0x20 0x50    
   \              0x6F 0x77    
   \              0x65 0x72    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_65:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_C_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x43 0x5F    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_66:
   \   00000000   0x48 0x75          DC8 "Humidity SENSOR...\015\012"
   \              0x6D 0x69    
   \              0x64 0x69    
   \              0x74 0x79    
   \              0x20 0x53    
   \              0x45 0x4E    
   \              0x53 0x4F    
   \              0x52 0x2E    
   \              0x2E 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_67:
   \   00000000   0x20 0x20          DC8 "     Humidity DATA: "
   \              0x20 0x20    
   \              0x20 0x48    
   \              0x75 0x6D    
   \              0x69 0x64    
   \              0x69 0x74    
   \              0x79 0x20    
   \              0x44 0x41    
   \              0x54 0x41    
   \              0x3A 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_68:
   \   00000000   0x20 0x20          DC8 "     Humidity DATA(Decimal): %d\015\012"
   \              0x20 0x20    
   \              0x20 0x48    
   \              0x75 0x6D    
   \              0x69 0x64    
   \              0x69 0x74    
   \              0x79 0x20    
   \              0x44 0x41    
   \              0x54 0x41    
   \              0x28 0x44    
   \              0x65 0x63    
   \              0x69 0x6D    
   \              0x61 0x6C    
   \              0x29 0x3A    
   \              0x20 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_69:
   \   00000000   0x3C 0x53          DC8 "<STATUS>HUMIDITY:%s/%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x48 0x55    
   \              0x4D 0x49    
   \              0x44 0x49    
   \              0x54 0x59    
   \              0x3A 0x25    
   \              0x73 0x2F    
   \              0x25 0x73    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_70:
   \   00000000   0x20 0x20          DC8 "     Humidity: %s/%s\015\012"
   \              0x20 0x20    
   \              0x20 0x48    
   \              0x75 0x6D    
   \              0x69 0x64    
   \              0x69 0x74    
   \              0x79 0x3A    
   \              0x20 0x25    
   \              0x73 0x2F    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_71:
   \   00000000   0x48 0x75          DC8 "Humidity Sensor: Initialization Complete.\015\012"
   \              0x6D 0x69    
   \              0x64 0x69    
   \              0x74 0x79    
   \              0x20 0x53    
   \              0x65 0x6E    
   \              0x73 0x6F    
   \              0x72 0x3A    
   \              0x20 0x49    
   \              0x6E 0x69    
   \              0x74 0x69    
   \              0x61 0x6C    
   \              0x69 0x7A    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x43 0x6F    
   \              0x6D 0x70    
   \              0x6C 0x65    
   \              0x74 0x65    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_72:
   \   00000000   0x20 0x20          DC8 "     Humidity: "
   \              0x20 0x20    
   \              0x20 0x48    
   \              0x75 0x6D    
   \              0x69 0x64    
   \              0x69 0x74    
   \              0x79 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_73:
   \   00000000   0x54 0x42          DC8 "TBD: Read Temp and Pressure NOT IMPLEMENTED\015\012"
   \              0x44 0x3A    
   \              0x20 0x52    
   \              0x65 0x61    
   \              0x64 0x20    
   \              0x54 0x65    
   \              0x6D 0x70    
   \              0x20 0x61    
   \              0x6E 0x64    
   \              0x20 0x50    
   \              0x72 0x65    
   \              0x73 0x73    
   \              0x75 0x72    
   \              0x65 0x20    
   \              0x4E 0x4F    
   \              0x54 0x20    
   \              0x49 0x4D    
   \              0x50 0x4C    
   \              0x45 0x4D    
   \              0x45 0x4E    
   \              0x54 0x45    
   \              0x44 0x0D    
   \              0x0A 0x00    
   \   0000002E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_74:
   \   00000000   0x4E 0x4F          DC8 "NO Action...(0x00).\015\012"
   \              0x20 0x41    
   \              0x63 0x74    
   \              0x69 0x6F    
   \              0x6E 0x2E    
   \              0x2E 0x2E    
   \              0x28 0x30    
   \              0x78 0x30    
   \              0x30 0x29    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_75:
   \   00000000   0x54 0x45          DC8 "TEMP SENSOR...\015\012"
   \              0x4D 0x50    
   \              0x20 0x53    
   \              0x45 0x4E    
   \              0x53 0x4F    
   \              0x52 0x2E    
   \              0x2E 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_76:
   \   00000000   0x3C 0x53          DC8 "<STATUS>TEMPC:%s/%s//TEMPF:%s/%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x54 0x45    
   \              0x4D 0x50    
   \              0x43 0x3A    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x2F    
   \              0x2F 0x54    
   \              0x45 0x4D    
   \              0x50 0x46    
   \              0x3A 0x25    
   \              0x73 0x2F    
   \              0x25 0x73    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000002A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_77:
   \   00000000   0x20 0x20          DC8 "     TempC: %s/%s     TempF: %s/%s\015\012"
   \              0x20 0x20    
   \              0x20 0x54    
   \              0x65 0x6D    
   \              0x70 0x43    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x54 0x65    
   \              0x6D 0x70    
   \              0x46 0x3A    
   \              0x20 0x25    
   \              0x73 0x2F    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_78:
   \   00000000   0x52 0x47          DC8 "RGB Color Light Sensor...\015\012"
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \              0x72 0x20    
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \              0x53 0x65    
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x2E 0x2E    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_79:
   \   00000000   0x20 0x52          DC8 20H, 52H, 47H, 42H, 28H, 52H, 45H, 44H
   \              0x47 0x42    
   \              0x28 0x52    
   \              0x45 0x44    
   \   00000008   0x6D 0x73          DC8 6DH, 73H, 62H, 2CH, 52H, 45H, 44H, 6CH
   \              0x62 0x2C    
   \              0x52 0x45    
   \              0x44 0x6C    
   \   00000010   0x73 0x62          DC8 73H, 62H, 2CH, 47H, 52H, 45H, 45H, 4EH
   \              0x2C 0x47    
   \              0x52 0x45    
   \              0x45 0x4E    
   \   00000018   0x6D 0x73          DC8 6DH, 73H, 62H, 2CH, 47H, 52H, 45H, 45H
   \              0x62 0x2C    
   \              0x47 0x52    
   \              0x45 0x45    
   \   00000020   0x4E 0x6C          DC8 4EH, 6CH, 73H, 62H, 2CH, 42H, 4CH, 55H
   \              0x73 0x62    
   \              0x2C 0x42    
   \              0x4C 0x55    
   \   00000028   0x45 0x6D          DC8 45H, 6DH, 73H, 62H, 2CH, 42H, 4CH, 55H
   \              0x73 0x62    
   \              0x2C 0x42    
   \              0x4C 0x55    
   \   00000030   0x45 0x6C          DC8 45H, 6CH, 73H, 62H, 29H, 0DH, 0AH, 0
   \              0x73 0x62    
   \              0x29 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_80:
   \   00000000   0x20 0x20          DC8 "       DATA: "
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x44    
   \              0x41 0x54    
   \              0x41 0x3A    
   \              0x20 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_81:
   \   00000000   0x3C 0x53          DC8 "<STATUS>RED:%s/GREEN:%s/BLUE:%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x52 0x45    
   \              0x44 0x3A    
   \              0x25 0x73    
   \              0x2F 0x47    
   \              0x52 0x45    
   \              0x45 0x4E    
   \              0x3A 0x25    
   \              0x73 0x2F    
   \              0x42 0x4C    
   \              0x55 0x45    
   \              0x3A 0x25    
   \              0x73 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_82:
   \   00000000   0x20 0x20          DC8 "    Red: "
   \              0x20 0x20    
   \              0x52 0x65    
   \              0x64 0x3A    
   \              0x20 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_83:
   \   00000000   0x20 0x20          DC8 "    Green: "
   \              0x20 0x20    
   \              0x47 0x72    
   \              0x65 0x65    
   \              0x6E 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_84:
   \   00000000   0x20 0x20          DC8 "    Blue: "
   \              0x20 0x20    
   \              0x42 0x6C    
   \              0x75 0x65    
   \              0x3A 0x20    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_85:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 3AH, 20H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x3A 0x20    
   \   00000018   0x49 0x6E          DC8 49H, 6EH, 69H, 74H, 69H, 61H, 6CH, 69H
   \              0x69 0x74    
   \              0x69 0x61    
   \              0x6C 0x69    
   \   00000020   0x7A 0x61          DC8 7AH, 61H, 74H, 69H, 6FH, 6EH, 20H, 43H
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x43    
   \   00000028   0x6F 0x6D          DC8 6FH, 6DH, 70H, 6CH, 65H, 74H, 65H, 20H
   \              0x70 0x6C    
   \              0x65 0x74    
   \              0x65 0x20    
   \   00000030   0x77 0x69          DC8 77H, 69H, 74H, 68H, 20H, 44H, 45H, 46H
   \              0x74 0x68    
   \              0x20 0x44    
   \              0x45 0x46    
   \   00000038   0x41 0x55          DC8 41H, 55H, 4CH, 54H, 20H, 56H, 61H, 6CH
   \              0x4C 0x54    
   \              0x20 0x56    
   \              0x61 0x6C    
   \   00000040   0x75 0x65          DC8 75H, 65H, 73H, 2EH, 0DH, 0AH, 0
   \              0x73 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000047   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_86:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 3AH, 20H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x3A 0x20    
   \   00000018   0x53 0x59          DC8 53H, 59H, 4EH, 54H, 41H, 58H, 20H, 45H
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \   00000020   0x72 0x72          DC8 72H, 72H, 6FH, 72H, 2EH, 20H, 50H, 61H
   \              0x6F 0x72    
   \              0x2E 0x20    
   \              0x50 0x61    
   \   00000028   0x72 0x61          DC8 72H, 61H, 6DH, 65H, 74H, 65H, 72H, 73H
   \              0x6D 0x65    
   \              0x74 0x65    
   \              0x72 0x73    
   \   00000030   0x20 0x61          DC8 20H, 61H, 72H, 65H, 20H, 6EH, 6FH, 74H
   \              0x72 0x65    
   \              0x20 0x6E    
   \              0x6F 0x74    
   \   00000038   0x20 0x63          DC8 20H, 63H, 6FH, 72H, 72H, 65H, 63H, 74H
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \   00000040   0x2E 0x0D          DC8 2EH, 0DH, 0AH, 0
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_87:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 4EH, 6FH, 74H
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \   00000028   0x20 0x63          DC8 20H, 63H, 6FH, 72H, 72H, 65H, 63H, 74H
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \   00000030   0x20 0x66          DC8 20H, 66H, 6FH, 72H, 6DH, 61H, 74H, 2EH
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \   00000038   0x20 0x50          DC8 20H, 50H, 75H, 6EH, 63H, 74H, 75H, 61H
   \              0x75 0x6E    
   \              0x63 0x74    
   \              0x75 0x61    
   \   00000040   0x74 0x69          DC8 74H, 69H, 6FH, 6EH, 21H, 0DH, 0AH, 0
   \              0x6F 0x6E    
   \              0x21 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_88:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 50H, 61H, 72H, 61H
   \              0x52 0x3A    
   \              0x50 0x61    
   \              0x72 0x61    
   \   00000028   0x6D 0x65          DC8 6DH, 65H, 74H, 65H, 72H, 73H, 20H, 6EH
   \              0x74 0x65    
   \              0x72 0x73    
   \              0x20 0x6E    
   \   00000030   0x6F 0x74          DC8 6FH, 74H, 20H, 48H, 45H, 58H, 20H, 56H
   \              0x20 0x48    
   \              0x45 0x58    
   \              0x20 0x56    
   \   00000038   0x61 0x6C          DC8 61H, 6CH, 75H, 65H, 2EH, 0DH, 0AH, 0
   \              0x75 0x65    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_89:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x4F 0x50          DC8 4FH, 50H, 5FH, 4DH, 4FH, 44H, 45H, 2EH
   \              0x5F 0x4D    
   \              0x4F 0x44    
   \              0x45 0x2E    
   \   00000038   0x0D 0x0A          DC8 0DH, 0AH, 0
   \              0x00         
   \   0000003B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_90:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x44 0x53          DC8 44H, 53H, 5FH, 52H, 41H, 4EH, 47H, 45H
   \              0x5F 0x52    
   \              0x41 0x4E    
   \              0x47 0x45    
   \   00000038   0x2E 0x0D          DC8 2EH, 0DH, 0AH, 0
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_91:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x41 0x44          DC8 41H, 44H, 43H, 5FH, 52H, 53H, 4CH, 2EH
   \              0x43 0x5F    
   \              0x52 0x53    
   \              0x4C 0x2E    
   \   00000038   0x0D 0x0A          DC8 0DH, 0AH, 0
   \              0x00         
   \   0000003B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_92:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x53 0x59          DC8 53H, 59H, 4EH, 43H, 2EH, 0DH, 0AH, 0
   \              0x4E 0x43    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_93:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x43 0x4D          DC8 43H, 4DH, 50H, 5FH, 41H, 44H, 4AH, 53H
   \              0x50 0x5F    
   \              0x41 0x44    
   \              0x4A 0x53    
   \   00000038   0x54 0x2E          DC8 54H, 2EH, 0DH, 0AH, 0
   \              0x0D 0x0A    
   \              0x00         
   \   0000003D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_94:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x43 0x4D          DC8 43H, 4DH, 50H, 5FH, 4FH, 46H, 46H, 53H
   \              0x50 0x5F    
   \              0x4F 0x46    
   \              0x46 0x53    
   \   00000038   0x54 0x2E          DC8 54H, 2EH, 0DH, 0AH, 0
   \              0x0D 0x0A    
   \              0x00         
   \   0000003D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_95:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x49 0x4E          DC8 49H, 4EH, 54H, 5FH, 41H, 53H, 53H, 47H
   \              0x54 0x5F    
   \              0x41 0x53    
   \              0x53 0x47    
   \   00000038   0x4E 0x2E          DC8 4EH, 2EH, 0DH, 0AH, 0
   \              0x0D 0x0A    
   \              0x00         
   \   0000003D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_96:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x49 0x4E          DC8 49H, 4EH, 54H, 5FH, 50H, 45H, 52H, 53H
   \              0x54 0x5F    
   \              0x50 0x45    
   \              0x52 0x53    
   \   00000038   0x49 0x53          DC8 49H, 53H, 54H, 2EH, 0DH, 0AH, 0
   \              0x54 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000003F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_97:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x43 0x4E          DC8 43H, 4EH, 56H, 52H, 53H, 4EH, 5FH, 49H
   \              0x56 0x52    
   \              0x53 0x4E    
   \              0x5F 0x49    
   \   00000038   0x4E 0x54          DC8 4EH, 54H, 2EH, 0DH, 0AH, 0
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   0000003E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_98:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 3AH, 20H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x3A 0x20    
   \   00000018   0x49 0x6E          DC8 49H, 6EH, 69H, 74H, 69H, 61H, 6CH, 69H
   \              0x69 0x74    
   \              0x69 0x61    
   \              0x6C 0x69    
   \   00000020   0x7A 0x61          DC8 7AH, 61H, 74H, 69H, 6FH, 6EH, 20H, 43H
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x43    
   \   00000028   0x6F 0x6D          DC8 6FH, 6DH, 70H, 6CH, 65H, 74H, 65H, 20H
   \              0x70 0x6C    
   \              0x65 0x74    
   \              0x65 0x20    
   \   00000030   0x77 0x69          DC8 77H, 69H, 74H, 68H, 20H, 55H, 53H, 45H
   \              0x74 0x68    
   \              0x20 0x55    
   \              0x53 0x45    
   \   00000038   0x52 0x20          DC8 52H, 20H, 56H, 61H, 6CH, 75H, 65H, 73H
   \              0x56 0x61    
   \              0x6C 0x75    
   \              0x65 0x73    
   \   00000040   0x2E 0x0D          DC8 2EH, 0DH, 0AH, 0
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_99:
   \   00000000   0x52 0x47          DC8 "RGB Color Light Sensor Status: "
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \              0x72 0x20    
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \              0x53 0x65    
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \              0x74 0x61    
   \              0x74 0x75    
   \              0x73 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_100:
   \   00000000   0x25 0x30          DC8 "%02x / "
   \              0x32 0x78    
   \              0x20 0x2F    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_101:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 3AH, 20H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x3A 0x20    
   \   00000018   0x52 0x45          DC8 52H, 45H, 53H, 45H, 54H, 20H, 43H, 4DH
   \              0x53 0x45    
   \              0x54 0x20    
   \              0x43 0x4D    
   \   00000020   0x44 0x20          DC8 44H, 20H, 53H, 65H, 6EH, 74H, 20H, 53H
   \              0x53 0x65    
   \              0x6E 0x74    
   \              0x20 0x53    
   \   00000028   0x75 0x63          DC8 75H, 63H, 63H, 65H, 73H, 66H, 75H, 6CH
   \              0x63 0x65    
   \              0x73 0x66    
   \              0x75 0x6C    
   \   00000030   0x2E 0x0D          DC8 2EH, 0DH, 0AH, 0
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_102:
   \   00000000   0x52 0x47          DC8 "RGB Color Light Sensor ID Code: "
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \              0x72 0x20    
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \              0x53 0x65    
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x49    
   \              0x44 0x20    
   \              0x43 0x6F    
   \              0x64 0x65    
   \              0x3A 0x20    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_103:
   \   00000000   0x35 0x56          DC8 "5V Power Plane Powered UP.\015\012"
   \              0x20 0x50    
   \              0x6F 0x77    
   \              0x65 0x72    
   \              0x20 0x50    
   \              0x6C 0x61    
   \              0x6E 0x65    
   \              0x20 0x50    
   \              0x6F 0x77    
   \              0x65 0x72    
   \              0x65 0x64    
   \              0x20 0x55    
   \              0x50 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_104:
   \   00000000   0x35 0x56          DC8 "5V Power Plane Powered DOWN.\015\012"
   \              0x20 0x50    
   \              0x6F 0x77    
   \              0x65 0x72    
   \              0x20 0x50    
   \              0x6C 0x61    
   \              0x6E 0x65    
   \              0x20 0x50    
   \              0x6F 0x77    
   \              0x65 0x72    
   \              0x65 0x64    
   \              0x20 0x44    
   \              0x4F 0x57    
   \              0x4E 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_105:
   \   00000000   0x45 0x52          DC8 "ERROR: Illegal 5V Power Plane Command.\015\012"
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x49    
   \              0x6C 0x6C    
   \              0x65 0x67    
   \              0x61 0x6C    
   \              0x20 0x35    
   \              0x56 0x20    
   \              0x50 0x6F    
   \              0x77 0x65    
   \              0x72 0x20    
   \              0x50 0x6C    
   \              0x61 0x6E    
   \              0x65 0x20    
   \              0x43 0x6F    
   \              0x6D 0x6D    
   \              0x61 0x6E    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_106:
   \   00000000   0x54 0x20          DC8 "T ERROR: Not a legal command.\015\012"
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x61    
   \              0x20 0x6C    
   \              0x65 0x67    
   \              0x61 0x6C    
   \              0x20 0x63    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_107:
   \   00000000   0x54 0x49          DC8 "TI SYNTAX ERROR: Not correct format.\015\012"
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x63    
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_108:
   \   00000000   0x54 0x49          DC8 "TIS SYNTAX ERROR: Not correct format.\015\012"
   \              0x53 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x4E 0x6F    
   \              0x74 0x20    
   \              0x63 0x6F    
   \              0x72 0x72    
   \              0x65 0x63    
   \              0x74 0x20    
   \              0x66 0x6F    
   \              0x72 0x6D    
   \              0x61 0x74    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_109:
   \   00000000   0x54 0x49          DC8 "TIS SYNTAX ERROR: Address not HEX Value.\015\012"
   \              0x53 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x41 0x64    
   \              0x64 0x72    
   \              0x65 0x73    
   \              0x73 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x48 0x45    
   \              0x58 0x20    
   \              0x56 0x61    
   \              0x6C 0x75    
   \              0x65 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_110:
   \   00000000   0x54 0x49          DC8 54H, 49H, 53H, 20H, 53H, 59H, 4EH, 54H
   \              0x53 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \   00000008   0x41 0x58          DC8 41H, 58H, 20H, 45H, 52H, 52H, 4FH, 52H
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \   00000010   0x3A 0x20          DC8 3AH, 20H, 4EH, 75H, 6DH, 62H, 65H, 72H
   \              0x4E 0x75    
   \              0x6D 0x62    
   \              0x65 0x72    
   \   00000018   0x20 0x6F          DC8 20H, 6FH, 66H, 20H, 42H, 79H, 74H, 65H
   \              0x66 0x20    
   \              0x42 0x79    
   \              0x74 0x65    
   \   00000020   0x73 0x20          DC8 73H, 20H, 6EH, 6FH, 74H, 20H, 48H, 45H
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x48 0x45    
   \   00000028   0x58 0x20          DC8 58H, 20H, 56H, 61H, 6CH, 75H, 65H, 2EH
   \              0x56 0x61    
   \              0x6C 0x75    
   \              0x65 0x2E    
   \   00000030   0x0D 0x0A          DC8 0DH, 0AH, 0
   \              0x00         
   \   00000033   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_111:
   \   00000000   0x54 0x49          DC8 "TIS: GOOD CMD: %x.\015\012"
   \              0x53 0x3A    
   \              0x20 0x47    
   \              0x4F 0x4F    
   \              0x44 0x20    
   \              0x43 0x4D    
   \              0x44 0x3A    
   \              0x20 0x25    
   \              0x78 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_112:
   \   00000000   0x54 0x49          DC8 "TIS: GOOD CMD: %x."
   \              0x53 0x3A    
   \              0x20 0x47    
   \              0x4F 0x4F    
   \              0x44 0x20    
   \              0x43 0x4D    
   \              0x44 0x3A    
   \              0x20 0x25    
   \              0x78 0x2E    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \   00000000   0x25 0x78          DC8 "%x."
   \              0x2E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_114:
   \   00000000   0x54 0x49          DC8 "TIR SYNTAX ERROR: Not correct format.\015\012"
   \              0x52 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x4E 0x6F    
   \              0x74 0x20    
   \              0x63 0x6F    
   \              0x72 0x72    
   \              0x65 0x63    
   \              0x74 0x20    
   \              0x66 0x6F    
   \              0x72 0x6D    
   \              0x61 0x74    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_115:
   \   00000000   0x54 0x49          DC8 "TIR SYNTAX ERROR: Address not HEX Value.\015\012"
   \              0x52 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x41 0x64    
   \              0x64 0x72    
   \              0x65 0x73    
   \              0x73 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x48 0x45    
   \              0x58 0x20    
   \              0x56 0x61    
   \              0x6C 0x75    
   \              0x65 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_116:
   \   00000000   0x54 0x49          DC8 54H, 49H, 52H, 20H, 53H, 59H, 4EH, 54H
   \              0x52 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \   00000008   0x41 0x58          DC8 41H, 58H, 20H, 45H, 52H, 52H, 4FH, 52H
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \   00000010   0x3A 0x20          DC8 3AH, 20H, 4EH, 75H, 6DH, 62H, 65H, 72H
   \              0x4E 0x75    
   \              0x6D 0x62    
   \              0x65 0x72    
   \   00000018   0x20 0x6F          DC8 20H, 6FH, 66H, 20H, 42H, 79H, 74H, 65H
   \              0x66 0x20    
   \              0x42 0x79    
   \              0x74 0x65    
   \   00000020   0x73 0x20          DC8 73H, 20H, 6EH, 6FH, 74H, 20H, 48H, 45H
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x48 0x45    
   \   00000028   0x58 0x20          DC8 58H, 20H, 56H, 61H, 6CH, 75H, 65H, 2EH
   \              0x56 0x61    
   \              0x6C 0x75    
   \              0x65 0x2E    
   \   00000030   0x0D 0x0A          DC8 0DH, 0AH, 0
   \              0x00         
   \   00000033   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_117:
   \   00000000   0x54 0x49          DC8 54H, 49H, 52H, 20H, 53H, 59H, 4EH, 54H
   \              0x52 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \   00000008   0x41 0x58          DC8 41H, 58H, 20H, 45H, 52H, 52H, 4FH, 52H
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \   00000010   0x3A 0x20          DC8 3AH, 20H, 4EH, 75H, 6DH, 62H, 65H, 72H
   \              0x4E 0x75    
   \              0x6D 0x62    
   \              0x65 0x72    
   \   00000018   0x20 0x6F          DC8 20H, 6FH, 66H, 20H, 42H, 79H, 74H, 65H
   \              0x66 0x20    
   \              0x42 0x79    
   \              0x74 0x65    
   \   00000020   0x73 0x20          DC8 73H, 20H, 52H, 45H, 43H, 45H, 49H, 56H
   \              0x52 0x45    
   \              0x43 0x45    
   \              0x49 0x56    
   \   00000028   0x45 0x44          DC8 45H, 44H, 20H, 6EH, 6FH, 74H, 20H, 48H
   \              0x20 0x6E    
   \              0x6F 0x74    
   \              0x20 0x48    
   \   00000030   0x45 0x58          DC8 45H, 58H, 20H, 56H, 61H, 6CH, 75H, 65H
   \              0x20 0x56    
   \              0x61 0x6C    
   \              0x75 0x65    
   \   00000038   0x2E 0x0D          DC8 2EH, 0DH, 0AH, 0
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_118:
   \   00000000   0x54 0x49          DC8 "TIR: GOOD CMD: %x.\015\012"
   \              0x52 0x3A    
   \              0x20 0x47    
   \              0x4F 0x4F    
   \              0x44 0x20    
   \              0x43 0x4D    
   \              0x44 0x3A    
   \              0x20 0x25    
   \              0x78 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_119:
   \   00000000   0x54 0x49          DC8 "TIR SYNTAX ERROR: Data not HEX Value.\015\012"
   \              0x52 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x44 0x61    
   \              0x74 0x61    
   \              0x20 0x6E    
   \              0x6F 0x74    
   \              0x20 0x48    
   \              0x45 0x58    
   \              0x20 0x56    
   \              0x61 0x6C    
   \              0x75 0x65    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_120:
   \   00000000   0x54 0x49          DC8 "TIR: GOOD CMD: %x."
   \              0x52 0x3A    
   \              0x20 0x47    
   \              0x4F 0x4F    
   \              0x44 0x20    
   \              0x43 0x4D    
   \              0x44 0x3A    
   \              0x20 0x25    
   \              0x78 0x2E    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_121:
   \   00000000   0x20 0x20          DC8 "     DATA: "
   \              0x20 0x20    
   \              0x20 0x44    
   \              0x41 0x54    
   \              0x41 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_122:
   \   00000000   0x54 0x49          DC8 "TIQ SYNTAX ERROR: Not correct format.\015\012"
   \              0x51 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x4E 0x6F    
   \              0x74 0x20    
   \              0x63 0x6F    
   \              0x72 0x72    
   \              0x65 0x63    
   \              0x74 0x20    
   \              0x66 0x6F    
   \              0x72 0x6D    
   \              0x61 0x74    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_123:
   \   00000000   0x54 0x49          DC8 "TIQ SYNTAX ERROR: Address not HEX Value.\015\012"
   \              0x51 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x41 0x64    
   \              0x64 0x72    
   \              0x65 0x73    
   \              0x73 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x48 0x45    
   \              0x58 0x20    
   \              0x56 0x61    
   \              0x6C 0x75    
   \              0x65 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_124:
   \   00000000   0x54 0x49          DC8 54H, 49H, 51H, 20H, 53H, 59H, 4EH, 54H
   \              0x51 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \   00000008   0x41 0x58          DC8 41H, 58H, 20H, 45H, 52H, 52H, 4FH, 52H
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \   00000010   0x3A 0x20          DC8 3AH, 20H, 4EH, 75H, 6DH, 62H, 65H, 72H
   \              0x4E 0x75    
   \              0x6D 0x62    
   \              0x65 0x72    
   \   00000018   0x20 0x6F          DC8 20H, 6FH, 66H, 20H, 42H, 79H, 74H, 65H
   \              0x66 0x20    
   \              0x42 0x79    
   \              0x74 0x65    
   \   00000020   0x73 0x20          DC8 73H, 20H, 6EH, 6FH, 74H, 20H, 48H, 45H
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x48 0x45    
   \   00000028   0x58 0x20          DC8 58H, 20H, 56H, 61H, 6CH, 75H, 65H, 2EH
   \              0x56 0x61    
   \              0x6C 0x75    
   \              0x65 0x2E    
   \   00000030   0x0D 0x0A          DC8 0DH, 0AH, 0
   \              0x00         
   \   00000033   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_125:
   \   00000000   0x3C 0x53          DC8 3CH, 53H, 54H, 41H, 54H, 55H, 53H, 3EH
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \   00000008   0x25 0x73          DC8 25H, 73H, 2FH, 2FH, 25H, 73H, 2FH, 2FH
   \              0x2F 0x2F    
   \              0x25 0x73    
   \              0x2F 0x2F    
   \   00000010   0x25 0x73          DC8 25H, 73H, 2FH, 2FH, 25H, 73H, 2FH, 2FH
   \              0x2F 0x2F    
   \              0x25 0x73    
   \              0x2F 0x2F    
   \   00000018   0x25 0x73          DC8 25H, 73H, 2FH, 2FH, 25H, 73H, 2FH, 2FH
   \              0x2F 0x2F    
   \              0x25 0x73    
   \              0x2F 0x2F    
   \   00000020   0x25 0x73          DC8 25H, 73H, 2FH, 2FH, 25H, 73H, 2FH, 2FH
   \              0x2F 0x2F    
   \              0x25 0x73    
   \              0x2F 0x2F    
   \   00000028   0x25 0x73          DC8 25H, 73H, 2FH, 2FH, 25H, 73H, 2FH, 2FH
   \              0x2F 0x2F    
   \              0x25 0x73    
   \              0x2F 0x2F    
   \   00000030   0x25 0x73          DC8 25H, 73H, 2FH, 2FH, 25H, 73H, 3CH, 2FH
   \              0x2F 0x2F    
   \              0x25 0x73    
   \              0x3C 0x2F    
   \   00000038   0x53 0x54          DC8 53H, 54H, 41H, 54H, 55H, 53H, 3EH, 0
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_126:
   \   00000000   0x25 0x73          DC8 "%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\015\012"
   \              0x2C 0x25    
   \              0x73 0x2C    
   \              0x25 0x73    
   \              0x2C 0x25    
   \              0x73 0x2C    
   \              0x25 0x73    
   \              0x2C 0x25    
   \              0x73 0x2C    
   \              0x25 0x73    
   \              0x2C 0x25    
   \              0x73 0x2C    
   \              0x25 0x73    
   \              0x2C 0x25    
   \              0x73 0x2C    
   \              0x25 0x73    
   \              0x2C 0x25    
   \              0x73 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_127:
   \   00000000   0x43 0x4F          DC8 "COMPLETE"
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_128:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TC_HWERR_PRESSUE</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x5F 0x48    
   \              0x57 0x45    
   \              0x52 0x52    
   \              0x5F 0x50    
   \              0x52 0x45    
   \              0x53 0x53    
   \              0x55 0x45    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_129:
   \   00000000   0x50 0x72          DC8 "Pressure TASKING ERROR!"
   \              0x65 0x73    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x20 0x54    
   \              0x41 0x53    
   \              0x4B 0x49    
   \              0x4E 0x47    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x21 0x00    

   \                                 In section .rodata, align 4
   \                     ?_130:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TC_HWERR_HUMIDITY</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x5F 0x48    
   \              0x57 0x45    
   \              0x52 0x52    
   \              0x5F 0x48    
   \              0x55 0x4D    
   \              0x49 0x44    
   \              0x49 0x54    
   \              0x59 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_131:
   \   00000000   0x48 0x75          DC8 "Humidity TASKING ERROR!"
   \              0x6D 0x69    
   \              0x64 0x69    
   \              0x74 0x79    
   \              0x20 0x54    
   \              0x41 0x53    
   \              0x4B 0x49    
   \              0x4E 0x47    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x21 0x00    

   \                                 In section .rodata, align 4
   \                     ?_132:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TC_HWERR_TEMPERATURE</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x5F 0x48    
   \              0x57 0x45    
   \              0x52 0x52    
   \              0x5F 0x54    
   \              0x45 0x4D    
   \              0x50 0x45    
   \              0x52 0x41    
   \              0x54 0x55    
   \              0x52 0x45    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000002A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_133:
   \   00000000   0x41 0x4D          DC8 "AMBIENT TEMPERATURE TASKING ERROR!"
   \              0x42 0x49    
   \              0x45 0x4E    
   \              0x54 0x20    
   \              0x54 0x45    
   \              0x4D 0x50    
   \              0x45 0x52    
   \              0x41 0x54    
   \              0x55 0x52    
   \              0x45 0x20    
   \              0x54 0x41    
   \              0x53 0x4B    
   \              0x49 0x4E    
   \              0x47 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x21    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_134:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TC_HWERR_IRTEMP</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x5F 0x48    
   \              0x57 0x45    
   \              0x52 0x52    
   \              0x5F 0x49    
   \              0x52 0x54    
   \              0x45 0x4D    
   \              0x50 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_135:
   \   00000000   0x47 0x52          DC8 "GRID EYE/COOL EYE TASKING ERROR!"
   \              0x49 0x44    
   \              0x20 0x45    
   \              0x59 0x45    
   \              0x2F 0x43    
   \              0x4F 0x4F    
   \              0x4C 0x20    
   \              0x45 0x59    
   \              0x45 0x20    
   \              0x54 0x41    
   \              0x53 0x4B    
   \              0x49 0x4E    
   \              0x47 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x21    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_136:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TCS_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x53 0x5F    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_137:
   \   00000000   0x54 0x43          DC8 "TCS SYNTAX ERROR: Not correct format.\015\012"
   \              0x53 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x4E 0x6F    
   \              0x74 0x20    
   \              0x63 0x6F    
   \              0x72 0x72    
   \              0x65 0x63    
   \              0x74 0x20    
   \              0x66 0x6F    
   \              0x72 0x6D    
   \              0x61 0x74    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_138:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TCS_BADPARAM</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x53 0x5F    
   \              0x42 0x41    
   \              0x44 0x50    
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_139:
   \   00000000   0x54 0x43          DC8 "TCS SYNTAX ERROR: Bad Parameter.\015\012"
   \              0x53 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x42 0x61    
   \              0x64 0x20    
   \              0x50 0x61    
   \              0x72 0x61    
   \              0x6D 0x65    
   \              0x74 0x65    
   \              0x72 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_140:
   \   00000000   0x25 0x73          DC8 "%s %f %f"
   \              0x20 0x25    
   \              0x66 0x20    
   \              0x25 0x66    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_141:
   \   00000000   0x50 0x61          DC8 "Parms: %s, %f, %f.\015\012"
   \              0x72 0x6D    
   \              0x73 0x3A    
   \              0x20 0x25    
   \              0x73 0x2C    
   \              0x20 0x25    
   \              0x66 0x2C    
   \              0x20 0x25    
   \              0x66 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_142:
   \   00000000   0x30 0x30          DC8 "0002"
   \              0x30 0x32    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_143:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_SHNT_VLTG</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x53    
   \              0x48 0x4E    
   \              0x54 0x5F    
   \              0x56 0x4C    
   \              0x54 0x47    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_144:
   \   00000000   0x53 0x68          DC8 "Shnt_Vltg Set COMPLETE.\015\012"
   \              0x6E 0x74    
   \              0x5F 0x56    
   \              0x6C 0x74    
   \              0x67 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_145:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_SHNT_VLTG_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x53    
   \              0x48 0x4E    
   \              0x54 0x5F    
   \              0x56 0x4C    
   \              0x54 0x47    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_146:
   \   00000000   0x54 0x43          DC8 "TCS SET ERROR: FAILED.\015\012"
   \              0x53 0x20    
   \              0x53 0x45    
   \              0x54 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x46    
   \              0x41 0x49    
   \              0x4C 0x45    
   \              0x44 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_147:
   \   00000000   0x30 0x30          DC8 "0004"
   \              0x30 0x34    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_148:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_CURRENT</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x43    
   \              0x55 0x52    
   \              0x52 0x45    
   \              0x4E 0x54    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_149:
   \   00000000   0x43 0x75          DC8 "Current Set COMPLETE."
   \              0x72 0x72    
   \              0x65 0x6E    
   \              0x74 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_150:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_CURRENT_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x43    
   \              0x55 0x52    
   \              0x52 0x45    
   \              0x4E 0x54    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_151:
   \   00000000   0x30 0x30          DC8 "0006"
   \              0x30 0x36    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_152:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_POWER</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x50    
   \              0x4F 0x57    
   \              0x45 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_153:
   \   00000000   0x50 0x6F          DC8 "Power Set COMPLETE."
   \              0x77 0x65    
   \              0x72 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_154:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_POWER_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x50    
   \              0x4F 0x57    
   \              0x45 0x52    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_155:
   \   00000000   0x30 0x30          DC8 "0008"
   \              0x30 0x38    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_156:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_VOLTAGE</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x56    
   \              0x4F 0x4C    
   \              0x54 0x41    
   \              0x47 0x45    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_157:
   \   00000000   0x56 0x6F          DC8 "Voltage Set COMPLETE."
   \              0x6C 0x74    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_158:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_VOLTAGE_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x56    
   \              0x4F 0x4C    
   \              0x54 0x41    
   \              0x47 0x45    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_159:
   \   00000000   0x30 0x30          DC8 "000A"
   \              0x30 0x41    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_160:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_TEMPC</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x54    
   \              0x45 0x4D    
   \              0x50 0x43    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_161:
   \   00000000   0x54 0x65          DC8 "TempC Set COMPLETE."
   \              0x6D 0x70    
   \              0x43 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_162:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_TEMPC_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x54    
   \              0x45 0x4D    
   \              0x50 0x43    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_163:
   \   00000000   0x30 0x30          DC8 "000B"
   \              0x30 0x42    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_164:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_TEMPF</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x54    
   \              0x45 0x4D    
   \              0x50 0x46    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_165:
   \   00000000   0x54 0x65          DC8 "TempF Set COMPLETE."
   \              0x6D 0x70    
   \              0x46 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_166:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_TEMPF_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x54    
   \              0x45 0x4D    
   \              0x50 0x46    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_167:
   \   00000000   0x30 0x30          DC8 "0011"
   \              0x31 0x31    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_168:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_PRESSURE</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x50    
   \              0x52 0x45    
   \              0x53 0x53    
   \              0x55 0x52    
   \              0x45 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_169:
   \   00000000   0x50 0x72          DC8 "Pressure Set COMPLETE."
   \              0x65 0x73    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_170:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_PRESSURE_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x50    
   \              0x52 0x45    
   \              0x53 0x53    
   \              0x55 0x52    
   \              0x45 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_171:
   \   00000000   0x30 0x30          DC8 "0030"
   \              0x33 0x30    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_172:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_HUMIDITY</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x48    
   \              0x55 0x4D    
   \              0x49 0x44    
   \              0x49 0x54    
   \              0x59 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_173:
   \   00000000   0x48 0x75          DC8 "Humidity Set COMPLETE."
   \              0x6D 0x69    
   \              0x64 0x69    
   \              0x74 0x79    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_174:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_HUMIDITY_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x48    
   \              0x55 0x4D    
   \              0x49 0x44    
   \              0x49 0x54    
   \              0x59 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_175:
   \   00000000   0x30 0x30          DC8 "0032"
   \              0x33 0x32    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_176:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_HUM_TEMPC</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x48    
   \              0x55 0x4D    
   \              0x5F 0x54    
   \              0x45 0x4D    
   \              0x50 0x43    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_177:
   \   00000000   0x48 0x75          DC8 "Hum_TempC Set COMPLETE."
   \              0x6D 0x5F    
   \              0x54 0x65    
   \              0x6D 0x70    
   \              0x43 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_178:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_HUM_TEMPC_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x48    
   \              0x55 0x4D    
   \              0x5F 0x54    
   \              0x45 0x4D    
   \              0x50 0x43    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_179:
   \   00000000   0x30 0x30          DC8 "0033"
   \              0x33 0x33    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_180:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_HUM_TEMPF</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x48    
   \              0x55 0x4D    
   \              0x5F 0x54    
   \              0x45 0x4D    
   \              0x50 0x46    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_181:
   \   00000000   0x48 0x75          DC8 "Hum_TempF Set COMPLETE."
   \              0x6D 0x5F    
   \              0x54 0x65    
   \              0x6D 0x70    
   \              0x46 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_182:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_HUM_TEMPF_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x48    
   \              0x55 0x4D    
   \              0x5F 0x54    
   \              0x45 0x4D    
   \              0x50 0x46    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_183:
   \   00000000   0x30 0x30          DC8 "000D"
   \              0x30 0x44    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_184:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_RGB_RED</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x47 0x42    
   \              0x5F 0x52    
   \              0x45 0x44    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_185:
   \   00000000   0x52 0x47          DC8 "RGB_Red Set COMPLETE."
   \              0x42 0x5F    
   \              0x52 0x65    
   \              0x64 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_186:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_RGB_RED_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x47 0x42    
   \              0x5F 0x52    
   \              0x45 0x44    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_187:
   \   00000000   0x30 0x30          DC8 "000E"
   \              0x30 0x45    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_188:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_RGB_GREEN</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x47 0x42    
   \              0x5F 0x47    
   \              0x52 0x45    
   \              0x45 0x4E    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_189:
   \   00000000   0x52 0x47          DC8 "RGB_Green Set COMPLETE."
   \              0x42 0x5F    
   \              0x47 0x72    
   \              0x65 0x65    
   \              0x6E 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_190:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_RGB_GREEN_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x47 0x42    
   \              0x5F 0x47    
   \              0x52 0x45    
   \              0x45 0x4E    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_191:
   \   00000000   0x30 0x30          DC8 "000F"
   \              0x30 0x46    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_192:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_RGB_BLUE</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x47 0x42    
   \              0x5F 0x42    
   \              0x4C 0x55    
   \              0x45 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_193:
   \   00000000   0x52 0x47          DC8 "RGB_Blue Set COMPLETE."
   \              0x42 0x5F    
   \              0x42 0x6C    
   \              0x75 0x65    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_194:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_RGB_BLUE_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x47 0x42    
   \              0x5F 0x42    
   \              0x4C 0x55    
   \              0x45 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_195:
   \   00000000   0x30 0x30          DC8 "0017"
   \              0x31 0x37    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_196:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_THERM_C</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x54    
   \              0x48 0x45    
   \              0x52 0x4D    
   \              0x5F 0x43    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_197:
   \   00000000   0x54 0x68          DC8 "Therm_C Set COMPLETE."
   \              0x65 0x72    
   \              0x6D 0x5F    
   \              0x43 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_198:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_THERM_C_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x54    
   \              0x48 0x45    
   \              0x52 0x4D    
   \              0x5F 0x43    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_199:
   \   00000000   0x30 0x30          DC8 "0019"
   \              0x31 0x39    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_200:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_1C</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x31    
   \              0x43 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_201:
   \   00000000   0x52 0x6F          DC8 "RoadT_1C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x31 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_202:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_1C_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x31    
   \              0x43 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_203:
   \   00000000   0x30 0x30          DC8 "001B"
   \              0x31 0x42    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_204:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_2C</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x32    
   \              0x43 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_205:
   \   00000000   0x52 0x6F          DC8 "RoadT_2C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x32 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_206:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_2C_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x32    
   \              0x43 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_207:
   \   00000000   0x30 0x30          DC8 "001D"
   \              0x31 0x44    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_208:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_3C</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x33    
   \              0x43 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_209:
   \   00000000   0x52 0x6F          DC8 "RoadT_3C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x33 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_210:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_3C_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x33    
   \              0x43 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_211:
   \   00000000   0x30 0x30          DC8 "001F"
   \              0x31 0x46    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_212:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_4C</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x34    
   \              0x43 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_213:
   \   00000000   0x52 0x6F          DC8 "RoadT_4C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x34 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_214:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_4C_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x34    
   \              0x43 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_215:
   \   00000000   0x30 0x30          DC8 "0021"
   \              0x32 0x31    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_216:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_5C</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x35    
   \              0x43 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_217:
   \   00000000   0x52 0x6F          DC8 "RoadT_5C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x35 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_218:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_5C_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x35    
   \              0x43 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_219:
   \   00000000   0x30 0x30          DC8 "0023"
   \              0x32 0x33    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_220:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_6C</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x36    
   \              0x43 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_221:
   \   00000000   0x52 0x6F          DC8 "RoadT_6C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x36 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_222:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_6C_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x36    
   \              0x43 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_223:
   \   00000000   0x30 0x30          DC8 "0025"
   \              0x32 0x35    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_224:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_7C</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x37    
   \              0x43 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_225:
   \   00000000   0x52 0x6F          DC8 "RoadT_7C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x37 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_226:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_7C_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x37    
   \              0x43 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_227:
   \   00000000   0x30 0x30          DC8 "0027"
   \              0x32 0x37    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_228:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_8C</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x38    
   \              0x43 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_229:
   \   00000000   0x52 0x6F          DC8 "RoadT_8C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x38 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_230:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_8C_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x38    
   \              0x43 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_231:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TCS_BADUUID</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x53 0x5F    
   \              0x42 0x41    
   \              0x44 0x55    
   \              0x55 0x49    
   \              0x44 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_232:
   \   00000000   0x54 0x43          DC8 "TCS SYNTAX ERROR: Bad UUID.\015\012"
   \              0x53 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x42 0x61    
   \              0x64 0x20    
   \              0x55 0x55    
   \              0x49 0x44    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_233:
   \   00000000   0x54 0x43          DC8 "TCS SYNTAX ERROR: Wrong Number of Parameters.\015\012"
   \              0x53 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x57 0x72    
   \              0x6F 0x6E    
   \              0x67 0x20    
   \              0x4E 0x75    
   \              0x6D 0x62    
   \              0x65 0x72    
   \              0x20 0x6F    
   \              0x66 0x20    
   \              0x50 0x61    
   \              0x72 0x61    
   \              0x6D 0x65    
   \              0x74 0x65    
   \              0x72 0x73    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_234:
   \   00000000   0x3C 0x53          DC8 "<STATUS>TCR:%s\\"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x54 0x43    
   \              0x52 0x3A    
   \              0x25 0x73    
   \              0x5C 0x00    

   \                                 In section .rodata, align 4
   \                     ?_235:
   \   00000000   0x43 0x41          DC8 "CALIBRATION DATA\015\012Date: %s\015\012"
   \              0x4C 0x49    
   \              0x42 0x52    
   \              0x41 0x54    
   \              0x49 0x4F    
   \              0x4E 0x20    
   \              0x44 0x41    
   \              0x54 0x41    
   \              0x0D 0x0A    
   \              0x44 0x61    
   \              0x74 0x65    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_236:
   \   00000000   0x4E 0x61          DC8 "Name\t\t        UUID\t\tSlope\t\tOffset\015\012"
   \              0x6D 0x65    
   \              0x09 0x09    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x55 0x55    
   \              0x49 0x44    
   \              0x09 0x09    
   \              0x53 0x6C    
   \              0x6F 0x70    
   \              0x65 0x09    
   \              0x09 0x4F    
   \              0x66 0x66    
   \              0x73 0x65    
   \              0x74 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_237:
   \   00000000   0x25 0x73          DC8 "%s:0002//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x30    
   \              0x32 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_238:
   \   00000000   0x25 0x73          DC8 "%s\t0002\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x30    
   \              0x32 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_239:
   \   00000000   0x25 0x73          DC8 "%s:0004//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x30    
   \              0x34 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_240:
   \   00000000   0x25 0x73          DC8 "%s\t        0004\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x30    
   \              0x30 0x30    
   \              0x34 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_241:
   \   00000000   0x25 0x73          DC8 "%s:0006//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x30    
   \              0x36 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_242:
   \   00000000   0x25 0x73          DC8 "%s\t0006\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x30    
   \              0x36 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_243:
   \   00000000   0x25 0x73          DC8 "%s:0008//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x30    
   \              0x38 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_244:
   \   00000000   0x25 0x73          DC8 "%s\t        0008\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x30    
   \              0x30 0x30    
   \              0x38 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_245:
   \   00000000   0x25 0x73          DC8 "%s:000A//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x30    
   \              0x41 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_246:
   \   00000000   0x25 0x73          DC8 "%s\t000A\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x30    
   \              0x41 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_247:
   \   00000000   0x25 0x73          DC8 "%s:000B//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x30    
   \              0x42 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_248:
   \   00000000   0x25 0x73          DC8 "%s\t000B\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x30    
   \              0x42 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_249:
   \   00000000   0x25 0x73          DC8 "%s:0011//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x31    
   \              0x31 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_250:
   \   00000000   0x25 0x73          DC8 "%s\t0011\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x31    
   \              0x31 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_251:
   \   00000000   0x25 0x73          DC8 "%s:0030//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x33    
   \              0x30 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_252:
   \   00000000   0x25 0x73          DC8 "%s\t0030\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x33    
   \              0x30 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_253:
   \   00000000   0x25 0x73          DC8 "%s:0032//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x33    
   \              0x32 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_254:
   \   00000000   0x25 0x73          DC8 "%s\t0032\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x33    
   \              0x32 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_255:
   \   00000000   0x25 0x73          DC8 "%s:0033//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x33    
   \              0x33 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_256:
   \   00000000   0x25 0x73          DC8 "%s\t0033\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x33    
   \              0x33 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_257:
   \   00000000   0x25 0x73          DC8 "%s:000D//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x30    
   \              0x44 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_258:
   \   00000000   0x25 0x73          DC8 "%s\t        000D\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x30    
   \              0x30 0x30    
   \              0x44 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_259:
   \   00000000   0x25 0x73          DC8 "%s:000E//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x30    
   \              0x45 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_260:
   \   00000000   0x25 0x73          DC8 "%s\t000E\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x30    
   \              0x45 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_261:
   \   00000000   0x25 0x73          DC8 "%s:000F//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x30    
   \              0x46 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_262:
   \   00000000   0x25 0x73          DC8 "%s\t000F\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x30    
   \              0x46 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_263:
   \   00000000   0x25 0x73          DC8 "%s:0017//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x31    
   \              0x37 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_264:
   \   00000000   0x25 0x73          DC8 "%s\t        0017\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x30    
   \              0x30 0x31    
   \              0x37 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_265:
   \   00000000   0x25 0x73          DC8 "%s:0019//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x31    
   \              0x39 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_266:
   \   00000000   0x25 0x73          DC8 "%s\t0019\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x31    
   \              0x39 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_267:
   \   00000000   0x25 0x73          DC8 "%s:001B//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x31    
   \              0x42 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_268:
   \   00000000   0x25 0x73          DC8 "%s\t001B\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x31    
   \              0x42 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_269:
   \   00000000   0x25 0x73          DC8 "%s:001D//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x31    
   \              0x44 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_270:
   \   00000000   0x25 0x73          DC8 "%s\t001D\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x31    
   \              0x44 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_271:
   \   00000000   0x25 0x73          DC8 "%s:001F//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x31    
   \              0x46 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_272:
   \   00000000   0x25 0x73          DC8 "%s\t001F\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x31    
   \              0x46 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_273:
   \   00000000   0x25 0x73          DC8 "%s:0021//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x32    
   \              0x31 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_274:
   \   00000000   0x25 0x73          DC8 "%s\t0021\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x32    
   \              0x31 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_275:
   \   00000000   0x25 0x73          DC8 "%s:0023//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x32    
   \              0x33 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_276:
   \   00000000   0x25 0x73          DC8 "%s\t0023\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x32    
   \              0x33 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_277:
   \   00000000   0x25 0x73          DC8 "%s:0025//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x32    
   \              0x35 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_278:
   \   00000000   0x25 0x73          DC8 "%s\t0025\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x32    
   \              0x35 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_279:
   \   00000000   0x25 0x73          DC8 "%s:0027//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x32    
   \              0x37 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_280:
   \   00000000   0x25 0x73          DC8 "%s\t0027\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x32    
   \              0x37 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_281:
   \   00000000   0x0D 0x0A          DC8 "\015\012     COMPLETE.\015\012"
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_282:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TCT_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x54 0x5F    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_283:
   \   00000000   0x54 0x43          DC8 "TCT SYNTAX ERROR: Not correct format.\015\012"
   \              0x54 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x4E 0x6F    
   \              0x74 0x20    
   \              0x63 0x6F    
   \              0x72 0x72    
   \              0x65 0x63    
   \              0x74 0x20    
   \              0x66 0x6F    
   \              0x72 0x6D    
   \              0x61 0x74    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_284:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TCT_BADPARAM</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x54 0x5F    
   \              0x42 0x41    
   \              0x44 0x50    
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_285:
   \   00000000   0x54 0x43          DC8 "TCT SYNTAX ERROR: Bad Parameter.\015\012"
   \              0x54 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x42 0x61    
   \              0x64 0x20    
   \              0x50 0x61    
   \              0x72 0x61    
   \              0x6D 0x65    
   \              0x74 0x65    
   \              0x72 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_286:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TCT_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x54 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_287:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCT_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x54    
   \              0x5F 0x41    
   \              0x43 0x4B    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_288:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TCI_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x49 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_289:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCI_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x49    
   \              0x5F 0x41    
   \              0x43 0x4B    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_290:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_DRIVER:%04x</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x44    
   \              0x52 0x49    
   \              0x56 0x45    
   \              0x52 0x3A    
   \              0x25 0x30    
   \              0x34 0x78    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_291:
   \   00000000   0x44 0x72          DC8 "Driver Status: %04x\015\012"
   \              0x69 0x76    
   \              0x65 0x72    
   \              0x20 0x53    
   \              0x74 0x61    
   \              0x74 0x75    
   \              0x73 0x3A    
   \              0x20 0x25    
   \              0x30 0x34    
   \              0x78 0x0D    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_292:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_RESET_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x52    
   \              0x45 0x53    
   \              0x45 0x54    
   \              0x5F 0x41    
   \              0x43 0x4B    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_293:
   \   00000000   0x52 0x45          DC8 "RESET CALLED BUT NO RESPONSE!!\015\012"
   \              0x53 0x45    
   \              0x54 0x20    
   \              0x43 0x41    
   \              0x4C 0x4C    
   \              0x45 0x44    
   \              0x20 0x42    
   \              0x55 0x54    
   \              0x20 0x4E    
   \              0x4F 0x20    
   \              0x52 0x45    
   \              0x53 0x50    
   \              0x4F 0x4E    
   \              0x53 0x45    
   \              0x21 0x21    
   \              0x0D 0x0A    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_294:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TK_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x5F 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_295:
   \   00000000   0x54 0x4B          DC8 "TK SYNTAX ERROR: Not correct format.\015\012"
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x63    
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_296:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKSR_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x53 0x52    
   \              0x5F 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_297:
   \   00000000   0x54 0x4B          DC8 "TKSR SYNTAX ERROR: Not correct format.\015\012"
   \              0x53 0x52    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x63    
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_298:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKSR_BADPARAM</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x53 0x52    
   \              0x5F 0x42    
   \              0x41 0x44    
   \              0x50 0x41    
   \              0x52 0x41    
   \              0x4D 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_299:
   \   00000000   0x54 0x4B          DC8 "TKSR SYNTAX ERROR: Bad Parameter.\015\012"
   \              0x53 0x52    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x61 0x64    
   \              0x20 0x50    
   \              0x61 0x72    
   \              0x61 0x6D    
   \              0x65 0x74    
   \              0x65 0x72    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_300:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TKSR_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x4B 0x53    
   \              0x52 0x5F    
   \              0x41 0x43    
   \              0x4B 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_301:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKSS_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x53 0x53    
   \              0x5F 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_302:
   \   00000000   0x54 0x4B          DC8 "TKSS SYNTAX ERROR: Not correct format.\015\012"
   \              0x53 0x53    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x63    
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_303:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKSS_BADPARAM</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x53 0x53    
   \              0x5F 0x42    
   \              0x41 0x44    
   \              0x50 0x41    
   \              0x52 0x41    
   \              0x4D 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_304:
   \   00000000   0x54 0x4B          DC8 "TKSS SYNTAX ERROR: Bad Parameter.\015\012"
   \              0x53 0x53    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x61 0x64    
   \              0x20 0x50    
   \              0x61 0x72    
   \              0x61 0x6D    
   \              0x65 0x74    
   \              0x65 0x72    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_305:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TKSS_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x4B 0x53    
   \              0x53 0x5F    
   \              0x41 0x43    
   \              0x4B 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_306:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKST_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x53 0x54    
   \              0x5F 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_307:
   \   00000000   0x54 0x4B          DC8 "TKST SYNTAX ERROR: Not correct format.\015\012"
   \              0x53 0x54    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x63    
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_308:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKST_BADPARAM</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x53 0x54    
   \              0x5F 0x42    
   \              0x41 0x44    
   \              0x50 0x41    
   \              0x52 0x41    
   \              0x4D 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_309:
   \   00000000   0x54 0x4B          DC8 "TKST SYNTAX ERROR: Bad Parameter.\015\012"
   \              0x53 0x54    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x61 0x64    
   \              0x20 0x50    
   \              0x61 0x72    
   \              0x61 0x6D    
   \              0x65 0x74    
   \              0x65 0x72    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_310:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TKST_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x4B 0x53    
   \              0x54 0x5F    
   \              0x41 0x43    
   \              0x4B 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_311:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKSB_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x53 0x42    
   \              0x5F 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_312:
   \   00000000   0x54 0x4B          DC8 "TKSB SYNTAX ERROR: Not correct format.\015\012"
   \              0x53 0x42    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x63    
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_313:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKSB_BADPARAM</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x53 0x42    
   \              0x5F 0x42    
   \              0x41 0x44    
   \              0x50 0x41    
   \              0x52 0x41    
   \              0x4D 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_314:
   \   00000000   0x54 0x4B          DC8 "TKSB SYNTAX ERROR: Bad Parameter.\015\012"
   \              0x53 0x42    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x61 0x64    
   \              0x20 0x50    
   \              0x61 0x72    
   \              0x61 0x6D    
   \              0x65 0x74    
   \              0x65 0x72    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_315:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TKSB_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x4B 0x53    
   \              0x42 0x5F    
   \              0x41 0x43    
   \              0x4B 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_316:
   \   00000000   0x54 0x4B          DC8 "TKS ERROR: Not a legal command.\015\012"
   \              0x53 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x61    
   \              0x20 0x6C    
   \              0x65 0x67    
   \              0x61 0x6C    
   \              0x20 0x63    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_317:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TKRR:%3.1f</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x4B 0x52    
   \              0x52 0x3A    
   \              0x25 0x33    
   \              0x2E 0x31    
   \              0x66 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_318:
   \   00000000   0x52 0x64          DC8 "RdSnd Sample Rate:  %3.1f Seconds.\015\012"
   \              0x53 0x6E    
   \              0x64 0x20    
   \              0x53 0x61    
   \              0x6D 0x70    
   \              0x6C 0x65    
   \              0x20 0x52    
   \              0x61 0x74    
   \              0x65 0x3A    
   \              0x20 0x20    
   \              0x25 0x33    
   \              0x2E 0x31    
   \              0x66 0x20    
   \              0x53 0x65    
   \              0x63 0x6F    
   \              0x6E 0x64    
   \              0x73 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_319:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TKRS:%3.1f</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x4B 0x52    
   \              0x53 0x3A    
   \              0x25 0x33    
   \              0x2E 0x31    
   \              0x66 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_320:
   \   00000000   0x53 0x65          DC8 "Sensor Sample Rate: %3.1f Seconds.\015\012\015\012> "
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \              0x61 0x6D    
   \              0x70 0x6C    
   \              0x65 0x20    
   \              0x52 0x61    
   \              0x74 0x65    
   \              0x3A 0x20    
   \              0x25 0x33    
   \              0x2E 0x31    
   \              0x66 0x20    
   \              0x53 0x65    
   \              0x63 0x6F    
   \              0x6E 0x64    
   \              0x73 0x2E    
   \              0x0D 0x0A    
   \              0x0D 0x0A    
   \              0x3E 0x20    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_321:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TKRT:%d</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x4B 0x52    
   \              0x54 0x3A    
   \              0x25 0x64    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_322:
   \   00000000   0x54 0x41          DC8 "TACK Limit: %d.\015\012\015\012> "
   \              0x43 0x4B    
   \              0x20 0x4C    
   \              0x69 0x6D    
   \              0x69 0x74    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x0D    
   \              0x0A 0x3E    
   \              0x20 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_323:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TKRB:%d</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x4B 0x52    
   \              0x42 0x3A    
   \              0x25 0x64    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_324:
   \   00000000   0x42 0x6F          DC8 "Boot Delay: %d Seconds.\015\012\015\012> "
   \              0x6F 0x74    
   \              0x20 0x44    
   \              0x65 0x6C    
   \              0x61 0x79    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x20 0x53    
   \              0x65 0x63    
   \              0x6F 0x6E    
   \              0x64 0x73    
   \              0x2E 0x0D    
   \              0x0A 0x0D    
   \              0x0A 0x3E    
   \              0x20 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_325:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKR_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x52 0x5F    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_326:
   \   00000000   0x54 0x4B          DC8 "TKR ERROR: Not a legal command.\015\012"
   \              0x52 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x61    
   \              0x20 0x6C    
   \              0x65 0x67    
   \              0x61 0x6C    
   \              0x20 0x63    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_327:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TU_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x55    
   \              0x5F 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_328:
   \   00000000   0x54 0x55          DC8 "TU SYNTAX ERROR: Not correct format.\015\012"
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x63    
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_329:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TUE_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x55 0x45    
   \              0x5F 0x41    
   \              0x43 0x4B    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_330:
   \   00000000   0x55 0x6E          DC8 "Units XML State CHANGED: ENABLED\015\012\015\012> "
   \              0x69 0x74    
   \              0x73 0x20    
   \              0x58 0x4D    
   \              0x4C 0x20    
   \              0x53 0x74    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x43 0x48    
   \              0x41 0x4E    
   \              0x47 0x45    
   \              0x44 0x3A    
   \              0x20 0x45    
   \              0x4E 0x41    
   \              0x42 0x4C    
   \              0x45 0x44    
   \              0x0D 0x0A    
   \              0x0D 0x0A    
   \              0x3E 0x20    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_331:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TUD_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x55 0x44    
   \              0x5F 0x41    
   \              0x43 0x4B    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_332:
   \   00000000   0x55 0x6E          DC8 "Units XML State CHANGED: DISABLED\015\012\015\012> "
   \              0x69 0x74    
   \              0x73 0x20    
   \              0x58 0x4D    
   \              0x4C 0x20    
   \              0x53 0x74    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x43 0x48    
   \              0x41 0x4E    
   \              0x47 0x45    
   \              0x44 0x3A    
   \              0x20 0x44    
   \              0x49 0x53    
   \              0x41 0x42    
   \              0x4C 0x45    
   \              0x44 0x0D    
   \              0x0A 0x0D    
   \              0x0A 0x3E    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_333:
   \   00000000   0x54 0x55          DC8 "TU SYNTAX ERROR: Not a legal command.\015\012"
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x61    
   \              0x20 0x6C    
   \              0x65 0x67    
   \              0x61 0x6C    
   \              0x20 0x63    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_334:
   \   00000000   0x42 0x47          DC8 "BGM111 MONITOR MODE.\015\012\015\012"
   \              0x4D 0x31    
   \              0x31 0x31    
   \              0x20 0x4D    
   \              0x4F 0x4E    
   \              0x49 0x54    
   \              0x4F 0x52    
   \              0x20 0x4D    
   \              0x4F 0x44    
   \              0x45 0x2E    
   \              0x0D 0x0A    
   \              0x0D 0x0A    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_335:
   \   00000000   0x55 0x73          DC8 "Use <ESC> to exit mode.\015\012\015\012"
   \              0x65 0x20    
   \              0x3C 0x45    
   \              0x53 0x43    
   \              0x3E 0x20    
   \              0x74 0x6F    
   \              0x20 0x65    
   \              0x78 0x69    
   \              0x74 0x20    
   \              0x6D 0x6F    
   \              0x64 0x65    
   \              0x2E 0x0D    
   \              0x0A 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_336:
   \   00000000   0x3C 0x53          DC8 "<STATUS>TF_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x54 0x46    
   \              0x5F 0x41    
   \              0x43 0x4B    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_337:
   \   00000000   0x46 0x6C          DC8 "Flash Frame Variables Reset to Factory Values.\015\012"
   \              0x61 0x73    
   \              0x68 0x20    
   \              0x46 0x72    
   \              0x61 0x6D    
   \              0x65 0x20    
   \              0x56 0x61    
   \              0x72 0x69    
   \              0x61 0x62    
   \              0x6C 0x65    
   \              0x73 0x20    
   \              0x52 0x65    
   \              0x73 0x65    
   \              0x74 0x20    
   \              0x74 0x6F    
   \              0x20 0x46    
   \              0x61 0x63    
   \              0x74 0x6F    
   \              0x72 0x79    
   \              0x20 0x56    
   \              0x61 0x6C    
   \              0x75 0x65    
   \              0x73 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000031   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_338:
   \   00000000   0x3C 0x53          DC8 "<STATUS>TL_ERROR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x54 0x4C    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_339:
   \   00000000   0x43 0x6F          DC8 "Code Locked for Programming!\015\012\015\012"
   \              0x64 0x65    
   \              0x20 0x4C    
   \              0x6F 0x63    
   \              0x6B 0x65    
   \              0x64 0x20    
   \              0x66 0x6F    
   \              0x72 0x20    
   \              0x50 0x72    
   \              0x6F 0x67    
   \              0x72 0x61    
   \              0x6D 0x6D    
   \              0x69 0x6E    
   \              0x67 0x21    
   \              0x0D 0x0A    
   \              0x0D 0x0A    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_340:
   \   00000000   0x20 0x20          DC8 "   HARD RESET NEEDED TO EXIT MODE\015\012"
   \              0x20 0x48    
   \              0x41 0x52    
   \              0x44 0x20    
   \              0x52 0x45    
   \              0x53 0x45    
   \              0x54 0x20    
   \              0x4E 0x45    
   \              0x45 0x44    
   \              0x45 0x44    
   \              0x20 0x54    
   \              0x4F 0x20    
   \              0x45 0x58    
   \              0x49 0x54    
   \              0x20 0x4D    
   \              0x4F 0x44    
   \              0x45 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_341:
   \   00000000   0x25 0x73          DC8 "%s %s"
   \              0x20 0x25    
   \              0x73 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_342:
   \   00000000   0x54 0x53          DC8 "TS: %s\015\012"
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_343:
   \   00000000   0x54 0x53          DC8 "TS SYNTAX ERROR: Too many parameters.\015\012"
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x54    
   \              0x6F 0x6F    
   \              0x20 0x6D    
   \              0x61 0x6E    
   \              0x79 0x20    
   \              0x70 0x61    
   \              0x72 0x61    
   \              0x6D 0x65    
   \              0x74 0x65    
   \              0x72 0x73    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_344:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: BERR: Bus Error reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x45 0x52    
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x75 0x73    
   \              0x20 0x45    
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x20 0x72    
   \              0x65 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_345:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: ARLO: Arbitration lost reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x41    
   \              0x52 0x4C    
   \              0x4F 0x3A    
   \              0x20 0x41    
   \              0x72 0x62    
   \              0x69 0x74    
   \              0x72 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x6C    
   \              0x6F 0x73    
   \              0x74 0x20    
   \              0x72 0x65    
   \              0x70 0x6F    
   \              0x72 0x74    
   \              0x65 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   0000002E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_346:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: AF: Acknowledge failure reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x41    
   \              0x46 0x3A    
   \              0x20 0x41    
   \              0x63 0x6B    
   \              0x6E 0x6F    
   \              0x77 0x6C    
   \              0x65 0x64    
   \              0x67 0x65    
   \              0x20 0x66    
   \              0x61 0x69    
   \              0x6C 0x75    
   \              0x72 0x65    
   \              0x20 0x72    
   \              0x65 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_347:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: OVR: Overrun/Underrun reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4F    
   \              0x56 0x52    
   \              0x3A 0x20    
   \              0x4F 0x76    
   \              0x65 0x72    
   \              0x72 0x75    
   \              0x6E 0x2F    
   \              0x55 0x6E    
   \              0x64 0x65    
   \              0x72 0x72    
   \              0x75 0x6E    
   \              0x20 0x72    
   \              0x65 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_348:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: DMA: DMA Error reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x44    
   \              0x4D 0x41    
   \              0x3A 0x20    
   \              0x44 0x4D    
   \              0x41 0x20    
   \              0x45 0x72    
   \              0x72 0x6F    
   \              0x72 0x20    
   \              0x72 0x65    
   \              0x70 0x6F    
   \              0x72 0x74    
   \              0x65 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_349:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: TIMEOUT: Timeout Error reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x54    
   \              0x49 0x4D    
   \              0x45 0x4F    
   \              0x55 0x54    
   \              0x3A 0x20    
   \              0x54 0x69    
   \              0x6D 0x65    
   \              0x6F 0x75    
   \              0x74 0x20    
   \              0x45 0x72    
   \              0x72 0x6F    
   \              0x72 0x20    
   \              0x72 0x65    
   \              0x70 0x6F    
   \              0x72 0x74    
   \              0x65 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   0000002E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_350:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: Unknown Error reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x55    
   \              0x6E 0x6B    
   \              0x6E 0x6F    
   \              0x77 0x6E    
   \              0x20 0x45    
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x20 0x72    
   \              0x65 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_351:
   \   00000000   0x49 0x32          DC8 "I2C BUSY: I2C reported BUSY error.\015\012"
   \              0x43 0x20    
   \              0x42 0x55    
   \              0x53 0x59    
   \              0x3A 0x20    
   \              0x49 0x32    
   \              0x43 0x20    
   \              0x72 0x65    
   \              0x70 0x6F    
   \              0x72 0x74    
   \              0x65 0x64    
   \              0x20 0x42    
   \              0x55 0x53    
   \              0x59 0x20    
   \              0x65 0x72    
   \              0x72 0x6F    
   \              0x72 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_352:
   \   00000000   0x49 0x32          DC8 "I2C TIMEOUT: I2C reported TIMEOUT.\015\012"
   \              0x43 0x20    
   \              0x54 0x49    
   \              0x4D 0x45    
   \              0x4F 0x55    
   \              0x54 0x3A    
   \              0x20 0x49    
   \              0x32 0x43    
   \              0x20 0x72    
   \              0x65 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x20    
   \              0x54 0x49    
   \              0x4D 0x45    
   \              0x4F 0x55    
   \              0x54 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_353:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: I2C reported unnown error.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x49    
   \              0x32 0x43    
   \              0x20 0x72    
   \              0x65 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x20    
   \              0x75 0x6E    
   \              0x6E 0x6F    
   \              0x77 0x6E    
   \              0x20 0x65    
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_354:
   \   00000000   0x0D 0x0A          DC8 "\015\012\015\012> "
   \              0x0D 0x0A    
   \              0x3E 0x20    
   \              0x00         
   \   00000007   0x00               DC8 0
   4461          
   4462          /*void sleep(void) {
   4463          //    TimMasterHandle.Instance = TIM5;
   4464           
   4465              // Disable HAL tick interrupt
   4466          //    __HAL_TIM_DISABLE_IT(&TimMasterHandle, TIM_IT_CC2);
   4467           
   4468              // Request to enter SLEEP mode
   4469              HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
   4470           
   4471              // Enable HAL tick interrupt
   4472          //    __HAL_TIM_ENABLE_IT(&TimMasterHandle, TIM_IT_CC2);
   4473          }*/
   4474           
   4475          /*void deepsleep(void) {
   4476              // Request to enter STOP mode with regulator in low power mode
   4477              HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
   4478           
   4479              // After wake-up from STOP reconfigure the PLL
   4480              //SetSysClock();
   4481              SystemClock_Config();
   4482          }*/
   4483          
   4484          /************************ (C) COPYRIGHT WeatherCloud *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
    1280   RoadBrd_ParseString
      1280   -> BGM111_Transmit
      1280   -> Get_DriverStates
      1280   -> Get_DriverStatus
      1280   -> HAL_Delay
      1280   -> HAL_NVIC_SystemReset
      1280   -> MX_I2C1_Reset
      1280   -> RdBrd_CAL_GetStr
      1280   -> RoadBrdSnd_ClrBffrs
      1280   -> RoadBrdSnd_DumpBin0
      1280   -> RoadBrdSnd_DumpBin16
      1280   -> RoadBrdSnd_DumpBin32
      1280   -> RoadBrdSnd_DumpBin48
      1280   -> RoadBrdSnd_ProcessSound
      1280   -> RoadBrdSnd_getSaveBffr
      1280   -> RoadBrd_Baro_ReadPressure
      1280   -> RoadBrd_Baro_ReadPressure_Scaled
      1280   -> RoadBrd_Baro_ReadTemp
      1280   -> RoadBrd_CAL_GetOffset
      1280   -> RoadBrd_CAL_GetSlope
      1280   -> RoadBrd_CAL_GetTimeString
      1280   -> RoadBrd_CAL_InitializeFrmFlash
      1280   -> RoadBrd_CAL_Set_CalItem
      1280   -> RoadBrd_CAL_Set_TimeString
      1280   -> RoadBrd_CoolEye_ReadValues
      1280   -> RoadBrd_CoolEye_ReadValues_Scaled
      1280   -> RoadBrd_Get_BootDelay
      1280   -> RoadBrd_Get_RdSndTickCnt
      1280   -> RoadBrd_Get_SnsrTickCnt
      1280   -> RoadBrd_Get_TackLimit
      1280   -> RoadBrd_GridEyeInit
      1280   -> RoadBrd_GridEyeReset
      1280   -> RoadBrd_GridEye_ReadValues
      1280   -> RoadBrd_GridEye_ReadValues_Scaled
      1280   -> RoadBrd_HumidityInit
      1280   -> RoadBrd_Humidity_ReadHumidity
      1280   -> RoadBrd_Humidity_ReadHumidity_Scaled
      1280   -> RoadBrd_Humidity_ReadTemperature
      1280   -> RoadBrd_I2C_GetError
      1280   -> RoadBrd_I2C_Master_Receive
      1280   -> RoadBrd_I2C_Master_Transmit
      1280   -> RoadBrd_Init_Barometer
      1280   -> RoadBrd_Init_VMonitor
      1280   -> RoadBrd_RGBFullInit
      1280   -> RoadBrd_RGBInit
      1280   -> RoadBrd_RGBReadID
      1280   -> RoadBrd_RGBReadStatus
      1280   -> RoadBrd_RGBReadValues
      1280   -> RoadBrd_RGBReset
      1280   -> RoadBrd_ReadTemp
      1280   -> RoadBrd_ReadTemp_Scaled
      1280   -> RoadBrd_Set_BootDelay
      1280   -> RoadBrd_Set_RdSndTickCnt
      1280   -> RoadBrd_Set_SnsrTickCnt
      1280   -> RoadBrd_Set_TackLimit
      1280   -> RoadBrd_Set_UnitsFlag
      1280   -> RoadBrd_TestandRead_Barometer
      1280   -> RoadBrd_UART_Transmit
      1280   -> RoadBrd_VMonitor_RdCurrent
      1280   -> RoadBrd_VMonitor_RdCurrent_Scaled
      1280   -> RoadBrd_VMonitor_RdPower
      1280   -> RoadBrd_VMonitor_RdPower_Scaled
      1280   -> RoadBrd_VMonitor_RdShntVltg
      1280   -> RoadBrd_VMonitor_RdShntVltg_Scaled
      1280   -> RoadBrd_VMonitor_RdVoltage
      1280   -> RoadBrd_VMonitor_RdVoltage_Scaled
      1280   -> RoadBrd_WWDG_InitializeFrmFlash
      1280   -> RoadBrd_WaitForState
      1280   -> RoadBrd_gpio_Off
      1280   -> RoadBrd_gpio_On
      1280   -> __aeabi_f2d
      1280   -> __aeabi_fdiv
      1280   -> __aeabi_ui2f
      1280   -> atoi
      1280   -> hatoi
      1280   -> isHexNum
      1280   -> isdigit
      1280   -> sprintf
      1280   -> sscanf
      1280   -> strcat
      1280   -> strcpy
      1280   -> strlen
      1280   -> strncmp
       0   RoadBrd_ParserInit
       8   RoadBrd_ParserTsk
         8   -> strcpy
         8   -> strlen
       8   RoadBrd_ProcessParserTsk
         8   -> RoadBrd_ParseString
       0   Tst_Bypass
      24   hatoi
        24   -> strlen
      24   isHexNum
        24   -> strlen


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_10
       4  ??DataTable3_11
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable3_9
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_10
       4  ??DataTable4_11
       4  ??DataTable4_12
       4  ??DataTable4_13
       4  ??DataTable4_14
       4  ??DataTable4_15
       4  ??DataTable4_16
       4  ??DataTable4_17
       4  ??DataTable4_18
       4  ??DataTable4_19
       4  ??DataTable4_2
       4  ??DataTable4_20
       4  ??DataTable4_21
       4  ??DataTable4_22
       4  ??DataTable4_23
       4  ??DataTable4_24
       4  ??DataTable4_25
       4  ??DataTable4_26
       4  ??DataTable4_27
       4  ??DataTable4_28
       4  ??DataTable4_29
       4  ??DataTable4_3
       4  ??DataTable4_30
       4  ??DataTable4_31
       4  ??DataTable4_32
       4  ??DataTable4_33
       4  ??DataTable4_34
       4  ??DataTable4_35
       4  ??DataTable4_36
       4  ??DataTable4_37
       4  ??DataTable4_38
       4  ??DataTable4_39
       4  ??DataTable4_4
       4  ??DataTable4_40
       4  ??DataTable4_41
       4  ??DataTable4_42
       4  ??DataTable4_43
       4  ??DataTable4_44
       4  ??DataTable4_45
       4  ??DataTable4_46
       4  ??DataTable4_47
       4  ??DataTable4_48
       4  ??DataTable4_49
       4  ??DataTable4_5
       4  ??DataTable4_50
       4  ??DataTable4_51
       4  ??DataTable4_52
       4  ??DataTable4_53
       4  ??DataTable4_54
       4  ??DataTable4_55
       4  ??DataTable4_56
       4  ??DataTable4_57
       4  ??DataTable4_58
       4  ??DataTable4_59
       4  ??DataTable4_6
       4  ??DataTable4_60
       4  ??DataTable4_61
       4  ??DataTable4_62
       4  ??DataTable4_63
       4  ??DataTable4_64
       4  ??DataTable4_65
       4  ??DataTable4_66
       4  ??DataTable4_67
       4  ??DataTable4_68
       4  ??DataTable4_69
       4  ??DataTable4_7
       4  ??DataTable4_70
       4  ??DataTable4_71
       4  ??DataTable4_72
       4  ??DataTable4_73
       4  ??DataTable4_74
       4  ??DataTable4_8
       4  ??DataTable4_9
      56  ?_0
      36  ?_1
      40  ?_10
       8  ?_100
      52  ?_101
      36  ?_102
      32  ?_103
      32  ?_104
      44  ?_105
      32  ?_106
      40  ?_107
      40  ?_108
      44  ?_109
      32  ?_11
      52  ?_110
      24  ?_111
      20  ?_112
       4  ?_113
      40  ?_114
      44  ?_115
      52  ?_116
      60  ?_117
      24  ?_118
      40  ?_119
      32  ?_12
      20  ?_120
      12  ?_121
      40  ?_122
      44  ?_123
      52  ?_124
      64  ?_125
      40  ?_126
      12  ?_127
      40  ?_128
      24  ?_129
      40  ?_13
      40  ?_130
      24  ?_131
      44  ?_132
      36  ?_133
      40  ?_134
      36  ?_135
      32  ?_136
      40  ?_137
      36  ?_138
      36  ?_139
      32  ?_14
      12  ?_140
      24  ?_141
       8  ?_142
      36  ?_143
      28  ?_144
      40  ?_145
      28  ?_146
       8  ?_147
      32  ?_148
      24  ?_149
      32  ?_15
      36  ?_150
       8  ?_151
      32  ?_152
      20  ?_153
      36  ?_154
       8  ?_155
      32  ?_156
      24  ?_157
      36  ?_158
       8  ?_159
      40  ?_16
      32  ?_160
      20  ?_161
      36  ?_162
       8  ?_163
      32  ?_164
      20  ?_165
      36  ?_166
       8  ?_167
      36  ?_168
      24  ?_169
      28  ?_17
      40  ?_170
       8  ?_171
      36  ?_172
      24  ?_173
      40  ?_174
       8  ?_175
      36  ?_176
      24  ?_177
      40  ?_178
       8  ?_179
       1  ?_18
      36  ?_180
      24  ?_181
      40  ?_182
       8  ?_183
      32  ?_184
      24  ?_185
      36  ?_186
       8  ?_187
      36  ?_188
      24  ?_189
       8  ?_19
      40  ?_190
       8  ?_191
      36  ?_192
      24  ?_193
      40  ?_194
       8  ?_195
      32  ?_196
      24  ?_197
      36  ?_198
       8  ?_199
      68  ?_2
      12  ?_20
      36  ?_200
      24  ?_201
      40  ?_202
       8  ?_203
      36  ?_204
      24  ?_205
      40  ?_206
       8  ?_207
      36  ?_208
      24  ?_209
      20  ?_21
      40  ?_210
       8  ?_211
      36  ?_212
      24  ?_213
      40  ?_214
       8  ?_215
      36  ?_216
      24  ?_217
      40  ?_218
       8  ?_219
      28  ?_22
      36  ?_220
      24  ?_221
      40  ?_222
       8  ?_223
      36  ?_224
      24  ?_225
      40  ?_226
       8  ?_227
      36  ?_228
      24  ?_229
      36  ?_23
      40  ?_230
      36  ?_231
      32  ?_232
      48  ?_233
      16  ?_234
      32  ?_235
      36  ?_236
      24  ?_237
      24  ?_238
      24  ?_239
      32  ?_24
      32  ?_240
      24  ?_241
      24  ?_242
      24  ?_243
      32  ?_244
      24  ?_245
      24  ?_246
      24  ?_247
      24  ?_248
      24  ?_249
      40  ?_25
      24  ?_250
      24  ?_251
      24  ?_252
      24  ?_253
      24  ?_254
      24  ?_255
      24  ?_256
      24  ?_257
      32  ?_258
      24  ?_259
      40  ?_26
      24  ?_260
      24  ?_261
      24  ?_262
      24  ?_263
      32  ?_264
      24  ?_265
      24  ?_266
      24  ?_267
      24  ?_268
      24  ?_269
      40  ?_27
      24  ?_270
      24  ?_271
      24  ?_272
      24  ?_273
      24  ?_274
      24  ?_275
      24  ?_276
      24  ?_277
      24  ?_278
      24  ?_279
      56  ?_28
      24  ?_280
      20  ?_281
      32  ?_282
      40  ?_283
      36  ?_284
      36  ?_285
      32  ?_286
      28  ?_287
      32  ?_288
      28  ?_289
      20  ?_29
      32  ?_290
      24  ?_291
      32  ?_292
      36  ?_293
      32  ?_294
      40  ?_295
      36  ?_296
      44  ?_297
      36  ?_298
      36  ?_299
      40  ?_3
      36  ?_30
      32  ?_300
      36  ?_301
      44  ?_302
      36  ?_303
      36  ?_304
      32  ?_305
      36  ?_306
      44  ?_307
      36  ?_308
      36  ?_309
      16  ?_31
      32  ?_310
      36  ?_311
      44  ?_312
      36  ?_313
      36  ?_314
      32  ?_315
      36  ?_316
      32  ?_317
      40  ?_318
      32  ?_319
      12  ?_32
      44  ?_320
      28  ?_321
      24  ?_322
      28  ?_323
      32  ?_324
      32  ?_325
      36  ?_326
      32  ?_327
      40  ?_328
      28  ?_329
      40  ?_33
      40  ?_330
      28  ?_331
      40  ?_332
      40  ?_333
      28  ?_334
      28  ?_335
      24  ?_336
      52  ?_337
      28  ?_338
      36  ?_339
      40  ?_34
      36  ?_340
       8  ?_341
      12  ?_342
      40  ?_343
      40  ?_344
      48  ?_345
      48  ?_346
      48  ?_347
      40  ?_348
      48  ?_349
      20  ?_35
      40  ?_350
      40  ?_351
      40  ?_352
      40  ?_353
       8  ?_354
      32  ?_36
      16  ?_37
      16  ?_38
      40  ?_39
      32  ?_4
      40  ?_40
      32  ?_41
      28  ?_42
      36  ?_43
      48  ?_44
      48  ?_45
      24  ?_46
      20  ?_47
      56  ?_48
      44  ?_49
      32  ?_5
      40  ?_50
      24  ?_51
      32  ?_52
      28  ?_53
      44  ?_54
      36  ?_55
      28  ?_56
      36  ?_57
      20  ?_58
      36  ?_59
       4  ?_6
      24  ?_60
      32  ?_61
      20  ?_62
      32  ?_63
      20  ?_64
      32  ?_65
      24  ?_66
      24  ?_67
      36  ?_68
      32  ?_69
      40  ?_7
      24  ?_70
      44  ?_71
      16  ?_72
      48  ?_73
      24  ?_74
      20  ?_75
      44  ?_76
      40  ?_77
      28  ?_78
      56  ?_79
      32  ?_8
      16  ?_80
      44  ?_81
      12  ?_82
      12  ?_83
      12  ?_84
      72  ?_85
      68  ?_86
      72  ?_87
      64  ?_88
      60  ?_89
      32  ?_9
      60  ?_90
      60  ?_91
      56  ?_92
      64  ?_93
      64  ?_94
      64  ?_95
      64  ?_96
      64  ?_97
      68  ?_98
      32  ?_99
       1  Bypass
      44  ParseString
   18764  RoadBrd_ParseString
      12  RoadBrd_ParserInit
      66  RoadBrd_ParserTsk
      40  RoadBrd_ProcessParserTsk
       6  Tst_Bypass
      88  hatoi
      74  isHexNum

 
     45 bytes in section .bss
 11 253 bytes in section .rodata
 19 402 bytes in section .text
 
 19 402 bytes of CODE  memory
 11 253 bytes of CONST memory
     45 bytes of DATA  memory

Errors: none
Warnings: none
