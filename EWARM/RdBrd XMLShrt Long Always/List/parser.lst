###############################################################################
#
# IAR ANSI C/C++ Compiler V7.60.2.11341/W32 for ARM       01/Feb/2018  14:51:07
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\parser.c
#    Command line =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\parser.c
#        -D USE_HAL_DRIVER -D STM32L152xE -D USE_STM32L1XX_NUCLEO -D ASCII -D
#        REV_L -D LONG_DELAY -D XML_SHRT -lCN
#        "D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\RdBrd
#        XMLShrt Long Always\List" -o
#        "D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\RdBrd
#        XMLShrt Long Always\Obj" --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_clustering --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.4\arm\INC\c\DLib_Config_Full.h" -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/STM32L1xx_HAL_Driver/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/STM32L1xx_HAL_Driver/Inc/Legacy\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/BSP/STM32L1xx_Nucleo\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/portable/IAR/ARM_CM3\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Core/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/CMSIS/Include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/CMSIS/Device/ST/STM32L1xx/Include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\..\Middlewares\Third_Party\BgLib\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.4\arm\CMSIS\Include\"
#    Locale       =  English_United States.1252
#    List file    =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\RdBrd
#        XMLShrt Long Always\List\parser.lst
#    Object file  =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\RdBrd
#        XMLShrt Long Always\Obj\parser.o
#
###############################################################################

D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\parser.c
      1          /**
      2            ******************************************************************************
      3            * File Name          : parser.c
      4            * Description        : This file provides code that parses the passed string and 
      5            *                      performs the requested operation. It then returns a string
      6            *                      hardware based on the LPS22HB chip.
      7            ******************************************************************************
      8            *
      9            * COPYRIGHT(c) 2016 WeatherCloud
     10            *
     11            * Redistribution and use in source and binary forms, with or without modification,
     12            * are permitted provided that the following conditions are met:
     13            *   1. Redistributions of source code must retain the above copyright notice,
     14            *      this list of conditions and the following disclaimer.
     15            *   2. Redistributions in binary form must reproduce the above copyright notice,
     16            *      this list of conditions and the following disclaimer in the documentation
     17            *      and/or other materials provided with the distribution.
     18            *   3. Neither the name of WeatherCloud nor the names of its contributors
     19            *      may be used to endorse or promote products derived from this software
     20            *      without specific prior written permission.
     21            *
     22            * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     23            * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     24            * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     25            * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
     26            * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     27            * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     28            * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
     29            * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
     30            * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
     31            * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     32            *
     33            ******************************************************************************
     34            */
     35          
     36          /* Includes ------------------------------------------------------------------*/
     37          #include "parser.h"
     38          #include "ErrorCodes.h"
     39          #include <ctype.h>
     40          #include <stdlib.h>
     41          #include "wwdg.h"
     42          #include "Calibration.h"
     43          #include "s_record.h"
     44          #include "BootMonitor.h"
     45          
     46          // Enums
     47          typedef enum 
     48          {
     49            NOT_INIT = 0,
     50            AVAILABLE = 1,
     51            BUSY = 2
     52          } ParseTskFlg;
     53          

   \                                 In section .bss, align 1
     54          static bool Bypass = false;
   \                     Bypass:
   \   00000000                      DS8 1
     55          
     56          // Parser Structure for tasks.
     57          struct
     58          {
     59            char          tempBuffer[BUFFER_SIZE];
     60            ParseTskFlg   ParseFlg;

   \                                 In section .bss, align 4
     61          } static ParseString;
   \                     ParseString:
   \   00000000                      DS8 260
     62          
     63          // BGM Structure for tasks.
     64          struct
     65          {
     66            char          tempBuffer[BUFFER_SIZE];
     67            ParseTskFlg   ParseFlg;

   \                                 In section .bss, align 4
     68          } static BGMString;
   \                     BGMString:
   \   00000000                      DS8 260
     69          
     70          /* Parser functions */
     71          
     72          /**
     73            * @brief  This routine initializes the Parse Task Structure and the BGM Task Structure.
     74            * @param  *tempBffr: String to be parsed.
     75            * @retval HAL_StatusTypeDef:     HAL_OK:       Tasking of block of data to UART success.
     76            */

   \                                 In section .text, align 2, keep-with-next
     77          HAL_StatusTypeDef RoadBrd_ParserInit( void )
     78          {
     79            ParseString.ParseFlg = AVAILABLE;
   \                     RoadBrd_ParserInit: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x....             LDR.N    R1,??DataTable3
   \   00000004   0xF881 0x0100      STRB     R0,[R1, #+256]
     80            BGMString.ParseFlg = AVAILABLE;
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0x....             LDR.N    R1,??DataTable3_1
   \   0000000C   0xF881 0x0100      STRB     R0,[R1, #+256]
     81            return HAL_OK;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x4770             BX       LR               ;; return
     82          }
     83          
     84          /**
     85            * @brief  This routine handles the operation of setting up a BGM Event.
     86            * @param  *tempBffr: String to be parsed.
     87            * @retval HAL_StatusTypeDef:     HAL_OK:       Tasking of block of data to UART success.
     88            *                                HAL_ERROR:    Error found in Tasking or data passed.
     89            *                                HAL_BUSY:     UART is busy.
     90            *                                HAL_TIMEOUT:  UART timed out.
     91            */

   \                                 In section .text, align 2, keep-with-next
     92          HAL_StatusTypeDef RoadBrd_BGMTsk(char *tempBffr)
     93          {
   \                     RoadBrd_BGMTsk: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
     94            int x;
     95            
     96            // Test ParseFlg.
     97            if (BGMString.ParseFlg == BUSY)
   \   00000004   0x....             LDR.N    R0,??DataTable3_1
   \   00000006   0xF890 0x0100      LDRB     R0,[R0, #+256]
   \   0000000A   0x2802             CMP      R0,#+2
   \   0000000C   0xD101             BNE.N    ??RoadBrd_BGMTsk_0
     98              return HAL_BUSY;
   \   0000000E   0x2002             MOVS     R0,#+2
   \   00000010   0xE01F             B.N      ??RoadBrd_BGMTsk_1
     99            else if (BGMString.ParseFlg == NOT_INIT)
   \                     ??RoadBrd_BGMTsk_0: (+1)
   \   00000012   0x....             LDR.N    R0,??DataTable3_1
   \   00000014   0xF890 0x0100      LDRB     R0,[R0, #+256]
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD101             BNE.N    ??RoadBrd_BGMTsk_2
    100              return HAL_ERROR;
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0xE018             B.N      ??RoadBrd_BGMTsk_1
    101            // Next Lets make sure passed string is not too big.
    102            if (strlen(tempBffr) >= BUFFER_SIZE)
   \                     ??RoadBrd_BGMTsk_2: (+1)
   \   00000020   0x0020             MOVS     R0,R4
   \   00000022   0x.... 0x....      BL       strlen
   \   00000026   0x28FF             CMP      R0,#+255
   \   00000028   0xD901             BLS.N    ??RoadBrd_BGMTsk_3
    103              return HAL_ERROR;
   \   0000002A   0x2001             MOVS     R0,#+1
   \   0000002C   0xE011             B.N      ??RoadBrd_BGMTsk_1
    104            // Clear Buffer before copying new string.
    105            for (x=0; x<BUFFER_SIZE; x++)
   \                     ??RoadBrd_BGMTsk_3: (+1)
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x0005             MOVS     R5,R0
   \                     ??RoadBrd_BGMTsk_4: (+1)
   \   00000032   0x2DFF             CMP      R5,#+255
   \   00000034   0xDC04             BGT.N    ??RoadBrd_BGMTsk_5
    106              BGMString.tempBuffer[x] = 0x00;
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0x....             LDR.N    R1,??DataTable3_1
   \   0000003A   0x5548             STRB     R0,[R1, R5]
   \   0000003C   0x1C6D             ADDS     R5,R5,#+1
   \   0000003E   0xE7F8             B.N      ??RoadBrd_BGMTsk_4
    107            // Copy String into Structure and set as busy.
    108            strcpy( BGMString.tempBuffer, tempBffr);
   \                     ??RoadBrd_BGMTsk_5: (+1)
   \   00000040   0x0021             MOVS     R1,R4
   \   00000042   0x....             LDR.N    R0,??DataTable3_1
   \   00000044   0x.... 0x....      BL       strcpy
    109            BGMString.ParseFlg = BUSY;
   \   00000048   0x2002             MOVS     R0,#+2
   \   0000004A   0x....             LDR.N    R1,??DataTable3_1
   \   0000004C   0xF881 0x0100      STRB     R0,[R1, #+256]
    110            return HAL_OK;
   \   00000050   0x2000             MOVS     R0,#+0
   \                     ??RoadBrd_BGMTsk_1: (+1)
   \   00000052   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    111          }
    112          
    113          /**
    114            * @brief  This routine handles the operation of setting up a Parse Event.
    115            * @param  *tempBffr: String to be parsed.
    116            * @retval HAL_StatusTypeDef:     HAL_OK:       Tasking of block of data to UART success.
    117            *                                HAL_ERROR:    Error found in Tasking or data passed.
    118            *                                HAL_BUSY:     UART is busy.
    119            *                                HAL_TIMEOUT:  UART timed out.
    120            */

   \                                 In section .text, align 2, keep-with-next
    121          HAL_StatusTypeDef RoadBrd_ParserTsk(char *tempBffr)
    122          {
   \                     RoadBrd_ParserTsk: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    123            int x;
    124            
    125            // Test ParseFlg.
    126            if (ParseString.ParseFlg == BUSY)
   \   00000004   0x....             LDR.N    R0,??DataTable3
   \   00000006   0xF890 0x0100      LDRB     R0,[R0, #+256]
   \   0000000A   0x2802             CMP      R0,#+2
   \   0000000C   0xD101             BNE.N    ??RoadBrd_ParserTsk_0
    127              return HAL_BUSY;
   \   0000000E   0x2002             MOVS     R0,#+2
   \   00000010   0xE01F             B.N      ??RoadBrd_ParserTsk_1
    128            else if (ParseString.ParseFlg == NOT_INIT)
   \                     ??RoadBrd_ParserTsk_0: (+1)
   \   00000012   0x....             LDR.N    R0,??DataTable3
   \   00000014   0xF890 0x0100      LDRB     R0,[R0, #+256]
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD101             BNE.N    ??RoadBrd_ParserTsk_2
    129              return HAL_ERROR;
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0xE018             B.N      ??RoadBrd_ParserTsk_1
    130            // Next Lets make sure passed string is not too big.
    131            if (strlen(tempBffr) >= BUFFER_SIZE)
   \                     ??RoadBrd_ParserTsk_2: (+1)
   \   00000020   0x0020             MOVS     R0,R4
   \   00000022   0x.... 0x....      BL       strlen
   \   00000026   0x28FF             CMP      R0,#+255
   \   00000028   0xD901             BLS.N    ??RoadBrd_ParserTsk_3
    132              return HAL_ERROR;
   \   0000002A   0x2001             MOVS     R0,#+1
   \   0000002C   0xE011             B.N      ??RoadBrd_ParserTsk_1
    133            // Clear Buffer before copying new string.
    134            for (x=0; x<BUFFER_SIZE; x++)
   \                     ??RoadBrd_ParserTsk_3: (+1)
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x0005             MOVS     R5,R0
   \                     ??RoadBrd_ParserTsk_4: (+1)
   \   00000032   0x2DFF             CMP      R5,#+255
   \   00000034   0xDC04             BGT.N    ??RoadBrd_ParserTsk_5
    135              ParseString.tempBuffer[x] = 0x00;
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0x....             LDR.N    R1,??DataTable3
   \   0000003A   0x5548             STRB     R0,[R1, R5]
   \   0000003C   0x1C6D             ADDS     R5,R5,#+1
   \   0000003E   0xE7F8             B.N      ??RoadBrd_ParserTsk_4
    136            // Copy String into Structure and set as busy.
    137            strcpy( ParseString.tempBuffer, tempBffr);
   \                     ??RoadBrd_ParserTsk_5: (+1)
   \   00000040   0x0021             MOVS     R1,R4
   \   00000042   0x....             LDR.N    R0,??DataTable3
   \   00000044   0x.... 0x....      BL       strcpy
    138            ParseString.ParseFlg = BUSY;
   \   00000048   0x2002             MOVS     R0,#+2
   \   0000004A   0x....             LDR.N    R1,??DataTable3
   \   0000004C   0xF881 0x0100      STRB     R0,[R1, #+256]
    139            return HAL_OK;
   \   00000050   0x2000             MOVS     R0,#+0
   \                     ??RoadBrd_ParserTsk_1: (+1)
   \   00000052   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    140          }
    141          
    142          /**
    143            * @brief  This routine handles the operation of processing a Parse Event.
    144            * @param  *tempBffr: String to be parsed.
    145            * @retval HAL_StatusTypeDef:     HAL_OK:       Tasking of block of data to UART success.
    146            *                                HAL_ERROR:    Error found in Tasking or data passed.
    147            *                                HAL_BUSY:     UART is busy.
    148            *                                HAL_TIMEOUT:  UART timed out.
    149            */

   \                                 In section .text, align 2, keep-with-next
    150          HAL_StatusTypeDef RoadBrd_ProcessParserTsk( void )
    151          {
   \                     RoadBrd_ProcessParserTsk: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB094             SUB      SP,SP,#+80
    152            HAL_StatusTypeDef Status;
    153            uint8_t tempBffr2[80];
    154          
    155            // Test BGMString ParseFlg and process.
    156            if (BGMString.ParseFlg == BUSY)
   \   00000004   0x....             LDR.N    R0,??DataTable3_1
   \   00000006   0xF890 0x0100      LDRB     R0,[R0, #+256]
   \   0000000A   0x2802             CMP      R0,#+2
   \   0000000C   0xD119             BNE.N    ??RoadBrd_ProcessParserTsk_0
    157            {
    158              sprintf( (char *)tempBffr2, "<SENT:%s>\r\n\r\n", BGMString.tempBuffer);
   \   0000000E   0x....             LDR.N    R2,??DataTable3_1
   \   00000010   0x....             LDR.N    R1,??DataTable3_2
   \   00000012   0x4668             MOV      R0,SP
   \   00000014   0x.... 0x....      BL       sprintf
    159          
    160              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);
   \   00000018   0x4669             MOV      R1,SP
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000020   0x0004             MOVS     R4,R0
    161              if (Status != HAL_OK)
   \   00000022   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000024   0x2C00             CMP      R4,#+0
   \   00000026   0xD002             BEQ.N    ??RoadBrd_ProcessParserTsk_1
    162                return Status;
   \   00000028   0x0020             MOVS     R0,R4
   \   0000002A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002C   0xE025             B.N      ??RoadBrd_ProcessParserTsk_2
    163              BGM111_Transmit((uint32_t)(strlen(BGMString.tempBuffer)), (uint8_t *)BGMString.tempBuffer);
   \                     ??RoadBrd_ProcessParserTsk_1: (+1)
   \   0000002E   0x....             LDR.N    R0,??DataTable3_1
   \   00000030   0x.... 0x....      BL       strlen
   \   00000034   0x....             LDR.N    R1,??DataTable3_1
   \   00000036   0x.... 0x....      BL       BGM111_Transmit
    164              BGMString.ParseFlg = AVAILABLE;
   \   0000003A   0x2001             MOVS     R0,#+1
   \   0000003C   0x....             LDR.N    R1,??DataTable3_1
   \   0000003E   0xF881 0x0100      STRB     R0,[R1, #+256]
    165            }
    166            
    167            // Test ParseFlg and process.
    168            if (ParseString.ParseFlg == BUSY)
   \                     ??RoadBrd_ProcessParserTsk_0: (+1)
   \   00000042   0x....             LDR.N    R0,??DataTable3
   \   00000044   0xF890 0x0100      LDRB     R0,[R0, #+256]
   \   00000048   0x2802             CMP      R0,#+2
   \   0000004A   0xD115             BNE.N    ??RoadBrd_ProcessParserTsk_3
    169            {
    170              // Next We need to see if OTA Parser is active...
    171              // Test Boot Monitor Flag...If Set, we ae in special Boot monitor mode.
    172              if (Tst_Boot_Bypass())
   \   0000004C   0x.... 0x....      BL       Tst_Boot_Bypass
   \   00000050   0x2800             CMP      R0,#+0
   \   00000052   0xD005             BEQ.N    ??RoadBrd_ProcessParserTsk_4
    173              {
    174                // Yes...Task to Boot Monitor.
    175                Status = Parse_BootString(ParseString.tempBuffer, true);
   \   00000054   0x2101             MOVS     R1,#+1
   \   00000056   0x....             LDR.N    R0,??DataTable3
   \   00000058   0x.... 0x....      BL       Parse_BootString
   \   0000005C   0x0004             MOVS     R4,R0
   \   0000005E   0xE004             B.N      ??RoadBrd_ProcessParserTsk_5
    176              }
    177              else
    178              {
    179                // Else...Normal Monitor Tasking.
    180                Status = RoadBrd_ParseString(ParseString.tempBuffer, true);
   \                     ??RoadBrd_ProcessParserTsk_4: (+1)
   \   00000060   0x2101             MOVS     R1,#+1
   \   00000062   0x....             LDR.N    R0,??DataTable3
   \   00000064   0x.... 0x....      BL       RoadBrd_ParseString
   \   00000068   0x0004             MOVS     R4,R0
    181              }
    182              ParseString.ParseFlg = AVAILABLE;
   \                     ??RoadBrd_ProcessParserTsk_5: (+1)
   \   0000006A   0x2001             MOVS     R0,#+1
   \   0000006C   0x....             LDR.N    R1,??DataTable3
   \   0000006E   0xF881 0x0100      STRB     R0,[R1, #+256]
    183              return Status;
   \   00000072   0x0020             MOVS     R0,R4
   \   00000074   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000076   0xE000             B.N      ??RoadBrd_ProcessParserTsk_2
    184            }
    185            else
    186              return HAL_OK;
   \                     ??RoadBrd_ProcessParserTsk_3: (+1)
   \   00000078   0x2000             MOVS     R0,#+0
   \                     ??RoadBrd_ProcessParserTsk_2: (+1)
   \   0000007A   0xB014             ADD      SP,SP,#+80
   \   0000007C   0xBD10             POP      {R4,PC}          ;; return
    187          }
    188          
    189          
    190          /**
    191            * @brief  This routine parses the passed string and performs the passed operation
    192            * @param  *tempBffr: String to be parsed.
    193            * @retval HAL_StatusTypeDef:     HAL_OK:       Tasking of block of data to UART success.
    194            *                                HAL_ERROR:    Error found in Tasking or data passed.
    195            *                                HAL_BUSY:     UART is busy.
    196            *                                HAL_TIMEOUT:  UART timed out.
    197            */

   \                                 In section .text, align 4, keep-with-next
    198          HAL_StatusTypeDef RoadBrd_ParseString(char *tempBffr, bool BLE_Flag)
    199          {
   \                     RoadBrd_ParseString: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xF5AD 0x6DA0      SUB      SP,SP,#+1280
   \   00000008   0xB08D             SUB      SP,SP,#+52
   \   0000000A   0x0004             MOVS     R4,R0
   \   0000000C   0x000D             MOVS     R5,R1
    200          #ifdef TEST2
    201            #define RECEIVE_SZ      5
    202            uint8_t Size;
    203            uint8_t i2cData[80];
    204            uint8_t tempBffr3[10];
    205            char tempBffr2[5];
    206            int Loop_cnt;
    207            HAL_StatusTypeDef Status, Save_Status;
    208            int Address;
    209            int num_bytes;
    210            int num_bytes_received;
    211            int Error, x;
    212            char tempstr[20];
    213            char* tempPstr;
    214            int new_value, flag;
    215            float Temp_C, Temp_F, Shunt_V, Bus_V, Crrnt, Power;
    216            uint32_t Err_code;
    217          #else
    218            #ifdef TEST
    219              #define RECEIVE_SZ      5
    220            #else
    221              #define RECEIVE_SZ      30
    222              uint16_t DriverStatus;
    223              int8_t tempBffr2[120];
    224              int8_t tempBffr3[10];
    225              int8_t s_cmd[5];
    226              int8_t s_recrd[120];
    227              int8_t* BufferPntr;
    228              HAL_StatusTypeDef Status, Save_Status;
    229              uint8_t Size;
    230              int Address;
    231              int num_bytes;
    232              int Numbr_Rcrds;
    233              int num_bytes_received;
    234              uint8_t i2cData[80];
    235              int Error, x, y;
    236              Voltage VMeasure, VMeasureScaled;
    237              Current CMeasure, CMeasureScaled;
    238              Power PMeasure, PMeasureScaled;
    239              Temperature TMeasure, TMeasureScaled;
    240              Humidity HMeasure, HMeasureScaled;
    241              RGBInitialize RGBMeasure;
    242              RGBIdent IDMeasure;
    243              RGBStatus RGBSMeasure;
    244              RGBLight RGBValues;
    245              SrecElement Srec_Elem;
    246              char uuid[10];
    247              float Scale, Offset;
    248          //    PRStatus PRMeasure;
    249              PRPressure PRPMeasure, PRPMeasureScaled;
    250              BinString RSFFTBins;
    251              GridEye     GridMeasure, GridMeasureScaled;
    252              uint32_t Err_code;
    253              uint8_t op_mode, ds_range, adc_rsl, sync, cmp_adjst, cmp_offst, int_assgn, int_persist, cnvrsn_int;
    254              int new_value, flag;
    255              char* tempPstr;
    256              char tempstr[20];
    257            #endif
    258          #endif
    259          
    260              Size = strlen((char *)tempBffr);
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0x.... 0x....      BL       strlen
   \   00000014   0xF88D 0x0028      STRB     R0,[SP, #+40]
    261              Status = HAL_OK;
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x0006             MOVS     R6,R0
    262              
    263              // Test Bypass. If set, then we are in streaming mode.
    264              if ( Bypass )
   \   0000001C   0xF8DF 0x0DF4      LDR.W    R0,??RoadBrd_ParseString_0
   \   00000020   0x7800             LDRB     R0,[R0, #+0]
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD01E             BEQ.N    ??RoadBrd_ParseString_1
    265              {
    266                if (tempBffr[0] == 0x1B)
   \   00000026   0x7820             LDRB     R0,[R4, #+0]
   \   00000028   0x281B             CMP      R0,#+27
   \   0000002A   0xD115             BNE.N    ??RoadBrd_ParseString_2
    267                {
    268                  Bypass = false;
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0xF8DF 0x1DE4      LDR.W    R1,??RoadBrd_ParseString_0
   \   00000032   0x7008             STRB     R0,[R1, #+0]
    269                  strcpy( (char *)tempBffr2, "\r\n\r\n T........TERMINATING MONITOR MODE.........\r\n\r\n> ");
   \   00000034   0xF8DF 0x1DE0      LDR.W    R1,??RoadBrd_ParseString_0+0x4
   \   00000038   0xA80B             ADD      R0,SP,#+44
   \   0000003A   0x.... 0x....      BL       strcpy
    270          #ifdef NUCLEO
    271                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    272          #else
    273                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000003E   0xA90B             ADD      R1,SP,#+44
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000046   0x0006             MOVS     R6,R0
    274          #endif
    275                  if (Status != HAL_OK)
   \   00000048   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000004A   0x2E00             CMP      R6,#+0
   \   0000004C   0xF004 0x864B      BEQ.W    ??RoadBrd_ParseString_3
    276                    return Status;
   \   00000050   0x0030             MOVS     R0,R6
   \   00000052   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000054   0xF004 0xBE49      B.W      ??RoadBrd_ParseString_4
    277                }
    278                else
    279                {
    280                  // Transmit Character to BGM111.
    281                  BGM111_Transmit(1, (uint8_t *)tempBffr);
   \                     ??RoadBrd_ParseString_2: (+1)
   \   00000058   0x0021             MOVS     R1,R4
   \   0000005A   0x2001             MOVS     R0,#+1
   \   0000005C   0x.... 0x....      BL       BGM111_Transmit
   \   00000060   0xF004 0xBE41      B.W      ??RoadBrd_ParseString_3
    282                }
    283              }// EndIf ( Bypass )
    284              else
    285              {
    286                // Normal Mode
    287              
    288                      // We have a good Tasking String. Time to determine action.
    289                      switch( tempBffr[0] )
   \                     ??RoadBrd_ParseString_1: (+1)
   \   00000064   0x7820             LDRB     R0,[R4, #+0]
   \   00000066   0x2830             CMP      R0,#+48
   \   00000068   0xD02F             BEQ.N    ??RoadBrd_ParseString_5
   \   0000006A   0x2831             CMP      R0,#+49
   \   0000006C   0xD048             BEQ.N    ??RoadBrd_ParseString_6
   \   0000006E   0x2832             CMP      R0,#+50
   \   00000070   0xD079             BEQ.N    ??RoadBrd_ParseString_7
   \   00000072   0x2833             CMP      R0,#+51
   \   00000074   0xF000 0x80AA      BEQ.W    ??RoadBrd_ParseString_8
   \   00000078   0x2834             CMP      R0,#+52
   \   0000007A   0xF000 0x80DA      BEQ.W    ??RoadBrd_ParseString_9
   \   0000007E   0x2835             CMP      R0,#+53
   \   00000080   0xF000 0x810A      BEQ.W    ??RoadBrd_ParseString_10
   \   00000084   0x2836             CMP      R0,#+54
   \   00000086   0xF000 0x817D      BEQ.W    ??RoadBrd_ParseString_11
   \   0000008A   0x2841             CMP      R0,#+65
   \   0000008C   0xF000 0x8193      BEQ.W    ??RoadBrd_ParseString_12
   \   00000090   0x2842             CMP      R0,#+66
   \   00000092   0xF000 0x82EE      BEQ.W    ??RoadBrd_ParseString_13
   \   00000096   0x2843             CMP      R0,#+67
   \   00000098   0xF000 0x85B4      BEQ.W    ??RoadBrd_ParseString_14
   \   0000009C   0x2844             CMP      R0,#+68
   \   0000009E   0xF000 0x87B5      BEQ.W    ??RoadBrd_ParseString_15
   \   000000A2   0x2845             CMP      R0,#+69
   \   000000A4   0xF001 0x8130      BEQ.W    ??RoadBrd_ParseString_16
   \   000000A8   0x2846             CMP      R0,#+70
   \   000000AA   0xF001 0x8142      BEQ.W    ??RoadBrd_ParseString_17
   \   000000AE   0x2847             CMP      R0,#+71
   \   000000B0   0xF001 0x815A      BEQ.W    ??RoadBrd_ParseString_18
   \   000000B4   0x2848             CMP      R0,#+72
   \   000000B6   0xF001 0x81D7      BEQ.W    ??RoadBrd_ParseString_19
   \   000000BA   0x2850             CMP      R0,#+80
   \   000000BC   0xF001 0x84B6      BEQ.W    ??RoadBrd_ParseString_20
   \   000000C0   0x2854             CMP      R0,#+84
   \   000000C2   0xF001 0x84E1      BEQ.W    ??RoadBrd_ParseString_21
   \   000000C6   0xF004 0xBD7D      B.W      ??RoadBrd_ParseString_22
    290                      {
    291          //**************************************************************************************************
    292                      case '0':
    293                        // Enable Road sound and fill buffer. 
    294                        Status = RoadBrdSnd_ProcessSound();
   \                     ??RoadBrd_ParseString_5: (+1)
   \   000000CA   0x.... 0x....      BL       RoadBrdSnd_ProcessSound
   \   000000CE   0x0006             MOVS     R6,R0
    295                        if (Status == HAL_OK)
   \   000000D0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000D2   0x2E00             CMP      R6,#+0
   \   000000D4   0xD112             BNE.N    ??RoadBrd_ParseString_23
    296                        {
    297                          // Is this a BLE Operation?
    298                          if ( BLE_Flag )
   \   000000D6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000D8   0x2D00             CMP      R5,#+0
   \   000000DA   0xD00A             BEQ.N    ??RoadBrd_ParseString_24
    299                          {
    300                            // Yes...Build and Send BLE Response NOW.
    301                            strcpy( (char *)tempBffr2, "<STATUS>CMD_RDSNDBFFR_FILL</STATUS>");
   \   000000DC   0xF8DF 0x1E1C      LDR.W    R1,??RoadBrd_ParseString_25
   \   000000E0   0xA80B             ADD      R0,SP,#+44
   \   000000E2   0x.... 0x....      BL       strcpy
    302                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000000E6   0xA80B             ADD      R0,SP,#+44
   \   000000E8   0x.... 0x....      BL       strlen
   \   000000EC   0xA90B             ADD      R1,SP,#+44
   \   000000EE   0x.... 0x....      BL       BGM111_Transmit
    303                          }
    304                          strcpy( (char *)tempBffr2, "Road Sound: Road Sound loaded, processed, and sent to FFT Bins.\r\n");
   \                     ??RoadBrd_ParseString_24: (+1)
   \   000000F2   0xF8DF 0x1E0C      LDR.W    R1,??RoadBrd_ParseString_25+0x4
   \   000000F6   0xA80B             ADD      R0,SP,#+44
   \   000000F8   0x.... 0x....      BL       strcpy
    305                        }
    306                        break;
   \                     ??RoadBrd_ParseString_23: (+1)
   \   000000FC   0xF004 0xBD73      B.W      ??RoadBrd_ParseString_26
    307          //**************************************************************************************************
    308                      case '1':
    309                        // Rd_Sound FFT Measurements 0-15. 
    310                        Status = RoadBrdSnd_DumpBin0( &RSFFTBins );
   \                     ??RoadBrd_ParseString_6: (+1)
   \   00000100   0xA891             ADD      R0,SP,#+580
   \   00000102   0x.... 0x....      BL       RoadBrdSnd_DumpBin0
   \   00000106   0x0006             MOVS     R6,R0
    311                        strcpy( (char *)tempBffr2, "Road Sound: FFT Measurements 0-15.\r\n");
   \   00000108   0xF8DF 0x1DFC      LDR.W    R1,??RoadBrd_ParseString_25+0xC
   \   0000010C   0xA80B             ADD      R0,SP,#+44
   \   0000010E   0x.... 0x....      BL       strcpy
    312          #ifdef NUCLEO
    313                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    314          #else
    315                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000112   0xA90B             ADD      R1,SP,#+44
   \   00000114   0x2000             MOVS     R0,#+0
   \   00000116   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000011A   0x0006             MOVS     R6,R0
    316          #endif
    317                        if (Status != HAL_OK)
   \   0000011C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000011E   0x2E00             CMP      R6,#+0
   \   00000120   0xD003             BEQ.N    ??RoadBrd_ParseString_27
    318                          return Status;
   \   00000122   0x0030             MOVS     R0,R6
   \   00000124   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000126   0xF004 0xBDE0      B.W      ??RoadBrd_ParseString_4
    319                        // Is this a BLE Operation?
    320                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_27: (+1)
   \   0000012A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000012C   0x2D00             CMP      R5,#+0
   \   0000012E   0xD00B             BEQ.N    ??RoadBrd_ParseString_28
    321                        {
    322                          // Yes...Build and Send BLE Response NOW.
    323                          sprintf( (char *)tempBffr2, "<STATUS>ST_FFT0-15:%s</STATUS>", RSFFTBins.dumpStr );
   \   00000130   0xAA91             ADD      R2,SP,#+580
   \   00000132   0xF8DF 0x1DD8      LDR.W    R1,??RoadBrd_ParseString_25+0x10
   \   00000136   0xA80B             ADD      R0,SP,#+44
   \   00000138   0x.... 0x....      BL       sprintf
    324                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000013C   0xA80B             ADD      R0,SP,#+44
   \   0000013E   0x.... 0x....      BL       strlen
   \   00000142   0xA90B             ADD      R1,SP,#+44
   \   00000144   0x.... 0x....      BL       BGM111_Transmit
    325                        }
    326                        // NOW, Build Data String..
    327                        sprintf( (char *)tempBffr2, "     FFT Measurements 0-15: " );
   \                     ??RoadBrd_ParseString_28: (+1)
   \   00000148   0xF8DF 0x1DC4      LDR.W    R1,??RoadBrd_ParseString_25+0x14
   \   0000014C   0xA80B             ADD      R0,SP,#+44
   \   0000014E   0x.... 0x....      BL       sprintf
    328                        strcat( (char *)tempBffr2, (char *)RSFFTBins.dumpStr );
   \   00000152   0xA991             ADD      R1,SP,#+580
   \   00000154   0xA80B             ADD      R0,SP,#+44
   \   00000156   0x.... 0x....      BL       strcat
    329                        strcat( (char *)tempBffr2, "\r\n" );
   \   0000015A   0xA1DA             ADR.N    R1,??RoadBrd_ParseString_29  ;; 0x0D, 0x0A, 0x00, 0x00
   \   0000015C   0xA80B             ADD      R0,SP,#+44
   \   0000015E   0x.... 0x....      BL       strcat
    330                       break;
   \   00000162   0xF004 0xBD40      B.W      ??RoadBrd_ParseString_26
    331          //**************************************************************************************************
    332                      case '2':
    333                        // Rd_Sound FFT Measurements 16-31. 
    334                        Status = RoadBrdSnd_DumpBin16( &RSFFTBins );
   \                     ??RoadBrd_ParseString_7: (+1)
   \   00000166   0xA891             ADD      R0,SP,#+580
   \   00000168   0x.... 0x....      BL       RoadBrdSnd_DumpBin16
   \   0000016C   0x0006             MOVS     R6,R0
    335                        strcpy( (char *)tempBffr2, "Road Sound: FFT Measurements 16-31.\r\n");
   \   0000016E   0xF8DF 0x1DA4      LDR.W    R1,??RoadBrd_ParseString_25+0x18
   \   00000172   0xA80B             ADD      R0,SP,#+44
   \   00000174   0x.... 0x....      BL       strcpy
    336          #ifdef NUCLEO
    337                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    338          #else
    339                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000178   0xA90B             ADD      R1,SP,#+44
   \   0000017A   0x2000             MOVS     R0,#+0
   \   0000017C   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000180   0x0006             MOVS     R6,R0
    340          #endif
    341                        if (Status != HAL_OK)
   \   00000182   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000184   0x2E00             CMP      R6,#+0
   \   00000186   0xD003             BEQ.N    ??RoadBrd_ParseString_30
    342                          return Status;
   \   00000188   0x0030             MOVS     R0,R6
   \   0000018A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000018C   0xF004 0xBDAD      B.W      ??RoadBrd_ParseString_4
    343                        // Is this a BLE Operation?
    344                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_30: (+1)
   \   00000190   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000192   0x2D00             CMP      R5,#+0
   \   00000194   0xD00B             BEQ.N    ??RoadBrd_ParseString_31
    345                        {
    346                          // Yes...Build and Send BLE Response NOW.
    347                          sprintf( (char *)tempBffr2, "<STATUS>ST_FFT16-31:%s</STATUS>", RSFFTBins.dumpStr );
   \   00000196   0xAA91             ADD      R2,SP,#+580
   \   00000198   0xF8DF 0x1E20      LDR.W    R1,??RoadBrd_ParseString_32
   \   0000019C   0xA80B             ADD      R0,SP,#+44
   \   0000019E   0x.... 0x....      BL       sprintf
    348                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000001A2   0xA80B             ADD      R0,SP,#+44
   \   000001A4   0x.... 0x....      BL       strlen
   \   000001A8   0xA90B             ADD      R1,SP,#+44
   \   000001AA   0x.... 0x....      BL       BGM111_Transmit
    349                        }
    350                        // NOW, Build Data String..
    351                        sprintf( (char *)tempBffr2, "     FFT Measurements 16-31: " );
   \                     ??RoadBrd_ParseString_31: (+1)
   \   000001AE   0xF8DF 0x1E10      LDR.W    R1,??RoadBrd_ParseString_32+0x4
   \   000001B2   0xA80B             ADD      R0,SP,#+44
   \   000001B4   0x.... 0x....      BL       sprintf
    352                        strcat( (char *)tempBffr2, (char *)RSFFTBins.dumpStr );
   \   000001B8   0xA991             ADD      R1,SP,#+580
   \   000001BA   0xA80B             ADD      R0,SP,#+44
   \   000001BC   0x.... 0x....      BL       strcat
    353                        strcat( (char *)tempBffr2, "\r\n" );
   \   000001C0   0xA1C0             ADR.N    R1,??RoadBrd_ParseString_29  ;; 0x0D, 0x0A, 0x00, 0x00
   \   000001C2   0xA80B             ADD      R0,SP,#+44
   \   000001C4   0x.... 0x....      BL       strcat
    354                        break;
   \   000001C8   0xF004 0xBD0D      B.W      ??RoadBrd_ParseString_26
    355          //**************************************************************************************************
    356                      case '3':
    357                        // Rd_Sound FFT Measurements 32-47. 
    358                        Status = RoadBrdSnd_DumpBin32( &RSFFTBins );
   \                     ??RoadBrd_ParseString_8: (+1)
   \   000001CC   0xA891             ADD      R0,SP,#+580
   \   000001CE   0x.... 0x....      BL       RoadBrdSnd_DumpBin32
   \   000001D2   0x0006             MOVS     R6,R0
    359                        strcpy( (char *)tempBffr2, "Road Sound: FFT Measurements 32-47.\r\n");
   \   000001D4   0xF8DF 0x1DEC      LDR.W    R1,??RoadBrd_ParseString_32+0x8
   \   000001D8   0xA80B             ADD      R0,SP,#+44
   \   000001DA   0x.... 0x....      BL       strcpy
    360          #ifdef NUCLEO
    361                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    362          #else
    363                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000001DE   0xA90B             ADD      R1,SP,#+44
   \   000001E0   0x2000             MOVS     R0,#+0
   \   000001E2   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000001E6   0x0006             MOVS     R6,R0
    364          #endif
    365                        if (Status != HAL_OK)
   \   000001E8   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000001EA   0x2E00             CMP      R6,#+0
   \   000001EC   0xD003             BEQ.N    ??RoadBrd_ParseString_33
    366                          return Status;
   \   000001EE   0x0030             MOVS     R0,R6
   \   000001F0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001F2   0xF004 0xBD7A      B.W      ??RoadBrd_ParseString_4
    367                        // Is this a BLE Operation?
    368                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_33: (+1)
   \   000001F6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000001F8   0x2D00             CMP      R5,#+0
   \   000001FA   0xD00B             BEQ.N    ??RoadBrd_ParseString_34
    369                        {
    370                          // Yes...Build and Send BLE Response NOW.
    371                          sprintf( (char *)tempBffr2, "<STATUS>ST_FFT32-47:%s</STATUS>", RSFFTBins.dumpStr );
   \   000001FC   0xAA91             ADD      R2,SP,#+580
   \   000001FE   0xF8DF 0x1DF4      LDR.W    R1,??RoadBrd_ParseString_35
   \   00000202   0xA80B             ADD      R0,SP,#+44
   \   00000204   0x.... 0x....      BL       sprintf
    372                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000208   0xA80B             ADD      R0,SP,#+44
   \   0000020A   0x.... 0x....      BL       strlen
   \   0000020E   0xA90B             ADD      R1,SP,#+44
   \   00000210   0x.... 0x....      BL       BGM111_Transmit
    373                        }
    374                        // NOW, Build Data String..
    375                        sprintf( (char *)tempBffr2, "     FFT Measurements 32-47: " );
   \                     ??RoadBrd_ParseString_34: (+1)
   \   00000214   0xF8DF 0x1DE0      LDR.W    R1,??RoadBrd_ParseString_35+0x4
   \   00000218   0xA80B             ADD      R0,SP,#+44
   \   0000021A   0x.... 0x....      BL       sprintf
    376                        strcat( (char *)tempBffr2, (char *)RSFFTBins.dumpStr );
   \   0000021E   0xA991             ADD      R1,SP,#+580
   \   00000220   0xA80B             ADD      R0,SP,#+44
   \   00000222   0x.... 0x....      BL       strcat
    377                        strcat( (char *)tempBffr2, "\r\n" );
   \   00000226   0xA1A7             ADR.N    R1,??RoadBrd_ParseString_29  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000228   0xA80B             ADD      R0,SP,#+44
   \   0000022A   0x.... 0x....      BL       strcat
    378                        break;
   \   0000022E   0xF004 0xBCDA      B.W      ??RoadBrd_ParseString_26
    379          //**************************************************************************************************
    380                      case '4':
    381                        // Rd_Sound FFT Measurements 48-63. 
    382                        Status = RoadBrdSnd_DumpBin48( &RSFFTBins );
   \                     ??RoadBrd_ParseString_9: (+1)
   \   00000232   0xA891             ADD      R0,SP,#+580
   \   00000234   0x.... 0x....      BL       RoadBrdSnd_DumpBin48
   \   00000238   0x0006             MOVS     R6,R0
    383                        strcpy( (char *)tempBffr2, "Road Sound: FFT Measurements 48-63.\r\n");
   \   0000023A   0xF8DF 0x1DC0      LDR.W    R1,??RoadBrd_ParseString_35+0x8
   \   0000023E   0xA80B             ADD      R0,SP,#+44
   \   00000240   0x.... 0x....      BL       strcpy
    384          #ifdef NUCLEO
    385                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    386          #else
    387                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000244   0xA90B             ADD      R1,SP,#+44
   \   00000246   0x2000             MOVS     R0,#+0
   \   00000248   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000024C   0x0006             MOVS     R6,R0
    388          #endif
    389                        if (Status != HAL_OK)
   \   0000024E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000250   0x2E00             CMP      R6,#+0
   \   00000252   0xD003             BEQ.N    ??RoadBrd_ParseString_36
    390                          return Status;
   \   00000254   0x0030             MOVS     R0,R6
   \   00000256   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000258   0xF004 0xBD47      B.W      ??RoadBrd_ParseString_4
    391                        // Is this a BLE Operation?
    392                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_36: (+1)
   \   0000025C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000025E   0x2D00             CMP      R5,#+0
   \   00000260   0xD00B             BEQ.N    ??RoadBrd_ParseString_37
    393                        {
    394                          // Yes...Build and Send BLE Response NOW.
    395                          sprintf( (char *)tempBffr2, "<STATUS>ST_FFT48-63:%s</STATUS>", RSFFTBins.dumpStr );
   \   00000262   0xAA91             ADD      R2,SP,#+580
   \   00000264   0xF8DF 0x1D98      LDR.W    R1,??RoadBrd_ParseString_35+0xC
   \   00000268   0xA80B             ADD      R0,SP,#+44
   \   0000026A   0x.... 0x....      BL       sprintf
    396                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000026E   0xA80B             ADD      R0,SP,#+44
   \   00000270   0x.... 0x....      BL       strlen
   \   00000274   0xA90B             ADD      R1,SP,#+44
   \   00000276   0x.... 0x....      BL       BGM111_Transmit
    397                        }
    398                        // NOW, Build Data String..
    399                        sprintf( (char *)tempBffr2, "     FFT Measurements 48-63: " );
   \                     ??RoadBrd_ParseString_37: (+1)
   \   0000027A   0xF8DF 0x1D88      LDR.W    R1,??RoadBrd_ParseString_35+0x10
   \   0000027E   0xA80B             ADD      R0,SP,#+44
   \   00000280   0x.... 0x....      BL       sprintf
    400                        strcat( (char *)tempBffr2, (char *)RSFFTBins.dumpStr );
   \   00000284   0xA991             ADD      R1,SP,#+580
   \   00000286   0xA80B             ADD      R0,SP,#+44
   \   00000288   0x.... 0x....      BL       strcat
    401                        strcat( (char *)tempBffr2, "\r\n" );
   \   0000028C   0xA18D             ADR.N    R1,??RoadBrd_ParseString_29  ;; 0x0D, 0x0A, 0x00, 0x00
   \   0000028E   0xA80B             ADD      R0,SP,#+44
   \   00000290   0x.... 0x....      BL       strcat
    402                       break;
   \   00000294   0xF004 0xBCA7      B.W      ??RoadBrd_ParseString_26
    403          //**************************************************************************************************
    404                      case '5':
    405                        // dump results of save Buffer. BufferPntr
    406                        BufferPntr = RoadBrdSnd_getSaveBffr();
   \                     ??RoadBrd_ParseString_10: (+1)
   \   00000298   0x.... 0x....      BL       RoadBrdSnd_getSaveBffr
   \   0000029C   0x9048             STR      R0,[SP, #+288]
    407                        strcpy( (char *)tempBffr2, "Road Sound: Results of save Buffer.\r\n");
   \   0000029E   0xF8DF 0x1D68      LDR.W    R1,??RoadBrd_ParseString_35+0x14
   \   000002A2   0xA80B             ADD      R0,SP,#+44
   \   000002A4   0x.... 0x....      BL       strcpy
    408                        Status = RoadBrdSnd_DumpBin0( &RSFFTBins );
   \   000002A8   0xA891             ADD      R0,SP,#+580
   \   000002AA   0x.... 0x....      BL       RoadBrdSnd_DumpBin0
   \   000002AE   0x0006             MOVS     R6,R0
    409          #ifdef NUCLEO
    410                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    411          #else
    412                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000002B0   0xA90B             ADD      R1,SP,#+44
   \   000002B2   0x2000             MOVS     R0,#+0
   \   000002B4   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000002B8   0x0006             MOVS     R6,R0
    413          #endif
    414                        if (Status != HAL_OK)
   \   000002BA   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000002BC   0x2E00             CMP      R6,#+0
   \   000002BE   0xD003             BEQ.N    ??RoadBrd_ParseString_38
    415                          return Status;
   \   000002C0   0x0030             MOVS     R0,R6
   \   000002C2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000002C4   0xF004 0xBD11      B.W      ??RoadBrd_ParseString_4
    416                        // Is this a BLE Operation?
    417                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_38: (+1)
   \   000002C8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000002CA   0x2D00             CMP      R5,#+0
   \   000002CC   0xD00A             BEQ.N    ??RoadBrd_ParseString_39
    418                        {
    419                          // Yes...Build and Send BLE Response NOW.
    420                          strcpy( (char *)tempBffr2, "<STATUS>ST_FFTBFFR_DUMP:");
   \   000002CE   0xF8DF 0x1E18      LDR.W    R1,??RoadBrd_ParseString_40
   \   000002D2   0xA80B             ADD      R0,SP,#+44
   \   000002D4   0x.... 0x....      BL       strcpy
    421                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000002D8   0xA80B             ADD      R0,SP,#+44
   \   000002DA   0x.... 0x....      BL       strlen
   \   000002DE   0xA90B             ADD      R1,SP,#+44
   \   000002E0   0x.... 0x....      BL       BGM111_Transmit
    422                        }
    423                        // NOW, Build Data String..
    424                        y=0;
   \                     ??RoadBrd_ParseString_39: (+1)
   \   000002E4   0x2000             MOVS     R0,#+0
   \   000002E6   0x4680             MOV      R8,R0
    425                        sprintf( (char *)tempBffr2, "" );
   \   000002E8   0xA1D9             ADR.N    R1,??RoadBrd_ParseString_41  ;; ""
   \   000002EA   0xA80B             ADD      R0,SP,#+44
   \   000002EC   0x.... 0x....      BL       sprintf
    426                        for (x=0; x<FFT_BUFFER_SIZE; x++)
   \   000002F0   0x2000             MOVS     R0,#+0
   \   000002F2   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_42: (+1)
   \   000002F4   0x2F80             CMP      R7,#+128
   \   000002F6   0xDA30             BGE.N    ??RoadBrd_ParseString_43
    427                        {
    428          //                sprintf( (char *)tempBffr3, "%02x ", BufferPntr[x]);
    429                          sprintf( (char *)tempBffr3, "%04d ", BufferPntr[x]);
   \   000002F8   0x9848             LDR      R0,[SP, #+288]
   \   000002FA   0x57C2             LDRSB    R2,[R0, R7]
   \   000002FC   0xF8DF 0x1DEC      LDR.W    R1,??RoadBrd_ParseString_40+0x4
   \   00000300   0xA82B             ADD      R0,SP,#+172
   \   00000302   0x.... 0x....      BL       sprintf
    430                          strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   00000306   0xA92B             ADD      R1,SP,#+172
   \   00000308   0xA80B             ADD      R0,SP,#+44
   \   0000030A   0x.... 0x....      BL       strcat
    431                          y++;
   \   0000030E   0xF118 0x0801      ADDS     R8,R8,#+1
    432                          if (y>=16)
   \   00000312   0xF1B8 0x0F10      CMP      R8,#+16
   \   00000316   0xDB1E             BLT.N    ??RoadBrd_ParseString_44
    433                          {
    434                            strcat( (char *)tempBffr2, "\r\n" );
   \   00000318   0xA16A             ADR.N    R1,??RoadBrd_ParseString_29  ;; 0x0D, 0x0A, 0x00, 0x00
   \   0000031A   0xA80B             ADD      R0,SP,#+44
   \   0000031C   0x.... 0x....      BL       strcat
    435                            y=0;
   \   00000320   0x2000             MOVS     R0,#+0
   \   00000322   0x4680             MOV      R8,R0
    436           #ifdef NUCLEO
    437                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    438          #else
    439                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000324   0xA90B             ADD      R1,SP,#+44
   \   00000326   0x2000             MOVS     R0,#+0
   \   00000328   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000032C   0x0006             MOVS     R6,R0
    440          #endif
    441                            if (Status != HAL_OK)
   \   0000032E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000330   0x2E00             CMP      R6,#+0
   \   00000332   0xD003             BEQ.N    ??RoadBrd_ParseString_45
    442                              return Status;
   \   00000334   0x0030             MOVS     R0,R6
   \   00000336   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000338   0xF004 0xBCD7      B.W      ??RoadBrd_ParseString_4
    443                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_45: (+1)
   \   0000033C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000033E   0x2D00             CMP      R5,#+0
   \   00000340   0xD005             BEQ.N    ??RoadBrd_ParseString_46
    444                            {
    445                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000342   0xA80B             ADD      R0,SP,#+44
   \   00000344   0x.... 0x....      BL       strlen
   \   00000348   0xA90B             ADD      R1,SP,#+44
   \   0000034A   0x.... 0x....      BL       BGM111_Transmit
    446                            }
    447                            sprintf( (char *)tempBffr2, "" );
   \                     ??RoadBrd_ParseString_46: (+1)
   \   0000034E   0xA1C0             ADR.N    R1,??RoadBrd_ParseString_41  ;; ""
   \   00000350   0xA80B             ADD      R0,SP,#+44
   \   00000352   0x.... 0x....      BL       sprintf
    448                          }
    449                        }
   \                     ??RoadBrd_ParseString_44: (+1)
   \   00000356   0x1C7F             ADDS     R7,R7,#+1
   \   00000358   0xE7CC             B.N      ??RoadBrd_ParseString_42
    450                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_43: (+1)
   \   0000035A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000035C   0x2D00             CMP      R5,#+0
   \   0000035E   0xD00A             BEQ.N    ??RoadBrd_ParseString_47
    451                        {
    452                          strcpy( (char *)tempBffr2, "</STATUS>");
   \   00000360   0xF8DF 0x1DD0      LDR.W    R1,??RoadBrd_ParseString_48
   \   00000364   0xA80B             ADD      R0,SP,#+44
   \   00000366   0x.... 0x....      BL       strcpy
    453                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000036A   0xA80B             ADD      R0,SP,#+44
   \   0000036C   0x.... 0x....      BL       strlen
   \   00000370   0xA90B             ADD      R1,SP,#+44
   \   00000372   0x.... 0x....      BL       BGM111_Transmit
    454                        }
    455                        sprintf( (char *)tempBffr2, "     ---COMPLETE---" );
   \                     ??RoadBrd_ParseString_47: (+1)
   \   00000376   0xF8DF 0x1DC0      LDR.W    R1,??RoadBrd_ParseString_48+0x4
   \   0000037A   0xA80B             ADD      R0,SP,#+44
   \   0000037C   0x.... 0x....      BL       sprintf
    456                        break;
   \   00000380   0xF004 0xBC31      B.W      ??RoadBrd_ParseString_26
    457          //**************************************************************************************************
    458                      case '6':
    459                        // Clear all buffers. 
    460                        Status = HAL_OK;
   \                     ??RoadBrd_ParseString_11: (+1)
   \   00000384   0x2000             MOVS     R0,#+0
   \   00000386   0x0006             MOVS     R6,R0
    461                        RoadBrdSnd_ClrBffrs();
   \   00000388   0x.... 0x....      BL       RoadBrdSnd_ClrBffrs
    462                        // Is this a BLE Operation?
    463                        if ( BLE_Flag )
   \   0000038C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000038E   0x2D00             CMP      R5,#+0
   \   00000390   0xD00A             BEQ.N    ??RoadBrd_ParseString_49
    464                        {
    465                          // Yes...Build and Send BLE Response NOW.
    466                          strcpy( (char *)tempBffr2, "<STATUS>ST_FFTCLR</STATUS>");
   \   00000392   0xF8DF 0x1E20      LDR.W    R1,??RoadBrd_ParseString_50
   \   00000396   0xA80B             ADD      R0,SP,#+44
   \   00000398   0x.... 0x....      BL       strcpy
    467                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000039C   0xA80B             ADD      R0,SP,#+44
   \   0000039E   0x.... 0x....      BL       strlen
   \   000003A2   0xA90B             ADD      R1,SP,#+44
   \   000003A4   0x.... 0x....      BL       BGM111_Transmit
    468                        }
    469                        strcpy( (char *)tempBffr2, "Road Sound: All buffers cleared.\r\n");;
   \                     ??RoadBrd_ParseString_49: (+1)
   \   000003A8   0xF8DF 0x1E0C      LDR.W    R1,??RoadBrd_ParseString_50+0x4
   \   000003AC   0xA80B             ADD      R0,SP,#+44
   \   000003AE   0x.... 0x....      BL       strcpy
    470                        break;
   \   000003B2   0xF004 0xBC18      B.W      ??RoadBrd_ParseString_26
    471          //**************************************************************************************************
    472                      case 'A':
    473                        // Barometer. 
    474                        if (Size == 1)
   \                     ??RoadBrd_ParseString_12: (+1)
   \   000003B6   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   000003BA   0x2801             CMP      R0,#+1
   \   000003BC   0xF000 0x8157      BEQ.W    ??RoadBrd_ParseString_51
    475                        {
    476          //------------------ A Command...Read Pressure...PRESS_OUT_XL...PRESS_OUT_L...PRESS_OUT_H     
    477                        }
    478                        else
    479                        {
    480                          switch( tempBffr[1] )
   \   000003C0   0x7860             LDRB     R0,[R4, #+1]
   \   000003C2   0x2836             CMP      R0,#+54
   \   000003C4   0xD039             BEQ.N    ??RoadBrd_ParseString_52
   \   000003C6   0x2838             CMP      R0,#+56
   \   000003C8   0xF000 0x80BA      BEQ.W    ??RoadBrd_ParseString_53
   \   000003CC   0x2839             CMP      R0,#+57
   \   000003CE   0xF000 0x8124      BEQ.W    ??RoadBrd_ParseString_54
   \   000003D2   0x2849             CMP      R0,#+73
   \   000003D4   0xF040 0x8146      BNE.W    ??RoadBrd_ParseString_55
    481                          {
    482          //------------------ AI Command...Initialize Barometer Sensor     
    483                            case 'I':
    484                              // Clean out old pressure.
    485          //                    Status = RoadBrd_Baro_ReadPressure( &PRPMeasure );
    486                              // Clean out old Temp data.
    487          //                    Status = RoadBrd_Baro_ReadTemp( i2cData );
    488                              //************ Wait 50msec.
    489          //                    RoadBrd_Delay(500);  
    490                   
    491                              Status = RoadBrd_Init_Barometer();
   \                     ??RoadBrd_ParseString_56: (+1)
   \   000003D8   0x.... 0x....      BL       RoadBrd_Init_Barometer
   \   000003DC   0x0006             MOVS     R6,R0
    492                              // Is this a BLE Operation?
    493                              if ( BLE_Flag )
   \   000003DE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000003E0   0x2D00             CMP      R5,#+0
   \   000003E2   0xD00A             BEQ.N    ??RoadBrd_ParseString_57
    494                              {
    495                                // Yes...Build and Send BLE Response NOW.
    496                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000003E4   0xF8DF 0x1DD4      LDR.W    R1,??RoadBrd_ParseString_50+0x8
   \   000003E8   0xA80B             ADD      R0,SP,#+44
   \   000003EA   0x.... 0x....      BL       strcpy
    497                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000003EE   0xA80B             ADD      R0,SP,#+44
   \   000003F0   0x.... 0x....      BL       strlen
   \   000003F4   0xA90B             ADD      R1,SP,#+44
   \   000003F6   0x.... 0x....      BL       BGM111_Transmit
    498                              }
    499                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_57: (+1)
   \   000003FA   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000003FC   0x2E00             CMP      R6,#+0
   \   000003FE   0xD105             BNE.N    ??RoadBrd_ParseString_58
    500                              {
    501                                  strcpy( (char *)tempBffr2, "Initialize Barometer Sensor Passed.\r\n");;
   \   00000400   0xF8DF 0x1DBC      LDR.W    R1,??RoadBrd_ParseString_50+0xC
   \   00000404   0xA80B             ADD      R0,SP,#+44
   \   00000406   0x.... 0x....      BL       strcpy
   \   0000040A   0xE015             B.N      ??RoadBrd_ParseString_59
    502                              }
    503                              else
    504                              {
    505                                  strcpy( (char *)tempBffr2, "Initialize Barometer Sensor FAILED.\r\n");
   \                     ??RoadBrd_ParseString_58: (+1)
   \   0000040C   0xF8DF 0x1DB4      LDR.W    R1,??RoadBrd_ParseString_50+0x10
   \   00000410   0xA80B             ADD      R0,SP,#+44
   \   00000412   0x.... 0x....      BL       strcpy
    506                                  Save_Status = Status;
   \   00000416   0xF88D 0x6029      STRB     R6,[SP, #+41]
    507          #ifdef NUCLEO
    508                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    509          #else
    510                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000041A   0xA90B             ADD      R1,SP,#+44
   \   0000041C   0x2000             MOVS     R0,#+0
   \   0000041E   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000422   0x0006             MOVS     R6,R0
    511          #endif
    512                                  if (Status != HAL_OK)
   \   00000424   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000426   0x2E00             CMP      R6,#+0
   \   00000428   0xD003             BEQ.N    ??RoadBrd_ParseString_60
    513                                    return Status;
   \   0000042A   0x0030             MOVS     R0,R6
   \   0000042C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000042E   0xF004 0xBC5C      B.W      ??RoadBrd_ParseString_4
    514                                  else
    515                                    Status = Save_Status;
   \                     ??RoadBrd_ParseString_60: (+1)
   \   00000432   0xF89D 0x0029      LDRB     R0,[SP, #+41]
   \   00000436   0x0006             MOVS     R6,R0
    516                              }
    517                              break;
   \                     ??RoadBrd_ParseString_59: (+1)
   \   00000438   0xE119             B.N      ??RoadBrd_ParseString_51
    518          //------------------ A0 Command...Enable Barometer     
    519          #if 0                  
    520                          case '0':
    521                              Status = RoadBrd_Enable_Barometer();
    522                              // Is this a BLE Operation?
    523                              if ( BLE_Flag )
    524                              {
    525                                // Yes...Build and Send BLE Response NOW.
    526                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
    527                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
    528                              }
    529                              if (Status == HAL_OK)
    530                              {
    531                                  strcpy( (char *)tempBffr2, "Barometer Sensor: Enable Barometer Passed.\r\n");;
    532                              }
    533                              else
    534                              {
    535                                  strcpy( (char *)tempBffr2, "Barometer Sensor: Enable Barometer FAILED.\r\n");;
    536                              }
    537                              break;
    538          //------------------ A1 Command...Disable Barometer     
    539                            case '1':
    540                              Status = RoadBrd_Disable_Barometer();
    541                              // Is this a BLE Operation?
    542                              if ( BLE_Flag )
    543                              {
    544                                // Yes...Build and Send BLE Response NOW.
    545                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
    546                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
    547                              }
    548                              if (Status == HAL_OK)
    549                              {
    550                                  strcpy( (char *)tempBffr2, "Barometer Sensor: Disable Barometer Passed.\r\n");;
    551                              }
    552                              else
    553                              {
    554                                  strcpy( (char *)tempBffr2, "Barometer Sensor: Disable Barometer FAILED.\r\n");;
    555                                  Save_Status = Status;
    556          #ifdef NUCLEO
    557                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    558          #else
    559                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
    560          #endif
    561                                  if (Status != HAL_OK)
    562                                    return Status;
    563                                  else
    564                                    Status = Save_Status;
    565                              }
    566                              break;
    567          //------------------ A2 Command...Start the Barometer but do not wait.     
    568                            case '2':
    569                              Status = RoadBrd_StartSample_Barometer();
    570                              // Is this a BLE Operation?
    571                              if ( BLE_Flag )
    572                              {
    573                                // Yes...Build and Send BLE Response NOW.
    574                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
    575                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
    576                              }
    577                              if (Status == HAL_OK)
    578                              {
    579                                  strcpy( (char *)tempBffr2, "Start the Barometer but do not wait Passed.\r\n");;
    580                              }
    581                              else
    582                              {
    583                                  strcpy( (char *)tempBffr2, "Start the Barometer but do not wait FAILED.\r\n");;
    584                                  Save_Status = Status;
    585          #ifdef NUCLEO
    586                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    587          #else
    588                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
    589          #endif
    590                                  if (Status != HAL_OK)
    591                                    return Status;
    592                                  else
    593                                    Status = Save_Status;
    594                              }
    595                              break;
    596          //------------------ A3 Command...Start the Barometer and wait for response.    
    597                            case '3':
    598                              Status = RoadBrd_StartSample_BarometerWait();
    599                              // Is this a BLE Operation?
    600                              if ( BLE_Flag )
    601                              {
    602                                // Yes...Build and Send BLE Response NOW.
    603                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
    604                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
    605                              }
    606                              if (Status == HAL_OK)
    607                              {
    608                                  strcpy( (char *)tempBffr2, "Start the Barometer and wait for response Passed.\r\n");;
    609                              }
    610                              else
    611                              {
    612                                  strcpy( (char *)tempBffr2, "Start the Barometer and wait for response FAILED.\r\n");;
    613                                  Save_Status = Status;
    614          #ifdef NUCLEO
    615                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    616          #else
    617                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
    618          #endif
    619                                  if (Status != HAL_OK)
    620                                    return Status;
    621                                  else
    622                                    Status = Save_Status;
    623                              }
    624                              break;
    625          //------------------ A4 Command...Return Status    
    626                            case '4':
    627                              // Is this a BLE Operation?
    628                              if ( BLE_Flag )
    629                              {
    630                                // Yes...Build and Send BLE Response NOW.
    631                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
    632                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
    633                              }
    634                              Status = RoadBrd_Barometer_Status( &PRMeasure );
    635                              if (Status == HAL_OK)
    636                              {
    637                                sprintf( (char *)tempBffr2, "Barometer Sensor Status: %02x / ", PRMeasure.Status );
    638                                strcat( (char *)tempBffr2, (char *)PRMeasure.Raw );
    639                                strcat( (char *)tempBffr2, "\r\n" );
    640                              }
    641                              break;
    642          //------------------ A5 Command...Wait for Pressure to be complete. 
    643                            case '5':
    644                              Status = RoadBrd_WaitForPressure( (uint16_t)BARO_WAITCNT );
    645                              // Is this a BLE Operation?
    646                              if ( BLE_Flag )
    647                              {
    648                                // Yes...Build and Send BLE Response NOW.
    649                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
    650                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
    651                              }
    652                              if (Status == HAL_OK)
    653                              {
    654                                  strcpy( (char *)tempBffr2, "Wait for Pressure to be complete Passed.\r\n");;
    655                              }
    656                              else
    657                              {
    658                                  strcpy( (char *)tempBffr2, "Wait for Pressure to be complete FAILED.\r\n");;
    659                                  Save_Status = Status;
    660          #ifdef NUCLEO
    661                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    662          #else
    663                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
    664          #endif
    665                                  if (Status != HAL_OK)
    666                                    return Status;
    667                                  else
    668                                    Status = Save_Status;
    669                              }
    670                              break;
    671          #endif
    672          //------------------ A6 Command...Read Pressure...PRESS_OUT_XL...PRESS_OUT_L...PRESS_OUT_H     
    673                            case '6':
    674                              //Status = RoadBrd_Barometer_Status( &PRMeasure );
    675                              Status = RoadBrd_Baro_ReadPressure( &PRPMeasure );
   \                     ??RoadBrd_ParseString_52: (+1)
   \   0000043A   0xA8AE             ADD      R0,SP,#+696
   \   0000043C   0x.... 0x....      BL       RoadBrd_Baro_ReadPressure
   \   00000440   0x0006             MOVS     R6,R0
    676                              if (Status == HAL_OK)
   \   00000442   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000444   0x2E00             CMP      R6,#+0
   \   00000446   0xD104             BNE.N    ??RoadBrd_ParseString_61
    677                                Status = RoadBrd_Baro_ReadPressure_Scaled( &PRPMeasureScaled );
   \   00000448   0xA8FF             ADD      R0,SP,#+1020
   \   0000044A   0x3038             ADDS     R0,R0,#+56
   \   0000044C   0x.... 0x....      BL       RoadBrd_Baro_ReadPressure_Scaled
   \   00000450   0x0006             MOVS     R6,R0
    678                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_61: (+1)
   \   00000452   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000454   0x2E00             CMP      R6,#+0
   \   00000456   0xD15C             BNE.N    ??RoadBrd_ParseString_62
    679                              {
    680                                strcpy( (char *)tempBffr2, "A6 Command...Read Pressure Passed.\r\n");;
   \   00000458   0xF8DF 0x1E04      LDR.W    R1,??RoadBrd_ParseString_63
   \   0000045C   0xA80B             ADD      R0,SP,#+44
   \   0000045E   0x.... 0x....      BL       strcpy
    681          #ifdef NUCLEO
    682                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    683          #else
    684                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000462   0xA90B             ADD      R1,SP,#+44
   \   00000464   0x2000             MOVS     R0,#+0
   \   00000466   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000046A   0x0006             MOVS     R6,R0
    685          #endif
    686                                if (Status != HAL_OK)
   \   0000046C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000046E   0x2E00             CMP      R6,#+0
   \   00000470   0xD003             BEQ.N    ??RoadBrd_ParseString_64
    687                                  return Status;
   \   00000472   0x0030             MOVS     R0,R6
   \   00000474   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000476   0xF004 0xBC38      B.W      ??RoadBrd_ParseString_4
    688                                // NOW, Build Data String..
    689                                sprintf( (char *)tempBffr2, " PRESSURE(PRESS_OUT_H...PRESS_OUT_L...PRESS_OUT_XL)\r\n" );
   \                     ??RoadBrd_ParseString_64: (+1)
   \   0000047A   0xF8DF 0x1DE8      LDR.W    R1,??RoadBrd_ParseString_63+0x4
   \   0000047E   0xA80B             ADD      R0,SP,#+44
   \   00000480   0x.... 0x....      BL       sprintf
    690          #ifdef NUCLEO
    691                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    692          #else
    693                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000484   0xA90B             ADD      R1,SP,#+44
   \   00000486   0x2000             MOVS     R0,#+0
   \   00000488   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000048C   0x0006             MOVS     R6,R0
    694          #endif
    695                                if (Status != HAL_OK)
   \   0000048E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000490   0x2E00             CMP      R6,#+0
   \   00000492   0xD003             BEQ.N    ??RoadBrd_ParseString_65
    696                                  return Status;
   \   00000494   0x0030             MOVS     R0,R6
   \   00000496   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000498   0xF004 0xBC27      B.W      ??RoadBrd_ParseString_4
    697                               
    698                                // Now show Decimal value of items.
    699                                sprintf( (char *)tempBffr2, " PRESSURE: %s/%s\r\n", (char *)PRPMeasure.Pressure, (char *)PRPMeasureScaled.Pressure );
   \                     ??RoadBrd_ParseString_65: (+1)
   \   0000049C   0xABFF             ADD      R3,SP,#+1020
   \   0000049E   0x3338             ADDS     R3,R3,#+56
   \   000004A0   0xAAAE             ADD      R2,SP,#+696
   \   000004A2   0xF8DF 0x1DC4      LDR.W    R1,??RoadBrd_ParseString_63+0x8
   \   000004A6   0xA80B             ADD      R0,SP,#+44
   \   000004A8   0x.... 0x....      BL       sprintf
    700          #ifdef NUCLEO
    701                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    702          #else
    703                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000004AC   0xA90B             ADD      R1,SP,#+44
   \   000004AE   0x2000             MOVS     R0,#+0
   \   000004B0   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000004B4   0x0006             MOVS     R6,R0
    704          #endif
    705                                if (Status != HAL_OK)
   \   000004B6   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000004B8   0x2E00             CMP      R6,#+0
   \   000004BA   0xD005             BEQ.N    ??RoadBrd_ParseString_66
    706                                  return Status;
   \   000004BC   0x0030             MOVS     R0,R6
   \   000004BE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000004C0   0xF004 0xBC13      B.W      ??RoadBrd_ParseString_4
   \                     ??RoadBrd_ParseString_29:
   \   000004C4   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
    707                                // Is this a BLE Operation?
    708                                if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_66: (+1)
   \   000004C8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000004CA   0x2D00             CMP      R5,#+0
   \   000004CC   0xD00D             BEQ.N    ??RoadBrd_ParseString_67
    709                                {
    710                                  // Yes...Build and Send BLE Response NOW.
    711                                  sprintf( (char *)tempBffr2, "<STATUS>PRESSURE: %s/%s</STATUS>", (char *)PRPMeasure.Pressure, (char *)PRPMeasureScaled.Pressure );
   \   000004CE   0xABFF             ADD      R3,SP,#+1020
   \   000004D0   0x3338             ADDS     R3,R3,#+56
   \   000004D2   0xAAAE             ADD      R2,SP,#+696
   \   000004D4   0xF8DF 0x1D98      LDR.W    R1,??RoadBrd_ParseString_63+0x10
   \   000004D8   0xA80B             ADD      R0,SP,#+44
   \   000004DA   0x.... 0x....      BL       sprintf
    712                                  BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000004DE   0xA80B             ADD      R0,SP,#+44
   \   000004E0   0x.... 0x....      BL       strlen
   \   000004E4   0xA90B             ADD      R1,SP,#+44
   \   000004E6   0x.... 0x....      BL       BGM111_Transmit
    713                                }
    714                                // Now show hex value of items.
    715                                sprintf( (char *)tempBffr2, " PRESSURE:  " );
   \                     ??RoadBrd_ParseString_67: (+1)
   \   000004EA   0xF8DF 0x1D88      LDR.W    R1,??RoadBrd_ParseString_63+0x14
   \   000004EE   0xA80B             ADD      R0,SP,#+44
   \   000004F0   0x.... 0x....      BL       sprintf
    716                                strcat( (char *)tempBffr2, (char *)PRPMeasure.Raw );
   \   000004F4   0xA9B1             ADD      R1,SP,#+708
   \   000004F6   0xA80B             ADD      R0,SP,#+44
   \   000004F8   0x.... 0x....      BL       strcat
    717                                sprintf( (char *)tempBffr3, "  -  %08x\r\n", PRPMeasure.RawC);
   \   000004FC   0x9AB4             LDR      R2,[SP, #+720]
   \   000004FE   0xF8DF 0x1D78      LDR.W    R1,??RoadBrd_ParseString_63+0x18
   \   00000502   0xA82B             ADD      R0,SP,#+172
   \   00000504   0x.... 0x....      BL       sprintf
    718                                strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   00000508   0xA92B             ADD      R1,SP,#+172
   \   0000050A   0xA80B             ADD      R0,SP,#+44
   \   0000050C   0x.... 0x....      BL       strcat
   \   00000510   0xE015             B.N      ??RoadBrd_ParseString_68
    719                              }
    720                              else
    721                              {
    722                                  strcpy( (char *)tempBffr2, "A6 Command...Read Pressure FAILED.\r\n");;
   \                     ??RoadBrd_ParseString_62: (+1)
   \   00000512   0xF8DF 0x1D68      LDR.W    R1,??RoadBrd_ParseString_63+0x1C
   \   00000516   0xA80B             ADD      R0,SP,#+44
   \   00000518   0x.... 0x....      BL       strcpy
    723                                  Save_Status = Status;
   \   0000051C   0xF88D 0x6029      STRB     R6,[SP, #+41]
    724          #ifdef NUCLEO
    725                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    726          #else
    727                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000520   0xA90B             ADD      R1,SP,#+44
   \   00000522   0x2000             MOVS     R0,#+0
   \   00000524   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000528   0x0006             MOVS     R6,R0
    728          #endif
    729                                  if (Status != HAL_OK)
   \   0000052A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000052C   0x2E00             CMP      R6,#+0
   \   0000052E   0xD003             BEQ.N    ??RoadBrd_ParseString_69
    730                                    return Status;
   \   00000530   0x0030             MOVS     R0,R6
   \   00000532   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000534   0xF004 0xBBD9      B.W      ??RoadBrd_ParseString_4
    731                                  else
    732                                    Status = Save_Status;
   \                     ??RoadBrd_ParseString_69: (+1)
   \   00000538   0xF89D 0x0029      LDRB     R0,[SP, #+41]
   \   0000053C   0x0006             MOVS     R6,R0
    733                              }
    734                              break;
   \                     ??RoadBrd_ParseString_68: (+1)
   \   0000053E   0xE096             B.N      ??RoadBrd_ParseString_51
    735          
    736          //------------------ A8 Command...Read Temperature....TEMP_OUT_L...TEMP_OUT_H    
    737                            case '8':
    738                              Status = RoadBrd_Baro_ReadTemp( &TMeasure );
   \                     ??RoadBrd_ParseString_53: (+1)
   \   00000540   0xA83C             ADD      R0,SP,#+240
   \   00000542   0x.... 0x....      BL       RoadBrd_Baro_ReadTemp
   \   00000546   0x0006             MOVS     R6,R0
    739                              if (Status == HAL_OK)
   \   00000548   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000054A   0x2E00             CMP      R6,#+0
   \   0000054C   0xD127             BNE.N    ??RoadBrd_ParseString_70
    740                              {
    741                                // Send string to UART..
    742                                strcpy( (char *)tempBffr2, "A8 Command...Read Temperature Passed.\r\n");
   \   0000054E   0xF8DF 0x1E0C      LDR.W    R1,??RoadBrd_ParseString_71
   \   00000552   0xA80B             ADD      R0,SP,#+44
   \   00000554   0x.... 0x....      BL       strcpy
    743          #ifdef NUCLEO
    744                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    745          #else
    746                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000558   0xA90B             ADD      R1,SP,#+44
   \   0000055A   0x2000             MOVS     R0,#+0
   \   0000055C   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000560   0x0006             MOVS     R6,R0
    747          #endif
    748                                if (Status != HAL_OK)
   \   00000562   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000564   0x2E00             CMP      R6,#+0
   \   00000566   0xD003             BEQ.N    ??RoadBrd_ParseString_72
    749                                  return Status;
   \   00000568   0x0030             MOVS     R0,R6
   \   0000056A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000056C   0xF004 0xBBBD      B.W      ??RoadBrd_ParseString_4
    750                                // NOW, Build Data String..
    751                                sprintf( (char *)tempBffr2, "     TEMP DATA: " );
   \                     ??RoadBrd_ParseString_72: (+1)
   \   00000570   0xF8DF 0x1DEC      LDR.W    R1,??RoadBrd_ParseString_71+0x4
   \   00000574   0xA80B             ADD      R0,SP,#+44
   \   00000576   0x.... 0x....      BL       sprintf
    752                                strcat( (char *)tempBffr2, (char *)TMeasure.Raw );
   \   0000057A   0xF10D 0x01FE      ADD      R1,SP,#+254
   \   0000057E   0xA80B             ADD      R0,SP,#+44
   \   00000580   0x.... 0x....      BL       strcat
    753                                strcat( (char *)tempBffr2, "\r\n" );
   \   00000584   0xA1DB             ADR.N    R1,??RoadBrd_ParseString_73  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000586   0xA80B             ADD      R0,SP,#+44
   \   00000588   0x.... 0x....      BL       strcat
    754                              }
    755                              else
    756                                break;
    757          #ifdef NUCLEO
    758                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    759          #else
    760                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000058C   0xA90B             ADD      R1,SP,#+44
   \   0000058E   0x2000             MOVS     R0,#+0
   \   00000590   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000594   0x0006             MOVS     R6,R0
    761          #endif
    762                              if (Status != HAL_OK)
   \   00000596   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000598   0x2E00             CMP      R6,#+0
   \   0000059A   0xD101             BNE.N    ??RoadBrd_ParseString_74
   \   0000059C   0xE004             B.N      ??RoadBrd_ParseString_75
   \                     ??RoadBrd_ParseString_70: (+1)
   \   0000059E   0xE066             B.N      ??RoadBrd_ParseString_51
    763                                return Status;
   \                     ??RoadBrd_ParseString_74: (+1)
   \   000005A0   0x0030             MOVS     R0,R6
   \   000005A2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000005A4   0xF004 0xBBA1      B.W      ??RoadBrd_ParseString_4
    764                              // NOW, Build Data String..
    765                              sprintf( (char *)tempBffr2, "     TEMP DATA(Decimal): %d\r\n", TMeasure.RawC );
   \                     ??RoadBrd_ParseString_75: (+1)
   \   000005A8   0xF8BD 0x2106      LDRH     R2,[SP, #+262]
   \   000005AC   0xF8DF 0x1DB4      LDR.W    R1,??RoadBrd_ParseString_71+0x8
   \   000005B0   0xA80B             ADD      R0,SP,#+44
   \   000005B2   0x.... 0x....      BL       sprintf
    766          #ifdef NUCLEO
    767                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    768          #else
    769                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000005B6   0xA90B             ADD      R1,SP,#+44
   \   000005B8   0x2000             MOVS     R0,#+0
   \   000005BA   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000005BE   0x0006             MOVS     R6,R0
    770          #endif
    771                              if (Status != HAL_OK)
   \   000005C0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000005C2   0x2E00             CMP      R6,#+0
   \   000005C4   0xD003             BEQ.N    ??RoadBrd_ParseString_76
    772                                return Status;
   \   000005C6   0x0030             MOVS     R0,R6
   \   000005C8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000005CA   0xF004 0xBB8E      B.W      ??RoadBrd_ParseString_4
    773                              // Is this a BLE Operation?
    774                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_76: (+1)
   \   000005CE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000005D0   0x2D00             CMP      R5,#+0
   \   000005D2   0xD00A             BEQ.N    ??RoadBrd_ParseString_77
    775                              {
    776                                // Yes...Build and Send BLE Response NOW.
    777                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000005D4   0xF8DF 0x1BE4      LDR.W    R1,??RoadBrd_ParseString_50+0x8
   \   000005D8   0xA80B             ADD      R0,SP,#+44
   \   000005DA   0x.... 0x....      BL       strcpy
    778                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000005DE   0xA80B             ADD      R0,SP,#+44
   \   000005E0   0x.... 0x....      BL       strlen
   \   000005E4   0xA90B             ADD      R1,SP,#+44
   \   000005E6   0x.... 0x....      BL       BGM111_Transmit
    779                              }
    780                              // Now calculate Celcius and Farenheit Temp.
    781                              sprintf( (char *)tempBffr2, "     TempC: " );
   \                     ??RoadBrd_ParseString_77: (+1)
   \   000005EA   0xF8DF 0x1E1C      LDR.W    R1,??RoadBrd_ParseString_78
   \   000005EE   0xA80B             ADD      R0,SP,#+44
   \   000005F0   0x.... 0x....      BL       sprintf
    782                              strcat( (char *)tempBffr2, (char *)TMeasure.TempC );
   \   000005F4   0xA93C             ADD      R1,SP,#+240
   \   000005F6   0xA80B             ADD      R0,SP,#+44
   \   000005F8   0x.... 0x....      BL       strcat
    783                              strcat( (char *)tempBffr2, "     TempF: " );
   \   000005FC   0xF8DF 0x1E0C      LDR.W    R1,??RoadBrd_ParseString_78+0x4
   \   00000600   0xA80B             ADD      R0,SP,#+44
   \   00000602   0x.... 0x....      BL       strcat
    784                              strcat( (char *)tempBffr2, (char *)TMeasure.TempF );
   \   00000606   0xF10D 0x01F7      ADD      R1,SP,#+247
   \   0000060A   0xA80B             ADD      R0,SP,#+44
   \   0000060C   0x.... 0x....      BL       strcat
    785                              strcat( (char *)tempBffr2, "\r\n" );
   \   00000610   0xA1B8             ADR.N    R1,??RoadBrd_ParseString_73  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000612   0xA80B             ADD      R0,SP,#+44
   \   00000614   0x.... 0x....      BL       strcat
    786          /*                    if (Status == HAL_OK)
    787                              {
    788                                strcpy( (char *)tempBffr2, "A8 Command...Read Temperature Passed.\r\n");;
    789          #ifdef NUCLEO
    790                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    791          #else
    792                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
    793          #endif
    794                                if (Status != HAL_OK)
    795                                  return Status;
    796                                // NOW, Build Data String..
    797                                sprintf( (char *)tempBffr2, " Temperature(TEMP_OUT_L...TEMP_OUT_H)\r\n" );
    798          #ifdef NUCLEO
    799                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    800          #else
    801                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
    802          #endif
    803                                if (Status != HAL_OK)
    804                                  return Status;
    805                                sprintf( (char *)tempBffr2, " Temperature:  %02x   %02x\r\n", i2cData[0], i2cData[1] );
    806                              }
    807                              else
    808                              {
    809                                  strcpy( (char *)tempBffr2, "A8 Command...Read Temperature FAILED.\r\n");;
    810                                  Save_Status = Status;
    811          #ifdef NUCLEO
    812                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    813          #else
    814                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
    815          #endif
    816                                  if (Status != HAL_OK)
    817                                    return Status;
    818                                  else
    819                                    Status = Save_Status;
    820                              }*/
    821                              break;
   \   00000618   0xE029             B.N      ??RoadBrd_ParseString_51
    822          //------------------ A9 Command...Test and Verify WHO_AM_I     
    823                            case '9':
    824                              Status = RoadBrd_TestandRead_Barometer();
   \                     ??RoadBrd_ParseString_54: (+1)
   \   0000061A   0x.... 0x....      BL       RoadBrd_TestandRead_Barometer
   \   0000061E   0x0006             MOVS     R6,R0
    825                              // Is this a BLE Operation?
    826                              if ( BLE_Flag )
   \   00000620   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000622   0x2D00             CMP      R5,#+0
   \   00000624   0xD00A             BEQ.N    ??RoadBrd_ParseString_79
    827                              {
    828                                // Yes...Build and Send BLE Response NOW.
    829                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00000626   0xF8DF 0x1B94      LDR.W    R1,??RoadBrd_ParseString_50+0x8
   \   0000062A   0xA80B             ADD      R0,SP,#+44
   \   0000062C   0x.... 0x....      BL       strcpy
    830                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000630   0xA80B             ADD      R0,SP,#+44
   \   00000632   0x.... 0x....      BL       strlen
   \   00000636   0xA90B             ADD      R1,SP,#+44
   \   00000638   0x.... 0x....      BL       BGM111_Transmit
    831                              }
    832                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_79: (+1)
   \   0000063C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000063E   0x2E00             CMP      R6,#+0
   \   00000640   0xD108             BNE.N    ??RoadBrd_ParseString_80
    833                              {
    834                                  strcpy( (char *)tempBffr2, "Barometer Sensor: WHO_AM_I Passed.\r\n");
   \   00000642   0xF8DF 0x1E18      LDR.W    R1,??RoadBrd_ParseString_81
   \   00000646   0xA80B             ADD      R0,SP,#+44
   \   00000648   0x.... 0x....      BL       strcpy
   \   0000064C   0xE009             B.N      ??RoadBrd_ParseString_82
   \   0000064E   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_41:
   \   00000650   0x00 0x00          DC8      "",0x0,0x0,0x0
   \              0x00 0x00    
    835                              }
    836                              else
    837                              {
    838                                  strcpy( (char *)tempBffr2, "Barometer Sensor: WHO_AM_I FAILED.\r\n");
   \                     ??RoadBrd_ParseString_80: (+1)
   \   00000654   0xF8DF 0x1E08      LDR.W    R1,??RoadBrd_ParseString_81+0x4
   \   00000658   0xA80B             ADD      R0,SP,#+44
   \   0000065A   0x.... 0x....      BL       strcpy
    839                                  Status = HAL_OK;
   \   0000065E   0x2000             MOVS     R0,#+0
   \   00000660   0x0006             MOVS     R6,R0
    840                              }
    841                              break;
   \                     ??RoadBrd_ParseString_82: (+1)
   \   00000662   0xE004             B.N      ??RoadBrd_ParseString_51
    842                            default:
    843                              strcpy( (char *)tempBffr2, "ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_55: (+1)
   \   00000664   0xF8DF 0x1DFC      LDR.W    R1,??RoadBrd_ParseString_81+0x8
   \   00000668   0xA80B             ADD      R0,SP,#+44
   \   0000066A   0x.... 0x....      BL       strcpy
    844                              break;
    845                          } //EndSwitch
    846                        } //EndElse (Size == 1)
    847                        break;
   \                     ??RoadBrd_ParseString_51: (+1)
   \   0000066E   0xF004 0xBABA      B.W      ??RoadBrd_ParseString_26
    848          //**************************************************************************************************
    849                      case 'B':
    850                        // Read Cool Eye. 
    851          //++++++++++++++++++++++++++++++++++++++++++  Cool Eye/Grid Eye Monitor Commands.
    852                        if (Size == 1)
   \                     ??RoadBrd_ParseString_13: (+1)
   \   00000672   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   00000676   0x2801             CMP      R0,#+1
   \   00000678   0xF040 0x8151      BNE.W    ??RoadBrd_ParseString_83
    853                        {
    854          //------------------ B Command: Read Cool Eye/Grid Eye Values      
    855                          // Read Cool Eye/Grid Eye Values.....
    856                          if ( Get_DriverStates( GRIDEYE_MNTR_TASK ))
   \   0000067C   0x2005             MOVS     R0,#+5
   \   0000067E   0x.... 0x....      BL       Get_DriverStates
   \   00000682   0x2800             CMP      R0,#+0
   \   00000684   0xD00B             BEQ.N    ??RoadBrd_ParseString_84
    857                          {
    858                            Status = RoadBrd_GridEye_ReadValues( &GridMeasure );
   \   00000686   0xA85B             ADD      R0,SP,#+364
   \   00000688   0x.... 0x....      BL       RoadBrd_GridEye_ReadValues
   \   0000068C   0x0006             MOVS     R6,R0
    859                            if (Status == HAL_OK)
   \   0000068E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000690   0x2E00             CMP      R6,#+0
   \   00000692   0xD117             BNE.N    ??RoadBrd_ParseString_85
    860                              Status = RoadBrd_GridEye_ReadValues_Scaled( &GridMeasureScaled );
   \   00000694   0xA8D7             ADD      R0,SP,#+860
   \   00000696   0x.... 0x....      BL       RoadBrd_GridEye_ReadValues_Scaled
   \   0000069A   0x0006             MOVS     R6,R0
   \   0000069C   0xE012             B.N      ??RoadBrd_ParseString_85
    861                          }
    862                          else if ( Get_DriverStates( COOLEYE_MNTR_TASK ))
   \                     ??RoadBrd_ParseString_84: (+1)
   \   0000069E   0x2006             MOVS     R0,#+6
   \   000006A0   0x.... 0x....      BL       Get_DriverStates
   \   000006A4   0x2800             CMP      R0,#+0
   \   000006A6   0xD00B             BEQ.N    ??RoadBrd_ParseString_86
    863                          {
    864                            Status = RoadBrd_CoolEye_ReadValues( &GridMeasure );
   \   000006A8   0xA85B             ADD      R0,SP,#+364
   \   000006AA   0x.... 0x....      BL       RoadBrd_CoolEye_ReadValues
   \   000006AE   0x0006             MOVS     R6,R0
    865                            if (Status == HAL_OK)
   \   000006B0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000006B2   0x2E00             CMP      R6,#+0
   \   000006B4   0xD106             BNE.N    ??RoadBrd_ParseString_85
    866                              Status = RoadBrd_CoolEye_ReadValues_Scaled( &GridMeasureScaled );
   \   000006B6   0xA8D7             ADD      R0,SP,#+860
   \   000006B8   0x.... 0x....      BL       RoadBrd_CoolEye_ReadValues_Scaled
   \   000006BC   0x0006             MOVS     R6,R0
   \   000006BE   0xE001             B.N      ??RoadBrd_ParseString_85
    867                          }
    868                          else
    869                            Status = HAL_ERROR;
   \                     ??RoadBrd_ParseString_86: (+1)
   \   000006C0   0x2001             MOVS     R0,#+1
   \   000006C2   0x0006             MOVS     R6,R0
    870                          
    871                          // Is this a BLE Operation?
    872                          if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_85: (+1)
   \   000006C4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000006C6   0x2D00             CMP      R5,#+0
   \   000006C8   0xD00A             BEQ.N    ??RoadBrd_ParseString_87
    873                          {
    874                            // Yes...Build and Send BLE Response NOW.
    875                            strcpy( (char *)tempBffr2, "<STATUS>ST_THERMAL_DUMP:");
   \   000006CA   0xF8DF 0x1E2C      LDR.W    R1,??RoadBrd_ParseString_88
   \   000006CE   0xA80B             ADD      R0,SP,#+44
   \   000006D0   0x.... 0x....      BL       strcpy
    876                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000006D4   0xA80B             ADD      R0,SP,#+44
   \   000006D6   0x.... 0x....      BL       strlen
   \   000006DA   0xA90B             ADD      R1,SP,#+44
   \   000006DC   0x.... 0x....      BL       BGM111_Transmit
    877                          }
    878                          if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_87: (+1)
   \   000006E0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000006E2   0x2E00             CMP      R6,#+0
   \   000006E4   0xF040 0x8108      BNE.W    ??RoadBrd_ParseString_89
    879                          {
    880                            // Send string to UART..
    881                            strcpy( (char *)tempBffr2, "Voltage Monitor/Shunt Voltage...\r\n");
   \   000006E8   0xF8DF 0x1E10      LDR.W    R1,??RoadBrd_ParseString_88+0x4
   \   000006EC   0xA80B             ADD      R0,SP,#+44
   \   000006EE   0x.... 0x....      BL       strcpy
    882          #ifdef NUCLEO
    883                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    884          #else
    885                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000006F2   0xA90B             ADD      R1,SP,#+44
   \   000006F4   0x2000             MOVS     R0,#+0
   \   000006F6   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000006FA   0x0006             MOVS     R6,R0
    886          #endif
    887                            if (Status != HAL_OK)
   \   000006FC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000006FE   0x2E00             CMP      R6,#+0
   \   00000700   0xD003             BEQ.N    ??RoadBrd_ParseString_90
    888                              return Status;
   \   00000702   0x0030             MOVS     R0,R6
   \   00000704   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000706   0xF004 0xBAF0      B.W      ??RoadBrd_ParseString_4
    889                            // NOW, Build Data String..
    890                            for (x=0; x<9; x++)
   \                     ??RoadBrd_ParseString_90: (+1)
   \   0000070A   0x2000             MOVS     R0,#+0
   \   0000070C   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_91: (+1)
   \   0000070E   0x2F09             CMP      R7,#+9
   \   00000710   0xF280 0x80DE      BGE.W    ??RoadBrd_ParseString_92
    891                            {
    892                              // Build String
    893                              switch(x)
   \   00000714   0x2F00             CMP      R7,#+0
   \   00000716   0xD00F             BEQ.N    ??RoadBrd_ParseString_93
   \   00000718   0x2F02             CMP      R7,#+2
   \   0000071A   0xD035             BEQ.N    ??RoadBrd_ParseString_94
   \   0000071C   0xD320             BCC.N    ??RoadBrd_ParseString_95
   \   0000071E   0x2F04             CMP      R7,#+4
   \   00000720   0xD05A             BEQ.N    ??RoadBrd_ParseString_96
   \   00000722   0xD345             BCC.N    ??RoadBrd_ParseString_97
   \   00000724   0x2F06             CMP      R7,#+6
   \   00000726   0xF000 0x807F      BEQ.W    ??RoadBrd_ParseString_98
   \   0000072A   0xD369             BCC.N    ??RoadBrd_ParseString_99
   \   0000072C   0x2F08             CMP      R7,#+8
   \   0000072E   0xF000 0x80A4      BEQ.W    ??RoadBrd_ParseString_100
   \   00000732   0xF0C0 0x808D      BCC.W    ??RoadBrd_ParseString_101
   \   00000736   0xE0B4             B.N      ??RoadBrd_ParseString_102
    894                              {
    895                                case 0: //Thermistor Values
    896                                  sprintf( (char *)tempBffr2, "     Thermistor DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.Thermistor.Raw,
    897                                                                                                         GridMeasure.Thermistor.TempC,GridMeasureScaled.Thermistor.TempC,
    898                                                                                                         GridMeasure.Thermistor.TempF,GridMeasureScaled.Thermistor.TempF,
    899                                                                                                         GridMeasure.Thermistor.RawC );
   \                     ??RoadBrd_ParseString_93: (+1)
   \   00000738   0xF8BD 0x0182      LDRH     R0,[SP, #+386]
   \   0000073C   0x9003             STR      R0,[SP, #+12]
   \   0000073E   0xA8D8             ADD      R0,SP,#+864
   \   00000740   0x1CC0             ADDS     R0,R0,#+3
   \   00000742   0x9002             STR      R0,[SP, #+8]
   \   00000744   0xA85C             ADD      R0,SP,#+368
   \   00000746   0x1CC0             ADDS     R0,R0,#+3
   \   00000748   0x9001             STR      R0,[SP, #+4]
   \   0000074A   0xA8D7             ADD      R0,SP,#+860
   \   0000074C   0x9000             STR      R0,[SP, #+0]
   \   0000074E   0xAB5B             ADD      R3,SP,#+364
   \   00000750   0xF50D 0x72BD      ADD      R2,SP,#+378
   \   00000754   0xF8DF 0x1E0C      LDR.W    R1,??RoadBrd_ParseString_103
   \   00000758   0xA80B             ADD      R0,SP,#+44
   \   0000075A   0x.... 0x....      BL       sprintf
    900          //                        sprintf( (char *)tempBffr2, "     Thermistor DATA: %s   %s   %s   %d\r\n", GridMeasure.Thermistor.Raw,
    901          //                                                                                               GridMeasure.Thermistor.TempC,
    902          //                                                                                               GridMeasure.Thermistor.TempF,
    903          //                                                                                               GridMeasure.Thermistor.RawC );
    904                                  break;
   \   0000075E   0xE0A0             B.N      ??RoadBrd_ParseString_102
    905                                case 1: //GridEye1 Values
    906                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye1.Raw,
    907                                                                                                         GridMeasure.GridEye1.TempC,GridMeasureScaled.GridEye1.TempC,
    908                                                                                                         GridMeasure.GridEye1.TempF,GridMeasureScaled.GridEye1.TempF,
    909                                                                                                         GridMeasure.GridEye1.RawC );
   \                     ??RoadBrd_ParseString_95: (+1)
   \   00000760   0xF8BD 0x019A      LDRH     R0,[SP, #+410]
   \   00000764   0x9003             STR      R0,[SP, #+12]
   \   00000766   0xA8DE             ADD      R0,SP,#+888
   \   00000768   0x1CC0             ADDS     R0,R0,#+3
   \   0000076A   0x9002             STR      R0,[SP, #+8]
   \   0000076C   0xA862             ADD      R0,SP,#+392
   \   0000076E   0x1CC0             ADDS     R0,R0,#+3
   \   00000770   0x9001             STR      R0,[SP, #+4]
   \   00000772   0xA8DD             ADD      R0,SP,#+884
   \   00000774   0x9000             STR      R0,[SP, #+0]
   \   00000776   0xAB61             ADD      R3,SP,#+388
   \   00000778   0xF50D 0x72C9      ADD      R2,SP,#+402
   \   0000077C   0xF8DF 0x1DE8      LDR.W    R1,??RoadBrd_ParseString_103+0x4
   \   00000780   0xA80B             ADD      R0,SP,#+44
   \   00000782   0x.... 0x....      BL       sprintf
    910          //                        sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye1.Raw,
    911          //                                                                                               GridMeasure.GridEye1.TempC,
    912          //                                                                                               GridMeasure.GridEye1.TempF,
    913          //                                                                                               GridMeasure.GridEye1.RawC );
    914                                  break;
   \   00000786   0xE08C             B.N      ??RoadBrd_ParseString_102
    915                                case 2: //GridEye2 Values
    916                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye2.Raw,
    917                                                                                                         GridMeasure.GridEye2.TempC,GridMeasureScaled.GridEye2.TempC,
    918                                                                                                         GridMeasure.GridEye2.TempF,GridMeasureScaled.GridEye2.TempF,
    919                                                                                                         GridMeasure.GridEye2.RawC );
   \                     ??RoadBrd_ParseString_94: (+1)
   \   00000788   0xF8BD 0x01B2      LDRH     R0,[SP, #+434]
   \   0000078C   0x9003             STR      R0,[SP, #+12]
   \   0000078E   0xA8E4             ADD      R0,SP,#+912
   \   00000790   0x1CC0             ADDS     R0,R0,#+3
   \   00000792   0x9002             STR      R0,[SP, #+8]
   \   00000794   0xA868             ADD      R0,SP,#+416
   \   00000796   0x1CC0             ADDS     R0,R0,#+3
   \   00000798   0x9001             STR      R0,[SP, #+4]
   \   0000079A   0xA8E3             ADD      R0,SP,#+908
   \   0000079C   0x9000             STR      R0,[SP, #+0]
   \   0000079E   0xAB67             ADD      R3,SP,#+412
   \   000007A0   0xF50D 0x72D5      ADD      R2,SP,#+426
   \   000007A4   0xF8DF 0x1DC0      LDR.W    R1,??RoadBrd_ParseString_103+0x4
   \   000007A8   0xA80B             ADD      R0,SP,#+44
   \   000007AA   0x.... 0x....      BL       sprintf
    920          //                        sprintf( (char *)tempBffr2, "     Grid 34 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye2.Raw,
    921          //                                                                                               GridMeasure.GridEye2.TempC,
    922          //                                                                                               GridMeasure.GridEye2.TempF,
    923          //                                                                                               GridMeasure.GridEye2.RawC );
    924                                  break;
   \   000007AE   0xE078             B.N      ??RoadBrd_ParseString_102
    925                                case 3: //GridEye3 Values
    926                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye3.Raw,
    927                                                                                                         GridMeasure.GridEye3.TempC,GridMeasureScaled.GridEye3.TempC,
    928                                                                                                         GridMeasure.GridEye3.TempF,GridMeasureScaled.GridEye3.TempF,
    929                                                                                                         GridMeasure.GridEye3.RawC );
   \                     ??RoadBrd_ParseString_97: (+1)
   \   000007B0   0xF8BD 0x01CA      LDRH     R0,[SP, #+458]
   \   000007B4   0x9003             STR      R0,[SP, #+12]
   \   000007B6   0xA8EA             ADD      R0,SP,#+936
   \   000007B8   0x1CC0             ADDS     R0,R0,#+3
   \   000007BA   0x9002             STR      R0,[SP, #+8]
   \   000007BC   0xA86E             ADD      R0,SP,#+440
   \   000007BE   0x1CC0             ADDS     R0,R0,#+3
   \   000007C0   0x9001             STR      R0,[SP, #+4]
   \   000007C2   0xA8E9             ADD      R0,SP,#+932
   \   000007C4   0x9000             STR      R0,[SP, #+0]
   \   000007C6   0xAB6D             ADD      R3,SP,#+436
   \   000007C8   0xF50D 0x72E1      ADD      R2,SP,#+450
   \   000007CC   0xF8DF 0x1D98      LDR.W    R1,??RoadBrd_ParseString_103+0x4
   \   000007D0   0xA80B             ADD      R0,SP,#+44
   \   000007D2   0x.... 0x....      BL       sprintf
    930          //                        sprintf( (char *)tempBffr2, "     Grid 35 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye3.Raw,
    931          //                                                                                               GridMeasure.GridEye3.TempC,
    932          //                                                                                               GridMeasure.GridEye3.TempF,
    933          //                                                                                               GridMeasure.GridEye3.RawC );
    934                                  break;
   \   000007D6   0xE064             B.N      ??RoadBrd_ParseString_102
    935                                case 4: //GridEye4 Values
    936                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye4.Raw,
    937                                                                                                         GridMeasure.GridEye4.TempC,GridMeasureScaled.GridEye4.TempC,
    938                                                                                                         GridMeasure.GridEye4.TempF,GridMeasureScaled.GridEye4.TempF,
    939                                                                                                         GridMeasure.GridEye4.RawC );
   \                     ??RoadBrd_ParseString_96: (+1)
   \   000007D8   0xF8BD 0x01E2      LDRH     R0,[SP, #+482]
   \   000007DC   0x9003             STR      R0,[SP, #+12]
   \   000007DE   0xA8F0             ADD      R0,SP,#+960
   \   000007E0   0x1CC0             ADDS     R0,R0,#+3
   \   000007E2   0x9002             STR      R0,[SP, #+8]
   \   000007E4   0xA874             ADD      R0,SP,#+464
   \   000007E6   0x1CC0             ADDS     R0,R0,#+3
   \   000007E8   0x9001             STR      R0,[SP, #+4]
   \   000007EA   0xA8EF             ADD      R0,SP,#+956
   \   000007EC   0x9000             STR      R0,[SP, #+0]
   \   000007EE   0xAB73             ADD      R3,SP,#+460
   \   000007F0   0xF50D 0x72ED      ADD      R2,SP,#+474
   \   000007F4   0xF8DF 0x1D70      LDR.W    R1,??RoadBrd_ParseString_103+0x4
   \   000007F8   0xA80B             ADD      R0,SP,#+44
   \   000007FA   0x.... 0x....      BL       sprintf
    940          //                        sprintf( (char *)tempBffr2, "     Grid 36 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye4.Raw,
    941          //                                                                                               GridMeasure.GridEye4.TempC,
    942          //                                                                                               GridMeasure.GridEye4.TempF,
    943          //                                                                                               GridMeasure.GridEye4.RawC );
    944                                  break;
   \   000007FE   0xE050             B.N      ??RoadBrd_ParseString_102
    945                                case 5: //GridEye5 Values
    946                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye5.Raw,
    947                                                                                                         GridMeasure.GridEye5.TempC,GridMeasureScaled.GridEye5.TempC,
    948                                                                                                         GridMeasure.GridEye5.TempF,GridMeasureScaled.GridEye5.TempF,
    949                                                                                                         GridMeasure.GridEye5.RawC );
   \                     ??RoadBrd_ParseString_99: (+1)
   \   00000800   0xF8BD 0x01FA      LDRH     R0,[SP, #+506]
   \   00000804   0x9003             STR      R0,[SP, #+12]
   \   00000806   0xA8F6             ADD      R0,SP,#+984
   \   00000808   0x1CC0             ADDS     R0,R0,#+3
   \   0000080A   0x9002             STR      R0,[SP, #+8]
   \   0000080C   0xA87A             ADD      R0,SP,#+488
   \   0000080E   0x1CC0             ADDS     R0,R0,#+3
   \   00000810   0x9001             STR      R0,[SP, #+4]
   \   00000812   0xA8F5             ADD      R0,SP,#+980
   \   00000814   0x9000             STR      R0,[SP, #+0]
   \   00000816   0xAB79             ADD      R3,SP,#+484
   \   00000818   0xF50D 0x72F9      ADD      R2,SP,#+498
   \   0000081C   0xF8DF 0x1D48      LDR.W    R1,??RoadBrd_ParseString_103+0x4
   \   00000820   0xA80B             ADD      R0,SP,#+44
   \   00000822   0x.... 0x....      BL       sprintf
    950          //                        sprintf( (char *)tempBffr2, "     Grid 37 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye5.Raw,
    951          //                                                                                               GridMeasure.GridEye5.TempC,
    952          //                                                                                               GridMeasure.GridEye5.TempF,
    953          //                                                                                               GridMeasure.GridEye5.RawC );
    954                                  break;
   \   00000826   0xE03C             B.N      ??RoadBrd_ParseString_102
    955                                case 6: //GridEye6 Values
    956                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye6.Raw,
    957                                                                                                         GridMeasure.GridEye6.TempC,GridMeasureScaled.GridEye6.TempC,
    958                                                                                                         GridMeasure.GridEye6.TempF,GridMeasureScaled.GridEye6.TempF,
    959                                                                                                         GridMeasure.GridEye6.RawC );
   \                     ??RoadBrd_ParseString_98: (+1)
   \   00000828   0xF8BD 0x0212      LDRH     R0,[SP, #+530]
   \   0000082C   0x9003             STR      R0,[SP, #+12]
   \   0000082E   0xA8FC             ADD      R0,SP,#+1008
   \   00000830   0x1CC0             ADDS     R0,R0,#+3
   \   00000832   0x9002             STR      R0,[SP, #+8]
   \   00000834   0xA880             ADD      R0,SP,#+512
   \   00000836   0x1CC0             ADDS     R0,R0,#+3
   \   00000838   0x9001             STR      R0,[SP, #+4]
   \   0000083A   0xA8FB             ADD      R0,SP,#+1004
   \   0000083C   0x9000             STR      R0,[SP, #+0]
   \   0000083E   0xAB7F             ADD      R3,SP,#+508
   \   00000840   0xAA82             ADD      R2,SP,#+520
   \   00000842   0x1C92             ADDS     R2,R2,#+2
   \   00000844   0xF8DF 0x1D20      LDR.W    R1,??RoadBrd_ParseString_103+0x4
   \   00000848   0xA80B             ADD      R0,SP,#+44
   \   0000084A   0x.... 0x....      BL       sprintf
    960          //                        sprintf( (char *)tempBffr2, "     Grid 38 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye6.Raw,
    961          //                                                                                               GridMeasure.GridEye6.TempC,
    962          //                                                                                               GridMeasure.GridEye6.TempF,
    963          //                                                                                               GridMeasure.GridEye6.RawC );
    964                                  break;
   \   0000084E   0xE028             B.N      ??RoadBrd_ParseString_102
    965                                case 7: //GridEye7 Values
    966                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye7.Raw,
    967                                                                                                         GridMeasure.GridEye7.TempC,GridMeasureScaled.GridEye7.TempC,
    968                                                                                                         GridMeasure.GridEye7.TempF,GridMeasureScaled.GridEye7.TempF,
    969                                                                                                         GridMeasure.GridEye7.RawC );
   \                     ??RoadBrd_ParseString_101: (+1)
   \   00000850   0xF8BD 0x022A      LDRH     R0,[SP, #+554]
   \   00000854   0x9003             STR      R0,[SP, #+12]
   \   00000856   0xA8FF             ADD      R0,SP,#+1020
   \   00000858   0x300F             ADDS     R0,R0,#+15
   \   0000085A   0x9002             STR      R0,[SP, #+8]
   \   0000085C   0xA886             ADD      R0,SP,#+536
   \   0000085E   0x1CC0             ADDS     R0,R0,#+3
   \   00000860   0x9001             STR      R0,[SP, #+4]
   \   00000862   0xA8FF             ADD      R0,SP,#+1020
   \   00000864   0x3008             ADDS     R0,R0,#+8
   \   00000866   0x9000             STR      R0,[SP, #+0]
   \   00000868   0xAB85             ADD      R3,SP,#+532
   \   0000086A   0xAA88             ADD      R2,SP,#+544
   \   0000086C   0x1C92             ADDS     R2,R2,#+2
   \   0000086E   0xF8DF 0x1CF8      LDR.W    R1,??RoadBrd_ParseString_103+0x4
   \   00000872   0xA80B             ADD      R0,SP,#+44
   \   00000874   0x.... 0x....      BL       sprintf
    970          //                        sprintf( (char *)tempBffr2, "     Grid 39 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye7.Raw,
    971          //                                                                                               GridMeasure.GridEye7.TempC,
    972          //                                                                                               GridMeasure.GridEye7.TempF,
    973          //                                                                                               GridMeasure.GridEye7.RawC );
    974                                  break;
   \   00000878   0xE013             B.N      ??RoadBrd_ParseString_102
    975                                case 8: //GridEye8 Values
    976                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye8.Raw,
    977                                                                                                         GridMeasure.GridEye8.TempC,GridMeasureScaled.GridEye8.TempC,
    978                                                                                                         GridMeasure.GridEye8.TempF,GridMeasureScaled.GridEye8.TempF,
    979                                                                                                         GridMeasure.GridEye8.RawC );
   \                     ??RoadBrd_ParseString_100: (+1)
   \   0000087A   0xF8BD 0x0242      LDRH     R0,[SP, #+578]
   \   0000087E   0x9003             STR      R0,[SP, #+12]
   \   00000880   0xA8FF             ADD      R0,SP,#+1020
   \   00000882   0x3027             ADDS     R0,R0,#+39
   \   00000884   0x9002             STR      R0,[SP, #+8]
   \   00000886   0xA88C             ADD      R0,SP,#+560
   \   00000888   0x1CC0             ADDS     R0,R0,#+3
   \   0000088A   0x9001             STR      R0,[SP, #+4]
   \   0000088C   0xA8FF             ADD      R0,SP,#+1020
   \   0000088E   0x3020             ADDS     R0,R0,#+32
   \   00000890   0x9000             STR      R0,[SP, #+0]
   \   00000892   0xAB8B             ADD      R3,SP,#+556
   \   00000894   0xAA8E             ADD      R2,SP,#+568
   \   00000896   0x1C92             ADDS     R2,R2,#+2
   \   00000898   0xF8DF 0x1CCC      LDR.W    R1,??RoadBrd_ParseString_103+0x4
   \   0000089C   0xA80B             ADD      R0,SP,#+44
   \   0000089E   0x.... 0x....      BL       sprintf
    980          //                        sprintf( (char *)tempBffr2, "     Grid 40 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye8.Raw,
    981          //                                                                                               GridMeasure.GridEye8.TempC,
    982          //                                                                                               GridMeasure.GridEye8.TempF,
    983          //                                                                                               GridMeasure.GridEye8.RawC );
    984                                  break;
    985                              } // EndSwitch(x)
    986                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_102: (+1)
   \   000008A2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000008A4   0x2D00             CMP      R5,#+0
   \   000008A6   0xD005             BEQ.N    ??RoadBrd_ParseString_104
    987                              {
    988                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000008A8   0xA80B             ADD      R0,SP,#+44
   \   000008AA   0x.... 0x....      BL       strlen
   \   000008AE   0xA90B             ADD      R1,SP,#+44
   \   000008B0   0x.... 0x....      BL       BGM111_Transmit
    989                              }
    990                              // Now Print String.
    991           #ifdef NUCLEO
    992                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    993          #else
    994                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \                     ??RoadBrd_ParseString_104: (+1)
   \   000008B4   0xA90B             ADD      R1,SP,#+44
   \   000008B6   0x2000             MOVS     R0,#+0
   \   000008B8   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000008BC   0x0006             MOVS     R6,R0
    995          #endif
    996                              if (Status != HAL_OK)
   \   000008BE   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000008C0   0x2E00             CMP      R6,#+0
   \   000008C2   0xD003             BEQ.N    ??RoadBrd_ParseString_105
    997                                return Status;
   \   000008C4   0x0030             MOVS     R0,R6
   \   000008C6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000008C8   0xF004 0xBA0F      B.W      ??RoadBrd_ParseString_4
    998                            } // EndFor(x=0; x<9; x++)
   \                     ??RoadBrd_ParseString_105: (+1)
   \   000008CC   0x1C7F             ADDS     R7,R7,#+1
   \   000008CE   0xE71E             B.N      ??RoadBrd_ParseString_91
    999                            sprintf( (char *)tempBffr2, "     SHNT VLTG DATA: " );
   \                     ??RoadBrd_ParseString_92: (+1)
   \   000008D0   0xF8DF 0x1E00      LDR.W    R1,??RoadBrd_ParseString_106
   \   000008D4   0xA80B             ADD      R0,SP,#+44
   \   000008D6   0x.... 0x....      BL       sprintf
   1000                            strcat( (char *)tempBffr2, (char *)VMeasure.Raw );
   \   000008DA   0xA944             ADD      R1,SP,#+272
   \   000008DC   0xA80B             ADD      R0,SP,#+44
   \   000008DE   0x.... 0x....      BL       strcat
   1001                            strcat( (char *)tempBffr2, "\r\n" );
   \   000008E2   0xA104             ADR.N    R1,??RoadBrd_ParseString_73  ;; 0x0D, 0x0A, 0x00, 0x00
   \   000008E4   0xA80B             ADD      R0,SP,#+44
   \   000008E6   0x.... 0x....      BL       strcat
   1002                          } //Endif(Status == HAL_OK)
   1003                          else
   1004                            break;
   1005                          if ( BLE_Flag )
   \   000008EA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000008EC   0x2D00             CMP      R5,#+0
   \   000008EE   0xD105             BNE.N    ??RoadBrd_ParseString_107
   \   000008F0   0xE00F             B.N      ??RoadBrd_ParseString_108
   \   000008F2   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_73:
   \   000008F4   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
   \                     ??RoadBrd_ParseString_89: (+1)
   \   000008F8   0xF004 0xB975      B.W      ??RoadBrd_ParseString_26
   1006                          {
   1007                            strcpy( (char *)tempBffr2, "</STATUS>");
   \                     ??RoadBrd_ParseString_107: (+1)
   \   000008FC   0xF8DF 0x1834      LDR.W    R1,??RoadBrd_ParseString_48
   \   00000900   0xA80B             ADD      R0,SP,#+44
   \   00000902   0x.... 0x....      BL       strcpy
   1008                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000906   0xA80B             ADD      R0,SP,#+44
   \   00000908   0x.... 0x....      BL       strlen
   \   0000090C   0xA90B             ADD      R1,SP,#+44
   \   0000090E   0x.... 0x....      BL       BGM111_Transmit
   1009                          }
   1010                          sprintf( (char *)tempBffr2, "     COMPLETE.\r\n" );
   \                     ??RoadBrd_ParseString_108: (+1)
   \   00000912   0xF8DF 0x1E0C      LDR.W    R1,??RoadBrd_ParseString_109
   \   00000916   0xA80B             ADD      R0,SP,#+44
   \   00000918   0x.... 0x....      BL       sprintf
   \   0000091C   0xE170             B.N      ??RoadBrd_ParseString_110
   1011                        }
   1012                        else
   1013                        {
   1014                          switch( tempBffr[1] )
   \                     ??RoadBrd_ParseString_83: (+1)
   \   0000091E   0x7860             LDRB     R0,[R4, #+1]
   \   00000920   0x2830             CMP      R0,#+48
   \   00000922   0xD01F             BEQ.N    ??RoadBrd_ParseString_111
   \   00000924   0x2831             CMP      R0,#+49
   \   00000926   0xF000 0x8152      BEQ.W    ??RoadBrd_ParseString_112
   \   0000092A   0x2849             CMP      R0,#+73
   \   0000092C   0xF040 0x8168      BNE.W    ??RoadBrd_ParseString_110
   1015                          {
   1016          //------------------ BI Command: Initialize Cool Eye/Grid Eye Sensor
   1017                            case 'I':
   1018                              // Initialize Cool Eye/Grid Eye Sensor.
   1019                              Status = RoadBrd_GridEyeInit();
   \                     ??RoadBrd_ParseString_113: (+1)
   \   00000930   0x.... 0x....      BL       RoadBrd_GridEyeInit
   \   00000934   0x0006             MOVS     R6,R0
   1020                              // Is this a BLE Operation?
   1021                              if ( BLE_Flag )
   \   00000936   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000938   0x2D00             CMP      R5,#+0
   \   0000093A   0xD00A             BEQ.N    ??RoadBrd_ParseString_114
   1022                              {
   1023                                // Yes...Build and Send BLE Response NOW.
   1024                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   0000093C   0xF8DF 0x187C      LDR.W    R1,??RoadBrd_ParseString_50+0x8
   \   00000940   0xA80B             ADD      R0,SP,#+44
   \   00000942   0x.... 0x....      BL       strcpy
   1025                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000946   0xA80B             ADD      R0,SP,#+44
   \   00000948   0x.... 0x....      BL       strlen
   \   0000094C   0xA90B             ADD      R1,SP,#+44
   \   0000094E   0x.... 0x....      BL       BGM111_Transmit
   1026                              }
   1027                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_114: (+1)
   \   00000952   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000954   0x2E00             CMP      R6,#+0
   \   00000956   0xD104             BNE.N    ??RoadBrd_ParseString_115
   1028                              {
   1029                                strcpy( (char *)tempBffr2, "Cool Eye/Grid Eye Sensor: Initialization Complete.\r\n");;
   \   00000958   0xF8DF 0x1E0C      LDR.W    R1,??RoadBrd_ParseString_116
   \   0000095C   0xA80B             ADD      R0,SP,#+44
   \   0000095E   0x.... 0x....      BL       strcpy
   1030                              }
   1031                              break;
   \                     ??RoadBrd_ParseString_115: (+1)
   \   00000962   0xE14D             B.N      ??RoadBrd_ParseString_110
   1032          //------------------ B0 Command...Read Cool Eye/Grid Eye Values.....
   1033                            case '0':
   1034                              // Read Cool Eye/Grid Eye Values.....
   1035                              if ( Get_DriverStates( GRIDEYE_MNTR_TASK ))
   \                     ??RoadBrd_ParseString_111: (+1)
   \   00000964   0x2005             MOVS     R0,#+5
   \   00000966   0x.... 0x....      BL       Get_DriverStates
   \   0000096A   0x2800             CMP      R0,#+0
   \   0000096C   0xD00B             BEQ.N    ??RoadBrd_ParseString_117
   1036                              {
   1037                                Status = RoadBrd_GridEye_ReadValues( &GridMeasure );
   \   0000096E   0xA85B             ADD      R0,SP,#+364
   \   00000970   0x.... 0x....      BL       RoadBrd_GridEye_ReadValues
   \   00000974   0x0006             MOVS     R6,R0
   1038                                if (Status == HAL_OK)
   \   00000976   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000978   0x2E00             CMP      R6,#+0
   \   0000097A   0xD117             BNE.N    ??RoadBrd_ParseString_118
   1039                                  Status = RoadBrd_GridEye_ReadValues_Scaled( &GridMeasureScaled );
   \   0000097C   0xA8D7             ADD      R0,SP,#+860
   \   0000097E   0x.... 0x....      BL       RoadBrd_GridEye_ReadValues_Scaled
   \   00000982   0x0006             MOVS     R6,R0
   \   00000984   0xE012             B.N      ??RoadBrd_ParseString_118
   1040                              }
   1041                              else if ( Get_DriverStates( COOLEYE_MNTR_TASK ))
   \                     ??RoadBrd_ParseString_117: (+1)
   \   00000986   0x2006             MOVS     R0,#+6
   \   00000988   0x.... 0x....      BL       Get_DriverStates
   \   0000098C   0x2800             CMP      R0,#+0
   \   0000098E   0xD00B             BEQ.N    ??RoadBrd_ParseString_119
   1042                              {
   1043                                Status = RoadBrd_CoolEye_ReadValues( &GridMeasure );
   \   00000990   0xA85B             ADD      R0,SP,#+364
   \   00000992   0x.... 0x....      BL       RoadBrd_CoolEye_ReadValues
   \   00000996   0x0006             MOVS     R6,R0
   1044                                if (Status == HAL_OK)
   \   00000998   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000099A   0x2E00             CMP      R6,#+0
   \   0000099C   0xD106             BNE.N    ??RoadBrd_ParseString_118
   1045                                  Status = RoadBrd_CoolEye_ReadValues_Scaled( &GridMeasureScaled );
   \   0000099E   0xA8D7             ADD      R0,SP,#+860
   \   000009A0   0x.... 0x....      BL       RoadBrd_CoolEye_ReadValues_Scaled
   \   000009A4   0x0006             MOVS     R6,R0
   \   000009A6   0xE001             B.N      ??RoadBrd_ParseString_118
   1046                              }
   1047                              else
   1048                                Status = HAL_ERROR;
   \                     ??RoadBrd_ParseString_119: (+1)
   \   000009A8   0x2001             MOVS     R0,#+1
   \   000009AA   0x0006             MOVS     R6,R0
   1049          
   1050                              // Is this a BLE Operation?
   1051                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_118: (+1)
   \   000009AC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000009AE   0x2D00             CMP      R5,#+0
   \   000009B0   0xD00A             BEQ.N    ??RoadBrd_ParseString_120
   1052                              {
   1053                                // Yes...Build and Send BLE Response NOW.
   1054                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000009B2   0xF8DF 0x1808      LDR.W    R1,??RoadBrd_ParseString_50+0x8
   \   000009B6   0xA80B             ADD      R0,SP,#+44
   \   000009B8   0x.... 0x....      BL       strcpy
   1055                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000009BC   0xA80B             ADD      R0,SP,#+44
   \   000009BE   0x.... 0x....      BL       strlen
   \   000009C2   0xA90B             ADD      R1,SP,#+44
   \   000009C4   0x.... 0x....      BL       BGM111_Transmit
   1056                              }
   1057          
   1058                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_120: (+1)
   \   000009C8   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000009CA   0x2E00             CMP      R6,#+0
   \   000009CC   0xF040 0x80FE      BNE.W    ??RoadBrd_ParseString_121
   1059                              {
   1060                                // Send string to UART..
   1061                                strcpy( (char *)tempBffr2, "Voltage Monitor/Shunt Voltage...\r\n");
   \   000009D0   0xF8DF 0x1B28      LDR.W    R1,??RoadBrd_ParseString_88+0x4
   \   000009D4   0xA80B             ADD      R0,SP,#+44
   \   000009D6   0x.... 0x....      BL       strcpy
   1062          #ifdef NUCLEO
   1063                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1064          #else
   1065                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000009DA   0xA90B             ADD      R1,SP,#+44
   \   000009DC   0x2000             MOVS     R0,#+0
   \   000009DE   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000009E2   0x0006             MOVS     R6,R0
   1066          #endif
   1067                                if (Status != HAL_OK)
   \   000009E4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000009E6   0x2E00             CMP      R6,#+0
   \   000009E8   0xD003             BEQ.N    ??RoadBrd_ParseString_122
   1068                                  return Status;
   \   000009EA   0x0030             MOVS     R0,R6
   \   000009EC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000009EE   0xF004 0xB97C      B.W      ??RoadBrd_ParseString_4
   1069                                // NOW, Build Data String..
   1070                                for (x=0; x<9; x++)
   \                     ??RoadBrd_ParseString_122: (+1)
   \   000009F2   0x2000             MOVS     R0,#+0
   \   000009F4   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_123: (+1)
   \   000009F6   0x2F09             CMP      R7,#+9
   \   000009F8   0xF280 0x80D5      BGE.W    ??RoadBrd_ParseString_124
   1071                                {
   1072                                  // Build String
   1073                                  switch(x)
   \   000009FC   0x2F00             CMP      R7,#+0
   \   000009FE   0xD00F             BEQ.N    ??RoadBrd_ParseString_125
   \   00000A00   0x2F02             CMP      R7,#+2
   \   00000A02   0xD035             BEQ.N    ??RoadBrd_ParseString_126
   \   00000A04   0xD320             BCC.N    ??RoadBrd_ParseString_127
   \   00000A06   0x2F04             CMP      R7,#+4
   \   00000A08   0xD05A             BEQ.N    ??RoadBrd_ParseString_128
   \   00000A0A   0xD345             BCC.N    ??RoadBrd_ParseString_129
   \   00000A0C   0x2F06             CMP      R7,#+6
   \   00000A0E   0xF000 0x807F      BEQ.W    ??RoadBrd_ParseString_130
   \   00000A12   0xD369             BCC.N    ??RoadBrd_ParseString_131
   \   00000A14   0x2F08             CMP      R7,#+8
   \   00000A16   0xF000 0x80A4      BEQ.W    ??RoadBrd_ParseString_132
   \   00000A1A   0xF0C0 0x808D      BCC.W    ??RoadBrd_ParseString_133
   \   00000A1E   0xE0B4             B.N      ??RoadBrd_ParseString_134
   1074                                  {
   1075                                  case 0: //Thermistor Values
   1076                                    sprintf( (char *)tempBffr2, "     Thermistor DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.Thermistor.Raw,
   1077                                            GridMeasure.Thermistor.TempC,GridMeasureScaled.Thermistor.TempC,
   1078                                            GridMeasure.Thermistor.TempF,GridMeasureScaled.Thermistor.TempF,
   1079                                            GridMeasure.Thermistor.RawC );
   \                     ??RoadBrd_ParseString_125: (+1)
   \   00000A20   0xF8BD 0x0182      LDRH     R0,[SP, #+386]
   \   00000A24   0x9003             STR      R0,[SP, #+12]
   \   00000A26   0xA8D8             ADD      R0,SP,#+864
   \   00000A28   0x1CC0             ADDS     R0,R0,#+3
   \   00000A2A   0x9002             STR      R0,[SP, #+8]
   \   00000A2C   0xA85C             ADD      R0,SP,#+368
   \   00000A2E   0x1CC0             ADDS     R0,R0,#+3
   \   00000A30   0x9001             STR      R0,[SP, #+4]
   \   00000A32   0xA8D7             ADD      R0,SP,#+860
   \   00000A34   0x9000             STR      R0,[SP, #+0]
   \   00000A36   0xAB5B             ADD      R3,SP,#+364
   \   00000A38   0xF50D 0x72BD      ADD      R2,SP,#+378
   \   00000A3C   0xF8DF 0x1B24      LDR.W    R1,??RoadBrd_ParseString_103
   \   00000A40   0xA80B             ADD      R0,SP,#+44
   \   00000A42   0x.... 0x....      BL       sprintf
   1080                                    //                        sprintf( (char *)tempBffr2, "     Thermistor DATA: %s   %s   %s   %d\r\n", GridMeasure.Thermistor.Raw,
   1081                                    //                                                                                               GridMeasure.Thermistor.TempC,
   1082                                    //                                                                                               GridMeasure.Thermistor.TempF,
   1083                                    //                                                                                               GridMeasure.Thermistor.RawC );
   1084                                    break;
   \   00000A46   0xE0A0             B.N      ??RoadBrd_ParseString_134
   1085                                  case 1: //GridEye1 Values
   1086                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye1.Raw,
   1087                                            GridMeasure.GridEye1.TempC,GridMeasureScaled.GridEye1.TempC,
   1088                                            GridMeasure.GridEye1.TempF,GridMeasureScaled.GridEye1.TempF,
   1089                                            GridMeasure.GridEye1.RawC );
   \                     ??RoadBrd_ParseString_127: (+1)
   \   00000A48   0xF8BD 0x019A      LDRH     R0,[SP, #+410]
   \   00000A4C   0x9003             STR      R0,[SP, #+12]
   \   00000A4E   0xA8DE             ADD      R0,SP,#+888
   \   00000A50   0x1CC0             ADDS     R0,R0,#+3
   \   00000A52   0x9002             STR      R0,[SP, #+8]
   \   00000A54   0xA862             ADD      R0,SP,#+392
   \   00000A56   0x1CC0             ADDS     R0,R0,#+3
   \   00000A58   0x9001             STR      R0,[SP, #+4]
   \   00000A5A   0xA8DD             ADD      R0,SP,#+884
   \   00000A5C   0x9000             STR      R0,[SP, #+0]
   \   00000A5E   0xAB61             ADD      R3,SP,#+388
   \   00000A60   0xF50D 0x72C9      ADD      R2,SP,#+402
   \   00000A64   0xF8DF 0x1B00      LDR.W    R1,??RoadBrd_ParseString_103+0x4
   \   00000A68   0xA80B             ADD      R0,SP,#+44
   \   00000A6A   0x.... 0x....      BL       sprintf
   1090                                    //                        sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye1.Raw,
   1091                                    //                                                                                               GridMeasure.GridEye1.TempC,
   1092                                    //                                                                                               GridMeasure.GridEye1.TempF,
   1093                                    //                                                                                               GridMeasure.GridEye1.RawC );
   1094                                    break;
   \   00000A6E   0xE08C             B.N      ??RoadBrd_ParseString_134
   1095                                  case 2: //GridEye2 Values
   1096                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye2.Raw,
   1097                                            GridMeasure.GridEye2.TempC,GridMeasureScaled.GridEye2.TempC,
   1098                                            GridMeasure.GridEye2.TempF,GridMeasureScaled.GridEye2.TempF,
   1099                                            GridMeasure.GridEye2.RawC );
   \                     ??RoadBrd_ParseString_126: (+1)
   \   00000A70   0xF8BD 0x01B2      LDRH     R0,[SP, #+434]
   \   00000A74   0x9003             STR      R0,[SP, #+12]
   \   00000A76   0xA8E4             ADD      R0,SP,#+912
   \   00000A78   0x1CC0             ADDS     R0,R0,#+3
   \   00000A7A   0x9002             STR      R0,[SP, #+8]
   \   00000A7C   0xA868             ADD      R0,SP,#+416
   \   00000A7E   0x1CC0             ADDS     R0,R0,#+3
   \   00000A80   0x9001             STR      R0,[SP, #+4]
   \   00000A82   0xA8E3             ADD      R0,SP,#+908
   \   00000A84   0x9000             STR      R0,[SP, #+0]
   \   00000A86   0xAB67             ADD      R3,SP,#+412
   \   00000A88   0xF50D 0x72D5      ADD      R2,SP,#+426
   \   00000A8C   0xF8DF 0x1AD8      LDR.W    R1,??RoadBrd_ParseString_103+0x4
   \   00000A90   0xA80B             ADD      R0,SP,#+44
   \   00000A92   0x.... 0x....      BL       sprintf
   1100                                    //                        sprintf( (char *)tempBffr2, "     Grid 34 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye2.Raw,
   1101                                    //                                                                                               GridMeasure.GridEye2.TempC,
   1102                                    //                                                                                               GridMeasure.GridEye2.TempF,
   1103                                    //                                                                                               GridMeasure.GridEye2.RawC );
   1104                                    break;
   \   00000A96   0xE078             B.N      ??RoadBrd_ParseString_134
   1105                                  case 3: //GridEye3 Values
   1106                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye3.Raw,
   1107                                            GridMeasure.GridEye3.TempC,GridMeasureScaled.GridEye3.TempC,
   1108                                            GridMeasure.GridEye3.TempF,GridMeasureScaled.GridEye3.TempF,
   1109                                            GridMeasure.GridEye3.RawC );
   \                     ??RoadBrd_ParseString_129: (+1)
   \   00000A98   0xF8BD 0x01CA      LDRH     R0,[SP, #+458]
   \   00000A9C   0x9003             STR      R0,[SP, #+12]
   \   00000A9E   0xA8EA             ADD      R0,SP,#+936
   \   00000AA0   0x1CC0             ADDS     R0,R0,#+3
   \   00000AA2   0x9002             STR      R0,[SP, #+8]
   \   00000AA4   0xA86E             ADD      R0,SP,#+440
   \   00000AA6   0x1CC0             ADDS     R0,R0,#+3
   \   00000AA8   0x9001             STR      R0,[SP, #+4]
   \   00000AAA   0xA8E9             ADD      R0,SP,#+932
   \   00000AAC   0x9000             STR      R0,[SP, #+0]
   \   00000AAE   0xAB6D             ADD      R3,SP,#+436
   \   00000AB0   0xF50D 0x72E1      ADD      R2,SP,#+450
   \   00000AB4   0xF8DF 0x1AB0      LDR.W    R1,??RoadBrd_ParseString_103+0x4
   \   00000AB8   0xA80B             ADD      R0,SP,#+44
   \   00000ABA   0x.... 0x....      BL       sprintf
   1110                                    //                        sprintf( (char *)tempBffr2, "     Grid 35 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye3.Raw,
   1111                                    //                                                                                               GridMeasure.GridEye3.TempC,
   1112                                    //                                                                                               GridMeasure.GridEye3.TempF,
   1113                                    //                                                                                               GridMeasure.GridEye3.RawC );
   1114                                    break;
   \   00000ABE   0xE064             B.N      ??RoadBrd_ParseString_134
   1115                                  case 4: //GridEye4 Values
   1116                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye4.Raw,
   1117                                            GridMeasure.GridEye4.TempC,GridMeasureScaled.GridEye4.TempC,
   1118                                            GridMeasure.GridEye4.TempF,GridMeasureScaled.GridEye4.TempF,
   1119                                            GridMeasure.GridEye4.RawC );
   \                     ??RoadBrd_ParseString_128: (+1)
   \   00000AC0   0xF8BD 0x01E2      LDRH     R0,[SP, #+482]
   \   00000AC4   0x9003             STR      R0,[SP, #+12]
   \   00000AC6   0xA8F0             ADD      R0,SP,#+960
   \   00000AC8   0x1CC0             ADDS     R0,R0,#+3
   \   00000ACA   0x9002             STR      R0,[SP, #+8]
   \   00000ACC   0xA874             ADD      R0,SP,#+464
   \   00000ACE   0x1CC0             ADDS     R0,R0,#+3
   \   00000AD0   0x9001             STR      R0,[SP, #+4]
   \   00000AD2   0xA8EF             ADD      R0,SP,#+956
   \   00000AD4   0x9000             STR      R0,[SP, #+0]
   \   00000AD6   0xAB73             ADD      R3,SP,#+460
   \   00000AD8   0xF50D 0x72ED      ADD      R2,SP,#+474
   \   00000ADC   0xF8DF 0x1A88      LDR.W    R1,??RoadBrd_ParseString_103+0x4
   \   00000AE0   0xA80B             ADD      R0,SP,#+44
   \   00000AE2   0x.... 0x....      BL       sprintf
   1120                                    //                        sprintf( (char *)tempBffr2, "     Grid 36 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye4.Raw,
   1121                                    //                                                                                               GridMeasure.GridEye4.TempC,
   1122                                    //                                                                                               GridMeasure.GridEye4.TempF,
   1123                                    //                                                                                               GridMeasure.GridEye4.RawC );
   1124                                    break;
   \   00000AE6   0xE050             B.N      ??RoadBrd_ParseString_134
   1125                                  case 5: //GridEye5 Values
   1126                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye5.Raw,
   1127                                            GridMeasure.GridEye5.TempC,GridMeasureScaled.GridEye5.TempC,
   1128                                            GridMeasure.GridEye5.TempF,GridMeasureScaled.GridEye5.TempF,
   1129                                            GridMeasure.GridEye5.RawC );
   \                     ??RoadBrd_ParseString_131: (+1)
   \   00000AE8   0xF8BD 0x01FA      LDRH     R0,[SP, #+506]
   \   00000AEC   0x9003             STR      R0,[SP, #+12]
   \   00000AEE   0xA8F6             ADD      R0,SP,#+984
   \   00000AF0   0x1CC0             ADDS     R0,R0,#+3
   \   00000AF2   0x9002             STR      R0,[SP, #+8]
   \   00000AF4   0xA87A             ADD      R0,SP,#+488
   \   00000AF6   0x1CC0             ADDS     R0,R0,#+3
   \   00000AF8   0x9001             STR      R0,[SP, #+4]
   \   00000AFA   0xA8F5             ADD      R0,SP,#+980
   \   00000AFC   0x9000             STR      R0,[SP, #+0]
   \   00000AFE   0xAB79             ADD      R3,SP,#+484
   \   00000B00   0xF50D 0x72F9      ADD      R2,SP,#+498
   \   00000B04   0xF8DF 0x1A60      LDR.W    R1,??RoadBrd_ParseString_103+0x4
   \   00000B08   0xA80B             ADD      R0,SP,#+44
   \   00000B0A   0x.... 0x....      BL       sprintf
   1130                                    //                        sprintf( (char *)tempBffr2, "     Grid 37 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye5.Raw,
   1131                                    //                                                                                               GridMeasure.GridEye5.TempC,
   1132                                    //                                                                                               GridMeasure.GridEye5.TempF,
   1133                                    //                                                                                               GridMeasure.GridEye5.RawC );
   1134                                    break;
   \   00000B0E   0xE03C             B.N      ??RoadBrd_ParseString_134
   1135                                  case 6: //GridEye6 Values
   1136                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye6.Raw,
   1137                                            GridMeasure.GridEye6.TempC,GridMeasureScaled.GridEye6.TempC,
   1138                                            GridMeasure.GridEye6.TempF,GridMeasureScaled.GridEye6.TempF,
   1139                                            GridMeasure.GridEye6.RawC );
   \                     ??RoadBrd_ParseString_130: (+1)
   \   00000B10   0xF8BD 0x0212      LDRH     R0,[SP, #+530]
   \   00000B14   0x9003             STR      R0,[SP, #+12]
   \   00000B16   0xA8FC             ADD      R0,SP,#+1008
   \   00000B18   0x1CC0             ADDS     R0,R0,#+3
   \   00000B1A   0x9002             STR      R0,[SP, #+8]
   \   00000B1C   0xA880             ADD      R0,SP,#+512
   \   00000B1E   0x1CC0             ADDS     R0,R0,#+3
   \   00000B20   0x9001             STR      R0,[SP, #+4]
   \   00000B22   0xA8FB             ADD      R0,SP,#+1004
   \   00000B24   0x9000             STR      R0,[SP, #+0]
   \   00000B26   0xAB7F             ADD      R3,SP,#+508
   \   00000B28   0xAA82             ADD      R2,SP,#+520
   \   00000B2A   0x1C92             ADDS     R2,R2,#+2
   \   00000B2C   0xF8DF 0x1A38      LDR.W    R1,??RoadBrd_ParseString_103+0x4
   \   00000B30   0xA80B             ADD      R0,SP,#+44
   \   00000B32   0x.... 0x....      BL       sprintf
   1140                                    //                        sprintf( (char *)tempBffr2, "     Grid 38 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye6.Raw,
   1141                                    //                                                                                               GridMeasure.GridEye6.TempC,
   1142                                    //                                                                                               GridMeasure.GridEye6.TempF,
   1143                                    //                                                                                               GridMeasure.GridEye6.RawC );
   1144                                    break;
   \   00000B36   0xE028             B.N      ??RoadBrd_ParseString_134
   1145                                  case 7: //GridEye7 Values
   1146                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye7.Raw,
   1147                                            GridMeasure.GridEye7.TempC,GridMeasureScaled.GridEye7.TempC,
   1148                                            GridMeasure.GridEye7.TempF,GridMeasureScaled.GridEye7.TempF,
   1149                                            GridMeasure.GridEye7.RawC );
   \                     ??RoadBrd_ParseString_133: (+1)
   \   00000B38   0xF8BD 0x022A      LDRH     R0,[SP, #+554]
   \   00000B3C   0x9003             STR      R0,[SP, #+12]
   \   00000B3E   0xA8FF             ADD      R0,SP,#+1020
   \   00000B40   0x300F             ADDS     R0,R0,#+15
   \   00000B42   0x9002             STR      R0,[SP, #+8]
   \   00000B44   0xA886             ADD      R0,SP,#+536
   \   00000B46   0x1CC0             ADDS     R0,R0,#+3
   \   00000B48   0x9001             STR      R0,[SP, #+4]
   \   00000B4A   0xA8FF             ADD      R0,SP,#+1020
   \   00000B4C   0x3008             ADDS     R0,R0,#+8
   \   00000B4E   0x9000             STR      R0,[SP, #+0]
   \   00000B50   0xAB85             ADD      R3,SP,#+532
   \   00000B52   0xAA88             ADD      R2,SP,#+544
   \   00000B54   0x1C92             ADDS     R2,R2,#+2
   \   00000B56   0xF8DF 0x1A10      LDR.W    R1,??RoadBrd_ParseString_103+0x4
   \   00000B5A   0xA80B             ADD      R0,SP,#+44
   \   00000B5C   0x.... 0x....      BL       sprintf
   1150                                    //                        sprintf( (char *)tempBffr2, "     Grid 39 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye7.Raw,
   1151                                    //                                                                                               GridMeasure.GridEye7.TempC,
   1152                                    //                                                                                               GridMeasure.GridEye7.TempF,
   1153                                    //                                                                                               GridMeasure.GridEye7.RawC );
   1154                                    break;
   \   00000B60   0xE013             B.N      ??RoadBrd_ParseString_134
   1155                                  case 8: //GridEye8 Values
   1156                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye8.Raw,
   1157                                            GridMeasure.GridEye8.TempC,GridMeasureScaled.GridEye8.TempC,
   1158                                            GridMeasure.GridEye8.TempF,GridMeasureScaled.GridEye8.TempF,
   1159                                            GridMeasure.GridEye8.RawC );
   \                     ??RoadBrd_ParseString_132: (+1)
   \   00000B62   0xF8BD 0x0242      LDRH     R0,[SP, #+578]
   \   00000B66   0x9003             STR      R0,[SP, #+12]
   \   00000B68   0xA8FF             ADD      R0,SP,#+1020
   \   00000B6A   0x3027             ADDS     R0,R0,#+39
   \   00000B6C   0x9002             STR      R0,[SP, #+8]
   \   00000B6E   0xA88C             ADD      R0,SP,#+560
   \   00000B70   0x1CC0             ADDS     R0,R0,#+3
   \   00000B72   0x9001             STR      R0,[SP, #+4]
   \   00000B74   0xA8FF             ADD      R0,SP,#+1020
   \   00000B76   0x3020             ADDS     R0,R0,#+32
   \   00000B78   0x9000             STR      R0,[SP, #+0]
   \   00000B7A   0xAB8B             ADD      R3,SP,#+556
   \   00000B7C   0xAA8E             ADD      R2,SP,#+568
   \   00000B7E   0x1C92             ADDS     R2,R2,#+2
   \   00000B80   0xF8DF 0x19E4      LDR.W    R1,??RoadBrd_ParseString_103+0x4
   \   00000B84   0xA80B             ADD      R0,SP,#+44
   \   00000B86   0x.... 0x....      BL       sprintf
   1160                                    //                        sprintf( (char *)tempBffr2, "     Grid 40 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye8.Raw,
   1161                                    //                                                                                               GridMeasure.GridEye8.TempC,
   1162                                    //                                                                                               GridMeasure.GridEye8.TempF,
   1163                                    //                                                                                               GridMeasure.GridEye8.RawC );
   1164                                    break;
   1165                                  } // EndSwitch(x)
   1166                                  // Now Print String.
   1167           #ifdef NUCLEO
   1168                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1169          #else
   1170                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \                     ??RoadBrd_ParseString_134: (+1)
   \   00000B8A   0xA90B             ADD      R1,SP,#+44
   \   00000B8C   0x2000             MOVS     R0,#+0
   \   00000B8E   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000B92   0x0006             MOVS     R6,R0
   1171          #endif
   1172                                  if (Status != HAL_OK)
   \   00000B94   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000B96   0x2E00             CMP      R6,#+0
   \   00000B98   0xD003             BEQ.N    ??RoadBrd_ParseString_135
   1173                                    return Status;
   \   00000B9A   0x0030             MOVS     R0,R6
   \   00000B9C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000B9E   0xF004 0xB8A4      B.W      ??RoadBrd_ParseString_4
   1174                               } // EndFor(x=0; x<9; x++)
   \                     ??RoadBrd_ParseString_135: (+1)
   \   00000BA2   0x1C7F             ADDS     R7,R7,#+1
   \   00000BA4   0xE727             B.N      ??RoadBrd_ParseString_123
   1175                                sprintf( (char *)tempBffr2, "     SHNT VLTG DATA: " );
   \                     ??RoadBrd_ParseString_124: (+1)
   \   00000BA6   0xF8DF 0x1B2C      LDR.W    R1,??RoadBrd_ParseString_106
   \   00000BAA   0xA80B             ADD      R0,SP,#+44
   \   00000BAC   0x.... 0x....      BL       sprintf
   1176                                strcat( (char *)tempBffr2, (char *)VMeasure.Raw );
   \   00000BB0   0xA944             ADD      R1,SP,#+272
   \   00000BB2   0xA80B             ADD      R0,SP,#+44
   \   00000BB4   0x.... 0x....      BL       strcat
   1177                                strcat( (char *)tempBffr2, "\r\n" );
   \   00000BB8   0xA1D2             ADR.N    R1,??RoadBrd_ParseString_25+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000BBA   0xA80B             ADD      R0,SP,#+44
   \   00000BBC   0x.... 0x....      BL       strcat
   1178                              } //Endif(Status == HAL_OK)
   1179                              else
   1180                                break;
   1181                              sprintf( (char *)tempBffr2, "     COMPLETE.\r\n" );
   \   00000BC0   0xF8DF 0x1B5C      LDR.W    R1,??RoadBrd_ParseString_109
   \   00000BC4   0xA80B             ADD      R0,SP,#+44
   \   00000BC6   0x.... 0x....      BL       sprintf
   1182                              break;
   \   00000BCA   0xE019             B.N      ??RoadBrd_ParseString_110
   \                     ??RoadBrd_ParseString_121: (+1)
   \   00000BCC   0xE018             B.N      ??RoadBrd_ParseString_110
   1183          //------------------ B1 Command...Reset Cool Eye/Grid Eye Sensor..... 
   1184                            case '1':
   1185                              // Reset Cool Eye/Grid Eye Sensor.
   1186                              Status = RoadBrd_GridEyeReset();
   \                     ??RoadBrd_ParseString_112: (+1)
   \   00000BCE   0x.... 0x....      BL       RoadBrd_GridEyeReset
   \   00000BD2   0x0006             MOVS     R6,R0
   1187                              // Is this a BLE Operation?
   1188                              if ( BLE_Flag )
   \   00000BD4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000BD6   0x2D00             CMP      R5,#+0
   \   00000BD8   0xD00A             BEQ.N    ??RoadBrd_ParseString_136
   1189                              {
   1190                                // Yes...Build and Send BLE Response NOW.
   1191                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00000BDA   0xF8DF 0x15E0      LDR.W    R1,??RoadBrd_ParseString_50+0x8
   \   00000BDE   0xA80B             ADD      R0,SP,#+44
   \   00000BE0   0x.... 0x....      BL       strcpy
   1192                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000BE4   0xA80B             ADD      R0,SP,#+44
   \   00000BE6   0x.... 0x....      BL       strlen
   \   00000BEA   0xA90B             ADD      R1,SP,#+44
   \   00000BEC   0x.... 0x....      BL       BGM111_Transmit
   1193                              }
   1194          
   1195                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_136: (+1)
   \   00000BF0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000BF2   0x2E00             CMP      R6,#+0
   \   00000BF4   0xD104             BNE.N    ??RoadBrd_ParseString_137
   1196                              {
   1197                                strcpy( (char *)tempBffr2, "Cool Eye/Grid Eye Sensor: Reset Complete.\r\n");;
   \   00000BF6   0xF8DF 0x1DB8      LDR.W    R1,??RoadBrd_ParseString_138
   \   00000BFA   0xA80B             ADD      R0,SP,#+44
   \   00000BFC   0x.... 0x....      BL       strcpy
   1198                              }
   1199                              break;
   1200                          } //EndSwitch
   1201                        } //EndElse (Size == 1)
   1202                        break;
   \                     ??RoadBrd_ParseString_137: (+1)
   \                     ??RoadBrd_ParseString_110: (+1)
   \   00000C00   0xF003 0xBFF1      B.W      ??RoadBrd_ParseString_26
   1203          //**************************************************************************************************
   1204                      case 'C':
   1205                        // Read Voltage. 
   1206          //++++++++++++++++++++++++++++++++++++++++++  Voltage Monitor Commands.
   1207                        if (Size == 1)
   \                     ??RoadBrd_ParseString_14: (+1)
   \   00000C04   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   00000C08   0x2801             CMP      R0,#+1
   \   00000C0A   0xD152             BNE.N    ??RoadBrd_ParseString_139
   1208                        {
   1209          //------------------ C Command       
   1210                          // Read Bus Voltage and return as 2 Byte Field.
   1211                          Status = RoadBrd_VMonitor_RdVoltage( &VMeasure );
   \   00000C0C   0xA842             ADD      R0,SP,#+264
   \   00000C0E   0x.... 0x....      BL       RoadBrd_VMonitor_RdVoltage
   \   00000C12   0x0006             MOVS     R6,R0
   1212                          if (Status == HAL_OK)
   \   00000C14   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000C16   0x2E00             CMP      R6,#+0
   \   00000C18   0xD103             BNE.N    ??RoadBrd_ParseString_140
   1213                            Status = RoadBrd_VMonitor_RdVoltage_Scaled( &VMeasureScaled );
   \   00000C1A   0xA84E             ADD      R0,SP,#+312
   \   00000C1C   0x.... 0x....      BL       RoadBrd_VMonitor_RdVoltage_Scaled
   \   00000C20   0x0006             MOVS     R6,R0
   1214                          if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_140: (+1)
   \   00000C22   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000C24   0x2E00             CMP      R6,#+0
   \   00000C26   0xD126             BNE.N    ??RoadBrd_ParseString_141
   1215                          {
   1216                            // Send string to UART..
   1217                            strcpy( (char *)tempBffr2, "Voltage Monitor/Read Bus Voltage...\r\n");
   \   00000C28   0xF8DF 0x1DE8      LDR.W    R1,??RoadBrd_ParseString_142
   \   00000C2C   0xA80B             ADD      R0,SP,#+44
   \   00000C2E   0x.... 0x....      BL       strcpy
   1218          #ifdef NUCLEO
   1219                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1220          #else
   1221                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000C32   0xA90B             ADD      R1,SP,#+44
   \   00000C34   0x2000             MOVS     R0,#+0
   \   00000C36   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000C3A   0x0006             MOVS     R6,R0
   1222          #endif
   1223                            if (Status != HAL_OK)
   \   00000C3C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000C3E   0x2E00             CMP      R6,#+0
   \   00000C40   0xD003             BEQ.N    ??RoadBrd_ParseString_143
   1224                            return Status;
   \   00000C42   0x0030             MOVS     R0,R6
   \   00000C44   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000C46   0xF004 0xB850      B.W      ??RoadBrd_ParseString_4
   1225                            // NOW, Build Data String..
   1226                            sprintf( (char *)tempBffr2, "     BUS VOLTAGE DATA: " );
   \                     ??RoadBrd_ParseString_143: (+1)
   \   00000C4A   0xF8DF 0x1DCC      LDR.W    R1,??RoadBrd_ParseString_142+0x4
   \   00000C4E   0xA80B             ADD      R0,SP,#+44
   \   00000C50   0x.... 0x....      BL       sprintf
   1227                            strcat( (char *)tempBffr2, (char *)VMeasure.Raw );
   \   00000C54   0xA944             ADD      R1,SP,#+272
   \   00000C56   0xA80B             ADD      R0,SP,#+44
   \   00000C58   0x.... 0x....      BL       strcat
   1228                            strcat( (char *)tempBffr2, "\r\n" );
   \   00000C5C   0xA1A9             ADR.N    R1,??RoadBrd_ParseString_25+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000C5E   0xA80B             ADD      R0,SP,#+44
   \   00000C60   0x.... 0x....      BL       strcat
   1229                          }
   1230                          else
   1231                            break;
   1232          #ifdef NUCLEO
   1233                          Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1234          #else
   1235                          Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000C64   0xA90B             ADD      R1,SP,#+44
   \   00000C66   0x2000             MOVS     R0,#+0
   \   00000C68   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000C6C   0x0006             MOVS     R6,R0
   1236          #endif
   1237                          if (Status != HAL_OK)
   \   00000C6E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000C70   0x2E00             CMP      R6,#+0
   \   00000C72   0xD102             BNE.N    ??RoadBrd_ParseString_144
   \   00000C74   0xE005             B.N      ??RoadBrd_ParseString_145
   \                     ??RoadBrd_ParseString_141: (+1)
   \   00000C76   0xF003 0xBFB6      B.W      ??RoadBrd_ParseString_26
   1238                            return Status;
   \                     ??RoadBrd_ParseString_144: (+1)
   \   00000C7A   0x0030             MOVS     R0,R6
   \   00000C7C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000C7E   0xF004 0xB834      B.W      ??RoadBrd_ParseString_4
   1239                          // Is this a BLE Operation?
   1240                          if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_145: (+1)
   \   00000C82   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000C84   0x2D00             CMP      R5,#+0
   \   00000C86   0xD00C             BEQ.N    ??RoadBrd_ParseString_146
   1241                          {
   1242                            // Yes...Build and Send BLE Response NOW.
   1243                            sprintf( (char *)tempBffr2, "<STATUS>BUS_VLTG:%s/%s</STATUS>", (char *)VMeasure.Voltage, (char *)VMeasureScaled.Voltage );
   \   00000C88   0xAB4E             ADD      R3,SP,#+312
   \   00000C8A   0xAA42             ADD      R2,SP,#+264
   \   00000C8C   0xF8DF 0x1DF4      LDR.W    R1,??RoadBrd_ParseString_147
   \   00000C90   0xA80B             ADD      R0,SP,#+44
   \   00000C92   0x.... 0x....      BL       sprintf
   1244                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000C96   0xA80B             ADD      R0,SP,#+44
   \   00000C98   0x.... 0x....      BL       strlen
   \   00000C9C   0xA90B             ADD      R1,SP,#+44
   \   00000C9E   0x.... 0x....      BL       BGM111_Transmit
   1245                          }
   1246                          // Now calculate Bus Voltage.
   1247                          sprintf( (char *)tempBffr2, "     Bus Voltage: %s/%s\r\n", (char *)VMeasure.Voltage, (char *)VMeasureScaled.Voltage );
   \                     ??RoadBrd_ParseString_146: (+1)
   \   00000CA2   0xAB4E             ADD      R3,SP,#+312
   \   00000CA4   0xAA42             ADD      R2,SP,#+264
   \   00000CA6   0xF8DF 0x1E14      LDR.W    R1,??RoadBrd_ParseString_148
   \   00000CAA   0xA80B             ADD      R0,SP,#+44
   \   00000CAC   0x.... 0x....      BL       sprintf
   \   00000CB0   0xE19D             B.N      ??RoadBrd_ParseString_149
   1248                        }
   1249                        else
   1250                        {
   1251                          switch( tempBffr[1] )
   \                     ??RoadBrd_ParseString_139: (+1)
   \   00000CB2   0x7860             LDRB     R0,[R4, #+1]
   \   00000CB4   0x2830             CMP      R0,#+48
   \   00000CB6   0xD024             BEQ.N    ??RoadBrd_ParseString_150
   \   00000CB8   0x2831             CMP      R0,#+49
   \   00000CBA   0xD074             BEQ.N    ??RoadBrd_ParseString_151
   \   00000CBC   0x2832             CMP      R0,#+50
   \   00000CBE   0xF000 0x80CA      BEQ.W    ??RoadBrd_ParseString_152
   \   00000CC2   0x2833             CMP      R0,#+51
   \   00000CC4   0xF000 0x8128      BEQ.W    ??RoadBrd_ParseString_153
   \   00000CC8   0x2849             CMP      R0,#+73
   \   00000CCA   0xF040 0x817D      BNE.W    ??RoadBrd_ParseString_154
   1252                          {
   1253          //------------------ CI Command       
   1254                            case 'I':
   1255                              // Initialize and load Calibration Register.
   1256                              // Read Calibration Value first.
   1257                              Status = RoadBrd_Init_VMonitor();
   \                     ??RoadBrd_ParseString_155: (+1)
   \   00000CCE   0x.... 0x....      BL       RoadBrd_Init_VMonitor
   \   00000CD2   0x0006             MOVS     R6,R0
   1258                              // Is this a BLE Operation?
   1259                              if ( BLE_Flag )
   \   00000CD4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000CD6   0x2D00             CMP      R5,#+0
   \   00000CD8   0xD00A             BEQ.N    ??RoadBrd_ParseString_156
   1260                              {
   1261                                // Yes...Build and Send BLE Response NOW.
   1262                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00000CDA   0xF8DF 0x14E0      LDR.W    R1,??RoadBrd_ParseString_50+0x8
   \   00000CDE   0xA80B             ADD      R0,SP,#+44
   \   00000CE0   0x.... 0x....      BL       strcpy
   1263                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000CE4   0xA80B             ADD      R0,SP,#+44
   \   00000CE6   0x.... 0x....      BL       strlen
   \   00000CEA   0xA90B             ADD      R1,SP,#+44
   \   00000CEC   0x.... 0x....      BL       BGM111_Transmit
   1264                              }
   1265                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_156: (+1)
   \   00000CF0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000CF2   0x2E00             CMP      R6,#+0
   \   00000CF4   0xD104             BNE.N    ??RoadBrd_ParseString_157
   1266                              {
   1267                                strcpy( (char *)tempBffr2, "Voltage Monitor: Initialization Complete.\r\n");;
   \   00000CF6   0xF8DF 0x1DC8      LDR.W    R1,??RoadBrd_ParseString_148+0x4
   \   00000CFA   0xA80B             ADD      R0,SP,#+44
   \   00000CFC   0x.... 0x....      BL       strcpy
   1268                              }
   1269                              break;
   \                     ??RoadBrd_ParseString_157: (+1)
   \   00000D00   0xE175             B.N      ??RoadBrd_ParseString_149
   1270          //------------------ C0 Command...Read Shunt Voltage and return results.....
   1271                            case '0':
   1272                              // Read Shunt Voltage and return results.....
   1273                              Status = RoadBrd_VMonitor_RdShntVltg( &VMeasure );
   \                     ??RoadBrd_ParseString_150: (+1)
   \   00000D02   0xA842             ADD      R0,SP,#+264
   \   00000D04   0x.... 0x....      BL       RoadBrd_VMonitor_RdShntVltg
   \   00000D08   0x0006             MOVS     R6,R0
   1274                              if (Status == HAL_OK)
   \   00000D0A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000D0C   0x2E00             CMP      R6,#+0
   \   00000D0E   0xD103             BNE.N    ??RoadBrd_ParseString_158
   1275                                Status = RoadBrd_VMonitor_RdShntVltg_Scaled( &VMeasureScaled );
   \   00000D10   0xA84E             ADD      R0,SP,#+312
   \   00000D12   0x.... 0x....      BL       RoadBrd_VMonitor_RdShntVltg_Scaled
   \   00000D16   0x0006             MOVS     R6,R0
   1276                              // Is this a BLE Operation?
   1277                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_158: (+1)
   \   00000D18   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000D1A   0x2E00             CMP      R6,#+0
   \   00000D1C   0xD126             BNE.N    ??RoadBrd_ParseString_159
   1278                              {
   1279                                // Send string to UART..
   1280                                strcpy( (char *)tempBffr2, "Voltage Monitor/Shunt Voltage...\r\n");
   \   00000D1E   0xF8DF 0x17DC      LDR.W    R1,??RoadBrd_ParseString_88+0x4
   \   00000D22   0xA80B             ADD      R0,SP,#+44
   \   00000D24   0x.... 0x....      BL       strcpy
   1281          #ifdef NUCLEO
   1282                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1283          #else
   1284                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000D28   0xA90B             ADD      R1,SP,#+44
   \   00000D2A   0x2000             MOVS     R0,#+0
   \   00000D2C   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000D30   0x0006             MOVS     R6,R0
   1285          #endif
   1286                                if (Status != HAL_OK)
   \   00000D32   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000D34   0x2E00             CMP      R6,#+0
   \   00000D36   0xD003             BEQ.N    ??RoadBrd_ParseString_160
   1287                                  return Status;
   \   00000D38   0x0030             MOVS     R0,R6
   \   00000D3A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000D3C   0xF003 0xBFD5      B.W      ??RoadBrd_ParseString_4
   1288                                // NOW, Build Data String..
   1289                                sprintf( (char *)tempBffr2, "     SHNT VLTG DATA: " );
   \                     ??RoadBrd_ParseString_160: (+1)
   \   00000D40   0xF8DF 0x1990      LDR.W    R1,??RoadBrd_ParseString_106
   \   00000D44   0xA80B             ADD      R0,SP,#+44
   \   00000D46   0x.... 0x....      BL       sprintf
   1290                                strcat( (char *)tempBffr2, (char *)VMeasure.Raw );
   \   00000D4A   0xA944             ADD      R1,SP,#+272
   \   00000D4C   0xA80B             ADD      R0,SP,#+44
   \   00000D4E   0x.... 0x....      BL       strcat
   1291                                strcat( (char *)tempBffr2, "\r\n" );
   \   00000D52   0xA16C             ADR.N    R1,??RoadBrd_ParseString_25+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000D54   0xA80B             ADD      R0,SP,#+44
   \   00000D56   0x.... 0x....      BL       strcat
   1292                              }
   1293                              else
   1294                                break;
   1295          #ifdef NUCLEO
   1296                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1297          #else
   1298                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000D5A   0xA90B             ADD      R1,SP,#+44
   \   00000D5C   0x2000             MOVS     R0,#+0
   \   00000D5E   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000D62   0x0006             MOVS     R6,R0
   1299          #endif
   1300                              if (Status != HAL_OK)
   \   00000D64   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000D66   0x2E00             CMP      R6,#+0
   \   00000D68   0xD101             BNE.N    ??RoadBrd_ParseString_161
   \   00000D6A   0xE004             B.N      ??RoadBrd_ParseString_162
   \                     ??RoadBrd_ParseString_159: (+1)
   \   00000D6C   0xE13F             B.N      ??RoadBrd_ParseString_149
   1301                                return Status;
   \                     ??RoadBrd_ParseString_161: (+1)
   \   00000D6E   0x0030             MOVS     R0,R6
   \   00000D70   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000D72   0xF003 0xBFBA      B.W      ??RoadBrd_ParseString_4
   1302                              // Now calculate Shunt Voltage.
   1303                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_162: (+1)
   \   00000D76   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000D78   0x2D00             CMP      R5,#+0
   \   00000D7A   0xD00C             BEQ.N    ??RoadBrd_ParseString_163
   1304                              {
   1305                                // Yes...Build and Send BLE Response NOW.
   1306                                sprintf( (char *)tempBffr2, "<STATUS>SHNT_VLTG:%s/%s</STATUS>", (char *)VMeasure.Voltage, (char *)VMeasureScaled.Voltage );
   \   00000D7C   0xAB4E             ADD      R3,SP,#+312
   \   00000D7E   0xAA42             ADD      R2,SP,#+264
   \   00000D80   0xF8DF 0x1E00      LDR.W    R1,??RoadBrd_ParseString_164
   \   00000D84   0xA80B             ADD      R0,SP,#+44
   \   00000D86   0x.... 0x....      BL       sprintf
   1307                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000D8A   0xA80B             ADD      R0,SP,#+44
   \   00000D8C   0x.... 0x....      BL       strlen
   \   00000D90   0xA90B             ADD      R1,SP,#+44
   \   00000D92   0x.... 0x....      BL       BGM111_Transmit
   1308                              }
   1309                              sprintf( (char *)tempBffr2, "     Shunt Voltage: %s/%s\r\n", (char *)VMeasure.Voltage, (char *)VMeasureScaled.Voltage );
   \                     ??RoadBrd_ParseString_163: (+1)
   \   00000D96   0xAB4E             ADD      R3,SP,#+312
   \   00000D98   0xAA42             ADD      R2,SP,#+264
   \   00000D9A   0xF8DF 0x1DEC      LDR.W    R1,??RoadBrd_ParseString_164+0x4
   \   00000D9E   0xA80B             ADD      R0,SP,#+44
   \   00000DA0   0x.... 0x....      BL       sprintf
   1310                              break;
   \   00000DA4   0xE123             B.N      ??RoadBrd_ParseString_149
   1311          //------------------ C1 Command...Read Current and return results..... 
   1312                            case '1':
   1313                              // Read Current and return results.....
   1314                              Status = RoadBrd_VMonitor_RdCurrent( &CMeasure );
   \                     ??RoadBrd_ParseString_151: (+1)
   \   00000DA6   0xA8D1             ADD      R0,SP,#+836
   \   00000DA8   0x.... 0x....      BL       RoadBrd_VMonitor_RdCurrent
   \   00000DAC   0x0006             MOVS     R6,R0
   1315                              if (Status == HAL_OK)
   \   00000DAE   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000DB0   0x2E00             CMP      R6,#+0
   \   00000DB2   0xD103             BNE.N    ??RoadBrd_ParseString_165
   1316                                Status = RoadBrd_VMonitor_RdCurrent_Scaled( &CMeasureScaled );
   \   00000DB4   0xA8CD             ADD      R0,SP,#+820
   \   00000DB6   0x.... 0x....      BL       RoadBrd_VMonitor_RdCurrent_Scaled
   \   00000DBA   0x0006             MOVS     R6,R0
   1317                              // Is this a BLE Operation?
   1318                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_165: (+1)
   \   00000DBC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000DBE   0x2E00             CMP      R6,#+0
   \   00000DC0   0xD12C             BNE.N    ??RoadBrd_ParseString_166
   1319                              {
   1320                                // Send string to UART..
   1321                                strcpy( (char *)tempBffr2, "Voltage Monitor/Read Current...\r\n");
   \   00000DC2   0xF8DF 0x1DC8      LDR.W    R1,??RoadBrd_ParseString_164+0x8
   \   00000DC6   0xA80B             ADD      R0,SP,#+44
   \   00000DC8   0x.... 0x....      BL       strcpy
   1322          #ifdef NUCLEO
   1323                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1324          #else
   1325                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000DCC   0xA90B             ADD      R1,SP,#+44
   \   00000DCE   0x2000             MOVS     R0,#+0
   \   00000DD0   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000DD4   0x0006             MOVS     R6,R0
   1326          #endif
   1327                                if (Status != HAL_OK)
   \   00000DD6   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000DD8   0x2E00             CMP      R6,#+0
   \   00000DDA   0xD003             BEQ.N    ??RoadBrd_ParseString_167
   1328                                  return Status;
   \   00000DDC   0x0030             MOVS     R0,R6
   \   00000DDE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000DE0   0xF003 0xBF83      B.W      ??RoadBrd_ParseString_4
   1329                                // NOW, Build Data String..
   1330                                sprintf( (char *)tempBffr2, "     CURRENT DATA: " );
   \                     ??RoadBrd_ParseString_167: (+1)
   \   00000DE4   0xF8DF 0x1DA8      LDR.W    R1,??RoadBrd_ParseString_164+0xC
   \   00000DE8   0xA80B             ADD      R0,SP,#+44
   \   00000DEA   0x.... 0x....      BL       sprintf
   1331                                strcat( (char *)tempBffr2, (char *)CMeasure.Raw );
   \   00000DEE   0xA9D3             ADD      R1,SP,#+844
   \   00000DF0   0x1C49             ADDS     R1,R1,#+1
   \   00000DF2   0xA80B             ADD      R0,SP,#+44
   \   00000DF4   0x.... 0x....      BL       strcat
   1332                                strcat( (char *)tempBffr2, "\r\n" );
   \   00000DF8   0xA142             ADR.N    R1,??RoadBrd_ParseString_25+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000DFA   0xA80B             ADD      R0,SP,#+44
   \   00000DFC   0x.... 0x....      BL       strcat
   1333                              }
   1334                              else
   1335                                break;
   1336          #ifdef NUCLEO
   1337                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1338          #else
   1339                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000E00   0xA90B             ADD      R1,SP,#+44
   \   00000E02   0x2000             MOVS     R0,#+0
   \   00000E04   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000E08   0x0006             MOVS     R6,R0
   1340          #endif
   1341                              if (Status != HAL_OK)
   \   00000E0A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000E0C   0x2E00             CMP      R6,#+0
   \   00000E0E   0xD106             BNE.N    ??RoadBrd_ParseString_168
   \   00000E10   0xE009             B.N      ??RoadBrd_ParseString_169
   \   00000E12   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_0:
   \   00000E14   0x........         DC32     Bypass
   \   00000E18   0x........         DC32     ?_1
   \                     ??RoadBrd_ParseString_166: (+1)
   \   00000E1C   0xE0E7             B.N      ??RoadBrd_ParseString_149
   1342                                return Status;
   \                     ??RoadBrd_ParseString_168: (+1)
   \   00000E1E   0x0030             MOVS     R0,R6
   \   00000E20   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000E22   0xF003 0xBF62      B.W      ??RoadBrd_ParseString_4
   1343                              // Now calculate Current.
   1344                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_169: (+1)
   \   00000E26   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000E28   0x2D00             CMP      R5,#+0
   \   00000E2A   0xD00C             BEQ.N    ??RoadBrd_ParseString_170
   1345                              {
   1346                                // Yes...Build and Send BLE Response NOW.
   1347                                sprintf( (char *)tempBffr2, "<STATUS>SHNT_CRNT:%s/%s</STATUS>", (char *)CMeasure.Current, (char *)CMeasureScaled.Current );
   \   00000E2C   0xABCD             ADD      R3,SP,#+820
   \   00000E2E   0xAAD1             ADD      R2,SP,#+836
   \   00000E30   0xF8DF 0x1DFC      LDR.W    R1,??RoadBrd_ParseString_171+0x4
   \   00000E34   0xA80B             ADD      R0,SP,#+44
   \   00000E36   0x.... 0x....      BL       sprintf
   1348                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000E3A   0xA80B             ADD      R0,SP,#+44
   \   00000E3C   0x.... 0x....      BL       strlen
   \   00000E40   0xA90B             ADD      R1,SP,#+44
   \   00000E42   0x.... 0x....      BL       BGM111_Transmit
   1349                              }
   1350                              sprintf( (char *)tempBffr2, "     Current: %s/%s\r\n", (char *)CMeasure.Current, (char *)CMeasureScaled.Current );
   \                     ??RoadBrd_ParseString_170: (+1)
   \   00000E46   0xABCD             ADD      R3,SP,#+820
   \   00000E48   0xAAD1             ADD      R2,SP,#+836
   \   00000E4A   0xF8DF 0x1DE8      LDR.W    R1,??RoadBrd_ParseString_171+0x8
   \   00000E4E   0xA80B             ADD      R0,SP,#+44
   \   00000E50   0x.... 0x....      BL       sprintf
   1351                              break;
   \   00000E54   0xE0CB             B.N      ??RoadBrd_ParseString_149
   1352          //------------------ C2 Command...Read Power and return results.....     
   1353                            case '2':
   1354                              // Read Power and return results.....
   1355                              Status = RoadBrd_VMonitor_RdPower( &PMeasure );
   \                     ??RoadBrd_ParseString_152: (+1)
   \   00000E56   0xA8C9             ADD      R0,SP,#+804
   \   00000E58   0x.... 0x....      BL       RoadBrd_VMonitor_RdPower
   \   00000E5C   0x0006             MOVS     R6,R0
   1356                              if (Status == HAL_OK)
   \   00000E5E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000E60   0x2E00             CMP      R6,#+0
   \   00000E62   0xD103             BNE.N    ??RoadBrd_ParseString_172
   1357                                Status = RoadBrd_VMonitor_RdPower_Scaled( &PMeasureScaled );
   \   00000E64   0xA8C5             ADD      R0,SP,#+788
   \   00000E66   0x.... 0x....      BL       RoadBrd_VMonitor_RdPower_Scaled
   \   00000E6A   0x0006             MOVS     R6,R0
   1358                              // Is this a BLE Operation?
   1359                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_172: (+1)
   \   00000E6C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000E6E   0x2E00             CMP      R6,#+0
   \   00000E70   0xD127             BNE.N    ??RoadBrd_ParseString_173
   1360                              {
   1361                                // Send string to UART..
   1362                                strcpy( (char *)tempBffr2, "Voltage Monitor/Read Power...\r\n");
   \   00000E72   0xF8DF 0x1DC4      LDR.W    R1,??RoadBrd_ParseString_171+0xC
   \   00000E76   0xA80B             ADD      R0,SP,#+44
   \   00000E78   0x.... 0x....      BL       strcpy
   1363          #ifdef NUCLEO
   1364                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1365          #else
   1366                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000E7C   0xA90B             ADD      R1,SP,#+44
   \   00000E7E   0x2000             MOVS     R0,#+0
   \   00000E80   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000E84   0x0006             MOVS     R6,R0
   1367          #endif
   1368                                if (Status != HAL_OK)
   \   00000E86   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000E88   0x2E00             CMP      R6,#+0
   \   00000E8A   0xD003             BEQ.N    ??RoadBrd_ParseString_174
   1369                                  return Status;
   \   00000E8C   0x0030             MOVS     R0,R6
   \   00000E8E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000E90   0xF003 0xBF2B      B.W      ??RoadBrd_ParseString_4
   1370                                // NOW, Build Data String..
   1371                                sprintf( (char *)tempBffr2, "     POWER DATA: " );
   \                     ??RoadBrd_ParseString_174: (+1)
   \   00000E94   0xF8DF 0x1DA4      LDR.W    R1,??RoadBrd_ParseString_171+0x10
   \   00000E98   0xA80B             ADD      R0,SP,#+44
   \   00000E9A   0x.... 0x....      BL       sprintf
   1372                                strcat( (char *)tempBffr2, (char *)PMeasure.Raw );
   \   00000E9E   0xA9CB             ADD      R1,SP,#+812
   \   00000EA0   0x1C49             ADDS     R1,R1,#+1
   \   00000EA2   0xA80B             ADD      R0,SP,#+44
   \   00000EA4   0x.... 0x....      BL       strcat
   1373                                strcat( (char *)tempBffr2, "\r\n" );
   \   00000EA8   0xA116             ADR.N    R1,??RoadBrd_ParseString_25+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000EAA   0xA80B             ADD      R0,SP,#+44
   \   00000EAC   0x.... 0x....      BL       strcat
   1374                              }
   1375                              else
   1376                                break;
   1377          #ifdef NUCLEO
   1378                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1379          #else
   1380                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000EB0   0xA90B             ADD      R1,SP,#+44
   \   00000EB2   0x2000             MOVS     R0,#+0
   \   00000EB4   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000EB8   0x0006             MOVS     R6,R0
   1381          #endif
   1382                              if (Status != HAL_OK)
   \   00000EBA   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000EBC   0x2E00             CMP      R6,#+0
   \   00000EBE   0xD101             BNE.N    ??RoadBrd_ParseString_175
   \   00000EC0   0xE004             B.N      ??RoadBrd_ParseString_176
   \                     ??RoadBrd_ParseString_173: (+1)
   \   00000EC2   0xE094             B.N      ??RoadBrd_ParseString_149
   1383                                return Status;
   \                     ??RoadBrd_ParseString_175: (+1)
   \   00000EC4   0x0030             MOVS     R0,R6
   \   00000EC6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000EC8   0xF003 0xBF0F      B.W      ??RoadBrd_ParseString_4
   1384                              // Now calculate Power.
   1385                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_176: (+1)
   \   00000ECC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000ECE   0x2D00             CMP      R5,#+0
   \   00000ED0   0xD00C             BEQ.N    ??RoadBrd_ParseString_177
   1386                              {
   1387                                // Yes...Build and Send BLE Response NOW.
   1388                                sprintf( (char *)tempBffr2, "<STATUS>POWER:%s/%s</STATUS>", (char *)PMeasure.Power, (char *)PMeasureScaled.Power );
   \   00000ED2   0xABC5             ADD      R3,SP,#+788
   \   00000ED4   0xAAC9             ADD      R2,SP,#+804
   \   00000ED6   0xF8DF 0x1D68      LDR.W    R1,??RoadBrd_ParseString_171+0x14
   \   00000EDA   0xA80B             ADD      R0,SP,#+44
   \   00000EDC   0x.... 0x....      BL       sprintf
   1389                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000EE0   0xA80B             ADD      R0,SP,#+44
   \   00000EE2   0x.... 0x....      BL       strlen
   \   00000EE6   0xA90B             ADD      R1,SP,#+44
   \   00000EE8   0x.... 0x....      BL       BGM111_Transmit
   1390                              }
   1391                              sprintf( (char *)tempBffr2, "     Power: %s/%s\r\n", (char *)PMeasure.Power, (char *)PMeasureScaled.Power );
   \                     ??RoadBrd_ParseString_177: (+1)
   \   00000EEC   0xABC5             ADD      R3,SP,#+788
   \   00000EEE   0xAAC9             ADD      R2,SP,#+804
   \   00000EF0   0xF8DF 0x1D50      LDR.W    R1,??RoadBrd_ParseString_171+0x18
   \   00000EF4   0xA80B             ADD      R0,SP,#+44
   \   00000EF6   0x.... 0x....      BL       sprintf
   1392                              break;
   \   00000EFA   0xE078             B.N      ??RoadBrd_ParseString_149
   \                     ??RoadBrd_ParseString_25:
   \   00000EFC   0x........         DC32     ?_2
   \   00000F00   0x........         DC32     ?_3
   \   00000F04   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
   \   00000F08   0x........         DC32     ?_4
   \   00000F0C   0x........         DC32     ?_5
   \   00000F10   0x........         DC32     ?_6
   \   00000F14   0x........         DC32     ?_8
   1393          //------------------ C3 Command...Read Bus Voltage and return results.....
   1394                            case '3':
   1395                              // Read Bus Voltage and return results.....
   1396                              Status = RoadBrd_VMonitor_RdVoltage( &VMeasure );
   \                     ??RoadBrd_ParseString_153: (+1)
   \   00000F18   0xA842             ADD      R0,SP,#+264
   \   00000F1A   0x.... 0x....      BL       RoadBrd_VMonitor_RdVoltage
   \   00000F1E   0x0006             MOVS     R6,R0
   1397                              if (Status == HAL_OK)
   \   00000F20   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000F22   0x2E00             CMP      R6,#+0
   \   00000F24   0xD103             BNE.N    ??RoadBrd_ParseString_178
   1398                                Status = RoadBrd_VMonitor_RdVoltage_Scaled( &VMeasureScaled );
   \   00000F26   0xA84E             ADD      R0,SP,#+312
   \   00000F28   0x.... 0x....      BL       RoadBrd_VMonitor_RdVoltage_Scaled
   \   00000F2C   0x0006             MOVS     R6,R0
   1399                                
   1400                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_178: (+1)
   \   00000F2E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000F30   0x2E00             CMP      R6,#+0
   \   00000F32   0xD126             BNE.N    ??RoadBrd_ParseString_179
   1401                              {
   1402                                // Send string to UART..
   1403                                strcpy( (char *)tempBffr2, "Voltage Monitor/Read Bus Voltage...\r\n");
   \   00000F34   0xF8DF 0x1ADC      LDR.W    R1,??RoadBrd_ParseString_142
   \   00000F38   0xA80B             ADD      R0,SP,#+44
   \   00000F3A   0x.... 0x....      BL       strcpy
   1404          #ifdef NUCLEO
   1405                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1406          #else
   1407                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000F3E   0xA90B             ADD      R1,SP,#+44
   \   00000F40   0x2000             MOVS     R0,#+0
   \   00000F42   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000F46   0x0006             MOVS     R6,R0
   1408          #endif
   1409                                if (Status != HAL_OK)
   \   00000F48   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000F4A   0x2E00             CMP      R6,#+0
   \   00000F4C   0xD003             BEQ.N    ??RoadBrd_ParseString_180
   1410                                  return Status;
   \   00000F4E   0x0030             MOVS     R0,R6
   \   00000F50   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000F52   0xF003 0xBECA      B.W      ??RoadBrd_ParseString_4
   1411                                // NOW, Build Data String..
   1412                                sprintf( (char *)tempBffr2, "     BUS VOLTAGE DATA: " );
   \                     ??RoadBrd_ParseString_180: (+1)
   \   00000F56   0xF8DF 0x1AC0      LDR.W    R1,??RoadBrd_ParseString_142+0x4
   \   00000F5A   0xA80B             ADD      R0,SP,#+44
   \   00000F5C   0x.... 0x....      BL       sprintf
   1413                                strcat( (char *)tempBffr2, (char *)VMeasure.Raw );
   \   00000F60   0xA944             ADD      R1,SP,#+272
   \   00000F62   0xA80B             ADD      R0,SP,#+44
   \   00000F64   0x.... 0x....      BL       strcat
   1414                                strcat( (char *)tempBffr2, "\r\n" );
   \   00000F68   0xA1C0             ADR.N    R1,??RoadBrd_ParseString_63+0xC  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000F6A   0xA80B             ADD      R0,SP,#+44
   \   00000F6C   0x.... 0x....      BL       strcat
   1415                              }
   1416                              else
   1417                                break;
   1418          #ifdef NUCLEO
   1419                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1420          #else
   1421                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000F70   0xA90B             ADD      R1,SP,#+44
   \   00000F72   0x2000             MOVS     R0,#+0
   \   00000F74   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000F78   0x0006             MOVS     R6,R0
   1422          #endif
   1423                              if (Status != HAL_OK)
   \   00000F7A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000F7C   0x2E00             CMP      R6,#+0
   \   00000F7E   0xD101             BNE.N    ??RoadBrd_ParseString_181
   \   00000F80   0xE004             B.N      ??RoadBrd_ParseString_182
   \                     ??RoadBrd_ParseString_179: (+1)
   \   00000F82   0xE034             B.N      ??RoadBrd_ParseString_149
   1424                                return Status;
   \                     ??RoadBrd_ParseString_181: (+1)
   \   00000F84   0x0030             MOVS     R0,R6
   \   00000F86   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000F88   0xF003 0xBEAF      B.W      ??RoadBrd_ParseString_4
   1425                              // Now calculate Bus Voltage.
   1426                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_182: (+1)
   \   00000F8C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000F8E   0x2D00             CMP      R5,#+0
   \   00000F90   0xD00C             BEQ.N    ??RoadBrd_ParseString_183
   1427                              {
   1428                                // Yes...Build and Send BLE Response NOW.
   1429                                sprintf( (char *)tempBffr2, "<STATUS>BUS_VLTG:%s/%s</STATUS>", (char *)VMeasure.Voltage, (char *)VMeasureScaled.Voltage );
   \   00000F92   0xAB4E             ADD      R3,SP,#+312
   \   00000F94   0xAA42             ADD      R2,SP,#+264
   \   00000F96   0xF8DF 0x1AEC      LDR.W    R1,??RoadBrd_ParseString_147
   \   00000F9A   0xA80B             ADD      R0,SP,#+44
   \   00000F9C   0x.... 0x....      BL       sprintf
   1430                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000FA0   0xA80B             ADD      R0,SP,#+44
   \   00000FA2   0x.... 0x....      BL       strlen
   \   00000FA6   0xA90B             ADD      R1,SP,#+44
   \   00000FA8   0x.... 0x....      BL       BGM111_Transmit
   1431                              }
   1432                              sprintf( (char *)tempBffr2, "     Bus Voltage: %s/%s\r\n", (char *)VMeasure.Voltage, (char *)VMeasureScaled.Voltage );
   \                     ??RoadBrd_ParseString_183: (+1)
   \   00000FAC   0xAB4E             ADD      R3,SP,#+312
   \   00000FAE   0xAA42             ADD      R2,SP,#+264
   \   00000FB0   0xF8DF 0x1B08      LDR.W    R1,??RoadBrd_ParseString_148
   \   00000FB4   0xA80B             ADD      R0,SP,#+44
   \   00000FB6   0x.... 0x....      BL       sprintf
   1433                              break;
   \   00000FBA   0xE018             B.N      ??RoadBrd_ParseString_149
   \                     ??RoadBrd_ParseString_32:
   \   00000FBC   0x........         DC32     ?_9
   \   00000FC0   0x........         DC32     ?_10
   \   00000FC4   0x........         DC32     ?_11
   1434                            default:
   1435                              // Is this a BLE Operation?
   1436                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_154: (+1)
   \   00000FC8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000FCA   0x2D00             CMP      R5,#+0
   \   00000FCC   0xD00A             BEQ.N    ??RoadBrd_ParseString_184
   1437                              {
   1438                                // Yes...Build and Send BLE Response NOW.
   1439                                strcpy( (char *)tempBffr2, "<STATUS>CMD_C_SYNTAX</STATUS>");
   \   00000FCE   0xF8DF 0x1E10      LDR.W    R1,??RoadBrd_ParseString_185
   \   00000FD2   0xA80B             ADD      R0,SP,#+44
   \   00000FD4   0x.... 0x....      BL       strcpy
   1440                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000FD8   0xA80B             ADD      R0,SP,#+44
   \   00000FDA   0x.... 0x....      BL       strlen
   \   00000FDE   0xA90B             ADD      R1,SP,#+44
   \   00000FE0   0x.... 0x....      BL       BGM111_Transmit
   1441                              }
   1442                              strcpy( (char *)tempBffr2, "ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_184: (+1)
   \   00000FE4   0xF8DF 0x147C      LDR.W    R1,??RoadBrd_ParseString_81+0x8
   \   00000FE8   0xA80B             ADD      R0,SP,#+44
   \   00000FEA   0x.... 0x....      BL       strcpy
   1443                              break;
   1444                          } //EndSwitch
   1445                        } //EndElse (Size == 1)
   1446                        break;
   \                     ??RoadBrd_ParseString_149: (+1)
   \   00000FEE   0xF003 0xBDFA      B.W      ??RoadBrd_ParseString_26
   \   00000FF2   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_35:
   \   00000FF4   0x........         DC32     ?_12
   \   00000FF8   0x........         DC32     ?_13
   \   00000FFC   0x........         DC32     ?_14
   \   00001000   0x........         DC32     ?_15
   \   00001004   0x........         DC32     ?_16
   \   00001008   0x........         DC32     ?_17
   1447          //**************************************************************************************************
   1448                      case 'D':
   1449                        // Read Humidity. 
   1450                        if (Size == 1)
   \                     ??RoadBrd_ParseString_15: (+1)
   \   0000100C   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   00001010   0x2801             CMP      R0,#+1
   \   00001012   0xD16D             BNE.N    ??RoadBrd_ParseString_186
   1451                        {
   1452          //------------------ D Command: Read Humidity Values      
   1453                          // Read Humidity Sensor sensor and return Humidity results....
   1454                          Status = RoadBrd_Humidity_ReadHumidity( &HMeasure );
   \   00001014   0xA849             ADD      R0,SP,#+292
   \   00001016   0x.... 0x....      BL       RoadBrd_Humidity_ReadHumidity
   \   0000101A   0x0006             MOVS     R6,R0
   1455                          if (Status == HAL_OK)
   \   0000101C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000101E   0x2E00             CMP      R6,#+0
   \   00001020   0xD104             BNE.N    ??RoadBrd_ParseString_187
   1456                            Status = RoadBrd_Humidity_ReadHumidity_Scaled( &HMeasureScaled );
   \   00001022   0xF50D 0x608A      ADD      R0,SP,#+1104
   \   00001026   0x.... 0x....      BL       RoadBrd_Humidity_ReadHumidity_Scaled
   \   0000102A   0x0006             MOVS     R6,R0
   1457                          // Is this a BLE Operation?
   1458                          if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_187: (+1)
   \   0000102C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000102E   0x2E00             CMP      R6,#+0
   \   00001030   0xD126             BNE.N    ??RoadBrd_ParseString_188
   1459                          {
   1460                            // Send string to UART..
   1461                            strcpy( (char *)tempBffr2, "Humidity SENSOR...\r\n");
   \   00001032   0xF8DF 0x1DB0      LDR.W    R1,??RoadBrd_ParseString_185+0x4
   \   00001036   0xA80B             ADD      R0,SP,#+44
   \   00001038   0x.... 0x....      BL       strcpy
   1462          #ifdef NUCLEO
   1463                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1464          #else
   1465                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000103C   0xA90B             ADD      R1,SP,#+44
   \   0000103E   0x2000             MOVS     R0,#+0
   \   00001040   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001044   0x0006             MOVS     R6,R0
   1466          #endif
   1467                            if (Status != HAL_OK)
   \   00001046   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001048   0x2E00             CMP      R6,#+0
   \   0000104A   0xD003             BEQ.N    ??RoadBrd_ParseString_189
   1468                              return Status;
   \   0000104C   0x0030             MOVS     R0,R6
   \   0000104E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001050   0xF003 0xBE4B      B.W      ??RoadBrd_ParseString_4
   1469                            // NOW, Build Data String..
   1470                            sprintf( (char *)tempBffr2, "     Humidity DATA: " );
   \                     ??RoadBrd_ParseString_189: (+1)
   \   00001054   0xF8DF 0x1DFC      LDR.W    R1,??RoadBrd_ParseString_190
   \   00001058   0xA80B             ADD      R0,SP,#+44
   \   0000105A   0x.... 0x....      BL       sprintf
   1471                            strcat( (char *)tempBffr2, (char *)HMeasure.HRaw );
   \   0000105E   0xA94B             ADD      R1,SP,#+300
   \   00001060   0xA80B             ADD      R0,SP,#+44
   \   00001062   0x.... 0x....      BL       strcat
   1472                            strcat( (char *)tempBffr2, "\r\n" );
   \   00001066   0xA181             ADR.N    R1,??RoadBrd_ParseString_63+0xC  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001068   0xA80B             ADD      R0,SP,#+44
   \   0000106A   0x.... 0x....      BL       strcat
   1473                          }
   1474                          else
   1475                            break;
   1476          #ifdef NUCLEO
   1477                          Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1478          #else
   1479                          Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000106E   0xA90B             ADD      R1,SP,#+44
   \   00001070   0x2000             MOVS     R0,#+0
   \   00001072   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001076   0x0006             MOVS     R6,R0
   1480          #endif
   1481                          if (Status != HAL_OK)
   \   00001078   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000107A   0x2E00             CMP      R6,#+0
   \   0000107C   0xD102             BNE.N    ??RoadBrd_ParseString_191
   \   0000107E   0xE005             B.N      ??RoadBrd_ParseString_192
   \                     ??RoadBrd_ParseString_188: (+1)
   \   00001080   0xF003 0xBDB1      B.W      ??RoadBrd_ParseString_26
   1482                            return Status;
   \                     ??RoadBrd_ParseString_191: (+1)
   \   00001084   0x0030             MOVS     R0,R6
   \   00001086   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001088   0xF003 0xBE2F      B.W      ??RoadBrd_ParseString_4
   1483                          // NOW, Build Data String..
   1484                          sprintf( (char *)tempBffr2, "     Humidity DATA(Decimal): %d\r\n", HMeasure.HRawC );
   \                     ??RoadBrd_ParseString_192: (+1)
   \   0000108C   0xF8BD 0x2134      LDRH     R2,[SP, #+308]
   \   00001090   0xF8DF 0x1DC4      LDR.W    R1,??RoadBrd_ParseString_190+0x4
   \   00001094   0xA80B             ADD      R0,SP,#+44
   \   00001096   0x.... 0x....      BL       sprintf
   1485          #ifdef NUCLEO
   1486                          Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1487          #else
   1488                          Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000109A   0xA90B             ADD      R1,SP,#+44
   \   0000109C   0x2000             MOVS     R0,#+0
   \   0000109E   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000010A2   0x0006             MOVS     R6,R0
   1489          #endif
   1490                          if (Status != HAL_OK)
   \   000010A4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000010A6   0x2E00             CMP      R6,#+0
   \   000010A8   0xD003             BEQ.N    ??RoadBrd_ParseString_193
   1491                            return Status;
   \   000010AA   0x0030             MOVS     R0,R6
   \   000010AC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000010AE   0xF003 0xBE1C      B.W      ??RoadBrd_ParseString_4
   1492                          // Now calculate Celcius and Farenheit Temp.
   1493                          if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_193: (+1)
   \   000010B2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000010B4   0x2D00             CMP      R5,#+0
   \   000010B6   0xD00D             BEQ.N    ??RoadBrd_ParseString_194
   1494                          {
   1495                            // Yes...Build and Send BLE Response NOW.
   1496                            sprintf( (char *)tempBffr2, "<STATUS>HUMIDITY:%s/%s</STATUS>", (char *)HMeasure.Humidity, (char *)HMeasureScaled.Humidity );
   \   000010B8   0xF50D 0x638A      ADD      R3,SP,#+1104
   \   000010BC   0xAA49             ADD      R2,SP,#+292
   \   000010BE   0xF8DF 0x1D9C      LDR.W    R1,??RoadBrd_ParseString_190+0x8
   \   000010C2   0xA80B             ADD      R0,SP,#+44
   \   000010C4   0x.... 0x....      BL       sprintf
   1497                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000010C8   0xA80B             ADD      R0,SP,#+44
   \   000010CA   0x.... 0x....      BL       strlen
   \   000010CE   0xA90B             ADD      R1,SP,#+44
   \   000010D0   0x.... 0x....      BL       BGM111_Transmit
   1498                          }
   1499                          sprintf( (char *)tempBffr2, "     Humidity: %s/%s\r\n", (char *)HMeasure.Humidity, (char *)HMeasureScaled.Humidity );
   \                     ??RoadBrd_ParseString_194: (+1)
   \   000010D4   0xF50D 0x638A      ADD      R3,SP,#+1104
   \   000010D8   0xAA49             ADD      R2,SP,#+292
   \   000010DA   0xF8DF 0x1D84      LDR.W    R1,??RoadBrd_ParseString_190+0xC
   \   000010DE   0xA80B             ADD      R0,SP,#+44
   \   000010E0   0x.... 0x....      BL       sprintf
   \   000010E4   0xE10E             B.N      ??RoadBrd_ParseString_195
   \   000010E6   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_40:
   \   000010E8   0x........         DC32     ?_18
   \   000010EC   0x........         DC32     ?_20
   1500                        }
   1501                        else
   1502                        {
   1503                          switch( tempBffr[1] )
   \                     ??RoadBrd_ParseString_186: (+1)
   \   000010F0   0x7860             LDRB     R0,[R4, #+1]
   \   000010F2   0x2830             CMP      R0,#+48
   \   000010F4   0xD022             BEQ.N    ??RoadBrd_ParseString_196
   \   000010F6   0x2831             CMP      R0,#+49
   \   000010F8   0xF000 0x808C      BEQ.W    ??RoadBrd_ParseString_197
   \   000010FC   0x2849             CMP      R0,#+73
   \   000010FE   0xF040 0x8101      BNE.W    ??RoadBrd_ParseString_195
   1504                          {
   1505          //------------------ DI Command: Initialize Humidity Sensor
   1506                            case 'I':
   1507                              // Initialize Humidity Sensor.
   1508                              Status = RoadBrd_HumidityInit();
   \                     ??RoadBrd_ParseString_198: (+1)
   \   00001102   0x.... 0x....      BL       RoadBrd_HumidityInit
   \   00001106   0x0006             MOVS     R6,R0
   1509                              // Is this a BLE Operation?
   1510                              if ( BLE_Flag )
   \   00001108   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000110A   0x2D00             CMP      R5,#+0
   \   0000110C   0xD009             BEQ.N    ??RoadBrd_ParseString_199
   1511                              {
   1512                                // Yes...Build and Send BLE Response NOW.
   1513                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   0000110E   0x492B             LDR.N    R1,??RoadBrd_ParseString_50+0x8
   \   00001110   0xA80B             ADD      R0,SP,#+44
   \   00001112   0x.... 0x....      BL       strcpy
   1514                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001116   0xA80B             ADD      R0,SP,#+44
   \   00001118   0x.... 0x....      BL       strlen
   \   0000111C   0xA90B             ADD      R1,SP,#+44
   \   0000111E   0x.... 0x....      BL       BGM111_Transmit
   1515                              }
   1516          
   1517                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_199: (+1)
   \   00001122   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001124   0x2E00             CMP      R6,#+0
   \   00001126   0xD104             BNE.N    ??RoadBrd_ParseString_200
   1518                              {
   1519                                strcpy( (char *)tempBffr2, "Humidity Sensor: Initialization Complete.\r\n");;
   \   00001128   0xF8DF 0x1D38      LDR.W    R1,??RoadBrd_ParseString_190+0x10
   \   0000112C   0xA80B             ADD      R0,SP,#+44
   \   0000112E   0x.... 0x....      BL       strcpy
   1520                              }
   1521                              break;
   \                     ??RoadBrd_ParseString_200: (+1)
   \   00001132   0xE0E7             B.N      ??RoadBrd_ParseString_195
   \                     ??RoadBrd_ParseString_48:
   \   00001134   0x........         DC32     ?_21
   \   00001138   0x........         DC32     ?_22
   1522          //------------------ D0 Command...Read Humidity Values.....
   1523                            case '0':
   1524                              // Read Humidity Sensor sensor and return Humidity results....
   1525                              Status = RoadBrd_Humidity_ReadHumidity( &HMeasure );
   \                     ??RoadBrd_ParseString_196: (+1)
   \   0000113C   0xA849             ADD      R0,SP,#+292
   \   0000113E   0x.... 0x....      BL       RoadBrd_Humidity_ReadHumidity
   \   00001142   0x0006             MOVS     R6,R0
   1526                              // Is this a BLE Operation?
   1527                              if ( BLE_Flag )
   \   00001144   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001146   0x2D00             CMP      R5,#+0
   \   00001148   0xD009             BEQ.N    ??RoadBrd_ParseString_201
   1528                              {
   1529                                // Yes...Build and Send BLE Response NOW.
   1530                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   0000114A   0x491C             LDR.N    R1,??RoadBrd_ParseString_50+0x8
   \   0000114C   0xA80B             ADD      R0,SP,#+44
   \   0000114E   0x.... 0x....      BL       strcpy
   1531                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001152   0xA80B             ADD      R0,SP,#+44
   \   00001154   0x.... 0x....      BL       strlen
   \   00001158   0xA90B             ADD      R1,SP,#+44
   \   0000115A   0x.... 0x....      BL       BGM111_Transmit
   1532                              }
   1533          
   1534                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_201: (+1)
   \   0000115E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001160   0x2E00             CMP      R6,#+0
   \   00001162   0xD131             BNE.N    ??RoadBrd_ParseString_202
   1535                              {
   1536                                // Send string to UART..
   1537                                strcpy( (char *)tempBffr2, "Humidity SENSOR...\r\n");
   \   00001164   0xF8DF 0x1C7C      LDR.W    R1,??RoadBrd_ParseString_185+0x4
   \   00001168   0xA80B             ADD      R0,SP,#+44
   \   0000116A   0x.... 0x....      BL       strcpy
   1538          #ifdef NUCLEO
   1539                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1540          #else
   1541                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000116E   0xA90B             ADD      R1,SP,#+44
   \   00001170   0x2000             MOVS     R0,#+0
   \   00001172   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001176   0x0006             MOVS     R6,R0
   1542          #endif
   1543                                if (Status != HAL_OK)
   \   00001178   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000117A   0x2E00             CMP      R6,#+0
   \   0000117C   0xD003             BEQ.N    ??RoadBrd_ParseString_203
   1544                                  return Status;
   \   0000117E   0x0030             MOVS     R0,R6
   \   00001180   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001182   0xF003 0xBDB2      B.W      ??RoadBrd_ParseString_4
   1545                                // NOW, Build Data String..
   1546                                sprintf( (char *)tempBffr2, "     Humidity DATA: " );
   \                     ??RoadBrd_ParseString_203: (+1)
   \   00001186   0xF8DF 0x1CCC      LDR.W    R1,??RoadBrd_ParseString_190
   \   0000118A   0xA80B             ADD      R0,SP,#+44
   \   0000118C   0x.... 0x....      BL       sprintf
   1547                                strcat( (char *)tempBffr2, (char *)HMeasure.HRaw );
   \   00001190   0xA94B             ADD      R1,SP,#+300
   \   00001192   0xA80B             ADD      R0,SP,#+44
   \   00001194   0x.... 0x....      BL       strcat
   1548                                strcat( (char *)tempBffr2, "\r\n" );
   \   00001198   0xA134             ADR.N    R1,??RoadBrd_ParseString_63+0xC  ;; 0x0D, 0x0A, 0x00, 0x00
   \   0000119A   0xA80B             ADD      R0,SP,#+44
   \   0000119C   0x.... 0x....      BL       strcat
   1549                              }
   1550                              else
   1551                                break;
   1552          #ifdef NUCLEO
   1553                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1554          #else
   1555                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000011A0   0xA90B             ADD      R1,SP,#+44
   \   000011A2   0x2000             MOVS     R0,#+0
   \   000011A4   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000011A8   0x0006             MOVS     R6,R0
   1556          #endif
   1557                              if (Status != HAL_OK)
   \   000011AA   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000011AC   0x2E00             CMP      R6,#+0
   \   000011AE   0xD10C             BNE.N    ??RoadBrd_ParseString_204
   \   000011B0   0xE00F             B.N      ??RoadBrd_ParseString_205
   \   000011B2   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_50:
   \   000011B4   0x........         DC32     ?_23
   \   000011B8   0x........         DC32     ?_24
   \   000011BC   0x........         DC32     ?_25
   \   000011C0   0x........         DC32     ?_26
   \   000011C4   0x........         DC32     ?_27
   \                     ??RoadBrd_ParseString_202: (+1)
   \   000011C8   0xE09C             B.N      ??RoadBrd_ParseString_195
   1558                                return Status;
   \                     ??RoadBrd_ParseString_204: (+1)
   \   000011CA   0x0030             MOVS     R0,R6
   \   000011CC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000011CE   0xF003 0xBD8C      B.W      ??RoadBrd_ParseString_4
   1559                              // NOW, Build Data String..
   1560                              sprintf( (char *)tempBffr2, "     Humidity DATA(Decimal): %d\r\n", HMeasure.HRawC );
   \                     ??RoadBrd_ParseString_205: (+1)
   \   000011D2   0xF8BD 0x2134      LDRH     R2,[SP, #+308]
   \   000011D6   0xF8DF 0x1C80      LDR.W    R1,??RoadBrd_ParseString_190+0x4
   \   000011DA   0xA80B             ADD      R0,SP,#+44
   \   000011DC   0x.... 0x....      BL       sprintf
   1561          #ifdef NUCLEO
   1562                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1563          #else
   1564                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000011E0   0xA90B             ADD      R1,SP,#+44
   \   000011E2   0x2000             MOVS     R0,#+0
   \   000011E4   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000011E8   0x0006             MOVS     R6,R0
   1565          #endif
   1566                              if (Status != HAL_OK)
   \   000011EA   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000011EC   0x2E00             CMP      R6,#+0
   \   000011EE   0xD003             BEQ.N    ??RoadBrd_ParseString_206
   1567                                return Status;
   \   000011F0   0x0030             MOVS     R0,R6
   \   000011F2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000011F4   0xF003 0xBD79      B.W      ??RoadBrd_ParseString_4
   1568                              // Now calculate Humidity.
   1569                              sprintf( (char *)tempBffr2, "     Humidity: " );
   \                     ??RoadBrd_ParseString_206: (+1)
   \   000011F8   0xF8DF 0x1DC8      LDR.W    R1,??RoadBrd_ParseString_207
   \   000011FC   0xA80B             ADD      R0,SP,#+44
   \   000011FE   0x.... 0x....      BL       sprintf
   1570                              strcat( (char *)tempBffr2, (char *)HMeasure.Humidity );
   \   00001202   0xA949             ADD      R1,SP,#+292
   \   00001204   0xA80B             ADD      R0,SP,#+44
   \   00001206   0x.... 0x....      BL       strcat
   1571                              strcat( (char *)tempBffr2, "\r\n" );
   \   0000120A   0xA118             ADR.N    R1,??RoadBrd_ParseString_63+0xC  ;; 0x0D, 0x0A, 0x00, 0x00
   \   0000120C   0xA80B             ADD      R0,SP,#+44
   \   0000120E   0x.... 0x....      BL       strcat
   1572                              break;
   \   00001212   0xE077             B.N      ??RoadBrd_ParseString_195
   1573          //------------------ D1 Command...Read Temperature Values..... 
   1574                            case '1':
   1575                              // Read Humidity Sensor sensor and return Temperature results....
   1576                              Status = RoadBrd_Humidity_ReadTemperature( &TMeasure );
   \                     ??RoadBrd_ParseString_197: (+1)
   \   00001214   0xA83C             ADD      R0,SP,#+240
   \   00001216   0x.... 0x....      BL       RoadBrd_Humidity_ReadTemperature
   \   0000121A   0x0006             MOVS     R6,R0
   1577                              // Is this a BLE Operation?
   1578                              if ( BLE_Flag )
   \   0000121C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000121E   0x2D00             CMP      R5,#+0
   \   00001220   0xD00A             BEQ.N    ??RoadBrd_ParseString_208
   1579                              {
   1580                                // Yes...Build and Send BLE Response NOW.
   1581                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001222   0xF8DF 0x1DA4      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   00001226   0xA80B             ADD      R0,SP,#+44
   \   00001228   0x.... 0x....      BL       strcpy
   1582                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000122C   0xA80B             ADD      R0,SP,#+44
   \   0000122E   0x.... 0x....      BL       strlen
   \   00001232   0xA90B             ADD      R1,SP,#+44
   \   00001234   0x.... 0x....      BL       BGM111_Transmit
   1583                              }
   1584          
   1585                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_208: (+1)
   \   00001238   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000123A   0x2E00             CMP      R6,#+0
   \   0000123C   0xD136             BNE.N    ??RoadBrd_ParseString_209
   1586                              {
   1587                                // Send string to UART..
   1588                                strcpy( (char *)tempBffr2, "Humidity SENSOR...\r\n");
   \   0000123E   0xF8DF 0x1BA4      LDR.W    R1,??RoadBrd_ParseString_185+0x4
   \   00001242   0xA80B             ADD      R0,SP,#+44
   \   00001244   0x.... 0x....      BL       strcpy
   1589          #ifdef NUCLEO
   1590                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1591          #else
   1592                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00001248   0xA90B             ADD      R1,SP,#+44
   \   0000124A   0x2000             MOVS     R0,#+0
   \   0000124C   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001250   0x0006             MOVS     R6,R0
   1593          #endif
   1594                                if (Status != HAL_OK)
   \   00001252   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001254   0x2E00             CMP      R6,#+0
   \   00001256   0xD013             BEQ.N    ??RoadBrd_ParseString_210
   1595                                  return Status;
   \   00001258   0x0030             MOVS     R0,R6
   \   0000125A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000125C   0xF003 0xBD45      B.W      ??RoadBrd_ParseString_4
   \                     ??RoadBrd_ParseString_63:
   \   00001260   0x........         DC32     ?_28
   \   00001264   0x........         DC32     ?_29
   \   00001268   0x........         DC32     ?_30
   \   0000126C   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
   \   00001270   0x........         DC32     ?_31
   \   00001274   0x........         DC32     ?_32
   \   00001278   0x........         DC32     ?_33
   \   0000127C   0x........         DC32     ?_34
   1596                                // NOW, Build Data String..
   1597                                sprintf( (char *)tempBffr2, "     TEMP DATA: " );
   \                     ??RoadBrd_ParseString_210: (+1)
   \   00001280   0x4937             LDR.N    R1,??RoadBrd_ParseString_71+0x4
   \   00001282   0xA80B             ADD      R0,SP,#+44
   \   00001284   0x.... 0x....      BL       sprintf
   1598                                strcat( (char *)tempBffr2, (char *)TMeasure.Raw );
   \   00001288   0xF10D 0x01FE      ADD      R1,SP,#+254
   \   0000128C   0xA80B             ADD      R0,SP,#+44
   \   0000128E   0x.... 0x....      BL       strcat
   1599                                strcat( (char *)tempBffr2, "\r\n" );
   \   00001292   0xA1B6             ADR.N    R1,??RoadBrd_ParseString_103+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001294   0xA80B             ADD      R0,SP,#+44
   \   00001296   0x.... 0x....      BL       strcat
   1600                              }
   1601                              else
   1602                                break;
   1603          #ifdef NUCLEO
   1604                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1605          #else
   1606                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000129A   0xA90B             ADD      R1,SP,#+44
   \   0000129C   0x2000             MOVS     R0,#+0
   \   0000129E   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000012A2   0x0006             MOVS     R6,R0
   1607          #endif
   1608                              if (Status != HAL_OK)
   \   000012A4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000012A6   0x2E00             CMP      R6,#+0
   \   000012A8   0xD101             BNE.N    ??RoadBrd_ParseString_211
   \   000012AA   0xE004             B.N      ??RoadBrd_ParseString_212
   \                     ??RoadBrd_ParseString_209: (+1)
   \   000012AC   0xE02A             B.N      ??RoadBrd_ParseString_195
   1609                                return Status;
   \                     ??RoadBrd_ParseString_211: (+1)
   \   000012AE   0x0030             MOVS     R0,R6
   \   000012B0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000012B2   0xF003 0xBD1A      B.W      ??RoadBrd_ParseString_4
   1610                              // NOW, Build Data String..
   1611                              sprintf( (char *)tempBffr2, "     TEMP DATA(Decimal): %d\r\n", TMeasure.RawC );
   \                     ??RoadBrd_ParseString_212: (+1)
   \   000012B6   0xF8BD 0x2106      LDRH     R2,[SP, #+262]
   \   000012BA   0x492A             LDR.N    R1,??RoadBrd_ParseString_71+0x8
   \   000012BC   0xA80B             ADD      R0,SP,#+44
   \   000012BE   0x.... 0x....      BL       sprintf
   1612          #ifdef NUCLEO
   1613                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1614          #else
   1615                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000012C2   0xA90B             ADD      R1,SP,#+44
   \   000012C4   0x2000             MOVS     R0,#+0
   \   000012C6   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000012CA   0x0006             MOVS     R6,R0
   1616          #endif
   1617                              if (Status != HAL_OK)
   \   000012CC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000012CE   0x2E00             CMP      R6,#+0
   \   000012D0   0xD003             BEQ.N    ??RoadBrd_ParseString_213
   1618                                return Status;
   \   000012D2   0x0030             MOVS     R0,R6
   \   000012D4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000012D6   0xF003 0xBD08      B.W      ??RoadBrd_ParseString_4
   1619                              // Now calculate Celcius and Farenheit Temp.
   1620                              sprintf( (char *)tempBffr2, "     TempC: " );
   \                     ??RoadBrd_ParseString_213: (+1)
   \   000012DA   0x494B             LDR.N    R1,??RoadBrd_ParseString_78
   \   000012DC   0xA80B             ADD      R0,SP,#+44
   \   000012DE   0x.... 0x....      BL       sprintf
   1621                              strcat( (char *)tempBffr2, (char *)TMeasure.TempC );
   \   000012E2   0xA93C             ADD      R1,SP,#+240
   \   000012E4   0xA80B             ADD      R0,SP,#+44
   \   000012E6   0x.... 0x....      BL       strcat
   1622                              strcat( (char *)tempBffr2, "     TempF: " );
   \   000012EA   0x4948             LDR.N    R1,??RoadBrd_ParseString_78+0x4
   \   000012EC   0xA80B             ADD      R0,SP,#+44
   \   000012EE   0x.... 0x....      BL       strcat
   1623                              strcat( (char *)tempBffr2, (char *)TMeasure.TempF );
   \   000012F2   0xF10D 0x01F7      ADD      R1,SP,#+247
   \   000012F6   0xA80B             ADD      R0,SP,#+44
   \   000012F8   0x.... 0x....      BL       strcat
   1624                              strcat( (char *)tempBffr2, "\r\n" );
   \   000012FC   0xA19B             ADR.N    R1,??RoadBrd_ParseString_103+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   000012FE   0xA80B             ADD      R0,SP,#+44
   \   00001300   0x.... 0x....      BL       strcat
   1625                              break;
   1626                          } //EndSwitch
   1627                        } //EndElse (Size == 1)
   1628                        break;
   \                     ??RoadBrd_ParseString_195: (+1)
   \   00001304   0xF003 0xBC6F      B.W      ??RoadBrd_ParseString_26
   1629          //**************************************************************************************************
   1630                      case 'E':
   1631                        // Read Temp and Pressure. 
   1632                        // Is this a BLE Operation?
   1633                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_16: (+1)
   \   00001308   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000130A   0x2D00             CMP      R5,#+0
   \   0000130C   0xD00A             BEQ.N    ??RoadBrd_ParseString_214
   1634                        {
   1635                          // Yes...Build and Send BLE Response NOW.
   1636                          strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   0000130E   0xF8DF 0x1CB8      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   00001312   0xA80B             ADD      R0,SP,#+44
   \   00001314   0x.... 0x....      BL       strcpy
   1637                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001318   0xA80B             ADD      R0,SP,#+44
   \   0000131A   0x.... 0x....      BL       strlen
   \   0000131E   0xA90B             ADD      R1,SP,#+44
   \   00001320   0x.... 0x....      BL       BGM111_Transmit
   1638                        }
   1639                        
   1640                        strcpy( (char *)tempBffr2, "TBD: Read Temp and Pressure NOT IMPLEMENTED\r\n");
   \                     ??RoadBrd_ParseString_214: (+1)
   \   00001324   0xF8DF 0x1D80      LDR.W    R1,??RoadBrd_ParseString_215
   \   00001328   0xA80B             ADD      R0,SP,#+44
   \   0000132A   0x.... 0x....      BL       strcpy
   1641                        break;
   \   0000132E   0xF003 0xBC5A      B.W      ??RoadBrd_ParseString_26
   1642          //**************************************************************************************************
   1643                      case 'F':
   1644                        // NO ACTION. 
   1645                        // Is this a BLE Operation?
   1646                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_17: (+1)
   \   00001332   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001334   0x2D00             CMP      R5,#+0
   \   00001336   0xD00A             BEQ.N    ??RoadBrd_ParseString_216
   1647                        {
   1648                          // Yes...Build and Send BLE Response NOW.
   1649                          strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001338   0xF8DF 0x1C8C      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   0000133C   0xA80B             ADD      R0,SP,#+44
   \   0000133E   0x.... 0x....      BL       strcpy
   1650                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001342   0xA80B             ADD      R0,SP,#+44
   \   00001344   0x.... 0x....      BL       strlen
   \   00001348   0xA90B             ADD      R1,SP,#+44
   \   0000134A   0x.... 0x....      BL       BGM111_Transmit
   1651                        }
   1652                        
   1653                        strcpy( (char *)tempBffr2, "NO Action...(0x00).\r\n");
   \                     ??RoadBrd_ParseString_216: (+1)
   \   0000134E   0xF8DF 0x1D5C      LDR.W    R1,??RoadBrd_ParseString_215+0x4
   \   00001352   0xA80B             ADD      R0,SP,#+44
   \   00001354   0x.... 0x....      BL       strcpy
   1654                        break;
   \   00001358   0xF003 0xBC45      B.W      ??RoadBrd_ParseString_26
   \                     ??RoadBrd_ParseString_71:
   \   0000135C   0x........         DC32     ?_35
   \   00001360   0x........         DC32     ?_36
   \   00001364   0x........         DC32     ?_37
   1655          //**************************************************************************************************
   1656                      case 'G':
   1657                        // Read Temperature sensor and return results....Temperature Sensor U10(PCT2075GVJ).  Addr: 0x94
   1658                        Status = RoadBrd_ReadTemp( &TMeasure );
   \                     ??RoadBrd_ParseString_18: (+1)
   \   00001368   0xA83C             ADD      R0,SP,#+240
   \   0000136A   0x.... 0x....      BL       RoadBrd_ReadTemp
   \   0000136E   0x0006             MOVS     R6,R0
   1659                        if (Status == HAL_OK)
   \   00001370   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001372   0x2E00             CMP      R6,#+0
   \   00001374   0xD103             BNE.N    ??RoadBrd_ParseString_217
   1660                          Status = RoadBrd_ReadTemp_Scaled( &TMeasureScaled );
   \   00001376   0xA8BF             ADD      R0,SP,#+764
   \   00001378   0x.... 0x....      BL       RoadBrd_ReadTemp_Scaled
   \   0000137C   0x0006             MOVS     R6,R0
   1661                        if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_217: (+1)
   \   0000137E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001380   0x2E00             CMP      R6,#+0
   \   00001382   0xD127             BNE.N    ??RoadBrd_ParseString_218
   1662                        {
   1663                          // Send string to UART..
   1664                          strcpy( (char *)tempBffr2, "TEMP SENSOR...\r\n");
   \   00001384   0xF8DF 0x1D28      LDR.W    R1,??RoadBrd_ParseString_215+0x8
   \   00001388   0xA80B             ADD      R0,SP,#+44
   \   0000138A   0x.... 0x....      BL       strcpy
   1665          #ifdef NUCLEO
   1666                          Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1667          #else
   1668                          Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000138E   0xA90B             ADD      R1,SP,#+44
   \   00001390   0x2000             MOVS     R0,#+0
   \   00001392   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001396   0x0006             MOVS     R6,R0
   1669          #endif
   1670                          if (Status != HAL_OK)
   \   00001398   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000139A   0x2E00             CMP      R6,#+0
   \   0000139C   0xD003             BEQ.N    ??RoadBrd_ParseString_219
   1671                            return Status;
   \   0000139E   0x0030             MOVS     R0,R6
   \   000013A0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000013A2   0xF003 0xBCA2      B.W      ??RoadBrd_ParseString_4
   1672                          // NOW, Build Data String..
   1673                          sprintf( (char *)tempBffr2, "     TEMP DATA: " );
   \                     ??RoadBrd_ParseString_219: (+1)
   \   000013A6   0xF8DF 0x1D0C      LDR.W    R1,??RoadBrd_ParseString_215+0xC
   \   000013AA   0xA80B             ADD      R0,SP,#+44
   \   000013AC   0x.... 0x....      BL       sprintf
   1674                          strcat( (char *)tempBffr2, (char *)TMeasure.Raw );
   \   000013B0   0xF10D 0x01FE      ADD      R1,SP,#+254
   \   000013B4   0xA80B             ADD      R0,SP,#+44
   \   000013B6   0x.... 0x....      BL       strcat
   1675                          strcat( (char *)tempBffr2, "\r\n" );
   \   000013BA   0xA16C             ADR.N    R1,??RoadBrd_ParseString_103+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   000013BC   0xA80B             ADD      R0,SP,#+44
   \   000013BE   0x.... 0x....      BL       strcat
   1676                        }
   1677                        else
   1678                          break;
   1679          #ifdef NUCLEO
   1680                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1681          #else
   1682                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000013C2   0xA90B             ADD      R1,SP,#+44
   \   000013C4   0x2000             MOVS     R0,#+0
   \   000013C6   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000013CA   0x0006             MOVS     R6,R0
   1683          #endif
   1684                        if (Status != HAL_OK)
   \   000013CC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000013CE   0x2E00             CMP      R6,#+0
   \   000013D0   0xD102             BNE.N    ??RoadBrd_ParseString_220
   \   000013D2   0xE005             B.N      ??RoadBrd_ParseString_221
   \                     ??RoadBrd_ParseString_218: (+1)
   \   000013D4   0xF003 0xBC07      B.W      ??RoadBrd_ParseString_26
   1685                          return Status;
   \                     ??RoadBrd_ParseString_220: (+1)
   \   000013D8   0x0030             MOVS     R0,R6
   \   000013DA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000013DC   0xF003 0xBC85      B.W      ??RoadBrd_ParseString_4
   1686                        // NOW, Build Data String..
   1687                        sprintf( (char *)tempBffr2, "     TEMP DATA(Decimal): %d\r\n", TMeasure.RawC );
   \                     ??RoadBrd_ParseString_221: (+1)
   \   000013E0   0xF8BD 0x2106      LDRH     R2,[SP, #+262]
   \   000013E4   0xF8DF 0x1DEC      LDR.W    R1,??RoadBrd_ParseString_222
   \   000013E8   0xA80B             ADD      R0,SP,#+44
   \   000013EA   0x.... 0x....      BL       sprintf
   1688          #ifdef NUCLEO
   1689                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1690          #else
   1691                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000013EE   0xA90B             ADD      R1,SP,#+44
   \   000013F0   0x2000             MOVS     R0,#+0
   \   000013F2   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000013F6   0x0006             MOVS     R6,R0
   1692          #endif
   1693                        if (Status != HAL_OK)
   \   000013F8   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000013FA   0x2E00             CMP      R6,#+0
   \   000013FC   0xD008             BEQ.N    ??RoadBrd_ParseString_223
   1694                          return Status;
   \   000013FE   0x0030             MOVS     R0,R6
   \   00001400   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001402   0xF003 0xBC72      B.W      ??RoadBrd_ParseString_4
   \   00001406   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_78:
   \   00001408   0x........         DC32     ?_38
   \   0000140C   0x........         DC32     ?_39
   1695                        // Is this a BLE Operation?
   1696                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_223: (+1)
   \   00001410   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001412   0x2D00             CMP      R5,#+0
   \   00001414   0xD012             BEQ.N    ??RoadBrd_ParseString_224
   1697                        {
   1698                          // Yes...Build and Send BLE Response NOW.
   1699                          sprintf( (char *)tempBffr2, "<STATUS>TEMPC:%s/%s//TEMPF:%s/%s</STATUS>", 
   1700                                  (char *)TMeasure.TempC, 
   1701                                  (char *)TMeasureScaled.TempC,
   1702                                  (char *)TMeasure.TempF, 
   1703                                  (char *)TMeasureScaled.TempF);
   \   00001416   0xA8C0             ADD      R0,SP,#+768
   \   00001418   0x1CC0             ADDS     R0,R0,#+3
   \   0000141A   0x9001             STR      R0,[SP, #+4]
   \   0000141C   0xF10D 0x00F7      ADD      R0,SP,#+247
   \   00001420   0x9000             STR      R0,[SP, #+0]
   \   00001422   0xABBF             ADD      R3,SP,#+764
   \   00001424   0xAA3C             ADD      R2,SP,#+240
   \   00001426   0xF8DF 0x1E04      LDR.W    R1,??RoadBrd_ParseString_225
   \   0000142A   0xA80B             ADD      R0,SP,#+44
   \   0000142C   0x.... 0x....      BL       sprintf
   1704                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001430   0xA80B             ADD      R0,SP,#+44
   \   00001432   0x.... 0x....      BL       strlen
   \   00001436   0xA90B             ADD      R1,SP,#+44
   \   00001438   0x.... 0x....      BL       BGM111_Transmit
   1705                        }
   1706                        
   1707                        // Now calculate Celcius and Farenheit Temp.
   1708                        sprintf( (char *)tempBffr2, "     TempC: %s/%s     TempF: %s/%s\r\n", 
   1709                                (char *)TMeasure.TempC, 
   1710                                (char *)TMeasureScaled.TempC,
   1711                                (char *)TMeasure.TempF, 
   1712                                (char *)TMeasureScaled.TempF);
   \                     ??RoadBrd_ParseString_224: (+1)
   \   0000143C   0xA8C0             ADD      R0,SP,#+768
   \   0000143E   0x1CC0             ADDS     R0,R0,#+3
   \   00001440   0x9001             STR      R0,[SP, #+4]
   \   00001442   0xF10D 0x00F7      ADD      R0,SP,#+247
   \   00001446   0x9000             STR      R0,[SP, #+0]
   \   00001448   0xABBF             ADD      R3,SP,#+764
   \   0000144A   0xAA3C             ADD      R2,SP,#+240
   \   0000144C   0xF8DF 0x1DE0      LDR.W    R1,??RoadBrd_ParseString_225+0x4
   \   00001450   0xA80B             ADD      R0,SP,#+44
   \   00001452   0x.... 0x....      BL       sprintf
   1713                        break;
   \   00001456   0xF003 0xBBC6      B.W      ??RoadBrd_ParseString_26
   \   0000145A   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_81:
   \   0000145C   0x........         DC32     ?_40
   \   00001460   0x........         DC32     ?_41
   \   00001464   0x........         DC32     ?_42
   1714          //**************************************************************************************************
   1715                      case 'H':
   1716                        // RGB Color Light Sensor U15(ISL91250).  Addr: 0x88
   1717                        if (Size == 1)
   \                     ??RoadBrd_ParseString_19: (+1)
   \   00001468   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   0000146C   0x2801             CMP      R0,#+1
   \   0000146E   0xF040 0x8081      BNE.W    ??RoadBrd_ParseString_226
   1718                        {
   1719          //------------------ H Command...Read RGB Values and Return as 3 (2 Byte Fields)....REDmsb,REDlsb,GREENmsb,GREENlsb,BLUEmsb,BLUElsb.....     
   1720                          // 1. Time to send Command and collect status.
   1721                          Status = RoadBrd_RGBReadValues( &RGBValues );
   \   00001472   0xA8B5             ADD      R0,SP,#+724
   \   00001474   0x.... 0x....      BL       RoadBrd_RGBReadValues
   \   00001478   0x0006             MOVS     R6,R0
   1722                          if (Status == HAL_OK)
   \   0000147A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000147C   0x2E00             CMP      R6,#+0
   \   0000147E   0xD177             BNE.N    ??RoadBrd_ParseString_227
   1723                          {
   1724                            // Send string to UART..
   1725                            strcpy( (char *)tempBffr2, "RGB Color Light Sensor...\r\n");
   \   00001480   0xF8DF 0x1DDC      LDR.W    R1,??RoadBrd_ParseString_228
   \   00001484   0xA80B             ADD      R0,SP,#+44
   \   00001486   0x.... 0x....      BL       strcpy
   1726          #ifdef NUCLEO
   1727                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1728          #else
   1729                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000148A   0xA90B             ADD      R1,SP,#+44
   \   0000148C   0x2000             MOVS     R0,#+0
   \   0000148E   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001492   0x0006             MOVS     R6,R0
   1730          #endif
   1731                            if (Status != HAL_OK)
   \   00001494   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001496   0x2E00             CMP      R6,#+0
   \   00001498   0xD003             BEQ.N    ??RoadBrd_ParseString_229
   1732                              return Status;
   \   0000149A   0x0030             MOVS     R0,R6
   \   0000149C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000149E   0xF003 0xBC24      B.W      ??RoadBrd_ParseString_4
   1733                            // NOW, Build Data String..
   1734                            sprintf( (char *)tempBffr2, " RGB(REDmsb,REDlsb,GREENmsb,GREENlsb,BLUEmsb,BLUElsb)\r\n" );
   \                     ??RoadBrd_ParseString_229: (+1)
   \   000014A2   0xF8DF 0x1DEC      LDR.W    R1,??RoadBrd_ParseString_230
   \   000014A6   0xA80B             ADD      R0,SP,#+44
   \   000014A8   0x.... 0x....      BL       sprintf
   1735          #ifdef NUCLEO
   1736                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1737          #else
   1738                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000014AC   0xA90B             ADD      R1,SP,#+44
   \   000014AE   0x2000             MOVS     R0,#+0
   \   000014B0   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000014B4   0x0006             MOVS     R6,R0
   1739          #endif
   1740                            if (Status != HAL_OK)
   \   000014B6   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000014B8   0x2E00             CMP      R6,#+0
   \   000014BA   0xD003             BEQ.N    ??RoadBrd_ParseString_231
   1741                              return Status;
   \   000014BC   0x0030             MOVS     R0,R6
   \   000014BE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000014C0   0xF003 0xBC13      B.W      ??RoadBrd_ParseString_4
   1742                            strcpy( (char *)tempBffr2, "       DATA: ");
   \                     ??RoadBrd_ParseString_231: (+1)
   \   000014C4   0xF8DF 0x1DCC      LDR.W    R1,??RoadBrd_ParseString_230+0x4
   \   000014C8   0xA80B             ADD      R0,SP,#+44
   \   000014CA   0x.... 0x....      BL       strcpy
   1743                            strcat( (char *)tempBffr2, (char *)RGBValues.Raw );
   \   000014CE   0xA9BB             ADD      R1,SP,#+748
   \   000014D0   0xA80B             ADD      R0,SP,#+44
   \   000014D2   0x.... 0x....      BL       strcat
   1744                            strcat( (char *)tempBffr2, "\r\n" );
   \   000014D6   0xA125             ADR.N    R1,??RoadBrd_ParseString_103+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   000014D8   0xA80B             ADD      R0,SP,#+44
   \   000014DA   0x.... 0x....      BL       strcat
   1745          #ifdef NUCLEO
   1746                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1747          #else
   1748                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000014DE   0xA90B             ADD      R1,SP,#+44
   \   000014E0   0x2000             MOVS     R0,#+0
   \   000014E2   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000014E6   0x0006             MOVS     R6,R0
   1749          #endif
   1750                            if (Status != HAL_OK)
   \   000014E8   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000014EA   0x2E00             CMP      R6,#+0
   \   000014EC   0xD008             BEQ.N    ??RoadBrd_ParseString_232
   1751                              return Status;
   \   000014EE   0x0030             MOVS     R0,R6
   \   000014F0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000014F2   0xF003 0xBBFA      B.W      ??RoadBrd_ParseString_4
   \   000014F6   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_88:
   \   000014F8   0x........         DC32     ?_43
   \   000014FC   0x........         DC32     ?_44
   1752                            // Is this a BLE Operation?
   1753                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_232: (+1)
   \   00001500   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001502   0x2D00             CMP      R5,#+0
   \   00001504   0xD00E             BEQ.N    ??RoadBrd_ParseString_233
   1754                            {
   1755                              // Yes...Build and Send BLE Response NOW.
   1756                              sprintf( (char *)tempBffr2, "<STATUS>RED:%s/GREEN:%s/BLUE:%s</STATUS>", 
   1757                                      (char *)RGBValues.Red, 
   1758                                      (char *)RGBValues.Green,
   1759                                      (char *)RGBValues.Blue);
   \   00001506   0xA8B9             ADD      R0,SP,#+740
   \   00001508   0x9000             STR      R0,[SP, #+0]
   \   0000150A   0xABB7             ADD      R3,SP,#+732
   \   0000150C   0xAAB5             ADD      R2,SP,#+724
   \   0000150E   0xF8DF 0x1DD4      LDR.W    R1,??RoadBrd_ParseString_234
   \   00001512   0xA80B             ADD      R0,SP,#+44
   \   00001514   0x.... 0x....      BL       sprintf
   1760                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001518   0xA80B             ADD      R0,SP,#+44
   \   0000151A   0x.... 0x....      BL       strlen
   \   0000151E   0xA90B             ADD      R1,SP,#+44
   \   00001520   0x.... 0x....      BL       BGM111_Transmit
   1761                            }
   1762                            
   1763                            // Now DisplayEach Value Calculated.
   1764                            strcpy( (char *)tempBffr2, "    Red: ");
   \                     ??RoadBrd_ParseString_233: (+1)
   \   00001524   0xF8DF 0x1DC0      LDR.W    R1,??RoadBrd_ParseString_234+0x4
   \   00001528   0xA80B             ADD      R0,SP,#+44
   \   0000152A   0x.... 0x....      BL       strcpy
   1765                            strcat( (char *)tempBffr2, (char *)RGBValues.Red );
   \   0000152E   0xA9B5             ADD      R1,SP,#+724
   \   00001530   0xA80B             ADD      R0,SP,#+44
   \   00001532   0x.... 0x....      BL       strcat
   1766                            strcat( (char *)tempBffr2, "    Green: ");
   \   00001536   0xF8DF 0x1DB4      LDR.W    R1,??RoadBrd_ParseString_234+0x8
   \   0000153A   0xA80B             ADD      R0,SP,#+44
   \   0000153C   0x.... 0x....      BL       strcat
   1767                            strcat( (char *)tempBffr2, (char *)RGBValues.Green );
   \   00001540   0xA9B7             ADD      R1,SP,#+732
   \   00001542   0xA80B             ADD      R0,SP,#+44
   \   00001544   0x.... 0x....      BL       strcat
   1768                            strcat( (char *)tempBffr2, "    Blue: ");
   \   00001548   0xF8DF 0x1DD8      LDR.W    R1,??RoadBrd_ParseString_235
   \   0000154C   0xA80B             ADD      R0,SP,#+44
   \   0000154E   0x.... 0x....      BL       strcat
   1769                            strcat( (char *)tempBffr2, (char *)RGBValues.Blue );
   \   00001552   0xA9B9             ADD      R1,SP,#+740
   \   00001554   0xA80B             ADD      R0,SP,#+44
   \   00001556   0x.... 0x....      BL       strcat
   1770                            strcat( (char *)tempBffr2, "\r\n" );
   \   0000155A   0xA104             ADR.N    R1,??RoadBrd_ParseString_103+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   0000155C   0xA80B             ADD      R0,SP,#+44
   \   0000155E   0x.... 0x....      BL       strcat
   \   00001562   0xE261             B.N      ??RoadBrd_ParseString_236
   \                     ??RoadBrd_ParseString_103:
   \   00001564   0x........         DC32     ?_45
   \   00001568   0x........         DC32     ?_46
   \   0000156C   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
   1771                          }
   1772                          else
   1773                            break;
   \                     ??RoadBrd_ParseString_227: (+1)
   \   00001570   0xF003 0xBB39      B.W      ??RoadBrd_ParseString_26
   1774                        }
   1775                        else
   1776                        {
   1777                          switch( tempBffr[1] )
   \                     ??RoadBrd_ParseString_226: (+1)
   \   00001574   0x7860             LDRB     R0,[R4, #+1]
   \   00001576   0x2830             CMP      R0,#+48
   \   00001578   0xF000 0x815F      BEQ.W    ??RoadBrd_ParseString_237
   \   0000157C   0x2831             CMP      R0,#+49
   \   0000157E   0xF000 0x81CD      BEQ.W    ??RoadBrd_ParseString_238
   \   00001582   0x2832             CMP      R0,#+50
   \   00001584   0xF000 0x81FA      BEQ.W    ??RoadBrd_ParseString_239
   \   00001588   0x2833             CMP      R0,#+51
   \   0000158A   0xF000 0x8214      BEQ.W    ??RoadBrd_ParseString_240
   \   0000158E   0x2849             CMP      R0,#+73
   \   00001590   0xF040 0x8245      BNE.W    ??RoadBrd_ParseString_241
   1778                          {
   1779          //------------------ HI Command...Initialize RGB Color Light Sensor.....     
   1780                            case 'I':
   1781                              if (Size == 2)
   \                     ??RoadBrd_ParseString_242: (+1)
   \   00001594   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   00001598   0x2802             CMP      R0,#+2
   \   0000159A   0xD11A             BNE.N    ??RoadBrd_ParseString_243
   1782                              {
   1783                                // This is the default init. Assume Default Parms and write them.
   1784                                Status = RoadBrd_RGBInit();
   \   0000159C   0x.... 0x....      BL       RoadBrd_RGBInit
   \   000015A0   0x0006             MOVS     R6,R0
   1785          
   1786                                // Is this a BLE Operation?
   1787                                if ( BLE_Flag )
   \   000015A2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000015A4   0x2D00             CMP      R5,#+0
   \   000015A6   0xD00A             BEQ.N    ??RoadBrd_ParseString_244
   1788                                {
   1789                                  // Yes...Build and Send BLE Response NOW.
   1790                                  strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000015A8   0xF8DF 0x1A1C      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   000015AC   0xA80B             ADD      R0,SP,#+44
   \   000015AE   0x.... 0x....      BL       strcpy
   1791                                  BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000015B2   0xA80B             ADD      R0,SP,#+44
   \   000015B4   0x.... 0x....      BL       strlen
   \   000015B8   0xA90B             ADD      R1,SP,#+44
   \   000015BA   0x.... 0x....      BL       BGM111_Transmit
   1792                                }
   1793                                
   1794                                if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_244: (+1)
   \   000015BE   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000015C0   0x2E00             CMP      R6,#+0
   \   000015C2   0xF040 0x8139      BNE.W    ??RoadBrd_ParseString_245
   1795                                {
   1796                                  strcpy( (char *)tempBffr2, "RGB Color Light Sensor: Initialization Complete with DEFAULT Values.\r\n");;
   \   000015C6   0xF8DF 0x1D60      LDR.W    R1,??RoadBrd_ParseString_235+0x4
   \   000015CA   0xA80B             ADD      R0,SP,#+44
   \   000015CC   0x.... 0x....      BL       strcpy
   \   000015D0   0xE132             B.N      ??RoadBrd_ParseString_245
   1797                                }
   1798                                
   1799                              }
   1800                              else
   1801                              {
   1802                                // Is this a BLE Operation?
   1803                                if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_243: (+1)
   \   000015D2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000015D4   0x2D00             CMP      R5,#+0
   \   000015D6   0xD00A             BEQ.N    ??RoadBrd_ParseString_246
   1804                                {
   1805                                  // Yes...Build and Send BLE Response NOW.
   1806                                  strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000015D8   0xF8DF 0x19EC      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   000015DC   0xA80B             ADD      R0,SP,#+44
   \   000015DE   0x.... 0x....      BL       strcpy
   1807                                  BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000015E2   0xA80B             ADD      R0,SP,#+44
   \   000015E4   0x.... 0x....      BL       strlen
   \   000015E8   0xA90B             ADD      R1,SP,#+44
   \   000015EA   0x.... 0x....      BL       BGM111_Transmit
   1808                                }
   1809                                
   1810                                // This is the Parameter init. Will have to verify all parameters first.
   1811                                if ( Size != 29 )
   \                     ??RoadBrd_ParseString_246: (+1)
   \   000015EE   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   000015F2   0x281D             CMP      R0,#+29
   \   000015F4   0xD005             BEQ.N    ??RoadBrd_ParseString_247
   1812                                {
   1813                                  strcpy( (char *)tempBffr2, "RGB Color Light Sensor: SYNTAX Error. Parameters are not correct.\r\n");;
   \   000015F6   0xF8DF 0x1DCC      LDR.W    R1,??RoadBrd_ParseString_248
   \   000015FA   0xA80B             ADD      R0,SP,#+44
   \   000015FC   0x.... 0x....      BL       strcpy
   \   00001600   0xE11A             B.N      ??RoadBrd_ParseString_245
   1814                                }
   1815                                else
   1816                                {
   1817                                  // Step 1. Validate format.
   1818                                  if( (tempBffr[2]!=':') ||
   1819                                      (tempBffr[5]!='.') || 
   1820                                      (tempBffr[8]!='.') || 
   1821                                      (tempBffr[11]!='.') || 
   1822                                      (tempBffr[14]!='.') || 
   1823                                      (tempBffr[17]!='.') || 
   1824                                      (tempBffr[20]!='.') || 
   1825                                      (tempBffr[23]!='.') || 
   1826                                      (tempBffr[26]!='.') )
   \                     ??RoadBrd_ParseString_247: (+1)
   \   00001602   0x78A0             LDRB     R0,[R4, #+2]
   \   00001604   0x283A             CMP      R0,#+58
   \   00001606   0xD117             BNE.N    ??RoadBrd_ParseString_249
   \   00001608   0x7960             LDRB     R0,[R4, #+5]
   \   0000160A   0x282E             CMP      R0,#+46
   \   0000160C   0xD114             BNE.N    ??RoadBrd_ParseString_249
   \   0000160E   0x7A20             LDRB     R0,[R4, #+8]
   \   00001610   0x282E             CMP      R0,#+46
   \   00001612   0xD111             BNE.N    ??RoadBrd_ParseString_249
   \   00001614   0x7AE0             LDRB     R0,[R4, #+11]
   \   00001616   0x282E             CMP      R0,#+46
   \   00001618   0xD10E             BNE.N    ??RoadBrd_ParseString_249
   \   0000161A   0x7BA0             LDRB     R0,[R4, #+14]
   \   0000161C   0x282E             CMP      R0,#+46
   \   0000161E   0xD10B             BNE.N    ??RoadBrd_ParseString_249
   \   00001620   0x7C60             LDRB     R0,[R4, #+17]
   \   00001622   0x282E             CMP      R0,#+46
   \   00001624   0xD108             BNE.N    ??RoadBrd_ParseString_249
   \   00001626   0x7D20             LDRB     R0,[R4, #+20]
   \   00001628   0x282E             CMP      R0,#+46
   \   0000162A   0xD105             BNE.N    ??RoadBrd_ParseString_249
   \   0000162C   0x7DE0             LDRB     R0,[R4, #+23]
   \   0000162E   0x282E             CMP      R0,#+46
   \   00001630   0xD102             BNE.N    ??RoadBrd_ParseString_249
   \   00001632   0x7EA0             LDRB     R0,[R4, #+26]
   \   00001634   0x282E             CMP      R0,#+46
   \   00001636   0xD005             BEQ.N    ??RoadBrd_ParseString_250
   1827                                  {
   1828                                    strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: Not correct format. Punctuation!\r\n");
   \                     ??RoadBrd_ParseString_249: (+1)
   \   00001638   0xF8DF 0x1D94      LDR.W    R1,??RoadBrd_ParseString_248+0xC
   \   0000163C   0xA80B             ADD      R0,SP,#+44
   \   0000163E   0x.... 0x....      BL       strcpy
   \   00001642   0xE0F9             B.N      ??RoadBrd_ParseString_245
   1829                                  }
   1830                                  else
   1831                                  {
   1832                                    // Syntax correct. Time to grab parameters.
   1833                                    Error = 0;
   \                     ??RoadBrd_ParseString_250: (+1)
   \   00001644   0x2000             MOVS     R0,#+0
   \   00001646   0x9035             STR      R0,[SP, #+212]
   1834                                    for (x=0; x<9; x++)
   \   00001648   0x2000             MOVS     R0,#+0
   \   0000164A   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_251: (+1)
   \   0000164C   0x2F09             CMP      R7,#+9
   \   0000164E   0xDA26             BGE.N    ??RoadBrd_ParseString_252
   1835                                    {
   1836                                      tempBffr3[0] = tempBffr[3+x*3];
   \   00001650   0x2003             MOVS     R0,#+3
   \   00001652   0xFB00 0xF007      MUL      R0,R0,R7
   \   00001656   0x4420             ADD      R0,R4,R0
   \   00001658   0xF990 0x0003      LDRSB    R0,[R0, #+3]
   \   0000165C   0xF88D 0x00AC      STRB     R0,[SP, #+172]
   1837                                      tempBffr3[1] = tempBffr[4+x*3];
   \   00001660   0x2003             MOVS     R0,#+3
   \   00001662   0xFB00 0xF007      MUL      R0,R0,R7
   \   00001666   0x4420             ADD      R0,R4,R0
   \   00001668   0xF990 0x0004      LDRSB    R0,[R0, #+4]
   \   0000166C   0xF88D 0x00AD      STRB     R0,[SP, #+173]
   1838                                      tempBffr3[2] = 0x00;
   \   00001670   0x2000             MOVS     R0,#+0
   \   00001672   0xF88D 0x00AE      STRB     R0,[SP, #+174]
   1839                                      if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001676   0xA82B             ADD      R0,SP,#+172
   \   00001678   0x.... 0x....      BL       isHexNum
   \   0000167C   0x2800             CMP      R0,#+0
   \   0000167E   0xD107             BNE.N    ??RoadBrd_ParseString_253
   1840                                      {
   1841                                        strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR:Parameters not HEX Value.\r\n");
   \   00001680   0xF8DF 0x1DC8      LDR.W    R1,??RoadBrd_ParseString_254
   \   00001684   0xA80B             ADD      R0,SP,#+44
   \   00001686   0x.... 0x....      BL       strcpy
   1842                                        Error = 1;
   \   0000168A   0x2001             MOVS     R0,#+1
   \   0000168C   0x9035             STR      R0,[SP, #+212]
   1843                                        break;
   \   0000168E   0xE006             B.N      ??RoadBrd_ParseString_252
   1844                                      }
   1845                                      else
   1846                                      {
   1847                                        i2cData[x] =  hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_253: (+1)
   \   00001690   0xA82B             ADD      R0,SP,#+172
   \   00001692   0x.... 0x....      BL       hatoi
   \   00001696   0xA99A             ADD      R1,SP,#+616
   \   00001698   0x55C8             STRB     R0,[R1, R7]
   1848                                      } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)
   1849                                    } //EndFor (x=0; x<num_bytes; x++)
   \   0000169A   0x1C7F             ADDS     R7,R7,#+1
   \   0000169C   0xE7D6             B.N      ??RoadBrd_ParseString_251
   1850                                    // Format and parameters now in i2cData array. Pull them out and validate them.
   1851                                    // OP_MODE Verify.
   1852                                    if(i2cData[0]>7)
   \                     ??RoadBrd_ParseString_252: (+1)
   \   0000169E   0xF89D 0x0268      LDRB     R0,[SP, #+616]
   \   000016A2   0x2808             CMP      R0,#+8
   \   000016A4   0xDB05             BLT.N    ??RoadBrd_ParseString_255
   1853                                    {
   1854                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: OP_MODE.\r\n");
   \   000016A6   0xF8DF 0x1DA8      LDR.W    R1,??RoadBrd_ParseString_254+0x4
   \   000016AA   0xA80B             ADD      R0,SP,#+44
   \   000016AC   0x.... 0x....      BL       strcpy
   1855                                      break;
   \   000016B0   0xE1BA             B.N      ??RoadBrd_ParseString_236
   1856                                    }
   1857                                    else
   1858                                      op_mode = (i2cData[0] & 0x07) * 1;
   \                     ??RoadBrd_ParseString_255: (+1)
   \   000016B2   0xF89D 0x0268      LDRB     R0,[SP, #+616]
   \   000016B6   0xF010 0x0007      ANDS     R0,R0,#0x7
   \   000016BA   0xF88D 0x00CE      STRB     R0,[SP, #+206]
   1859                                    // DS_RANGE Verify.
   1860                                    if(i2cData[1]>1)
   \   000016BE   0xF89D 0x0269      LDRB     R0,[SP, #+617]
   \   000016C2   0x2802             CMP      R0,#+2
   \   000016C4   0xDB08             BLT.N    ??RoadBrd_ParseString_256
   1861                                    {
   1862                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: DS_RANGE.\r\n");
   \   000016C6   0xF8DF 0x1E04      LDR.W    R1,??RoadBrd_ParseString_257
   \   000016CA   0xA80B             ADD      R0,SP,#+44
   \   000016CC   0x.... 0x....      BL       strcpy
   1863                                      break;
   \   000016D0   0xE1AA             B.N      ??RoadBrd_ParseString_236
   \   000016D2   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_106:
   \   000016D4   0x........         DC32     ?_47
   1864                                    }
   1865                                    else
   1866                                      ds_range = (i2cData[1] & 0x01) * 8;
   \                     ??RoadBrd_ParseString_256: (+1)
   \   000016D8   0xF89D 0x0269      LDRB     R0,[SP, #+617]
   \   000016DC   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   000016E0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000016E2   0x00C0             LSLS     R0,R0,#+3
   \   000016E4   0xF88D 0x00CD      STRB     R0,[SP, #+205]
   1867                                    // ADC_RSL Verify.
   1868                                    if(i2cData[2]>1)
   \   000016E8   0xF89D 0x026A      LDRB     R0,[SP, #+618]
   \   000016EC   0x2802             CMP      R0,#+2
   \   000016EE   0xDB05             BLT.N    ??RoadBrd_ParseString_258
   1869                                    {
   1870                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: ADC_RSL.\r\n");
   \   000016F0   0xF8DF 0x1DDC      LDR.W    R1,??RoadBrd_ParseString_257+0x4
   \   000016F4   0xA80B             ADD      R0,SP,#+44
   \   000016F6   0x.... 0x....      BL       strcpy
   1871                                      break;
   \   000016FA   0xE195             B.N      ??RoadBrd_ParseString_236
   1872                                    }
   1873                                    else
   1874                                      adc_rsl = (i2cData[2] & 0x01) * 16;
   \                     ??RoadBrd_ParseString_258: (+1)
   \   000016FC   0xF89D 0x026A      LDRB     R0,[SP, #+618]
   \   00001700   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00001704   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001706   0x0100             LSLS     R0,R0,#+4
   \   00001708   0xF88D 0x00CC      STRB     R0,[SP, #+204]
   1875                                    // SYNC Verify.
   1876                                    if(i2cData[3]>1)
   \   0000170C   0xF89D 0x026B      LDRB     R0,[SP, #+619]
   \   00001710   0x2802             CMP      R0,#+2
   \   00001712   0xDB07             BLT.N    ??RoadBrd_ParseString_259
   1877                                    {
   1878                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: SYNC.\r\n");
   \   00001714   0xF8DF 0x1DBC      LDR.W    R1,??RoadBrd_ParseString_257+0x8
   \   00001718   0xA80B             ADD      R0,SP,#+44
   \   0000171A   0x.... 0x....      BL       strcpy
   1879                                      break;
   \   0000171E   0xE183             B.N      ??RoadBrd_ParseString_236
   \                     ??RoadBrd_ParseString_109:
   \   00001720   0x........         DC32     ?_48
   1880                                    }
   1881                                    else
   1882                                      sync = (i2cData[3] & 0x01) * 32;
   \                     ??RoadBrd_ParseString_259: (+1)
   \   00001724   0xF89D 0x026B      LDRB     R0,[SP, #+619]
   \   00001728   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   0000172C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000172E   0x0140             LSLS     R0,R0,#+5
   \   00001730   0xF88D 0x00CB      STRB     R0,[SP, #+203]
   1883                                    // CMP_ADJST Verify.
   1884                                    if(i2cData[4]>63)
   \   00001734   0xF89D 0x026C      LDRB     R0,[SP, #+620]
   \   00001738   0x2840             CMP      R0,#+64
   \   0000173A   0xDB05             BLT.N    ??RoadBrd_ParseString_260
   1885                                    {
   1886                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: CMP_ADJST.\r\n");
   \   0000173C   0xF8DF 0x1E10      LDR.W    R1,??RoadBrd_ParseString_261
   \   00001740   0xA80B             ADD      R0,SP,#+44
   \   00001742   0x.... 0x....      BL       strcpy
   1887                                      break;
   \   00001746   0xE16F             B.N      ??RoadBrd_ParseString_236
   1888                                    }
   1889                                    else
   1890                                      cmp_adjst = (i2cData[4] & 0x3f) * 1;
   \                     ??RoadBrd_ParseString_260: (+1)
   \   00001748   0xF89D 0x026C      LDRB     R0,[SP, #+620]
   \   0000174C   0xF010 0x003F      ANDS     R0,R0,#0x3F
   \   00001750   0xF88D 0x00CA      STRB     R0,[SP, #+202]
   1891                                    // CMP_OFFST Verify.
   1892                                    if(i2cData[5]>1)
   \   00001754   0xF89D 0x026D      LDRB     R0,[SP, #+621]
   \   00001758   0x2802             CMP      R0,#+2
   \   0000175A   0xDB07             BLT.N    ??RoadBrd_ParseString_262
   1893                                    {
   1894                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: CMP_OFFST.\r\n");
   \   0000175C   0xF8DF 0x1DF4      LDR.W    R1,??RoadBrd_ParseString_261+0x4
   \   00001760   0xA80B             ADD      R0,SP,#+44
   \   00001762   0x.... 0x....      BL       strcpy
   1895                                      break;
   \   00001766   0xE15F             B.N      ??RoadBrd_ParseString_236
   \                     ??RoadBrd_ParseString_116:
   \   00001768   0x........         DC32     ?_49
   1896                                    }
   1897                                    else
   1898                                      cmp_offst = (i2cData[5] & 0x01) * 128;
   \                     ??RoadBrd_ParseString_262: (+1)
   \   0000176C   0xF89D 0x026D      LDRB     R0,[SP, #+621]
   \   00001770   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00001774   0x2180             MOVS     R1,#+128
   \   00001776   0x4348             MULS     R0,R1,R0
   \   00001778   0xF88D 0x00C9      STRB     R0,[SP, #+201]
   1899                                    // INT_ASSGN Verify.
   1900                                    if(i2cData[6]>3)
   \   0000177C   0xF89D 0x026E      LDRB     R0,[SP, #+622]
   \   00001780   0x2804             CMP      R0,#+4
   \   00001782   0xDB05             BLT.N    ??RoadBrd_ParseString_263
   1901                                    {
   1902                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: INT_ASSGN.\r\n");
   \   00001784   0xF8DF 0x1DD0      LDR.W    R1,??RoadBrd_ParseString_261+0x8
   \   00001788   0xA80B             ADD      R0,SP,#+44
   \   0000178A   0x.... 0x....      BL       strcpy
   1903                                      break;
   \   0000178E   0xE14B             B.N      ??RoadBrd_ParseString_236
   1904                                    }
   1905                                    else
   1906                                      int_assgn = (i2cData[6] & 0x03) * 1;
   \                     ??RoadBrd_ParseString_263: (+1)
   \   00001790   0xF89D 0x026E      LDRB     R0,[SP, #+622]
   \   00001794   0xF010 0x0003      ANDS     R0,R0,#0x3
   \   00001798   0xF88D 0x00C8      STRB     R0,[SP, #+200]
   1907                                    // INT_PERSIST Verify.
   1908                                    if(i2cData[7]>3)
   \   0000179C   0xF89D 0x026F      LDRB     R0,[SP, #+623]
   \   000017A0   0x2804             CMP      R0,#+4
   \   000017A2   0xDB05             BLT.N    ??RoadBrd_ParseString_264
   1909                                    {
   1910                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: INT_PERSIST.\r\n");
   \   000017A4   0xF8DF 0x1E2C      LDR.W    R1,??RoadBrd_ParseString_265
   \   000017A8   0xA80B             ADD      R0,SP,#+44
   \   000017AA   0x.... 0x....      BL       strcpy
   1911                                      break;
   \   000017AE   0xE13B             B.N      ??RoadBrd_ParseString_236
   1912                                    }
   1913                                    else
   1914                                      int_persist = (i2cData[7] & 0x03) * 4;
   \                     ??RoadBrd_ParseString_264: (+1)
   \   000017B0   0xF89D 0x026F      LDRB     R0,[SP, #+623]
   \   000017B4   0xF010 0x0003      ANDS     R0,R0,#0x3
   \   000017B8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000017BA   0x0080             LSLS     R0,R0,#+2
   \   000017BC   0xF88D 0x002B      STRB     R0,[SP, #+43]
   1915                                    // CNVRSN_INT Verify.
   1916                                    if(i2cData[8]>1)
   \   000017C0   0xF89D 0x0270      LDRB     R0,[SP, #+624]
   \   000017C4   0x2802             CMP      R0,#+2
   \   000017C6   0xDB05             BLT.N    ??RoadBrd_ParseString_266
   1917                                    {
   1918                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: CNVRSN_INT.\r\n");
   \   000017C8   0xF8DF 0x1E0C      LDR.W    R1,??RoadBrd_ParseString_265+0x4
   \   000017CC   0xA80B             ADD      R0,SP,#+44
   \   000017CE   0x.... 0x....      BL       strcpy
   1919                                      break;
   \   000017D2   0xE129             B.N      ??RoadBrd_ParseString_236
   1920                                    }
   1921                                    else
   1922                                      cnvrsn_int = (i2cData[8] & 0x01) * 16;
   \                     ??RoadBrd_ParseString_266: (+1)
   \   000017D4   0xF89D 0x0270      LDRB     R0,[SP, #+624]
   \   000017D8   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   000017DC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000017DE   0x0100             LSLS     R0,R0,#+4
   \   000017E0   0xF88D 0x002A      STRB     R0,[SP, #+42]
   1923                                    // OK, all parameters have been verified. Time to build final params.
   1924                                    RGBMeasure.config1 = op_mode + ds_range + adc_rsl + sync;
   \   000017E4   0xF89D 0x00CE      LDRB     R0,[SP, #+206]
   \   000017E8   0xF89D 0x10CD      LDRB     R1,[SP, #+205]
   \   000017EC   0x1808             ADDS     R0,R1,R0
   \   000017EE   0xF89D 0x10CC      LDRB     R1,[SP, #+204]
   \   000017F2   0x1808             ADDS     R0,R1,R0
   \   000017F4   0xF89D 0x10CB      LDRB     R1,[SP, #+203]
   \   000017F8   0x1808             ADDS     R0,R1,R0
   \   000017FA   0xF88D 0x00EC      STRB     R0,[SP, #+236]
   1925                                    RGBMeasure.config2 = cmp_adjst + cmp_offst;
   \   000017FE   0xF89D 0x00CA      LDRB     R0,[SP, #+202]
   \   00001802   0xF89D 0x10C9      LDRB     R1,[SP, #+201]
   \   00001806   0x1808             ADDS     R0,R1,R0
   \   00001808   0xF88D 0x00ED      STRB     R0,[SP, #+237]
   1926                                    RGBMeasure.config3 = int_assgn + int_persist + cnvrsn_int;
   \   0000180C   0xF89D 0x00C8      LDRB     R0,[SP, #+200]
   \   00001810   0xF89D 0x102B      LDRB     R1,[SP, #+43]
   \   00001814   0x1808             ADDS     R0,R1,R0
   \   00001816   0xF89D 0x102A      LDRB     R1,[SP, #+42]
   \   0000181A   0x1808             ADDS     R0,R1,R0
   \   0000181C   0xF88D 0x00EE      STRB     R0,[SP, #+238]
   1927                                    // Load Config Register with Config Settings
   1928                                    Status = RoadBrd_RGBFullInit( &RGBMeasure );
   \   00001820   0xA83B             ADD      R0,SP,#+236
   \   00001822   0x.... 0x....      BL       RoadBrd_RGBFullInit
   \   00001826   0x0006             MOVS     R6,R0
   1929          
   1930                                    if (Status == HAL_OK)
   \   00001828   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000182A   0x2E00             CMP      R6,#+0
   \   0000182C   0xD104             BNE.N    ??RoadBrd_ParseString_245
   1931                                    {
   1932                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor: Initialization Complete with USER Values.\r\n");;
   \   0000182E   0xF8DF 0x1DAC      LDR.W    R1,??RoadBrd_ParseString_265+0x8
   \   00001832   0xA80B             ADD      R0,SP,#+44
   \   00001834   0x.... 0x....      BL       strcpy
   1933                                    }
   1934                                  } //ElseIf Validate format.
   1935                                } //ElseIf ( Size != 29 )
   1936                              } //ElseIf (Size == 2)
   1937                              break;
   \                     ??RoadBrd_ParseString_245: (+1)
   \   00001838   0xE0F6             B.N      ??RoadBrd_ParseString_236
   1938          //------------------ H0 Command...Read RGB Values and Return as 3 (2 Byte Fields)....REDmsb,REDlsb,GREENmsb,GREENlsb,BLUEmsb,BLUElsb.....     
   1939                            case '0':
   1940                              // 1. Time to send Command and collect status.
   1941                              Status = RoadBrd_RGBReadValues( &RGBValues );
   \                     ??RoadBrd_ParseString_237: (+1)
   \   0000183A   0xA8B5             ADD      R0,SP,#+724
   \   0000183C   0x.... 0x....      BL       RoadBrd_RGBReadValues
   \   00001840   0x0006             MOVS     R6,R0
   1942                              // Is this a BLE Operation?
   1943                              if ( BLE_Flag )
   \   00001842   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001844   0x2D00             CMP      R5,#+0
   \   00001846   0xD00A             BEQ.N    ??RoadBrd_ParseString_267
   1944                              {
   1945                                // Yes...Build and Send BLE Response NOW.
   1946                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001848   0xF8DF 0x177C      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   0000184C   0xA80B             ADD      R0,SP,#+44
   \   0000184E   0x.... 0x....      BL       strcpy
   1947                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001852   0xA80B             ADD      R0,SP,#+44
   \   00001854   0x.... 0x....      BL       strlen
   \   00001858   0xA90B             ADD      R1,SP,#+44
   \   0000185A   0x.... 0x....      BL       BGM111_Transmit
   1948                              }
   1949                              
   1950                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_267: (+1)
   \   0000185E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001860   0x2E00             CMP      R6,#+0
   \   00001862   0xD15A             BNE.N    ??RoadBrd_ParseString_268
   1951                              {
   1952                                // Send string to UART..
   1953                                strcpy( (char *)tempBffr2, "RGB Color Light Sensor...\r\n");
   \   00001864   0xF8DF 0x19F8      LDR.W    R1,??RoadBrd_ParseString_228
   \   00001868   0xA80B             ADD      R0,SP,#+44
   \   0000186A   0x.... 0x....      BL       strcpy
   1954          #ifdef NUCLEO
   1955                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1956          #else
   1957                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000186E   0xA90B             ADD      R1,SP,#+44
   \   00001870   0x2000             MOVS     R0,#+0
   \   00001872   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001876   0x0006             MOVS     R6,R0
   1958          #endif
   1959                                if (Status != HAL_OK)
   \   00001878   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000187A   0x2E00             CMP      R6,#+0
   \   0000187C   0xD003             BEQ.N    ??RoadBrd_ParseString_269
   1960                                  return Status;
   \   0000187E   0x0030             MOVS     R0,R6
   \   00001880   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001882   0xF003 0xBA32      B.W      ??RoadBrd_ParseString_4
   1961                                // NOW, Build Data String..
   1962                                sprintf( (char *)tempBffr2, " RGB(REDmsb,REDlsb,GREENmsb,GREENlsb,BLUEmsb,BLUElsb)\r\n" );
   \                     ??RoadBrd_ParseString_269: (+1)
   \   00001886   0xF8DF 0x1A08      LDR.W    R1,??RoadBrd_ParseString_230
   \   0000188A   0xA80B             ADD      R0,SP,#+44
   \   0000188C   0x.... 0x....      BL       sprintf
   1963          #ifdef NUCLEO
   1964                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1965          #else
   1966                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00001890   0xA90B             ADD      R1,SP,#+44
   \   00001892   0x2000             MOVS     R0,#+0
   \   00001894   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001898   0x0006             MOVS     R6,R0
   1967          #endif
   1968                                if (Status != HAL_OK)
   \   0000189A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000189C   0x2E00             CMP      R6,#+0
   \   0000189E   0xD003             BEQ.N    ??RoadBrd_ParseString_270
   1969                                  return Status;
   \   000018A0   0x0030             MOVS     R0,R6
   \   000018A2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000018A4   0xF003 0xBA21      B.W      ??RoadBrd_ParseString_4
   1970                                strcpy( (char *)tempBffr2, "       DATA: ");
   \                     ??RoadBrd_ParseString_270: (+1)
   \   000018A8   0xF8DF 0x19E8      LDR.W    R1,??RoadBrd_ParseString_230+0x4
   \   000018AC   0xA80B             ADD      R0,SP,#+44
   \   000018AE   0x.... 0x....      BL       strcpy
   1971                                strcat( (char *)tempBffr2, (char *)RGBValues.Raw );
   \   000018B2   0xA9BB             ADD      R1,SP,#+748
   \   000018B4   0xA80B             ADD      R0,SP,#+44
   \   000018B6   0x.... 0x....      BL       strcat
   1972                                strcat( (char *)tempBffr2, "\r\n" );
   \   000018BA   0xA1DC             ADR.N    R1,??RoadBrd_ParseString_171  ;; 0x0D, 0x0A, 0x00, 0x00
   \   000018BC   0xA80B             ADD      R0,SP,#+44
   \   000018BE   0x.... 0x....      BL       strcat
   1973          #ifdef NUCLEO
   1974                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1975          #else
   1976                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000018C2   0xA90B             ADD      R1,SP,#+44
   \   000018C4   0x2000             MOVS     R0,#+0
   \   000018C6   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000018CA   0x0006             MOVS     R6,R0
   1977          #endif
   1978                                if (Status != HAL_OK)
   \   000018CC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000018CE   0x2E00             CMP      R6,#+0
   \   000018D0   0xD003             BEQ.N    ??RoadBrd_ParseString_271
   1979                                  return Status;
   \   000018D2   0x0030             MOVS     R0,R6
   \   000018D4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000018D6   0xF003 0xBA08      B.W      ??RoadBrd_ParseString_4
   1980                                // Now DisplayEach Value Calculated.
   1981                                strcpy( (char *)tempBffr2, "    Red: ");
   \                     ??RoadBrd_ParseString_271: (+1)
   \   000018DA   0xF8DF 0x1A0C      LDR.W    R1,??RoadBrd_ParseString_234+0x4
   \   000018DE   0xA80B             ADD      R0,SP,#+44
   \   000018E0   0x.... 0x....      BL       strcpy
   1982                                strcat( (char *)tempBffr2, (char *)RGBValues.Red );
   \   000018E4   0xA9B5             ADD      R1,SP,#+724
   \   000018E6   0xA80B             ADD      R0,SP,#+44
   \   000018E8   0x.... 0x....      BL       strcat
   1983                                strcat( (char *)tempBffr2, "    Green: ");
   \   000018EC   0xF8DF 0x19FC      LDR.W    R1,??RoadBrd_ParseString_234+0x8
   \   000018F0   0xA80B             ADD      R0,SP,#+44
   \   000018F2   0x.... 0x....      BL       strcat
   1984                                strcat( (char *)tempBffr2, (char *)RGBValues.Green );
   \   000018F6   0xA9B7             ADD      R1,SP,#+732
   \   000018F8   0xA80B             ADD      R0,SP,#+44
   \   000018FA   0x.... 0x....      BL       strcat
   1985                                strcat( (char *)tempBffr2, "    Blue: ");
   \   000018FE   0xF8DF 0x1A24      LDR.W    R1,??RoadBrd_ParseString_235
   \   00001902   0xA80B             ADD      R0,SP,#+44
   \   00001904   0x.... 0x....      BL       strcat
   1986                                strcat( (char *)tempBffr2, (char *)RGBValues.Blue );
   \   00001908   0xA9B9             ADD      R1,SP,#+740
   \   0000190A   0xA80B             ADD      R0,SP,#+44
   \   0000190C   0x.... 0x....      BL       strcat
   1987                                strcat( (char *)tempBffr2, "\r\n" );
   \   00001910   0xA1C6             ADR.N    R1,??RoadBrd_ParseString_171  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001912   0xA80B             ADD      R0,SP,#+44
   \   00001914   0x.... 0x....      BL       strcat
   1988                              }
   1989                              else
   1990                                break;
   1991                              break;
   \   00001918   0xE086             B.N      ??RoadBrd_ParseString_236
   \                     ??RoadBrd_ParseString_268: (+1)
   \   0000191A   0xE085             B.N      ??RoadBrd_ParseString_236
   1992          //------------------ H1 Command...Read Status.....     
   1993                            case '1':
   1994                              // 1. Time to send Command and collect status.  RGBSMeasure
   1995                              Status = RoadBrd_RGBReadStatus( &RGBSMeasure );
   \                     ??RoadBrd_ParseString_238: (+1)
   \   0000191C   0xA857             ADD      R0,SP,#+348
   \   0000191E   0x.... 0x....      BL       RoadBrd_RGBReadStatus
   \   00001922   0x0006             MOVS     R6,R0
   1996          
   1997                              // Is this a BLE Operation?
   1998                              if ( BLE_Flag )
   \   00001924   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001926   0x2D00             CMP      R5,#+0
   \   00001928   0xD00A             BEQ.N    ??RoadBrd_ParseString_272
   1999                              {
   2000                                // Yes...Build and Send BLE Response NOW.
   2001                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   0000192A   0xF8DF 0x169C      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   0000192E   0xA80B             ADD      R0,SP,#+44
   \   00001930   0x.... 0x....      BL       strcpy
   2002                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001934   0xA80B             ADD      R0,SP,#+44
   \   00001936   0x.... 0x....      BL       strlen
   \   0000193A   0xA90B             ADD      R1,SP,#+44
   \   0000193C   0x.... 0x....      BL       BGM111_Transmit
   2003                              }
   2004                              
   2005                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_272: (+1)
   \   00001940   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001942   0x2E00             CMP      R6,#+0
   \   00001944   0xD119             BNE.N    ??RoadBrd_ParseString_273
   2006                              {
   2007                                // Build Status
   2008                                strcpy( (char *)tempBffr2, "RGB Color Light Sensor Status: ");
   \   00001946   0xF8DF 0x1DF4      LDR.W    R1,??RoadBrd_ParseString_274
   \   0000194A   0xA80B             ADD      R0,SP,#+44
   \   0000194C   0x.... 0x....      BL       strcpy
   2009                                sprintf( (char *)tempBffr3, "%02x / ", RGBSMeasure.status);
   \   00001950   0xF89D 0x215C      LDRB     R2,[SP, #+348]
   \   00001954   0xF8DF 0x1DE8      LDR.W    R1,??RoadBrd_ParseString_274+0x4
   \   00001958   0xA82B             ADD      R0,SP,#+172
   \   0000195A   0x.... 0x....      BL       sprintf
   2010                                strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   0000195E   0xA92B             ADD      R1,SP,#+172
   \   00001960   0xA80B             ADD      R0,SP,#+44
   \   00001962   0x.... 0x....      BL       strcat
   2011                                strcat( (char *)tempBffr2, (char *)RGBSMeasure.Raw );
   \   00001966   0xA957             ADD      R1,SP,#+348
   \   00001968   0x1C49             ADDS     R1,R1,#+1
   \   0000196A   0xA80B             ADD      R0,SP,#+44
   \   0000196C   0x.... 0x....      BL       strcat
   2012                                strcat( (char *)tempBffr2, "\r\n" );
   \   00001970   0xA1AE             ADR.N    R1,??RoadBrd_ParseString_171  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001972   0xA80B             ADD      R0,SP,#+44
   \   00001974   0x.... 0x....      BL       strcat
   2013                              }
   2014                              else
   2015                                break;
   2016                              break;
   \   00001978   0xE056             B.N      ??RoadBrd_ParseString_236
   \                     ??RoadBrd_ParseString_273: (+1)
   \   0000197A   0xE055             B.N      ??RoadBrd_ParseString_236
   2017          //------------------ H2 Command...Reset Hardware......     
   2018                            case '2':
   2019                              Status = RoadBrd_RGBReset();
   \                     ??RoadBrd_ParseString_239: (+1)
   \   0000197C   0x.... 0x....      BL       RoadBrd_RGBReset
   \   00001980   0x0006             MOVS     R6,R0
   2020                              // Is this a BLE Operation?
   2021                              if ( BLE_Flag )
   \   00001982   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001984   0x2D00             CMP      R5,#+0
   \   00001986   0xD00A             BEQ.N    ??RoadBrd_ParseString_275
   2022                              {
   2023                                // Yes...Build and Send BLE Response NOW.
   2024                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001988   0xF8DF 0x163C      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   0000198C   0xA80B             ADD      R0,SP,#+44
   \   0000198E   0x.... 0x....      BL       strcpy
   2025                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001992   0xA80B             ADD      R0,SP,#+44
   \   00001994   0x.... 0x....      BL       strlen
   \   00001998   0xA90B             ADD      R1,SP,#+44
   \   0000199A   0x.... 0x....      BL       BGM111_Transmit
   2026                              }
   2027                              
   2028                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_275: (+1)
   \   0000199E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000019A0   0x2E00             CMP      R6,#+0
   \   000019A2   0xD107             BNE.N    ??RoadBrd_ParseString_276
   2029                              {
   2030                                // Build Status
   2031                                strcpy( (char *)tempBffr2, "RGB Color Light Sensor: RESET CMD Sent Succesful.\r\n" );
   \   000019A4   0xF8DF 0x1E10      LDR.W    R1,??RoadBrd_ParseString_277
   \   000019A8   0xA80B             ADD      R0,SP,#+44
   \   000019AA   0x.... 0x....      BL       strcpy
   2032                              }
   2033                              else
   2034                                break;
   2035                              break;
   \   000019AE   0xE03B             B.N      ??RoadBrd_ParseString_236
   \                     ??RoadBrd_ParseString_138:
   \   000019B0   0x........         DC32     ?_50
   \                     ??RoadBrd_ParseString_276: (+1)
   \   000019B4   0xE038             B.N      ??RoadBrd_ParseString_236
   2036          //------------------ H3 Command...Read ID.....     
   2037                            case '3':
   2038                              // 1. Time to send Command and collect status.  IDMeasure
   2039                              Status = RoadBrd_RGBReadID( &IDMeasure );
   \                     ??RoadBrd_ParseString_240: (+1)
   \   000019B6   0xA859             ADD      R0,SP,#+356
   \   000019B8   0x.... 0x....      BL       RoadBrd_RGBReadID
   \   000019BC   0x0006             MOVS     R6,R0
   2040                              // Is this a BLE Operation?
   2041                              if ( BLE_Flag )
   \   000019BE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000019C0   0x2D00             CMP      R5,#+0
   \   000019C2   0xD00A             BEQ.N    ??RoadBrd_ParseString_278
   2042                              {
   2043                                // Yes...Build and Send BLE Response NOW.
   2044                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000019C4   0xF8DF 0x1600      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   000019C8   0xA80B             ADD      R0,SP,#+44
   \   000019CA   0x.... 0x....      BL       strcpy
   2045                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000019CE   0xA80B             ADD      R0,SP,#+44
   \   000019D0   0x.... 0x....      BL       strlen
   \   000019D4   0xA90B             ADD      R1,SP,#+44
   \   000019D6   0x.... 0x....      BL       BGM111_Transmit
   2046                              }
   2047                              
   2048                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_278: (+1)
   \   000019DA   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000019DC   0x2E00             CMP      R6,#+0
   \   000019DE   0xD11D             BNE.N    ??RoadBrd_ParseString_279
   2049                              {
   2050                                // Build Status
   2051                                strcpy( (char *)tempBffr2, "RGB Color Light Sensor ID Code: ");
   \   000019E0   0xF8DF 0x1DD8      LDR.W    R1,??RoadBrd_ParseString_277+0x4
   \   000019E4   0xA80B             ADD      R0,SP,#+44
   \   000019E6   0x.... 0x....      BL       strcpy
   2052                                sprintf( (char *)tempBffr3, "%02x / ", IDMeasure.id);
   \   000019EA   0xF89D 0x2164      LDRB     R2,[SP, #+356]
   \   000019EE   0xF8DF 0x1D50      LDR.W    R1,??RoadBrd_ParseString_274+0x4
   \   000019F2   0xA82B             ADD      R0,SP,#+172
   \   000019F4   0x.... 0x....      BL       sprintf
   2053                                strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   000019F8   0xA92B             ADD      R1,SP,#+172
   \   000019FA   0xA80B             ADD      R0,SP,#+44
   \   000019FC   0x.... 0x....      BL       strcat
   2054                                strcat( (char *)tempBffr2, (char *)IDMeasure.Raw );
   \   00001A00   0xA959             ADD      R1,SP,#+356
   \   00001A02   0x1C49             ADDS     R1,R1,#+1
   \   00001A04   0xA80B             ADD      R0,SP,#+44
   \   00001A06   0x.... 0x....      BL       strcat
   2055                                strcat( (char *)tempBffr2, "\r\n" );
   \   00001A0A   0xA188             ADR.N    R1,??RoadBrd_ParseString_171  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001A0C   0xA80B             ADD      R0,SP,#+44
   \   00001A0E   0x.... 0x....      BL       strcat
   2056                             }
   2057                              else
   2058                                break;
   2059                              break;
   \   00001A12   0xE009             B.N      ??RoadBrd_ParseString_236
   \                     ??RoadBrd_ParseString_142:
   \   00001A14   0x........         DC32     ?_51
   \   00001A18   0x........         DC32     ?_52
   \                     ??RoadBrd_ParseString_279: (+1)
   \   00001A1C   0xE004             B.N      ??RoadBrd_ParseString_236
   2060                            default:
   2061                              strcpy( (char *)tempBffr2, "ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_241: (+1)
   \   00001A1E   0xF8DF 0x1E14      LDR.W    R1,??RoadBrd_ParseString_280
   \   00001A22   0xA80B             ADD      R0,SP,#+44
   \   00001A24   0x.... 0x....      BL       strcpy
   2062                              break;
   2063                          } //EndSwitch
   2064                        } //EndElse (Size == 1)
   2065                        break;    
   \                     ??RoadBrd_ParseString_236: (+1)
   \   00001A28   0xF003 0xB8DD      B.W      ??RoadBrd_ParseString_26
   2066          //**************************************************************************************************
   2067                      case 'P':
   2068                        // POWER SYSTEM. 
   2069                        switch( tempBffr[1] )
   \                     ??RoadBrd_ParseString_20: (+1)
   \   00001A2C   0x7860             LDRB     R0,[R4, #+1]
   \   00001A2E   0x2844             CMP      R0,#+68
   \   00001A30   0xD018             BEQ.N    ??RoadBrd_ParseString_281
   \   00001A32   0x2855             CMP      R0,#+85
   \   00001A34   0xD11F             BNE.N    ??RoadBrd_ParseString_282
   2070                        {
   2071          //++++++++++++++++++++++++++++++++++++++++++  5V Power Supply Commands.
   2072                          case 'U':
   2073                            // Turn on 5V Power Supply.
   2074                            RoadBrd_gpio_On( gTAM_PWR );
   \                     ??RoadBrd_ParseString_283: (+1)
   \   00001A36   0x2004             MOVS     R0,#+4
   \   00001A38   0x.... 0x....      BL       RoadBrd_gpio_On
   2075                            // Is this a BLE Operation?
   2076                            if ( BLE_Flag )
   \   00001A3C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001A3E   0x2D00             CMP      R5,#+0
   \   00001A40   0xD00A             BEQ.N    ??RoadBrd_ParseString_284
   2077                            {
   2078                              // Yes...Build and Send BLE Response NOW.
   2079                              strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001A42   0xF8DF 0x1584      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   00001A46   0xA80B             ADD      R0,SP,#+44
   \   00001A48   0x.... 0x....      BL       strcpy
   2080                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001A4C   0xA80B             ADD      R0,SP,#+44
   \   00001A4E   0x.... 0x....      BL       strlen
   \   00001A52   0xA90B             ADD      R1,SP,#+44
   \   00001A54   0x.... 0x....      BL       BGM111_Transmit
   2081                            }
   2082                            
   2083                            strcpy( (char *)tempBffr2, "5V Power Plane Powered UP.\r\n");
   \                     ??RoadBrd_ParseString_284: (+1)
   \   00001A58   0xF8DF 0x1DDC      LDR.W    R1,??RoadBrd_ParseString_280+0x4
   \   00001A5C   0xA80B             ADD      R0,SP,#+44
   \   00001A5E   0x.... 0x....      BL       strcpy
   2084                            break;
   \   00001A62   0xE00D             B.N      ??RoadBrd_ParseString_285
   2085                          case 'D':
   2086                            // Turn off 5V Power Supply.
   2087                            RoadBrd_gpio_Off( gTAM_PWR );
   \                     ??RoadBrd_ParseString_281: (+1)
   \   00001A64   0x2004             MOVS     R0,#+4
   \   00001A66   0x.... 0x....      BL       RoadBrd_gpio_Off
   2088                            strcpy( (char *)tempBffr2, "5V Power Plane Powered DOWN.\r\n");
   \   00001A6A   0xF8DF 0x1DD0      LDR.W    R1,??RoadBrd_ParseString_280+0x8
   \   00001A6E   0xA80B             ADD      R0,SP,#+44
   \   00001A70   0x.... 0x....      BL       strcpy
   2089                            break;
   \   00001A74   0xE004             B.N      ??RoadBrd_ParseString_285
   2090                          default:
   2091                            strcpy( (char *)tempBffr2, "ERROR: Illegal 5V Power Plane Command.\r\n");
   \                     ??RoadBrd_ParseString_282: (+1)
   \   00001A76   0xF8DF 0x1DC8      LDR.W    R1,??RoadBrd_ParseString_280+0xC
   \   00001A7A   0xA80B             ADD      R0,SP,#+44
   \   00001A7C   0x.... 0x....      BL       strcpy
   2092                            break;
   2093                        }
   2094                        break;
   \                     ??RoadBrd_ParseString_285: (+1)
   \   00001A80   0xF003 0xB8B1      B.W      ??RoadBrd_ParseString_26
   \                     ??RoadBrd_ParseString_147:
   \   00001A84   0x........         DC32     ?_53
   2095          //**************************************************************************************************
   2096                      case 'T':
   2097                        // TEST CMDS. 
   2098                        // Test Size to make sure we have enough Characters for this operation
   2099                        if (Size <= 1)
   \                     ??RoadBrd_ParseString_21: (+1)
   \   00001A88   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   00001A8C   0x2802             CMP      R0,#+2
   \   00001A8E   0xDA19             BGE.N    ??RoadBrd_ParseString_286
   2100                        {
   2101                          // Is this a BLE Operation?
   2102                          if ( BLE_Flag )
   \   00001A90   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001A92   0x2D00             CMP      R5,#+0
   \   00001A94   0xD00A             BEQ.N    ??RoadBrd_ParseString_287
   2103                          {
   2104                            // Yes...Build and Send BLE Response NOW.
   2105                            strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001A96   0xF8DF 0x1530      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   00001A9A   0xA80B             ADD      R0,SP,#+44
   \   00001A9C   0x.... 0x....      BL       strcpy
   2106                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001AA0   0xA80B             ADD      R0,SP,#+44
   \   00001AA2   0x.... 0x....      BL       strlen
   \   00001AA6   0xA90B             ADD      R1,SP,#+44
   \   00001AA8   0x.... 0x....      BL       BGM111_Transmit
   2107                          }
   2108                          
   2109                          strcpy( (char *)tempBffr2, "T ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_287: (+1)
   \   00001AAC   0xF8DF 0x1E08      LDR.W    R1,??RoadBrd_ParseString_288
   \   00001AB0   0xA80B             ADD      R0,SP,#+44
   \   00001AB2   0x.... 0x....      BL       strcpy
   \   00001AB6   0xF003 0xB884      B.W      ??RoadBrd_ParseString_289
   \   00001ABA   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_148:
   \   00001ABC   0x........         DC32     ?_54
   \   00001AC0   0x........         DC32     ?_55
   2110                        }
   2111                        else
   2112                        {
   2113                          switch( tempBffr[1] )
   \                     ??RoadBrd_ParseString_286: (+1)
   \   00001AC4   0x7860             LDRB     R0,[R4, #+1]
   \   00001AC6   0x2842             CMP      R0,#+66
   \   00001AC8   0xF002 0x86D9      BEQ.W    ??RoadBrd_ParseString_290
   \   00001ACC   0x2843             CMP      R0,#+67
   \   00001ACE   0xF000 0x82F3      BEQ.W    ??RoadBrd_ParseString_291
   \   00001AD2   0x2844             CMP      R0,#+68
   \   00001AD4   0xF002 0x821D      BEQ.W    ??RoadBrd_ParseString_292
   \   00001AD8   0x2846             CMP      R0,#+70
   \   00001ADA   0xF002 0x8685      BEQ.W    ??RoadBrd_ParseString_293
   \   00001ADE   0x2849             CMP      R0,#+73
   \   00001AE0   0xD013             BEQ.N    ??RoadBrd_ParseString_294
   \   00001AE2   0x284B             CMP      R0,#+75
   \   00001AE4   0xF002 0x8250      BEQ.W    ??RoadBrd_ParseString_295
   \   00001AE8   0x284C             CMP      R0,#+76
   \   00001AEA   0xF002 0x8693      BEQ.W    ??RoadBrd_ParseString_296
   \   00001AEE   0x284D             CMP      R0,#+77
   \   00001AF0   0xF002 0x8650      BEQ.W    ??RoadBrd_ParseString_297
   \   00001AF4   0x2852             CMP      R0,#+82
   \   00001AF6   0xF002 0x822B      BEQ.W    ??RoadBrd_ParseString_298
   \   00001AFA   0x2853             CMP      R0,#+83
   \   00001AFC   0xF002 0x86EA      BEQ.W    ??RoadBrd_ParseString_299
   \   00001B00   0x2855             CMP      R0,#+85
   \   00001B02   0xF002 0x85DD      BEQ.W    ??RoadBrd_ParseString_300
   \   00001B06   0xF003 0xB84B      B.W      ??RoadBrd_ParseString_301
   2114                          {
   2115          //++++++++++++++++++++++++++++++++++++++++++  I2C Commands.
   2116                            case 'I':
   2117                              // I2C Commands.
   2118                              // Test Size to make sure we have enough Characters for this operation
   2119                              if (Size < 9)
   \                     ??RoadBrd_ParseString_294: (+1)
   \   00001B0A   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   00001B0E   0x2809             CMP      R0,#+9
   \   00001B10   0xDA13             BGE.N    ??RoadBrd_ParseString_302
   2120                              {
   2121                                // Is this a BLE Operation?
   2122                                if ( BLE_Flag )
   \   00001B12   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001B14   0x2D00             CMP      R5,#+0
   \   00001B16   0xD00A             BEQ.N    ??RoadBrd_ParseString_303
   2123                                {
   2124                                  // Yes...Build and Send BLE Response NOW.
   2125                                  strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001B18   0xF8DF 0x14AC      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   00001B1C   0xA80B             ADD      R0,SP,#+44
   \   00001B1E   0x.... 0x....      BL       strcpy
   2126                                  BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001B22   0xA80B             ADD      R0,SP,#+44
   \   00001B24   0x.... 0x....      BL       strlen
   \   00001B28   0xA90B             ADD      R1,SP,#+44
   \   00001B2A   0x.... 0x....      BL       BGM111_Transmit
   2127                                }
   2128                                
   2129                                strcpy( (char *)tempBffr2, "TI SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_303: (+1)
   \   00001B2E   0xF8DF 0x1E00      LDR.W    R1,??RoadBrd_ParseString_304
   \   00001B32   0xA80B             ADD      R0,SP,#+44
   \   00001B34   0x.... 0x....      BL       strcpy
   \   00001B38   0xE2B3             B.N      ??RoadBrd_ParseString_305
   2130                              }
   2131                              else
   2132                              {
   2133                                switch( tempBffr[2] )
   \                     ??RoadBrd_ParseString_302: (+1)
   \   00001B3A   0x78A0             LDRB     R0,[R4, #+2]
   \   00001B3C   0x2851             CMP      R0,#+81
   \   00001B3E   0xF000 0x8204      BEQ.W    ??RoadBrd_ParseString_306
   \   00001B42   0xF0C0 0x82A9      BCC.W    ??RoadBrd_ParseString_307
   \   00001B46   0x2853             CMP      R0,#+83
   \   00001B48   0xD002             BEQ.N    ??RoadBrd_ParseString_308
   \   00001B4A   0xF0C0 0x80D5      BCC.W    ??RoadBrd_ParseString_309
   \   00001B4E   0xE2A3             B.N      ??RoadBrd_ParseString_307
   2134                                {
   2135          //------------------
   2136                                  case 'S':
   2137                                    //I2C Send Command.
   2138                                    // Step 1. Validate format.
   2139                                    if( (tempBffr[3]!=':') ||
   2140                                        (tempBffr[6]!='.') )
   \                     ??RoadBrd_ParseString_308: (+1)
   \   00001B50   0x78E0             LDRB     R0,[R4, #+3]
   \   00001B52   0x283A             CMP      R0,#+58
   \   00001B54   0xD102             BNE.N    ??RoadBrd_ParseString_310
   \   00001B56   0x79A0             LDRB     R0,[R4, #+6]
   \   00001B58   0x282E             CMP      R0,#+46
   \   00001B5A   0xD01B             BEQ.N    ??RoadBrd_ParseString_311
   2141                                    {
   2142                                      // Is this a BLE Operation?
   2143                                      if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_310: (+1)
   \   00001B5C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001B5E   0x2D00             CMP      R5,#+0
   \   00001B60   0xD00A             BEQ.N    ??RoadBrd_ParseString_312
   2144                                      {
   2145                                        // Yes...Build and Send BLE Response NOW.
   2146                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001B62   0xF8DF 0x1464      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   00001B66   0xA80B             ADD      R0,SP,#+44
   \   00001B68   0x.... 0x....      BL       strcpy
   2147                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001B6C   0xA80B             ADD      R0,SP,#+44
   \   00001B6E   0x.... 0x....      BL       strlen
   \   00001B72   0xA90B             ADD      R1,SP,#+44
   \   00001B74   0x.... 0x....      BL       BGM111_Transmit
   2148                                      }
   2149                                     
   2150                                      strcpy( (char *)tempBffr2, "TIS SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_312: (+1)
   \   00001B78   0xF8DF 0x1E2C      LDR.W    R1,??RoadBrd_ParseString_313
   \   00001B7C   0xA80B             ADD      R0,SP,#+44
   \   00001B7E   0x.... 0x....      BL       strcpy
   \   00001B82   0xE0B8             B.N      ??RoadBrd_ParseString_314
   \                     ??RoadBrd_ParseString_164:
   \   00001B84   0x........         DC32     ?_56
   \   00001B88   0x........         DC32     ?_57
   \   00001B8C   0x........         DC32     ?_58
   \   00001B90   0x........         DC32     ?_59
   2151                                    }
   2152                                    else
   2153                                    {
   2154                                      // Is this a BLE Operation?
   2155                                      if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_311: (+1)
   \   00001B94   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001B96   0x2D00             CMP      R5,#+0
   \   00001B98   0xD00A             BEQ.N    ??RoadBrd_ParseString_315
   2156                                      {
   2157                                        // Yes...Build and Send BLE Response NOW.
   2158                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001B9A   0xF8DF 0x142C      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   00001B9E   0xA80B             ADD      R0,SP,#+44
   \   00001BA0   0x.... 0x....      BL       strcpy
   2159                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001BA4   0xA80B             ADD      R0,SP,#+44
   \   00001BA6   0x.... 0x....      BL       strlen
   \   00001BAA   0xA90B             ADD      R1,SP,#+44
   \   00001BAC   0x.... 0x....      BL       BGM111_Transmit
   2160                                      }
   2161                                      
   2162                                      // 2. Grab Address and validate a legal number
   2163                                      tempBffr3[0] = tempBffr[4];
   \                     ??RoadBrd_ParseString_315: (+1)
   \   00001BB0   0xF994 0x0004      LDRSB    R0,[R4, #+4]
   \   00001BB4   0xF88D 0x00AC      STRB     R0,[SP, #+172]
   2164                                      tempBffr3[1] = tempBffr[5];
   \   00001BB8   0xF994 0x0005      LDRSB    R0,[R4, #+5]
   \   00001BBC   0xF88D 0x00AD      STRB     R0,[SP, #+173]
   2165                                      tempBffr3[2] = 0x00;
   \   00001BC0   0x2000             MOVS     R0,#+0
   \   00001BC2   0xF88D 0x00AE      STRB     R0,[SP, #+174]
   2166                                      if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001BC6   0xA82B             ADD      R0,SP,#+172
   \   00001BC8   0x.... 0x....      BL       isHexNum
   \   00001BCC   0x2800             CMP      R0,#+0
   \   00001BCE   0xD105             BNE.N    ??RoadBrd_ParseString_316
   2167                                        strcpy( (char *)tempBffr2, "TIS SYNTAX ERROR: Address not HEX Value.\r\n");
   \   00001BD0   0xF8DF 0x1DD8      LDR.W    R1,??RoadBrd_ParseString_313+0x4
   \   00001BD4   0xA80B             ADD      R0,SP,#+44
   \   00001BD6   0x.... 0x....      BL       strcpy
   \   00001BDA   0xE08C             B.N      ??RoadBrd_ParseString_314
   2168                                      else
   2169                                      {
   2170                                        // Legal Address. Save it as value
   2171                                        Address = hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_316: (+1)
   \   00001BDC   0xA82B             ADD      R0,SP,#+172
   \   00001BDE   0x.... 0x....      BL       hatoi
   \   00001BE2   0x9031             STR      R0,[SP, #+196]
   2172                                        // 3. Now get the number of bytes of data from field.
   2173          //                              sprintf( (char *)tempBffr2, "TIS: Good Address: %x.\r\n", Address);
   2174                                        tempBffr3[0] = tempBffr[7];
   \   00001BE4   0xF994 0x0007      LDRSB    R0,[R4, #+7]
   \   00001BE8   0xF88D 0x00AC      STRB     R0,[SP, #+172]
   2175                                        tempBffr3[1] = tempBffr[8];
   \   00001BEC   0xF994 0x0008      LDRSB    R0,[R4, #+8]
   \   00001BF0   0xF88D 0x00AD      STRB     R0,[SP, #+173]
   2176                                        tempBffr3[2] = 0x00;
   \   00001BF4   0x2000             MOVS     R0,#+0
   \   00001BF6   0xF88D 0x00AE      STRB     R0,[SP, #+174]
   2177                                        if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001BFA   0xA82B             ADD      R0,SP,#+172
   \   00001BFC   0x.... 0x....      BL       isHexNum
   \   00001C00   0x2800             CMP      R0,#+0
   \   00001C02   0xD105             BNE.N    ??RoadBrd_ParseString_317
   2178                                          strcpy( (char *)tempBffr2, "TIS SYNTAX ERROR: Number of Bytes not HEX Value.\r\n");
   \   00001C04   0xF8DF 0x1DA8      LDR.W    R1,??RoadBrd_ParseString_313+0x8
   \   00001C08   0xA80B             ADD      R0,SP,#+44
   \   00001C0A   0x.... 0x....      BL       strcpy
   \   00001C0E   0xE072             B.N      ??RoadBrd_ParseString_314
   2179                                        else
   2180                                        {
   2181                                          // Legal NUMBER BYTES. Save it as value
   2182                                          num_bytes = hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_317: (+1)
   \   00001C10   0xA82B             ADD      R0,SP,#+172
   \   00001C12   0x.... 0x....      BL       hatoi
   \   00001C16   0x9034             STR      R0,[SP, #+208]
   2183                                          // 4. Test num_bytes. If Zero, We are done
   2184                                          if (num_bytes == 0)
   \   00001C18   0x9834             LDR      R0,[SP, #+208]
   \   00001C1A   0x2800             CMP      R0,#+0
   \   00001C1C   0xD114             BNE.N    ??RoadBrd_ParseString_318
   2185                                          {
   2186                                            sprintf( (char *)tempBffr2, "TIS: GOOD CMD: %x.\r\n", Address);
   \   00001C1E   0x9A31             LDR      R2,[SP, #+196]
   \   00001C20   0xF8DF 0x1D90      LDR.W    R1,??RoadBrd_ParseString_313+0xC
   \   00001C24   0xA80B             ADD      R0,SP,#+44
   \   00001C26   0x.... 0x....      BL       sprintf
   \   00001C2A   0xE03B             B.N      ??RoadBrd_ParseString_319
   \                     ??RoadBrd_ParseString_171:
   \   00001C2C   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
   \   00001C30   0x........         DC32     ?_60
   \   00001C34   0x........         DC32     ?_61
   \   00001C38   0x........         DC32     ?_62
   \   00001C3C   0x........         DC32     ?_63
   \   00001C40   0x........         DC32     ?_64
   \   00001C44   0x........         DC32     ?_65
   2187                                          }
   2188                                          else
   2189                                          {
   2190                                            // 5. Time to get all the data.
   2191                                            Error = 0;
   \                     ??RoadBrd_ParseString_318: (+1)
   \   00001C48   0x2000             MOVS     R0,#+0
   \   00001C4A   0x9035             STR      R0,[SP, #+212]
   2192                                            for (x=0; x<num_bytes; x++)
   \   00001C4C   0x2000             MOVS     R0,#+0
   \   00001C4E   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_320: (+1)
   \   00001C50   0x9834             LDR      R0,[SP, #+208]
   \   00001C52   0x4287             CMP      R7,R0
   \   00001C54   0xDA26             BGE.N    ??RoadBrd_ParseString_319
   2193                                            {
   2194                                              tempBffr3[0] = tempBffr[10+x*3];
   \   00001C56   0x2003             MOVS     R0,#+3
   \   00001C58   0xFB00 0xF007      MUL      R0,R0,R7
   \   00001C5C   0x4420             ADD      R0,R4,R0
   \   00001C5E   0xF990 0x000A      LDRSB    R0,[R0, #+10]
   \   00001C62   0xF88D 0x00AC      STRB     R0,[SP, #+172]
   2195                                              tempBffr3[1] = tempBffr[11+x*3];
   \   00001C66   0x2003             MOVS     R0,#+3
   \   00001C68   0xFB00 0xF007      MUL      R0,R0,R7
   \   00001C6C   0x4420             ADD      R0,R4,R0
   \   00001C6E   0xF990 0x000B      LDRSB    R0,[R0, #+11]
   \   00001C72   0xF88D 0x00AD      STRB     R0,[SP, #+173]
   2196                                              tempBffr3[2] = 0x00;
   \   00001C76   0x2000             MOVS     R0,#+0
   \   00001C78   0xF88D 0x00AE      STRB     R0,[SP, #+174]
   2197                                              if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001C7C   0xA82B             ADD      R0,SP,#+172
   \   00001C7E   0x.... 0x....      BL       isHexNum
   \   00001C82   0x2800             CMP      R0,#+0
   \   00001C84   0xD107             BNE.N    ??RoadBrd_ParseString_321
   2198                                              {
   2199                                                strcpy( (char *)tempBffr2, "TIS SYNTAX ERROR: Address not HEX Value.\r\n");
   \   00001C86   0xF8DF 0x1D24      LDR.W    R1,??RoadBrd_ParseString_313+0x4
   \   00001C8A   0xA80B             ADD      R0,SP,#+44
   \   00001C8C   0x.... 0x....      BL       strcpy
   2200                                                Error = 1;
   \   00001C90   0x2001             MOVS     R0,#+1
   \   00001C92   0x9035             STR      R0,[SP, #+212]
   2201                                                break;
   \   00001C94   0xE006             B.N      ??RoadBrd_ParseString_319
   2202                                              }
   2203                                              else
   2204                                              {
   2205                                                i2cData[x] =  hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_321: (+1)
   \   00001C96   0xA82B             ADD      R0,SP,#+172
   \   00001C98   0x.... 0x....      BL       hatoi
   \   00001C9C   0xA99A             ADD      R1,SP,#+616
   \   00001C9E   0x55C8             STRB     R0,[R1, R7]
   2206                                              } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)
   2207                                            } //EndFor (x=0; x<num_bytes; x++)
   \   00001CA0   0x1C7F             ADDS     R7,R7,#+1
   \   00001CA2   0xE7D5             B.N      ??RoadBrd_ParseString_320
   2208                                          } //EndElse (num_bytes == 0)
   2209                                          if (Error==0)
   \                     ??RoadBrd_ParseString_319: (+1)
   \   00001CA4   0x9835             LDR      R0,[SP, #+212]
   \   00001CA6   0x2800             CMP      R0,#+0
   \   00001CA8   0xD105             BNE.N    ??RoadBrd_ParseString_322
   2210                                          {
   2211                                            sprintf( (char *)tempBffr2, "TIS: GOOD CMD: %x.", Address);
   \   00001CAA   0x9A31             LDR      R2,[SP, #+196]
   \   00001CAC   0xF8DF 0x1DEC      LDR.W    R1,??RoadBrd_ParseString_323
   \   00001CB0   0xA80B             ADD      R0,SP,#+44
   \   00001CB2   0x.... 0x....      BL       sprintf
   2212                                          }
   2213                                          for(x=0; x<num_bytes; x++)
   \                     ??RoadBrd_ParseString_322: (+1)
   \   00001CB6   0x2000             MOVS     R0,#+0
   \   00001CB8   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_324: (+1)
   \   00001CBA   0x9834             LDR      R0,[SP, #+208]
   \   00001CBC   0x4287             CMP      R7,R0
   \   00001CBE   0xDA0B             BGE.N    ??RoadBrd_ParseString_325
   2214                                          {
   2215                                            sprintf( (char *)tempBffr3, "%x.", i2cData[x]);
   \   00001CC0   0xA89A             ADD      R0,SP,#+616
   \   00001CC2   0x5DC2             LDRB     R2,[R0, R7]
   \   00001CC4   0xA1C1             ADR.N    R1,??RoadBrd_ParseString_207+0x8  ;; "%x."
   \   00001CC6   0xA82B             ADD      R0,SP,#+172
   \   00001CC8   0x.... 0x....      BL       sprintf
   2216                                            strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   00001CCC   0xA92B             ADD      R1,SP,#+172
   \   00001CCE   0xA80B             ADD      R0,SP,#+44
   \   00001CD0   0x.... 0x....      BL       strcat
   2217                                          }
   \   00001CD4   0x1C7F             ADDS     R7,R7,#+1
   \   00001CD6   0xE7F0             B.N      ??RoadBrd_ParseString_324
   2218                                          strcat( (char *)tempBffr2, "\r\n" );
   \                     ??RoadBrd_ParseString_325: (+1)
   \   00001CD8   0xA1BD             ADR.N    R1,??RoadBrd_ParseString_207+0xC  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001CDA   0xA80B             ADD      R0,SP,#+44
   \   00001CDC   0x.... 0x....      BL       strcat
   2219                                          // 6. Time to send Command and collect status.
   2220                                          Status =  RoadBrd_I2C_Master_Transmit((uint16_t)Address, i2cData, (uint16_t)num_bytes, I2C_TIMEOUT);
   \   00001CE0   0xF44F 0x73FA      MOV      R3,#+500
   \   00001CE4   0x9834             LDR      R0,[SP, #+208]
   \   00001CE6   0x0002             MOVS     R2,R0
   \   00001CE8   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00001CEA   0xA99A             ADD      R1,SP,#+616
   \   00001CEC   0x9831             LDR      R0,[SP, #+196]
   \   00001CEE   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00001CF0   0x.... 0x....      BL       RoadBrd_I2C_Master_Transmit
   \   00001CF4   0x0006             MOVS     R6,R0
   2221                                          
   2222                                        } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)...NUMBER BYTES
   2223                                        
   2224                                      } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)...Address
   2225                                      
   2226                                    } //EndElse ( (tempBffr[2]!=':') || (tempBffr[5]!='.') )
   2227                                
   2228                                    break;
   \                     ??RoadBrd_ParseString_314: (+1)
   \   00001CF6   0xE1D4             B.N      ??RoadBrd_ParseString_305
   2229          //------------------
   2230                                  case 'R':
   2231                                    //I2C Receive Command
   2232                                    // Step 1. Validate format.
   2233                                    if( (tempBffr[3]!=':') ||
   2234                                        (tempBffr[6]!='.') ||
   2235                                        (tempBffr[9]!='.')  )
   \                     ??RoadBrd_ParseString_309: (+1)
   \   00001CF8   0x78E0             LDRB     R0,[R4, #+3]
   \   00001CFA   0x283A             CMP      R0,#+58
   \   00001CFC   0xD105             BNE.N    ??RoadBrd_ParseString_326
   \   00001CFE   0x79A0             LDRB     R0,[R4, #+6]
   \   00001D00   0x282E             CMP      R0,#+46
   \   00001D02   0xD102             BNE.N    ??RoadBrd_ParseString_326
   \   00001D04   0x7A60             LDRB     R0,[R4, #+9]
   \   00001D06   0x282E             CMP      R0,#+46
   \   00001D08   0xD012             BEQ.N    ??RoadBrd_ParseString_327
   2236                                    {
   2237                                      // Is this a BLE Operation?
   2238                                      if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_326: (+1)
   \   00001D0A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001D0C   0x2D00             CMP      R5,#+0
   \   00001D0E   0xD009             BEQ.N    ??RoadBrd_ParseString_328
   2239                                      {
   2240                                        // Yes...Build and Send BLE Response NOW.
   2241                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001D10   0x49AD             LDR.N    R1,??RoadBrd_ParseString_207+0x4
   \   00001D12   0xA80B             ADD      R0,SP,#+44
   \   00001D14   0x.... 0x....      BL       strcpy
   2242                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001D18   0xA80B             ADD      R0,SP,#+44
   \   00001D1A   0x.... 0x....      BL       strlen
   \   00001D1E   0xA90B             ADD      R1,SP,#+44
   \   00001D20   0x.... 0x....      BL       BGM111_Transmit
   2243                                      }
   2244                                      
   2245                                      strcpy( (char *)tempBffr2, "TIR SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_328: (+1)
   \   00001D24   0xF8DF 0x1DEC      LDR.W    R1,??RoadBrd_ParseString_329
   \   00001D28   0xA80B             ADD      R0,SP,#+44
   \   00001D2A   0x.... 0x....      BL       strcpy
   \   00001D2E   0xE10B             B.N      ??RoadBrd_ParseString_330
   2246                                    }
   2247                                    else
   2248                                    {
   2249                                      // Is this a BLE Operation?
   2250                                      if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_327: (+1)
   \   00001D30   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001D32   0x2D00             CMP      R5,#+0
   \   00001D34   0xD009             BEQ.N    ??RoadBrd_ParseString_331
   2251                                      {
   2252                                        // Yes...Build and Send BLE Response NOW.
   2253                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001D36   0x49A4             LDR.N    R1,??RoadBrd_ParseString_207+0x4
   \   00001D38   0xA80B             ADD      R0,SP,#+44
   \   00001D3A   0x.... 0x....      BL       strcpy
   2254                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001D3E   0xA80B             ADD      R0,SP,#+44
   \   00001D40   0x.... 0x....      BL       strlen
   \   00001D44   0xA90B             ADD      R1,SP,#+44
   \   00001D46   0x.... 0x....      BL       BGM111_Transmit
   2255                                      }
   2256                                      
   2257                                      // 2. Grab Address and validate a legal number
   2258                                      tempBffr3[0] = tempBffr[4];
   \                     ??RoadBrd_ParseString_331: (+1)
   \   00001D4A   0xF994 0x0004      LDRSB    R0,[R4, #+4]
   \   00001D4E   0xF88D 0x00AC      STRB     R0,[SP, #+172]
   2259                                      tempBffr3[1] = tempBffr[5];
   \   00001D52   0xF994 0x0005      LDRSB    R0,[R4, #+5]
   \   00001D56   0xF88D 0x00AD      STRB     R0,[SP, #+173]
   2260                                      tempBffr3[2] = 0x00;
   \   00001D5A   0x2000             MOVS     R0,#+0
   \   00001D5C   0xF88D 0x00AE      STRB     R0,[SP, #+174]
   2261                                      if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001D60   0xA82B             ADD      R0,SP,#+172
   \   00001D62   0x.... 0x....      BL       isHexNum
   \   00001D66   0x2800             CMP      R0,#+0
   \   00001D68   0xD105             BNE.N    ??RoadBrd_ParseString_332
   2262                                        strcpy( (char *)tempBffr2, "TIR SYNTAX ERROR: Address not HEX Value.\r\n");
   \   00001D6A   0xF8DF 0x1E20      LDR.W    R1,??RoadBrd_ParseString_333
   \   00001D6E   0xA80B             ADD      R0,SP,#+44
   \   00001D70   0x.... 0x....      BL       strcpy
   \   00001D74   0xE0E8             B.N      ??RoadBrd_ParseString_330
   2263                                      else
   2264                                      {
   2265                                        // Legal Address. Save it as value
   2266                                        Address = hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_332: (+1)
   \   00001D76   0xA82B             ADD      R0,SP,#+172
   \   00001D78   0x.... 0x....      BL       hatoi
   \   00001D7C   0x9031             STR      R0,[SP, #+196]
   2267                                        // 3. Now get the number of bytes of data from field.
   2268                                        tempBffr3[0] = tempBffr[7];
   \   00001D7E   0xF994 0x0007      LDRSB    R0,[R4, #+7]
   \   00001D82   0xF88D 0x00AC      STRB     R0,[SP, #+172]
   2269                                        tempBffr3[1] = tempBffr[8];
   \   00001D86   0xF994 0x0008      LDRSB    R0,[R4, #+8]
   \   00001D8A   0xF88D 0x00AD      STRB     R0,[SP, #+173]
   2270                                        tempBffr3[2] = 0x00;
   \   00001D8E   0x2000             MOVS     R0,#+0
   \   00001D90   0xF88D 0x00AE      STRB     R0,[SP, #+174]
   2271                                        if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001D94   0xA82B             ADD      R0,SP,#+172
   \   00001D96   0x.... 0x....      BL       isHexNum
   \   00001D9A   0x2800             CMP      R0,#+0
   \   00001D9C   0xD105             BNE.N    ??RoadBrd_ParseString_334
   2272                                          strcpy( (char *)tempBffr2, "TIR SYNTAX ERROR: Number of Bytes not HEX Value.\r\n");
   \   00001D9E   0xF8DF 0x1DF0      LDR.W    R1,??RoadBrd_ParseString_333+0x4
   \   00001DA2   0xA80B             ADD      R0,SP,#+44
   \   00001DA4   0x.... 0x....      BL       strcpy
   \   00001DA8   0xE0CE             B.N      ??RoadBrd_ParseString_330
   2273                                        else
   2274                                        {
   2275                                          // Legal NUMBER BYTES. Save it as value
   2276                                          num_bytes = hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_334: (+1)
   \   00001DAA   0xA82B             ADD      R0,SP,#+172
   \   00001DAC   0x.... 0x....      BL       hatoi
   \   00001DB0   0x9034             STR      R0,[SP, #+208]
   2277                                          
   2278                                          // 3a. Now get the number of bytes Received of data from field.
   2279                                          tempBffr3[0] = tempBffr[10];
   \   00001DB2   0xF994 0x000A      LDRSB    R0,[R4, #+10]
   \   00001DB6   0xF88D 0x00AC      STRB     R0,[SP, #+172]
   2280                                          tempBffr3[1] = tempBffr[11];
   \   00001DBA   0xF994 0x000B      LDRSB    R0,[R4, #+11]
   \   00001DBE   0xF88D 0x00AD      STRB     R0,[SP, #+173]
   2281                                          tempBffr3[2] = 0x00;
   \   00001DC2   0x2000             MOVS     R0,#+0
   \   00001DC4   0xF88D 0x00AE      STRB     R0,[SP, #+174]
   2282                                          if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001DC8   0xA82B             ADD      R0,SP,#+172
   \   00001DCA   0x.... 0x....      BL       isHexNum
   \   00001DCE   0x2800             CMP      R0,#+0
   \   00001DD0   0xD10A             BNE.N    ??RoadBrd_ParseString_335
   2283                                            strcpy( (char *)tempBffr2, "TIR SYNTAX ERROR: Number of Bytes RECEIVED not HEX Value.\r\n");
   \   00001DD2   0xF8DF 0x1E34      LDR.W    R1,??RoadBrd_ParseString_336
   \   00001DD6   0xA80B             ADD      R0,SP,#+44
   \   00001DD8   0x.... 0x....      BL       strcpy
   \   00001DDC   0xE0B4             B.N      ??RoadBrd_ParseString_330
   \   00001DDE   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_185:
   \   00001DE0   0x........         DC32     ?_66
   \   00001DE4   0x........         DC32     ?_67
   2284                                          else
   2285                                          {
   2286                                            // Legal NUMBER BYTES. Save it as value
   2287                                            num_bytes_received = hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_335: (+1)
   \   00001DE8   0xA82B             ADD      R0,SP,#+172
   \   00001DEA   0x.... 0x....      BL       hatoi
   \   00001DEE   0x903A             STR      R0,[SP, #+232]
   2288                                            // 4. Test num_bytes. If Zero, We are done
   2289                                            if (num_bytes == 0)
   \   00001DF0   0x9834             LDR      R0,[SP, #+208]
   \   00001DF2   0x2800             CMP      R0,#+0
   \   00001DF4   0xD106             BNE.N    ??RoadBrd_ParseString_337
   2290                                            {
   2291                                              sprintf( (char *)tempBffr2, "TIR: GOOD CMD: %x.\r\n", Address);
   \   00001DF6   0x9A31             LDR      R2,[SP, #+196]
   \   00001DF8   0xF8DF 0x1E10      LDR.W    R1,??RoadBrd_ParseString_336+0x4
   \   00001DFC   0xA80B             ADD      R0,SP,#+44
   \   00001DFE   0x.... 0x....      BL       sprintf
   \   00001E02   0xE038             B.N      ??RoadBrd_ParseString_338
   2292                                            }
   2293                                            else
   2294                                            {
   2295                                              // 5. Time to get all the data.
   2296                                              Error = 0;
   \                     ??RoadBrd_ParseString_337: (+1)
   \   00001E04   0x2000             MOVS     R0,#+0
   \   00001E06   0x9035             STR      R0,[SP, #+212]
   2297                                              for (x=0; x<num_bytes; x++)
   \   00001E08   0x2000             MOVS     R0,#+0
   \   00001E0A   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_339: (+1)
   \   00001E0C   0x9834             LDR      R0,[SP, #+208]
   \   00001E0E   0x4287             CMP      R7,R0
   \   00001E10   0xDA31             BGE.N    ??RoadBrd_ParseString_338
   2298                                              {
   2299                                                tempBffr3[0] = tempBffr[13+x*3];
   \   00001E12   0x2003             MOVS     R0,#+3
   \   00001E14   0xFB00 0xF007      MUL      R0,R0,R7
   \   00001E18   0x4420             ADD      R0,R4,R0
   \   00001E1A   0xF990 0x000D      LDRSB    R0,[R0, #+13]
   \   00001E1E   0xF88D 0x00AC      STRB     R0,[SP, #+172]
   2300                                                tempBffr3[1] = tempBffr[14+x*3];
   \   00001E22   0x2003             MOVS     R0,#+3
   \   00001E24   0xFB00 0xF007      MUL      R0,R0,R7
   \   00001E28   0x4420             ADD      R0,R4,R0
   \   00001E2A   0xF990 0x000E      LDRSB    R0,[R0, #+14]
   \   00001E2E   0xF88D 0x00AD      STRB     R0,[SP, #+173]
   2301                                                tempBffr3[2] = 0x00;
   \   00001E32   0x2000             MOVS     R0,#+0
   \   00001E34   0xF88D 0x00AE      STRB     R0,[SP, #+174]
   2302                                                if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001E38   0xA82B             ADD      R0,SP,#+172
   \   00001E3A   0x.... 0x....      BL       isHexNum
   \   00001E3E   0x2800             CMP      R0,#+0
   \   00001E40   0xD112             BNE.N    ??RoadBrd_ParseString_340
   2303                                                {
   2304                                                  strcpy( (char *)tempBffr2, "TIR SYNTAX ERROR: Data not HEX Value.\r\n");
   \   00001E42   0xF8DF 0x1E40      LDR.W    R1,??RoadBrd_ParseString_341
   \   00001E46   0xA80B             ADD      R0,SP,#+44
   \   00001E48   0x.... 0x....      BL       strcpy
   2305                                                  Error = 1;
   \   00001E4C   0x2001             MOVS     R0,#+1
   \   00001E4E   0x9035             STR      R0,[SP, #+212]
   2306                                                  break;
   \   00001E50   0xE011             B.N      ??RoadBrd_ParseString_338
   \   00001E52   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_190:
   \   00001E54   0x........         DC32     ?_68
   \   00001E58   0x........         DC32     ?_69
   \   00001E5C   0x........         DC32     ?_70
   \   00001E60   0x........         DC32     ?_71
   \   00001E64   0x........         DC32     ?_72
   2307                                                }
   2308                                                else
   2309                                                {
   2310                                                  i2cData[x] =  hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_340: (+1)
   \   00001E68   0xA82B             ADD      R0,SP,#+172
   \   00001E6A   0x.... 0x....      BL       hatoi
   \   00001E6E   0xA99A             ADD      R1,SP,#+616
   \   00001E70   0x55C8             STRB     R0,[R1, R7]
   2311                                                } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)
   2312                                              } //EndFor (x=0; x<num_bytes; x++)
   \   00001E72   0x1C7F             ADDS     R7,R7,#+1
   \   00001E74   0xE7CA             B.N      ??RoadBrd_ParseString_339
   2313                                            } //EndElse (num_bytes == 0)
   2314                                            if (Error==0)
   \                     ??RoadBrd_ParseString_338: (+1)
   \   00001E76   0x9835             LDR      R0,[SP, #+212]
   \   00001E78   0x2800             CMP      R0,#+0
   \   00001E7A   0xD105             BNE.N    ??RoadBrd_ParseString_342
   2315                                            {
   2316                                              sprintf( (char *)tempBffr2, "TIR: GOOD CMD: %x.", Address);
   \   00001E7C   0x9A31             LDR      R2,[SP, #+196]
   \   00001E7E   0xF8DF 0x1E08      LDR.W    R1,??RoadBrd_ParseString_341+0x4
   \   00001E82   0xA80B             ADD      R0,SP,#+44
   \   00001E84   0x.... 0x....      BL       sprintf
   2317                                            }
   2318                                            for(x=0; x<num_bytes; x++)
   \                     ??RoadBrd_ParseString_342: (+1)
   \   00001E88   0x2000             MOVS     R0,#+0
   \   00001E8A   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_343: (+1)
   \   00001E8C   0x9834             LDR      R0,[SP, #+208]
   \   00001E8E   0x4287             CMP      R7,R0
   \   00001E90   0xDA0B             BGE.N    ??RoadBrd_ParseString_344
   2319                                            {
   2320                                              sprintf( (char *)tempBffr3, "%x.", i2cData[x]);
   \   00001E92   0xA89A             ADD      R0,SP,#+616
   \   00001E94   0x5DC2             LDRB     R2,[R0, R7]
   \   00001E96   0xA14D             ADR.N    R1,??RoadBrd_ParseString_207+0x8  ;; "%x."
   \   00001E98   0xA82B             ADD      R0,SP,#+172
   \   00001E9A   0x.... 0x....      BL       sprintf
   2321                                              strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   00001E9E   0xA92B             ADD      R1,SP,#+172
   \   00001EA0   0xA80B             ADD      R0,SP,#+44
   \   00001EA2   0x.... 0x....      BL       strcat
   2322                                            }
   \   00001EA6   0x1C7F             ADDS     R7,R7,#+1
   \   00001EA8   0xE7F0             B.N      ??RoadBrd_ParseString_343
   2323                                            strcat( (char *)tempBffr2, "\r\n" );
   \                     ??RoadBrd_ParseString_344: (+1)
   \   00001EAA   0xA149             ADR.N    R1,??RoadBrd_ParseString_207+0xC  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001EAC   0xA80B             ADD      R0,SP,#+44
   \   00001EAE   0x.... 0x....      BL       strcat
   2324                                            // 6. Time to send Command and collect status.
   2325                                            Status =  RoadBrd_I2C_Master_Transmit((uint16_t)Address, i2cData, (uint16_t)num_bytes, I2C_TIMEOUT);
   \   00001EB2   0xF44F 0x73FA      MOV      R3,#+500
   \   00001EB6   0x9834             LDR      R0,[SP, #+208]
   \   00001EB8   0x0002             MOVS     R2,R0
   \   00001EBA   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00001EBC   0xA99A             ADD      R1,SP,#+616
   \   00001EBE   0x9831             LDR      R0,[SP, #+196]
   \   00001EC0   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00001EC2   0x.... 0x....      BL       RoadBrd_I2C_Master_Transmit
   \   00001EC6   0x0006             MOVS     R6,R0
   2326                                            // 6a. Wait for Command to complete(100ms).
   2327           
   2328                                            // 7. If Status was good, Time to get response.
   2329                                            if (Status == HAL_OK)
   \   00001EC8   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001ECA   0x2E00             CMP      R6,#+0
   \   00001ECC   0xD10E             BNE.N    ??RoadBrd_ParseString_345
   2330                                            {
   2331                                              Status =  RoadBrd_I2C_Master_Receive((uint16_t)Address, i2cData, (uint16_t)num_bytes_received, I2C_TIMEOUT);
   \   00001ECE   0xF44F 0x73FA      MOV      R3,#+500
   \   00001ED2   0x983A             LDR      R0,[SP, #+232]
   \   00001ED4   0x0002             MOVS     R2,R0
   \   00001ED6   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00001ED8   0xA99A             ADD      R1,SP,#+616
   \   00001EDA   0x9831             LDR      R0,[SP, #+196]
   \   00001EDC   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00001EDE   0x.... 0x....      BL       RoadBrd_I2C_Master_Receive
   \   00001EE2   0x0006             MOVS     R6,R0
   2332                                            }
   2333                                            else
   2334                                              break;
   2335                                            // 7a. Wait for Command to complete(100ms).
   2336                                            if (Status == HAL_OK)
   \   00001EE4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001EE6   0x2E00             CMP      R6,#+0
   \   00001EE8   0xD105             BNE.N    ??RoadBrd_ParseString_346
   \   00001EEA   0xE000             B.N      ??RoadBrd_ParseString_347
   \                     ??RoadBrd_ParseString_345: (+1)
   \   00001EEC   0xE0D9             B.N      ??RoadBrd_ParseString_305
   2337                                            {
   2338                                              Status = RoadBrd_WaitForState( 20 );
   \                     ??RoadBrd_ParseString_347: (+1)
   \   00001EEE   0x2014             MOVS     R0,#+20
   \   00001EF0   0x.... 0x....      BL       RoadBrd_WaitForState
   \   00001EF4   0x0006             MOVS     R6,R0
   2339                                            }
   2340          
   2341                                            // 8. IfGood report, Need to Output Data.
   2342                                            if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_346: (+1)
   \   00001EF6   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001EF8   0x2E00             CMP      R6,#+0
   \   00001EFA   0xD125             BNE.N    ??RoadBrd_ParseString_330
   2343                                            {
   2344                                              // Send string to UART..
   2345          #ifdef NUCLEO
   2346                                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   2347          #else
   2348                                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00001EFC   0xA90B             ADD      R1,SP,#+44
   \   00001EFE   0x2000             MOVS     R0,#+0
   \   00001F00   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001F04   0x0006             MOVS     R6,R0
   2349          #endif
   2350                                              if (Status != HAL_OK)
   \   00001F06   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001F08   0x2E00             CMP      R6,#+0
   \   00001F0A   0xD003             BEQ.N    ??RoadBrd_ParseString_348
   2351                                                return Status;
   \   00001F0C   0x0030             MOVS     R0,R6
   \   00001F0E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001F10   0xF002 0xBEEB      B.W      ??RoadBrd_ParseString_4
   2352                                              // NOW, Build Data String..
   2353                                              sprintf( (char *)tempBffr2, "     DATA: " );
   \                     ??RoadBrd_ParseString_348: (+1)
   \   00001F14   0xF8DF 0x1DE8      LDR.W    R1,??RoadBrd_ParseString_349
   \   00001F18   0xA80B             ADD      R0,SP,#+44
   \   00001F1A   0x.... 0x....      BL       sprintf
   2354                                              for(x=0; x<num_bytes_received; x++)
   \   00001F1E   0x2000             MOVS     R0,#+0
   \   00001F20   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_350: (+1)
   \   00001F22   0x983A             LDR      R0,[SP, #+232]
   \   00001F24   0x4287             CMP      R7,R0
   \   00001F26   0xDA0B             BGE.N    ??RoadBrd_ParseString_351
   2355                                              {
   2356                                                sprintf( (char *)tempBffr3, "%x.", i2cData[x]);
   \   00001F28   0xA89A             ADD      R0,SP,#+616
   \   00001F2A   0x5DC2             LDRB     R2,[R0, R7]
   \   00001F2C   0xA127             ADR.N    R1,??RoadBrd_ParseString_207+0x8  ;; "%x."
   \   00001F2E   0xA82B             ADD      R0,SP,#+172
   \   00001F30   0x.... 0x....      BL       sprintf
   2357                                                strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   00001F34   0xA92B             ADD      R1,SP,#+172
   \   00001F36   0xA80B             ADD      R0,SP,#+44
   \   00001F38   0x.... 0x....      BL       strcat
   2358                                              }
   \   00001F3C   0x1C7F             ADDS     R7,R7,#+1
   \   00001F3E   0xE7F0             B.N      ??RoadBrd_ParseString_350
   2359                                              strcat( (char *)tempBffr2, "\r\n" );
   \                     ??RoadBrd_ParseString_351: (+1)
   \   00001F40   0xA123             ADR.N    R1,??RoadBrd_ParseString_207+0xC  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001F42   0xA80B             ADD      R0,SP,#+44
   \   00001F44   0x.... 0x....      BL       strcat
   2360                                            }
   2361                                          }
   2362                                        } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)...NUMBER BYTES
   2363                                        
   2364                                      } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)...Address
   2365                                      
   2366                                    } //EndElse ( (tempBffr[2]!=':') || (tempBffr[5]!='.') )
   2367                                
   2368                                    break;
   \                     ??RoadBrd_ParseString_330: (+1)
   \   00001F48   0xE0AB             B.N      ??RoadBrd_ParseString_305
   2369          //------------------
   2370                                  case 'Q':
   2371                                    //I2C Receive Command
   2372                                    // Step 1. Validate format.
   2373                                    if( (tempBffr[3]!=':') ||
   2374                                        (tempBffr[6]!='.')  )
   \                     ??RoadBrd_ParseString_306: (+1)
   \   00001F4A   0x78E0             LDRB     R0,[R4, #+3]
   \   00001F4C   0x283A             CMP      R0,#+58
   \   00001F4E   0xD102             BNE.N    ??RoadBrd_ParseString_352
   \   00001F50   0x79A0             LDRB     R0,[R4, #+6]
   \   00001F52   0x282E             CMP      R0,#+46
   \   00001F54   0xD012             BEQ.N    ??RoadBrd_ParseString_353
   2375                                    {
   2376                                      // Is this a BLE Operation?
   2377                                      if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_352: (+1)
   \   00001F56   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001F58   0x2D00             CMP      R5,#+0
   \   00001F5A   0xD009             BEQ.N    ??RoadBrd_ParseString_354
   2378                                      {
   2379                                        // Yes...Build and Send BLE Response NOW.
   2380                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001F5C   0x491A             LDR.N    R1,??RoadBrd_ParseString_207+0x4
   \   00001F5E   0xA80B             ADD      R0,SP,#+44
   \   00001F60   0x.... 0x....      BL       strcpy
   2381                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001F64   0xA80B             ADD      R0,SP,#+44
   \   00001F66   0x.... 0x....      BL       strlen
   \   00001F6A   0xA90B             ADD      R1,SP,#+44
   \   00001F6C   0x.... 0x....      BL       BGM111_Transmit
   2382                                      }
   2383                                      
   2384                                      strcpy( (char *)tempBffr2, "TIQ SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_354: (+1)
   \   00001F70   0xF8DF 0x1E04      LDR.W    R1,??RoadBrd_ParseString_355
   \   00001F74   0xA80B             ADD      R0,SP,#+44
   \   00001F76   0x.... 0x....      BL       strcpy
   \   00001F7A   0xE08C             B.N      ??RoadBrd_ParseString_356
   2385                                    }
   2386                                    else
   2387                                    {
   2388                                      // Is this a BLE Operation?
   2389                                      if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_353: (+1)
   \   00001F7C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001F7E   0x2D00             CMP      R5,#+0
   \   00001F80   0xD009             BEQ.N    ??RoadBrd_ParseString_357
   2390                                      {
   2391                                        // Yes...Build and Send BLE Response NOW.
   2392                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001F82   0x4911             LDR.N    R1,??RoadBrd_ParseString_207+0x4
   \   00001F84   0xA80B             ADD      R0,SP,#+44
   \   00001F86   0x.... 0x....      BL       strcpy
   2393                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001F8A   0xA80B             ADD      R0,SP,#+44
   \   00001F8C   0x.... 0x....      BL       strlen
   \   00001F90   0xA90B             ADD      R1,SP,#+44
   \   00001F92   0x.... 0x....      BL       BGM111_Transmit
   2394                                      }
   2395                                      
   2396                                      // 2. Grab Address and validate a legal number
   2397                                      tempBffr3[0] = tempBffr[4];
   \                     ??RoadBrd_ParseString_357: (+1)
   \   00001F96   0xF994 0x0004      LDRSB    R0,[R4, #+4]
   \   00001F9A   0xF88D 0x00AC      STRB     R0,[SP, #+172]
   2398                                      tempBffr3[1] = tempBffr[5];
   \   00001F9E   0xF994 0x0005      LDRSB    R0,[R4, #+5]
   \   00001FA2   0xF88D 0x00AD      STRB     R0,[SP, #+173]
   2399                                      tempBffr3[2] = 0x00;
   \   00001FA6   0x2000             MOVS     R0,#+0
   \   00001FA8   0xF88D 0x00AE      STRB     R0,[SP, #+174]
   2400                                      if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001FAC   0xA82B             ADD      R0,SP,#+172
   \   00001FAE   0x.... 0x....      BL       isHexNum
   \   00001FB2   0x2800             CMP      R0,#+0
   \   00001FB4   0xD10E             BNE.N    ??RoadBrd_ParseString_358
   2401                                        strcpy( (char *)tempBffr2, "TIQ SYNTAX ERROR: Address not HEX Value.\r\n");
   \   00001FB6   0xF8DF 0x1DC4      LDR.W    R1,??RoadBrd_ParseString_355+0x4
   \   00001FBA   0xA80B             ADD      R0,SP,#+44
   \   00001FBC   0x.... 0x....      BL       strcpy
   \   00001FC0   0xE069             B.N      ??RoadBrd_ParseString_356
   \   00001FC2   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_207:
   \   00001FC4   0x........         DC32     ?_73
   \   00001FC8   0x........         DC32     ?_25
   \   00001FCC   0x25 0x78          DC8      "%x."
   \              0x2E 0x00    
   \   00001FD0   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
   2402                                      else
   2403                                      {
   2404                                        // Legal Address. Save it as value
   2405                                        Address = hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_358: (+1)
   \   00001FD4   0xA82B             ADD      R0,SP,#+172
   \   00001FD6   0x.... 0x....      BL       hatoi
   \   00001FDA   0x9031             STR      R0,[SP, #+196]
   2406                                        // 3. Now get the number of bytes Received of data from field.
   2407                                        tempBffr3[0] = tempBffr[7];
   \   00001FDC   0xF994 0x0007      LDRSB    R0,[R4, #+7]
   \   00001FE0   0xF88D 0x00AC      STRB     R0,[SP, #+172]
   2408                                        tempBffr3[1] = tempBffr[8];
   \   00001FE4   0xF994 0x0008      LDRSB    R0,[R4, #+8]
   \   00001FE8   0xF88D 0x00AD      STRB     R0,[SP, #+173]
   2409                                        tempBffr3[2] = 0x00;
   \   00001FEC   0x2000             MOVS     R0,#+0
   \   00001FEE   0xF88D 0x00AE      STRB     R0,[SP, #+174]
   2410                                        if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001FF2   0xA82B             ADD      R0,SP,#+172
   \   00001FF4   0x.... 0x....      BL       isHexNum
   \   00001FF8   0x2800             CMP      R0,#+0
   \   00001FFA   0xD105             BNE.N    ??RoadBrd_ParseString_359
   2411                                          strcpy( (char *)tempBffr2, "TIQ SYNTAX ERROR: Number of Bytes not HEX Value.\r\n");
   \   00001FFC   0xF8DF 0x1E1C      LDR.W    R1,??RoadBrd_ParseString_360
   \   00002000   0xA80B             ADD      R0,SP,#+44
   \   00002002   0x.... 0x....      BL       strcpy
   \   00002006   0xE046             B.N      ??RoadBrd_ParseString_356
   2412                                        else
   2413                                        {
   2414                                            // Legal NUMBER BYTES. Save it as value
   2415                                            num_bytes_received = hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_359: (+1)
   \   00002008   0xA82B             ADD      R0,SP,#+172
   \   0000200A   0x.... 0x....      BL       hatoi
   \   0000200E   0x903A             STR      R0,[SP, #+232]
   2416                                            // 4. Test num_bytes. If Zero, We are done
   2417                                            sprintf( (char *)tempBffr2, "TIR: GOOD CMD: %x.\r\n", Address);
   \   00002010   0x9A31             LDR      R2,[SP, #+196]
   \   00002012   0xF8DF 0x1BF8      LDR.W    R1,??RoadBrd_ParseString_336+0x4
   \   00002016   0xA80B             ADD      R0,SP,#+44
   \   00002018   0x.... 0x....      BL       sprintf
   2418                                            // 7. If Status was good, Time to get response.
   2419                                            Status =  RoadBrd_I2C_Master_Receive((uint16_t)Address, i2cData, (uint16_t)num_bytes_received, I2C_TIMEOUT);
   \   0000201C   0xF44F 0x73FA      MOV      R3,#+500
   \   00002020   0x983A             LDR      R0,[SP, #+232]
   \   00002022   0x0002             MOVS     R2,R0
   \   00002024   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00002026   0xA99A             ADD      R1,SP,#+616
   \   00002028   0x9831             LDR      R0,[SP, #+196]
   \   0000202A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000202C   0x.... 0x....      BL       RoadBrd_I2C_Master_Receive
   \   00002030   0x0006             MOVS     R6,R0
   2420                                            // 7a. Wait for Command to complete(100ms).
   2421                                            if (Status == HAL_OK)
   \   00002032   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002034   0x2E00             CMP      R6,#+0
   \   00002036   0xD107             BNE.N    ??RoadBrd_ParseString_361
   2422                                            {
   2423                                              Status = RoadBrd_WaitForState( 20 );
   \   00002038   0x2014             MOVS     R0,#+20
   \   0000203A   0x.... 0x....      BL       RoadBrd_WaitForState
   \   0000203E   0x0006             MOVS     R6,R0
   2424                                            }
   2425                                            else
   2426                                              break;
   2427                                            // 8. IfGood report, Need to Output Data.
   2428                                            if (Status == HAL_OK)
   \   00002040   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002042   0x2E00             CMP      R6,#+0
   \   00002044   0xD127             BNE.N    ??RoadBrd_ParseString_356
   \   00002046   0xE000             B.N      ??RoadBrd_ParseString_362
   \                     ??RoadBrd_ParseString_361: (+1)
   \   00002048   0xE02B             B.N      ??RoadBrd_ParseString_305
   2429                                            {
   2430                                              // Send string to UART..
   2431          #ifdef NUCLEO
   2432                                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   2433          #else
   2434                                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \                     ??RoadBrd_ParseString_362: (+1)
   \   0000204A   0xA90B             ADD      R1,SP,#+44
   \   0000204C   0x2000             MOVS     R0,#+0
   \   0000204E   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00002052   0x0006             MOVS     R6,R0
   2435          #endif
   2436                                              if (Status != HAL_OK)
   \   00002054   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002056   0x2E00             CMP      R6,#+0
   \   00002058   0xD003             BEQ.N    ??RoadBrd_ParseString_363
   2437                                                return Status;
   \   0000205A   0x0030             MOVS     R0,R6
   \   0000205C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000205E   0xF002 0xBE44      B.W      ??RoadBrd_ParseString_4
   2438                                              // NOW, Build Data String..
   2439                                              sprintf( (char *)tempBffr2, "     DATA: " );
   \                     ??RoadBrd_ParseString_363: (+1)
   \   00002062   0xF8DF 0x1C9C      LDR.W    R1,??RoadBrd_ParseString_349
   \   00002066   0xA80B             ADD      R0,SP,#+44
   \   00002068   0x.... 0x....      BL       sprintf
   2440                                              for(x=0; x<num_bytes_received; x++)
   \   0000206C   0x2000             MOVS     R0,#+0
   \   0000206E   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_364: (+1)
   \   00002070   0x983A             LDR      R0,[SP, #+232]
   \   00002072   0x4287             CMP      R7,R0
   \   00002074   0xDA0B             BGE.N    ??RoadBrd_ParseString_365
   2441                                              {
   2442                                                sprintf( (char *)tempBffr3, "%x.", i2cData[x]);
   \   00002076   0xA89A             ADD      R0,SP,#+616
   \   00002078   0x5DC2             LDRB     R2,[R0, R7]
   \   0000207A   0xA1D3             ADR.N    R1,??RoadBrd_ParseString_248+0x4  ;; "%x."
   \   0000207C   0xA82B             ADD      R0,SP,#+172
   \   0000207E   0x.... 0x....      BL       sprintf
   2443                                                strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   00002082   0xA92B             ADD      R1,SP,#+172
   \   00002084   0xA80B             ADD      R0,SP,#+44
   \   00002086   0x.... 0x....      BL       strcat
   2444                                              }
   \   0000208A   0x1C7F             ADDS     R7,R7,#+1
   \   0000208C   0xE7F0             B.N      ??RoadBrd_ParseString_364
   2445                                              strcat( (char *)tempBffr2, "\r\n" );
   \                     ??RoadBrd_ParseString_365: (+1)
   \   0000208E   0xA1CF             ADR.N    R1,??RoadBrd_ParseString_248+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00002090   0xA80B             ADD      R0,SP,#+44
   \   00002092   0x.... 0x....      BL       strcat
   2446                                          }
   2447                                        } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)...NUMBER BYTES
   2448                                        
   2449                                      } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)...Address
   2450                                      
   2451                                    } //EndElse ( (tempBffr[2]!=':') || (tempBffr[5]!='.') )
   2452                                
   2453                                    break;
   \                     ??RoadBrd_ParseString_356: (+1)
   \   00002096   0xE004             B.N      ??RoadBrd_ParseString_305
   2454                                  default:
   2455                                    strcpy( (char *)tempBffr2, "ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_307: (+1)
   \   00002098   0xF8DF 0x1798      LDR.W    R1,??RoadBrd_ParseString_280
   \   0000209C   0xA80B             ADD      R0,SP,#+44
   \   0000209E   0x.... 0x....      BL       strcpy
   2456                                    break;
   2457                                } //EndSwitch ( tempBffr[2] )
   2458                              } //EndElse (Size < 9)
   2459                              break;
   \                     ??RoadBrd_ParseString_305: (+1)
   \   000020A2   0xF002 0xBD8E      B.W      ??RoadBrd_ParseString_289
   \   000020A6   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_215:
   \   000020A8   0x........         DC32     ?_74
   \   000020AC   0x........         DC32     ?_75
   \   000020B0   0x........         DC32     ?_76
   \   000020B4   0x........         DC32     ?_36
   2460          //++++++++++++++++++++++++++++++++++++++++++  Calibration Commands.
   2461                            case 'C':
   2462                              Status = HAL_OK;
   \                     ??RoadBrd_ParseString_291: (+1)
   \   000020B8   0x2000             MOVS     R0,#+0
   \   000020BA   0x0006             MOVS     R6,R0
   2463                              if (Size == 2)
   \   000020BC   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   000020C0   0x2802             CMP      R0,#+2
   \   000020C2   0xF040 0x80E9      BNE.W    ??RoadBrd_ParseString_366
   2464                              {
   2465                                //------------------ TC Command: Dump Calibration Settings.      
   2466                                // Read Cool Eye/Grid Eye Values.....
   2467                                if ( Get_DriverStates( GRIDEYE_MNTR_TASK ))
   \   000020C6   0x2005             MOVS     R0,#+5
   \   000020C8   0x.... 0x....      BL       Get_DriverStates
   \   000020CC   0x2800             CMP      R0,#+0
   \   000020CE   0xD004             BEQ.N    ??RoadBrd_ParseString_367
   2468                                {
   2469                                  Status = RoadBrd_GridEye_ReadValues_Scaled( &GridMeasure );
   \   000020D0   0xA85B             ADD      R0,SP,#+364
   \   000020D2   0x.... 0x....      BL       RoadBrd_GridEye_ReadValues_Scaled
   \   000020D6   0x0006             MOVS     R6,R0
   \   000020D8   0xE00B             B.N      ??RoadBrd_ParseString_368
   2470                                }
   2471                                else if ( Get_DriverStates( COOLEYE_MNTR_TASK ))
   \                     ??RoadBrd_ParseString_367: (+1)
   \   000020DA   0x2006             MOVS     R0,#+6
   \   000020DC   0x.... 0x....      BL       Get_DriverStates
   \   000020E0   0x2800             CMP      R0,#+0
   \   000020E2   0xD004             BEQ.N    ??RoadBrd_ParseString_369
   2472                                {
   2473                                  Status = RoadBrd_CoolEye_ReadValues_Scaled( &GridMeasure );
   \   000020E4   0xA85B             ADD      R0,SP,#+364
   \   000020E6   0x.... 0x....      BL       RoadBrd_CoolEye_ReadValues_Scaled
   \   000020EA   0x0006             MOVS     R6,R0
   \   000020EC   0xE001             B.N      ??RoadBrd_ParseString_368
   2474                                }
   2475                                else
   2476                                  Status = HAL_ERROR;
   \                     ??RoadBrd_ParseString_369: (+1)
   \   000020EE   0x2001             MOVS     R0,#+1
   \   000020F0   0x0006             MOVS     R6,R0
   2477                                
   2478                                // Is this a BLE Operation?
   2479                                if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_368: (+1)
   \   000020F2   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000020F4   0x2E00             CMP      R6,#+0
   \   000020F6   0xF040 0x80B5      BNE.W    ??RoadBrd_ParseString_370
   2480                                {
   2481                                  // OK Next Sensor.
   2482                                  // Read Temperature sensor and return results....Temperature Sensor U10(PCT2075GVJ).  Addr: 0x94
   2483                                  Status = RoadBrd_ReadTemp_Scaled( &TMeasure );
   \   000020FA   0xA83C             ADD      R0,SP,#+240
   \   000020FC   0x.... 0x....      BL       RoadBrd_ReadTemp_Scaled
   \   00002100   0x0006             MOVS     R6,R0
   2484                                  if (Status == HAL_OK)
   \   00002102   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002104   0x2E00             CMP      R6,#+0
   \   00002106   0xF040 0x8095      BNE.W    ??RoadBrd_ParseString_371
   2485                                  {
   2486                                    // OK Next Sensor.
   2487                                    // Read Humidity Sensor sensor and return Humidity results....
   2488                                    Status = RoadBrd_Humidity_ReadHumidity_Scaled( &HMeasure );
   \   0000210A   0xA849             ADD      R0,SP,#+292
   \   0000210C   0x.... 0x....      BL       RoadBrd_Humidity_ReadHumidity_Scaled
   \   00002110   0x0006             MOVS     R6,R0
   2489                                    if (Status == HAL_OK)
   \   00002112   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002114   0x2E00             CMP      R6,#+0
   \   00002116   0xD174             BNE.N    ??RoadBrd_ParseString_372
   2490                                    {
   2491                                      // OK Next Sensor.
   2492                                      //Status = RoadBrd_Barometer_Status( &PRMeasure );
   2493                                      Status = RoadBrd_Baro_ReadPressure_Scaled( &PRPMeasure );
   \   00002118   0xA8AE             ADD      R0,SP,#+696
   \   0000211A   0x.... 0x....      BL       RoadBrd_Baro_ReadPressure_Scaled
   \   0000211E   0x0006             MOVS     R6,R0
   2494                                      if (Status == HAL_OK)
   \   00002120   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002122   0x2E00             CMP      R6,#+0
   \   00002124   0xD158             BNE.N    ??RoadBrd_ParseString_373
   2495                                      {
   2496                                        if ( BLE_Flag )
   \   00002126   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002128   0x2D00             CMP      R5,#+0
   \   0000212A   0xD025             BEQ.N    ??RoadBrd_ParseString_374
   2497                                        {
   2498                                          // Yes...Build and Send BLE Response NOW.
   2499                                          sprintf( (char *)tempBffr2, "<STATUS>%s//%s//%s//%s//%s//%s//%s//%s//%s//%s//%s//%s</STATUS>", (char *)GridMeasure.GridEye1.TempC,
   2500                                                  (char *)GridMeasure.GridEye2.TempC,
   2501                                                  (char *)GridMeasure.GridEye3.TempC,
   2502                                                  (char *)GridMeasure.GridEye4.TempC,
   2503                                                  (char *)GridMeasure.GridEye5.TempC,
   2504                                                  (char *)GridMeasure.GridEye6.TempC,
   2505                                                  (char *)GridMeasure.GridEye7.TempC,
   2506                                                  (char *)GridMeasure.GridEye8.TempC,
   2507                                                  (char *)GridMeasure.Thermistor.TempC,
   2508                                                  (char *)TMeasure.TempC,
   2509                                                  (char *)HMeasure.Humidity,
   2510                                                  (char *)PRPMeasure.Pressure);
   \   0000212C   0xA8AE             ADD      R0,SP,#+696
   \   0000212E   0x9009             STR      R0,[SP, #+36]
   \   00002130   0xA849             ADD      R0,SP,#+292
   \   00002132   0x9008             STR      R0,[SP, #+32]
   \   00002134   0xA83C             ADD      R0,SP,#+240
   \   00002136   0x9007             STR      R0,[SP, #+28]
   \   00002138   0xA85B             ADD      R0,SP,#+364
   \   0000213A   0x9006             STR      R0,[SP, #+24]
   \   0000213C   0xA88B             ADD      R0,SP,#+556
   \   0000213E   0x9005             STR      R0,[SP, #+20]
   \   00002140   0xA885             ADD      R0,SP,#+532
   \   00002142   0x9004             STR      R0,[SP, #+16]
   \   00002144   0xA87F             ADD      R0,SP,#+508
   \   00002146   0x9003             STR      R0,[SP, #+12]
   \   00002148   0xA879             ADD      R0,SP,#+484
   \   0000214A   0x9002             STR      R0,[SP, #+8]
   \   0000214C   0xA873             ADD      R0,SP,#+460
   \   0000214E   0x9001             STR      R0,[SP, #+4]
   \   00002150   0xA86D             ADD      R0,SP,#+436
   \   00002152   0x9000             STR      R0,[SP, #+0]
   \   00002154   0xAB67             ADD      R3,SP,#+412
   \   00002156   0xAA61             ADD      R2,SP,#+388
   \   00002158   0xF8DF 0x1D84      LDR.W    R1,??RoadBrd_ParseString_375
   \   0000215C   0xA80B             ADD      R0,SP,#+44
   \   0000215E   0x.... 0x....      BL       sprintf
   2511                                          strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00002162   0xF8DF 0x1D80      LDR.W    R1,??RoadBrd_ParseString_375+0x4
   \   00002166   0xA80B             ADD      R0,SP,#+44
   \   00002168   0x.... 0x....      BL       strcpy
   2512                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000216C   0xA80B             ADD      R0,SP,#+44
   \   0000216E   0x.... 0x....      BL       strlen
   \   00002172   0xA90B             ADD      R1,SP,#+44
   \   00002174   0x.... 0x....      BL       BGM111_Transmit
   2513                                        }
   2514                                        
   2515                                        //sprintf( (char *)tempBffr2, "Driver Status: %04x\r\n", DriverStatus );
   2516                                        sprintf( (char *)tempBffr2, "%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\r\n", (char *)GridMeasure.GridEye1.TempC,
   2517                                                (char *)GridMeasure.GridEye2.TempC,
   2518                                                (char *)GridMeasure.GridEye3.TempC,
   2519                                                (char *)GridMeasure.GridEye4.TempC,
   2520                                                (char *)GridMeasure.GridEye5.TempC,
   2521                                                (char *)GridMeasure.GridEye6.TempC,
   2522                                                (char *)GridMeasure.GridEye7.TempC,
   2523                                                (char *)GridMeasure.GridEye8.TempC,
   2524                                                (char *)GridMeasure.Thermistor.TempC,
   2525                                                (char *)TMeasure.TempC,
   2526                                                (char *)HMeasure.Humidity,
   2527                                                (char *)PRPMeasure.Pressure);
   \                     ??RoadBrd_ParseString_374: (+1)
   \   00002178   0xA8AE             ADD      R0,SP,#+696
   \   0000217A   0x9009             STR      R0,[SP, #+36]
   \   0000217C   0xA849             ADD      R0,SP,#+292
   \   0000217E   0x9008             STR      R0,[SP, #+32]
   \   00002180   0xA83C             ADD      R0,SP,#+240
   \   00002182   0x9007             STR      R0,[SP, #+28]
   \   00002184   0xA85B             ADD      R0,SP,#+364
   \   00002186   0x9006             STR      R0,[SP, #+24]
   \   00002188   0xA88B             ADD      R0,SP,#+556
   \   0000218A   0x9005             STR      R0,[SP, #+20]
   \   0000218C   0xA885             ADD      R0,SP,#+532
   \   0000218E   0x9004             STR      R0,[SP, #+16]
   \   00002190   0xA87F             ADD      R0,SP,#+508
   \   00002192   0x9003             STR      R0,[SP, #+12]
   \   00002194   0xA879             ADD      R0,SP,#+484
   \   00002196   0x9002             STR      R0,[SP, #+8]
   \   00002198   0xA873             ADD      R0,SP,#+460
   \   0000219A   0x9001             STR      R0,[SP, #+4]
   \   0000219C   0xA86D             ADD      R0,SP,#+436
   \   0000219E   0x9000             STR      R0,[SP, #+0]
   \   000021A0   0xAB67             ADD      R3,SP,#+412
   \   000021A2   0xAA61             ADD      R2,SP,#+388
   \   000021A4   0xF8DF 0x1D40      LDR.W    R1,??RoadBrd_ParseString_375+0x8
   \   000021A8   0xA80B             ADD      R0,SP,#+44
   \   000021AA   0x.... 0x....      BL       sprintf
   2528                                        // Send string to UART..
   2529          #ifdef NUCLEO
   2530                                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   2531          #else
   2532                                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000021AE   0xA90B             ADD      R1,SP,#+44
   \   000021B0   0x2000             MOVS     R0,#+0
   \   000021B2   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000021B6   0x0006             MOVS     R6,R0
   2533          #endif
   2534                                        if (Status != HAL_OK)
   \   000021B8   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000021BA   0x2E00             CMP      R6,#+0
   \   000021BC   0xD003             BEQ.N    ??RoadBrd_ParseString_376
   2535                                          return Status;
   \   000021BE   0x0030             MOVS     R0,R6
   \   000021C0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000021C2   0xF002 0xBD92      B.W      ??RoadBrd_ParseString_4
   2536                                        // NOW, Build Data String..
   2537                                        sprintf( (char *)tempBffr2, "COMPLETE" );
   \                     ??RoadBrd_ParseString_376: (+1)
   \   000021C6   0xF8DF 0x1E34      LDR.W    R1,??RoadBrd_ParseString_377
   \   000021CA   0xA80B             ADD      R0,SP,#+44
   \   000021CC   0x.... 0x....      BL       sprintf
   \   000021D0   0xF001 0xBE9D      B.W      ??RoadBrd_ParseString_378
   \                     ??RoadBrd_ParseString_222:
   \   000021D4   0x........         DC32     ?_37
   2538                                      } // Endif (Status == HAL_OK) RoadBrd_Baro_ReadPressure
   2539                                      else
   2540                                      {
   2541                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_373: (+1)
   \   000021D8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000021DA   0x2D00             CMP      R5,#+0
   \   000021DC   0xD00A             BEQ.N    ??RoadBrd_ParseString_379
   2542                                        {
   2543                                          // Yes...Build and Send BLE Response NOW.
   2544                                          strcpy( (char *)tempBffr2, "<STATUS>CMD_TC_HWERR_PRESSUE</STATUS>");
   \   000021DE   0xF8DF 0x1E20      LDR.W    R1,??RoadBrd_ParseString_377+0x4
   \   000021E2   0xA80B             ADD      R0,SP,#+44
   \   000021E4   0x.... 0x....      BL       strcpy
   2545                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000021E8   0xA80B             ADD      R0,SP,#+44
   \   000021EA   0x.... 0x....      BL       strlen
   \   000021EE   0xA90B             ADD      R1,SP,#+44
   \   000021F0   0x.... 0x....      BL       BGM111_Transmit
   2546                                        }
   2547                                        
   2548                                        sprintf( (char *)tempBffr2, "Pressure TASKING ERROR!" );
   \                     ??RoadBrd_ParseString_379: (+1)
   \   000021F4   0xF8DF 0x1E0C      LDR.W    R1,??RoadBrd_ParseString_377+0x8
   \   000021F8   0xA80B             ADD      R0,SP,#+44
   \   000021FA   0x.... 0x....      BL       sprintf
   \   000021FE   0xF001 0xBE86      B.W      ??RoadBrd_ParseString_378
   2549                                      } // EndElse (Status == HAL_OK) RoadBrd_Baro_ReadPressure
   2550                                    } // Endif (Status == HAL_OK) RoadBrd_Humidity_ReadHumidity
   2551                                    else
   2552                                    {
   2553                                      if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_372: (+1)
   \   00002202   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002204   0x2D00             CMP      R5,#+0
   \   00002206   0xD00A             BEQ.N    ??RoadBrd_ParseString_380
   2554                                      {
   2555                                        // Yes...Build and Send BLE Response NOW.
   2556                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_TC_HWERR_HUMIDITY</STATUS>");
   \   00002208   0xF8DF 0x1DFC      LDR.W    R1,??RoadBrd_ParseString_377+0xC
   \   0000220C   0xA80B             ADD      R0,SP,#+44
   \   0000220E   0x.... 0x....      BL       strcpy
   2557                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002212   0xA80B             ADD      R0,SP,#+44
   \   00002214   0x.... 0x....      BL       strlen
   \   00002218   0xA90B             ADD      R1,SP,#+44
   \   0000221A   0x.... 0x....      BL       BGM111_Transmit
   2558                                      }
   2559                                      
   2560                                      sprintf( (char *)tempBffr2, "Humidity TASKING ERROR!" );
   \                     ??RoadBrd_ParseString_380: (+1)
   \   0000221E   0xF8DF 0x1DEC      LDR.W    R1,??RoadBrd_ParseString_377+0x10
   \   00002222   0xA80B             ADD      R0,SP,#+44
   \   00002224   0x.... 0x....      BL       sprintf
   \   00002228   0xF001 0xBE71      B.W      ??RoadBrd_ParseString_378
   \                     ??RoadBrd_ParseString_225:
   \   0000222C   0x........         DC32     ?_77
   \   00002230   0x........         DC32     ?_78
   2561                                    } // EndElse (Status == HAL_OK) RoadBrd_Humidity_ReadHumidity
   2562                                  } // Endif (Status == HAL_OK) RoadBrd_ReadTemp
   2563                                  else
   2564                                  {
   2565                                    if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_371: (+1)
   \   00002234   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002236   0x2D00             CMP      R5,#+0
   \   00002238   0xD00A             BEQ.N    ??RoadBrd_ParseString_381
   2566                                    {
   2567                                      // Yes...Build and Send BLE Response NOW.
   2568                                      strcpy( (char *)tempBffr2, "<STATUS>CMD_TC_HWERR_TEMPERATURE</STATUS>");
   \   0000223A   0xF8DF 0x1DD4      LDR.W    R1,??RoadBrd_ParseString_377+0x14
   \   0000223E   0xA80B             ADD      R0,SP,#+44
   \   00002240   0x.... 0x....      BL       strcpy
   2569                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002244   0xA80B             ADD      R0,SP,#+44
   \   00002246   0x.... 0x....      BL       strlen
   \   0000224A   0xA90B             ADD      R1,SP,#+44
   \   0000224C   0x.... 0x....      BL       BGM111_Transmit
   2570                                    }
   2571                                    
   2572                                    sprintf( (char *)tempBffr2, "AMBIENT TEMPERATURE TASKING ERROR!" );
   \                     ??RoadBrd_ParseString_381: (+1)
   \   00002250   0xF8DF 0x1DC0      LDR.W    R1,??RoadBrd_ParseString_377+0x18
   \   00002254   0xA80B             ADD      R0,SP,#+44
   \   00002256   0x.... 0x....      BL       sprintf
   \   0000225A   0xF001 0xBE58      B.W      ??RoadBrd_ParseString_378
   \   0000225E   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_228:
   \   00002260   0x........         DC32     ?_79
   2573                                  } // EndElse (Status == HAL_OK) RoadBrd_ReadTemp
   2574                                } // Endif (Status == HAL_OK) RoadBrd_CoolEye_ReadValues
   2575                                else
   2576                                {
   2577                                  if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_370: (+1)
   \   00002264   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002266   0x2D00             CMP      R5,#+0
   \   00002268   0xD00A             BEQ.N    ??RoadBrd_ParseString_382
   2578                                  {
   2579                                    // Yes...Build and Send BLE Response NOW.
   2580                                    strcpy( (char *)tempBffr2, "<STATUS>CMD_TC_HWERR_IRTEMP</STATUS>");
   \   0000226A   0xF8DF 0x1E40      LDR.W    R1,??RoadBrd_ParseString_383
   \   0000226E   0xA80B             ADD      R0,SP,#+44
   \   00002270   0x.... 0x....      BL       strcpy
   2581                                    BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002274   0xA80B             ADD      R0,SP,#+44
   \   00002276   0x.... 0x....      BL       strlen
   \   0000227A   0xA90B             ADD      R1,SP,#+44
   \   0000227C   0x.... 0x....      BL       BGM111_Transmit
   2582                                  }
   2583                                  
   2584                                  sprintf( (char *)tempBffr2, "GRID EYE/COOL EYE TASKING ERROR!" );
   \                     ??RoadBrd_ParseString_382: (+1)
   \   00002280   0xF8DF 0x1E2C      LDR.W    R1,??RoadBrd_ParseString_383+0x4
   \   00002284   0xA80B             ADD      R0,SP,#+44
   \   00002286   0x.... 0x....      BL       sprintf
   \   0000228A   0xF001 0xBE40      B.W      ??RoadBrd_ParseString_378
   \   0000228E   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_230:
   \   00002290   0x........         DC32     ?_80
   \   00002294   0x........         DC32     ?_81
   2585                                } // EndElse (Status == HAL_OK) RoadBrd_CoolEye_ReadValues
   2586                              }
   2587                              else
   2588                              {
   2589                                switch( tempBffr[2] )
   \                     ??RoadBrd_ParseString_366: (+1)
   \   00002298   0x78A0             LDRB     R0,[R4, #+2]
   \   0000229A   0x2849             CMP      R0,#+73
   \   0000229C   0xF001 0x860A      BEQ.W    ??RoadBrd_ParseString_384
   \   000022A0   0x2852             CMP      R0,#+82
   \   000022A2   0xF000 0x85E7      BEQ.W    ??RoadBrd_ParseString_385
   \   000022A6   0x2853             CMP      R0,#+83
   \   000022A8   0xD004             BEQ.N    ??RoadBrd_ParseString_386
   \   000022AA   0x2854             CMP      R0,#+84
   \   000022AC   0xF001 0x859D      BEQ.W    ??RoadBrd_ParseString_387
   \   000022B0   0xF001 0xBE2D      B.W      ??RoadBrd_ParseString_378
   2590                                {
   2591                                  //------------------ TCS Command: Calibration Set Command
   2592                                case 'S':
   2593                                  // Step 1. Validate format.
   2594                                  if(tempBffr[3]!=':')
   \                     ??RoadBrd_ParseString_386: (+1)
   \   000022B4   0x78E0             LDRB     R0,[R4, #+3]
   \   000022B6   0x283A             CMP      R0,#+58
   \   000022B8   0xD01A             BEQ.N    ??RoadBrd_ParseString_388
   2595                                  {
   2596                                    // Is this a BLE Operation?
   2597                                    if ( BLE_Flag )
   \   000022BA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000022BC   0x2D00             CMP      R5,#+0
   \   000022BE   0xD00A             BEQ.N    ??RoadBrd_ParseString_389
   2598                                    {
   2599                                      // Yes...Build and Send BLE Response NOW.
   2600                                      strcpy( (char *)tempBffr2, "<STATUS>CMD_TCS_SYNTAX</STATUS>");
   \   000022C0   0xF8DF 0x1DF0      LDR.W    R1,??RoadBrd_ParseString_383+0x8
   \   000022C4   0xA80B             ADD      R0,SP,#+44
   \   000022C6   0x.... 0x....      BL       strcpy
   2601                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000022CA   0xA80B             ADD      R0,SP,#+44
   \   000022CC   0x.... 0x....      BL       strlen
   \   000022D0   0xA90B             ADD      R1,SP,#+44
   \   000022D2   0x.... 0x....      BL       BGM111_Transmit
   2602                                    }
   2603                                    
   2604                                    strcpy( (char *)tempBffr2, "TCS SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_389: (+1)
   \   000022D6   0xF8DF 0x1DE0      LDR.W    R1,??RoadBrd_ParseString_383+0xC
   \   000022DA   0xA80B             ADD      R0,SP,#+44
   \   000022DC   0x.... 0x....      BL       strcpy
   \   000022E0   0xF000 0xBDC6      B.W      ??RoadBrd_ParseString_390
   \                     ??RoadBrd_ParseString_234:
   \   000022E4   0x........         DC32     ?_82
   \   000022E8   0x........         DC32     ?_83
   \   000022EC   0x........         DC32     ?_84
   2605                                  } // Endif (tempBffr[3]!=':')
   2606                                  else
   2607                                  {
   2608                                    // 2. Verify if remaining string is digits
   2609                                    if (Size <= 4)
   \                     ??RoadBrd_ParseString_388: (+1)
   \   000022F0   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   000022F4   0x2805             CMP      R0,#+5
   \   000022F6   0xDA19             BGE.N    ??RoadBrd_ParseString_391
   2610                                    {
   2611                                      // Is this a BLE Operation?
   2612                                      if ( BLE_Flag )
   \   000022F8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000022FA   0x2D00             CMP      R5,#+0
   \   000022FC   0xD00A             BEQ.N    ??RoadBrd_ParseString_392
   2613                                      {
   2614                                        // Yes...Build and Send BLE Response NOW.
   2615                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_TCS_BADPARAM</STATUS>");
   \   000022FE   0xF8DF 0x1E50      LDR.W    R1,??RoadBrd_ParseString_393
   \   00002302   0xA80B             ADD      R0,SP,#+44
   \   00002304   0x.... 0x....      BL       strcpy
   2616                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002308   0xA80B             ADD      R0,SP,#+44
   \   0000230A   0x.... 0x....      BL       strlen
   \   0000230E   0xA90B             ADD      R1,SP,#+44
   \   00002310   0x.... 0x....      BL       BGM111_Transmit
   2617                                      }
   2618                                      strcpy( (char *)tempBffr2, "TCS SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_392: (+1)
   \   00002314   0xF8DF 0x1E3C      LDR.W    R1,??RoadBrd_ParseString_393+0x4
   \   00002318   0xA80B             ADD      R0,SP,#+44
   \   0000231A   0x.... 0x....      BL       strcpy
   \   0000231E   0xF000 0xBDA7      B.W      ??RoadBrd_ParseString_390
   \   00002322   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_235:
   \   00002324   0x........         DC32     ?_85
   \   00002328   0x........         DC32     ?_86
   2619                                    } // EndIf (Size > 4)
   2620                                    else
   2621                                    {
   2622                                      // 3. Grab remaining string and convert to integer.
   2623                                      tempPstr = &tempBffr[4];
   \                     ??RoadBrd_ParseString_391: (+1)
   \   0000232C   0x1D20             ADDS     R0,R4,#+4
   \   0000232E   0x9030             STR      R0,[SP, #+192]
   2624                                      strcpy(tempstr, tempPstr);
   \   00002330   0x9930             LDR      R1,[SP, #+192]
   \   00002332   0xA852             ADD      R0,SP,#+328
   \   00002334   0x.... 0x....      BL       strcpy
   2625                                      // Time to parse and test remaining string
   2626                                      Scale = 0.0;
   \   00002338   0x2000             MOVS     R0,#+0
   \   0000233A   0x902A             STR      R0,[SP, #+168]
   2627                                      Offset = 0.0;
   \   0000233C   0x2000             MOVS     R0,#+0
   \   0000233E   0x9029             STR      R0,[SP, #+164]
   2628                                      if (sscanf (tempstr, "%s %f %f", uuid, &Scale, &Offset) == 3)
   \   00002340   0xA829             ADD      R0,SP,#+164
   \   00002342   0x9000             STR      R0,[SP, #+0]
   \   00002344   0xAB2A             ADD      R3,SP,#+168
   \   00002346   0xAA36             ADD      R2,SP,#+216
   \   00002348   0xF8DF 0x1E0C      LDR.W    R1,??RoadBrd_ParseString_393+0x8
   \   0000234C   0xA852             ADD      R0,SP,#+328
   \   0000234E   0x.... 0x....      BL       sscanf
   \   00002352   0x2803             CMP      R0,#+3
   \   00002354   0xF040 0x857A      BNE.W    ??RoadBrd_ParseString_394
   2629                                      {
   2630                                        sprintf( (char *)tempBffr2, "Parms: %s, %f, %f.\r\n", uuid, Scale, Offset );
   \   00002358   0x9829             LDR      R0,[SP, #+164]
   \   0000235A   0x.... 0x....      BL       __aeabi_f2d
   \   0000235E   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00002362   0x982A             LDR      R0,[SP, #+168]
   \   00002364   0x.... 0x....      BL       __aeabi_f2d
   \   00002368   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000236C   0xAA36             ADD      R2,SP,#+216
   \   0000236E   0xF8DF 0x1DEC      LDR.W    R1,??RoadBrd_ParseString_393+0xC
   \   00002372   0xA80B             ADD      R0,SP,#+44
   \   00002374   0x.... 0x....      BL       sprintf
   2631                                        // OK, We have 3 good parameters... NOW Need to determine if UUID is good.
   2632                                        if (strncmp((char *)uuid,"0002",4) == 0) // Shnt_Vltg
   \   00002378   0x2204             MOVS     R2,#+4
   \   0000237A   0xF8DF 0x1DE4      LDR.W    R1,??RoadBrd_ParseString_393+0x10
   \   0000237E   0xA836             ADD      R0,SP,#+216
   \   00002380   0x.... 0x....      BL       strncmp
   \   00002384   0x2800             CMP      R0,#+0
   \   00002386   0xD13A             BNE.N    ??RoadBrd_ParseString_395
   2633                                        {
   2634                                          Status = RoadBrd_CAL_Set_CalItem( CAL_SHNT_VLTG, Offset, Scale);
   \   00002388   0x9A2A             LDR      R2,[SP, #+168]
   \   0000238A   0x9929             LDR      R1,[SP, #+164]
   \   0000238C   0x2000             MOVS     R0,#+0
   \   0000238E   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002392   0x0006             MOVS     R6,R0
   2635                                          if (Status == HAL_OK)
   \   00002394   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002396   0x2E00             CMP      R6,#+0
   \   00002398   0xD11C             BNE.N    ??RoadBrd_ParseString_396
   2636                                          {
   2637                                            // Is this a BLE Operation?
   2638                                            if ( BLE_Flag )
   \   0000239A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000239C   0x2D00             CMP      R5,#+0
   \   0000239E   0xD00A             BEQ.N    ??RoadBrd_ParseString_397
   2639                                            {
   2640                                              // Yes...Build and Send BLE Response NOW.
   2641                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_SHNT_VLTG</STATUS>");
   \   000023A0   0xF8DF 0x1E54      LDR.W    R1,??RoadBrd_ParseString_398
   \   000023A4   0xA80B             ADD      R0,SP,#+44
   \   000023A6   0x.... 0x....      BL       strcpy
   2642                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000023AA   0xA80B             ADD      R0,SP,#+44
   \   000023AC   0x.... 0x....      BL       strlen
   \   000023B0   0xA90B             ADD      R1,SP,#+44
   \   000023B2   0x.... 0x....      BL       BGM111_Transmit
   2643                                            }
   2644                                            sprintf( (char *)tempBffr2, "Shnt_Vltg Set COMPLETE.\r\n" );
   \                     ??RoadBrd_ParseString_397: (+1)
   \   000023B6   0xF8DF 0x1E44      LDR.W    R1,??RoadBrd_ParseString_398+0x4
   \   000023BA   0xA80B             ADD      R0,SP,#+44
   \   000023BC   0x.... 0x....      BL       sprintf
   \   000023C0   0xF000 0xBD41      B.W      ??RoadBrd_ParseString_399
   \                     ??RoadBrd_ParseString_248:
   \   000023C4   0x........         DC32     ?_87
   \   000023C8   0x25 0x78          DC8      "%x."
   \              0x2E 0x00    
   \   000023CC   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
   \   000023D0   0x........         DC32     ?_88
   2645                                          }
   2646                                          else
   2647                                          {
   2648                                            // Is this a BLE Operation?
   2649                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_396: (+1)
   \   000023D4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000023D6   0x2D00             CMP      R5,#+0
   \   000023D8   0xD00A             BEQ.N    ??RoadBrd_ParseString_400
   2650                                            {
   2651                                              // Yes...Build and Send BLE Response NOW.
   2652                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_SHNT_VLTG_ERR</STATUS>");
   \   000023DA   0xF8DF 0x1E24      LDR.W    R1,??RoadBrd_ParseString_398+0x8
   \   000023DE   0xA80B             ADD      R0,SP,#+44
   \   000023E0   0x.... 0x....      BL       strcpy
   2653                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000023E4   0xA80B             ADD      R0,SP,#+44
   \   000023E6   0x.... 0x....      BL       strlen
   \   000023EA   0xA90B             ADD      R1,SP,#+44
   \   000023EC   0x.... 0x....      BL       BGM111_Transmit
   2654                                            }
   2655                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_400: (+1)
   \   000023F0   0xF8DF 0x1E10      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   000023F4   0xA80B             ADD      R0,SP,#+44
   \   000023F6   0x.... 0x....      BL       sprintf
   \   000023FA   0xF000 0xBD24      B.W      ??RoadBrd_ParseString_399
   2656                                          }
   2657                                        }
   2658                                        else if (strncmp((char *)uuid,"0004",4) == 0) // Current
   \                     ??RoadBrd_ParseString_395: (+1)
   \   000023FE   0x2204             MOVS     R2,#+4
   \   00002400   0xF8DF 0x1E04      LDR.W    R1,??RoadBrd_ParseString_398+0x10
   \   00002404   0xA836             ADD      R0,SP,#+216
   \   00002406   0x.... 0x....      BL       strncmp
   \   0000240A   0x2800             CMP      R0,#+0
   \   0000240C   0xD137             BNE.N    ??RoadBrd_ParseString_401
   2659                                        {
   2660                                          Status = RoadBrd_CAL_Set_CalItem( CAL_CURRENT, Offset, Scale);
   \   0000240E   0x9A2A             LDR      R2,[SP, #+168]
   \   00002410   0x9929             LDR      R1,[SP, #+164]
   \   00002412   0x2001             MOVS     R0,#+1
   \   00002414   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002418   0x0006             MOVS     R6,R0
   2661                                          if (Status == HAL_OK)
   \   0000241A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000241C   0x2E00             CMP      R6,#+0
   \   0000241E   0xD119             BNE.N    ??RoadBrd_ParseString_402
   2662                                          {
   2663                                            // Is this a BLE Operation?
   2664                                            if ( BLE_Flag )
   \   00002420   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002422   0x2D00             CMP      R5,#+0
   \   00002424   0xD00A             BEQ.N    ??RoadBrd_ParseString_403
   2665                                            {
   2666                                              // Yes...Build and Send BLE Response NOW.
   2667                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_CURRENT</STATUS>");
   \   00002426   0xF8DF 0x1DE4      LDR.W    R1,??RoadBrd_ParseString_398+0x14
   \   0000242A   0xA80B             ADD      R0,SP,#+44
   \   0000242C   0x.... 0x....      BL       strcpy
   2668                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002430   0xA80B             ADD      R0,SP,#+44
   \   00002432   0x.... 0x....      BL       strlen
   \   00002436   0xA90B             ADD      R1,SP,#+44
   \   00002438   0x.... 0x....      BL       BGM111_Transmit
   2669                                            }
   2670                                            sprintf( (char *)tempBffr2, "Current Set COMPLETE." );
   \                     ??RoadBrd_ParseString_403: (+1)
   \   0000243C   0xF8DF 0x1E64      LDR.W    R1,??RoadBrd_ParseString_404
   \   00002440   0xA80B             ADD      R0,SP,#+44
   \   00002442   0x.... 0x....      BL       sprintf
   \   00002446   0xF000 0xBCFE      B.W      ??RoadBrd_ParseString_399
   \   0000244A   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_254:
   \   0000244C   0x........         DC32     ?_89
   \   00002450   0x........         DC32     ?_90
   2671                                          }
   2672                                          else
   2673                                          {
   2674                                            // Is this a BLE Operation?
   2675                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_402: (+1)
   \   00002454   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002456   0x2D00             CMP      R5,#+0
   \   00002458   0xD00A             BEQ.N    ??RoadBrd_ParseString_405
   2676                                            {
   2677                                              // Yes...Build and Send BLE Response NOW.
   2678                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_CURRENT_ERR</STATUS>");
   \   0000245A   0xF8DF 0x1E4C      LDR.W    R1,??RoadBrd_ParseString_404+0x4
   \   0000245E   0xA80B             ADD      R0,SP,#+44
   \   00002460   0x.... 0x....      BL       strcpy
   2679                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002464   0xA80B             ADD      R0,SP,#+44
   \   00002466   0x.... 0x....      BL       strlen
   \   0000246A   0xA90B             ADD      R1,SP,#+44
   \   0000246C   0x.... 0x....      BL       BGM111_Transmit
   2680                                            }
   2681                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_405: (+1)
   \   00002470   0xF8DF 0x1D90      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   00002474   0xA80B             ADD      R0,SP,#+44
   \   00002476   0x.... 0x....      BL       sprintf
   \   0000247A   0xF000 0xBCE4      B.W      ??RoadBrd_ParseString_399
   2682                                          }
   2683                                        }
   2684                                        else if (strncmp((char *)uuid,"0006",4) == 0) // Power
   \                     ??RoadBrd_ParseString_401: (+1)
   \   0000247E   0x2204             MOVS     R2,#+4
   \   00002480   0xF8DF 0x1E28      LDR.W    R1,??RoadBrd_ParseString_404+0x8
   \   00002484   0xA836             ADD      R0,SP,#+216
   \   00002486   0x.... 0x....      BL       strncmp
   \   0000248A   0x2800             CMP      R0,#+0
   \   0000248C   0xD139             BNE.N    ??RoadBrd_ParseString_406
   2685                                        {
   2686                                          Status = RoadBrd_CAL_Set_CalItem( CAL_POWER, Offset, Scale);
   \   0000248E   0x9A2A             LDR      R2,[SP, #+168]
   \   00002490   0x9929             LDR      R1,[SP, #+164]
   \   00002492   0x2002             MOVS     R0,#+2
   \   00002494   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002498   0x0006             MOVS     R6,R0
   2687                                          if (Status == HAL_OK)
   \   0000249A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000249C   0x2E00             CMP      R6,#+0
   \   0000249E   0xD11B             BNE.N    ??RoadBrd_ParseString_407
   2688                                          {
   2689                                            // Is this a BLE Operation?
   2690                                            if ( BLE_Flag )
   \   000024A0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000024A2   0x2D00             CMP      R5,#+0
   \   000024A4   0xD00A             BEQ.N    ??RoadBrd_ParseString_408
   2691                                            {
   2692                                              // Yes...Build and Send BLE Response NOW.
   2693                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_POWER</STATUS>");
   \   000024A6   0xF8DF 0x1E08      LDR.W    R1,??RoadBrd_ParseString_404+0xC
   \   000024AA   0xA80B             ADD      R0,SP,#+44
   \   000024AC   0x.... 0x....      BL       strcpy
   2694                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000024B0   0xA80B             ADD      R0,SP,#+44
   \   000024B2   0x.... 0x....      BL       strlen
   \   000024B6   0xA90B             ADD      R1,SP,#+44
   \   000024B8   0x.... 0x....      BL       BGM111_Transmit
   2695                                            }
   2696                                            sprintf( (char *)tempBffr2, "Power Set COMPLETE." );
   \                     ??RoadBrd_ParseString_408: (+1)
   \   000024BC   0xF8DF 0x1DF4      LDR.W    R1,??RoadBrd_ParseString_404+0x10
   \   000024C0   0xA80B             ADD      R0,SP,#+44
   \   000024C2   0x.... 0x....      BL       sprintf
   \   000024C6   0xF000 0xBCBE      B.W      ??RoadBrd_ParseString_399
   \   000024CA   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_257:
   \   000024CC   0x........         DC32     ?_91
   \   000024D0   0x........         DC32     ?_92
   \   000024D4   0x........         DC32     ?_93
   2697                                          }
   2698                                          else
   2699                                          {
   2700                                            // Is this a BLE Operation?
   2701                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_407: (+1)
   \   000024D8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000024DA   0x2D00             CMP      R5,#+0
   \   000024DC   0xD00A             BEQ.N    ??RoadBrd_ParseString_409
   2702                                            {
   2703                                              // Yes...Build and Send BLE Response NOW.
   2704                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_POWER_ERR</STATUS>");
   \   000024DE   0xF8DF 0x1E6C      LDR.W    R1,??RoadBrd_ParseString_410
   \   000024E2   0xA80B             ADD      R0,SP,#+44
   \   000024E4   0x.... 0x....      BL       strcpy
   2705                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000024E8   0xA80B             ADD      R0,SP,#+44
   \   000024EA   0x.... 0x....      BL       strlen
   \   000024EE   0xA90B             ADD      R1,SP,#+44
   \   000024F0   0x.... 0x....      BL       BGM111_Transmit
   2706                                            }
   2707                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_409: (+1)
   \   000024F4   0xF8DF 0x1D0C      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   000024F8   0xA80B             ADD      R0,SP,#+44
   \   000024FA   0x.... 0x....      BL       sprintf
   \   000024FE   0xF000 0xBCA2      B.W      ??RoadBrd_ParseString_399
   2708                                          }
   2709                                        }
   2710                                        else if (strncmp((char *)uuid,"0008",4) == 0) // Voltage
   \                     ??RoadBrd_ParseString_406: (+1)
   \   00002502   0x2204             MOVS     R2,#+4
   \   00002504   0xF8DF 0x1E48      LDR.W    R1,??RoadBrd_ParseString_410+0x4
   \   00002508   0xA836             ADD      R0,SP,#+216
   \   0000250A   0x.... 0x....      BL       strncmp
   \   0000250E   0x2800             CMP      R0,#+0
   \   00002510   0xD139             BNE.N    ??RoadBrd_ParseString_411
   2711                                        {
   2712                                          Status = RoadBrd_CAL_Set_CalItem( CAL_VOLTAGE, Offset, Scale);
   \   00002512   0x9A2A             LDR      R2,[SP, #+168]
   \   00002514   0x9929             LDR      R1,[SP, #+164]
   \   00002516   0x2003             MOVS     R0,#+3
   \   00002518   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   0000251C   0x0006             MOVS     R6,R0
   2713                                          if (Status == HAL_OK)
   \   0000251E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002520   0x2E00             CMP      R6,#+0
   \   00002522   0xD11B             BNE.N    ??RoadBrd_ParseString_412
   2714                                          {
   2715                                            // Is this a BLE Operation?
   2716                                            if ( BLE_Flag )
   \   00002524   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002526   0x2D00             CMP      R5,#+0
   \   00002528   0xD00A             BEQ.N    ??RoadBrd_ParseString_413
   2717                                            {
   2718                                              // Yes...Build and Send BLE Response NOW.
   2719                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_VOLTAGE</STATUS>");
   \   0000252A   0xF8DF 0x1E28      LDR.W    R1,??RoadBrd_ParseString_410+0x8
   \   0000252E   0xA80B             ADD      R0,SP,#+44
   \   00002530   0x.... 0x....      BL       strcpy
   2720                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002534   0xA80B             ADD      R0,SP,#+44
   \   00002536   0x.... 0x....      BL       strlen
   \   0000253A   0xA90B             ADD      R1,SP,#+44
   \   0000253C   0x.... 0x....      BL       BGM111_Transmit
   2721                                            }
   2722                                            sprintf( (char *)tempBffr2, "Voltage Set COMPLETE." );
   \                     ??RoadBrd_ParseString_413: (+1)
   \   00002540   0xF8DF 0x1E14      LDR.W    R1,??RoadBrd_ParseString_410+0xC
   \   00002544   0xA80B             ADD      R0,SP,#+44
   \   00002546   0x.... 0x....      BL       sprintf
   \   0000254A   0xF000 0xBC7C      B.W      ??RoadBrd_ParseString_399
   \   0000254E   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_261:
   \   00002550   0x........         DC32     ?_94
   \   00002554   0x........         DC32     ?_95
   \   00002558   0x........         DC32     ?_96
   2723                                          }
   2724                                          else
   2725                                          {
   2726                                            // Is this a BLE Operation?
   2727                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_412: (+1)
   \   0000255C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000255E   0x2D00             CMP      R5,#+0
   \   00002560   0xD00A             BEQ.N    ??RoadBrd_ParseString_414
   2728                                            {
   2729                                              // Yes...Build and Send BLE Response NOW.
   2730                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_VOLTAGE_ERR</STATUS>");
   \   00002562   0xF8DF 0x1DF8      LDR.W    R1,??RoadBrd_ParseString_410+0x10
   \   00002566   0xA80B             ADD      R0,SP,#+44
   \   00002568   0x.... 0x....      BL       strcpy
   2731                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000256C   0xA80B             ADD      R0,SP,#+44
   \   0000256E   0x.... 0x....      BL       strlen
   \   00002572   0xA90B             ADD      R1,SP,#+44
   \   00002574   0x.... 0x....      BL       BGM111_Transmit
   2732                                            }
   2733                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_414: (+1)
   \   00002578   0xF8DF 0x1C88      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   0000257C   0xA80B             ADD      R0,SP,#+44
   \   0000257E   0x.... 0x....      BL       sprintf
   \   00002582   0xF000 0xBC60      B.W      ??RoadBrd_ParseString_399
   2734                                          }
   2735                                        }
   2736                                        else if (strncmp((char *)uuid,"000A",4) == 0) // TempC
   \                     ??RoadBrd_ParseString_411: (+1)
   \   00002586   0x2204             MOVS     R2,#+4
   \   00002588   0xF8DF 0x1E68      LDR.W    R1,??RoadBrd_ParseString_415
   \   0000258C   0xA836             ADD      R0,SP,#+216
   \   0000258E   0x.... 0x....      BL       strncmp
   \   00002592   0x2800             CMP      R0,#+0
   \   00002594   0xD139             BNE.N    ??RoadBrd_ParseString_416
   2737                                        {
   2738                                          Status = RoadBrd_CAL_Set_CalItem( CAL_TEMPC, Offset, Scale);
   \   00002596   0x9A2A             LDR      R2,[SP, #+168]
   \   00002598   0x9929             LDR      R1,[SP, #+164]
   \   0000259A   0x2004             MOVS     R0,#+4
   \   0000259C   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   000025A0   0x0006             MOVS     R6,R0
   2739                                          if (Status == HAL_OK)
   \   000025A2   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000025A4   0x2E00             CMP      R6,#+0
   \   000025A6   0xD11B             BNE.N    ??RoadBrd_ParseString_417
   2740                                          {
   2741                                            // Is this a BLE Operation?
   2742                                            if ( BLE_Flag )
   \   000025A8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000025AA   0x2D00             CMP      R5,#+0
   \   000025AC   0xD00A             BEQ.N    ??RoadBrd_ParseString_418
   2743                                            {
   2744                                              // Yes...Build and Send BLE Response NOW.
   2745                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_TEMPC</STATUS>");
   \   000025AE   0xF8DF 0x1E48      LDR.W    R1,??RoadBrd_ParseString_415+0x4
   \   000025B2   0xA80B             ADD      R0,SP,#+44
   \   000025B4   0x.... 0x....      BL       strcpy
   2746                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000025B8   0xA80B             ADD      R0,SP,#+44
   \   000025BA   0x.... 0x....      BL       strlen
   \   000025BE   0xA90B             ADD      R1,SP,#+44
   \   000025C0   0x.... 0x....      BL       BGM111_Transmit
   2747                                            }
   2748                                            sprintf( (char *)tempBffr2, "TempC Set COMPLETE." );
   \                     ??RoadBrd_ParseString_418: (+1)
   \   000025C4   0xF8DF 0x1E34      LDR.W    R1,??RoadBrd_ParseString_415+0x8
   \   000025C8   0xA80B             ADD      R0,SP,#+44
   \   000025CA   0x.... 0x....      BL       sprintf
   \   000025CE   0xF000 0xBC3A      B.W      ??RoadBrd_ParseString_399
   \   000025D2   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_265:
   \   000025D4   0x........         DC32     ?_97
   \   000025D8   0x........         DC32     ?_98
   \   000025DC   0x........         DC32     ?_99
   2749                                          }
   2750                                          else
   2751                                          {
   2752                                            // Is this a BLE Operation?
   2753                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_417: (+1)
   \   000025E0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000025E2   0x2D00             CMP      R5,#+0
   \   000025E4   0xD00A             BEQ.N    ??RoadBrd_ParseString_419
   2754                                            {
   2755                                              // Yes...Build and Send BLE Response NOW.
   2756                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_TEMPC_ERR</STATUS>");
   \   000025E6   0xF8DF 0x1E18      LDR.W    R1,??RoadBrd_ParseString_415+0xC
   \   000025EA   0xA80B             ADD      R0,SP,#+44
   \   000025EC   0x.... 0x....      BL       strcpy
   2757                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000025F0   0xA80B             ADD      R0,SP,#+44
   \   000025F2   0x.... 0x....      BL       strlen
   \   000025F6   0xA90B             ADD      R1,SP,#+44
   \   000025F8   0x.... 0x....      BL       BGM111_Transmit
   2758                                            }
   2759                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_419: (+1)
   \   000025FC   0xF8DF 0x1C04      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   00002600   0xA80B             ADD      R0,SP,#+44
   \   00002602   0x.... 0x....      BL       sprintf
   \   00002606   0xF000 0xBC1E      B.W      ??RoadBrd_ParseString_399
   2760                                          }
   2761                                        }
   2762                                        else if (strncmp((char *)uuid,"000B",4) == 0) // TempF
   \                     ??RoadBrd_ParseString_416: (+1)
   \   0000260A   0x2204             MOVS     R2,#+4
   \   0000260C   0xF8DF 0x1DF4      LDR.W    R1,??RoadBrd_ParseString_415+0x10
   \   00002610   0xA836             ADD      R0,SP,#+216
   \   00002612   0x.... 0x....      BL       strncmp
   \   00002616   0x2800             CMP      R0,#+0
   \   00002618   0xD131             BNE.N    ??RoadBrd_ParseString_420
   2763                                        {
   2764                                          Status = RoadBrd_CAL_Set_CalItem( CAL_TEMPF, Offset, Scale);
   \   0000261A   0x9A2A             LDR      R2,[SP, #+168]
   \   0000261C   0x9929             LDR      R1,[SP, #+164]
   \   0000261E   0x2005             MOVS     R0,#+5
   \   00002620   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002624   0x0006             MOVS     R6,R0
   2765                                          if (Status == HAL_OK)
   \   00002626   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002628   0x2E00             CMP      R6,#+0
   \   0000262A   0xD114             BNE.N    ??RoadBrd_ParseString_421
   2766                                          {
   2767                                            // Is this a BLE Operation?
   2768                                            if ( BLE_Flag )
   \   0000262C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000262E   0x2D00             CMP      R5,#+0
   \   00002630   0xD00A             BEQ.N    ??RoadBrd_ParseString_422
   2769                                            {
   2770                                              // Yes...Build and Send BLE Response NOW.
   2771                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_TEMPF</STATUS>");
   \   00002632   0xF8DF 0x1E68      LDR.W    R1,??RoadBrd_ParseString_423
   \   00002636   0xA80B             ADD      R0,SP,#+44
   \   00002638   0x.... 0x....      BL       strcpy
   2772                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000263C   0xA80B             ADD      R0,SP,#+44
   \   0000263E   0x.... 0x....      BL       strlen
   \   00002642   0xA90B             ADD      R1,SP,#+44
   \   00002644   0x.... 0x....      BL       BGM111_Transmit
   2773                                            }
   2774                                            sprintf( (char *)tempBffr2, "TempF Set COMPLETE." );
   \                     ??RoadBrd_ParseString_422: (+1)
   \   00002648   0xF8DF 0x1E54      LDR.W    R1,??RoadBrd_ParseString_423+0x4
   \   0000264C   0xA80B             ADD      R0,SP,#+44
   \   0000264E   0x.... 0x....      BL       sprintf
   \   00002652   0xF000 0xBBF8      B.W      ??RoadBrd_ParseString_399
   2775                                          }
   2776                                          else
   2777                                          {
   2778                                            // Is this a BLE Operation?
   2779                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_421: (+1)
   \   00002656   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002658   0x2D00             CMP      R5,#+0
   \   0000265A   0xD00A             BEQ.N    ??RoadBrd_ParseString_424
   2780                                            {
   2781                                              // Yes...Build and Send BLE Response NOW.
   2782                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_TEMPF_ERR</STATUS>");
   \   0000265C   0xF8DF 0x1E44      LDR.W    R1,??RoadBrd_ParseString_423+0x8
   \   00002660   0xA80B             ADD      R0,SP,#+44
   \   00002662   0x.... 0x....      BL       strcpy
   2783                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002666   0xA80B             ADD      R0,SP,#+44
   \   00002668   0x.... 0x....      BL       strlen
   \   0000266C   0xA90B             ADD      R1,SP,#+44
   \   0000266E   0x.... 0x....      BL       BGM111_Transmit
   2784                                            }
   2785                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_424: (+1)
   \   00002672   0xF8DF 0x1B90      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   00002676   0xA80B             ADD      R0,SP,#+44
   \   00002678   0x.... 0x....      BL       sprintf
   \   0000267C   0xE3E3             B.N      ??RoadBrd_ParseString_399
   2786                                          }
   2787                                        }
   2788                                        else if (strncmp((char *)uuid,"0011",4) == 0) // Pressure
   \                     ??RoadBrd_ParseString_420: (+1)
   \   0000267E   0x2204             MOVS     R2,#+4
   \   00002680   0xF8DF 0x1E24      LDR.W    R1,??RoadBrd_ParseString_423+0xC
   \   00002684   0xA836             ADD      R0,SP,#+216
   \   00002686   0x.... 0x....      BL       strncmp
   \   0000268A   0x2800             CMP      R0,#+0
   \   0000268C   0xD130             BNE.N    ??RoadBrd_ParseString_425
   2789                                        {
   2790                                          Status = RoadBrd_CAL_Set_CalItem( CAL_PRESSURE, Offset, Scale);
   \   0000268E   0x9A2A             LDR      R2,[SP, #+168]
   \   00002690   0x9929             LDR      R1,[SP, #+164]
   \   00002692   0x2006             MOVS     R0,#+6
   \   00002694   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002698   0x0006             MOVS     R6,R0
   2791                                          if (Status == HAL_OK)
   \   0000269A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000269C   0x2E00             CMP      R6,#+0
   \   0000269E   0xD113             BNE.N    ??RoadBrd_ParseString_426
   2792                                          {
   2793                                            // Is this a BLE Operation?
   2794                                            if ( BLE_Flag )
   \   000026A0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000026A2   0x2D00             CMP      R5,#+0
   \   000026A4   0xD00A             BEQ.N    ??RoadBrd_ParseString_427
   2795                                            {
   2796                                              // Yes...Build and Send BLE Response NOW.
   2797                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_PRESSURE</STATUS>");
   \   000026A6   0xF8DF 0x1E04      LDR.W    R1,??RoadBrd_ParseString_423+0x10
   \   000026AA   0xA80B             ADD      R0,SP,#+44
   \   000026AC   0x.... 0x....      BL       strcpy
   2798                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000026B0   0xA80B             ADD      R0,SP,#+44
   \   000026B2   0x.... 0x....      BL       strlen
   \   000026B6   0xA90B             ADD      R1,SP,#+44
   \   000026B8   0x.... 0x....      BL       BGM111_Transmit
   2799                                            }
   2800                                            sprintf( (char *)tempBffr2, "Pressure Set COMPLETE." );
   \                     ??RoadBrd_ParseString_427: (+1)
   \   000026BC   0xF8DF 0x1E84      LDR.W    R1,??RoadBrd_ParseString_428
   \   000026C0   0xA80B             ADD      R0,SP,#+44
   \   000026C2   0x.... 0x....      BL       sprintf
   \   000026C6   0xE3BE             B.N      ??RoadBrd_ParseString_399
   2801                                          }
   2802                                          else
   2803                                          {
   2804                                            // Is this a BLE Operation?
   2805                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_426: (+1)
   \   000026C8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000026CA   0x2D00             CMP      R5,#+0
   \   000026CC   0xD00A             BEQ.N    ??RoadBrd_ParseString_429
   2806                                            {
   2807                                              // Yes...Build and Send BLE Response NOW.
   2808                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_PRESSURE_ERR</STATUS>");
   \   000026CE   0xF8DF 0x1E78      LDR.W    R1,??RoadBrd_ParseString_428+0x4
   \   000026D2   0xA80B             ADD      R0,SP,#+44
   \   000026D4   0x.... 0x....      BL       strcpy
   2809                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000026D8   0xA80B             ADD      R0,SP,#+44
   \   000026DA   0x.... 0x....      BL       strlen
   \   000026DE   0xA90B             ADD      R1,SP,#+44
   \   000026E0   0x.... 0x....      BL       BGM111_Transmit
   2810                                            }
   2811                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_429: (+1)
   \   000026E4   0xF8DF 0x1B1C      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   000026E8   0xA80B             ADD      R0,SP,#+44
   \   000026EA   0x.... 0x....      BL       sprintf
   \   000026EE   0xE3AA             B.N      ??RoadBrd_ParseString_399
   2812                                          }
   2813                                        }
   2814                                        else if (strncmp((char *)uuid,"0030",4) == 0) // Humidity
   \                     ??RoadBrd_ParseString_425: (+1)
   \   000026F0   0x2204             MOVS     R2,#+4
   \   000026F2   0xF8DF 0x1E58      LDR.W    R1,??RoadBrd_ParseString_428+0x8
   \   000026F6   0xA836             ADD      R0,SP,#+216
   \   000026F8   0x.... 0x....      BL       strncmp
   \   000026FC   0x2800             CMP      R0,#+0
   \   000026FE   0xD135             BNE.N    ??RoadBrd_ParseString_430
   2815                                        {
   2816                                          Status = RoadBrd_CAL_Set_CalItem( CAL_HUMIDITY, Offset, Scale);
   \   00002700   0x9A2A             LDR      R2,[SP, #+168]
   \   00002702   0x9929             LDR      R1,[SP, #+164]
   \   00002704   0x2007             MOVS     R0,#+7
   \   00002706   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   0000270A   0x0006             MOVS     R6,R0
   2817                                          if (Status == HAL_OK)
   \   0000270C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000270E   0x2E00             CMP      R6,#+0
   \   00002710   0xD118             BNE.N    ??RoadBrd_ParseString_431
   2818                                          {
   2819                                            // Is this a BLE Operation?
   2820                                            if ( BLE_Flag )
   \   00002712   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002714   0x2D00             CMP      R5,#+0
   \   00002716   0xD00A             BEQ.N    ??RoadBrd_ParseString_432
   2821                                            {
   2822                                              // Yes...Build and Send BLE Response NOW.
   2823                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_HUMIDITY</STATUS>");
   \   00002718   0xF8DF 0x1E34      LDR.W    R1,??RoadBrd_ParseString_428+0xC
   \   0000271C   0xA80B             ADD      R0,SP,#+44
   \   0000271E   0x.... 0x....      BL       strcpy
   2824                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002722   0xA80B             ADD      R0,SP,#+44
   \   00002724   0x.... 0x....      BL       strlen
   \   00002728   0xA90B             ADD      R1,SP,#+44
   \   0000272A   0x.... 0x....      BL       BGM111_Transmit
   2825                                            }
   2826                                            sprintf( (char *)tempBffr2, "Humidity Set COMPLETE." );
   \                     ??RoadBrd_ParseString_432: (+1)
   \   0000272E   0xF8DF 0x1E24      LDR.W    R1,??RoadBrd_ParseString_428+0x10
   \   00002732   0xA80B             ADD      R0,SP,#+44
   \   00002734   0x.... 0x....      BL       sprintf
   \   00002738   0xE385             B.N      ??RoadBrd_ParseString_399
   \   0000273A   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_274:
   \   0000273C   0x........         DC32     ?_100
   \   00002740   0x........         DC32     ?_101
   2827                                          }
   2828                                          else
   2829                                          {
   2830                                            // Is this a BLE Operation?
   2831                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_431: (+1)
   \   00002744   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002746   0x2D00             CMP      R5,#+0
   \   00002748   0xD00A             BEQ.N    ??RoadBrd_ParseString_433
   2832                                            {
   2833                                              // Yes...Build and Send BLE Response NOW.
   2834                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_HUMIDITY_ERR</STATUS>");
   \   0000274A   0xF8DF 0x1E9C      LDR.W    R1,??RoadBrd_ParseString_434
   \   0000274E   0xA80B             ADD      R0,SP,#+44
   \   00002750   0x.... 0x....      BL       strcpy
   2835                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002754   0xA80B             ADD      R0,SP,#+44
   \   00002756   0x.... 0x....      BL       strlen
   \   0000275A   0xA90B             ADD      R1,SP,#+44
   \   0000275C   0x.... 0x....      BL       BGM111_Transmit
   2836                                            }
   2837                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_433: (+1)
   \   00002760   0xF8DF 0x1AA0      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   00002764   0xA80B             ADD      R0,SP,#+44
   \   00002766   0x.... 0x....      BL       sprintf
   \   0000276A   0xE36C             B.N      ??RoadBrd_ParseString_399
   2838                                          }
   2839                                        }
   2840                                        else if (strncmp((char *)uuid,"0032",4) == 0) // Hum_TempC
   \                     ??RoadBrd_ParseString_430: (+1)
   \   0000276C   0x2204             MOVS     R2,#+4
   \   0000276E   0xF8DF 0x1E7C      LDR.W    R1,??RoadBrd_ParseString_434+0x4
   \   00002772   0xA836             ADD      R0,SP,#+216
   \   00002774   0x.... 0x....      BL       strncmp
   \   00002778   0x2800             CMP      R0,#+0
   \   0000277A   0xD135             BNE.N    ??RoadBrd_ParseString_435
   2841                                        {
   2842                                          Status = RoadBrd_CAL_Set_CalItem( CAL_HUM_TEMPC, Offset, Scale);
   \   0000277C   0x9A2A             LDR      R2,[SP, #+168]
   \   0000277E   0x9929             LDR      R1,[SP, #+164]
   \   00002780   0x2008             MOVS     R0,#+8
   \   00002782   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002786   0x0006             MOVS     R6,R0
   2843                                          if (Status == HAL_OK)
   \   00002788   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000278A   0x2E00             CMP      R6,#+0
   \   0000278C   0xD118             BNE.N    ??RoadBrd_ParseString_436
   2844                                          {
   2845                                            // Is this a BLE Operation?
   2846                                            if ( BLE_Flag )
   \   0000278E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002790   0x2D00             CMP      R5,#+0
   \   00002792   0xD00A             BEQ.N    ??RoadBrd_ParseString_437
   2847                                            {
   2848                                              // Yes...Build and Send BLE Response NOW.
   2849                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_HUM_TEMPC</STATUS>");
   \   00002794   0xF8DF 0x1E58      LDR.W    R1,??RoadBrd_ParseString_434+0x8
   \   00002798   0xA80B             ADD      R0,SP,#+44
   \   0000279A   0x.... 0x....      BL       strcpy
   2850                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000279E   0xA80B             ADD      R0,SP,#+44
   \   000027A0   0x.... 0x....      BL       strlen
   \   000027A4   0xA90B             ADD      R1,SP,#+44
   \   000027A6   0x.... 0x....      BL       BGM111_Transmit
   2851                                            }
   2852                                            sprintf( (char *)tempBffr2, "Hum_TempC Set COMPLETE." );
   \                     ??RoadBrd_ParseString_437: (+1)
   \   000027AA   0xF8DF 0x1E48      LDR.W    R1,??RoadBrd_ParseString_434+0xC
   \   000027AE   0xA80B             ADD      R0,SP,#+44
   \   000027B0   0x.... 0x....      BL       sprintf
   \   000027B4   0xE347             B.N      ??RoadBrd_ParseString_399
   \   000027B6   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_277:
   \   000027B8   0x........         DC32     ?_102
   \   000027BC   0x........         DC32     ?_103
   2853                                          }
   2854                                          else
   2855                                          {
   2856                                            // Is this a BLE Operation?
   2857                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_436: (+1)
   \   000027C0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000027C2   0x2D00             CMP      R5,#+0
   \   000027C4   0xD00A             BEQ.N    ??RoadBrd_ParseString_438
   2858                                            {
   2859                                              // Yes...Build and Send BLE Response NOW.
   2860                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_HUM_TEMPC_ERR</STATUS>");
   \   000027C6   0xF8DF 0x1E30      LDR.W    R1,??RoadBrd_ParseString_434+0x10
   \   000027CA   0xA80B             ADD      R0,SP,#+44
   \   000027CC   0x.... 0x....      BL       strcpy
   2861                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000027D0   0xA80B             ADD      R0,SP,#+44
   \   000027D2   0x.... 0x....      BL       strlen
   \   000027D6   0xA90B             ADD      R1,SP,#+44
   \   000027D8   0x.... 0x....      BL       BGM111_Transmit
   2862                                            }
   2863                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_438: (+1)
   \   000027DC   0xF8DF 0x1A24      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   000027E0   0xA80B             ADD      R0,SP,#+44
   \   000027E2   0x.... 0x....      BL       sprintf
   \   000027E6   0xE32E             B.N      ??RoadBrd_ParseString_399
   2864                                          }
   2865                                        }
   2866                                        else if (strncmp((char *)uuid,"0033",4) == 0) // Hum_TempF
   \                     ??RoadBrd_ParseString_435: (+1)
   \   000027E8   0x2204             MOVS     R2,#+4
   \   000027EA   0xF8DF 0x1EA0      LDR.W    R1,??RoadBrd_ParseString_439
   \   000027EE   0xA836             ADD      R0,SP,#+216
   \   000027F0   0x.... 0x....      BL       strncmp
   \   000027F4   0x2800             CMP      R0,#+0
   \   000027F6   0xD139             BNE.N    ??RoadBrd_ParseString_440
   2867                                        {
   2868                                          Status = RoadBrd_CAL_Set_CalItem( CAL_HUM_TEMPF, Offset, Scale);
   \   000027F8   0x9A2A             LDR      R2,[SP, #+168]
   \   000027FA   0x9929             LDR      R1,[SP, #+164]
   \   000027FC   0x2009             MOVS     R0,#+9
   \   000027FE   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002802   0x0006             MOVS     R6,R0
   2869                                          if (Status == HAL_OK)
   \   00002804   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002806   0x2E00             CMP      R6,#+0
   \   00002808   0xD11C             BNE.N    ??RoadBrd_ParseString_441
   2870                                          {
   2871                                            // Is this a BLE Operation?
   2872                                            if ( BLE_Flag )
   \   0000280A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000280C   0x2D00             CMP      R5,#+0
   \   0000280E   0xD00A             BEQ.N    ??RoadBrd_ParseString_442
   2873                                            {
   2874                                              // Yes...Build and Send BLE Response NOW.
   2875                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_HUM_TEMPF</STATUS>");
   \   00002810   0xF8DF 0x1E7C      LDR.W    R1,??RoadBrd_ParseString_439+0x4
   \   00002814   0xA80B             ADD      R0,SP,#+44
   \   00002816   0x.... 0x....      BL       strcpy
   2876                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000281A   0xA80B             ADD      R0,SP,#+44
   \   0000281C   0x.... 0x....      BL       strlen
   \   00002820   0xA90B             ADD      R1,SP,#+44
   \   00002822   0x.... 0x....      BL       BGM111_Transmit
   2877                                            }
   2878                                            sprintf( (char *)tempBffr2, "Hum_TempF Set COMPLETE." );
   \                     ??RoadBrd_ParseString_442: (+1)
   \   00002826   0xF8DF 0x1E6C      LDR.W    R1,??RoadBrd_ParseString_439+0x8
   \   0000282A   0xA80B             ADD      R0,SP,#+44
   \   0000282C   0x.... 0x....      BL       sprintf
   \   00002830   0xE309             B.N      ??RoadBrd_ParseString_399
   \   00002832   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_280:
   \   00002834   0x........         DC32     ?_42
   \   00002838   0x........         DC32     ?_104
   \   0000283C   0x........         DC32     ?_105
   \   00002840   0x........         DC32     ?_106
   2879                                          }
   2880                                          else
   2881                                          {
   2882                                            // Is this a BLE Operation?
   2883                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_441: (+1)
   \   00002844   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002846   0x2D00             CMP      R5,#+0
   \   00002848   0xD00A             BEQ.N    ??RoadBrd_ParseString_443
   2884                                            {
   2885                                              // Yes...Build and Send BLE Response NOW.
   2886                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_HUM_TEMPF_ERR</STATUS>");
   \   0000284A   0xF8DF 0x1E4C      LDR.W    R1,??RoadBrd_ParseString_439+0xC
   \   0000284E   0xA80B             ADD      R0,SP,#+44
   \   00002850   0x.... 0x....      BL       strcpy
   2887                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002854   0xA80B             ADD      R0,SP,#+44
   \   00002856   0x.... 0x....      BL       strlen
   \   0000285A   0xA90B             ADD      R1,SP,#+44
   \   0000285C   0x.... 0x....      BL       BGM111_Transmit
   2888                                            }
   2889                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_443: (+1)
   \   00002860   0xF8DF 0x19A0      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   00002864   0xA80B             ADD      R0,SP,#+44
   \   00002866   0x.... 0x....      BL       sprintf
   \   0000286A   0xE2EC             B.N      ??RoadBrd_ParseString_399
   2890                                          }
   2891                                        }
   2892                                        else if (strncmp((char *)uuid,"000D",4) == 0) // RGB_Red
   \                     ??RoadBrd_ParseString_440: (+1)
   \   0000286C   0x2204             MOVS     R2,#+4
   \   0000286E   0xF8DF 0x1E2C      LDR.W    R1,??RoadBrd_ParseString_439+0x10
   \   00002872   0xA836             ADD      R0,SP,#+216
   \   00002874   0x.... 0x....      BL       strncmp
   \   00002878   0x2800             CMP      R0,#+0
   \   0000287A   0xD133             BNE.N    ??RoadBrd_ParseString_444
   2893                                        {
   2894                                          Status = RoadBrd_CAL_Set_CalItem( CAL_RGB_RED, Offset, Scale);
   \   0000287C   0x9A2A             LDR      R2,[SP, #+168]
   \   0000287E   0x9929             LDR      R1,[SP, #+164]
   \   00002880   0x200A             MOVS     R0,#+10
   \   00002882   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002886   0x0006             MOVS     R6,R0
   2895                                          if (Status == HAL_OK)
   \   00002888   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000288A   0x2E00             CMP      R6,#+0
   \   0000288C   0xD116             BNE.N    ??RoadBrd_ParseString_445
   2896                                          {
   2897                                            // Is this a BLE Operation?
   2898                                            if ( BLE_Flag )
   \   0000288E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002890   0x2D00             CMP      R5,#+0
   \   00002892   0xD00A             BEQ.N    ??RoadBrd_ParseString_446
   2899                                            {
   2900                                              // Yes...Build and Send BLE Response NOW.
   2901                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_RGB_RED</STATUS>");
   \   00002894   0xF8DF 0x1E98      LDR.W    R1,??RoadBrd_ParseString_447
   \   00002898   0xA80B             ADD      R0,SP,#+44
   \   0000289A   0x.... 0x....      BL       strcpy
   2902                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000289E   0xA80B             ADD      R0,SP,#+44
   \   000028A0   0x.... 0x....      BL       strlen
   \   000028A4   0xA90B             ADD      R1,SP,#+44
   \   000028A6   0x.... 0x....      BL       BGM111_Transmit
   2903                                            }
   2904                                            sprintf( (char *)tempBffr2, "RGB_Red Set COMPLETE." );
   \                     ??RoadBrd_ParseString_446: (+1)
   \   000028AA   0xF8DF 0x1E88      LDR.W    R1,??RoadBrd_ParseString_447+0x4
   \   000028AE   0xA80B             ADD      R0,SP,#+44
   \   000028B0   0x.... 0x....      BL       sprintf
   \   000028B4   0xE2C7             B.N      ??RoadBrd_ParseString_399
   \   000028B6   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_288:
   \   000028B8   0x........         DC32     ?_107
   2905                                          }
   2906                                          else
   2907                                          {
   2908                                            // Is this a BLE Operation?
   2909                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_445: (+1)
   \   000028BC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000028BE   0x2D00             CMP      R5,#+0
   \   000028C0   0xD00A             BEQ.N    ??RoadBrd_ParseString_448
   2910                                            {
   2911                                              // Yes...Build and Send BLE Response NOW.
   2912                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_RGB_RED_ERR</STATUS>");
   \   000028C2   0xF8DF 0x1E74      LDR.W    R1,??RoadBrd_ParseString_447+0x8
   \   000028C6   0xA80B             ADD      R0,SP,#+44
   \   000028C8   0x.... 0x....      BL       strcpy
   2913                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000028CC   0xA80B             ADD      R0,SP,#+44
   \   000028CE   0x.... 0x....      BL       strlen
   \   000028D2   0xA90B             ADD      R1,SP,#+44
   \   000028D4   0x.... 0x....      BL       BGM111_Transmit
   2914                                            }
   2915                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_448: (+1)
   \   000028D8   0xF8DF 0x1928      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   000028DC   0xA80B             ADD      R0,SP,#+44
   \   000028DE   0x.... 0x....      BL       sprintf
   \   000028E2   0xE2B0             B.N      ??RoadBrd_ParseString_399
   2916                                          }
   2917                                        }
   2918                                        else if (strncmp((char *)uuid,"000E",4) == 0) // RGB_Green
   \                     ??RoadBrd_ParseString_444: (+1)
   \   000028E4   0x2204             MOVS     R2,#+4
   \   000028E6   0xF8DF 0x1E54      LDR.W    R1,??RoadBrd_ParseString_447+0xC
   \   000028EA   0xA836             ADD      R0,SP,#+216
   \   000028EC   0x.... 0x....      BL       strncmp
   \   000028F0   0x2800             CMP      R0,#+0
   \   000028F2   0xD133             BNE.N    ??RoadBrd_ParseString_449
   2919                                        {
   2920                                          Status = RoadBrd_CAL_Set_CalItem( CAL_RGB_GREEN, Offset, Scale);
   \   000028F4   0x9A2A             LDR      R2,[SP, #+168]
   \   000028F6   0x9929             LDR      R1,[SP, #+164]
   \   000028F8   0x200B             MOVS     R0,#+11
   \   000028FA   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   000028FE   0x0006             MOVS     R6,R0
   2921                                          if (Status == HAL_OK)
   \   00002900   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002902   0x2E00             CMP      R6,#+0
   \   00002904   0xD116             BNE.N    ??RoadBrd_ParseString_450
   2922                                          {
   2923                                            // Is this a BLE Operation?
   2924                                            if ( BLE_Flag )
   \   00002906   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002908   0x2D00             CMP      R5,#+0
   \   0000290A   0xD00A             BEQ.N    ??RoadBrd_ParseString_451
   2925                                            {
   2926                                              // Yes...Build and Send BLE Response NOW.
   2927                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_RGB_GREEN</STATUS>");
   \   0000290C   0xF8DF 0x1E30      LDR.W    R1,??RoadBrd_ParseString_447+0x10
   \   00002910   0xA80B             ADD      R0,SP,#+44
   \   00002912   0x.... 0x....      BL       strcpy
   2928                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002916   0xA80B             ADD      R0,SP,#+44
   \   00002918   0x.... 0x....      BL       strlen
   \   0000291C   0xA90B             ADD      R1,SP,#+44
   \   0000291E   0x.... 0x....      BL       BGM111_Transmit
   2929                                            }
   2930                                            sprintf( (char *)tempBffr2, "RGB_Green Set COMPLETE." );
   \                     ??RoadBrd_ParseString_451: (+1)
   \   00002922   0xF8DF 0x1EB0      LDR.W    R1,??RoadBrd_ParseString_452
   \   00002926   0xA80B             ADD      R0,SP,#+44
   \   00002928   0x.... 0x....      BL       sprintf
   \   0000292C   0xE28B             B.N      ??RoadBrd_ParseString_399
   \   0000292E   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_304:
   \   00002930   0x........         DC32     ?_108
   2931                                          }
   2932                                          else
   2933                                          {
   2934                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_450: (+1)
   \   00002934   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002936   0x2D00             CMP      R5,#+0
   \   00002938   0xD00A             BEQ.N    ??RoadBrd_ParseString_453
   2935                                            {
   2936                                              // Yes...Build and Send BLE Response NOW.
   2937                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_RGB_GREEN_ERR</STATUS>");
   \   0000293A   0xF8DF 0x1E9C      LDR.W    R1,??RoadBrd_ParseString_452+0x4
   \   0000293E   0xA80B             ADD      R0,SP,#+44
   \   00002940   0x.... 0x....      BL       strcpy
   2938                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002944   0xA80B             ADD      R0,SP,#+44
   \   00002946   0x.... 0x....      BL       strlen
   \   0000294A   0xA90B             ADD      R1,SP,#+44
   \   0000294C   0x.... 0x....      BL       BGM111_Transmit
   2939                                            }
   2940                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_453: (+1)
   \   00002950   0xF8DF 0x18B0      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   00002954   0xA80B             ADD      R0,SP,#+44
   \   00002956   0x.... 0x....      BL       sprintf
   \   0000295A   0xE274             B.N      ??RoadBrd_ParseString_399
   2941                                          }
   2942                                        }
   2943                                        else if (strncmp((char *)uuid,"000F",4) == 0) // RGB_Blue
   \                     ??RoadBrd_ParseString_449: (+1)
   \   0000295C   0x2204             MOVS     R2,#+4
   \   0000295E   0xF8DF 0x1E7C      LDR.W    R1,??RoadBrd_ParseString_452+0x8
   \   00002962   0xA836             ADD      R0,SP,#+216
   \   00002964   0x.... 0x....      BL       strncmp
   \   00002968   0x2800             CMP      R0,#+0
   \   0000296A   0xD139             BNE.N    ??RoadBrd_ParseString_454
   2944                                        {
   2945                                          Status = RoadBrd_CAL_Set_CalItem( CAL_RGB_BLUE, Offset, Scale);
   \   0000296C   0x9A2A             LDR      R2,[SP, #+168]
   \   0000296E   0x9929             LDR      R1,[SP, #+164]
   \   00002970   0x200C             MOVS     R0,#+12
   \   00002972   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002976   0x0006             MOVS     R6,R0
   2946                                          if (Status == HAL_OK)
   \   00002978   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000297A   0x2E00             CMP      R6,#+0
   \   0000297C   0xD11C             BNE.N    ??RoadBrd_ParseString_455
   2947                                          {
   2948                                            // Is this a BLE Operation?
   2949                                            if ( BLE_Flag )
   \   0000297E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002980   0x2D00             CMP      R5,#+0
   \   00002982   0xD00A             BEQ.N    ??RoadBrd_ParseString_456
   2950                                            {
   2951                                              // Yes...Build and Send BLE Response NOW.
   2952                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_RGB_BLUE</STATUS>");
   \   00002984   0xF8DF 0x1E58      LDR.W    R1,??RoadBrd_ParseString_452+0xC
   \   00002988   0xA80B             ADD      R0,SP,#+44
   \   0000298A   0x.... 0x....      BL       strcpy
   2953                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000298E   0xA80B             ADD      R0,SP,#+44
   \   00002990   0x.... 0x....      BL       strlen
   \   00002994   0xA90B             ADD      R1,SP,#+44
   \   00002996   0x.... 0x....      BL       BGM111_Transmit
   2954                                            }
   2955                                            sprintf( (char *)tempBffr2, "RGB_Blue Set COMPLETE." );
   \                     ??RoadBrd_ParseString_456: (+1)
   \   0000299A   0xF8DF 0x1E48      LDR.W    R1,??RoadBrd_ParseString_452+0x10
   \   0000299E   0xA80B             ADD      R0,SP,#+44
   \   000029A0   0x.... 0x....      BL       sprintf
   \   000029A4   0xE24F             B.N      ??RoadBrd_ParseString_399
   \   000029A6   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_313:
   \   000029A8   0x........         DC32     ?_109
   \   000029AC   0x........         DC32     ?_110
   \   000029B0   0x........         DC32     ?_111
   \   000029B4   0x........         DC32     ?_112
   2956                                          }
   2957                                          else
   2958                                          {
   2959                                            // Is this a BLE Operation?
   2960                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_455: (+1)
   \   000029B8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000029BA   0x2D00             CMP      R5,#+0
   \   000029BC   0xD00A             BEQ.N    ??RoadBrd_ParseString_457
   2961                                            {
   2962                                              // Yes...Build and Send BLE Response NOW.
   2963                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_RGB_BLUE_ERR</STATUS>");
   \   000029BE   0xF8DF 0x1EB8      LDR.W    R1,??RoadBrd_ParseString_458
   \   000029C2   0xA80B             ADD      R0,SP,#+44
   \   000029C4   0x.... 0x....      BL       strcpy
   2964                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000029C8   0xA80B             ADD      R0,SP,#+44
   \   000029CA   0x.... 0x....      BL       strlen
   \   000029CE   0xA90B             ADD      R1,SP,#+44
   \   000029D0   0x.... 0x....      BL       BGM111_Transmit
   2965                                            }
   2966                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_457: (+1)
   \   000029D4   0xF8DF 0x182C      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   000029D8   0xA80B             ADD      R0,SP,#+44
   \   000029DA   0x.... 0x....      BL       sprintf
   \   000029DE   0xE232             B.N      ??RoadBrd_ParseString_399
   2967                                          }
   2968                                        }
   2969                                        else if (strncmp((char *)uuid,"0017",4) == 0) // Therm_C
   \                     ??RoadBrd_ParseString_454: (+1)
   \   000029E0   0x2204             MOVS     R2,#+4
   \   000029E2   0xF8DF 0x1E98      LDR.W    R1,??RoadBrd_ParseString_458+0x4
   \   000029E6   0xA836             ADD      R0,SP,#+216
   \   000029E8   0x.... 0x....      BL       strncmp
   \   000029EC   0x2800             CMP      R0,#+0
   \   000029EE   0xD130             BNE.N    ??RoadBrd_ParseString_459
   2970                                        {
   2971                                          Status = RoadBrd_CAL_Set_CalItem( CAL_THERM_C, Offset, Scale);
   \   000029F0   0x9A2A             LDR      R2,[SP, #+168]
   \   000029F2   0x9929             LDR      R1,[SP, #+164]
   \   000029F4   0x200D             MOVS     R0,#+13
   \   000029F6   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   000029FA   0x0006             MOVS     R6,R0
   2972                                          if (Status == HAL_OK)
   \   000029FC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000029FE   0x2E00             CMP      R6,#+0
   \   00002A00   0xD113             BNE.N    ??RoadBrd_ParseString_460
   2973                                          {
   2974                                            // Is this a BLE Operation?
   2975                                            if ( BLE_Flag )
   \   00002A02   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002A04   0x2D00             CMP      R5,#+0
   \   00002A06   0xD00A             BEQ.N    ??RoadBrd_ParseString_461
   2976                                            {
   2977                                              // Yes...Build and Send BLE Response NOW.
   2978                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_THERM_C</STATUS>");
   \   00002A08   0xF8DF 0x1E74      LDR.W    R1,??RoadBrd_ParseString_458+0x8
   \   00002A0C   0xA80B             ADD      R0,SP,#+44
   \   00002A0E   0x.... 0x....      BL       strcpy
   2979                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002A12   0xA80B             ADD      R0,SP,#+44
   \   00002A14   0x.... 0x....      BL       strlen
   \   00002A18   0xA90B             ADD      R1,SP,#+44
   \   00002A1A   0x.... 0x....      BL       BGM111_Transmit
   2980                                            }
   2981                                            sprintf( (char *)tempBffr2, "Therm_C Set COMPLETE." );
   \                     ??RoadBrd_ParseString_461: (+1)
   \   00002A1E   0xF8DF 0x1E64      LDR.W    R1,??RoadBrd_ParseString_458+0xC
   \   00002A22   0xA80B             ADD      R0,SP,#+44
   \   00002A24   0x.... 0x....      BL       sprintf
   \   00002A28   0xE20D             B.N      ??RoadBrd_ParseString_399
   2982                                          }
   2983                                          else
   2984                                          {
   2985                                            // Is this a BLE Operation?
   2986                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_460: (+1)
   \   00002A2A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002A2C   0x2D00             CMP      R5,#+0
   \   00002A2E   0xD00A             BEQ.N    ??RoadBrd_ParseString_462
   2987                                            {
   2988                                              // Yes...Build and Send BLE Response NOW.
   2989                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_THERM_C_ERR</STATUS>");
   \   00002A30   0xF8DF 0x1E54      LDR.W    R1,??RoadBrd_ParseString_458+0x10
   \   00002A34   0xA80B             ADD      R0,SP,#+44
   \   00002A36   0x.... 0x....      BL       strcpy
   2990                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002A3A   0xA80B             ADD      R0,SP,#+44
   \   00002A3C   0x.... 0x....      BL       strlen
   \   00002A40   0xA90B             ADD      R1,SP,#+44
   \   00002A42   0x.... 0x....      BL       BGM111_Transmit
   2991                                            }
   2992                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_462: (+1)
   \   00002A46   0xF8DF 0x17BC      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   00002A4A   0xA80B             ADD      R0,SP,#+44
   \   00002A4C   0x.... 0x....      BL       sprintf
   \   00002A50   0xE1F9             B.N      ??RoadBrd_ParseString_399
   2993                                          }
   2994                                        }
   2995                                        else if (strncmp((char *)uuid,"0019",4) == 0) // RoadT_1C
   \                     ??RoadBrd_ParseString_459: (+1)
   \   00002A52   0x2204             MOVS     R2,#+4
   \   00002A54   0xF8DF 0x1EC4      LDR.W    R1,??RoadBrd_ParseString_463
   \   00002A58   0xA836             ADD      R0,SP,#+216
   \   00002A5A   0x.... 0x....      BL       strncmp
   \   00002A5E   0x2800             CMP      R0,#+0
   \   00002A60   0xD132             BNE.N    ??RoadBrd_ParseString_464
   2996                                        {
   2997                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_1C, Offset, Scale);
   \   00002A62   0x9A2A             LDR      R2,[SP, #+168]
   \   00002A64   0x9929             LDR      R1,[SP, #+164]
   \   00002A66   0x200E             MOVS     R0,#+14
   \   00002A68   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002A6C   0x0006             MOVS     R6,R0
   2998                                          if (Status == HAL_OK)
   \   00002A6E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002A70   0x2E00             CMP      R6,#+0
   \   00002A72   0xD115             BNE.N    ??RoadBrd_ParseString_465
   2999                                          {
   3000                                            // Is this a BLE Operation?
   3001                                            if ( BLE_Flag )
   \   00002A74   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002A76   0x2D00             CMP      R5,#+0
   \   00002A78   0xD00A             BEQ.N    ??RoadBrd_ParseString_466
   3002                                            {
   3003                                              // Yes...Build and Send BLE Response NOW.
   3004                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_1C</STATUS>");
   \   00002A7A   0xF8DF 0x1EA4      LDR.W    R1,??RoadBrd_ParseString_463+0x4
   \   00002A7E   0xA80B             ADD      R0,SP,#+44
   \   00002A80   0x.... 0x....      BL       strcpy
   3005                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002A84   0xA80B             ADD      R0,SP,#+44
   \   00002A86   0x.... 0x....      BL       strlen
   \   00002A8A   0xA90B             ADD      R1,SP,#+44
   \   00002A8C   0x.... 0x....      BL       BGM111_Transmit
   3006                                            }
   3007                                            sprintf( (char *)tempBffr2, "RoadT_1C Set COMPLETE." );
   \                     ??RoadBrd_ParseString_466: (+1)
   \   00002A90   0xF8DF 0x1E90      LDR.W    R1,??RoadBrd_ParseString_463+0x8
   \   00002A94   0xA80B             ADD      R0,SP,#+44
   \   00002A96   0x.... 0x....      BL       sprintf
   \   00002A9A   0xE1D4             B.N      ??RoadBrd_ParseString_399
   \                     ??RoadBrd_ParseString_323:
   \   00002A9C   0x........         DC32     ?_113
   3008                                          }
   3009                                          else
   3010                                          {
   3011                                            // Is this a BLE Operation?
   3012                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_465: (+1)
   \   00002AA0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002AA2   0x2D00             CMP      R5,#+0
   \   00002AA4   0xD00A             BEQ.N    ??RoadBrd_ParseString_467
   3013                                            {
   3014                                              // Yes...Build and Send BLE Response NOW.
   3015                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_1C_ERR</STATUS>");
   \   00002AA6   0xF8DF 0x1E80      LDR.W    R1,??RoadBrd_ParseString_463+0xC
   \   00002AAA   0xA80B             ADD      R0,SP,#+44
   \   00002AAC   0x.... 0x....      BL       strcpy
   3016                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002AB0   0xA80B             ADD      R0,SP,#+44
   \   00002AB2   0x.... 0x....      BL       strlen
   \   00002AB6   0xA90B             ADD      R1,SP,#+44
   \   00002AB8   0x.... 0x....      BL       BGM111_Transmit
   3017                                            }
   3018                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_467: (+1)
   \   00002ABC   0xF8DF 0x1744      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   00002AC0   0xA80B             ADD      R0,SP,#+44
   \   00002AC2   0x.... 0x....      BL       sprintf
   \   00002AC6   0xE1BE             B.N      ??RoadBrd_ParseString_399
   3019                                          }
   3020                                        }
   3021                                        else if (strncmp((char *)uuid,"001B",4) == 0) // RoadT_2C
   \                     ??RoadBrd_ParseString_464: (+1)
   \   00002AC8   0x2204             MOVS     R2,#+4
   \   00002ACA   0xF8DF 0x1E60      LDR.W    R1,??RoadBrd_ParseString_463+0x10
   \   00002ACE   0xA836             ADD      R0,SP,#+216
   \   00002AD0   0x.... 0x....      BL       strncmp
   \   00002AD4   0x2800             CMP      R0,#+0
   \   00002AD6   0xD133             BNE.N    ??RoadBrd_ParseString_468
   3022                                        {
   3023                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_2C, Offset, Scale);
   \   00002AD8   0x9A2A             LDR      R2,[SP, #+168]
   \   00002ADA   0x9929             LDR      R1,[SP, #+164]
   \   00002ADC   0x200F             MOVS     R0,#+15
   \   00002ADE   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002AE2   0x0006             MOVS     R6,R0
   3024                                          if (Status == HAL_OK)
   \   00002AE4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002AE6   0x2E00             CMP      R6,#+0
   \   00002AE8   0xD116             BNE.N    ??RoadBrd_ParseString_469
   3025                                          {
   3026                                            // Is this a BLE Operation?
   3027                                            if ( BLE_Flag )
   \   00002AEA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002AEC   0x2D00             CMP      R5,#+0
   \   00002AEE   0xD00A             BEQ.N    ??RoadBrd_ParseString_470
   3028                                            {
   3029                                              // Yes...Build and Send BLE Response NOW.
   3030                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_2C</STATUS>");
   \   00002AF0   0xF8DF 0x1ECC      LDR.W    R1,??RoadBrd_ParseString_471
   \   00002AF4   0xA80B             ADD      R0,SP,#+44
   \   00002AF6   0x.... 0x....      BL       strcpy
   3031                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002AFA   0xA80B             ADD      R0,SP,#+44
   \   00002AFC   0x.... 0x....      BL       strlen
   \   00002B00   0xA90B             ADD      R1,SP,#+44
   \   00002B02   0x.... 0x....      BL       BGM111_Transmit
   3032                                            }
   3033                                            sprintf( (char *)tempBffr2, "RoadT_2C Set COMPLETE." );
   \                     ??RoadBrd_ParseString_470: (+1)
   \   00002B06   0xF8DF 0x1EBC      LDR.W    R1,??RoadBrd_ParseString_471+0x4
   \   00002B0A   0xA80B             ADD      R0,SP,#+44
   \   00002B0C   0x.... 0x....      BL       sprintf
   \   00002B10   0xE199             B.N      ??RoadBrd_ParseString_399
   \   00002B12   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_329:
   \   00002B14   0x........         DC32     ?_115
   3034                                          }
   3035                                          else
   3036                                          {
   3037                                            // Is this a BLE Operation?
   3038                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_469: (+1)
   \   00002B18   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002B1A   0x2D00             CMP      R5,#+0
   \   00002B1C   0xD00A             BEQ.N    ??RoadBrd_ParseString_472
   3039                                            {
   3040                                              // Yes...Build and Send BLE Response NOW.
   3041                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_2C_ERR</STATUS>");
   \   00002B1E   0xF8DF 0x1EA8      LDR.W    R1,??RoadBrd_ParseString_471+0x8
   \   00002B22   0xA80B             ADD      R0,SP,#+44
   \   00002B24   0x.... 0x....      BL       strcpy
   3042                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002B28   0xA80B             ADD      R0,SP,#+44
   \   00002B2A   0x.... 0x....      BL       strlen
   \   00002B2E   0xA90B             ADD      R1,SP,#+44
   \   00002B30   0x.... 0x....      BL       BGM111_Transmit
   3043                                            }
   3044                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_472: (+1)
   \   00002B34   0xF8DF 0x16CC      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   00002B38   0xA80B             ADD      R0,SP,#+44
   \   00002B3A   0x.... 0x....      BL       sprintf
   \   00002B3E   0xE182             B.N      ??RoadBrd_ParseString_399
   3045                                          }
   3046                                        }
   3047                                        else if (strncmp((char *)uuid,"001D",4) == 0) // RoadT_3C
   \                     ??RoadBrd_ParseString_468: (+1)
   \   00002B40   0x2204             MOVS     R2,#+4
   \   00002B42   0xF8DF 0x1E88      LDR.W    R1,??RoadBrd_ParseString_471+0xC
   \   00002B46   0xA836             ADD      R0,SP,#+216
   \   00002B48   0x.... 0x....      BL       strncmp
   \   00002B4C   0x2800             CMP      R0,#+0
   \   00002B4E   0xD135             BNE.N    ??RoadBrd_ParseString_473
   3048                                        {
   3049                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_3C, Offset, Scale);
   \   00002B50   0x9A2A             LDR      R2,[SP, #+168]
   \   00002B52   0x9929             LDR      R1,[SP, #+164]
   \   00002B54   0x2010             MOVS     R0,#+16
   \   00002B56   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002B5A   0x0006             MOVS     R6,R0
   3050                                          if (Status == HAL_OK)
   \   00002B5C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002B5E   0x2E00             CMP      R6,#+0
   \   00002B60   0xD118             BNE.N    ??RoadBrd_ParseString_474
   3051                                          {
   3052                                            // Is this a BLE Operation?
   3053                                            if ( BLE_Flag )
   \   00002B62   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002B64   0x2D00             CMP      R5,#+0
   \   00002B66   0xD00A             BEQ.N    ??RoadBrd_ParseString_475
   3054                                            {
   3055                                              // Yes...Build and Send BLE Response NOW.
   3056                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_3C</STATUS>");
   \   00002B68   0xF8DF 0x1E64      LDR.W    R1,??RoadBrd_ParseString_471+0x10
   \   00002B6C   0xA80B             ADD      R0,SP,#+44
   \   00002B6E   0x.... 0x....      BL       strcpy
   3057                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002B72   0xA80B             ADD      R0,SP,#+44
   \   00002B74   0x.... 0x....      BL       strlen
   \   00002B78   0xA90B             ADD      R1,SP,#+44
   \   00002B7A   0x.... 0x....      BL       BGM111_Transmit
   3058                                            }
   3059                                            sprintf( (char *)tempBffr2, "RoadT_3C Set COMPLETE." );
   \                     ??RoadBrd_ParseString_475: (+1)
   \   00002B7E   0xF8DF 0x1E54      LDR.W    R1,??RoadBrd_ParseString_471+0x14
   \   00002B82   0xA80B             ADD      R0,SP,#+44
   \   00002B84   0x.... 0x....      BL       sprintf
   \   00002B88   0xE15D             B.N      ??RoadBrd_ParseString_399
   \   00002B8A   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_333:
   \   00002B8C   0x........         DC32     ?_116
   \   00002B90   0x........         DC32     ?_117
   3060                                          }
   3061                                          else
   3062                                          {
   3063                                            // Is this a BLE Operation?
   3064                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_474: (+1)
   \   00002B94   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002B96   0x2D00             CMP      R5,#+0
   \   00002B98   0xD00A             BEQ.N    ??RoadBrd_ParseString_476
   3065                                            {
   3066                                              // Yes...Build and Send BLE Response NOW.
   3067                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_3C_ERR</STATUS>");
   \   00002B9A   0xF8DF 0x1ECC      LDR.W    R1,??RoadBrd_ParseString_477
   \   00002B9E   0xA80B             ADD      R0,SP,#+44
   \   00002BA0   0x.... 0x....      BL       strcpy
   3068                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002BA4   0xA80B             ADD      R0,SP,#+44
   \   00002BA6   0x.... 0x....      BL       strlen
   \   00002BAA   0xA90B             ADD      R1,SP,#+44
   \   00002BAC   0x.... 0x....      BL       BGM111_Transmit
   3069                                            }
   3070                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_476: (+1)
   \   00002BB0   0xF8DF 0x1650      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   00002BB4   0xA80B             ADD      R0,SP,#+44
   \   00002BB6   0x.... 0x....      BL       sprintf
   \   00002BBA   0xE144             B.N      ??RoadBrd_ParseString_399
   3071                                          }
   3072                                        }
   3073                                        else if (strncmp((char *)uuid,"001F",4) == 0) // RoadT_4C
   \                     ??RoadBrd_ParseString_473: (+1)
   \   00002BBC   0x2204             MOVS     R2,#+4
   \   00002BBE   0xF8DF 0x1EAC      LDR.W    R1,??RoadBrd_ParseString_477+0x4
   \   00002BC2   0xA836             ADD      R0,SP,#+216
   \   00002BC4   0x.... 0x....      BL       strncmp
   \   00002BC8   0x2800             CMP      R0,#+0
   \   00002BCA   0xD135             BNE.N    ??RoadBrd_ParseString_478
   3074                                        {
   3075                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_4C, Offset, Scale);
   \   00002BCC   0x9A2A             LDR      R2,[SP, #+168]
   \   00002BCE   0x9929             LDR      R1,[SP, #+164]
   \   00002BD0   0x2011             MOVS     R0,#+17
   \   00002BD2   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002BD6   0x0006             MOVS     R6,R0
   3076                                          if (Status == HAL_OK)
   \   00002BD8   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002BDA   0x2E00             CMP      R6,#+0
   \   00002BDC   0xD118             BNE.N    ??RoadBrd_ParseString_479
   3077                                          {
   3078                                            // Is this a BLE Operation?
   3079                                            if ( BLE_Flag )
   \   00002BDE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002BE0   0x2D00             CMP      R5,#+0
   \   00002BE2   0xD00A             BEQ.N    ??RoadBrd_ParseString_480
   3080                                            {
   3081                                              // Yes...Build and Send BLE Response NOW.
   3082                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_4C</STATUS>");
   \   00002BE4   0xF8DF 0x1E88      LDR.W    R1,??RoadBrd_ParseString_477+0x8
   \   00002BE8   0xA80B             ADD      R0,SP,#+44
   \   00002BEA   0x.... 0x....      BL       strcpy
   3083                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002BEE   0xA80B             ADD      R0,SP,#+44
   \   00002BF0   0x.... 0x....      BL       strlen
   \   00002BF4   0xA90B             ADD      R1,SP,#+44
   \   00002BF6   0x.... 0x....      BL       BGM111_Transmit
   3084                                            }
   3085                                            sprintf( (char *)tempBffr2, "RoadT_4C Set COMPLETE." );
   \                     ??RoadBrd_ParseString_480: (+1)
   \   00002BFA   0xF8DF 0x1E78      LDR.W    R1,??RoadBrd_ParseString_477+0xC
   \   00002BFE   0xA80B             ADD      R0,SP,#+44
   \   00002C00   0x.... 0x....      BL       sprintf
   \   00002C04   0xE11F             B.N      ??RoadBrd_ParseString_399
   \   00002C06   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_336:
   \   00002C08   0x........         DC32     ?_118
   \   00002C0C   0x........         DC32     ?_119
   3086                                          }
   3087                                          else
   3088                                          {
   3089                                            // Is this a BLE Operation?
   3090                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_479: (+1)
   \   00002C10   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002C12   0x2D00             CMP      R5,#+0
   \   00002C14   0xD00A             BEQ.N    ??RoadBrd_ParseString_481
   3091                                            {
   3092                                              // Yes...Build and Send BLE Response NOW.
   3093                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_4C_ERR</STATUS>");
   \   00002C16   0xF8DF 0x1E60      LDR.W    R1,??RoadBrd_ParseString_477+0x10
   \   00002C1A   0xA80B             ADD      R0,SP,#+44
   \   00002C1C   0x.... 0x....      BL       strcpy
   3094                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002C20   0xA80B             ADD      R0,SP,#+44
   \   00002C22   0x.... 0x....      BL       strlen
   \   00002C26   0xA90B             ADD      R1,SP,#+44
   \   00002C28   0x.... 0x....      BL       BGM111_Transmit
   3095                                            }
   3096                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_481: (+1)
   \   00002C2C   0xF8DF 0x15D4      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   00002C30   0xA80B             ADD      R0,SP,#+44
   \   00002C32   0x.... 0x....      BL       sprintf
   \   00002C36   0xE106             B.N      ??RoadBrd_ParseString_399
   3097                                          }
   3098                                        }
   3099                                        else if (strncmp((char *)uuid,"0021",4) == 0) // RoadT_5C
   \                     ??RoadBrd_ParseString_478: (+1)
   \   00002C38   0x2204             MOVS     R2,#+4
   \   00002C3A   0xF8DF 0x1ED0      LDR.W    R1,??RoadBrd_ParseString_482
   \   00002C3E   0xA836             ADD      R0,SP,#+216
   \   00002C40   0x.... 0x....      BL       strncmp
   \   00002C44   0x2800             CMP      R0,#+0
   \   00002C46   0xD135             BNE.N    ??RoadBrd_ParseString_483
   3100                                        {
   3101                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_5C, Offset, Scale);
   \   00002C48   0x9A2A             LDR      R2,[SP, #+168]
   \   00002C4A   0x9929             LDR      R1,[SP, #+164]
   \   00002C4C   0x2012             MOVS     R0,#+18
   \   00002C4E   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002C52   0x0006             MOVS     R6,R0
   3102                                          if (Status == HAL_OK)
   \   00002C54   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002C56   0x2E00             CMP      R6,#+0
   \   00002C58   0xD118             BNE.N    ??RoadBrd_ParseString_484
   3103                                          {
   3104                                            // Is this a BLE Operation?
   3105                                            if ( BLE_Flag )
   \   00002C5A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002C5C   0x2D00             CMP      R5,#+0
   \   00002C5E   0xD00A             BEQ.N    ??RoadBrd_ParseString_485
   3106                                            {
   3107                                              // Yes...Build and Send BLE Response NOW.
   3108                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_5C</STATUS>");
   \   00002C60   0xF8DF 0x1EAC      LDR.W    R1,??RoadBrd_ParseString_482+0x4
   \   00002C64   0xA80B             ADD      R0,SP,#+44
   \   00002C66   0x.... 0x....      BL       strcpy
   3109                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002C6A   0xA80B             ADD      R0,SP,#+44
   \   00002C6C   0x.... 0x....      BL       strlen
   \   00002C70   0xA90B             ADD      R1,SP,#+44
   \   00002C72   0x.... 0x....      BL       BGM111_Transmit
   3110                                            }
   3111                                            sprintf( (char *)tempBffr2, "RoadT_5C Set COMPLETE." );
   \                     ??RoadBrd_ParseString_485: (+1)
   \   00002C76   0xF8DF 0x1E9C      LDR.W    R1,??RoadBrd_ParseString_482+0x8
   \   00002C7A   0xA80B             ADD      R0,SP,#+44
   \   00002C7C   0x.... 0x....      BL       sprintf
   \   00002C80   0xE0E1             B.N      ??RoadBrd_ParseString_399
   \   00002C82   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_341:
   \   00002C84   0x........         DC32     ?_120
   \   00002C88   0x........         DC32     ?_121
   3112                                          }
   3113                                          else
   3114                                          {
   3115                                            // Is this a BLE Operation?
   3116                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_484: (+1)
   \   00002C8C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002C8E   0x2D00             CMP      R5,#+0
   \   00002C90   0xD00A             BEQ.N    ??RoadBrd_ParseString_486
   3117                                            {
   3118                                              // Yes...Build and Send BLE Response NOW.
   3119                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_5C_ERR</STATUS>");
   \   00002C92   0xF8DF 0x1E84      LDR.W    R1,??RoadBrd_ParseString_482+0xC
   \   00002C96   0xA80B             ADD      R0,SP,#+44
   \   00002C98   0x.... 0x....      BL       strcpy
   3120                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002C9C   0xA80B             ADD      R0,SP,#+44
   \   00002C9E   0x.... 0x....      BL       strlen
   \   00002CA2   0xA90B             ADD      R1,SP,#+44
   \   00002CA4   0x.... 0x....      BL       BGM111_Transmit
   3121                                            }
   3122                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_486: (+1)
   \   00002CA8   0xF8DF 0x1558      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   00002CAC   0xA80B             ADD      R0,SP,#+44
   \   00002CAE   0x.... 0x....      BL       sprintf
   \   00002CB2   0xE0C8             B.N      ??RoadBrd_ParseString_399
   3123                                          }
   3124                                        }
   3125                                        else if (strncmp((char *)uuid,"0023",4) == 0) // RoadT_6C
   \                     ??RoadBrd_ParseString_483: (+1)
   \   00002CB4   0x2204             MOVS     R2,#+4
   \   00002CB6   0xF8DF 0x1E64      LDR.W    R1,??RoadBrd_ParseString_482+0x10
   \   00002CBA   0xA836             ADD      R0,SP,#+216
   \   00002CBC   0x.... 0x....      BL       strncmp
   \   00002CC0   0x2800             CMP      R0,#+0
   \   00002CC2   0xD133             BNE.N    ??RoadBrd_ParseString_487
   3126                                        {
   3127                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_6C, Offset, Scale);
   \   00002CC4   0x9A2A             LDR      R2,[SP, #+168]
   \   00002CC6   0x9929             LDR      R1,[SP, #+164]
   \   00002CC8   0x2013             MOVS     R0,#+19
   \   00002CCA   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002CCE   0x0006             MOVS     R6,R0
   3128                                          if (Status == HAL_OK)
   \   00002CD0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002CD2   0x2E00             CMP      R6,#+0
   \   00002CD4   0xD116             BNE.N    ??RoadBrd_ParseString_488
   3129                                          {
   3130                                            // Is this a BLE Operation?
   3131                                            if ( BLE_Flag )
   \   00002CD6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002CD8   0x2D00             CMP      R5,#+0
   \   00002CDA   0xD00A             BEQ.N    ??RoadBrd_ParseString_489
   3132                                            {
   3133                                              // Yes...Build and Send BLE Response NOW.
   3134                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_6C</STATUS>");
   \   00002CDC   0xF8DF 0x1ED0      LDR.W    R1,??RoadBrd_ParseString_490
   \   00002CE0   0xA80B             ADD      R0,SP,#+44
   \   00002CE2   0x.... 0x....      BL       strcpy
   3135                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002CE6   0xA80B             ADD      R0,SP,#+44
   \   00002CE8   0x.... 0x....      BL       strlen
   \   00002CEC   0xA90B             ADD      R1,SP,#+44
   \   00002CEE   0x.... 0x....      BL       BGM111_Transmit
   3136                                            }
   3137                                            sprintf( (char *)tempBffr2, "RoadT_6C Set COMPLETE." );
   \                     ??RoadBrd_ParseString_489: (+1)
   \   00002CF2   0xF8DF 0x1EC0      LDR.W    R1,??RoadBrd_ParseString_490+0x4
   \   00002CF6   0xA80B             ADD      R0,SP,#+44
   \   00002CF8   0x.... 0x....      BL       sprintf
   \   00002CFC   0xE0A3             B.N      ??RoadBrd_ParseString_399
   \   00002CFE   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_349:
   \   00002D00   0x........         DC32     ?_122
   3138                                          }
   3139                                          else
   3140                                          {
   3141                                            // Is this a BLE Operation?
   3142                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_488: (+1)
   \   00002D04   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002D06   0x2D00             CMP      R5,#+0
   \   00002D08   0xD00A             BEQ.N    ??RoadBrd_ParseString_491
   3143                                            {
   3144                                              // Yes...Build and Send BLE Response NOW.
   3145                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_6C_ERR</STATUS>");
   \   00002D0A   0xF8DF 0x1EAC      LDR.W    R1,??RoadBrd_ParseString_490+0x8
   \   00002D0E   0xA80B             ADD      R0,SP,#+44
   \   00002D10   0x.... 0x....      BL       strcpy
   3146                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002D14   0xA80B             ADD      R0,SP,#+44
   \   00002D16   0x.... 0x....      BL       strlen
   \   00002D1A   0xA90B             ADD      R1,SP,#+44
   \   00002D1C   0x.... 0x....      BL       BGM111_Transmit
   3147                                            }
   3148                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_491: (+1)
   \   00002D20   0xF8DF 0x14E0      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   00002D24   0xA80B             ADD      R0,SP,#+44
   \   00002D26   0x.... 0x....      BL       sprintf
   \   00002D2A   0xE08C             B.N      ??RoadBrd_ParseString_399
   3149                                          }
   3150                                        }
   3151                                        else if (strncmp((char *)uuid,"0025",4) == 0) // RoadT_7C
   \                     ??RoadBrd_ParseString_487: (+1)
   \   00002D2C   0x2204             MOVS     R2,#+4
   \   00002D2E   0xF8DF 0x1E8C      LDR.W    R1,??RoadBrd_ParseString_490+0xC
   \   00002D32   0xA836             ADD      R0,SP,#+216
   \   00002D34   0x.... 0x....      BL       strncmp
   \   00002D38   0x2800             CMP      R0,#+0
   \   00002D3A   0xD135             BNE.N    ??RoadBrd_ParseString_492
   3152                                        {
   3153                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_7C, Offset, Scale);
   \   00002D3C   0x9A2A             LDR      R2,[SP, #+168]
   \   00002D3E   0x9929             LDR      R1,[SP, #+164]
   \   00002D40   0x2014             MOVS     R0,#+20
   \   00002D42   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002D46   0x0006             MOVS     R6,R0
   3154                                          if (Status == HAL_OK)
   \   00002D48   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002D4A   0x2E00             CMP      R6,#+0
   \   00002D4C   0xD118             BNE.N    ??RoadBrd_ParseString_493
   3155                                          {
   3156                                            // Is this a BLE Operation?
   3157                                            if ( BLE_Flag )
   \   00002D4E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002D50   0x2D00             CMP      R5,#+0
   \   00002D52   0xD00A             BEQ.N    ??RoadBrd_ParseString_494
   3158                                            {
   3159                                              // Yes...Build and Send BLE Response NOW.
   3160                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_7C</STATUS>");
   \   00002D54   0xF8DF 0x1EF8      LDR.W    R1,??RoadBrd_ParseString_495
   \   00002D58   0xA80B             ADD      R0,SP,#+44
   \   00002D5A   0x.... 0x....      BL       strcpy
   3161                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002D5E   0xA80B             ADD      R0,SP,#+44
   \   00002D60   0x.... 0x....      BL       strlen
   \   00002D64   0xA90B             ADD      R1,SP,#+44
   \   00002D66   0x.... 0x....      BL       BGM111_Transmit
   3162                                            }
   3163                                            sprintf( (char *)tempBffr2, "RoadT_7C Set COMPLETE." );
   \                     ??RoadBrd_ParseString_494: (+1)
   \   00002D6A   0xF8DF 0x1EE8      LDR.W    R1,??RoadBrd_ParseString_495+0x4
   \   00002D6E   0xA80B             ADD      R0,SP,#+44
   \   00002D70   0x.... 0x....      BL       sprintf
   \   00002D74   0xE067             B.N      ??RoadBrd_ParseString_399
   \   00002D76   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_355:
   \   00002D78   0x........         DC32     ?_123
   \   00002D7C   0x........         DC32     ?_124
   3164                                          }
   3165                                          else
   3166                                          {
   3167                                            // Is this a BLE Operation?
   3168                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_493: (+1)
   \   00002D80   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002D82   0x2D00             CMP      R5,#+0
   \   00002D84   0xD00A             BEQ.N    ??RoadBrd_ParseString_496
   3169                                            {
   3170                                              // Yes...Build and Send BLE Response NOW.
   3171                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_7C_ERR</STATUS>");
   \   00002D86   0xF8DF 0x1ED0      LDR.W    R1,??RoadBrd_ParseString_495+0x8
   \   00002D8A   0xA80B             ADD      R0,SP,#+44
   \   00002D8C   0x.... 0x....      BL       strcpy
   3172                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002D90   0xA80B             ADD      R0,SP,#+44
   \   00002D92   0x.... 0x....      BL       strlen
   \   00002D96   0xA90B             ADD      R1,SP,#+44
   \   00002D98   0x.... 0x....      BL       BGM111_Transmit
   3173                                            }
   3174                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_496: (+1)
   \   00002D9C   0xF8DF 0x1464      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   00002DA0   0xA80B             ADD      R0,SP,#+44
   \   00002DA2   0x.... 0x....      BL       sprintf
   \   00002DA6   0xE04E             B.N      ??RoadBrd_ParseString_399
   3175                                          }
   3176                                        }
   3177                                        else if (strncmp((char *)uuid,"0027",4) == 0) // RoadT_8C
   \                     ??RoadBrd_ParseString_492: (+1)
   \   00002DA8   0x2204             MOVS     R2,#+4
   \   00002DAA   0xF8DF 0x1EB0      LDR.W    R1,??RoadBrd_ParseString_495+0xC
   \   00002DAE   0xA836             ADD      R0,SP,#+216
   \   00002DB0   0x.... 0x....      BL       strncmp
   \   00002DB4   0x2800             CMP      R0,#+0
   \   00002DB6   0xD133             BNE.N    ??RoadBrd_ParseString_497
   3178                                        {
   3179                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_8C, Offset, Scale);
   \   00002DB8   0x9A2A             LDR      R2,[SP, #+168]
   \   00002DBA   0x9929             LDR      R1,[SP, #+164]
   \   00002DBC   0x2015             MOVS     R0,#+21
   \   00002DBE   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002DC2   0x0006             MOVS     R6,R0
   3180                                          if (Status == HAL_OK)
   \   00002DC4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002DC6   0x2E00             CMP      R6,#+0
   \   00002DC8   0xD113             BNE.N    ??RoadBrd_ParseString_498
   3181                                          {
   3182                                            // Is this a BLE Operation?
   3183                                            if ( BLE_Flag )
   \   00002DCA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002DCC   0x2D00             CMP      R5,#+0
   \   00002DCE   0xD00A             BEQ.N    ??RoadBrd_ParseString_499
   3184                                            {
   3185                                              // Yes...Build and Send BLE Response NOW.
   3186                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_8C</STATUS>");
   \   00002DD0   0xF8DF 0x1E8C      LDR.W    R1,??RoadBrd_ParseString_495+0x10
   \   00002DD4   0xA80B             ADD      R0,SP,#+44
   \   00002DD6   0x.... 0x....      BL       strcpy
   3187                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002DDA   0xA80B             ADD      R0,SP,#+44
   \   00002DDC   0x.... 0x....      BL       strlen
   \   00002DE0   0xA90B             ADD      R1,SP,#+44
   \   00002DE2   0x.... 0x....      BL       BGM111_Transmit
   3188                                            }
   3189                                            sprintf( (char *)tempBffr2, "RoadT_8C Set COMPLETE." );
   \                     ??RoadBrd_ParseString_499: (+1)
   \   00002DE6   0xF8DF 0x1E7C      LDR.W    R1,??RoadBrd_ParseString_495+0x14
   \   00002DEA   0xA80B             ADD      R0,SP,#+44
   \   00002DEC   0x.... 0x....      BL       sprintf
   \   00002DF0   0xE029             B.N      ??RoadBrd_ParseString_399
   3190                                          }
   3191                                          else
   3192                                          {
   3193                                            // Is this a BLE Operation?
   3194                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_498: (+1)
   \   00002DF2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002DF4   0x2D00             CMP      R5,#+0
   \   00002DF6   0xD00A             BEQ.N    ??RoadBrd_ParseString_500
   3195                                            {
   3196                                              // Yes...Build and Send BLE Response NOW.
   3197                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_8C_ERR</STATUS>");
   \   00002DF8   0xF8DF 0x1EFC      LDR.W    R1,??RoadBrd_ParseString_501
   \   00002DFC   0xA80B             ADD      R0,SP,#+44
   \   00002DFE   0x.... 0x....      BL       strcpy
   3198                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002E02   0xA80B             ADD      R0,SP,#+44
   \   00002E04   0x.... 0x....      BL       strlen
   \   00002E08   0xA90B             ADD      R1,SP,#+44
   \   00002E0A   0x.... 0x....      BL       BGM111_Transmit
   3199                                            }
   3200                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_500: (+1)
   \   00002E0E   0xF8DF 0x13F4      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   00002E12   0xA80B             ADD      R0,SP,#+44
   \   00002E14   0x.... 0x....      BL       sprintf
   \   00002E18   0xE015             B.N      ??RoadBrd_ParseString_399
   \   00002E1A   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_360:
   \   00002E1C   0x........         DC32     ?_125
   3201                                          }
   3202                                        }
   3203                                        else
   3204                                        {
   3205                                          // Is this a BLE Operation?
   3206                                          if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_497: (+1)
   \   00002E20   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002E22   0x2D00             CMP      R5,#+0
   \   00002E24   0xD00A             BEQ.N    ??RoadBrd_ParseString_502
   3207                                          {
   3208                                            // Yes...Build and Send BLE Response NOW.
   3209                                            strcpy( (char *)tempBffr2, "<STATUS>CMD_TCS_BADUUID</STATUS>");
   \   00002E26   0xF8DF 0x1ED4      LDR.W    R1,??RoadBrd_ParseString_501+0x4
   \   00002E2A   0xA80B             ADD      R0,SP,#+44
   \   00002E2C   0x.... 0x....      BL       strcpy
   3210                                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002E30   0xA80B             ADD      R0,SP,#+44
   \   00002E32   0x.... 0x....      BL       strlen
   \   00002E36   0xA90B             ADD      R1,SP,#+44
   \   00002E38   0x.... 0x....      BL       BGM111_Transmit
   3211                                          }
   3212                                          sprintf( (char *)tempBffr2, "TCS SYNTAX ERROR: Bad UUID.\r\n" );
   \                     ??RoadBrd_ParseString_502: (+1)
   \   00002E3C   0xF8DF 0x1EC0      LDR.W    R1,??RoadBrd_ParseString_501+0x8
   \   00002E40   0xA80B             ADD      R0,SP,#+44
   \   00002E42   0x.... 0x....      BL       sprintf
   3213                                        }
   3214                                        Status = HAL_OK;
   \                     ??RoadBrd_ParseString_399: (+1)
   \   00002E46   0x2000             MOVS     R0,#+0
   \   00002E48   0x0006             MOVS     R6,R0
   \   00002E4A   0xE011             B.N      ??RoadBrd_ParseString_390
   3215                                      }
   3216                                      else
   3217                                      {
   3218                                        // Is this a BLE Operation?
   3219                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_394: (+1)
   \   00002E4C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002E4E   0x2D00             CMP      R5,#+0
   \   00002E50   0xD009             BEQ.N    ??RoadBrd_ParseString_503
   3220                                        {
   3221                                          // Yes...Build and Send BLE Response NOW.
   3222                                          strcpy( (char *)tempBffr2, "<STATUS>CMD_TCS_BADPARAM</STATUS>");
   \   00002E52   0x49BF             LDR.N    R1,??RoadBrd_ParseString_393
   \   00002E54   0xA80B             ADD      R0,SP,#+44
   \   00002E56   0x.... 0x....      BL       strcpy
   3223                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002E5A   0xA80B             ADD      R0,SP,#+44
   \   00002E5C   0x.... 0x....      BL       strlen
   \   00002E60   0xA90B             ADD      R1,SP,#+44
   \   00002E62   0x.... 0x....      BL       BGM111_Transmit
   3224                                        }
   3225                                        
   3226                                        strcpy( (char *)tempBffr2, "TCS SYNTAX ERROR: Wrong Number of Parameters.\r\n");
   \                     ??RoadBrd_ParseString_503: (+1)
   \   00002E66   0xF8DF 0x1E9C      LDR.W    R1,??RoadBrd_ParseString_501+0xC
   \   00002E6A   0xA80B             ADD      R0,SP,#+44
   \   00002E6C   0x.... 0x....      BL       strcpy
   3227                                      }
   3228                                    } // EndElse (flag == 0)
   3229                                  } // EndElse (tempBffr[3]!=':')
   3230                                  break;
   \                     ??RoadBrd_ParseString_390: (+1)
   \   00002E70   0xF001 0xB84D      B.W      ??RoadBrd_ParseString_378
   3231                                  //------------------ TCR Command: Calibration Read Command
   3232                                case 'R':
   3233                                  // Build Read Calibration Dump Part I....
   3234                                  // Is this a BLE Operation?
   3235                                  if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_385: (+1)
   \   00002E74   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002E76   0x2D00             CMP      R5,#+0
   \   00002E78   0xD00D             BEQ.N    ??RoadBrd_ParseString_504
   3236                                  {
   3237                                    // Yes...Build and Send BLE Response NOW.
   3238                                    sprintf( (char *)tempBffr2, "<STATUS>TCR:%s\\",  RoadBrd_CAL_GetTimeString());
   \   00002E7A   0x.... 0x....      BL       RoadBrd_CAL_GetTimeString
   \   00002E7E   0x0002             MOVS     R2,R0
   \   00002E80   0xF8DF 0x1E84      LDR.W    R1,??RoadBrd_ParseString_501+0x10
   \   00002E84   0xA80B             ADD      R0,SP,#+44
   \   00002E86   0x.... 0x....      BL       sprintf
   3239                                    BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002E8A   0xA80B             ADD      R0,SP,#+44
   \   00002E8C   0x.... 0x....      BL       strlen
   \   00002E90   0xA90B             ADD      R1,SP,#+44
   \   00002E92   0x.... 0x....      BL       BGM111_Transmit
   3240                                  }
   3241                                  
   3242                                  // Send string to UART..
   3243                                  sprintf( (char *)tempBffr2, "CALIBRATION DATA\r\nDate: %s\r\n",  RoadBrd_CAL_GetTimeString());
   \                     ??RoadBrd_ParseString_504: (+1)
   \   00002E96   0x.... 0x....      BL       RoadBrd_CAL_GetTimeString
   \   00002E9A   0x0002             MOVS     R2,R0
   \   00002E9C   0xF8DF 0x1F14      LDR.W    R1,??RoadBrd_ParseString_505
   \   00002EA0   0xA80B             ADD      R0,SP,#+44
   \   00002EA2   0x.... 0x....      BL       sprintf
   3244          #ifdef NUCLEO
   3245                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   3246          #else
   3247                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00002EA6   0xA90B             ADD      R1,SP,#+44
   \   00002EA8   0x2000             MOVS     R0,#+0
   \   00002EAA   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00002EAE   0x0006             MOVS     R6,R0
   3248          #endif
   3249                                  if (Status != HAL_OK)
   \   00002EB0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002EB2   0x2E00             CMP      R6,#+0
   \   00002EB4   0xD003             BEQ.N    ??RoadBrd_ParseString_506
   3250                                      return Status;
   \   00002EB6   0x0030             MOVS     R0,R6
   \   00002EB8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002EBA   0xF001 0xBF16      B.W      ??RoadBrd_ParseString_4
   3251                                  // Build Read Calibration Dump Part II....
   3252                                  // Send string to UART..
   3253                                  sprintf( (char *)tempBffr2, "Name		        UUID		Slope		Offset\r\n" );
   \                     ??RoadBrd_ParseString_506: (+1)
   \   00002EBE   0xF8DF 0x1EF8      LDR.W    R1,??RoadBrd_ParseString_505+0x4
   \   00002EC2   0xA80B             ADD      R0,SP,#+44
   \   00002EC4   0x.... 0x....      BL       sprintf
   3254          #ifdef NUCLEO
   3255                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   3256          #else
   3257                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00002EC8   0xA90B             ADD      R1,SP,#+44
   \   00002ECA   0x2000             MOVS     R0,#+0
   \   00002ECC   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00002ED0   0x0006             MOVS     R6,R0
   3258          #endif
   3259                                  if (Status != HAL_OK)
   \   00002ED2   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002ED4   0x2E00             CMP      R6,#+0
   \   00002ED6   0xD009             BEQ.N    ??RoadBrd_ParseString_507
   3260                                      return Status;
   \   00002ED8   0x0030             MOVS     R0,R6
   \   00002EDA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002EDC   0xF001 0xBF05      B.W      ??RoadBrd_ParseString_4
   \                     ??RoadBrd_ParseString_375:
   \   00002EE0   0x........         DC32     ?_126
   \   00002EE4   0x........         DC32     ?_25
   \   00002EE8   0x........         DC32     ?_127
   3261                                  // NOW, Build Data String..
   3262                                  for (x=0; x<CAL_LAST_VALUE; x++)
   \                     ??RoadBrd_ParseString_507: (+1)
   \   00002EEC   0x2000             MOVS     R0,#+0
   \   00002EEE   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_508: (+1)
   \   00002EF0   0x2F16             CMP      R7,#+22
   \   00002EF2   0xF280 0x8766      BGE.W    ??RoadBrd_ParseString_509
   3263                                  {
   3264                                    // Build String
   3265                                    switch(x)
   \   00002EF6   0x2F00             CMP      R7,#+0
   \   00002EF8   0xD036             BEQ.N    ??RoadBrd_ParseString_510
   \   00002EFA   0x2F02             CMP      R7,#+2
   \   00002EFC   0xF000 0x80DE      BEQ.W    ??RoadBrd_ParseString_511
   \   00002F00   0xF0C0 0x808A      BCC.W    ??RoadBrd_ParseString_512
   \   00002F04   0x2F04             CMP      R7,#+4
   \   00002F06   0xF000 0x8183      BEQ.W    ??RoadBrd_ParseString_513
   \   00002F0A   0xF0C0 0x812B      BCC.W    ??RoadBrd_ParseString_514
   \   00002F0E   0x2F06             CMP      R7,#+6
   \   00002F10   0xF000 0x8226      BEQ.W    ??RoadBrd_ParseString_515
   \   00002F14   0xF0C0 0x81D0      BCC.W    ??RoadBrd_ParseString_516
   \   00002F18   0x2F08             CMP      R7,#+8
   \   00002F1A   0xF000 0x82C9      BEQ.W    ??RoadBrd_ParseString_517
   \   00002F1E   0xF0C0 0x8273      BCC.W    ??RoadBrd_ParseString_518
   \   00002F22   0x2F0A             CMP      R7,#+10
   \   00002F24   0xF000 0x836A      BEQ.W    ??RoadBrd_ParseString_519
   \   00002F28   0xF0C0 0x8316      BCC.W    ??RoadBrd_ParseString_520
   \   00002F2C   0x2F0C             CMP      R7,#+12
   \   00002F2E   0xF000 0x8409      BEQ.W    ??RoadBrd_ParseString_521
   \   00002F32   0xF0C0 0x83B5      BCC.W    ??RoadBrd_ParseString_522
   \   00002F36   0x2F0E             CMP      R7,#+14
   \   00002F38   0xF000 0x84A8      BEQ.W    ??RoadBrd_ParseString_523
   \   00002F3C   0xF0C0 0x8454      BCC.W    ??RoadBrd_ParseString_524
   \   00002F40   0x2F10             CMP      R7,#+16
   \   00002F42   0xF000 0x8549      BEQ.W    ??RoadBrd_ParseString_525
   \   00002F46   0xF0C0 0x84F3      BCC.W    ??RoadBrd_ParseString_526
   \   00002F4A   0x2F12             CMP      R7,#+18
   \   00002F4C   0xF000 0x85E8      BEQ.W    ??RoadBrd_ParseString_527
   \   00002F50   0xF0C0 0x8594      BCC.W    ??RoadBrd_ParseString_528
   \   00002F54   0x2F14             CMP      R7,#+20
   \   00002F56   0xF000 0x8687      BEQ.W    ??RoadBrd_ParseString_529
   \   00002F5A   0xF0C0 0x8631      BCC.W    ??RoadBrd_ParseString_530
   \   00002F5E   0x2F15             CMP      R7,#+21
   \   00002F60   0xF000 0x86D4      BEQ.W    ??RoadBrd_ParseString_531
   \   00002F64   0xF000 0xBF19      B.W      ??RoadBrd_ParseString_532
   3266                                    {
   3267                                      case CAL_SHNT_VLTG: //CAL_SHNT_VLTG Values
   3268                                        // Is this a BLE Operation?
   3269                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_510: (+1)
   \   00002F68   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002F6A   0x2D00             CMP      R5,#+0
   \   00002F6C   0xD024             BEQ.N    ??RoadBrd_ParseString_533
   3270                                        {
   3271                                          // Yes...Build and Send BLE Response NOW.
   3272                                          sprintf( (char *)tempBffr2, "%s:0002//%1.4f//%2.3f//", 
   3273                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3274                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3275                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00002F6E   0x0038             MOVS     R0,R7
   \   00002F70   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002F72   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00002F76   0x4683             MOV      R11,R0
   \   00002F78   0x0038             MOVS     R0,R7
   \   00002F7A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002F7C   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00002F80   0x4681             MOV      R9,R0
   \   00002F82   0x0038             MOVS     R0,R7
   \   00002F84   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002F86   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00002F8A   0x4682             MOV      R10,R0
   \   00002F8C   0x4658             MOV      R0,R11
   \   00002F8E   0x.... 0x....      BL       __aeabi_f2d
   \   00002F92   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00002F96   0x4648             MOV      R0,R9
   \   00002F98   0x.... 0x....      BL       __aeabi_f2d
   \   00002F9C   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00002FA0   0x4652             MOV      R2,R10
   \   00002FA2   0xF8DF 0x1EE4      LDR.W    R1,??RoadBrd_ParseString_534
   \   00002FA6   0xA80B             ADD      R0,SP,#+44
   \   00002FA8   0x.... 0x....      BL       sprintf
   3276                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002FAC   0xA80B             ADD      R0,SP,#+44
   \   00002FAE   0x.... 0x....      BL       strlen
   \   00002FB2   0xA90B             ADD      R1,SP,#+44
   \   00002FB4   0x.... 0x....      BL       BGM111_Transmit
   3277                                        }
   3278                                        sprintf( (char *)tempBffr2, "%s	0002		%1.4f		%2.3f\r\n", 
   3279                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3280                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3281                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_533: (+1)
   \   00002FB8   0x0038             MOVS     R0,R7
   \   00002FBA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002FBC   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00002FC0   0x4683             MOV      R11,R0
   \   00002FC2   0x0038             MOVS     R0,R7
   \   00002FC4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002FC6   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00002FCA   0x4681             MOV      R9,R0
   \   00002FCC   0x0038             MOVS     R0,R7
   \   00002FCE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002FD0   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00002FD4   0x4682             MOV      R10,R0
   \   00002FD6   0x4658             MOV      R0,R11
   \   00002FD8   0x.... 0x....      BL       __aeabi_f2d
   \   00002FDC   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00002FE0   0x4648             MOV      R0,R9
   \   00002FE2   0x.... 0x....      BL       __aeabi_f2d
   \   00002FE6   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00002FEA   0x4652             MOV      R2,R10
   \   00002FEC   0xF8DF 0x1EF4      LDR.W    R1,??RoadBrd_ParseString_535
   \   00002FF0   0xA80B             ADD      R0,SP,#+44
   \   00002FF2   0x.... 0x....      BL       sprintf
   3282                                        break;
   \   00002FF6   0xF000 0xBED0      B.W      ??RoadBrd_ParseString_532
   \   00002FFA   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_377:
   \   00002FFC   0x........         DC32     ?_128
   \   00003000   0x........         DC32     ?_129
   \   00003004   0x........         DC32     ?_130
   \   00003008   0x........         DC32     ?_131
   \   0000300C   0x........         DC32     ?_132
   \   00003010   0x........         DC32     ?_133
   \   00003014   0x........         DC32     ?_134
   3283                                      case CAL_CURRENT: //CAL_CURRENT Values
   3284                                        // Is this a BLE Operation?
   3285                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_512: (+1)
   \   00003018   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000301A   0x2D00             CMP      R5,#+0
   \   0000301C   0xD024             BEQ.N    ??RoadBrd_ParseString_536
   3286                                        {
   3287                                          // Yes...Build and Send BLE Response NOW.
   3288                                          sprintf( (char *)tempBffr2, "%s:0004//%1.4f//%2.3f//", 
   3289                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3290                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3291                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   0000301E   0x0038             MOVS     R0,R7
   \   00003020   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003022   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003026   0x4683             MOV      R11,R0
   \   00003028   0x0038             MOVS     R0,R7
   \   0000302A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000302C   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003030   0x4681             MOV      R9,R0
   \   00003032   0x0038             MOVS     R0,R7
   \   00003034   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003036   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   0000303A   0x4682             MOV      R10,R0
   \   0000303C   0x4658             MOV      R0,R11
   \   0000303E   0x.... 0x....      BL       __aeabi_f2d
   \   00003042   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003046   0x4648             MOV      R0,R9
   \   00003048   0x.... 0x....      BL       __aeabi_f2d
   \   0000304C   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003050   0x4652             MOV      R2,R10
   \   00003052   0xF8DF 0x1EF8      LDR.W    R1,??RoadBrd_ParseString_537
   \   00003056   0xA80B             ADD      R0,SP,#+44
   \   00003058   0x.... 0x....      BL       sprintf
   3292                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000305C   0xA80B             ADD      R0,SP,#+44
   \   0000305E   0x.... 0x....      BL       strlen
   \   00003062   0xA90B             ADD      R1,SP,#+44
   \   00003064   0x.... 0x....      BL       BGM111_Transmit
   3293                                        }
   3294                                        sprintf( (char *)tempBffr2, "%s	        0004		%1.4f		%2.3f\r\n", 
   3295                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3296                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3297                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_536: (+1)
   \   00003068   0x0038             MOVS     R0,R7
   \   0000306A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000306C   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003070   0x4683             MOV      R11,R0
   \   00003072   0x0038             MOVS     R0,R7
   \   00003074   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003076   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   0000307A   0x4681             MOV      R9,R0
   \   0000307C   0x0038             MOVS     R0,R7
   \   0000307E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003080   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003084   0x4682             MOV      R10,R0
   \   00003086   0x4658             MOV      R0,R11
   \   00003088   0x.... 0x....      BL       __aeabi_f2d
   \   0000308C   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003090   0x4648             MOV      R0,R9
   \   00003092   0x.... 0x....      BL       __aeabi_f2d
   \   00003096   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000309A   0x4652             MOV      R2,R10
   \   0000309C   0xF8DF 0x1EE4      LDR.W    R1,??RoadBrd_ParseString_538
   \   000030A0   0xA80B             ADD      R0,SP,#+44
   \   000030A2   0x.... 0x....      BL       sprintf
   3298                                        break;
   \   000030A6   0xF000 0xBE78      B.W      ??RoadBrd_ParseString_532
   \   000030AA   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_383:
   \   000030AC   0x........         DC32     ?_135
   \   000030B0   0x........         DC32     ?_136
   \   000030B4   0x........         DC32     ?_137
   \   000030B8   0x........         DC32     ?_138
   3299                                      case CAL_POWER: //CAL_POWER Values
   3300                                        // Is this a BLE Operation?
   3301                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_511: (+1)
   \   000030BC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000030BE   0x2D00             CMP      R5,#+0
   \   000030C0   0xD024             BEQ.N    ??RoadBrd_ParseString_539
   3302                                        {
   3303                                          // Yes...Build and Send BLE Response NOW.
   3304                                          sprintf( (char *)tempBffr2, "%s:0006//%1.4f//%2.3f//", 
   3305                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3306                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3307                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   000030C2   0x0038             MOVS     R0,R7
   \   000030C4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000030C6   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000030CA   0x4683             MOV      R11,R0
   \   000030CC   0x0038             MOVS     R0,R7
   \   000030CE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000030D0   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000030D4   0x4681             MOV      R9,R0
   \   000030D6   0x0038             MOVS     R0,R7
   \   000030D8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000030DA   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000030DE   0x4682             MOV      R10,R0
   \   000030E0   0x4658             MOV      R0,R11
   \   000030E2   0x.... 0x....      BL       __aeabi_f2d
   \   000030E6   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000030EA   0x4648             MOV      R0,R9
   \   000030EC   0x.... 0x....      BL       __aeabi_f2d
   \   000030F0   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000030F4   0x4652             MOV      R2,R10
   \   000030F6   0xF8DF 0x1EC4      LDR.W    R1,??RoadBrd_ParseString_540
   \   000030FA   0xA80B             ADD      R0,SP,#+44
   \   000030FC   0x.... 0x....      BL       sprintf
   3308                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003100   0xA80B             ADD      R0,SP,#+44
   \   00003102   0x.... 0x....      BL       strlen
   \   00003106   0xA90B             ADD      R1,SP,#+44
   \   00003108   0x.... 0x....      BL       BGM111_Transmit
   3309                                        }
   3310                                        sprintf( (char *)tempBffr2, "%s	0006		%1.4f		%2.3f\r\n", 
   3311                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3312                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3313                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_539: (+1)
   \   0000310C   0x0038             MOVS     R0,R7
   \   0000310E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003110   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003114   0x4683             MOV      R11,R0
   \   00003116   0x0038             MOVS     R0,R7
   \   00003118   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000311A   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   0000311E   0x4681             MOV      R9,R0
   \   00003120   0x0038             MOVS     R0,R7
   \   00003122   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003124   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003128   0x4682             MOV      R10,R0
   \   0000312A   0x4658             MOV      R0,R11
   \   0000312C   0x.... 0x....      BL       __aeabi_f2d
   \   00003130   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003134   0x4648             MOV      R0,R9
   \   00003136   0x.... 0x....      BL       __aeabi_f2d
   \   0000313A   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000313E   0x4652             MOV      R2,R10
   \   00003140   0xF8DF 0x1ED8      LDR.W    R1,??RoadBrd_ParseString_541
   \   00003144   0xA80B             ADD      R0,SP,#+44
   \   00003146   0x.... 0x....      BL       sprintf
   3314                                        break;
   \   0000314A   0xF000 0xBE26      B.W      ??RoadBrd_ParseString_532
   \   0000314E   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_393:
   \   00003150   0x........         DC32     ?_139
   \   00003154   0x........         DC32     ?_140
   \   00003158   0x........         DC32     ?_141
   \   0000315C   0x........         DC32     ?_142
   \   00003160   0x........         DC32     ?_143
   3315                                      case CAL_VOLTAGE: //CAL_VOLTAGE Values
   3316                                        // Is this a BLE Operation?
   3317                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_514: (+1)
   \   00003164   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003166   0x2D00             CMP      R5,#+0
   \   00003168   0xD024             BEQ.N    ??RoadBrd_ParseString_542
   3318                                        {
   3319                                          // Yes...Build and Send BLE Response NOW.
   3320                                          sprintf( (char *)tempBffr2, "%s:0008//%1.4f//%2.3f//", 
   3321                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3322                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3323                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   0000316A   0x0038             MOVS     R0,R7
   \   0000316C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000316E   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003172   0x4683             MOV      R11,R0
   \   00003174   0x0038             MOVS     R0,R7
   \   00003176   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003178   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   0000317C   0x4681             MOV      R9,R0
   \   0000317E   0x0038             MOVS     R0,R7
   \   00003180   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003182   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003186   0x4682             MOV      R10,R0
   \   00003188   0x4658             MOV      R0,R11
   \   0000318A   0x.... 0x....      BL       __aeabi_f2d
   \   0000318E   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003192   0x4648             MOV      R0,R9
   \   00003194   0x.... 0x....      BL       __aeabi_f2d
   \   00003198   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000319C   0x4652             MOV      R2,R10
   \   0000319E   0xF8DF 0x1E80      LDR.W    R1,??RoadBrd_ParseString_541+0x4
   \   000031A2   0xA80B             ADD      R0,SP,#+44
   \   000031A4   0x.... 0x....      BL       sprintf
   3324                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000031A8   0xA80B             ADD      R0,SP,#+44
   \   000031AA   0x.... 0x....      BL       strlen
   \   000031AE   0xA90B             ADD      R1,SP,#+44
   \   000031B0   0x.... 0x....      BL       BGM111_Transmit
   3325                                        }
   3326                                        sprintf( (char *)tempBffr2, "%s	        0008		%1.4f		%2.3f\r\n", 
   3327                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3328                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3329                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_542: (+1)
   \   000031B4   0x0038             MOVS     R0,R7
   \   000031B6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000031B8   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000031BC   0x4683             MOV      R11,R0
   \   000031BE   0x0038             MOVS     R0,R7
   \   000031C0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000031C2   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000031C6   0x4681             MOV      R9,R0
   \   000031C8   0x0038             MOVS     R0,R7
   \   000031CA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000031CC   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000031D0   0x4682             MOV      R10,R0
   \   000031D2   0x4658             MOV      R0,R11
   \   000031D4   0x.... 0x....      BL       __aeabi_f2d
   \   000031D8   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000031DC   0x4648             MOV      R0,R9
   \   000031DE   0x.... 0x....      BL       __aeabi_f2d
   \   000031E2   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000031E6   0x4652             MOV      R2,R10
   \   000031E8   0xF8DF 0x1E38      LDR.W    R1,??RoadBrd_ParseString_541+0x8
   \   000031EC   0xA80B             ADD      R0,SP,#+44
   \   000031EE   0x.... 0x....      BL       sprintf
   3330                                        break;
   \   000031F2   0xF000 0xBDD2      B.W      ??RoadBrd_ParseString_532
   \   000031F6   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_398:
   \   000031F8   0x........         DC32     ?_144
   \   000031FC   0x........         DC32     ?_145
   \   00003200   0x........         DC32     ?_146
   \   00003204   0x........         DC32     ?_147
   \   00003208   0x........         DC32     ?_148
   \   0000320C   0x........         DC32     ?_149
   3331                                      case CAL_TEMPC: //CAL_TEMPC Values
   3332                                        // Is this a BLE Operation?
   3333                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_513: (+1)
   \   00003210   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003212   0x2D00             CMP      R5,#+0
   \   00003214   0xD024             BEQ.N    ??RoadBrd_ParseString_543
   3334                                        {
   3335                                          // Yes...Build and Send BLE Response NOW.
   3336                                          sprintf( (char *)tempBffr2, "%s:000A//%1.4f//%2.3f//", 
   3337                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3338                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3339                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003216   0x0038             MOVS     R0,R7
   \   00003218   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000321A   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   0000321E   0x4683             MOV      R11,R0
   \   00003220   0x0038             MOVS     R0,R7
   \   00003222   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003224   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003228   0x4681             MOV      R9,R0
   \   0000322A   0x0038             MOVS     R0,R7
   \   0000322C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000322E   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003232   0x4682             MOV      R10,R0
   \   00003234   0x4658             MOV      R0,R11
   \   00003236   0x.... 0x....      BL       __aeabi_f2d
   \   0000323A   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   0000323E   0x4648             MOV      R0,R9
   \   00003240   0x.... 0x....      BL       __aeabi_f2d
   \   00003244   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003248   0x4652             MOV      R2,R10
   \   0000324A   0xF8DF 0x1E84      LDR.W    R1,??RoadBrd_ParseString_544
   \   0000324E   0xA80B             ADD      R0,SP,#+44
   \   00003250   0x.... 0x....      BL       sprintf
   3340                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003254   0xA80B             ADD      R0,SP,#+44
   \   00003256   0x.... 0x....      BL       strlen
   \   0000325A   0xA90B             ADD      R1,SP,#+44
   \   0000325C   0x.... 0x....      BL       BGM111_Transmit
   3341                                        }
   3342                                        sprintf( (char *)tempBffr2, "%s	000A		%1.4f		%2.3f\r\n", 
   3343                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3344                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3345                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_543: (+1)
   \   00003260   0x0038             MOVS     R0,R7
   \   00003262   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003264   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003268   0x4683             MOV      R11,R0
   \   0000326A   0x0038             MOVS     R0,R7
   \   0000326C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000326E   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003272   0x4681             MOV      R9,R0
   \   00003274   0x0038             MOVS     R0,R7
   \   00003276   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003278   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   0000327C   0x4682             MOV      R10,R0
   \   0000327E   0x4658             MOV      R0,R11
   \   00003280   0x.... 0x....      BL       __aeabi_f2d
   \   00003284   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003288   0x4648             MOV      R0,R9
   \   0000328A   0x.... 0x....      BL       __aeabi_f2d
   \   0000328E   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003292   0x4652             MOV      R2,R10
   \   00003294   0xF8DF 0x1E98      LDR.W    R1,??RoadBrd_ParseString_545
   \   00003298   0xA80B             ADD      R0,SP,#+44
   \   0000329A   0x.... 0x....      BL       sprintf
   3346                                        break;
   \   0000329E   0xF000 0xBD7C      B.W      ??RoadBrd_ParseString_532
   \   000032A2   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_404:
   \   000032A4   0x........         DC32     ?_150
   \   000032A8   0x........         DC32     ?_151
   \   000032AC   0x........         DC32     ?_152
   \   000032B0   0x........         DC32     ?_153
   \   000032B4   0x........         DC32     ?_154
   3347                                      case CAL_TEMPF: //CAL_TEMPF Values
   3348                                        // Is this a BLE Operation?
   3349                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_516: (+1)
   \   000032B8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000032BA   0x2D00             CMP      R5,#+0
   \   000032BC   0xD024             BEQ.N    ??RoadBrd_ParseString_546
   3350                                        {
   3351                                          // Yes...Build and Send BLE Response NOW.
   3352                                          sprintf( (char *)tempBffr2, "%s:000B//%1.4f//%2.3f//", 
   3353                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3354                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3355                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   000032BE   0x0038             MOVS     R0,R7
   \   000032C0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000032C2   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000032C6   0x4683             MOV      R11,R0
   \   000032C8   0x0038             MOVS     R0,R7
   \   000032CA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000032CC   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000032D0   0x4681             MOV      R9,R0
   \   000032D2   0x0038             MOVS     R0,R7
   \   000032D4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000032D6   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000032DA   0x4682             MOV      R10,R0
   \   000032DC   0x4658             MOV      R0,R11
   \   000032DE   0x.... 0x....      BL       __aeabi_f2d
   \   000032E2   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000032E6   0x4648             MOV      R0,R9
   \   000032E8   0x.... 0x....      BL       __aeabi_f2d
   \   000032EC   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000032F0   0x4652             MOV      R2,R10
   \   000032F2   0xF8DF 0x1E40      LDR.W    R1,??RoadBrd_ParseString_545+0x4
   \   000032F6   0xA80B             ADD      R0,SP,#+44
   \   000032F8   0x.... 0x....      BL       sprintf
   3356                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000032FC   0xA80B             ADD      R0,SP,#+44
   \   000032FE   0x.... 0x....      BL       strlen
   \   00003302   0xA90B             ADD      R1,SP,#+44
   \   00003304   0x.... 0x....      BL       BGM111_Transmit
   3357                                        }
   3358                                        sprintf( (char *)tempBffr2, "%s	000B		%1.4f		%2.3f\r\n", 
   3359                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3360                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3361                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_546: (+1)
   \   00003308   0x0038             MOVS     R0,R7
   \   0000330A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000330C   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003310   0x4683             MOV      R11,R0
   \   00003312   0x0038             MOVS     R0,R7
   \   00003314   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003316   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   0000331A   0x4681             MOV      R9,R0
   \   0000331C   0x0038             MOVS     R0,R7
   \   0000331E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003320   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003324   0x4682             MOV      R10,R0
   \   00003326   0x4658             MOV      R0,R11
   \   00003328   0x.... 0x....      BL       __aeabi_f2d
   \   0000332C   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003330   0x4648             MOV      R0,R9
   \   00003332   0x.... 0x....      BL       __aeabi_f2d
   \   00003336   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000333A   0x4652             MOV      R2,R10
   \   0000333C   0xF8DF 0x1DF8      LDR.W    R1,??RoadBrd_ParseString_545+0x8
   \   00003340   0xA80B             ADD      R0,SP,#+44
   \   00003342   0x.... 0x....      BL       sprintf
   3362                                        break;
   \   00003346   0xF000 0xBD28      B.W      ??RoadBrd_ParseString_532
   \   0000334A   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_410:
   \   0000334C   0x........         DC32     ?_155
   \   00003350   0x........         DC32     ?_156
   \   00003354   0x........         DC32     ?_157
   \   00003358   0x........         DC32     ?_158
   \   0000335C   0x........         DC32     ?_159
   3363                                      case CAL_PRESSURE: //CAL_PRESSURE Values
   3364                                        // Is this a BLE Operation?
   3365                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_515: (+1)
   \   00003360   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003362   0x2D00             CMP      R5,#+0
   \   00003364   0xD024             BEQ.N    ??RoadBrd_ParseString_547
   3366                                        {
   3367                                          // Yes...Build and Send BLE Response NOW.
   3368                                          sprintf( (char *)tempBffr2, "%s:0011//%1.4f//%2.3f//", 
   3369                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3370                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3371                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003366   0x0038             MOVS     R0,R7
   \   00003368   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000336A   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   0000336E   0x4683             MOV      R11,R0
   \   00003370   0x0038             MOVS     R0,R7
   \   00003372   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003374   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003378   0x4681             MOV      R9,R0
   \   0000337A   0x0038             MOVS     R0,R7
   \   0000337C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000337E   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003382   0x4682             MOV      R10,R0
   \   00003384   0x4658             MOV      R0,R11
   \   00003386   0x.... 0x....      BL       __aeabi_f2d
   \   0000338A   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   0000338E   0x4648             MOV      R0,R9
   \   00003390   0x.... 0x....      BL       __aeabi_f2d
   \   00003394   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003398   0x4652             MOV      R2,R10
   \   0000339A   0xF8DF 0x1EA4      LDR.W    R1,??RoadBrd_ParseString_548
   \   0000339E   0xA80B             ADD      R0,SP,#+44
   \   000033A0   0x.... 0x....      BL       sprintf
   3372                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000033A4   0xA80B             ADD      R0,SP,#+44
   \   000033A6   0x.... 0x....      BL       strlen
   \   000033AA   0xA90B             ADD      R1,SP,#+44
   \   000033AC   0x.... 0x....      BL       BGM111_Transmit
   3373                                        }
   3374                                        sprintf( (char *)tempBffr2, "%s	0011		%1.4f		%2.3f\r\n", 
   3375                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3376                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3377                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_547: (+1)
   \   000033B0   0x0038             MOVS     R0,R7
   \   000033B2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000033B4   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000033B8   0x4683             MOV      R11,R0
   \   000033BA   0x0038             MOVS     R0,R7
   \   000033BC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000033BE   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000033C2   0x4681             MOV      R9,R0
   \   000033C4   0x0038             MOVS     R0,R7
   \   000033C6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000033C8   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000033CC   0x4682             MOV      R10,R0
   \   000033CE   0x4658             MOV      R0,R11
   \   000033D0   0x.... 0x....      BL       __aeabi_f2d
   \   000033D4   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000033D8   0x4648             MOV      R0,R9
   \   000033DA   0x.... 0x....      BL       __aeabi_f2d
   \   000033DE   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000033E2   0x4652             MOV      R2,R10
   \   000033E4   0xF8DF 0x1E5C      LDR.W    R1,??RoadBrd_ParseString_548+0x4
   \   000033E8   0xA80B             ADD      R0,SP,#+44
   \   000033EA   0x.... 0x....      BL       sprintf
   3378                                        break;
   \   000033EE   0xF000 0xBCD4      B.W      ??RoadBrd_ParseString_532
   \   000033F2   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_415:
   \   000033F4   0x........         DC32     ?_160
   \   000033F8   0x........         DC32     ?_161
   \   000033FC   0x........         DC32     ?_162
   \   00003400   0x........         DC32     ?_163
   \   00003404   0x........         DC32     ?_164
   3379                                      case CAL_HUMIDITY: //CAL_HUMIDITY Values
   3380                                        // Is this a BLE Operation?
   3381                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_518: (+1)
   \   00003408   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000340A   0x2D00             CMP      R5,#+0
   \   0000340C   0xD024             BEQ.N    ??RoadBrd_ParseString_549
   3382                                        {
   3383                                          // Yes...Build and Send BLE Response NOW.
   3384                                          sprintf( (char *)tempBffr2, "%s:0030//%1.4f//%2.3f//", 
   3385                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3386                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3387                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   0000340E   0x0038             MOVS     R0,R7
   \   00003410   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003412   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003416   0x4683             MOV      R11,R0
   \   00003418   0x0038             MOVS     R0,R7
   \   0000341A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000341C   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003420   0x4681             MOV      R9,R0
   \   00003422   0x0038             MOVS     R0,R7
   \   00003424   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003426   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   0000342A   0x4682             MOV      R10,R0
   \   0000342C   0x4658             MOV      R0,R11
   \   0000342E   0x.... 0x....      BL       __aeabi_f2d
   \   00003432   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003436   0x4648             MOV      R0,R9
   \   00003438   0x.... 0x....      BL       __aeabi_f2d
   \   0000343C   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003440   0x4652             MOV      R2,R10
   \   00003442   0xF8DF 0x1E60      LDR.W    R1,??RoadBrd_ParseString_550
   \   00003446   0xA80B             ADD      R0,SP,#+44
   \   00003448   0x.... 0x....      BL       sprintf
   3388                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000344C   0xA80B             ADD      R0,SP,#+44
   \   0000344E   0x.... 0x....      BL       strlen
   \   00003452   0xA90B             ADD      R1,SP,#+44
   \   00003454   0x.... 0x....      BL       BGM111_Transmit
   3389                                        }
   3390                                        sprintf( (char *)tempBffr2, "%s	0030		%1.4f		%2.3f\r\n", 
   3391                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3392                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3393                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_549: (+1)
   \   00003458   0x0038             MOVS     R0,R7
   \   0000345A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000345C   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003460   0x4683             MOV      R11,R0
   \   00003462   0x0038             MOVS     R0,R7
   \   00003464   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003466   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   0000346A   0x4681             MOV      R9,R0
   \   0000346C   0x0038             MOVS     R0,R7
   \   0000346E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003470   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003474   0x4682             MOV      R10,R0
   \   00003476   0x4658             MOV      R0,R11
   \   00003478   0x.... 0x....      BL       __aeabi_f2d
   \   0000347C   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003480   0x4648             MOV      R0,R9
   \   00003482   0x.... 0x....      BL       __aeabi_f2d
   \   00003486   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000348A   0x4652             MOV      R2,R10
   \   0000348C   0xF8DF 0x1E64      LDR.W    R1,??RoadBrd_ParseString_551
   \   00003490   0xA80B             ADD      R0,SP,#+44
   \   00003492   0x.... 0x....      BL       sprintf
   3394                                        break;
   \   00003496   0xF000 0xBC80      B.W      ??RoadBrd_ParseString_532
   \   0000349A   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_423:
   \   0000349C   0x........         DC32     ?_165
   \   000034A0   0x........         DC32     ?_166
   \   000034A4   0x........         DC32     ?_167
   \   000034A8   0x........         DC32     ?_168
   \   000034AC   0x........         DC32     ?_169
   3395                                      case CAL_HUM_TEMPC: //CAL_HUM_TEMPC Values
   3396                                        // Is this a BLE Operation?
   3397                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_517: (+1)
   \   000034B0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000034B2   0x2D00             CMP      R5,#+0
   \   000034B4   0xD024             BEQ.N    ??RoadBrd_ParseString_552
   3398                                        {
   3399                                          // Yes...Build and Send BLE Response NOW.
   3400                                          sprintf( (char *)tempBffr2, "%s:0032//%1.4f//%2.3f//", 
   3401                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3402                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3403                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   000034B6   0x0038             MOVS     R0,R7
   \   000034B8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000034BA   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000034BE   0x4683             MOV      R11,R0
   \   000034C0   0x0038             MOVS     R0,R7
   \   000034C2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000034C4   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000034C8   0x4681             MOV      R9,R0
   \   000034CA   0x0038             MOVS     R0,R7
   \   000034CC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000034CE   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000034D2   0x4682             MOV      R10,R0
   \   000034D4   0x4658             MOV      R0,R11
   \   000034D6   0x.... 0x....      BL       __aeabi_f2d
   \   000034DA   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000034DE   0x4648             MOV      R0,R9
   \   000034E0   0x.... 0x....      BL       __aeabi_f2d
   \   000034E4   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000034E8   0x4652             MOV      R2,R10
   \   000034EA   0xF8DF 0x1E68      LDR.W    R1,??RoadBrd_ParseString_553
   \   000034EE   0xA80B             ADD      R0,SP,#+44
   \   000034F0   0x.... 0x....      BL       sprintf
   3404                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000034F4   0xA80B             ADD      R0,SP,#+44
   \   000034F6   0x.... 0x....      BL       strlen
   \   000034FA   0xA90B             ADD      R1,SP,#+44
   \   000034FC   0x.... 0x....      BL       BGM111_Transmit
   3405                                        }
   3406                                        sprintf( (char *)tempBffr2, "%s	0032		%1.4f		%2.3f\r\n", 
   3407                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3408                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3409                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_552: (+1)
   \   00003500   0x0038             MOVS     R0,R7
   \   00003502   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003504   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003508   0x4683             MOV      R11,R0
   \   0000350A   0x0038             MOVS     R0,R7
   \   0000350C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000350E   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003512   0x4681             MOV      R9,R0
   \   00003514   0x0038             MOVS     R0,R7
   \   00003516   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003518   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   0000351C   0x4682             MOV      R10,R0
   \   0000351E   0x4658             MOV      R0,R11
   \   00003520   0x.... 0x....      BL       __aeabi_f2d
   \   00003524   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003528   0x4648             MOV      R0,R9
   \   0000352A   0x.... 0x....      BL       __aeabi_f2d
   \   0000352E   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003532   0x4652             MOV      R2,R10
   \   00003534   0xF8DF 0x1E20      LDR.W    R1,??RoadBrd_ParseString_553+0x4
   \   00003538   0xA80B             ADD      R0,SP,#+44
   \   0000353A   0x.... 0x....      BL       sprintf
   3410                                        break;
   \   0000353E   0xF000 0xBC2C      B.W      ??RoadBrd_ParseString_532
   \   00003542   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_428:
   \   00003544   0x........         DC32     ?_170
   \   00003548   0x........         DC32     ?_171
   \   0000354C   0x........         DC32     ?_172
   \   00003550   0x........         DC32     ?_173
   \   00003554   0x........         DC32     ?_174
   3411                                      case CAL_HUM_TEMPF: //CAL_HUM_TEMPF Values
   3412                                        // Is this a BLE Operation?
   3413                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_520: (+1)
   \   00003558   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000355A   0x2D00             CMP      R5,#+0
   \   0000355C   0xD024             BEQ.N    ??RoadBrd_ParseString_554
   3414                                        {
   3415                                          // Yes...Build and Send BLE Response NOW.
   3416                                          sprintf( (char *)tempBffr2, "%s:0033//%1.4f//%2.3f//", 
   3417                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3418                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3419                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   0000355E   0x0038             MOVS     R0,R7
   \   00003560   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003562   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003566   0x4683             MOV      R11,R0
   \   00003568   0x0038             MOVS     R0,R7
   \   0000356A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000356C   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003570   0x4681             MOV      R9,R0
   \   00003572   0x0038             MOVS     R0,R7
   \   00003574   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003576   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   0000357A   0x4682             MOV      R10,R0
   \   0000357C   0x4658             MOV      R0,R11
   \   0000357E   0x.... 0x....      BL       __aeabi_f2d
   \   00003582   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003586   0x4648             MOV      R0,R9
   \   00003588   0x.... 0x....      BL       __aeabi_f2d
   \   0000358C   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003590   0x4652             MOV      R2,R10
   \   00003592   0xF8DF 0x1E70      LDR.W    R1,??RoadBrd_ParseString_555
   \   00003596   0xA80B             ADD      R0,SP,#+44
   \   00003598   0x.... 0x....      BL       sprintf
   3420                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000359C   0xA80B             ADD      R0,SP,#+44
   \   0000359E   0x.... 0x....      BL       strlen
   \   000035A2   0xA90B             ADD      R1,SP,#+44
   \   000035A4   0x.... 0x....      BL       BGM111_Transmit
   3421                                        }
   3422                                        sprintf( (char *)tempBffr2, "%s	0033		%1.4f		%2.3f\r\n", 
   3423                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3424                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3425                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_554: (+1)
   \   000035A8   0x0038             MOVS     R0,R7
   \   000035AA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000035AC   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000035B0   0x4683             MOV      R11,R0
   \   000035B2   0x0038             MOVS     R0,R7
   \   000035B4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000035B6   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000035BA   0x4681             MOV      R9,R0
   \   000035BC   0x0038             MOVS     R0,R7
   \   000035BE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000035C0   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000035C4   0x4682             MOV      R10,R0
   \   000035C6   0x4658             MOV      R0,R11
   \   000035C8   0x.... 0x....      BL       __aeabi_f2d
   \   000035CC   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000035D0   0x4648             MOV      R0,R9
   \   000035D2   0x.... 0x....      BL       __aeabi_f2d
   \   000035D6   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000035DA   0x4652             MOV      R2,R10
   \   000035DC   0xF8DF 0x1E28      LDR.W    R1,??RoadBrd_ParseString_555+0x4
   \   000035E0   0xA80B             ADD      R0,SP,#+44
   \   000035E2   0x.... 0x....      BL       sprintf
   3426                                        break;
   \   000035E6   0xE3D8             B.N      ??RoadBrd_ParseString_532
   \                     ??RoadBrd_ParseString_434:
   \   000035E8   0x........         DC32     ?_175
   \   000035EC   0x........         DC32     ?_176
   \   000035F0   0x........         DC32     ?_177
   \   000035F4   0x........         DC32     ?_178
   \   000035F8   0x........         DC32     ?_179
   3427                                      case CAL_RGB_RED: //CAL_RGB_RED Values
   3428                                        // Is this a BLE Operation?
   3429                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_519: (+1)
   \   000035FC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000035FE   0x2D00             CMP      R5,#+0
   \   00003600   0xD024             BEQ.N    ??RoadBrd_ParseString_556
   3430                                        {
   3431                                          // Yes...Build and Send BLE Response NOW.
   3432                                          sprintf( (char *)tempBffr2, "%s:000D//%1.4f//%2.3f//", 
   3433                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3434                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3435                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003602   0x0038             MOVS     R0,R7
   \   00003604   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003606   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   0000360A   0x4683             MOV      R11,R0
   \   0000360C   0x0038             MOVS     R0,R7
   \   0000360E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003610   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003614   0x4681             MOV      R9,R0
   \   00003616   0x0038             MOVS     R0,R7
   \   00003618   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000361A   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   0000361E   0x4682             MOV      R10,R0
   \   00003620   0x4658             MOV      R0,R11
   \   00003622   0x.... 0x....      BL       __aeabi_f2d
   \   00003626   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   0000362A   0x4648             MOV      R0,R9
   \   0000362C   0x.... 0x....      BL       __aeabi_f2d
   \   00003630   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003634   0x4652             MOV      R2,R10
   \   00003636   0xF8DF 0x1E30      LDR.W    R1,??RoadBrd_ParseString_557
   \   0000363A   0xA80B             ADD      R0,SP,#+44
   \   0000363C   0x.... 0x....      BL       sprintf
   3436                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003640   0xA80B             ADD      R0,SP,#+44
   \   00003642   0x.... 0x....      BL       strlen
   \   00003646   0xA90B             ADD      R1,SP,#+44
   \   00003648   0x.... 0x....      BL       BGM111_Transmit
   3437                                        }
   3438                                        sprintf( (char *)tempBffr2, "%s	        000D		%1.4f		%2.3f\r\n", 
   3439                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3440                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3441                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_556: (+1)
   \   0000364C   0x0038             MOVS     R0,R7
   \   0000364E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003650   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003654   0x4683             MOV      R11,R0
   \   00003656   0x0038             MOVS     R0,R7
   \   00003658   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000365A   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   0000365E   0x4681             MOV      R9,R0
   \   00003660   0x0038             MOVS     R0,R7
   \   00003662   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003664   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003668   0x4682             MOV      R10,R0
   \   0000366A   0x4658             MOV      R0,R11
   \   0000366C   0x.... 0x....      BL       __aeabi_f2d
   \   00003670   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003674   0x4648             MOV      R0,R9
   \   00003676   0x.... 0x....      BL       __aeabi_f2d
   \   0000367A   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000367E   0x4652             MOV      R2,R10
   \   00003680   0xF8DF 0x1E5C      LDR.W    R1,??RoadBrd_ParseString_558
   \   00003684   0xA80B             ADD      R0,SP,#+44
   \   00003686   0x.... 0x....      BL       sprintf
   3442                                        break;
   \   0000368A   0xE386             B.N      ??RoadBrd_ParseString_532
   \                     ??RoadBrd_ParseString_439:
   \   0000368C   0x........         DC32     ?_180
   \   00003690   0x........         DC32     ?_181
   \   00003694   0x........         DC32     ?_182
   \   00003698   0x........         DC32     ?_183
   \   0000369C   0x........         DC32     ?_184
   3443                                      case CAL_RGB_GREEN: //CAL_RGB_GREEN Values
   3444                                        // Is this a BLE Operation?
   3445                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_522: (+1)
   \   000036A0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000036A2   0x2D00             CMP      R5,#+0
   \   000036A4   0xD024             BEQ.N    ??RoadBrd_ParseString_559
   3446                                        {
   3447                                          // Yes...Build and Send BLE Response NOW.
   3448                                          sprintf( (char *)tempBffr2, "%s:000E//%1.4f//%2.3f//", 
   3449                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3450                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3451                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   000036A6   0x0038             MOVS     R0,R7
   \   000036A8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000036AA   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000036AE   0x4683             MOV      R11,R0
   \   000036B0   0x0038             MOVS     R0,R7
   \   000036B2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000036B4   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000036B8   0x4681             MOV      R9,R0
   \   000036BA   0x0038             MOVS     R0,R7
   \   000036BC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000036BE   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000036C2   0x4682             MOV      R10,R0
   \   000036C4   0x4658             MOV      R0,R11
   \   000036C6   0x.... 0x....      BL       __aeabi_f2d
   \   000036CA   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000036CE   0x4648             MOV      R0,R9
   \   000036D0   0x.... 0x....      BL       __aeabi_f2d
   \   000036D4   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000036D8   0x4652             MOV      R2,R10
   \   000036DA   0xF8DF 0x1E08      LDR.W    R1,??RoadBrd_ParseString_558+0x4
   \   000036DE   0xA80B             ADD      R0,SP,#+44
   \   000036E0   0x.... 0x....      BL       sprintf
   3452                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000036E4   0xA80B             ADD      R0,SP,#+44
   \   000036E6   0x.... 0x....      BL       strlen
   \   000036EA   0xA90B             ADD      R1,SP,#+44
   \   000036EC   0x.... 0x....      BL       BGM111_Transmit
   3453                                        }
   3454                                        sprintf( (char *)tempBffr2, "%s	000E		%1.4f		%2.3f\r\n", 
   3455                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3456                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3457                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_559: (+1)
   \   000036F0   0x0038             MOVS     R0,R7
   \   000036F2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000036F4   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000036F8   0x4683             MOV      R11,R0
   \   000036FA   0x0038             MOVS     R0,R7
   \   000036FC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000036FE   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003702   0x4681             MOV      R9,R0
   \   00003704   0x0038             MOVS     R0,R7
   \   00003706   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003708   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   0000370C   0x4682             MOV      R10,R0
   \   0000370E   0x4658             MOV      R0,R11
   \   00003710   0x.... 0x....      BL       __aeabi_f2d
   \   00003714   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003718   0x4648             MOV      R0,R9
   \   0000371A   0x.... 0x....      BL       __aeabi_f2d
   \   0000371E   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003722   0x4652             MOV      R2,R10
   \   00003724   0xF8DF 0x1E40      LDR.W    R1,??RoadBrd_ParseString_560
   \   00003728   0xA80B             ADD      R0,SP,#+44
   \   0000372A   0x.... 0x....      BL       sprintf
   3458                                        break;
   \   0000372E   0xE334             B.N      ??RoadBrd_ParseString_532
   \                     ??RoadBrd_ParseString_447:
   \   00003730   0x........         DC32     ?_185
   \   00003734   0x........         DC32     ?_186
   \   00003738   0x........         DC32     ?_187
   \   0000373C   0x........         DC32     ?_188
   \   00003740   0x........         DC32     ?_189
   3459                                      case CAL_RGB_BLUE: //CAL_RGB_BLUE Values
   3460                                        // Is this a BLE Operation?
   3461                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_521: (+1)
   \   00003744   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003746   0x2D00             CMP      R5,#+0
   \   00003748   0xD024             BEQ.N    ??RoadBrd_ParseString_561
   3462                                        {
   3463                                          // Yes...Build and Send BLE Response NOW.
   3464                                          sprintf( (char *)tempBffr2, "%s:000F//%1.4f//%2.3f//", 
   3465                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3466                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3467                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   0000374A   0x0038             MOVS     R0,R7
   \   0000374C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000374E   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003752   0x4683             MOV      R11,R0
   \   00003754   0x0038             MOVS     R0,R7
   \   00003756   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003758   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   0000375C   0x4681             MOV      R9,R0
   \   0000375E   0x0038             MOVS     R0,R7
   \   00003760   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003762   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003766   0x4682             MOV      R10,R0
   \   00003768   0x4658             MOV      R0,R11
   \   0000376A   0x.... 0x....      BL       __aeabi_f2d
   \   0000376E   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003772   0x4648             MOV      R0,R9
   \   00003774   0x.... 0x....      BL       __aeabi_f2d
   \   00003778   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000377C   0x4652             MOV      R2,R10
   \   0000377E   0xF8DF 0x1E44      LDR.W    R1,??RoadBrd_ParseString_562
   \   00003782   0xA80B             ADD      R0,SP,#+44
   \   00003784   0x.... 0x....      BL       sprintf
   3468                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003788   0xA80B             ADD      R0,SP,#+44
   \   0000378A   0x.... 0x....      BL       strlen
   \   0000378E   0xA90B             ADD      R1,SP,#+44
   \   00003790   0x.... 0x....      BL       BGM111_Transmit
   3469                                        }
   3470                                        sprintf( (char *)tempBffr2, "%s	000F		%1.4f		%2.3f\r\n", 
   3471                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3472                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3473                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_561: (+1)
   \   00003794   0x0038             MOVS     R0,R7
   \   00003796   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003798   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   0000379C   0x4683             MOV      R11,R0
   \   0000379E   0x0038             MOVS     R0,R7
   \   000037A0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000037A2   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000037A6   0x4681             MOV      R9,R0
   \   000037A8   0x0038             MOVS     R0,R7
   \   000037AA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000037AC   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000037B0   0x4682             MOV      R10,R0
   \   000037B2   0x4658             MOV      R0,R11
   \   000037B4   0x.... 0x....      BL       __aeabi_f2d
   \   000037B8   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000037BC   0x4648             MOV      R0,R9
   \   000037BE   0x.... 0x....      BL       __aeabi_f2d
   \   000037C2   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000037C6   0x4652             MOV      R2,R10
   \   000037C8   0xF8DF 0x1E30      LDR.W    R1,??RoadBrd_ParseString_563
   \   000037CC   0xA80B             ADD      R0,SP,#+44
   \   000037CE   0x.... 0x....      BL       sprintf
   3474                                        break;
   \   000037D2   0xE2E2             B.N      ??RoadBrd_ParseString_532
   \                     ??RoadBrd_ParseString_452:
   \   000037D4   0x........         DC32     ?_190
   \   000037D8   0x........         DC32     ?_191
   \   000037DC   0x........         DC32     ?_192
   \   000037E0   0x........         DC32     ?_193
   \   000037E4   0x........         DC32     ?_194
   3475                                      case CAL_THERM_C: //CAL_THERM_C Values
   3476                                        // Is this a BLE Operation?
   3477                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_524: (+1)
   \   000037E8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000037EA   0x2D00             CMP      R5,#+0
   \   000037EC   0xD024             BEQ.N    ??RoadBrd_ParseString_564
   3478                                        {
   3479                                          // Yes...Build and Send BLE Response NOW.
   3480                                          sprintf( (char *)tempBffr2, "%s:0017//%1.4f//%2.3f//", 
   3481                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3482                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3483                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   000037EE   0x0038             MOVS     R0,R7
   \   000037F0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000037F2   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000037F6   0x4683             MOV      R11,R0
   \   000037F8   0x0038             MOVS     R0,R7
   \   000037FA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000037FC   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003800   0x4681             MOV      R9,R0
   \   00003802   0x0038             MOVS     R0,R7
   \   00003804   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003806   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   0000380A   0x4682             MOV      R10,R0
   \   0000380C   0x4658             MOV      R0,R11
   \   0000380E   0x.... 0x....      BL       __aeabi_f2d
   \   00003812   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003816   0x4648             MOV      R0,R9
   \   00003818   0x.... 0x....      BL       __aeabi_f2d
   \   0000381C   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003820   0x4652             MOV      R2,R10
   \   00003822   0xF8DF 0x1E10      LDR.W    R1,??RoadBrd_ParseString_565
   \   00003826   0xA80B             ADD      R0,SP,#+44
   \   00003828   0x.... 0x....      BL       sprintf
   3484                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000382C   0xA80B             ADD      R0,SP,#+44
   \   0000382E   0x.... 0x....      BL       strlen
   \   00003832   0xA90B             ADD      R1,SP,#+44
   \   00003834   0x.... 0x....      BL       BGM111_Transmit
   3485                                        }
   3486                                        sprintf( (char *)tempBffr2, "%s	        0017		%1.4f		%2.3f\r\n", 
   3487                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3488                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3489                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_564: (+1)
   \   00003838   0x0038             MOVS     R0,R7
   \   0000383A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000383C   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003840   0x4683             MOV      R11,R0
   \   00003842   0x0038             MOVS     R0,R7
   \   00003844   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003846   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   0000384A   0x4681             MOV      R9,R0
   \   0000384C   0x0038             MOVS     R0,R7
   \   0000384E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003850   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003854   0x4682             MOV      R10,R0
   \   00003856   0x4658             MOV      R0,R11
   \   00003858   0x.... 0x....      BL       __aeabi_f2d
   \   0000385C   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003860   0x4648             MOV      R0,R9
   \   00003862   0x.... 0x....      BL       __aeabi_f2d
   \   00003866   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000386A   0x4652             MOV      R2,R10
   \   0000386C   0xF8DF 0x1E24      LDR.W    R1,??RoadBrd_ParseString_566
   \   00003870   0xA80B             ADD      R0,SP,#+44
   \   00003872   0x.... 0x....      BL       sprintf
   3490                                        break;
   \   00003876   0xE290             B.N      ??RoadBrd_ParseString_532
   \                     ??RoadBrd_ParseString_458:
   \   00003878   0x........         DC32     ?_195
   \   0000387C   0x........         DC32     ?_196
   \   00003880   0x........         DC32     ?_197
   \   00003884   0x........         DC32     ?_198
   \   00003888   0x........         DC32     ?_199
   3491                                      case CAL_ROADT_1C: //CAL_ROADT_1C Values
   3492                                        // Is this a BLE Operation?
   3493                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_523: (+1)
   \   0000388C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000388E   0x2D00             CMP      R5,#+0
   \   00003890   0xD024             BEQ.N    ??RoadBrd_ParseString_567
   3494                                        {
   3495                                          // Yes...Build and Send BLE Response NOW.
   3496                                          sprintf( (char *)tempBffr2, "%s:0019//%1.4f//%2.3f//", 
   3497                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3498                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3499                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003892   0x0038             MOVS     R0,R7
   \   00003894   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003896   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   0000389A   0x4683             MOV      R11,R0
   \   0000389C   0x0038             MOVS     R0,R7
   \   0000389E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000038A0   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000038A4   0x4681             MOV      R9,R0
   \   000038A6   0x0038             MOVS     R0,R7
   \   000038A8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000038AA   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000038AE   0x4682             MOV      R10,R0
   \   000038B0   0x4658             MOV      R0,R11
   \   000038B2   0x.... 0x....      BL       __aeabi_f2d
   \   000038B6   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000038BA   0x4648             MOV      R0,R9
   \   000038BC   0x.... 0x....      BL       __aeabi_f2d
   \   000038C0   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000038C4   0x4652             MOV      R2,R10
   \   000038C6   0xF8DF 0x1E2C      LDR.W    R1,??RoadBrd_ParseString_568
   \   000038CA   0xA80B             ADD      R0,SP,#+44
   \   000038CC   0x.... 0x....      BL       sprintf
   3500                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000038D0   0xA80B             ADD      R0,SP,#+44
   \   000038D2   0x.... 0x....      BL       strlen
   \   000038D6   0xA90B             ADD      R1,SP,#+44
   \   000038D8   0x.... 0x....      BL       BGM111_Transmit
   3501                                        }
   3502                                        sprintf( (char *)tempBffr2, "%s	0019		%1.4f		%2.3f\r\n", 
   3503                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3504                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3505                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_567: (+1)
   \   000038DC   0x0038             MOVS     R0,R7
   \   000038DE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000038E0   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000038E4   0x4683             MOV      R11,R0
   \   000038E6   0x0038             MOVS     R0,R7
   \   000038E8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000038EA   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000038EE   0x4681             MOV      R9,R0
   \   000038F0   0x0038             MOVS     R0,R7
   \   000038F2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000038F4   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000038F8   0x4682             MOV      R10,R0
   \   000038FA   0x4658             MOV      R0,R11
   \   000038FC   0x.... 0x....      BL       __aeabi_f2d
   \   00003900   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003904   0x4648             MOV      R0,R9
   \   00003906   0x.... 0x....      BL       __aeabi_f2d
   \   0000390A   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000390E   0x4652             MOV      R2,R10
   \   00003910   0xF8DF 0x1E20      LDR.W    R1,??RoadBrd_ParseString_569
   \   00003914   0xA80B             ADD      R0,SP,#+44
   \   00003916   0x.... 0x....      BL       sprintf
   3506                                        break;
   \   0000391A   0xE23E             B.N      ??RoadBrd_ParseString_532
   \                     ??RoadBrd_ParseString_463:
   \   0000391C   0x........         DC32     ?_200
   \   00003920   0x........         DC32     ?_201
   \   00003924   0x........         DC32     ?_202
   \   00003928   0x........         DC32     ?_203
   \   0000392C   0x........         DC32     ?_204
   3507                                      case CAL_ROADT_2C: //CAL_ROADT_2C Values
   3508                                        // Is this a BLE Operation?
   3509                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_526: (+1)
   \   00003930   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003932   0x2D00             CMP      R5,#+0
   \   00003934   0xD024             BEQ.N    ??RoadBrd_ParseString_570
   3510                                        {
   3511                                          // Yes...Build and Send BLE Response NOW.
   3512                                          sprintf( (char *)tempBffr2, "%s:001B//%1.4f//%2.3f//", 
   3513                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3514                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3515                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003936   0x0038             MOVS     R0,R7
   \   00003938   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000393A   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   0000393E   0x4683             MOV      R11,R0
   \   00003940   0x0038             MOVS     R0,R7
   \   00003942   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003944   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003948   0x4681             MOV      R9,R0
   \   0000394A   0x0038             MOVS     R0,R7
   \   0000394C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000394E   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003952   0x4682             MOV      R10,R0
   \   00003954   0x4658             MOV      R0,R11
   \   00003956   0x.... 0x....      BL       __aeabi_f2d
   \   0000395A   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   0000395E   0x4648             MOV      R0,R9
   \   00003960   0x.... 0x....      BL       __aeabi_f2d
   \   00003964   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003968   0x4652             MOV      R2,R10
   \   0000396A   0xF8DF 0x1E24      LDR.W    R1,??RoadBrd_ParseString_571
   \   0000396E   0xA80B             ADD      R0,SP,#+44
   \   00003970   0x.... 0x....      BL       sprintf
   3516                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003974   0xA80B             ADD      R0,SP,#+44
   \   00003976   0x.... 0x....      BL       strlen
   \   0000397A   0xA90B             ADD      R1,SP,#+44
   \   0000397C   0x.... 0x....      BL       BGM111_Transmit
   3517                                        }
   3518                                        sprintf( (char *)tempBffr2, "%s	001B		%1.4f		%2.3f\r\n", 
   3519                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3520                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3521                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_570: (+1)
   \   00003980   0x0038             MOVS     R0,R7
   \   00003982   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003984   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003988   0x4683             MOV      R11,R0
   \   0000398A   0x0038             MOVS     R0,R7
   \   0000398C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000398E   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003992   0x4681             MOV      R9,R0
   \   00003994   0x0038             MOVS     R0,R7
   \   00003996   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003998   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   0000399C   0x4682             MOV      R10,R0
   \   0000399E   0x4658             MOV      R0,R11
   \   000039A0   0x.... 0x....      BL       __aeabi_f2d
   \   000039A4   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000039A8   0x4648             MOV      R0,R9
   \   000039AA   0x.... 0x....      BL       __aeabi_f2d
   \   000039AE   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000039B2   0x4652             MOV      R2,R10
   \   000039B4   0xF8DF 0x1E18      LDR.W    R1,??RoadBrd_ParseString_572
   \   000039B8   0xA80B             ADD      R0,SP,#+44
   \   000039BA   0x.... 0x....      BL       sprintf
   3522                                        break;
   \   000039BE   0xE1EC             B.N      ??RoadBrd_ParseString_532
   \                     ??RoadBrd_ParseString_471:
   \   000039C0   0x........         DC32     ?_205
   \   000039C4   0x........         DC32     ?_206
   \   000039C8   0x........         DC32     ?_207
   \   000039CC   0x........         DC32     ?_208
   \   000039D0   0x........         DC32     ?_209
   \   000039D4   0x........         DC32     ?_210
   3523                                      case CAL_ROADT_3C: //CAL_ROADT_3C Values
   3524                                        // Is this a BLE Operation?
   3525                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_525: (+1)
   \   000039D8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000039DA   0x2D00             CMP      R5,#+0
   \   000039DC   0xD024             BEQ.N    ??RoadBrd_ParseString_573
   3526                                        {
   3527                                          // Yes...Build and Send BLE Response NOW.
   3528                                          sprintf( (char *)tempBffr2, "%s:001D//%1.4f//%2.3f//", 
   3529                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3530                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3531                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   000039DE   0x0038             MOVS     R0,R7
   \   000039E0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000039E2   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000039E6   0x4683             MOV      R11,R0
   \   000039E8   0x0038             MOVS     R0,R7
   \   000039EA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000039EC   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000039F0   0x4681             MOV      R9,R0
   \   000039F2   0x0038             MOVS     R0,R7
   \   000039F4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000039F6   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000039FA   0x4682             MOV      R10,R0
   \   000039FC   0x4658             MOV      R0,R11
   \   000039FE   0x.... 0x....      BL       __aeabi_f2d
   \   00003A02   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003A06   0x4648             MOV      R0,R9
   \   00003A08   0x.... 0x....      BL       __aeabi_f2d
   \   00003A0C   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003A10   0x4652             MOV      R2,R10
   \   00003A12   0xF8DF 0x1E20      LDR.W    R1,??RoadBrd_ParseString_574
   \   00003A16   0xA80B             ADD      R0,SP,#+44
   \   00003A18   0x.... 0x....      BL       sprintf
   3532                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003A1C   0xA80B             ADD      R0,SP,#+44
   \   00003A1E   0x.... 0x....      BL       strlen
   \   00003A22   0xA90B             ADD      R1,SP,#+44
   \   00003A24   0x.... 0x....      BL       BGM111_Transmit
   3533                                        }
   3534                                        sprintf( (char *)tempBffr2, "%s	001D		%1.4f		%2.3f\r\n", 
   3535                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3536                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3537                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_573: (+1)
   \   00003A28   0x0038             MOVS     R0,R7
   \   00003A2A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003A2C   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003A30   0x4683             MOV      R11,R0
   \   00003A32   0x0038             MOVS     R0,R7
   \   00003A34   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003A36   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003A3A   0x4681             MOV      R9,R0
   \   00003A3C   0x0038             MOVS     R0,R7
   \   00003A3E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003A40   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003A44   0x4682             MOV      R10,R0
   \   00003A46   0x4658             MOV      R0,R11
   \   00003A48   0x.... 0x....      BL       __aeabi_f2d
   \   00003A4C   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003A50   0x4648             MOV      R0,R9
   \   00003A52   0x.... 0x....      BL       __aeabi_f2d
   \   00003A56   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003A5A   0x4652             MOV      R2,R10
   \   00003A5C   0xF8DF 0x1DD8      LDR.W    R1,??RoadBrd_ParseString_574+0x4
   \   00003A60   0xA80B             ADD      R0,SP,#+44
   \   00003A62   0x.... 0x....      BL       sprintf
   3538                                        break;
   \   00003A66   0xE198             B.N      ??RoadBrd_ParseString_532
   \                     ??RoadBrd_ParseString_477:
   \   00003A68   0x........         DC32     ?_211
   \   00003A6C   0x........         DC32     ?_212
   \   00003A70   0x........         DC32     ?_213
   \   00003A74   0x........         DC32     ?_214
   \   00003A78   0x........         DC32     ?_215
   3539                                      case CAL_ROADT_4C: //CAL_ROADT_4C Values
   3540                                        // Is this a BLE Operation?
   3541                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_528: (+1)
   \   00003A7C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003A7E   0x2D00             CMP      R5,#+0
   \   00003A80   0xD024             BEQ.N    ??RoadBrd_ParseString_575
   3542                                        {
   3543                                          // Yes...Build and Send BLE Response NOW.
   3544                                          sprintf( (char *)tempBffr2, "%s:001F//%1.4f//%2.3f//", 
   3545                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3546                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3547                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003A82   0x0038             MOVS     R0,R7
   \   00003A84   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003A86   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003A8A   0x4683             MOV      R11,R0
   \   00003A8C   0x0038             MOVS     R0,R7
   \   00003A8E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003A90   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003A94   0x4681             MOV      R9,R0
   \   00003A96   0x0038             MOVS     R0,R7
   \   00003A98   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003A9A   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003A9E   0x4682             MOV      R10,R0
   \   00003AA0   0x4658             MOV      R0,R11
   \   00003AA2   0x.... 0x....      BL       __aeabi_f2d
   \   00003AA6   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003AAA   0x4648             MOV      R0,R9
   \   00003AAC   0x.... 0x....      BL       __aeabi_f2d
   \   00003AB0   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003AB4   0x4652             MOV      R2,R10
   \   00003AB6   0xF8DF 0x1E14      LDR.W    R1,??RoadBrd_ParseString_576
   \   00003ABA   0xA80B             ADD      R0,SP,#+44
   \   00003ABC   0x.... 0x....      BL       sprintf
   3548                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003AC0   0xA80B             ADD      R0,SP,#+44
   \   00003AC2   0x.... 0x....      BL       strlen
   \   00003AC6   0xA90B             ADD      R1,SP,#+44
   \   00003AC8   0x.... 0x....      BL       BGM111_Transmit
   3549                                        }
   3550                                        sprintf( (char *)tempBffr2, "%s	001F		%1.4f		%2.3f\r\n", 
   3551                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3552                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3553                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_575: (+1)
   \   00003ACC   0x0038             MOVS     R0,R7
   \   00003ACE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003AD0   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003AD4   0x4683             MOV      R11,R0
   \   00003AD6   0x0038             MOVS     R0,R7
   \   00003AD8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003ADA   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003ADE   0x4681             MOV      R9,R0
   \   00003AE0   0x0038             MOVS     R0,R7
   \   00003AE2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003AE4   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003AE8   0x4682             MOV      R10,R0
   \   00003AEA   0x4658             MOV      R0,R11
   \   00003AEC   0x.... 0x....      BL       __aeabi_f2d
   \   00003AF0   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003AF4   0x4648             MOV      R0,R9
   \   00003AF6   0x.... 0x....      BL       __aeabi_f2d
   \   00003AFA   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003AFE   0x4652             MOV      R2,R10
   \   00003B00   0xF8DF 0x1DCC      LDR.W    R1,??RoadBrd_ParseString_576+0x4
   \   00003B04   0xA80B             ADD      R0,SP,#+44
   \   00003B06   0x.... 0x....      BL       sprintf
   3554                                        break;
   \   00003B0A   0xE146             B.N      ??RoadBrd_ParseString_532
   \                     ??RoadBrd_ParseString_482:
   \   00003B0C   0x........         DC32     ?_216
   \   00003B10   0x........         DC32     ?_217
   \   00003B14   0x........         DC32     ?_218
   \   00003B18   0x........         DC32     ?_219
   \   00003B1C   0x........         DC32     ?_220
   3555                                      case CAL_ROADT_5C: //CAL_ROADT_5C Values
   3556                                        // Is this a BLE Operation?
   3557                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_527: (+1)
   \   00003B20   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003B22   0x2D00             CMP      R5,#+0
   \   00003B24   0xD024             BEQ.N    ??RoadBrd_ParseString_577
   3558                                        {
   3559                                          // Yes...Build and Send BLE Response NOW.
   3560                                          sprintf( (char *)tempBffr2, "%s:0021//%1.4f//%2.3f//", 
   3561                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3562                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3563                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003B26   0x0038             MOVS     R0,R7
   \   00003B28   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003B2A   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003B2E   0x4683             MOV      R11,R0
   \   00003B30   0x0038             MOVS     R0,R7
   \   00003B32   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003B34   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003B38   0x4681             MOV      R9,R0
   \   00003B3A   0x0038             MOVS     R0,R7
   \   00003B3C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003B3E   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003B42   0x4682             MOV      R10,R0
   \   00003B44   0x4658             MOV      R0,R11
   \   00003B46   0x.... 0x....      BL       __aeabi_f2d
   \   00003B4A   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003B4E   0x4648             MOV      R0,R9
   \   00003B50   0x.... 0x....      BL       __aeabi_f2d
   \   00003B54   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003B58   0x4652             MOV      R2,R10
   \   00003B5A   0xF8DF 0x1DD8      LDR.W    R1,??RoadBrd_ParseString_578
   \   00003B5E   0xA80B             ADD      R0,SP,#+44
   \   00003B60   0x.... 0x....      BL       sprintf
   3564                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003B64   0xA80B             ADD      R0,SP,#+44
   \   00003B66   0x.... 0x....      BL       strlen
   \   00003B6A   0xA90B             ADD      R1,SP,#+44
   \   00003B6C   0x.... 0x....      BL       BGM111_Transmit
   3565                                        }
   3566                                        sprintf( (char *)tempBffr2, "%s	0021		%1.4f		%2.3f\r\n", 
   3567                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3568                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3569                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_577: (+1)
   \   00003B70   0x0038             MOVS     R0,R7
   \   00003B72   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003B74   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003B78   0x4683             MOV      R11,R0
   \   00003B7A   0x0038             MOVS     R0,R7
   \   00003B7C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003B7E   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003B82   0x4681             MOV      R9,R0
   \   00003B84   0x0038             MOVS     R0,R7
   \   00003B86   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003B88   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003B8C   0x4682             MOV      R10,R0
   \   00003B8E   0x4658             MOV      R0,R11
   \   00003B90   0x.... 0x....      BL       __aeabi_f2d
   \   00003B94   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003B98   0x4648             MOV      R0,R9
   \   00003B9A   0x.... 0x....      BL       __aeabi_f2d
   \   00003B9E   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003BA2   0x4652             MOV      R2,R10
   \   00003BA4   0xF8DF 0x1DE4      LDR.W    R1,??RoadBrd_ParseString_579
   \   00003BA8   0xA80B             ADD      R0,SP,#+44
   \   00003BAA   0x.... 0x....      BL       sprintf
   3570                                        break;
   \   00003BAE   0xE0F4             B.N      ??RoadBrd_ParseString_532
   \                     ??RoadBrd_ParseString_490:
   \   00003BB0   0x........         DC32     ?_221
   \   00003BB4   0x........         DC32     ?_222
   \   00003BB8   0x........         DC32     ?_223
   \   00003BBC   0x........         DC32     ?_224
   3571                                      case CAL_ROADT_6C: //CAL_ROADT_6C Values
   3572                                        // Is this a BLE Operation?
   3573                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_530: (+1)
   \   00003BC0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003BC2   0x2D00             CMP      R5,#+0
   \   00003BC4   0xD024             BEQ.N    ??RoadBrd_ParseString_580
   3574                                        {
   3575                                          // Yes...Build and Send BLE Response NOW.
   3576                                          sprintf( (char *)tempBffr2, "%s:0023//%1.4f//%2.3f//", 
   3577                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3578                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3579                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003BC6   0x0038             MOVS     R0,R7
   \   00003BC8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003BCA   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003BCE   0x4683             MOV      R11,R0
   \   00003BD0   0x0038             MOVS     R0,R7
   \   00003BD2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003BD4   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003BD8   0x4681             MOV      R9,R0
   \   00003BDA   0x0038             MOVS     R0,R7
   \   00003BDC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003BDE   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003BE2   0x4682             MOV      R10,R0
   \   00003BE4   0x4658             MOV      R0,R11
   \   00003BE6   0x.... 0x....      BL       __aeabi_f2d
   \   00003BEA   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003BEE   0x4648             MOV      R0,R9
   \   00003BF0   0x.... 0x....      BL       __aeabi_f2d
   \   00003BF4   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003BF8   0x4652             MOV      R2,R10
   \   00003BFA   0xF8DF 0x1DD0      LDR.W    R1,??RoadBrd_ParseString_581
   \   00003BFE   0xA80B             ADD      R0,SP,#+44
   \   00003C00   0x.... 0x....      BL       sprintf
   3580                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003C04   0xA80B             ADD      R0,SP,#+44
   \   00003C06   0x.... 0x....      BL       strlen
   \   00003C0A   0xA90B             ADD      R1,SP,#+44
   \   00003C0C   0x.... 0x....      BL       BGM111_Transmit
   3581                                        }
   3582                                        sprintf( (char *)tempBffr2, "%s	0023		%1.4f		%2.3f\r\n", 
   3583                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3584                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3585                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_580: (+1)
   \   00003C10   0x0038             MOVS     R0,R7
   \   00003C12   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003C14   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003C18   0x4683             MOV      R11,R0
   \   00003C1A   0x0038             MOVS     R0,R7
   \   00003C1C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003C1E   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003C22   0x4681             MOV      R9,R0
   \   00003C24   0x0038             MOVS     R0,R7
   \   00003C26   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003C28   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003C2C   0x4682             MOV      R10,R0
   \   00003C2E   0x4658             MOV      R0,R11
   \   00003C30   0x.... 0x....      BL       __aeabi_f2d
   \   00003C34   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003C38   0x4648             MOV      R0,R9
   \   00003C3A   0x.... 0x....      BL       __aeabi_f2d
   \   00003C3E   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003C42   0x4652             MOV      R2,R10
   \   00003C44   0xF8DF 0x1DC8      LDR.W    R1,??RoadBrd_ParseString_582
   \   00003C48   0xA80B             ADD      R0,SP,#+44
   \   00003C4A   0x.... 0x....      BL       sprintf
   3586                                        break;
   \   00003C4E   0xE0A4             B.N      ??RoadBrd_ParseString_532
   \                     ??RoadBrd_ParseString_495:
   \   00003C50   0x........         DC32     ?_225
   \   00003C54   0x........         DC32     ?_226
   \   00003C58   0x........         DC32     ?_227
   \   00003C5C   0x........         DC32     ?_228
   \   00003C60   0x........         DC32     ?_229
   \   00003C64   0x........         DC32     ?_230
   3587                                      case CAL_ROADT_7C: //CAL_ROADT_7C Values
   3588                                        // Is this a BLE Operation?
   3589                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_529: (+1)
   \   00003C68   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003C6A   0x2D00             CMP      R5,#+0
   \   00003C6C   0xD024             BEQ.N    ??RoadBrd_ParseString_583
   3590                                        {
   3591                                          // Yes...Build and Send BLE Response NOW.
   3592                                          sprintf( (char *)tempBffr2, "%s:0025//%1.4f//%2.3f//", 
   3593                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3594                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3595                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003C6E   0x0038             MOVS     R0,R7
   \   00003C70   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003C72   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003C76   0x4683             MOV      R11,R0
   \   00003C78   0x0038             MOVS     R0,R7
   \   00003C7A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003C7C   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003C80   0x4681             MOV      R9,R0
   \   00003C82   0x0038             MOVS     R0,R7
   \   00003C84   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003C86   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003C8A   0x4682             MOV      R10,R0
   \   00003C8C   0x4658             MOV      R0,R11
   \   00003C8E   0x.... 0x....      BL       __aeabi_f2d
   \   00003C92   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003C96   0x4648             MOV      R0,R9
   \   00003C98   0x.... 0x....      BL       __aeabi_f2d
   \   00003C9C   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003CA0   0x4652             MOV      R2,R10
   \   00003CA2   0xF8DF 0x1DB8      LDR.W    R1,??RoadBrd_ParseString_584
   \   00003CA6   0xA80B             ADD      R0,SP,#+44
   \   00003CA8   0x.... 0x....      BL       sprintf
   3596                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003CAC   0xA80B             ADD      R0,SP,#+44
   \   00003CAE   0x.... 0x....      BL       strlen
   \   00003CB2   0xA90B             ADD      R1,SP,#+44
   \   00003CB4   0x.... 0x....      BL       BGM111_Transmit
   3597                                        }
   3598                                        sprintf( (char *)tempBffr2, "%s	0025		%1.4f		%2.3f\r\n", 
   3599                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3600                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3601                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_583: (+1)
   \   00003CB8   0x0038             MOVS     R0,R7
   \   00003CBA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003CBC   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003CC0   0x4683             MOV      R11,R0
   \   00003CC2   0x0038             MOVS     R0,R7
   \   00003CC4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003CC6   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003CCA   0x4681             MOV      R9,R0
   \   00003CCC   0x0038             MOVS     R0,R7
   \   00003CCE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003CD0   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003CD4   0x4682             MOV      R10,R0
   \   00003CD6   0x4658             MOV      R0,R11
   \   00003CD8   0x.... 0x....      BL       __aeabi_f2d
   \   00003CDC   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003CE0   0x4648             MOV      R0,R9
   \   00003CE2   0x.... 0x....      BL       __aeabi_f2d
   \   00003CE6   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003CEA   0x4652             MOV      R2,R10
   \   00003CEC   0xF8DF 0x1D88      LDR.W    R1,??RoadBrd_ParseString_585
   \   00003CF0   0xA80B             ADD      R0,SP,#+44
   \   00003CF2   0x.... 0x....      BL       sprintf
   3602                                        break;
   \   00003CF6   0xE050             B.N      ??RoadBrd_ParseString_532
   \                     ??RoadBrd_ParseString_501:
   \   00003CF8   0x........         DC32     ?_231
   \   00003CFC   0x........         DC32     ?_232
   \   00003D00   0x........         DC32     ?_233
   \   00003D04   0x........         DC32     ?_234
   \   00003D08   0x........         DC32     ?_235
   3603                                      case CAL_ROADT_8C: //CAL_ROADT_8C Values
   3604                                        // Is this a BLE Operation?
   3605                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_531: (+1)
   \   00003D0C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003D0E   0x2D00             CMP      R5,#+0
   \   00003D10   0xD024             BEQ.N    ??RoadBrd_ParseString_586
   3606                                        {
   3607                                          // Yes...Build and Send BLE Response NOW.
   3608                                          sprintf( (char *)tempBffr2, "%s:0027//%1.4f//%2.3f//", 
   3609                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3610                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3611                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003D12   0x0038             MOVS     R0,R7
   \   00003D14   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003D16   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003D1A   0x4683             MOV      R11,R0
   \   00003D1C   0x0038             MOVS     R0,R7
   \   00003D1E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003D20   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003D24   0x4681             MOV      R9,R0
   \   00003D26   0x0038             MOVS     R0,R7
   \   00003D28   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003D2A   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003D2E   0x4682             MOV      R10,R0
   \   00003D30   0x4658             MOV      R0,R11
   \   00003D32   0x.... 0x....      BL       __aeabi_f2d
   \   00003D36   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003D3A   0x4648             MOV      R0,R9
   \   00003D3C   0x.... 0x....      BL       __aeabi_f2d
   \   00003D40   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003D44   0x4652             MOV      R2,R10
   \   00003D46   0xF8DF 0x1D78      LDR.W    R1,??RoadBrd_ParseString_587
   \   00003D4A   0xA80B             ADD      R0,SP,#+44
   \   00003D4C   0x.... 0x....      BL       sprintf
   3612                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003D50   0xA80B             ADD      R0,SP,#+44
   \   00003D52   0x.... 0x....      BL       strlen
   \   00003D56   0xA90B             ADD      R1,SP,#+44
   \   00003D58   0x.... 0x....      BL       BGM111_Transmit
   3613                                        }
   3614                                        sprintf( (char *)tempBffr2, "%s	0027		%1.4f		%2.3f\r\n", 
   3615                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3616                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3617                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_586: (+1)
   \   00003D5C   0x0038             MOVS     R0,R7
   \   00003D5E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003D60   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003D64   0x4683             MOV      R11,R0
   \   00003D66   0x0038             MOVS     R0,R7
   \   00003D68   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003D6A   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003D6E   0x4681             MOV      R9,R0
   \   00003D70   0x0038             MOVS     R0,R7
   \   00003D72   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003D74   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003D78   0x4682             MOV      R10,R0
   \   00003D7A   0x4658             MOV      R0,R11
   \   00003D7C   0x.... 0x....      BL       __aeabi_f2d
   \   00003D80   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003D84   0x4648             MOV      R0,R9
   \   00003D86   0x.... 0x....      BL       __aeabi_f2d
   \   00003D8A   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003D8E   0x4652             MOV      R2,R10
   \   00003D90   0xF8DF 0x1D6C      LDR.W    R1,??RoadBrd_ParseString_588
   \   00003D94   0xA80B             ADD      R0,SP,#+44
   \   00003D96   0x.... 0x....      BL       sprintf
   3618                                        break;
   3619                                    } // EndSwitch(x)
   3620                                    // Now Print String.
   3621          #ifdef NUCLEO
   3622                                    Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   3623          #else
   3624                                    Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \                     ??RoadBrd_ParseString_532: (+1)
   \   00003D9A   0xA90B             ADD      R1,SP,#+44
   \   00003D9C   0x2000             MOVS     R0,#+0
   \   00003D9E   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00003DA2   0x0006             MOVS     R6,R0
   3625          #endif
   3626                                    if (Status != HAL_OK)
   \   00003DA4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00003DA6   0x2E00             CMP      R6,#+0
   \   00003DA8   0xD008             BEQ.N    ??RoadBrd_ParseString_589
   3627                                      return Status;
   \   00003DAA   0x0030             MOVS     R0,R6
   \   00003DAC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003DAE   0xF000 0xBF9C      B.W      ??RoadBrd_ParseString_4
   \   00003DB2   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_505:
   \   00003DB4   0x........         DC32     ?_236
   \   00003DB8   0x........         DC32     ?_237
   3628                                  } // EndFor(x=0; x<CAL_LAST_VALUE; x++)
   \                     ??RoadBrd_ParseString_589: (+1)
   \   00003DBC   0x1C7F             ADDS     R7,R7,#+1
   \   00003DBE   0xF7FF 0xB897      B.W      ??RoadBrd_ParseString_508
   3629                                  // Is this a BLE Operation?
   3630                                  if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_509: (+1)
   \   00003DC2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003DC4   0x2D00             CMP      R5,#+0
   \   00003DC6   0xD00A             BEQ.N    ??RoadBrd_ParseString_590
   3631                                  {
   3632                                    // Yes...Build and Send BLE Response NOW.
   3633                                    strcpy( (char *)tempBffr2, "</STATUS>");
   \   00003DC8   0xF8DF 0x1DA0      LDR.W    R1,??RoadBrd_ParseString_591
   \   00003DCC   0xA80B             ADD      R0,SP,#+44
   \   00003DCE   0x.... 0x....      BL       strcpy
   3634                                    BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003DD2   0xA80B             ADD      R0,SP,#+44
   \   00003DD4   0x.... 0x....      BL       strlen
   \   00003DD8   0xA90B             ADD      R1,SP,#+44
   \   00003DDA   0x.... 0x....      BL       BGM111_Transmit
   3635                                  }
   3636                                  sprintf( (char *)tempBffr2, "\r\n     COMPLETE.\r\n" );
   \                     ??RoadBrd_ParseString_590: (+1)
   \   00003DDE   0xF8DF 0x1D90      LDR.W    R1,??RoadBrd_ParseString_591+0x4
   \   00003DE2   0xA80B             ADD      R0,SP,#+44
   \   00003DE4   0x.... 0x....      BL       sprintf
   3637                                  break;
   \   00003DE8   0xE091             B.N      ??RoadBrd_ParseString_378
   3638                                  //------------------ TCT Command: Calibration Set Time Command
   3639                                case 'T':
   3640                                  // Step 1. Validate format.
   3641                                  if(tempBffr[3]!=':')
   \                     ??RoadBrd_ParseString_387: (+1)
   \   00003DEA   0x78E0             LDRB     R0,[R4, #+3]
   \   00003DEC   0x283A             CMP      R0,#+58
   \   00003DEE   0xD013             BEQ.N    ??RoadBrd_ParseString_592
   3642                                  {
   3643                                    // Is this a BLE Operation?
   3644                                    if ( BLE_Flag )
   \   00003DF0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003DF2   0x2D00             CMP      R5,#+0
   \   00003DF4   0xD00A             BEQ.N    ??RoadBrd_ParseString_593
   3645                                    {
   3646                                      // Yes...Build and Send BLE Response NOW.
   3647                                      strcpy( (char *)tempBffr2, "<STATUS>CMD_TCT_SYNTAX</STATUS>");
   \   00003DF6   0xF8DF 0x1D7C      LDR.W    R1,??RoadBrd_ParseString_591+0x8
   \   00003DFA   0xA80B             ADD      R0,SP,#+44
   \   00003DFC   0x.... 0x....      BL       strcpy
   3648                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003E00   0xA80B             ADD      R0,SP,#+44
   \   00003E02   0x.... 0x....      BL       strlen
   \   00003E06   0xA90B             ADD      R1,SP,#+44
   \   00003E08   0x.... 0x....      BL       BGM111_Transmit
   3649                                    }
   3650                                    
   3651                                    strcpy( (char *)tempBffr2, "TCT SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_593: (+1)
   \   00003E0C   0xF8DF 0x1D84      LDR.W    R1,??RoadBrd_ParseString_594
   \   00003E10   0xA80B             ADD      R0,SP,#+44
   \   00003E12   0x.... 0x....      BL       strcpy
   \   00003E16   0xE04C             B.N      ??RoadBrd_ParseString_595
   3652                                  } // Endif (tempBffr[3]!=':')
   3653                                  else
   3654                                  {
   3655                                    // 2. Verify if remaining string is digits
   3656                                    if (Size <= 4)
   \                     ??RoadBrd_ParseString_592: (+1)
   \   00003E18   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   00003E1C   0x2805             CMP      R0,#+5
   \   00003E1E   0xDA13             BGE.N    ??RoadBrd_ParseString_596
   3657                                    {
   3658                                      // Is this a BLE Operation?
   3659                                      if ( BLE_Flag )
   \   00003E20   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003E22   0x2D00             CMP      R5,#+0
   \   00003E24   0xD00A             BEQ.N    ??RoadBrd_ParseString_597
   3660                                      {
   3661                                        // Yes...Build and Send BLE Response NOW.
   3662                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_TCT_BADPARAM</STATUS>");
   \   00003E26   0xF8DF 0x1D70      LDR.W    R1,??RoadBrd_ParseString_594+0x4
   \   00003E2A   0xA80B             ADD      R0,SP,#+44
   \   00003E2C   0x.... 0x....      BL       strcpy
   3663                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003E30   0xA80B             ADD      R0,SP,#+44
   \   00003E32   0x.... 0x....      BL       strlen
   \   00003E36   0xA90B             ADD      R1,SP,#+44
   \   00003E38   0x.... 0x....      BL       BGM111_Transmit
   3664                                      }
   3665                                      strcpy( (char *)tempBffr2, "TCT SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_597: (+1)
   \   00003E3C   0xF8DF 0x1D5C      LDR.W    R1,??RoadBrd_ParseString_594+0x8
   \   00003E40   0xA80B             ADD      R0,SP,#+44
   \   00003E42   0x.... 0x....      BL       strcpy
   \   00003E46   0xE034             B.N      ??RoadBrd_ParseString_595
   3666                                    } // EndIf (Size > 4)
   3667                                    else
   3668                                    {
   3669                                      // 3. Grab remaining string and Save it.
   3670                                      tempPstr = &tempBffr[4];
   \                     ??RoadBrd_ParseString_596: (+1)
   \   00003E48   0x1D20             ADDS     R0,R4,#+4
   \   00003E4A   0x9030             STR      R0,[SP, #+192]
   3671                                      strcpy(tempstr, tempPstr);
   \   00003E4C   0x9930             LDR      R1,[SP, #+192]
   \   00003E4E   0xA852             ADD      R0,SP,#+328
   \   00003E50   0x.... 0x....      BL       strcpy
   3672                                      // NOW...Save it.
   3673                                      Status = RoadBrd_CAL_Set_TimeString( (uint8_t *)tempPstr );
   \   00003E54   0x9830             LDR      R0,[SP, #+192]
   \   00003E56   0x.... 0x....      BL       RoadBrd_CAL_Set_TimeString
   \   00003E5A   0x0006             MOVS     R6,R0
   3674                                      if (Status != HAL_OK)
   \   00003E5C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00003E5E   0x2E00             CMP      R6,#+0
   \   00003E60   0xD014             BEQ.N    ??RoadBrd_ParseString_598
   3675                                      {
   3676                                        // Is this a BLE Operation?
   3677                                        if ( BLE_Flag )
   \   00003E62   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003E64   0x2D00             CMP      R5,#+0
   \   00003E66   0xD00A             BEQ.N    ??RoadBrd_ParseString_599
   3678                                        {
   3679                                          // Yes...Build and Send BLE Response NOW.
   3680                                          strcpy( (char *)tempBffr2, "<STATUS>CMD_TCT_ERR</STATUS>");
   \   00003E68   0xF8DF 0x1D8C      LDR.W    R1,??RoadBrd_ParseString_600
   \   00003E6C   0xA80B             ADD      R0,SP,#+44
   \   00003E6E   0x.... 0x....      BL       strcpy
   3681                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003E72   0xA80B             ADD      R0,SP,#+44
   \   00003E74   0x.... 0x....      BL       strlen
   \   00003E78   0xA90B             ADD      R1,SP,#+44
   \   00003E7A   0x.... 0x....      BL       BGM111_Transmit
   3682                                        }
   3683                                        return Status;
   \                     ??RoadBrd_ParseString_599: (+1)
   \   00003E7E   0x0030             MOVS     R0,R6
   \   00003E80   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003E82   0xF000 0xBF32      B.W      ??RoadBrd_ParseString_4
   \   00003E86   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_534:
   \   00003E88   0x........         DC32     ?_238
   3684                                      }
   3685                                      else
   3686                                      {
   3687                                        // Is this a BLE Operation?
   3688                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_598: (+1)
   \   00003E8C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003E8E   0x2D00             CMP      R5,#+0
   \   00003E90   0xD00A             BEQ.N    ??RoadBrd_ParseString_601
   3689                                        {
   3690                                          // Yes...Build and Send BLE Response NOW.
   3691                                          strcpy( (char *)tempBffr2, "<STATUS>ST_TCT_ACK</STATUS>");
   \   00003E92   0xF8DF 0x1D68      LDR.W    R1,??RoadBrd_ParseString_600+0x4
   \   00003E96   0xA80B             ADD      R0,SP,#+44
   \   00003E98   0x.... 0x....      BL       strcpy
   3692                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003E9C   0xA80B             ADD      R0,SP,#+44
   \   00003E9E   0x.... 0x....      BL       strlen
   \   00003EA2   0xA90B             ADD      R1,SP,#+44
   \   00003EA4   0x.... 0x....      BL       BGM111_Transmit
   3693                                        }
   3694                                      }
   3695                                      sprintf( (char *)tempBffr2, "\r\n     COMPLETE.\r\n" );
   \                     ??RoadBrd_ParseString_601: (+1)
   \   00003EA8   0xF8DF 0x1CC4      LDR.W    R1,??RoadBrd_ParseString_591+0x4
   \   00003EAC   0xA80B             ADD      R0,SP,#+44
   \   00003EAE   0x.... 0x....      BL       sprintf
   3696                                    } // EndElse (Size > 4)
   3697                                  } // EndElse (tempBffr[3]!=':')
   3698                                  break;
   \                     ??RoadBrd_ParseString_595: (+1)
   \   00003EB2   0xE02C             B.N      ??RoadBrd_ParseString_378
   3699                                  //------------------ TCI Command: Calibration Initialize Cal Table(Reset)
   3700                                case 'I':
   3701                                  Status = RoadBrd_CAL_InitializeFrmFlash();
   \                     ??RoadBrd_ParseString_384: (+1)
   \   00003EB4   0x.... 0x....      BL       RoadBrd_CAL_InitializeFrmFlash
   \   00003EB8   0x0006             MOVS     R6,R0
   3702                                  if (Status != HAL_OK)
   \   00003EBA   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00003EBC   0x2E00             CMP      R6,#+0
   \   00003EBE   0xD013             BEQ.N    ??RoadBrd_ParseString_602
   3703                                  {
   3704                                    // Is this a BLE Operation?
   3705                                    if ( BLE_Flag )
   \   00003EC0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003EC2   0x2D00             CMP      R5,#+0
   \   00003EC4   0xD00A             BEQ.N    ??RoadBrd_ParseString_603
   3706                                    {
   3707                                      // Yes...Build and Send BLE Response NOW.
   3708                                      strcpy( (char *)tempBffr2, "<STATUS>CMD_TCI_ERR</STATUS>");
   \   00003EC6   0xF8DF 0x1D70      LDR.W    R1,??RoadBrd_ParseString_604
   \   00003ECA   0xA80B             ADD      R0,SP,#+44
   \   00003ECC   0x.... 0x....      BL       strcpy
   3709                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003ED0   0xA80B             ADD      R0,SP,#+44
   \   00003ED2   0x.... 0x....      BL       strlen
   \   00003ED6   0xA90B             ADD      R1,SP,#+44
   \   00003ED8   0x.... 0x....      BL       BGM111_Transmit
   3710                                    }
   3711                                    return Status;
   \                     ??RoadBrd_ParseString_603: (+1)
   \   00003EDC   0x0030             MOVS     R0,R6
   \   00003EDE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003EE0   0xF000 0xBF03      B.W      ??RoadBrd_ParseString_4
   \                     ??RoadBrd_ParseString_535:
   \   00003EE4   0x........         DC32     ?_239
   3712                                  }
   3713                                  else
   3714                                  {
   3715                                    // Is this a BLE Operation?
   3716                                    if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_602: (+1)
   \   00003EE8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003EEA   0x2D00             CMP      R5,#+0
   \   00003EEC   0xD00A             BEQ.N    ??RoadBrd_ParseString_605
   3717                                    {
   3718                                      // Yes...Build and Send BLE Response NOW.
   3719                                      strcpy( (char *)tempBffr2, "<STATUS>ST_TCI_ACK</STATUS>");
   \   00003EEE   0xF8DF 0x1D6C      LDR.W    R1,??RoadBrd_ParseString_606
   \   00003EF2   0xA80B             ADD      R0,SP,#+44
   \   00003EF4   0x.... 0x....      BL       strcpy
   3720                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003EF8   0xA80B             ADD      R0,SP,#+44
   \   00003EFA   0x.... 0x....      BL       strlen
   \   00003EFE   0xA90B             ADD      R1,SP,#+44
   \   00003F00   0x.... 0x....      BL       BGM111_Transmit
   3721                                    }
   3722                                  }
   3723                                  sprintf( (char *)tempBffr2, "\r\n     COMPLETE.\r\n" );
   \                     ??RoadBrd_ParseString_605: (+1)
   \   00003F04   0xF8DF 0x1C68      LDR.W    R1,??RoadBrd_ParseString_591+0x4
   \   00003F08   0xA80B             ADD      R0,SP,#+44
   \   00003F0A   0x.... 0x....      BL       sprintf
   3724                                  break;
   3725                                } //EndSwitch
   3726                              } //EndElse (Size == 2)
   3727                              break;
   \                     ??RoadBrd_ParseString_378: (+1)
   \   00003F0E   0xF000 0xBE58      B.W      ??RoadBrd_ParseString_289
   3728          //++++++++++++++++++++++++++++++++++++++++++  Dump Driver State.
   3729                            case 'D':
   3730                              // Read Driver Status
   3731                              DriverStatus = Get_DriverStatus();
   \                     ??RoadBrd_ParseString_292: (+1)
   \   00003F12   0x.... 0x....      BL       Get_DriverStatus
   \   00003F16   0xF8AD 0x00E4      STRH     R0,[SP, #+228]
   3732                              // Is this a BLE Operation?
   3733                              if ( BLE_Flag )
   \   00003F1A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003F1C   0x2D00             CMP      R5,#+0
   \   00003F1E   0xD00C             BEQ.N    ??RoadBrd_ParseString_607
   3734                              {
   3735                                // Yes...Build and Send BLE Response NOW.
   3736                                sprintf( (char *)tempBffr2, "<STATUS>ST_DRIVER:%04x</STATUS>", DriverStatus );
   \   00003F20   0xF8BD 0x20E4      LDRH     R2,[SP, #+228]
   \   00003F24   0xF8DF 0x1D60      LDR.W    R1,??RoadBrd_ParseString_608
   \   00003F28   0xA80B             ADD      R0,SP,#+44
   \   00003F2A   0x.... 0x....      BL       sprintf
   3737                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003F2E   0xA80B             ADD      R0,SP,#+44
   \   00003F30   0x.... 0x....      BL       strlen
   \   00003F34   0xA90B             ADD      R1,SP,#+44
   \   00003F36   0x.... 0x....      BL       BGM111_Transmit
   3738                              }
   3739                              
   3740                              sprintf( (char *)tempBffr2, "Driver Status: %04x\r\n", DriverStatus );
   \                     ??RoadBrd_ParseString_607: (+1)
   \   00003F3A   0xF8BD 0x20E4      LDRH     R2,[SP, #+228]
   \   00003F3E   0xF8DF 0x1D4C      LDR.W    R1,??RoadBrd_ParseString_608+0x4
   \   00003F42   0xA80B             ADD      R0,SP,#+44
   \   00003F44   0x.... 0x....      BL       sprintf
   3741                              break;
   \   00003F48   0xF000 0xBE3B      B.W      ??RoadBrd_ParseString_289
   \                     ??RoadBrd_ParseString_537:
   \   00003F4C   0x........         DC32     ?_240
   3742          //++++++++++++++++++++++++++++++++++++++++++  RESET Micro.
   3743                            case 'R':
   3744                              // RESET
   3745                              // Is this a BLE Operation?
   3746                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_298: (+1)
   \   00003F50   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003F52   0x2D00             CMP      R5,#+0
   \   00003F54   0xD00D             BEQ.N    ??RoadBrd_ParseString_609
   3747                              {
   3748                                // Yes...Build and Send BLE Response NOW.
   3749                                strcpy( (char *)tempBffr2, "<STATUS>ST_RESET_ACK</STATUS>");
   \   00003F56   0xF8DF 0x1D38      LDR.W    R1,??RoadBrd_ParseString_608+0x8
   \   00003F5A   0xA80B             ADD      R0,SP,#+44
   \   00003F5C   0x.... 0x....      BL       strcpy
   3750                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003F60   0xA80B             ADD      R0,SP,#+44
   \   00003F62   0x.... 0x....      BL       strlen
   \   00003F66   0xA90B             ADD      R1,SP,#+44
   \   00003F68   0x.... 0x....      BL       BGM111_Transmit
   3751                                HAL_Delay(100);           // Wait 100ms
   \   00003F6C   0x2064             MOVS     R0,#+100
   \   00003F6E   0x.... 0x....      BL       HAL_Delay
   3752                              }
   3753                              HAL_NVIC_SystemReset();
   \                     ??RoadBrd_ParseString_609: (+1)
   \   00003F72   0x.... 0x....      BL       HAL_NVIC_SystemReset
   3754                              sprintf( (char *)tempBffr2, "RESET CALLED BUT NO RESPONSE!!\r\n" );
   \   00003F76   0xF8DF 0x1D4C      LDR.W    R1,??RoadBrd_ParseString_610
   \   00003F7A   0xA80B             ADD      R0,SP,#+44
   \   00003F7C   0x.... 0x....      BL       sprintf
   3755                              break;
   \   00003F80   0xF000 0xBE1F      B.W      ??RoadBrd_ParseString_289
   \                     ??RoadBrd_ParseString_538:
   \   00003F84   0x........         DC32     ?_241
   3756          //++++++++++++++++++++++++++++++++++++++++++  Key Flash Variable Commands.
   3757                            case 'K':
   3758                              // Key Flash Variable Commands.
   3759                              // Test Size to make sure we have enough Characters for this operation
   3760                              Status = HAL_OK;
   \                     ??RoadBrd_ParseString_295: (+1)
   \   00003F88   0x2000             MOVS     R0,#+0
   \   00003F8A   0x0006             MOVS     R6,R0
   3761                              if (Size < 4)
   \   00003F8C   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   00003F90   0x2804             CMP      R0,#+4
   \   00003F92   0xDA15             BGE.N    ??RoadBrd_ParseString_611
   3762                              {
   3763                                // Is this a BLE Operation?
   3764                                if ( BLE_Flag )
   \   00003F94   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003F96   0x2D00             CMP      R5,#+0
   \   00003F98   0xD00A             BEQ.N    ??RoadBrd_ParseString_612
   3765                                {
   3766                                  // Yes...Build and Send BLE Response NOW.
   3767                                  strcpy( (char *)tempBffr2, "<STATUS>CMD_TK_SYNTAX</STATUS>");
   \   00003F9A   0xF8DF 0x1D58      LDR.W    R1,??RoadBrd_ParseString_613
   \   00003F9E   0xA80B             ADD      R0,SP,#+44
   \   00003FA0   0x.... 0x....      BL       strcpy
   3768                                  BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003FA4   0xA80B             ADD      R0,SP,#+44
   \   00003FA6   0x.... 0x....      BL       strlen
   \   00003FAA   0xA90B             ADD      R1,SP,#+44
   \   00003FAC   0x.... 0x....      BL       BGM111_Transmit
   3769                                }
   3770                                strcpy( (char *)tempBffr2, "TK SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_612: (+1)
   \   00003FB0   0xF8DF 0x1D44      LDR.W    R1,??RoadBrd_ParseString_613+0x4
   \   00003FB4   0xA80B             ADD      R0,SP,#+44
   \   00003FB6   0x.... 0x....      BL       strcpy
   \   00003FBA   0xE380             B.N      ??RoadBrd_ParseString_614
   \                     ??RoadBrd_ParseString_540:
   \   00003FBC   0x........         DC32     ?_242
   3771                              }
   3772                              else
   3773                              {
   3774                                switch( tempBffr[2] )
   \                     ??RoadBrd_ParseString_611: (+1)
   \   00003FC0   0x78A0             LDRB     R0,[R4, #+2]
   \   00003FC2   0x2852             CMP      R0,#+82
   \   00003FC4   0xF000 0x8296      BEQ.W    ??RoadBrd_ParseString_615
   \   00003FC8   0x2853             CMP      R0,#+83
   \   00003FCA   0xF040 0x8365      BNE.W    ??RoadBrd_ParseString_616
   3775                                {
   3776          //------------------
   3777                                  case 'S':
   3778                                    //Key Flash Variable Set Command.
   3779                                    switch( tempBffr[3] )
   \                     ??RoadBrd_ParseString_617: (+1)
   \   00003FCE   0x78E0             LDRB     R0,[R4, #+3]
   \   00003FD0   0x2842             CMP      R0,#+66
   \   00003FD2   0xF000 0x81A8      BEQ.W    ??RoadBrd_ParseString_618
   \   00003FD6   0x2852             CMP      R0,#+82
   \   00003FD8   0xD009             BEQ.N    ??RoadBrd_ParseString_619
   \   00003FDA   0x2853             CMP      R0,#+83
   \   00003FDC   0xF000 0x8091      BEQ.W    ??RoadBrd_ParseString_620
   \   00003FE0   0x2854             CMP      R0,#+84
   \   00003FE2   0xF000 0x8116      BEQ.W    ??RoadBrd_ParseString_621
   \   00003FE6   0x2856             CMP      R0,#+86
   \   00003FE8   0xF000 0x8227      BEQ.W    ??RoadBrd_ParseString_622
   \   00003FEC   0xE27C             B.N      ??RoadBrd_ParseString_623
   3780                                    {
   3781          //------------------
   3782                                      case 'R':
   3783                                        //Key Flash Variable Set Road Sound Sample Rate Command.
   3784                                        // Step 1. Validate format.
   3785                                        if(tempBffr[4]!=':')
   \                     ??RoadBrd_ParseString_619: (+1)
   \   00003FEE   0x7920             LDRB     R0,[R4, #+4]
   \   00003FF0   0x283A             CMP      R0,#+58
   \   00003FF2   0xD019             BEQ.N    ??RoadBrd_ParseString_624
   3786                                        {
   3787                                          // Is this a BLE Operation?
   3788                                          if ( BLE_Flag )
   \   00003FF4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003FF6   0x2D00             CMP      R5,#+0
   \   00003FF8   0xD00A             BEQ.N    ??RoadBrd_ParseString_625
   3789                                          {
   3790                                            // Yes...Build and Send BLE Response NOW.
   3791                                            strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSR_SYNTAX</STATUS>");
   \   00003FFA   0x.... 0x....      LDR.W    R1,??DataTable4
   \   00003FFE   0xA80B             ADD      R0,SP,#+44
   \   00004000   0x.... 0x....      BL       strcpy
   3792                                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004004   0xA80B             ADD      R0,SP,#+44
   \   00004006   0x.... 0x....      BL       strlen
   \   0000400A   0xA90B             ADD      R1,SP,#+44
   \   0000400C   0x.... 0x....      BL       BGM111_Transmit
   3793                                          }
   3794                                          strcpy( (char *)tempBffr2, "TKSR SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_625: (+1)
   \   00004010   0x.... 0x....      LDR.W    R1,??DataTable4_1
   \   00004014   0xA80B             ADD      R0,SP,#+44
   \   00004016   0x.... 0x....      BL       strcpy
   \   0000401A   0xE071             B.N      ??RoadBrd_ParseString_626
   \                     ??RoadBrd_ParseString_541:
   \   0000401C   0x........         DC32     ?_243
   \   00004020   0x........         DC32     ?_244
   \   00004024   0x........         DC32     ?_245
   3795                                        } // Endif (tempBffr[4]!=':')
   3796                                        else
   3797                                        {
   3798                                          // 2. Verify if remaining string is digits
   3799                                          if (Size > 5)
   \                     ??RoadBrd_ParseString_624: (+1)
   \   00004028   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   0000402C   0x2806             CMP      R0,#+6
   \   0000402E   0xDB10             BLT.N    ??RoadBrd_ParseString_627
   3800                                          {
   3801                                            flag = 1;
   \   00004030   0x2001             MOVS     R0,#+1
   \   00004032   0x902E             STR      R0,[SP, #+184]
   3802                                            for (x=5; x< Size; x++)
   \   00004034   0x2005             MOVS     R0,#+5
   \   00004036   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_628: (+1)
   \   00004038   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   0000403C   0x4287             CMP      R7,R0
   \   0000403E   0xDA0A             BGE.N    ??RoadBrd_ParseString_629
   3803                                            {
   3804                                              if (isdigit(tempBffr[x]) == 0)
   \   00004040   0x5DE0             LDRB     R0,[R4, R7]
   \   00004042   0x.... 0x....      BL       isdigit
   \   00004046   0x2800             CMP      R0,#+0
   \   00004048   0xD101             BNE.N    ??RoadBrd_ParseString_630
   3805                                                flag = 0;
   \   0000404A   0x2000             MOVS     R0,#+0
   \   0000404C   0x902E             STR      R0,[SP, #+184]
   3806                                            }
   \                     ??RoadBrd_ParseString_630: (+1)
   \   0000404E   0x1C7F             ADDS     R7,R7,#+1
   \   00004050   0xE7F2             B.N      ??RoadBrd_ParseString_628
   3807                                          } // EndIf (Size > 5)
   3808                                          else
   3809                                            flag = 0;
   \                     ??RoadBrd_ParseString_627: (+1)
   \   00004052   0x2000             MOVS     R0,#+0
   \   00004054   0x902E             STR      R0,[SP, #+184]
   3810                                          if (flag == 0)
   \                     ??RoadBrd_ParseString_629: (+1)
   \   00004056   0x982E             LDR      R0,[SP, #+184]
   \   00004058   0x2800             CMP      R0,#+0
   \   0000405A   0xD113             BNE.N    ??RoadBrd_ParseString_631
   3811                                          {
   3812                                            // Is this a BLE Operation?
   3813                                            if ( BLE_Flag )
   \   0000405C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000405E   0x2D00             CMP      R5,#+0
   \   00004060   0xD00A             BEQ.N    ??RoadBrd_ParseString_632
   3814                                            {
   3815                                              // Yes...Build and Send BLE Response NOW.
   3816                                              strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSR_BADPARAM</STATUS>");
   \   00004062   0x.... 0x....      LDR.W    R1,??DataTable4_2
   \   00004066   0xA80B             ADD      R0,SP,#+44
   \   00004068   0x.... 0x....      BL       strcpy
   3817                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000406C   0xA80B             ADD      R0,SP,#+44
   \   0000406E   0x.... 0x....      BL       strlen
   \   00004072   0xA90B             ADD      R1,SP,#+44
   \   00004074   0x.... 0x....      BL       BGM111_Transmit
   3818                                            }
   3819                                            strcpy( (char *)tempBffr2, "TKSR SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_632: (+1)
   \   00004078   0x.... 0x....      LDR.W    R1,??DataTable4_3
   \   0000407C   0xA80B             ADD      R0,SP,#+44
   \   0000407E   0x.... 0x....      BL       strcpy
   \   00004082   0xE03D             B.N      ??RoadBrd_ParseString_626
   3820                                          }
   3821                                          else
   3822                                          {
   3823                                            // 3. Grab remaining string and convert to integer.
   3824                                            tempPstr = &tempBffr[5];
   \                     ??RoadBrd_ParseString_631: (+1)
   \   00004084   0x1D60             ADDS     R0,R4,#+5
   \   00004086   0x9030             STR      R0,[SP, #+192]
   3825                                            strcpy(tempstr, tempPstr);
   \   00004088   0x9930             LDR      R1,[SP, #+192]
   \   0000408A   0xA852             ADD      R0,SP,#+328
   \   0000408C   0x.... 0x....      BL       strcpy
   3826                                            new_value = atoi( tempstr );
   \   00004090   0xA852             ADD      R0,SP,#+328
   \   00004092   0x.... 0x....      BL       atoi
   \   00004096   0x902F             STR      R0,[SP, #+188]
   3827                                            if((new_value > 9999) ||
   3828                                               (new_value < 0))
   \   00004098   0x982F             LDR      R0,[SP, #+188]
   \   0000409A   0xF242 0x7110      MOVW     R1,#+10000
   \   0000409E   0x4288             CMP      R0,R1
   \   000040A0   0xDA02             BGE.N    ??RoadBrd_ParseString_633
   \   000040A2   0x982F             LDR      R0,[SP, #+188]
   \   000040A4   0x2800             CMP      R0,#+0
   \   000040A6   0xD515             BPL.N    ??RoadBrd_ParseString_634
   3829                                            {
   3830                                              // Is this a BLE Operation?
   3831                                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_633: (+1)
   \   000040A8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000040AA   0x2D00             CMP      R5,#+0
   \   000040AC   0xD00A             BEQ.N    ??RoadBrd_ParseString_635
   3832                                              {
   3833                                                // Yes...Build and Send BLE Response NOW.
   3834                                                strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSR_BADPARAM</STATUS>");
   \   000040AE   0x.... 0x....      LDR.W    R1,??DataTable4_2
   \   000040B2   0xA80B             ADD      R0,SP,#+44
   \   000040B4   0x.... 0x....      BL       strcpy
   3835                                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000040B8   0xA80B             ADD      R0,SP,#+44
   \   000040BA   0x.... 0x....      BL       strlen
   \   000040BE   0xA90B             ADD      R1,SP,#+44
   \   000040C0   0x.... 0x....      BL       BGM111_Transmit
   3836                                              }
   3837                                              strcpy( (char *)tempBffr2, "TKSR SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_635: (+1)
   \   000040C4   0x.... 0x....      LDR.W    R1,??DataTable4_3
   \   000040C8   0xA80B             ADD      R0,SP,#+44
   \   000040CA   0x.... 0x....      BL       strcpy
   \   000040CE   0xE017             B.N      ??RoadBrd_ParseString_626
   \                     ??RoadBrd_ParseString_544:
   \   000040D0   0x........         DC32     ?_246
   3838                                            }
   3839                                            else
   3840                                            {
   3841                                              // Time to set new Road Sound Sample Rate.
   3842                                              RoadBrd_Set_RdSndTickCnt( new_value );
   \                     ??RoadBrd_ParseString_634: (+1)
   \   000040D4   0x982F             LDR      R0,[SP, #+188]
   \   000040D6   0x.... 0x....      BL       RoadBrd_Set_RdSndTickCnt
   3843                                              // NOW, Build Data String..
   3844                                              // Is this a BLE Operation?
   3845                                              if ( BLE_Flag )
   \   000040DA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000040DC   0x2D00             CMP      R5,#+0
   \   000040DE   0xD00A             BEQ.N    ??RoadBrd_ParseString_636
   3846                                              {
   3847                                                // Yes...Build and Send BLE Response NOW.
   3848                                                strcpy( (char *)tempBffr2, "<STATUS>ST_TKSR_ACK</STATUS>");
   \   000040E0   0x.... 0x....      LDR.W    R1,??DataTable4_5
   \   000040E4   0xA80B             ADD      R0,SP,#+44
   \   000040E6   0x.... 0x....      BL       strcpy
   3849                                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000040EA   0xA80B             ADD      R0,SP,#+44
   \   000040EC   0x.... 0x....      BL       strlen
   \   000040F0   0xA90B             ADD      R1,SP,#+44
   \   000040F2   0x.... 0x....      BL       BGM111_Transmit
   3850                                              }
   3851                                              sprintf( (char *)tempBffr2, "COMPLETE" );
   \                     ??RoadBrd_ParseString_636: (+1)
   \   000040F6   0x.... 0x....      LDR.W    R1,??DataTable4_6
   \   000040FA   0xA80B             ADD      R0,SP,#+44
   \   000040FC   0x.... 0x....      BL       sprintf
   3852                                            } // EndElse ((new_value > 9999) || (new_value < 0))
   3853                                          } // EndElse (flag == 0)
   3854                                        } // EndElse (tempBffr[4]!=':')
   3855                                        break;
   \                     ??RoadBrd_ParseString_626: (+1)
   \   00004100   0xE1F7             B.N      ??RoadBrd_ParseString_637
   3856          //------------------
   3857                                      case 'S':
   3858                                        //Key Flash Variable Set Sensor Sample Rate Command.
   3859                                        // Step 1. Validate format.
   3860                                        if(tempBffr[4]!=':')
   \                     ??RoadBrd_ParseString_620: (+1)
   \   00004102   0x7920             LDRB     R0,[R4, #+4]
   \   00004104   0x283A             CMP      R0,#+58
   \   00004106   0xD019             BEQ.N    ??RoadBrd_ParseString_638
   3861                                        {
   3862                                          // Is this a BLE Operation?
   3863                                          if ( BLE_Flag )
   \   00004108   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000410A   0x2D00             CMP      R5,#+0
   \   0000410C   0xD00A             BEQ.N    ??RoadBrd_ParseString_639
   3864                                          {
   3865                                            // Yes...Build and Send BLE Response NOW.
   3866                                            strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSS_SYNTAX</STATUS>");
   \   0000410E   0x.... 0x....      LDR.W    R1,??DataTable4_8
   \   00004112   0xA80B             ADD      R0,SP,#+44
   \   00004114   0x.... 0x....      BL       strcpy
   3867                                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004118   0xA80B             ADD      R0,SP,#+44
   \   0000411A   0x.... 0x....      BL       strlen
   \   0000411E   0xA90B             ADD      R1,SP,#+44
   \   00004120   0x.... 0x....      BL       BGM111_Transmit
   3868                                          }
   3869                                          strcpy( (char *)tempBffr2, "TKSS SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_639: (+1)
   \   00004124   0x.... 0x....      LDR.W    R1,??DataTable4_9
   \   00004128   0xA80B             ADD      R0,SP,#+44
   \   0000412A   0x.... 0x....      BL       strcpy
   \   0000412E   0xE06F             B.N      ??RoadBrd_ParseString_640
   \                     ??RoadBrd_ParseString_545:
   \   00004130   0x........         DC32     ?_247
   \   00004134   0x........         DC32     ?_248
   \   00004138   0x........         DC32     ?_249
   3870                                        } // Endif (tempBffr[4]!=':')
   3871                                        else
   3872                                        {
   3873                                          // 2. Verify if remaining string is digits
   3874                                          if (Size > 5)
   \                     ??RoadBrd_ParseString_638: (+1)
   \   0000413C   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   00004140   0x2806             CMP      R0,#+6
   \   00004142   0xDB10             BLT.N    ??RoadBrd_ParseString_641
   3875                                          {
   3876                                            flag = 1;
   \   00004144   0x2001             MOVS     R0,#+1
   \   00004146   0x902E             STR      R0,[SP, #+184]
   3877                                            for (x=5; x< Size; x++)
   \   00004148   0x2005             MOVS     R0,#+5
   \   0000414A   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_642: (+1)
   \   0000414C   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   00004150   0x4287             CMP      R7,R0
   \   00004152   0xDA0A             BGE.N    ??RoadBrd_ParseString_643
   3878                                            {
   3879                                              if (isdigit(tempBffr[x]) == 0)
   \   00004154   0x5DE0             LDRB     R0,[R4, R7]
   \   00004156   0x.... 0x....      BL       isdigit
   \   0000415A   0x2800             CMP      R0,#+0
   \   0000415C   0xD101             BNE.N    ??RoadBrd_ParseString_644
   3880                                                flag = 0;
   \   0000415E   0x2000             MOVS     R0,#+0
   \   00004160   0x902E             STR      R0,[SP, #+184]
   3881                                            }
   \                     ??RoadBrd_ParseString_644: (+1)
   \   00004162   0x1C7F             ADDS     R7,R7,#+1
   \   00004164   0xE7F2             B.N      ??RoadBrd_ParseString_642
   3882                                          } // EndIf (Size > 5)
   3883                                          else
   3884                                            flag = 0;
   \                     ??RoadBrd_ParseString_641: (+1)
   \   00004166   0x2000             MOVS     R0,#+0
   \   00004168   0x902E             STR      R0,[SP, #+184]
   3885                                          if (flag == 0)
   \                     ??RoadBrd_ParseString_643: (+1)
   \   0000416A   0x982E             LDR      R0,[SP, #+184]
   \   0000416C   0x2800             CMP      R0,#+0
   \   0000416E   0xD113             BNE.N    ??RoadBrd_ParseString_645
   3886                                          {
   3887                                            // Is this a BLE Operation?
   3888                                            if ( BLE_Flag )
   \   00004170   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004172   0x2D00             CMP      R5,#+0
   \   00004174   0xD00A             BEQ.N    ??RoadBrd_ParseString_646
   3889                                            {
   3890                                              // Yes...Build and Send BLE Response NOW.
   3891                                              strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSS_BADPARAM</STATUS>");
   \   00004176   0x.... 0x....      LDR.W    R1,??DataTable4_10
   \   0000417A   0xA80B             ADD      R0,SP,#+44
   \   0000417C   0x.... 0x....      BL       strcpy
   3892                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004180   0xA80B             ADD      R0,SP,#+44
   \   00004182   0x.... 0x....      BL       strlen
   \   00004186   0xA90B             ADD      R1,SP,#+44
   \   00004188   0x.... 0x....      BL       BGM111_Transmit
   3893                                            }
   3894                                            strcpy( (char *)tempBffr2, "TKSS SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_646: (+1)
   \   0000418C   0x.... 0x....      LDR.W    R1,??DataTable4_11
   \   00004190   0xA80B             ADD      R0,SP,#+44
   \   00004192   0x.... 0x....      BL       strcpy
   \   00004196   0xE03B             B.N      ??RoadBrd_ParseString_640
   3895                                          }
   3896                                          else
   3897                                          {
   3898                                            // 3. Grab remaining string and convert to integer.
   3899                                            tempPstr = &tempBffr[5];
   \                     ??RoadBrd_ParseString_645: (+1)
   \   00004198   0x1D60             ADDS     R0,R4,#+5
   \   0000419A   0x9030             STR      R0,[SP, #+192]
   3900                                            strcpy(tempstr, tempPstr);
   \   0000419C   0x9930             LDR      R1,[SP, #+192]
   \   0000419E   0xA852             ADD      R0,SP,#+328
   \   000041A0   0x.... 0x....      BL       strcpy
   3901                                            new_value = atoi( tempstr );
   \   000041A4   0xA852             ADD      R0,SP,#+328
   \   000041A6   0x.... 0x....      BL       atoi
   \   000041AA   0x902F             STR      R0,[SP, #+188]
   3902                                            if((new_value > 9999) ||
   3903                                               (new_value < 0))
   \   000041AC   0x982F             LDR      R0,[SP, #+188]
   \   000041AE   0xF242 0x7110      MOVW     R1,#+10000
   \   000041B2   0x4288             CMP      R0,R1
   \   000041B4   0xDA02             BGE.N    ??RoadBrd_ParseString_647
   \   000041B6   0x982F             LDR      R0,[SP, #+188]
   \   000041B8   0x2800             CMP      R0,#+0
   \   000041BA   0xD513             BPL.N    ??RoadBrd_ParseString_648
   3904                                            {
   3905                                              // Is this a BLE Operation?
   3906                                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_647: (+1)
   \   000041BC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000041BE   0x2D00             CMP      R5,#+0
   \   000041C0   0xD00A             BEQ.N    ??RoadBrd_ParseString_649
   3907                                              {
   3908                                                // Yes...Build and Send BLE Response NOW.
   3909                                                strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSS_BADPARAM</STATUS>");
   \   000041C2   0x.... 0x....      LDR.W    R1,??DataTable4_10
   \   000041C6   0xA80B             ADD      R0,SP,#+44
   \   000041C8   0x.... 0x....      BL       strcpy
   3910                                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000041CC   0xA80B             ADD      R0,SP,#+44
   \   000041CE   0x.... 0x....      BL       strlen
   \   000041D2   0xA90B             ADD      R1,SP,#+44
   \   000041D4   0x.... 0x....      BL       BGM111_Transmit
   3911                                              }
   3912                                              strcpy( (char *)tempBffr2, "TKSS SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_649: (+1)
   \   000041D8   0x.... 0x....      LDR.W    R1,??DataTable4_11
   \   000041DC   0xA80B             ADD      R0,SP,#+44
   \   000041DE   0x.... 0x....      BL       strcpy
   \   000041E2   0xE015             B.N      ??RoadBrd_ParseString_640
   3913                                            }
   3914                                            else
   3915                                            {
   3916                                              // Time to set new Road Sound Sample Rate.
   3917                                              RoadBrd_Set_SnsrTickCnt( new_value );
   \                     ??RoadBrd_ParseString_648: (+1)
   \   000041E4   0x982F             LDR      R0,[SP, #+188]
   \   000041E6   0x.... 0x....      BL       RoadBrd_Set_SnsrTickCnt
   3918                                              // Is this a BLE Operation?
   3919                                              if ( BLE_Flag )
   \   000041EA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000041EC   0x2D00             CMP      R5,#+0
   \   000041EE   0xD00A             BEQ.N    ??RoadBrd_ParseString_650
   3920                                              {
   3921                                                // Yes...Build and Send BLE Response NOW.
   3922                                                strcpy( (char *)tempBffr2, "<STATUS>ST_TKSS_ACK</STATUS>");
   \   000041F0   0x.... 0x....      LDR.W    R1,??DataTable4_12
   \   000041F4   0xA80B             ADD      R0,SP,#+44
   \   000041F6   0x.... 0x....      BL       strcpy
   3923                                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000041FA   0xA80B             ADD      R0,SP,#+44
   \   000041FC   0x.... 0x....      BL       strlen
   \   00004200   0xA90B             ADD      R1,SP,#+44
   \   00004202   0x.... 0x....      BL       BGM111_Transmit
   3924                                              }
   3925                                              // NOW, Build Data String..
   3926                                              sprintf( (char *)tempBffr2, "COMPLETE" );
   \                     ??RoadBrd_ParseString_650: (+1)
   \   00004206   0x.... 0x....      LDR.W    R1,??DataTable4_6
   \   0000420A   0xA80B             ADD      R0,SP,#+44
   \   0000420C   0x.... 0x....      BL       sprintf
   3927                                            } // EndElse ((new_value > 9999) || (new_value < 0))
   3928                                          } // EndElse (flag == 0)
   3929                                        } // EndElse (tempBffr[4]!=':')
   3930                                        break;
   \                     ??RoadBrd_ParseString_640: (+1)
   \   00004210   0xE16F             B.N      ??RoadBrd_ParseString_637
   3931          //------------------
   3932                                      case 'T':
   3933                                        //Key Flash Variable Set TACK Limit(Multiple of Road Sound Throttles).
   3934                                        // Step 1. Validate format.
   3935                                        if(tempBffr[4]!=':')
   \                     ??RoadBrd_ParseString_621: (+1)
   \   00004212   0x7920             LDRB     R0,[R4, #+4]
   \   00004214   0x283A             CMP      R0,#+58
   \   00004216   0xD017             BEQ.N    ??RoadBrd_ParseString_651
   3936                                        {
   3937                                          // Is this a BLE Operation?
   3938                                          if ( BLE_Flag )
   \   00004218   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000421A   0x2D00             CMP      R5,#+0
   \   0000421C   0xD00A             BEQ.N    ??RoadBrd_ParseString_652
   3939                                          {
   3940                                            // Yes...Build and Send BLE Response NOW.
   3941                                            strcpy( (char *)tempBffr2, "<STATUS>CMD_TKST_SYNTAX</STATUS>");
   \   0000421E   0x.... 0x....      LDR.W    R1,??DataTable4_13
   \   00004222   0xA80B             ADD      R0,SP,#+44
   \   00004224   0x.... 0x....      BL       strcpy
   3942                                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004228   0xA80B             ADD      R0,SP,#+44
   \   0000422A   0x.... 0x....      BL       strlen
   \   0000422E   0xA90B             ADD      R1,SP,#+44
   \   00004230   0x.... 0x....      BL       BGM111_Transmit
   3943                                          }
   3944                                          strcpy( (char *)tempBffr2, "TKST SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_652: (+1)
   \   00004234   0x.... 0x....      LDR.W    R1,??DataTable4_14
   \   00004238   0xA80B             ADD      R0,SP,#+44
   \   0000423A   0x.... 0x....      BL       strcpy
   \   0000423E   0xE071             B.N      ??RoadBrd_ParseString_653
   \                     ??RoadBrd_ParseString_548:
   \   00004240   0x........         DC32     ?_250
   \   00004244   0x........         DC32     ?_251
   3945                                        } // Endif (tempBffr[4]!=':')
   3946                                        else
   3947                                        {
   3948                                          // 2. Verify if remaining string is digits
   3949                                          if (Size > 5)
   \                     ??RoadBrd_ParseString_651: (+1)
   \   00004248   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   0000424C   0x2806             CMP      R0,#+6
   \   0000424E   0xDB10             BLT.N    ??RoadBrd_ParseString_654
   3950                                          {
   3951                                            flag = 1;
   \   00004250   0x2001             MOVS     R0,#+1
   \   00004252   0x902E             STR      R0,[SP, #+184]
   3952                                            for (x=5; x< Size; x++)
   \   00004254   0x2005             MOVS     R0,#+5
   \   00004256   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_655: (+1)
   \   00004258   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   0000425C   0x4287             CMP      R7,R0
   \   0000425E   0xDA0A             BGE.N    ??RoadBrd_ParseString_656
   3953                                            {
   3954                                              if (isdigit(tempBffr[x]) == 0)
   \   00004260   0x5DE0             LDRB     R0,[R4, R7]
   \   00004262   0x.... 0x....      BL       isdigit
   \   00004266   0x2800             CMP      R0,#+0
   \   00004268   0xD101             BNE.N    ??RoadBrd_ParseString_657
   3955                                                flag = 0;
   \   0000426A   0x2000             MOVS     R0,#+0
   \   0000426C   0x902E             STR      R0,[SP, #+184]
   3956                                            }
   \                     ??RoadBrd_ParseString_657: (+1)
   \   0000426E   0x1C7F             ADDS     R7,R7,#+1
   \   00004270   0xE7F2             B.N      ??RoadBrd_ParseString_655
   3957                                          } // EndIf (Size > 5)
   3958                                          else
   3959                                            flag = 0;
   \                     ??RoadBrd_ParseString_654: (+1)
   \   00004272   0x2000             MOVS     R0,#+0
   \   00004274   0x902E             STR      R0,[SP, #+184]
   3960                                          if (flag == 0)
   \                     ??RoadBrd_ParseString_656: (+1)
   \   00004276   0x982E             LDR      R0,[SP, #+184]
   \   00004278   0x2800             CMP      R0,#+0
   \   0000427A   0xD115             BNE.N    ??RoadBrd_ParseString_658
   3961                                          {
   3962                                            // Is this a BLE Operation?
   3963                                            if ( BLE_Flag )
   \   0000427C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000427E   0x2D00             CMP      R5,#+0
   \   00004280   0xD00A             BEQ.N    ??RoadBrd_ParseString_659
   3964                                            {
   3965                                              // Yes...Build and Send BLE Response NOW.
   3966                                              strcpy( (char *)tempBffr2, "<STATUS>CMD_TKST_BADPARAM</STATUS>");
   \   00004282   0x.... 0x....      LDR.W    R1,??DataTable5
   \   00004286   0xA80B             ADD      R0,SP,#+44
   \   00004288   0x.... 0x....      BL       strcpy
   3967                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000428C   0xA80B             ADD      R0,SP,#+44
   \   0000428E   0x.... 0x....      BL       strlen
   \   00004292   0xA90B             ADD      R1,SP,#+44
   \   00004294   0x.... 0x....      BL       BGM111_Transmit
   3968                                            }
   3969                                            strcpy( (char *)tempBffr2, "TKST SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_659: (+1)
   \   00004298   0x.... 0x....      LDR.W    R1,??DataTable5_1
   \   0000429C   0xA80B             ADD      R0,SP,#+44
   \   0000429E   0x.... 0x....      BL       strcpy
   \   000042A2   0xE03F             B.N      ??RoadBrd_ParseString_653
   \                     ??RoadBrd_ParseString_550:
   \   000042A4   0x........         DC32     ?_252
   3970                                          }
   3971                                          else
   3972                                          {
   3973                                            // 3. Grab remaining string and convert to integer.
   3974                                            tempPstr = &tempBffr[5];
   \                     ??RoadBrd_ParseString_658: (+1)
   \   000042A8   0x1D60             ADDS     R0,R4,#+5
   \   000042AA   0x9030             STR      R0,[SP, #+192]
   3975                                            strcpy(tempstr, tempPstr);
   \   000042AC   0x9930             LDR      R1,[SP, #+192]
   \   000042AE   0xA852             ADD      R0,SP,#+328
   \   000042B0   0x.... 0x....      BL       strcpy
   3976                                            new_value = atoi( tempstr );
   \   000042B4   0xA852             ADD      R0,SP,#+328
   \   000042B6   0x.... 0x....      BL       atoi
   \   000042BA   0x902F             STR      R0,[SP, #+188]
   3977                                            if((new_value > 9999) ||
   3978                                               (new_value < 0))
   \   000042BC   0x982F             LDR      R0,[SP, #+188]
   \   000042BE   0xF242 0x7110      MOVW     R1,#+10000
   \   000042C2   0x4288             CMP      R0,R1
   \   000042C4   0xDA02             BGE.N    ??RoadBrd_ParseString_660
   \   000042C6   0x982F             LDR      R0,[SP, #+188]
   \   000042C8   0x2800             CMP      R0,#+0
   \   000042CA   0xD515             BPL.N    ??RoadBrd_ParseString_661
   3979                                            {
   3980                                              // Is this a BLE Operation?
   3981                                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_660: (+1)
   \   000042CC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000042CE   0x2D00             CMP      R5,#+0
   \   000042D0   0xD00A             BEQ.N    ??RoadBrd_ParseString_662
   3982                                              {
   3983                                                // Yes...Build and Send BLE Response NOW.
   3984                                                strcpy( (char *)tempBffr2, "<STATUS>CMD_TKST_BADPARAM</STATUS>");
   \   000042D2   0x.... 0x....      LDR.W    R1,??DataTable5
   \   000042D6   0xA80B             ADD      R0,SP,#+44
   \   000042D8   0x.... 0x....      BL       strcpy
   3985                                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000042DC   0xA80B             ADD      R0,SP,#+44
   \   000042DE   0x.... 0x....      BL       strlen
   \   000042E2   0xA90B             ADD      R1,SP,#+44
   \   000042E4   0x.... 0x....      BL       BGM111_Transmit
   3986                                              }
   3987                                              strcpy( (char *)tempBffr2, "TKSS SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_662: (+1)
   \   000042E8   0x.... 0x....      LDR.W    R1,??DataTable4_11
   \   000042EC   0xA80B             ADD      R0,SP,#+44
   \   000042EE   0x.... 0x....      BL       strcpy
   \   000042F2   0xE017             B.N      ??RoadBrd_ParseString_653
   \                     ??RoadBrd_ParseString_551:
   \   000042F4   0x........         DC32     ?_253
   3988                                            }
   3989                                            else
   3990                                            {
   3991                                              // Time to set new TACK Limit.
   3992                                              RoadBrd_Set_TackLimit( new_value );
   \                     ??RoadBrd_ParseString_661: (+1)
   \   000042F8   0x982F             LDR      R0,[SP, #+188]
   \   000042FA   0x.... 0x....      BL       RoadBrd_Set_TackLimit
   3993                                              // Is this a BLE Operation?
   3994                                              if ( BLE_Flag )
   \   000042FE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004300   0x2D00             CMP      R5,#+0
   \   00004302   0xD00A             BEQ.N    ??RoadBrd_ParseString_663
   3995                                              {
   3996                                                // Yes...Build and Send BLE Response NOW.
   3997                                                strcpy( (char *)tempBffr2, "<STATUS>ST_TKST_ACK</STATUS>");
   \   00004304   0x.... 0x....      LDR.W    R1,??DataTable5_2
   \   00004308   0xA80B             ADD      R0,SP,#+44
   \   0000430A   0x.... 0x....      BL       strcpy
   3998                                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000430E   0xA80B             ADD      R0,SP,#+44
   \   00004310   0x.... 0x....      BL       strlen
   \   00004314   0xA90B             ADD      R1,SP,#+44
   \   00004316   0x.... 0x....      BL       BGM111_Transmit
   3999                                              }
   4000                                              // NOW, Build Data String..
   4001                                              sprintf( (char *)tempBffr2, "COMPLETE" );
   \                     ??RoadBrd_ParseString_663: (+1)
   \   0000431A   0x.... 0x....      LDR.W    R1,??DataTable4_6
   \   0000431E   0xA80B             ADD      R0,SP,#+44
   \   00004320   0x.... 0x....      BL       sprintf
   4002                                            } // EndElse ((new_value > 9999) || (new_value < 0))
   4003                                          } // EndElse (flag == 0)
   4004                                        } // EndElse (tempBffr[4]!=':')
   4005                                        break;
   \                     ??RoadBrd_ParseString_653: (+1)
   \   00004324   0xE0E5             B.N      ??RoadBrd_ParseString_637
   4006          //------------------
   4007                                      case 'B':
   4008                                        //Key Flash Variable Set Boot Delay(Seconds).
   4009                                        // Step 1. Validate format.
   4010                                        if(tempBffr[4]!=':')
   \                     ??RoadBrd_ParseString_618: (+1)
   \   00004326   0x7920             LDRB     R0,[R4, #+4]
   \   00004328   0x283A             CMP      R0,#+58
   \   0000432A   0xD017             BEQ.N    ??RoadBrd_ParseString_664
   4011                                        {
   4012                                          // Is this a BLE Operation?
   4013                                          if ( BLE_Flag )
   \   0000432C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000432E   0x2D00             CMP      R5,#+0
   \   00004330   0xD00A             BEQ.N    ??RoadBrd_ParseString_665
   4014                                          {
   4015                                            // Yes...Build and Send BLE Response NOW.
   4016                                            strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSB_SYNTAX</STATUS>");
   \   00004332   0x.... 0x....      LDR.W    R1,??DataTable5_3
   \   00004336   0xA80B             ADD      R0,SP,#+44
   \   00004338   0x.... 0x....      BL       strcpy
   4017                                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000433C   0xA80B             ADD      R0,SP,#+44
   \   0000433E   0x.... 0x....      BL       strlen
   \   00004342   0xA90B             ADD      R1,SP,#+44
   \   00004344   0x.... 0x....      BL       BGM111_Transmit
   4018                                          }
   4019                                          strcpy( (char *)tempBffr2, "TKSB SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_665: (+1)
   \   00004348   0x.... 0x....      LDR.W    R1,??DataTable5_4
   \   0000434C   0xA80B             ADD      R0,SP,#+44
   \   0000434E   0x.... 0x....      BL       strcpy
   \   00004352   0xE071             B.N      ??RoadBrd_ParseString_666
   \                     ??RoadBrd_ParseString_553:
   \   00004354   0x........         DC32     ?_254
   \   00004358   0x........         DC32     ?_255
   4020                                        } // Endif (tempBffr[4]!=':')
   4021                                        else
   4022                                        {
   4023                                          // 2. Verify if remaining string is digits
   4024                                          if (Size > 5)
   \                     ??RoadBrd_ParseString_664: (+1)
   \   0000435C   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   00004360   0x2806             CMP      R0,#+6
   \   00004362   0xDB10             BLT.N    ??RoadBrd_ParseString_667
   4025                                          {
   4026                                            flag = 1;
   \   00004364   0x2001             MOVS     R0,#+1
   \   00004366   0x902E             STR      R0,[SP, #+184]
   4027                                            for (x=5; x< Size; x++)
   \   00004368   0x2005             MOVS     R0,#+5
   \   0000436A   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_668: (+1)
   \   0000436C   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   00004370   0x4287             CMP      R7,R0
   \   00004372   0xDA0A             BGE.N    ??RoadBrd_ParseString_669
   4028                                            {
   4029                                              if (isdigit(tempBffr[x]) == 0)
   \   00004374   0x5DE0             LDRB     R0,[R4, R7]
   \   00004376   0x.... 0x....      BL       isdigit
   \   0000437A   0x2800             CMP      R0,#+0
   \   0000437C   0xD101             BNE.N    ??RoadBrd_ParseString_670
   4030                                                flag = 0;
   \   0000437E   0x2000             MOVS     R0,#+0
   \   00004380   0x902E             STR      R0,[SP, #+184]
   4031                                            }
   \                     ??RoadBrd_ParseString_670: (+1)
   \   00004382   0x1C7F             ADDS     R7,R7,#+1
   \   00004384   0xE7F2             B.N      ??RoadBrd_ParseString_668
   4032                                          } // EndIf (Size > 5)
   4033                                          else
   4034                                            flag = 0;
   \                     ??RoadBrd_ParseString_667: (+1)
   \   00004386   0x2000             MOVS     R0,#+0
   \   00004388   0x902E             STR      R0,[SP, #+184]
   4035                                          if (flag == 0)
   \                     ??RoadBrd_ParseString_669: (+1)
   \   0000438A   0x982E             LDR      R0,[SP, #+184]
   \   0000438C   0x2800             CMP      R0,#+0
   \   0000438E   0xD113             BNE.N    ??RoadBrd_ParseString_671
   4036                                          {
   4037                                            // Is this a BLE Operation?
   4038                                            if ( BLE_Flag )
   \   00004390   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004392   0x2D00             CMP      R5,#+0
   \   00004394   0xD00A             BEQ.N    ??RoadBrd_ParseString_672
   4039                                            {
   4040                                              // Yes...Build and Send BLE Response NOW.
   4041                                              strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSB_BADPARAM</STATUS>");
   \   00004396   0x.... 0x....      LDR.W    R1,??DataTable5_5
   \   0000439A   0xA80B             ADD      R0,SP,#+44
   \   0000439C   0x.... 0x....      BL       strcpy
   4042                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000043A0   0xA80B             ADD      R0,SP,#+44
   \   000043A2   0x.... 0x....      BL       strlen
   \   000043A6   0xA90B             ADD      R1,SP,#+44
   \   000043A8   0x.... 0x....      BL       BGM111_Transmit
   4043                                            }
   4044                                            strcpy( (char *)tempBffr2, "TKSB SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_672: (+1)
   \   000043AC   0x.... 0x....      LDR.W    R1,??DataTable5_6
   \   000043B0   0xA80B             ADD      R0,SP,#+44
   \   000043B2   0x.... 0x....      BL       strcpy
   \   000043B6   0xE03F             B.N      ??RoadBrd_ParseString_666
   4045                                          }
   4046                                          else
   4047                                          {
   4048                                            // 3. Grab remaining string and convert to integer.
   4049                                            tempPstr = &tempBffr[5];
   \                     ??RoadBrd_ParseString_671: (+1)
   \   000043B8   0x1D60             ADDS     R0,R4,#+5
   \   000043BA   0x9030             STR      R0,[SP, #+192]
   4050                                            strcpy(tempstr, tempPstr);
   \   000043BC   0x9930             LDR      R1,[SP, #+192]
   \   000043BE   0xA852             ADD      R0,SP,#+328
   \   000043C0   0x.... 0x....      BL       strcpy
   4051                                            new_value = atoi( tempstr );
   \   000043C4   0xA852             ADD      R0,SP,#+328
   \   000043C6   0x.... 0x....      BL       atoi
   \   000043CA   0x902F             STR      R0,[SP, #+188]
   4052                                            if((new_value > 999) ||
   4053                                               (new_value < 0))
   \   000043CC   0x982F             LDR      R0,[SP, #+188]
   \   000043CE   0xF5B0 0x7F7A      CMP      R0,#+1000
   \   000043D2   0xDA02             BGE.N    ??RoadBrd_ParseString_673
   \   000043D4   0x982F             LDR      R0,[SP, #+188]
   \   000043D6   0x2800             CMP      R0,#+0
   \   000043D8   0xD518             BPL.N    ??RoadBrd_ParseString_674
   4054                                            {
   4055                                              // Is this a BLE Operation?
   4056                                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_673: (+1)
   \   000043DA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000043DC   0x2D00             CMP      R5,#+0
   \   000043DE   0xD00A             BEQ.N    ??RoadBrd_ParseString_675
   4057                                              {
   4058                                                // Yes...Build and Send BLE Response NOW.
   4059                                                strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSB_BADPARAM</STATUS>");
   \   000043E0   0x.... 0x....      LDR.W    R1,??DataTable5_5
   \   000043E4   0xA80B             ADD      R0,SP,#+44
   \   000043E6   0x.... 0x....      BL       strcpy
   4060                                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000043EA   0xA80B             ADD      R0,SP,#+44
   \   000043EC   0x.... 0x....      BL       strlen
   \   000043F0   0xA90B             ADD      R1,SP,#+44
   \   000043F2   0x.... 0x....      BL       BGM111_Transmit
   4061                                              }
   4062                                              strcpy( (char *)tempBffr2, "TKSB SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_675: (+1)
   \   000043F6   0x.... 0x....      LDR.W    R1,??DataTable5_6
   \   000043FA   0xA80B             ADD      R0,SP,#+44
   \   000043FC   0x.... 0x....      BL       strcpy
   \   00004400   0xE01A             B.N      ??RoadBrd_ParseString_666
   \   00004402   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_555:
   \   00004404   0x........         DC32     ?_256
   \   00004408   0x........         DC32     ?_257
   4063                                            }
   4064                                            else
   4065                                            {
   4066                                              // Time to set new Boot Delay.
   4067                                              RoadBrd_Set_BootDelay( new_value );
   \                     ??RoadBrd_ParseString_674: (+1)
   \   0000440C   0x982F             LDR      R0,[SP, #+188]
   \   0000440E   0x.... 0x....      BL       RoadBrd_Set_BootDelay
   4068                                              // Is this a BLE Operation?
   4069                                              if ( BLE_Flag )
   \   00004412   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004414   0x2D00             CMP      R5,#+0
   \   00004416   0xD00A             BEQ.N    ??RoadBrd_ParseString_676
   4070                                              {
   4071                                                // Yes...Build and Send BLE Response NOW.
   4072                                                strcpy( (char *)tempBffr2, "<STATUS>ST_TKSB_ACK</STATUS>");
   \   00004418   0x.... 0x....      LDR.W    R1,??DataTable5_7
   \   0000441C   0xA80B             ADD      R0,SP,#+44
   \   0000441E   0x.... 0x....      BL       strcpy
   4073                                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004422   0xA80B             ADD      R0,SP,#+44
   \   00004424   0x.... 0x....      BL       strlen
   \   00004428   0xA90B             ADD      R1,SP,#+44
   \   0000442A   0x.... 0x....      BL       BGM111_Transmit
   4074                                              }
   4075                                              // NOW, Build Data String..
   4076                                              sprintf( (char *)tempBffr2, "COMPLETE" );
   \                     ??RoadBrd_ParseString_676: (+1)
   \   0000442E   0x.... 0x....      LDR.W    R1,??DataTable4_6
   \   00004432   0xA80B             ADD      R0,SP,#+44
   \   00004434   0x.... 0x....      BL       sprintf
   4077                                            } // EndElse ((new_value > 999) || (new_value < 0))
   4078                                          } // EndElse (flag == 0)
   4079                                        } // EndElse (tempBffr[4]!=':')
   4080                                        break;
   \                     ??RoadBrd_ParseString_666: (+1)
   \   00004438   0xE05B             B.N      ??RoadBrd_ParseString_637
   4081          //------------------
   4082                                      case 'V':
   4083                                        //Key Flash Variable Set Version String.
   4084                                        // Step 1. Validate format.
   4085                                        if(tempBffr[4]!=':')
   \                     ??RoadBrd_ParseString_622: (+1)
   \   0000443A   0x7920             LDRB     R0,[R4, #+4]
   \   0000443C   0x283A             CMP      R0,#+58
   \   0000443E   0xD015             BEQ.N    ??RoadBrd_ParseString_677
   4086                                        {
   4087                                          // Is this a BLE Operation?
   4088                                          if ( BLE_Flag )
   \   00004440   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004442   0x2D00             CMP      R5,#+0
   \   00004444   0xD00A             BEQ.N    ??RoadBrd_ParseString_678
   4089                                          {
   4090                                            // Yes...Build and Send BLE Response NOW.
   4091                                            strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSV_SYNTAX</STATUS>");
   \   00004446   0x.... 0x....      LDR.W    R1,??DataTable5_8
   \   0000444A   0xA80B             ADD      R0,SP,#+44
   \   0000444C   0x.... 0x....      BL       strcpy
   4092                                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004450   0xA80B             ADD      R0,SP,#+44
   \   00004452   0x.... 0x....      BL       strlen
   \   00004456   0xA90B             ADD      R1,SP,#+44
   \   00004458   0x.... 0x....      BL       BGM111_Transmit
   4093                                          }
   4094                                          strcpy( (char *)tempBffr2, "TKSV SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_678: (+1)
   \   0000445C   0x.... 0x....      LDR.W    R1,??DataTable5_9
   \   00004460   0xA80B             ADD      R0,SP,#+44
   \   00004462   0x.... 0x....      BL       strcpy
   \   00004466   0xE039             B.N      ??RoadBrd_ParseString_679
   \                     ??RoadBrd_ParseString_557:
   \   00004468   0x........         DC32     ?_258
   4095                                        } // Endif (tempBffr[4]!=':')
   4096                                        else
   4097                                        {
   4098                                          // 2. Verify if remaining string is digits
   4099                                          if (Size > 5)
   \                     ??RoadBrd_ParseString_677: (+1)
   \   0000446C   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   00004470   0x2806             CMP      R0,#+6
   \   00004472   0xDB02             BLT.N    ??RoadBrd_ParseString_680
   4100                                          {
   4101                                            flag = 1;
   \   00004474   0x2001             MOVS     R0,#+1
   \   00004476   0x902E             STR      R0,[SP, #+184]
   \   00004478   0xE001             B.N      ??RoadBrd_ParseString_681
   4102                                          } // EndIf (Size > 5)
   4103                                          else
   4104                                            flag = 0;
   \                     ??RoadBrd_ParseString_680: (+1)
   \   0000447A   0x2000             MOVS     R0,#+0
   \   0000447C   0x902E             STR      R0,[SP, #+184]
   4105                                          if (flag == 0)
   \                     ??RoadBrd_ParseString_681: (+1)
   \   0000447E   0x982E             LDR      R0,[SP, #+184]
   \   00004480   0x2800             CMP      R0,#+0
   \   00004482   0xD113             BNE.N    ??RoadBrd_ParseString_682
   4106                                          {
   4107                                            // Is this a BLE Operation?
   4108                                            if ( BLE_Flag )
   \   00004484   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004486   0x2D00             CMP      R5,#+0
   \   00004488   0xD00A             BEQ.N    ??RoadBrd_ParseString_683
   4109                                            {
   4110                                              // Yes...Build and Send BLE Response NOW.
   4111                                              strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSV_BADPARAM</STATUS>");
   \   0000448A   0x.... 0x....      LDR.W    R1,??DataTable5_10
   \   0000448E   0xA80B             ADD      R0,SP,#+44
   \   00004490   0x.... 0x....      BL       strcpy
   4112                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004494   0xA80B             ADD      R0,SP,#+44
   \   00004496   0x.... 0x....      BL       strlen
   \   0000449A   0xA90B             ADD      R1,SP,#+44
   \   0000449C   0x.... 0x....      BL       BGM111_Transmit
   4113                                            }
   4114                                            strcpy( (char *)tempBffr2, "TKSV SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_683: (+1)
   \   000044A0   0x.... 0x....      LDR.W    R1,??DataTable5_11
   \   000044A4   0xA80B             ADD      R0,SP,#+44
   \   000044A6   0x.... 0x....      BL       strcpy
   \   000044AA   0xE017             B.N      ??RoadBrd_ParseString_679
   4115                                          }
   4116                                          else
   4117                                          {
   4118                                            // 3. Grab remaining string and convert to integer.
   4119                                            tempPstr = &tempBffr[5];
   \                     ??RoadBrd_ParseString_682: (+1)
   \   000044AC   0x1D60             ADDS     R0,R4,#+5
   \   000044AE   0x9030             STR      R0,[SP, #+192]
   4120                                            // Time to set new Version String.
   4121                                            RoadBrd_Set_VersionString( tempPstr );
   \   000044B0   0x9830             LDR      R0,[SP, #+192]
   \   000044B2   0x.... 0x....      BL       RoadBrd_Set_VersionString
   4122                                            // Is this a BLE Operation?
   4123                                            if ( BLE_Flag )
   \   000044B6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000044B8   0x2D00             CMP      R5,#+0
   \   000044BA   0xD00A             BEQ.N    ??RoadBrd_ParseString_684
   4124                                            {
   4125                                              // Yes...Build and Send BLE Response NOW.
   4126                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TKSV_ACK</STATUS>");
   \   000044BC   0x.... 0x....      LDR.W    R1,??DataTable5_12
   \   000044C0   0xA80B             ADD      R0,SP,#+44
   \   000044C2   0x.... 0x....      BL       strcpy
   4127                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000044C6   0xA80B             ADD      R0,SP,#+44
   \   000044C8   0x.... 0x....      BL       strlen
   \   000044CC   0xA90B             ADD      R1,SP,#+44
   \   000044CE   0x.... 0x....      BL       BGM111_Transmit
   4128                                            }
   4129                                            // NOW, Build Data String..
   4130                                            sprintf( (char *)tempBffr2, "COMPLETE" );
   \                     ??RoadBrd_ParseString_684: (+1)
   \   000044D2   0x.... 0x....      LDR.W    R1,??DataTable4_6
   \   000044D6   0xA80B             ADD      R0,SP,#+44
   \   000044D8   0x.... 0x....      BL       sprintf
   4131                                          } // EndElse (flag == 0)
   4132                                        } // EndElse (tempBffr[4]!=':')
   4133                                        break;
   \                     ??RoadBrd_ParseString_679: (+1)
   \   000044DC   0xE009             B.N      ??RoadBrd_ParseString_637
   \   000044DE   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_558:
   \   000044E0   0x........         DC32     ?_259
   \   000044E4   0x........         DC32     ?_260
   4134                                      default:
   4135                                        strcpy( (char *)tempBffr2, "TKS ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_623: (+1)
   \   000044E8   0x.... 0x....      LDR.W    R1,??DataTable5_13
   \   000044EC   0xA80B             ADD      R0,SP,#+44
   \   000044EE   0x.... 0x....      BL       strcpy
   4136                                        break;
   4137                                    } // EndSwitch ( tempBffr[3] )
   4138                                    break;
   \                     ??RoadBrd_ParseString_637: (+1)
   \   000044F2   0xE0E4             B.N      ??RoadBrd_ParseString_614
   4139          //------------------
   4140                                  case 'R':
   4141                                    //Key Flash Variable Read Command
   4142                                    switch( tempBffr[3] )
   \                     ??RoadBrd_ParseString_615: (+1)
   \   000044F4   0x78E0             LDRB     R0,[R4, #+3]
   \   000044F6   0x2842             CMP      R0,#+66
   \   000044F8   0xF000 0x8082      BEQ.W    ??RoadBrd_ParseString_685
   \   000044FC   0x2852             CMP      R0,#+82
   \   000044FE   0xD007             BEQ.N    ??RoadBrd_ParseString_686
   \   00004500   0x2853             CMP      R0,#+83
   \   00004502   0xD033             BEQ.N    ??RoadBrd_ParseString_687
   \   00004504   0x2854             CMP      R0,#+84
   \   00004506   0xD05F             BEQ.N    ??RoadBrd_ParseString_688
   \   00004508   0x2856             CMP      R0,#+86
   \   0000450A   0xF000 0x8095      BEQ.W    ??RoadBrd_ParseString_689
   \   0000450E   0xE0AD             B.N      ??RoadBrd_ParseString_690
   4143                                    {
   4144          //------------------
   4145                                      case 'R':
   4146                                        //Key Flash Variable Read Road Sound Sample Rate Command.
   4147                                        // Is this a BLE Operation?
   4148                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_686: (+1)
   \   00004510   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004512   0x2D00             CMP      R5,#+0
   \   00004514   0xD016             BEQ.N    ??RoadBrd_ParseString_691
   4149                                        {
   4150                                          // Yes...Build and Send BLE Response NOW.
   4151                                          sprintf( (char *)tempBffr2, "<STATUS>ST_TKRR:%3.1f</STATUS>", ((float)RoadBrd_Get_RdSndTickCnt()/10));
   \   00004516   0x.... 0x....      BL       RoadBrd_Get_RdSndTickCnt
   \   0000451A   0x.... 0x....      BL       __aeabi_ui2f
   \   0000451E   0x.... 0x....      LDR.W    R1,??DataTable5_14  ;; 0x41200000
   \   00004522   0x.... 0x....      BL       __aeabi_fdiv
   \   00004526   0x.... 0x....      BL       __aeabi_f2d
   \   0000452A   0x0002             MOVS     R2,R0
   \   0000452C   0x000B             MOVS     R3,R1
   \   0000452E   0x.... 0x....      LDR.W    R1,??DataTable5_15
   \   00004532   0xA80B             ADD      R0,SP,#+44
   \   00004534   0x.... 0x....      BL       sprintf
   4152                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004538   0xA80B             ADD      R0,SP,#+44
   \   0000453A   0x.... 0x....      BL       strlen
   \   0000453E   0xA90B             ADD      R1,SP,#+44
   \   00004540   0x.... 0x....      BL       BGM111_Transmit
   4153                                        }
   4154                                        sprintf( (char *)tempBffr2, "RdSnd Sample Rate:  %3.1f Seconds.\r\n", ((float)RoadBrd_Get_RdSndTickCnt()/10));
   \                     ??RoadBrd_ParseString_691: (+1)
   \   00004544   0x.... 0x....      BL       RoadBrd_Get_RdSndTickCnt
   \   00004548   0x.... 0x....      BL       __aeabi_ui2f
   \   0000454C   0x.... 0x....      LDR.W    R1,??DataTable5_14  ;; 0x41200000
   \   00004550   0x.... 0x....      BL       __aeabi_fdiv
   \   00004554   0x.... 0x....      BL       __aeabi_f2d
   \   00004558   0x0002             MOVS     R2,R0
   \   0000455A   0x000B             MOVS     R3,R1
   \   0000455C   0x.... 0x....      LDR.W    R1,??DataTable5_16
   \   00004560   0xA80B             ADD      R0,SP,#+44
   \   00004562   0x.... 0x....      BL       sprintf
   4155                                        break;
   \   00004566   0xE094             B.N      ??RoadBrd_ParseString_692
   \                     ??RoadBrd_ParseString_560:
   \   00004568   0x........         DC32     ?_261
   4156          //------------------
   4157                                      case 'S':
   4158                                        //Key Flash Variable Read Sensor Sample Rate Command.
   4159                                        // Is this a BLE Operation?
   4160                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_687: (+1)
   \   0000456C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000456E   0x2D00             CMP      R5,#+0
   \   00004570   0xD016             BEQ.N    ??RoadBrd_ParseString_693
   4161                                        {
   4162                                          // Yes...Build and Send BLE Response NOW.
   4163                                          sprintf( (char *)tempBffr2, "<STATUS>ST_TKRS:%3.1f</STATUS>", ((float)RoadBrd_Get_SnsrTickCnt()/10));
   \   00004572   0x.... 0x....      BL       RoadBrd_Get_SnsrTickCnt
   \   00004576   0x.... 0x....      BL       __aeabi_ui2f
   \   0000457A   0x.... 0x....      LDR.W    R1,??DataTable5_14  ;; 0x41200000
   \   0000457E   0x.... 0x....      BL       __aeabi_fdiv
   \   00004582   0x.... 0x....      BL       __aeabi_f2d
   \   00004586   0x0002             MOVS     R2,R0
   \   00004588   0x000B             MOVS     R3,R1
   \   0000458A   0x.... 0x....      LDR.W    R1,??DataTable5_17
   \   0000458E   0xA80B             ADD      R0,SP,#+44
   \   00004590   0x.... 0x....      BL       sprintf
   4164                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004594   0xA80B             ADD      R0,SP,#+44
   \   00004596   0x.... 0x....      BL       strlen
   \   0000459A   0xA90B             ADD      R1,SP,#+44
   \   0000459C   0x.... 0x....      BL       BGM111_Transmit
   4165                                        }
   4166                                        sprintf( (char *)tempBffr2, "Sensor Sample Rate: %3.1f Seconds.\r\n", ((float)RoadBrd_Get_SnsrTickCnt()/10));
   \                     ??RoadBrd_ParseString_693: (+1)
   \   000045A0   0x.... 0x....      BL       RoadBrd_Get_SnsrTickCnt
   \   000045A4   0x.... 0x....      BL       __aeabi_ui2f
   \   000045A8   0x.... 0x....      LDR.W    R1,??DataTable5_14  ;; 0x41200000
   \   000045AC   0x.... 0x....      BL       __aeabi_fdiv
   \   000045B0   0x.... 0x....      BL       __aeabi_f2d
   \   000045B4   0x0002             MOVS     R2,R0
   \   000045B6   0x000B             MOVS     R3,R1
   \   000045B8   0x.... 0x....      LDR.W    R1,??DataTable5_18
   \   000045BC   0xA80B             ADD      R0,SP,#+44
   \   000045BE   0x.... 0x....      BL       sprintf
   4167                                        break;
   \   000045C2   0xE066             B.N      ??RoadBrd_ParseString_692
   \                     ??RoadBrd_ParseString_562:
   \   000045C4   0x........         DC32     ?_262
   4168          //------------------
   4169                                      case 'T':
   4170                                        //Key Flash Variable Read TACK Limit(Multiple of Road Sound Throttles).
   4171                                        // Is this a BLE Operation?
   4172                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_688: (+1)
   \   000045C8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000045CA   0x2D00             CMP      R5,#+0
   \   000045CC   0xD00D             BEQ.N    ??RoadBrd_ParseString_694
   4173                                        {
   4174                                          // Yes...Build and Send BLE Response NOW.
   4175                                          sprintf( (char *)tempBffr2, "<STATUS>ST_TKRT:%d</STATUS>", RoadBrd_Get_TackLimit());
   \   000045CE   0x.... 0x....      BL       RoadBrd_Get_TackLimit
   \   000045D2   0x0002             MOVS     R2,R0
   \   000045D4   0x.... 0x....      LDR.W    R1,??DataTable5_19
   \   000045D8   0xA80B             ADD      R0,SP,#+44
   \   000045DA   0x.... 0x....      BL       sprintf
   4176                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000045DE   0xA80B             ADD      R0,SP,#+44
   \   000045E0   0x.... 0x....      BL       strlen
   \   000045E4   0xA90B             ADD      R1,SP,#+44
   \   000045E6   0x.... 0x....      BL       BGM111_Transmit
   4177                                        }
   4178                                        sprintf( (char *)tempBffr2, "TACK Limit: %d.\r\n", RoadBrd_Get_TackLimit());
   \                     ??RoadBrd_ParseString_694: (+1)
   \   000045EA   0x.... 0x....      BL       RoadBrd_Get_TackLimit
   \   000045EE   0x0002             MOVS     R2,R0
   \   000045F0   0x.... 0x....      LDR.W    R1,??DataTable5_20
   \   000045F4   0xA80B             ADD      R0,SP,#+44
   \   000045F6   0x.... 0x....      BL       sprintf
   4179                                        break;
   \   000045FA   0xE04A             B.N      ??RoadBrd_ParseString_692
   \                     ??RoadBrd_ParseString_563:
   \   000045FC   0x........         DC32     ?_263
   4180          //------------------
   4181                                      case 'B':
   4182                                        //Key Flash Variable Read Boot Delay.(Seconds).
   4183                                        // Is this a BLE Operation?
   4184                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_685: (+1)
   \   00004600   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004602   0x2D00             CMP      R5,#+0
   \   00004604   0xD00D             BEQ.N    ??RoadBrd_ParseString_695
   4185                                        {
   4186                                          // Yes...Build and Send BLE Response NOW.
   4187                                          sprintf( (char *)tempBffr2, "<STATUS>ST_TKRB:%d</STATUS>", RoadBrd_Get_BootDelay());
   \   00004606   0x.... 0x....      BL       RoadBrd_Get_BootDelay
   \   0000460A   0x0002             MOVS     R2,R0
   \   0000460C   0x.... 0x....      LDR.W    R1,??DataTable5_21
   \   00004610   0xA80B             ADD      R0,SP,#+44
   \   00004612   0x.... 0x....      BL       sprintf
   4188                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004616   0xA80B             ADD      R0,SP,#+44
   \   00004618   0x.... 0x....      BL       strlen
   \   0000461C   0xA90B             ADD      R1,SP,#+44
   \   0000461E   0x.... 0x....      BL       BGM111_Transmit
   4189                                        }
   4190                                        sprintf( (char *)tempBffr2, "Boot Delay: %d Seconds.\r\n", RoadBrd_Get_BootDelay());
   \                     ??RoadBrd_ParseString_695: (+1)
   \   00004622   0x.... 0x....      BL       RoadBrd_Get_BootDelay
   \   00004626   0x0002             MOVS     R2,R0
   \   00004628   0x.... 0x....      LDR.W    R1,??DataTable5_22
   \   0000462C   0xA80B             ADD      R0,SP,#+44
   \   0000462E   0x.... 0x....      BL       sprintf
   4191                                        break;
   \   00004632   0xE02E             B.N      ??RoadBrd_ParseString_692
   \                     ??RoadBrd_ParseString_565:
   \   00004634   0x........         DC32     ?_264
   4192          //------------------
   4193                                      case 'V':
   4194                                        //Key Flash Variable Read Version String.
   4195                                        // Is this a BLE Operation?
   4196                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_689: (+1)
   \   00004638   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000463A   0x2D00             CMP      R5,#+0
   \   0000463C   0xD00D             BEQ.N    ??RoadBrd_ParseString_696
   4197                                        {
   4198                                          // Yes...Build and Send BLE Response NOW.
   4199                                          sprintf( (char *)tempBffr2, "<STATUS>ST_TKRB:%s</STATUS>", RoadBrd_Get_VersionString());
   \   0000463E   0x.... 0x....      BL       RoadBrd_Get_VersionString
   \   00004642   0x0002             MOVS     R2,R0
   \   00004644   0x.... 0x....      LDR.W    R1,??DataTable5_23
   \   00004648   0xA80B             ADD      R0,SP,#+44
   \   0000464A   0x.... 0x....      BL       sprintf
   4200                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000464E   0xA80B             ADD      R0,SP,#+44
   \   00004650   0x.... 0x....      BL       strlen
   \   00004654   0xA90B             ADD      R1,SP,#+44
   \   00004656   0x.... 0x....      BL       BGM111_Transmit
   4201                                        }
   4202                                        sprintf( (char *)tempBffr2, "Version String: %s\r\n", RoadBrd_Get_VersionString());
   \                     ??RoadBrd_ParseString_696: (+1)
   \   0000465A   0x.... 0x....      BL       RoadBrd_Get_VersionString
   \   0000465E   0x0002             MOVS     R2,R0
   \   00004660   0x.... 0x....      LDR.W    R1,??DataTable5_24
   \   00004664   0xA80B             ADD      R0,SP,#+44
   \   00004666   0x.... 0x....      BL       sprintf
   4203                                        break;
   \   0000466A   0xE012             B.N      ??RoadBrd_ParseString_692
   4204                                      default:
   4205                                        // Is this a BLE Operation?
   4206                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_690: (+1)
   \   0000466C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000466E   0x2D00             CMP      R5,#+0
   \   00004670   0xD00A             BEQ.N    ??RoadBrd_ParseString_697
   4207                                        {
   4208                                          // Yes...Build and Send BLE Response NOW.
   4209                                          strcpy( (char *)tempBffr2, "<STATUS>CMD_TKR_SYNTAX</STATUS>");
   \   00004672   0x.... 0x....      LDR.W    R1,??DataTable5_25
   \   00004676   0xA80B             ADD      R0,SP,#+44
   \   00004678   0x.... 0x....      BL       strcpy
   4210                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000467C   0xA80B             ADD      R0,SP,#+44
   \   0000467E   0x.... 0x....      BL       strlen
   \   00004682   0xA90B             ADD      R1,SP,#+44
   \   00004684   0x.... 0x....      BL       BGM111_Transmit
   4211                                        }
   4212                                        strcpy( (char *)tempBffr2, "TKR ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_697: (+1)
   \   00004688   0x.... 0x....      LDR.W    R1,??DataTable5_26
   \   0000468C   0xA80B             ADD      R0,SP,#+44
   \   0000468E   0x.... 0x....      BL       strcpy
   4213                                        break;
   4214                                    } // EndSwitch ( tempBffr[3] )
   4215                                    break;
   \                     ??RoadBrd_ParseString_692: (+1)
   \   00004692   0xE014             B.N      ??RoadBrd_ParseString_614
   \                     ??RoadBrd_ParseString_566:
   \   00004694   0x........         DC32     ?_265
   4216                                    // Is this a BLE Operation?
   4217                                  default:
   4218                                    if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_616: (+1)
   \   00004698   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000469A   0x2D00             CMP      R5,#+0
   \   0000469C   0xD00A             BEQ.N    ??RoadBrd_ParseString_698
   4219                                    {
   4220                                      // Yes...Build and Send BLE Response NOW.
   4221                                      strcpy( (char *)tempBffr2, "<STATUS>CMD_TK_SYNTAX</STATUS>");
   \   0000469E   0xF8DF 0x1654      LDR.W    R1,??RoadBrd_ParseString_613
   \   000046A2   0xA80B             ADD      R0,SP,#+44
   \   000046A4   0x.... 0x....      BL       strcpy
   4222                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000046A8   0xA80B             ADD      R0,SP,#+44
   \   000046AA   0x.... 0x....      BL       strlen
   \   000046AE   0xA90B             ADD      R1,SP,#+44
   \   000046B0   0x.... 0x....      BL       BGM111_Transmit
   4223                                    }
   4224                                    strcpy( (char *)tempBffr2, "ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_698: (+1)
   \   000046B4   0x.... 0x....      LDR.W    R1,??DataTable5_27
   \   000046B8   0xA80B             ADD      R0,SP,#+44
   \   000046BA   0x.... 0x....      BL       strcpy
   4225                                    break;
   4226                                } //EndSwitch ( tempBffr[2] )
   4227                              } //EndElse (Size < 3)
   4228                              break;
   \                     ??RoadBrd_ParseString_614: (+1)
   \   000046BE   0xE280             B.N      ??RoadBrd_ParseString_289
   4229          //++++++++++++++++++++++++++++++++++++++++++  Units Enable/Disable Commands.
   4230                            case 'U':
   4231                              // Key Flash Variable Commands.
   4232                              // Test Size to make sure we have enough Characters for this operation
   4233                              Status = HAL_OK;
   \                     ??RoadBrd_ParseString_300: (+1)
   \   000046C0   0x2000             MOVS     R0,#+0
   \   000046C2   0x0006             MOVS     R6,R0
   4234                              if (Size < 3)
   \   000046C4   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   000046C8   0x2803             CMP      R0,#+3
   \   000046CA   0xDA15             BGE.N    ??RoadBrd_ParseString_699
   4235                              {
   4236                                // Is this a BLE Operation?
   4237                                if ( BLE_Flag )
   \   000046CC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000046CE   0x2D00             CMP      R5,#+0
   \   000046D0   0xD00A             BEQ.N    ??RoadBrd_ParseString_700
   4238                                {
   4239                                  // Yes...Build and Send BLE Response NOW.
   4240                                  strcpy( (char *)tempBffr2, "<STATUS>CMD_TU_SYNTAX</STATUS>");
   \   000046D2   0x.... 0x....      LDR.W    R1,??DataTable5_28
   \   000046D6   0xA80B             ADD      R0,SP,#+44
   \   000046D8   0x.... 0x....      BL       strcpy
   4241                                  BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000046DC   0xA80B             ADD      R0,SP,#+44
   \   000046DE   0x.... 0x....      BL       strlen
   \   000046E2   0xA90B             ADD      R1,SP,#+44
   \   000046E4   0x.... 0x....      BL       BGM111_Transmit
   4242                                }
   4243                                strcpy( (char *)tempBffr2, "TU SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_700: (+1)
   \   000046E8   0x.... 0x....      LDR.W    R1,??DataTable5_29
   \   000046EC   0xA80B             ADD      R0,SP,#+44
   \   000046EE   0x.... 0x....      BL       strcpy
   \   000046F2   0xE04C             B.N      ??RoadBrd_ParseString_701
   \                     ??RoadBrd_ParseString_568:
   \   000046F4   0x........         DC32     ?_266
   4244                              }
   4245                              else
   4246                              {
   4247                                switch( tempBffr[2] )
   \                     ??RoadBrd_ParseString_699: (+1)
   \   000046F8   0x78A0             LDRB     R0,[R4, #+2]
   \   000046FA   0x2844             CMP      R0,#+68
   \   000046FC   0xD01C             BEQ.N    ??RoadBrd_ParseString_702
   \   000046FE   0x2845             CMP      R0,#+69
   \   00004700   0xD132             BNE.N    ??RoadBrd_ParseString_703
   4248                                {
   4249          //------------------
   4250                                  case 'E':
   4251                                    //Units Enable Command.
   4252                                    // Is this a BLE Operation?
   4253                                    if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_704: (+1)
   \   00004702   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004704   0x2D00             CMP      R5,#+0
   \   00004706   0xD00A             BEQ.N    ??RoadBrd_ParseString_705
   4254                                    {
   4255                                      // Yes...Build and Send BLE Response NOW.
   4256                                      strcpy( (char *)tempBffr2, "<STATUS>ST_TUE_ACK</STATUS>");
   \   00004708   0x.... 0x....      LDR.W    R1,??DataTable5_30
   \   0000470C   0xA80B             ADD      R0,SP,#+44
   \   0000470E   0x.... 0x....      BL       strcpy
   4257                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004712   0xA80B             ADD      R0,SP,#+44
   \   00004714   0x.... 0x....      BL       strlen
   \   00004718   0xA90B             ADD      R1,SP,#+44
   \   0000471A   0x.... 0x....      BL       BGM111_Transmit
   4258                                    }
   4259                                    sprintf( (char *)tempBffr2, "Units XML State CHANGED: ENABLED\r\n\r\n> ");
   \                     ??RoadBrd_ParseString_705: (+1)
   \   0000471E   0x.... 0x....      LDR.W    R1,??DataTable5_31
   \   00004722   0xA80B             ADD      R0,SP,#+44
   \   00004724   0x.... 0x....      BL       sprintf
   4260                                    Status = RoadBrd_Set_UnitsFlag( true );
   \   00004728   0x2001             MOVS     R0,#+1
   \   0000472A   0x.... 0x....      BL       RoadBrd_Set_UnitsFlag
   \   0000472E   0x0006             MOVS     R6,R0
   4261                                    break;
   \   00004730   0xE02D             B.N      ??RoadBrd_ParseString_701
   \   00004732   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_569:
   \   00004734   0x........         DC32     ?_267
   4262          //------------------
   4263                                  case 'D':
   4264                                    //Units Disable Command
   4265                                    // Is this a BLE Operation?
   4266                                    if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_702: (+1)
   \   00004738   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000473A   0x2D00             CMP      R5,#+0
   \   0000473C   0xD00A             BEQ.N    ??RoadBrd_ParseString_706
   4267                                    {
   4268                                      // Yes...Build and Send BLE Response NOW.
   4269                                      strcpy( (char *)tempBffr2, "<STATUS>ST_TUD_ACK</STATUS>");
   \   0000473E   0x.... 0x....      LDR.W    R1,??DataTable5_32
   \   00004742   0xA80B             ADD      R0,SP,#+44
   \   00004744   0x.... 0x....      BL       strcpy
   4270                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004748   0xA80B             ADD      R0,SP,#+44
   \   0000474A   0x.... 0x....      BL       strlen
   \   0000474E   0xA90B             ADD      R1,SP,#+44
   \   00004750   0x.... 0x....      BL       BGM111_Transmit
   4271                                    }
   4272                                    sprintf( (char *)tempBffr2, "Units XML State CHANGED: DISABLED\r\n\r\n> ");
   \                     ??RoadBrd_ParseString_706: (+1)
   \   00004754   0x.... 0x....      LDR.W    R1,??DataTable5_33
   \   00004758   0xA80B             ADD      R0,SP,#+44
   \   0000475A   0x.... 0x....      BL       sprintf
   4273                                    Status = RoadBrd_Set_UnitsFlag( false );
   \   0000475E   0x2000             MOVS     R0,#+0
   \   00004760   0x.... 0x....      BL       RoadBrd_Set_UnitsFlag
   \   00004764   0x0006             MOVS     R6,R0
   4274                                    break;
   \   00004766   0xE012             B.N      ??RoadBrd_ParseString_701
   4275                                  default:
   4276                                    // Is this a BLE Operation?
   4277                                    if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_703: (+1)
   \   00004768   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000476A   0x2D00             CMP      R5,#+0
   \   0000476C   0xD00A             BEQ.N    ??RoadBrd_ParseString_707
   4278                                    {
   4279                                      // Yes...Build and Send BLE Response NOW.
   4280                                      strcpy( (char *)tempBffr2, "<STATUS>CMD_TU_SYNTAX</STATUS>");
   \   0000476E   0x.... 0x....      LDR.W    R1,??DataTable5_28
   \   00004772   0xA80B             ADD      R0,SP,#+44
   \   00004774   0x.... 0x....      BL       strcpy
   4281                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004778   0xA80B             ADD      R0,SP,#+44
   \   0000477A   0x.... 0x....      BL       strlen
   \   0000477E   0xA90B             ADD      R1,SP,#+44
   \   00004780   0x.... 0x....      BL       BGM111_Transmit
   4282                                    }
   4283                                    strcpy( (char *)tempBffr2, "TU SYNTAX ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_707: (+1)
   \   00004784   0x.... 0x....      LDR.W    R1,??DataTable5_34
   \   00004788   0xA80B             ADD      R0,SP,#+44
   \   0000478A   0x.... 0x....      BL       strcpy
   4284                                    break;
   4285                                } //EndSwitch ( tempBffr[2] )
   4286                              } //EndElse (Size < 3)
   4287                              break;
   \                     ??RoadBrd_ParseString_701: (+1)
   \   0000478E   0xE218             B.N      ??RoadBrd_ParseString_289
   \                     ??RoadBrd_ParseString_571:
   \   00004790   0x........         DC32     ?_268
   4288          //++++++++++++++++++++++++++++++++++++++++++  Special Monitor Mode to intercept traffic from UART and pass to BGM111
   4289                            case 'M':
   4290                              // Is this a BLE Operation?
   4291                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_297: (+1)
   \   00004794   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004796   0x2D00             CMP      R5,#+0
   \   00004798   0xD00A             BEQ.N    ??RoadBrd_ParseString_708
   4292                              {
   4293                                // Yes...Build and Send BLE Response NOW.
   4294                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   0000479A   0x.... 0x....      LDR.W    R1,??DataTable5_35
   \   0000479E   0xA80B             ADD      R0,SP,#+44
   \   000047A0   0x.... 0x....      BL       strcpy
   4295                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000047A4   0xA80B             ADD      R0,SP,#+44
   \   000047A6   0x.... 0x....      BL       strlen
   \   000047AA   0xA90B             ADD      R1,SP,#+44
   \   000047AC   0x.... 0x....      BL       BGM111_Transmit
   4296                              }
   4297                              
   4298                              strcpy( (char *)tempBffr2, "BGM111 MONITOR MODE.\r\n\r\n");
   \                     ??RoadBrd_ParseString_708: (+1)
   \   000047B0   0x.... 0x....      LDR.W    R1,??DataTable5_36
   \   000047B4   0xA80B             ADD      R0,SP,#+44
   \   000047B6   0x.... 0x....      BL       strcpy
   4299          #ifdef NUCLEO
   4300                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   4301          #else
   4302                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000047BA   0xA90B             ADD      R1,SP,#+44
   \   000047BC   0x2000             MOVS     R0,#+0
   \   000047BE   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000047C2   0x0006             MOVS     R6,R0
   4303          #endif
   4304                              if (Status != HAL_OK)
   \   000047C4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000047C6   0x2E00             CMP      R6,#+0
   \   000047C8   0xD004             BEQ.N    ??RoadBrd_ParseString_709
   4305                                return Status;
   \   000047CA   0x0030             MOVS     R0,R6
   \   000047CC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000047CE   0xE28C             B.N      ??RoadBrd_ParseString_4
   \                     ??RoadBrd_ParseString_572:
   \   000047D0   0x........         DC32     ?_269
   4306                              strcpy( (char *)tempBffr2, "Use <ESC> to exit mode.\r\n\r\n");
   \                     ??RoadBrd_ParseString_709: (+1)
   \   000047D4   0x.... 0x....      LDR.W    R1,??DataTable5_37
   \   000047D8   0xA80B             ADD      R0,SP,#+44
   \   000047DA   0x.... 0x....      BL       strcpy
   4307                              // Set Bypass Flag
   4308                              Bypass = true;
   \   000047DE   0x2001             MOVS     R0,#+1
   \   000047E0   0x.... 0x....      LDR.W    R1,??DataTable5_38
   \   000047E4   0x7008             STRB     R0,[R1, #+0]
   4309                              break;
   \   000047E6   0xE1EC             B.N      ??RoadBrd_ParseString_289
   4310          //++++++++++++++++++++++++++++++++++++++++++  Reset Flash Frame Variables(Factory).
   4311                            case 'F':
   4312                              // Reset Flash Frame Variables.
   4313                              RoadBrd_WWDG_InitializeFrmFlash();
   \                     ??RoadBrd_ParseString_293: (+1)
   \   000047E8   0x.... 0x....      BL       RoadBrd_WWDG_InitializeFrmFlash
   4314                              // Is this a BLE Operation?
   4315                              if ( BLE_Flag )
   \   000047EC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000047EE   0x2D00             CMP      R5,#+0
   \   000047F0   0xD00A             BEQ.N    ??RoadBrd_ParseString_710
   4316                              {
   4317                                // Yes...Build and Send BLE Response NOW.
   4318                                sprintf( (char *)tempBffr2, "<STATUS>TF_ACK</STATUS>" );
   \   000047F2   0x.... 0x....      LDR.W    R1,??DataTable5_39
   \   000047F6   0xA80B             ADD      R0,SP,#+44
   \   000047F8   0x.... 0x....      BL       sprintf
   4319                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000047FC   0xA80B             ADD      R0,SP,#+44
   \   000047FE   0x.... 0x....      BL       strlen
   \   00004802   0xA90B             ADD      R1,SP,#+44
   \   00004804   0x.... 0x....      BL       BGM111_Transmit
   4320                              }
   4321                              
   4322                              sprintf( (char *)tempBffr2, "Flash Frame Variables Reset to Factory Values.\r\n" );
   \                     ??RoadBrd_ParseString_710: (+1)
   \   00004808   0x.... 0x....      LDR.W    R1,??DataTable5_40
   \   0000480C   0xA80B             ADD      R0,SP,#+44
   \   0000480E   0x.... 0x....      BL       sprintf
   4323                              break;
   \   00004812   0xE1D6             B.N      ??RoadBrd_ParseString_289
   4324          //++++++++++++++++++++++++++++++++++++++++++  Lock Code to allow stable Program of BLE Module.
   4325                            case 'L':
   4326                              // Is this a BLE Operation?
   4327                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_296: (+1)
   \   00004814   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004816   0x2D00             CMP      R5,#+0
   \   00004818   0xD010             BEQ.N    ??RoadBrd_ParseString_711
   4328                              {
   4329                                // Yes...Build and Send BLE Response NOW.
   4330                                sprintf( (char *)tempBffr2, "<STATUS>TL_ERROR</STATUS>" );
   \   0000481A   0x.... 0x....      LDR.W    R1,??DataTable5_41
   \   0000481E   0xA80B             ADD      R0,SP,#+44
   \   00004820   0x.... 0x....      BL       sprintf
   4331                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004824   0xA80B             ADD      R0,SP,#+44
   \   00004826   0x.... 0x....      BL       strlen
   \   0000482A   0xA90B             ADD      R1,SP,#+44
   \   0000482C   0x.... 0x....      BL       BGM111_Transmit
   4332                              }
   4333                              else
   4334                              {
   4335                                sprintf( (char *)tempBffr2, "Code Locked for Programming!\r\n\r\n" );
   4336          #ifdef NUCLEO
   4337                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   4338          #else
   4339                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   4340          #endif
   4341                                if (Status != HAL_OK)
   4342                                  return Status;
   4343                                sprintf( (char *)tempBffr2, "   HARD RESET NEEDED TO EXIT MODE\r\n" );
   4344          #ifdef NUCLEO
   4345                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   4346          #else
   4347                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   4348          #endif
   4349                                if (Status != HAL_OK)
   4350                                  return Status;
   4351                                // Start Hard Loop
   4352                                for (;;)
   4353                                {
   4354                                }
   4355                              }
   4356                              break;
   \   00004830   0xE1C7             B.N      ??RoadBrd_ParseString_289
   \   00004832   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_574:
   \   00004834   0x........         DC32     ?_270
   \   00004838   0x........         DC32     ?_271
   \                     ??RoadBrd_ParseString_711: (+1)
   \   0000483C   0x.... 0x....      LDR.W    R1,??DataTable5_42
   \   00004840   0xA80B             ADD      R0,SP,#+44
   \   00004842   0x.... 0x....      BL       sprintf
   \   00004846   0xA90B             ADD      R1,SP,#+44
   \   00004848   0x2000             MOVS     R0,#+0
   \   0000484A   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000484E   0x0006             MOVS     R6,R0
   \   00004850   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00004852   0x2E00             CMP      R6,#+0
   \   00004854   0xD002             BEQ.N    ??RoadBrd_ParseString_712
   \   00004856   0x0030             MOVS     R0,R6
   \   00004858   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000485A   0xE246             B.N      ??RoadBrd_ParseString_4
   \                     ??RoadBrd_ParseString_712: (+1)
   \   0000485C   0x.... 0x....      LDR.W    R1,??DataTable5_43
   \   00004860   0xA80B             ADD      R0,SP,#+44
   \   00004862   0x.... 0x....      BL       sprintf
   \   00004866   0xA90B             ADD      R1,SP,#+44
   \   00004868   0x2000             MOVS     R0,#+0
   \   0000486A   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000486E   0x0006             MOVS     R6,R0
   \   00004870   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00004872   0x2E00             CMP      R6,#+0
   \   00004874   0xD002             BEQ.N    ??RoadBrd_ParseString_713
   \   00004876   0x0030             MOVS     R0,R6
   \   00004878   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000487A   0xE236             B.N      ??RoadBrd_ParseString_4
   \                     ??RoadBrd_ParseString_713: (+1)
   \   0000487C   0xE7FE             B.N      ??RoadBrd_ParseString_713
   4357          
   4358          //++++++++++++++++++++++++++++++++++++++++++  Special Monitor Mode to intercept traffic from UART and pass to BGM111
   4359                            case 'B':
   4360                              // Is this a BLE Operation?
   4361                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_290: (+1)
   \   0000487E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004880   0x2D00             CMP      R5,#+0
   \   00004882   0xD00A             BEQ.N    ??RoadBrd_ParseString_714
   4362                              {
   4363                                // Yes...Build and Send BLE Response NOW.
   4364                                strcpy( (char *)tempBffr2, "<STATUS>ST_OTAMD_ACK</STATUS>");
   \   00004884   0x.... 0x....      LDR.W    R1,??DataTable5_44
   \   00004888   0xA80B             ADD      R0,SP,#+44
   \   0000488A   0x.... 0x....      BL       strcpy
   4365                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000488E   0xA80B             ADD      R0,SP,#+44
   \   00004890   0x.... 0x....      BL       strlen
   \   00004894   0xA90B             ADD      R1,SP,#+44
   \   00004896   0x.... 0x....      BL       BGM111_Transmit
   4366                              }
   4367                              
   4368                              strcpy( (char *)tempBffr2, "Boot Loader MONITOR MODE.\r\n\r\n");
   \                     ??RoadBrd_ParseString_714: (+1)
   \   0000489A   0x.... 0x....      LDR.W    R1,??DataTable5_45
   \   0000489E   0xA80B             ADD      R0,SP,#+44
   \   000048A0   0x.... 0x....      BL       strcpy
   4369          #ifdef NUCLEO
   4370                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   4371          #else
   4372                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000048A4   0xA90B             ADD      R1,SP,#+44
   \   000048A6   0x2000             MOVS     R0,#+0
   \   000048A8   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000048AC   0x0006             MOVS     R6,R0
   4373          #endif
   4374                              if (Status != HAL_OK)
   \   000048AE   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000048B0   0x2E00             CMP      R6,#+0
   \   000048B2   0xD002             BEQ.N    ??RoadBrd_ParseString_715
   4375                                return Status;
   \   000048B4   0x0030             MOVS     R0,R6
   \   000048B6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000048B8   0xE217             B.N      ??RoadBrd_ParseString_4
   4376                              strcpy( (char *)tempBffr2, "Use <ESC> followed by <CR> to exit mode.\r\n\r\n");
   \                     ??RoadBrd_ParseString_715: (+1)
   \   000048BA   0x.... 0x....      LDR.W    R1,??DataTable5_46
   \   000048BE   0xA80B             ADD      R0,SP,#+44
   \   000048C0   0x.... 0x....      BL       strcpy
   4377                              // Set Bypass Flag
   4378                              Set_Boot_Bypass();
   \   000048C4   0x.... 0x....      BL       Set_Boot_Bypass
   4379                              break;
   \   000048C8   0xE17B             B.N      ??RoadBrd_ParseString_289
   \   000048CA   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_576:
   \   000048CC   0x........         DC32     ?_272
   \   000048D0   0x........         DC32     ?_273
   4380          
   4381          //++++++++++++++++++++++++++++++++++++++++++  S-Record Test Monitor.
   4382                            case 'S':
   4383                              // S-Record Test Monitor.
   4384                              // Is this a BLE Operation?
   4385                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_299: (+1)
   \   000048D4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000048D6   0x2D00             CMP      R5,#+0
   \   000048D8   0xD00D             BEQ.N    ??RoadBrd_ParseString_716
   4386                              {
   4387                                // Yes...Build and Send BLE Response NOW.
   4388                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000048DA   0x.... 0x....      LDR.W    R1,??DataTable5_35
   \   000048DE   0xA80B             ADD      R0,SP,#+44
   \   000048E0   0x.... 0x....      BL       strcpy
   4389                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000048E4   0xA80B             ADD      R0,SP,#+44
   \   000048E6   0x.... 0x....      BL       strlen
   \   000048EA   0xA90B             ADD      R1,SP,#+44
   \   000048EC   0x.... 0x....      BL       BGM111_Transmit
   4390                                HAL_Delay(100);           // Wait 100ms
   \   000048F0   0x2064             MOVS     R0,#+100
   \   000048F2   0x.... 0x....      BL       HAL_Delay
   4391                              }
   4392                              // Parse Data and extract S-Record.
   4393                              Numbr_Rcrds = sscanf (tempBffr, "%s %s", s_cmd, s_recrd);
   \                     ??RoadBrd_ParseString_716: (+1)
   \   000048F6   0xF50D 0x6397      ADD      R3,SP,#+1208
   \   000048FA   0xAAD5             ADD      R2,SP,#+852
   \   000048FC   0x.... 0x....      LDR.W    R1,??DataTable5_47
   \   00004900   0x0020             MOVS     R0,R4
   \   00004902   0x.... 0x....      BL       sscanf
   \   00004906   0x9047             STR      R0,[SP, #+284]
   4394          //                    if (sscanf (tempBffr, "%s %s", s_cmd, s_recrd) == 2)
   4395                              if (Numbr_Rcrds == 2)
   \   00004908   0x9847             LDR      R0,[SP, #+284]
   \   0000490A   0x2802             CMP      R0,#+2
   \   0000490C   0xF040 0x813C      BNE.W    ??RoadBrd_ParseString_717
   4396                              {
   4397                                sprintf( (char *)tempBffr2, "TS: %s\r\n", s_recrd );
   \   00004910   0xF50D 0x6297      ADD      R2,SP,#+1208
   \   00004914   0x.... 0x....      LDR.W    R1,??DataTable5_48
   \   00004918   0xA80B             ADD      R0,SP,#+44
   \   0000491A   0x.... 0x....      BL       sprintf
   4398          #ifdef NUCLEO
   4399                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   4400          #else
   4401                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000491E   0xA90B             ADD      R1,SP,#+44
   \   00004920   0x2000             MOVS     R0,#+0
   \   00004922   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00004926   0x0006             MOVS     R6,R0
   4402          #endif
   4403                                if (Status != HAL_OK)
   \   00004928   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000492A   0x2E00             CMP      R6,#+0
   \   0000492C   0xD004             BEQ.N    ??RoadBrd_ParseString_718
   4404                                  return Status;
   \   0000492E   0x0030             MOVS     R0,R6
   \   00004930   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00004932   0xE1DA             B.N      ??RoadBrd_ParseString_4
   \                     ??RoadBrd_ParseString_578:
   \   00004934   0x........         DC32     ?_274
   4405                                // Pass to S-Record Parser..
   4406                                Status = Parse_srecord( (char *)s_recrd, &Srec_Elem );
   \                     ??RoadBrd_ParseString_718: (+1)
   \   00004938   0xA9FF             ADD      R1,SP,#+1020
   \   0000493A   0x3168             ADDS     R1,R1,#+104
   \   0000493C   0xF50D 0x6097      ADD      R0,SP,#+1208
   \   00004940   0x.... 0x....      BL       Parse_srecord
   \   00004944   0x0006             MOVS     R6,R0
   4407                                if (Status != HAL_OK)
   \   00004946   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00004948   0x2E00             CMP      R6,#+0
   \   0000494A   0xD041             BEQ.N    ??RoadBrd_ParseString_719
   4408                                {
   4409                                  // Report Failed Parse Operation
   4410                                  switch(Srec_Elem.Srec_Err)
   \   0000494C   0xF89D 0x0465      LDRB     R0,[SP, #+1125]
   \   00004950   0x2800             CMP      R0,#+0
   \   00004952   0xD009             BEQ.N    ??RoadBrd_ParseString_720
   \   00004954   0x2802             CMP      R0,#+2
   \   00004956   0xD013             BEQ.N    ??RoadBrd_ParseString_721
   \   00004958   0xD30C             BCC.N    ??RoadBrd_ParseString_722
   \   0000495A   0x2804             CMP      R0,#+4
   \   0000495C   0xD01E             BEQ.N    ??RoadBrd_ParseString_723
   \   0000495E   0xD317             BCC.N    ??RoadBrd_ParseString_724
   \   00004960   0x2806             CMP      R0,#+6
   \   00004962   0xD027             BEQ.N    ??RoadBrd_ParseString_725
   \   00004964   0xD320             BCC.N    ??RoadBrd_ParseString_726
   \   00004966   0xE02B             B.N      ??RoadBrd_ParseString_727
   4411                                  {
   4412                                    case NO_ERROR:
   4413                                      sprintf( (char *)tempBffr2, "NO ERROR FOUND.\r\n" );
   \                     ??RoadBrd_ParseString_720: (+1)
   \   00004968   0x.... 0x....      LDR.W    R1,??DataTable5_49
   \   0000496C   0xA80B             ADD      R0,SP,#+44
   \   0000496E   0x.... 0x....      BL       sprintf
   4414                                      break;
   \   00004972   0xE10E             B.N      ??RoadBrd_ParseString_728
   4415                                    case ILLEGAL_SREC:
   4416                                      sprintf( (char *)tempBffr2, "ERROR: ILLEGAL S-Record.\r\n" );
   \                     ??RoadBrd_ParseString_722: (+1)
   \   00004974   0x.... 0x....      LDR.W    R1,??DataTable5_50
   \   00004978   0xA80B             ADD      R0,SP,#+44
   \   0000497A   0x.... 0x....      BL       sprintf
   4417                                      break;
   \   0000497E   0xE108             B.N      ??RoadBrd_ParseString_728
   4418                                    case ILLEGAL_RECORD:
   4419                                      sprintf( (char *)tempBffr2, "ERROR: ILLEGAL Record.\r\n" );
   \                     ??RoadBrd_ParseString_721: (+1)
   \   00004980   0x.... 0x....      LDR.W    R1,??DataTable5_51
   \   00004984   0xA80B             ADD      R0,SP,#+44
   \   00004986   0x.... 0x....      BL       sprintf
   4420                                      break;
   \   0000498A   0xE102             B.N      ??RoadBrd_ParseString_728
   \                     ??RoadBrd_ParseString_579:
   \   0000498C   0x........         DC32     ?_275
   4421                                    case RESERVED_RECORD:
   4422                                      sprintf( (char *)tempBffr2, "ERROR: Reserved S-Record Type.\r\n" );
   \                     ??RoadBrd_ParseString_724: (+1)
   \   00004990   0x.... 0x....      LDR.W    R1,??DataTable5_52
   \   00004994   0xA80B             ADD      R0,SP,#+44
   \   00004996   0x.... 0x....      BL       sprintf
   4423                                      break;
   \   0000499A   0xE0FA             B.N      ??RoadBrd_ParseString_728
   4424                                    case ILLEGAL_BYTE_CNT:
   4425                                      sprintf( (char *)tempBffr2, "ERROR: Illegal Byte Count.\r\n" );
   \                     ??RoadBrd_ParseString_723: (+1)
   \   0000499C   0x.... 0x....      LDR.W    R1,??DataTable5_53
   \   000049A0   0xA80B             ADD      R0,SP,#+44
   \   000049A2   0x.... 0x....      BL       sprintf
   4426                                      break;
   \   000049A6   0xE0F4             B.N      ??RoadBrd_ParseString_728
   4427                                    case ILLEGAL_BYTE_DATA:
   4428                                      sprintf( (char *)tempBffr2, "ERROR: Reserved S-Record Type.\r\n" );
   \                     ??RoadBrd_ParseString_726: (+1)
   \   000049A8   0x.... 0x....      LDR.W    R1,??DataTable5_52
   \   000049AC   0xA80B             ADD      R0,SP,#+44
   \   000049AE   0x.... 0x....      BL       sprintf
   4429                                      break;
   \   000049B2   0xE0EE             B.N      ??RoadBrd_ParseString_728
   4430                                    case BAD_CHECKSUM:
   4431                                      sprintf( (char *)tempBffr2, "ERROR: Illegal Byte Data.\r\n" );
   \                     ??RoadBrd_ParseString_725: (+1)
   \   000049B4   0x.... 0x....      LDR.W    R1,??DataTable5_54
   \   000049B8   0xA80B             ADD      R0,SP,#+44
   \   000049BA   0x.... 0x....      BL       sprintf
   4432                                      break;
   \   000049BE   0xE0E8             B.N      ??RoadBrd_ParseString_728
   4433                                    default:
   4434                                      sprintf( (char *)tempBffr2, "ERROR: Checksum did not match data.\r\n" );
   \                     ??RoadBrd_ParseString_727: (+1)
   \   000049C0   0x.... 0x....      LDR.W    R1,??DataTable5_55
   \   000049C4   0xA80B             ADD      R0,SP,#+44
   \   000049C6   0x.... 0x....      BL       sprintf
   4435                                      break;
   \   000049CA   0xE0E2             B.N      ??RoadBrd_ParseString_728
   \                     ??RoadBrd_ParseString_581:
   \   000049CC   0x........         DC32     ?_276
   4436                                  } // EndSwitch (Srec_Elem.Srec_Err)
   4437                                } // EndIf (Status != HAL_OK)..Parse_srecord
   4438                                else
   4439                                {
   4440                                  // Display Type of S-Record
   4441                                  switch(Srec_Elem.RecordType)
   \                     ??RoadBrd_ParseString_719: (+1)
   \   000049D0   0xF89D 0x0464      LDRB     R0,[SP, #+1124]
   \   000049D4   0x2800             CMP      R0,#+0
   \   000049D6   0xD00E             BEQ.N    ??RoadBrd_ParseString_729
   \   000049D8   0x2802             CMP      R0,#+2
   \   000049DA   0xD01B             BEQ.N    ??RoadBrd_ParseString_730
   \   000049DC   0xD311             BCC.N    ??RoadBrd_ParseString_731
   \   000049DE   0x2804             CMP      R0,#+4
   \   000049E0   0xD024             BEQ.N    ??RoadBrd_ParseString_732
   \   000049E2   0xD31D             BCC.N    ??RoadBrd_ParseString_733
   \   000049E4   0x2806             CMP      R0,#+6
   \   000049E6   0xD02D             BEQ.N    ??RoadBrd_ParseString_734
   \   000049E8   0xD326             BCC.N    ??RoadBrd_ParseString_735
   \   000049EA   0x2808             CMP      R0,#+8
   \   000049EC   0xD038             BEQ.N    ??RoadBrd_ParseString_736
   \   000049EE   0xD32F             BCC.N    ??RoadBrd_ParseString_737
   \   000049F0   0x2809             CMP      R0,#+9
   \   000049F2   0xD03B             BEQ.N    ??RoadBrd_ParseString_738
   \   000049F4   0xE042             B.N      ??RoadBrd_ParseString_739
   4442                                  {
   4443                                    case S0_HEADER:
   4444                                      sprintf( (char *)tempBffr2, "Record Type: S0_HEADER: Vendor specific ASCII text.\r\n" );
   \                     ??RoadBrd_ParseString_729: (+1)
   \   000049F6   0x.... 0x....      LDR.W    R1,??DataTable5_56
   \   000049FA   0xA80B             ADD      R0,SP,#+44
   \   000049FC   0x.... 0x....      BL       sprintf
   4445                                      break;
   \   00004A00   0xE041             B.N      ??RoadBrd_ParseString_740
   4446                                    case S1_DATA:
   4447                                      sprintf( (char *)tempBffr2, "Record Type: S1_DATA: Data that starts at the 16-bit address field.\r\n" );
   \                     ??RoadBrd_ParseString_731: (+1)
   \   00004A02   0x.... 0x....      LDR.W    R1,??DataTable5_57
   \   00004A06   0xA80B             ADD      R0,SP,#+44
   \   00004A08   0x.... 0x....      BL       sprintf
   4448                                      break;
   \   00004A0C   0xE03B             B.N      ??RoadBrd_ParseString_740
   \   00004A0E   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_582:
   \   00004A10   0x........         DC32     ?_277
   4449                                    case S2_DATA:
   4450                                      sprintf( (char *)tempBffr2, "Record Type: S2_DATA: Data that starts at the 24-bit address field.\r\n" );
   \                     ??RoadBrd_ParseString_730: (+1)
   \   00004A14   0x.... 0x....      LDR.W    R1,??DataTable5_58
   \   00004A18   0xA80B             ADD      R0,SP,#+44
   \   00004A1A   0x.... 0x....      BL       sprintf
   4451                                      break;
   \   00004A1E   0xE032             B.N      ??RoadBrd_ParseString_740
   4452                                    case S3_DATA:
   4453                                      sprintf( (char *)tempBffr2, "Record Type: S3_DATA: Data that starts at the 32-bit address field.\r\n" );
   \                     ??RoadBrd_ParseString_733: (+1)
   \   00004A20   0x.... 0x....      LDR.W    R1,??DataTable5_59
   \   00004A24   0xA80B             ADD      R0,SP,#+44
   \   00004A26   0x.... 0x....      BL       sprintf
   4454                                      break;
   \   00004A2A   0xE02C             B.N      ??RoadBrd_ParseString_740
   4455                                    case S4_RESERVED:
   4456                                      sprintf( (char *)tempBffr2, "Record Type: S4_RESERVED\r\n" );
   \                     ??RoadBrd_ParseString_732: (+1)
   \   00004A2C   0x.... 0x....      LDR.W    R1,??DataTable5_60
   \   00004A30   0xA80B             ADD      R0,SP,#+44
   \   00004A32   0x.... 0x....      BL       sprintf
   4457                                      break;
   \   00004A36   0xE026             B.N      ??RoadBrd_ParseString_740
   4458                                    case S5_COUNT:
   4459                                      sprintf( (char *)tempBffr2, "Record Type: S5_COUNT: 16-bit count of S1 / S2 / S3 records.\r\n" );
   \                     ??RoadBrd_ParseString_735: (+1)
   \   00004A38   0x.... 0x....      LDR.W    R1,??DataTable5_61
   \   00004A3C   0xA80B             ADD      R0,SP,#+44
   \   00004A3E   0x.... 0x....      BL       sprintf
   4460                                      break;
   \   00004A42   0xE020             B.N      ??RoadBrd_ParseString_740
   4461                                    case S6_COUNT:
   4462                                      sprintf( (char *)tempBffr2, "Record Type: S6_COUNT: 24-bit count of S1 / S2 / S3 records.\r\n" );
   \                     ??RoadBrd_ParseString_734: (+1)
   \   00004A44   0x.... 0x....      LDR.W    R1,??DataTable5_62
   \   00004A48   0xA80B             ADD      R0,SP,#+44
   \   00004A4A   0x.... 0x....      BL       sprintf
   4463                                      break;
   \   00004A4E   0xE01A             B.N      ??RoadBrd_ParseString_740
   4464                                    case S7_START:
   4465                                      sprintf( (char *)tempBffr2, "Record Type: S7_START: Starting execution location at a 32-bit address.\r\n" );
   \                     ??RoadBrd_ParseString_737: (+1)
   \   00004A50   0x.... 0x....      LDR.W    R1,??DataTable5_63
   \   00004A54   0xA80B             ADD      R0,SP,#+44
   \   00004A56   0x.... 0x....      BL       sprintf
   4466                                      break;
   \   00004A5A   0xE014             B.N      ??RoadBrd_ParseString_740
   \                     ??RoadBrd_ParseString_584:
   \   00004A5C   0x........         DC32     ?_278
   4467                                    case S8_START:
   4468                                      sprintf( (char *)tempBffr2, "Record Type: S8_START: Starting execution location at a 24-bit address.\r\n" );
   \                     ??RoadBrd_ParseString_736: (+1)
   \   00004A60   0x.... 0x....      LDR.W    R1,??DataTable5_64
   \   00004A64   0xA80B             ADD      R0,SP,#+44
   \   00004A66   0x.... 0x....      BL       sprintf
   4469                                      break;
   \   00004A6A   0xE00C             B.N      ??RoadBrd_ParseString_740
   4470                                    case S9_START:
   4471                                      sprintf( (char *)tempBffr2, "Record Type: S9_START: Starting execution location at a 16-bit address.\r\n" );
   \                     ??RoadBrd_ParseString_738: (+1)
   \   00004A6C   0x.... 0x....      LDR.W    R1,??DataTable5_65
   \   00004A70   0xA80B             ADD      R0,SP,#+44
   \   00004A72   0x.... 0x....      BL       sprintf
   4472                                      break;
   \   00004A76   0xE006             B.N      ??RoadBrd_ParseString_740
   \                     ??RoadBrd_ParseString_585:
   \   00004A78   0x........         DC32     ?_279
   4473                                    default:
   4474                                      sprintf( (char *)tempBffr2, "Record Type: UNKNOWN.\r\n" );
   \                     ??RoadBrd_ParseString_739: (+1)
   \   00004A7C   0x.... 0x....      LDR.W    R1,??DataTable5_66
   \   00004A80   0xA80B             ADD      R0,SP,#+44
   \   00004A82   0x.... 0x....      BL       sprintf
   4475                                      break;
   4476                                  } // EndSwitch (Srec_Elem.RecordType)
   4477          #ifdef NUCLEO
   4478                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   4479          #else
   4480                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \                     ??RoadBrd_ParseString_740: (+1)
   \   00004A86   0xA90B             ADD      R1,SP,#+44
   \   00004A88   0x2000             MOVS     R0,#+0
   \   00004A8A   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00004A8E   0x0006             MOVS     R6,R0
   4481          #endif
   4482                                  if (Status != HAL_OK)
   \   00004A90   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00004A92   0x2E00             CMP      R6,#+0
   \   00004A94   0xD002             BEQ.N    ??RoadBrd_ParseString_741
   4483                                    return Status;
   \   00004A96   0x0030             MOVS     R0,R6
   \   00004A98   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00004A9A   0xE126             B.N      ??RoadBrd_ParseString_4
   4484                                  // Display Byte Count Field.
   4485                                  sprintf( (char *)tempBffr2, "Byte Count: %08x\r\n", Srec_Elem.ByteCount );
   \                     ??RoadBrd_ParseString_741: (+1)
   \   00004A9C   0xF8DD 0x2468      LDR      R2,[SP, #+1128]
   \   00004AA0   0x.... 0x....      LDR.W    R1,??DataTable5_67
   \   00004AA4   0xA80B             ADD      R0,SP,#+44
   \   00004AA6   0x.... 0x....      BL       sprintf
   4486          #ifdef NUCLEO
   4487                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   4488          #else
   4489                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00004AAA   0xA90B             ADD      R1,SP,#+44
   \   00004AAC   0x2000             MOVS     R0,#+0
   \   00004AAE   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00004AB2   0x0006             MOVS     R6,R0
   4490          #endif
   4491                                  if (Status != HAL_OK)
   \   00004AB4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00004AB6   0x2E00             CMP      R6,#+0
   \   00004AB8   0xD004             BEQ.N    ??RoadBrd_ParseString_742
   4492                                    return Status;
   \   00004ABA   0x0030             MOVS     R0,R6
   \   00004ABC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00004ABE   0xE114             B.N      ??RoadBrd_ParseString_4
   \                     ??RoadBrd_ParseString_587:
   \   00004AC0   0x........         DC32     ?_280
   4493                                  // Display Address Field.
   4494                                  sprintf( (char *)tempBffr2, "Address: %08x\r\n", Srec_Elem.Address );
   \                     ??RoadBrd_ParseString_742: (+1)
   \   00004AC4   0xF8DD 0x246C      LDR      R2,[SP, #+1132]
   \   00004AC8   0x.... 0x....      LDR.W    R1,??DataTable5_68
   \   00004ACC   0xA80B             ADD      R0,SP,#+44
   \   00004ACE   0x.... 0x....      BL       sprintf
   4495          #ifdef NUCLEO
   4496                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   4497          #else
   4498                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00004AD2   0xA90B             ADD      R1,SP,#+44
   \   00004AD4   0x2000             MOVS     R0,#+0
   \   00004AD6   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00004ADA   0x0006             MOVS     R6,R0
   4499          #endif
   4500                                  // If S-Record Type is type 0 then display Buffer as String terminated by nulls.
   4501                                  if (Srec_Elem.RecordType == S0_HEADER)
   \   00004ADC   0xF89D 0x0464      LDRB     R0,[SP, #+1124]
   \   00004AE0   0x2800             CMP      R0,#+0
   \   00004AE2   0xD10F             BNE.N    ??RoadBrd_ParseString_743
   4502                                  {
   4503                                    sprintf( (char *)tempBffr2, "Header: %s\r\n", (char *)Srec_Elem.Data);
   \   00004AE4   0xAAFF             ADD      R2,SP,#+1020
   \   00004AE6   0x3275             ADDS     R2,R2,#+117
   \   00004AE8   0x.... 0x....      LDR.W    R1,??DataTable5_69
   \   00004AEC   0xA80B             ADD      R0,SP,#+44
   \   00004AEE   0x.... 0x....      BL       sprintf
   4504          #ifdef NUCLEO
   4505                                    Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   4506          #else
   4507                                    Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00004AF2   0xA90B             ADD      R1,SP,#+44
   \   00004AF4   0x2000             MOVS     R0,#+0
   \   00004AF6   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00004AFA   0x0006             MOVS     R6,R0
   \   00004AFC   0xE03C             B.N      ??RoadBrd_ParseString_744
   \   00004AFE   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_588:
   \   00004B00   0x........         DC32     ?_281
   4508          #endif
   4509                                  }
   4510                                  else
   4511                                  {
   4512                                    // Dump Buffer of S-Record.
   4513                                    y=0;
   \                     ??RoadBrd_ParseString_743: (+1)
   \   00004B04   0x2000             MOVS     R0,#+0
   \   00004B06   0x4680             MOV      R8,R0
   4514                                    sprintf( (char *)tempBffr2, "" );
   \   00004B08   0x....             ADR.N    R1,??DataTable4_4  ;; ""
   \   00004B0A   0xA80B             ADD      R0,SP,#+44
   \   00004B0C   0x.... 0x....      BL       sprintf
   4515                                    for (x=0; x<BYTE_BFFR_SIZE; x++)
   \   00004B10   0x2000             MOVS     R0,#+0
   \   00004B12   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_745: (+1)
   \   00004B14   0x2F2D             CMP      R7,#+45
   \   00004B16   0xDA2F             BGE.N    ??RoadBrd_ParseString_744
   4516                                    {
   4517                                      sprintf( (char *)tempBffr3, "%02x ", Srec_Elem.Data[x]);
   \   00004B18   0xA8FF             ADD      R0,SP,#+1020
   \   00004B1A   0x3068             ADDS     R0,R0,#+104
   \   00004B1C   0x4438             ADD      R0,R0,R7
   \   00004B1E   0x7B42             LDRB     R2,[R0, #+13]
   \   00004B20   0x.... 0x....      LDR.W    R1,??DataTable5_70
   \   00004B24   0xA82B             ADD      R0,SP,#+172
   \   00004B26   0x.... 0x....      BL       sprintf
   4518                                      strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   00004B2A   0xA92B             ADD      R1,SP,#+172
   \   00004B2C   0xA80B             ADD      R0,SP,#+44
   \   00004B2E   0x.... 0x....      BL       strcat
   4519                                      y++;
   \   00004B32   0xF118 0x0801      ADDS     R8,R8,#+1
   4520                                      if (y>=16)
   \   00004B36   0xF1B8 0x0F10      CMP      R8,#+16
   \   00004B3A   0xDB14             BLT.N    ??RoadBrd_ParseString_746
   4521                                      {
   4522                                        strcat( (char *)tempBffr2, "\r\n" );
   \   00004B3C   0x....             ADR.N    R1,??DataTable4_7  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00004B3E   0xA80B             ADD      R0,SP,#+44
   \   00004B40   0x.... 0x....      BL       strcat
   4523                                        y=0;
   \   00004B44   0x2000             MOVS     R0,#+0
   \   00004B46   0x4680             MOV      R8,R0
   4524          #ifdef NUCLEO
   4525                                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   4526          #else
   4527                                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00004B48   0xA90B             ADD      R1,SP,#+44
   \   00004B4A   0x2000             MOVS     R0,#+0
   \   00004B4C   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00004B50   0x0006             MOVS     R6,R0
   4528          #endif
   4529                                        if (Status != HAL_OK)
   \   00004B52   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00004B54   0x2E00             CMP      R6,#+0
   \   00004B56   0xD002             BEQ.N    ??RoadBrd_ParseString_747
   4530                                          return Status;
   \   00004B58   0x0030             MOVS     R0,R6
   \   00004B5A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00004B5C   0xE0C5             B.N      ??RoadBrd_ParseString_4
   4531                                        sprintf( (char *)tempBffr2, "" );
   \                     ??RoadBrd_ParseString_747: (+1)
   \   00004B5E   0x....             ADR.N    R1,??DataTable4_4  ;; ""
   \   00004B60   0xA80B             ADD      R0,SP,#+44
   \   00004B62   0x.... 0x....      BL       sprintf
   4532                                      }
   4533                                    }
   \                     ??RoadBrd_ParseString_746: (+1)
   \   00004B66   0x1C7F             ADDS     R7,R7,#+1
   \   00004B68   0xE7D4             B.N      ??RoadBrd_ParseString_745
   \   00004B6A   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_591:
   \   00004B6C   0x........         DC32     ?_21
   \   00004B70   0x........         DC32     ?_282
   \   00004B74   0x........         DC32     ?_283
   4534                                  }
   4535                                  // Finally Display Checksum.
   4536                                  sprintf( (char *)tempBffr2, "Checksum: %02x\r\n", Srec_Elem.Checksum );
   \                     ??RoadBrd_ParseString_744: (+1)
   \   00004B78   0xF89D 0x2470      LDRB     R2,[SP, #+1136]
   \   00004B7C   0x.... 0x....      LDR.W    R1,??DataTable5_71
   \   00004B80   0xA80B             ADD      R0,SP,#+44
   \   00004B82   0x.... 0x....      BL       sprintf
   \   00004B86   0xE004             B.N      ??RoadBrd_ParseString_728
   4537                                }// EndElse (Status != HAL_OK)..Parse_srecord
   4538                              } // EndIf (Numbr_Rcrds == 2)
   4539                              else
   4540                              {
   4541                                strcpy( (char *)tempBffr2, "TS SYNTAX ERROR: Too many parameters.\r\n");
   \                     ??RoadBrd_ParseString_717: (+1)
   \   00004B88   0x.... 0x....      LDR.W    R1,??DataTable5_72
   \   00004B8C   0xA80B             ADD      R0,SP,#+44
   \   00004B8E   0x.... 0x....      BL       strcpy
   4542                              } // EndElse (Numbr_Rcrds == 2)
   4543                              break;
   \                     ??RoadBrd_ParseString_728: (+1)
   \   00004B92   0xE016             B.N      ??RoadBrd_ParseString_289
   \                     ??RoadBrd_ParseString_594:
   \   00004B94   0x........         DC32     ?_284
   \   00004B98   0x........         DC32     ?_285
   \   00004B9C   0x........         DC32     ?_286
   4544          //**************************************************************************************************
   4545                            default:
   4546                              // Is this a BLE Operation?
   4547                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_301: (+1)
   \   00004BA0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004BA2   0x2D00             CMP      R5,#+0
   \   00004BA4   0xD009             BEQ.N    ??RoadBrd_ParseString_748
   4548                              {
   4549                                // Yes...Build and Send BLE Response NOW.
   4550                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00004BA6   0x....             LDR.N    R1,??DataTable5_35
   \   00004BA8   0xA80B             ADD      R0,SP,#+44
   \   00004BAA   0x.... 0x....      BL       strcpy
   4551                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004BAE   0xA80B             ADD      R0,SP,#+44
   \   00004BB0   0x.... 0x....      BL       strlen
   \   00004BB4   0xA90B             ADD      R1,SP,#+44
   \   00004BB6   0x.... 0x....      BL       BGM111_Transmit
   4552                              }
   4553                              
   4554                              // ERROR if we get here.. 
   4555                              strcpy( (char *)tempBffr2, "ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_748: (+1)
   \   00004BBA   0x....             LDR.N    R1,??DataTable5_27
   \   00004BBC   0xA80B             ADD      R0,SP,#+44
   \   00004BBE   0x.... 0x....      BL       strcpy
   4556                              break;
   4557                           
   4558                          } //EndSwitch ( tempBffr[1] )
   4559                        } //EndElse (Size <= 1)
   4560                        break;
   \                     ??RoadBrd_ParseString_289: (+1)
   \   00004BC2   0xE010             B.N      ??RoadBrd_ParseString_26
   4561          #if 0
   4562          //**************************************************************************************************
   4563                      case 'S':
   4564                        // Sleep Mode. 
   4565                        switch( tempBffr[1] )
   4566                        {
   4567          //++++++++++++++++++++++++++++++++++++++++++  5V Power Supply Commands.
   4568                          case 'S':
   4569                            // Is this a BLE Operation?
   4570                            if ( BLE_Flag )
   4571                            {
   4572                              // Yes...Build and Send BLE Response NOW.
   4573                              strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   4574                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   4575                            }
   4576                            
   4577                            strcpy( (char *)tempBffr2, "Micro in Sleep Mode NOW.\r\n");
   4578          #ifdef NUCLEO
   4579                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   4580          #else
   4581                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   4582          #endif
   4583                            if (Status != HAL_OK)
   4584                              return Status;
   4585                            // Sleep Micro NOW!
   4586                            //sleep();
   4587                            break;
   4588                          case 'D':
   4589                            // Is this a BLE Operation?
   4590                            if ( BLE_Flag )
   4591                            {
   4592                              // Yes...Build and Send BLE Response NOW.
   4593                              strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   4594                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   4595                            }
   4596                            
   4597                            // Turn off 5V Power Supply.
   4598                            strcpy( (char *)tempBffr2, "Micro in Deep Sleep Mode NOW.\r\n");
   4599          #ifdef NUCLEO
   4600                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   4601          #else
   4602                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   4603          #endif
   4604                            if (Status != HAL_OK)
   4605                              return Status;
   4606                            // Sleep Micro NOW!
   4607                            //deepsleep();
   4608                            break;
   4609                        }
   4610                        break;
   4611          #endif
   4612          //++++++++++++++++++++++++++++++++++++++++++  Unknown Command.
   4613                      default:
   4614                        // Is this a BLE Operation?
   4615                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_22: (+1)
   \   00004BC4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004BC6   0x2D00             CMP      R5,#+0
   \   00004BC8   0xD009             BEQ.N    ??RoadBrd_ParseString_749
   4616                        {
   4617                          // Yes...Build and Send BLE Response NOW.
   4618                          strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00004BCA   0x....             LDR.N    R1,??DataTable5_35
   \   00004BCC   0xA80B             ADD      R0,SP,#+44
   \   00004BCE   0x.... 0x....      BL       strcpy
   4619                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004BD2   0xA80B             ADD      R0,SP,#+44
   \   00004BD4   0x.... 0x....      BL       strlen
   \   00004BD8   0xA90B             ADD      R1,SP,#+44
   \   00004BDA   0x.... 0x....      BL       BGM111_Transmit
   4620                        }
   4621                        
   4622                        // ERROR if we get here.. 
   4623                        strcpy( (char *)tempBffr2, "ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_749: (+1)
   \   00004BDE   0x....             LDR.N    R1,??DataTable5_27
   \   00004BE0   0xA80B             ADD      R0,SP,#+44
   \   00004BE2   0x.... 0x....      BL       strcpy
   4624                        break;
   4625                      } // EndSwitch
   4626                      
   4627          
   4628                      // Test last I2C Status to determine next msg.
   4629                      switch( Status )
   \                     ??RoadBrd_ParseString_26: (+1)
   \   00004BE6   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00004BE8   0x2E00             CMP      R6,#+0
   \   00004BEA   0xD009             BEQ.N    ??RoadBrd_ParseString_750
   \   00004BEC   0x2E02             CMP      R6,#+2
   \   00004BEE   0xD043             BEQ.N    ??RoadBrd_ParseString_751
   \   00004BF0   0xD307             BCC.N    ??RoadBrd_ParseString_752
   \   00004BF2   0x2E03             CMP      R6,#+3
   \   00004BF4   0xD04E             BEQ.N    ??RoadBrd_ParseString_753
   \   00004BF6   0xE054             B.N      ??RoadBrd_ParseString_754
   \                     ??RoadBrd_ParseString_600:
   \   00004BF8   0x........         DC32     ?_287
   \   00004BFC   0x........         DC32     ?_288
   4630                      {
   4631                        case HAL_OK:
   4632                          break;
   \                     ??RoadBrd_ParseString_750: (+1)
   \   00004C00   0xE055             B.N      ??RoadBrd_ParseString_755
   4633                        case HAL_ERROR:
   4634                          // Determine what kind of error.
   4635                          Err_code = RoadBrd_I2C_GetError();
   \                     ??RoadBrd_ParseString_752: (+1)
   \   00004C02   0x.... 0x....      BL       RoadBrd_I2C_GetError
   \   00004C06   0x9046             STR      R0,[SP, #+280]
   4636                          switch( Err_code )
   \   00004C08   0x9846             LDR      R0,[SP, #+280]
   \   00004C0A   0x2801             CMP      R0,#+1
   \   00004C0C   0xD00A             BEQ.N    ??RoadBrd_ParseString_756
   \   00004C0E   0x2802             CMP      R0,#+2
   \   00004C10   0xD00D             BEQ.N    ??RoadBrd_ParseString_757
   \   00004C12   0x2804             CMP      R0,#+4
   \   00004C14   0xD012             BEQ.N    ??RoadBrd_ParseString_758
   \   00004C16   0x2808             CMP      R0,#+8
   \   00004C18   0xD015             BEQ.N    ??RoadBrd_ParseString_759
   \   00004C1A   0x2810             CMP      R0,#+16
   \   00004C1C   0xD018             BEQ.N    ??RoadBrd_ParseString_760
   \   00004C1E   0x2820             CMP      R0,#+32
   \   00004C20   0xD01E             BEQ.N    ??RoadBrd_ParseString_761
   \   00004C22   0xE022             B.N      ??RoadBrd_ParseString_762
   4637                          {
   4638                            case HAL_I2C_ERROR_BERR:
   4639                              strcpy( (char *)tempBffr2, "I2C ERROR: BERR: Bus Error reported.\r\n");
   \                     ??RoadBrd_ParseString_756: (+1)
   \   00004C24   0x....             LDR.N    R1,??DataTable5_73
   \   00004C26   0xA80B             ADD      R0,SP,#+44
   \   00004C28   0x.... 0x....      BL       strcpy
   4640                              break;
   \   00004C2C   0xE021             B.N      ??RoadBrd_ParseString_763
   4641                            case HAL_I2C_ERROR_ARLO:
   4642                              strcpy( (char *)tempBffr2, "I2C ERROR: ARLO: Arbitration lost reported.\r\n");
   \                     ??RoadBrd_ParseString_757: (+1)
   \   00004C2E   0x....             LDR.N    R1,??DataTable5_74
   \   00004C30   0xA80B             ADD      R0,SP,#+44
   \   00004C32   0x.... 0x....      BL       strcpy
   4643                              break;
   \   00004C36   0xE01C             B.N      ??RoadBrd_ParseString_763
   \                     ??RoadBrd_ParseString_604:
   \   00004C38   0x........         DC32     ?_289
   4644                            case HAL_I2C_ERROR_AF:
   4645                              strcpy( (char *)tempBffr2, "I2C ERROR: AF: Acknowledge failure reported.\r\n");
   \                     ??RoadBrd_ParseString_758: (+1)
   \   00004C3C   0x....             LDR.N    R1,??DataTable5_75
   \   00004C3E   0xA80B             ADD      R0,SP,#+44
   \   00004C40   0x.... 0x....      BL       strcpy
   4646                              break;
   \   00004C44   0xE015             B.N      ??RoadBrd_ParseString_763
   4647                            case HAL_I2C_ERROR_OVR:
   4648                              strcpy( (char *)tempBffr2, "I2C ERROR: OVR: Overrun/Underrun reported.\r\n");
   \                     ??RoadBrd_ParseString_759: (+1)
   \   00004C46   0x....             LDR.N    R1,??DataTable5_76
   \   00004C48   0xA80B             ADD      R0,SP,#+44
   \   00004C4A   0x.... 0x....      BL       strcpy
   4649                              break;
   \   00004C4E   0xE010             B.N      ??RoadBrd_ParseString_763
   4650                            case HAL_I2C_ERROR_DMA:
   4651                              strcpy( (char *)tempBffr2, "I2C ERROR: DMA: DMA Error reported.\r\n");
   \                     ??RoadBrd_ParseString_760: (+1)
   \   00004C50   0x....             LDR.N    R1,??DataTable5_77
   \   00004C52   0xA80B             ADD      R0,SP,#+44
   \   00004C54   0x.... 0x....      BL       strcpy
   4652                              break;
   \   00004C58   0xE00B             B.N      ??RoadBrd_ParseString_763
   \   00004C5A   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_606:
   \   00004C5C   0x........         DC32     ?_290
   4653                            case HAL_I2C_ERROR_TIMEOUT:
   4654                              strcpy( (char *)tempBffr2, "I2C ERROR: TIMEOUT: Timeout Error reported.\r\n");
   \                     ??RoadBrd_ParseString_761: (+1)
   \   00004C60   0x....             LDR.N    R1,??DataTable5_78
   \   00004C62   0xA80B             ADD      R0,SP,#+44
   \   00004C64   0x.... 0x....      BL       strcpy
   4655                              break;
   \   00004C68   0xE003             B.N      ??RoadBrd_ParseString_763
   4656                            default:
   4657                              strcpy( (char *)tempBffr2, "I2C ERROR: Unknown Error reported.\r\n");
   \                     ??RoadBrd_ParseString_762: (+1)
   \   00004C6A   0x....             LDR.N    R1,??DataTable5_79
   \   00004C6C   0xA80B             ADD      R0,SP,#+44
   \   00004C6E   0x.... 0x....      BL       strcpy
   4658                              break;
   4659                           
   4660                          }
   4661                          // Re-Initialize I2C....It has been corrupted.
   4662                          MX_I2C1_Reset();
   \                     ??RoadBrd_ParseString_763: (+1)
   \   00004C72   0x.... 0x....      BL       MX_I2C1_Reset
   4663                          break;
   \   00004C76   0xE01A             B.N      ??RoadBrd_ParseString_755
   4664                        case HAL_BUSY:
   4665                          strcpy( (char *)tempBffr2, "I2C BUSY: I2C reported BUSY error.\r\n");
   \                     ??RoadBrd_ParseString_751: (+1)
   \   00004C78   0x....             LDR.N    R1,??DataTable5_80
   \   00004C7A   0xA80B             ADD      R0,SP,#+44
   \   00004C7C   0x.... 0x....      BL       strcpy
   4666                          // Re-Initialize I2C....It has been corrupted.
   4667                          MX_I2C1_Reset();
   \   00004C80   0x.... 0x....      BL       MX_I2C1_Reset
   4668                          break;
   \   00004C84   0xE013             B.N      ??RoadBrd_ParseString_755
   \   00004C86   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_608:
   \   00004C88   0x........         DC32     ?_291
   \   00004C8C   0x........         DC32     ?_292
   \   00004C90   0x........         DC32     ?_293
   4669                        case HAL_TIMEOUT:
   4670                          strcpy( (char *)tempBffr2, "I2C TIMEOUT: I2C reported TIMEOUT.\r\n");
   \                     ??RoadBrd_ParseString_753: (+1)
   \   00004C94   0x....             LDR.N    R1,??DataTable5_81
   \   00004C96   0xA80B             ADD      R0,SP,#+44
   \   00004C98   0x.... 0x....      BL       strcpy
   4671                          // Re-Initialize I2C....It has been corrupted.
   4672                          MX_I2C1_Reset();
   \   00004C9C   0x.... 0x....      BL       MX_I2C1_Reset
   4673                          break;
   \   00004CA0   0xE005             B.N      ??RoadBrd_ParseString_755
   4674                        default:  
   4675                          strcpy( (char *)tempBffr2, "I2C ERROR: I2C reported unnown error.\r\n");
   \                     ??RoadBrd_ParseString_754: (+1)
   \   00004CA2   0x....             LDR.N    R1,??DataTable5_82
   \   00004CA4   0xA80B             ADD      R0,SP,#+44
   \   00004CA6   0x.... 0x....      BL       strcpy
   4676                          // Re-Initialize I2C....It has been corrupted.
   4677                          MX_I2C1_Reset();
   \   00004CAA   0x.... 0x....      BL       MX_I2C1_Reset
   4678                          break;
   4679                      }
   4680                      // Send string to UART..
   4681          #ifdef NUCLEO
   4682                      Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);
   4683          #else
   4684                      Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \                     ??RoadBrd_ParseString_755: (+1)
   \   00004CAE   0xA90B             ADD      R1,SP,#+44
   \   00004CB0   0x2000             MOVS     R0,#+0
   \   00004CB2   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00004CB6   0x0006             MOVS     R6,R0
   4685          #endif
   4686                     if (Status != HAL_OK)
   \   00004CB8   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00004CBA   0x2E00             CMP      R6,#+0
   \   00004CBC   0xD004             BEQ.N    ??RoadBrd_ParseString_764
   4687                        return Status;
   \   00004CBE   0x0030             MOVS     R0,R6
   \   00004CC0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00004CC2   0xE012             B.N      ??RoadBrd_ParseString_4
   \                     ??RoadBrd_ParseString_610:
   \   00004CC4   0x........         DC32     ?_294
   4688                      // Send Prompt to UART..
   4689                      strcpy( (char *)tempBffr2, "\r\n\r\n> ");
   \                     ??RoadBrd_ParseString_764: (+1)
   \   00004CC8   0x....             LDR.N    R1,??DataTable5_83
   \   00004CCA   0xA80B             ADD      R0,SP,#+44
   \   00004CCC   0x.... 0x....      BL       strcpy
   4690          #ifdef NUCLEO
   4691                      Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);
   4692          #else
   4693                      Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00004CD0   0xA90B             ADD      R1,SP,#+44
   \   00004CD2   0x2000             MOVS     R0,#+0
   \   00004CD4   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00004CD8   0x0006             MOVS     R6,R0
   4694          #endif
   4695                      if (Status != HAL_OK)
   \   00004CDA   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00004CDC   0x2E00             CMP      R6,#+0
   \   00004CDE   0xD002             BEQ.N    ??RoadBrd_ParseString_3
   4696                        return Status;
   \   00004CE0   0x0030             MOVS     R0,R6
   \   00004CE2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00004CE4   0xE001             B.N      ??RoadBrd_ParseString_4
   4697              } // EndElse ( Bypass )
   4698            return Status;
   \                     ??RoadBrd_ParseString_3: (+1)
   \   00004CE6   0x0030             MOVS     R0,R6
   \   00004CE8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??RoadBrd_ParseString_4: (+1)
   \   00004CEA   0xF50D 0x6DA0      ADD      SP,SP,#+1280
   \   00004CEE   0xB00D             ADD      SP,SP,#+52
   \   00004CF0   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   \                     ??RoadBrd_ParseString_613:
   \   00004CF4   0x........         DC32     ?_295
   \   00004CF8   0x........         DC32     ?_296
   4699          }
   4700          
   4701          /**
   4702            * @brief  This function tests the passed string to make sure it is Hex format.
   4703            * @param  char *ptr: Ptr to string to be tested. NULL terminated
   4704            * @retval int: 1: String is HEX.
   4705            *              0:   String is not HEX.
   4706            */

   \                                 In section .text, align 2, keep-with-next
   4707          int isHexNum(char *ptr)
   4708          {
   \                     isHexNum: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   4709            int Size, x, test1;
   4710            
   4711            Size = strlen(ptr);
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       strlen
   \   0000000A   0x0005             MOVS     R5,R0
   4712            test1 = 0;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x0007             MOVS     R7,R0
   4713            for (x=0; x<Size; x++)
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x0006             MOVS     R6,R0
   \                     ??isHexNum_0: (+1)
   \   00000014   0x42AE             CMP      R6,R5
   \   00000016   0xDA16             BGE.N    ??isHexNum_1
   4714            {
   4715              if (((ptr[x] <= '9') && (ptr[x] >= '0')) ||
   4716                  ((ptr[x] <= 'F') && (ptr[x] >= 'A')))
   \   00000018   0x5DA0             LDRB     R0,[R4, R6]
   \   0000001A   0x283A             CMP      R0,#+58
   \   0000001C   0xDA02             BGE.N    ??isHexNum_2
   \   0000001E   0x5DA0             LDRB     R0,[R4, R6]
   \   00000020   0x2830             CMP      R0,#+48
   \   00000022   0xDA05             BGE.N    ??isHexNum_3
   \                     ??isHexNum_2: (+1)
   \   00000024   0x5DA0             LDRB     R0,[R4, R6]
   \   00000026   0x2847             CMP      R0,#+71
   \   00000028   0xDA05             BGE.N    ??isHexNum_4
   \   0000002A   0x5DA0             LDRB     R0,[R4, R6]
   \   0000002C   0x2841             CMP      R0,#+65
   \   0000002E   0xDB02             BLT.N    ??isHexNum_4
   4717                test1 = 0;
   \                     ??isHexNum_3: (+1)
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x0007             MOVS     R7,R0
   \   00000034   0xE001             B.N      ??isHexNum_5
   4718              else
   4719                test1 = 1;
   \                     ??isHexNum_4: (+1)
   \   00000036   0x2001             MOVS     R0,#+1
   \   00000038   0x0007             MOVS     R7,R0
   4720              if (test1 == 1)
   \                     ??isHexNum_5: (+1)
   \   0000003A   0x2F01             CMP      R7,#+1
   \   0000003C   0xD101             BNE.N    ??isHexNum_6
   4721                return 0;
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0xE002             B.N      ??isHexNum_7
   4722            }
   \                     ??isHexNum_6: (+1)
   \   00000042   0x1C76             ADDS     R6,R6,#+1
   \   00000044   0xE7E6             B.N      ??isHexNum_0
   4723            return 1;
   \                     ??isHexNum_1: (+1)
   \   00000046   0x2001             MOVS     R0,#+1
   \                     ??isHexNum_7: (+1)
   \   00000048   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
   4724          }
   4725          
   4726          /**
   4727            * @brief  This function converts the passed Hex String to an Integer value.
   4728            * @param  char *ptr: Ptr to string to be converted. NULL terminated
   4729            * @retval int: -1: Error in String
   4730            *              Value converted returned.
   4731            */

   \                                 In section .text, align 2, keep-with-next
   4732          int hatoi( char *ptr )
   4733          {
   \                     hatoi: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   4734            int Size, x;
   4735            int Value = 0;
   \   00000006   0x2700             MOVS     R7,#+0
   4736            int FinalValue = 0;
   \   00000008   0xF05F 0x0800      MOVS     R8,#+0
   4737            
   4738            Size = strlen(ptr);
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       strlen
   \   00000012   0x0005             MOVS     R5,R0
   4739            for (x=0; x<Size; x++)
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x0006             MOVS     R6,R0
   \                     ??hatoi_0: (+1)
   \   00000018   0x42AE             CMP      R6,R5
   \   0000001A   0xDA1A             BGE.N    ??hatoi_1
   4740            {
   4741              if ((ptr[x] <= '9') && (ptr[x] >= '0'))
   \   0000001C   0x5DA0             LDRB     R0,[R4, R6]
   \   0000001E   0x283A             CMP      R0,#+58
   \   00000020   0xDA06             BGE.N    ??hatoi_2
   \   00000022   0x5DA0             LDRB     R0,[R4, R6]
   \   00000024   0x2830             CMP      R0,#+48
   \   00000026   0xDB03             BLT.N    ??hatoi_2
   4742                Value = ptr[x] - '0';
   \   00000028   0x5DA0             LDRB     R0,[R4, R6]
   \   0000002A   0x3830             SUBS     R0,R0,#+48
   \   0000002C   0x0007             MOVS     R7,R0
   \   0000002E   0xE00C             B.N      ??hatoi_3
   4743              else if((ptr[x] <= 'F') && (ptr[x] >= 'A'))
   \                     ??hatoi_2: (+1)
   \   00000030   0x5DA0             LDRB     R0,[R4, R6]
   \   00000032   0x2847             CMP      R0,#+71
   \   00000034   0xDA06             BGE.N    ??hatoi_4
   \   00000036   0x5DA0             LDRB     R0,[R4, R6]
   \   00000038   0x2841             CMP      R0,#+65
   \   0000003A   0xDB03             BLT.N    ??hatoi_4
   4744                Value = ptr[x] - 'A' + 10;
   \   0000003C   0x5DA0             LDRB     R0,[R4, R6]
   \   0000003E   0x3837             SUBS     R0,R0,#+55
   \   00000040   0x0007             MOVS     R7,R0
   \   00000042   0xE002             B.N      ??hatoi_3
   4745              else
   4746                return -1;
   \                     ??hatoi_4: (+1)
   \   00000044   0xF05F 0x30FF      MOVS     R0,#-1
   \   00000048   0xE004             B.N      ??hatoi_5
   4747              FinalValue = FinalValue*16 + Value;
   \                     ??hatoi_3: (+1)
   \   0000004A   0xEB17 0x1808      ADDS     R8,R7,R8, LSL #+4
   4748            }
   \   0000004E   0x1C76             ADDS     R6,R6,#+1
   \   00000050   0xE7E2             B.N      ??hatoi_0
   4749            return FinalValue;
   \                     ??hatoi_1: (+1)
   \   00000052   0x4640             MOV      R0,R8
   \                     ??hatoi_5: (+1)
   \   00000054   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   4750          }
   4751          
   4752          

   \                                 In section .text, align 2, keep-with-next
   4753          bool Tst_Bypass( void)
   4754          {
   4755            return Bypass;
   \                     Tst_Bypass: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable5_38
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return
   4756          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x........         DC32     ParseString

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     BGMString

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     ?_297

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x........         DC32     ?_298

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x........         DC32     ?_299

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x........         DC32     ?_300

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x00 0x00          DC8      "",0x0,0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x........         DC32     ?_301

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   0x........         DC32     ?_128

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \   00000000   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \   00000000   0x........         DC32     ?_302

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_9:
   \   00000000   0x........         DC32     ?_303

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_10:
   \   00000000   0x........         DC32     ?_304

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_11:
   \   00000000   0x........         DC32     ?_305

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_12:
   \   00000000   0x........         DC32     ?_306

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_13:
   \   00000000   0x........         DC32     ?_307

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_14:
   \   00000000   0x........         DC32     ?_308

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x........         DC32     ?_309

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x........         DC32     ?_310

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x........         DC32     ?_311

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x........         DC32     ?_312

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x........         DC32     ?_313

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x........         DC32     ?_314

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x........         DC32     ?_315

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   0x........         DC32     ?_316

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_8:
   \   00000000   0x........         DC32     ?_317

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_9:
   \   00000000   0x........         DC32     ?_318

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_10:
   \   00000000   0x........         DC32     ?_319

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_11:
   \   00000000   0x........         DC32     ?_320

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_12:
   \   00000000   0x........         DC32     ?_321

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_13:
   \   00000000   0x........         DC32     ?_322

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_14:
   \   00000000   0x41200000         DC32     0x41200000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_15:
   \   00000000   0x........         DC32     ?_323

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_16:
   \   00000000   0x........         DC32     ?_324

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_17:
   \   00000000   0x........         DC32     ?_325

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_18:
   \   00000000   0x........         DC32     ?_326

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_19:
   \   00000000   0x........         DC32     ?_327

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_20:
   \   00000000   0x........         DC32     ?_328

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_21:
   \   00000000   0x........         DC32     ?_329

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_22:
   \   00000000   0x........         DC32     ?_330

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_23:
   \   00000000   0x........         DC32     ?_331

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_24:
   \   00000000   0x........         DC32     ?_332

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_25:
   \   00000000   0x........         DC32     ?_333

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_26:
   \   00000000   0x........         DC32     ?_334

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_27:
   \   00000000   0x........         DC32     ?_42

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_28:
   \   00000000   0x........         DC32     ?_335

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_29:
   \   00000000   0x........         DC32     ?_336

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_30:
   \   00000000   0x........         DC32     ?_337

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_31:
   \   00000000   0x........         DC32     ?_338

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_32:
   \   00000000   0x........         DC32     ?_339

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_33:
   \   00000000   0x........         DC32     ?_340

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_34:
   \   00000000   0x........         DC32     ?_341

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_35:
   \   00000000   0x........         DC32     ?_25

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_36:
   \   00000000   0x........         DC32     ?_342

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_37:
   \   00000000   0x........         DC32     ?_343

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_38:
   \   00000000   0x........         DC32     Bypass

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_39:
   \   00000000   0x........         DC32     ?_344

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_40:
   \   00000000   0x........         DC32     ?_345

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_41:
   \   00000000   0x........         DC32     ?_346

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_42:
   \   00000000   0x........         DC32     ?_347

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_43:
   \   00000000   0x........         DC32     ?_348

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_44:
   \   00000000   0x........         DC32     ?_349

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_45:
   \   00000000   0x........         DC32     ?_350

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_46:
   \   00000000   0x........         DC32     ?_351

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_47:
   \   00000000   0x........         DC32     ?_352

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_48:
   \   00000000   0x........         DC32     ?_353

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_49:
   \   00000000   0x........         DC32     ?_354

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_50:
   \   00000000   0x........         DC32     ?_355

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_51:
   \   00000000   0x........         DC32     ?_356

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_52:
   \   00000000   0x........         DC32     ?_357

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_53:
   \   00000000   0x........         DC32     ?_358

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_54:
   \   00000000   0x........         DC32     ?_359

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_55:
   \   00000000   0x........         DC32     ?_360

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_56:
   \   00000000   0x........         DC32     ?_361

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_57:
   \   00000000   0x........         DC32     ?_362

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_58:
   \   00000000   0x........         DC32     ?_363

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_59:
   \   00000000   0x........         DC32     ?_364

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_60:
   \   00000000   0x........         DC32     ?_365

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_61:
   \   00000000   0x........         DC32     ?_366

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_62:
   \   00000000   0x........         DC32     ?_367

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_63:
   \   00000000   0x........         DC32     ?_368

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_64:
   \   00000000   0x........         DC32     ?_369

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_65:
   \   00000000   0x........         DC32     ?_370

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_66:
   \   00000000   0x........         DC32     ?_371

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_67:
   \   00000000   0x........         DC32     ?_372

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_68:
   \   00000000   0x........         DC32     ?_373

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_69:
   \   00000000   0x........         DC32     ?_374

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_70:
   \   00000000   0x........         DC32     ?_375

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_71:
   \   00000000   0x........         DC32     ?_376

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_72:
   \   00000000   0x........         DC32     ?_377

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_73:
   \   00000000   0x........         DC32     ?_378

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_74:
   \   00000000   0x........         DC32     ?_379

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_75:
   \   00000000   0x........         DC32     ?_380

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_76:
   \   00000000   0x........         DC32     ?_381

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_77:
   \   00000000   0x........         DC32     ?_382

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_78:
   \   00000000   0x........         DC32     ?_383

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_79:
   \   00000000   0x........         DC32     ?_384

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_80:
   \   00000000   0x........         DC32     ?_385

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_81:
   \   00000000   0x........         DC32     ?_386

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_82:
   \   00000000   0x........         DC32     ?_387

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_83:
   \   00000000   0x........         DC32     ?_388

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x3C 0x53          DC8 "<SENT:%s>\015\012\015\012"
   \              0x45 0x4E    
   \              0x54 0x3A    
   \              0x25 0x73    
   \              0x3E 0x0D    
   \              0x0A 0x0D    
   \              0x0A 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x0D 0x0A          DC8 0DH, 0AH, 0DH, 0AH, 20H, 54H, 2EH, 2EH
   \              0x0D 0x0A    
   \              0x20 0x54    
   \              0x2E 0x2E    
   \   00000008   0x2E 0x2E          DC8 2EH, 2EH, 2EH, 2EH, 2EH, 2EH, 54H, 45H
   \              0x2E 0x2E    
   \              0x2E 0x2E    
   \              0x54 0x45    
   \   00000010   0x52 0x4D          DC8 52H, 4DH, 49H, 4EH, 41H, 54H, 49H, 4EH
   \              0x49 0x4E    
   \              0x41 0x54    
   \              0x49 0x4E    
   \   00000018   0x47 0x20          DC8 47H, 20H, 4DH, 4FH, 4EH, 49H, 54H, 4FH
   \              0x4D 0x4F    
   \              0x4E 0x49    
   \              0x54 0x4F    
   \   00000020   0x52 0x20          DC8 52H, 20H, 4DH, 4FH, 44H, 45H, 2EH, 2EH
   \              0x4D 0x4F    
   \              0x44 0x45    
   \              0x2E 0x2E    
   \   00000028   0x2E 0x2E          DC8 2EH, 2EH, 2EH, 2EH, 2EH, 2EH, 2EH, 0DH
   \              0x2E 0x2E    
   \              0x2E 0x2E    
   \              0x2E 0x0D    
   \   00000030   0x0A 0x0D          DC8 0AH, 0DH, 0AH, 3EH, 20H, 0
   \              0x0A 0x3E    
   \              0x20 0x00    
   \   00000036   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_RDSNDBFFR_FILL</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x52 0x44    
   \              0x53 0x4E    
   \              0x44 0x42    
   \              0x46 0x46    
   \              0x52 0x5F    
   \              0x46 0x49    
   \              0x4C 0x4C    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x52 0x6F          DC8 52H, 6FH, 61H, 64H, 20H, 53H, 6FH, 75H
   \              0x61 0x64    
   \              0x20 0x53    
   \              0x6F 0x75    
   \   00000008   0x6E 0x64          DC8 6EH, 64H, 3AH, 20H, 52H, 6FH, 61H, 64H
   \              0x3A 0x20    
   \              0x52 0x6F    
   \              0x61 0x64    
   \   00000010   0x20 0x53          DC8 20H, 53H, 6FH, 75H, 6EH, 64H, 20H, 6CH
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x20 0x6C    
   \   00000018   0x6F 0x61          DC8 6FH, 61H, 64H, 65H, 64H, 2CH, 20H, 70H
   \              0x64 0x65    
   \              0x64 0x2C    
   \              0x20 0x70    
   \   00000020   0x72 0x6F          DC8 72H, 6FH, 63H, 65H, 73H, 73H, 65H, 64H
   \              0x63 0x65    
   \              0x73 0x73    
   \              0x65 0x64    
   \   00000028   0x2C 0x20          DC8 2CH, 20H, 61H, 6EH, 64H, 20H, 73H, 65H
   \              0x61 0x6E    
   \              0x64 0x20    
   \              0x73 0x65    
   \   00000030   0x6E 0x74          DC8 6EH, 74H, 20H, 74H, 6FH, 20H, 46H, 46H
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x46 0x46    
   \   00000038   0x54 0x20          DC8 54H, 20H, 42H, 69H, 6EH, 73H, 2EH, 0DH
   \              0x42 0x69    
   \              0x6E 0x73    
   \              0x2E 0x0D    
   \   00000040   0x0A 0x00          DC8 0AH, 0
   \   00000042   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_4:
   \   00000000   0x52 0x6F          DC8 "Road Sound: FFT Measurements 0-15.\015\012"
   \              0x61 0x64    
   \              0x20 0x53    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x3A 0x20    
   \              0x46 0x46    
   \              0x54 0x20    
   \              0x4D 0x65    
   \              0x61 0x73    
   \              0x75 0x72    
   \              0x65 0x6D    
   \              0x65 0x6E    
   \              0x74 0x73    
   \              0x20 0x30    
   \              0x2D 0x31    
   \              0x35 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_5:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_FFT0-15:%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x46    
   \              0x46 0x54    
   \              0x30 0x2D    
   \              0x31 0x35    
   \              0x3A 0x25    
   \              0x73 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_6:
   \   00000000   0x20 0x20          DC8 "     FFT Measurements 0-15: "
   \              0x20 0x20    
   \              0x20 0x46    
   \              0x46 0x54    
   \              0x20 0x4D    
   \              0x65 0x61    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x6D 0x65    
   \              0x6E 0x74    
   \              0x73 0x20    
   \              0x30 0x2D    
   \              0x31 0x35    
   \              0x3A 0x20    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \   00000000   0x0D 0x0A          DC8 "\015\012"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_8:
   \   00000000   0x52 0x6F          DC8 "Road Sound: FFT Measurements 16-31.\015\012"
   \              0x61 0x64    
   \              0x20 0x53    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x3A 0x20    
   \              0x46 0x46    
   \              0x54 0x20    
   \              0x4D 0x65    
   \              0x61 0x73    
   \              0x75 0x72    
   \              0x65 0x6D    
   \              0x65 0x6E    
   \              0x74 0x73    
   \              0x20 0x31    
   \              0x36 0x2D    
   \              0x33 0x31    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_9:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_FFT16-31:%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x46    
   \              0x46 0x54    
   \              0x31 0x36    
   \              0x2D 0x33    
   \              0x31 0x3A    
   \              0x25 0x73    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_10:
   \   00000000   0x20 0x20          DC8 "     FFT Measurements 16-31: "
   \              0x20 0x20    
   \              0x20 0x46    
   \              0x46 0x54    
   \              0x20 0x4D    
   \              0x65 0x61    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x6D 0x65    
   \              0x6E 0x74    
   \              0x73 0x20    
   \              0x31 0x36    
   \              0x2D 0x33    
   \              0x31 0x3A    
   \              0x20 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_11:
   \   00000000   0x52 0x6F          DC8 "Road Sound: FFT Measurements 32-47.\015\012"
   \              0x61 0x64    
   \              0x20 0x53    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x3A 0x20    
   \              0x46 0x46    
   \              0x54 0x20    
   \              0x4D 0x65    
   \              0x61 0x73    
   \              0x75 0x72    
   \              0x65 0x6D    
   \              0x65 0x6E    
   \              0x74 0x73    
   \              0x20 0x33    
   \              0x32 0x2D    
   \              0x34 0x37    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_12:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_FFT32-47:%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x46    
   \              0x46 0x54    
   \              0x33 0x32    
   \              0x2D 0x34    
   \              0x37 0x3A    
   \              0x25 0x73    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_13:
   \   00000000   0x20 0x20          DC8 "     FFT Measurements 32-47: "
   \              0x20 0x20    
   \              0x20 0x46    
   \              0x46 0x54    
   \              0x20 0x4D    
   \              0x65 0x61    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x6D 0x65    
   \              0x6E 0x74    
   \              0x73 0x20    
   \              0x33 0x32    
   \              0x2D 0x34    
   \              0x37 0x3A    
   \              0x20 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_14:
   \   00000000   0x52 0x6F          DC8 "Road Sound: FFT Measurements 48-63.\015\012"
   \              0x61 0x64    
   \              0x20 0x53    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x3A 0x20    
   \              0x46 0x46    
   \              0x54 0x20    
   \              0x4D 0x65    
   \              0x61 0x73    
   \              0x75 0x72    
   \              0x65 0x6D    
   \              0x65 0x6E    
   \              0x74 0x73    
   \              0x20 0x34    
   \              0x38 0x2D    
   \              0x36 0x33    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_15:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_FFT48-63:%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x46    
   \              0x46 0x54    
   \              0x34 0x38    
   \              0x2D 0x36    
   \              0x33 0x3A    
   \              0x25 0x73    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_16:
   \   00000000   0x20 0x20          DC8 "     FFT Measurements 48-63: "
   \              0x20 0x20    
   \              0x20 0x46    
   \              0x46 0x54    
   \              0x20 0x4D    
   \              0x65 0x61    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x6D 0x65    
   \              0x6E 0x74    
   \              0x73 0x20    
   \              0x34 0x38    
   \              0x2D 0x36    
   \              0x33 0x3A    
   \              0x20 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_17:
   \   00000000   0x52 0x6F          DC8 "Road Sound: Results of save Buffer.\015\012"
   \              0x61 0x64    
   \              0x20 0x53    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x3A 0x20    
   \              0x52 0x65    
   \              0x73 0x75    
   \              0x6C 0x74    
   \              0x73 0x20    
   \              0x6F 0x66    
   \              0x20 0x73    
   \              0x61 0x76    
   \              0x65 0x20    
   \              0x42 0x75    
   \              0x66 0x66    
   \              0x65 0x72    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_18:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_FFTBFFR_DUMP:"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x46    
   \              0x46 0x54    
   \              0x42 0x46    
   \              0x46 0x52    
   \              0x5F 0x44    
   \              0x55 0x4D    
   \              0x50 0x3A    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 1
   \   00000000   0x00               DC8 ""

   \                                 In section .rodata, align 4
   \                     ?_20:
   \   00000000   0x25 0x30          DC8 "%04d "
   \              0x34 0x64    
   \              0x20 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_21:
   \   00000000   0x3C 0x2F          DC8 "</STATUS>"
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_22:
   \   00000000   0x20 0x20          DC8 "     ---COMPLETE---"
   \              0x20 0x20    
   \              0x20 0x2D    
   \              0x2D 0x2D    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2D 0x2D    
   \              0x2D 0x00    

   \                                 In section .rodata, align 4
   \                     ?_23:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_FFTCLR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x46    
   \              0x46 0x54    
   \              0x43 0x4C    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_24:
   \   00000000   0x52 0x6F          DC8 "Road Sound: All buffers cleared.\015\012"
   \              0x61 0x64    
   \              0x20 0x53    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x3A 0x20    
   \              0x41 0x6C    
   \              0x6C 0x20    
   \              0x62 0x75    
   \              0x66 0x66    
   \              0x65 0x72    
   \              0x73 0x20    
   \              0x63 0x6C    
   \              0x65 0x61    
   \              0x72 0x65    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_25:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_NOSUPPORT</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x4E 0x4F    
   \              0x53 0x55    
   \              0x50 0x50    
   \              0x4F 0x52    
   \              0x54 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_26:
   \   00000000   0x49 0x6E          DC8 "Initialize Barometer Sensor Passed.\015\012"
   \              0x69 0x74    
   \              0x69 0x61    
   \              0x6C 0x69    
   \              0x7A 0x65    
   \              0x20 0x42    
   \              0x61 0x72    
   \              0x6F 0x6D    
   \              0x65 0x74    
   \              0x65 0x72    
   \              0x20 0x53    
   \              0x65 0x6E    
   \              0x73 0x6F    
   \              0x72 0x20    
   \              0x50 0x61    
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_27:
   \   00000000   0x49 0x6E          DC8 "Initialize Barometer Sensor FAILED.\015\012"
   \              0x69 0x74    
   \              0x69 0x61    
   \              0x6C 0x69    
   \              0x7A 0x65    
   \              0x20 0x42    
   \              0x61 0x72    
   \              0x6F 0x6D    
   \              0x65 0x74    
   \              0x65 0x72    
   \              0x20 0x53    
   \              0x65 0x6E    
   \              0x73 0x6F    
   \              0x72 0x20    
   \              0x46 0x41    
   \              0x49 0x4C    
   \              0x45 0x44    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_28:
   \   00000000   0x41 0x36          DC8 "A6 Command...Read Pressure Passed.\015\012"
   \              0x20 0x43    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x2E    
   \              0x2E 0x52    
   \              0x65 0x61    
   \              0x64 0x20    
   \              0x50 0x72    
   \              0x65 0x73    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x20 0x50    
   \              0x61 0x73    
   \              0x73 0x65    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_29:
   \   00000000   0x20 0x50          DC8 20H, 50H, 52H, 45H, 53H, 53H, 55H, 52H
   \              0x52 0x45    
   \              0x53 0x53    
   \              0x55 0x52    
   \   00000008   0x45 0x28          DC8 45H, 28H, 50H, 52H, 45H, 53H, 53H, 5FH
   \              0x50 0x52    
   \              0x45 0x53    
   \              0x53 0x5F    
   \   00000010   0x4F 0x55          DC8 4FH, 55H, 54H, 5FH, 48H, 2EH, 2EH, 2EH
   \              0x54 0x5F    
   \              0x48 0x2E    
   \              0x2E 0x2E    
   \   00000018   0x50 0x52          DC8 50H, 52H, 45H, 53H, 53H, 5FH, 4FH, 55H
   \              0x45 0x53    
   \              0x53 0x5F    
   \              0x4F 0x55    
   \   00000020   0x54 0x5F          DC8 54H, 5FH, 4CH, 2EH, 2EH, 2EH, 50H, 52H
   \              0x4C 0x2E    
   \              0x2E 0x2E    
   \              0x50 0x52    
   \   00000028   0x45 0x53          DC8 45H, 53H, 53H, 5FH, 4FH, 55H, 54H, 5FH
   \              0x53 0x5F    
   \              0x4F 0x55    
   \              0x54 0x5F    
   \   00000030   0x58 0x4C          DC8 58H, 4CH, 29H, 0DH, 0AH, 0
   \              0x29 0x0D    
   \              0x0A 0x00    
   \   00000036   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_30:
   \   00000000   0x20 0x50          DC8 " PRESSURE: %s/%s\015\012"
   \              0x52 0x45    
   \              0x53 0x53    
   \              0x55 0x52    
   \              0x45 0x3A    
   \              0x20 0x25    
   \              0x73 0x2F    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_31:
   \   00000000   0x3C 0x53          DC8 "<STATUS>PRESSURE: %s/%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x50 0x52    
   \              0x45 0x53    
   \              0x53 0x55    
   \              0x52 0x45    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_32:
   \   00000000   0x20 0x50          DC8 " PRESSURE:  "
   \              0x52 0x45    
   \              0x53 0x53    
   \              0x55 0x52    
   \              0x45 0x3A    
   \              0x20 0x20    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_33:
   \   00000000   0x20 0x20          DC8 "  -  %08x\015\012"
   \              0x2D 0x20    
   \              0x20 0x25    
   \              0x30 0x38    
   \              0x78 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_34:
   \   00000000   0x41 0x36          DC8 "A6 Command...Read Pressure FAILED.\015\012"
   \              0x20 0x43    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x2E    
   \              0x2E 0x52    
   \              0x65 0x61    
   \              0x64 0x20    
   \              0x50 0x72    
   \              0x65 0x73    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x20 0x46    
   \              0x41 0x49    
   \              0x4C 0x45    
   \              0x44 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_35:
   \   00000000   0x41 0x38          DC8 "A8 Command...Read Temperature Passed.\015\012"
   \              0x20 0x43    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x2E    
   \              0x2E 0x52    
   \              0x65 0x61    
   \              0x64 0x20    
   \              0x54 0x65    
   \              0x6D 0x70    
   \              0x65 0x72    
   \              0x61 0x74    
   \              0x75 0x72    
   \              0x65 0x20    
   \              0x50 0x61    
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_36:
   \   00000000   0x20 0x20          DC8 "     TEMP DATA: "
   \              0x20 0x20    
   \              0x20 0x54    
   \              0x45 0x4D    
   \              0x50 0x20    
   \              0x44 0x41    
   \              0x54 0x41    
   \              0x3A 0x20    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_37:
   \   00000000   0x20 0x20          DC8 "     TEMP DATA(Decimal): %d\015\012"
   \              0x20 0x20    
   \              0x20 0x54    
   \              0x45 0x4D    
   \              0x50 0x20    
   \              0x44 0x41    
   \              0x54 0x41    
   \              0x28 0x44    
   \              0x65 0x63    
   \              0x69 0x6D    
   \              0x61 0x6C    
   \              0x29 0x3A    
   \              0x20 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_38:
   \   00000000   0x20 0x20          DC8 "     TempC: "
   \              0x20 0x20    
   \              0x20 0x54    
   \              0x65 0x6D    
   \              0x70 0x43    
   \              0x3A 0x20    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_39:
   \   00000000   0x20 0x20          DC8 "     TempF: "
   \              0x20 0x20    
   \              0x20 0x54    
   \              0x65 0x6D    
   \              0x70 0x46    
   \              0x3A 0x20    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_40:
   \   00000000   0x42 0x61          DC8 "Barometer Sensor: WHO_AM_I Passed.\015\012"
   \              0x72 0x6F    
   \              0x6D 0x65    
   \              0x74 0x65    
   \              0x72 0x20    
   \              0x53 0x65    
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x3A 0x20    
   \              0x57 0x48    
   \              0x4F 0x5F    
   \              0x41 0x4D    
   \              0x5F 0x49    
   \              0x20 0x50    
   \              0x61 0x73    
   \              0x73 0x65    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_41:
   \   00000000   0x42 0x61          DC8 "Barometer Sensor: WHO_AM_I FAILED.\015\012"
   \              0x72 0x6F    
   \              0x6D 0x65    
   \              0x74 0x65    
   \              0x72 0x20    
   \              0x53 0x65    
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x3A 0x20    
   \              0x57 0x48    
   \              0x4F 0x5F    
   \              0x41 0x4D    
   \              0x5F 0x49    
   \              0x20 0x46    
   \              0x41 0x49    
   \              0x4C 0x45    
   \              0x44 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_42:
   \   00000000   0x45 0x52          DC8 "ERROR: Not a legal command.\015\012"
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x61    
   \              0x20 0x6C    
   \              0x65 0x67    
   \              0x61 0x6C    
   \              0x20 0x63    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_43:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_THERMAL_DUMP:"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x48 0x45    
   \              0x52 0x4D    
   \              0x41 0x4C    
   \              0x5F 0x44    
   \              0x55 0x4D    
   \              0x50 0x3A    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_44:
   \   00000000   0x56 0x6F          DC8 "Voltage Monitor/Shunt Voltage...\015\012"
   \              0x6C 0x74    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x4D 0x6F    
   \              0x6E 0x69    
   \              0x74 0x6F    
   \              0x72 0x2F    
   \              0x53 0x68    
   \              0x75 0x6E    
   \              0x74 0x20    
   \              0x56 0x6F    
   \              0x6C 0x74    
   \              0x61 0x67    
   \              0x65 0x2E    
   \              0x2E 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_45:
   \   00000000   0x20 0x20          DC8 "     Thermistor DATA: %s   %s/%s   %s/%s   %d\015\012"
   \              0x20 0x20    
   \              0x20 0x54    
   \              0x68 0x65    
   \              0x72 0x6D    
   \              0x69 0x73    
   \              0x74 0x6F    
   \              0x72 0x20    
   \              0x44 0x41    
   \              0x54 0x41    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x20 0x20    
   \              0x20 0x25    
   \              0x73 0x2F    
   \              0x25 0x73    
   \              0x20 0x20    
   \              0x20 0x25    
   \              0x73 0x2F    
   \              0x25 0x73    
   \              0x20 0x20    
   \              0x20 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_46:
   \   00000000   0x20 0x20          DC8 "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\015\012"
   \              0x20 0x20    
   \              0x20 0x47    
   \              0x72 0x69    
   \              0x64 0x20    
   \              0x33 0x33    
   \              0x20 0x44    
   \              0x41 0x54    
   \              0x41 0x3A    
   \              0x20 0x25    
   \              0x73 0x20    
   \              0x20 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x20    
   \              0x20 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x20    
   \              0x20 0x20    
   \              0x25 0x64    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_47:
   \   00000000   0x20 0x20          DC8 "     SHNT VLTG DATA: "
   \              0x20 0x20    
   \              0x20 0x53    
   \              0x48 0x4E    
   \              0x54 0x20    
   \              0x56 0x4C    
   \              0x54 0x47    
   \              0x20 0x44    
   \              0x41 0x54    
   \              0x41 0x3A    
   \              0x20 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_48:
   \   00000000   0x20 0x20          DC8 "     COMPLETE.\015\012"
   \              0x20 0x20    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_49:
   \   00000000   0x43 0x6F          DC8 43H, 6FH, 6FH, 6CH, 20H, 45H, 79H, 65H
   \              0x6F 0x6C    
   \              0x20 0x45    
   \              0x79 0x65    
   \   00000008   0x2F 0x47          DC8 2FH, 47H, 72H, 69H, 64H, 20H, 45H, 79H
   \              0x72 0x69    
   \              0x64 0x20    
   \              0x45 0x79    
   \   00000010   0x65 0x20          DC8 65H, 20H, 53H, 65H, 6EH, 73H, 6FH, 72H
   \              0x53 0x65    
   \              0x6E 0x73    
   \              0x6F 0x72    
   \   00000018   0x3A 0x20          DC8 3AH, 20H, 49H, 6EH, 69H, 74H, 69H, 61H
   \              0x49 0x6E    
   \              0x69 0x74    
   \              0x69 0x61    
   \   00000020   0x6C 0x69          DC8 6CH, 69H, 7AH, 61H, 74H, 69H, 6FH, 6EH
   \              0x7A 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \   00000028   0x20 0x43          DC8 20H, 43H, 6FH, 6DH, 70H, 6CH, 65H, 74H
   \              0x6F 0x6D    
   \              0x70 0x6C    
   \              0x65 0x74    
   \   00000030   0x65 0x2E          DC8 65H, 2EH, 0DH, 0AH, 0
   \              0x0D 0x0A    
   \              0x00         
   \   00000035   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_50:
   \   00000000   0x43 0x6F          DC8 "Cool Eye/Grid Eye Sensor: Reset Complete.\015\012"
   \              0x6F 0x6C    
   \              0x20 0x45    
   \              0x79 0x65    
   \              0x2F 0x47    
   \              0x72 0x69    
   \              0x64 0x20    
   \              0x45 0x79    
   \              0x65 0x20    
   \              0x53 0x65    
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x3A 0x20    
   \              0x52 0x65    
   \              0x73 0x65    
   \              0x74 0x20    
   \              0x43 0x6F    
   \              0x6D 0x70    
   \              0x6C 0x65    
   \              0x74 0x65    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_51:
   \   00000000   0x56 0x6F          DC8 "Voltage Monitor/Read Bus Voltage...\015\012"
   \              0x6C 0x74    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x4D 0x6F    
   \              0x6E 0x69    
   \              0x74 0x6F    
   \              0x72 0x2F    
   \              0x52 0x65    
   \              0x61 0x64    
   \              0x20 0x42    
   \              0x75 0x73    
   \              0x20 0x56    
   \              0x6F 0x6C    
   \              0x74 0x61    
   \              0x67 0x65    
   \              0x2E 0x2E    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_52:
   \   00000000   0x20 0x20          DC8 "     BUS VOLTAGE DATA: "
   \              0x20 0x20    
   \              0x20 0x42    
   \              0x55 0x53    
   \              0x20 0x56    
   \              0x4F 0x4C    
   \              0x54 0x41    
   \              0x47 0x45    
   \              0x20 0x44    
   \              0x41 0x54    
   \              0x41 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_53:
   \   00000000   0x3C 0x53          DC8 "<STATUS>BUS_VLTG:%s/%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x42 0x55    
   \              0x53 0x5F    
   \              0x56 0x4C    
   \              0x54 0x47    
   \              0x3A 0x25    
   \              0x73 0x2F    
   \              0x25 0x73    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_54:
   \   00000000   0x20 0x20          DC8 "     Bus Voltage: %s/%s\015\012"
   \              0x20 0x20    
   \              0x20 0x42    
   \              0x75 0x73    
   \              0x20 0x56    
   \              0x6F 0x6C    
   \              0x74 0x61    
   \              0x67 0x65    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x0D    
   \              0x0A 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_55:
   \   00000000   0x56 0x6F          DC8 "Voltage Monitor: Initialization Complete.\015\012"
   \              0x6C 0x74    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x4D 0x6F    
   \              0x6E 0x69    
   \              0x74 0x6F    
   \              0x72 0x3A    
   \              0x20 0x49    
   \              0x6E 0x69    
   \              0x74 0x69    
   \              0x61 0x6C    
   \              0x69 0x7A    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x43 0x6F    
   \              0x6D 0x70    
   \              0x6C 0x65    
   \              0x74 0x65    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_56:
   \   00000000   0x3C 0x53          DC8 "<STATUS>SHNT_VLTG:%s/%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x48    
   \              0x4E 0x54    
   \              0x5F 0x56    
   \              0x4C 0x54    
   \              0x47 0x3A    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_57:
   \   00000000   0x20 0x20          DC8 "     Shunt Voltage: %s/%s\015\012"
   \              0x20 0x20    
   \              0x20 0x53    
   \              0x68 0x75    
   \              0x6E 0x74    
   \              0x20 0x56    
   \              0x6F 0x6C    
   \              0x74 0x61    
   \              0x67 0x65    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_58:
   \   00000000   0x56 0x6F          DC8 "Voltage Monitor/Read Current...\015\012"
   \              0x6C 0x74    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x4D 0x6F    
   \              0x6E 0x69    
   \              0x74 0x6F    
   \              0x72 0x2F    
   \              0x52 0x65    
   \              0x61 0x64    
   \              0x20 0x43    
   \              0x75 0x72    
   \              0x72 0x65    
   \              0x6E 0x74    
   \              0x2E 0x2E    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_59:
   \   00000000   0x20 0x20          DC8 "     CURRENT DATA: "
   \              0x20 0x20    
   \              0x20 0x43    
   \              0x55 0x52    
   \              0x52 0x45    
   \              0x4E 0x54    
   \              0x20 0x44    
   \              0x41 0x54    
   \              0x41 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_60:
   \   00000000   0x3C 0x53          DC8 "<STATUS>SHNT_CRNT:%s/%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x48    
   \              0x4E 0x54    
   \              0x5F 0x43    
   \              0x52 0x4E    
   \              0x54 0x3A    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_61:
   \   00000000   0x20 0x20          DC8 "     Current: %s/%s\015\012"
   \              0x20 0x20    
   \              0x20 0x43    
   \              0x75 0x72    
   \              0x72 0x65    
   \              0x6E 0x74    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x0D    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_62:
   \   00000000   0x56 0x6F          DC8 "Voltage Monitor/Read Power...\015\012"
   \              0x6C 0x74    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x4D 0x6F    
   \              0x6E 0x69    
   \              0x74 0x6F    
   \              0x72 0x2F    
   \              0x52 0x65    
   \              0x61 0x64    
   \              0x20 0x50    
   \              0x6F 0x77    
   \              0x65 0x72    
   \              0x2E 0x2E    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_63:
   \   00000000   0x20 0x20          DC8 "     POWER DATA: "
   \              0x20 0x20    
   \              0x20 0x50    
   \              0x4F 0x57    
   \              0x45 0x52    
   \              0x20 0x44    
   \              0x41 0x54    
   \              0x41 0x3A    
   \              0x20 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_64:
   \   00000000   0x3C 0x53          DC8 "<STATUS>POWER:%s/%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x50 0x4F    
   \              0x57 0x45    
   \              0x52 0x3A    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_65:
   \   00000000   0x20 0x20          DC8 "     Power: %s/%s\015\012"
   \              0x20 0x20    
   \              0x20 0x50    
   \              0x6F 0x77    
   \              0x65 0x72    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_66:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_C_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x43 0x5F    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_67:
   \   00000000   0x48 0x75          DC8 "Humidity SENSOR...\015\012"
   \              0x6D 0x69    
   \              0x64 0x69    
   \              0x74 0x79    
   \              0x20 0x53    
   \              0x45 0x4E    
   \              0x53 0x4F    
   \              0x52 0x2E    
   \              0x2E 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_68:
   \   00000000   0x20 0x20          DC8 "     Humidity DATA: "
   \              0x20 0x20    
   \              0x20 0x48    
   \              0x75 0x6D    
   \              0x69 0x64    
   \              0x69 0x74    
   \              0x79 0x20    
   \              0x44 0x41    
   \              0x54 0x41    
   \              0x3A 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_69:
   \   00000000   0x20 0x20          DC8 "     Humidity DATA(Decimal): %d\015\012"
   \              0x20 0x20    
   \              0x20 0x48    
   \              0x75 0x6D    
   \              0x69 0x64    
   \              0x69 0x74    
   \              0x79 0x20    
   \              0x44 0x41    
   \              0x54 0x41    
   \              0x28 0x44    
   \              0x65 0x63    
   \              0x69 0x6D    
   \              0x61 0x6C    
   \              0x29 0x3A    
   \              0x20 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_70:
   \   00000000   0x3C 0x53          DC8 "<STATUS>HUMIDITY:%s/%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x48 0x55    
   \              0x4D 0x49    
   \              0x44 0x49    
   \              0x54 0x59    
   \              0x3A 0x25    
   \              0x73 0x2F    
   \              0x25 0x73    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_71:
   \   00000000   0x20 0x20          DC8 "     Humidity: %s/%s\015\012"
   \              0x20 0x20    
   \              0x20 0x48    
   \              0x75 0x6D    
   \              0x69 0x64    
   \              0x69 0x74    
   \              0x79 0x3A    
   \              0x20 0x25    
   \              0x73 0x2F    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_72:
   \   00000000   0x48 0x75          DC8 "Humidity Sensor: Initialization Complete.\015\012"
   \              0x6D 0x69    
   \              0x64 0x69    
   \              0x74 0x79    
   \              0x20 0x53    
   \              0x65 0x6E    
   \              0x73 0x6F    
   \              0x72 0x3A    
   \              0x20 0x49    
   \              0x6E 0x69    
   \              0x74 0x69    
   \              0x61 0x6C    
   \              0x69 0x7A    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x43 0x6F    
   \              0x6D 0x70    
   \              0x6C 0x65    
   \              0x74 0x65    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_73:
   \   00000000   0x20 0x20          DC8 "     Humidity: "
   \              0x20 0x20    
   \              0x20 0x48    
   \              0x75 0x6D    
   \              0x69 0x64    
   \              0x69 0x74    
   \              0x79 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_74:
   \   00000000   0x54 0x42          DC8 "TBD: Read Temp and Pressure NOT IMPLEMENTED\015\012"
   \              0x44 0x3A    
   \              0x20 0x52    
   \              0x65 0x61    
   \              0x64 0x20    
   \              0x54 0x65    
   \              0x6D 0x70    
   \              0x20 0x61    
   \              0x6E 0x64    
   \              0x20 0x50    
   \              0x72 0x65    
   \              0x73 0x73    
   \              0x75 0x72    
   \              0x65 0x20    
   \              0x4E 0x4F    
   \              0x54 0x20    
   \              0x49 0x4D    
   \              0x50 0x4C    
   \              0x45 0x4D    
   \              0x45 0x4E    
   \              0x54 0x45    
   \              0x44 0x0D    
   \              0x0A 0x00    
   \   0000002E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_75:
   \   00000000   0x4E 0x4F          DC8 "NO Action...(0x00).\015\012"
   \              0x20 0x41    
   \              0x63 0x74    
   \              0x69 0x6F    
   \              0x6E 0x2E    
   \              0x2E 0x2E    
   \              0x28 0x30    
   \              0x78 0x30    
   \              0x30 0x29    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_76:
   \   00000000   0x54 0x45          DC8 "TEMP SENSOR...\015\012"
   \              0x4D 0x50    
   \              0x20 0x53    
   \              0x45 0x4E    
   \              0x53 0x4F    
   \              0x52 0x2E    
   \              0x2E 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_77:
   \   00000000   0x3C 0x53          DC8 "<STATUS>TEMPC:%s/%s//TEMPF:%s/%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x54 0x45    
   \              0x4D 0x50    
   \              0x43 0x3A    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x2F    
   \              0x2F 0x54    
   \              0x45 0x4D    
   \              0x50 0x46    
   \              0x3A 0x25    
   \              0x73 0x2F    
   \              0x25 0x73    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000002A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_78:
   \   00000000   0x20 0x20          DC8 "     TempC: %s/%s     TempF: %s/%s\015\012"
   \              0x20 0x20    
   \              0x20 0x54    
   \              0x65 0x6D    
   \              0x70 0x43    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x54 0x65    
   \              0x6D 0x70    
   \              0x46 0x3A    
   \              0x20 0x25    
   \              0x73 0x2F    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_79:
   \   00000000   0x52 0x47          DC8 "RGB Color Light Sensor...\015\012"
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \              0x72 0x20    
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \              0x53 0x65    
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x2E 0x2E    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_80:
   \   00000000   0x20 0x52          DC8 20H, 52H, 47H, 42H, 28H, 52H, 45H, 44H
   \              0x47 0x42    
   \              0x28 0x52    
   \              0x45 0x44    
   \   00000008   0x6D 0x73          DC8 6DH, 73H, 62H, 2CH, 52H, 45H, 44H, 6CH
   \              0x62 0x2C    
   \              0x52 0x45    
   \              0x44 0x6C    
   \   00000010   0x73 0x62          DC8 73H, 62H, 2CH, 47H, 52H, 45H, 45H, 4EH
   \              0x2C 0x47    
   \              0x52 0x45    
   \              0x45 0x4E    
   \   00000018   0x6D 0x73          DC8 6DH, 73H, 62H, 2CH, 47H, 52H, 45H, 45H
   \              0x62 0x2C    
   \              0x47 0x52    
   \              0x45 0x45    
   \   00000020   0x4E 0x6C          DC8 4EH, 6CH, 73H, 62H, 2CH, 42H, 4CH, 55H
   \              0x73 0x62    
   \              0x2C 0x42    
   \              0x4C 0x55    
   \   00000028   0x45 0x6D          DC8 45H, 6DH, 73H, 62H, 2CH, 42H, 4CH, 55H
   \              0x73 0x62    
   \              0x2C 0x42    
   \              0x4C 0x55    
   \   00000030   0x45 0x6C          DC8 45H, 6CH, 73H, 62H, 29H, 0DH, 0AH, 0
   \              0x73 0x62    
   \              0x29 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_81:
   \   00000000   0x20 0x20          DC8 "       DATA: "
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x44    
   \              0x41 0x54    
   \              0x41 0x3A    
   \              0x20 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_82:
   \   00000000   0x3C 0x53          DC8 "<STATUS>RED:%s/GREEN:%s/BLUE:%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x52 0x45    
   \              0x44 0x3A    
   \              0x25 0x73    
   \              0x2F 0x47    
   \              0x52 0x45    
   \              0x45 0x4E    
   \              0x3A 0x25    
   \              0x73 0x2F    
   \              0x42 0x4C    
   \              0x55 0x45    
   \              0x3A 0x25    
   \              0x73 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_83:
   \   00000000   0x20 0x20          DC8 "    Red: "
   \              0x20 0x20    
   \              0x52 0x65    
   \              0x64 0x3A    
   \              0x20 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_84:
   \   00000000   0x20 0x20          DC8 "    Green: "
   \              0x20 0x20    
   \              0x47 0x72    
   \              0x65 0x65    
   \              0x6E 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_85:
   \   00000000   0x20 0x20          DC8 "    Blue: "
   \              0x20 0x20    
   \              0x42 0x6C    
   \              0x75 0x65    
   \              0x3A 0x20    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_86:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 3AH, 20H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x3A 0x20    
   \   00000018   0x49 0x6E          DC8 49H, 6EH, 69H, 74H, 69H, 61H, 6CH, 69H
   \              0x69 0x74    
   \              0x69 0x61    
   \              0x6C 0x69    
   \   00000020   0x7A 0x61          DC8 7AH, 61H, 74H, 69H, 6FH, 6EH, 20H, 43H
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x43    
   \   00000028   0x6F 0x6D          DC8 6FH, 6DH, 70H, 6CH, 65H, 74H, 65H, 20H
   \              0x70 0x6C    
   \              0x65 0x74    
   \              0x65 0x20    
   \   00000030   0x77 0x69          DC8 77H, 69H, 74H, 68H, 20H, 44H, 45H, 46H
   \              0x74 0x68    
   \              0x20 0x44    
   \              0x45 0x46    
   \   00000038   0x41 0x55          DC8 41H, 55H, 4CH, 54H, 20H, 56H, 61H, 6CH
   \              0x4C 0x54    
   \              0x20 0x56    
   \              0x61 0x6C    
   \   00000040   0x75 0x65          DC8 75H, 65H, 73H, 2EH, 0DH, 0AH, 0
   \              0x73 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000047   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_87:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 3AH, 20H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x3A 0x20    
   \   00000018   0x53 0x59          DC8 53H, 59H, 4EH, 54H, 41H, 58H, 20H, 45H
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \   00000020   0x72 0x72          DC8 72H, 72H, 6FH, 72H, 2EH, 20H, 50H, 61H
   \              0x6F 0x72    
   \              0x2E 0x20    
   \              0x50 0x61    
   \   00000028   0x72 0x61          DC8 72H, 61H, 6DH, 65H, 74H, 65H, 72H, 73H
   \              0x6D 0x65    
   \              0x74 0x65    
   \              0x72 0x73    
   \   00000030   0x20 0x61          DC8 20H, 61H, 72H, 65H, 20H, 6EH, 6FH, 74H
   \              0x72 0x65    
   \              0x20 0x6E    
   \              0x6F 0x74    
   \   00000038   0x20 0x63          DC8 20H, 63H, 6FH, 72H, 72H, 65H, 63H, 74H
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \   00000040   0x2E 0x0D          DC8 2EH, 0DH, 0AH, 0
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_88:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 4EH, 6FH, 74H
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \   00000028   0x20 0x63          DC8 20H, 63H, 6FH, 72H, 72H, 65H, 63H, 74H
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \   00000030   0x20 0x66          DC8 20H, 66H, 6FH, 72H, 6DH, 61H, 74H, 2EH
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \   00000038   0x20 0x50          DC8 20H, 50H, 75H, 6EH, 63H, 74H, 75H, 61H
   \              0x75 0x6E    
   \              0x63 0x74    
   \              0x75 0x61    
   \   00000040   0x74 0x69          DC8 74H, 69H, 6FH, 6EH, 21H, 0DH, 0AH, 0
   \              0x6F 0x6E    
   \              0x21 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_89:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 50H, 61H, 72H, 61H
   \              0x52 0x3A    
   \              0x50 0x61    
   \              0x72 0x61    
   \   00000028   0x6D 0x65          DC8 6DH, 65H, 74H, 65H, 72H, 73H, 20H, 6EH
   \              0x74 0x65    
   \              0x72 0x73    
   \              0x20 0x6E    
   \   00000030   0x6F 0x74          DC8 6FH, 74H, 20H, 48H, 45H, 58H, 20H, 56H
   \              0x20 0x48    
   \              0x45 0x58    
   \              0x20 0x56    
   \   00000038   0x61 0x6C          DC8 61H, 6CH, 75H, 65H, 2EH, 0DH, 0AH, 0
   \              0x75 0x65    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_90:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x4F 0x50          DC8 4FH, 50H, 5FH, 4DH, 4FH, 44H, 45H, 2EH
   \              0x5F 0x4D    
   \              0x4F 0x44    
   \              0x45 0x2E    
   \   00000038   0x0D 0x0A          DC8 0DH, 0AH, 0
   \              0x00         
   \   0000003B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_91:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x44 0x53          DC8 44H, 53H, 5FH, 52H, 41H, 4EH, 47H, 45H
   \              0x5F 0x52    
   \              0x41 0x4E    
   \              0x47 0x45    
   \   00000038   0x2E 0x0D          DC8 2EH, 0DH, 0AH, 0
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_92:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x41 0x44          DC8 41H, 44H, 43H, 5FH, 52H, 53H, 4CH, 2EH
   \              0x43 0x5F    
   \              0x52 0x53    
   \              0x4C 0x2E    
   \   00000038   0x0D 0x0A          DC8 0DH, 0AH, 0
   \              0x00         
   \   0000003B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_93:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x53 0x59          DC8 53H, 59H, 4EH, 43H, 2EH, 0DH, 0AH, 0
   \              0x4E 0x43    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_94:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x43 0x4D          DC8 43H, 4DH, 50H, 5FH, 41H, 44H, 4AH, 53H
   \              0x50 0x5F    
   \              0x41 0x44    
   \              0x4A 0x53    
   \   00000038   0x54 0x2E          DC8 54H, 2EH, 0DH, 0AH, 0
   \              0x0D 0x0A    
   \              0x00         
   \   0000003D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_95:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x43 0x4D          DC8 43H, 4DH, 50H, 5FH, 4FH, 46H, 46H, 53H
   \              0x50 0x5F    
   \              0x4F 0x46    
   \              0x46 0x53    
   \   00000038   0x54 0x2E          DC8 54H, 2EH, 0DH, 0AH, 0
   \              0x0D 0x0A    
   \              0x00         
   \   0000003D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_96:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x49 0x4E          DC8 49H, 4EH, 54H, 5FH, 41H, 53H, 53H, 47H
   \              0x54 0x5F    
   \              0x41 0x53    
   \              0x53 0x47    
   \   00000038   0x4E 0x2E          DC8 4EH, 2EH, 0DH, 0AH, 0
   \              0x0D 0x0A    
   \              0x00         
   \   0000003D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_97:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x49 0x4E          DC8 49H, 4EH, 54H, 5FH, 50H, 45H, 52H, 53H
   \              0x54 0x5F    
   \              0x50 0x45    
   \              0x52 0x53    
   \   00000038   0x49 0x53          DC8 49H, 53H, 54H, 2EH, 0DH, 0AH, 0
   \              0x54 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000003F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_98:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x43 0x4E          DC8 43H, 4EH, 56H, 52H, 53H, 4EH, 5FH, 49H
   \              0x56 0x52    
   \              0x53 0x4E    
   \              0x5F 0x49    
   \   00000038   0x4E 0x54          DC8 4EH, 54H, 2EH, 0DH, 0AH, 0
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   0000003E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_99:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 3AH, 20H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x3A 0x20    
   \   00000018   0x49 0x6E          DC8 49H, 6EH, 69H, 74H, 69H, 61H, 6CH, 69H
   \              0x69 0x74    
   \              0x69 0x61    
   \              0x6C 0x69    
   \   00000020   0x7A 0x61          DC8 7AH, 61H, 74H, 69H, 6FH, 6EH, 20H, 43H
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x43    
   \   00000028   0x6F 0x6D          DC8 6FH, 6DH, 70H, 6CH, 65H, 74H, 65H, 20H
   \              0x70 0x6C    
   \              0x65 0x74    
   \              0x65 0x20    
   \   00000030   0x77 0x69          DC8 77H, 69H, 74H, 68H, 20H, 55H, 53H, 45H
   \              0x74 0x68    
   \              0x20 0x55    
   \              0x53 0x45    
   \   00000038   0x52 0x20          DC8 52H, 20H, 56H, 61H, 6CH, 75H, 65H, 73H
   \              0x56 0x61    
   \              0x6C 0x75    
   \              0x65 0x73    
   \   00000040   0x2E 0x0D          DC8 2EH, 0DH, 0AH, 0
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_100:
   \   00000000   0x52 0x47          DC8 "RGB Color Light Sensor Status: "
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \              0x72 0x20    
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \              0x53 0x65    
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \              0x74 0x61    
   \              0x74 0x75    
   \              0x73 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_101:
   \   00000000   0x25 0x30          DC8 "%02x / "
   \              0x32 0x78    
   \              0x20 0x2F    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_102:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 3AH, 20H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x3A 0x20    
   \   00000018   0x52 0x45          DC8 52H, 45H, 53H, 45H, 54H, 20H, 43H, 4DH
   \              0x53 0x45    
   \              0x54 0x20    
   \              0x43 0x4D    
   \   00000020   0x44 0x20          DC8 44H, 20H, 53H, 65H, 6EH, 74H, 20H, 53H
   \              0x53 0x65    
   \              0x6E 0x74    
   \              0x20 0x53    
   \   00000028   0x75 0x63          DC8 75H, 63H, 63H, 65H, 73H, 66H, 75H, 6CH
   \              0x63 0x65    
   \              0x73 0x66    
   \              0x75 0x6C    
   \   00000030   0x2E 0x0D          DC8 2EH, 0DH, 0AH, 0
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_103:
   \   00000000   0x52 0x47          DC8 "RGB Color Light Sensor ID Code: "
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \              0x72 0x20    
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \              0x53 0x65    
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x49    
   \              0x44 0x20    
   \              0x43 0x6F    
   \              0x64 0x65    
   \              0x3A 0x20    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_104:
   \   00000000   0x35 0x56          DC8 "5V Power Plane Powered UP.\015\012"
   \              0x20 0x50    
   \              0x6F 0x77    
   \              0x65 0x72    
   \              0x20 0x50    
   \              0x6C 0x61    
   \              0x6E 0x65    
   \              0x20 0x50    
   \              0x6F 0x77    
   \              0x65 0x72    
   \              0x65 0x64    
   \              0x20 0x55    
   \              0x50 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_105:
   \   00000000   0x35 0x56          DC8 "5V Power Plane Powered DOWN.\015\012"
   \              0x20 0x50    
   \              0x6F 0x77    
   \              0x65 0x72    
   \              0x20 0x50    
   \              0x6C 0x61    
   \              0x6E 0x65    
   \              0x20 0x50    
   \              0x6F 0x77    
   \              0x65 0x72    
   \              0x65 0x64    
   \              0x20 0x44    
   \              0x4F 0x57    
   \              0x4E 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_106:
   \   00000000   0x45 0x52          DC8 "ERROR: Illegal 5V Power Plane Command.\015\012"
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x49    
   \              0x6C 0x6C    
   \              0x65 0x67    
   \              0x61 0x6C    
   \              0x20 0x35    
   \              0x56 0x20    
   \              0x50 0x6F    
   \              0x77 0x65    
   \              0x72 0x20    
   \              0x50 0x6C    
   \              0x61 0x6E    
   \              0x65 0x20    
   \              0x43 0x6F    
   \              0x6D 0x6D    
   \              0x61 0x6E    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_107:
   \   00000000   0x54 0x20          DC8 "T ERROR: Not a legal command.\015\012"
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x61    
   \              0x20 0x6C    
   \              0x65 0x67    
   \              0x61 0x6C    
   \              0x20 0x63    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_108:
   \   00000000   0x54 0x49          DC8 "TI SYNTAX ERROR: Not correct format.\015\012"
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x63    
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_109:
   \   00000000   0x54 0x49          DC8 "TIS SYNTAX ERROR: Not correct format.\015\012"
   \              0x53 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x4E 0x6F    
   \              0x74 0x20    
   \              0x63 0x6F    
   \              0x72 0x72    
   \              0x65 0x63    
   \              0x74 0x20    
   \              0x66 0x6F    
   \              0x72 0x6D    
   \              0x61 0x74    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_110:
   \   00000000   0x54 0x49          DC8 "TIS SYNTAX ERROR: Address not HEX Value.\015\012"
   \              0x53 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x41 0x64    
   \              0x64 0x72    
   \              0x65 0x73    
   \              0x73 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x48 0x45    
   \              0x58 0x20    
   \              0x56 0x61    
   \              0x6C 0x75    
   \              0x65 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_111:
   \   00000000   0x54 0x49          DC8 54H, 49H, 53H, 20H, 53H, 59H, 4EH, 54H
   \              0x53 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \   00000008   0x41 0x58          DC8 41H, 58H, 20H, 45H, 52H, 52H, 4FH, 52H
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \   00000010   0x3A 0x20          DC8 3AH, 20H, 4EH, 75H, 6DH, 62H, 65H, 72H
   \              0x4E 0x75    
   \              0x6D 0x62    
   \              0x65 0x72    
   \   00000018   0x20 0x6F          DC8 20H, 6FH, 66H, 20H, 42H, 79H, 74H, 65H
   \              0x66 0x20    
   \              0x42 0x79    
   \              0x74 0x65    
   \   00000020   0x73 0x20          DC8 73H, 20H, 6EH, 6FH, 74H, 20H, 48H, 45H
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x48 0x45    
   \   00000028   0x58 0x20          DC8 58H, 20H, 56H, 61H, 6CH, 75H, 65H, 2EH
   \              0x56 0x61    
   \              0x6C 0x75    
   \              0x65 0x2E    
   \   00000030   0x0D 0x0A          DC8 0DH, 0AH, 0
   \              0x00         
   \   00000033   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_112:
   \   00000000   0x54 0x49          DC8 "TIS: GOOD CMD: %x.\015\012"
   \              0x53 0x3A    
   \              0x20 0x47    
   \              0x4F 0x4F    
   \              0x44 0x20    
   \              0x43 0x4D    
   \              0x44 0x3A    
   \              0x20 0x25    
   \              0x78 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_113:
   \   00000000   0x54 0x49          DC8 "TIS: GOOD CMD: %x."
   \              0x53 0x3A    
   \              0x20 0x47    
   \              0x4F 0x4F    
   \              0x44 0x20    
   \              0x43 0x4D    
   \              0x44 0x3A    
   \              0x20 0x25    
   \              0x78 0x2E    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \   00000000   0x25 0x78          DC8 "%x."
   \              0x2E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_115:
   \   00000000   0x54 0x49          DC8 "TIR SYNTAX ERROR: Not correct format.\015\012"
   \              0x52 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x4E 0x6F    
   \              0x74 0x20    
   \              0x63 0x6F    
   \              0x72 0x72    
   \              0x65 0x63    
   \              0x74 0x20    
   \              0x66 0x6F    
   \              0x72 0x6D    
   \              0x61 0x74    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_116:
   \   00000000   0x54 0x49          DC8 "TIR SYNTAX ERROR: Address not HEX Value.\015\012"
   \              0x52 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x41 0x64    
   \              0x64 0x72    
   \              0x65 0x73    
   \              0x73 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x48 0x45    
   \              0x58 0x20    
   \              0x56 0x61    
   \              0x6C 0x75    
   \              0x65 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_117:
   \   00000000   0x54 0x49          DC8 54H, 49H, 52H, 20H, 53H, 59H, 4EH, 54H
   \              0x52 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \   00000008   0x41 0x58          DC8 41H, 58H, 20H, 45H, 52H, 52H, 4FH, 52H
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \   00000010   0x3A 0x20          DC8 3AH, 20H, 4EH, 75H, 6DH, 62H, 65H, 72H
   \              0x4E 0x75    
   \              0x6D 0x62    
   \              0x65 0x72    
   \   00000018   0x20 0x6F          DC8 20H, 6FH, 66H, 20H, 42H, 79H, 74H, 65H
   \              0x66 0x20    
   \              0x42 0x79    
   \              0x74 0x65    
   \   00000020   0x73 0x20          DC8 73H, 20H, 6EH, 6FH, 74H, 20H, 48H, 45H
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x48 0x45    
   \   00000028   0x58 0x20          DC8 58H, 20H, 56H, 61H, 6CH, 75H, 65H, 2EH
   \              0x56 0x61    
   \              0x6C 0x75    
   \              0x65 0x2E    
   \   00000030   0x0D 0x0A          DC8 0DH, 0AH, 0
   \              0x00         
   \   00000033   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_118:
   \   00000000   0x54 0x49          DC8 54H, 49H, 52H, 20H, 53H, 59H, 4EH, 54H
   \              0x52 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \   00000008   0x41 0x58          DC8 41H, 58H, 20H, 45H, 52H, 52H, 4FH, 52H
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \   00000010   0x3A 0x20          DC8 3AH, 20H, 4EH, 75H, 6DH, 62H, 65H, 72H
   \              0x4E 0x75    
   \              0x6D 0x62    
   \              0x65 0x72    
   \   00000018   0x20 0x6F          DC8 20H, 6FH, 66H, 20H, 42H, 79H, 74H, 65H
   \              0x66 0x20    
   \              0x42 0x79    
   \              0x74 0x65    
   \   00000020   0x73 0x20          DC8 73H, 20H, 52H, 45H, 43H, 45H, 49H, 56H
   \              0x52 0x45    
   \              0x43 0x45    
   \              0x49 0x56    
   \   00000028   0x45 0x44          DC8 45H, 44H, 20H, 6EH, 6FH, 74H, 20H, 48H
   \              0x20 0x6E    
   \              0x6F 0x74    
   \              0x20 0x48    
   \   00000030   0x45 0x58          DC8 45H, 58H, 20H, 56H, 61H, 6CH, 75H, 65H
   \              0x20 0x56    
   \              0x61 0x6C    
   \              0x75 0x65    
   \   00000038   0x2E 0x0D          DC8 2EH, 0DH, 0AH, 0
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_119:
   \   00000000   0x54 0x49          DC8 "TIR: GOOD CMD: %x.\015\012"
   \              0x52 0x3A    
   \              0x20 0x47    
   \              0x4F 0x4F    
   \              0x44 0x20    
   \              0x43 0x4D    
   \              0x44 0x3A    
   \              0x20 0x25    
   \              0x78 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_120:
   \   00000000   0x54 0x49          DC8 "TIR SYNTAX ERROR: Data not HEX Value.\015\012"
   \              0x52 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x44 0x61    
   \              0x74 0x61    
   \              0x20 0x6E    
   \              0x6F 0x74    
   \              0x20 0x48    
   \              0x45 0x58    
   \              0x20 0x56    
   \              0x61 0x6C    
   \              0x75 0x65    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_121:
   \   00000000   0x54 0x49          DC8 "TIR: GOOD CMD: %x."
   \              0x52 0x3A    
   \              0x20 0x47    
   \              0x4F 0x4F    
   \              0x44 0x20    
   \              0x43 0x4D    
   \              0x44 0x3A    
   \              0x20 0x25    
   \              0x78 0x2E    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_122:
   \   00000000   0x20 0x20          DC8 "     DATA: "
   \              0x20 0x20    
   \              0x20 0x44    
   \              0x41 0x54    
   \              0x41 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_123:
   \   00000000   0x54 0x49          DC8 "TIQ SYNTAX ERROR: Not correct format.\015\012"
   \              0x51 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x4E 0x6F    
   \              0x74 0x20    
   \              0x63 0x6F    
   \              0x72 0x72    
   \              0x65 0x63    
   \              0x74 0x20    
   \              0x66 0x6F    
   \              0x72 0x6D    
   \              0x61 0x74    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_124:
   \   00000000   0x54 0x49          DC8 "TIQ SYNTAX ERROR: Address not HEX Value.\015\012"
   \              0x51 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x41 0x64    
   \              0x64 0x72    
   \              0x65 0x73    
   \              0x73 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x48 0x45    
   \              0x58 0x20    
   \              0x56 0x61    
   \              0x6C 0x75    
   \              0x65 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_125:
   \   00000000   0x54 0x49          DC8 54H, 49H, 51H, 20H, 53H, 59H, 4EH, 54H
   \              0x51 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \   00000008   0x41 0x58          DC8 41H, 58H, 20H, 45H, 52H, 52H, 4FH, 52H
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \   00000010   0x3A 0x20          DC8 3AH, 20H, 4EH, 75H, 6DH, 62H, 65H, 72H
   \              0x4E 0x75    
   \              0x6D 0x62    
   \              0x65 0x72    
   \   00000018   0x20 0x6F          DC8 20H, 6FH, 66H, 20H, 42H, 79H, 74H, 65H
   \              0x66 0x20    
   \              0x42 0x79    
   \              0x74 0x65    
   \   00000020   0x73 0x20          DC8 73H, 20H, 6EH, 6FH, 74H, 20H, 48H, 45H
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x48 0x45    
   \   00000028   0x58 0x20          DC8 58H, 20H, 56H, 61H, 6CH, 75H, 65H, 2EH
   \              0x56 0x61    
   \              0x6C 0x75    
   \              0x65 0x2E    
   \   00000030   0x0D 0x0A          DC8 0DH, 0AH, 0
   \              0x00         
   \   00000033   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_126:
   \   00000000   0x3C 0x53          DC8 3CH, 53H, 54H, 41H, 54H, 55H, 53H, 3EH
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \   00000008   0x25 0x73          DC8 25H, 73H, 2FH, 2FH, 25H, 73H, 2FH, 2FH
   \              0x2F 0x2F    
   \              0x25 0x73    
   \              0x2F 0x2F    
   \   00000010   0x25 0x73          DC8 25H, 73H, 2FH, 2FH, 25H, 73H, 2FH, 2FH
   \              0x2F 0x2F    
   \              0x25 0x73    
   \              0x2F 0x2F    
   \   00000018   0x25 0x73          DC8 25H, 73H, 2FH, 2FH, 25H, 73H, 2FH, 2FH
   \              0x2F 0x2F    
   \              0x25 0x73    
   \              0x2F 0x2F    
   \   00000020   0x25 0x73          DC8 25H, 73H, 2FH, 2FH, 25H, 73H, 2FH, 2FH
   \              0x2F 0x2F    
   \              0x25 0x73    
   \              0x2F 0x2F    
   \   00000028   0x25 0x73          DC8 25H, 73H, 2FH, 2FH, 25H, 73H, 2FH, 2FH
   \              0x2F 0x2F    
   \              0x25 0x73    
   \              0x2F 0x2F    
   \   00000030   0x25 0x73          DC8 25H, 73H, 2FH, 2FH, 25H, 73H, 3CH, 2FH
   \              0x2F 0x2F    
   \              0x25 0x73    
   \              0x3C 0x2F    
   \   00000038   0x53 0x54          DC8 53H, 54H, 41H, 54H, 55H, 53H, 3EH, 0
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_127:
   \   00000000   0x25 0x73          DC8 "%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\015\012"
   \              0x2C 0x25    
   \              0x73 0x2C    
   \              0x25 0x73    
   \              0x2C 0x25    
   \              0x73 0x2C    
   \              0x25 0x73    
   \              0x2C 0x25    
   \              0x73 0x2C    
   \              0x25 0x73    
   \              0x2C 0x25    
   \              0x73 0x2C    
   \              0x25 0x73    
   \              0x2C 0x25    
   \              0x73 0x2C    
   \              0x25 0x73    
   \              0x2C 0x25    
   \              0x73 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_128:
   \   00000000   0x43 0x4F          DC8 "COMPLETE"
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_129:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TC_HWERR_PRESSUE</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x5F 0x48    
   \              0x57 0x45    
   \              0x52 0x52    
   \              0x5F 0x50    
   \              0x52 0x45    
   \              0x53 0x53    
   \              0x55 0x45    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_130:
   \   00000000   0x50 0x72          DC8 "Pressure TASKING ERROR!"
   \              0x65 0x73    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x20 0x54    
   \              0x41 0x53    
   \              0x4B 0x49    
   \              0x4E 0x47    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x21 0x00    

   \                                 In section .rodata, align 4
   \                     ?_131:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TC_HWERR_HUMIDITY</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x5F 0x48    
   \              0x57 0x45    
   \              0x52 0x52    
   \              0x5F 0x48    
   \              0x55 0x4D    
   \              0x49 0x44    
   \              0x49 0x54    
   \              0x59 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_132:
   \   00000000   0x48 0x75          DC8 "Humidity TASKING ERROR!"
   \              0x6D 0x69    
   \              0x64 0x69    
   \              0x74 0x79    
   \              0x20 0x54    
   \              0x41 0x53    
   \              0x4B 0x49    
   \              0x4E 0x47    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x21 0x00    

   \                                 In section .rodata, align 4
   \                     ?_133:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TC_HWERR_TEMPERATURE</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x5F 0x48    
   \              0x57 0x45    
   \              0x52 0x52    
   \              0x5F 0x54    
   \              0x45 0x4D    
   \              0x50 0x45    
   \              0x52 0x41    
   \              0x54 0x55    
   \              0x52 0x45    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000002A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_134:
   \   00000000   0x41 0x4D          DC8 "AMBIENT TEMPERATURE TASKING ERROR!"
   \              0x42 0x49    
   \              0x45 0x4E    
   \              0x54 0x20    
   \              0x54 0x45    
   \              0x4D 0x50    
   \              0x45 0x52    
   \              0x41 0x54    
   \              0x55 0x52    
   \              0x45 0x20    
   \              0x54 0x41    
   \              0x53 0x4B    
   \              0x49 0x4E    
   \              0x47 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x21    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_135:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TC_HWERR_IRTEMP</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x5F 0x48    
   \              0x57 0x45    
   \              0x52 0x52    
   \              0x5F 0x49    
   \              0x52 0x54    
   \              0x45 0x4D    
   \              0x50 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_136:
   \   00000000   0x47 0x52          DC8 "GRID EYE/COOL EYE TASKING ERROR!"
   \              0x49 0x44    
   \              0x20 0x45    
   \              0x59 0x45    
   \              0x2F 0x43    
   \              0x4F 0x4F    
   \              0x4C 0x20    
   \              0x45 0x59    
   \              0x45 0x20    
   \              0x54 0x41    
   \              0x53 0x4B    
   \              0x49 0x4E    
   \              0x47 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x21    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_137:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TCS_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x53 0x5F    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_138:
   \   00000000   0x54 0x43          DC8 "TCS SYNTAX ERROR: Not correct format.\015\012"
   \              0x53 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x4E 0x6F    
   \              0x74 0x20    
   \              0x63 0x6F    
   \              0x72 0x72    
   \              0x65 0x63    
   \              0x74 0x20    
   \              0x66 0x6F    
   \              0x72 0x6D    
   \              0x61 0x74    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_139:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TCS_BADPARAM</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x53 0x5F    
   \              0x42 0x41    
   \              0x44 0x50    
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_140:
   \   00000000   0x54 0x43          DC8 "TCS SYNTAX ERROR: Bad Parameter.\015\012"
   \              0x53 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x42 0x61    
   \              0x64 0x20    
   \              0x50 0x61    
   \              0x72 0x61    
   \              0x6D 0x65    
   \              0x74 0x65    
   \              0x72 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_141:
   \   00000000   0x25 0x73          DC8 "%s %f %f"
   \              0x20 0x25    
   \              0x66 0x20    
   \              0x25 0x66    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_142:
   \   00000000   0x50 0x61          DC8 "Parms: %s, %f, %f.\015\012"
   \              0x72 0x6D    
   \              0x73 0x3A    
   \              0x20 0x25    
   \              0x73 0x2C    
   \              0x20 0x25    
   \              0x66 0x2C    
   \              0x20 0x25    
   \              0x66 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_143:
   \   00000000   0x30 0x30          DC8 "0002"
   \              0x30 0x32    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_144:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_SHNT_VLTG</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x53    
   \              0x48 0x4E    
   \              0x54 0x5F    
   \              0x56 0x4C    
   \              0x54 0x47    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_145:
   \   00000000   0x53 0x68          DC8 "Shnt_Vltg Set COMPLETE.\015\012"
   \              0x6E 0x74    
   \              0x5F 0x56    
   \              0x6C 0x74    
   \              0x67 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_146:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_SHNT_VLTG_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x53    
   \              0x48 0x4E    
   \              0x54 0x5F    
   \              0x56 0x4C    
   \              0x54 0x47    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_147:
   \   00000000   0x54 0x43          DC8 "TCS SET ERROR: FAILED.\015\012"
   \              0x53 0x20    
   \              0x53 0x45    
   \              0x54 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x46    
   \              0x41 0x49    
   \              0x4C 0x45    
   \              0x44 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_148:
   \   00000000   0x30 0x30          DC8 "0004"
   \              0x30 0x34    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_149:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_CURRENT</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x43    
   \              0x55 0x52    
   \              0x52 0x45    
   \              0x4E 0x54    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_150:
   \   00000000   0x43 0x75          DC8 "Current Set COMPLETE."
   \              0x72 0x72    
   \              0x65 0x6E    
   \              0x74 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_151:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_CURRENT_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x43    
   \              0x55 0x52    
   \              0x52 0x45    
   \              0x4E 0x54    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_152:
   \   00000000   0x30 0x30          DC8 "0006"
   \              0x30 0x36    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_153:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_POWER</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x50    
   \              0x4F 0x57    
   \              0x45 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_154:
   \   00000000   0x50 0x6F          DC8 "Power Set COMPLETE."
   \              0x77 0x65    
   \              0x72 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_155:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_POWER_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x50    
   \              0x4F 0x57    
   \              0x45 0x52    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_156:
   \   00000000   0x30 0x30          DC8 "0008"
   \              0x30 0x38    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_157:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_VOLTAGE</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x56    
   \              0x4F 0x4C    
   \              0x54 0x41    
   \              0x47 0x45    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_158:
   \   00000000   0x56 0x6F          DC8 "Voltage Set COMPLETE."
   \              0x6C 0x74    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_159:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_VOLTAGE_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x56    
   \              0x4F 0x4C    
   \              0x54 0x41    
   \              0x47 0x45    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_160:
   \   00000000   0x30 0x30          DC8 "000A"
   \              0x30 0x41    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_161:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_TEMPC</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x54    
   \              0x45 0x4D    
   \              0x50 0x43    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_162:
   \   00000000   0x54 0x65          DC8 "TempC Set COMPLETE."
   \              0x6D 0x70    
   \              0x43 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_163:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_TEMPC_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x54    
   \              0x45 0x4D    
   \              0x50 0x43    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_164:
   \   00000000   0x30 0x30          DC8 "000B"
   \              0x30 0x42    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_165:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_TEMPF</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x54    
   \              0x45 0x4D    
   \              0x50 0x46    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_166:
   \   00000000   0x54 0x65          DC8 "TempF Set COMPLETE."
   \              0x6D 0x70    
   \              0x46 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_167:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_TEMPF_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x54    
   \              0x45 0x4D    
   \              0x50 0x46    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_168:
   \   00000000   0x30 0x30          DC8 "0011"
   \              0x31 0x31    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_169:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_PRESSURE</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x50    
   \              0x52 0x45    
   \              0x53 0x53    
   \              0x55 0x52    
   \              0x45 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_170:
   \   00000000   0x50 0x72          DC8 "Pressure Set COMPLETE."
   \              0x65 0x73    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_171:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_PRESSURE_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x50    
   \              0x52 0x45    
   \              0x53 0x53    
   \              0x55 0x52    
   \              0x45 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_172:
   \   00000000   0x30 0x30          DC8 "0030"
   \              0x33 0x30    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_173:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_HUMIDITY</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x48    
   \              0x55 0x4D    
   \              0x49 0x44    
   \              0x49 0x54    
   \              0x59 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_174:
   \   00000000   0x48 0x75          DC8 "Humidity Set COMPLETE."
   \              0x6D 0x69    
   \              0x64 0x69    
   \              0x74 0x79    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_175:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_HUMIDITY_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x48    
   \              0x55 0x4D    
   \              0x49 0x44    
   \              0x49 0x54    
   \              0x59 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_176:
   \   00000000   0x30 0x30          DC8 "0032"
   \              0x33 0x32    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_177:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_HUM_TEMPC</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x48    
   \              0x55 0x4D    
   \              0x5F 0x54    
   \              0x45 0x4D    
   \              0x50 0x43    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_178:
   \   00000000   0x48 0x75          DC8 "Hum_TempC Set COMPLETE."
   \              0x6D 0x5F    
   \              0x54 0x65    
   \              0x6D 0x70    
   \              0x43 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_179:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_HUM_TEMPC_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x48    
   \              0x55 0x4D    
   \              0x5F 0x54    
   \              0x45 0x4D    
   \              0x50 0x43    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_180:
   \   00000000   0x30 0x30          DC8 "0033"
   \              0x33 0x33    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_181:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_HUM_TEMPF</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x48    
   \              0x55 0x4D    
   \              0x5F 0x54    
   \              0x45 0x4D    
   \              0x50 0x46    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_182:
   \   00000000   0x48 0x75          DC8 "Hum_TempF Set COMPLETE."
   \              0x6D 0x5F    
   \              0x54 0x65    
   \              0x6D 0x70    
   \              0x46 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_183:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_HUM_TEMPF_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x48    
   \              0x55 0x4D    
   \              0x5F 0x54    
   \              0x45 0x4D    
   \              0x50 0x46    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_184:
   \   00000000   0x30 0x30          DC8 "000D"
   \              0x30 0x44    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_185:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_RGB_RED</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x47 0x42    
   \              0x5F 0x52    
   \              0x45 0x44    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_186:
   \   00000000   0x52 0x47          DC8 "RGB_Red Set COMPLETE."
   \              0x42 0x5F    
   \              0x52 0x65    
   \              0x64 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_187:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_RGB_RED_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x47 0x42    
   \              0x5F 0x52    
   \              0x45 0x44    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_188:
   \   00000000   0x30 0x30          DC8 "000E"
   \              0x30 0x45    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_189:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_RGB_GREEN</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x47 0x42    
   \              0x5F 0x47    
   \              0x52 0x45    
   \              0x45 0x4E    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_190:
   \   00000000   0x52 0x47          DC8 "RGB_Green Set COMPLETE."
   \              0x42 0x5F    
   \              0x47 0x72    
   \              0x65 0x65    
   \              0x6E 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_191:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_RGB_GREEN_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x47 0x42    
   \              0x5F 0x47    
   \              0x52 0x45    
   \              0x45 0x4E    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_192:
   \   00000000   0x30 0x30          DC8 "000F"
   \              0x30 0x46    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_193:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_RGB_BLUE</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x47 0x42    
   \              0x5F 0x42    
   \              0x4C 0x55    
   \              0x45 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_194:
   \   00000000   0x52 0x47          DC8 "RGB_Blue Set COMPLETE."
   \              0x42 0x5F    
   \              0x42 0x6C    
   \              0x75 0x65    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_195:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_RGB_BLUE_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x47 0x42    
   \              0x5F 0x42    
   \              0x4C 0x55    
   \              0x45 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_196:
   \   00000000   0x30 0x30          DC8 "0017"
   \              0x31 0x37    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_197:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_THERM_C</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x54    
   \              0x48 0x45    
   \              0x52 0x4D    
   \              0x5F 0x43    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_198:
   \   00000000   0x54 0x68          DC8 "Therm_C Set COMPLETE."
   \              0x65 0x72    
   \              0x6D 0x5F    
   \              0x43 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_199:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_THERM_C_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x54    
   \              0x48 0x45    
   \              0x52 0x4D    
   \              0x5F 0x43    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_200:
   \   00000000   0x30 0x30          DC8 "0019"
   \              0x31 0x39    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_201:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_1C</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x31    
   \              0x43 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_202:
   \   00000000   0x52 0x6F          DC8 "RoadT_1C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x31 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_203:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_1C_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x31    
   \              0x43 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_204:
   \   00000000   0x30 0x30          DC8 "001B"
   \              0x31 0x42    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_205:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_2C</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x32    
   \              0x43 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_206:
   \   00000000   0x52 0x6F          DC8 "RoadT_2C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x32 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_207:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_2C_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x32    
   \              0x43 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_208:
   \   00000000   0x30 0x30          DC8 "001D"
   \              0x31 0x44    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_209:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_3C</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x33    
   \              0x43 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_210:
   \   00000000   0x52 0x6F          DC8 "RoadT_3C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x33 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_211:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_3C_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x33    
   \              0x43 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_212:
   \   00000000   0x30 0x30          DC8 "001F"
   \              0x31 0x46    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_213:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_4C</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x34    
   \              0x43 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_214:
   \   00000000   0x52 0x6F          DC8 "RoadT_4C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x34 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_215:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_4C_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x34    
   \              0x43 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_216:
   \   00000000   0x30 0x30          DC8 "0021"
   \              0x32 0x31    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_217:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_5C</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x35    
   \              0x43 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_218:
   \   00000000   0x52 0x6F          DC8 "RoadT_5C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x35 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_219:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_5C_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x35    
   \              0x43 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_220:
   \   00000000   0x30 0x30          DC8 "0023"
   \              0x32 0x33    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_221:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_6C</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x36    
   \              0x43 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_222:
   \   00000000   0x52 0x6F          DC8 "RoadT_6C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x36 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_223:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_6C_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x36    
   \              0x43 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_224:
   \   00000000   0x30 0x30          DC8 "0025"
   \              0x32 0x35    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_225:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_7C</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x37    
   \              0x43 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_226:
   \   00000000   0x52 0x6F          DC8 "RoadT_7C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x37 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_227:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_7C_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x37    
   \              0x43 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_228:
   \   00000000   0x30 0x30          DC8 "0027"
   \              0x32 0x37    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_229:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_8C</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x38    
   \              0x43 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_230:
   \   00000000   0x52 0x6F          DC8 "RoadT_8C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x38 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_231:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_8C_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x38    
   \              0x43 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_232:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TCS_BADUUID</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x53 0x5F    
   \              0x42 0x41    
   \              0x44 0x55    
   \              0x55 0x49    
   \              0x44 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_233:
   \   00000000   0x54 0x43          DC8 "TCS SYNTAX ERROR: Bad UUID.\015\012"
   \              0x53 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x42 0x61    
   \              0x64 0x20    
   \              0x55 0x55    
   \              0x49 0x44    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_234:
   \   00000000   0x54 0x43          DC8 "TCS SYNTAX ERROR: Wrong Number of Parameters.\015\012"
   \              0x53 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x57 0x72    
   \              0x6F 0x6E    
   \              0x67 0x20    
   \              0x4E 0x75    
   \              0x6D 0x62    
   \              0x65 0x72    
   \              0x20 0x6F    
   \              0x66 0x20    
   \              0x50 0x61    
   \              0x72 0x61    
   \              0x6D 0x65    
   \              0x74 0x65    
   \              0x72 0x73    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_235:
   \   00000000   0x3C 0x53          DC8 "<STATUS>TCR:%s\\"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x54 0x43    
   \              0x52 0x3A    
   \              0x25 0x73    
   \              0x5C 0x00    

   \                                 In section .rodata, align 4
   \                     ?_236:
   \   00000000   0x43 0x41          DC8 "CALIBRATION DATA\015\012Date: %s\015\012"
   \              0x4C 0x49    
   \              0x42 0x52    
   \              0x41 0x54    
   \              0x49 0x4F    
   \              0x4E 0x20    
   \              0x44 0x41    
   \              0x54 0x41    
   \              0x0D 0x0A    
   \              0x44 0x61    
   \              0x74 0x65    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_237:
   \   00000000   0x4E 0x61          DC8 "Name\t\t        UUID\t\tSlope\t\tOffset\015\012"
   \              0x6D 0x65    
   \              0x09 0x09    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x55 0x55    
   \              0x49 0x44    
   \              0x09 0x09    
   \              0x53 0x6C    
   \              0x6F 0x70    
   \              0x65 0x09    
   \              0x09 0x4F    
   \              0x66 0x66    
   \              0x73 0x65    
   \              0x74 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_238:
   \   00000000   0x25 0x73          DC8 "%s:0002//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x30    
   \              0x32 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_239:
   \   00000000   0x25 0x73          DC8 "%s\t0002\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x30    
   \              0x32 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_240:
   \   00000000   0x25 0x73          DC8 "%s:0004//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x30    
   \              0x34 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_241:
   \   00000000   0x25 0x73          DC8 "%s\t        0004\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x30    
   \              0x30 0x30    
   \              0x34 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_242:
   \   00000000   0x25 0x73          DC8 "%s:0006//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x30    
   \              0x36 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_243:
   \   00000000   0x25 0x73          DC8 "%s\t0006\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x30    
   \              0x36 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_244:
   \   00000000   0x25 0x73          DC8 "%s:0008//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x30    
   \              0x38 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_245:
   \   00000000   0x25 0x73          DC8 "%s\t        0008\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x30    
   \              0x30 0x30    
   \              0x38 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_246:
   \   00000000   0x25 0x73          DC8 "%s:000A//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x30    
   \              0x41 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_247:
   \   00000000   0x25 0x73          DC8 "%s\t000A\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x30    
   \              0x41 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_248:
   \   00000000   0x25 0x73          DC8 "%s:000B//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x30    
   \              0x42 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_249:
   \   00000000   0x25 0x73          DC8 "%s\t000B\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x30    
   \              0x42 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_250:
   \   00000000   0x25 0x73          DC8 "%s:0011//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x31    
   \              0x31 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_251:
   \   00000000   0x25 0x73          DC8 "%s\t0011\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x31    
   \              0x31 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_252:
   \   00000000   0x25 0x73          DC8 "%s:0030//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x33    
   \              0x30 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_253:
   \   00000000   0x25 0x73          DC8 "%s\t0030\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x33    
   \              0x30 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_254:
   \   00000000   0x25 0x73          DC8 "%s:0032//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x33    
   \              0x32 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_255:
   \   00000000   0x25 0x73          DC8 "%s\t0032\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x33    
   \              0x32 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_256:
   \   00000000   0x25 0x73          DC8 "%s:0033//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x33    
   \              0x33 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_257:
   \   00000000   0x25 0x73          DC8 "%s\t0033\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x33    
   \              0x33 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_258:
   \   00000000   0x25 0x73          DC8 "%s:000D//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x30    
   \              0x44 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_259:
   \   00000000   0x25 0x73          DC8 "%s\t        000D\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x30    
   \              0x30 0x30    
   \              0x44 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_260:
   \   00000000   0x25 0x73          DC8 "%s:000E//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x30    
   \              0x45 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_261:
   \   00000000   0x25 0x73          DC8 "%s\t000E\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x30    
   \              0x45 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_262:
   \   00000000   0x25 0x73          DC8 "%s:000F//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x30    
   \              0x46 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_263:
   \   00000000   0x25 0x73          DC8 "%s\t000F\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x30    
   \              0x46 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_264:
   \   00000000   0x25 0x73          DC8 "%s:0017//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x31    
   \              0x37 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_265:
   \   00000000   0x25 0x73          DC8 "%s\t        0017\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x30    
   \              0x30 0x31    
   \              0x37 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_266:
   \   00000000   0x25 0x73          DC8 "%s:0019//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x31    
   \              0x39 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_267:
   \   00000000   0x25 0x73          DC8 "%s\t0019\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x31    
   \              0x39 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_268:
   \   00000000   0x25 0x73          DC8 "%s:001B//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x31    
   \              0x42 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_269:
   \   00000000   0x25 0x73          DC8 "%s\t001B\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x31    
   \              0x42 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_270:
   \   00000000   0x25 0x73          DC8 "%s:001D//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x31    
   \              0x44 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_271:
   \   00000000   0x25 0x73          DC8 "%s\t001D\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x31    
   \              0x44 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_272:
   \   00000000   0x25 0x73          DC8 "%s:001F//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x31    
   \              0x46 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_273:
   \   00000000   0x25 0x73          DC8 "%s\t001F\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x31    
   \              0x46 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_274:
   \   00000000   0x25 0x73          DC8 "%s:0021//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x32    
   \              0x31 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_275:
   \   00000000   0x25 0x73          DC8 "%s\t0021\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x32    
   \              0x31 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_276:
   \   00000000   0x25 0x73          DC8 "%s:0023//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x32    
   \              0x33 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_277:
   \   00000000   0x25 0x73          DC8 "%s\t0023\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x32    
   \              0x33 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_278:
   \   00000000   0x25 0x73          DC8 "%s:0025//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x32    
   \              0x35 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_279:
   \   00000000   0x25 0x73          DC8 "%s\t0025\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x32    
   \              0x35 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_280:
   \   00000000   0x25 0x73          DC8 "%s:0027//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x32    
   \              0x37 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_281:
   \   00000000   0x25 0x73          DC8 "%s\t0027\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x32    
   \              0x37 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_282:
   \   00000000   0x0D 0x0A          DC8 "\015\012     COMPLETE.\015\012"
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_283:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TCT_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x54 0x5F    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_284:
   \   00000000   0x54 0x43          DC8 "TCT SYNTAX ERROR: Not correct format.\015\012"
   \              0x54 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x4E 0x6F    
   \              0x74 0x20    
   \              0x63 0x6F    
   \              0x72 0x72    
   \              0x65 0x63    
   \              0x74 0x20    
   \              0x66 0x6F    
   \              0x72 0x6D    
   \              0x61 0x74    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_285:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TCT_BADPARAM</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x54 0x5F    
   \              0x42 0x41    
   \              0x44 0x50    
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_286:
   \   00000000   0x54 0x43          DC8 "TCT SYNTAX ERROR: Bad Parameter.\015\012"
   \              0x54 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x42 0x61    
   \              0x64 0x20    
   \              0x50 0x61    
   \              0x72 0x61    
   \              0x6D 0x65    
   \              0x74 0x65    
   \              0x72 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_287:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TCT_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x54 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_288:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCT_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x54    
   \              0x5F 0x41    
   \              0x43 0x4B    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_289:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TCI_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x49 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_290:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCI_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x49    
   \              0x5F 0x41    
   \              0x43 0x4B    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_291:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_DRIVER:%04x</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x44    
   \              0x52 0x49    
   \              0x56 0x45    
   \              0x52 0x3A    
   \              0x25 0x30    
   \              0x34 0x78    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_292:
   \   00000000   0x44 0x72          DC8 "Driver Status: %04x\015\012"
   \              0x69 0x76    
   \              0x65 0x72    
   \              0x20 0x53    
   \              0x74 0x61    
   \              0x74 0x75    
   \              0x73 0x3A    
   \              0x20 0x25    
   \              0x30 0x34    
   \              0x78 0x0D    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_293:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_RESET_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x52    
   \              0x45 0x53    
   \              0x45 0x54    
   \              0x5F 0x41    
   \              0x43 0x4B    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_294:
   \   00000000   0x52 0x45          DC8 "RESET CALLED BUT NO RESPONSE!!\015\012"
   \              0x53 0x45    
   \              0x54 0x20    
   \              0x43 0x41    
   \              0x4C 0x4C    
   \              0x45 0x44    
   \              0x20 0x42    
   \              0x55 0x54    
   \              0x20 0x4E    
   \              0x4F 0x20    
   \              0x52 0x45    
   \              0x53 0x50    
   \              0x4F 0x4E    
   \              0x53 0x45    
   \              0x21 0x21    
   \              0x0D 0x0A    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_295:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TK_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x5F 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_296:
   \   00000000   0x54 0x4B          DC8 "TK SYNTAX ERROR: Not correct format.\015\012"
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x63    
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_297:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKSR_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x53 0x52    
   \              0x5F 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_298:
   \   00000000   0x54 0x4B          DC8 "TKSR SYNTAX ERROR: Not correct format.\015\012"
   \              0x53 0x52    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x63    
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_299:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKSR_BADPARAM</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x53 0x52    
   \              0x5F 0x42    
   \              0x41 0x44    
   \              0x50 0x41    
   \              0x52 0x41    
   \              0x4D 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_300:
   \   00000000   0x54 0x4B          DC8 "TKSR SYNTAX ERROR: Bad Parameter.\015\012"
   \              0x53 0x52    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x61 0x64    
   \              0x20 0x50    
   \              0x61 0x72    
   \              0x61 0x6D    
   \              0x65 0x74    
   \              0x65 0x72    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_301:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TKSR_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x4B 0x53    
   \              0x52 0x5F    
   \              0x41 0x43    
   \              0x4B 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_302:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKSS_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x53 0x53    
   \              0x5F 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_303:
   \   00000000   0x54 0x4B          DC8 "TKSS SYNTAX ERROR: Not correct format.\015\012"
   \              0x53 0x53    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x63    
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_304:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKSS_BADPARAM</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x53 0x53    
   \              0x5F 0x42    
   \              0x41 0x44    
   \              0x50 0x41    
   \              0x52 0x41    
   \              0x4D 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_305:
   \   00000000   0x54 0x4B          DC8 "TKSS SYNTAX ERROR: Bad Parameter.\015\012"
   \              0x53 0x53    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x61 0x64    
   \              0x20 0x50    
   \              0x61 0x72    
   \              0x61 0x6D    
   \              0x65 0x74    
   \              0x65 0x72    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_306:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TKSS_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x4B 0x53    
   \              0x53 0x5F    
   \              0x41 0x43    
   \              0x4B 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_307:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKST_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x53 0x54    
   \              0x5F 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_308:
   \   00000000   0x54 0x4B          DC8 "TKST SYNTAX ERROR: Not correct format.\015\012"
   \              0x53 0x54    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x63    
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_309:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKST_BADPARAM</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x53 0x54    
   \              0x5F 0x42    
   \              0x41 0x44    
   \              0x50 0x41    
   \              0x52 0x41    
   \              0x4D 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_310:
   \   00000000   0x54 0x4B          DC8 "TKST SYNTAX ERROR: Bad Parameter.\015\012"
   \              0x53 0x54    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x61 0x64    
   \              0x20 0x50    
   \              0x61 0x72    
   \              0x61 0x6D    
   \              0x65 0x74    
   \              0x65 0x72    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_311:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TKST_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x4B 0x53    
   \              0x54 0x5F    
   \              0x41 0x43    
   \              0x4B 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_312:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKSB_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x53 0x42    
   \              0x5F 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_313:
   \   00000000   0x54 0x4B          DC8 "TKSB SYNTAX ERROR: Not correct format.\015\012"
   \              0x53 0x42    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x63    
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_314:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKSB_BADPARAM</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x53 0x42    
   \              0x5F 0x42    
   \              0x41 0x44    
   \              0x50 0x41    
   \              0x52 0x41    
   \              0x4D 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_315:
   \   00000000   0x54 0x4B          DC8 "TKSB SYNTAX ERROR: Bad Parameter.\015\012"
   \              0x53 0x42    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x61 0x64    
   \              0x20 0x50    
   \              0x61 0x72    
   \              0x61 0x6D    
   \              0x65 0x74    
   \              0x65 0x72    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_316:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TKSB_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x4B 0x53    
   \              0x42 0x5F    
   \              0x41 0x43    
   \              0x4B 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_317:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKSV_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x53 0x56    
   \              0x5F 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_318:
   \   00000000   0x54 0x4B          DC8 "TKSV SYNTAX ERROR: Not correct format.\015\012"
   \              0x53 0x56    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x63    
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_319:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKSV_BADPARAM</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x53 0x56    
   \              0x5F 0x42    
   \              0x41 0x44    
   \              0x50 0x41    
   \              0x52 0x41    
   \              0x4D 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_320:
   \   00000000   0x54 0x4B          DC8 "TKSV SYNTAX ERROR: Bad Parameter.\015\012"
   \              0x53 0x56    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x61 0x64    
   \              0x20 0x50    
   \              0x61 0x72    
   \              0x61 0x6D    
   \              0x65 0x74    
   \              0x65 0x72    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_321:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TKSV_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x4B 0x53    
   \              0x56 0x5F    
   \              0x41 0x43    
   \              0x4B 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_322:
   \   00000000   0x54 0x4B          DC8 "TKS ERROR: Not a legal command.\015\012"
   \              0x53 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x61    
   \              0x20 0x6C    
   \              0x65 0x67    
   \              0x61 0x6C    
   \              0x20 0x63    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_323:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TKRR:%3.1f</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x4B 0x52    
   \              0x52 0x3A    
   \              0x25 0x33    
   \              0x2E 0x31    
   \              0x66 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_324:
   \   00000000   0x52 0x64          DC8 "RdSnd Sample Rate:  %3.1f Seconds.\015\012"
   \              0x53 0x6E    
   \              0x64 0x20    
   \              0x53 0x61    
   \              0x6D 0x70    
   \              0x6C 0x65    
   \              0x20 0x52    
   \              0x61 0x74    
   \              0x65 0x3A    
   \              0x20 0x20    
   \              0x25 0x33    
   \              0x2E 0x31    
   \              0x66 0x20    
   \              0x53 0x65    
   \              0x63 0x6F    
   \              0x6E 0x64    
   \              0x73 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_325:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TKRS:%3.1f</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x4B 0x52    
   \              0x53 0x3A    
   \              0x25 0x33    
   \              0x2E 0x31    
   \              0x66 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_326:
   \   00000000   0x53 0x65          DC8 "Sensor Sample Rate: %3.1f Seconds.\015\012"
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \              0x61 0x6D    
   \              0x70 0x6C    
   \              0x65 0x20    
   \              0x52 0x61    
   \              0x74 0x65    
   \              0x3A 0x20    
   \              0x25 0x33    
   \              0x2E 0x31    
   \              0x66 0x20    
   \              0x53 0x65    
   \              0x63 0x6F    
   \              0x6E 0x64    
   \              0x73 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_327:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TKRT:%d</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x4B 0x52    
   \              0x54 0x3A    
   \              0x25 0x64    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_328:
   \   00000000   0x54 0x41          DC8 "TACK Limit: %d.\015\012"
   \              0x43 0x4B    
   \              0x20 0x4C    
   \              0x69 0x6D    
   \              0x69 0x74    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_329:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TKRB:%d</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x4B 0x52    
   \              0x42 0x3A    
   \              0x25 0x64    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_330:
   \   00000000   0x42 0x6F          DC8 "Boot Delay: %d Seconds.\015\012"
   \              0x6F 0x74    
   \              0x20 0x44    
   \              0x65 0x6C    
   \              0x61 0x79    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x20 0x53    
   \              0x65 0x63    
   \              0x6F 0x6E    
   \              0x64 0x73    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_331:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TKRB:%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x4B 0x52    
   \              0x42 0x3A    
   \              0x25 0x73    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_332:
   \   00000000   0x56 0x65          DC8 "Version String: %s\015\012"
   \              0x72 0x73    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x53 0x74    
   \              0x72 0x69    
   \              0x6E 0x67    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_333:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKR_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x52 0x5F    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_334:
   \   00000000   0x54 0x4B          DC8 "TKR ERROR: Not a legal command.\015\012"
   \              0x52 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x61    
   \              0x20 0x6C    
   \              0x65 0x67    
   \              0x61 0x6C    
   \              0x20 0x63    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_335:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TU_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x55    
   \              0x5F 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_336:
   \   00000000   0x54 0x55          DC8 "TU SYNTAX ERROR: Not correct format.\015\012"
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x63    
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_337:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TUE_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x55 0x45    
   \              0x5F 0x41    
   \              0x43 0x4B    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_338:
   \   00000000   0x55 0x6E          DC8 "Units XML State CHANGED: ENABLED\015\012\015\012> "
   \              0x69 0x74    
   \              0x73 0x20    
   \              0x58 0x4D    
   \              0x4C 0x20    
   \              0x53 0x74    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x43 0x48    
   \              0x41 0x4E    
   \              0x47 0x45    
   \              0x44 0x3A    
   \              0x20 0x45    
   \              0x4E 0x41    
   \              0x42 0x4C    
   \              0x45 0x44    
   \              0x0D 0x0A    
   \              0x0D 0x0A    
   \              0x3E 0x20    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_339:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TUD_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x55 0x44    
   \              0x5F 0x41    
   \              0x43 0x4B    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_340:
   \   00000000   0x55 0x6E          DC8 "Units XML State CHANGED: DISABLED\015\012\015\012> "
   \              0x69 0x74    
   \              0x73 0x20    
   \              0x58 0x4D    
   \              0x4C 0x20    
   \              0x53 0x74    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x43 0x48    
   \              0x41 0x4E    
   \              0x47 0x45    
   \              0x44 0x3A    
   \              0x20 0x44    
   \              0x49 0x53    
   \              0x41 0x42    
   \              0x4C 0x45    
   \              0x44 0x0D    
   \              0x0A 0x0D    
   \              0x0A 0x3E    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_341:
   \   00000000   0x54 0x55          DC8 "TU SYNTAX ERROR: Not a legal command.\015\012"
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x61    
   \              0x20 0x6C    
   \              0x65 0x67    
   \              0x61 0x6C    
   \              0x20 0x63    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_342:
   \   00000000   0x42 0x47          DC8 "BGM111 MONITOR MODE.\015\012\015\012"
   \              0x4D 0x31    
   \              0x31 0x31    
   \              0x20 0x4D    
   \              0x4F 0x4E    
   \              0x49 0x54    
   \              0x4F 0x52    
   \              0x20 0x4D    
   \              0x4F 0x44    
   \              0x45 0x2E    
   \              0x0D 0x0A    
   \              0x0D 0x0A    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_343:
   \   00000000   0x55 0x73          DC8 "Use <ESC> to exit mode.\015\012\015\012"
   \              0x65 0x20    
   \              0x3C 0x45    
   \              0x53 0x43    
   \              0x3E 0x20    
   \              0x74 0x6F    
   \              0x20 0x65    
   \              0x78 0x69    
   \              0x74 0x20    
   \              0x6D 0x6F    
   \              0x64 0x65    
   \              0x2E 0x0D    
   \              0x0A 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_344:
   \   00000000   0x3C 0x53          DC8 "<STATUS>TF_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x54 0x46    
   \              0x5F 0x41    
   \              0x43 0x4B    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_345:
   \   00000000   0x46 0x6C          DC8 "Flash Frame Variables Reset to Factory Values.\015\012"
   \              0x61 0x73    
   \              0x68 0x20    
   \              0x46 0x72    
   \              0x61 0x6D    
   \              0x65 0x20    
   \              0x56 0x61    
   \              0x72 0x69    
   \              0x61 0x62    
   \              0x6C 0x65    
   \              0x73 0x20    
   \              0x52 0x65    
   \              0x73 0x65    
   \              0x74 0x20    
   \              0x74 0x6F    
   \              0x20 0x46    
   \              0x61 0x63    
   \              0x74 0x6F    
   \              0x72 0x79    
   \              0x20 0x56    
   \              0x61 0x6C    
   \              0x75 0x65    
   \              0x73 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000031   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_346:
   \   00000000   0x3C 0x53          DC8 "<STATUS>TL_ERROR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x54 0x4C    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_347:
   \   00000000   0x43 0x6F          DC8 "Code Locked for Programming!\015\012\015\012"
   \              0x64 0x65    
   \              0x20 0x4C    
   \              0x6F 0x63    
   \              0x6B 0x65    
   \              0x64 0x20    
   \              0x66 0x6F    
   \              0x72 0x20    
   \              0x50 0x72    
   \              0x6F 0x67    
   \              0x72 0x61    
   \              0x6D 0x6D    
   \              0x69 0x6E    
   \              0x67 0x21    
   \              0x0D 0x0A    
   \              0x0D 0x0A    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_348:
   \   00000000   0x20 0x20          DC8 "   HARD RESET NEEDED TO EXIT MODE\015\012"
   \              0x20 0x48    
   \              0x41 0x52    
   \              0x44 0x20    
   \              0x52 0x45    
   \              0x53 0x45    
   \              0x54 0x20    
   \              0x4E 0x45    
   \              0x45 0x44    
   \              0x45 0x44    
   \              0x20 0x54    
   \              0x4F 0x20    
   \              0x45 0x58    
   \              0x49 0x54    
   \              0x20 0x4D    
   \              0x4F 0x44    
   \              0x45 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_349:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_OTAMD_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x4F    
   \              0x54 0x41    
   \              0x4D 0x44    
   \              0x5F 0x41    
   \              0x43 0x4B    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_350:
   \   00000000   0x42 0x6F          DC8 "Boot Loader MONITOR MODE.\015\012\015\012"
   \              0x6F 0x74    
   \              0x20 0x4C    
   \              0x6F 0x61    
   \              0x64 0x65    
   \              0x72 0x20    
   \              0x4D 0x4F    
   \              0x4E 0x49    
   \              0x54 0x4F    
   \              0x52 0x20    
   \              0x4D 0x4F    
   \              0x44 0x45    
   \              0x2E 0x0D    
   \              0x0A 0x0D    
   \              0x0A 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_351:
   \   00000000   0x55 0x73          DC8 "Use <ESC> followed by <CR> to exit mode.\015\012\015\012"
   \              0x65 0x20    
   \              0x3C 0x45    
   \              0x53 0x43    
   \              0x3E 0x20    
   \              0x66 0x6F    
   \              0x6C 0x6C    
   \              0x6F 0x77    
   \              0x65 0x64    
   \              0x20 0x62    
   \              0x79 0x20    
   \              0x3C 0x43    
   \              0x52 0x3E    
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x65 0x78    
   \              0x69 0x74    
   \              0x20 0x6D    
   \              0x6F 0x64    
   \              0x65 0x2E    
   \              0x0D 0x0A    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_352:
   \   00000000   0x25 0x73          DC8 "%s %s"
   \              0x20 0x25    
   \              0x73 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_353:
   \   00000000   0x54 0x53          DC8 "TS: %s\015\012"
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_354:
   \   00000000   0x4E 0x4F          DC8 "NO ERROR FOUND.\015\012"
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x20 0x46    
   \              0x4F 0x55    
   \              0x4E 0x44    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_355:
   \   00000000   0x45 0x52          DC8 "ERROR: ILLEGAL S-Record.\015\012"
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x49    
   \              0x4C 0x4C    
   \              0x45 0x47    
   \              0x41 0x4C    
   \              0x20 0x53    
   \              0x2D 0x52    
   \              0x65 0x63    
   \              0x6F 0x72    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_356:
   \   00000000   0x45 0x52          DC8 "ERROR: ILLEGAL Record.\015\012"
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x49    
   \              0x4C 0x4C    
   \              0x45 0x47    
   \              0x41 0x4C    
   \              0x20 0x52    
   \              0x65 0x63    
   \              0x6F 0x72    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_357:
   \   00000000   0x45 0x52          DC8 "ERROR: Reserved S-Record Type.\015\012"
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x52    
   \              0x65 0x73    
   \              0x65 0x72    
   \              0x76 0x65    
   \              0x64 0x20    
   \              0x53 0x2D    
   \              0x52 0x65    
   \              0x63 0x6F    
   \              0x72 0x64    
   \              0x20 0x54    
   \              0x79 0x70    
   \              0x65 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_358:
   \   00000000   0x45 0x52          DC8 "ERROR: Illegal Byte Count.\015\012"
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x49    
   \              0x6C 0x6C    
   \              0x65 0x67    
   \              0x61 0x6C    
   \              0x20 0x42    
   \              0x79 0x74    
   \              0x65 0x20    
   \              0x43 0x6F    
   \              0x75 0x6E    
   \              0x74 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_359:
   \   00000000   0x45 0x52          DC8 "ERROR: Illegal Byte Data.\015\012"
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x49    
   \              0x6C 0x6C    
   \              0x65 0x67    
   \              0x61 0x6C    
   \              0x20 0x42    
   \              0x79 0x74    
   \              0x65 0x20    
   \              0x44 0x61    
   \              0x74 0x61    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_360:
   \   00000000   0x45 0x52          DC8 "ERROR: Checksum did not match data.\015\012"
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x43    
   \              0x68 0x65    
   \              0x63 0x6B    
   \              0x73 0x75    
   \              0x6D 0x20    
   \              0x64 0x69    
   \              0x64 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x6D 0x61    
   \              0x74 0x63    
   \              0x68 0x20    
   \              0x64 0x61    
   \              0x74 0x61    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_361:
   \   00000000   0x52 0x65          DC8 52H, 65H, 63H, 6FH, 72H, 64H, 20H, 54H
   \              0x63 0x6F    
   \              0x72 0x64    
   \              0x20 0x54    
   \   00000008   0x79 0x70          DC8 79H, 70H, 65H, 3AH, 20H, 53H, 30H, 5FH
   \              0x65 0x3A    
   \              0x20 0x53    
   \              0x30 0x5F    
   \   00000010   0x48 0x45          DC8 48H, 45H, 41H, 44H, 45H, 52H, 3AH, 20H
   \              0x41 0x44    
   \              0x45 0x52    
   \              0x3A 0x20    
   \   00000018   0x56 0x65          DC8 56H, 65H, 6EH, 64H, 6FH, 72H, 20H, 73H
   \              0x6E 0x64    
   \              0x6F 0x72    
   \              0x20 0x73    
   \   00000020   0x70 0x65          DC8 70H, 65H, 63H, 69H, 66H, 69H, 63H, 20H
   \              0x63 0x69    
   \              0x66 0x69    
   \              0x63 0x20    
   \   00000028   0x41 0x53          DC8 41H, 53H, 43H, 49H, 49H, 20H, 74H, 65H
   \              0x43 0x49    
   \              0x49 0x20    
   \              0x74 0x65    
   \   00000030   0x78 0x74          DC8 78H, 74H, 2EH, 0DH, 0AH, 0
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000036   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_362:
   \   00000000   0x52 0x65          DC8 52H, 65H, 63H, 6FH, 72H, 64H, 20H, 54H
   \              0x63 0x6F    
   \              0x72 0x64    
   \              0x20 0x54    
   \   00000008   0x79 0x70          DC8 79H, 70H, 65H, 3AH, 20H, 53H, 31H, 5FH
   \              0x65 0x3A    
   \              0x20 0x53    
   \              0x31 0x5F    
   \   00000010   0x44 0x41          DC8 44H, 41H, 54H, 41H, 3AH, 20H, 44H, 61H
   \              0x54 0x41    
   \              0x3A 0x20    
   \              0x44 0x61    
   \   00000018   0x74 0x61          DC8 74H, 61H, 20H, 74H, 68H, 61H, 74H, 20H
   \              0x20 0x74    
   \              0x68 0x61    
   \              0x74 0x20    
   \   00000020   0x73 0x74          DC8 73H, 74H, 61H, 72H, 74H, 73H, 20H, 61H
   \              0x61 0x72    
   \              0x74 0x73    
   \              0x20 0x61    
   \   00000028   0x74 0x20          DC8 74H, 20H, 74H, 68H, 65H, 20H, 31H, 36H
   \              0x74 0x68    
   \              0x65 0x20    
   \              0x31 0x36    
   \   00000030   0x2D 0x62          DC8 2DH, 62H, 69H, 74H, 20H, 61H, 64H, 64H
   \              0x69 0x74    
   \              0x20 0x61    
   \              0x64 0x64    
   \   00000038   0x72 0x65          DC8 72H, 65H, 73H, 73H, 20H, 66H, 69H, 65H
   \              0x73 0x73    
   \              0x20 0x66    
   \              0x69 0x65    
   \   00000040   0x6C 0x64          DC8 6CH, 64H, 2EH, 0DH, 0AH, 0
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000046   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_363:
   \   00000000   0x52 0x65          DC8 52H, 65H, 63H, 6FH, 72H, 64H, 20H, 54H
   \              0x63 0x6F    
   \              0x72 0x64    
   \              0x20 0x54    
   \   00000008   0x79 0x70          DC8 79H, 70H, 65H, 3AH, 20H, 53H, 32H, 5FH
   \              0x65 0x3A    
   \              0x20 0x53    
   \              0x32 0x5F    
   \   00000010   0x44 0x41          DC8 44H, 41H, 54H, 41H, 3AH, 20H, 44H, 61H
   \              0x54 0x41    
   \              0x3A 0x20    
   \              0x44 0x61    
   \   00000018   0x74 0x61          DC8 74H, 61H, 20H, 74H, 68H, 61H, 74H, 20H
   \              0x20 0x74    
   \              0x68 0x61    
   \              0x74 0x20    
   \   00000020   0x73 0x74          DC8 73H, 74H, 61H, 72H, 74H, 73H, 20H, 61H
   \              0x61 0x72    
   \              0x74 0x73    
   \              0x20 0x61    
   \   00000028   0x74 0x20          DC8 74H, 20H, 74H, 68H, 65H, 20H, 32H, 34H
   \              0x74 0x68    
   \              0x65 0x20    
   \              0x32 0x34    
   \   00000030   0x2D 0x62          DC8 2DH, 62H, 69H, 74H, 20H, 61H, 64H, 64H
   \              0x69 0x74    
   \              0x20 0x61    
   \              0x64 0x64    
   \   00000038   0x72 0x65          DC8 72H, 65H, 73H, 73H, 20H, 66H, 69H, 65H
   \              0x73 0x73    
   \              0x20 0x66    
   \              0x69 0x65    
   \   00000040   0x6C 0x64          DC8 6CH, 64H, 2EH, 0DH, 0AH, 0
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000046   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_364:
   \   00000000   0x52 0x65          DC8 52H, 65H, 63H, 6FH, 72H, 64H, 20H, 54H
   \              0x63 0x6F    
   \              0x72 0x64    
   \              0x20 0x54    
   \   00000008   0x79 0x70          DC8 79H, 70H, 65H, 3AH, 20H, 53H, 33H, 5FH
   \              0x65 0x3A    
   \              0x20 0x53    
   \              0x33 0x5F    
   \   00000010   0x44 0x41          DC8 44H, 41H, 54H, 41H, 3AH, 20H, 44H, 61H
   \              0x54 0x41    
   \              0x3A 0x20    
   \              0x44 0x61    
   \   00000018   0x74 0x61          DC8 74H, 61H, 20H, 74H, 68H, 61H, 74H, 20H
   \              0x20 0x74    
   \              0x68 0x61    
   \              0x74 0x20    
   \   00000020   0x73 0x74          DC8 73H, 74H, 61H, 72H, 74H, 73H, 20H, 61H
   \              0x61 0x72    
   \              0x74 0x73    
   \              0x20 0x61    
   \   00000028   0x74 0x20          DC8 74H, 20H, 74H, 68H, 65H, 20H, 33H, 32H
   \              0x74 0x68    
   \              0x65 0x20    
   \              0x33 0x32    
   \   00000030   0x2D 0x62          DC8 2DH, 62H, 69H, 74H, 20H, 61H, 64H, 64H
   \              0x69 0x74    
   \              0x20 0x61    
   \              0x64 0x64    
   \   00000038   0x72 0x65          DC8 72H, 65H, 73H, 73H, 20H, 66H, 69H, 65H
   \              0x73 0x73    
   \              0x20 0x66    
   \              0x69 0x65    
   \   00000040   0x6C 0x64          DC8 6CH, 64H, 2EH, 0DH, 0AH, 0
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000046   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_365:
   \   00000000   0x52 0x65          DC8 "Record Type: S4_RESERVED\015\012"
   \              0x63 0x6F    
   \              0x72 0x64    
   \              0x20 0x54    
   \              0x79 0x70    
   \              0x65 0x3A    
   \              0x20 0x53    
   \              0x34 0x5F    
   \              0x52 0x45    
   \              0x53 0x45    
   \              0x52 0x56    
   \              0x45 0x44    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_366:
   \   00000000   0x52 0x65          DC8 52H, 65H, 63H, 6FH, 72H, 64H, 20H, 54H
   \              0x63 0x6F    
   \              0x72 0x64    
   \              0x20 0x54    
   \   00000008   0x79 0x70          DC8 79H, 70H, 65H, 3AH, 20H, 53H, 35H, 5FH
   \              0x65 0x3A    
   \              0x20 0x53    
   \              0x35 0x5F    
   \   00000010   0x43 0x4F          DC8 43H, 4FH, 55H, 4EH, 54H, 3AH, 20H, 31H
   \              0x55 0x4E    
   \              0x54 0x3A    
   \              0x20 0x31    
   \   00000018   0x36 0x2D          DC8 36H, 2DH, 62H, 69H, 74H, 20H, 63H, 6FH
   \              0x62 0x69    
   \              0x74 0x20    
   \              0x63 0x6F    
   \   00000020   0x75 0x6E          DC8 75H, 6EH, 74H, 20H, 6FH, 66H, 20H, 53H
   \              0x74 0x20    
   \              0x6F 0x66    
   \              0x20 0x53    
   \   00000028   0x31 0x20          DC8 31H, 20H, 2FH, 20H, 53H, 32H, 20H, 2FH
   \              0x2F 0x20    
   \              0x53 0x32    
   \              0x20 0x2F    
   \   00000030   0x20 0x53          DC8 20H, 53H, 33H, 20H, 72H, 65H, 63H, 6FH
   \              0x33 0x20    
   \              0x72 0x65    
   \              0x63 0x6F    
   \   00000038   0x72 0x64          DC8 72H, 64H, 73H, 2EH, 0DH, 0AH, 0
   \              0x73 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000003F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_367:
   \   00000000   0x52 0x65          DC8 52H, 65H, 63H, 6FH, 72H, 64H, 20H, 54H
   \              0x63 0x6F    
   \              0x72 0x64    
   \              0x20 0x54    
   \   00000008   0x79 0x70          DC8 79H, 70H, 65H, 3AH, 20H, 53H, 36H, 5FH
   \              0x65 0x3A    
   \              0x20 0x53    
   \              0x36 0x5F    
   \   00000010   0x43 0x4F          DC8 43H, 4FH, 55H, 4EH, 54H, 3AH, 20H, 32H
   \              0x55 0x4E    
   \              0x54 0x3A    
   \              0x20 0x32    
   \   00000018   0x34 0x2D          DC8 34H, 2DH, 62H, 69H, 74H, 20H, 63H, 6FH
   \              0x62 0x69    
   \              0x74 0x20    
   \              0x63 0x6F    
   \   00000020   0x75 0x6E          DC8 75H, 6EH, 74H, 20H, 6FH, 66H, 20H, 53H
   \              0x74 0x20    
   \              0x6F 0x66    
   \              0x20 0x53    
   \   00000028   0x31 0x20          DC8 31H, 20H, 2FH, 20H, 53H, 32H, 20H, 2FH
   \              0x2F 0x20    
   \              0x53 0x32    
   \              0x20 0x2F    
   \   00000030   0x20 0x53          DC8 20H, 53H, 33H, 20H, 72H, 65H, 63H, 6FH
   \              0x33 0x20    
   \              0x72 0x65    
   \              0x63 0x6F    
   \   00000038   0x72 0x64          DC8 72H, 64H, 73H, 2EH, 0DH, 0AH, 0
   \              0x73 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000003F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_368:
   \   00000000   0x52 0x65          DC8 52H, 65H, 63H, 6FH, 72H, 64H, 20H, 54H
   \              0x63 0x6F    
   \              0x72 0x64    
   \              0x20 0x54    
   \   00000008   0x79 0x70          DC8 79H, 70H, 65H, 3AH, 20H, 53H, 37H, 5FH
   \              0x65 0x3A    
   \              0x20 0x53    
   \              0x37 0x5F    
   \   00000010   0x53 0x54          DC8 53H, 54H, 41H, 52H, 54H, 3AH, 20H, 53H
   \              0x41 0x52    
   \              0x54 0x3A    
   \              0x20 0x53    
   \   00000018   0x74 0x61          DC8 74H, 61H, 72H, 74H, 69H, 6EH, 67H, 20H
   \              0x72 0x74    
   \              0x69 0x6E    
   \              0x67 0x20    
   \   00000020   0x65 0x78          DC8 65H, 78H, 65H, 63H, 75H, 74H, 69H, 6FH
   \              0x65 0x63    
   \              0x75 0x74    
   \              0x69 0x6F    
   \   00000028   0x6E 0x20          DC8 6EH, 20H, 6CH, 6FH, 63H, 61H, 74H, 69H
   \              0x6C 0x6F    
   \              0x63 0x61    
   \              0x74 0x69    
   \   00000030   0x6F 0x6E          DC8 6FH, 6EH, 20H, 61H, 74H, 20H, 61H, 20H
   \              0x20 0x61    
   \              0x74 0x20    
   \              0x61 0x20    
   \   00000038   0x33 0x32          DC8 33H, 32H, 2DH, 62H, 69H, 74H, 20H, 61H
   \              0x2D 0x62    
   \              0x69 0x74    
   \              0x20 0x61    
   \   00000040   0x64 0x64          DC8 64H, 64H, 72H, 65H, 73H, 73H, 2EH, 0DH
   \              0x72 0x65    
   \              0x73 0x73    
   \              0x2E 0x0D    
   \   00000048   0x0A 0x00          DC8 0AH, 0
   \   0000004A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_369:
   \   00000000   0x52 0x65          DC8 52H, 65H, 63H, 6FH, 72H, 64H, 20H, 54H
   \              0x63 0x6F    
   \              0x72 0x64    
   \              0x20 0x54    
   \   00000008   0x79 0x70          DC8 79H, 70H, 65H, 3AH, 20H, 53H, 38H, 5FH
   \              0x65 0x3A    
   \              0x20 0x53    
   \              0x38 0x5F    
   \   00000010   0x53 0x54          DC8 53H, 54H, 41H, 52H, 54H, 3AH, 20H, 53H
   \              0x41 0x52    
   \              0x54 0x3A    
   \              0x20 0x53    
   \   00000018   0x74 0x61          DC8 74H, 61H, 72H, 74H, 69H, 6EH, 67H, 20H
   \              0x72 0x74    
   \              0x69 0x6E    
   \              0x67 0x20    
   \   00000020   0x65 0x78          DC8 65H, 78H, 65H, 63H, 75H, 74H, 69H, 6FH
   \              0x65 0x63    
   \              0x75 0x74    
   \              0x69 0x6F    
   \   00000028   0x6E 0x20          DC8 6EH, 20H, 6CH, 6FH, 63H, 61H, 74H, 69H
   \              0x6C 0x6F    
   \              0x63 0x61    
   \              0x74 0x69    
   \   00000030   0x6F 0x6E          DC8 6FH, 6EH, 20H, 61H, 74H, 20H, 61H, 20H
   \              0x20 0x61    
   \              0x74 0x20    
   \              0x61 0x20    
   \   00000038   0x32 0x34          DC8 32H, 34H, 2DH, 62H, 69H, 74H, 20H, 61H
   \              0x2D 0x62    
   \              0x69 0x74    
   \              0x20 0x61    
   \   00000040   0x64 0x64          DC8 64H, 64H, 72H, 65H, 73H, 73H, 2EH, 0DH
   \              0x72 0x65    
   \              0x73 0x73    
   \              0x2E 0x0D    
   \   00000048   0x0A 0x00          DC8 0AH, 0
   \   0000004A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_370:
   \   00000000   0x52 0x65          DC8 52H, 65H, 63H, 6FH, 72H, 64H, 20H, 54H
   \              0x63 0x6F    
   \              0x72 0x64    
   \              0x20 0x54    
   \   00000008   0x79 0x70          DC8 79H, 70H, 65H, 3AH, 20H, 53H, 39H, 5FH
   \              0x65 0x3A    
   \              0x20 0x53    
   \              0x39 0x5F    
   \   00000010   0x53 0x54          DC8 53H, 54H, 41H, 52H, 54H, 3AH, 20H, 53H
   \              0x41 0x52    
   \              0x54 0x3A    
   \              0x20 0x53    
   \   00000018   0x74 0x61          DC8 74H, 61H, 72H, 74H, 69H, 6EH, 67H, 20H
   \              0x72 0x74    
   \              0x69 0x6E    
   \              0x67 0x20    
   \   00000020   0x65 0x78          DC8 65H, 78H, 65H, 63H, 75H, 74H, 69H, 6FH
   \              0x65 0x63    
   \              0x75 0x74    
   \              0x69 0x6F    
   \   00000028   0x6E 0x20          DC8 6EH, 20H, 6CH, 6FH, 63H, 61H, 74H, 69H
   \              0x6C 0x6F    
   \              0x63 0x61    
   \              0x74 0x69    
   \   00000030   0x6F 0x6E          DC8 6FH, 6EH, 20H, 61H, 74H, 20H, 61H, 20H
   \              0x20 0x61    
   \              0x74 0x20    
   \              0x61 0x20    
   \   00000038   0x31 0x36          DC8 31H, 36H, 2DH, 62H, 69H, 74H, 20H, 61H
   \              0x2D 0x62    
   \              0x69 0x74    
   \              0x20 0x61    
   \   00000040   0x64 0x64          DC8 64H, 64H, 72H, 65H, 73H, 73H, 2EH, 0DH
   \              0x72 0x65    
   \              0x73 0x73    
   \              0x2E 0x0D    
   \   00000048   0x0A 0x00          DC8 0AH, 0
   \   0000004A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_371:
   \   00000000   0x52 0x65          DC8 "Record Type: UNKNOWN.\015\012"
   \              0x63 0x6F    
   \              0x72 0x64    
   \              0x20 0x54    
   \              0x79 0x70    
   \              0x65 0x3A    
   \              0x20 0x55    
   \              0x4E 0x4B    
   \              0x4E 0x4F    
   \              0x57 0x4E    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_372:
   \   00000000   0x42 0x79          DC8 "Byte Count: %08x\015\012"
   \              0x74 0x65    
   \              0x20 0x43    
   \              0x6F 0x75    
   \              0x6E 0x74    
   \              0x3A 0x20    
   \              0x25 0x30    
   \              0x38 0x78    
   \              0x0D 0x0A    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_373:
   \   00000000   0x41 0x64          DC8 "Address: %08x\015\012"
   \              0x64 0x72    
   \              0x65 0x73    
   \              0x73 0x3A    
   \              0x20 0x25    
   \              0x30 0x38    
   \              0x78 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_374:
   \   00000000   0x48 0x65          DC8 "Header: %s\015\012"
   \              0x61 0x64    
   \              0x65 0x72    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_375:
   \   00000000   0x25 0x30          DC8 "%02x "
   \              0x32 0x78    
   \              0x20 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_376:
   \   00000000   0x43 0x68          DC8 "Checksum: %02x\015\012"
   \              0x65 0x63    
   \              0x6B 0x73    
   \              0x75 0x6D    
   \              0x3A 0x20    
   \              0x25 0x30    
   \              0x32 0x78    
   \              0x0D 0x0A    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_377:
   \   00000000   0x54 0x53          DC8 "TS SYNTAX ERROR: Too many parameters.\015\012"
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x54    
   \              0x6F 0x6F    
   \              0x20 0x6D    
   \              0x61 0x6E    
   \              0x79 0x20    
   \              0x70 0x61    
   \              0x72 0x61    
   \              0x6D 0x65    
   \              0x74 0x65    
   \              0x72 0x73    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_378:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: BERR: Bus Error reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x45 0x52    
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x75 0x73    
   \              0x20 0x45    
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x20 0x72    
   \              0x65 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_379:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: ARLO: Arbitration lost reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x41    
   \              0x52 0x4C    
   \              0x4F 0x3A    
   \              0x20 0x41    
   \              0x72 0x62    
   \              0x69 0x74    
   \              0x72 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x6C    
   \              0x6F 0x73    
   \              0x74 0x20    
   \              0x72 0x65    
   \              0x70 0x6F    
   \              0x72 0x74    
   \              0x65 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   0000002E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_380:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: AF: Acknowledge failure reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x41    
   \              0x46 0x3A    
   \              0x20 0x41    
   \              0x63 0x6B    
   \              0x6E 0x6F    
   \              0x77 0x6C    
   \              0x65 0x64    
   \              0x67 0x65    
   \              0x20 0x66    
   \              0x61 0x69    
   \              0x6C 0x75    
   \              0x72 0x65    
   \              0x20 0x72    
   \              0x65 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_381:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: OVR: Overrun/Underrun reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4F    
   \              0x56 0x52    
   \              0x3A 0x20    
   \              0x4F 0x76    
   \              0x65 0x72    
   \              0x72 0x75    
   \              0x6E 0x2F    
   \              0x55 0x6E    
   \              0x64 0x65    
   \              0x72 0x72    
   \              0x75 0x6E    
   \              0x20 0x72    
   \              0x65 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_382:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: DMA: DMA Error reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x44    
   \              0x4D 0x41    
   \              0x3A 0x20    
   \              0x44 0x4D    
   \              0x41 0x20    
   \              0x45 0x72    
   \              0x72 0x6F    
   \              0x72 0x20    
   \              0x72 0x65    
   \              0x70 0x6F    
   \              0x72 0x74    
   \              0x65 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_383:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: TIMEOUT: Timeout Error reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x54    
   \              0x49 0x4D    
   \              0x45 0x4F    
   \              0x55 0x54    
   \              0x3A 0x20    
   \              0x54 0x69    
   \              0x6D 0x65    
   \              0x6F 0x75    
   \              0x74 0x20    
   \              0x45 0x72    
   \              0x72 0x6F    
   \              0x72 0x20    
   \              0x72 0x65    
   \              0x70 0x6F    
   \              0x72 0x74    
   \              0x65 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   0000002E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_384:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: Unknown Error reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x55    
   \              0x6E 0x6B    
   \              0x6E 0x6F    
   \              0x77 0x6E    
   \              0x20 0x45    
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x20 0x72    
   \              0x65 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_385:
   \   00000000   0x49 0x32          DC8 "I2C BUSY: I2C reported BUSY error.\015\012"
   \              0x43 0x20    
   \              0x42 0x55    
   \              0x53 0x59    
   \              0x3A 0x20    
   \              0x49 0x32    
   \              0x43 0x20    
   \              0x72 0x65    
   \              0x70 0x6F    
   \              0x72 0x74    
   \              0x65 0x64    
   \              0x20 0x42    
   \              0x55 0x53    
   \              0x59 0x20    
   \              0x65 0x72    
   \              0x72 0x6F    
   \              0x72 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_386:
   \   00000000   0x49 0x32          DC8 "I2C TIMEOUT: I2C reported TIMEOUT.\015\012"
   \              0x43 0x20    
   \              0x54 0x49    
   \              0x4D 0x45    
   \              0x4F 0x55    
   \              0x54 0x3A    
   \              0x20 0x49    
   \              0x32 0x43    
   \              0x20 0x72    
   \              0x65 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x20    
   \              0x54 0x49    
   \              0x4D 0x45    
   \              0x4F 0x55    
   \              0x54 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_387:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: I2C reported unnown error.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x49    
   \              0x32 0x43    
   \              0x20 0x72    
   \              0x65 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x20    
   \              0x75 0x6E    
   \              0x6E 0x6F    
   \              0x77 0x6E    
   \              0x20 0x65    
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_388:
   \   00000000   0x0D 0x0A          DC8 "\015\012\015\012> "
   \              0x0D 0x0A    
   \              0x3E 0x20    
   \              0x00         
   \   00000007   0x00               DC8 0
   4757          
   4758          /*void sleep(void) {
   4759          //    TimMasterHandle.Instance = TIM5;
   4760           
   4761              // Disable HAL tick interrupt
   4762          //    __HAL_TIM_DISABLE_IT(&TimMasterHandle, TIM_IT_CC2);
   4763           
   4764              // Request to enter SLEEP mode
   4765              HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
   4766           
   4767              // Enable HAL tick interrupt
   4768          //    __HAL_TIM_ENABLE_IT(&TimMasterHandle, TIM_IT_CC2);
   4769          }*/
   4770           
   4771          /*void deepsleep(void) {
   4772              // Request to enter STOP mode with regulator in low power mode
   4773              HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
   4774           
   4775              // After wake-up from STOP reconfigure the PLL
   4776              //SetSysClock();
   4777              SystemClock_Config();
   4778          }*/
   4779          
   4780          /************************ (C) COPYRIGHT WeatherCloud *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   RoadBrd_BGMTsk
        16   -> strcpy
        16   -> strlen
    1368   RoadBrd_ParseString
      1368   -> BGM111_Transmit
      1368   -> Get_DriverStates
      1368   -> Get_DriverStatus
      1368   -> HAL_Delay
      1368   -> HAL_NVIC_SystemReset
      1368   -> MX_I2C1_Reset
      1368   -> Parse_srecord
      1368   -> RdBrd_CAL_GetStr
      1368   -> RoadBrdSnd_ClrBffrs
      1368   -> RoadBrdSnd_DumpBin0
      1368   -> RoadBrdSnd_DumpBin16
      1368   -> RoadBrdSnd_DumpBin32
      1368   -> RoadBrdSnd_DumpBin48
      1368   -> RoadBrdSnd_ProcessSound
      1368   -> RoadBrdSnd_getSaveBffr
      1368   -> RoadBrd_Baro_ReadPressure
      1368   -> RoadBrd_Baro_ReadPressure_Scaled
      1368   -> RoadBrd_Baro_ReadTemp
      1368   -> RoadBrd_CAL_GetOffset
      1368   -> RoadBrd_CAL_GetSlope
      1368   -> RoadBrd_CAL_GetTimeString
      1368   -> RoadBrd_CAL_InitializeFrmFlash
      1368   -> RoadBrd_CAL_Set_CalItem
      1368   -> RoadBrd_CAL_Set_TimeString
      1368   -> RoadBrd_CoolEye_ReadValues
      1368   -> RoadBrd_CoolEye_ReadValues_Scaled
      1368   -> RoadBrd_Get_BootDelay
      1368   -> RoadBrd_Get_RdSndTickCnt
      1368   -> RoadBrd_Get_SnsrTickCnt
      1368   -> RoadBrd_Get_TackLimit
      1368   -> RoadBrd_Get_VersionString
      1368   -> RoadBrd_GridEyeInit
      1368   -> RoadBrd_GridEyeReset
      1368   -> RoadBrd_GridEye_ReadValues
      1368   -> RoadBrd_GridEye_ReadValues_Scaled
      1368   -> RoadBrd_HumidityInit
      1368   -> RoadBrd_Humidity_ReadHumidity
      1368   -> RoadBrd_Humidity_ReadHumidity_Scaled
      1368   -> RoadBrd_Humidity_ReadTemperature
      1368   -> RoadBrd_I2C_GetError
      1368   -> RoadBrd_I2C_Master_Receive
      1368   -> RoadBrd_I2C_Master_Transmit
      1368   -> RoadBrd_Init_Barometer
      1368   -> RoadBrd_Init_VMonitor
      1368   -> RoadBrd_RGBFullInit
      1368   -> RoadBrd_RGBInit
      1368   -> RoadBrd_RGBReadID
      1368   -> RoadBrd_RGBReadStatus
      1368   -> RoadBrd_RGBReadValues
      1368   -> RoadBrd_RGBReset
      1368   -> RoadBrd_ReadTemp
      1368   -> RoadBrd_ReadTemp_Scaled
      1368   -> RoadBrd_Set_BootDelay
      1368   -> RoadBrd_Set_RdSndTickCnt
      1368   -> RoadBrd_Set_SnsrTickCnt
      1368   -> RoadBrd_Set_TackLimit
      1368   -> RoadBrd_Set_UnitsFlag
      1368   -> RoadBrd_Set_VersionString
      1368   -> RoadBrd_TestandRead_Barometer
      1368   -> RoadBrd_UART_Transmit
      1368   -> RoadBrd_VMonitor_RdCurrent
      1368   -> RoadBrd_VMonitor_RdCurrent_Scaled
      1368   -> RoadBrd_VMonitor_RdPower
      1368   -> RoadBrd_VMonitor_RdPower_Scaled
      1368   -> RoadBrd_VMonitor_RdShntVltg
      1368   -> RoadBrd_VMonitor_RdShntVltg_Scaled
      1368   -> RoadBrd_VMonitor_RdVoltage
      1368   -> RoadBrd_VMonitor_RdVoltage_Scaled
      1368   -> RoadBrd_WWDG_InitializeFrmFlash
      1368   -> RoadBrd_WaitForState
      1368   -> RoadBrd_gpio_Off
      1368   -> RoadBrd_gpio_On
      1368   -> Set_Boot_Bypass
      1368   -> __aeabi_f2d
      1368   -> __aeabi_fdiv
      1368   -> __aeabi_ui2f
      1368   -> atoi
      1368   -> hatoi
      1368   -> isHexNum
      1368   -> isdigit
      1368   -> sprintf
      1368   -> sscanf
      1368   -> strcat
      1368   -> strcpy
      1368   -> strlen
      1368   -> strncmp
       0   RoadBrd_ParserInit
      16   RoadBrd_ParserTsk
        16   -> strcpy
        16   -> strlen
      88   RoadBrd_ProcessParserTsk
        88   -> BGM111_Transmit
        88   -> Parse_BootString
        88   -> RoadBrd_ParseString
        88   -> RoadBrd_UART_Transmit
        88   -> Tst_Boot_Bypass
        88   -> sprintf
        88   -> strlen
       0   Tst_Bypass
      24   hatoi
        24   -> strlen
      24   isHexNum
        24   -> strlen


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_10
       4  ??DataTable4_11
       4  ??DataTable4_12
       4  ??DataTable4_13
       4  ??DataTable4_14
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
       4  ??DataTable4_9
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_10
       4  ??DataTable5_11
       4  ??DataTable5_12
       4  ??DataTable5_13
       4  ??DataTable5_14
       4  ??DataTable5_15
       4  ??DataTable5_16
       4  ??DataTable5_17
       4  ??DataTable5_18
       4  ??DataTable5_19
       4  ??DataTable5_2
       4  ??DataTable5_20
       4  ??DataTable5_21
       4  ??DataTable5_22
       4  ??DataTable5_23
       4  ??DataTable5_24
       4  ??DataTable5_25
       4  ??DataTable5_26
       4  ??DataTable5_27
       4  ??DataTable5_28
       4  ??DataTable5_29
       4  ??DataTable5_3
       4  ??DataTable5_30
       4  ??DataTable5_31
       4  ??DataTable5_32
       4  ??DataTable5_33
       4  ??DataTable5_34
       4  ??DataTable5_35
       4  ??DataTable5_36
       4  ??DataTable5_37
       4  ??DataTable5_38
       4  ??DataTable5_39
       4  ??DataTable5_4
       4  ??DataTable5_40
       4  ??DataTable5_41
       4  ??DataTable5_42
       4  ??DataTable5_43
       4  ??DataTable5_44
       4  ??DataTable5_45
       4  ??DataTable5_46
       4  ??DataTable5_47
       4  ??DataTable5_48
       4  ??DataTable5_49
       4  ??DataTable5_5
       4  ??DataTable5_50
       4  ??DataTable5_51
       4  ??DataTable5_52
       4  ??DataTable5_53
       4  ??DataTable5_54
       4  ??DataTable5_55
       4  ??DataTable5_56
       4  ??DataTable5_57
       4  ??DataTable5_58
       4  ??DataTable5_59
       4  ??DataTable5_6
       4  ??DataTable5_60
       4  ??DataTable5_61
       4  ??DataTable5_62
       4  ??DataTable5_63
       4  ??DataTable5_64
       4  ??DataTable5_65
       4  ??DataTable5_66
       4  ??DataTable5_67
       4  ??DataTable5_68
       4  ??DataTable5_69
       4  ??DataTable5_7
       4  ??DataTable5_70
       4  ??DataTable5_71
       4  ??DataTable5_72
       4  ??DataTable5_73
       4  ??DataTable5_74
       4  ??DataTable5_75
       4  ??DataTable5_76
       4  ??DataTable5_77
       4  ??DataTable5_78
       4  ??DataTable5_79
       4  ??DataTable5_8
       4  ??DataTable5_80
       4  ??DataTable5_81
       4  ??DataTable5_82
       4  ??DataTable5_83
       4  ??DataTable5_9
      16  ?_0
      56  ?_1
      32  ?_10
      32  ?_100
       8  ?_101
      52  ?_102
      36  ?_103
      32  ?_104
      32  ?_105
      44  ?_106
      32  ?_107
      40  ?_108
      40  ?_109
      40  ?_11
      44  ?_110
      52  ?_111
      24  ?_112
      20  ?_113
       4  ?_114
      40  ?_115
      44  ?_116
      52  ?_117
      60  ?_118
      24  ?_119
      32  ?_12
      40  ?_120
      20  ?_121
      12  ?_122
      40  ?_123
      44  ?_124
      52  ?_125
      64  ?_126
      40  ?_127
      12  ?_128
      40  ?_129
      32  ?_13
      24  ?_130
      40  ?_131
      24  ?_132
      44  ?_133
      36  ?_134
      40  ?_135
      36  ?_136
      32  ?_137
      40  ?_138
      36  ?_139
      40  ?_14
      36  ?_140
      12  ?_141
      24  ?_142
       8  ?_143
      36  ?_144
      28  ?_145
      40  ?_146
      28  ?_147
       8  ?_148
      32  ?_149
      32  ?_15
      24  ?_150
      36  ?_151
       8  ?_152
      32  ?_153
      20  ?_154
      36  ?_155
       8  ?_156
      32  ?_157
      24  ?_158
      36  ?_159
      32  ?_16
       8  ?_160
      32  ?_161
      20  ?_162
      36  ?_163
       8  ?_164
      32  ?_165
      20  ?_166
      36  ?_167
       8  ?_168
      36  ?_169
      40  ?_17
      24  ?_170
      40  ?_171
       8  ?_172
      36  ?_173
      24  ?_174
      40  ?_175
       8  ?_176
      36  ?_177
      24  ?_178
      40  ?_179
      28  ?_18
       8  ?_180
      36  ?_181
      24  ?_182
      40  ?_183
       8  ?_184
      32  ?_185
      24  ?_186
      36  ?_187
       8  ?_188
      36  ?_189
       1  ?_19
      24  ?_190
      40  ?_191
       8  ?_192
      36  ?_193
      24  ?_194
      40  ?_195
       8  ?_196
      32  ?_197
      24  ?_198
      36  ?_199
      36  ?_2
       8  ?_20
       8  ?_200
      36  ?_201
      24  ?_202
      40  ?_203
       8  ?_204
      36  ?_205
      24  ?_206
      40  ?_207
       8  ?_208
      36  ?_209
      12  ?_21
      24  ?_210
      40  ?_211
       8  ?_212
      36  ?_213
      24  ?_214
      40  ?_215
       8  ?_216
      36  ?_217
      24  ?_218
      40  ?_219
      20  ?_22
       8  ?_220
      36  ?_221
      24  ?_222
      40  ?_223
       8  ?_224
      36  ?_225
      24  ?_226
      40  ?_227
       8  ?_228
      36  ?_229
      28  ?_23
      24  ?_230
      40  ?_231
      36  ?_232
      32  ?_233
      48  ?_234
      16  ?_235
      32  ?_236
      36  ?_237
      24  ?_238
      24  ?_239
      36  ?_24
      24  ?_240
      32  ?_241
      24  ?_242
      24  ?_243
      24  ?_244
      32  ?_245
      24  ?_246
      24  ?_247
      24  ?_248
      24  ?_249
      32  ?_25
      24  ?_250
      24  ?_251
      24  ?_252
      24  ?_253
      24  ?_254
      24  ?_255
      24  ?_256
      24  ?_257
      24  ?_258
      32  ?_259
      40  ?_26
      24  ?_260
      24  ?_261
      24  ?_262
      24  ?_263
      24  ?_264
      32  ?_265
      24  ?_266
      24  ?_267
      24  ?_268
      24  ?_269
      40  ?_27
      24  ?_270
      24  ?_271
      24  ?_272
      24  ?_273
      24  ?_274
      24  ?_275
      24  ?_276
      24  ?_277
      24  ?_278
      24  ?_279
      40  ?_28
      24  ?_280
      24  ?_281
      20  ?_282
      32  ?_283
      40  ?_284
      36  ?_285
      36  ?_286
      32  ?_287
      28  ?_288
      32  ?_289
      56  ?_29
      28  ?_290
      32  ?_291
      24  ?_292
      32  ?_293
      36  ?_294
      32  ?_295
      40  ?_296
      36  ?_297
      44  ?_298
      36  ?_299
      68  ?_3
      20  ?_30
      36  ?_300
      32  ?_301
      36  ?_302
      44  ?_303
      36  ?_304
      36  ?_305
      32  ?_306
      36  ?_307
      44  ?_308
      36  ?_309
      36  ?_31
      36  ?_310
      32  ?_311
      36  ?_312
      44  ?_313
      36  ?_314
      36  ?_315
      32  ?_316
      36  ?_317
      44  ?_318
      36  ?_319
      16  ?_32
      36  ?_320
      32  ?_321
      36  ?_322
      32  ?_323
      40  ?_324
      32  ?_325
      40  ?_326
      28  ?_327
      20  ?_328
      28  ?_329
      12  ?_33
      28  ?_330
      28  ?_331
      24  ?_332
      32  ?_333
      36  ?_334
      32  ?_335
      40  ?_336
      28  ?_337
      40  ?_338
      28  ?_339
      40  ?_34
      40  ?_340
      40  ?_341
      28  ?_342
      28  ?_343
      24  ?_344
      52  ?_345
      28  ?_346
      36  ?_347
      36  ?_348
      32  ?_349
      40  ?_35
      32  ?_350
      48  ?_351
       8  ?_352
      12  ?_353
      20  ?_354
      28  ?_355
      28  ?_356
      36  ?_357
      32  ?_358
      28  ?_359
      20  ?_36
      40  ?_360
      56  ?_361
      72  ?_362
      72  ?_363
      72  ?_364
      28  ?_365
      64  ?_366
      64  ?_367
      76  ?_368
      76  ?_369
      32  ?_37
      76  ?_370
      24  ?_371
      20  ?_372
      16  ?_373
      16  ?_374
       8  ?_375
      20  ?_376
      40  ?_377
      40  ?_378
      48  ?_379
      16  ?_38
      48  ?_380
      48  ?_381
      40  ?_382
      48  ?_383
      40  ?_384
      40  ?_385
      40  ?_386
      40  ?_387
       8  ?_388
      16  ?_39
      40  ?_4
      40  ?_40
      40  ?_41
      32  ?_42
      28  ?_43
      36  ?_44
      48  ?_45
      48  ?_46
      24  ?_47
      20  ?_48
      56  ?_49
      32  ?_5
      44  ?_50
      40  ?_51
      24  ?_52
      32  ?_53
      28  ?_54
      44  ?_55
      36  ?_56
      28  ?_57
      36  ?_58
      20  ?_59
      32  ?_6
      36  ?_60
      24  ?_61
      32  ?_62
      20  ?_63
      32  ?_64
      20  ?_65
      32  ?_66
      24  ?_67
      24  ?_68
      36  ?_69
       4  ?_7
      32  ?_70
      24  ?_71
      44  ?_72
      16  ?_73
      48  ?_74
      24  ?_75
      20  ?_76
      44  ?_77
      40  ?_78
      28  ?_79
      40  ?_8
      56  ?_80
      16  ?_81
      44  ?_82
      12  ?_83
      12  ?_84
      12  ?_85
      72  ?_86
      68  ?_87
      72  ?_88
      64  ?_89
      32  ?_9
      60  ?_90
      60  ?_91
      60  ?_92
      56  ?_93
      64  ?_94
      64  ?_95
      64  ?_96
      64  ?_97
      64  ?_98
      68  ?_99
     260  BGMString
       1  Bypass
     260  ParseString
      84  RoadBrd_BGMTsk
   19708  RoadBrd_ParseString
      20  RoadBrd_ParserInit
      84  RoadBrd_ParserTsk
     126  RoadBrd_ProcessParserTsk
       6  Tst_Bypass
      88  hatoi
      74  isHexNum

 
    521 bytes in section .bss
 12 577 bytes in section .rodata
 20 598 bytes in section .text
 
 20 598 bytes of CODE  memory
 12 577 bytes of CONST memory
    521 bytes of DATA  memory

Errors: none
Warnings: none
