###############################################################################
#
# IAR ANSI C/C++ Compiler V7.60.2.11341/W32 for ARM       13/Dec/2017  11:08:25
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\parser.c
#    Command line =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\parser.c
#        -D USE_HAL_DRIVER -D STM32L152xE -D USE_STM32L1XX_NUCLEO -D ASCII -D
#        REV_L -D LONG_DELAY -D XML_SHRT -lCN
#        "D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\RdBrd
#        XMLShrt Long Always\List" -o
#        "D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\RdBrd
#        XMLShrt Long Always\Obj" --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_clustering --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.4\arm\INC\c\DLib_Config_Full.h" -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/STM32L1xx_HAL_Driver/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/STM32L1xx_HAL_Driver/Inc/Legacy\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/BSP/STM32L1xx_Nucleo\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/portable/IAR/ARM_CM3\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Core/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/CMSIS/Include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/CMSIS/Device/ST/STM32L1xx/Include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\..\Middlewares\Third_Party\BgLib\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.4\arm\CMSIS\Include\"
#    Locale       =  English_United States.1252
#    List file    =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\RdBrd
#        XMLShrt Long Always\List\parser.lst
#    Object file  =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\RdBrd
#        XMLShrt Long Always\Obj\parser.o
#
###############################################################################

D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\parser.c
      1          /**
      2            ******************************************************************************
      3            * File Name          : parser.c
      4            * Description        : This file provides code that parses the passed string and 
      5            *                      performs the requested operation. It then returns a string
      6            *                      hardware based on the LPS22HB chip.
      7            ******************************************************************************
      8            *
      9            * COPYRIGHT(c) 2016 WeatherCloud
     10            *
     11            * Redistribution and use in source and binary forms, with or without modification,
     12            * are permitted provided that the following conditions are met:
     13            *   1. Redistributions of source code must retain the above copyright notice,
     14            *      this list of conditions and the following disclaimer.
     15            *   2. Redistributions in binary form must reproduce the above copyright notice,
     16            *      this list of conditions and the following disclaimer in the documentation
     17            *      and/or other materials provided with the distribution.
     18            *   3. Neither the name of WeatherCloud nor the names of its contributors
     19            *      may be used to endorse or promote products derived from this software
     20            *      without specific prior written permission.
     21            *
     22            * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     23            * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     24            * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     25            * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
     26            * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     27            * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     28            * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
     29            * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
     30            * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
     31            * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     32            *
     33            ******************************************************************************
     34            */
     35          
     36          /* Includes ------------------------------------------------------------------*/
     37          #include "parser.h"
     38          #include "ErrorCodes.h"
     39          #include <ctype.h>
     40          #include <stdlib.h>
     41          #include "wwdg.h"
     42          #include "Calibration.h"
     43          
     44          // Enums
     45          typedef enum 
     46          {
     47            NOT_INIT = 0,
     48            AVAILABLE = 1,
     49            BUSY = 2
     50          } ParseTskFlg;
     51          

   \                                 In section .bss, align 1
     52          static bool Bypass = false;
   \                     Bypass:
   \   00000000                      DS8 1
     53          
     54          // Parser Structure for tasks.
     55          struct
     56          {
     57            char          tempBuffer[BUFFER_SIZE];
     58            ParseTskFlg   ParseFlg;

   \                                 In section .bss, align 4
     59          } static ParseString;
   \                     ParseString:
   \   00000000                      DS8 44
     60          
     61          /* Parser functions */
     62          
     63          /**
     64            * @brief  This routine initializes the Parse Task Structure.
     65            * @param  *tempBffr: String to be parsed.
     66            * @retval HAL_StatusTypeDef:     HAL_OK:       Tasking of block of data to UART success.
     67            */

   \                                 In section .text, align 2, keep-with-next
     68          HAL_StatusTypeDef RoadBrd_ParserInit( void )
     69          {
     70            ParseString.ParseFlg = AVAILABLE;
   \                     RoadBrd_ParserInit: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x....             LDR.N    R1,??DataTable2
   \   00000004   0xF881 0x0028      STRB     R0,[R1, #+40]
     71            return HAL_OK;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x4770             BX       LR               ;; return
     72          }
     73          
     74          /**
     75            * @brief  This routine handles the operation of setting up a Parse Event.
     76            * @param  *tempBffr: String to be parsed.
     77            * @retval HAL_StatusTypeDef:     HAL_OK:       Tasking of block of data to UART success.
     78            *                                HAL_ERROR:    Error found in Tasking or data passed.
     79            *                                HAL_BUSY:     UART is busy.
     80            *                                HAL_TIMEOUT:  UART timed out.
     81            */

   \                                 In section .text, align 2, keep-with-next
     82          HAL_StatusTypeDef RoadBrd_ParserTsk(char *tempBffr)
     83          {
   \                     RoadBrd_ParserTsk: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     84            // Test ParseFlg.
     85            if (ParseString.ParseFlg == BUSY)
   \   00000004   0x....             LDR.N    R0,??DataTable2
   \   00000006   0xF890 0x0028      LDRB     R0,[R0, #+40]
   \   0000000A   0x2802             CMP      R0,#+2
   \   0000000C   0xD101             BNE.N    ??RoadBrd_ParserTsk_0
     86              return HAL_BUSY;
   \   0000000E   0x2002             MOVS     R0,#+2
   \   00000010   0xE016             B.N      ??RoadBrd_ParserTsk_1
     87            else if (ParseString.ParseFlg == NOT_INIT)
   \                     ??RoadBrd_ParserTsk_0: (+1)
   \   00000012   0x....             LDR.N    R0,??DataTable2
   \   00000014   0xF890 0x0028      LDRB     R0,[R0, #+40]
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD101             BNE.N    ??RoadBrd_ParserTsk_2
     88              return HAL_ERROR;
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0xE00F             B.N      ??RoadBrd_ParserTsk_1
     89            // Next Lets make sure passed string is not too big.
     90          //  if (strlen((char *)tempBffr) >= BUFFER_SIZE)
     91            if (strlen(tempBffr) >= BUFFER_SIZE)
   \                     ??RoadBrd_ParserTsk_2: (+1)
   \   00000020   0x0020             MOVS     R0,R4
   \   00000022   0x.... 0x....      BL       strlen
   \   00000026   0x2828             CMP      R0,#+40
   \   00000028   0xD301             BCC.N    ??RoadBrd_ParserTsk_3
     92              return HAL_ERROR;
   \   0000002A   0x2001             MOVS     R0,#+1
   \   0000002C   0xE008             B.N      ??RoadBrd_ParserTsk_1
     93            // Copy String into Structure and set as busy.
     94          //  strcpy( (char *)ParseString.tempBuffer, (char *)tempBffr);
     95            strcpy( ParseString.tempBuffer, tempBffr);
   \                     ??RoadBrd_ParserTsk_3: (+1)
   \   0000002E   0x0021             MOVS     R1,R4
   \   00000030   0x....             LDR.N    R0,??DataTable2
   \   00000032   0x.... 0x....      BL       strcpy
     96            ParseString.ParseFlg = BUSY;
   \   00000036   0x2002             MOVS     R0,#+2
   \   00000038   0x....             LDR.N    R1,??DataTable2
   \   0000003A   0xF881 0x0028      STRB     R0,[R1, #+40]
     97            return HAL_OK;
   \   0000003E   0x2000             MOVS     R0,#+0
   \                     ??RoadBrd_ParserTsk_1: (+1)
   \   00000040   0xBD10             POP      {R4,PC}          ;; return
     98          }
     99          
    100          /**
    101            * @brief  This routine handles the operation of processing a Parse Event.
    102            * @param  *tempBffr: String to be parsed.
    103            * @retval HAL_StatusTypeDef:     HAL_OK:       Tasking of block of data to UART success.
    104            *                                HAL_ERROR:    Error found in Tasking or data passed.
    105            *                                HAL_BUSY:     UART is busy.
    106            *                                HAL_TIMEOUT:  UART timed out.
    107            */

   \                                 In section .text, align 2, keep-with-next
    108          HAL_StatusTypeDef RoadBrd_ProcessParserTsk( void )
    109          {
   \                     RoadBrd_ProcessParserTsk: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    110            HAL_StatusTypeDef Status;
    111          
    112            // Test ParseFlg and process.
    113            if (ParseString.ParseFlg == BUSY)
   \   00000002   0x....             LDR.N    R0,??DataTable2
   \   00000004   0xF890 0x0028      LDRB     R0,[R0, #+40]
   \   00000008   0x2802             CMP      R0,#+2
   \   0000000A   0xD10B             BNE.N    ??RoadBrd_ProcessParserTsk_0
    114            {
    115              Status = RoadBrd_ParseString(ParseString.tempBuffer, true);
   \   0000000C   0x2101             MOVS     R1,#+1
   \   0000000E   0x....             LDR.N    R0,??DataTable2
   \   00000010   0x.... 0x....      BL       RoadBrd_ParseString
   \   00000014   0x0004             MOVS     R4,R0
    116              ParseString.ParseFlg = AVAILABLE;
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0x....             LDR.N    R1,??DataTable2
   \   0000001A   0xF881 0x0028      STRB     R0,[R1, #+40]
    117              return Status;
   \   0000001E   0x0020             MOVS     R0,R4
   \   00000020   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000022   0xE000             B.N      ??RoadBrd_ProcessParserTsk_1
    118            }
    119            else
    120              return HAL_OK;
   \                     ??RoadBrd_ProcessParserTsk_0: (+1)
   \   00000024   0x2000             MOVS     R0,#+0
   \                     ??RoadBrd_ProcessParserTsk_1: (+1)
   \   00000026   0xBD10             POP      {R4,PC}          ;; return
    121          }
    122          
    123          
    124          /**
    125            * @brief  This routine parses the passed string and performs the passed operation
    126            * @param  *tempBffr: String to be parsed.
    127            * @retval HAL_StatusTypeDef:     HAL_OK:       Tasking of block of data to UART success.
    128            *                                HAL_ERROR:    Error found in Tasking or data passed.
    129            *                                HAL_BUSY:     UART is busy.
    130            *                                HAL_TIMEOUT:  UART timed out.
    131            */

   \                                 In section .text, align 4, keep-with-next
    132          HAL_StatusTypeDef RoadBrd_ParseString(char *tempBffr, bool BLE_Flag)
    133          {
   \                     RoadBrd_ParseString: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xF5AD 0x6D80      SUB      SP,SP,#+1024
   \   00000008   0xB0AD             SUB      SP,SP,#+180
   \   0000000A   0x0004             MOVS     R4,R0
   \   0000000C   0x000D             MOVS     R5,R1
    134          #ifdef TEST2
    135            #define RECEIVE_SZ      5
    136            uint8_t Size;
    137            uint8_t i2cData[80];
    138            uint8_t tempBffr3[10];
    139            char tempBffr2[5];
    140            int Loop_cnt;
    141            HAL_StatusTypeDef Status, Save_Status;
    142            int Address;
    143            int num_bytes;
    144            int num_bytes_received;
    145            int Error, x;
    146            char tempstr[20];
    147            char* tempPstr;
    148            int new_value, flag;
    149            float Temp_C, Temp_F, Shunt_V, Bus_V, Crrnt, Power;
    150            uint32_t Err_code;
    151          #else
    152            #ifdef TEST
    153              #define RECEIVE_SZ      5
    154            #else
    155              #define RECEIVE_SZ      30
    156              uint16_t DriverStatus;
    157              int8_t tempBffr2[120];
    158              int8_t tempBffr3[10];
    159              int8_t s_cmd[5];
    160              int8_t s_recrd[80];
    161              int8_t* BufferPntr;
    162              HAL_StatusTypeDef Status, Save_Status;
    163              uint8_t Size;
    164              int Address;
    165              int num_bytes;
    166              int Numbr_Rcrds;
    167              int num_bytes_received;
    168              uint8_t i2cData[80];
    169              int Error, x, y;
    170              Voltage VMeasure, VMeasureScaled;
    171              Current CMeasure, CMeasureScaled;
    172              Power PMeasure, PMeasureScaled;
    173              Temperature TMeasure, TMeasureScaled;
    174              Humidity HMeasure, HMeasureScaled;
    175              RGBInitialize RGBMeasure;
    176              RGBIdent IDMeasure;
    177              RGBStatus RGBSMeasure;
    178              RGBLight RGBValues;
    179              char uuid[10];
    180              float Scale, Offset;
    181          //    PRStatus PRMeasure;
    182              PRPressure PRPMeasure, PRPMeasureScaled;
    183              BinString RSFFTBins;
    184              GridEye     GridMeasure, GridMeasureScaled;
    185              uint32_t Err_code;
    186              uint8_t op_mode, ds_range, adc_rsl, sync, cmp_adjst, cmp_offst, int_assgn, int_persist, cnvrsn_int;
    187              int new_value, flag;
    188              char* tempPstr;
    189              char tempstr[20];
    190            #endif
    191          #endif
    192          
    193              Size = strlen((char *)tempBffr);
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0x.... 0x....      BL       strlen
   \   00000014   0x4680             MOV      R8,R0
    194              
    195              // Test Bypass. If set, then we are in streaming mode.
    196              if ( Bypass )
   \   00000016   0xF8DF 0x0DFC      LDR.W    R0,??RoadBrd_ParseString_0
   \   0000001A   0x7800             LDRB     R0,[R0, #+0]
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD01E             BEQ.N    ??RoadBrd_ParseString_1
    197              {
    198                if (tempBffr[0] == 0x1B)
   \   00000020   0x7820             LDRB     R0,[R4, #+0]
   \   00000022   0x281B             CMP      R0,#+27
   \   00000024   0xD115             BNE.N    ??RoadBrd_ParseString_2
    199                {
    200                  Bypass = false;
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0xF8DF 0x1DE8      LDR.W    R1,??RoadBrd_ParseString_0
   \   0000002C   0x7008             STRB     R0,[R1, #+0]
    201                  strcpy( (char *)tempBffr2, "\r\n\r\n T........TERMINATING MONITOR MODE.........\r\n\r\n> ");
   \   0000002E   0xF8DF 0x1DE8      LDR.W    R1,??RoadBrd_ParseString_0+0x4
   \   00000032   0xA80A             ADD      R0,SP,#+40
   \   00000034   0x.... 0x....      BL       strcpy
    202          #ifdef NUCLEO
    203                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    204          #else
    205                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000038   0xA90A             ADD      R1,SP,#+40
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000040   0x0006             MOVS     R6,R0
    206          #endif
    207                  if (Status != HAL_OK)
   \   00000042   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000044   0x2E00             CMP      R6,#+0
   \   00000046   0xF004 0x8478      BEQ.W    ??RoadBrd_ParseString_3
    208                    return Status;
   \   0000004A   0x0030             MOVS     R0,R6
   \   0000004C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004E   0xF004 0xBC76      B.W      ??RoadBrd_ParseString_4
    209                }
    210                else
    211                {
    212                  // Transmit Character to BGM111.
    213                  BGM111_Transmit(1, (uint8_t *)tempBffr);
   \                     ??RoadBrd_ParseString_2: (+1)
   \   00000052   0x0021             MOVS     R1,R4
   \   00000054   0x2001             MOVS     R0,#+1
   \   00000056   0x.... 0x....      BL       BGM111_Transmit
   \   0000005A   0xF004 0xBC6E      B.W      ??RoadBrd_ParseString_3
    214                }
    215              }// EndIf ( Bypass )
    216              else
    217              {
    218                // Normal Mode
    219              
    220                      // We have a good Tasking String. Time to determine action.
    221                      switch( tempBffr[0] )
   \                     ??RoadBrd_ParseString_1: (+1)
   \   0000005E   0x7820             LDRB     R0,[R4, #+0]
   \   00000060   0x2830             CMP      R0,#+48
   \   00000062   0xD02F             BEQ.N    ??RoadBrd_ParseString_5
   \   00000064   0x2831             CMP      R0,#+49
   \   00000066   0xD048             BEQ.N    ??RoadBrd_ParseString_6
   \   00000068   0x2832             CMP      R0,#+50
   \   0000006A   0xD079             BEQ.N    ??RoadBrd_ParseString_7
   \   0000006C   0x2833             CMP      R0,#+51
   \   0000006E   0xF000 0x80AA      BEQ.W    ??RoadBrd_ParseString_8
   \   00000072   0x2834             CMP      R0,#+52
   \   00000074   0xF000 0x80DA      BEQ.W    ??RoadBrd_ParseString_9
   \   00000078   0x2835             CMP      R0,#+53
   \   0000007A   0xF000 0x810A      BEQ.W    ??RoadBrd_ParseString_10
   \   0000007E   0x2836             CMP      R0,#+54
   \   00000080   0xF000 0x817E      BEQ.W    ??RoadBrd_ParseString_11
   \   00000084   0x2841             CMP      R0,#+65
   \   00000086   0xF000 0x8194      BEQ.W    ??RoadBrd_ParseString_12
   \   0000008A   0x2842             CMP      R0,#+66
   \   0000008C   0xF000 0x82F1      BEQ.W    ??RoadBrd_ParseString_13
   \   00000090   0x2843             CMP      R0,#+67
   \   00000092   0xF000 0x85B7      BEQ.W    ??RoadBrd_ParseString_14
   \   00000096   0x2844             CMP      R0,#+68
   \   00000098   0xF000 0x87B8      BEQ.W    ??RoadBrd_ParseString_15
   \   0000009C   0x2845             CMP      R0,#+69
   \   0000009E   0xF001 0x8133      BEQ.W    ??RoadBrd_ParseString_16
   \   000000A2   0x2846             CMP      R0,#+70
   \   000000A4   0xF001 0x8145      BEQ.W    ??RoadBrd_ParseString_17
   \   000000A8   0x2847             CMP      R0,#+71
   \   000000AA   0xF001 0x815D      BEQ.W    ??RoadBrd_ParseString_18
   \   000000AE   0x2848             CMP      R0,#+72
   \   000000B0   0xF001 0x81DA      BEQ.W    ??RoadBrd_ParseString_19
   \   000000B4   0x2850             CMP      R0,#+80
   \   000000B6   0xF001 0x84BB      BEQ.W    ??RoadBrd_ParseString_20
   \   000000BA   0x2854             CMP      R0,#+84
   \   000000BC   0xF001 0x84E8      BEQ.W    ??RoadBrd_ParseString_21
   \   000000C0   0xF004 0xBBB2      B.W      ??RoadBrd_ParseString_22
    222                      {
    223          //**************************************************************************************************
    224                      case '0':
    225                        // Enable Road sound and fill buffer. 
    226                        Status = RoadBrdSnd_ProcessSound();
   \                     ??RoadBrd_ParseString_5: (+1)
   \   000000C4   0x.... 0x....      BL       RoadBrdSnd_ProcessSound
   \   000000C8   0x0006             MOVS     R6,R0
    227                        if (Status == HAL_OK)
   \   000000CA   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000CC   0x2E00             CMP      R6,#+0
   \   000000CE   0xD112             BNE.N    ??RoadBrd_ParseString_23
    228                        {
    229                          // Is this a BLE Operation?
    230                          if ( BLE_Flag )
   \   000000D0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000D2   0x2D00             CMP      R5,#+0
   \   000000D4   0xD00A             BEQ.N    ??RoadBrd_ParseString_24
    231                          {
    232                            // Yes...Build and Send BLE Response NOW.
    233                            strcpy( (char *)tempBffr2, "<STATUS>CMD_RDSNDBFFR_FILL</STATUS>");
   \   000000D6   0xF8DF 0x1DBC      LDR.W    R1,??RoadBrd_ParseString_25
   \   000000DA   0xA80A             ADD      R0,SP,#+40
   \   000000DC   0x.... 0x....      BL       strcpy
    234                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000000E0   0xA80A             ADD      R0,SP,#+40
   \   000000E2   0x.... 0x....      BL       strlen
   \   000000E6   0xA90A             ADD      R1,SP,#+40
   \   000000E8   0x.... 0x....      BL       BGM111_Transmit
    235                          }
    236                          strcpy( (char *)tempBffr2, "Road Sound: Road Sound loaded, processed, and sent to FFT Bins.\r\n");
   \                     ??RoadBrd_ParseString_24: (+1)
   \   000000EC   0xF8DF 0x1E10      LDR.W    R1,??RoadBrd_ParseString_26
   \   000000F0   0xA80A             ADD      R0,SP,#+40
   \   000000F2   0x.... 0x....      BL       strcpy
    237                        }
    238                        break;
   \                     ??RoadBrd_ParseString_23: (+1)
   \   000000F6   0xF004 0xBBA8      B.W      ??RoadBrd_ParseString_27
    239          //**************************************************************************************************
    240                      case '1':
    241                        // Rd_Sound FFT Measurements 0-15. 
    242                        Status = RoadBrdSnd_DumpBin0( &RSFFTBins );
   \                     ??RoadBrd_ParseString_6: (+1)
   \   000000FA   0xA891             ADD      R0,SP,#+580
   \   000000FC   0x.... 0x....      BL       RoadBrdSnd_DumpBin0
   \   00000100   0x0006             MOVS     R6,R0
    243                        strcpy( (char *)tempBffr2, "Road Sound: FFT Measurements 0-15.\r\n");
   \   00000102   0xF8DF 0x1E04      LDR.W    R1,??RoadBrd_ParseString_26+0x8
   \   00000106   0xA80A             ADD      R0,SP,#+40
   \   00000108   0x.... 0x....      BL       strcpy
    244          #ifdef NUCLEO
    245                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    246          #else
    247                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000010C   0xA90A             ADD      R1,SP,#+40
   \   0000010E   0x2000             MOVS     R0,#+0
   \   00000110   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000114   0x0006             MOVS     R6,R0
    248          #endif
    249                        if (Status != HAL_OK)
   \   00000116   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000118   0x2E00             CMP      R6,#+0
   \   0000011A   0xD003             BEQ.N    ??RoadBrd_ParseString_28
    250                          return Status;
   \   0000011C   0x0030             MOVS     R0,R6
   \   0000011E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000120   0xF004 0xBC0D      B.W      ??RoadBrd_ParseString_4
    251                        // Is this a BLE Operation?
    252                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_28: (+1)
   \   00000124   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000126   0x2D00             CMP      R5,#+0
   \   00000128   0xD00B             BEQ.N    ??RoadBrd_ParseString_29
    253                        {
    254                          // Yes...Build and Send BLE Response NOW.
    255                          sprintf( (char *)tempBffr2, "<STATUS>ST_FFT0-15:%s</STATUS>", RSFFTBins.dumpStr );
   \   0000012A   0xAA91             ADD      R2,SP,#+580
   \   0000012C   0xF8DF 0x1DDC      LDR.W    R1,??RoadBrd_ParseString_26+0xC
   \   00000130   0xA80A             ADD      R0,SP,#+40
   \   00000132   0x.... 0x....      BL       sprintf
    256                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000136   0xA80A             ADD      R0,SP,#+40
   \   00000138   0x.... 0x....      BL       strlen
   \   0000013C   0xA90A             ADD      R1,SP,#+40
   \   0000013E   0x.... 0x....      BL       BGM111_Transmit
    257                        }
    258                        // NOW, Build Data String..
    259                        sprintf( (char *)tempBffr2, "     FFT Measurements 0-15: " );
   \                     ??RoadBrd_ParseString_29: (+1)
   \   00000142   0xF8DF 0x1DCC      LDR.W    R1,??RoadBrd_ParseString_26+0x10
   \   00000146   0xA80A             ADD      R0,SP,#+40
   \   00000148   0x.... 0x....      BL       sprintf
    260                        strcat( (char *)tempBffr2, (char *)RSFFTBins.dumpStr );
   \   0000014C   0xA991             ADD      R1,SP,#+580
   \   0000014E   0xA80A             ADD      R0,SP,#+40
   \   00000150   0x.... 0x....      BL       strcat
    261                        strcat( (char *)tempBffr2, "\r\n" );
   \   00000154   0xA1DB             ADR.N    R1,??RoadBrd_ParseString_30  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000156   0xA80A             ADD      R0,SP,#+40
   \   00000158   0x.... 0x....      BL       strcat
    262                       break;
   \   0000015C   0xF004 0xBB75      B.W      ??RoadBrd_ParseString_27
    263          //**************************************************************************************************
    264                      case '2':
    265                        // Rd_Sound FFT Measurements 16-31. 
    266                        Status = RoadBrdSnd_DumpBin16( &RSFFTBins );
   \                     ??RoadBrd_ParseString_7: (+1)
   \   00000160   0xA891             ADD      R0,SP,#+580
   \   00000162   0x.... 0x....      BL       RoadBrdSnd_DumpBin16
   \   00000166   0x0006             MOVS     R6,R0
    267                        strcpy( (char *)tempBffr2, "Road Sound: FFT Measurements 16-31.\r\n");
   \   00000168   0xF8DF 0x1DA8      LDR.W    R1,??RoadBrd_ParseString_26+0x14
   \   0000016C   0xA80A             ADD      R0,SP,#+40
   \   0000016E   0x.... 0x....      BL       strcpy
    268          #ifdef NUCLEO
    269                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    270          #else
    271                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000172   0xA90A             ADD      R1,SP,#+40
   \   00000174   0x2000             MOVS     R0,#+0
   \   00000176   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000017A   0x0006             MOVS     R6,R0
    272          #endif
    273                        if (Status != HAL_OK)
   \   0000017C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000017E   0x2E00             CMP      R6,#+0
   \   00000180   0xD003             BEQ.N    ??RoadBrd_ParseString_31
    274                          return Status;
   \   00000182   0x0030             MOVS     R0,R6
   \   00000184   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000186   0xF004 0xBBDA      B.W      ??RoadBrd_ParseString_4
    275                        // Is this a BLE Operation?
    276                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_31: (+1)
   \   0000018A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000018C   0x2D00             CMP      R5,#+0
   \   0000018E   0xD00B             BEQ.N    ??RoadBrd_ParseString_32
    277                        {
    278                          // Yes...Build and Send BLE Response NOW.
    279                          sprintf( (char *)tempBffr2, "<STATUS>ST_FFT16-31:%s</STATUS>", RSFFTBins.dumpStr );
   \   00000190   0xAA91             ADD      R2,SP,#+580
   \   00000192   0xF8DF 0x1D84      LDR.W    R1,??RoadBrd_ParseString_26+0x18
   \   00000196   0xA80A             ADD      R0,SP,#+40
   \   00000198   0x.... 0x....      BL       sprintf
    280                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000019C   0xA80A             ADD      R0,SP,#+40
   \   0000019E   0x.... 0x....      BL       strlen
   \   000001A2   0xA90A             ADD      R1,SP,#+40
   \   000001A4   0x.... 0x....      BL       BGM111_Transmit
    281                        }
    282                        // NOW, Build Data String..
    283                        sprintf( (char *)tempBffr2, "     FFT Measurements 16-31: " );
   \                     ??RoadBrd_ParseString_32: (+1)
   \   000001A8   0xF8DF 0x1E14      LDR.W    R1,??RoadBrd_ParseString_33
   \   000001AC   0xA80A             ADD      R0,SP,#+40
   \   000001AE   0x.... 0x....      BL       sprintf
    284                        strcat( (char *)tempBffr2, (char *)RSFFTBins.dumpStr );
   \   000001B2   0xA991             ADD      R1,SP,#+580
   \   000001B4   0xA80A             ADD      R0,SP,#+40
   \   000001B6   0x.... 0x....      BL       strcat
    285                        strcat( (char *)tempBffr2, "\r\n" );
   \   000001BA   0xA1C2             ADR.N    R1,??RoadBrd_ParseString_30  ;; 0x0D, 0x0A, 0x00, 0x00
   \   000001BC   0xA80A             ADD      R0,SP,#+40
   \   000001BE   0x.... 0x....      BL       strcat
    286                        break;
   \   000001C2   0xF004 0xBB42      B.W      ??RoadBrd_ParseString_27
    287          //**************************************************************************************************
    288                      case '3':
    289                        // Rd_Sound FFT Measurements 32-47. 
    290                        Status = RoadBrdSnd_DumpBin32( &RSFFTBins );
   \                     ??RoadBrd_ParseString_8: (+1)
   \   000001C6   0xA891             ADD      R0,SP,#+580
   \   000001C8   0x.... 0x....      BL       RoadBrdSnd_DumpBin32
   \   000001CC   0x0006             MOVS     R6,R0
    291                        strcpy( (char *)tempBffr2, "Road Sound: FFT Measurements 32-47.\r\n");
   \   000001CE   0xF8DF 0x1DF4      LDR.W    R1,??RoadBrd_ParseString_33+0x4
   \   000001D2   0xA80A             ADD      R0,SP,#+40
   \   000001D4   0x.... 0x....      BL       strcpy
    292          #ifdef NUCLEO
    293                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    294          #else
    295                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000001D8   0xA90A             ADD      R1,SP,#+40
   \   000001DA   0x2000             MOVS     R0,#+0
   \   000001DC   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000001E0   0x0006             MOVS     R6,R0
    296          #endif
    297                        if (Status != HAL_OK)
   \   000001E2   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000001E4   0x2E00             CMP      R6,#+0
   \   000001E6   0xD003             BEQ.N    ??RoadBrd_ParseString_34
    298                          return Status;
   \   000001E8   0x0030             MOVS     R0,R6
   \   000001EA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001EC   0xF004 0xBBA7      B.W      ??RoadBrd_ParseString_4
    299                        // Is this a BLE Operation?
    300                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_34: (+1)
   \   000001F0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000001F2   0x2D00             CMP      R5,#+0
   \   000001F4   0xD00B             BEQ.N    ??RoadBrd_ParseString_35
    301                        {
    302                          // Yes...Build and Send BLE Response NOW.
    303                          sprintf( (char *)tempBffr2, "<STATUS>ST_FFT32-47:%s</STATUS>", RSFFTBins.dumpStr );
   \   000001F6   0xAA91             ADD      R2,SP,#+580
   \   000001F8   0xF8DF 0x1DF8      LDR.W    R1,??RoadBrd_ParseString_36
   \   000001FC   0xA80A             ADD      R0,SP,#+40
   \   000001FE   0x.... 0x....      BL       sprintf
    304                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000202   0xA80A             ADD      R0,SP,#+40
   \   00000204   0x.... 0x....      BL       strlen
   \   00000208   0xA90A             ADD      R1,SP,#+40
   \   0000020A   0x.... 0x....      BL       BGM111_Transmit
    305                        }
    306                        // NOW, Build Data String..
    307                        sprintf( (char *)tempBffr2, "     FFT Measurements 32-47: " );
   \                     ??RoadBrd_ParseString_35: (+1)
   \   0000020E   0xF8DF 0x1DE8      LDR.W    R1,??RoadBrd_ParseString_36+0x4
   \   00000212   0xA80A             ADD      R0,SP,#+40
   \   00000214   0x.... 0x....      BL       sprintf
    308                        strcat( (char *)tempBffr2, (char *)RSFFTBins.dumpStr );
   \   00000218   0xA991             ADD      R1,SP,#+580
   \   0000021A   0xA80A             ADD      R0,SP,#+40
   \   0000021C   0x.... 0x....      BL       strcat
    309                        strcat( (char *)tempBffr2, "\r\n" );
   \   00000220   0xA1A8             ADR.N    R1,??RoadBrd_ParseString_30  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000222   0xA80A             ADD      R0,SP,#+40
   \   00000224   0x.... 0x....      BL       strcat
    310                        break;
   \   00000228   0xF004 0xBB0F      B.W      ??RoadBrd_ParseString_27
    311          //**************************************************************************************************
    312                      case '4':
    313                        // Rd_Sound FFT Measurements 48-63. 
    314                        Status = RoadBrdSnd_DumpBin48( &RSFFTBins );
   \                     ??RoadBrd_ParseString_9: (+1)
   \   0000022C   0xA891             ADD      R0,SP,#+580
   \   0000022E   0x.... 0x....      BL       RoadBrdSnd_DumpBin48
   \   00000232   0x0006             MOVS     R6,R0
    315                        strcpy( (char *)tempBffr2, "Road Sound: FFT Measurements 48-63.\r\n");
   \   00000234   0xF8DF 0x1DC4      LDR.W    R1,??RoadBrd_ParseString_36+0x8
   \   00000238   0xA80A             ADD      R0,SP,#+40
   \   0000023A   0x.... 0x....      BL       strcpy
    316          #ifdef NUCLEO
    317                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    318          #else
    319                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000023E   0xA90A             ADD      R1,SP,#+40
   \   00000240   0x2000             MOVS     R0,#+0
   \   00000242   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000246   0x0006             MOVS     R6,R0
    320          #endif
    321                        if (Status != HAL_OK)
   \   00000248   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000024A   0x2E00             CMP      R6,#+0
   \   0000024C   0xD003             BEQ.N    ??RoadBrd_ParseString_37
    322                          return Status;
   \   0000024E   0x0030             MOVS     R0,R6
   \   00000250   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000252   0xF004 0xBB74      B.W      ??RoadBrd_ParseString_4
    323                        // Is this a BLE Operation?
    324                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_37: (+1)
   \   00000256   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000258   0x2D00             CMP      R5,#+0
   \   0000025A   0xD00B             BEQ.N    ??RoadBrd_ParseString_38
    325                        {
    326                          // Yes...Build and Send BLE Response NOW.
    327                          sprintf( (char *)tempBffr2, "<STATUS>ST_FFT48-63:%s</STATUS>", RSFFTBins.dumpStr );
   \   0000025C   0xAA91             ADD      R2,SP,#+580
   \   0000025E   0xF8DF 0x1DA0      LDR.W    R1,??RoadBrd_ParseString_36+0xC
   \   00000262   0xA80A             ADD      R0,SP,#+40
   \   00000264   0x.... 0x....      BL       sprintf
    328                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000268   0xA80A             ADD      R0,SP,#+40
   \   0000026A   0x.... 0x....      BL       strlen
   \   0000026E   0xA90A             ADD      R1,SP,#+40
   \   00000270   0x.... 0x....      BL       BGM111_Transmit
    329                        }
    330                        // NOW, Build Data String..
    331                        sprintf( (char *)tempBffr2, "     FFT Measurements 48-63: " );
   \                     ??RoadBrd_ParseString_38: (+1)
   \   00000274   0xF8DF 0x1D8C      LDR.W    R1,??RoadBrd_ParseString_36+0x10
   \   00000278   0xA80A             ADD      R0,SP,#+40
   \   0000027A   0x.... 0x....      BL       sprintf
    332                        strcat( (char *)tempBffr2, (char *)RSFFTBins.dumpStr );
   \   0000027E   0xA991             ADD      R1,SP,#+580
   \   00000280   0xA80A             ADD      R0,SP,#+40
   \   00000282   0x.... 0x....      BL       strcat
    333                        strcat( (char *)tempBffr2, "\r\n" );
   \   00000286   0xA18F             ADR.N    R1,??RoadBrd_ParseString_30  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000288   0xA80A             ADD      R0,SP,#+40
   \   0000028A   0x.... 0x....      BL       strcat
    334                       break;
   \   0000028E   0xF004 0xBADC      B.W      ??RoadBrd_ParseString_27
    335          //**************************************************************************************************
    336                      case '5':
    337                        // dump results of save Buffer. BufferPntr
    338                        BufferPntr = RoadBrdSnd_getSaveBffr();
   \                     ??RoadBrd_ParseString_10: (+1)
   \   00000292   0x.... 0x....      BL       RoadBrdSnd_getSaveBffr
   \   00000296   0x9048             STR      R0,[SP, #+288]
    339                        strcpy( (char *)tempBffr2, "Road Sound: Results of save Buffer.\r\n");
   \   00000298   0xF8DF 0x1D6C      LDR.W    R1,??RoadBrd_ParseString_36+0x14
   \   0000029C   0xA80A             ADD      R0,SP,#+40
   \   0000029E   0x.... 0x....      BL       strcpy
    340                        Status = RoadBrdSnd_DumpBin0( &RSFFTBins );
   \   000002A2   0xA891             ADD      R0,SP,#+580
   \   000002A4   0x.... 0x....      BL       RoadBrdSnd_DumpBin0
   \   000002A8   0x0006             MOVS     R6,R0
    341          #ifdef NUCLEO
    342                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    343          #else
    344                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000002AA   0xA90A             ADD      R1,SP,#+40
   \   000002AC   0x2000             MOVS     R0,#+0
   \   000002AE   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000002B2   0x0006             MOVS     R6,R0
    345          #endif
    346                        if (Status != HAL_OK)
   \   000002B4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000002B6   0x2E00             CMP      R6,#+0
   \   000002B8   0xD003             BEQ.N    ??RoadBrd_ParseString_39
    347                          return Status;
   \   000002BA   0x0030             MOVS     R0,R6
   \   000002BC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000002BE   0xF004 0xBB3E      B.W      ??RoadBrd_ParseString_4
    348                        // Is this a BLE Operation?
    349                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_39: (+1)
   \   000002C2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000002C4   0x2D00             CMP      R5,#+0
   \   000002C6   0xD00A             BEQ.N    ??RoadBrd_ParseString_40
    350                        {
    351                          // Yes...Build and Send BLE Response NOW.
    352                          strcpy( (char *)tempBffr2, "<STATUS>ST_FFTBFFR_DUMP:");
   \   000002C8   0xF8DF 0x1E1C      LDR.W    R1,??RoadBrd_ParseString_41
   \   000002CC   0xA80A             ADD      R0,SP,#+40
   \   000002CE   0x.... 0x....      BL       strcpy
    353                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000002D2   0xA80A             ADD      R0,SP,#+40
   \   000002D4   0x.... 0x....      BL       strlen
   \   000002D8   0xA90A             ADD      R1,SP,#+40
   \   000002DA   0x.... 0x....      BL       BGM111_Transmit
    354                        }
    355                        // NOW, Build Data String..
    356                        y=0;
   \                     ??RoadBrd_ParseString_40: (+1)
   \   000002DE   0x2000             MOVS     R0,#+0
   \   000002E0   0x903A             STR      R0,[SP, #+232]
    357                        sprintf( (char *)tempBffr2, "" );
   \   000002E2   0xA1DB             ADR.N    R1,??RoadBrd_ParseString_42  ;; ""
   \   000002E4   0xA80A             ADD      R0,SP,#+40
   \   000002E6   0x.... 0x....      BL       sprintf
    358                        for (x=0; x<FFT_BUFFER_SIZE; x++)
   \   000002EA   0x2000             MOVS     R0,#+0
   \   000002EC   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_43: (+1)
   \   000002EE   0x2F80             CMP      R7,#+128
   \   000002F0   0xDA31             BGE.N    ??RoadBrd_ParseString_44
    359                        {
    360          //                sprintf( (char *)tempBffr3, "%02x ", BufferPntr[x]);
    361                          sprintf( (char *)tempBffr3, "%04d ", BufferPntr[x]);
   \   000002F2   0x9848             LDR      R0,[SP, #+288]
   \   000002F4   0x57C2             LDRSB    R2,[R0, R7]
   \   000002F6   0xF8DF 0x1DF4      LDR.W    R1,??RoadBrd_ParseString_41+0x4
   \   000002FA   0xA82A             ADD      R0,SP,#+168
   \   000002FC   0x.... 0x....      BL       sprintf
    362                          strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   00000300   0xA92A             ADD      R1,SP,#+168
   \   00000302   0xA80A             ADD      R0,SP,#+40
   \   00000304   0x.... 0x....      BL       strcat
    363                          y++;
   \   00000308   0x983A             LDR      R0,[SP, #+232]
   \   0000030A   0x1C40             ADDS     R0,R0,#+1
   \   0000030C   0x903A             STR      R0,[SP, #+232]
    364                          if (y>=16)
   \   0000030E   0x983A             LDR      R0,[SP, #+232]
   \   00000310   0x2810             CMP      R0,#+16
   \   00000312   0xDB1E             BLT.N    ??RoadBrd_ParseString_45
    365                          {
    366                            strcat( (char *)tempBffr2, "\r\n" );
   \   00000314   0xA16B             ADR.N    R1,??RoadBrd_ParseString_30  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000316   0xA80A             ADD      R0,SP,#+40
   \   00000318   0x.... 0x....      BL       strcat
    367                            y=0;
   \   0000031C   0x2000             MOVS     R0,#+0
   \   0000031E   0x903A             STR      R0,[SP, #+232]
    368           #ifdef NUCLEO
    369                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    370          #else
    371                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000320   0xA90A             ADD      R1,SP,#+40
   \   00000322   0x2000             MOVS     R0,#+0
   \   00000324   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000328   0x0006             MOVS     R6,R0
    372          #endif
    373                            if (Status != HAL_OK)
   \   0000032A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000032C   0x2E00             CMP      R6,#+0
   \   0000032E   0xD003             BEQ.N    ??RoadBrd_ParseString_46
    374                              return Status;
   \   00000330   0x0030             MOVS     R0,R6
   \   00000332   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000334   0xF004 0xBB03      B.W      ??RoadBrd_ParseString_4
    375                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_46: (+1)
   \   00000338   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000033A   0x2D00             CMP      R5,#+0
   \   0000033C   0xD005             BEQ.N    ??RoadBrd_ParseString_47
    376                            {
    377                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000033E   0xA80A             ADD      R0,SP,#+40
   \   00000340   0x.... 0x....      BL       strlen
   \   00000344   0xA90A             ADD      R1,SP,#+40
   \   00000346   0x.... 0x....      BL       BGM111_Transmit
    378                            }
    379                            sprintf( (char *)tempBffr2, "" );
   \                     ??RoadBrd_ParseString_47: (+1)
   \   0000034A   0xA1C1             ADR.N    R1,??RoadBrd_ParseString_42  ;; ""
   \   0000034C   0xA80A             ADD      R0,SP,#+40
   \   0000034E   0x.... 0x....      BL       sprintf
    380                          }
    381                        }
   \                     ??RoadBrd_ParseString_45: (+1)
   \   00000352   0x1C7F             ADDS     R7,R7,#+1
   \   00000354   0xE7CB             B.N      ??RoadBrd_ParseString_43
    382                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_44: (+1)
   \   00000356   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000358   0x2D00             CMP      R5,#+0
   \   0000035A   0xD00A             BEQ.N    ??RoadBrd_ParseString_48
    383                        {
    384                          strcpy( (char *)tempBffr2, "</STATUS>");
   \   0000035C   0xF8DF 0x1DD4      LDR.W    R1,??RoadBrd_ParseString_49
   \   00000360   0xA80A             ADD      R0,SP,#+40
   \   00000362   0x.... 0x....      BL       strcpy
    385                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000366   0xA80A             ADD      R0,SP,#+40
   \   00000368   0x.... 0x....      BL       strlen
   \   0000036C   0xA90A             ADD      R1,SP,#+40
   \   0000036E   0x.... 0x....      BL       BGM111_Transmit
    386                        }
    387                        sprintf( (char *)tempBffr2, "     ---COMPLETE---" );
   \                     ??RoadBrd_ParseString_48: (+1)
   \   00000372   0xF8DF 0x1DC4      LDR.W    R1,??RoadBrd_ParseString_49+0x4
   \   00000376   0xA80A             ADD      R0,SP,#+40
   \   00000378   0x.... 0x....      BL       sprintf
    388                        break;
   \   0000037C   0xF004 0xBA65      B.W      ??RoadBrd_ParseString_27
    389          //**************************************************************************************************
    390                      case '6':
    391                        // Clear all buffers. 
    392                        Status = HAL_OK;
   \                     ??RoadBrd_ParseString_11: (+1)
   \   00000380   0x2000             MOVS     R0,#+0
   \   00000382   0x0006             MOVS     R6,R0
    393                        RoadBrdSnd_ClrBffrs();
   \   00000384   0x.... 0x....      BL       RoadBrdSnd_ClrBffrs
    394                        // Is this a BLE Operation?
    395                        if ( BLE_Flag )
   \   00000388   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000038A   0x2D00             CMP      R5,#+0
   \   0000038C   0xD00A             BEQ.N    ??RoadBrd_ParseString_50
    396                        {
    397                          // Yes...Build and Send BLE Response NOW.
    398                          strcpy( (char *)tempBffr2, "<STATUS>ST_FFTCLR</STATUS>");
   \   0000038E   0xF8DF 0x1DAC      LDR.W    R1,??RoadBrd_ParseString_49+0x8
   \   00000392   0xA80A             ADD      R0,SP,#+40
   \   00000394   0x.... 0x....      BL       strcpy
    399                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000398   0xA80A             ADD      R0,SP,#+40
   \   0000039A   0x.... 0x....      BL       strlen
   \   0000039E   0xA90A             ADD      R1,SP,#+40
   \   000003A0   0x.... 0x....      BL       BGM111_Transmit
    400                        }
    401                        strcpy( (char *)tempBffr2, "Road Sound: All buffers cleared.\r\n");;
   \                     ??RoadBrd_ParseString_50: (+1)
   \   000003A4   0xF8DF 0x1E10      LDR.W    R1,??RoadBrd_ParseString_51
   \   000003A8   0xA80A             ADD      R0,SP,#+40
   \   000003AA   0x.... 0x....      BL       strcpy
    402                        break;
   \   000003AE   0xF004 0xBA4C      B.W      ??RoadBrd_ParseString_27
    403          //**************************************************************************************************
    404                      case 'A':
    405                        // Barometer. 
    406                        if (Size == 1)
   \                     ??RoadBrd_ParseString_12: (+1)
   \   000003B2   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000003B6   0xF1B8 0x0F01      CMP      R8,#+1
   \   000003BA   0xF000 0x8158      BEQ.W    ??RoadBrd_ParseString_52
    407                        {
    408          //------------------ A Command...Read Pressure...PRESS_OUT_XL...PRESS_OUT_L...PRESS_OUT_H     
    409                        }
    410                        else
    411                        {
    412                          switch( tempBffr[1] )
   \   000003BE   0x7860             LDRB     R0,[R4, #+1]
   \   000003C0   0x2836             CMP      R0,#+54
   \   000003C2   0xD039             BEQ.N    ??RoadBrd_ParseString_53
   \   000003C4   0x2838             CMP      R0,#+56
   \   000003C6   0xF000 0x80BB      BEQ.W    ??RoadBrd_ParseString_54
   \   000003CA   0x2839             CMP      R0,#+57
   \   000003CC   0xF000 0x8125      BEQ.W    ??RoadBrd_ParseString_55
   \   000003D0   0x2849             CMP      R0,#+73
   \   000003D2   0xF040 0x8147      BNE.W    ??RoadBrd_ParseString_56
    413                          {
    414          //------------------ AI Command...Initialize Barometer Sensor     
    415                            case 'I':
    416                              // Clean out old pressure.
    417          //                    Status = RoadBrd_Baro_ReadPressure( &PRPMeasure );
    418                              // Clean out old Temp data.
    419          //                    Status = RoadBrd_Baro_ReadTemp( i2cData );
    420                              //************ Wait 50msec.
    421          //                    RoadBrd_Delay(500);  
    422                   
    423                              Status = RoadBrd_Init_Barometer();
   \                     ??RoadBrd_ParseString_57: (+1)
   \   000003D6   0x.... 0x....      BL       RoadBrd_Init_Barometer
   \   000003DA   0x0006             MOVS     R6,R0
    424                              // Is this a BLE Operation?
    425                              if ( BLE_Flag )
   \   000003DC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000003DE   0x2D00             CMP      R5,#+0
   \   000003E0   0xD00A             BEQ.N    ??RoadBrd_ParseString_58
    426                              {
    427                                // Yes...Build and Send BLE Response NOW.
    428                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000003E2   0xF8DF 0x1DD8      LDR.W    R1,??RoadBrd_ParseString_51+0x4
   \   000003E6   0xA80A             ADD      R0,SP,#+40
   \   000003E8   0x.... 0x....      BL       strcpy
    429                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000003EC   0xA80A             ADD      R0,SP,#+40
   \   000003EE   0x.... 0x....      BL       strlen
   \   000003F2   0xA90A             ADD      R1,SP,#+40
   \   000003F4   0x.... 0x....      BL       BGM111_Transmit
    430                              }
    431                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_58: (+1)
   \   000003F8   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000003FA   0x2E00             CMP      R6,#+0
   \   000003FC   0xD105             BNE.N    ??RoadBrd_ParseString_59
    432                              {
    433                                  strcpy( (char *)tempBffr2, "Initialize Barometer Sensor Passed.\r\n");;
   \   000003FE   0xF8DF 0x1DC0      LDR.W    R1,??RoadBrd_ParseString_51+0x8
   \   00000402   0xA80A             ADD      R0,SP,#+40
   \   00000404   0x.... 0x....      BL       strcpy
   \   00000408   0xE015             B.N      ??RoadBrd_ParseString_60
    434                              }
    435                              else
    436                              {
    437                                  strcpy( (char *)tempBffr2, "Initialize Barometer Sensor FAILED.\r\n");
   \                     ??RoadBrd_ParseString_59: (+1)
   \   0000040A   0xF8DF 0x1DB8      LDR.W    R1,??RoadBrd_ParseString_51+0xC
   \   0000040E   0xA80A             ADD      R0,SP,#+40
   \   00000410   0x.... 0x....      BL       strcpy
    438                                  Save_Status = Status;
   \   00000414   0xF88D 0x60B4      STRB     R6,[SP, #+180]
    439          #ifdef NUCLEO
    440                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    441          #else
    442                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000418   0xA90A             ADD      R1,SP,#+40
   \   0000041A   0x2000             MOVS     R0,#+0
   \   0000041C   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000420   0x0006             MOVS     R6,R0
    443          #endif
    444                                  if (Status != HAL_OK)
   \   00000422   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000424   0x2E00             CMP      R6,#+0
   \   00000426   0xD003             BEQ.N    ??RoadBrd_ParseString_61
    445                                    return Status;
   \   00000428   0x0030             MOVS     R0,R6
   \   0000042A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000042C   0xF004 0xBA87      B.W      ??RoadBrd_ParseString_4
    446                                  else
    447                                    Status = Save_Status;
   \                     ??RoadBrd_ParseString_61: (+1)
   \   00000430   0xF89D 0x00B4      LDRB     R0,[SP, #+180]
   \   00000434   0x0006             MOVS     R6,R0
    448                              }
    449                              break;
   \                     ??RoadBrd_ParseString_60: (+1)
   \   00000436   0xE11A             B.N      ??RoadBrd_ParseString_52
    450          //------------------ A0 Command...Enable Barometer     
    451          #if 0                  
    452                          case '0':
    453                              Status = RoadBrd_Enable_Barometer();
    454                              // Is this a BLE Operation?
    455                              if ( BLE_Flag )
    456                              {
    457                                // Yes...Build and Send BLE Response NOW.
    458                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
    459                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
    460                              }
    461                              if (Status == HAL_OK)
    462                              {
    463                                  strcpy( (char *)tempBffr2, "Barometer Sensor: Enable Barometer Passed.\r\n");;
    464                              }
    465                              else
    466                              {
    467                                  strcpy( (char *)tempBffr2, "Barometer Sensor: Enable Barometer FAILED.\r\n");;
    468                              }
    469                              break;
    470          //------------------ A1 Command...Disable Barometer     
    471                            case '1':
    472                              Status = RoadBrd_Disable_Barometer();
    473                              // Is this a BLE Operation?
    474                              if ( BLE_Flag )
    475                              {
    476                                // Yes...Build and Send BLE Response NOW.
    477                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
    478                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
    479                              }
    480                              if (Status == HAL_OK)
    481                              {
    482                                  strcpy( (char *)tempBffr2, "Barometer Sensor: Disable Barometer Passed.\r\n");;
    483                              }
    484                              else
    485                              {
    486                                  strcpy( (char *)tempBffr2, "Barometer Sensor: Disable Barometer FAILED.\r\n");;
    487                                  Save_Status = Status;
    488          #ifdef NUCLEO
    489                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    490          #else
    491                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
    492          #endif
    493                                  if (Status != HAL_OK)
    494                                    return Status;
    495                                  else
    496                                    Status = Save_Status;
    497                              }
    498                              break;
    499          //------------------ A2 Command...Start the Barometer but do not wait.     
    500                            case '2':
    501                              Status = RoadBrd_StartSample_Barometer();
    502                              // Is this a BLE Operation?
    503                              if ( BLE_Flag )
    504                              {
    505                                // Yes...Build and Send BLE Response NOW.
    506                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
    507                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
    508                              }
    509                              if (Status == HAL_OK)
    510                              {
    511                                  strcpy( (char *)tempBffr2, "Start the Barometer but do not wait Passed.\r\n");;
    512                              }
    513                              else
    514                              {
    515                                  strcpy( (char *)tempBffr2, "Start the Barometer but do not wait FAILED.\r\n");;
    516                                  Save_Status = Status;
    517          #ifdef NUCLEO
    518                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    519          #else
    520                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
    521          #endif
    522                                  if (Status != HAL_OK)
    523                                    return Status;
    524                                  else
    525                                    Status = Save_Status;
    526                              }
    527                              break;
    528          //------------------ A3 Command...Start the Barometer and wait for response.    
    529                            case '3':
    530                              Status = RoadBrd_StartSample_BarometerWait();
    531                              // Is this a BLE Operation?
    532                              if ( BLE_Flag )
    533                              {
    534                                // Yes...Build and Send BLE Response NOW.
    535                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
    536                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
    537                              }
    538                              if (Status == HAL_OK)
    539                              {
    540                                  strcpy( (char *)tempBffr2, "Start the Barometer and wait for response Passed.\r\n");;
    541                              }
    542                              else
    543                              {
    544                                  strcpy( (char *)tempBffr2, "Start the Barometer and wait for response FAILED.\r\n");;
    545                                  Save_Status = Status;
    546          #ifdef NUCLEO
    547                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    548          #else
    549                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
    550          #endif
    551                                  if (Status != HAL_OK)
    552                                    return Status;
    553                                  else
    554                                    Status = Save_Status;
    555                              }
    556                              break;
    557          //------------------ A4 Command...Return Status    
    558                            case '4':
    559                              // Is this a BLE Operation?
    560                              if ( BLE_Flag )
    561                              {
    562                                // Yes...Build and Send BLE Response NOW.
    563                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
    564                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
    565                              }
    566                              Status = RoadBrd_Barometer_Status( &PRMeasure );
    567                              if (Status == HAL_OK)
    568                              {
    569                                sprintf( (char *)tempBffr2, "Barometer Sensor Status: %02x / ", PRMeasure.Status );
    570                                strcat( (char *)tempBffr2, (char *)PRMeasure.Raw );
    571                                strcat( (char *)tempBffr2, "\r\n" );
    572                              }
    573                              break;
    574          //------------------ A5 Command...Wait for Pressure to be complete. 
    575                            case '5':
    576                              Status = RoadBrd_WaitForPressure( (uint16_t)BARO_WAITCNT );
    577                              // Is this a BLE Operation?
    578                              if ( BLE_Flag )
    579                              {
    580                                // Yes...Build and Send BLE Response NOW.
    581                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
    582                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
    583                              }
    584                              if (Status == HAL_OK)
    585                              {
    586                                  strcpy( (char *)tempBffr2, "Wait for Pressure to be complete Passed.\r\n");;
    587                              }
    588                              else
    589                              {
    590                                  strcpy( (char *)tempBffr2, "Wait for Pressure to be complete FAILED.\r\n");;
    591                                  Save_Status = Status;
    592          #ifdef NUCLEO
    593                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    594          #else
    595                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
    596          #endif
    597                                  if (Status != HAL_OK)
    598                                    return Status;
    599                                  else
    600                                    Status = Save_Status;
    601                              }
    602                              break;
    603          #endif
    604          //------------------ A6 Command...Read Pressure...PRESS_OUT_XL...PRESS_OUT_L...PRESS_OUT_H     
    605                            case '6':
    606                              //Status = RoadBrd_Barometer_Status( &PRMeasure );
    607                              Status = RoadBrd_Baro_ReadPressure( &PRPMeasure );
   \                     ??RoadBrd_ParseString_53: (+1)
   \   00000438   0xA8AE             ADD      R0,SP,#+696
   \   0000043A   0x.... 0x....      BL       RoadBrd_Baro_ReadPressure
   \   0000043E   0x0006             MOVS     R6,R0
    608                              if (Status == HAL_OK)
   \   00000440   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000442   0x2E00             CMP      R6,#+0
   \   00000444   0xD104             BNE.N    ??RoadBrd_ParseString_62
    609                                Status = RoadBrd_Baro_ReadPressure_Scaled( &PRPMeasureScaled );
   \   00000446   0xA8FF             ADD      R0,SP,#+1020
   \   00000448   0x3038             ADDS     R0,R0,#+56
   \   0000044A   0x.... 0x....      BL       RoadBrd_Baro_ReadPressure_Scaled
   \   0000044E   0x0006             MOVS     R6,R0
    610                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_62: (+1)
   \   00000450   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000452   0x2E00             CMP      R6,#+0
   \   00000454   0xD15D             BNE.N    ??RoadBrd_ParseString_63
    611                              {
    612                                strcpy( (char *)tempBffr2, "A6 Command...Read Pressure Passed.\r\n");;
   \   00000456   0xF8DF 0x1E08      LDR.W    R1,??RoadBrd_ParseString_64
   \   0000045A   0xA80A             ADD      R0,SP,#+40
   \   0000045C   0x.... 0x....      BL       strcpy
    613          #ifdef NUCLEO
    614                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    615          #else
    616                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000460   0xA90A             ADD      R1,SP,#+40
   \   00000462   0x2000             MOVS     R0,#+0
   \   00000464   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000468   0x0006             MOVS     R6,R0
    617          #endif
    618                                if (Status != HAL_OK)
   \   0000046A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000046C   0x2E00             CMP      R6,#+0
   \   0000046E   0xD003             BEQ.N    ??RoadBrd_ParseString_65
    619                                  return Status;
   \   00000470   0x0030             MOVS     R0,R6
   \   00000472   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000474   0xF004 0xBA63      B.W      ??RoadBrd_ParseString_4
    620                                // NOW, Build Data String..
    621                                sprintf( (char *)tempBffr2, " PRESSURE(PRESS_OUT_H...PRESS_OUT_L...PRESS_OUT_XL)\r\n" );
   \                     ??RoadBrd_ParseString_65: (+1)
   \   00000478   0xF8DF 0x1DE8      LDR.W    R1,??RoadBrd_ParseString_64+0x4
   \   0000047C   0xA80A             ADD      R0,SP,#+40
   \   0000047E   0x.... 0x....      BL       sprintf
    622          #ifdef NUCLEO
    623                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    624          #else
    625                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000482   0xA90A             ADD      R1,SP,#+40
   \   00000484   0x2000             MOVS     R0,#+0
   \   00000486   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000048A   0x0006             MOVS     R6,R0
    626          #endif
    627                                if (Status != HAL_OK)
   \   0000048C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000048E   0x2E00             CMP      R6,#+0
   \   00000490   0xD003             BEQ.N    ??RoadBrd_ParseString_66
    628                                  return Status;
   \   00000492   0x0030             MOVS     R0,R6
   \   00000494   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000496   0xF004 0xBA52      B.W      ??RoadBrd_ParseString_4
    629                               
    630                                // Now show Decimal value of items.
    631                                sprintf( (char *)tempBffr2, " PRESSURE: %s/%s\r\n", (char *)PRPMeasure.Pressure, (char *)PRPMeasureScaled.Pressure );
   \                     ??RoadBrd_ParseString_66: (+1)
   \   0000049A   0xABFF             ADD      R3,SP,#+1020
   \   0000049C   0x3338             ADDS     R3,R3,#+56
   \   0000049E   0xAAAE             ADD      R2,SP,#+696
   \   000004A0   0xF8DF 0x1DC4      LDR.W    R1,??RoadBrd_ParseString_64+0x8
   \   000004A4   0xA80A             ADD      R0,SP,#+40
   \   000004A6   0x.... 0x....      BL       sprintf
    632          #ifdef NUCLEO
    633                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    634          #else
    635                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000004AA   0xA90A             ADD      R1,SP,#+40
   \   000004AC   0x2000             MOVS     R0,#+0
   \   000004AE   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000004B2   0x0006             MOVS     R6,R0
    636          #endif
    637                                if (Status != HAL_OK)
   \   000004B4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000004B6   0x2E00             CMP      R6,#+0
   \   000004B8   0xD006             BEQ.N    ??RoadBrd_ParseString_67
    638                                  return Status;
   \   000004BA   0x0030             MOVS     R0,R6
   \   000004BC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000004BE   0xF004 0xBA3E      B.W      ??RoadBrd_ParseString_4
   \   000004C2   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_30:
   \   000004C4   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
    639                                // Is this a BLE Operation?
    640                                if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_67: (+1)
   \   000004C8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000004CA   0x2D00             CMP      R5,#+0
   \   000004CC   0xD00D             BEQ.N    ??RoadBrd_ParseString_68
    641                                {
    642                                  // Yes...Build and Send BLE Response NOW.
    643                                  sprintf( (char *)tempBffr2, "<STATUS>PRESSURE: %s/%s</STATUS>", (char *)PRPMeasure.Pressure, (char *)PRPMeasureScaled.Pressure );
   \   000004CE   0xABFF             ADD      R3,SP,#+1020
   \   000004D0   0x3338             ADDS     R3,R3,#+56
   \   000004D2   0xAAAE             ADD      R2,SP,#+696
   \   000004D4   0xF8DF 0x1D98      LDR.W    R1,??RoadBrd_ParseString_64+0x10
   \   000004D8   0xA80A             ADD      R0,SP,#+40
   \   000004DA   0x.... 0x....      BL       sprintf
    644                                  BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000004DE   0xA80A             ADD      R0,SP,#+40
   \   000004E0   0x.... 0x....      BL       strlen
   \   000004E4   0xA90A             ADD      R1,SP,#+40
   \   000004E6   0x.... 0x....      BL       BGM111_Transmit
    645                                }
    646                                // Now show hex value of items.
    647                                sprintf( (char *)tempBffr2, " PRESSURE:  " );
   \                     ??RoadBrd_ParseString_68: (+1)
   \   000004EA   0xF8DF 0x1D88      LDR.W    R1,??RoadBrd_ParseString_64+0x14
   \   000004EE   0xA80A             ADD      R0,SP,#+40
   \   000004F0   0x.... 0x....      BL       sprintf
    648                                strcat( (char *)tempBffr2, (char *)PRPMeasure.Raw );
   \   000004F4   0xA9B1             ADD      R1,SP,#+708
   \   000004F6   0xA80A             ADD      R0,SP,#+40
   \   000004F8   0x.... 0x....      BL       strcat
    649                                sprintf( (char *)tempBffr3, "  -  %08x\r\n", PRPMeasure.RawC);
   \   000004FC   0x9AB4             LDR      R2,[SP, #+720]
   \   000004FE   0xF8DF 0x1D78      LDR.W    R1,??RoadBrd_ParseString_64+0x18
   \   00000502   0xA82A             ADD      R0,SP,#+168
   \   00000504   0x.... 0x....      BL       sprintf
    650                                strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   00000508   0xA92A             ADD      R1,SP,#+168
   \   0000050A   0xA80A             ADD      R0,SP,#+40
   \   0000050C   0x.... 0x....      BL       strcat
   \   00000510   0xE015             B.N      ??RoadBrd_ParseString_69
    651                              }
    652                              else
    653                              {
    654                                  strcpy( (char *)tempBffr2, "A6 Command...Read Pressure FAILED.\r\n");;
   \                     ??RoadBrd_ParseString_63: (+1)
   \   00000512   0xF8DF 0x1D68      LDR.W    R1,??RoadBrd_ParseString_64+0x1C
   \   00000516   0xA80A             ADD      R0,SP,#+40
   \   00000518   0x.... 0x....      BL       strcpy
    655                                  Save_Status = Status;
   \   0000051C   0xF88D 0x60B4      STRB     R6,[SP, #+180]
    656          #ifdef NUCLEO
    657                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    658          #else
    659                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000520   0xA90A             ADD      R1,SP,#+40
   \   00000522   0x2000             MOVS     R0,#+0
   \   00000524   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000528   0x0006             MOVS     R6,R0
    660          #endif
    661                                  if (Status != HAL_OK)
   \   0000052A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000052C   0x2E00             CMP      R6,#+0
   \   0000052E   0xD003             BEQ.N    ??RoadBrd_ParseString_70
    662                                    return Status;
   \   00000530   0x0030             MOVS     R0,R6
   \   00000532   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000534   0xF004 0xBA03      B.W      ??RoadBrd_ParseString_4
    663                                  else
    664                                    Status = Save_Status;
   \                     ??RoadBrd_ParseString_70: (+1)
   \   00000538   0xF89D 0x00B4      LDRB     R0,[SP, #+180]
   \   0000053C   0x0006             MOVS     R6,R0
    665                              }
    666                              break;
   \                     ??RoadBrd_ParseString_69: (+1)
   \   0000053E   0xE096             B.N      ??RoadBrd_ParseString_52
    667          
    668          //------------------ A8 Command...Read Temperature....TEMP_OUT_L...TEMP_OUT_H    
    669                            case '8':
    670                              Status = RoadBrd_Baro_ReadTemp( &TMeasure );
   \                     ??RoadBrd_ParseString_54: (+1)
   \   00000540   0xA83C             ADD      R0,SP,#+240
   \   00000542   0x.... 0x....      BL       RoadBrd_Baro_ReadTemp
   \   00000546   0x0006             MOVS     R6,R0
    671                              if (Status == HAL_OK)
   \   00000548   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000054A   0x2E00             CMP      R6,#+0
   \   0000054C   0xD127             BNE.N    ??RoadBrd_ParseString_71
    672                              {
    673                                // Send string to UART..
    674                                strcpy( (char *)tempBffr2, "A8 Command...Read Temperature Passed.\r\n");
   \   0000054E   0xF8DF 0x1E0C      LDR.W    R1,??RoadBrd_ParseString_72
   \   00000552   0xA80A             ADD      R0,SP,#+40
   \   00000554   0x.... 0x....      BL       strcpy
    675          #ifdef NUCLEO
    676                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    677          #else
    678                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000558   0xA90A             ADD      R1,SP,#+40
   \   0000055A   0x2000             MOVS     R0,#+0
   \   0000055C   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000560   0x0006             MOVS     R6,R0
    679          #endif
    680                                if (Status != HAL_OK)
   \   00000562   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000564   0x2E00             CMP      R6,#+0
   \   00000566   0xD003             BEQ.N    ??RoadBrd_ParseString_73
    681                                  return Status;
   \   00000568   0x0030             MOVS     R0,R6
   \   0000056A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000056C   0xF004 0xB9E7      B.W      ??RoadBrd_ParseString_4
    682                                // NOW, Build Data String..
    683                                sprintf( (char *)tempBffr2, "     TEMP DATA: " );
   \                     ??RoadBrd_ParseString_73: (+1)
   \   00000570   0xF8DF 0x1DEC      LDR.W    R1,??RoadBrd_ParseString_72+0x4
   \   00000574   0xA80A             ADD      R0,SP,#+40
   \   00000576   0x.... 0x....      BL       sprintf
    684                                strcat( (char *)tempBffr2, (char *)TMeasure.Raw );
   \   0000057A   0xF10D 0x01FE      ADD      R1,SP,#+254
   \   0000057E   0xA80A             ADD      R0,SP,#+40
   \   00000580   0x.... 0x....      BL       strcat
    685                                strcat( (char *)tempBffr2, "\r\n" );
   \   00000584   0xA1DB             ADR.N    R1,??RoadBrd_ParseString_74  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000586   0xA80A             ADD      R0,SP,#+40
   \   00000588   0x.... 0x....      BL       strcat
    686                              }
    687                              else
    688                                break;
    689          #ifdef NUCLEO
    690                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    691          #else
    692                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000058C   0xA90A             ADD      R1,SP,#+40
   \   0000058E   0x2000             MOVS     R0,#+0
   \   00000590   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000594   0x0006             MOVS     R6,R0
    693          #endif
    694                              if (Status != HAL_OK)
   \   00000596   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000598   0x2E00             CMP      R6,#+0
   \   0000059A   0xD101             BNE.N    ??RoadBrd_ParseString_75
   \   0000059C   0xE004             B.N      ??RoadBrd_ParseString_76
   \                     ??RoadBrd_ParseString_71: (+1)
   \   0000059E   0xE066             B.N      ??RoadBrd_ParseString_52
    695                                return Status;
   \                     ??RoadBrd_ParseString_75: (+1)
   \   000005A0   0x0030             MOVS     R0,R6
   \   000005A2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000005A4   0xF004 0xB9CB      B.W      ??RoadBrd_ParseString_4
    696                              // NOW, Build Data String..
    697                              sprintf( (char *)tempBffr2, "     TEMP DATA(Decimal): %d\r\n", TMeasure.RawC );
   \                     ??RoadBrd_ParseString_76: (+1)
   \   000005A8   0xF8BD 0x2106      LDRH     R2,[SP, #+262]
   \   000005AC   0xF8DF 0x1DB4      LDR.W    R1,??RoadBrd_ParseString_72+0x8
   \   000005B0   0xA80A             ADD      R0,SP,#+40
   \   000005B2   0x.... 0x....      BL       sprintf
    698          #ifdef NUCLEO
    699                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    700          #else
    701                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000005B6   0xA90A             ADD      R1,SP,#+40
   \   000005B8   0x2000             MOVS     R0,#+0
   \   000005BA   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000005BE   0x0006             MOVS     R6,R0
    702          #endif
    703                              if (Status != HAL_OK)
   \   000005C0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000005C2   0x2E00             CMP      R6,#+0
   \   000005C4   0xD003             BEQ.N    ??RoadBrd_ParseString_77
    704                                return Status;
   \   000005C6   0x0030             MOVS     R0,R6
   \   000005C8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000005CA   0xF004 0xB9B8      B.W      ??RoadBrd_ParseString_4
    705                              // Is this a BLE Operation?
    706                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_77: (+1)
   \   000005CE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000005D0   0x2D00             CMP      R5,#+0
   \   000005D2   0xD00A             BEQ.N    ??RoadBrd_ParseString_78
    707                              {
    708                                // Yes...Build and Send BLE Response NOW.
    709                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000005D4   0xF8DF 0x1BE4      LDR.W    R1,??RoadBrd_ParseString_51+0x4
   \   000005D8   0xA80A             ADD      R0,SP,#+40
   \   000005DA   0x.... 0x....      BL       strcpy
    710                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000005DE   0xA80A             ADD      R0,SP,#+40
   \   000005E0   0x.... 0x....      BL       strlen
   \   000005E4   0xA90A             ADD      R1,SP,#+40
   \   000005E6   0x.... 0x....      BL       BGM111_Transmit
    711                              }
    712                              // Now calculate Celcius and Farenheit Temp.
    713                              sprintf( (char *)tempBffr2, "     TempC: " );
   \                     ??RoadBrd_ParseString_78: (+1)
   \   000005EA   0xF8DF 0x1E1C      LDR.W    R1,??RoadBrd_ParseString_79
   \   000005EE   0xA80A             ADD      R0,SP,#+40
   \   000005F0   0x.... 0x....      BL       sprintf
    714                              strcat( (char *)tempBffr2, (char *)TMeasure.TempC );
   \   000005F4   0xA93C             ADD      R1,SP,#+240
   \   000005F6   0xA80A             ADD      R0,SP,#+40
   \   000005F8   0x.... 0x....      BL       strcat
    715                              strcat( (char *)tempBffr2, "     TempF: " );
   \   000005FC   0xF8DF 0x1E0C      LDR.W    R1,??RoadBrd_ParseString_79+0x4
   \   00000600   0xA80A             ADD      R0,SP,#+40
   \   00000602   0x.... 0x....      BL       strcat
    716                              strcat( (char *)tempBffr2, (char *)TMeasure.TempF );
   \   00000606   0xF10D 0x01F7      ADD      R1,SP,#+247
   \   0000060A   0xA80A             ADD      R0,SP,#+40
   \   0000060C   0x.... 0x....      BL       strcat
    717                              strcat( (char *)tempBffr2, "\r\n" );
   \   00000610   0xA1B8             ADR.N    R1,??RoadBrd_ParseString_74  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000612   0xA80A             ADD      R0,SP,#+40
   \   00000614   0x.... 0x....      BL       strcat
    718          /*                    if (Status == HAL_OK)
    719                              {
    720                                strcpy( (char *)tempBffr2, "A8 Command...Read Temperature Passed.\r\n");;
    721          #ifdef NUCLEO
    722                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    723          #else
    724                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
    725          #endif
    726                                if (Status != HAL_OK)
    727                                  return Status;
    728                                // NOW, Build Data String..
    729                                sprintf( (char *)tempBffr2, " Temperature(TEMP_OUT_L...TEMP_OUT_H)\r\n" );
    730          #ifdef NUCLEO
    731                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    732          #else
    733                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
    734          #endif
    735                                if (Status != HAL_OK)
    736                                  return Status;
    737                                sprintf( (char *)tempBffr2, " Temperature:  %02x   %02x\r\n", i2cData[0], i2cData[1] );
    738                              }
    739                              else
    740                              {
    741                                  strcpy( (char *)tempBffr2, "A8 Command...Read Temperature FAILED.\r\n");;
    742                                  Save_Status = Status;
    743          #ifdef NUCLEO
    744                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    745          #else
    746                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
    747          #endif
    748                                  if (Status != HAL_OK)
    749                                    return Status;
    750                                  else
    751                                    Status = Save_Status;
    752                              }*/
    753                              break;
   \   00000618   0xE029             B.N      ??RoadBrd_ParseString_52
    754          //------------------ A9 Command...Test and Verify WHO_AM_I     
    755                            case '9':
    756                              Status = RoadBrd_TestandRead_Barometer();
   \                     ??RoadBrd_ParseString_55: (+1)
   \   0000061A   0x.... 0x....      BL       RoadBrd_TestandRead_Barometer
   \   0000061E   0x0006             MOVS     R6,R0
    757                              // Is this a BLE Operation?
    758                              if ( BLE_Flag )
   \   00000620   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000622   0x2D00             CMP      R5,#+0
   \   00000624   0xD00A             BEQ.N    ??RoadBrd_ParseString_80
    759                              {
    760                                // Yes...Build and Send BLE Response NOW.
    761                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00000626   0xF8DF 0x1B94      LDR.W    R1,??RoadBrd_ParseString_51+0x4
   \   0000062A   0xA80A             ADD      R0,SP,#+40
   \   0000062C   0x.... 0x....      BL       strcpy
    762                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000630   0xA80A             ADD      R0,SP,#+40
   \   00000632   0x.... 0x....      BL       strlen
   \   00000636   0xA90A             ADD      R1,SP,#+40
   \   00000638   0x.... 0x....      BL       BGM111_Transmit
    763                              }
    764                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_80: (+1)
   \   0000063C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000063E   0x2E00             CMP      R6,#+0
   \   00000640   0xD108             BNE.N    ??RoadBrd_ParseString_81
    765                              {
    766                                  strcpy( (char *)tempBffr2, "Barometer Sensor: WHO_AM_I Passed.\r\n");
   \   00000642   0xF8DF 0x1E18      LDR.W    R1,??RoadBrd_ParseString_82
   \   00000646   0xA80A             ADD      R0,SP,#+40
   \   00000648   0x.... 0x....      BL       strcpy
   \   0000064C   0xE009             B.N      ??RoadBrd_ParseString_83
   \   0000064E   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_42:
   \   00000650   0x00 0x00          DC8      "",0x0,0x0,0x0
   \              0x00 0x00    
    767                              }
    768                              else
    769                              {
    770                                  strcpy( (char *)tempBffr2, "Barometer Sensor: WHO_AM_I FAILED.\r\n");
   \                     ??RoadBrd_ParseString_81: (+1)
   \   00000654   0xF8DF 0x1E08      LDR.W    R1,??RoadBrd_ParseString_82+0x4
   \   00000658   0xA80A             ADD      R0,SP,#+40
   \   0000065A   0x.... 0x....      BL       strcpy
    771                                  Status = HAL_OK;
   \   0000065E   0x2000             MOVS     R0,#+0
   \   00000660   0x0006             MOVS     R6,R0
    772                              }
    773                              break;
   \                     ??RoadBrd_ParseString_83: (+1)
   \   00000662   0xE004             B.N      ??RoadBrd_ParseString_52
    774                            default:
    775                              strcpy( (char *)tempBffr2, "ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_56: (+1)
   \   00000664   0xF8DF 0x1DFC      LDR.W    R1,??RoadBrd_ParseString_82+0x8
   \   00000668   0xA80A             ADD      R0,SP,#+40
   \   0000066A   0x.... 0x....      BL       strcpy
    776                              break;
    777                          } //EndSwitch
    778                        } //EndElse (Size == 1)
    779                        break;
   \                     ??RoadBrd_ParseString_52: (+1)
   \   0000066E   0xF004 0xB8EC      B.W      ??RoadBrd_ParseString_27
    780          //**************************************************************************************************
    781                      case 'B':
    782                        // Read Cool Eye. 
    783          //++++++++++++++++++++++++++++++++++++++++++  Cool Eye/Grid Eye Monitor Commands.
    784                        if (Size == 1)
   \                     ??RoadBrd_ParseString_13: (+1)
   \   00000672   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000676   0xF1B8 0x0F01      CMP      R8,#+1
   \   0000067A   0xF040 0x8150      BNE.W    ??RoadBrd_ParseString_84
    785                        {
    786          //------------------ B Command: Read Cool Eye/Grid Eye Values      
    787                          // Read Cool Eye/Grid Eye Values.....
    788                          if ( Get_DriverStates( GRIDEYE_MNTR_TASK ))
   \   0000067E   0x2005             MOVS     R0,#+5
   \   00000680   0x.... 0x....      BL       Get_DriverStates
   \   00000684   0x2800             CMP      R0,#+0
   \   00000686   0xD00B             BEQ.N    ??RoadBrd_ParseString_85
    789                          {
    790                            Status = RoadBrd_GridEye_ReadValues( &GridMeasure );
   \   00000688   0xA85B             ADD      R0,SP,#+364
   \   0000068A   0x.... 0x....      BL       RoadBrd_GridEye_ReadValues
   \   0000068E   0x0006             MOVS     R6,R0
    791                            if (Status == HAL_OK)
   \   00000690   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000692   0x2E00             CMP      R6,#+0
   \   00000694   0xD117             BNE.N    ??RoadBrd_ParseString_86
    792                              Status = RoadBrd_GridEye_ReadValues_Scaled( &GridMeasureScaled );
   \   00000696   0xA8D7             ADD      R0,SP,#+860
   \   00000698   0x.... 0x....      BL       RoadBrd_GridEye_ReadValues_Scaled
   \   0000069C   0x0006             MOVS     R6,R0
   \   0000069E   0xE012             B.N      ??RoadBrd_ParseString_86
    793                          }
    794                          else if ( Get_DriverStates( COOLEYE_MNTR_TASK ))
   \                     ??RoadBrd_ParseString_85: (+1)
   \   000006A0   0x2006             MOVS     R0,#+6
   \   000006A2   0x.... 0x....      BL       Get_DriverStates
   \   000006A6   0x2800             CMP      R0,#+0
   \   000006A8   0xD00B             BEQ.N    ??RoadBrd_ParseString_87
    795                          {
    796                            Status = RoadBrd_CoolEye_ReadValues( &GridMeasure );
   \   000006AA   0xA85B             ADD      R0,SP,#+364
   \   000006AC   0x.... 0x....      BL       RoadBrd_CoolEye_ReadValues
   \   000006B0   0x0006             MOVS     R6,R0
    797                            if (Status == HAL_OK)
   \   000006B2   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000006B4   0x2E00             CMP      R6,#+0
   \   000006B6   0xD106             BNE.N    ??RoadBrd_ParseString_86
    798                              Status = RoadBrd_CoolEye_ReadValues_Scaled( &GridMeasureScaled );
   \   000006B8   0xA8D7             ADD      R0,SP,#+860
   \   000006BA   0x.... 0x....      BL       RoadBrd_CoolEye_ReadValues_Scaled
   \   000006BE   0x0006             MOVS     R6,R0
   \   000006C0   0xE001             B.N      ??RoadBrd_ParseString_86
    799                          }
    800                          else
    801                            Status = HAL_ERROR;
   \                     ??RoadBrd_ParseString_87: (+1)
   \   000006C2   0x2001             MOVS     R0,#+1
   \   000006C4   0x0006             MOVS     R6,R0
    802                          
    803                          // Is this a BLE Operation?
    804                          if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_86: (+1)
   \   000006C6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000006C8   0x2D00             CMP      R5,#+0
   \   000006CA   0xD00A             BEQ.N    ??RoadBrd_ParseString_88
    805                          {
    806                            // Yes...Build and Send BLE Response NOW.
    807                            strcpy( (char *)tempBffr2, "<STATUS>ST_THERMAL_DUMP:");
   \   000006CC   0xF8DF 0x1E28      LDR.W    R1,??RoadBrd_ParseString_89
   \   000006D0   0xA80A             ADD      R0,SP,#+40
   \   000006D2   0x.... 0x....      BL       strcpy
    808                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000006D6   0xA80A             ADD      R0,SP,#+40
   \   000006D8   0x.... 0x....      BL       strlen
   \   000006DC   0xA90A             ADD      R1,SP,#+40
   \   000006DE   0x.... 0x....      BL       BGM111_Transmit
    809                          }
    810                          if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_88: (+1)
   \   000006E2   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000006E4   0x2E00             CMP      R6,#+0
   \   000006E6   0xF040 0x8107      BNE.W    ??RoadBrd_ParseString_90
    811                          {
    812                            // Send string to UART..
    813                            strcpy( (char *)tempBffr2, "Voltage Monitor/Shunt Voltage...\r\n");
   \   000006EA   0xF8DF 0x1E10      LDR.W    R1,??RoadBrd_ParseString_89+0x4
   \   000006EE   0xA80A             ADD      R0,SP,#+40
   \   000006F0   0x.... 0x....      BL       strcpy
    814          #ifdef NUCLEO
    815                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    816          #else
    817                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000006F4   0xA90A             ADD      R1,SP,#+40
   \   000006F6   0x2000             MOVS     R0,#+0
   \   000006F8   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000006FC   0x0006             MOVS     R6,R0
    818          #endif
    819                            if (Status != HAL_OK)
   \   000006FE   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000700   0x2E00             CMP      R6,#+0
   \   00000702   0xD003             BEQ.N    ??RoadBrd_ParseString_91
    820                              return Status;
   \   00000704   0x0030             MOVS     R0,R6
   \   00000706   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000708   0xF004 0xB919      B.W      ??RoadBrd_ParseString_4
    821                            // NOW, Build Data String..
    822                            for (x=0; x<9; x++)
   \                     ??RoadBrd_ParseString_91: (+1)
   \   0000070C   0x2000             MOVS     R0,#+0
   \   0000070E   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_92: (+1)
   \   00000710   0x2F09             CMP      R7,#+9
   \   00000712   0xF280 0x80DE      BGE.W    ??RoadBrd_ParseString_93
    823                            {
    824                              // Build String
    825                              switch(x)
   \   00000716   0x2F00             CMP      R7,#+0
   \   00000718   0xD00F             BEQ.N    ??RoadBrd_ParseString_94
   \   0000071A   0x2F02             CMP      R7,#+2
   \   0000071C   0xD035             BEQ.N    ??RoadBrd_ParseString_95
   \   0000071E   0xD320             BCC.N    ??RoadBrd_ParseString_96
   \   00000720   0x2F04             CMP      R7,#+4
   \   00000722   0xD05A             BEQ.N    ??RoadBrd_ParseString_97
   \   00000724   0xD345             BCC.N    ??RoadBrd_ParseString_98
   \   00000726   0x2F06             CMP      R7,#+6
   \   00000728   0xF000 0x807F      BEQ.W    ??RoadBrd_ParseString_99
   \   0000072C   0xD369             BCC.N    ??RoadBrd_ParseString_100
   \   0000072E   0x2F08             CMP      R7,#+8
   \   00000730   0xF000 0x80A4      BEQ.W    ??RoadBrd_ParseString_101
   \   00000734   0xF0C0 0x808D      BCC.W    ??RoadBrd_ParseString_102
   \   00000738   0xE0B4             B.N      ??RoadBrd_ParseString_103
    826                              {
    827                                case 0: //Thermistor Values
    828                                  sprintf( (char *)tempBffr2, "     Thermistor DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.Thermistor.Raw,
    829                                                                                                         GridMeasure.Thermistor.TempC,GridMeasureScaled.Thermistor.TempC,
    830                                                                                                         GridMeasure.Thermistor.TempF,GridMeasureScaled.Thermistor.TempF,
    831                                                                                                         GridMeasure.Thermistor.RawC );
   \                     ??RoadBrd_ParseString_94: (+1)
   \   0000073A   0xF8BD 0x0182      LDRH     R0,[SP, #+386]
   \   0000073E   0x9003             STR      R0,[SP, #+12]
   \   00000740   0xA8D8             ADD      R0,SP,#+864
   \   00000742   0x1CC0             ADDS     R0,R0,#+3
   \   00000744   0x9002             STR      R0,[SP, #+8]
   \   00000746   0xA85C             ADD      R0,SP,#+368
   \   00000748   0x1CC0             ADDS     R0,R0,#+3
   \   0000074A   0x9001             STR      R0,[SP, #+4]
   \   0000074C   0xA8D7             ADD      R0,SP,#+860
   \   0000074E   0x9000             STR      R0,[SP, #+0]
   \   00000750   0xAB5B             ADD      R3,SP,#+364
   \   00000752   0xF50D 0x72BD      ADD      R2,SP,#+378
   \   00000756   0xF8DF 0x1E0C      LDR.W    R1,??RoadBrd_ParseString_104
   \   0000075A   0xA80A             ADD      R0,SP,#+40
   \   0000075C   0x.... 0x....      BL       sprintf
    832          //                        sprintf( (char *)tempBffr2, "     Thermistor DATA: %s   %s   %s   %d\r\n", GridMeasure.Thermistor.Raw,
    833          //                                                                                               GridMeasure.Thermistor.TempC,
    834          //                                                                                               GridMeasure.Thermistor.TempF,
    835          //                                                                                               GridMeasure.Thermistor.RawC );
    836                                  break;
   \   00000760   0xE0A0             B.N      ??RoadBrd_ParseString_103
    837                                case 1: //GridEye1 Values
    838                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye1.Raw,
    839                                                                                                         GridMeasure.GridEye1.TempC,GridMeasureScaled.GridEye1.TempC,
    840                                                                                                         GridMeasure.GridEye1.TempF,GridMeasureScaled.GridEye1.TempF,
    841                                                                                                         GridMeasure.GridEye1.RawC );
   \                     ??RoadBrd_ParseString_96: (+1)
   \   00000762   0xF8BD 0x019A      LDRH     R0,[SP, #+410]
   \   00000766   0x9003             STR      R0,[SP, #+12]
   \   00000768   0xA8DE             ADD      R0,SP,#+888
   \   0000076A   0x1CC0             ADDS     R0,R0,#+3
   \   0000076C   0x9002             STR      R0,[SP, #+8]
   \   0000076E   0xA862             ADD      R0,SP,#+392
   \   00000770   0x1CC0             ADDS     R0,R0,#+3
   \   00000772   0x9001             STR      R0,[SP, #+4]
   \   00000774   0xA8DD             ADD      R0,SP,#+884
   \   00000776   0x9000             STR      R0,[SP, #+0]
   \   00000778   0xAB61             ADD      R3,SP,#+388
   \   0000077A   0xF50D 0x72C9      ADD      R2,SP,#+402
   \   0000077E   0xF8DF 0x1DE8      LDR.W    R1,??RoadBrd_ParseString_104+0x4
   \   00000782   0xA80A             ADD      R0,SP,#+40
   \   00000784   0x.... 0x....      BL       sprintf
    842          //                        sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye1.Raw,
    843          //                                                                                               GridMeasure.GridEye1.TempC,
    844          //                                                                                               GridMeasure.GridEye1.TempF,
    845          //                                                                                               GridMeasure.GridEye1.RawC );
    846                                  break;
   \   00000788   0xE08C             B.N      ??RoadBrd_ParseString_103
    847                                case 2: //GridEye2 Values
    848                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye2.Raw,
    849                                                                                                         GridMeasure.GridEye2.TempC,GridMeasureScaled.GridEye2.TempC,
    850                                                                                                         GridMeasure.GridEye2.TempF,GridMeasureScaled.GridEye2.TempF,
    851                                                                                                         GridMeasure.GridEye2.RawC );
   \                     ??RoadBrd_ParseString_95: (+1)
   \   0000078A   0xF8BD 0x01B2      LDRH     R0,[SP, #+434]
   \   0000078E   0x9003             STR      R0,[SP, #+12]
   \   00000790   0xA8E4             ADD      R0,SP,#+912
   \   00000792   0x1CC0             ADDS     R0,R0,#+3
   \   00000794   0x9002             STR      R0,[SP, #+8]
   \   00000796   0xA868             ADD      R0,SP,#+416
   \   00000798   0x1CC0             ADDS     R0,R0,#+3
   \   0000079A   0x9001             STR      R0,[SP, #+4]
   \   0000079C   0xA8E3             ADD      R0,SP,#+908
   \   0000079E   0x9000             STR      R0,[SP, #+0]
   \   000007A0   0xAB67             ADD      R3,SP,#+412
   \   000007A2   0xF50D 0x72D5      ADD      R2,SP,#+426
   \   000007A6   0xF8DF 0x1DC0      LDR.W    R1,??RoadBrd_ParseString_104+0x4
   \   000007AA   0xA80A             ADD      R0,SP,#+40
   \   000007AC   0x.... 0x....      BL       sprintf
    852          //                        sprintf( (char *)tempBffr2, "     Grid 34 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye2.Raw,
    853          //                                                                                               GridMeasure.GridEye2.TempC,
    854          //                                                                                               GridMeasure.GridEye2.TempF,
    855          //                                                                                               GridMeasure.GridEye2.RawC );
    856                                  break;
   \   000007B0   0xE078             B.N      ??RoadBrd_ParseString_103
    857                                case 3: //GridEye3 Values
    858                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye3.Raw,
    859                                                                                                         GridMeasure.GridEye3.TempC,GridMeasureScaled.GridEye3.TempC,
    860                                                                                                         GridMeasure.GridEye3.TempF,GridMeasureScaled.GridEye3.TempF,
    861                                                                                                         GridMeasure.GridEye3.RawC );
   \                     ??RoadBrd_ParseString_98: (+1)
   \   000007B2   0xF8BD 0x01CA      LDRH     R0,[SP, #+458]
   \   000007B6   0x9003             STR      R0,[SP, #+12]
   \   000007B8   0xA8EA             ADD      R0,SP,#+936
   \   000007BA   0x1CC0             ADDS     R0,R0,#+3
   \   000007BC   0x9002             STR      R0,[SP, #+8]
   \   000007BE   0xA86E             ADD      R0,SP,#+440
   \   000007C0   0x1CC0             ADDS     R0,R0,#+3
   \   000007C2   0x9001             STR      R0,[SP, #+4]
   \   000007C4   0xA8E9             ADD      R0,SP,#+932
   \   000007C6   0x9000             STR      R0,[SP, #+0]
   \   000007C8   0xAB6D             ADD      R3,SP,#+436
   \   000007CA   0xF50D 0x72E1      ADD      R2,SP,#+450
   \   000007CE   0xF8DF 0x1D98      LDR.W    R1,??RoadBrd_ParseString_104+0x4
   \   000007D2   0xA80A             ADD      R0,SP,#+40
   \   000007D4   0x.... 0x....      BL       sprintf
    862          //                        sprintf( (char *)tempBffr2, "     Grid 35 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye3.Raw,
    863          //                                                                                               GridMeasure.GridEye3.TempC,
    864          //                                                                                               GridMeasure.GridEye3.TempF,
    865          //                                                                                               GridMeasure.GridEye3.RawC );
    866                                  break;
   \   000007D8   0xE064             B.N      ??RoadBrd_ParseString_103
    867                                case 4: //GridEye4 Values
    868                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye4.Raw,
    869                                                                                                         GridMeasure.GridEye4.TempC,GridMeasureScaled.GridEye4.TempC,
    870                                                                                                         GridMeasure.GridEye4.TempF,GridMeasureScaled.GridEye4.TempF,
    871                                                                                                         GridMeasure.GridEye4.RawC );
   \                     ??RoadBrd_ParseString_97: (+1)
   \   000007DA   0xF8BD 0x01E2      LDRH     R0,[SP, #+482]
   \   000007DE   0x9003             STR      R0,[SP, #+12]
   \   000007E0   0xA8F0             ADD      R0,SP,#+960
   \   000007E2   0x1CC0             ADDS     R0,R0,#+3
   \   000007E4   0x9002             STR      R0,[SP, #+8]
   \   000007E6   0xA874             ADD      R0,SP,#+464
   \   000007E8   0x1CC0             ADDS     R0,R0,#+3
   \   000007EA   0x9001             STR      R0,[SP, #+4]
   \   000007EC   0xA8EF             ADD      R0,SP,#+956
   \   000007EE   0x9000             STR      R0,[SP, #+0]
   \   000007F0   0xAB73             ADD      R3,SP,#+460
   \   000007F2   0xF50D 0x72ED      ADD      R2,SP,#+474
   \   000007F6   0xF8DF 0x1D70      LDR.W    R1,??RoadBrd_ParseString_104+0x4
   \   000007FA   0xA80A             ADD      R0,SP,#+40
   \   000007FC   0x.... 0x....      BL       sprintf
    872          //                        sprintf( (char *)tempBffr2, "     Grid 36 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye4.Raw,
    873          //                                                                                               GridMeasure.GridEye4.TempC,
    874          //                                                                                               GridMeasure.GridEye4.TempF,
    875          //                                                                                               GridMeasure.GridEye4.RawC );
    876                                  break;
   \   00000800   0xE050             B.N      ??RoadBrd_ParseString_103
    877                                case 5: //GridEye5 Values
    878                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye5.Raw,
    879                                                                                                         GridMeasure.GridEye5.TempC,GridMeasureScaled.GridEye5.TempC,
    880                                                                                                         GridMeasure.GridEye5.TempF,GridMeasureScaled.GridEye5.TempF,
    881                                                                                                         GridMeasure.GridEye5.RawC );
   \                     ??RoadBrd_ParseString_100: (+1)
   \   00000802   0xF8BD 0x01FA      LDRH     R0,[SP, #+506]
   \   00000806   0x9003             STR      R0,[SP, #+12]
   \   00000808   0xA8F6             ADD      R0,SP,#+984
   \   0000080A   0x1CC0             ADDS     R0,R0,#+3
   \   0000080C   0x9002             STR      R0,[SP, #+8]
   \   0000080E   0xA87A             ADD      R0,SP,#+488
   \   00000810   0x1CC0             ADDS     R0,R0,#+3
   \   00000812   0x9001             STR      R0,[SP, #+4]
   \   00000814   0xA8F5             ADD      R0,SP,#+980
   \   00000816   0x9000             STR      R0,[SP, #+0]
   \   00000818   0xAB79             ADD      R3,SP,#+484
   \   0000081A   0xF50D 0x72F9      ADD      R2,SP,#+498
   \   0000081E   0xF8DF 0x1D48      LDR.W    R1,??RoadBrd_ParseString_104+0x4
   \   00000822   0xA80A             ADD      R0,SP,#+40
   \   00000824   0x.... 0x....      BL       sprintf
    882          //                        sprintf( (char *)tempBffr2, "     Grid 37 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye5.Raw,
    883          //                                                                                               GridMeasure.GridEye5.TempC,
    884          //                                                                                               GridMeasure.GridEye5.TempF,
    885          //                                                                                               GridMeasure.GridEye5.RawC );
    886                                  break;
   \   00000828   0xE03C             B.N      ??RoadBrd_ParseString_103
    887                                case 6: //GridEye6 Values
    888                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye6.Raw,
    889                                                                                                         GridMeasure.GridEye6.TempC,GridMeasureScaled.GridEye6.TempC,
    890                                                                                                         GridMeasure.GridEye6.TempF,GridMeasureScaled.GridEye6.TempF,
    891                                                                                                         GridMeasure.GridEye6.RawC );
   \                     ??RoadBrd_ParseString_99: (+1)
   \   0000082A   0xF8BD 0x0212      LDRH     R0,[SP, #+530]
   \   0000082E   0x9003             STR      R0,[SP, #+12]
   \   00000830   0xA8FC             ADD      R0,SP,#+1008
   \   00000832   0x1CC0             ADDS     R0,R0,#+3
   \   00000834   0x9002             STR      R0,[SP, #+8]
   \   00000836   0xA880             ADD      R0,SP,#+512
   \   00000838   0x1CC0             ADDS     R0,R0,#+3
   \   0000083A   0x9001             STR      R0,[SP, #+4]
   \   0000083C   0xA8FB             ADD      R0,SP,#+1004
   \   0000083E   0x9000             STR      R0,[SP, #+0]
   \   00000840   0xAB7F             ADD      R3,SP,#+508
   \   00000842   0xAA82             ADD      R2,SP,#+520
   \   00000844   0x1C92             ADDS     R2,R2,#+2
   \   00000846   0xF8DF 0x1D20      LDR.W    R1,??RoadBrd_ParseString_104+0x4
   \   0000084A   0xA80A             ADD      R0,SP,#+40
   \   0000084C   0x.... 0x....      BL       sprintf
    892          //                        sprintf( (char *)tempBffr2, "     Grid 38 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye6.Raw,
    893          //                                                                                               GridMeasure.GridEye6.TempC,
    894          //                                                                                               GridMeasure.GridEye6.TempF,
    895          //                                                                                               GridMeasure.GridEye6.RawC );
    896                                  break;
   \   00000850   0xE028             B.N      ??RoadBrd_ParseString_103
    897                                case 7: //GridEye7 Values
    898                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye7.Raw,
    899                                                                                                         GridMeasure.GridEye7.TempC,GridMeasureScaled.GridEye7.TempC,
    900                                                                                                         GridMeasure.GridEye7.TempF,GridMeasureScaled.GridEye7.TempF,
    901                                                                                                         GridMeasure.GridEye7.RawC );
   \                     ??RoadBrd_ParseString_102: (+1)
   \   00000852   0xF8BD 0x022A      LDRH     R0,[SP, #+554]
   \   00000856   0x9003             STR      R0,[SP, #+12]
   \   00000858   0xA8FF             ADD      R0,SP,#+1020
   \   0000085A   0x300F             ADDS     R0,R0,#+15
   \   0000085C   0x9002             STR      R0,[SP, #+8]
   \   0000085E   0xA886             ADD      R0,SP,#+536
   \   00000860   0x1CC0             ADDS     R0,R0,#+3
   \   00000862   0x9001             STR      R0,[SP, #+4]
   \   00000864   0xA8FF             ADD      R0,SP,#+1020
   \   00000866   0x3008             ADDS     R0,R0,#+8
   \   00000868   0x9000             STR      R0,[SP, #+0]
   \   0000086A   0xAB85             ADD      R3,SP,#+532
   \   0000086C   0xAA88             ADD      R2,SP,#+544
   \   0000086E   0x1C92             ADDS     R2,R2,#+2
   \   00000870   0xF8DF 0x1CF4      LDR.W    R1,??RoadBrd_ParseString_104+0x4
   \   00000874   0xA80A             ADD      R0,SP,#+40
   \   00000876   0x.... 0x....      BL       sprintf
    902          //                        sprintf( (char *)tempBffr2, "     Grid 39 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye7.Raw,
    903          //                                                                                               GridMeasure.GridEye7.TempC,
    904          //                                                                                               GridMeasure.GridEye7.TempF,
    905          //                                                                                               GridMeasure.GridEye7.RawC );
    906                                  break;
   \   0000087A   0xE013             B.N      ??RoadBrd_ParseString_103
    907                                case 8: //GridEye8 Values
    908                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye8.Raw,
    909                                                                                                         GridMeasure.GridEye8.TempC,GridMeasureScaled.GridEye8.TempC,
    910                                                                                                         GridMeasure.GridEye8.TempF,GridMeasureScaled.GridEye8.TempF,
    911                                                                                                         GridMeasure.GridEye8.RawC );
   \                     ??RoadBrd_ParseString_101: (+1)
   \   0000087C   0xF8BD 0x0242      LDRH     R0,[SP, #+578]
   \   00000880   0x9003             STR      R0,[SP, #+12]
   \   00000882   0xA8FF             ADD      R0,SP,#+1020
   \   00000884   0x3027             ADDS     R0,R0,#+39
   \   00000886   0x9002             STR      R0,[SP, #+8]
   \   00000888   0xA88C             ADD      R0,SP,#+560
   \   0000088A   0x1CC0             ADDS     R0,R0,#+3
   \   0000088C   0x9001             STR      R0,[SP, #+4]
   \   0000088E   0xA8FF             ADD      R0,SP,#+1020
   \   00000890   0x3020             ADDS     R0,R0,#+32
   \   00000892   0x9000             STR      R0,[SP, #+0]
   \   00000894   0xAB8B             ADD      R3,SP,#+556
   \   00000896   0xAA8E             ADD      R2,SP,#+568
   \   00000898   0x1C92             ADDS     R2,R2,#+2
   \   0000089A   0xF8DF 0x1CCC      LDR.W    R1,??RoadBrd_ParseString_104+0x4
   \   0000089E   0xA80A             ADD      R0,SP,#+40
   \   000008A0   0x.... 0x....      BL       sprintf
    912          //                        sprintf( (char *)tempBffr2, "     Grid 40 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye8.Raw,
    913          //                                                                                               GridMeasure.GridEye8.TempC,
    914          //                                                                                               GridMeasure.GridEye8.TempF,
    915          //                                                                                               GridMeasure.GridEye8.RawC );
    916                                  break;
    917                              } // EndSwitch(x)
    918                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_103: (+1)
   \   000008A4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000008A6   0x2D00             CMP      R5,#+0
   \   000008A8   0xD005             BEQ.N    ??RoadBrd_ParseString_105
    919                              {
    920                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000008AA   0xA80A             ADD      R0,SP,#+40
   \   000008AC   0x.... 0x....      BL       strlen
   \   000008B0   0xA90A             ADD      R1,SP,#+40
   \   000008B2   0x.... 0x....      BL       BGM111_Transmit
    921                              }
    922                              // Now Print String.
    923           #ifdef NUCLEO
    924                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    925          #else
    926                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \                     ??RoadBrd_ParseString_105: (+1)
   \   000008B6   0xA90A             ADD      R1,SP,#+40
   \   000008B8   0x2000             MOVS     R0,#+0
   \   000008BA   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000008BE   0x0006             MOVS     R6,R0
    927          #endif
    928                              if (Status != HAL_OK)
   \   000008C0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000008C2   0x2E00             CMP      R6,#+0
   \   000008C4   0xD003             BEQ.N    ??RoadBrd_ParseString_106
    929                                return Status;
   \   000008C6   0x0030             MOVS     R0,R6
   \   000008C8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000008CA   0xF004 0xB838      B.W      ??RoadBrd_ParseString_4
    930                            } // EndFor(x=0; x<9; x++)
   \                     ??RoadBrd_ParseString_106: (+1)
   \   000008CE   0x1C7F             ADDS     R7,R7,#+1
   \   000008D0   0xE71E             B.N      ??RoadBrd_ParseString_92
    931                            sprintf( (char *)tempBffr2, "     SHNT VLTG DATA: " );
   \                     ??RoadBrd_ParseString_93: (+1)
   \   000008D2   0xF8DF 0x1E04      LDR.W    R1,??RoadBrd_ParseString_107
   \   000008D6   0xA80A             ADD      R0,SP,#+40
   \   000008D8   0x.... 0x....      BL       sprintf
    932                            strcat( (char *)tempBffr2, (char *)VMeasure.Raw );
   \   000008DC   0xA944             ADD      R1,SP,#+272
   \   000008DE   0xA80A             ADD      R0,SP,#+40
   \   000008E0   0x.... 0x....      BL       strcat
    933                            strcat( (char *)tempBffr2, "\r\n" );
   \   000008E4   0xA103             ADR.N    R1,??RoadBrd_ParseString_74  ;; 0x0D, 0x0A, 0x00, 0x00
   \   000008E6   0xA80A             ADD      R0,SP,#+40
   \   000008E8   0x.... 0x....      BL       strcat
    934                          } //Endif(Status == HAL_OK)
    935                          else
    936                            break;
    937                          if ( BLE_Flag )
   \   000008EC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000008EE   0x2D00             CMP      R5,#+0
   \   000008F0   0xD104             BNE.N    ??RoadBrd_ParseString_108
   \   000008F2   0xE00E             B.N      ??RoadBrd_ParseString_109
   \                     ??RoadBrd_ParseString_74:
   \   000008F4   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
   \                     ??RoadBrd_ParseString_90: (+1)
   \   000008F8   0xF003 0xBFA7      B.W      ??RoadBrd_ParseString_27
    938                          {
    939                            strcpy( (char *)tempBffr2, "</STATUS>");
   \                     ??RoadBrd_ParseString_108: (+1)
   \   000008FC   0xF8DF 0x1834      LDR.W    R1,??RoadBrd_ParseString_49
   \   00000900   0xA80A             ADD      R0,SP,#+40
   \   00000902   0x.... 0x....      BL       strcpy
    940                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000906   0xA80A             ADD      R0,SP,#+40
   \   00000908   0x.... 0x....      BL       strlen
   \   0000090C   0xA90A             ADD      R1,SP,#+40
   \   0000090E   0x.... 0x....      BL       BGM111_Transmit
    941                          }
    942                          sprintf( (char *)tempBffr2, "     COMPLETE.\r\n" );
   \                     ??RoadBrd_ParseString_109: (+1)
   \   00000912   0xF8DF 0x1E10      LDR.W    R1,??RoadBrd_ParseString_110
   \   00000916   0xA80A             ADD      R0,SP,#+40
   \   00000918   0x.... 0x....      BL       sprintf
   \   0000091C   0xE170             B.N      ??RoadBrd_ParseString_111
    943                        }
    944                        else
    945                        {
    946                          switch( tempBffr[1] )
   \                     ??RoadBrd_ParseString_84: (+1)
   \   0000091E   0x7860             LDRB     R0,[R4, #+1]
   \   00000920   0x2830             CMP      R0,#+48
   \   00000922   0xD01F             BEQ.N    ??RoadBrd_ParseString_112
   \   00000924   0x2831             CMP      R0,#+49
   \   00000926   0xF000 0x8152      BEQ.W    ??RoadBrd_ParseString_113
   \   0000092A   0x2849             CMP      R0,#+73
   \   0000092C   0xF040 0x8168      BNE.W    ??RoadBrd_ParseString_111
    947                          {
    948          //------------------ BI Command: Initialize Cool Eye/Grid Eye Sensor
    949                            case 'I':
    950                              // Initialize Cool Eye/Grid Eye Sensor.
    951                              Status = RoadBrd_GridEyeInit();
   \                     ??RoadBrd_ParseString_114: (+1)
   \   00000930   0x.... 0x....      BL       RoadBrd_GridEyeInit
   \   00000934   0x0006             MOVS     R6,R0
    952                              // Is this a BLE Operation?
    953                              if ( BLE_Flag )
   \   00000936   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000938   0x2D00             CMP      R5,#+0
   \   0000093A   0xD00A             BEQ.N    ??RoadBrd_ParseString_115
    954                              {
    955                                // Yes...Build and Send BLE Response NOW.
    956                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   0000093C   0xF8DF 0x187C      LDR.W    R1,??RoadBrd_ParseString_51+0x4
   \   00000940   0xA80A             ADD      R0,SP,#+40
   \   00000942   0x.... 0x....      BL       strcpy
    957                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000946   0xA80A             ADD      R0,SP,#+40
   \   00000948   0x.... 0x....      BL       strlen
   \   0000094C   0xA90A             ADD      R1,SP,#+40
   \   0000094E   0x.... 0x....      BL       BGM111_Transmit
    958                              }
    959                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_115: (+1)
   \   00000952   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000954   0x2E00             CMP      R6,#+0
   \   00000956   0xD104             BNE.N    ??RoadBrd_ParseString_116
    960                              {
    961                                strcpy( (char *)tempBffr2, "Cool Eye/Grid Eye Sensor: Initialization Complete.\r\n");;
   \   00000958   0xF8DF 0x1DCC      LDR.W    R1,??RoadBrd_ParseString_110+0x4
   \   0000095C   0xA80A             ADD      R0,SP,#+40
   \   0000095E   0x.... 0x....      BL       strcpy
    962                              }
    963                              break;
   \                     ??RoadBrd_ParseString_116: (+1)
   \   00000962   0xE14D             B.N      ??RoadBrd_ParseString_111
    964          //------------------ B0 Command...Read Cool Eye/Grid Eye Values.....
    965                            case '0':
    966                              // Read Cool Eye/Grid Eye Values.....
    967                              if ( Get_DriverStates( GRIDEYE_MNTR_TASK ))
   \                     ??RoadBrd_ParseString_112: (+1)
   \   00000964   0x2005             MOVS     R0,#+5
   \   00000966   0x.... 0x....      BL       Get_DriverStates
   \   0000096A   0x2800             CMP      R0,#+0
   \   0000096C   0xD00B             BEQ.N    ??RoadBrd_ParseString_117
    968                              {
    969                                Status = RoadBrd_GridEye_ReadValues( &GridMeasure );
   \   0000096E   0xA85B             ADD      R0,SP,#+364
   \   00000970   0x.... 0x....      BL       RoadBrd_GridEye_ReadValues
   \   00000974   0x0006             MOVS     R6,R0
    970                                if (Status == HAL_OK)
   \   00000976   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000978   0x2E00             CMP      R6,#+0
   \   0000097A   0xD117             BNE.N    ??RoadBrd_ParseString_118
    971                                  Status = RoadBrd_GridEye_ReadValues_Scaled( &GridMeasureScaled );
   \   0000097C   0xA8D7             ADD      R0,SP,#+860
   \   0000097E   0x.... 0x....      BL       RoadBrd_GridEye_ReadValues_Scaled
   \   00000982   0x0006             MOVS     R6,R0
   \   00000984   0xE012             B.N      ??RoadBrd_ParseString_118
    972                              }
    973                              else if ( Get_DriverStates( COOLEYE_MNTR_TASK ))
   \                     ??RoadBrd_ParseString_117: (+1)
   \   00000986   0x2006             MOVS     R0,#+6
   \   00000988   0x.... 0x....      BL       Get_DriverStates
   \   0000098C   0x2800             CMP      R0,#+0
   \   0000098E   0xD00B             BEQ.N    ??RoadBrd_ParseString_119
    974                              {
    975                                Status = RoadBrd_CoolEye_ReadValues( &GridMeasure );
   \   00000990   0xA85B             ADD      R0,SP,#+364
   \   00000992   0x.... 0x....      BL       RoadBrd_CoolEye_ReadValues
   \   00000996   0x0006             MOVS     R6,R0
    976                                if (Status == HAL_OK)
   \   00000998   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000099A   0x2E00             CMP      R6,#+0
   \   0000099C   0xD106             BNE.N    ??RoadBrd_ParseString_118
    977                                  Status = RoadBrd_CoolEye_ReadValues_Scaled( &GridMeasureScaled );
   \   0000099E   0xA8D7             ADD      R0,SP,#+860
   \   000009A0   0x.... 0x....      BL       RoadBrd_CoolEye_ReadValues_Scaled
   \   000009A4   0x0006             MOVS     R6,R0
   \   000009A6   0xE001             B.N      ??RoadBrd_ParseString_118
    978                              }
    979                              else
    980                                Status = HAL_ERROR;
   \                     ??RoadBrd_ParseString_119: (+1)
   \   000009A8   0x2001             MOVS     R0,#+1
   \   000009AA   0x0006             MOVS     R6,R0
    981          
    982                              // Is this a BLE Operation?
    983                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_118: (+1)
   \   000009AC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000009AE   0x2D00             CMP      R5,#+0
   \   000009B0   0xD00A             BEQ.N    ??RoadBrd_ParseString_120
    984                              {
    985                                // Yes...Build and Send BLE Response NOW.
    986                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000009B2   0xF8DF 0x1808      LDR.W    R1,??RoadBrd_ParseString_51+0x4
   \   000009B6   0xA80A             ADD      R0,SP,#+40
   \   000009B8   0x.... 0x....      BL       strcpy
    987                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000009BC   0xA80A             ADD      R0,SP,#+40
   \   000009BE   0x.... 0x....      BL       strlen
   \   000009C2   0xA90A             ADD      R1,SP,#+40
   \   000009C4   0x.... 0x....      BL       BGM111_Transmit
    988                              }
    989          
    990                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_120: (+1)
   \   000009C8   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000009CA   0x2E00             CMP      R6,#+0
   \   000009CC   0xF040 0x80FE      BNE.W    ??RoadBrd_ParseString_121
    991                              {
    992                                // Send string to UART..
    993                                strcpy( (char *)tempBffr2, "Voltage Monitor/Shunt Voltage...\r\n");
   \   000009D0   0xF8DF 0x1B28      LDR.W    R1,??RoadBrd_ParseString_89+0x4
   \   000009D4   0xA80A             ADD      R0,SP,#+40
   \   000009D6   0x.... 0x....      BL       strcpy
    994          #ifdef NUCLEO
    995                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    996          #else
    997                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000009DA   0xA90A             ADD      R1,SP,#+40
   \   000009DC   0x2000             MOVS     R0,#+0
   \   000009DE   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000009E2   0x0006             MOVS     R6,R0
    998          #endif
    999                                if (Status != HAL_OK)
   \   000009E4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000009E6   0x2E00             CMP      R6,#+0
   \   000009E8   0xD003             BEQ.N    ??RoadBrd_ParseString_122
   1000                                  return Status;
   \   000009EA   0x0030             MOVS     R0,R6
   \   000009EC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000009EE   0xF003 0xBFA6      B.W      ??RoadBrd_ParseString_4
   1001                                // NOW, Build Data String..
   1002                                for (x=0; x<9; x++)
   \                     ??RoadBrd_ParseString_122: (+1)
   \   000009F2   0x2000             MOVS     R0,#+0
   \   000009F4   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_123: (+1)
   \   000009F6   0x2F09             CMP      R7,#+9
   \   000009F8   0xF280 0x80D5      BGE.W    ??RoadBrd_ParseString_124
   1003                                {
   1004                                  // Build String
   1005                                  switch(x)
   \   000009FC   0x2F00             CMP      R7,#+0
   \   000009FE   0xD00F             BEQ.N    ??RoadBrd_ParseString_125
   \   00000A00   0x2F02             CMP      R7,#+2
   \   00000A02   0xD035             BEQ.N    ??RoadBrd_ParseString_126
   \   00000A04   0xD320             BCC.N    ??RoadBrd_ParseString_127
   \   00000A06   0x2F04             CMP      R7,#+4
   \   00000A08   0xD05A             BEQ.N    ??RoadBrd_ParseString_128
   \   00000A0A   0xD345             BCC.N    ??RoadBrd_ParseString_129
   \   00000A0C   0x2F06             CMP      R7,#+6
   \   00000A0E   0xF000 0x807F      BEQ.W    ??RoadBrd_ParseString_130
   \   00000A12   0xD369             BCC.N    ??RoadBrd_ParseString_131
   \   00000A14   0x2F08             CMP      R7,#+8
   \   00000A16   0xF000 0x80A4      BEQ.W    ??RoadBrd_ParseString_132
   \   00000A1A   0xF0C0 0x808D      BCC.W    ??RoadBrd_ParseString_133
   \   00000A1E   0xE0B4             B.N      ??RoadBrd_ParseString_134
   1006                                  {
   1007                                  case 0: //Thermistor Values
   1008                                    sprintf( (char *)tempBffr2, "     Thermistor DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.Thermistor.Raw,
   1009                                            GridMeasure.Thermistor.TempC,GridMeasureScaled.Thermistor.TempC,
   1010                                            GridMeasure.Thermistor.TempF,GridMeasureScaled.Thermistor.TempF,
   1011                                            GridMeasure.Thermistor.RawC );
   \                     ??RoadBrd_ParseString_125: (+1)
   \   00000A20   0xF8BD 0x0182      LDRH     R0,[SP, #+386]
   \   00000A24   0x9003             STR      R0,[SP, #+12]
   \   00000A26   0xA8D8             ADD      R0,SP,#+864
   \   00000A28   0x1CC0             ADDS     R0,R0,#+3
   \   00000A2A   0x9002             STR      R0,[SP, #+8]
   \   00000A2C   0xA85C             ADD      R0,SP,#+368
   \   00000A2E   0x1CC0             ADDS     R0,R0,#+3
   \   00000A30   0x9001             STR      R0,[SP, #+4]
   \   00000A32   0xA8D7             ADD      R0,SP,#+860
   \   00000A34   0x9000             STR      R0,[SP, #+0]
   \   00000A36   0xAB5B             ADD      R3,SP,#+364
   \   00000A38   0xF50D 0x72BD      ADD      R2,SP,#+378
   \   00000A3C   0xF8DF 0x1B24      LDR.W    R1,??RoadBrd_ParseString_104
   \   00000A40   0xA80A             ADD      R0,SP,#+40
   \   00000A42   0x.... 0x....      BL       sprintf
   1012                                    //                        sprintf( (char *)tempBffr2, "     Thermistor DATA: %s   %s   %s   %d\r\n", GridMeasure.Thermistor.Raw,
   1013                                    //                                                                                               GridMeasure.Thermistor.TempC,
   1014                                    //                                                                                               GridMeasure.Thermistor.TempF,
   1015                                    //                                                                                               GridMeasure.Thermistor.RawC );
   1016                                    break;
   \   00000A46   0xE0A0             B.N      ??RoadBrd_ParseString_134
   1017                                  case 1: //GridEye1 Values
   1018                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye1.Raw,
   1019                                            GridMeasure.GridEye1.TempC,GridMeasureScaled.GridEye1.TempC,
   1020                                            GridMeasure.GridEye1.TempF,GridMeasureScaled.GridEye1.TempF,
   1021                                            GridMeasure.GridEye1.RawC );
   \                     ??RoadBrd_ParseString_127: (+1)
   \   00000A48   0xF8BD 0x019A      LDRH     R0,[SP, #+410]
   \   00000A4C   0x9003             STR      R0,[SP, #+12]
   \   00000A4E   0xA8DE             ADD      R0,SP,#+888
   \   00000A50   0x1CC0             ADDS     R0,R0,#+3
   \   00000A52   0x9002             STR      R0,[SP, #+8]
   \   00000A54   0xA862             ADD      R0,SP,#+392
   \   00000A56   0x1CC0             ADDS     R0,R0,#+3
   \   00000A58   0x9001             STR      R0,[SP, #+4]
   \   00000A5A   0xA8DD             ADD      R0,SP,#+884
   \   00000A5C   0x9000             STR      R0,[SP, #+0]
   \   00000A5E   0xAB61             ADD      R3,SP,#+388
   \   00000A60   0xF50D 0x72C9      ADD      R2,SP,#+402
   \   00000A64   0xF8DF 0x1B00      LDR.W    R1,??RoadBrd_ParseString_104+0x4
   \   00000A68   0xA80A             ADD      R0,SP,#+40
   \   00000A6A   0x.... 0x....      BL       sprintf
   1022                                    //                        sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye1.Raw,
   1023                                    //                                                                                               GridMeasure.GridEye1.TempC,
   1024                                    //                                                                                               GridMeasure.GridEye1.TempF,
   1025                                    //                                                                                               GridMeasure.GridEye1.RawC );
   1026                                    break;
   \   00000A6E   0xE08C             B.N      ??RoadBrd_ParseString_134
   1027                                  case 2: //GridEye2 Values
   1028                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye2.Raw,
   1029                                            GridMeasure.GridEye2.TempC,GridMeasureScaled.GridEye2.TempC,
   1030                                            GridMeasure.GridEye2.TempF,GridMeasureScaled.GridEye2.TempF,
   1031                                            GridMeasure.GridEye2.RawC );
   \                     ??RoadBrd_ParseString_126: (+1)
   \   00000A70   0xF8BD 0x01B2      LDRH     R0,[SP, #+434]
   \   00000A74   0x9003             STR      R0,[SP, #+12]
   \   00000A76   0xA8E4             ADD      R0,SP,#+912
   \   00000A78   0x1CC0             ADDS     R0,R0,#+3
   \   00000A7A   0x9002             STR      R0,[SP, #+8]
   \   00000A7C   0xA868             ADD      R0,SP,#+416
   \   00000A7E   0x1CC0             ADDS     R0,R0,#+3
   \   00000A80   0x9001             STR      R0,[SP, #+4]
   \   00000A82   0xA8E3             ADD      R0,SP,#+908
   \   00000A84   0x9000             STR      R0,[SP, #+0]
   \   00000A86   0xAB67             ADD      R3,SP,#+412
   \   00000A88   0xF50D 0x72D5      ADD      R2,SP,#+426
   \   00000A8C   0xF8DF 0x1AD8      LDR.W    R1,??RoadBrd_ParseString_104+0x4
   \   00000A90   0xA80A             ADD      R0,SP,#+40
   \   00000A92   0x.... 0x....      BL       sprintf
   1032                                    //                        sprintf( (char *)tempBffr2, "     Grid 34 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye2.Raw,
   1033                                    //                                                                                               GridMeasure.GridEye2.TempC,
   1034                                    //                                                                                               GridMeasure.GridEye2.TempF,
   1035                                    //                                                                                               GridMeasure.GridEye2.RawC );
   1036                                    break;
   \   00000A96   0xE078             B.N      ??RoadBrd_ParseString_134
   1037                                  case 3: //GridEye3 Values
   1038                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye3.Raw,
   1039                                            GridMeasure.GridEye3.TempC,GridMeasureScaled.GridEye3.TempC,
   1040                                            GridMeasure.GridEye3.TempF,GridMeasureScaled.GridEye3.TempF,
   1041                                            GridMeasure.GridEye3.RawC );
   \                     ??RoadBrd_ParseString_129: (+1)
   \   00000A98   0xF8BD 0x01CA      LDRH     R0,[SP, #+458]
   \   00000A9C   0x9003             STR      R0,[SP, #+12]
   \   00000A9E   0xA8EA             ADD      R0,SP,#+936
   \   00000AA0   0x1CC0             ADDS     R0,R0,#+3
   \   00000AA2   0x9002             STR      R0,[SP, #+8]
   \   00000AA4   0xA86E             ADD      R0,SP,#+440
   \   00000AA6   0x1CC0             ADDS     R0,R0,#+3
   \   00000AA8   0x9001             STR      R0,[SP, #+4]
   \   00000AAA   0xA8E9             ADD      R0,SP,#+932
   \   00000AAC   0x9000             STR      R0,[SP, #+0]
   \   00000AAE   0xAB6D             ADD      R3,SP,#+436
   \   00000AB0   0xF50D 0x72E1      ADD      R2,SP,#+450
   \   00000AB4   0xF8DF 0x1AB0      LDR.W    R1,??RoadBrd_ParseString_104+0x4
   \   00000AB8   0xA80A             ADD      R0,SP,#+40
   \   00000ABA   0x.... 0x....      BL       sprintf
   1042                                    //                        sprintf( (char *)tempBffr2, "     Grid 35 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye3.Raw,
   1043                                    //                                                                                               GridMeasure.GridEye3.TempC,
   1044                                    //                                                                                               GridMeasure.GridEye3.TempF,
   1045                                    //                                                                                               GridMeasure.GridEye3.RawC );
   1046                                    break;
   \   00000ABE   0xE064             B.N      ??RoadBrd_ParseString_134
   1047                                  case 4: //GridEye4 Values
   1048                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye4.Raw,
   1049                                            GridMeasure.GridEye4.TempC,GridMeasureScaled.GridEye4.TempC,
   1050                                            GridMeasure.GridEye4.TempF,GridMeasureScaled.GridEye4.TempF,
   1051                                            GridMeasure.GridEye4.RawC );
   \                     ??RoadBrd_ParseString_128: (+1)
   \   00000AC0   0xF8BD 0x01E2      LDRH     R0,[SP, #+482]
   \   00000AC4   0x9003             STR      R0,[SP, #+12]
   \   00000AC6   0xA8F0             ADD      R0,SP,#+960
   \   00000AC8   0x1CC0             ADDS     R0,R0,#+3
   \   00000ACA   0x9002             STR      R0,[SP, #+8]
   \   00000ACC   0xA874             ADD      R0,SP,#+464
   \   00000ACE   0x1CC0             ADDS     R0,R0,#+3
   \   00000AD0   0x9001             STR      R0,[SP, #+4]
   \   00000AD2   0xA8EF             ADD      R0,SP,#+956
   \   00000AD4   0x9000             STR      R0,[SP, #+0]
   \   00000AD6   0xAB73             ADD      R3,SP,#+460
   \   00000AD8   0xF50D 0x72ED      ADD      R2,SP,#+474
   \   00000ADC   0xF8DF 0x1A88      LDR.W    R1,??RoadBrd_ParseString_104+0x4
   \   00000AE0   0xA80A             ADD      R0,SP,#+40
   \   00000AE2   0x.... 0x....      BL       sprintf
   1052                                    //                        sprintf( (char *)tempBffr2, "     Grid 36 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye4.Raw,
   1053                                    //                                                                                               GridMeasure.GridEye4.TempC,
   1054                                    //                                                                                               GridMeasure.GridEye4.TempF,
   1055                                    //                                                                                               GridMeasure.GridEye4.RawC );
   1056                                    break;
   \   00000AE6   0xE050             B.N      ??RoadBrd_ParseString_134
   1057                                  case 5: //GridEye5 Values
   1058                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye5.Raw,
   1059                                            GridMeasure.GridEye5.TempC,GridMeasureScaled.GridEye5.TempC,
   1060                                            GridMeasure.GridEye5.TempF,GridMeasureScaled.GridEye5.TempF,
   1061                                            GridMeasure.GridEye5.RawC );
   \                     ??RoadBrd_ParseString_131: (+1)
   \   00000AE8   0xF8BD 0x01FA      LDRH     R0,[SP, #+506]
   \   00000AEC   0x9003             STR      R0,[SP, #+12]
   \   00000AEE   0xA8F6             ADD      R0,SP,#+984
   \   00000AF0   0x1CC0             ADDS     R0,R0,#+3
   \   00000AF2   0x9002             STR      R0,[SP, #+8]
   \   00000AF4   0xA87A             ADD      R0,SP,#+488
   \   00000AF6   0x1CC0             ADDS     R0,R0,#+3
   \   00000AF8   0x9001             STR      R0,[SP, #+4]
   \   00000AFA   0xA8F5             ADD      R0,SP,#+980
   \   00000AFC   0x9000             STR      R0,[SP, #+0]
   \   00000AFE   0xAB79             ADD      R3,SP,#+484
   \   00000B00   0xF50D 0x72F9      ADD      R2,SP,#+498
   \   00000B04   0xF8DF 0x1A60      LDR.W    R1,??RoadBrd_ParseString_104+0x4
   \   00000B08   0xA80A             ADD      R0,SP,#+40
   \   00000B0A   0x.... 0x....      BL       sprintf
   1062                                    //                        sprintf( (char *)tempBffr2, "     Grid 37 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye5.Raw,
   1063                                    //                                                                                               GridMeasure.GridEye5.TempC,
   1064                                    //                                                                                               GridMeasure.GridEye5.TempF,
   1065                                    //                                                                                               GridMeasure.GridEye5.RawC );
   1066                                    break;
   \   00000B0E   0xE03C             B.N      ??RoadBrd_ParseString_134
   1067                                  case 6: //GridEye6 Values
   1068                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye6.Raw,
   1069                                            GridMeasure.GridEye6.TempC,GridMeasureScaled.GridEye6.TempC,
   1070                                            GridMeasure.GridEye6.TempF,GridMeasureScaled.GridEye6.TempF,
   1071                                            GridMeasure.GridEye6.RawC );
   \                     ??RoadBrd_ParseString_130: (+1)
   \   00000B10   0xF8BD 0x0212      LDRH     R0,[SP, #+530]
   \   00000B14   0x9003             STR      R0,[SP, #+12]
   \   00000B16   0xA8FC             ADD      R0,SP,#+1008
   \   00000B18   0x1CC0             ADDS     R0,R0,#+3
   \   00000B1A   0x9002             STR      R0,[SP, #+8]
   \   00000B1C   0xA880             ADD      R0,SP,#+512
   \   00000B1E   0x1CC0             ADDS     R0,R0,#+3
   \   00000B20   0x9001             STR      R0,[SP, #+4]
   \   00000B22   0xA8FB             ADD      R0,SP,#+1004
   \   00000B24   0x9000             STR      R0,[SP, #+0]
   \   00000B26   0xAB7F             ADD      R3,SP,#+508
   \   00000B28   0xAA82             ADD      R2,SP,#+520
   \   00000B2A   0x1C92             ADDS     R2,R2,#+2
   \   00000B2C   0xF8DF 0x1A38      LDR.W    R1,??RoadBrd_ParseString_104+0x4
   \   00000B30   0xA80A             ADD      R0,SP,#+40
   \   00000B32   0x.... 0x....      BL       sprintf
   1072                                    //                        sprintf( (char *)tempBffr2, "     Grid 38 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye6.Raw,
   1073                                    //                                                                                               GridMeasure.GridEye6.TempC,
   1074                                    //                                                                                               GridMeasure.GridEye6.TempF,
   1075                                    //                                                                                               GridMeasure.GridEye6.RawC );
   1076                                    break;
   \   00000B36   0xE028             B.N      ??RoadBrd_ParseString_134
   1077                                  case 7: //GridEye7 Values
   1078                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye7.Raw,
   1079                                            GridMeasure.GridEye7.TempC,GridMeasureScaled.GridEye7.TempC,
   1080                                            GridMeasure.GridEye7.TempF,GridMeasureScaled.GridEye7.TempF,
   1081                                            GridMeasure.GridEye7.RawC );
   \                     ??RoadBrd_ParseString_133: (+1)
   \   00000B38   0xF8BD 0x022A      LDRH     R0,[SP, #+554]
   \   00000B3C   0x9003             STR      R0,[SP, #+12]
   \   00000B3E   0xA8FF             ADD      R0,SP,#+1020
   \   00000B40   0x300F             ADDS     R0,R0,#+15
   \   00000B42   0x9002             STR      R0,[SP, #+8]
   \   00000B44   0xA886             ADD      R0,SP,#+536
   \   00000B46   0x1CC0             ADDS     R0,R0,#+3
   \   00000B48   0x9001             STR      R0,[SP, #+4]
   \   00000B4A   0xA8FF             ADD      R0,SP,#+1020
   \   00000B4C   0x3008             ADDS     R0,R0,#+8
   \   00000B4E   0x9000             STR      R0,[SP, #+0]
   \   00000B50   0xAB85             ADD      R3,SP,#+532
   \   00000B52   0xAA88             ADD      R2,SP,#+544
   \   00000B54   0x1C92             ADDS     R2,R2,#+2
   \   00000B56   0xF8DF 0x1A10      LDR.W    R1,??RoadBrd_ParseString_104+0x4
   \   00000B5A   0xA80A             ADD      R0,SP,#+40
   \   00000B5C   0x.... 0x....      BL       sprintf
   1082                                    //                        sprintf( (char *)tempBffr2, "     Grid 39 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye7.Raw,
   1083                                    //                                                                                               GridMeasure.GridEye7.TempC,
   1084                                    //                                                                                               GridMeasure.GridEye7.TempF,
   1085                                    //                                                                                               GridMeasure.GridEye7.RawC );
   1086                                    break;
   \   00000B60   0xE013             B.N      ??RoadBrd_ParseString_134
   1087                                  case 8: //GridEye8 Values
   1088                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye8.Raw,
   1089                                            GridMeasure.GridEye8.TempC,GridMeasureScaled.GridEye8.TempC,
   1090                                            GridMeasure.GridEye8.TempF,GridMeasureScaled.GridEye8.TempF,
   1091                                            GridMeasure.GridEye8.RawC );
   \                     ??RoadBrd_ParseString_132: (+1)
   \   00000B62   0xF8BD 0x0242      LDRH     R0,[SP, #+578]
   \   00000B66   0x9003             STR      R0,[SP, #+12]
   \   00000B68   0xA8FF             ADD      R0,SP,#+1020
   \   00000B6A   0x3027             ADDS     R0,R0,#+39
   \   00000B6C   0x9002             STR      R0,[SP, #+8]
   \   00000B6E   0xA88C             ADD      R0,SP,#+560
   \   00000B70   0x1CC0             ADDS     R0,R0,#+3
   \   00000B72   0x9001             STR      R0,[SP, #+4]
   \   00000B74   0xA8FF             ADD      R0,SP,#+1020
   \   00000B76   0x3020             ADDS     R0,R0,#+32
   \   00000B78   0x9000             STR      R0,[SP, #+0]
   \   00000B7A   0xAB8B             ADD      R3,SP,#+556
   \   00000B7C   0xAA8E             ADD      R2,SP,#+568
   \   00000B7E   0x1C92             ADDS     R2,R2,#+2
   \   00000B80   0xF8DF 0x19E4      LDR.W    R1,??RoadBrd_ParseString_104+0x4
   \   00000B84   0xA80A             ADD      R0,SP,#+40
   \   00000B86   0x.... 0x....      BL       sprintf
   1092                                    //                        sprintf( (char *)tempBffr2, "     Grid 40 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye8.Raw,
   1093                                    //                                                                                               GridMeasure.GridEye8.TempC,
   1094                                    //                                                                                               GridMeasure.GridEye8.TempF,
   1095                                    //                                                                                               GridMeasure.GridEye8.RawC );
   1096                                    break;
   1097                                  } // EndSwitch(x)
   1098                                  // Now Print String.
   1099           #ifdef NUCLEO
   1100                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1101          #else
   1102                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \                     ??RoadBrd_ParseString_134: (+1)
   \   00000B8A   0xA90A             ADD      R1,SP,#+40
   \   00000B8C   0x2000             MOVS     R0,#+0
   \   00000B8E   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000B92   0x0006             MOVS     R6,R0
   1103          #endif
   1104                                  if (Status != HAL_OK)
   \   00000B94   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000B96   0x2E00             CMP      R6,#+0
   \   00000B98   0xD003             BEQ.N    ??RoadBrd_ParseString_135
   1105                                    return Status;
   \   00000B9A   0x0030             MOVS     R0,R6
   \   00000B9C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000B9E   0xF003 0xBECE      B.W      ??RoadBrd_ParseString_4
   1106                               } // EndFor(x=0; x<9; x++)
   \                     ??RoadBrd_ParseString_135: (+1)
   \   00000BA2   0x1C7F             ADDS     R7,R7,#+1
   \   00000BA4   0xE727             B.N      ??RoadBrd_ParseString_123
   1107                                sprintf( (char *)tempBffr2, "     SHNT VLTG DATA: " );
   \                     ??RoadBrd_ParseString_124: (+1)
   \   00000BA6   0xF8DF 0x1B30      LDR.W    R1,??RoadBrd_ParseString_107
   \   00000BAA   0xA80A             ADD      R0,SP,#+40
   \   00000BAC   0x.... 0x....      BL       sprintf
   1108                                strcat( (char *)tempBffr2, (char *)VMeasure.Raw );
   \   00000BB0   0xA944             ADD      R1,SP,#+272
   \   00000BB2   0xA80A             ADD      R0,SP,#+40
   \   00000BB4   0x.... 0x....      BL       strcat
   1109                                strcat( (char *)tempBffr2, "\r\n" );
   \   00000BB8   0xA1D2             ADR.N    R1,??RoadBrd_ParseString_26+0x4  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000BBA   0xA80A             ADD      R0,SP,#+40
   \   00000BBC   0x.... 0x....      BL       strcat
   1110                              } //Endif(Status == HAL_OK)
   1111                              else
   1112                                break;
   1113                              sprintf( (char *)tempBffr2, "     COMPLETE.\r\n" );
   \   00000BC0   0xF8DF 0x1B60      LDR.W    R1,??RoadBrd_ParseString_110
   \   00000BC4   0xA80A             ADD      R0,SP,#+40
   \   00000BC6   0x.... 0x....      BL       sprintf
   1114                              break;
   \   00000BCA   0xE019             B.N      ??RoadBrd_ParseString_111
   \                     ??RoadBrd_ParseString_121: (+1)
   \   00000BCC   0xE018             B.N      ??RoadBrd_ParseString_111
   1115          //------------------ B1 Command...Reset Cool Eye/Grid Eye Sensor..... 
   1116                            case '1':
   1117                              // Reset Cool Eye/Grid Eye Sensor.
   1118                              Status = RoadBrd_GridEyeReset();
   \                     ??RoadBrd_ParseString_113: (+1)
   \   00000BCE   0x.... 0x....      BL       RoadBrd_GridEyeReset
   \   00000BD2   0x0006             MOVS     R6,R0
   1119                              // Is this a BLE Operation?
   1120                              if ( BLE_Flag )
   \   00000BD4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000BD6   0x2D00             CMP      R5,#+0
   \   00000BD8   0xD00A             BEQ.N    ??RoadBrd_ParseString_136
   1121                              {
   1122                                // Yes...Build and Send BLE Response NOW.
   1123                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00000BDA   0xF8DF 0x15E0      LDR.W    R1,??RoadBrd_ParseString_51+0x4
   \   00000BDE   0xA80A             ADD      R0,SP,#+40
   \   00000BE0   0x.... 0x....      BL       strcpy
   1124                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000BE4   0xA80A             ADD      R0,SP,#+40
   \   00000BE6   0x.... 0x....      BL       strlen
   \   00000BEA   0xA90A             ADD      R1,SP,#+40
   \   00000BEC   0x.... 0x....      BL       BGM111_Transmit
   1125                              }
   1126          
   1127                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_136: (+1)
   \   00000BF0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000BF2   0x2E00             CMP      R6,#+0
   \   00000BF4   0xD104             BNE.N    ??RoadBrd_ParseString_137
   1128                              {
   1129                                strcpy( (char *)tempBffr2, "Cool Eye/Grid Eye Sensor: Reset Complete.\r\n");;
   \   00000BF6   0xF8DF 0x1DBC      LDR.W    R1,??RoadBrd_ParseString_138
   \   00000BFA   0xA80A             ADD      R0,SP,#+40
   \   00000BFC   0x.... 0x....      BL       strcpy
   1130                              }
   1131                              break;
   1132                          } //EndSwitch
   1133                        } //EndElse (Size == 1)
   1134                        break;
   \                     ??RoadBrd_ParseString_137: (+1)
   \                     ??RoadBrd_ParseString_111: (+1)
   \   00000C00   0xF003 0xBE23      B.W      ??RoadBrd_ParseString_27
   1135          //**************************************************************************************************
   1136                      case 'C':
   1137                        // Read Voltage. 
   1138          //++++++++++++++++++++++++++++++++++++++++++  Voltage Monitor Commands.
   1139                        if (Size == 1)
   \                     ??RoadBrd_ParseString_14: (+1)
   \   00000C04   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000C08   0xF1B8 0x0F01      CMP      R8,#+1
   \   00000C0C   0xD152             BNE.N    ??RoadBrd_ParseString_139
   1140                        {
   1141          //------------------ C Command       
   1142                          // Read Bus Voltage and return as 2 Byte Field.
   1143                          Status = RoadBrd_VMonitor_RdVoltage( &VMeasure );
   \   00000C0E   0xA842             ADD      R0,SP,#+264
   \   00000C10   0x.... 0x....      BL       RoadBrd_VMonitor_RdVoltage
   \   00000C14   0x0006             MOVS     R6,R0
   1144                          if (Status == HAL_OK)
   \   00000C16   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000C18   0x2E00             CMP      R6,#+0
   \   00000C1A   0xD103             BNE.N    ??RoadBrd_ParseString_140
   1145                            Status = RoadBrd_VMonitor_RdVoltage_Scaled( &VMeasureScaled );
   \   00000C1C   0xA84E             ADD      R0,SP,#+312
   \   00000C1E   0x.... 0x....      BL       RoadBrd_VMonitor_RdVoltage_Scaled
   \   00000C22   0x0006             MOVS     R6,R0
   1146                          if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_140: (+1)
   \   00000C24   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000C26   0x2E00             CMP      R6,#+0
   \   00000C28   0xD126             BNE.N    ??RoadBrd_ParseString_141
   1147                          {
   1148                            // Send string to UART..
   1149                            strcpy( (char *)tempBffr2, "Voltage Monitor/Read Bus Voltage...\r\n");
   \   00000C2A   0xF8DF 0x1DEC      LDR.W    R1,??RoadBrd_ParseString_142
   \   00000C2E   0xA80A             ADD      R0,SP,#+40
   \   00000C30   0x.... 0x....      BL       strcpy
   1150          #ifdef NUCLEO
   1151                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1152          #else
   1153                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000C34   0xA90A             ADD      R1,SP,#+40
   \   00000C36   0x2000             MOVS     R0,#+0
   \   00000C38   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000C3C   0x0006             MOVS     R6,R0
   1154          #endif
   1155                            if (Status != HAL_OK)
   \   00000C3E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000C40   0x2E00             CMP      R6,#+0
   \   00000C42   0xD003             BEQ.N    ??RoadBrd_ParseString_143
   1156                            return Status;
   \   00000C44   0x0030             MOVS     R0,R6
   \   00000C46   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000C48   0xF003 0xBE79      B.W      ??RoadBrd_ParseString_4
   1157                            // NOW, Build Data String..
   1158                            sprintf( (char *)tempBffr2, "     BUS VOLTAGE DATA: " );
   \                     ??RoadBrd_ParseString_143: (+1)
   \   00000C4C   0xF8DF 0x1DCC      LDR.W    R1,??RoadBrd_ParseString_142+0x4
   \   00000C50   0xA80A             ADD      R0,SP,#+40
   \   00000C52   0x.... 0x....      BL       sprintf
   1159                            strcat( (char *)tempBffr2, (char *)VMeasure.Raw );
   \   00000C56   0xA944             ADD      R1,SP,#+272
   \   00000C58   0xA80A             ADD      R0,SP,#+40
   \   00000C5A   0x.... 0x....      BL       strcat
   1160                            strcat( (char *)tempBffr2, "\r\n" );
   \   00000C5E   0xA1A9             ADR.N    R1,??RoadBrd_ParseString_26+0x4  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000C60   0xA80A             ADD      R0,SP,#+40
   \   00000C62   0x.... 0x....      BL       strcat
   1161                          }
   1162                          else
   1163                            break;
   1164          #ifdef NUCLEO
   1165                          Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1166          #else
   1167                          Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000C66   0xA90A             ADD      R1,SP,#+40
   \   00000C68   0x2000             MOVS     R0,#+0
   \   00000C6A   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000C6E   0x0006             MOVS     R6,R0
   1168          #endif
   1169                          if (Status != HAL_OK)
   \   00000C70   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000C72   0x2E00             CMP      R6,#+0
   \   00000C74   0xD102             BNE.N    ??RoadBrd_ParseString_144
   \   00000C76   0xE005             B.N      ??RoadBrd_ParseString_145
   \                     ??RoadBrd_ParseString_141: (+1)
   \   00000C78   0xF003 0xBDE7      B.W      ??RoadBrd_ParseString_27
   1170                            return Status;
   \                     ??RoadBrd_ParseString_144: (+1)
   \   00000C7C   0x0030             MOVS     R0,R6
   \   00000C7E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000C80   0xF003 0xBE5D      B.W      ??RoadBrd_ParseString_4
   1171                          // Is this a BLE Operation?
   1172                          if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_145: (+1)
   \   00000C84   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000C86   0x2D00             CMP      R5,#+0
   \   00000C88   0xD00C             BEQ.N    ??RoadBrd_ParseString_146
   1173                          {
   1174                            // Yes...Build and Send BLE Response NOW.
   1175                            sprintf( (char *)tempBffr2, "<STATUS>BUS_VLTG:%s/%s</STATUS>", (char *)VMeasure.Voltage, (char *)VMeasureScaled.Voltage );
   \   00000C8A   0xAB4E             ADD      R3,SP,#+312
   \   00000C8C   0xAA42             ADD      R2,SP,#+264
   \   00000C8E   0xF8DF 0x1DF8      LDR.W    R1,??RoadBrd_ParseString_147
   \   00000C92   0xA80A             ADD      R0,SP,#+40
   \   00000C94   0x.... 0x....      BL       sprintf
   1176                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000C98   0xA80A             ADD      R0,SP,#+40
   \   00000C9A   0x.... 0x....      BL       strlen
   \   00000C9E   0xA90A             ADD      R1,SP,#+40
   \   00000CA0   0x.... 0x....      BL       BGM111_Transmit
   1177                          }
   1178                          // Now calculate Bus Voltage.
   1179                          sprintf( (char *)tempBffr2, "     Bus Voltage: %s/%s\r\n", (char *)VMeasure.Voltage, (char *)VMeasureScaled.Voltage );
   \                     ??RoadBrd_ParseString_146: (+1)
   \   00000CA4   0xAB4E             ADD      R3,SP,#+312
   \   00000CA6   0xAA42             ADD      R2,SP,#+264
   \   00000CA8   0xF8DF 0x1DE0      LDR.W    R1,??RoadBrd_ParseString_147+0x4
   \   00000CAC   0xA80A             ADD      R0,SP,#+40
   \   00000CAE   0x.... 0x....      BL       sprintf
   \   00000CB2   0xE19C             B.N      ??RoadBrd_ParseString_148
   1180                        }
   1181                        else
   1182                        {
   1183                          switch( tempBffr[1] )
   \                     ??RoadBrd_ParseString_139: (+1)
   \   00000CB4   0x7860             LDRB     R0,[R4, #+1]
   \   00000CB6   0x2830             CMP      R0,#+48
   \   00000CB8   0xD024             BEQ.N    ??RoadBrd_ParseString_149
   \   00000CBA   0x2831             CMP      R0,#+49
   \   00000CBC   0xD074             BEQ.N    ??RoadBrd_ParseString_150
   \   00000CBE   0x2832             CMP      R0,#+50
   \   00000CC0   0xF000 0x80C9      BEQ.W    ??RoadBrd_ParseString_151
   \   00000CC4   0x2833             CMP      R0,#+51
   \   00000CC6   0xF000 0x8129      BEQ.W    ??RoadBrd_ParseString_152
   \   00000CCA   0x2849             CMP      R0,#+73
   \   00000CCC   0xF040 0x817C      BNE.W    ??RoadBrd_ParseString_153
   1184                          {
   1185          //------------------ CI Command       
   1186                            case 'I':
   1187                              // Initialize and load Calibration Register.
   1188                              // Read Calibration Value first.
   1189                              Status = RoadBrd_Init_VMonitor();
   \                     ??RoadBrd_ParseString_154: (+1)
   \   00000CD0   0x.... 0x....      BL       RoadBrd_Init_VMonitor
   \   00000CD4   0x0006             MOVS     R6,R0
   1190                              // Is this a BLE Operation?
   1191                              if ( BLE_Flag )
   \   00000CD6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000CD8   0x2D00             CMP      R5,#+0
   \   00000CDA   0xD00A             BEQ.N    ??RoadBrd_ParseString_155
   1192                              {
   1193                                // Yes...Build and Send BLE Response NOW.
   1194                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00000CDC   0xF8DF 0x14DC      LDR.W    R1,??RoadBrd_ParseString_51+0x4
   \   00000CE0   0xA80A             ADD      R0,SP,#+40
   \   00000CE2   0x.... 0x....      BL       strcpy
   1195                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000CE6   0xA80A             ADD      R0,SP,#+40
   \   00000CE8   0x.... 0x....      BL       strlen
   \   00000CEC   0xA90A             ADD      R1,SP,#+40
   \   00000CEE   0x.... 0x....      BL       BGM111_Transmit
   1196                              }
   1197                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_155: (+1)
   \   00000CF2   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000CF4   0x2E00             CMP      R6,#+0
   \   00000CF6   0xD104             BNE.N    ??RoadBrd_ParseString_156
   1198                              {
   1199                                strcpy( (char *)tempBffr2, "Voltage Monitor: Initialization Complete.\r\n");;
   \   00000CF8   0xF8DF 0x1DC8      LDR.W    R1,??RoadBrd_ParseString_157
   \   00000CFC   0xA80A             ADD      R0,SP,#+40
   \   00000CFE   0x.... 0x....      BL       strcpy
   1200                              }
   1201                              break;
   \                     ??RoadBrd_ParseString_156: (+1)
   \   00000D02   0xE174             B.N      ??RoadBrd_ParseString_148
   1202          //------------------ C0 Command...Read Shunt Voltage and return results.....
   1203                            case '0':
   1204                              // Read Shunt Voltage and return results.....
   1205                              Status = RoadBrd_VMonitor_RdShntVltg( &VMeasure );
   \                     ??RoadBrd_ParseString_149: (+1)
   \   00000D04   0xA842             ADD      R0,SP,#+264
   \   00000D06   0x.... 0x....      BL       RoadBrd_VMonitor_RdShntVltg
   \   00000D0A   0x0006             MOVS     R6,R0
   1206                              if (Status == HAL_OK)
   \   00000D0C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000D0E   0x2E00             CMP      R6,#+0
   \   00000D10   0xD103             BNE.N    ??RoadBrd_ParseString_158
   1207                                Status = RoadBrd_VMonitor_RdShntVltg_Scaled( &VMeasureScaled );
   \   00000D12   0xA84E             ADD      R0,SP,#+312
   \   00000D14   0x.... 0x....      BL       RoadBrd_VMonitor_RdShntVltg_Scaled
   \   00000D18   0x0006             MOVS     R6,R0
   1208                              // Is this a BLE Operation?
   1209                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_158: (+1)
   \   00000D1A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000D1C   0x2E00             CMP      R6,#+0
   \   00000D1E   0xD126             BNE.N    ??RoadBrd_ParseString_159
   1210                              {
   1211                                // Send string to UART..
   1212                                strcpy( (char *)tempBffr2, "Voltage Monitor/Shunt Voltage...\r\n");
   \   00000D20   0xF8DF 0x17D8      LDR.W    R1,??RoadBrd_ParseString_89+0x4
   \   00000D24   0xA80A             ADD      R0,SP,#+40
   \   00000D26   0x.... 0x....      BL       strcpy
   1213          #ifdef NUCLEO
   1214                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1215          #else
   1216                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000D2A   0xA90A             ADD      R1,SP,#+40
   \   00000D2C   0x2000             MOVS     R0,#+0
   \   00000D2E   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000D32   0x0006             MOVS     R6,R0
   1217          #endif
   1218                                if (Status != HAL_OK)
   \   00000D34   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000D36   0x2E00             CMP      R6,#+0
   \   00000D38   0xD003             BEQ.N    ??RoadBrd_ParseString_160
   1219                                  return Status;
   \   00000D3A   0x0030             MOVS     R0,R6
   \   00000D3C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000D3E   0xF003 0xBDFE      B.W      ??RoadBrd_ParseString_4
   1220                                // NOW, Build Data String..
   1221                                sprintf( (char *)tempBffr2, "     SHNT VLTG DATA: " );
   \                     ??RoadBrd_ParseString_160: (+1)
   \   00000D42   0xF8DF 0x1994      LDR.W    R1,??RoadBrd_ParseString_107
   \   00000D46   0xA80A             ADD      R0,SP,#+40
   \   00000D48   0x.... 0x....      BL       sprintf
   1222                                strcat( (char *)tempBffr2, (char *)VMeasure.Raw );
   \   00000D4C   0xA944             ADD      R1,SP,#+272
   \   00000D4E   0xA80A             ADD      R0,SP,#+40
   \   00000D50   0x.... 0x....      BL       strcat
   1223                                strcat( (char *)tempBffr2, "\r\n" );
   \   00000D54   0xA16B             ADR.N    R1,??RoadBrd_ParseString_26+0x4  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000D56   0xA80A             ADD      R0,SP,#+40
   \   00000D58   0x.... 0x....      BL       strcat
   1224                              }
   1225                              else
   1226                                break;
   1227          #ifdef NUCLEO
   1228                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1229          #else
   1230                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000D5C   0xA90A             ADD      R1,SP,#+40
   \   00000D5E   0x2000             MOVS     R0,#+0
   \   00000D60   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000D64   0x0006             MOVS     R6,R0
   1231          #endif
   1232                              if (Status != HAL_OK)
   \   00000D66   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000D68   0x2E00             CMP      R6,#+0
   \   00000D6A   0xD101             BNE.N    ??RoadBrd_ParseString_161
   \   00000D6C   0xE004             B.N      ??RoadBrd_ParseString_162
   \                     ??RoadBrd_ParseString_159: (+1)
   \   00000D6E   0xE13E             B.N      ??RoadBrd_ParseString_148
   1233                                return Status;
   \                     ??RoadBrd_ParseString_161: (+1)
   \   00000D70   0x0030             MOVS     R0,R6
   \   00000D72   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000D74   0xF003 0xBDE3      B.W      ??RoadBrd_ParseString_4
   1234                              // Now calculate Shunt Voltage.
   1235                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_162: (+1)
   \   00000D78   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000D7A   0x2D00             CMP      R5,#+0
   \   00000D7C   0xD00C             BEQ.N    ??RoadBrd_ParseString_163
   1236                              {
   1237                                // Yes...Build and Send BLE Response NOW.
   1238                                sprintf( (char *)tempBffr2, "<STATUS>SHNT_VLTG:%s/%s</STATUS>", (char *)VMeasure.Voltage, (char *)VMeasureScaled.Voltage );
   \   00000D7E   0xAB4E             ADD      R3,SP,#+312
   \   00000D80   0xAA42             ADD      R2,SP,#+264
   \   00000D82   0xF8DF 0x1E00      LDR.W    R1,??RoadBrd_ParseString_164
   \   00000D86   0xA80A             ADD      R0,SP,#+40
   \   00000D88   0x.... 0x....      BL       sprintf
   1239                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000D8C   0xA80A             ADD      R0,SP,#+40
   \   00000D8E   0x.... 0x....      BL       strlen
   \   00000D92   0xA90A             ADD      R1,SP,#+40
   \   00000D94   0x.... 0x....      BL       BGM111_Transmit
   1240                              }
   1241                              sprintf( (char *)tempBffr2, "     Shunt Voltage: %s/%s\r\n", (char *)VMeasure.Voltage, (char *)VMeasureScaled.Voltage );
   \                     ??RoadBrd_ParseString_163: (+1)
   \   00000D98   0xAB4E             ADD      R3,SP,#+312
   \   00000D9A   0xAA42             ADD      R2,SP,#+264
   \   00000D9C   0xF8DF 0x1DE8      LDR.W    R1,??RoadBrd_ParseString_164+0x4
   \   00000DA0   0xA80A             ADD      R0,SP,#+40
   \   00000DA2   0x.... 0x....      BL       sprintf
   1242                              break;
   \   00000DA6   0xE122             B.N      ??RoadBrd_ParseString_148
   1243          //------------------ C1 Command...Read Current and return results..... 
   1244                            case '1':
   1245                              // Read Current and return results.....
   1246                              Status = RoadBrd_VMonitor_RdCurrent( &CMeasure );
   \                     ??RoadBrd_ParseString_150: (+1)
   \   00000DA8   0xA8D1             ADD      R0,SP,#+836
   \   00000DAA   0x.... 0x....      BL       RoadBrd_VMonitor_RdCurrent
   \   00000DAE   0x0006             MOVS     R6,R0
   1247                              if (Status == HAL_OK)
   \   00000DB0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000DB2   0x2E00             CMP      R6,#+0
   \   00000DB4   0xD103             BNE.N    ??RoadBrd_ParseString_165
   1248                                Status = RoadBrd_VMonitor_RdCurrent_Scaled( &CMeasureScaled );
   \   00000DB6   0xA8CD             ADD      R0,SP,#+820
   \   00000DB8   0x.... 0x....      BL       RoadBrd_VMonitor_RdCurrent_Scaled
   \   00000DBC   0x0006             MOVS     R6,R0
   1249                              // Is this a BLE Operation?
   1250                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_165: (+1)
   \   00000DBE   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000DC0   0x2E00             CMP      R6,#+0
   \   00000DC2   0xD12B             BNE.N    ??RoadBrd_ParseString_166
   1251                              {
   1252                                // Send string to UART..
   1253                                strcpy( (char *)tempBffr2, "Voltage Monitor/Read Current...\r\n");
   \   00000DC4   0xF8DF 0x1DC4      LDR.W    R1,??RoadBrd_ParseString_164+0x8
   \   00000DC8   0xA80A             ADD      R0,SP,#+40
   \   00000DCA   0x.... 0x....      BL       strcpy
   1254          #ifdef NUCLEO
   1255                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1256          #else
   1257                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000DCE   0xA90A             ADD      R1,SP,#+40
   \   00000DD0   0x2000             MOVS     R0,#+0
   \   00000DD2   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000DD6   0x0006             MOVS     R6,R0
   1258          #endif
   1259                                if (Status != HAL_OK)
   \   00000DD8   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000DDA   0x2E00             CMP      R6,#+0
   \   00000DDC   0xD003             BEQ.N    ??RoadBrd_ParseString_167
   1260                                  return Status;
   \   00000DDE   0x0030             MOVS     R0,R6
   \   00000DE0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000DE2   0xF003 0xBDAC      B.W      ??RoadBrd_ParseString_4
   1261                                // NOW, Build Data String..
   1262                                sprintf( (char *)tempBffr2, "     CURRENT DATA: " );
   \                     ??RoadBrd_ParseString_167: (+1)
   \   00000DE6   0xF8DF 0x1DA8      LDR.W    R1,??RoadBrd_ParseString_164+0xC
   \   00000DEA   0xA80A             ADD      R0,SP,#+40
   \   00000DEC   0x.... 0x....      BL       sprintf
   1263                                strcat( (char *)tempBffr2, (char *)CMeasure.Raw );
   \   00000DF0   0xA9D3             ADD      R1,SP,#+844
   \   00000DF2   0x1C49             ADDS     R1,R1,#+1
   \   00000DF4   0xA80A             ADD      R0,SP,#+40
   \   00000DF6   0x.... 0x....      BL       strcat
   1264                                strcat( (char *)tempBffr2, "\r\n" );
   \   00000DFA   0xA142             ADR.N    R1,??RoadBrd_ParseString_26+0x4  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000DFC   0xA80A             ADD      R0,SP,#+40
   \   00000DFE   0x.... 0x....      BL       strcat
   1265                              }
   1266                              else
   1267                                break;
   1268          #ifdef NUCLEO
   1269                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1270          #else
   1271                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000E02   0xA90A             ADD      R1,SP,#+40
   \   00000E04   0x2000             MOVS     R0,#+0
   \   00000E06   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000E0A   0x0006             MOVS     R6,R0
   1272          #endif
   1273                              if (Status != HAL_OK)
   \   00000E0C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000E0E   0x2E00             CMP      R6,#+0
   \   00000E10   0xD105             BNE.N    ??RoadBrd_ParseString_168
   \   00000E12   0xE008             B.N      ??RoadBrd_ParseString_169
   \                     ??RoadBrd_ParseString_0:
   \   00000E14   0x........         DC32     Bypass
   \   00000E18   0x........         DC32     ?_0
   \                     ??RoadBrd_ParseString_166: (+1)
   \   00000E1C   0xE0E7             B.N      ??RoadBrd_ParseString_148
   1274                                return Status;
   \                     ??RoadBrd_ParseString_168: (+1)
   \   00000E1E   0x0030             MOVS     R0,R6
   \   00000E20   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000E22   0xF003 0xBD8C      B.W      ??RoadBrd_ParseString_4
   1275                              // Now calculate Current.
   1276                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_169: (+1)
   \   00000E26   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000E28   0x2D00             CMP      R5,#+0
   \   00000E2A   0xD00C             BEQ.N    ??RoadBrd_ParseString_170
   1277                              {
   1278                                // Yes...Build and Send BLE Response NOW.
   1279                                sprintf( (char *)tempBffr2, "<STATUS>SHNT_CRNT:%s/%s</STATUS>", (char *)CMeasure.Current, (char *)CMeasureScaled.Current );
   \   00000E2C   0xABCD             ADD      R3,SP,#+820
   \   00000E2E   0xAAD1             ADD      R2,SP,#+836
   \   00000E30   0xF8DF 0x1DFC      LDR.W    R1,??RoadBrd_ParseString_171+0x4
   \   00000E34   0xA80A             ADD      R0,SP,#+40
   \   00000E36   0x.... 0x....      BL       sprintf
   1280                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000E3A   0xA80A             ADD      R0,SP,#+40
   \   00000E3C   0x.... 0x....      BL       strlen
   \   00000E40   0xA90A             ADD      R1,SP,#+40
   \   00000E42   0x.... 0x....      BL       BGM111_Transmit
   1281                              }
   1282                              sprintf( (char *)tempBffr2, "     Current: %s/%s\r\n", (char *)CMeasure.Current, (char *)CMeasureScaled.Current );
   \                     ??RoadBrd_ParseString_170: (+1)
   \   00000E46   0xABCD             ADD      R3,SP,#+820
   \   00000E48   0xAAD1             ADD      R2,SP,#+836
   \   00000E4A   0xF8DF 0x1DE8      LDR.W    R1,??RoadBrd_ParseString_171+0x8
   \   00000E4E   0xA80A             ADD      R0,SP,#+40
   \   00000E50   0x.... 0x....      BL       sprintf
   1283                              break;
   \   00000E54   0xE0CB             B.N      ??RoadBrd_ParseString_148
   1284          //------------------ C2 Command...Read Power and return results.....     
   1285                            case '2':
   1286                              // Read Power and return results.....
   1287                              Status = RoadBrd_VMonitor_RdPower( &PMeasure );
   \                     ??RoadBrd_ParseString_151: (+1)
   \   00000E56   0xA8C9             ADD      R0,SP,#+804
   \   00000E58   0x.... 0x....      BL       RoadBrd_VMonitor_RdPower
   \   00000E5C   0x0006             MOVS     R6,R0
   1288                              if (Status == HAL_OK)
   \   00000E5E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000E60   0x2E00             CMP      R6,#+0
   \   00000E62   0xD103             BNE.N    ??RoadBrd_ParseString_172
   1289                                Status = RoadBrd_VMonitor_RdPower_Scaled( &PMeasureScaled );
   \   00000E64   0xA8C5             ADD      R0,SP,#+788
   \   00000E66   0x.... 0x....      BL       RoadBrd_VMonitor_RdPower_Scaled
   \   00000E6A   0x0006             MOVS     R6,R0
   1290                              // Is this a BLE Operation?
   1291                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_172: (+1)
   \   00000E6C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000E6E   0x2E00             CMP      R6,#+0
   \   00000E70   0xD129             BNE.N    ??RoadBrd_ParseString_173
   1292                              {
   1293                                // Send string to UART..
   1294                                strcpy( (char *)tempBffr2, "Voltage Monitor/Read Power...\r\n");
   \   00000E72   0xF8DF 0x1DC4      LDR.W    R1,??RoadBrd_ParseString_171+0xC
   \   00000E76   0xA80A             ADD      R0,SP,#+40
   \   00000E78   0x.... 0x....      BL       strcpy
   1295          #ifdef NUCLEO
   1296                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1297          #else
   1298                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000E7C   0xA90A             ADD      R1,SP,#+40
   \   00000E7E   0x2000             MOVS     R0,#+0
   \   00000E80   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000E84   0x0006             MOVS     R6,R0
   1299          #endif
   1300                                if (Status != HAL_OK)
   \   00000E86   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000E88   0x2E00             CMP      R6,#+0
   \   00000E8A   0xD005             BEQ.N    ??RoadBrd_ParseString_174
   1301                                  return Status;
   \   00000E8C   0x0030             MOVS     R0,R6
   \   00000E8E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000E90   0xF003 0xBD55      B.W      ??RoadBrd_ParseString_4
   \                     ??RoadBrd_ParseString_25:
   \   00000E94   0x........         DC32     ?_1
   1302                                // NOW, Build Data String..
   1303                                sprintf( (char *)tempBffr2, "     POWER DATA: " );
   \                     ??RoadBrd_ParseString_174: (+1)
   \   00000E98   0xF8DF 0x1DA0      LDR.W    R1,??RoadBrd_ParseString_171+0x10
   \   00000E9C   0xA80A             ADD      R0,SP,#+40
   \   00000E9E   0x.... 0x....      BL       sprintf
   1304                                strcat( (char *)tempBffr2, (char *)PMeasure.Raw );
   \   00000EA2   0xA9CB             ADD      R1,SP,#+812
   \   00000EA4   0x1C49             ADDS     R1,R1,#+1
   \   00000EA6   0xA80A             ADD      R0,SP,#+40
   \   00000EA8   0x.... 0x....      BL       strcat
   1305                                strcat( (char *)tempBffr2, "\r\n" );
   \   00000EAC   0xA115             ADR.N    R1,??RoadBrd_ParseString_26+0x4  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000EAE   0xA80A             ADD      R0,SP,#+40
   \   00000EB0   0x.... 0x....      BL       strcat
   1306                              }
   1307                              else
   1308                                break;
   1309          #ifdef NUCLEO
   1310                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1311          #else
   1312                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000EB4   0xA90A             ADD      R1,SP,#+40
   \   00000EB6   0x2000             MOVS     R0,#+0
   \   00000EB8   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000EBC   0x0006             MOVS     R6,R0
   1313          #endif
   1314                              if (Status != HAL_OK)
   \   00000EBE   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000EC0   0x2E00             CMP      R6,#+0
   \   00000EC2   0xD101             BNE.N    ??RoadBrd_ParseString_175
   \   00000EC4   0xE004             B.N      ??RoadBrd_ParseString_176
   \                     ??RoadBrd_ParseString_173: (+1)
   \   00000EC6   0xE092             B.N      ??RoadBrd_ParseString_148
   1315                                return Status;
   \                     ??RoadBrd_ParseString_175: (+1)
   \   00000EC8   0x0030             MOVS     R0,R6
   \   00000ECA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000ECC   0xF003 0xBD37      B.W      ??RoadBrd_ParseString_4
   1316                              // Now calculate Power.
   1317                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_176: (+1)
   \   00000ED0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000ED2   0x2D00             CMP      R5,#+0
   \   00000ED4   0xD00C             BEQ.N    ??RoadBrd_ParseString_177
   1318                              {
   1319                                // Yes...Build and Send BLE Response NOW.
   1320                                sprintf( (char *)tempBffr2, "<STATUS>POWER:%s/%s</STATUS>", (char *)PMeasure.Power, (char *)PMeasureScaled.Power );
   \   00000ED6   0xABC5             ADD      R3,SP,#+788
   \   00000ED8   0xAAC9             ADD      R2,SP,#+804
   \   00000EDA   0xF8DF 0x1D64      LDR.W    R1,??RoadBrd_ParseString_171+0x14
   \   00000EDE   0xA80A             ADD      R0,SP,#+40
   \   00000EE0   0x.... 0x....      BL       sprintf
   1321                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000EE4   0xA80A             ADD      R0,SP,#+40
   \   00000EE6   0x.... 0x....      BL       strlen
   \   00000EEA   0xA90A             ADD      R1,SP,#+40
   \   00000EEC   0x.... 0x....      BL       BGM111_Transmit
   1322                              }
   1323                              sprintf( (char *)tempBffr2, "     Power: %s/%s\r\n", (char *)PMeasure.Power, (char *)PMeasureScaled.Power );
   \                     ??RoadBrd_ParseString_177: (+1)
   \   00000EF0   0xABC5             ADD      R3,SP,#+788
   \   00000EF2   0xAAC9             ADD      R2,SP,#+804
   \   00000EF4   0xF8DF 0x1D4C      LDR.W    R1,??RoadBrd_ParseString_171+0x18
   \   00000EF8   0xA80A             ADD      R0,SP,#+40
   \   00000EFA   0x.... 0x....      BL       sprintf
   1324                              break;
   \   00000EFE   0xE076             B.N      ??RoadBrd_ParseString_148
   \                     ??RoadBrd_ParseString_26:
   \   00000F00   0x........         DC32     ?_2
   \   00000F04   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
   \   00000F08   0x........         DC32     ?_3
   \   00000F0C   0x........         DC32     ?_4
   \   00000F10   0x........         DC32     ?_5
   \   00000F14   0x........         DC32     ?_7
   \   00000F18   0x........         DC32     ?_8
   1325          //------------------ C3 Command...Read Bus Voltage and return results.....
   1326                            case '3':
   1327                              // Read Bus Voltage and return results.....
   1328                              Status = RoadBrd_VMonitor_RdVoltage( &VMeasure );
   \                     ??RoadBrd_ParseString_152: (+1)
   \   00000F1C   0xA842             ADD      R0,SP,#+264
   \   00000F1E   0x.... 0x....      BL       RoadBrd_VMonitor_RdVoltage
   \   00000F22   0x0006             MOVS     R6,R0
   1329                              if (Status == HAL_OK)
   \   00000F24   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000F26   0x2E00             CMP      R6,#+0
   \   00000F28   0xD103             BNE.N    ??RoadBrd_ParseString_178
   1330                                Status = RoadBrd_VMonitor_RdVoltage_Scaled( &VMeasureScaled );
   \   00000F2A   0xA84E             ADD      R0,SP,#+312
   \   00000F2C   0x.... 0x....      BL       RoadBrd_VMonitor_RdVoltage_Scaled
   \   00000F30   0x0006             MOVS     R6,R0
   1331                                
   1332                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_178: (+1)
   \   00000F32   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000F34   0x2E00             CMP      R6,#+0
   \   00000F36   0xD126             BNE.N    ??RoadBrd_ParseString_179
   1333                              {
   1334                                // Send string to UART..
   1335                                strcpy( (char *)tempBffr2, "Voltage Monitor/Read Bus Voltage...\r\n");
   \   00000F38   0xF8DF 0x1ADC      LDR.W    R1,??RoadBrd_ParseString_142
   \   00000F3C   0xA80A             ADD      R0,SP,#+40
   \   00000F3E   0x.... 0x....      BL       strcpy
   1336          #ifdef NUCLEO
   1337                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1338          #else
   1339                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000F42   0xA90A             ADD      R1,SP,#+40
   \   00000F44   0x2000             MOVS     R0,#+0
   \   00000F46   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000F4A   0x0006             MOVS     R6,R0
   1340          #endif
   1341                                if (Status != HAL_OK)
   \   00000F4C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000F4E   0x2E00             CMP      R6,#+0
   \   00000F50   0xD003             BEQ.N    ??RoadBrd_ParseString_180
   1342                                  return Status;
   \   00000F52   0x0030             MOVS     R0,R6
   \   00000F54   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000F56   0xF003 0xBCF2      B.W      ??RoadBrd_ParseString_4
   1343                                // NOW, Build Data String..
   1344                                sprintf( (char *)tempBffr2, "     BUS VOLTAGE DATA: " );
   \                     ??RoadBrd_ParseString_180: (+1)
   \   00000F5A   0xF8DF 0x1AC0      LDR.W    R1,??RoadBrd_ParseString_142+0x4
   \   00000F5E   0xA80A             ADD      R0,SP,#+40
   \   00000F60   0x.... 0x....      BL       sprintf
   1345                                strcat( (char *)tempBffr2, (char *)VMeasure.Raw );
   \   00000F64   0xA944             ADD      R1,SP,#+272
   \   00000F66   0xA80A             ADD      R0,SP,#+40
   \   00000F68   0x.... 0x....      BL       strcat
   1346                                strcat( (char *)tempBffr2, "\r\n" );
   \   00000F6C   0xA1BF             ADR.N    R1,??RoadBrd_ParseString_64+0xC  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000F6E   0xA80A             ADD      R0,SP,#+40
   \   00000F70   0x.... 0x....      BL       strcat
   1347                              }
   1348                              else
   1349                                break;
   1350          #ifdef NUCLEO
   1351                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1352          #else
   1353                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000F74   0xA90A             ADD      R1,SP,#+40
   \   00000F76   0x2000             MOVS     R0,#+0
   \   00000F78   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000F7C   0x0006             MOVS     R6,R0
   1354          #endif
   1355                              if (Status != HAL_OK)
   \   00000F7E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000F80   0x2E00             CMP      R6,#+0
   \   00000F82   0xD101             BNE.N    ??RoadBrd_ParseString_181
   \   00000F84   0xE004             B.N      ??RoadBrd_ParseString_182
   \                     ??RoadBrd_ParseString_179: (+1)
   \   00000F86   0xE032             B.N      ??RoadBrd_ParseString_148
   1356                                return Status;
   \                     ??RoadBrd_ParseString_181: (+1)
   \   00000F88   0x0030             MOVS     R0,R6
   \   00000F8A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000F8C   0xF003 0xBCD7      B.W      ??RoadBrd_ParseString_4
   1357                              // Now calculate Bus Voltage.
   1358                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_182: (+1)
   \   00000F90   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000F92   0x2D00             CMP      R5,#+0
   \   00000F94   0xD00C             BEQ.N    ??RoadBrd_ParseString_183
   1359                              {
   1360                                // Yes...Build and Send BLE Response NOW.
   1361                                sprintf( (char *)tempBffr2, "<STATUS>BUS_VLTG:%s/%s</STATUS>", (char *)VMeasure.Voltage, (char *)VMeasureScaled.Voltage );
   \   00000F96   0xAB4E             ADD      R3,SP,#+312
   \   00000F98   0xAA42             ADD      R2,SP,#+264
   \   00000F9A   0xF8DF 0x1AEC      LDR.W    R1,??RoadBrd_ParseString_147
   \   00000F9E   0xA80A             ADD      R0,SP,#+40
   \   00000FA0   0x.... 0x....      BL       sprintf
   1362                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000FA4   0xA80A             ADD      R0,SP,#+40
   \   00000FA6   0x.... 0x....      BL       strlen
   \   00000FAA   0xA90A             ADD      R1,SP,#+40
   \   00000FAC   0x.... 0x....      BL       BGM111_Transmit
   1363                              }
   1364                              sprintf( (char *)tempBffr2, "     Bus Voltage: %s/%s\r\n", (char *)VMeasure.Voltage, (char *)VMeasureScaled.Voltage );
   \                     ??RoadBrd_ParseString_183: (+1)
   \   00000FB0   0xAB4E             ADD      R3,SP,#+312
   \   00000FB2   0xAA42             ADD      R2,SP,#+264
   \   00000FB4   0xF8DF 0x1AD4      LDR.W    R1,??RoadBrd_ParseString_147+0x4
   \   00000FB8   0xA80A             ADD      R0,SP,#+40
   \   00000FBA   0x.... 0x....      BL       sprintf
   1365                              break;
   \   00000FBE   0xE016             B.N      ??RoadBrd_ParseString_148
   \                     ??RoadBrd_ParseString_33:
   \   00000FC0   0x........         DC32     ?_9
   \   00000FC4   0x........         DC32     ?_10
   1366                            default:
   1367                              // Is this a BLE Operation?
   1368                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_153: (+1)
   \   00000FC8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000FCA   0x2D00             CMP      R5,#+0
   \   00000FCC   0xD00A             BEQ.N    ??RoadBrd_ParseString_184
   1369                              {
   1370                                // Yes...Build and Send BLE Response NOW.
   1371                                strcpy( (char *)tempBffr2, "<STATUS>CMD_C_SYNTAX</STATUS>");
   \   00000FCE   0xF8DF 0x1DDC      LDR.W    R1,??RoadBrd_ParseString_185
   \   00000FD2   0xA80A             ADD      R0,SP,#+40
   \   00000FD4   0x.... 0x....      BL       strcpy
   1372                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000FD8   0xA80A             ADD      R0,SP,#+40
   \   00000FDA   0x.... 0x....      BL       strlen
   \   00000FDE   0xA90A             ADD      R1,SP,#+40
   \   00000FE0   0x.... 0x....      BL       BGM111_Transmit
   1373                              }
   1374                              strcpy( (char *)tempBffr2, "ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_184: (+1)
   \   00000FE4   0xF8DF 0x147C      LDR.W    R1,??RoadBrd_ParseString_82+0x8
   \   00000FE8   0xA80A             ADD      R0,SP,#+40
   \   00000FEA   0x.... 0x....      BL       strcpy
   1375                              break;
   1376                          } //EndSwitch
   1377                        } //EndElse (Size == 1)
   1378                        break;
   \                     ??RoadBrd_ParseString_148: (+1)
   \   00000FEE   0xF003 0xBC2C      B.W      ??RoadBrd_ParseString_27
   \   00000FF2   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_36:
   \   00000FF4   0x........         DC32     ?_11
   \   00000FF8   0x........         DC32     ?_12
   \   00000FFC   0x........         DC32     ?_13
   \   00001000   0x........         DC32     ?_14
   \   00001004   0x........         DC32     ?_15
   \   00001008   0x........         DC32     ?_16
   1379          //**************************************************************************************************
   1380                      case 'D':
   1381                        // Read Humidity. 
   1382                        if (Size == 1)
   \                     ??RoadBrd_ParseString_15: (+1)
   \   0000100C   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00001010   0xF1B8 0x0F01      CMP      R8,#+1
   \   00001014   0xD16C             BNE.N    ??RoadBrd_ParseString_186
   1383                        {
   1384          //------------------ D Command: Read Humidity Values      
   1385                          // Read Humidity Sensor sensor and return Humidity results....
   1386                          Status = RoadBrd_Humidity_ReadHumidity( &HMeasure );
   \   00001016   0xA849             ADD      R0,SP,#+292
   \   00001018   0x.... 0x....      BL       RoadBrd_Humidity_ReadHumidity
   \   0000101C   0x0006             MOVS     R6,R0
   1387                          if (Status == HAL_OK)
   \   0000101E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001020   0x2E00             CMP      R6,#+0
   \   00001022   0xD104             BNE.N    ??RoadBrd_ParseString_187
   1388                            Status = RoadBrd_Humidity_ReadHumidity_Scaled( &HMeasureScaled );
   \   00001024   0xF50D 0x608A      ADD      R0,SP,#+1104
   \   00001028   0x.... 0x....      BL       RoadBrd_Humidity_ReadHumidity_Scaled
   \   0000102C   0x0006             MOVS     R6,R0
   1389                          // Is this a BLE Operation?
   1390                          if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_187: (+1)
   \   0000102E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001030   0x2E00             CMP      R6,#+0
   \   00001032   0xD126             BNE.N    ??RoadBrd_ParseString_188
   1391                          {
   1392                            // Send string to UART..
   1393                            strcpy( (char *)tempBffr2, "Humidity SENSOR...\r\n");
   \   00001034   0xF8DF 0x1D78      LDR.W    R1,??RoadBrd_ParseString_185+0x4
   \   00001038   0xA80A             ADD      R0,SP,#+40
   \   0000103A   0x.... 0x....      BL       strcpy
   1394          #ifdef NUCLEO
   1395                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1396          #else
   1397                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000103E   0xA90A             ADD      R1,SP,#+40
   \   00001040   0x2000             MOVS     R0,#+0
   \   00001042   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001046   0x0006             MOVS     R6,R0
   1398          #endif
   1399                            if (Status != HAL_OK)
   \   00001048   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000104A   0x2E00             CMP      R6,#+0
   \   0000104C   0xD003             BEQ.N    ??RoadBrd_ParseString_189
   1400                              return Status;
   \   0000104E   0x0030             MOVS     R0,R6
   \   00001050   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001052   0xF003 0xBC74      B.W      ??RoadBrd_ParseString_4
   1401                            // NOW, Build Data String..
   1402                            sprintf( (char *)tempBffr2, "     Humidity DATA: " );
   \                     ??RoadBrd_ParseString_189: (+1)
   \   00001056   0xF8DF 0x1DFC      LDR.W    R1,??RoadBrd_ParseString_190
   \   0000105A   0xA80A             ADD      R0,SP,#+40
   \   0000105C   0x.... 0x....      BL       sprintf
   1403                            strcat( (char *)tempBffr2, (char *)HMeasure.HRaw );
   \   00001060   0xA94B             ADD      R1,SP,#+300
   \   00001062   0xA80A             ADD      R0,SP,#+40
   \   00001064   0x.... 0x....      BL       strcat
   1404                            strcat( (char *)tempBffr2, "\r\n" );
   \   00001068   0xA180             ADR.N    R1,??RoadBrd_ParseString_64+0xC  ;; 0x0D, 0x0A, 0x00, 0x00
   \   0000106A   0xA80A             ADD      R0,SP,#+40
   \   0000106C   0x.... 0x....      BL       strcat
   1405                          }
   1406                          else
   1407                            break;
   1408          #ifdef NUCLEO
   1409                          Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1410          #else
   1411                          Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00001070   0xA90A             ADD      R1,SP,#+40
   \   00001072   0x2000             MOVS     R0,#+0
   \   00001074   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001078   0x0006             MOVS     R6,R0
   1412          #endif
   1413                          if (Status != HAL_OK)
   \   0000107A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000107C   0x2E00             CMP      R6,#+0
   \   0000107E   0xD102             BNE.N    ??RoadBrd_ParseString_191
   \   00001080   0xE005             B.N      ??RoadBrd_ParseString_192
   \                     ??RoadBrd_ParseString_188: (+1)
   \   00001082   0xF003 0xBBE2      B.W      ??RoadBrd_ParseString_27
   1414                            return Status;
   \                     ??RoadBrd_ParseString_191: (+1)
   \   00001086   0x0030             MOVS     R0,R6
   \   00001088   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000108A   0xF003 0xBC58      B.W      ??RoadBrd_ParseString_4
   1415                          // NOW, Build Data String..
   1416                          sprintf( (char *)tempBffr2, "     Humidity DATA(Decimal): %d\r\n", HMeasure.HRawC );
   \                     ??RoadBrd_ParseString_192: (+1)
   \   0000108E   0xF8BD 0x2134      LDRH     R2,[SP, #+308]
   \   00001092   0xF8DF 0x1DC4      LDR.W    R1,??RoadBrd_ParseString_190+0x4
   \   00001096   0xA80A             ADD      R0,SP,#+40
   \   00001098   0x.... 0x....      BL       sprintf
   1417          #ifdef NUCLEO
   1418                          Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1419          #else
   1420                          Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000109C   0xA90A             ADD      R1,SP,#+40
   \   0000109E   0x2000             MOVS     R0,#+0
   \   000010A0   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000010A4   0x0006             MOVS     R6,R0
   1421          #endif
   1422                          if (Status != HAL_OK)
   \   000010A6   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000010A8   0x2E00             CMP      R6,#+0
   \   000010AA   0xD003             BEQ.N    ??RoadBrd_ParseString_193
   1423                            return Status;
   \   000010AC   0x0030             MOVS     R0,R6
   \   000010AE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000010B0   0xF003 0xBC45      B.W      ??RoadBrd_ParseString_4
   1424                          // Now calculate Celcius and Farenheit Temp.
   1425                          if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_193: (+1)
   \   000010B4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000010B6   0x2D00             CMP      R5,#+0
   \   000010B8   0xD00D             BEQ.N    ??RoadBrd_ParseString_194
   1426                          {
   1427                            // Yes...Build and Send BLE Response NOW.
   1428                            sprintf( (char *)tempBffr2, "<STATUS>HUMIDITY:%s/%s</STATUS>", (char *)HMeasure.Humidity, (char *)HMeasureScaled.Humidity );
   \   000010BA   0xF50D 0x638A      ADD      R3,SP,#+1104
   \   000010BE   0xAA49             ADD      R2,SP,#+292
   \   000010C0   0xF8DF 0x1D98      LDR.W    R1,??RoadBrd_ParseString_190+0x8
   \   000010C4   0xA80A             ADD      R0,SP,#+40
   \   000010C6   0x.... 0x....      BL       sprintf
   1429                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000010CA   0xA80A             ADD      R0,SP,#+40
   \   000010CC   0x.... 0x....      BL       strlen
   \   000010D0   0xA90A             ADD      R1,SP,#+40
   \   000010D2   0x.... 0x....      BL       BGM111_Transmit
   1430                          }
   1431                          sprintf( (char *)tempBffr2, "     Humidity: %s/%s\r\n", (char *)HMeasure.Humidity, (char *)HMeasureScaled.Humidity );
   \                     ??RoadBrd_ParseString_194: (+1)
   \   000010D6   0xF50D 0x638A      ADD      R3,SP,#+1104
   \   000010DA   0xAA49             ADD      R2,SP,#+292
   \   000010DC   0xF8DF 0x1D80      LDR.W    R1,??RoadBrd_ParseString_190+0xC
   \   000010E0   0xA80A             ADD      R0,SP,#+40
   \   000010E2   0x.... 0x....      BL       sprintf
   \   000010E6   0xE10D             B.N      ??RoadBrd_ParseString_195
   \                     ??RoadBrd_ParseString_41:
   \   000010E8   0x........         DC32     ?_17
   \   000010EC   0x........         DC32     ?_19
   1432                        }
   1433                        else
   1434                        {
   1435                          switch( tempBffr[1] )
   \                     ??RoadBrd_ParseString_186: (+1)
   \   000010F0   0x7860             LDRB     R0,[R4, #+1]
   \   000010F2   0x2830             CMP      R0,#+48
   \   000010F4   0xD024             BEQ.N    ??RoadBrd_ParseString_196
   \   000010F6   0x2831             CMP      R0,#+49
   \   000010F8   0xF000 0x808C      BEQ.W    ??RoadBrd_ParseString_197
   \   000010FC   0x2849             CMP      R0,#+73
   \   000010FE   0xF040 0x8101      BNE.W    ??RoadBrd_ParseString_195
   1436                          {
   1437          //------------------ DI Command: Initialize Humidity Sensor
   1438                            case 'I':
   1439                              // Initialize Humidity Sensor.
   1440                              Status = RoadBrd_HumidityInit();
   \                     ??RoadBrd_ParseString_198: (+1)
   \   00001102   0x.... 0x....      BL       RoadBrd_HumidityInit
   \   00001106   0x0006             MOVS     R6,R0
   1441                              // Is this a BLE Operation?
   1442                              if ( BLE_Flag )
   \   00001108   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000110A   0x2D00             CMP      R5,#+0
   \   0000110C   0xD009             BEQ.N    ??RoadBrd_ParseString_199
   1443                              {
   1444                                // Yes...Build and Send BLE Response NOW.
   1445                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   0000110E   0x492B             LDR.N    R1,??RoadBrd_ParseString_51+0x4
   \   00001110   0xA80A             ADD      R0,SP,#+40
   \   00001112   0x.... 0x....      BL       strcpy
   1446                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001116   0xA80A             ADD      R0,SP,#+40
   \   00001118   0x.... 0x....      BL       strlen
   \   0000111C   0xA90A             ADD      R1,SP,#+40
   \   0000111E   0x.... 0x....      BL       BGM111_Transmit
   1447                              }
   1448          
   1449                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_199: (+1)
   \   00001122   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001124   0x2E00             CMP      R6,#+0
   \   00001126   0xD104             BNE.N    ??RoadBrd_ParseString_200
   1450                              {
   1451                                strcpy( (char *)tempBffr2, "Humidity Sensor: Initialization Complete.\r\n");;
   \   00001128   0xF8DF 0x1D38      LDR.W    R1,??RoadBrd_ParseString_190+0x10
   \   0000112C   0xA80A             ADD      R0,SP,#+40
   \   0000112E   0x.... 0x....      BL       strcpy
   1452                              }
   1453                              break;
   \                     ??RoadBrd_ParseString_200: (+1)
   \   00001132   0xE0E7             B.N      ??RoadBrd_ParseString_195
   \                     ??RoadBrd_ParseString_49:
   \   00001134   0x........         DC32     ?_20
   \   00001138   0x........         DC32     ?_21
   \   0000113C   0x........         DC32     ?_22
   1454          //------------------ D0 Command...Read Humidity Values.....
   1455                            case '0':
   1456                              // Read Humidity Sensor sensor and return Humidity results....
   1457                              Status = RoadBrd_Humidity_ReadHumidity( &HMeasure );
   \                     ??RoadBrd_ParseString_196: (+1)
   \   00001140   0xA849             ADD      R0,SP,#+292
   \   00001142   0x.... 0x....      BL       RoadBrd_Humidity_ReadHumidity
   \   00001146   0x0006             MOVS     R6,R0
   1458                              // Is this a BLE Operation?
   1459                              if ( BLE_Flag )
   \   00001148   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000114A   0x2D00             CMP      R5,#+0
   \   0000114C   0xD009             BEQ.N    ??RoadBrd_ParseString_201
   1460                              {
   1461                                // Yes...Build and Send BLE Response NOW.
   1462                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   0000114E   0x491B             LDR.N    R1,??RoadBrd_ParseString_51+0x4
   \   00001150   0xA80A             ADD      R0,SP,#+40
   \   00001152   0x.... 0x....      BL       strcpy
   1463                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001156   0xA80A             ADD      R0,SP,#+40
   \   00001158   0x.... 0x....      BL       strlen
   \   0000115C   0xA90A             ADD      R1,SP,#+40
   \   0000115E   0x.... 0x....      BL       BGM111_Transmit
   1464                              }
   1465          
   1466                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_201: (+1)
   \   00001162   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001164   0x2E00             CMP      R6,#+0
   \   00001166   0xD12F             BNE.N    ??RoadBrd_ParseString_202
   1467                              {
   1468                                // Send string to UART..
   1469                                strcpy( (char *)tempBffr2, "Humidity SENSOR...\r\n");
   \   00001168   0xF8DF 0x1C44      LDR.W    R1,??RoadBrd_ParseString_185+0x4
   \   0000116C   0xA80A             ADD      R0,SP,#+40
   \   0000116E   0x.... 0x....      BL       strcpy
   1470          #ifdef NUCLEO
   1471                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1472          #else
   1473                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00001172   0xA90A             ADD      R1,SP,#+40
   \   00001174   0x2000             MOVS     R0,#+0
   \   00001176   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000117A   0x0006             MOVS     R6,R0
   1474          #endif
   1475                                if (Status != HAL_OK)
   \   0000117C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000117E   0x2E00             CMP      R6,#+0
   \   00001180   0xD003             BEQ.N    ??RoadBrd_ParseString_203
   1476                                  return Status;
   \   00001182   0x0030             MOVS     R0,R6
   \   00001184   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001186   0xF003 0xBBDA      B.W      ??RoadBrd_ParseString_4
   1477                                // NOW, Build Data String..
   1478                                sprintf( (char *)tempBffr2, "     Humidity DATA: " );
   \                     ??RoadBrd_ParseString_203: (+1)
   \   0000118A   0xF8DF 0x1CC8      LDR.W    R1,??RoadBrd_ParseString_190
   \   0000118E   0xA80A             ADD      R0,SP,#+40
   \   00001190   0x.... 0x....      BL       sprintf
   1479                                strcat( (char *)tempBffr2, (char *)HMeasure.HRaw );
   \   00001194   0xA94B             ADD      R1,SP,#+300
   \   00001196   0xA80A             ADD      R0,SP,#+40
   \   00001198   0x.... 0x....      BL       strcat
   1480                                strcat( (char *)tempBffr2, "\r\n" );
   \   0000119C   0xA133             ADR.N    R1,??RoadBrd_ParseString_64+0xC  ;; 0x0D, 0x0A, 0x00, 0x00
   \   0000119E   0xA80A             ADD      R0,SP,#+40
   \   000011A0   0x.... 0x....      BL       strcat
   1481                              }
   1482                              else
   1483                                break;
   1484          #ifdef NUCLEO
   1485                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1486          #else
   1487                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000011A4   0xA90A             ADD      R1,SP,#+40
   \   000011A6   0x2000             MOVS     R0,#+0
   \   000011A8   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000011AC   0x0006             MOVS     R6,R0
   1488          #endif
   1489                              if (Status != HAL_OK)
   \   000011AE   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000011B0   0x2E00             CMP      R6,#+0
   \   000011B2   0xD10A             BNE.N    ??RoadBrd_ParseString_204
   \   000011B4   0xE00D             B.N      ??RoadBrd_ParseString_205
   \   000011B6   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_51:
   \   000011B8   0x........         DC32     ?_23
   \   000011BC   0x........         DC32     ?_24
   \   000011C0   0x........         DC32     ?_25
   \   000011C4   0x........         DC32     ?_26
   \                     ??RoadBrd_ParseString_202: (+1)
   \   000011C8   0xE09C             B.N      ??RoadBrd_ParseString_195
   1490                                return Status;
   \                     ??RoadBrd_ParseString_204: (+1)
   \   000011CA   0x0030             MOVS     R0,R6
   \   000011CC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000011CE   0xF003 0xBBB6      B.W      ??RoadBrd_ParseString_4
   1491                              // NOW, Build Data String..
   1492                              sprintf( (char *)tempBffr2, "     Humidity DATA(Decimal): %d\r\n", HMeasure.HRawC );
   \                     ??RoadBrd_ParseString_205: (+1)
   \   000011D2   0xF8BD 0x2134      LDRH     R2,[SP, #+308]
   \   000011D6   0xF8DF 0x1C80      LDR.W    R1,??RoadBrd_ParseString_190+0x4
   \   000011DA   0xA80A             ADD      R0,SP,#+40
   \   000011DC   0x.... 0x....      BL       sprintf
   1493          #ifdef NUCLEO
   1494                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1495          #else
   1496                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000011E0   0xA90A             ADD      R1,SP,#+40
   \   000011E2   0x2000             MOVS     R0,#+0
   \   000011E4   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000011E8   0x0006             MOVS     R6,R0
   1497          #endif
   1498                              if (Status != HAL_OK)
   \   000011EA   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000011EC   0x2E00             CMP      R6,#+0
   \   000011EE   0xD003             BEQ.N    ??RoadBrd_ParseString_206
   1499                                return Status;
   \   000011F0   0x0030             MOVS     R0,R6
   \   000011F2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000011F4   0xF003 0xBBA3      B.W      ??RoadBrd_ParseString_4
   1500                              // Now calculate Humidity.
   1501                              sprintf( (char *)tempBffr2, "     Humidity: " );
   \                     ??RoadBrd_ParseString_206: (+1)
   \   000011F8   0xF8DF 0x1DC8      LDR.W    R1,??RoadBrd_ParseString_207
   \   000011FC   0xA80A             ADD      R0,SP,#+40
   \   000011FE   0x.... 0x....      BL       sprintf
   1502                              strcat( (char *)tempBffr2, (char *)HMeasure.Humidity );
   \   00001202   0xA949             ADD      R1,SP,#+292
   \   00001204   0xA80A             ADD      R0,SP,#+40
   \   00001206   0x.... 0x....      BL       strcat
   1503                              strcat( (char *)tempBffr2, "\r\n" );
   \   0000120A   0xA118             ADR.N    R1,??RoadBrd_ParseString_64+0xC  ;; 0x0D, 0x0A, 0x00, 0x00
   \   0000120C   0xA80A             ADD      R0,SP,#+40
   \   0000120E   0x.... 0x....      BL       strcat
   1504                              break;
   \   00001212   0xE077             B.N      ??RoadBrd_ParseString_195
   1505          //------------------ D1 Command...Read Temperature Values..... 
   1506                            case '1':
   1507                              // Read Humidity Sensor sensor and return Temperature results....
   1508                              Status = RoadBrd_Humidity_ReadTemperature( &TMeasure );
   \                     ??RoadBrd_ParseString_197: (+1)
   \   00001214   0xA83C             ADD      R0,SP,#+240
   \   00001216   0x.... 0x....      BL       RoadBrd_Humidity_ReadTemperature
   \   0000121A   0x0006             MOVS     R6,R0
   1509                              // Is this a BLE Operation?
   1510                              if ( BLE_Flag )
   \   0000121C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000121E   0x2D00             CMP      R5,#+0
   \   00001220   0xD00A             BEQ.N    ??RoadBrd_ParseString_208
   1511                              {
   1512                                // Yes...Build and Send BLE Response NOW.
   1513                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001222   0xF8DF 0x1DA4      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   00001226   0xA80A             ADD      R0,SP,#+40
   \   00001228   0x.... 0x....      BL       strcpy
   1514                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000122C   0xA80A             ADD      R0,SP,#+40
   \   0000122E   0x.... 0x....      BL       strlen
   \   00001232   0xA90A             ADD      R1,SP,#+40
   \   00001234   0x.... 0x....      BL       BGM111_Transmit
   1515                              }
   1516          
   1517                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_208: (+1)
   \   00001238   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000123A   0x2E00             CMP      R6,#+0
   \   0000123C   0xD136             BNE.N    ??RoadBrd_ParseString_209
   1518                              {
   1519                                // Send string to UART..
   1520                                strcpy( (char *)tempBffr2, "Humidity SENSOR...\r\n");
   \   0000123E   0xF8DF 0x1B70      LDR.W    R1,??RoadBrd_ParseString_185+0x4
   \   00001242   0xA80A             ADD      R0,SP,#+40
   \   00001244   0x.... 0x....      BL       strcpy
   1521          #ifdef NUCLEO
   1522                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1523          #else
   1524                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00001248   0xA90A             ADD      R1,SP,#+40
   \   0000124A   0x2000             MOVS     R0,#+0
   \   0000124C   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001250   0x0006             MOVS     R6,R0
   1525          #endif
   1526                                if (Status != HAL_OK)
   \   00001252   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001254   0x2E00             CMP      R6,#+0
   \   00001256   0xD013             BEQ.N    ??RoadBrd_ParseString_210
   1527                                  return Status;
   \   00001258   0x0030             MOVS     R0,R6
   \   0000125A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000125C   0xF003 0xBB6F      B.W      ??RoadBrd_ParseString_4
   \                     ??RoadBrd_ParseString_64:
   \   00001260   0x........         DC32     ?_27
   \   00001264   0x........         DC32     ?_28
   \   00001268   0x........         DC32     ?_29
   \   0000126C   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
   \   00001270   0x........         DC32     ?_30
   \   00001274   0x........         DC32     ?_31
   \   00001278   0x........         DC32     ?_32
   \   0000127C   0x........         DC32     ?_33
   1528                                // NOW, Build Data String..
   1529                                sprintf( (char *)tempBffr2, "     TEMP DATA: " );
   \                     ??RoadBrd_ParseString_210: (+1)
   \   00001280   0x4937             LDR.N    R1,??RoadBrd_ParseString_72+0x4
   \   00001282   0xA80A             ADD      R0,SP,#+40
   \   00001284   0x.... 0x....      BL       sprintf
   1530                                strcat( (char *)tempBffr2, (char *)TMeasure.Raw );
   \   00001288   0xF10D 0x01FE      ADD      R1,SP,#+254
   \   0000128C   0xA80A             ADD      R0,SP,#+40
   \   0000128E   0x.... 0x....      BL       strcat
   1531                                strcat( (char *)tempBffr2, "\r\n" );
   \   00001292   0xA1B6             ADR.N    R1,??RoadBrd_ParseString_104+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001294   0xA80A             ADD      R0,SP,#+40
   \   00001296   0x.... 0x....      BL       strcat
   1532                              }
   1533                              else
   1534                                break;
   1535          #ifdef NUCLEO
   1536                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1537          #else
   1538                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000129A   0xA90A             ADD      R1,SP,#+40
   \   0000129C   0x2000             MOVS     R0,#+0
   \   0000129E   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000012A2   0x0006             MOVS     R6,R0
   1539          #endif
   1540                              if (Status != HAL_OK)
   \   000012A4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000012A6   0x2E00             CMP      R6,#+0
   \   000012A8   0xD101             BNE.N    ??RoadBrd_ParseString_211
   \   000012AA   0xE004             B.N      ??RoadBrd_ParseString_212
   \                     ??RoadBrd_ParseString_209: (+1)
   \   000012AC   0xE02A             B.N      ??RoadBrd_ParseString_195
   1541                                return Status;
   \                     ??RoadBrd_ParseString_211: (+1)
   \   000012AE   0x0030             MOVS     R0,R6
   \   000012B0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000012B2   0xF003 0xBB44      B.W      ??RoadBrd_ParseString_4
   1542                              // NOW, Build Data String..
   1543                              sprintf( (char *)tempBffr2, "     TEMP DATA(Decimal): %d\r\n", TMeasure.RawC );
   \                     ??RoadBrd_ParseString_212: (+1)
   \   000012B6   0xF8BD 0x2106      LDRH     R2,[SP, #+262]
   \   000012BA   0x492A             LDR.N    R1,??RoadBrd_ParseString_72+0x8
   \   000012BC   0xA80A             ADD      R0,SP,#+40
   \   000012BE   0x.... 0x....      BL       sprintf
   1544          #ifdef NUCLEO
   1545                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1546          #else
   1547                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000012C2   0xA90A             ADD      R1,SP,#+40
   \   000012C4   0x2000             MOVS     R0,#+0
   \   000012C6   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000012CA   0x0006             MOVS     R6,R0
   1548          #endif
   1549                              if (Status != HAL_OK)
   \   000012CC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000012CE   0x2E00             CMP      R6,#+0
   \   000012D0   0xD003             BEQ.N    ??RoadBrd_ParseString_213
   1550                                return Status;
   \   000012D2   0x0030             MOVS     R0,R6
   \   000012D4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000012D6   0xF003 0xBB32      B.W      ??RoadBrd_ParseString_4
   1551                              // Now calculate Celcius and Farenheit Temp.
   1552                              sprintf( (char *)tempBffr2, "     TempC: " );
   \                     ??RoadBrd_ParseString_213: (+1)
   \   000012DA   0x494B             LDR.N    R1,??RoadBrd_ParseString_79
   \   000012DC   0xA80A             ADD      R0,SP,#+40
   \   000012DE   0x.... 0x....      BL       sprintf
   1553                              strcat( (char *)tempBffr2, (char *)TMeasure.TempC );
   \   000012E2   0xA93C             ADD      R1,SP,#+240
   \   000012E4   0xA80A             ADD      R0,SP,#+40
   \   000012E6   0x.... 0x....      BL       strcat
   1554                              strcat( (char *)tempBffr2, "     TempF: " );
   \   000012EA   0x4948             LDR.N    R1,??RoadBrd_ParseString_79+0x4
   \   000012EC   0xA80A             ADD      R0,SP,#+40
   \   000012EE   0x.... 0x....      BL       strcat
   1555                              strcat( (char *)tempBffr2, (char *)TMeasure.TempF );
   \   000012F2   0xF10D 0x01F7      ADD      R1,SP,#+247
   \   000012F6   0xA80A             ADD      R0,SP,#+40
   \   000012F8   0x.... 0x....      BL       strcat
   1556                              strcat( (char *)tempBffr2, "\r\n" );
   \   000012FC   0xA19B             ADR.N    R1,??RoadBrd_ParseString_104+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   000012FE   0xA80A             ADD      R0,SP,#+40
   \   00001300   0x.... 0x....      BL       strcat
   1557                              break;
   1558                          } //EndSwitch
   1559                        } //EndElse (Size == 1)
   1560                        break;
   \                     ??RoadBrd_ParseString_195: (+1)
   \   00001304   0xF003 0xBAA1      B.W      ??RoadBrd_ParseString_27
   1561          //**************************************************************************************************
   1562                      case 'E':
   1563                        // Read Temp and Pressure. 
   1564                        // Is this a BLE Operation?
   1565                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_16: (+1)
   \   00001308   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000130A   0x2D00             CMP      R5,#+0
   \   0000130C   0xD00A             BEQ.N    ??RoadBrd_ParseString_214
   1566                        {
   1567                          // Yes...Build and Send BLE Response NOW.
   1568                          strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   0000130E   0xF8DF 0x1CB8      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   00001312   0xA80A             ADD      R0,SP,#+40
   \   00001314   0x.... 0x....      BL       strcpy
   1569                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001318   0xA80A             ADD      R0,SP,#+40
   \   0000131A   0x.... 0x....      BL       strlen
   \   0000131E   0xA90A             ADD      R1,SP,#+40
   \   00001320   0x.... 0x....      BL       BGM111_Transmit
   1570                        }
   1571                        
   1572                        strcpy( (char *)tempBffr2, "TBD: Read Temp and Pressure NOT IMPLEMENTED\r\n");
   \                     ??RoadBrd_ParseString_214: (+1)
   \   00001324   0xF8DF 0x1D80      LDR.W    R1,??RoadBrd_ParseString_215
   \   00001328   0xA80A             ADD      R0,SP,#+40
   \   0000132A   0x.... 0x....      BL       strcpy
   1573                        break;
   \   0000132E   0xF003 0xBA8C      B.W      ??RoadBrd_ParseString_27
   1574          //**************************************************************************************************
   1575                      case 'F':
   1576                        // NO ACTION. 
   1577                        // Is this a BLE Operation?
   1578                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_17: (+1)
   \   00001332   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001334   0x2D00             CMP      R5,#+0
   \   00001336   0xD00A             BEQ.N    ??RoadBrd_ParseString_216
   1579                        {
   1580                          // Yes...Build and Send BLE Response NOW.
   1581                          strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001338   0xF8DF 0x1C8C      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   0000133C   0xA80A             ADD      R0,SP,#+40
   \   0000133E   0x.... 0x....      BL       strcpy
   1582                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001342   0xA80A             ADD      R0,SP,#+40
   \   00001344   0x.... 0x....      BL       strlen
   \   00001348   0xA90A             ADD      R1,SP,#+40
   \   0000134A   0x.... 0x....      BL       BGM111_Transmit
   1583                        }
   1584                        
   1585                        strcpy( (char *)tempBffr2, "NO Action...(0x00).\r\n");
   \                     ??RoadBrd_ParseString_216: (+1)
   \   0000134E   0xF8DF 0x1D5C      LDR.W    R1,??RoadBrd_ParseString_215+0x4
   \   00001352   0xA80A             ADD      R0,SP,#+40
   \   00001354   0x.... 0x....      BL       strcpy
   1586                        break;
   \   00001358   0xF003 0xBA77      B.W      ??RoadBrd_ParseString_27
   \                     ??RoadBrd_ParseString_72:
   \   0000135C   0x........         DC32     ?_34
   \   00001360   0x........         DC32     ?_35
   \   00001364   0x........         DC32     ?_36
   1587          //**************************************************************************************************
   1588                      case 'G':
   1589                        // Read Temperature sensor and return results....Temperature Sensor U10(PCT2075GVJ).  Addr: 0x94
   1590                        Status = RoadBrd_ReadTemp( &TMeasure );
   \                     ??RoadBrd_ParseString_18: (+1)
   \   00001368   0xA83C             ADD      R0,SP,#+240
   \   0000136A   0x.... 0x....      BL       RoadBrd_ReadTemp
   \   0000136E   0x0006             MOVS     R6,R0
   1591                        if (Status == HAL_OK)
   \   00001370   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001372   0x2E00             CMP      R6,#+0
   \   00001374   0xD103             BNE.N    ??RoadBrd_ParseString_217
   1592                          Status = RoadBrd_ReadTemp_Scaled( &TMeasureScaled );
   \   00001376   0xA8BF             ADD      R0,SP,#+764
   \   00001378   0x.... 0x....      BL       RoadBrd_ReadTemp_Scaled
   \   0000137C   0x0006             MOVS     R6,R0
   1593                        if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_217: (+1)
   \   0000137E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001380   0x2E00             CMP      R6,#+0
   \   00001382   0xD127             BNE.N    ??RoadBrd_ParseString_218
   1594                        {
   1595                          // Send string to UART..
   1596                          strcpy( (char *)tempBffr2, "TEMP SENSOR...\r\n");
   \   00001384   0xF8DF 0x1D28      LDR.W    R1,??RoadBrd_ParseString_215+0x8
   \   00001388   0xA80A             ADD      R0,SP,#+40
   \   0000138A   0x.... 0x....      BL       strcpy
   1597          #ifdef NUCLEO
   1598                          Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1599          #else
   1600                          Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000138E   0xA90A             ADD      R1,SP,#+40
   \   00001390   0x2000             MOVS     R0,#+0
   \   00001392   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001396   0x0006             MOVS     R6,R0
   1601          #endif
   1602                          if (Status != HAL_OK)
   \   00001398   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000139A   0x2E00             CMP      R6,#+0
   \   0000139C   0xD003             BEQ.N    ??RoadBrd_ParseString_219
   1603                            return Status;
   \   0000139E   0x0030             MOVS     R0,R6
   \   000013A0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000013A2   0xF003 0xBACC      B.W      ??RoadBrd_ParseString_4
   1604                          // NOW, Build Data String..
   1605                          sprintf( (char *)tempBffr2, "     TEMP DATA: " );
   \                     ??RoadBrd_ParseString_219: (+1)
   \   000013A6   0xF8DF 0x1D0C      LDR.W    R1,??RoadBrd_ParseString_215+0xC
   \   000013AA   0xA80A             ADD      R0,SP,#+40
   \   000013AC   0x.... 0x....      BL       sprintf
   1606                          strcat( (char *)tempBffr2, (char *)TMeasure.Raw );
   \   000013B0   0xF10D 0x01FE      ADD      R1,SP,#+254
   \   000013B4   0xA80A             ADD      R0,SP,#+40
   \   000013B6   0x.... 0x....      BL       strcat
   1607                          strcat( (char *)tempBffr2, "\r\n" );
   \   000013BA   0xA16C             ADR.N    R1,??RoadBrd_ParseString_104+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   000013BC   0xA80A             ADD      R0,SP,#+40
   \   000013BE   0x.... 0x....      BL       strcat
   1608                        }
   1609                        else
   1610                          break;
   1611          #ifdef NUCLEO
   1612                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1613          #else
   1614                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000013C2   0xA90A             ADD      R1,SP,#+40
   \   000013C4   0x2000             MOVS     R0,#+0
   \   000013C6   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000013CA   0x0006             MOVS     R6,R0
   1615          #endif
   1616                        if (Status != HAL_OK)
   \   000013CC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000013CE   0x2E00             CMP      R6,#+0
   \   000013D0   0xD102             BNE.N    ??RoadBrd_ParseString_220
   \   000013D2   0xE005             B.N      ??RoadBrd_ParseString_221
   \                     ??RoadBrd_ParseString_218: (+1)
   \   000013D4   0xF003 0xBA39      B.W      ??RoadBrd_ParseString_27
   1617                          return Status;
   \                     ??RoadBrd_ParseString_220: (+1)
   \   000013D8   0x0030             MOVS     R0,R6
   \   000013DA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000013DC   0xF003 0xBAAF      B.W      ??RoadBrd_ParseString_4
   1618                        // NOW, Build Data String..
   1619                        sprintf( (char *)tempBffr2, "     TEMP DATA(Decimal): %d\r\n", TMeasure.RawC );
   \                     ??RoadBrd_ParseString_221: (+1)
   \   000013E0   0xF8BD 0x2106      LDRH     R2,[SP, #+262]
   \   000013E4   0xF8DF 0x1DF0      LDR.W    R1,??RoadBrd_ParseString_222
   \   000013E8   0xA80A             ADD      R0,SP,#+40
   \   000013EA   0x.... 0x....      BL       sprintf
   1620          #ifdef NUCLEO
   1621                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1622          #else
   1623                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000013EE   0xA90A             ADD      R1,SP,#+40
   \   000013F0   0x2000             MOVS     R0,#+0
   \   000013F2   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000013F6   0x0006             MOVS     R6,R0
   1624          #endif
   1625                        if (Status != HAL_OK)
   \   000013F8   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000013FA   0x2E00             CMP      R6,#+0
   \   000013FC   0xD008             BEQ.N    ??RoadBrd_ParseString_223
   1626                          return Status;
   \   000013FE   0x0030             MOVS     R0,R6
   \   00001400   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001402   0xF003 0xBA9C      B.W      ??RoadBrd_ParseString_4
   \   00001406   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_79:
   \   00001408   0x........         DC32     ?_37
   \   0000140C   0x........         DC32     ?_38
   1627                        // Is this a BLE Operation?
   1628                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_223: (+1)
   \   00001410   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001412   0x2D00             CMP      R5,#+0
   \   00001414   0xD012             BEQ.N    ??RoadBrd_ParseString_224
   1629                        {
   1630                          // Yes...Build and Send BLE Response NOW.
   1631                          sprintf( (char *)tempBffr2, "<STATUS>TEMPC:%s/%s//TEMPF:%s/%s</STATUS>", 
   1632                                  (char *)TMeasure.TempC, 
   1633                                  (char *)TMeasureScaled.TempC,
   1634                                  (char *)TMeasure.TempF, 
   1635                                  (char *)TMeasureScaled.TempF);
   \   00001416   0xA8C0             ADD      R0,SP,#+768
   \   00001418   0x1CC0             ADDS     R0,R0,#+3
   \   0000141A   0x9001             STR      R0,[SP, #+4]
   \   0000141C   0xF10D 0x00F7      ADD      R0,SP,#+247
   \   00001420   0x9000             STR      R0,[SP, #+0]
   \   00001422   0xABBF             ADD      R3,SP,#+764
   \   00001424   0xAA3C             ADD      R2,SP,#+240
   \   00001426   0xF8DF 0x1DE0      LDR.W    R1,??RoadBrd_ParseString_225
   \   0000142A   0xA80A             ADD      R0,SP,#+40
   \   0000142C   0x.... 0x....      BL       sprintf
   1636                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001430   0xA80A             ADD      R0,SP,#+40
   \   00001432   0x.... 0x....      BL       strlen
   \   00001436   0xA90A             ADD      R1,SP,#+40
   \   00001438   0x.... 0x....      BL       BGM111_Transmit
   1637                        }
   1638                        
   1639                        // Now calculate Celcius and Farenheit Temp.
   1640                        sprintf( (char *)tempBffr2, "     TempC: %s/%s     TempF: %s/%s\r\n", 
   1641                                (char *)TMeasure.TempC, 
   1642                                (char *)TMeasureScaled.TempC,
   1643                                (char *)TMeasure.TempF, 
   1644                                (char *)TMeasureScaled.TempF);
   \                     ??RoadBrd_ParseString_224: (+1)
   \   0000143C   0xA8C0             ADD      R0,SP,#+768
   \   0000143E   0x1CC0             ADDS     R0,R0,#+3
   \   00001440   0x9001             STR      R0,[SP, #+4]
   \   00001442   0xF10D 0x00F7      ADD      R0,SP,#+247
   \   00001446   0x9000             STR      R0,[SP, #+0]
   \   00001448   0xABBF             ADD      R3,SP,#+764
   \   0000144A   0xAA3C             ADD      R2,SP,#+240
   \   0000144C   0xF8DF 0x1DE8      LDR.W    R1,??RoadBrd_ParseString_226
   \   00001450   0xA80A             ADD      R0,SP,#+40
   \   00001452   0x.... 0x....      BL       sprintf
   1645                        break;
   \   00001456   0xF003 0xB9F8      B.W      ??RoadBrd_ParseString_27
   \   0000145A   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_82:
   \   0000145C   0x........         DC32     ?_39
   \   00001460   0x........         DC32     ?_40
   \   00001464   0x........         DC32     ?_41
   1646          //**************************************************************************************************
   1647                      case 'H':
   1648                        // RGB Color Light Sensor U15(ISL91250).  Addr: 0x88
   1649                        if (Size == 1)
   \                     ??RoadBrd_ParseString_19: (+1)
   \   00001468   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000146C   0xF1B8 0x0F01      CMP      R8,#+1
   \   00001470   0xF040 0x8080      BNE.W    ??RoadBrd_ParseString_227
   1650                        {
   1651          //------------------ H Command...Read RGB Values and Return as 3 (2 Byte Fields)....REDmsb,REDlsb,GREENmsb,GREENlsb,BLUEmsb,BLUElsb.....     
   1652                          // 1. Time to send Command and collect status.
   1653                          Status = RoadBrd_RGBReadValues( &RGBValues );
   \   00001474   0xA8B5             ADD      R0,SP,#+724
   \   00001476   0x.... 0x....      BL       RoadBrd_RGBReadValues
   \   0000147A   0x0006             MOVS     R6,R0
   1654                          if (Status == HAL_OK)
   \   0000147C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000147E   0x2E00             CMP      R6,#+0
   \   00001480   0xD176             BNE.N    ??RoadBrd_ParseString_228
   1655                          {
   1656                            // Send string to UART..
   1657                            strcpy( (char *)tempBffr2, "RGB Color Light Sensor...\r\n");
   \   00001482   0xF8DF 0x1DE4      LDR.W    R1,??RoadBrd_ParseString_229
   \   00001486   0xA80A             ADD      R0,SP,#+40
   \   00001488   0x.... 0x....      BL       strcpy
   1658          #ifdef NUCLEO
   1659                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1660          #else
   1661                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000148C   0xA90A             ADD      R1,SP,#+40
   \   0000148E   0x2000             MOVS     R0,#+0
   \   00001490   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001494   0x0006             MOVS     R6,R0
   1662          #endif
   1663                            if (Status != HAL_OK)
   \   00001496   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001498   0x2E00             CMP      R6,#+0
   \   0000149A   0xD003             BEQ.N    ??RoadBrd_ParseString_230
   1664                              return Status;
   \   0000149C   0x0030             MOVS     R0,R6
   \   0000149E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000014A0   0xF003 0xBA4D      B.W      ??RoadBrd_ParseString_4
   1665                            // NOW, Build Data String..
   1666                            sprintf( (char *)tempBffr2, " RGB(REDmsb,REDlsb,GREENmsb,GREENlsb,BLUEmsb,BLUElsb)\r\n" );
   \                     ??RoadBrd_ParseString_230: (+1)
   \   000014A4   0xF8DF 0x1DF0      LDR.W    R1,??RoadBrd_ParseString_231
   \   000014A8   0xA80A             ADD      R0,SP,#+40
   \   000014AA   0x.... 0x....      BL       sprintf
   1667          #ifdef NUCLEO
   1668                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1669          #else
   1670                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000014AE   0xA90A             ADD      R1,SP,#+40
   \   000014B0   0x2000             MOVS     R0,#+0
   \   000014B2   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000014B6   0x0006             MOVS     R6,R0
   1671          #endif
   1672                            if (Status != HAL_OK)
   \   000014B8   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000014BA   0x2E00             CMP      R6,#+0
   \   000014BC   0xD003             BEQ.N    ??RoadBrd_ParseString_232
   1673                              return Status;
   \   000014BE   0x0030             MOVS     R0,R6
   \   000014C0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000014C2   0xF003 0xBA3C      B.W      ??RoadBrd_ParseString_4
   1674                            strcpy( (char *)tempBffr2, "       DATA: ");
   \                     ??RoadBrd_ParseString_232: (+1)
   \   000014C6   0xF8DF 0x1DD4      LDR.W    R1,??RoadBrd_ParseString_231+0x4
   \   000014CA   0xA80A             ADD      R0,SP,#+40
   \   000014CC   0x.... 0x....      BL       strcpy
   1675                            strcat( (char *)tempBffr2, (char *)RGBValues.Raw );
   \   000014D0   0xA9BB             ADD      R1,SP,#+748
   \   000014D2   0xA80A             ADD      R0,SP,#+40
   \   000014D4   0x.... 0x....      BL       strcat
   1676                            strcat( (char *)tempBffr2, "\r\n" );
   \   000014D8   0xA124             ADR.N    R1,??RoadBrd_ParseString_104+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   000014DA   0xA80A             ADD      R0,SP,#+40
   \   000014DC   0x.... 0x....      BL       strcat
   1677          #ifdef NUCLEO
   1678                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1679          #else
   1680                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000014E0   0xA90A             ADD      R1,SP,#+40
   \   000014E2   0x2000             MOVS     R0,#+0
   \   000014E4   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000014E8   0x0006             MOVS     R6,R0
   1681          #endif
   1682                            if (Status != HAL_OK)
   \   000014EA   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000014EC   0x2E00             CMP      R6,#+0
   \   000014EE   0xD007             BEQ.N    ??RoadBrd_ParseString_233
   1683                              return Status;
   \   000014F0   0x0030             MOVS     R0,R6
   \   000014F2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000014F4   0xF003 0xBA23      B.W      ??RoadBrd_ParseString_4
   \                     ??RoadBrd_ParseString_89:
   \   000014F8   0x........         DC32     ?_42
   \   000014FC   0x........         DC32     ?_43
   1684                            // Is this a BLE Operation?
   1685                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_233: (+1)
   \   00001500   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001502   0x2D00             CMP      R5,#+0
   \   00001504   0xD00E             BEQ.N    ??RoadBrd_ParseString_234
   1686                            {
   1687                              // Yes...Build and Send BLE Response NOW.
   1688                              sprintf( (char *)tempBffr2, "<STATUS>RED:%s/GREEN:%s/BLUE:%s</STATUS>", 
   1689                                      (char *)RGBValues.Red, 
   1690                                      (char *)RGBValues.Green,
   1691                                      (char *)RGBValues.Blue);
   \   00001506   0xA8B9             ADD      R0,SP,#+740
   \   00001508   0x9000             STR      R0,[SP, #+0]
   \   0000150A   0xABB7             ADD      R3,SP,#+732
   \   0000150C   0xAAB5             ADD      R2,SP,#+724
   \   0000150E   0xF8DF 0x1DDC      LDR.W    R1,??RoadBrd_ParseString_235
   \   00001512   0xA80A             ADD      R0,SP,#+40
   \   00001514   0x.... 0x....      BL       sprintf
   1692                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001518   0xA80A             ADD      R0,SP,#+40
   \   0000151A   0x.... 0x....      BL       strlen
   \   0000151E   0xA90A             ADD      R1,SP,#+40
   \   00001520   0x.... 0x....      BL       BGM111_Transmit
   1693                            }
   1694                            
   1695                            // Now DisplayEach Value Calculated.
   1696                            strcpy( (char *)tempBffr2, "    Red: ");
   \                     ??RoadBrd_ParseString_234: (+1)
   \   00001524   0xF8DF 0x1DC8      LDR.W    R1,??RoadBrd_ParseString_235+0x4
   \   00001528   0xA80A             ADD      R0,SP,#+40
   \   0000152A   0x.... 0x....      BL       strcpy
   1697                            strcat( (char *)tempBffr2, (char *)RGBValues.Red );
   \   0000152E   0xA9B5             ADD      R1,SP,#+724
   \   00001530   0xA80A             ADD      R0,SP,#+40
   \   00001532   0x.... 0x....      BL       strcat
   1698                            strcat( (char *)tempBffr2, "    Green: ");
   \   00001536   0xF8DF 0x1DBC      LDR.W    R1,??RoadBrd_ParseString_235+0x8
   \   0000153A   0xA80A             ADD      R0,SP,#+40
   \   0000153C   0x.... 0x....      BL       strcat
   1699                            strcat( (char *)tempBffr2, (char *)RGBValues.Green );
   \   00001540   0xA9B7             ADD      R1,SP,#+732
   \   00001542   0xA80A             ADD      R0,SP,#+40
   \   00001544   0x.... 0x....      BL       strcat
   1700                            strcat( (char *)tempBffr2, "    Blue: ");
   \   00001548   0xF8DF 0x1DE0      LDR.W    R1,??RoadBrd_ParseString_236
   \   0000154C   0xA80A             ADD      R0,SP,#+40
   \   0000154E   0x.... 0x....      BL       strcat
   1701                            strcat( (char *)tempBffr2, (char *)RGBValues.Blue );
   \   00001552   0xA9B9             ADD      R1,SP,#+740
   \   00001554   0xA80A             ADD      R0,SP,#+40
   \   00001556   0x.... 0x....      BL       strcat
   1702                            strcat( (char *)tempBffr2, "\r\n" );
   \   0000155A   0xA104             ADR.N    R1,??RoadBrd_ParseString_104+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   0000155C   0xA80A             ADD      R0,SP,#+40
   \   0000155E   0x.... 0x....      BL       strcat
   \   00001562   0xE263             B.N      ??RoadBrd_ParseString_237
   \                     ??RoadBrd_ParseString_104:
   \   00001564   0x........         DC32     ?_44
   \   00001568   0x........         DC32     ?_45
   \   0000156C   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
   1703                          }
   1704                          else
   1705                            break;
   \                     ??RoadBrd_ParseString_228: (+1)
   \   00001570   0xF003 0xB96B      B.W      ??RoadBrd_ParseString_27
   1706                        }
   1707                        else
   1708                        {
   1709                          switch( tempBffr[1] )
   \                     ??RoadBrd_ParseString_227: (+1)
   \   00001574   0x7860             LDRB     R0,[R4, #+1]
   \   00001576   0x2830             CMP      R0,#+48
   \   00001578   0xF000 0x8161      BEQ.W    ??RoadBrd_ParseString_238
   \   0000157C   0x2831             CMP      R0,#+49
   \   0000157E   0xF000 0x81CF      BEQ.W    ??RoadBrd_ParseString_239
   \   00001582   0x2832             CMP      R0,#+50
   \   00001584   0xF000 0x81FC      BEQ.W    ??RoadBrd_ParseString_240
   \   00001588   0x2833             CMP      R0,#+51
   \   0000158A   0xF000 0x8216      BEQ.W    ??RoadBrd_ParseString_241
   \   0000158E   0x2849             CMP      R0,#+73
   \   00001590   0xF040 0x8247      BNE.W    ??RoadBrd_ParseString_242
   1710                          {
   1711          //------------------ HI Command...Initialize RGB Color Light Sensor.....     
   1712                            case 'I':
   1713                              if (Size == 2)
   \                     ??RoadBrd_ParseString_243: (+1)
   \   00001594   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00001598   0xF1B8 0x0F02      CMP      R8,#+2
   \   0000159C   0xD11A             BNE.N    ??RoadBrd_ParseString_244
   1714                              {
   1715                                // This is the default init. Assume Default Parms and write them.
   1716                                Status = RoadBrd_RGBInit();
   \   0000159E   0x.... 0x....      BL       RoadBrd_RGBInit
   \   000015A2   0x0006             MOVS     R6,R0
   1717          
   1718                                // Is this a BLE Operation?
   1719                                if ( BLE_Flag )
   \   000015A4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000015A6   0x2D00             CMP      R5,#+0
   \   000015A8   0xD00A             BEQ.N    ??RoadBrd_ParseString_245
   1720                                {
   1721                                  // Yes...Build and Send BLE Response NOW.
   1722                                  strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000015AA   0xF8DF 0x1A1C      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   000015AE   0xA80A             ADD      R0,SP,#+40
   \   000015B0   0x.... 0x....      BL       strcpy
   1723                                  BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000015B4   0xA80A             ADD      R0,SP,#+40
   \   000015B6   0x.... 0x....      BL       strlen
   \   000015BA   0xA90A             ADD      R1,SP,#+40
   \   000015BC   0x.... 0x....      BL       BGM111_Transmit
   1724                                }
   1725                                
   1726                                if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_245: (+1)
   \   000015C0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000015C2   0x2E00             CMP      R6,#+0
   \   000015C4   0xF040 0x813A      BNE.W    ??RoadBrd_ParseString_246
   1727                                {
   1728                                  strcpy( (char *)tempBffr2, "RGB Color Light Sensor: Initialization Complete with DEFAULT Values.\r\n");;
   \   000015C8   0xF8DF 0x1D64      LDR.W    R1,??RoadBrd_ParseString_236+0x4
   \   000015CC   0xA80A             ADD      R0,SP,#+40
   \   000015CE   0x.... 0x....      BL       strcpy
   \   000015D2   0xE133             B.N      ??RoadBrd_ParseString_246
   1729                                }
   1730                                
   1731                              }
   1732                              else
   1733                              {
   1734                                // Is this a BLE Operation?
   1735                                if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_244: (+1)
   \   000015D4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000015D6   0x2D00             CMP      R5,#+0
   \   000015D8   0xD00A             BEQ.N    ??RoadBrd_ParseString_247
   1736                                {
   1737                                  // Yes...Build and Send BLE Response NOW.
   1738                                  strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000015DA   0xF8DF 0x19EC      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   000015DE   0xA80A             ADD      R0,SP,#+40
   \   000015E0   0x.... 0x....      BL       strcpy
   1739                                  BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000015E4   0xA80A             ADD      R0,SP,#+40
   \   000015E6   0x.... 0x....      BL       strlen
   \   000015EA   0xA90A             ADD      R1,SP,#+40
   \   000015EC   0x.... 0x....      BL       BGM111_Transmit
   1740                                }
   1741                                
   1742                                // This is the Parameter init. Will have to verify all parameters first.
   1743                                if ( Size != 29 )
   \                     ??RoadBrd_ParseString_247: (+1)
   \   000015F0   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000015F4   0xF1B8 0x0F1D      CMP      R8,#+29
   \   000015F8   0xD005             BEQ.N    ??RoadBrd_ParseString_248
   1744                                {
   1745                                  strcpy( (char *)tempBffr2, "RGB Color Light Sensor: SYNTAX Error. Parameters are not correct.\r\n");;
   \   000015FA   0xF8DF 0x1DD0      LDR.W    R1,??RoadBrd_ParseString_249
   \   000015FE   0xA80A             ADD      R0,SP,#+40
   \   00001600   0x.... 0x....      BL       strcpy
   \   00001604   0xE11A             B.N      ??RoadBrd_ParseString_246
   1746                                }
   1747                                else
   1748                                {
   1749                                  // Step 1. Validate format.
   1750                                  if( (tempBffr[2]!=':') ||
   1751                                      (tempBffr[5]!='.') || 
   1752                                      (tempBffr[8]!='.') || 
   1753                                      (tempBffr[11]!='.') || 
   1754                                      (tempBffr[14]!='.') || 
   1755                                      (tempBffr[17]!='.') || 
   1756                                      (tempBffr[20]!='.') || 
   1757                                      (tempBffr[23]!='.') || 
   1758                                      (tempBffr[26]!='.') )
   \                     ??RoadBrd_ParseString_248: (+1)
   \   00001606   0x78A0             LDRB     R0,[R4, #+2]
   \   00001608   0x283A             CMP      R0,#+58
   \   0000160A   0xD117             BNE.N    ??RoadBrd_ParseString_250
   \   0000160C   0x7960             LDRB     R0,[R4, #+5]
   \   0000160E   0x282E             CMP      R0,#+46
   \   00001610   0xD114             BNE.N    ??RoadBrd_ParseString_250
   \   00001612   0x7A20             LDRB     R0,[R4, #+8]
   \   00001614   0x282E             CMP      R0,#+46
   \   00001616   0xD111             BNE.N    ??RoadBrd_ParseString_250
   \   00001618   0x7AE0             LDRB     R0,[R4, #+11]
   \   0000161A   0x282E             CMP      R0,#+46
   \   0000161C   0xD10E             BNE.N    ??RoadBrd_ParseString_250
   \   0000161E   0x7BA0             LDRB     R0,[R4, #+14]
   \   00001620   0x282E             CMP      R0,#+46
   \   00001622   0xD10B             BNE.N    ??RoadBrd_ParseString_250
   \   00001624   0x7C60             LDRB     R0,[R4, #+17]
   \   00001626   0x282E             CMP      R0,#+46
   \   00001628   0xD108             BNE.N    ??RoadBrd_ParseString_250
   \   0000162A   0x7D20             LDRB     R0,[R4, #+20]
   \   0000162C   0x282E             CMP      R0,#+46
   \   0000162E   0xD105             BNE.N    ??RoadBrd_ParseString_250
   \   00001630   0x7DE0             LDRB     R0,[R4, #+23]
   \   00001632   0x282E             CMP      R0,#+46
   \   00001634   0xD102             BNE.N    ??RoadBrd_ParseString_250
   \   00001636   0x7EA0             LDRB     R0,[R4, #+26]
   \   00001638   0x282E             CMP      R0,#+46
   \   0000163A   0xD005             BEQ.N    ??RoadBrd_ParseString_251
   1759                                  {
   1760                                    strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: Not correct format. Punctuation!\r\n");
   \                     ??RoadBrd_ParseString_250: (+1)
   \   0000163C   0xF8DF 0x1D98      LDR.W    R1,??RoadBrd_ParseString_249+0xC
   \   00001640   0xA80A             ADD      R0,SP,#+40
   \   00001642   0x.... 0x....      BL       strcpy
   \   00001646   0xE0F9             B.N      ??RoadBrd_ParseString_246
   1761                                  }
   1762                                  else
   1763                                  {
   1764                                    // Syntax correct. Time to grab parameters.
   1765                                    Error = 0;
   \                     ??RoadBrd_ParseString_251: (+1)
   \   00001648   0x2000             MOVS     R0,#+0
   \   0000164A   0x9035             STR      R0,[SP, #+212]
   1766                                    for (x=0; x<9; x++)
   \   0000164C   0x2000             MOVS     R0,#+0
   \   0000164E   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_252: (+1)
   \   00001650   0x2F09             CMP      R7,#+9
   \   00001652   0xDA26             BGE.N    ??RoadBrd_ParseString_253
   1767                                    {
   1768                                      tempBffr3[0] = tempBffr[3+x*3];
   \   00001654   0x2003             MOVS     R0,#+3
   \   00001656   0xFB00 0xF007      MUL      R0,R0,R7
   \   0000165A   0x4420             ADD      R0,R4,R0
   \   0000165C   0xF990 0x0003      LDRSB    R0,[R0, #+3]
   \   00001660   0xF88D 0x00A8      STRB     R0,[SP, #+168]
   1769                                      tempBffr3[1] = tempBffr[4+x*3];
   \   00001664   0x2003             MOVS     R0,#+3
   \   00001666   0xFB00 0xF007      MUL      R0,R0,R7
   \   0000166A   0x4420             ADD      R0,R4,R0
   \   0000166C   0xF990 0x0004      LDRSB    R0,[R0, #+4]
   \   00001670   0xF88D 0x00A9      STRB     R0,[SP, #+169]
   1770                                      tempBffr3[2] = 0x00;
   \   00001674   0x2000             MOVS     R0,#+0
   \   00001676   0xF88D 0x00AA      STRB     R0,[SP, #+170]
   1771                                      if (isHexNum( (char *)tempBffr3 ) == 0)
   \   0000167A   0xA82A             ADD      R0,SP,#+168
   \   0000167C   0x.... 0x....      BL       isHexNum
   \   00001680   0x2800             CMP      R0,#+0
   \   00001682   0xD107             BNE.N    ??RoadBrd_ParseString_254
   1772                                      {
   1773                                        strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR:Parameters not HEX Value.\r\n");
   \   00001684   0xF8DF 0x1DCC      LDR.W    R1,??RoadBrd_ParseString_255
   \   00001688   0xA80A             ADD      R0,SP,#+40
   \   0000168A   0x.... 0x....      BL       strcpy
   1774                                        Error = 1;
   \   0000168E   0x2001             MOVS     R0,#+1
   \   00001690   0x9035             STR      R0,[SP, #+212]
   1775                                        break;
   \   00001692   0xE006             B.N      ??RoadBrd_ParseString_253
   1776                                      }
   1777                                      else
   1778                                      {
   1779                                        i2cData[x] =  hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_254: (+1)
   \   00001694   0xA82A             ADD      R0,SP,#+168
   \   00001696   0x.... 0x....      BL       hatoi
   \   0000169A   0xA99A             ADD      R1,SP,#+616
   \   0000169C   0x55C8             STRB     R0,[R1, R7]
   1780                                      } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)
   1781                                    } //EndFor (x=0; x<num_bytes; x++)
   \   0000169E   0x1C7F             ADDS     R7,R7,#+1
   \   000016A0   0xE7D6             B.N      ??RoadBrd_ParseString_252
   1782                                    // Format and parameters now in i2cData array. Pull them out and validate them.
   1783                                    // OP_MODE Verify.
   1784                                    if(i2cData[0]>7)
   \                     ??RoadBrd_ParseString_253: (+1)
   \   000016A2   0xF89D 0x0268      LDRB     R0,[SP, #+616]
   \   000016A6   0x2808             CMP      R0,#+8
   \   000016A8   0xDB05             BLT.N    ??RoadBrd_ParseString_256
   1785                                    {
   1786                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: OP_MODE.\r\n");
   \   000016AA   0xF8DF 0x1DAC      LDR.W    R1,??RoadBrd_ParseString_255+0x4
   \   000016AE   0xA80A             ADD      R0,SP,#+40
   \   000016B0   0x.... 0x....      BL       strcpy
   1787                                      break;
   \   000016B4   0xE1BA             B.N      ??RoadBrd_ParseString_237
   1788                                    }
   1789                                    else
   1790                                      op_mode = (i2cData[0] & 0x07) * 1;
   \                     ??RoadBrd_ParseString_256: (+1)
   \   000016B6   0xF89D 0x0268      LDRB     R0,[SP, #+616]
   \   000016BA   0xF010 0x0007      ANDS     R0,R0,#0x7
   \   000016BE   0xF88D 0x00CD      STRB     R0,[SP, #+205]
   1791                                    // DS_RANGE Verify.
   1792                                    if(i2cData[1]>1)
   \   000016C2   0xF89D 0x0269      LDRB     R0,[SP, #+617]
   \   000016C6   0x2802             CMP      R0,#+2
   \   000016C8   0xDB08             BLT.N    ??RoadBrd_ParseString_257
   1793                                    {
   1794                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: DS_RANGE.\r\n");
   \   000016CA   0xF8DF 0x1E08      LDR.W    R1,??RoadBrd_ParseString_258
   \   000016CE   0xA80A             ADD      R0,SP,#+40
   \   000016D0   0x.... 0x....      BL       strcpy
   1795                                      break;
   \   000016D4   0xE1AA             B.N      ??RoadBrd_ParseString_237
   \   000016D6   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_107:
   \   000016D8   0x........         DC32     ?_46
   1796                                    }
   1797                                    else
   1798                                      ds_range = (i2cData[1] & 0x01) * 8;
   \                     ??RoadBrd_ParseString_257: (+1)
   \   000016DC   0xF89D 0x0269      LDRB     R0,[SP, #+617]
   \   000016E0   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   000016E4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000016E6   0x00C0             LSLS     R0,R0,#+3
   \   000016E8   0xF88D 0x00CC      STRB     R0,[SP, #+204]
   1799                                    // ADC_RSL Verify.
   1800                                    if(i2cData[2]>1)
   \   000016EC   0xF89D 0x026A      LDRB     R0,[SP, #+618]
   \   000016F0   0x2802             CMP      R0,#+2
   \   000016F2   0xDB05             BLT.N    ??RoadBrd_ParseString_259
   1801                                    {
   1802                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: ADC_RSL.\r\n");
   \   000016F4   0xF8DF 0x1DE0      LDR.W    R1,??RoadBrd_ParseString_258+0x4
   \   000016F8   0xA80A             ADD      R0,SP,#+40
   \   000016FA   0x.... 0x....      BL       strcpy
   1803                                      break;
   \   000016FE   0xE195             B.N      ??RoadBrd_ParseString_237
   1804                                    }
   1805                                    else
   1806                                      adc_rsl = (i2cData[2] & 0x01) * 16;
   \                     ??RoadBrd_ParseString_259: (+1)
   \   00001700   0xF89D 0x026A      LDRB     R0,[SP, #+618]
   \   00001704   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00001708   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000170A   0x0100             LSLS     R0,R0,#+4
   \   0000170C   0xF88D 0x00CB      STRB     R0,[SP, #+203]
   1807                                    // SYNC Verify.
   1808                                    if(i2cData[3]>1)
   \   00001710   0xF89D 0x026B      LDRB     R0,[SP, #+619]
   \   00001714   0x2802             CMP      R0,#+2
   \   00001716   0xDB09             BLT.N    ??RoadBrd_ParseString_260
   1809                                    {
   1810                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: SYNC.\r\n");
   \   00001718   0xF8DF 0x1DC0      LDR.W    R1,??RoadBrd_ParseString_258+0x8
   \   0000171C   0xA80A             ADD      R0,SP,#+40
   \   0000171E   0x.... 0x....      BL       strcpy
   1811                                      break;
   \   00001722   0xE183             B.N      ??RoadBrd_ParseString_237
   \                     ??RoadBrd_ParseString_110:
   \   00001724   0x........         DC32     ?_47
   \   00001728   0x........         DC32     ?_48
   1812                                    }
   1813                                    else
   1814                                      sync = (i2cData[3] & 0x01) * 32;
   \                     ??RoadBrd_ParseString_260: (+1)
   \   0000172C   0xF89D 0x026B      LDRB     R0,[SP, #+619]
   \   00001730   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00001734   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001736   0x0140             LSLS     R0,R0,#+5
   \   00001738   0xF88D 0x00CA      STRB     R0,[SP, #+202]
   1815                                    // CMP_ADJST Verify.
   1816                                    if(i2cData[4]>63)
   \   0000173C   0xF89D 0x026C      LDRB     R0,[SP, #+620]
   \   00001740   0x2840             CMP      R0,#+64
   \   00001742   0xDB05             BLT.N    ??RoadBrd_ParseString_261
   1817                                    {
   1818                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: CMP_ADJST.\r\n");
   \   00001744   0xF8DF 0x1E10      LDR.W    R1,??RoadBrd_ParseString_262
   \   00001748   0xA80A             ADD      R0,SP,#+40
   \   0000174A   0x.... 0x....      BL       strcpy
   1819                                      break;
   \   0000174E   0xE16D             B.N      ??RoadBrd_ParseString_237
   1820                                    }
   1821                                    else
   1822                                      cmp_adjst = (i2cData[4] & 0x3f) * 1;
   \                     ??RoadBrd_ParseString_261: (+1)
   \   00001750   0xF89D 0x026C      LDRB     R0,[SP, #+620]
   \   00001754   0xF010 0x003F      ANDS     R0,R0,#0x3F
   \   00001758   0xF88D 0x00C9      STRB     R0,[SP, #+201]
   1823                                    // CMP_OFFST Verify.
   1824                                    if(i2cData[5]>1)
   \   0000175C   0xF89D 0x026D      LDRB     R0,[SP, #+621]
   \   00001760   0x2802             CMP      R0,#+2
   \   00001762   0xDB05             BLT.N    ??RoadBrd_ParseString_263
   1825                                    {
   1826                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: CMP_OFFST.\r\n");
   \   00001764   0xF8DF 0x1DF4      LDR.W    R1,??RoadBrd_ParseString_262+0x4
   \   00001768   0xA80A             ADD      R0,SP,#+40
   \   0000176A   0x.... 0x....      BL       strcpy
   1827                                      break;
   \   0000176E   0xE15D             B.N      ??RoadBrd_ParseString_237
   1828                                    }
   1829                                    else
   1830                                      cmp_offst = (i2cData[5] & 0x01) * 128;
   \                     ??RoadBrd_ParseString_263: (+1)
   \   00001770   0xF89D 0x026D      LDRB     R0,[SP, #+621]
   \   00001774   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00001778   0x2180             MOVS     R1,#+128
   \   0000177A   0x4348             MULS     R0,R1,R0
   \   0000177C   0xF88D 0x00C8      STRB     R0,[SP, #+200]
   1831                                    // INT_ASSGN Verify.
   1832                                    if(i2cData[6]>3)
   \   00001780   0xF89D 0x026E      LDRB     R0,[SP, #+622]
   \   00001784   0x2804             CMP      R0,#+4
   \   00001786   0xDB05             BLT.N    ??RoadBrd_ParseString_264
   1833                                    {
   1834                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: INT_ASSGN.\r\n");
   \   00001788   0xF8DF 0x1DD4      LDR.W    R1,??RoadBrd_ParseString_262+0x8
   \   0000178C   0xA80A             ADD      R0,SP,#+40
   \   0000178E   0x.... 0x....      BL       strcpy
   1835                                      break;
   \   00001792   0xE14B             B.N      ??RoadBrd_ParseString_237
   1836                                    }
   1837                                    else
   1838                                      int_assgn = (i2cData[6] & 0x03) * 1;
   \                     ??RoadBrd_ParseString_264: (+1)
   \   00001794   0xF89D 0x026E      LDRB     R0,[SP, #+622]
   \   00001798   0xF010 0x0003      ANDS     R0,R0,#0x3
   \   0000179C   0xF88D 0x00B7      STRB     R0,[SP, #+183]
   1839                                    // INT_PERSIST Verify.
   1840                                    if(i2cData[7]>3)
   \   000017A0   0xF89D 0x026F      LDRB     R0,[SP, #+623]
   \   000017A4   0x2804             CMP      R0,#+4
   \   000017A6   0xDB05             BLT.N    ??RoadBrd_ParseString_265
   1841                                    {
   1842                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: INT_PERSIST.\r\n");
   \   000017A8   0xF8DF 0x1E30      LDR.W    R1,??RoadBrd_ParseString_266
   \   000017AC   0xA80A             ADD      R0,SP,#+40
   \   000017AE   0x.... 0x....      BL       strcpy
   1843                                      break;
   \   000017B2   0xE13B             B.N      ??RoadBrd_ParseString_237
   1844                                    }
   1845                                    else
   1846                                      int_persist = (i2cData[7] & 0x03) * 4;
   \                     ??RoadBrd_ParseString_265: (+1)
   \   000017B4   0xF89D 0x026F      LDRB     R0,[SP, #+623]
   \   000017B8   0xF010 0x0003      ANDS     R0,R0,#0x3
   \   000017BC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000017BE   0x0080             LSLS     R0,R0,#+2
   \   000017C0   0xF88D 0x00B6      STRB     R0,[SP, #+182]
   1847                                    // CNVRSN_INT Verify.
   1848                                    if(i2cData[8]>1)
   \   000017C4   0xF89D 0x0270      LDRB     R0,[SP, #+624]
   \   000017C8   0x2802             CMP      R0,#+2
   \   000017CA   0xDB05             BLT.N    ??RoadBrd_ParseString_267
   1849                                    {
   1850                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: CNVRSN_INT.\r\n");
   \   000017CC   0xF8DF 0x1E10      LDR.W    R1,??RoadBrd_ParseString_266+0x4
   \   000017D0   0xA80A             ADD      R0,SP,#+40
   \   000017D2   0x.... 0x....      BL       strcpy
   1851                                      break;
   \   000017D6   0xE129             B.N      ??RoadBrd_ParseString_237
   1852                                    }
   1853                                    else
   1854                                      cnvrsn_int = (i2cData[8] & 0x01) * 16;
   \                     ??RoadBrd_ParseString_267: (+1)
   \   000017D8   0xF89D 0x0270      LDRB     R0,[SP, #+624]
   \   000017DC   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   000017E0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000017E2   0x0100             LSLS     R0,R0,#+4
   \   000017E4   0xF88D 0x00B5      STRB     R0,[SP, #+181]
   1855                                    // OK, all parameters have been verified. Time to build final params.
   1856                                    RGBMeasure.config1 = op_mode + ds_range + adc_rsl + sync;
   \   000017E8   0xF89D 0x00CD      LDRB     R0,[SP, #+205]
   \   000017EC   0xF89D 0x10CC      LDRB     R1,[SP, #+204]
   \   000017F0   0x1808             ADDS     R0,R1,R0
   \   000017F2   0xF89D 0x10CB      LDRB     R1,[SP, #+203]
   \   000017F6   0x1808             ADDS     R0,R1,R0
   \   000017F8   0xF89D 0x10CA      LDRB     R1,[SP, #+202]
   \   000017FC   0x1808             ADDS     R0,R1,R0
   \   000017FE   0xF88D 0x00EC      STRB     R0,[SP, #+236]
   1857                                    RGBMeasure.config2 = cmp_adjst + cmp_offst;
   \   00001802   0xF89D 0x00C9      LDRB     R0,[SP, #+201]
   \   00001806   0xF89D 0x10C8      LDRB     R1,[SP, #+200]
   \   0000180A   0x1808             ADDS     R0,R1,R0
   \   0000180C   0xF88D 0x00ED      STRB     R0,[SP, #+237]
   1858                                    RGBMeasure.config3 = int_assgn + int_persist + cnvrsn_int;
   \   00001810   0xF89D 0x00B7      LDRB     R0,[SP, #+183]
   \   00001814   0xF89D 0x10B6      LDRB     R1,[SP, #+182]
   \   00001818   0x1808             ADDS     R0,R1,R0
   \   0000181A   0xF89D 0x10B5      LDRB     R1,[SP, #+181]
   \   0000181E   0x1808             ADDS     R0,R1,R0
   \   00001820   0xF88D 0x00EE      STRB     R0,[SP, #+238]
   1859                                    // Load Config Register with Config Settings
   1860                                    Status = RoadBrd_RGBFullInit( &RGBMeasure );
   \   00001824   0xA83B             ADD      R0,SP,#+236
   \   00001826   0x.... 0x....      BL       RoadBrd_RGBFullInit
   \   0000182A   0x0006             MOVS     R6,R0
   1861          
   1862                                    if (Status == HAL_OK)
   \   0000182C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000182E   0x2E00             CMP      R6,#+0
   \   00001830   0xD104             BNE.N    ??RoadBrd_ParseString_246
   1863                                    {
   1864                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor: Initialization Complete with USER Values.\r\n");;
   \   00001832   0xF8DF 0x1DB0      LDR.W    R1,??RoadBrd_ParseString_266+0x8
   \   00001836   0xA80A             ADD      R0,SP,#+40
   \   00001838   0x.... 0x....      BL       strcpy
   1865                                    }
   1866                                  } //ElseIf Validate format.
   1867                                } //ElseIf ( Size != 29 )
   1868                              } //ElseIf (Size == 2)
   1869                              break;
   \                     ??RoadBrd_ParseString_246: (+1)
   \   0000183C   0xE0F6             B.N      ??RoadBrd_ParseString_237
   1870          //------------------ H0 Command...Read RGB Values and Return as 3 (2 Byte Fields)....REDmsb,REDlsb,GREENmsb,GREENlsb,BLUEmsb,BLUElsb.....     
   1871                            case '0':
   1872                              // 1. Time to send Command and collect status.
   1873                              Status = RoadBrd_RGBReadValues( &RGBValues );
   \                     ??RoadBrd_ParseString_238: (+1)
   \   0000183E   0xA8B5             ADD      R0,SP,#+724
   \   00001840   0x.... 0x....      BL       RoadBrd_RGBReadValues
   \   00001844   0x0006             MOVS     R6,R0
   1874                              // Is this a BLE Operation?
   1875                              if ( BLE_Flag )
   \   00001846   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001848   0x2D00             CMP      R5,#+0
   \   0000184A   0xD00A             BEQ.N    ??RoadBrd_ParseString_268
   1876                              {
   1877                                // Yes...Build and Send BLE Response NOW.
   1878                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   0000184C   0xF8DF 0x1778      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   00001850   0xA80A             ADD      R0,SP,#+40
   \   00001852   0x.... 0x....      BL       strcpy
   1879                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001856   0xA80A             ADD      R0,SP,#+40
   \   00001858   0x.... 0x....      BL       strlen
   \   0000185C   0xA90A             ADD      R1,SP,#+40
   \   0000185E   0x.... 0x....      BL       BGM111_Transmit
   1880                              }
   1881                              
   1882                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_268: (+1)
   \   00001862   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001864   0x2E00             CMP      R6,#+0
   \   00001866   0xD15A             BNE.N    ??RoadBrd_ParseString_269
   1883                              {
   1884                                // Send string to UART..
   1885                                strcpy( (char *)tempBffr2, "RGB Color Light Sensor...\r\n");
   \   00001868   0xF8DF 0x19FC      LDR.W    R1,??RoadBrd_ParseString_229
   \   0000186C   0xA80A             ADD      R0,SP,#+40
   \   0000186E   0x.... 0x....      BL       strcpy
   1886          #ifdef NUCLEO
   1887                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1888          #else
   1889                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00001872   0xA90A             ADD      R1,SP,#+40
   \   00001874   0x2000             MOVS     R0,#+0
   \   00001876   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000187A   0x0006             MOVS     R6,R0
   1890          #endif
   1891                                if (Status != HAL_OK)
   \   0000187C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000187E   0x2E00             CMP      R6,#+0
   \   00001880   0xD003             BEQ.N    ??RoadBrd_ParseString_270
   1892                                  return Status;
   \   00001882   0x0030             MOVS     R0,R6
   \   00001884   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001886   0xF003 0xB85A      B.W      ??RoadBrd_ParseString_4
   1893                                // NOW, Build Data String..
   1894                                sprintf( (char *)tempBffr2, " RGB(REDmsb,REDlsb,GREENmsb,GREENlsb,BLUEmsb,BLUElsb)\r\n" );
   \                     ??RoadBrd_ParseString_270: (+1)
   \   0000188A   0xF8DF 0x1A0C      LDR.W    R1,??RoadBrd_ParseString_231
   \   0000188E   0xA80A             ADD      R0,SP,#+40
   \   00001890   0x.... 0x....      BL       sprintf
   1895          #ifdef NUCLEO
   1896                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1897          #else
   1898                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00001894   0xA90A             ADD      R1,SP,#+40
   \   00001896   0x2000             MOVS     R0,#+0
   \   00001898   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000189C   0x0006             MOVS     R6,R0
   1899          #endif
   1900                                if (Status != HAL_OK)
   \   0000189E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000018A0   0x2E00             CMP      R6,#+0
   \   000018A2   0xD003             BEQ.N    ??RoadBrd_ParseString_271
   1901                                  return Status;
   \   000018A4   0x0030             MOVS     R0,R6
   \   000018A6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000018A8   0xF003 0xB849      B.W      ??RoadBrd_ParseString_4
   1902                                strcpy( (char *)tempBffr2, "       DATA: ");
   \                     ??RoadBrd_ParseString_271: (+1)
   \   000018AC   0xF8DF 0x19EC      LDR.W    R1,??RoadBrd_ParseString_231+0x4
   \   000018B0   0xA80A             ADD      R0,SP,#+40
   \   000018B2   0x.... 0x....      BL       strcpy
   1903                                strcat( (char *)tempBffr2, (char *)RGBValues.Raw );
   \   000018B6   0xA9BB             ADD      R1,SP,#+748
   \   000018B8   0xA80A             ADD      R0,SP,#+40
   \   000018BA   0x.... 0x....      BL       strcat
   1904                                strcat( (char *)tempBffr2, "\r\n" );
   \   000018BE   0xA1DB             ADR.N    R1,??RoadBrd_ParseString_171  ;; 0x0D, 0x0A, 0x00, 0x00
   \   000018C0   0xA80A             ADD      R0,SP,#+40
   \   000018C2   0x.... 0x....      BL       strcat
   1905          #ifdef NUCLEO
   1906                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1907          #else
   1908                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000018C6   0xA90A             ADD      R1,SP,#+40
   \   000018C8   0x2000             MOVS     R0,#+0
   \   000018CA   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000018CE   0x0006             MOVS     R6,R0
   1909          #endif
   1910                                if (Status != HAL_OK)
   \   000018D0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000018D2   0x2E00             CMP      R6,#+0
   \   000018D4   0xD003             BEQ.N    ??RoadBrd_ParseString_272
   1911                                  return Status;
   \   000018D6   0x0030             MOVS     R0,R6
   \   000018D8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000018DA   0xF003 0xB830      B.W      ??RoadBrd_ParseString_4
   1912                                // Now DisplayEach Value Calculated.
   1913                                strcpy( (char *)tempBffr2, "    Red: ");
   \                     ??RoadBrd_ParseString_272: (+1)
   \   000018DE   0xF8DF 0x1A10      LDR.W    R1,??RoadBrd_ParseString_235+0x4
   \   000018E2   0xA80A             ADD      R0,SP,#+40
   \   000018E4   0x.... 0x....      BL       strcpy
   1914                                strcat( (char *)tempBffr2, (char *)RGBValues.Red );
   \   000018E8   0xA9B5             ADD      R1,SP,#+724
   \   000018EA   0xA80A             ADD      R0,SP,#+40
   \   000018EC   0x.... 0x....      BL       strcat
   1915                                strcat( (char *)tempBffr2, "    Green: ");
   \   000018F0   0xF8DF 0x1A00      LDR.W    R1,??RoadBrd_ParseString_235+0x8
   \   000018F4   0xA80A             ADD      R0,SP,#+40
   \   000018F6   0x.... 0x....      BL       strcat
   1916                                strcat( (char *)tempBffr2, (char *)RGBValues.Green );
   \   000018FA   0xA9B7             ADD      R1,SP,#+732
   \   000018FC   0xA80A             ADD      R0,SP,#+40
   \   000018FE   0x.... 0x....      BL       strcat
   1917                                strcat( (char *)tempBffr2, "    Blue: ");
   \   00001902   0xF8DF 0x1A28      LDR.W    R1,??RoadBrd_ParseString_236
   \   00001906   0xA80A             ADD      R0,SP,#+40
   \   00001908   0x.... 0x....      BL       strcat
   1918                                strcat( (char *)tempBffr2, (char *)RGBValues.Blue );
   \   0000190C   0xA9B9             ADD      R1,SP,#+740
   \   0000190E   0xA80A             ADD      R0,SP,#+40
   \   00001910   0x.... 0x....      BL       strcat
   1919                                strcat( (char *)tempBffr2, "\r\n" );
   \   00001914   0xA1C5             ADR.N    R1,??RoadBrd_ParseString_171  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001916   0xA80A             ADD      R0,SP,#+40
   \   00001918   0x.... 0x....      BL       strcat
   1920                              }
   1921                              else
   1922                                break;
   1923                              break;
   \   0000191C   0xE086             B.N      ??RoadBrd_ParseString_237
   \                     ??RoadBrd_ParseString_269: (+1)
   \   0000191E   0xE085             B.N      ??RoadBrd_ParseString_237
   1924          //------------------ H1 Command...Read Status.....     
   1925                            case '1':
   1926                              // 1. Time to send Command and collect status.  RGBSMeasure
   1927                              Status = RoadBrd_RGBReadStatus( &RGBSMeasure );
   \                     ??RoadBrd_ParseString_239: (+1)
   \   00001920   0xA857             ADD      R0,SP,#+348
   \   00001922   0x.... 0x....      BL       RoadBrd_RGBReadStatus
   \   00001926   0x0006             MOVS     R6,R0
   1928          
   1929                              // Is this a BLE Operation?
   1930                              if ( BLE_Flag )
   \   00001928   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000192A   0x2D00             CMP      R5,#+0
   \   0000192C   0xD00A             BEQ.N    ??RoadBrd_ParseString_273
   1931                              {
   1932                                // Yes...Build and Send BLE Response NOW.
   1933                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   0000192E   0xF8DF 0x1698      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   00001932   0xA80A             ADD      R0,SP,#+40
   \   00001934   0x.... 0x....      BL       strcpy
   1934                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001938   0xA80A             ADD      R0,SP,#+40
   \   0000193A   0x.... 0x....      BL       strlen
   \   0000193E   0xA90A             ADD      R1,SP,#+40
   \   00001940   0x.... 0x....      BL       BGM111_Transmit
   1935                              }
   1936                              
   1937                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_273: (+1)
   \   00001944   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001946   0x2E00             CMP      R6,#+0
   \   00001948   0xD119             BNE.N    ??RoadBrd_ParseString_274
   1938                              {
   1939                                // Build Status
   1940                                strcpy( (char *)tempBffr2, "RGB Color Light Sensor Status: ");
   \   0000194A   0xF8DF 0x1DF8      LDR.W    R1,??RoadBrd_ParseString_275
   \   0000194E   0xA80A             ADD      R0,SP,#+40
   \   00001950   0x.... 0x....      BL       strcpy
   1941                                sprintf( (char *)tempBffr3, "%02x / ", RGBSMeasure.status);
   \   00001954   0xF89D 0x215C      LDRB     R2,[SP, #+348]
   \   00001958   0xF8DF 0x1DEC      LDR.W    R1,??RoadBrd_ParseString_275+0x4
   \   0000195C   0xA82A             ADD      R0,SP,#+168
   \   0000195E   0x.... 0x....      BL       sprintf
   1942                                strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   00001962   0xA92A             ADD      R1,SP,#+168
   \   00001964   0xA80A             ADD      R0,SP,#+40
   \   00001966   0x.... 0x....      BL       strcat
   1943                                strcat( (char *)tempBffr2, (char *)RGBSMeasure.Raw );
   \   0000196A   0xA957             ADD      R1,SP,#+348
   \   0000196C   0x1C49             ADDS     R1,R1,#+1
   \   0000196E   0xA80A             ADD      R0,SP,#+40
   \   00001970   0x.... 0x....      BL       strcat
   1944                                strcat( (char *)tempBffr2, "\r\n" );
   \   00001974   0xA1AD             ADR.N    R1,??RoadBrd_ParseString_171  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001976   0xA80A             ADD      R0,SP,#+40
   \   00001978   0x.... 0x....      BL       strcat
   1945                              }
   1946                              else
   1947                                break;
   1948                              break;
   \   0000197C   0xE056             B.N      ??RoadBrd_ParseString_237
   \                     ??RoadBrd_ParseString_274: (+1)
   \   0000197E   0xE055             B.N      ??RoadBrd_ParseString_237
   1949          //------------------ H2 Command...Reset Hardware......     
   1950                            case '2':
   1951                              Status = RoadBrd_RGBReset();
   \                     ??RoadBrd_ParseString_240: (+1)
   \   00001980   0x.... 0x....      BL       RoadBrd_RGBReset
   \   00001984   0x0006             MOVS     R6,R0
   1952                              // Is this a BLE Operation?
   1953                              if ( BLE_Flag )
   \   00001986   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001988   0x2D00             CMP      R5,#+0
   \   0000198A   0xD00A             BEQ.N    ??RoadBrd_ParseString_276
   1954                              {
   1955                                // Yes...Build and Send BLE Response NOW.
   1956                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   0000198C   0xF8DF 0x1638      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   00001990   0xA80A             ADD      R0,SP,#+40
   \   00001992   0x.... 0x....      BL       strcpy
   1957                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001996   0xA80A             ADD      R0,SP,#+40
   \   00001998   0x.... 0x....      BL       strlen
   \   0000199C   0xA90A             ADD      R1,SP,#+40
   \   0000199E   0x.... 0x....      BL       BGM111_Transmit
   1958                              }
   1959                              
   1960                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_276: (+1)
   \   000019A2   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000019A4   0x2E00             CMP      R6,#+0
   \   000019A6   0xD107             BNE.N    ??RoadBrd_ParseString_277
   1961                              {
   1962                                // Build Status
   1963                                strcpy( (char *)tempBffr2, "RGB Color Light Sensor: RESET CMD Sent Succesful.\r\n" );
   \   000019A8   0xF8DF 0x1E14      LDR.W    R1,??RoadBrd_ParseString_278
   \   000019AC   0xA80A             ADD      R0,SP,#+40
   \   000019AE   0x.... 0x....      BL       strcpy
   1964                              }
   1965                              else
   1966                                break;
   1967                              break;
   \   000019B2   0xE03B             B.N      ??RoadBrd_ParseString_237
   \                     ??RoadBrd_ParseString_138:
   \   000019B4   0x........         DC32     ?_49
   \                     ??RoadBrd_ParseString_277: (+1)
   \   000019B8   0xE038             B.N      ??RoadBrd_ParseString_237
   1968          //------------------ H3 Command...Read ID.....     
   1969                            case '3':
   1970                              // 1. Time to send Command and collect status.  IDMeasure
   1971                              Status = RoadBrd_RGBReadID( &IDMeasure );
   \                     ??RoadBrd_ParseString_241: (+1)
   \   000019BA   0xA859             ADD      R0,SP,#+356
   \   000019BC   0x.... 0x....      BL       RoadBrd_RGBReadID
   \   000019C0   0x0006             MOVS     R6,R0
   1972                              // Is this a BLE Operation?
   1973                              if ( BLE_Flag )
   \   000019C2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000019C4   0x2D00             CMP      R5,#+0
   \   000019C6   0xD00A             BEQ.N    ??RoadBrd_ParseString_279
   1974                              {
   1975                                // Yes...Build and Send BLE Response NOW.
   1976                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000019C8   0xF8DF 0x15FC      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   000019CC   0xA80A             ADD      R0,SP,#+40
   \   000019CE   0x.... 0x....      BL       strcpy
   1977                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000019D2   0xA80A             ADD      R0,SP,#+40
   \   000019D4   0x.... 0x....      BL       strlen
   \   000019D8   0xA90A             ADD      R1,SP,#+40
   \   000019DA   0x.... 0x....      BL       BGM111_Transmit
   1978                              }
   1979                              
   1980                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_279: (+1)
   \   000019DE   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000019E0   0x2E00             CMP      R6,#+0
   \   000019E2   0xD11D             BNE.N    ??RoadBrd_ParseString_280
   1981                              {
   1982                                // Build Status
   1983                                strcpy( (char *)tempBffr2, "RGB Color Light Sensor ID Code: ");
   \   000019E4   0xF8DF 0x1DDC      LDR.W    R1,??RoadBrd_ParseString_278+0x4
   \   000019E8   0xA80A             ADD      R0,SP,#+40
   \   000019EA   0x.... 0x....      BL       strcpy
   1984                                sprintf( (char *)tempBffr3, "%02x / ", IDMeasure.id);
   \   000019EE   0xF89D 0x2164      LDRB     R2,[SP, #+356]
   \   000019F2   0xF8DF 0x1D54      LDR.W    R1,??RoadBrd_ParseString_275+0x4
   \   000019F6   0xA82A             ADD      R0,SP,#+168
   \   000019F8   0x.... 0x....      BL       sprintf
   1985                                strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   000019FC   0xA92A             ADD      R1,SP,#+168
   \   000019FE   0xA80A             ADD      R0,SP,#+40
   \   00001A00   0x.... 0x....      BL       strcat
   1986                                strcat( (char *)tempBffr2, (char *)IDMeasure.Raw );
   \   00001A04   0xA959             ADD      R1,SP,#+356
   \   00001A06   0x1C49             ADDS     R1,R1,#+1
   \   00001A08   0xA80A             ADD      R0,SP,#+40
   \   00001A0A   0x.... 0x....      BL       strcat
   1987                                strcat( (char *)tempBffr2, "\r\n" );
   \   00001A0E   0xA187             ADR.N    R1,??RoadBrd_ParseString_171  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001A10   0xA80A             ADD      R0,SP,#+40
   \   00001A12   0x.... 0x....      BL       strcat
   1988                             }
   1989                              else
   1990                                break;
   1991                              break;
   \   00001A16   0xE009             B.N      ??RoadBrd_ParseString_237
   \                     ??RoadBrd_ParseString_142:
   \   00001A18   0x........         DC32     ?_50
   \   00001A1C   0x........         DC32     ?_51
   \                     ??RoadBrd_ParseString_280: (+1)
   \   00001A20   0xE004             B.N      ??RoadBrd_ParseString_237
   1992                            default:
   1993                              strcpy( (char *)tempBffr2, "ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_242: (+1)
   \   00001A22   0xF8DF 0x1E18      LDR.W    R1,??RoadBrd_ParseString_281
   \   00001A26   0xA80A             ADD      R0,SP,#+40
   \   00001A28   0x.... 0x....      BL       strcpy
   1994                              break;
   1995                          } //EndSwitch
   1996                        } //EndElse (Size == 1)
   1997                        break;    
   \                     ??RoadBrd_ParseString_237: (+1)
   \   00001A2C   0xF002 0xBF0D      B.W      ??RoadBrd_ParseString_27
   1998          //**************************************************************************************************
   1999                      case 'P':
   2000                        // POWER SYSTEM. 
   2001                        switch( tempBffr[1] )
   \                     ??RoadBrd_ParseString_20: (+1)
   \   00001A30   0x7860             LDRB     R0,[R4, #+1]
   \   00001A32   0x2844             CMP      R0,#+68
   \   00001A34   0xD018             BEQ.N    ??RoadBrd_ParseString_282
   \   00001A36   0x2855             CMP      R0,#+85
   \   00001A38   0xD11F             BNE.N    ??RoadBrd_ParseString_283
   2002                        {
   2003          //++++++++++++++++++++++++++++++++++++++++++  5V Power Supply Commands.
   2004                          case 'U':
   2005                            // Turn on 5V Power Supply.
   2006                            RoadBrd_gpio_On( gTAM_PWR );
   \                     ??RoadBrd_ParseString_284: (+1)
   \   00001A3A   0x2004             MOVS     R0,#+4
   \   00001A3C   0x.... 0x....      BL       RoadBrd_gpio_On
   2007                            // Is this a BLE Operation?
   2008                            if ( BLE_Flag )
   \   00001A40   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001A42   0x2D00             CMP      R5,#+0
   \   00001A44   0xD00A             BEQ.N    ??RoadBrd_ParseString_285
   2009                            {
   2010                              // Yes...Build and Send BLE Response NOW.
   2011                              strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001A46   0xF8DF 0x1580      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   00001A4A   0xA80A             ADD      R0,SP,#+40
   \   00001A4C   0x.... 0x....      BL       strcpy
   2012                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001A50   0xA80A             ADD      R0,SP,#+40
   \   00001A52   0x.... 0x....      BL       strlen
   \   00001A56   0xA90A             ADD      R1,SP,#+40
   \   00001A58   0x.... 0x....      BL       BGM111_Transmit
   2013                            }
   2014                            
   2015                            strcpy( (char *)tempBffr2, "5V Power Plane Powered UP.\r\n");
   \                     ??RoadBrd_ParseString_285: (+1)
   \   00001A5C   0xF8DF 0x1DE0      LDR.W    R1,??RoadBrd_ParseString_281+0x4
   \   00001A60   0xA80A             ADD      R0,SP,#+40
   \   00001A62   0x.... 0x....      BL       strcpy
   2016                            break;
   \   00001A66   0xE00D             B.N      ??RoadBrd_ParseString_286
   2017                          case 'D':
   2018                            // Turn off 5V Power Supply.
   2019                            RoadBrd_gpio_Off( gTAM_PWR );
   \                     ??RoadBrd_ParseString_282: (+1)
   \   00001A68   0x2004             MOVS     R0,#+4
   \   00001A6A   0x.... 0x....      BL       RoadBrd_gpio_Off
   2020                            strcpy( (char *)tempBffr2, "5V Power Plane Powered DOWN.\r\n");
   \   00001A6E   0xF8DF 0x1DD4      LDR.W    R1,??RoadBrd_ParseString_281+0x8
   \   00001A72   0xA80A             ADD      R0,SP,#+40
   \   00001A74   0x.... 0x....      BL       strcpy
   2021                            break;
   \   00001A78   0xE004             B.N      ??RoadBrd_ParseString_286
   2022                          default:
   2023                            strcpy( (char *)tempBffr2, "ERROR: Illegal 5V Power Plane Command.\r\n");
   \                     ??RoadBrd_ParseString_283: (+1)
   \   00001A7A   0xF8DF 0x1DCC      LDR.W    R1,??RoadBrd_ParseString_281+0xC
   \   00001A7E   0xA80A             ADD      R0,SP,#+40
   \   00001A80   0x.... 0x....      BL       strcpy
   2024                            break;
   2025                        }
   2026                        break;
   \                     ??RoadBrd_ParseString_286: (+1)
   \   00001A84   0xF002 0xBEE1      B.W      ??RoadBrd_ParseString_27
   \                     ??RoadBrd_ParseString_147:
   \   00001A88   0x........         DC32     ?_52
   \   00001A8C   0x........         DC32     ?_53
   2027          //**************************************************************************************************
   2028                      case 'T':
   2029                        // TEST CMDS. 
   2030                        // Test Size to make sure we have enough Characters for this operation
   2031                        if (Size <= 1)
   \                     ??RoadBrd_ParseString_21: (+1)
   \   00001A90   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00001A94   0xF1B8 0x0F02      CMP      R8,#+2
   \   00001A98   0xDA16             BGE.N    ??RoadBrd_ParseString_287
   2032                        {
   2033                          // Is this a BLE Operation?
   2034                          if ( BLE_Flag )
   \   00001A9A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001A9C   0x2D00             CMP      R5,#+0
   \   00001A9E   0xD00A             BEQ.N    ??RoadBrd_ParseString_288
   2035                          {
   2036                            // Yes...Build and Send BLE Response NOW.
   2037                            strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001AA0   0xF8DF 0x1524      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   00001AA4   0xA80A             ADD      R0,SP,#+40
   \   00001AA6   0x.... 0x....      BL       strcpy
   2038                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001AAA   0xA80A             ADD      R0,SP,#+40
   \   00001AAC   0x.... 0x....      BL       strlen
   \   00001AB0   0xA90A             ADD      R1,SP,#+40
   \   00001AB2   0x.... 0x....      BL       BGM111_Transmit
   2039                          }
   2040                          
   2041                          strcpy( (char *)tempBffr2, "T ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_288: (+1)
   \   00001AB6   0xF8DF 0x1E08      LDR.W    R1,??RoadBrd_ParseString_289
   \   00001ABA   0xA80A             ADD      R0,SP,#+40
   \   00001ABC   0x.... 0x....      BL       strcpy
   \   00001AC0   0xF002 0xBEB1      B.W      ??RoadBrd_ParseString_290
   \                     ??RoadBrd_ParseString_157:
   \   00001AC4   0x........         DC32     ?_54
   2042                        }
   2043                        else
   2044                        {
   2045                          switch( tempBffr[1] )
   \                     ??RoadBrd_ParseString_287: (+1)
   \   00001AC8   0x7860             LDRB     R0,[R4, #+1]
   \   00001ACA   0x2843             CMP      R0,#+67
   \   00001ACC   0xF000 0x82F4      BEQ.W    ??RoadBrd_ParseString_291
   \   00001AD0   0x2844             CMP      R0,#+68
   \   00001AD2   0xF002 0x8222      BEQ.W    ??RoadBrd_ParseString_292
   \   00001AD6   0x2846             CMP      R0,#+70
   \   00001AD8   0xF002 0x861E      BEQ.W    ??RoadBrd_ParseString_293
   \   00001ADC   0x2849             CMP      R0,#+73
   \   00001ADE   0xD013             BEQ.N    ??RoadBrd_ParseString_294
   \   00001AE0   0x284B             CMP      R0,#+75
   \   00001AE2   0xF002 0x8255      BEQ.W    ??RoadBrd_ParseString_295
   \   00001AE6   0x284C             CMP      R0,#+76
   \   00001AE8   0xF002 0x862E      BEQ.W    ??RoadBrd_ParseString_296
   \   00001AEC   0x284D             CMP      R0,#+77
   \   00001AEE   0xF002 0x85E9      BEQ.W    ??RoadBrd_ParseString_297
   \   00001AF2   0x2852             CMP      R0,#+82
   \   00001AF4   0xF002 0x8230      BEQ.W    ??RoadBrd_ParseString_298
   \   00001AF8   0x2853             CMP      R0,#+83
   \   00001AFA   0xF002 0x865A      BEQ.W    ??RoadBrd_ParseString_299
   \   00001AFE   0x2855             CMP      R0,#+85
   \   00001B00   0xF002 0x8578      BEQ.W    ??RoadBrd_ParseString_300
   \   00001B04   0xF002 0xBE7E      B.W      ??RoadBrd_ParseString_301
   2046                          {
   2047          //++++++++++++++++++++++++++++++++++++++++++  I2C Commands.
   2048                            case 'I':
   2049                              // I2C Commands.
   2050                              // Test Size to make sure we have enough Characters for this operation
   2051                              if (Size < 9)
   \                     ??RoadBrd_ParseString_294: (+1)
   \   00001B08   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00001B0C   0xF1B8 0x0F09      CMP      R8,#+9
   \   00001B10   0xDA13             BGE.N    ??RoadBrd_ParseString_302
   2052                              {
   2053                                // Is this a BLE Operation?
   2054                                if ( BLE_Flag )
   \   00001B12   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001B14   0x2D00             CMP      R5,#+0
   \   00001B16   0xD00A             BEQ.N    ??RoadBrd_ParseString_303
   2055                                {
   2056                                  // Yes...Build and Send BLE Response NOW.
   2057                                  strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001B18   0xF8DF 0x14AC      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   00001B1C   0xA80A             ADD      R0,SP,#+40
   \   00001B1E   0x.... 0x....      BL       strcpy
   2058                                  BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001B22   0xA80A             ADD      R0,SP,#+40
   \   00001B24   0x.... 0x....      BL       strlen
   \   00001B28   0xA90A             ADD      R1,SP,#+40
   \   00001B2A   0x.... 0x....      BL       BGM111_Transmit
   2059                                }
   2060                                
   2061                                strcpy( (char *)tempBffr2, "TI SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_303: (+1)
   \   00001B2E   0xF8DF 0x1E08      LDR.W    R1,??RoadBrd_ParseString_304
   \   00001B32   0xA80A             ADD      R0,SP,#+40
   \   00001B34   0x.... 0x....      BL       strcpy
   \   00001B38   0xE2B3             B.N      ??RoadBrd_ParseString_305
   2062                              }
   2063                              else
   2064                              {
   2065                                switch( tempBffr[2] )
   \                     ??RoadBrd_ParseString_302: (+1)
   \   00001B3A   0x78A0             LDRB     R0,[R4, #+2]
   \   00001B3C   0x2851             CMP      R0,#+81
   \   00001B3E   0xF000 0x8204      BEQ.W    ??RoadBrd_ParseString_306
   \   00001B42   0xF0C0 0x82A9      BCC.W    ??RoadBrd_ParseString_307
   \   00001B46   0x2853             CMP      R0,#+83
   \   00001B48   0xD002             BEQ.N    ??RoadBrd_ParseString_308
   \   00001B4A   0xF0C0 0x80D5      BCC.W    ??RoadBrd_ParseString_309
   \   00001B4E   0xE2A3             B.N      ??RoadBrd_ParseString_307
   2066                                {
   2067          //------------------
   2068                                  case 'S':
   2069                                    //I2C Send Command.
   2070                                    // Step 1. Validate format.
   2071                                    if( (tempBffr[3]!=':') ||
   2072                                        (tempBffr[6]!='.') )
   \                     ??RoadBrd_ParseString_308: (+1)
   \   00001B50   0x78E0             LDRB     R0,[R4, #+3]
   \   00001B52   0x283A             CMP      R0,#+58
   \   00001B54   0xD102             BNE.N    ??RoadBrd_ParseString_310
   \   00001B56   0x79A0             LDRB     R0,[R4, #+6]
   \   00001B58   0x282E             CMP      R0,#+46
   \   00001B5A   0xD01B             BEQ.N    ??RoadBrd_ParseString_311
   2073                                    {
   2074                                      // Is this a BLE Operation?
   2075                                      if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_310: (+1)
   \   00001B5C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001B5E   0x2D00             CMP      R5,#+0
   \   00001B60   0xD00A             BEQ.N    ??RoadBrd_ParseString_312
   2076                                      {
   2077                                        // Yes...Build and Send BLE Response NOW.
   2078                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001B62   0xF8DF 0x1464      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   00001B66   0xA80A             ADD      R0,SP,#+40
   \   00001B68   0x.... 0x....      BL       strcpy
   2079                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001B6C   0xA80A             ADD      R0,SP,#+40
   \   00001B6E   0x.... 0x....      BL       strlen
   \   00001B72   0xA90A             ADD      R1,SP,#+40
   \   00001B74   0x.... 0x....      BL       BGM111_Transmit
   2080                                      }
   2081                                     
   2082                                      strcpy( (char *)tempBffr2, "TIS SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_312: (+1)
   \   00001B78   0xF8DF 0x1E34      LDR.W    R1,??RoadBrd_ParseString_313
   \   00001B7C   0xA80A             ADD      R0,SP,#+40
   \   00001B7E   0x.... 0x....      BL       strcpy
   \   00001B82   0xE0B8             B.N      ??RoadBrd_ParseString_314
   \                     ??RoadBrd_ParseString_164:
   \   00001B84   0x........         DC32     ?_55
   \   00001B88   0x........         DC32     ?_56
   \   00001B8C   0x........         DC32     ?_57
   \   00001B90   0x........         DC32     ?_58
   2083                                    }
   2084                                    else
   2085                                    {
   2086                                      // Is this a BLE Operation?
   2087                                      if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_311: (+1)
   \   00001B94   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001B96   0x2D00             CMP      R5,#+0
   \   00001B98   0xD00A             BEQ.N    ??RoadBrd_ParseString_315
   2088                                      {
   2089                                        // Yes...Build and Send BLE Response NOW.
   2090                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001B9A   0xF8DF 0x142C      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   00001B9E   0xA80A             ADD      R0,SP,#+40
   \   00001BA0   0x.... 0x....      BL       strcpy
   2091                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001BA4   0xA80A             ADD      R0,SP,#+40
   \   00001BA6   0x.... 0x....      BL       strlen
   \   00001BAA   0xA90A             ADD      R1,SP,#+40
   \   00001BAC   0x.... 0x....      BL       BGM111_Transmit
   2092                                      }
   2093                                      
   2094                                      // 2. Grab Address and validate a legal number
   2095                                      tempBffr3[0] = tempBffr[4];
   \                     ??RoadBrd_ParseString_315: (+1)
   \   00001BB0   0xF994 0x0004      LDRSB    R0,[R4, #+4]
   \   00001BB4   0xF88D 0x00A8      STRB     R0,[SP, #+168]
   2096                                      tempBffr3[1] = tempBffr[5];
   \   00001BB8   0xF994 0x0005      LDRSB    R0,[R4, #+5]
   \   00001BBC   0xF88D 0x00A9      STRB     R0,[SP, #+169]
   2097                                      tempBffr3[2] = 0x00;
   \   00001BC0   0x2000             MOVS     R0,#+0
   \   00001BC2   0xF88D 0x00AA      STRB     R0,[SP, #+170]
   2098                                      if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001BC6   0xA82A             ADD      R0,SP,#+168
   \   00001BC8   0x.... 0x....      BL       isHexNum
   \   00001BCC   0x2800             CMP      R0,#+0
   \   00001BCE   0xD105             BNE.N    ??RoadBrd_ParseString_316
   2099                                        strcpy( (char *)tempBffr2, "TIS SYNTAX ERROR: Address not HEX Value.\r\n");
   \   00001BD0   0xF8DF 0x1DE0      LDR.W    R1,??RoadBrd_ParseString_313+0x4
   \   00001BD4   0xA80A             ADD      R0,SP,#+40
   \   00001BD6   0x.... 0x....      BL       strcpy
   \   00001BDA   0xE08C             B.N      ??RoadBrd_ParseString_314
   2100                                      else
   2101                                      {
   2102                                        // Legal Address. Save it as value
   2103                                        Address = hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_316: (+1)
   \   00001BDC   0xA82A             ADD      R0,SP,#+168
   \   00001BDE   0x.... 0x....      BL       hatoi
   \   00001BE2   0x9031             STR      R0,[SP, #+196]
   2104                                        // 3. Now get the number of bytes of data from field.
   2105          //                              sprintf( (char *)tempBffr2, "TIS: Good Address: %x.\r\n", Address);
   2106                                        tempBffr3[0] = tempBffr[7];
   \   00001BE4   0xF994 0x0007      LDRSB    R0,[R4, #+7]
   \   00001BE8   0xF88D 0x00A8      STRB     R0,[SP, #+168]
   2107                                        tempBffr3[1] = tempBffr[8];
   \   00001BEC   0xF994 0x0008      LDRSB    R0,[R4, #+8]
   \   00001BF0   0xF88D 0x00A9      STRB     R0,[SP, #+169]
   2108                                        tempBffr3[2] = 0x00;
   \   00001BF4   0x2000             MOVS     R0,#+0
   \   00001BF6   0xF88D 0x00AA      STRB     R0,[SP, #+170]
   2109                                        if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001BFA   0xA82A             ADD      R0,SP,#+168
   \   00001BFC   0x.... 0x....      BL       isHexNum
   \   00001C00   0x2800             CMP      R0,#+0
   \   00001C02   0xD105             BNE.N    ??RoadBrd_ParseString_317
   2110                                          strcpy( (char *)tempBffr2, "TIS SYNTAX ERROR: Number of Bytes not HEX Value.\r\n");
   \   00001C04   0xF8DF 0x1DB0      LDR.W    R1,??RoadBrd_ParseString_313+0x8
   \   00001C08   0xA80A             ADD      R0,SP,#+40
   \   00001C0A   0x.... 0x....      BL       strcpy
   \   00001C0E   0xE072             B.N      ??RoadBrd_ParseString_314
   2111                                        else
   2112                                        {
   2113                                          // Legal NUMBER BYTES. Save it as value
   2114                                          num_bytes = hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_317: (+1)
   \   00001C10   0xA82A             ADD      R0,SP,#+168
   \   00001C12   0x.... 0x....      BL       hatoi
   \   00001C16   0x9034             STR      R0,[SP, #+208]
   2115                                          // 4. Test num_bytes. If Zero, We are done
   2116                                          if (num_bytes == 0)
   \   00001C18   0x9834             LDR      R0,[SP, #+208]
   \   00001C1A   0x2800             CMP      R0,#+0
   \   00001C1C   0xD114             BNE.N    ??RoadBrd_ParseString_318
   2117                                          {
   2118                                            sprintf( (char *)tempBffr2, "TIS: GOOD CMD: %x.\r\n", Address);
   \   00001C1E   0x9A31             LDR      R2,[SP, #+196]
   \   00001C20   0xF8DF 0x1D98      LDR.W    R1,??RoadBrd_ParseString_313+0xC
   \   00001C24   0xA80A             ADD      R0,SP,#+40
   \   00001C26   0x.... 0x....      BL       sprintf
   \   00001C2A   0xE03B             B.N      ??RoadBrd_ParseString_319
   \                     ??RoadBrd_ParseString_171:
   \   00001C2C   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
   \   00001C30   0x........         DC32     ?_59
   \   00001C34   0x........         DC32     ?_60
   \   00001C38   0x........         DC32     ?_61
   \   00001C3C   0x........         DC32     ?_62
   \   00001C40   0x........         DC32     ?_63
   \   00001C44   0x........         DC32     ?_64
   2119                                          }
   2120                                          else
   2121                                          {
   2122                                            // 5. Time to get all the data.
   2123                                            Error = 0;
   \                     ??RoadBrd_ParseString_318: (+1)
   \   00001C48   0x2000             MOVS     R0,#+0
   \   00001C4A   0x9035             STR      R0,[SP, #+212]
   2124                                            for (x=0; x<num_bytes; x++)
   \   00001C4C   0x2000             MOVS     R0,#+0
   \   00001C4E   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_320: (+1)
   \   00001C50   0x9834             LDR      R0,[SP, #+208]
   \   00001C52   0x4287             CMP      R7,R0
   \   00001C54   0xDA26             BGE.N    ??RoadBrd_ParseString_319
   2125                                            {
   2126                                              tempBffr3[0] = tempBffr[10+x*3];
   \   00001C56   0x2003             MOVS     R0,#+3
   \   00001C58   0xFB00 0xF007      MUL      R0,R0,R7
   \   00001C5C   0x4420             ADD      R0,R4,R0
   \   00001C5E   0xF990 0x000A      LDRSB    R0,[R0, #+10]
   \   00001C62   0xF88D 0x00A8      STRB     R0,[SP, #+168]
   2127                                              tempBffr3[1] = tempBffr[11+x*3];
   \   00001C66   0x2003             MOVS     R0,#+3
   \   00001C68   0xFB00 0xF007      MUL      R0,R0,R7
   \   00001C6C   0x4420             ADD      R0,R4,R0
   \   00001C6E   0xF990 0x000B      LDRSB    R0,[R0, #+11]
   \   00001C72   0xF88D 0x00A9      STRB     R0,[SP, #+169]
   2128                                              tempBffr3[2] = 0x00;
   \   00001C76   0x2000             MOVS     R0,#+0
   \   00001C78   0xF88D 0x00AA      STRB     R0,[SP, #+170]
   2129                                              if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001C7C   0xA82A             ADD      R0,SP,#+168
   \   00001C7E   0x.... 0x....      BL       isHexNum
   \   00001C82   0x2800             CMP      R0,#+0
   \   00001C84   0xD107             BNE.N    ??RoadBrd_ParseString_321
   2130                                              {
   2131                                                strcpy( (char *)tempBffr2, "TIS SYNTAX ERROR: Address not HEX Value.\r\n");
   \   00001C86   0xF8DF 0x1D2C      LDR.W    R1,??RoadBrd_ParseString_313+0x4
   \   00001C8A   0xA80A             ADD      R0,SP,#+40
   \   00001C8C   0x.... 0x....      BL       strcpy
   2132                                                Error = 1;
   \   00001C90   0x2001             MOVS     R0,#+1
   \   00001C92   0x9035             STR      R0,[SP, #+212]
   2133                                                break;
   \   00001C94   0xE006             B.N      ??RoadBrd_ParseString_319
   2134                                              }
   2135                                              else
   2136                                              {
   2137                                                i2cData[x] =  hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_321: (+1)
   \   00001C96   0xA82A             ADD      R0,SP,#+168
   \   00001C98   0x.... 0x....      BL       hatoi
   \   00001C9C   0xA99A             ADD      R1,SP,#+616
   \   00001C9E   0x55C8             STRB     R0,[R1, R7]
   2138                                              } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)
   2139                                            } //EndFor (x=0; x<num_bytes; x++)
   \   00001CA0   0x1C7F             ADDS     R7,R7,#+1
   \   00001CA2   0xE7D5             B.N      ??RoadBrd_ParseString_320
   2140                                          } //EndElse (num_bytes == 0)
   2141                                          if (Error==0)
   \                     ??RoadBrd_ParseString_319: (+1)
   \   00001CA4   0x9835             LDR      R0,[SP, #+212]
   \   00001CA6   0x2800             CMP      R0,#+0
   \   00001CA8   0xD105             BNE.N    ??RoadBrd_ParseString_322
   2142                                          {
   2143                                            sprintf( (char *)tempBffr2, "TIS: GOOD CMD: %x.", Address);
   \   00001CAA   0x9A31             LDR      R2,[SP, #+196]
   \   00001CAC   0xF8DF 0x1DF4      LDR.W    R1,??RoadBrd_ParseString_323
   \   00001CB0   0xA80A             ADD      R0,SP,#+40
   \   00001CB2   0x.... 0x....      BL       sprintf
   2144                                          }
   2145                                          for(x=0; x<num_bytes; x++)
   \                     ??RoadBrd_ParseString_322: (+1)
   \   00001CB6   0x2000             MOVS     R0,#+0
   \   00001CB8   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_324: (+1)
   \   00001CBA   0x9834             LDR      R0,[SP, #+208]
   \   00001CBC   0x4287             CMP      R7,R0
   \   00001CBE   0xDA0B             BGE.N    ??RoadBrd_ParseString_325
   2146                                          {
   2147                                            sprintf( (char *)tempBffr3, "%x.", i2cData[x]);
   \   00001CC0   0xA89A             ADD      R0,SP,#+616
   \   00001CC2   0x5DC2             LDRB     R2,[R0, R7]
   \   00001CC4   0xA1C1             ADR.N    R1,??RoadBrd_ParseString_207+0x8  ;; "%x."
   \   00001CC6   0xA82A             ADD      R0,SP,#+168
   \   00001CC8   0x.... 0x....      BL       sprintf
   2148                                            strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   00001CCC   0xA92A             ADD      R1,SP,#+168
   \   00001CCE   0xA80A             ADD      R0,SP,#+40
   \   00001CD0   0x.... 0x....      BL       strcat
   2149                                          }
   \   00001CD4   0x1C7F             ADDS     R7,R7,#+1
   \   00001CD6   0xE7F0             B.N      ??RoadBrd_ParseString_324
   2150                                          strcat( (char *)tempBffr2, "\r\n" );
   \                     ??RoadBrd_ParseString_325: (+1)
   \   00001CD8   0xA1BD             ADR.N    R1,??RoadBrd_ParseString_207+0xC  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001CDA   0xA80A             ADD      R0,SP,#+40
   \   00001CDC   0x.... 0x....      BL       strcat
   2151                                          // 6. Time to send Command and collect status.
   2152                                          Status =  RoadBrd_I2C_Master_Transmit((uint16_t)Address, i2cData, (uint16_t)num_bytes, I2C_TIMEOUT);
   \   00001CE0   0xF44F 0x73FA      MOV      R3,#+500
   \   00001CE4   0x9834             LDR      R0,[SP, #+208]
   \   00001CE6   0x0002             MOVS     R2,R0
   \   00001CE8   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00001CEA   0xA99A             ADD      R1,SP,#+616
   \   00001CEC   0x9831             LDR      R0,[SP, #+196]
   \   00001CEE   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00001CF0   0x.... 0x....      BL       RoadBrd_I2C_Master_Transmit
   \   00001CF4   0x0006             MOVS     R6,R0
   2153                                          
   2154                                        } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)...NUMBER BYTES
   2155                                        
   2156                                      } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)...Address
   2157                                      
   2158                                    } //EndElse ( (tempBffr[2]!=':') || (tempBffr[5]!='.') )
   2159                                
   2160                                    break;
   \                     ??RoadBrd_ParseString_314: (+1)
   \   00001CF6   0xE1D4             B.N      ??RoadBrd_ParseString_305
   2161          //------------------
   2162                                  case 'R':
   2163                                    //I2C Receive Command
   2164                                    // Step 1. Validate format.
   2165                                    if( (tempBffr[3]!=':') ||
   2166                                        (tempBffr[6]!='.') ||
   2167                                        (tempBffr[9]!='.')  )
   \                     ??RoadBrd_ParseString_309: (+1)
   \   00001CF8   0x78E0             LDRB     R0,[R4, #+3]
   \   00001CFA   0x283A             CMP      R0,#+58
   \   00001CFC   0xD105             BNE.N    ??RoadBrd_ParseString_326
   \   00001CFE   0x79A0             LDRB     R0,[R4, #+6]
   \   00001D00   0x282E             CMP      R0,#+46
   \   00001D02   0xD102             BNE.N    ??RoadBrd_ParseString_326
   \   00001D04   0x7A60             LDRB     R0,[R4, #+9]
   \   00001D06   0x282E             CMP      R0,#+46
   \   00001D08   0xD012             BEQ.N    ??RoadBrd_ParseString_327
   2168                                    {
   2169                                      // Is this a BLE Operation?
   2170                                      if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_326: (+1)
   \   00001D0A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001D0C   0x2D00             CMP      R5,#+0
   \   00001D0E   0xD009             BEQ.N    ??RoadBrd_ParseString_328
   2171                                      {
   2172                                        // Yes...Build and Send BLE Response NOW.
   2173                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001D10   0x49AD             LDR.N    R1,??RoadBrd_ParseString_207+0x4
   \   00001D12   0xA80A             ADD      R0,SP,#+40
   \   00001D14   0x.... 0x....      BL       strcpy
   2174                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001D18   0xA80A             ADD      R0,SP,#+40
   \   00001D1A   0x.... 0x....      BL       strlen
   \   00001D1E   0xA90A             ADD      R1,SP,#+40
   \   00001D20   0x.... 0x....      BL       BGM111_Transmit
   2175                                      }
   2176                                      
   2177                                      strcpy( (char *)tempBffr2, "TIR SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_328: (+1)
   \   00001D24   0xF8DF 0x1DF4      LDR.W    R1,??RoadBrd_ParseString_329
   \   00001D28   0xA80A             ADD      R0,SP,#+40
   \   00001D2A   0x.... 0x....      BL       strcpy
   \   00001D2E   0xE10B             B.N      ??RoadBrd_ParseString_330
   2178                                    }
   2179                                    else
   2180                                    {
   2181                                      // Is this a BLE Operation?
   2182                                      if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_327: (+1)
   \   00001D30   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001D32   0x2D00             CMP      R5,#+0
   \   00001D34   0xD009             BEQ.N    ??RoadBrd_ParseString_331
   2183                                      {
   2184                                        // Yes...Build and Send BLE Response NOW.
   2185                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001D36   0x49A4             LDR.N    R1,??RoadBrd_ParseString_207+0x4
   \   00001D38   0xA80A             ADD      R0,SP,#+40
   \   00001D3A   0x.... 0x....      BL       strcpy
   2186                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001D3E   0xA80A             ADD      R0,SP,#+40
   \   00001D40   0x.... 0x....      BL       strlen
   \   00001D44   0xA90A             ADD      R1,SP,#+40
   \   00001D46   0x.... 0x....      BL       BGM111_Transmit
   2187                                      }
   2188                                      
   2189                                      // 2. Grab Address and validate a legal number
   2190                                      tempBffr3[0] = tempBffr[4];
   \                     ??RoadBrd_ParseString_331: (+1)
   \   00001D4A   0xF994 0x0004      LDRSB    R0,[R4, #+4]
   \   00001D4E   0xF88D 0x00A8      STRB     R0,[SP, #+168]
   2191                                      tempBffr3[1] = tempBffr[5];
   \   00001D52   0xF994 0x0005      LDRSB    R0,[R4, #+5]
   \   00001D56   0xF88D 0x00A9      STRB     R0,[SP, #+169]
   2192                                      tempBffr3[2] = 0x00;
   \   00001D5A   0x2000             MOVS     R0,#+0
   \   00001D5C   0xF88D 0x00AA      STRB     R0,[SP, #+170]
   2193                                      if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001D60   0xA82A             ADD      R0,SP,#+168
   \   00001D62   0x.... 0x....      BL       isHexNum
   \   00001D66   0x2800             CMP      R0,#+0
   \   00001D68   0xD105             BNE.N    ??RoadBrd_ParseString_332
   2194                                        strcpy( (char *)tempBffr2, "TIR SYNTAX ERROR: Address not HEX Value.\r\n");
   \   00001D6A   0xF8DF 0x1E28      LDR.W    R1,??RoadBrd_ParseString_333
   \   00001D6E   0xA80A             ADD      R0,SP,#+40
   \   00001D70   0x.... 0x....      BL       strcpy
   \   00001D74   0xE0E8             B.N      ??RoadBrd_ParseString_330
   2195                                      else
   2196                                      {
   2197                                        // Legal Address. Save it as value
   2198                                        Address = hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_332: (+1)
   \   00001D76   0xA82A             ADD      R0,SP,#+168
   \   00001D78   0x.... 0x....      BL       hatoi
   \   00001D7C   0x9031             STR      R0,[SP, #+196]
   2199                                        // 3. Now get the number of bytes of data from field.
   2200                                        tempBffr3[0] = tempBffr[7];
   \   00001D7E   0xF994 0x0007      LDRSB    R0,[R4, #+7]
   \   00001D82   0xF88D 0x00A8      STRB     R0,[SP, #+168]
   2201                                        tempBffr3[1] = tempBffr[8];
   \   00001D86   0xF994 0x0008      LDRSB    R0,[R4, #+8]
   \   00001D8A   0xF88D 0x00A9      STRB     R0,[SP, #+169]
   2202                                        tempBffr3[2] = 0x00;
   \   00001D8E   0x2000             MOVS     R0,#+0
   \   00001D90   0xF88D 0x00AA      STRB     R0,[SP, #+170]
   2203                                        if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001D94   0xA82A             ADD      R0,SP,#+168
   \   00001D96   0x.... 0x....      BL       isHexNum
   \   00001D9A   0x2800             CMP      R0,#+0
   \   00001D9C   0xD10A             BNE.N    ??RoadBrd_ParseString_334
   2204                                          strcpy( (char *)tempBffr2, "TIR SYNTAX ERROR: Number of Bytes not HEX Value.\r\n");
   \   00001D9E   0xF8DF 0x1DF8      LDR.W    R1,??RoadBrd_ParseString_333+0x4
   \   00001DA2   0xA80A             ADD      R0,SP,#+40
   \   00001DA4   0x.... 0x....      BL       strcpy
   \   00001DA8   0xE0CE             B.N      ??RoadBrd_ParseString_330
   \   00001DAA   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_185:
   \   00001DAC   0x........         DC32     ?_65
   \   00001DB0   0x........         DC32     ?_66
   2205                                        else
   2206                                        {
   2207                                          // Legal NUMBER BYTES. Save it as value
   2208                                          num_bytes = hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_334: (+1)
   \   00001DB4   0xA82A             ADD      R0,SP,#+168
   \   00001DB6   0x.... 0x....      BL       hatoi
   \   00001DBA   0x9034             STR      R0,[SP, #+208]
   2209                                          
   2210                                          // 3a. Now get the number of bytes Received of data from field.
   2211                                          tempBffr3[0] = tempBffr[10];
   \   00001DBC   0xF994 0x000A      LDRSB    R0,[R4, #+10]
   \   00001DC0   0xF88D 0x00A8      STRB     R0,[SP, #+168]
   2212                                          tempBffr3[1] = tempBffr[11];
   \   00001DC4   0xF994 0x000B      LDRSB    R0,[R4, #+11]
   \   00001DC8   0xF88D 0x00A9      STRB     R0,[SP, #+169]
   2213                                          tempBffr3[2] = 0x00;
   \   00001DCC   0x2000             MOVS     R0,#+0
   \   00001DCE   0xF88D 0x00AA      STRB     R0,[SP, #+170]
   2214                                          if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001DD2   0xA82A             ADD      R0,SP,#+168
   \   00001DD4   0x.... 0x....      BL       isHexNum
   \   00001DD8   0x2800             CMP      R0,#+0
   \   00001DDA   0xD105             BNE.N    ??RoadBrd_ParseString_335
   2215                                            strcpy( (char *)tempBffr2, "TIR SYNTAX ERROR: Number of Bytes RECEIVED not HEX Value.\r\n");
   \   00001DDC   0xF8DF 0x1E30      LDR.W    R1,??RoadBrd_ParseString_336
   \   00001DE0   0xA80A             ADD      R0,SP,#+40
   \   00001DE2   0x.... 0x....      BL       strcpy
   \   00001DE6   0xE0AF             B.N      ??RoadBrd_ParseString_330
   2216                                          else
   2217                                          {
   2218                                            // Legal NUMBER BYTES. Save it as value
   2219                                            num_bytes_received = hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_335: (+1)
   \   00001DE8   0xA82A             ADD      R0,SP,#+168
   \   00001DEA   0x.... 0x....      BL       hatoi
   \   00001DEE   0x9039             STR      R0,[SP, #+228]
   2220                                            // 4. Test num_bytes. If Zero, We are done
   2221                                            if (num_bytes == 0)
   \   00001DF0   0x9834             LDR      R0,[SP, #+208]
   \   00001DF2   0x2800             CMP      R0,#+0
   \   00001DF4   0xD106             BNE.N    ??RoadBrd_ParseString_337
   2222                                            {
   2223                                              sprintf( (char *)tempBffr2, "TIR: GOOD CMD: %x.\r\n", Address);
   \   00001DF6   0x9A31             LDR      R2,[SP, #+196]
   \   00001DF8   0xF8DF 0x1E18      LDR.W    R1,??RoadBrd_ParseString_336+0x4
   \   00001DFC   0xA80A             ADD      R0,SP,#+40
   \   00001DFE   0x.... 0x....      BL       sprintf
   \   00001E02   0xE038             B.N      ??RoadBrd_ParseString_338
   2224                                            }
   2225                                            else
   2226                                            {
   2227                                              // 5. Time to get all the data.
   2228                                              Error = 0;
   \                     ??RoadBrd_ParseString_337: (+1)
   \   00001E04   0x2000             MOVS     R0,#+0
   \   00001E06   0x9035             STR      R0,[SP, #+212]
   2229                                              for (x=0; x<num_bytes; x++)
   \   00001E08   0x2000             MOVS     R0,#+0
   \   00001E0A   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_339: (+1)
   \   00001E0C   0x9834             LDR      R0,[SP, #+208]
   \   00001E0E   0x4287             CMP      R7,R0
   \   00001E10   0xDA31             BGE.N    ??RoadBrd_ParseString_338
   2230                                              {
   2231                                                tempBffr3[0] = tempBffr[13+x*3];
   \   00001E12   0x2003             MOVS     R0,#+3
   \   00001E14   0xFB00 0xF007      MUL      R0,R0,R7
   \   00001E18   0x4420             ADD      R0,R4,R0
   \   00001E1A   0xF990 0x000D      LDRSB    R0,[R0, #+13]
   \   00001E1E   0xF88D 0x00A8      STRB     R0,[SP, #+168]
   2232                                                tempBffr3[1] = tempBffr[14+x*3];
   \   00001E22   0x2003             MOVS     R0,#+3
   \   00001E24   0xFB00 0xF007      MUL      R0,R0,R7
   \   00001E28   0x4420             ADD      R0,R4,R0
   \   00001E2A   0xF990 0x000E      LDRSB    R0,[R0, #+14]
   \   00001E2E   0xF88D 0x00A9      STRB     R0,[SP, #+169]
   2233                                                tempBffr3[2] = 0x00;
   \   00001E32   0x2000             MOVS     R0,#+0
   \   00001E34   0xF88D 0x00AA      STRB     R0,[SP, #+170]
   2234                                                if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001E38   0xA82A             ADD      R0,SP,#+168
   \   00001E3A   0x.... 0x....      BL       isHexNum
   \   00001E3E   0x2800             CMP      R0,#+0
   \   00001E40   0xD112             BNE.N    ??RoadBrd_ParseString_340
   2235                                                {
   2236                                                  strcpy( (char *)tempBffr2, "TIR SYNTAX ERROR: Data not HEX Value.\r\n");
   \   00001E42   0xF8DF 0x1DD4      LDR.W    R1,??RoadBrd_ParseString_336+0x8
   \   00001E46   0xA80A             ADD      R0,SP,#+40
   \   00001E48   0x.... 0x....      BL       strcpy
   2237                                                  Error = 1;
   \   00001E4C   0x2001             MOVS     R0,#+1
   \   00001E4E   0x9035             STR      R0,[SP, #+212]
   2238                                                  break;
   \   00001E50   0xE011             B.N      ??RoadBrd_ParseString_338
   \   00001E52   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_190:
   \   00001E54   0x........         DC32     ?_67
   \   00001E58   0x........         DC32     ?_68
   \   00001E5C   0x........         DC32     ?_69
   \   00001E60   0x........         DC32     ?_70
   \   00001E64   0x........         DC32     ?_71
   2239                                                }
   2240                                                else
   2241                                                {
   2242                                                  i2cData[x] =  hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_340: (+1)
   \   00001E68   0xA82A             ADD      R0,SP,#+168
   \   00001E6A   0x.... 0x....      BL       hatoi
   \   00001E6E   0xA99A             ADD      R1,SP,#+616
   \   00001E70   0x55C8             STRB     R0,[R1, R7]
   2243                                                } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)
   2244                                              } //EndFor (x=0; x<num_bytes; x++)
   \   00001E72   0x1C7F             ADDS     R7,R7,#+1
   \   00001E74   0xE7CA             B.N      ??RoadBrd_ParseString_339
   2245                                            } //EndElse (num_bytes == 0)
   2246                                            if (Error==0)
   \                     ??RoadBrd_ParseString_338: (+1)
   \   00001E76   0x9835             LDR      R0,[SP, #+212]
   \   00001E78   0x2800             CMP      R0,#+0
   \   00001E7A   0xD105             BNE.N    ??RoadBrd_ParseString_341
   2247                                            {
   2248                                              sprintf( (char *)tempBffr2, "TIR: GOOD CMD: %x.", Address);
   \   00001E7C   0x9A31             LDR      R2,[SP, #+196]
   \   00001E7E   0xF8DF 0x1E10      LDR.W    R1,??RoadBrd_ParseString_342
   \   00001E82   0xA80A             ADD      R0,SP,#+40
   \   00001E84   0x.... 0x....      BL       sprintf
   2249                                            }
   2250                                            for(x=0; x<num_bytes; x++)
   \                     ??RoadBrd_ParseString_341: (+1)
   \   00001E88   0x2000             MOVS     R0,#+0
   \   00001E8A   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_343: (+1)
   \   00001E8C   0x9834             LDR      R0,[SP, #+208]
   \   00001E8E   0x4287             CMP      R7,R0
   \   00001E90   0xDA0B             BGE.N    ??RoadBrd_ParseString_344
   2251                                            {
   2252                                              sprintf( (char *)tempBffr3, "%x.", i2cData[x]);
   \   00001E92   0xA89A             ADD      R0,SP,#+616
   \   00001E94   0x5DC2             LDRB     R2,[R0, R7]
   \   00001E96   0xA14D             ADR.N    R1,??RoadBrd_ParseString_207+0x8  ;; "%x."
   \   00001E98   0xA82A             ADD      R0,SP,#+168
   \   00001E9A   0x.... 0x....      BL       sprintf
   2253                                              strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   00001E9E   0xA92A             ADD      R1,SP,#+168
   \   00001EA0   0xA80A             ADD      R0,SP,#+40
   \   00001EA2   0x.... 0x....      BL       strcat
   2254                                            }
   \   00001EA6   0x1C7F             ADDS     R7,R7,#+1
   \   00001EA8   0xE7F0             B.N      ??RoadBrd_ParseString_343
   2255                                            strcat( (char *)tempBffr2, "\r\n" );
   \                     ??RoadBrd_ParseString_344: (+1)
   \   00001EAA   0xA149             ADR.N    R1,??RoadBrd_ParseString_207+0xC  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001EAC   0xA80A             ADD      R0,SP,#+40
   \   00001EAE   0x.... 0x....      BL       strcat
   2256                                            // 6. Time to send Command and collect status.
   2257                                            Status =  RoadBrd_I2C_Master_Transmit((uint16_t)Address, i2cData, (uint16_t)num_bytes, I2C_TIMEOUT);
   \   00001EB2   0xF44F 0x73FA      MOV      R3,#+500
   \   00001EB6   0x9834             LDR      R0,[SP, #+208]
   \   00001EB8   0x0002             MOVS     R2,R0
   \   00001EBA   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00001EBC   0xA99A             ADD      R1,SP,#+616
   \   00001EBE   0x9831             LDR      R0,[SP, #+196]
   \   00001EC0   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00001EC2   0x.... 0x....      BL       RoadBrd_I2C_Master_Transmit
   \   00001EC6   0x0006             MOVS     R6,R0
   2258                                            // 6a. Wait for Command to complete(100ms).
   2259           
   2260                                            // 7. If Status was good, Time to get response.
   2261                                            if (Status == HAL_OK)
   \   00001EC8   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001ECA   0x2E00             CMP      R6,#+0
   \   00001ECC   0xD10E             BNE.N    ??RoadBrd_ParseString_345
   2262                                            {
   2263                                              Status =  RoadBrd_I2C_Master_Receive((uint16_t)Address, i2cData, (uint16_t)num_bytes_received, I2C_TIMEOUT);
   \   00001ECE   0xF44F 0x73FA      MOV      R3,#+500
   \   00001ED2   0x9839             LDR      R0,[SP, #+228]
   \   00001ED4   0x0002             MOVS     R2,R0
   \   00001ED6   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00001ED8   0xA99A             ADD      R1,SP,#+616
   \   00001EDA   0x9831             LDR      R0,[SP, #+196]
   \   00001EDC   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00001EDE   0x.... 0x....      BL       RoadBrd_I2C_Master_Receive
   \   00001EE2   0x0006             MOVS     R6,R0
   2264                                            }
   2265                                            else
   2266                                              break;
   2267                                            // 7a. Wait for Command to complete(100ms).
   2268                                            if (Status == HAL_OK)
   \   00001EE4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001EE6   0x2E00             CMP      R6,#+0
   \   00001EE8   0xD105             BNE.N    ??RoadBrd_ParseString_346
   \   00001EEA   0xE000             B.N      ??RoadBrd_ParseString_347
   \                     ??RoadBrd_ParseString_345: (+1)
   \   00001EEC   0xE0D9             B.N      ??RoadBrd_ParseString_305
   2269                                            {
   2270                                              Status = RoadBrd_WaitForState( 20 );
   \                     ??RoadBrd_ParseString_347: (+1)
   \   00001EEE   0x2014             MOVS     R0,#+20
   \   00001EF0   0x.... 0x....      BL       RoadBrd_WaitForState
   \   00001EF4   0x0006             MOVS     R6,R0
   2271                                            }
   2272          
   2273                                            // 8. IfGood report, Need to Output Data.
   2274                                            if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_346: (+1)
   \   00001EF6   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001EF8   0x2E00             CMP      R6,#+0
   \   00001EFA   0xD125             BNE.N    ??RoadBrd_ParseString_330
   2275                                            {
   2276                                              // Send string to UART..
   2277          #ifdef NUCLEO
   2278                                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   2279          #else
   2280                                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00001EFC   0xA90A             ADD      R1,SP,#+40
   \   00001EFE   0x2000             MOVS     R0,#+0
   \   00001F00   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001F04   0x0006             MOVS     R6,R0
   2281          #endif
   2282                                              if (Status != HAL_OK)
   \   00001F06   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001F08   0x2E00             CMP      R6,#+0
   \   00001F0A   0xD003             BEQ.N    ??RoadBrd_ParseString_348
   2283                                                return Status;
   \   00001F0C   0x0030             MOVS     R0,R6
   \   00001F0E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001F10   0xF002 0xBD15      B.W      ??RoadBrd_ParseString_4
   2284                                              // NOW, Build Data String..
   2285                                              sprintf( (char *)tempBffr2, "     DATA: " );
   \                     ??RoadBrd_ParseString_348: (+1)
   \   00001F14   0xF8DF 0x1DF0      LDR.W    R1,??RoadBrd_ParseString_349
   \   00001F18   0xA80A             ADD      R0,SP,#+40
   \   00001F1A   0x.... 0x....      BL       sprintf
   2286                                              for(x=0; x<num_bytes_received; x++)
   \   00001F1E   0x2000             MOVS     R0,#+0
   \   00001F20   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_350: (+1)
   \   00001F22   0x9839             LDR      R0,[SP, #+228]
   \   00001F24   0x4287             CMP      R7,R0
   \   00001F26   0xDA0B             BGE.N    ??RoadBrd_ParseString_351
   2287                                              {
   2288                                                sprintf( (char *)tempBffr3, "%x.", i2cData[x]);
   \   00001F28   0xA89A             ADD      R0,SP,#+616
   \   00001F2A   0x5DC2             LDRB     R2,[R0, R7]
   \   00001F2C   0xA127             ADR.N    R1,??RoadBrd_ParseString_207+0x8  ;; "%x."
   \   00001F2E   0xA82A             ADD      R0,SP,#+168
   \   00001F30   0x.... 0x....      BL       sprintf
   2289                                                strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   00001F34   0xA92A             ADD      R1,SP,#+168
   \   00001F36   0xA80A             ADD      R0,SP,#+40
   \   00001F38   0x.... 0x....      BL       strcat
   2290                                              }
   \   00001F3C   0x1C7F             ADDS     R7,R7,#+1
   \   00001F3E   0xE7F0             B.N      ??RoadBrd_ParseString_350
   2291                                              strcat( (char *)tempBffr2, "\r\n" );
   \                     ??RoadBrd_ParseString_351: (+1)
   \   00001F40   0xA123             ADR.N    R1,??RoadBrd_ParseString_207+0xC  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001F42   0xA80A             ADD      R0,SP,#+40
   \   00001F44   0x.... 0x....      BL       strcat
   2292                                            }
   2293                                          }
   2294                                        } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)...NUMBER BYTES
   2295                                        
   2296                                      } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)...Address
   2297                                      
   2298                                    } //EndElse ( (tempBffr[2]!=':') || (tempBffr[5]!='.') )
   2299                                
   2300                                    break;
   \                     ??RoadBrd_ParseString_330: (+1)
   \   00001F48   0xE0AB             B.N      ??RoadBrd_ParseString_305
   2301          //------------------
   2302                                  case 'Q':
   2303                                    //I2C Receive Command
   2304                                    // Step 1. Validate format.
   2305                                    if( (tempBffr[3]!=':') ||
   2306                                        (tempBffr[6]!='.')  )
   \                     ??RoadBrd_ParseString_306: (+1)
   \   00001F4A   0x78E0             LDRB     R0,[R4, #+3]
   \   00001F4C   0x283A             CMP      R0,#+58
   \   00001F4E   0xD102             BNE.N    ??RoadBrd_ParseString_352
   \   00001F50   0x79A0             LDRB     R0,[R4, #+6]
   \   00001F52   0x282E             CMP      R0,#+46
   \   00001F54   0xD012             BEQ.N    ??RoadBrd_ParseString_353
   2307                                    {
   2308                                      // Is this a BLE Operation?
   2309                                      if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_352: (+1)
   \   00001F56   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001F58   0x2D00             CMP      R5,#+0
   \   00001F5A   0xD009             BEQ.N    ??RoadBrd_ParseString_354
   2310                                      {
   2311                                        // Yes...Build and Send BLE Response NOW.
   2312                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001F5C   0x491A             LDR.N    R1,??RoadBrd_ParseString_207+0x4
   \   00001F5E   0xA80A             ADD      R0,SP,#+40
   \   00001F60   0x.... 0x....      BL       strcpy
   2313                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001F64   0xA80A             ADD      R0,SP,#+40
   \   00001F66   0x.... 0x....      BL       strlen
   \   00001F6A   0xA90A             ADD      R1,SP,#+40
   \   00001F6C   0x.... 0x....      BL       BGM111_Transmit
   2314                                      }
   2315                                      
   2316                                      strcpy( (char *)tempBffr2, "TIQ SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_354: (+1)
   \   00001F70   0xF8DF 0x1E0C      LDR.W    R1,??RoadBrd_ParseString_355
   \   00001F74   0xA80A             ADD      R0,SP,#+40
   \   00001F76   0x.... 0x....      BL       strcpy
   \   00001F7A   0xE08C             B.N      ??RoadBrd_ParseString_356
   2317                                    }
   2318                                    else
   2319                                    {
   2320                                      // Is this a BLE Operation?
   2321                                      if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_353: (+1)
   \   00001F7C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001F7E   0x2D00             CMP      R5,#+0
   \   00001F80   0xD009             BEQ.N    ??RoadBrd_ParseString_357
   2322                                      {
   2323                                        // Yes...Build and Send BLE Response NOW.
   2324                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001F82   0x4911             LDR.N    R1,??RoadBrd_ParseString_207+0x4
   \   00001F84   0xA80A             ADD      R0,SP,#+40
   \   00001F86   0x.... 0x....      BL       strcpy
   2325                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001F8A   0xA80A             ADD      R0,SP,#+40
   \   00001F8C   0x.... 0x....      BL       strlen
   \   00001F90   0xA90A             ADD      R1,SP,#+40
   \   00001F92   0x.... 0x....      BL       BGM111_Transmit
   2326                                      }
   2327                                      
   2328                                      // 2. Grab Address and validate a legal number
   2329                                      tempBffr3[0] = tempBffr[4];
   \                     ??RoadBrd_ParseString_357: (+1)
   \   00001F96   0xF994 0x0004      LDRSB    R0,[R4, #+4]
   \   00001F9A   0xF88D 0x00A8      STRB     R0,[SP, #+168]
   2330                                      tempBffr3[1] = tempBffr[5];
   \   00001F9E   0xF994 0x0005      LDRSB    R0,[R4, #+5]
   \   00001FA2   0xF88D 0x00A9      STRB     R0,[SP, #+169]
   2331                                      tempBffr3[2] = 0x00;
   \   00001FA6   0x2000             MOVS     R0,#+0
   \   00001FA8   0xF88D 0x00AA      STRB     R0,[SP, #+170]
   2332                                      if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001FAC   0xA82A             ADD      R0,SP,#+168
   \   00001FAE   0x.... 0x....      BL       isHexNum
   \   00001FB2   0x2800             CMP      R0,#+0
   \   00001FB4   0xD10E             BNE.N    ??RoadBrd_ParseString_358
   2333                                        strcpy( (char *)tempBffr2, "TIQ SYNTAX ERROR: Address not HEX Value.\r\n");
   \   00001FB6   0xF8DF 0x1DCC      LDR.W    R1,??RoadBrd_ParseString_355+0x4
   \   00001FBA   0xA80A             ADD      R0,SP,#+40
   \   00001FBC   0x.... 0x....      BL       strcpy
   \   00001FC0   0xE069             B.N      ??RoadBrd_ParseString_356
   \   00001FC2   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_207:
   \   00001FC4   0x........         DC32     ?_72
   \   00001FC8   0x........         DC32     ?_24
   \   00001FCC   0x25 0x78          DC8      "%x."
   \              0x2E 0x00    
   \   00001FD0   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
   2334                                      else
   2335                                      {
   2336                                        // Legal Address. Save it as value
   2337                                        Address = hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_358: (+1)
   \   00001FD4   0xA82A             ADD      R0,SP,#+168
   \   00001FD6   0x.... 0x....      BL       hatoi
   \   00001FDA   0x9031             STR      R0,[SP, #+196]
   2338                                        // 3. Now get the number of bytes Received of data from field.
   2339                                        tempBffr3[0] = tempBffr[7];
   \   00001FDC   0xF994 0x0007      LDRSB    R0,[R4, #+7]
   \   00001FE0   0xF88D 0x00A8      STRB     R0,[SP, #+168]
   2340                                        tempBffr3[1] = tempBffr[8];
   \   00001FE4   0xF994 0x0008      LDRSB    R0,[R4, #+8]
   \   00001FE8   0xF88D 0x00A9      STRB     R0,[SP, #+169]
   2341                                        tempBffr3[2] = 0x00;
   \   00001FEC   0x2000             MOVS     R0,#+0
   \   00001FEE   0xF88D 0x00AA      STRB     R0,[SP, #+170]
   2342                                        if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001FF2   0xA82A             ADD      R0,SP,#+168
   \   00001FF4   0x.... 0x....      BL       isHexNum
   \   00001FF8   0x2800             CMP      R0,#+0
   \   00001FFA   0xD105             BNE.N    ??RoadBrd_ParseString_359
   2343                                          strcpy( (char *)tempBffr2, "TIQ SYNTAX ERROR: Number of Bytes not HEX Value.\r\n");
   \   00001FFC   0xF8DF 0x1E24      LDR.W    R1,??RoadBrd_ParseString_360
   \   00002000   0xA80A             ADD      R0,SP,#+40
   \   00002002   0x.... 0x....      BL       strcpy
   \   00002006   0xE046             B.N      ??RoadBrd_ParseString_356
   2344                                        else
   2345                                        {
   2346                                            // Legal NUMBER BYTES. Save it as value
   2347                                            num_bytes_received = hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_359: (+1)
   \   00002008   0xA82A             ADD      R0,SP,#+168
   \   0000200A   0x.... 0x....      BL       hatoi
   \   0000200E   0x9039             STR      R0,[SP, #+228]
   2348                                            // 4. Test num_bytes. If Zero, We are done
   2349                                            sprintf( (char *)tempBffr2, "TIR: GOOD CMD: %x.\r\n", Address);
   \   00002010   0x9A31             LDR      R2,[SP, #+196]
   \   00002012   0xF8DF 0x1C00      LDR.W    R1,??RoadBrd_ParseString_336+0x4
   \   00002016   0xA80A             ADD      R0,SP,#+40
   \   00002018   0x.... 0x....      BL       sprintf
   2350                                            // 7. If Status was good, Time to get response.
   2351                                            Status =  RoadBrd_I2C_Master_Receive((uint16_t)Address, i2cData, (uint16_t)num_bytes_received, I2C_TIMEOUT);
   \   0000201C   0xF44F 0x73FA      MOV      R3,#+500
   \   00002020   0x9839             LDR      R0,[SP, #+228]
   \   00002022   0x0002             MOVS     R2,R0
   \   00002024   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00002026   0xA99A             ADD      R1,SP,#+616
   \   00002028   0x9831             LDR      R0,[SP, #+196]
   \   0000202A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000202C   0x.... 0x....      BL       RoadBrd_I2C_Master_Receive
   \   00002030   0x0006             MOVS     R6,R0
   2352                                            // 7a. Wait for Command to complete(100ms).
   2353                                            if (Status == HAL_OK)
   \   00002032   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002034   0x2E00             CMP      R6,#+0
   \   00002036   0xD107             BNE.N    ??RoadBrd_ParseString_361
   2354                                            {
   2355                                              Status = RoadBrd_WaitForState( 20 );
   \   00002038   0x2014             MOVS     R0,#+20
   \   0000203A   0x.... 0x....      BL       RoadBrd_WaitForState
   \   0000203E   0x0006             MOVS     R6,R0
   2356                                            }
   2357                                            else
   2358                                              break;
   2359                                            // 8. IfGood report, Need to Output Data.
   2360                                            if (Status == HAL_OK)
   \   00002040   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002042   0x2E00             CMP      R6,#+0
   \   00002044   0xD127             BNE.N    ??RoadBrd_ParseString_356
   \   00002046   0xE000             B.N      ??RoadBrd_ParseString_362
   \                     ??RoadBrd_ParseString_361: (+1)
   \   00002048   0xE02B             B.N      ??RoadBrd_ParseString_305
   2361                                            {
   2362                                              // Send string to UART..
   2363          #ifdef NUCLEO
   2364                                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   2365          #else
   2366                                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \                     ??RoadBrd_ParseString_362: (+1)
   \   0000204A   0xA90A             ADD      R1,SP,#+40
   \   0000204C   0x2000             MOVS     R0,#+0
   \   0000204E   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00002052   0x0006             MOVS     R6,R0
   2367          #endif
   2368                                              if (Status != HAL_OK)
   \   00002054   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002056   0x2E00             CMP      R6,#+0
   \   00002058   0xD003             BEQ.N    ??RoadBrd_ParseString_363
   2369                                                return Status;
   \   0000205A   0x0030             MOVS     R0,R6
   \   0000205C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000205E   0xF002 0xBC6E      B.W      ??RoadBrd_ParseString_4
   2370                                              // NOW, Build Data String..
   2371                                              sprintf( (char *)tempBffr2, "     DATA: " );
   \                     ??RoadBrd_ParseString_363: (+1)
   \   00002062   0xF8DF 0x1CA4      LDR.W    R1,??RoadBrd_ParseString_349
   \   00002066   0xA80A             ADD      R0,SP,#+40
   \   00002068   0x.... 0x....      BL       sprintf
   2372                                              for(x=0; x<num_bytes_received; x++)
   \   0000206C   0x2000             MOVS     R0,#+0
   \   0000206E   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_364: (+1)
   \   00002070   0x9839             LDR      R0,[SP, #+228]
   \   00002072   0x4287             CMP      R7,R0
   \   00002074   0xDA0B             BGE.N    ??RoadBrd_ParseString_365
   2373                                              {
   2374                                                sprintf( (char *)tempBffr3, "%x.", i2cData[x]);
   \   00002076   0xA89A             ADD      R0,SP,#+616
   \   00002078   0x5DC2             LDRB     R2,[R0, R7]
   \   0000207A   0xA1D5             ADR.N    R1,??RoadBrd_ParseString_249+0x4  ;; "%x."
   \   0000207C   0xA82A             ADD      R0,SP,#+168
   \   0000207E   0x.... 0x....      BL       sprintf
   2375                                                strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   00002082   0xA92A             ADD      R1,SP,#+168
   \   00002084   0xA80A             ADD      R0,SP,#+40
   \   00002086   0x.... 0x....      BL       strcat
   2376                                              }
   \   0000208A   0x1C7F             ADDS     R7,R7,#+1
   \   0000208C   0xE7F0             B.N      ??RoadBrd_ParseString_364
   2377                                              strcat( (char *)tempBffr2, "\r\n" );
   \                     ??RoadBrd_ParseString_365: (+1)
   \   0000208E   0xA1D1             ADR.N    R1,??RoadBrd_ParseString_249+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00002090   0xA80A             ADD      R0,SP,#+40
   \   00002092   0x.... 0x....      BL       strcat
   2378                                          }
   2379                                        } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)...NUMBER BYTES
   2380                                        
   2381                                      } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)...Address
   2382                                      
   2383                                    } //EndElse ( (tempBffr[2]!=':') || (tempBffr[5]!='.') )
   2384                                
   2385                                    break;
   \                     ??RoadBrd_ParseString_356: (+1)
   \   00002096   0xE004             B.N      ??RoadBrd_ParseString_305
   2386                                  default:
   2387                                    strcpy( (char *)tempBffr2, "ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_307: (+1)
   \   00002098   0xF8DF 0x17A0      LDR.W    R1,??RoadBrd_ParseString_281
   \   0000209C   0xA80A             ADD      R0,SP,#+40
   \   0000209E   0x.... 0x....      BL       strcpy
   2388                                    break;
   2389                                } //EndSwitch ( tempBffr[2] )
   2390                              } //EndElse (Size < 9)
   2391                              break;
   \                     ??RoadBrd_ParseString_305: (+1)
   \   000020A2   0xF002 0xBBC0      B.W      ??RoadBrd_ParseString_290
   \   000020A6   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_215:
   \   000020A8   0x........         DC32     ?_73
   \   000020AC   0x........         DC32     ?_74
   \   000020B0   0x........         DC32     ?_75
   \   000020B4   0x........         DC32     ?_35
   2392          //++++++++++++++++++++++++++++++++++++++++++  Calibration Commands.
   2393                            case 'C':
   2394                              Status = HAL_OK;
   \                     ??RoadBrd_ParseString_291: (+1)
   \   000020B8   0x2000             MOVS     R0,#+0
   \   000020BA   0x0006             MOVS     R6,R0
   2395                              if (Size == 2)
   \   000020BC   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000020C0   0xF1B8 0x0F02      CMP      R8,#+2
   \   000020C4   0xF040 0x80EC      BNE.W    ??RoadBrd_ParseString_366
   2396                              {
   2397                                //------------------ TC Command: Dump Calibration Settings.      
   2398                                // Read Cool Eye/Grid Eye Values.....
   2399                                if ( Get_DriverStates( GRIDEYE_MNTR_TASK ))
   \   000020C8   0x2005             MOVS     R0,#+5
   \   000020CA   0x.... 0x....      BL       Get_DriverStates
   \   000020CE   0x2800             CMP      R0,#+0
   \   000020D0   0xD004             BEQ.N    ??RoadBrd_ParseString_367
   2400                                {
   2401                                  Status = RoadBrd_GridEye_ReadValues_Scaled( &GridMeasure );
   \   000020D2   0xA85B             ADD      R0,SP,#+364
   \   000020D4   0x.... 0x....      BL       RoadBrd_GridEye_ReadValues_Scaled
   \   000020D8   0x0006             MOVS     R6,R0
   \   000020DA   0xE00B             B.N      ??RoadBrd_ParseString_368
   2402                                }
   2403                                else if ( Get_DriverStates( COOLEYE_MNTR_TASK ))
   \                     ??RoadBrd_ParseString_367: (+1)
   \   000020DC   0x2006             MOVS     R0,#+6
   \   000020DE   0x.... 0x....      BL       Get_DriverStates
   \   000020E2   0x2800             CMP      R0,#+0
   \   000020E4   0xD004             BEQ.N    ??RoadBrd_ParseString_369
   2404                                {
   2405                                  Status = RoadBrd_CoolEye_ReadValues_Scaled( &GridMeasure );
   \   000020E6   0xA85B             ADD      R0,SP,#+364
   \   000020E8   0x.... 0x....      BL       RoadBrd_CoolEye_ReadValues_Scaled
   \   000020EC   0x0006             MOVS     R6,R0
   \   000020EE   0xE001             B.N      ??RoadBrd_ParseString_368
   2406                                }
   2407                                else
   2408                                  Status = HAL_ERROR;
   \                     ??RoadBrd_ParseString_369: (+1)
   \   000020F0   0x2001             MOVS     R0,#+1
   \   000020F2   0x0006             MOVS     R6,R0
   2409                                
   2410                                // Is this a BLE Operation?
   2411                                if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_368: (+1)
   \   000020F4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000020F6   0x2E00             CMP      R6,#+0
   \   000020F8   0xF040 0x80B8      BNE.W    ??RoadBrd_ParseString_370
   2412                                {
   2413                                  // OK Next Sensor.
   2414                                  // Read Temperature sensor and return results....Temperature Sensor U10(PCT2075GVJ).  Addr: 0x94
   2415                                  Status = RoadBrd_ReadTemp_Scaled( &TMeasure );
   \   000020FC   0xA83C             ADD      R0,SP,#+240
   \   000020FE   0x.... 0x....      BL       RoadBrd_ReadTemp_Scaled
   \   00002102   0x0006             MOVS     R6,R0
   2416                                  if (Status == HAL_OK)
   \   00002104   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002106   0x2E00             CMP      R6,#+0
   \   00002108   0xF040 0x8098      BNE.W    ??RoadBrd_ParseString_371
   2417                                  {
   2418                                    // OK Next Sensor.
   2419                                    // Read Humidity Sensor sensor and return Humidity results....
   2420                                    Status = RoadBrd_Humidity_ReadHumidity_Scaled( &HMeasure );
   \   0000210C   0xA849             ADD      R0,SP,#+292
   \   0000210E   0x.... 0x....      BL       RoadBrd_Humidity_ReadHumidity_Scaled
   \   00002112   0x0006             MOVS     R6,R0
   2421                                    if (Status == HAL_OK)
   \   00002114   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002116   0x2E00             CMP      R6,#+0
   \   00002118   0xD178             BNE.N    ??RoadBrd_ParseString_372
   2422                                    {
   2423                                      // OK Next Sensor.
   2424                                      //Status = RoadBrd_Barometer_Status( &PRMeasure );
   2425                                      Status = RoadBrd_Baro_ReadPressure_Scaled( &PRPMeasure );
   \   0000211A   0xA8AE             ADD      R0,SP,#+696
   \   0000211C   0x.... 0x....      BL       RoadBrd_Baro_ReadPressure_Scaled
   \   00002120   0x0006             MOVS     R6,R0
   2426                                      if (Status == HAL_OK)
   \   00002122   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002124   0x2E00             CMP      R6,#+0
   \   00002126   0xD159             BNE.N    ??RoadBrd_ParseString_373
   2427                                      {
   2428                                        if ( BLE_Flag )
   \   00002128   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000212A   0x2D00             CMP      R5,#+0
   \   0000212C   0xD025             BEQ.N    ??RoadBrd_ParseString_374
   2429                                        {
   2430                                          // Yes...Build and Send BLE Response NOW.
   2431                                          sprintf( (char *)tempBffr2, "<STATUS>%s//%s//%s//%s//%s//%s//%s//%s//%s//%s//%s//%s</STATUS>", (char *)GridMeasure.GridEye1.TempC,
   2432                                                  (char *)GridMeasure.GridEye2.TempC,
   2433                                                  (char *)GridMeasure.GridEye3.TempC,
   2434                                                  (char *)GridMeasure.GridEye4.TempC,
   2435                                                  (char *)GridMeasure.GridEye5.TempC,
   2436                                                  (char *)GridMeasure.GridEye6.TempC,
   2437                                                  (char *)GridMeasure.GridEye7.TempC,
   2438                                                  (char *)GridMeasure.GridEye8.TempC,
   2439                                                  (char *)GridMeasure.Thermistor.TempC,
   2440                                                  (char *)TMeasure.TempC,
   2441                                                  (char *)HMeasure.Humidity,
   2442                                                  (char *)PRPMeasure.Pressure);
   \   0000212E   0xA8AE             ADD      R0,SP,#+696
   \   00002130   0x9009             STR      R0,[SP, #+36]
   \   00002132   0xA849             ADD      R0,SP,#+292
   \   00002134   0x9008             STR      R0,[SP, #+32]
   \   00002136   0xA83C             ADD      R0,SP,#+240
   \   00002138   0x9007             STR      R0,[SP, #+28]
   \   0000213A   0xA85B             ADD      R0,SP,#+364
   \   0000213C   0x9006             STR      R0,[SP, #+24]
   \   0000213E   0xA88B             ADD      R0,SP,#+556
   \   00002140   0x9005             STR      R0,[SP, #+20]
   \   00002142   0xA885             ADD      R0,SP,#+532
   \   00002144   0x9004             STR      R0,[SP, #+16]
   \   00002146   0xA87F             ADD      R0,SP,#+508
   \   00002148   0x9003             STR      R0,[SP, #+12]
   \   0000214A   0xA879             ADD      R0,SP,#+484
   \   0000214C   0x9002             STR      R0,[SP, #+8]
   \   0000214E   0xA873             ADD      R0,SP,#+460
   \   00002150   0x9001             STR      R0,[SP, #+4]
   \   00002152   0xA86D             ADD      R0,SP,#+436
   \   00002154   0x9000             STR      R0,[SP, #+0]
   \   00002156   0xAB67             ADD      R3,SP,#+412
   \   00002158   0xAA61             ADD      R2,SP,#+388
   \   0000215A   0xF8DF 0x1D8C      LDR.W    R1,??RoadBrd_ParseString_375
   \   0000215E   0xA80A             ADD      R0,SP,#+40
   \   00002160   0x.... 0x....      BL       sprintf
   2443                                          strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00002164   0xF8DF 0x1D84      LDR.W    R1,??RoadBrd_ParseString_375+0x4
   \   00002168   0xA80A             ADD      R0,SP,#+40
   \   0000216A   0x.... 0x....      BL       strcpy
   2444                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000216E   0xA80A             ADD      R0,SP,#+40
   \   00002170   0x.... 0x....      BL       strlen
   \   00002174   0xA90A             ADD      R1,SP,#+40
   \   00002176   0x.... 0x....      BL       BGM111_Transmit
   2445                                        }
   2446                                        
   2447                                        //sprintf( (char *)tempBffr2, "Driver Status: %04x\r\n", DriverStatus );
   2448                                        sprintf( (char *)tempBffr2, "%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\r\n", (char *)GridMeasure.GridEye1.TempC,
   2449                                                (char *)GridMeasure.GridEye2.TempC,
   2450                                                (char *)GridMeasure.GridEye3.TempC,
   2451                                                (char *)GridMeasure.GridEye4.TempC,
   2452                                                (char *)GridMeasure.GridEye5.TempC,
   2453                                                (char *)GridMeasure.GridEye6.TempC,
   2454                                                (char *)GridMeasure.GridEye7.TempC,
   2455                                                (char *)GridMeasure.GridEye8.TempC,
   2456                                                (char *)GridMeasure.Thermistor.TempC,
   2457                                                (char *)TMeasure.TempC,
   2458                                                (char *)HMeasure.Humidity,
   2459                                                (char *)PRPMeasure.Pressure);
   \                     ??RoadBrd_ParseString_374: (+1)
   \   0000217A   0xA8AE             ADD      R0,SP,#+696
   \   0000217C   0x9009             STR      R0,[SP, #+36]
   \   0000217E   0xA849             ADD      R0,SP,#+292
   \   00002180   0x9008             STR      R0,[SP, #+32]
   \   00002182   0xA83C             ADD      R0,SP,#+240
   \   00002184   0x9007             STR      R0,[SP, #+28]
   \   00002186   0xA85B             ADD      R0,SP,#+364
   \   00002188   0x9006             STR      R0,[SP, #+24]
   \   0000218A   0xA88B             ADD      R0,SP,#+556
   \   0000218C   0x9005             STR      R0,[SP, #+20]
   \   0000218E   0xA885             ADD      R0,SP,#+532
   \   00002190   0x9004             STR      R0,[SP, #+16]
   \   00002192   0xA87F             ADD      R0,SP,#+508
   \   00002194   0x9003             STR      R0,[SP, #+12]
   \   00002196   0xA879             ADD      R0,SP,#+484
   \   00002198   0x9002             STR      R0,[SP, #+8]
   \   0000219A   0xA873             ADD      R0,SP,#+460
   \   0000219C   0x9001             STR      R0,[SP, #+4]
   \   0000219E   0xA86D             ADD      R0,SP,#+436
   \   000021A0   0x9000             STR      R0,[SP, #+0]
   \   000021A2   0xAB67             ADD      R3,SP,#+412
   \   000021A4   0xAA61             ADD      R2,SP,#+388
   \   000021A6   0xF8DF 0x1D48      LDR.W    R1,??RoadBrd_ParseString_375+0x8
   \   000021AA   0xA80A             ADD      R0,SP,#+40
   \   000021AC   0x.... 0x....      BL       sprintf
   2460                                        // Send string to UART..
   2461          #ifdef NUCLEO
   2462                                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   2463          #else
   2464                                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000021B0   0xA90A             ADD      R1,SP,#+40
   \   000021B2   0x2000             MOVS     R0,#+0
   \   000021B4   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000021B8   0x0006             MOVS     R6,R0
   2465          #endif
   2466                                        if (Status != HAL_OK)
   \   000021BA   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000021BC   0x2E00             CMP      R6,#+0
   \   000021BE   0xD003             BEQ.N    ??RoadBrd_ParseString_376
   2467                                          return Status;
   \   000021C0   0x0030             MOVS     R0,R6
   \   000021C2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000021C4   0xF002 0xBBBB      B.W      ??RoadBrd_ParseString_4
   2468                                        // NOW, Build Data String..
   2469                                        sprintf( (char *)tempBffr2, "COMPLETE" );
   \                     ??RoadBrd_ParseString_376: (+1)
   \   000021C8   0xF8DF 0x1E38      LDR.W    R1,??RoadBrd_ParseString_377
   \   000021CC   0xA80A             ADD      R0,SP,#+40
   \   000021CE   0x.... 0x....      BL       sprintf
   \   000021D2   0xF001 0xBEA0      B.W      ??RoadBrd_ParseString_378
   \   000021D6   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_222:
   \   000021D8   0x........         DC32     ?_36
   2470                                      } // Endif (Status == HAL_OK) RoadBrd_Baro_ReadPressure
   2471                                      else
   2472                                      {
   2473                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_373: (+1)
   \   000021DC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000021DE   0x2D00             CMP      R5,#+0
   \   000021E0   0xD00A             BEQ.N    ??RoadBrd_ParseString_379
   2474                                        {
   2475                                          // Yes...Build and Send BLE Response NOW.
   2476                                          strcpy( (char *)tempBffr2, "<STATUS>CMD_TC_HWERR_PRESSUE</STATUS>");
   \   000021E2   0xF8DF 0x1E24      LDR.W    R1,??RoadBrd_ParseString_377+0x4
   \   000021E6   0xA80A             ADD      R0,SP,#+40
   \   000021E8   0x.... 0x....      BL       strcpy
   2477                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000021EC   0xA80A             ADD      R0,SP,#+40
   \   000021EE   0x.... 0x....      BL       strlen
   \   000021F2   0xA90A             ADD      R1,SP,#+40
   \   000021F4   0x.... 0x....      BL       BGM111_Transmit
   2478                                        }
   2479                                        
   2480                                        sprintf( (char *)tempBffr2, "Pressure TASKING ERROR!" );
   \                     ??RoadBrd_ParseString_379: (+1)
   \   000021F8   0xF8DF 0x1E10      LDR.W    R1,??RoadBrd_ParseString_377+0x8
   \   000021FC   0xA80A             ADD      R0,SP,#+40
   \   000021FE   0x.... 0x....      BL       sprintf
   \   00002202   0xF001 0xBE88      B.W      ??RoadBrd_ParseString_378
   \   00002206   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_225:
   \   00002208   0x........         DC32     ?_76
   2481                                      } // EndElse (Status == HAL_OK) RoadBrd_Baro_ReadPressure
   2482                                    } // Endif (Status == HAL_OK) RoadBrd_Humidity_ReadHumidity
   2483                                    else
   2484                                    {
   2485                                      if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_372: (+1)
   \   0000220C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000220E   0x2D00             CMP      R5,#+0
   \   00002210   0xD00A             BEQ.N    ??RoadBrd_ParseString_380
   2486                                      {
   2487                                        // Yes...Build and Send BLE Response NOW.
   2488                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_TC_HWERR_HUMIDITY</STATUS>");
   \   00002212   0xF8DF 0x1DFC      LDR.W    R1,??RoadBrd_ParseString_377+0xC
   \   00002216   0xA80A             ADD      R0,SP,#+40
   \   00002218   0x.... 0x....      BL       strcpy
   2489                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000221C   0xA80A             ADD      R0,SP,#+40
   \   0000221E   0x.... 0x....      BL       strlen
   \   00002222   0xA90A             ADD      R1,SP,#+40
   \   00002224   0x.... 0x....      BL       BGM111_Transmit
   2490                                      }
   2491                                      
   2492                                      sprintf( (char *)tempBffr2, "Humidity TASKING ERROR!" );
   \                     ??RoadBrd_ParseString_380: (+1)
   \   00002228   0xF8DF 0x1DE8      LDR.W    R1,??RoadBrd_ParseString_377+0x10
   \   0000222C   0xA80A             ADD      R0,SP,#+40
   \   0000222E   0x.... 0x....      BL       sprintf
   \   00002232   0xF001 0xBE70      B.W      ??RoadBrd_ParseString_378
   \   00002236   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_226:
   \   00002238   0x........         DC32     ?_77
   2493                                    } // EndElse (Status == HAL_OK) RoadBrd_Humidity_ReadHumidity
   2494                                  } // Endif (Status == HAL_OK) RoadBrd_ReadTemp
   2495                                  else
   2496                                  {
   2497                                    if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_371: (+1)
   \   0000223C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000223E   0x2D00             CMP      R5,#+0
   \   00002240   0xD00A             BEQ.N    ??RoadBrd_ParseString_381
   2498                                    {
   2499                                      // Yes...Build and Send BLE Response NOW.
   2500                                      strcpy( (char *)tempBffr2, "<STATUS>CMD_TC_HWERR_TEMPERATURE</STATUS>");
   \   00002242   0xF8DF 0x1DD4      LDR.W    R1,??RoadBrd_ParseString_377+0x14
   \   00002246   0xA80A             ADD      R0,SP,#+40
   \   00002248   0x.... 0x....      BL       strcpy
   2501                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000224C   0xA80A             ADD      R0,SP,#+40
   \   0000224E   0x.... 0x....      BL       strlen
   \   00002252   0xA90A             ADD      R1,SP,#+40
   \   00002254   0x.... 0x....      BL       BGM111_Transmit
   2502                                    }
   2503                                    
   2504                                    sprintf( (char *)tempBffr2, "AMBIENT TEMPERATURE TASKING ERROR!" );
   \                     ??RoadBrd_ParseString_381: (+1)
   \   00002258   0xF8DF 0x1DC0      LDR.W    R1,??RoadBrd_ParseString_377+0x18
   \   0000225C   0xA80A             ADD      R0,SP,#+40
   \   0000225E   0x.... 0x....      BL       sprintf
   \   00002262   0xF001 0xBE58      B.W      ??RoadBrd_ParseString_378
   \   00002266   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_229:
   \   00002268   0x........         DC32     ?_78
   2505                                  } // EndElse (Status == HAL_OK) RoadBrd_ReadTemp
   2506                                } // Endif (Status == HAL_OK) RoadBrd_CoolEye_ReadValues
   2507                                else
   2508                                {
   2509                                  if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_370: (+1)
   \   0000226C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000226E   0x2D00             CMP      R5,#+0
   \   00002270   0xD00A             BEQ.N    ??RoadBrd_ParseString_382
   2510                                  {
   2511                                    // Yes...Build and Send BLE Response NOW.
   2512                                    strcpy( (char *)tempBffr2, "<STATUS>CMD_TC_HWERR_IRTEMP</STATUS>");
   \   00002272   0xF8DF 0x1E40      LDR.W    R1,??RoadBrd_ParseString_383
   \   00002276   0xA80A             ADD      R0,SP,#+40
   \   00002278   0x.... 0x....      BL       strcpy
   2513                                    BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000227C   0xA80A             ADD      R0,SP,#+40
   \   0000227E   0x.... 0x....      BL       strlen
   \   00002282   0xA90A             ADD      R1,SP,#+40
   \   00002284   0x.... 0x....      BL       BGM111_Transmit
   2514                                  }
   2515                                  
   2516                                  sprintf( (char *)tempBffr2, "GRID EYE/COOL EYE TASKING ERROR!" );
   \                     ??RoadBrd_ParseString_382: (+1)
   \   00002288   0xF8DF 0x1E2C      LDR.W    R1,??RoadBrd_ParseString_383+0x4
   \   0000228C   0xA80A             ADD      R0,SP,#+40
   \   0000228E   0x.... 0x....      BL       sprintf
   \   00002292   0xF001 0xBE40      B.W      ??RoadBrd_ParseString_378
   \   00002296   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_231:
   \   00002298   0x........         DC32     ?_79
   \   0000229C   0x........         DC32     ?_80
   2517                                } // EndElse (Status == HAL_OK) RoadBrd_CoolEye_ReadValues
   2518                              }
   2519                              else
   2520                              {
   2521                                switch( tempBffr[2] )
   \                     ??RoadBrd_ParseString_366: (+1)
   \   000022A0   0x78A0             LDRB     R0,[R4, #+2]
   \   000022A2   0x2849             CMP      R0,#+73
   \   000022A4   0xF001 0x860A      BEQ.W    ??RoadBrd_ParseString_384
   \   000022A8   0x2852             CMP      R0,#+82
   \   000022AA   0xF000 0x85E7      BEQ.W    ??RoadBrd_ParseString_385
   \   000022AE   0x2853             CMP      R0,#+83
   \   000022B0   0xD004             BEQ.N    ??RoadBrd_ParseString_386
   \   000022B2   0x2854             CMP      R0,#+84
   \   000022B4   0xF001 0x859D      BEQ.W    ??RoadBrd_ParseString_387
   \   000022B8   0xF001 0xBE2D      B.W      ??RoadBrd_ParseString_378
   2522                                {
   2523                                  //------------------ TCS Command: Calibration Set Command
   2524                                case 'S':
   2525                                  // Step 1. Validate format.
   2526                                  if(tempBffr[3]!=':')
   \                     ??RoadBrd_ParseString_386: (+1)
   \   000022BC   0x78E0             LDRB     R0,[R4, #+3]
   \   000022BE   0x283A             CMP      R0,#+58
   \   000022C0   0xD01A             BEQ.N    ??RoadBrd_ParseString_388
   2527                                  {
   2528                                    // Is this a BLE Operation?
   2529                                    if ( BLE_Flag )
   \   000022C2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000022C4   0x2D00             CMP      R5,#+0
   \   000022C6   0xD00A             BEQ.N    ??RoadBrd_ParseString_389
   2530                                    {
   2531                                      // Yes...Build and Send BLE Response NOW.
   2532                                      strcpy( (char *)tempBffr2, "<STATUS>CMD_TCS_SYNTAX</STATUS>");
   \   000022C8   0xF8DF 0x1DF0      LDR.W    R1,??RoadBrd_ParseString_383+0x8
   \   000022CC   0xA80A             ADD      R0,SP,#+40
   \   000022CE   0x.... 0x....      BL       strcpy
   2533                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000022D2   0xA80A             ADD      R0,SP,#+40
   \   000022D4   0x.... 0x....      BL       strlen
   \   000022D8   0xA90A             ADD      R1,SP,#+40
   \   000022DA   0x.... 0x....      BL       BGM111_Transmit
   2534                                    }
   2535                                    
   2536                                    strcpy( (char *)tempBffr2, "TCS SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_389: (+1)
   \   000022DE   0xF8DF 0x1DE0      LDR.W    R1,??RoadBrd_ParseString_383+0xC
   \   000022E2   0xA80A             ADD      R0,SP,#+40
   \   000022E4   0x.... 0x....      BL       strcpy
   \   000022E8   0xF000 0xBDC6      B.W      ??RoadBrd_ParseString_390
   \                     ??RoadBrd_ParseString_235:
   \   000022EC   0x........         DC32     ?_81
   \   000022F0   0x........         DC32     ?_82
   \   000022F4   0x........         DC32     ?_83
   2537                                  } // Endif (tempBffr[3]!=':')
   2538                                  else
   2539                                  {
   2540                                    // 2. Verify if remaining string is digits
   2541                                    if (Size <= 4)
   \                     ??RoadBrd_ParseString_388: (+1)
   \   000022F8   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000022FC   0xF1B8 0x0F05      CMP      R8,#+5
   \   00002300   0xDA18             BGE.N    ??RoadBrd_ParseString_391
   2542                                    {
   2543                                      // Is this a BLE Operation?
   2544                                      if ( BLE_Flag )
   \   00002302   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002304   0x2D00             CMP      R5,#+0
   \   00002306   0xD00A             BEQ.N    ??RoadBrd_ParseString_392
   2545                                      {
   2546                                        // Yes...Build and Send BLE Response NOW.
   2547                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_TCS_BADPARAM</STATUS>");
   \   00002308   0xF8DF 0x1E4C      LDR.W    R1,??RoadBrd_ParseString_393
   \   0000230C   0xA80A             ADD      R0,SP,#+40
   \   0000230E   0x.... 0x....      BL       strcpy
   2548                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002312   0xA80A             ADD      R0,SP,#+40
   \   00002314   0x.... 0x....      BL       strlen
   \   00002318   0xA90A             ADD      R1,SP,#+40
   \   0000231A   0x.... 0x....      BL       BGM111_Transmit
   2549                                      }
   2550                                      strcpy( (char *)tempBffr2, "TCS SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_392: (+1)
   \   0000231E   0xF8DF 0x1E3C      LDR.W    R1,??RoadBrd_ParseString_393+0x4
   \   00002322   0xA80A             ADD      R0,SP,#+40
   \   00002324   0x.... 0x....      BL       strcpy
   \   00002328   0xF000 0xBDA6      B.W      ??RoadBrd_ParseString_390
   \                     ??RoadBrd_ParseString_236:
   \   0000232C   0x........         DC32     ?_84
   \   00002330   0x........         DC32     ?_85
   2551                                    } // EndIf (Size > 4)
   2552                                    else
   2553                                    {
   2554                                      // 3. Grab remaining string and convert to integer.
   2555                                      tempPstr = &tempBffr[4];
   \                     ??RoadBrd_ParseString_391: (+1)
   \   00002334   0x1D20             ADDS     R0,R4,#+4
   \   00002336   0x9030             STR      R0,[SP, #+192]
   2556                                      strcpy(tempstr, tempPstr);
   \   00002338   0x9930             LDR      R1,[SP, #+192]
   \   0000233A   0xA852             ADD      R0,SP,#+328
   \   0000233C   0x.... 0x....      BL       strcpy
   2557                                      // Time to parse and test remaining string
   2558                                      Scale = 0.0;
   \   00002340   0x2000             MOVS     R0,#+0
   \   00002342   0x9029             STR      R0,[SP, #+164]
   2559                                      Offset = 0.0;
   \   00002344   0x2000             MOVS     R0,#+0
   \   00002346   0x9028             STR      R0,[SP, #+160]
   2560                                      if (sscanf (tempstr, "%s %f %f", uuid, &Scale, &Offset) == 3)
   \   00002348   0xA828             ADD      R0,SP,#+160
   \   0000234A   0x9000             STR      R0,[SP, #+0]
   \   0000234C   0xAB29             ADD      R3,SP,#+164
   \   0000234E   0xAA36             ADD      R2,SP,#+216
   \   00002350   0xF8DF 0x1E0C      LDR.W    R1,??RoadBrd_ParseString_393+0x8
   \   00002354   0xA852             ADD      R0,SP,#+328
   \   00002356   0x.... 0x....      BL       sscanf
   \   0000235A   0x2803             CMP      R0,#+3
   \   0000235C   0xF040 0x857A      BNE.W    ??RoadBrd_ParseString_394
   2561                                      {
   2562                                        sprintf( (char *)tempBffr2, "Parms: %s, %f, %f.\r\n", uuid, Scale, Offset );
   \   00002360   0x9828             LDR      R0,[SP, #+160]
   \   00002362   0x.... 0x....      BL       __aeabi_f2d
   \   00002366   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   0000236A   0x9829             LDR      R0,[SP, #+164]
   \   0000236C   0x.... 0x....      BL       __aeabi_f2d
   \   00002370   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00002374   0xAA36             ADD      R2,SP,#+216
   \   00002376   0xF8DF 0x1DEC      LDR.W    R1,??RoadBrd_ParseString_393+0xC
   \   0000237A   0xA80A             ADD      R0,SP,#+40
   \   0000237C   0x.... 0x....      BL       sprintf
   2563                                        // OK, We have 3 good parameters... NOW Need to determine if UUID is good.
   2564                                        if (strncmp((char *)uuid,"0002",4) == 0) // Shnt_Vltg
   \   00002380   0x2204             MOVS     R2,#+4
   \   00002382   0xF8DF 0x1DE4      LDR.W    R1,??RoadBrd_ParseString_393+0x10
   \   00002386   0xA836             ADD      R0,SP,#+216
   \   00002388   0x.... 0x....      BL       strncmp
   \   0000238C   0x2800             CMP      R0,#+0
   \   0000238E   0xD13A             BNE.N    ??RoadBrd_ParseString_395
   2565                                        {
   2566                                          Status = RoadBrd_CAL_Set_CalItem( CAL_SHNT_VLTG, Offset, Scale);
   \   00002390   0x9A29             LDR      R2,[SP, #+164]
   \   00002392   0x9928             LDR      R1,[SP, #+160]
   \   00002394   0x2000             MOVS     R0,#+0
   \   00002396   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   0000239A   0x0006             MOVS     R6,R0
   2567                                          if (Status == HAL_OK)
   \   0000239C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000239E   0x2E00             CMP      R6,#+0
   \   000023A0   0xD11C             BNE.N    ??RoadBrd_ParseString_396
   2568                                          {
   2569                                            // Is this a BLE Operation?
   2570                                            if ( BLE_Flag )
   \   000023A2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000023A4   0x2D00             CMP      R5,#+0
   \   000023A6   0xD00A             BEQ.N    ??RoadBrd_ParseString_397
   2571                                            {
   2572                                              // Yes...Build and Send BLE Response NOW.
   2573                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_SHNT_VLTG</STATUS>");
   \   000023A8   0xF8DF 0x1E54      LDR.W    R1,??RoadBrd_ParseString_398
   \   000023AC   0xA80A             ADD      R0,SP,#+40
   \   000023AE   0x.... 0x....      BL       strcpy
   2574                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000023B2   0xA80A             ADD      R0,SP,#+40
   \   000023B4   0x.... 0x....      BL       strlen
   \   000023B8   0xA90A             ADD      R1,SP,#+40
   \   000023BA   0x.... 0x....      BL       BGM111_Transmit
   2575                                            }
   2576                                            sprintf( (char *)tempBffr2, "Shnt_Vltg Set COMPLETE.\r\n" );
   \                     ??RoadBrd_ParseString_397: (+1)
   \   000023BE   0xF8DF 0x1E44      LDR.W    R1,??RoadBrd_ParseString_398+0x4
   \   000023C2   0xA80A             ADD      R0,SP,#+40
   \   000023C4   0x.... 0x....      BL       sprintf
   \   000023C8   0xF000 0xBD41      B.W      ??RoadBrd_ParseString_399
   \                     ??RoadBrd_ParseString_249:
   \   000023CC   0x........         DC32     ?_86
   \   000023D0   0x25 0x78          DC8      "%x."
   \              0x2E 0x00    
   \   000023D4   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
   \   000023D8   0x........         DC32     ?_87
   2577                                          }
   2578                                          else
   2579                                          {
   2580                                            // Is this a BLE Operation?
   2581                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_396: (+1)
   \   000023DC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000023DE   0x2D00             CMP      R5,#+0
   \   000023E0   0xD00A             BEQ.N    ??RoadBrd_ParseString_400
   2582                                            {
   2583                                              // Yes...Build and Send BLE Response NOW.
   2584                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_SHNT_VLTG_ERR</STATUS>");
   \   000023E2   0xF8DF 0x1E24      LDR.W    R1,??RoadBrd_ParseString_398+0x8
   \   000023E6   0xA80A             ADD      R0,SP,#+40
   \   000023E8   0x.... 0x....      BL       strcpy
   2585                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000023EC   0xA80A             ADD      R0,SP,#+40
   \   000023EE   0x.... 0x....      BL       strlen
   \   000023F2   0xA90A             ADD      R1,SP,#+40
   \   000023F4   0x.... 0x....      BL       BGM111_Transmit
   2586                                            }
   2587                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_400: (+1)
   \   000023F8   0xF8DF 0x1E10      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   000023FC   0xA80A             ADD      R0,SP,#+40
   \   000023FE   0x.... 0x....      BL       sprintf
   \   00002402   0xF000 0xBD24      B.W      ??RoadBrd_ParseString_399
   2588                                          }
   2589                                        }
   2590                                        else if (strncmp((char *)uuid,"0004",4) == 0) // Current
   \                     ??RoadBrd_ParseString_395: (+1)
   \   00002406   0x2204             MOVS     R2,#+4
   \   00002408   0xF8DF 0x1E04      LDR.W    R1,??RoadBrd_ParseString_398+0x10
   \   0000240C   0xA836             ADD      R0,SP,#+216
   \   0000240E   0x.... 0x....      BL       strncmp
   \   00002412   0x2800             CMP      R0,#+0
   \   00002414   0xD137             BNE.N    ??RoadBrd_ParseString_401
   2591                                        {
   2592                                          Status = RoadBrd_CAL_Set_CalItem( CAL_CURRENT, Offset, Scale);
   \   00002416   0x9A29             LDR      R2,[SP, #+164]
   \   00002418   0x9928             LDR      R1,[SP, #+160]
   \   0000241A   0x2001             MOVS     R0,#+1
   \   0000241C   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002420   0x0006             MOVS     R6,R0
   2593                                          if (Status == HAL_OK)
   \   00002422   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002424   0x2E00             CMP      R6,#+0
   \   00002426   0xD119             BNE.N    ??RoadBrd_ParseString_402
   2594                                          {
   2595                                            // Is this a BLE Operation?
   2596                                            if ( BLE_Flag )
   \   00002428   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000242A   0x2D00             CMP      R5,#+0
   \   0000242C   0xD00A             BEQ.N    ??RoadBrd_ParseString_403
   2597                                            {
   2598                                              // Yes...Build and Send BLE Response NOW.
   2599                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_CURRENT</STATUS>");
   \   0000242E   0xF8DF 0x1DE4      LDR.W    R1,??RoadBrd_ParseString_398+0x14
   \   00002432   0xA80A             ADD      R0,SP,#+40
   \   00002434   0x.... 0x....      BL       strcpy
   2600                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002438   0xA80A             ADD      R0,SP,#+40
   \   0000243A   0x.... 0x....      BL       strlen
   \   0000243E   0xA90A             ADD      R1,SP,#+40
   \   00002440   0x.... 0x....      BL       BGM111_Transmit
   2601                                            }
   2602                                            sprintf( (char *)tempBffr2, "Current Set COMPLETE." );
   \                     ??RoadBrd_ParseString_403: (+1)
   \   00002444   0xF8DF 0x1E64      LDR.W    R1,??RoadBrd_ParseString_404
   \   00002448   0xA80A             ADD      R0,SP,#+40
   \   0000244A   0x.... 0x....      BL       sprintf
   \   0000244E   0xF000 0xBCFE      B.W      ??RoadBrd_ParseString_399
   \   00002452   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_255:
   \   00002454   0x........         DC32     ?_88
   \   00002458   0x........         DC32     ?_89
   2603                                          }
   2604                                          else
   2605                                          {
   2606                                            // Is this a BLE Operation?
   2607                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_402: (+1)
   \   0000245C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000245E   0x2D00             CMP      R5,#+0
   \   00002460   0xD00A             BEQ.N    ??RoadBrd_ParseString_405
   2608                                            {
   2609                                              // Yes...Build and Send BLE Response NOW.
   2610                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_CURRENT_ERR</STATUS>");
   \   00002462   0xF8DF 0x1E4C      LDR.W    R1,??RoadBrd_ParseString_404+0x4
   \   00002466   0xA80A             ADD      R0,SP,#+40
   \   00002468   0x.... 0x....      BL       strcpy
   2611                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000246C   0xA80A             ADD      R0,SP,#+40
   \   0000246E   0x.... 0x....      BL       strlen
   \   00002472   0xA90A             ADD      R1,SP,#+40
   \   00002474   0x.... 0x....      BL       BGM111_Transmit
   2612                                            }
   2613                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_405: (+1)
   \   00002478   0xF8DF 0x1D90      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   0000247C   0xA80A             ADD      R0,SP,#+40
   \   0000247E   0x.... 0x....      BL       sprintf
   \   00002482   0xF000 0xBCE4      B.W      ??RoadBrd_ParseString_399
   2614                                          }
   2615                                        }
   2616                                        else if (strncmp((char *)uuid,"0006",4) == 0) // Power
   \                     ??RoadBrd_ParseString_401: (+1)
   \   00002486   0x2204             MOVS     R2,#+4
   \   00002488   0xF8DF 0x1E28      LDR.W    R1,??RoadBrd_ParseString_404+0x8
   \   0000248C   0xA836             ADD      R0,SP,#+216
   \   0000248E   0x.... 0x....      BL       strncmp
   \   00002492   0x2800             CMP      R0,#+0
   \   00002494   0xD139             BNE.N    ??RoadBrd_ParseString_406
   2617                                        {
   2618                                          Status = RoadBrd_CAL_Set_CalItem( CAL_POWER, Offset, Scale);
   \   00002496   0x9A29             LDR      R2,[SP, #+164]
   \   00002498   0x9928             LDR      R1,[SP, #+160]
   \   0000249A   0x2002             MOVS     R0,#+2
   \   0000249C   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   000024A0   0x0006             MOVS     R6,R0
   2619                                          if (Status == HAL_OK)
   \   000024A2   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000024A4   0x2E00             CMP      R6,#+0
   \   000024A6   0xD11B             BNE.N    ??RoadBrd_ParseString_407
   2620                                          {
   2621                                            // Is this a BLE Operation?
   2622                                            if ( BLE_Flag )
   \   000024A8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000024AA   0x2D00             CMP      R5,#+0
   \   000024AC   0xD00A             BEQ.N    ??RoadBrd_ParseString_408
   2623                                            {
   2624                                              // Yes...Build and Send BLE Response NOW.
   2625                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_POWER</STATUS>");
   \   000024AE   0xF8DF 0x1E08      LDR.W    R1,??RoadBrd_ParseString_404+0xC
   \   000024B2   0xA80A             ADD      R0,SP,#+40
   \   000024B4   0x.... 0x....      BL       strcpy
   2626                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000024B8   0xA80A             ADD      R0,SP,#+40
   \   000024BA   0x.... 0x....      BL       strlen
   \   000024BE   0xA90A             ADD      R1,SP,#+40
   \   000024C0   0x.... 0x....      BL       BGM111_Transmit
   2627                                            }
   2628                                            sprintf( (char *)tempBffr2, "Power Set COMPLETE." );
   \                     ??RoadBrd_ParseString_408: (+1)
   \   000024C4   0xF8DF 0x1DF4      LDR.W    R1,??RoadBrd_ParseString_404+0x10
   \   000024C8   0xA80A             ADD      R0,SP,#+40
   \   000024CA   0x.... 0x....      BL       sprintf
   \   000024CE   0xF000 0xBCBE      B.W      ??RoadBrd_ParseString_399
   \   000024D2   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_258:
   \   000024D4   0x........         DC32     ?_90
   \   000024D8   0x........         DC32     ?_91
   \   000024DC   0x........         DC32     ?_92
   2629                                          }
   2630                                          else
   2631                                          {
   2632                                            // Is this a BLE Operation?
   2633                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_407: (+1)
   \   000024E0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000024E2   0x2D00             CMP      R5,#+0
   \   000024E4   0xD00A             BEQ.N    ??RoadBrd_ParseString_409
   2634                                            {
   2635                                              // Yes...Build and Send BLE Response NOW.
   2636                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_POWER_ERR</STATUS>");
   \   000024E6   0xF8DF 0x1E6C      LDR.W    R1,??RoadBrd_ParseString_410
   \   000024EA   0xA80A             ADD      R0,SP,#+40
   \   000024EC   0x.... 0x....      BL       strcpy
   2637                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000024F0   0xA80A             ADD      R0,SP,#+40
   \   000024F2   0x.... 0x....      BL       strlen
   \   000024F6   0xA90A             ADD      R1,SP,#+40
   \   000024F8   0x.... 0x....      BL       BGM111_Transmit
   2638                                            }
   2639                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_409: (+1)
   \   000024FC   0xF8DF 0x1D0C      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   00002500   0xA80A             ADD      R0,SP,#+40
   \   00002502   0x.... 0x....      BL       sprintf
   \   00002506   0xF000 0xBCA2      B.W      ??RoadBrd_ParseString_399
   2640                                          }
   2641                                        }
   2642                                        else if (strncmp((char *)uuid,"0008",4) == 0) // Voltage
   \                     ??RoadBrd_ParseString_406: (+1)
   \   0000250A   0x2204             MOVS     R2,#+4
   \   0000250C   0xF8DF 0x1E48      LDR.W    R1,??RoadBrd_ParseString_410+0x4
   \   00002510   0xA836             ADD      R0,SP,#+216
   \   00002512   0x.... 0x....      BL       strncmp
   \   00002516   0x2800             CMP      R0,#+0
   \   00002518   0xD139             BNE.N    ??RoadBrd_ParseString_411
   2643                                        {
   2644                                          Status = RoadBrd_CAL_Set_CalItem( CAL_VOLTAGE, Offset, Scale);
   \   0000251A   0x9A29             LDR      R2,[SP, #+164]
   \   0000251C   0x9928             LDR      R1,[SP, #+160]
   \   0000251E   0x2003             MOVS     R0,#+3
   \   00002520   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002524   0x0006             MOVS     R6,R0
   2645                                          if (Status == HAL_OK)
   \   00002526   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002528   0x2E00             CMP      R6,#+0
   \   0000252A   0xD11B             BNE.N    ??RoadBrd_ParseString_412
   2646                                          {
   2647                                            // Is this a BLE Operation?
   2648                                            if ( BLE_Flag )
   \   0000252C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000252E   0x2D00             CMP      R5,#+0
   \   00002530   0xD00A             BEQ.N    ??RoadBrd_ParseString_413
   2649                                            {
   2650                                              // Yes...Build and Send BLE Response NOW.
   2651                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_VOLTAGE</STATUS>");
   \   00002532   0xF8DF 0x1E28      LDR.W    R1,??RoadBrd_ParseString_410+0x8
   \   00002536   0xA80A             ADD      R0,SP,#+40
   \   00002538   0x.... 0x....      BL       strcpy
   2652                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000253C   0xA80A             ADD      R0,SP,#+40
   \   0000253E   0x.... 0x....      BL       strlen
   \   00002542   0xA90A             ADD      R1,SP,#+40
   \   00002544   0x.... 0x....      BL       BGM111_Transmit
   2653                                            }
   2654                                            sprintf( (char *)tempBffr2, "Voltage Set COMPLETE." );
   \                     ??RoadBrd_ParseString_413: (+1)
   \   00002548   0xF8DF 0x1E14      LDR.W    R1,??RoadBrd_ParseString_410+0xC
   \   0000254C   0xA80A             ADD      R0,SP,#+40
   \   0000254E   0x.... 0x....      BL       sprintf
   \   00002552   0xF000 0xBC7C      B.W      ??RoadBrd_ParseString_399
   \   00002556   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_262:
   \   00002558   0x........         DC32     ?_93
   \   0000255C   0x........         DC32     ?_94
   \   00002560   0x........         DC32     ?_95
   2655                                          }
   2656                                          else
   2657                                          {
   2658                                            // Is this a BLE Operation?
   2659                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_412: (+1)
   \   00002564   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002566   0x2D00             CMP      R5,#+0
   \   00002568   0xD00A             BEQ.N    ??RoadBrd_ParseString_414
   2660                                            {
   2661                                              // Yes...Build and Send BLE Response NOW.
   2662                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_VOLTAGE_ERR</STATUS>");
   \   0000256A   0xF8DF 0x1DF8      LDR.W    R1,??RoadBrd_ParseString_410+0x10
   \   0000256E   0xA80A             ADD      R0,SP,#+40
   \   00002570   0x.... 0x....      BL       strcpy
   2663                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002574   0xA80A             ADD      R0,SP,#+40
   \   00002576   0x.... 0x....      BL       strlen
   \   0000257A   0xA90A             ADD      R1,SP,#+40
   \   0000257C   0x.... 0x....      BL       BGM111_Transmit
   2664                                            }
   2665                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_414: (+1)
   \   00002580   0xF8DF 0x1C88      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   00002584   0xA80A             ADD      R0,SP,#+40
   \   00002586   0x.... 0x....      BL       sprintf
   \   0000258A   0xF000 0xBC60      B.W      ??RoadBrd_ParseString_399
   2666                                          }
   2667                                        }
   2668                                        else if (strncmp((char *)uuid,"000A",4) == 0) // TempC
   \                     ??RoadBrd_ParseString_411: (+1)
   \   0000258E   0x2204             MOVS     R2,#+4
   \   00002590   0xF8DF 0x1E68      LDR.W    R1,??RoadBrd_ParseString_415
   \   00002594   0xA836             ADD      R0,SP,#+216
   \   00002596   0x.... 0x....      BL       strncmp
   \   0000259A   0x2800             CMP      R0,#+0
   \   0000259C   0xD139             BNE.N    ??RoadBrd_ParseString_416
   2669                                        {
   2670                                          Status = RoadBrd_CAL_Set_CalItem( CAL_TEMPC, Offset, Scale);
   \   0000259E   0x9A29             LDR      R2,[SP, #+164]
   \   000025A0   0x9928             LDR      R1,[SP, #+160]
   \   000025A2   0x2004             MOVS     R0,#+4
   \   000025A4   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   000025A8   0x0006             MOVS     R6,R0
   2671                                          if (Status == HAL_OK)
   \   000025AA   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000025AC   0x2E00             CMP      R6,#+0
   \   000025AE   0xD11B             BNE.N    ??RoadBrd_ParseString_417
   2672                                          {
   2673                                            // Is this a BLE Operation?
   2674                                            if ( BLE_Flag )
   \   000025B0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000025B2   0x2D00             CMP      R5,#+0
   \   000025B4   0xD00A             BEQ.N    ??RoadBrd_ParseString_418
   2675                                            {
   2676                                              // Yes...Build and Send BLE Response NOW.
   2677                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_TEMPC</STATUS>");
   \   000025B6   0xF8DF 0x1E48      LDR.W    R1,??RoadBrd_ParseString_415+0x4
   \   000025BA   0xA80A             ADD      R0,SP,#+40
   \   000025BC   0x.... 0x....      BL       strcpy
   2678                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000025C0   0xA80A             ADD      R0,SP,#+40
   \   000025C2   0x.... 0x....      BL       strlen
   \   000025C6   0xA90A             ADD      R1,SP,#+40
   \   000025C8   0x.... 0x....      BL       BGM111_Transmit
   2679                                            }
   2680                                            sprintf( (char *)tempBffr2, "TempC Set COMPLETE." );
   \                     ??RoadBrd_ParseString_418: (+1)
   \   000025CC   0xF8DF 0x1E34      LDR.W    R1,??RoadBrd_ParseString_415+0x8
   \   000025D0   0xA80A             ADD      R0,SP,#+40
   \   000025D2   0x.... 0x....      BL       sprintf
   \   000025D6   0xF000 0xBC3A      B.W      ??RoadBrd_ParseString_399
   \   000025DA   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_266:
   \   000025DC   0x........         DC32     ?_96
   \   000025E0   0x........         DC32     ?_97
   \   000025E4   0x........         DC32     ?_98
   2681                                          }
   2682                                          else
   2683                                          {
   2684                                            // Is this a BLE Operation?
   2685                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_417: (+1)
   \   000025E8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000025EA   0x2D00             CMP      R5,#+0
   \   000025EC   0xD00A             BEQ.N    ??RoadBrd_ParseString_419
   2686                                            {
   2687                                              // Yes...Build and Send BLE Response NOW.
   2688                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_TEMPC_ERR</STATUS>");
   \   000025EE   0xF8DF 0x1E18      LDR.W    R1,??RoadBrd_ParseString_415+0xC
   \   000025F2   0xA80A             ADD      R0,SP,#+40
   \   000025F4   0x.... 0x....      BL       strcpy
   2689                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000025F8   0xA80A             ADD      R0,SP,#+40
   \   000025FA   0x.... 0x....      BL       strlen
   \   000025FE   0xA90A             ADD      R1,SP,#+40
   \   00002600   0x.... 0x....      BL       BGM111_Transmit
   2690                                            }
   2691                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_419: (+1)
   \   00002604   0xF8DF 0x1C04      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   00002608   0xA80A             ADD      R0,SP,#+40
   \   0000260A   0x.... 0x....      BL       sprintf
   \   0000260E   0xF000 0xBC1E      B.W      ??RoadBrd_ParseString_399
   2692                                          }
   2693                                        }
   2694                                        else if (strncmp((char *)uuid,"000B",4) == 0) // TempF
   \                     ??RoadBrd_ParseString_416: (+1)
   \   00002612   0x2204             MOVS     R2,#+4
   \   00002614   0xF8DF 0x1DF4      LDR.W    R1,??RoadBrd_ParseString_415+0x10
   \   00002618   0xA836             ADD      R0,SP,#+216
   \   0000261A   0x.... 0x....      BL       strncmp
   \   0000261E   0x2800             CMP      R0,#+0
   \   00002620   0xD131             BNE.N    ??RoadBrd_ParseString_420
   2695                                        {
   2696                                          Status = RoadBrd_CAL_Set_CalItem( CAL_TEMPF, Offset, Scale);
   \   00002622   0x9A29             LDR      R2,[SP, #+164]
   \   00002624   0x9928             LDR      R1,[SP, #+160]
   \   00002626   0x2005             MOVS     R0,#+5
   \   00002628   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   0000262C   0x0006             MOVS     R6,R0
   2697                                          if (Status == HAL_OK)
   \   0000262E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002630   0x2E00             CMP      R6,#+0
   \   00002632   0xD114             BNE.N    ??RoadBrd_ParseString_421
   2698                                          {
   2699                                            // Is this a BLE Operation?
   2700                                            if ( BLE_Flag )
   \   00002634   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002636   0x2D00             CMP      R5,#+0
   \   00002638   0xD00A             BEQ.N    ??RoadBrd_ParseString_422
   2701                                            {
   2702                                              // Yes...Build and Send BLE Response NOW.
   2703                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_TEMPF</STATUS>");
   \   0000263A   0xF8DF 0x1E68      LDR.W    R1,??RoadBrd_ParseString_423
   \   0000263E   0xA80A             ADD      R0,SP,#+40
   \   00002640   0x.... 0x....      BL       strcpy
   2704                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002644   0xA80A             ADD      R0,SP,#+40
   \   00002646   0x.... 0x....      BL       strlen
   \   0000264A   0xA90A             ADD      R1,SP,#+40
   \   0000264C   0x.... 0x....      BL       BGM111_Transmit
   2705                                            }
   2706                                            sprintf( (char *)tempBffr2, "TempF Set COMPLETE." );
   \                     ??RoadBrd_ParseString_422: (+1)
   \   00002650   0xF8DF 0x1E54      LDR.W    R1,??RoadBrd_ParseString_423+0x4
   \   00002654   0xA80A             ADD      R0,SP,#+40
   \   00002656   0x.... 0x....      BL       sprintf
   \   0000265A   0xF000 0xBBF8      B.W      ??RoadBrd_ParseString_399
   2707                                          }
   2708                                          else
   2709                                          {
   2710                                            // Is this a BLE Operation?
   2711                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_421: (+1)
   \   0000265E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002660   0x2D00             CMP      R5,#+0
   \   00002662   0xD00A             BEQ.N    ??RoadBrd_ParseString_424
   2712                                            {
   2713                                              // Yes...Build and Send BLE Response NOW.
   2714                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_TEMPF_ERR</STATUS>");
   \   00002664   0xF8DF 0x1E44      LDR.W    R1,??RoadBrd_ParseString_423+0x8
   \   00002668   0xA80A             ADD      R0,SP,#+40
   \   0000266A   0x.... 0x....      BL       strcpy
   2715                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000266E   0xA80A             ADD      R0,SP,#+40
   \   00002670   0x.... 0x....      BL       strlen
   \   00002674   0xA90A             ADD      R1,SP,#+40
   \   00002676   0x.... 0x....      BL       BGM111_Transmit
   2716                                            }
   2717                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_424: (+1)
   \   0000267A   0xF8DF 0x1B90      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   0000267E   0xA80A             ADD      R0,SP,#+40
   \   00002680   0x.... 0x....      BL       sprintf
   \   00002684   0xE3E3             B.N      ??RoadBrd_ParseString_399
   2718                                          }
   2719                                        }
   2720                                        else if (strncmp((char *)uuid,"0011",4) == 0) // Pressure
   \                     ??RoadBrd_ParseString_420: (+1)
   \   00002686   0x2204             MOVS     R2,#+4
   \   00002688   0xF8DF 0x1E24      LDR.W    R1,??RoadBrd_ParseString_423+0xC
   \   0000268C   0xA836             ADD      R0,SP,#+216
   \   0000268E   0x.... 0x....      BL       strncmp
   \   00002692   0x2800             CMP      R0,#+0
   \   00002694   0xD130             BNE.N    ??RoadBrd_ParseString_425
   2721                                        {
   2722                                          Status = RoadBrd_CAL_Set_CalItem( CAL_PRESSURE, Offset, Scale);
   \   00002696   0x9A29             LDR      R2,[SP, #+164]
   \   00002698   0x9928             LDR      R1,[SP, #+160]
   \   0000269A   0x2006             MOVS     R0,#+6
   \   0000269C   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   000026A0   0x0006             MOVS     R6,R0
   2723                                          if (Status == HAL_OK)
   \   000026A2   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000026A4   0x2E00             CMP      R6,#+0
   \   000026A6   0xD113             BNE.N    ??RoadBrd_ParseString_426
   2724                                          {
   2725                                            // Is this a BLE Operation?
   2726                                            if ( BLE_Flag )
   \   000026A8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000026AA   0x2D00             CMP      R5,#+0
   \   000026AC   0xD00A             BEQ.N    ??RoadBrd_ParseString_427
   2727                                            {
   2728                                              // Yes...Build and Send BLE Response NOW.
   2729                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_PRESSURE</STATUS>");
   \   000026AE   0xF8DF 0x1E04      LDR.W    R1,??RoadBrd_ParseString_423+0x10
   \   000026B2   0xA80A             ADD      R0,SP,#+40
   \   000026B4   0x.... 0x....      BL       strcpy
   2730                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000026B8   0xA80A             ADD      R0,SP,#+40
   \   000026BA   0x.... 0x....      BL       strlen
   \   000026BE   0xA90A             ADD      R1,SP,#+40
   \   000026C0   0x.... 0x....      BL       BGM111_Transmit
   2731                                            }
   2732                                            sprintf( (char *)tempBffr2, "Pressure Set COMPLETE." );
   \                     ??RoadBrd_ParseString_427: (+1)
   \   000026C4   0xF8DF 0x1E84      LDR.W    R1,??RoadBrd_ParseString_428
   \   000026C8   0xA80A             ADD      R0,SP,#+40
   \   000026CA   0x.... 0x....      BL       sprintf
   \   000026CE   0xE3BE             B.N      ??RoadBrd_ParseString_399
   2733                                          }
   2734                                          else
   2735                                          {
   2736                                            // Is this a BLE Operation?
   2737                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_426: (+1)
   \   000026D0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000026D2   0x2D00             CMP      R5,#+0
   \   000026D4   0xD00A             BEQ.N    ??RoadBrd_ParseString_429
   2738                                            {
   2739                                              // Yes...Build and Send BLE Response NOW.
   2740                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_PRESSURE_ERR</STATUS>");
   \   000026D6   0xF8DF 0x1E78      LDR.W    R1,??RoadBrd_ParseString_428+0x4
   \   000026DA   0xA80A             ADD      R0,SP,#+40
   \   000026DC   0x.... 0x....      BL       strcpy
   2741                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000026E0   0xA80A             ADD      R0,SP,#+40
   \   000026E2   0x.... 0x....      BL       strlen
   \   000026E6   0xA90A             ADD      R1,SP,#+40
   \   000026E8   0x.... 0x....      BL       BGM111_Transmit
   2742                                            }
   2743                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_429: (+1)
   \   000026EC   0xF8DF 0x1B1C      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   000026F0   0xA80A             ADD      R0,SP,#+40
   \   000026F2   0x.... 0x....      BL       sprintf
   \   000026F6   0xE3AA             B.N      ??RoadBrd_ParseString_399
   2744                                          }
   2745                                        }
   2746                                        else if (strncmp((char *)uuid,"0030",4) == 0) // Humidity
   \                     ??RoadBrd_ParseString_425: (+1)
   \   000026F8   0x2204             MOVS     R2,#+4
   \   000026FA   0xF8DF 0x1E58      LDR.W    R1,??RoadBrd_ParseString_428+0x8
   \   000026FE   0xA836             ADD      R0,SP,#+216
   \   00002700   0x.... 0x....      BL       strncmp
   \   00002704   0x2800             CMP      R0,#+0
   \   00002706   0xD135             BNE.N    ??RoadBrd_ParseString_430
   2747                                        {
   2748                                          Status = RoadBrd_CAL_Set_CalItem( CAL_HUMIDITY, Offset, Scale);
   \   00002708   0x9A29             LDR      R2,[SP, #+164]
   \   0000270A   0x9928             LDR      R1,[SP, #+160]
   \   0000270C   0x2007             MOVS     R0,#+7
   \   0000270E   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002712   0x0006             MOVS     R6,R0
   2749                                          if (Status == HAL_OK)
   \   00002714   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002716   0x2E00             CMP      R6,#+0
   \   00002718   0xD118             BNE.N    ??RoadBrd_ParseString_431
   2750                                          {
   2751                                            // Is this a BLE Operation?
   2752                                            if ( BLE_Flag )
   \   0000271A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000271C   0x2D00             CMP      R5,#+0
   \   0000271E   0xD00A             BEQ.N    ??RoadBrd_ParseString_432
   2753                                            {
   2754                                              // Yes...Build and Send BLE Response NOW.
   2755                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_HUMIDITY</STATUS>");
   \   00002720   0xF8DF 0x1E34      LDR.W    R1,??RoadBrd_ParseString_428+0xC
   \   00002724   0xA80A             ADD      R0,SP,#+40
   \   00002726   0x.... 0x....      BL       strcpy
   2756                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000272A   0xA80A             ADD      R0,SP,#+40
   \   0000272C   0x.... 0x....      BL       strlen
   \   00002730   0xA90A             ADD      R1,SP,#+40
   \   00002732   0x.... 0x....      BL       BGM111_Transmit
   2757                                            }
   2758                                            sprintf( (char *)tempBffr2, "Humidity Set COMPLETE." );
   \                     ??RoadBrd_ParseString_432: (+1)
   \   00002736   0xF8DF 0x1E24      LDR.W    R1,??RoadBrd_ParseString_428+0x10
   \   0000273A   0xA80A             ADD      R0,SP,#+40
   \   0000273C   0x.... 0x....      BL       sprintf
   \   00002740   0xE385             B.N      ??RoadBrd_ParseString_399
   \   00002742   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_275:
   \   00002744   0x........         DC32     ?_99
   \   00002748   0x........         DC32     ?_100
   2759                                          }
   2760                                          else
   2761                                          {
   2762                                            // Is this a BLE Operation?
   2763                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_431: (+1)
   \   0000274C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000274E   0x2D00             CMP      R5,#+0
   \   00002750   0xD00A             BEQ.N    ??RoadBrd_ParseString_433
   2764                                            {
   2765                                              // Yes...Build and Send BLE Response NOW.
   2766                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_HUMIDITY_ERR</STATUS>");
   \   00002752   0xF8DF 0x1E9C      LDR.W    R1,??RoadBrd_ParseString_434
   \   00002756   0xA80A             ADD      R0,SP,#+40
   \   00002758   0x.... 0x....      BL       strcpy
   2767                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000275C   0xA80A             ADD      R0,SP,#+40
   \   0000275E   0x.... 0x....      BL       strlen
   \   00002762   0xA90A             ADD      R1,SP,#+40
   \   00002764   0x.... 0x....      BL       BGM111_Transmit
   2768                                            }
   2769                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_433: (+1)
   \   00002768   0xF8DF 0x1AA0      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   0000276C   0xA80A             ADD      R0,SP,#+40
   \   0000276E   0x.... 0x....      BL       sprintf
   \   00002772   0xE36C             B.N      ??RoadBrd_ParseString_399
   2770                                          }
   2771                                        }
   2772                                        else if (strncmp((char *)uuid,"0032",4) == 0) // Hum_TempC
   \                     ??RoadBrd_ParseString_430: (+1)
   \   00002774   0x2204             MOVS     R2,#+4
   \   00002776   0xF8DF 0x1E7C      LDR.W    R1,??RoadBrd_ParseString_434+0x4
   \   0000277A   0xA836             ADD      R0,SP,#+216
   \   0000277C   0x.... 0x....      BL       strncmp
   \   00002780   0x2800             CMP      R0,#+0
   \   00002782   0xD135             BNE.N    ??RoadBrd_ParseString_435
   2773                                        {
   2774                                          Status = RoadBrd_CAL_Set_CalItem( CAL_HUM_TEMPC, Offset, Scale);
   \   00002784   0x9A29             LDR      R2,[SP, #+164]
   \   00002786   0x9928             LDR      R1,[SP, #+160]
   \   00002788   0x2008             MOVS     R0,#+8
   \   0000278A   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   0000278E   0x0006             MOVS     R6,R0
   2775                                          if (Status == HAL_OK)
   \   00002790   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002792   0x2E00             CMP      R6,#+0
   \   00002794   0xD118             BNE.N    ??RoadBrd_ParseString_436
   2776                                          {
   2777                                            // Is this a BLE Operation?
   2778                                            if ( BLE_Flag )
   \   00002796   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002798   0x2D00             CMP      R5,#+0
   \   0000279A   0xD00A             BEQ.N    ??RoadBrd_ParseString_437
   2779                                            {
   2780                                              // Yes...Build and Send BLE Response NOW.
   2781                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_HUM_TEMPC</STATUS>");
   \   0000279C   0xF8DF 0x1E58      LDR.W    R1,??RoadBrd_ParseString_434+0x8
   \   000027A0   0xA80A             ADD      R0,SP,#+40
   \   000027A2   0x.... 0x....      BL       strcpy
   2782                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000027A6   0xA80A             ADD      R0,SP,#+40
   \   000027A8   0x.... 0x....      BL       strlen
   \   000027AC   0xA90A             ADD      R1,SP,#+40
   \   000027AE   0x.... 0x....      BL       BGM111_Transmit
   2783                                            }
   2784                                            sprintf( (char *)tempBffr2, "Hum_TempC Set COMPLETE." );
   \                     ??RoadBrd_ParseString_437: (+1)
   \   000027B2   0xF8DF 0x1E48      LDR.W    R1,??RoadBrd_ParseString_434+0xC
   \   000027B6   0xA80A             ADD      R0,SP,#+40
   \   000027B8   0x.... 0x....      BL       sprintf
   \   000027BC   0xE347             B.N      ??RoadBrd_ParseString_399
   \   000027BE   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_278:
   \   000027C0   0x........         DC32     ?_101
   \   000027C4   0x........         DC32     ?_102
   2785                                          }
   2786                                          else
   2787                                          {
   2788                                            // Is this a BLE Operation?
   2789                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_436: (+1)
   \   000027C8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000027CA   0x2D00             CMP      R5,#+0
   \   000027CC   0xD00A             BEQ.N    ??RoadBrd_ParseString_438
   2790                                            {
   2791                                              // Yes...Build and Send BLE Response NOW.
   2792                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_HUM_TEMPC_ERR</STATUS>");
   \   000027CE   0xF8DF 0x1E30      LDR.W    R1,??RoadBrd_ParseString_434+0x10
   \   000027D2   0xA80A             ADD      R0,SP,#+40
   \   000027D4   0x.... 0x....      BL       strcpy
   2793                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000027D8   0xA80A             ADD      R0,SP,#+40
   \   000027DA   0x.... 0x....      BL       strlen
   \   000027DE   0xA90A             ADD      R1,SP,#+40
   \   000027E0   0x.... 0x....      BL       BGM111_Transmit
   2794                                            }
   2795                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_438: (+1)
   \   000027E4   0xF8DF 0x1A24      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   000027E8   0xA80A             ADD      R0,SP,#+40
   \   000027EA   0x.... 0x....      BL       sprintf
   \   000027EE   0xE32E             B.N      ??RoadBrd_ParseString_399
   2796                                          }
   2797                                        }
   2798                                        else if (strncmp((char *)uuid,"0033",4) == 0) // Hum_TempF
   \                     ??RoadBrd_ParseString_435: (+1)
   \   000027F0   0x2204             MOVS     R2,#+4
   \   000027F2   0xF8DF 0x1EA0      LDR.W    R1,??RoadBrd_ParseString_439
   \   000027F6   0xA836             ADD      R0,SP,#+216
   \   000027F8   0x.... 0x....      BL       strncmp
   \   000027FC   0x2800             CMP      R0,#+0
   \   000027FE   0xD139             BNE.N    ??RoadBrd_ParseString_440
   2799                                        {
   2800                                          Status = RoadBrd_CAL_Set_CalItem( CAL_HUM_TEMPF, Offset, Scale);
   \   00002800   0x9A29             LDR      R2,[SP, #+164]
   \   00002802   0x9928             LDR      R1,[SP, #+160]
   \   00002804   0x2009             MOVS     R0,#+9
   \   00002806   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   0000280A   0x0006             MOVS     R6,R0
   2801                                          if (Status == HAL_OK)
   \   0000280C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000280E   0x2E00             CMP      R6,#+0
   \   00002810   0xD11C             BNE.N    ??RoadBrd_ParseString_441
   2802                                          {
   2803                                            // Is this a BLE Operation?
   2804                                            if ( BLE_Flag )
   \   00002812   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002814   0x2D00             CMP      R5,#+0
   \   00002816   0xD00A             BEQ.N    ??RoadBrd_ParseString_442
   2805                                            {
   2806                                              // Yes...Build and Send BLE Response NOW.
   2807                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_HUM_TEMPF</STATUS>");
   \   00002818   0xF8DF 0x1E7C      LDR.W    R1,??RoadBrd_ParseString_439+0x4
   \   0000281C   0xA80A             ADD      R0,SP,#+40
   \   0000281E   0x.... 0x....      BL       strcpy
   2808                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002822   0xA80A             ADD      R0,SP,#+40
   \   00002824   0x.... 0x....      BL       strlen
   \   00002828   0xA90A             ADD      R1,SP,#+40
   \   0000282A   0x.... 0x....      BL       BGM111_Transmit
   2809                                            }
   2810                                            sprintf( (char *)tempBffr2, "Hum_TempF Set COMPLETE." );
   \                     ??RoadBrd_ParseString_442: (+1)
   \   0000282E   0xF8DF 0x1E6C      LDR.W    R1,??RoadBrd_ParseString_439+0x8
   \   00002832   0xA80A             ADD      R0,SP,#+40
   \   00002834   0x.... 0x....      BL       sprintf
   \   00002838   0xE309             B.N      ??RoadBrd_ParseString_399
   \   0000283A   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_281:
   \   0000283C   0x........         DC32     ?_41
   \   00002840   0x........         DC32     ?_103
   \   00002844   0x........         DC32     ?_104
   \   00002848   0x........         DC32     ?_105
   2811                                          }
   2812                                          else
   2813                                          {
   2814                                            // Is this a BLE Operation?
   2815                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_441: (+1)
   \   0000284C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000284E   0x2D00             CMP      R5,#+0
   \   00002850   0xD00A             BEQ.N    ??RoadBrd_ParseString_443
   2816                                            {
   2817                                              // Yes...Build and Send BLE Response NOW.
   2818                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_HUM_TEMPF_ERR</STATUS>");
   \   00002852   0xF8DF 0x1E4C      LDR.W    R1,??RoadBrd_ParseString_439+0xC
   \   00002856   0xA80A             ADD      R0,SP,#+40
   \   00002858   0x.... 0x....      BL       strcpy
   2819                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000285C   0xA80A             ADD      R0,SP,#+40
   \   0000285E   0x.... 0x....      BL       strlen
   \   00002862   0xA90A             ADD      R1,SP,#+40
   \   00002864   0x.... 0x....      BL       BGM111_Transmit
   2820                                            }
   2821                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_443: (+1)
   \   00002868   0xF8DF 0x19A0      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   0000286C   0xA80A             ADD      R0,SP,#+40
   \   0000286E   0x.... 0x....      BL       sprintf
   \   00002872   0xE2EC             B.N      ??RoadBrd_ParseString_399
   2822                                          }
   2823                                        }
   2824                                        else if (strncmp((char *)uuid,"000D",4) == 0) // RGB_Red
   \                     ??RoadBrd_ParseString_440: (+1)
   \   00002874   0x2204             MOVS     R2,#+4
   \   00002876   0xF8DF 0x1E2C      LDR.W    R1,??RoadBrd_ParseString_439+0x10
   \   0000287A   0xA836             ADD      R0,SP,#+216
   \   0000287C   0x.... 0x....      BL       strncmp
   \   00002880   0x2800             CMP      R0,#+0
   \   00002882   0xD133             BNE.N    ??RoadBrd_ParseString_444
   2825                                        {
   2826                                          Status = RoadBrd_CAL_Set_CalItem( CAL_RGB_RED, Offset, Scale);
   \   00002884   0x9A29             LDR      R2,[SP, #+164]
   \   00002886   0x9928             LDR      R1,[SP, #+160]
   \   00002888   0x200A             MOVS     R0,#+10
   \   0000288A   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   0000288E   0x0006             MOVS     R6,R0
   2827                                          if (Status == HAL_OK)
   \   00002890   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002892   0x2E00             CMP      R6,#+0
   \   00002894   0xD116             BNE.N    ??RoadBrd_ParseString_445
   2828                                          {
   2829                                            // Is this a BLE Operation?
   2830                                            if ( BLE_Flag )
   \   00002896   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002898   0x2D00             CMP      R5,#+0
   \   0000289A   0xD00A             BEQ.N    ??RoadBrd_ParseString_446
   2831                                            {
   2832                                              // Yes...Build and Send BLE Response NOW.
   2833                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_RGB_RED</STATUS>");
   \   0000289C   0xF8DF 0x1E98      LDR.W    R1,??RoadBrd_ParseString_447
   \   000028A0   0xA80A             ADD      R0,SP,#+40
   \   000028A2   0x.... 0x....      BL       strcpy
   2834                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000028A6   0xA80A             ADD      R0,SP,#+40
   \   000028A8   0x.... 0x....      BL       strlen
   \   000028AC   0xA90A             ADD      R1,SP,#+40
   \   000028AE   0x.... 0x....      BL       BGM111_Transmit
   2835                                            }
   2836                                            sprintf( (char *)tempBffr2, "RGB_Red Set COMPLETE." );
   \                     ??RoadBrd_ParseString_446: (+1)
   \   000028B2   0xF8DF 0x1E88      LDR.W    R1,??RoadBrd_ParseString_447+0x4
   \   000028B6   0xA80A             ADD      R0,SP,#+40
   \   000028B8   0x.... 0x....      BL       sprintf
   \   000028BC   0xE2C7             B.N      ??RoadBrd_ParseString_399
   \   000028BE   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_289:
   \   000028C0   0x........         DC32     ?_106
   2837                                          }
   2838                                          else
   2839                                          {
   2840                                            // Is this a BLE Operation?
   2841                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_445: (+1)
   \   000028C4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000028C6   0x2D00             CMP      R5,#+0
   \   000028C8   0xD00A             BEQ.N    ??RoadBrd_ParseString_448
   2842                                            {
   2843                                              // Yes...Build and Send BLE Response NOW.
   2844                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_RGB_RED_ERR</STATUS>");
   \   000028CA   0xF8DF 0x1E74      LDR.W    R1,??RoadBrd_ParseString_447+0x8
   \   000028CE   0xA80A             ADD      R0,SP,#+40
   \   000028D0   0x.... 0x....      BL       strcpy
   2845                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000028D4   0xA80A             ADD      R0,SP,#+40
   \   000028D6   0x.... 0x....      BL       strlen
   \   000028DA   0xA90A             ADD      R1,SP,#+40
   \   000028DC   0x.... 0x....      BL       BGM111_Transmit
   2846                                            }
   2847                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_448: (+1)
   \   000028E0   0xF8DF 0x1928      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   000028E4   0xA80A             ADD      R0,SP,#+40
   \   000028E6   0x.... 0x....      BL       sprintf
   \   000028EA   0xE2B0             B.N      ??RoadBrd_ParseString_399
   2848                                          }
   2849                                        }
   2850                                        else if (strncmp((char *)uuid,"000E",4) == 0) // RGB_Green
   \                     ??RoadBrd_ParseString_444: (+1)
   \   000028EC   0x2204             MOVS     R2,#+4
   \   000028EE   0xF8DF 0x1E54      LDR.W    R1,??RoadBrd_ParseString_447+0xC
   \   000028F2   0xA836             ADD      R0,SP,#+216
   \   000028F4   0x.... 0x....      BL       strncmp
   \   000028F8   0x2800             CMP      R0,#+0
   \   000028FA   0xD133             BNE.N    ??RoadBrd_ParseString_449
   2851                                        {
   2852                                          Status = RoadBrd_CAL_Set_CalItem( CAL_RGB_GREEN, Offset, Scale);
   \   000028FC   0x9A29             LDR      R2,[SP, #+164]
   \   000028FE   0x9928             LDR      R1,[SP, #+160]
   \   00002900   0x200B             MOVS     R0,#+11
   \   00002902   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002906   0x0006             MOVS     R6,R0
   2853                                          if (Status == HAL_OK)
   \   00002908   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000290A   0x2E00             CMP      R6,#+0
   \   0000290C   0xD116             BNE.N    ??RoadBrd_ParseString_450
   2854                                          {
   2855                                            // Is this a BLE Operation?
   2856                                            if ( BLE_Flag )
   \   0000290E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002910   0x2D00             CMP      R5,#+0
   \   00002912   0xD00A             BEQ.N    ??RoadBrd_ParseString_451
   2857                                            {
   2858                                              // Yes...Build and Send BLE Response NOW.
   2859                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_RGB_GREEN</STATUS>");
   \   00002914   0xF8DF 0x1E30      LDR.W    R1,??RoadBrd_ParseString_447+0x10
   \   00002918   0xA80A             ADD      R0,SP,#+40
   \   0000291A   0x.... 0x....      BL       strcpy
   2860                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000291E   0xA80A             ADD      R0,SP,#+40
   \   00002920   0x.... 0x....      BL       strlen
   \   00002924   0xA90A             ADD      R1,SP,#+40
   \   00002926   0x.... 0x....      BL       BGM111_Transmit
   2861                                            }
   2862                                            sprintf( (char *)tempBffr2, "RGB_Green Set COMPLETE." );
   \                     ??RoadBrd_ParseString_451: (+1)
   \   0000292A   0xF8DF 0x1EB0      LDR.W    R1,??RoadBrd_ParseString_452
   \   0000292E   0xA80A             ADD      R0,SP,#+40
   \   00002930   0x.... 0x....      BL       sprintf
   \   00002934   0xE28B             B.N      ??RoadBrd_ParseString_399
   \   00002936   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_304:
   \   00002938   0x........         DC32     ?_107
   2863                                          }
   2864                                          else
   2865                                          {
   2866                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_450: (+1)
   \   0000293C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000293E   0x2D00             CMP      R5,#+0
   \   00002940   0xD00A             BEQ.N    ??RoadBrd_ParseString_453
   2867                                            {
   2868                                              // Yes...Build and Send BLE Response NOW.
   2869                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_RGB_GREEN_ERR</STATUS>");
   \   00002942   0xF8DF 0x1E9C      LDR.W    R1,??RoadBrd_ParseString_452+0x4
   \   00002946   0xA80A             ADD      R0,SP,#+40
   \   00002948   0x.... 0x....      BL       strcpy
   2870                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000294C   0xA80A             ADD      R0,SP,#+40
   \   0000294E   0x.... 0x....      BL       strlen
   \   00002952   0xA90A             ADD      R1,SP,#+40
   \   00002954   0x.... 0x....      BL       BGM111_Transmit
   2871                                            }
   2872                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_453: (+1)
   \   00002958   0xF8DF 0x18B0      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   0000295C   0xA80A             ADD      R0,SP,#+40
   \   0000295E   0x.... 0x....      BL       sprintf
   \   00002962   0xE274             B.N      ??RoadBrd_ParseString_399
   2873                                          }
   2874                                        }
   2875                                        else if (strncmp((char *)uuid,"000F",4) == 0) // RGB_Blue
   \                     ??RoadBrd_ParseString_449: (+1)
   \   00002964   0x2204             MOVS     R2,#+4
   \   00002966   0xF8DF 0x1E7C      LDR.W    R1,??RoadBrd_ParseString_452+0x8
   \   0000296A   0xA836             ADD      R0,SP,#+216
   \   0000296C   0x.... 0x....      BL       strncmp
   \   00002970   0x2800             CMP      R0,#+0
   \   00002972   0xD139             BNE.N    ??RoadBrd_ParseString_454
   2876                                        {
   2877                                          Status = RoadBrd_CAL_Set_CalItem( CAL_RGB_BLUE, Offset, Scale);
   \   00002974   0x9A29             LDR      R2,[SP, #+164]
   \   00002976   0x9928             LDR      R1,[SP, #+160]
   \   00002978   0x200C             MOVS     R0,#+12
   \   0000297A   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   0000297E   0x0006             MOVS     R6,R0
   2878                                          if (Status == HAL_OK)
   \   00002980   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002982   0x2E00             CMP      R6,#+0
   \   00002984   0xD11C             BNE.N    ??RoadBrd_ParseString_455
   2879                                          {
   2880                                            // Is this a BLE Operation?
   2881                                            if ( BLE_Flag )
   \   00002986   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002988   0x2D00             CMP      R5,#+0
   \   0000298A   0xD00A             BEQ.N    ??RoadBrd_ParseString_456
   2882                                            {
   2883                                              // Yes...Build and Send BLE Response NOW.
   2884                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_RGB_BLUE</STATUS>");
   \   0000298C   0xF8DF 0x1E58      LDR.W    R1,??RoadBrd_ParseString_452+0xC
   \   00002990   0xA80A             ADD      R0,SP,#+40
   \   00002992   0x.... 0x....      BL       strcpy
   2885                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002996   0xA80A             ADD      R0,SP,#+40
   \   00002998   0x.... 0x....      BL       strlen
   \   0000299C   0xA90A             ADD      R1,SP,#+40
   \   0000299E   0x.... 0x....      BL       BGM111_Transmit
   2886                                            }
   2887                                            sprintf( (char *)tempBffr2, "RGB_Blue Set COMPLETE." );
   \                     ??RoadBrd_ParseString_456: (+1)
   \   000029A2   0xF8DF 0x1E48      LDR.W    R1,??RoadBrd_ParseString_452+0x10
   \   000029A6   0xA80A             ADD      R0,SP,#+40
   \   000029A8   0x.... 0x....      BL       sprintf
   \   000029AC   0xE24F             B.N      ??RoadBrd_ParseString_399
   \   000029AE   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_313:
   \   000029B0   0x........         DC32     ?_108
   \   000029B4   0x........         DC32     ?_109
   \   000029B8   0x........         DC32     ?_110
   \   000029BC   0x........         DC32     ?_111
   2888                                          }
   2889                                          else
   2890                                          {
   2891                                            // Is this a BLE Operation?
   2892                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_455: (+1)
   \   000029C0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000029C2   0x2D00             CMP      R5,#+0
   \   000029C4   0xD00A             BEQ.N    ??RoadBrd_ParseString_457
   2893                                            {
   2894                                              // Yes...Build and Send BLE Response NOW.
   2895                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_RGB_BLUE_ERR</STATUS>");
   \   000029C6   0xF8DF 0x1EB8      LDR.W    R1,??RoadBrd_ParseString_458
   \   000029CA   0xA80A             ADD      R0,SP,#+40
   \   000029CC   0x.... 0x....      BL       strcpy
   2896                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000029D0   0xA80A             ADD      R0,SP,#+40
   \   000029D2   0x.... 0x....      BL       strlen
   \   000029D6   0xA90A             ADD      R1,SP,#+40
   \   000029D8   0x.... 0x....      BL       BGM111_Transmit
   2897                                            }
   2898                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_457: (+1)
   \   000029DC   0xF8DF 0x182C      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   000029E0   0xA80A             ADD      R0,SP,#+40
   \   000029E2   0x.... 0x....      BL       sprintf
   \   000029E6   0xE232             B.N      ??RoadBrd_ParseString_399
   2899                                          }
   2900                                        }
   2901                                        else if (strncmp((char *)uuid,"0017",4) == 0) // Therm_C
   \                     ??RoadBrd_ParseString_454: (+1)
   \   000029E8   0x2204             MOVS     R2,#+4
   \   000029EA   0xF8DF 0x1E98      LDR.W    R1,??RoadBrd_ParseString_458+0x4
   \   000029EE   0xA836             ADD      R0,SP,#+216
   \   000029F0   0x.... 0x....      BL       strncmp
   \   000029F4   0x2800             CMP      R0,#+0
   \   000029F6   0xD130             BNE.N    ??RoadBrd_ParseString_459
   2902                                        {
   2903                                          Status = RoadBrd_CAL_Set_CalItem( CAL_THERM_C, Offset, Scale);
   \   000029F8   0x9A29             LDR      R2,[SP, #+164]
   \   000029FA   0x9928             LDR      R1,[SP, #+160]
   \   000029FC   0x200D             MOVS     R0,#+13
   \   000029FE   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002A02   0x0006             MOVS     R6,R0
   2904                                          if (Status == HAL_OK)
   \   00002A04   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002A06   0x2E00             CMP      R6,#+0
   \   00002A08   0xD113             BNE.N    ??RoadBrd_ParseString_460
   2905                                          {
   2906                                            // Is this a BLE Operation?
   2907                                            if ( BLE_Flag )
   \   00002A0A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002A0C   0x2D00             CMP      R5,#+0
   \   00002A0E   0xD00A             BEQ.N    ??RoadBrd_ParseString_461
   2908                                            {
   2909                                              // Yes...Build and Send BLE Response NOW.
   2910                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_THERM_C</STATUS>");
   \   00002A10   0xF8DF 0x1E74      LDR.W    R1,??RoadBrd_ParseString_458+0x8
   \   00002A14   0xA80A             ADD      R0,SP,#+40
   \   00002A16   0x.... 0x....      BL       strcpy
   2911                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002A1A   0xA80A             ADD      R0,SP,#+40
   \   00002A1C   0x.... 0x....      BL       strlen
   \   00002A20   0xA90A             ADD      R1,SP,#+40
   \   00002A22   0x.... 0x....      BL       BGM111_Transmit
   2912                                            }
   2913                                            sprintf( (char *)tempBffr2, "Therm_C Set COMPLETE." );
   \                     ??RoadBrd_ParseString_461: (+1)
   \   00002A26   0xF8DF 0x1E64      LDR.W    R1,??RoadBrd_ParseString_458+0xC
   \   00002A2A   0xA80A             ADD      R0,SP,#+40
   \   00002A2C   0x.... 0x....      BL       sprintf
   \   00002A30   0xE20D             B.N      ??RoadBrd_ParseString_399
   2914                                          }
   2915                                          else
   2916                                          {
   2917                                            // Is this a BLE Operation?
   2918                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_460: (+1)
   \   00002A32   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002A34   0x2D00             CMP      R5,#+0
   \   00002A36   0xD00A             BEQ.N    ??RoadBrd_ParseString_462
   2919                                            {
   2920                                              // Yes...Build and Send BLE Response NOW.
   2921                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_THERM_C_ERR</STATUS>");
   \   00002A38   0xF8DF 0x1E54      LDR.W    R1,??RoadBrd_ParseString_458+0x10
   \   00002A3C   0xA80A             ADD      R0,SP,#+40
   \   00002A3E   0x.... 0x....      BL       strcpy
   2922                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002A42   0xA80A             ADD      R0,SP,#+40
   \   00002A44   0x.... 0x....      BL       strlen
   \   00002A48   0xA90A             ADD      R1,SP,#+40
   \   00002A4A   0x.... 0x....      BL       BGM111_Transmit
   2923                                            }
   2924                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_462: (+1)
   \   00002A4E   0xF8DF 0x17BC      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   00002A52   0xA80A             ADD      R0,SP,#+40
   \   00002A54   0x.... 0x....      BL       sprintf
   \   00002A58   0xE1F9             B.N      ??RoadBrd_ParseString_399
   2925                                          }
   2926                                        }
   2927                                        else if (strncmp((char *)uuid,"0019",4) == 0) // RoadT_1C
   \                     ??RoadBrd_ParseString_459: (+1)
   \   00002A5A   0x2204             MOVS     R2,#+4
   \   00002A5C   0xF8DF 0x1EC4      LDR.W    R1,??RoadBrd_ParseString_463
   \   00002A60   0xA836             ADD      R0,SP,#+216
   \   00002A62   0x.... 0x....      BL       strncmp
   \   00002A66   0x2800             CMP      R0,#+0
   \   00002A68   0xD132             BNE.N    ??RoadBrd_ParseString_464
   2928                                        {
   2929                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_1C, Offset, Scale);
   \   00002A6A   0x9A29             LDR      R2,[SP, #+164]
   \   00002A6C   0x9928             LDR      R1,[SP, #+160]
   \   00002A6E   0x200E             MOVS     R0,#+14
   \   00002A70   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002A74   0x0006             MOVS     R6,R0
   2930                                          if (Status == HAL_OK)
   \   00002A76   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002A78   0x2E00             CMP      R6,#+0
   \   00002A7A   0xD115             BNE.N    ??RoadBrd_ParseString_465
   2931                                          {
   2932                                            // Is this a BLE Operation?
   2933                                            if ( BLE_Flag )
   \   00002A7C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002A7E   0x2D00             CMP      R5,#+0
   \   00002A80   0xD00A             BEQ.N    ??RoadBrd_ParseString_466
   2934                                            {
   2935                                              // Yes...Build and Send BLE Response NOW.
   2936                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_1C</STATUS>");
   \   00002A82   0xF8DF 0x1EA4      LDR.W    R1,??RoadBrd_ParseString_463+0x4
   \   00002A86   0xA80A             ADD      R0,SP,#+40
   \   00002A88   0x.... 0x....      BL       strcpy
   2937                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002A8C   0xA80A             ADD      R0,SP,#+40
   \   00002A8E   0x.... 0x....      BL       strlen
   \   00002A92   0xA90A             ADD      R1,SP,#+40
   \   00002A94   0x.... 0x....      BL       BGM111_Transmit
   2938                                            }
   2939                                            sprintf( (char *)tempBffr2, "RoadT_1C Set COMPLETE." );
   \                     ??RoadBrd_ParseString_466: (+1)
   \   00002A98   0xF8DF 0x1E90      LDR.W    R1,??RoadBrd_ParseString_463+0x8
   \   00002A9C   0xA80A             ADD      R0,SP,#+40
   \   00002A9E   0x.... 0x....      BL       sprintf
   \   00002AA2   0xE1D4             B.N      ??RoadBrd_ParseString_399
   \                     ??RoadBrd_ParseString_323:
   \   00002AA4   0x........         DC32     ?_112
   2940                                          }
   2941                                          else
   2942                                          {
   2943                                            // Is this a BLE Operation?
   2944                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_465: (+1)
   \   00002AA8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002AAA   0x2D00             CMP      R5,#+0
   \   00002AAC   0xD00A             BEQ.N    ??RoadBrd_ParseString_467
   2945                                            {
   2946                                              // Yes...Build and Send BLE Response NOW.
   2947                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_1C_ERR</STATUS>");
   \   00002AAE   0xF8DF 0x1E80      LDR.W    R1,??RoadBrd_ParseString_463+0xC
   \   00002AB2   0xA80A             ADD      R0,SP,#+40
   \   00002AB4   0x.... 0x....      BL       strcpy
   2948                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002AB8   0xA80A             ADD      R0,SP,#+40
   \   00002ABA   0x.... 0x....      BL       strlen
   \   00002ABE   0xA90A             ADD      R1,SP,#+40
   \   00002AC0   0x.... 0x....      BL       BGM111_Transmit
   2949                                            }
   2950                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_467: (+1)
   \   00002AC4   0xF8DF 0x1744      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   00002AC8   0xA80A             ADD      R0,SP,#+40
   \   00002ACA   0x.... 0x....      BL       sprintf
   \   00002ACE   0xE1BE             B.N      ??RoadBrd_ParseString_399
   2951                                          }
   2952                                        }
   2953                                        else if (strncmp((char *)uuid,"001B",4) == 0) // RoadT_2C
   \                     ??RoadBrd_ParseString_464: (+1)
   \   00002AD0   0x2204             MOVS     R2,#+4
   \   00002AD2   0xF8DF 0x1E60      LDR.W    R1,??RoadBrd_ParseString_463+0x10
   \   00002AD6   0xA836             ADD      R0,SP,#+216
   \   00002AD8   0x.... 0x....      BL       strncmp
   \   00002ADC   0x2800             CMP      R0,#+0
   \   00002ADE   0xD133             BNE.N    ??RoadBrd_ParseString_468
   2954                                        {
   2955                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_2C, Offset, Scale);
   \   00002AE0   0x9A29             LDR      R2,[SP, #+164]
   \   00002AE2   0x9928             LDR      R1,[SP, #+160]
   \   00002AE4   0x200F             MOVS     R0,#+15
   \   00002AE6   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002AEA   0x0006             MOVS     R6,R0
   2956                                          if (Status == HAL_OK)
   \   00002AEC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002AEE   0x2E00             CMP      R6,#+0
   \   00002AF0   0xD116             BNE.N    ??RoadBrd_ParseString_469
   2957                                          {
   2958                                            // Is this a BLE Operation?
   2959                                            if ( BLE_Flag )
   \   00002AF2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002AF4   0x2D00             CMP      R5,#+0
   \   00002AF6   0xD00A             BEQ.N    ??RoadBrd_ParseString_470
   2960                                            {
   2961                                              // Yes...Build and Send BLE Response NOW.
   2962                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_2C</STATUS>");
   \   00002AF8   0xF8DF 0x1ECC      LDR.W    R1,??RoadBrd_ParseString_471
   \   00002AFC   0xA80A             ADD      R0,SP,#+40
   \   00002AFE   0x.... 0x....      BL       strcpy
   2963                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002B02   0xA80A             ADD      R0,SP,#+40
   \   00002B04   0x.... 0x....      BL       strlen
   \   00002B08   0xA90A             ADD      R1,SP,#+40
   \   00002B0A   0x.... 0x....      BL       BGM111_Transmit
   2964                                            }
   2965                                            sprintf( (char *)tempBffr2, "RoadT_2C Set COMPLETE." );
   \                     ??RoadBrd_ParseString_470: (+1)
   \   00002B0E   0xF8DF 0x1EBC      LDR.W    R1,??RoadBrd_ParseString_471+0x4
   \   00002B12   0xA80A             ADD      R0,SP,#+40
   \   00002B14   0x.... 0x....      BL       sprintf
   \   00002B18   0xE199             B.N      ??RoadBrd_ParseString_399
   \   00002B1A   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_329:
   \   00002B1C   0x........         DC32     ?_114
   2966                                          }
   2967                                          else
   2968                                          {
   2969                                            // Is this a BLE Operation?
   2970                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_469: (+1)
   \   00002B20   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002B22   0x2D00             CMP      R5,#+0
   \   00002B24   0xD00A             BEQ.N    ??RoadBrd_ParseString_472
   2971                                            {
   2972                                              // Yes...Build and Send BLE Response NOW.
   2973                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_2C_ERR</STATUS>");
   \   00002B26   0xF8DF 0x1EA8      LDR.W    R1,??RoadBrd_ParseString_471+0x8
   \   00002B2A   0xA80A             ADD      R0,SP,#+40
   \   00002B2C   0x.... 0x....      BL       strcpy
   2974                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002B30   0xA80A             ADD      R0,SP,#+40
   \   00002B32   0x.... 0x....      BL       strlen
   \   00002B36   0xA90A             ADD      R1,SP,#+40
   \   00002B38   0x.... 0x....      BL       BGM111_Transmit
   2975                                            }
   2976                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_472: (+1)
   \   00002B3C   0xF8DF 0x16CC      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   00002B40   0xA80A             ADD      R0,SP,#+40
   \   00002B42   0x.... 0x....      BL       sprintf
   \   00002B46   0xE182             B.N      ??RoadBrd_ParseString_399
   2977                                          }
   2978                                        }
   2979                                        else if (strncmp((char *)uuid,"001D",4) == 0) // RoadT_3C
   \                     ??RoadBrd_ParseString_468: (+1)
   \   00002B48   0x2204             MOVS     R2,#+4
   \   00002B4A   0xF8DF 0x1E88      LDR.W    R1,??RoadBrd_ParseString_471+0xC
   \   00002B4E   0xA836             ADD      R0,SP,#+216
   \   00002B50   0x.... 0x....      BL       strncmp
   \   00002B54   0x2800             CMP      R0,#+0
   \   00002B56   0xD135             BNE.N    ??RoadBrd_ParseString_473
   2980                                        {
   2981                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_3C, Offset, Scale);
   \   00002B58   0x9A29             LDR      R2,[SP, #+164]
   \   00002B5A   0x9928             LDR      R1,[SP, #+160]
   \   00002B5C   0x2010             MOVS     R0,#+16
   \   00002B5E   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002B62   0x0006             MOVS     R6,R0
   2982                                          if (Status == HAL_OK)
   \   00002B64   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002B66   0x2E00             CMP      R6,#+0
   \   00002B68   0xD118             BNE.N    ??RoadBrd_ParseString_474
   2983                                          {
   2984                                            // Is this a BLE Operation?
   2985                                            if ( BLE_Flag )
   \   00002B6A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002B6C   0x2D00             CMP      R5,#+0
   \   00002B6E   0xD00A             BEQ.N    ??RoadBrd_ParseString_475
   2986                                            {
   2987                                              // Yes...Build and Send BLE Response NOW.
   2988                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_3C</STATUS>");
   \   00002B70   0xF8DF 0x1E64      LDR.W    R1,??RoadBrd_ParseString_471+0x10
   \   00002B74   0xA80A             ADD      R0,SP,#+40
   \   00002B76   0x.... 0x....      BL       strcpy
   2989                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002B7A   0xA80A             ADD      R0,SP,#+40
   \   00002B7C   0x.... 0x....      BL       strlen
   \   00002B80   0xA90A             ADD      R1,SP,#+40
   \   00002B82   0x.... 0x....      BL       BGM111_Transmit
   2990                                            }
   2991                                            sprintf( (char *)tempBffr2, "RoadT_3C Set COMPLETE." );
   \                     ??RoadBrd_ParseString_475: (+1)
   \   00002B86   0xF8DF 0x1E54      LDR.W    R1,??RoadBrd_ParseString_471+0x14
   \   00002B8A   0xA80A             ADD      R0,SP,#+40
   \   00002B8C   0x.... 0x....      BL       sprintf
   \   00002B90   0xE15D             B.N      ??RoadBrd_ParseString_399
   \   00002B92   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_333:
   \   00002B94   0x........         DC32     ?_115
   \   00002B98   0x........         DC32     ?_116
   2992                                          }
   2993                                          else
   2994                                          {
   2995                                            // Is this a BLE Operation?
   2996                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_474: (+1)
   \   00002B9C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002B9E   0x2D00             CMP      R5,#+0
   \   00002BA0   0xD00A             BEQ.N    ??RoadBrd_ParseString_476
   2997                                            {
   2998                                              // Yes...Build and Send BLE Response NOW.
   2999                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_3C_ERR</STATUS>");
   \   00002BA2   0xF8DF 0x1ECC      LDR.W    R1,??RoadBrd_ParseString_477
   \   00002BA6   0xA80A             ADD      R0,SP,#+40
   \   00002BA8   0x.... 0x....      BL       strcpy
   3000                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002BAC   0xA80A             ADD      R0,SP,#+40
   \   00002BAE   0x.... 0x....      BL       strlen
   \   00002BB2   0xA90A             ADD      R1,SP,#+40
   \   00002BB4   0x.... 0x....      BL       BGM111_Transmit
   3001                                            }
   3002                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_476: (+1)
   \   00002BB8   0xF8DF 0x1650      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   00002BBC   0xA80A             ADD      R0,SP,#+40
   \   00002BBE   0x.... 0x....      BL       sprintf
   \   00002BC2   0xE144             B.N      ??RoadBrd_ParseString_399
   3003                                          }
   3004                                        }
   3005                                        else if (strncmp((char *)uuid,"001F",4) == 0) // RoadT_4C
   \                     ??RoadBrd_ParseString_473: (+1)
   \   00002BC4   0x2204             MOVS     R2,#+4
   \   00002BC6   0xF8DF 0x1EAC      LDR.W    R1,??RoadBrd_ParseString_477+0x4
   \   00002BCA   0xA836             ADD      R0,SP,#+216
   \   00002BCC   0x.... 0x....      BL       strncmp
   \   00002BD0   0x2800             CMP      R0,#+0
   \   00002BD2   0xD137             BNE.N    ??RoadBrd_ParseString_478
   3006                                        {
   3007                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_4C, Offset, Scale);
   \   00002BD4   0x9A29             LDR      R2,[SP, #+164]
   \   00002BD6   0x9928             LDR      R1,[SP, #+160]
   \   00002BD8   0x2011             MOVS     R0,#+17
   \   00002BDA   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002BDE   0x0006             MOVS     R6,R0
   3008                                          if (Status == HAL_OK)
   \   00002BE0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002BE2   0x2E00             CMP      R6,#+0
   \   00002BE4   0xD11A             BNE.N    ??RoadBrd_ParseString_479
   3009                                          {
   3010                                            // Is this a BLE Operation?
   3011                                            if ( BLE_Flag )
   \   00002BE6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002BE8   0x2D00             CMP      R5,#+0
   \   00002BEA   0xD00A             BEQ.N    ??RoadBrd_ParseString_480
   3012                                            {
   3013                                              // Yes...Build and Send BLE Response NOW.
   3014                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_4C</STATUS>");
   \   00002BEC   0xF8DF 0x1E88      LDR.W    R1,??RoadBrd_ParseString_477+0x8
   \   00002BF0   0xA80A             ADD      R0,SP,#+40
   \   00002BF2   0x.... 0x....      BL       strcpy
   3015                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002BF6   0xA80A             ADD      R0,SP,#+40
   \   00002BF8   0x.... 0x....      BL       strlen
   \   00002BFC   0xA90A             ADD      R1,SP,#+40
   \   00002BFE   0x.... 0x....      BL       BGM111_Transmit
   3016                                            }
   3017                                            sprintf( (char *)tempBffr2, "RoadT_4C Set COMPLETE." );
   \                     ??RoadBrd_ParseString_480: (+1)
   \   00002C02   0xF8DF 0x1E78      LDR.W    R1,??RoadBrd_ParseString_477+0xC
   \   00002C06   0xA80A             ADD      R0,SP,#+40
   \   00002C08   0x.... 0x....      BL       sprintf
   \   00002C0C   0xE11F             B.N      ??RoadBrd_ParseString_399
   \   00002C0E   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_336:
   \   00002C10   0x........         DC32     ?_117
   \   00002C14   0x........         DC32     ?_118
   \   00002C18   0x........         DC32     ?_119
   3018                                          }
   3019                                          else
   3020                                          {
   3021                                            // Is this a BLE Operation?
   3022                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_479: (+1)
   \   00002C1C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002C1E   0x2D00             CMP      R5,#+0
   \   00002C20   0xD00A             BEQ.N    ??RoadBrd_ParseString_481
   3023                                            {
   3024                                              // Yes...Build and Send BLE Response NOW.
   3025                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_4C_ERR</STATUS>");
   \   00002C22   0xF8DF 0x1E5C      LDR.W    R1,??RoadBrd_ParseString_477+0x10
   \   00002C26   0xA80A             ADD      R0,SP,#+40
   \   00002C28   0x.... 0x....      BL       strcpy
   3026                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002C2C   0xA80A             ADD      R0,SP,#+40
   \   00002C2E   0x.... 0x....      BL       strlen
   \   00002C32   0xA90A             ADD      R1,SP,#+40
   \   00002C34   0x.... 0x....      BL       BGM111_Transmit
   3027                                            }
   3028                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_481: (+1)
   \   00002C38   0xF8DF 0x15D0      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   00002C3C   0xA80A             ADD      R0,SP,#+40
   \   00002C3E   0x.... 0x....      BL       sprintf
   \   00002C42   0xE104             B.N      ??RoadBrd_ParseString_399
   3029                                          }
   3030                                        }
   3031                                        else if (strncmp((char *)uuid,"0021",4) == 0) // RoadT_5C
   \                     ??RoadBrd_ParseString_478: (+1)
   \   00002C44   0x2204             MOVS     R2,#+4
   \   00002C46   0xF8DF 0x1ECC      LDR.W    R1,??RoadBrd_ParseString_482
   \   00002C4A   0xA836             ADD      R0,SP,#+216
   \   00002C4C   0x.... 0x....      BL       strncmp
   \   00002C50   0x2800             CMP      R0,#+0
   \   00002C52   0xD133             BNE.N    ??RoadBrd_ParseString_483
   3032                                        {
   3033                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_5C, Offset, Scale);
   \   00002C54   0x9A29             LDR      R2,[SP, #+164]
   \   00002C56   0x9928             LDR      R1,[SP, #+160]
   \   00002C58   0x2012             MOVS     R0,#+18
   \   00002C5A   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002C5E   0x0006             MOVS     R6,R0
   3034                                          if (Status == HAL_OK)
   \   00002C60   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002C62   0x2E00             CMP      R6,#+0
   \   00002C64   0xD116             BNE.N    ??RoadBrd_ParseString_484
   3035                                          {
   3036                                            // Is this a BLE Operation?
   3037                                            if ( BLE_Flag )
   \   00002C66   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002C68   0x2D00             CMP      R5,#+0
   \   00002C6A   0xD00A             BEQ.N    ??RoadBrd_ParseString_485
   3038                                            {
   3039                                              // Yes...Build and Send BLE Response NOW.
   3040                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_5C</STATUS>");
   \   00002C6C   0xF8DF 0x1EA8      LDR.W    R1,??RoadBrd_ParseString_482+0x4
   \   00002C70   0xA80A             ADD      R0,SP,#+40
   \   00002C72   0x.... 0x....      BL       strcpy
   3041                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002C76   0xA80A             ADD      R0,SP,#+40
   \   00002C78   0x.... 0x....      BL       strlen
   \   00002C7C   0xA90A             ADD      R1,SP,#+40
   \   00002C7E   0x.... 0x....      BL       BGM111_Transmit
   3042                                            }
   3043                                            sprintf( (char *)tempBffr2, "RoadT_5C Set COMPLETE." );
   \                     ??RoadBrd_ParseString_485: (+1)
   \   00002C82   0xF8DF 0x1E98      LDR.W    R1,??RoadBrd_ParseString_482+0x8
   \   00002C86   0xA80A             ADD      R0,SP,#+40
   \   00002C88   0x.... 0x....      BL       sprintf
   \   00002C8C   0xE0DF             B.N      ??RoadBrd_ParseString_399
   \   00002C8E   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_342:
   \   00002C90   0x........         DC32     ?_120
   3044                                          }
   3045                                          else
   3046                                          {
   3047                                            // Is this a BLE Operation?
   3048                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_484: (+1)
   \   00002C94   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002C96   0x2D00             CMP      R5,#+0
   \   00002C98   0xD00A             BEQ.N    ??RoadBrd_ParseString_486
   3049                                            {
   3050                                              // Yes...Build and Send BLE Response NOW.
   3051                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_5C_ERR</STATUS>");
   \   00002C9A   0xF8DF 0x1E84      LDR.W    R1,??RoadBrd_ParseString_482+0xC
   \   00002C9E   0xA80A             ADD      R0,SP,#+40
   \   00002CA0   0x.... 0x....      BL       strcpy
   3052                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002CA4   0xA80A             ADD      R0,SP,#+40
   \   00002CA6   0x.... 0x....      BL       strlen
   \   00002CAA   0xA90A             ADD      R1,SP,#+40
   \   00002CAC   0x.... 0x....      BL       BGM111_Transmit
   3053                                            }
   3054                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_486: (+1)
   \   00002CB0   0xF8DF 0x1558      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   00002CB4   0xA80A             ADD      R0,SP,#+40
   \   00002CB6   0x.... 0x....      BL       sprintf
   \   00002CBA   0xE0C8             B.N      ??RoadBrd_ParseString_399
   3055                                          }
   3056                                        }
   3057                                        else if (strncmp((char *)uuid,"0023",4) == 0) // RoadT_6C
   \                     ??RoadBrd_ParseString_483: (+1)
   \   00002CBC   0x2204             MOVS     R2,#+4
   \   00002CBE   0xF8DF 0x1E64      LDR.W    R1,??RoadBrd_ParseString_482+0x10
   \   00002CC2   0xA836             ADD      R0,SP,#+216
   \   00002CC4   0x.... 0x....      BL       strncmp
   \   00002CC8   0x2800             CMP      R0,#+0
   \   00002CCA   0xD133             BNE.N    ??RoadBrd_ParseString_487
   3058                                        {
   3059                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_6C, Offset, Scale);
   \   00002CCC   0x9A29             LDR      R2,[SP, #+164]
   \   00002CCE   0x9928             LDR      R1,[SP, #+160]
   \   00002CD0   0x2013             MOVS     R0,#+19
   \   00002CD2   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002CD6   0x0006             MOVS     R6,R0
   3060                                          if (Status == HAL_OK)
   \   00002CD8   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002CDA   0x2E00             CMP      R6,#+0
   \   00002CDC   0xD116             BNE.N    ??RoadBrd_ParseString_488
   3061                                          {
   3062                                            // Is this a BLE Operation?
   3063                                            if ( BLE_Flag )
   \   00002CDE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002CE0   0x2D00             CMP      R5,#+0
   \   00002CE2   0xD00A             BEQ.N    ??RoadBrd_ParseString_489
   3064                                            {
   3065                                              // Yes...Build and Send BLE Response NOW.
   3066                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_6C</STATUS>");
   \   00002CE4   0xF8DF 0x1ED0      LDR.W    R1,??RoadBrd_ParseString_490
   \   00002CE8   0xA80A             ADD      R0,SP,#+40
   \   00002CEA   0x.... 0x....      BL       strcpy
   3067                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002CEE   0xA80A             ADD      R0,SP,#+40
   \   00002CF0   0x.... 0x....      BL       strlen
   \   00002CF4   0xA90A             ADD      R1,SP,#+40
   \   00002CF6   0x.... 0x....      BL       BGM111_Transmit
   3068                                            }
   3069                                            sprintf( (char *)tempBffr2, "RoadT_6C Set COMPLETE." );
   \                     ??RoadBrd_ParseString_489: (+1)
   \   00002CFA   0xF8DF 0x1EC0      LDR.W    R1,??RoadBrd_ParseString_490+0x4
   \   00002CFE   0xA80A             ADD      R0,SP,#+40
   \   00002D00   0x.... 0x....      BL       sprintf
   \   00002D04   0xE0A3             B.N      ??RoadBrd_ParseString_399
   \   00002D06   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_349:
   \   00002D08   0x........         DC32     ?_121
   3070                                          }
   3071                                          else
   3072                                          {
   3073                                            // Is this a BLE Operation?
   3074                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_488: (+1)
   \   00002D0C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002D0E   0x2D00             CMP      R5,#+0
   \   00002D10   0xD00A             BEQ.N    ??RoadBrd_ParseString_491
   3075                                            {
   3076                                              // Yes...Build and Send BLE Response NOW.
   3077                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_6C_ERR</STATUS>");
   \   00002D12   0xF8DF 0x1EAC      LDR.W    R1,??RoadBrd_ParseString_490+0x8
   \   00002D16   0xA80A             ADD      R0,SP,#+40
   \   00002D18   0x.... 0x....      BL       strcpy
   3078                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002D1C   0xA80A             ADD      R0,SP,#+40
   \   00002D1E   0x.... 0x....      BL       strlen
   \   00002D22   0xA90A             ADD      R1,SP,#+40
   \   00002D24   0x.... 0x....      BL       BGM111_Transmit
   3079                                            }
   3080                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_491: (+1)
   \   00002D28   0xF8DF 0x14E0      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   00002D2C   0xA80A             ADD      R0,SP,#+40
   \   00002D2E   0x.... 0x....      BL       sprintf
   \   00002D32   0xE08C             B.N      ??RoadBrd_ParseString_399
   3081                                          }
   3082                                        }
   3083                                        else if (strncmp((char *)uuid,"0025",4) == 0) // RoadT_7C
   \                     ??RoadBrd_ParseString_487: (+1)
   \   00002D34   0x2204             MOVS     R2,#+4
   \   00002D36   0xF8DF 0x1E8C      LDR.W    R1,??RoadBrd_ParseString_490+0xC
   \   00002D3A   0xA836             ADD      R0,SP,#+216
   \   00002D3C   0x.... 0x....      BL       strncmp
   \   00002D40   0x2800             CMP      R0,#+0
   \   00002D42   0xD135             BNE.N    ??RoadBrd_ParseString_492
   3084                                        {
   3085                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_7C, Offset, Scale);
   \   00002D44   0x9A29             LDR      R2,[SP, #+164]
   \   00002D46   0x9928             LDR      R1,[SP, #+160]
   \   00002D48   0x2014             MOVS     R0,#+20
   \   00002D4A   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002D4E   0x0006             MOVS     R6,R0
   3086                                          if (Status == HAL_OK)
   \   00002D50   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002D52   0x2E00             CMP      R6,#+0
   \   00002D54   0xD118             BNE.N    ??RoadBrd_ParseString_493
   3087                                          {
   3088                                            // Is this a BLE Operation?
   3089                                            if ( BLE_Flag )
   \   00002D56   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002D58   0x2D00             CMP      R5,#+0
   \   00002D5A   0xD00A             BEQ.N    ??RoadBrd_ParseString_494
   3090                                            {
   3091                                              // Yes...Build and Send BLE Response NOW.
   3092                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_7C</STATUS>");
   \   00002D5C   0xF8DF 0x1EF8      LDR.W    R1,??RoadBrd_ParseString_495
   \   00002D60   0xA80A             ADD      R0,SP,#+40
   \   00002D62   0x.... 0x....      BL       strcpy
   3093                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002D66   0xA80A             ADD      R0,SP,#+40
   \   00002D68   0x.... 0x....      BL       strlen
   \   00002D6C   0xA90A             ADD      R1,SP,#+40
   \   00002D6E   0x.... 0x....      BL       BGM111_Transmit
   3094                                            }
   3095                                            sprintf( (char *)tempBffr2, "RoadT_7C Set COMPLETE." );
   \                     ??RoadBrd_ParseString_494: (+1)
   \   00002D72   0xF8DF 0x1EE8      LDR.W    R1,??RoadBrd_ParseString_495+0x4
   \   00002D76   0xA80A             ADD      R0,SP,#+40
   \   00002D78   0x.... 0x....      BL       sprintf
   \   00002D7C   0xE067             B.N      ??RoadBrd_ParseString_399
   \   00002D7E   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_355:
   \   00002D80   0x........         DC32     ?_122
   \   00002D84   0x........         DC32     ?_123
   3096                                          }
   3097                                          else
   3098                                          {
   3099                                            // Is this a BLE Operation?
   3100                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_493: (+1)
   \   00002D88   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002D8A   0x2D00             CMP      R5,#+0
   \   00002D8C   0xD00A             BEQ.N    ??RoadBrd_ParseString_496
   3101                                            {
   3102                                              // Yes...Build and Send BLE Response NOW.
   3103                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_7C_ERR</STATUS>");
   \   00002D8E   0xF8DF 0x1ED0      LDR.W    R1,??RoadBrd_ParseString_495+0x8
   \   00002D92   0xA80A             ADD      R0,SP,#+40
   \   00002D94   0x.... 0x....      BL       strcpy
   3104                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002D98   0xA80A             ADD      R0,SP,#+40
   \   00002D9A   0x.... 0x....      BL       strlen
   \   00002D9E   0xA90A             ADD      R1,SP,#+40
   \   00002DA0   0x.... 0x....      BL       BGM111_Transmit
   3105                                            }
   3106                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_496: (+1)
   \   00002DA4   0xF8DF 0x1464      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   00002DA8   0xA80A             ADD      R0,SP,#+40
   \   00002DAA   0x.... 0x....      BL       sprintf
   \   00002DAE   0xE04E             B.N      ??RoadBrd_ParseString_399
   3107                                          }
   3108                                        }
   3109                                        else if (strncmp((char *)uuid,"0027",4) == 0) // RoadT_8C
   \                     ??RoadBrd_ParseString_492: (+1)
   \   00002DB0   0x2204             MOVS     R2,#+4
   \   00002DB2   0xF8DF 0x1EB0      LDR.W    R1,??RoadBrd_ParseString_495+0xC
   \   00002DB6   0xA836             ADD      R0,SP,#+216
   \   00002DB8   0x.... 0x....      BL       strncmp
   \   00002DBC   0x2800             CMP      R0,#+0
   \   00002DBE   0xD133             BNE.N    ??RoadBrd_ParseString_497
   3110                                        {
   3111                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_8C, Offset, Scale);
   \   00002DC0   0x9A29             LDR      R2,[SP, #+164]
   \   00002DC2   0x9928             LDR      R1,[SP, #+160]
   \   00002DC4   0x2015             MOVS     R0,#+21
   \   00002DC6   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002DCA   0x0006             MOVS     R6,R0
   3112                                          if (Status == HAL_OK)
   \   00002DCC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002DCE   0x2E00             CMP      R6,#+0
   \   00002DD0   0xD113             BNE.N    ??RoadBrd_ParseString_498
   3113                                          {
   3114                                            // Is this a BLE Operation?
   3115                                            if ( BLE_Flag )
   \   00002DD2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002DD4   0x2D00             CMP      R5,#+0
   \   00002DD6   0xD00A             BEQ.N    ??RoadBrd_ParseString_499
   3116                                            {
   3117                                              // Yes...Build and Send BLE Response NOW.
   3118                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_8C</STATUS>");
   \   00002DD8   0xF8DF 0x1E8C      LDR.W    R1,??RoadBrd_ParseString_495+0x10
   \   00002DDC   0xA80A             ADD      R0,SP,#+40
   \   00002DDE   0x.... 0x....      BL       strcpy
   3119                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002DE2   0xA80A             ADD      R0,SP,#+40
   \   00002DE4   0x.... 0x....      BL       strlen
   \   00002DE8   0xA90A             ADD      R1,SP,#+40
   \   00002DEA   0x.... 0x....      BL       BGM111_Transmit
   3120                                            }
   3121                                            sprintf( (char *)tempBffr2, "RoadT_8C Set COMPLETE." );
   \                     ??RoadBrd_ParseString_499: (+1)
   \   00002DEE   0xF8DF 0x1E7C      LDR.W    R1,??RoadBrd_ParseString_495+0x14
   \   00002DF2   0xA80A             ADD      R0,SP,#+40
   \   00002DF4   0x.... 0x....      BL       sprintf
   \   00002DF8   0xE029             B.N      ??RoadBrd_ParseString_399
   3122                                          }
   3123                                          else
   3124                                          {
   3125                                            // Is this a BLE Operation?
   3126                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_498: (+1)
   \   00002DFA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002DFC   0x2D00             CMP      R5,#+0
   \   00002DFE   0xD00A             BEQ.N    ??RoadBrd_ParseString_500
   3127                                            {
   3128                                              // Yes...Build and Send BLE Response NOW.
   3129                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_8C_ERR</STATUS>");
   \   00002E00   0xF8DF 0x1EFC      LDR.W    R1,??RoadBrd_ParseString_501
   \   00002E04   0xA80A             ADD      R0,SP,#+40
   \   00002E06   0x.... 0x....      BL       strcpy
   3130                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002E0A   0xA80A             ADD      R0,SP,#+40
   \   00002E0C   0x.... 0x....      BL       strlen
   \   00002E10   0xA90A             ADD      R1,SP,#+40
   \   00002E12   0x.... 0x....      BL       BGM111_Transmit
   3131                                            }
   3132                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_500: (+1)
   \   00002E16   0xF8DF 0x13F4      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   00002E1A   0xA80A             ADD      R0,SP,#+40
   \   00002E1C   0x.... 0x....      BL       sprintf
   \   00002E20   0xE015             B.N      ??RoadBrd_ParseString_399
   \   00002E22   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_360:
   \   00002E24   0x........         DC32     ?_124
   3133                                          }
   3134                                        }
   3135                                        else
   3136                                        {
   3137                                          // Is this a BLE Operation?
   3138                                          if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_497: (+1)
   \   00002E28   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002E2A   0x2D00             CMP      R5,#+0
   \   00002E2C   0xD00A             BEQ.N    ??RoadBrd_ParseString_502
   3139                                          {
   3140                                            // Yes...Build and Send BLE Response NOW.
   3141                                            strcpy( (char *)tempBffr2, "<STATUS>CMD_TCS_BADUUID</STATUS>");
   \   00002E2E   0xF8DF 0x1ED4      LDR.W    R1,??RoadBrd_ParseString_501+0x4
   \   00002E32   0xA80A             ADD      R0,SP,#+40
   \   00002E34   0x.... 0x....      BL       strcpy
   3142                                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002E38   0xA80A             ADD      R0,SP,#+40
   \   00002E3A   0x.... 0x....      BL       strlen
   \   00002E3E   0xA90A             ADD      R1,SP,#+40
   \   00002E40   0x.... 0x....      BL       BGM111_Transmit
   3143                                          }
   3144                                          sprintf( (char *)tempBffr2, "TCS SYNTAX ERROR: Bad UUID.\r\n" );
   \                     ??RoadBrd_ParseString_502: (+1)
   \   00002E44   0xF8DF 0x1EC0      LDR.W    R1,??RoadBrd_ParseString_501+0x8
   \   00002E48   0xA80A             ADD      R0,SP,#+40
   \   00002E4A   0x.... 0x....      BL       sprintf
   3145                                        }
   3146                                        Status = HAL_OK;
   \                     ??RoadBrd_ParseString_399: (+1)
   \   00002E4E   0x2000             MOVS     R0,#+0
   \   00002E50   0x0006             MOVS     R6,R0
   \   00002E52   0xE011             B.N      ??RoadBrd_ParseString_390
   3147                                      }
   3148                                      else
   3149                                      {
   3150                                        // Is this a BLE Operation?
   3151                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_394: (+1)
   \   00002E54   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002E56   0x2D00             CMP      R5,#+0
   \   00002E58   0xD009             BEQ.N    ??RoadBrd_ParseString_503
   3152                                        {
   3153                                          // Yes...Build and Send BLE Response NOW.
   3154                                          strcpy( (char *)tempBffr2, "<STATUS>CMD_TCS_BADPARAM</STATUS>");
   \   00002E5A   0x49BF             LDR.N    R1,??RoadBrd_ParseString_393
   \   00002E5C   0xA80A             ADD      R0,SP,#+40
   \   00002E5E   0x.... 0x....      BL       strcpy
   3155                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002E62   0xA80A             ADD      R0,SP,#+40
   \   00002E64   0x.... 0x....      BL       strlen
   \   00002E68   0xA90A             ADD      R1,SP,#+40
   \   00002E6A   0x.... 0x....      BL       BGM111_Transmit
   3156                                        }
   3157                                        
   3158                                        strcpy( (char *)tempBffr2, "TCS SYNTAX ERROR: Wrong Number of Parameters.\r\n");
   \                     ??RoadBrd_ParseString_503: (+1)
   \   00002E6E   0xF8DF 0x1E9C      LDR.W    R1,??RoadBrd_ParseString_501+0xC
   \   00002E72   0xA80A             ADD      R0,SP,#+40
   \   00002E74   0x.... 0x....      BL       strcpy
   3159                                      }
   3160                                    } // EndElse (flag == 0)
   3161                                  } // EndElse (tempBffr[3]!=':')
   3162                                  break;
   \                     ??RoadBrd_ParseString_390: (+1)
   \   00002E78   0xF001 0xB84D      B.W      ??RoadBrd_ParseString_378
   3163                                  //------------------ TCR Command: Calibration Read Command
   3164                                case 'R':
   3165                                  // Build Read Calibration Dump Part I....
   3166                                  // Is this a BLE Operation?
   3167                                  if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_385: (+1)
   \   00002E7C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002E7E   0x2D00             CMP      R5,#+0
   \   00002E80   0xD00D             BEQ.N    ??RoadBrd_ParseString_504
   3168                                  {
   3169                                    // Yes...Build and Send BLE Response NOW.
   3170                                    sprintf( (char *)tempBffr2, "<STATUS>TCR:%s\\",  RoadBrd_CAL_GetTimeString());
   \   00002E82   0x.... 0x....      BL       RoadBrd_CAL_GetTimeString
   \   00002E86   0x0002             MOVS     R2,R0
   \   00002E88   0xF8DF 0x1E84      LDR.W    R1,??RoadBrd_ParseString_501+0x10
   \   00002E8C   0xA80A             ADD      R0,SP,#+40
   \   00002E8E   0x.... 0x....      BL       sprintf
   3171                                    BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002E92   0xA80A             ADD      R0,SP,#+40
   \   00002E94   0x.... 0x....      BL       strlen
   \   00002E98   0xA90A             ADD      R1,SP,#+40
   \   00002E9A   0x.... 0x....      BL       BGM111_Transmit
   3172                                  }
   3173                                  
   3174                                  // Send string to UART..
   3175                                  sprintf( (char *)tempBffr2, "CALIBRATION DATA\r\nDate: %s\r\n",  RoadBrd_CAL_GetTimeString());
   \                     ??RoadBrd_ParseString_504: (+1)
   \   00002E9E   0x.... 0x....      BL       RoadBrd_CAL_GetTimeString
   \   00002EA2   0x0002             MOVS     R2,R0
   \   00002EA4   0xF8DF 0x1F14      LDR.W    R1,??RoadBrd_ParseString_505
   \   00002EA8   0xA80A             ADD      R0,SP,#+40
   \   00002EAA   0x.... 0x....      BL       sprintf
   3176          #ifdef NUCLEO
   3177                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   3178          #else
   3179                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00002EAE   0xA90A             ADD      R1,SP,#+40
   \   00002EB0   0x2000             MOVS     R0,#+0
   \   00002EB2   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00002EB6   0x0006             MOVS     R6,R0
   3180          #endif
   3181                                  if (Status != HAL_OK)
   \   00002EB8   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002EBA   0x2E00             CMP      R6,#+0
   \   00002EBC   0xD003             BEQ.N    ??RoadBrd_ParseString_506
   3182                                      return Status;
   \   00002EBE   0x0030             MOVS     R0,R6
   \   00002EC0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002EC2   0xF001 0xBD3C      B.W      ??RoadBrd_ParseString_4
   3183                                  // Build Read Calibration Dump Part II....
   3184                                  // Send string to UART..
   3185                                  sprintf( (char *)tempBffr2, "Name		        UUID		Slope		Offset\r\n" );
   \                     ??RoadBrd_ParseString_506: (+1)
   \   00002EC6   0xF8DF 0x1EF8      LDR.W    R1,??RoadBrd_ParseString_505+0x4
   \   00002ECA   0xA80A             ADD      R0,SP,#+40
   \   00002ECC   0x.... 0x....      BL       sprintf
   3186          #ifdef NUCLEO
   3187                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   3188          #else
   3189                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00002ED0   0xA90A             ADD      R1,SP,#+40
   \   00002ED2   0x2000             MOVS     R0,#+0
   \   00002ED4   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00002ED8   0x0006             MOVS     R6,R0
   3190          #endif
   3191                                  if (Status != HAL_OK)
   \   00002EDA   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002EDC   0x2E00             CMP      R6,#+0
   \   00002EDE   0xD009             BEQ.N    ??RoadBrd_ParseString_507
   3192                                      return Status;
   \   00002EE0   0x0030             MOVS     R0,R6
   \   00002EE2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002EE4   0xF001 0xBD2B      B.W      ??RoadBrd_ParseString_4
   \                     ??RoadBrd_ParseString_375:
   \   00002EE8   0x........         DC32     ?_125
   \   00002EEC   0x........         DC32     ?_24
   \   00002EF0   0x........         DC32     ?_126
   3193                                  // NOW, Build Data String..
   3194                                  for (x=0; x<CAL_LAST_VALUE; x++)
   \                     ??RoadBrd_ParseString_507: (+1)
   \   00002EF4   0x2000             MOVS     R0,#+0
   \   00002EF6   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_508: (+1)
   \   00002EF8   0x2F16             CMP      R7,#+22
   \   00002EFA   0xF280 0x8766      BGE.W    ??RoadBrd_ParseString_509
   3195                                  {
   3196                                    // Build String
   3197                                    switch(x)
   \   00002EFE   0x2F00             CMP      R7,#+0
   \   00002F00   0xD036             BEQ.N    ??RoadBrd_ParseString_510
   \   00002F02   0x2F02             CMP      R7,#+2
   \   00002F04   0xF000 0x80DE      BEQ.W    ??RoadBrd_ParseString_511
   \   00002F08   0xF0C0 0x808A      BCC.W    ??RoadBrd_ParseString_512
   \   00002F0C   0x2F04             CMP      R7,#+4
   \   00002F0E   0xF000 0x8183      BEQ.W    ??RoadBrd_ParseString_513
   \   00002F12   0xF0C0 0x812B      BCC.W    ??RoadBrd_ParseString_514
   \   00002F16   0x2F06             CMP      R7,#+6
   \   00002F18   0xF000 0x8226      BEQ.W    ??RoadBrd_ParseString_515
   \   00002F1C   0xF0C0 0x81D0      BCC.W    ??RoadBrd_ParseString_516
   \   00002F20   0x2F08             CMP      R7,#+8
   \   00002F22   0xF000 0x82C9      BEQ.W    ??RoadBrd_ParseString_517
   \   00002F26   0xF0C0 0x8273      BCC.W    ??RoadBrd_ParseString_518
   \   00002F2A   0x2F0A             CMP      R7,#+10
   \   00002F2C   0xF000 0x836A      BEQ.W    ??RoadBrd_ParseString_519
   \   00002F30   0xF0C0 0x8316      BCC.W    ??RoadBrd_ParseString_520
   \   00002F34   0x2F0C             CMP      R7,#+12
   \   00002F36   0xF000 0x8409      BEQ.W    ??RoadBrd_ParseString_521
   \   00002F3A   0xF0C0 0x83B5      BCC.W    ??RoadBrd_ParseString_522
   \   00002F3E   0x2F0E             CMP      R7,#+14
   \   00002F40   0xF000 0x84A8      BEQ.W    ??RoadBrd_ParseString_523
   \   00002F44   0xF0C0 0x8454      BCC.W    ??RoadBrd_ParseString_524
   \   00002F48   0x2F10             CMP      R7,#+16
   \   00002F4A   0xF000 0x8549      BEQ.W    ??RoadBrd_ParseString_525
   \   00002F4E   0xF0C0 0x84F3      BCC.W    ??RoadBrd_ParseString_526
   \   00002F52   0x2F12             CMP      R7,#+18
   \   00002F54   0xF000 0x85E8      BEQ.W    ??RoadBrd_ParseString_527
   \   00002F58   0xF0C0 0x8594      BCC.W    ??RoadBrd_ParseString_528
   \   00002F5C   0x2F14             CMP      R7,#+20
   \   00002F5E   0xF000 0x8687      BEQ.W    ??RoadBrd_ParseString_529
   \   00002F62   0xF0C0 0x8631      BCC.W    ??RoadBrd_ParseString_530
   \   00002F66   0x2F15             CMP      R7,#+21
   \   00002F68   0xF000 0x86D4      BEQ.W    ??RoadBrd_ParseString_531
   \   00002F6C   0xF000 0xBF19      B.W      ??RoadBrd_ParseString_532
   3198                                    {
   3199                                      case CAL_SHNT_VLTG: //CAL_SHNT_VLTG Values
   3200                                        // Is this a BLE Operation?
   3201                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_510: (+1)
   \   00002F70   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002F72   0x2D00             CMP      R5,#+0
   \   00002F74   0xD024             BEQ.N    ??RoadBrd_ParseString_533
   3202                                        {
   3203                                          // Yes...Build and Send BLE Response NOW.
   3204                                          sprintf( (char *)tempBffr2, "%s:0002//%1.4f//%2.3f//", 
   3205                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3206                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3207                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00002F76   0x0038             MOVS     R0,R7
   \   00002F78   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002F7A   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00002F7E   0x4683             MOV      R11,R0
   \   00002F80   0x0038             MOVS     R0,R7
   \   00002F82   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002F84   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00002F88   0x4681             MOV      R9,R0
   \   00002F8A   0x0038             MOVS     R0,R7
   \   00002F8C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002F8E   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00002F92   0x4682             MOV      R10,R0
   \   00002F94   0x4658             MOV      R0,R11
   \   00002F96   0x.... 0x....      BL       __aeabi_f2d
   \   00002F9A   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00002F9E   0x4648             MOV      R0,R9
   \   00002FA0   0x.... 0x....      BL       __aeabi_f2d
   \   00002FA4   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00002FA8   0x4652             MOV      R2,R10
   \   00002FAA   0xF8DF 0x1EE4      LDR.W    R1,??RoadBrd_ParseString_534
   \   00002FAE   0xA80A             ADD      R0,SP,#+40
   \   00002FB0   0x.... 0x....      BL       sprintf
   3208                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002FB4   0xA80A             ADD      R0,SP,#+40
   \   00002FB6   0x.... 0x....      BL       strlen
   \   00002FBA   0xA90A             ADD      R1,SP,#+40
   \   00002FBC   0x.... 0x....      BL       BGM111_Transmit
   3209                                        }
   3210                                        sprintf( (char *)tempBffr2, "%s	0002		%1.4f		%2.3f\r\n", 
   3211                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3212                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3213                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_533: (+1)
   \   00002FC0   0x0038             MOVS     R0,R7
   \   00002FC2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002FC4   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00002FC8   0x4683             MOV      R11,R0
   \   00002FCA   0x0038             MOVS     R0,R7
   \   00002FCC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002FCE   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00002FD2   0x4681             MOV      R9,R0
   \   00002FD4   0x0038             MOVS     R0,R7
   \   00002FD6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002FD8   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00002FDC   0x4682             MOV      R10,R0
   \   00002FDE   0x4658             MOV      R0,R11
   \   00002FE0   0x.... 0x....      BL       __aeabi_f2d
   \   00002FE4   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00002FE8   0x4648             MOV      R0,R9
   \   00002FEA   0x.... 0x....      BL       __aeabi_f2d
   \   00002FEE   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00002FF2   0x4652             MOV      R2,R10
   \   00002FF4   0xF8DF 0x1EF4      LDR.W    R1,??RoadBrd_ParseString_535
   \   00002FF8   0xA80A             ADD      R0,SP,#+40
   \   00002FFA   0x.... 0x....      BL       sprintf
   3214                                        break;
   \   00002FFE   0xF000 0xBED0      B.W      ??RoadBrd_ParseString_532
   \   00003002   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_377:
   \   00003004   0x........         DC32     ?_127
   \   00003008   0x........         DC32     ?_128
   \   0000300C   0x........         DC32     ?_129
   \   00003010   0x........         DC32     ?_130
   \   00003014   0x........         DC32     ?_131
   \   00003018   0x........         DC32     ?_132
   \   0000301C   0x........         DC32     ?_133
   3215                                      case CAL_CURRENT: //CAL_CURRENT Values
   3216                                        // Is this a BLE Operation?
   3217                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_512: (+1)
   \   00003020   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003022   0x2D00             CMP      R5,#+0
   \   00003024   0xD024             BEQ.N    ??RoadBrd_ParseString_536
   3218                                        {
   3219                                          // Yes...Build and Send BLE Response NOW.
   3220                                          sprintf( (char *)tempBffr2, "%s:0004//%1.4f//%2.3f//", 
   3221                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3222                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3223                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003026   0x0038             MOVS     R0,R7
   \   00003028   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000302A   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   0000302E   0x4683             MOV      R11,R0
   \   00003030   0x0038             MOVS     R0,R7
   \   00003032   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003034   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003038   0x4681             MOV      R9,R0
   \   0000303A   0x0038             MOVS     R0,R7
   \   0000303C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000303E   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003042   0x4682             MOV      R10,R0
   \   00003044   0x4658             MOV      R0,R11
   \   00003046   0x.... 0x....      BL       __aeabi_f2d
   \   0000304A   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   0000304E   0x4648             MOV      R0,R9
   \   00003050   0x.... 0x....      BL       __aeabi_f2d
   \   00003054   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003058   0x4652             MOV      R2,R10
   \   0000305A   0xF8DF 0x1EF8      LDR.W    R1,??RoadBrd_ParseString_537
   \   0000305E   0xA80A             ADD      R0,SP,#+40
   \   00003060   0x.... 0x....      BL       sprintf
   3224                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003064   0xA80A             ADD      R0,SP,#+40
   \   00003066   0x.... 0x....      BL       strlen
   \   0000306A   0xA90A             ADD      R1,SP,#+40
   \   0000306C   0x.... 0x....      BL       BGM111_Transmit
   3225                                        }
   3226                                        sprintf( (char *)tempBffr2, "%s	        0004		%1.4f		%2.3f\r\n", 
   3227                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3228                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3229                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_536: (+1)
   \   00003070   0x0038             MOVS     R0,R7
   \   00003072   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003074   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003078   0x4683             MOV      R11,R0
   \   0000307A   0x0038             MOVS     R0,R7
   \   0000307C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000307E   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003082   0x4681             MOV      R9,R0
   \   00003084   0x0038             MOVS     R0,R7
   \   00003086   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003088   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   0000308C   0x4682             MOV      R10,R0
   \   0000308E   0x4658             MOV      R0,R11
   \   00003090   0x.... 0x....      BL       __aeabi_f2d
   \   00003094   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003098   0x4648             MOV      R0,R9
   \   0000309A   0x.... 0x....      BL       __aeabi_f2d
   \   0000309E   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000030A2   0x4652             MOV      R2,R10
   \   000030A4   0xF8DF 0x1EE4      LDR.W    R1,??RoadBrd_ParseString_538
   \   000030A8   0xA80A             ADD      R0,SP,#+40
   \   000030AA   0x.... 0x....      BL       sprintf
   3230                                        break;
   \   000030AE   0xF000 0xBE78      B.W      ??RoadBrd_ParseString_532
   \   000030B2   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_383:
   \   000030B4   0x........         DC32     ?_134
   \   000030B8   0x........         DC32     ?_135
   \   000030BC   0x........         DC32     ?_136
   \   000030C0   0x........         DC32     ?_137
   3231                                      case CAL_POWER: //CAL_POWER Values
   3232                                        // Is this a BLE Operation?
   3233                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_511: (+1)
   \   000030C4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000030C6   0x2D00             CMP      R5,#+0
   \   000030C8   0xD024             BEQ.N    ??RoadBrd_ParseString_539
   3234                                        {
   3235                                          // Yes...Build and Send BLE Response NOW.
   3236                                          sprintf( (char *)tempBffr2, "%s:0006//%1.4f//%2.3f//", 
   3237                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3238                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3239                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   000030CA   0x0038             MOVS     R0,R7
   \   000030CC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000030CE   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000030D2   0x4683             MOV      R11,R0
   \   000030D4   0x0038             MOVS     R0,R7
   \   000030D6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000030D8   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000030DC   0x4681             MOV      R9,R0
   \   000030DE   0x0038             MOVS     R0,R7
   \   000030E0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000030E2   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000030E6   0x4682             MOV      R10,R0
   \   000030E8   0x4658             MOV      R0,R11
   \   000030EA   0x.... 0x....      BL       __aeabi_f2d
   \   000030EE   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000030F2   0x4648             MOV      R0,R9
   \   000030F4   0x.... 0x....      BL       __aeabi_f2d
   \   000030F8   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000030FC   0x4652             MOV      R2,R10
   \   000030FE   0xF8DF 0x1EC8      LDR.W    R1,??RoadBrd_ParseString_540
   \   00003102   0xA80A             ADD      R0,SP,#+40
   \   00003104   0x.... 0x....      BL       sprintf
   3240                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003108   0xA80A             ADD      R0,SP,#+40
   \   0000310A   0x.... 0x....      BL       strlen
   \   0000310E   0xA90A             ADD      R1,SP,#+40
   \   00003110   0x.... 0x....      BL       BGM111_Transmit
   3241                                        }
   3242                                        sprintf( (char *)tempBffr2, "%s	0006		%1.4f		%2.3f\r\n", 
   3243                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3244                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3245                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_539: (+1)
   \   00003114   0x0038             MOVS     R0,R7
   \   00003116   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003118   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   0000311C   0x4683             MOV      R11,R0
   \   0000311E   0x0038             MOVS     R0,R7
   \   00003120   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003122   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003126   0x4681             MOV      R9,R0
   \   00003128   0x0038             MOVS     R0,R7
   \   0000312A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000312C   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003130   0x4682             MOV      R10,R0
   \   00003132   0x4658             MOV      R0,R11
   \   00003134   0x.... 0x....      BL       __aeabi_f2d
   \   00003138   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   0000313C   0x4648             MOV      R0,R9
   \   0000313E   0x.... 0x....      BL       __aeabi_f2d
   \   00003142   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003146   0x4652             MOV      R2,R10
   \   00003148   0xF8DF 0x1ED8      LDR.W    R1,??RoadBrd_ParseString_541
   \   0000314C   0xA80A             ADD      R0,SP,#+40
   \   0000314E   0x.... 0x....      BL       sprintf
   3246                                        break;
   \   00003152   0xF000 0xBE26      B.W      ??RoadBrd_ParseString_532
   \   00003156   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_393:
   \   00003158   0x........         DC32     ?_138
   \   0000315C   0x........         DC32     ?_139
   \   00003160   0x........         DC32     ?_140
   \   00003164   0x........         DC32     ?_141
   \   00003168   0x........         DC32     ?_142
   3247                                      case CAL_VOLTAGE: //CAL_VOLTAGE Values
   3248                                        // Is this a BLE Operation?
   3249                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_514: (+1)
   \   0000316C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000316E   0x2D00             CMP      R5,#+0
   \   00003170   0xD024             BEQ.N    ??RoadBrd_ParseString_542
   3250                                        {
   3251                                          // Yes...Build and Send BLE Response NOW.
   3252                                          sprintf( (char *)tempBffr2, "%s:0008//%1.4f//%2.3f//", 
   3253                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3254                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3255                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003172   0x0038             MOVS     R0,R7
   \   00003174   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003176   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   0000317A   0x4683             MOV      R11,R0
   \   0000317C   0x0038             MOVS     R0,R7
   \   0000317E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003180   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003184   0x4681             MOV      R9,R0
   \   00003186   0x0038             MOVS     R0,R7
   \   00003188   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000318A   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   0000318E   0x4682             MOV      R10,R0
   \   00003190   0x4658             MOV      R0,R11
   \   00003192   0x.... 0x....      BL       __aeabi_f2d
   \   00003196   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   0000319A   0x4648             MOV      R0,R9
   \   0000319C   0x.... 0x....      BL       __aeabi_f2d
   \   000031A0   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000031A4   0x4652             MOV      R2,R10
   \   000031A6   0xF8DF 0x1E80      LDR.W    R1,??RoadBrd_ParseString_541+0x4
   \   000031AA   0xA80A             ADD      R0,SP,#+40
   \   000031AC   0x.... 0x....      BL       sprintf
   3256                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000031B0   0xA80A             ADD      R0,SP,#+40
   \   000031B2   0x.... 0x....      BL       strlen
   \   000031B6   0xA90A             ADD      R1,SP,#+40
   \   000031B8   0x.... 0x....      BL       BGM111_Transmit
   3257                                        }
   3258                                        sprintf( (char *)tempBffr2, "%s	        0008		%1.4f		%2.3f\r\n", 
   3259                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3260                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3261                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_542: (+1)
   \   000031BC   0x0038             MOVS     R0,R7
   \   000031BE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000031C0   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000031C4   0x4683             MOV      R11,R0
   \   000031C6   0x0038             MOVS     R0,R7
   \   000031C8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000031CA   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000031CE   0x4681             MOV      R9,R0
   \   000031D0   0x0038             MOVS     R0,R7
   \   000031D2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000031D4   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000031D8   0x4682             MOV      R10,R0
   \   000031DA   0x4658             MOV      R0,R11
   \   000031DC   0x.... 0x....      BL       __aeabi_f2d
   \   000031E0   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000031E4   0x4648             MOV      R0,R9
   \   000031E6   0x.... 0x....      BL       __aeabi_f2d
   \   000031EA   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000031EE   0x4652             MOV      R2,R10
   \   000031F0   0xF8DF 0x1E38      LDR.W    R1,??RoadBrd_ParseString_541+0x8
   \   000031F4   0xA80A             ADD      R0,SP,#+40
   \   000031F6   0x.... 0x....      BL       sprintf
   3262                                        break;
   \   000031FA   0xF000 0xBDD2      B.W      ??RoadBrd_ParseString_532
   \   000031FE   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_398:
   \   00003200   0x........         DC32     ?_143
   \   00003204   0x........         DC32     ?_144
   \   00003208   0x........         DC32     ?_145
   \   0000320C   0x........         DC32     ?_146
   \   00003210   0x........         DC32     ?_147
   \   00003214   0x........         DC32     ?_148
   3263                                      case CAL_TEMPC: //CAL_TEMPC Values
   3264                                        // Is this a BLE Operation?
   3265                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_513: (+1)
   \   00003218   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000321A   0x2D00             CMP      R5,#+0
   \   0000321C   0xD024             BEQ.N    ??RoadBrd_ParseString_543
   3266                                        {
   3267                                          // Yes...Build and Send BLE Response NOW.
   3268                                          sprintf( (char *)tempBffr2, "%s:000A//%1.4f//%2.3f//", 
   3269                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3270                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3271                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   0000321E   0x0038             MOVS     R0,R7
   \   00003220   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003222   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003226   0x4683             MOV      R11,R0
   \   00003228   0x0038             MOVS     R0,R7
   \   0000322A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000322C   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003230   0x4681             MOV      R9,R0
   \   00003232   0x0038             MOVS     R0,R7
   \   00003234   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003236   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   0000323A   0x4682             MOV      R10,R0
   \   0000323C   0x4658             MOV      R0,R11
   \   0000323E   0x.... 0x....      BL       __aeabi_f2d
   \   00003242   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003246   0x4648             MOV      R0,R9
   \   00003248   0x.... 0x....      BL       __aeabi_f2d
   \   0000324C   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003250   0x4652             MOV      R2,R10
   \   00003252   0xF8DF 0x1E88      LDR.W    R1,??RoadBrd_ParseString_544
   \   00003256   0xA80A             ADD      R0,SP,#+40
   \   00003258   0x.... 0x....      BL       sprintf
   3272                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000325C   0xA80A             ADD      R0,SP,#+40
   \   0000325E   0x.... 0x....      BL       strlen
   \   00003262   0xA90A             ADD      R1,SP,#+40
   \   00003264   0x.... 0x....      BL       BGM111_Transmit
   3273                                        }
   3274                                        sprintf( (char *)tempBffr2, "%s	000A		%1.4f		%2.3f\r\n", 
   3275                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3276                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3277                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_543: (+1)
   \   00003268   0x0038             MOVS     R0,R7
   \   0000326A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000326C   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003270   0x4683             MOV      R11,R0
   \   00003272   0x0038             MOVS     R0,R7
   \   00003274   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003276   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   0000327A   0x4681             MOV      R9,R0
   \   0000327C   0x0038             MOVS     R0,R7
   \   0000327E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003280   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003284   0x4682             MOV      R10,R0
   \   00003286   0x4658             MOV      R0,R11
   \   00003288   0x.... 0x....      BL       __aeabi_f2d
   \   0000328C   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003290   0x4648             MOV      R0,R9
   \   00003292   0x.... 0x....      BL       __aeabi_f2d
   \   00003296   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000329A   0x4652             MOV      R2,R10
   \   0000329C   0xF8DF 0x1E9C      LDR.W    R1,??RoadBrd_ParseString_545
   \   000032A0   0xA80A             ADD      R0,SP,#+40
   \   000032A2   0x.... 0x....      BL       sprintf
   3278                                        break;
   \   000032A6   0xF000 0xBD7C      B.W      ??RoadBrd_ParseString_532
   \   000032AA   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_404:
   \   000032AC   0x........         DC32     ?_149
   \   000032B0   0x........         DC32     ?_150
   \   000032B4   0x........         DC32     ?_151
   \   000032B8   0x........         DC32     ?_152
   \   000032BC   0x........         DC32     ?_153
   3279                                      case CAL_TEMPF: //CAL_TEMPF Values
   3280                                        // Is this a BLE Operation?
   3281                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_516: (+1)
   \   000032C0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000032C2   0x2D00             CMP      R5,#+0
   \   000032C4   0xD024             BEQ.N    ??RoadBrd_ParseString_546
   3282                                        {
   3283                                          // Yes...Build and Send BLE Response NOW.
   3284                                          sprintf( (char *)tempBffr2, "%s:000B//%1.4f//%2.3f//", 
   3285                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3286                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3287                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   000032C6   0x0038             MOVS     R0,R7
   \   000032C8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000032CA   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000032CE   0x4683             MOV      R11,R0
   \   000032D0   0x0038             MOVS     R0,R7
   \   000032D2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000032D4   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000032D8   0x4681             MOV      R9,R0
   \   000032DA   0x0038             MOVS     R0,R7
   \   000032DC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000032DE   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000032E2   0x4682             MOV      R10,R0
   \   000032E4   0x4658             MOV      R0,R11
   \   000032E6   0x.... 0x....      BL       __aeabi_f2d
   \   000032EA   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000032EE   0x4648             MOV      R0,R9
   \   000032F0   0x.... 0x....      BL       __aeabi_f2d
   \   000032F4   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000032F8   0x4652             MOV      R2,R10
   \   000032FA   0xF8DF 0x1E44      LDR.W    R1,??RoadBrd_ParseString_545+0x4
   \   000032FE   0xA80A             ADD      R0,SP,#+40
   \   00003300   0x.... 0x....      BL       sprintf
   3288                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003304   0xA80A             ADD      R0,SP,#+40
   \   00003306   0x.... 0x....      BL       strlen
   \   0000330A   0xA90A             ADD      R1,SP,#+40
   \   0000330C   0x.... 0x....      BL       BGM111_Transmit
   3289                                        }
   3290                                        sprintf( (char *)tempBffr2, "%s	000B		%1.4f		%2.3f\r\n", 
   3291                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3292                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3293                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_546: (+1)
   \   00003310   0x0038             MOVS     R0,R7
   \   00003312   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003314   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003318   0x4683             MOV      R11,R0
   \   0000331A   0x0038             MOVS     R0,R7
   \   0000331C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000331E   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003322   0x4681             MOV      R9,R0
   \   00003324   0x0038             MOVS     R0,R7
   \   00003326   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003328   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   0000332C   0x4682             MOV      R10,R0
   \   0000332E   0x4658             MOV      R0,R11
   \   00003330   0x.... 0x....      BL       __aeabi_f2d
   \   00003334   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003338   0x4648             MOV      R0,R9
   \   0000333A   0x.... 0x....      BL       __aeabi_f2d
   \   0000333E   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003342   0x4652             MOV      R2,R10
   \   00003344   0xF8DF 0x1DFC      LDR.W    R1,??RoadBrd_ParseString_545+0x8
   \   00003348   0xA80A             ADD      R0,SP,#+40
   \   0000334A   0x.... 0x....      BL       sprintf
   3294                                        break;
   \   0000334E   0xF000 0xBD28      B.W      ??RoadBrd_ParseString_532
   \   00003352   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_410:
   \   00003354   0x........         DC32     ?_154
   \   00003358   0x........         DC32     ?_155
   \   0000335C   0x........         DC32     ?_156
   \   00003360   0x........         DC32     ?_157
   \   00003364   0x........         DC32     ?_158
   3295                                      case CAL_PRESSURE: //CAL_PRESSURE Values
   3296                                        // Is this a BLE Operation?
   3297                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_515: (+1)
   \   00003368   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000336A   0x2D00             CMP      R5,#+0
   \   0000336C   0xD024             BEQ.N    ??RoadBrd_ParseString_547
   3298                                        {
   3299                                          // Yes...Build and Send BLE Response NOW.
   3300                                          sprintf( (char *)tempBffr2, "%s:0011//%1.4f//%2.3f//", 
   3301                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3302                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3303                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   0000336E   0x0038             MOVS     R0,R7
   \   00003370   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003372   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003376   0x4683             MOV      R11,R0
   \   00003378   0x0038             MOVS     R0,R7
   \   0000337A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000337C   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003380   0x4681             MOV      R9,R0
   \   00003382   0x0038             MOVS     R0,R7
   \   00003384   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003386   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   0000338A   0x4682             MOV      R10,R0
   \   0000338C   0x4658             MOV      R0,R11
   \   0000338E   0x.... 0x....      BL       __aeabi_f2d
   \   00003392   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003396   0x4648             MOV      R0,R9
   \   00003398   0x.... 0x....      BL       __aeabi_f2d
   \   0000339C   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000033A0   0x4652             MOV      R2,R10
   \   000033A2   0xF8DF 0x1EAC      LDR.W    R1,??RoadBrd_ParseString_548
   \   000033A6   0xA80A             ADD      R0,SP,#+40
   \   000033A8   0x.... 0x....      BL       sprintf
   3304                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000033AC   0xA80A             ADD      R0,SP,#+40
   \   000033AE   0x.... 0x....      BL       strlen
   \   000033B2   0xA90A             ADD      R1,SP,#+40
   \   000033B4   0x.... 0x....      BL       BGM111_Transmit
   3305                                        }
   3306                                        sprintf( (char *)tempBffr2, "%s	0011		%1.4f		%2.3f\r\n", 
   3307                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3308                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3309                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_547: (+1)
   \   000033B8   0x0038             MOVS     R0,R7
   \   000033BA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000033BC   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000033C0   0x4683             MOV      R11,R0
   \   000033C2   0x0038             MOVS     R0,R7
   \   000033C4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000033C6   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000033CA   0x4681             MOV      R9,R0
   \   000033CC   0x0038             MOVS     R0,R7
   \   000033CE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000033D0   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000033D4   0x4682             MOV      R10,R0
   \   000033D6   0x4658             MOV      R0,R11
   \   000033D8   0x.... 0x....      BL       __aeabi_f2d
   \   000033DC   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000033E0   0x4648             MOV      R0,R9
   \   000033E2   0x.... 0x....      BL       __aeabi_f2d
   \   000033E6   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000033EA   0x4652             MOV      R2,R10
   \   000033EC   0xF8DF 0x1E64      LDR.W    R1,??RoadBrd_ParseString_548+0x4
   \   000033F0   0xA80A             ADD      R0,SP,#+40
   \   000033F2   0x.... 0x....      BL       sprintf
   3310                                        break;
   \   000033F6   0xF000 0xBCD4      B.W      ??RoadBrd_ParseString_532
   \   000033FA   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_415:
   \   000033FC   0x........         DC32     ?_159
   \   00003400   0x........         DC32     ?_160
   \   00003404   0x........         DC32     ?_161
   \   00003408   0x........         DC32     ?_162
   \   0000340C   0x........         DC32     ?_163
   3311                                      case CAL_HUMIDITY: //CAL_HUMIDITY Values
   3312                                        // Is this a BLE Operation?
   3313                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_518: (+1)
   \   00003410   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003412   0x2D00             CMP      R5,#+0
   \   00003414   0xD024             BEQ.N    ??RoadBrd_ParseString_549
   3314                                        {
   3315                                          // Yes...Build and Send BLE Response NOW.
   3316                                          sprintf( (char *)tempBffr2, "%s:0030//%1.4f//%2.3f//", 
   3317                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3318                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3319                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003416   0x0038             MOVS     R0,R7
   \   00003418   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000341A   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   0000341E   0x4683             MOV      R11,R0
   \   00003420   0x0038             MOVS     R0,R7
   \   00003422   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003424   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003428   0x4681             MOV      R9,R0
   \   0000342A   0x0038             MOVS     R0,R7
   \   0000342C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000342E   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003432   0x4682             MOV      R10,R0
   \   00003434   0x4658             MOV      R0,R11
   \   00003436   0x.... 0x....      BL       __aeabi_f2d
   \   0000343A   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   0000343E   0x4648             MOV      R0,R9
   \   00003440   0x.... 0x....      BL       __aeabi_f2d
   \   00003444   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003448   0x4652             MOV      R2,R10
   \   0000344A   0xF8DF 0x1E6C      LDR.W    R1,??RoadBrd_ParseString_550
   \   0000344E   0xA80A             ADD      R0,SP,#+40
   \   00003450   0x.... 0x....      BL       sprintf
   3320                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003454   0xA80A             ADD      R0,SP,#+40
   \   00003456   0x.... 0x....      BL       strlen
   \   0000345A   0xA90A             ADD      R1,SP,#+40
   \   0000345C   0x.... 0x....      BL       BGM111_Transmit
   3321                                        }
   3322                                        sprintf( (char *)tempBffr2, "%s	0030		%1.4f		%2.3f\r\n", 
   3323                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3324                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3325                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_549: (+1)
   \   00003460   0x0038             MOVS     R0,R7
   \   00003462   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003464   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003468   0x4683             MOV      R11,R0
   \   0000346A   0x0038             MOVS     R0,R7
   \   0000346C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000346E   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003472   0x4681             MOV      R9,R0
   \   00003474   0x0038             MOVS     R0,R7
   \   00003476   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003478   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   0000347C   0x4682             MOV      R10,R0
   \   0000347E   0x4658             MOV      R0,R11
   \   00003480   0x.... 0x....      BL       __aeabi_f2d
   \   00003484   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003488   0x4648             MOV      R0,R9
   \   0000348A   0x.... 0x....      BL       __aeabi_f2d
   \   0000348E   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003492   0x4652             MOV      R2,R10
   \   00003494   0xF8DF 0x1E70      LDR.W    R1,??RoadBrd_ParseString_551
   \   00003498   0xA80A             ADD      R0,SP,#+40
   \   0000349A   0x.... 0x....      BL       sprintf
   3326                                        break;
   \   0000349E   0xF000 0xBC80      B.W      ??RoadBrd_ParseString_532
   \   000034A2   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_423:
   \   000034A4   0x........         DC32     ?_164
   \   000034A8   0x........         DC32     ?_165
   \   000034AC   0x........         DC32     ?_166
   \   000034B0   0x........         DC32     ?_167
   \   000034B4   0x........         DC32     ?_168
   3327                                      case CAL_HUM_TEMPC: //CAL_HUM_TEMPC Values
   3328                                        // Is this a BLE Operation?
   3329                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_517: (+1)
   \   000034B8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000034BA   0x2D00             CMP      R5,#+0
   \   000034BC   0xD024             BEQ.N    ??RoadBrd_ParseString_552
   3330                                        {
   3331                                          // Yes...Build and Send BLE Response NOW.
   3332                                          sprintf( (char *)tempBffr2, "%s:0032//%1.4f//%2.3f//", 
   3333                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3334                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3335                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   000034BE   0x0038             MOVS     R0,R7
   \   000034C0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000034C2   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000034C6   0x4683             MOV      R11,R0
   \   000034C8   0x0038             MOVS     R0,R7
   \   000034CA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000034CC   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000034D0   0x4681             MOV      R9,R0
   \   000034D2   0x0038             MOVS     R0,R7
   \   000034D4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000034D6   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000034DA   0x4682             MOV      R10,R0
   \   000034DC   0x4658             MOV      R0,R11
   \   000034DE   0x.... 0x....      BL       __aeabi_f2d
   \   000034E2   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000034E6   0x4648             MOV      R0,R9
   \   000034E8   0x.... 0x....      BL       __aeabi_f2d
   \   000034EC   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000034F0   0x4652             MOV      R2,R10
   \   000034F2   0xF8DF 0x1E74      LDR.W    R1,??RoadBrd_ParseString_553
   \   000034F6   0xA80A             ADD      R0,SP,#+40
   \   000034F8   0x.... 0x....      BL       sprintf
   3336                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000034FC   0xA80A             ADD      R0,SP,#+40
   \   000034FE   0x.... 0x....      BL       strlen
   \   00003502   0xA90A             ADD      R1,SP,#+40
   \   00003504   0x.... 0x....      BL       BGM111_Transmit
   3337                                        }
   3338                                        sprintf( (char *)tempBffr2, "%s	0032		%1.4f		%2.3f\r\n", 
   3339                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3340                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3341                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_552: (+1)
   \   00003508   0x0038             MOVS     R0,R7
   \   0000350A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000350C   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003510   0x4683             MOV      R11,R0
   \   00003512   0x0038             MOVS     R0,R7
   \   00003514   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003516   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   0000351A   0x4681             MOV      R9,R0
   \   0000351C   0x0038             MOVS     R0,R7
   \   0000351E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003520   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003524   0x4682             MOV      R10,R0
   \   00003526   0x4658             MOV      R0,R11
   \   00003528   0x.... 0x....      BL       __aeabi_f2d
   \   0000352C   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003530   0x4648             MOV      R0,R9
   \   00003532   0x.... 0x....      BL       __aeabi_f2d
   \   00003536   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000353A   0x4652             MOV      R2,R10
   \   0000353C   0xF8DF 0x1E2C      LDR.W    R1,??RoadBrd_ParseString_553+0x4
   \   00003540   0xA80A             ADD      R0,SP,#+40
   \   00003542   0x.... 0x....      BL       sprintf
   3342                                        break;
   \   00003546   0xF000 0xBC2C      B.W      ??RoadBrd_ParseString_532
   \   0000354A   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_428:
   \   0000354C   0x........         DC32     ?_169
   \   00003550   0x........         DC32     ?_170
   \   00003554   0x........         DC32     ?_171
   \   00003558   0x........         DC32     ?_172
   \   0000355C   0x........         DC32     ?_173
   3343                                      case CAL_HUM_TEMPF: //CAL_HUM_TEMPF Values
   3344                                        // Is this a BLE Operation?
   3345                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_520: (+1)
   \   00003560   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003562   0x2D00             CMP      R5,#+0
   \   00003564   0xD024             BEQ.N    ??RoadBrd_ParseString_554
   3346                                        {
   3347                                          // Yes...Build and Send BLE Response NOW.
   3348                                          sprintf( (char *)tempBffr2, "%s:0033//%1.4f//%2.3f//", 
   3349                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3350                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3351                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003566   0x0038             MOVS     R0,R7
   \   00003568   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000356A   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   0000356E   0x4683             MOV      R11,R0
   \   00003570   0x0038             MOVS     R0,R7
   \   00003572   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003574   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003578   0x4681             MOV      R9,R0
   \   0000357A   0x0038             MOVS     R0,R7
   \   0000357C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000357E   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003582   0x4682             MOV      R10,R0
   \   00003584   0x4658             MOV      R0,R11
   \   00003586   0x.... 0x....      BL       __aeabi_f2d
   \   0000358A   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   0000358E   0x4648             MOV      R0,R9
   \   00003590   0x.... 0x....      BL       __aeabi_f2d
   \   00003594   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003598   0x4652             MOV      R2,R10
   \   0000359A   0xF8DF 0x1DD4      LDR.W    R1,??RoadBrd_ParseString_553+0x8
   \   0000359E   0xA80A             ADD      R0,SP,#+40
   \   000035A0   0x.... 0x....      BL       sprintf
   3352                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000035A4   0xA80A             ADD      R0,SP,#+40
   \   000035A6   0x.... 0x....      BL       strlen
   \   000035AA   0xA90A             ADD      R1,SP,#+40
   \   000035AC   0x.... 0x....      BL       BGM111_Transmit
   3353                                        }
   3354                                        sprintf( (char *)tempBffr2, "%s	0033		%1.4f		%2.3f\r\n", 
   3355                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3356                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3357                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_554: (+1)
   \   000035B0   0x0038             MOVS     R0,R7
   \   000035B2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000035B4   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000035B8   0x4683             MOV      R11,R0
   \   000035BA   0x0038             MOVS     R0,R7
   \   000035BC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000035BE   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000035C2   0x4681             MOV      R9,R0
   \   000035C4   0x0038             MOVS     R0,R7
   \   000035C6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000035C8   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000035CC   0x4682             MOV      R10,R0
   \   000035CE   0x4658             MOV      R0,R11
   \   000035D0   0x.... 0x....      BL       __aeabi_f2d
   \   000035D4   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000035D8   0x4648             MOV      R0,R9
   \   000035DA   0x.... 0x....      BL       __aeabi_f2d
   \   000035DE   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000035E2   0x4652             MOV      R2,R10
   \   000035E4   0xF8DF 0x1E70      LDR.W    R1,??RoadBrd_ParseString_555
   \   000035E8   0xA80A             ADD      R0,SP,#+40
   \   000035EA   0x.... 0x....      BL       sprintf
   3358                                        break;
   \   000035EE   0xE3D8             B.N      ??RoadBrd_ParseString_532
   \                     ??RoadBrd_ParseString_434:
   \   000035F0   0x........         DC32     ?_174
   \   000035F4   0x........         DC32     ?_175
   \   000035F8   0x........         DC32     ?_176
   \   000035FC   0x........         DC32     ?_177
   \   00003600   0x........         DC32     ?_178
   3359                                      case CAL_RGB_RED: //CAL_RGB_RED Values
   3360                                        // Is this a BLE Operation?
   3361                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_519: (+1)
   \   00003604   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003606   0x2D00             CMP      R5,#+0
   \   00003608   0xD024             BEQ.N    ??RoadBrd_ParseString_556
   3362                                        {
   3363                                          // Yes...Build and Send BLE Response NOW.
   3364                                          sprintf( (char *)tempBffr2, "%s:000D//%1.4f//%2.3f//", 
   3365                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3366                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3367                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   0000360A   0x0038             MOVS     R0,R7
   \   0000360C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000360E   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003612   0x4683             MOV      R11,R0
   \   00003614   0x0038             MOVS     R0,R7
   \   00003616   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003618   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   0000361C   0x4681             MOV      R9,R0
   \   0000361E   0x0038             MOVS     R0,R7
   \   00003620   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003622   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003626   0x4682             MOV      R10,R0
   \   00003628   0x4658             MOV      R0,R11
   \   0000362A   0x.... 0x....      BL       __aeabi_f2d
   \   0000362E   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003632   0x4648             MOV      R0,R9
   \   00003634   0x.... 0x....      BL       __aeabi_f2d
   \   00003638   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000363C   0x4652             MOV      R2,R10
   \   0000363E   0xF8DF 0x1E1C      LDR.W    R1,??RoadBrd_ParseString_555+0x4
   \   00003642   0xA80A             ADD      R0,SP,#+40
   \   00003644   0x.... 0x....      BL       sprintf
   3368                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003648   0xA80A             ADD      R0,SP,#+40
   \   0000364A   0x.... 0x....      BL       strlen
   \   0000364E   0xA90A             ADD      R1,SP,#+40
   \   00003650   0x.... 0x....      BL       BGM111_Transmit
   3369                                        }
   3370                                        sprintf( (char *)tempBffr2, "%s	        000D		%1.4f		%2.3f\r\n", 
   3371                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3372                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3373                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_556: (+1)
   \   00003654   0x0038             MOVS     R0,R7
   \   00003656   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003658   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   0000365C   0x4683             MOV      R11,R0
   \   0000365E   0x0038             MOVS     R0,R7
   \   00003660   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003662   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003666   0x4681             MOV      R9,R0
   \   00003668   0x0038             MOVS     R0,R7
   \   0000366A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000366C   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003670   0x4682             MOV      R10,R0
   \   00003672   0x4658             MOV      R0,R11
   \   00003674   0x.... 0x....      BL       __aeabi_f2d
   \   00003678   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   0000367C   0x4648             MOV      R0,R9
   \   0000367E   0x.... 0x....      BL       __aeabi_f2d
   \   00003682   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003686   0x4652             MOV      R2,R10
   \   00003688   0xF8DF 0x1E44      LDR.W    R1,??RoadBrd_ParseString_557
   \   0000368C   0xA80A             ADD      R0,SP,#+40
   \   0000368E   0x.... 0x....      BL       sprintf
   3374                                        break;
   \   00003692   0xE386             B.N      ??RoadBrd_ParseString_532
   \                     ??RoadBrd_ParseString_439:
   \   00003694   0x........         DC32     ?_179
   \   00003698   0x........         DC32     ?_180
   \   0000369C   0x........         DC32     ?_181
   \   000036A0   0x........         DC32     ?_182
   \   000036A4   0x........         DC32     ?_183
   3375                                      case CAL_RGB_GREEN: //CAL_RGB_GREEN Values
   3376                                        // Is this a BLE Operation?
   3377                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_522: (+1)
   \   000036A8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000036AA   0x2D00             CMP      R5,#+0
   \   000036AC   0xD024             BEQ.N    ??RoadBrd_ParseString_558
   3378                                        {
   3379                                          // Yes...Build and Send BLE Response NOW.
   3380                                          sprintf( (char *)tempBffr2, "%s:000E//%1.4f//%2.3f//", 
   3381                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3382                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3383                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   000036AE   0x0038             MOVS     R0,R7
   \   000036B0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000036B2   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000036B6   0x4683             MOV      R11,R0
   \   000036B8   0x0038             MOVS     R0,R7
   \   000036BA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000036BC   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000036C0   0x4681             MOV      R9,R0
   \   000036C2   0x0038             MOVS     R0,R7
   \   000036C4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000036C6   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000036CA   0x4682             MOV      R10,R0
   \   000036CC   0x4658             MOV      R0,R11
   \   000036CE   0x.... 0x....      BL       __aeabi_f2d
   \   000036D2   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000036D6   0x4648             MOV      R0,R9
   \   000036D8   0x.... 0x....      BL       __aeabi_f2d
   \   000036DC   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000036E0   0x4652             MOV      R2,R10
   \   000036E2   0xF8DF 0x1E48      LDR.W    R1,??RoadBrd_ParseString_559
   \   000036E6   0xA80A             ADD      R0,SP,#+40
   \   000036E8   0x.... 0x....      BL       sprintf
   3384                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000036EC   0xA80A             ADD      R0,SP,#+40
   \   000036EE   0x.... 0x....      BL       strlen
   \   000036F2   0xA90A             ADD      R1,SP,#+40
   \   000036F4   0x.... 0x....      BL       BGM111_Transmit
   3385                                        }
   3386                                        sprintf( (char *)tempBffr2, "%s	000E		%1.4f		%2.3f\r\n", 
   3387                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3388                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3389                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_558: (+1)
   \   000036F8   0x0038             MOVS     R0,R7
   \   000036FA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000036FC   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003700   0x4683             MOV      R11,R0
   \   00003702   0x0038             MOVS     R0,R7
   \   00003704   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003706   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   0000370A   0x4681             MOV      R9,R0
   \   0000370C   0x0038             MOVS     R0,R7
   \   0000370E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003710   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003714   0x4682             MOV      R10,R0
   \   00003716   0x4658             MOV      R0,R11
   \   00003718   0x.... 0x....      BL       __aeabi_f2d
   \   0000371C   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003720   0x4648             MOV      R0,R9
   \   00003722   0x.... 0x....      BL       __aeabi_f2d
   \   00003726   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000372A   0x4652             MOV      R2,R10
   \   0000372C   0xF8DF 0x1E34      LDR.W    R1,??RoadBrd_ParseString_560
   \   00003730   0xA80A             ADD      R0,SP,#+40
   \   00003732   0x.... 0x....      BL       sprintf
   3390                                        break;
   \   00003736   0xE334             B.N      ??RoadBrd_ParseString_532
   \                     ??RoadBrd_ParseString_447:
   \   00003738   0x........         DC32     ?_184
   \   0000373C   0x........         DC32     ?_185
   \   00003740   0x........         DC32     ?_186
   \   00003744   0x........         DC32     ?_187
   \   00003748   0x........         DC32     ?_188
   3391                                      case CAL_RGB_BLUE: //CAL_RGB_BLUE Values
   3392                                        // Is this a BLE Operation?
   3393                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_521: (+1)
   \   0000374C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000374E   0x2D00             CMP      R5,#+0
   \   00003750   0xD024             BEQ.N    ??RoadBrd_ParseString_561
   3394                                        {
   3395                                          // Yes...Build and Send BLE Response NOW.
   3396                                          sprintf( (char *)tempBffr2, "%s:000F//%1.4f//%2.3f//", 
   3397                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3398                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3399                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003752   0x0038             MOVS     R0,R7
   \   00003754   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003756   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   0000375A   0x4683             MOV      R11,R0
   \   0000375C   0x0038             MOVS     R0,R7
   \   0000375E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003760   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003764   0x4681             MOV      R9,R0
   \   00003766   0x0038             MOVS     R0,R7
   \   00003768   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000376A   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   0000376E   0x4682             MOV      R10,R0
   \   00003770   0x4658             MOV      R0,R11
   \   00003772   0x.... 0x....      BL       __aeabi_f2d
   \   00003776   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   0000377A   0x4648             MOV      R0,R9
   \   0000377C   0x.... 0x....      BL       __aeabi_f2d
   \   00003780   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003784   0x4652             MOV      R2,R10
   \   00003786   0xF8DF 0x1E3C      LDR.W    R1,??RoadBrd_ParseString_562
   \   0000378A   0xA80A             ADD      R0,SP,#+40
   \   0000378C   0x.... 0x....      BL       sprintf
   3400                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003790   0xA80A             ADD      R0,SP,#+40
   \   00003792   0x.... 0x....      BL       strlen
   \   00003796   0xA90A             ADD      R1,SP,#+40
   \   00003798   0x.... 0x....      BL       BGM111_Transmit
   3401                                        }
   3402                                        sprintf( (char *)tempBffr2, "%s	000F		%1.4f		%2.3f\r\n", 
   3403                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3404                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3405                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_561: (+1)
   \   0000379C   0x0038             MOVS     R0,R7
   \   0000379E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000037A0   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000037A4   0x4683             MOV      R11,R0
   \   000037A6   0x0038             MOVS     R0,R7
   \   000037A8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000037AA   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000037AE   0x4681             MOV      R9,R0
   \   000037B0   0x0038             MOVS     R0,R7
   \   000037B2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000037B4   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000037B8   0x4682             MOV      R10,R0
   \   000037BA   0x4658             MOV      R0,R11
   \   000037BC   0x.... 0x....      BL       __aeabi_f2d
   \   000037C0   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000037C4   0x4648             MOV      R0,R9
   \   000037C6   0x.... 0x....      BL       __aeabi_f2d
   \   000037CA   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000037CE   0x4652             MOV      R2,R10
   \   000037D0   0xF8DF 0x1DF4      LDR.W    R1,??RoadBrd_ParseString_562+0x4
   \   000037D4   0xA80A             ADD      R0,SP,#+40
   \   000037D6   0x.... 0x....      BL       sprintf
   3406                                        break;
   \   000037DA   0xE2E2             B.N      ??RoadBrd_ParseString_532
   \                     ??RoadBrd_ParseString_452:
   \   000037DC   0x........         DC32     ?_189
   \   000037E0   0x........         DC32     ?_190
   \   000037E4   0x........         DC32     ?_191
   \   000037E8   0x........         DC32     ?_192
   \   000037EC   0x........         DC32     ?_193
   3407                                      case CAL_THERM_C: //CAL_THERM_C Values
   3408                                        // Is this a BLE Operation?
   3409                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_524: (+1)
   \   000037F0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000037F2   0x2D00             CMP      R5,#+0
   \   000037F4   0xD024             BEQ.N    ??RoadBrd_ParseString_563
   3410                                        {
   3411                                          // Yes...Build and Send BLE Response NOW.
   3412                                          sprintf( (char *)tempBffr2, "%s:0017//%1.4f//%2.3f//", 
   3413                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3414                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3415                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   000037F6   0x0038             MOVS     R0,R7
   \   000037F8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000037FA   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000037FE   0x4683             MOV      R11,R0
   \   00003800   0x0038             MOVS     R0,R7
   \   00003802   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003804   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003808   0x4681             MOV      R9,R0
   \   0000380A   0x0038             MOVS     R0,R7
   \   0000380C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000380E   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003812   0x4682             MOV      R10,R0
   \   00003814   0x4658             MOV      R0,R11
   \   00003816   0x.... 0x....      BL       __aeabi_f2d
   \   0000381A   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   0000381E   0x4648             MOV      R0,R9
   \   00003820   0x.... 0x....      BL       __aeabi_f2d
   \   00003824   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003828   0x4652             MOV      R2,R10
   \   0000382A   0xF8DF 0x1E38      LDR.W    R1,??RoadBrd_ParseString_564
   \   0000382E   0xA80A             ADD      R0,SP,#+40
   \   00003830   0x.... 0x....      BL       sprintf
   3416                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003834   0xA80A             ADD      R0,SP,#+40
   \   00003836   0x.... 0x....      BL       strlen
   \   0000383A   0xA90A             ADD      R1,SP,#+40
   \   0000383C   0x.... 0x....      BL       BGM111_Transmit
   3417                                        }
   3418                                        sprintf( (char *)tempBffr2, "%s	        0017		%1.4f		%2.3f\r\n", 
   3419                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3420                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3421                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_563: (+1)
   \   00003840   0x0038             MOVS     R0,R7
   \   00003842   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003844   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003848   0x4683             MOV      R11,R0
   \   0000384A   0x0038             MOVS     R0,R7
   \   0000384C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000384E   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003852   0x4681             MOV      R9,R0
   \   00003854   0x0038             MOVS     R0,R7
   \   00003856   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003858   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   0000385C   0x4682             MOV      R10,R0
   \   0000385E   0x4658             MOV      R0,R11
   \   00003860   0x.... 0x....      BL       __aeabi_f2d
   \   00003864   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003868   0x4648             MOV      R0,R9
   \   0000386A   0x.... 0x....      BL       __aeabi_f2d
   \   0000386E   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003872   0x4652             MOV      R2,R10
   \   00003874   0xF8DF 0x1E20      LDR.W    R1,??RoadBrd_ParseString_565
   \   00003878   0xA80A             ADD      R0,SP,#+40
   \   0000387A   0x.... 0x....      BL       sprintf
   3422                                        break;
   \   0000387E   0xE290             B.N      ??RoadBrd_ParseString_532
   \                     ??RoadBrd_ParseString_458:
   \   00003880   0x........         DC32     ?_194
   \   00003884   0x........         DC32     ?_195
   \   00003888   0x........         DC32     ?_196
   \   0000388C   0x........         DC32     ?_197
   \   00003890   0x........         DC32     ?_198
   3423                                      case CAL_ROADT_1C: //CAL_ROADT_1C Values
   3424                                        // Is this a BLE Operation?
   3425                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_523: (+1)
   \   00003894   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003896   0x2D00             CMP      R5,#+0
   \   00003898   0xD024             BEQ.N    ??RoadBrd_ParseString_566
   3426                                        {
   3427                                          // Yes...Build and Send BLE Response NOW.
   3428                                          sprintf( (char *)tempBffr2, "%s:0019//%1.4f//%2.3f//", 
   3429                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3430                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3431                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   0000389A   0x0038             MOVS     R0,R7
   \   0000389C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000389E   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000038A2   0x4683             MOV      R11,R0
   \   000038A4   0x0038             MOVS     R0,R7
   \   000038A6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000038A8   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000038AC   0x4681             MOV      R9,R0
   \   000038AE   0x0038             MOVS     R0,R7
   \   000038B0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000038B2   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000038B6   0x4682             MOV      R10,R0
   \   000038B8   0x4658             MOV      R0,R11
   \   000038BA   0x.... 0x....      BL       __aeabi_f2d
   \   000038BE   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000038C2   0x4648             MOV      R0,R9
   \   000038C4   0x.... 0x....      BL       __aeabi_f2d
   \   000038C8   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000038CC   0x4652             MOV      R2,R10
   \   000038CE   0xF8DF 0x1E30      LDR.W    R1,??RoadBrd_ParseString_567
   \   000038D2   0xA80A             ADD      R0,SP,#+40
   \   000038D4   0x.... 0x....      BL       sprintf
   3432                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000038D8   0xA80A             ADD      R0,SP,#+40
   \   000038DA   0x.... 0x....      BL       strlen
   \   000038DE   0xA90A             ADD      R1,SP,#+40
   \   000038E0   0x.... 0x....      BL       BGM111_Transmit
   3433                                        }
   3434                                        sprintf( (char *)tempBffr2, "%s	0019		%1.4f		%2.3f\r\n", 
   3435                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3436                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3437                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_566: (+1)
   \   000038E4   0x0038             MOVS     R0,R7
   \   000038E6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000038E8   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000038EC   0x4683             MOV      R11,R0
   \   000038EE   0x0038             MOVS     R0,R7
   \   000038F0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000038F2   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000038F6   0x4681             MOV      R9,R0
   \   000038F8   0x0038             MOVS     R0,R7
   \   000038FA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000038FC   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003900   0x4682             MOV      R10,R0
   \   00003902   0x4658             MOV      R0,R11
   \   00003904   0x.... 0x....      BL       __aeabi_f2d
   \   00003908   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   0000390C   0x4648             MOV      R0,R9
   \   0000390E   0x.... 0x....      BL       __aeabi_f2d
   \   00003912   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003916   0x4652             MOV      R2,R10
   \   00003918   0xF8DF 0x1E28      LDR.W    R1,??RoadBrd_ParseString_568
   \   0000391C   0xA80A             ADD      R0,SP,#+40
   \   0000391E   0x.... 0x....      BL       sprintf
   3438                                        break;
   \   00003922   0xE23E             B.N      ??RoadBrd_ParseString_532
   \                     ??RoadBrd_ParseString_463:
   \   00003924   0x........         DC32     ?_199
   \   00003928   0x........         DC32     ?_200
   \   0000392C   0x........         DC32     ?_201
   \   00003930   0x........         DC32     ?_202
   \   00003934   0x........         DC32     ?_203
   3439                                      case CAL_ROADT_2C: //CAL_ROADT_2C Values
   3440                                        // Is this a BLE Operation?
   3441                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_526: (+1)
   \   00003938   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000393A   0x2D00             CMP      R5,#+0
   \   0000393C   0xD024             BEQ.N    ??RoadBrd_ParseString_569
   3442                                        {
   3443                                          // Yes...Build and Send BLE Response NOW.
   3444                                          sprintf( (char *)tempBffr2, "%s:001B//%1.4f//%2.3f//", 
   3445                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3446                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3447                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   0000393E   0x0038             MOVS     R0,R7
   \   00003940   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003942   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003946   0x4683             MOV      R11,R0
   \   00003948   0x0038             MOVS     R0,R7
   \   0000394A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000394C   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003950   0x4681             MOV      R9,R0
   \   00003952   0x0038             MOVS     R0,R7
   \   00003954   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003956   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   0000395A   0x4682             MOV      R10,R0
   \   0000395C   0x4658             MOV      R0,R11
   \   0000395E   0x.... 0x....      BL       __aeabi_f2d
   \   00003962   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003966   0x4648             MOV      R0,R9
   \   00003968   0x.... 0x....      BL       __aeabi_f2d
   \   0000396C   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003970   0x4652             MOV      R2,R10
   \   00003972   0xF8DF 0x1E34      LDR.W    R1,??RoadBrd_ParseString_570
   \   00003976   0xA80A             ADD      R0,SP,#+40
   \   00003978   0x.... 0x....      BL       sprintf
   3448                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000397C   0xA80A             ADD      R0,SP,#+40
   \   0000397E   0x.... 0x....      BL       strlen
   \   00003982   0xA90A             ADD      R1,SP,#+40
   \   00003984   0x.... 0x....      BL       BGM111_Transmit
   3449                                        }
   3450                                        sprintf( (char *)tempBffr2, "%s	001B		%1.4f		%2.3f\r\n", 
   3451                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3452                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3453                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_569: (+1)
   \   00003988   0x0038             MOVS     R0,R7
   \   0000398A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000398C   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003990   0x4683             MOV      R11,R0
   \   00003992   0x0038             MOVS     R0,R7
   \   00003994   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003996   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   0000399A   0x4681             MOV      R9,R0
   \   0000399C   0x0038             MOVS     R0,R7
   \   0000399E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000039A0   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000039A4   0x4682             MOV      R10,R0
   \   000039A6   0x4658             MOV      R0,R11
   \   000039A8   0x.... 0x....      BL       __aeabi_f2d
   \   000039AC   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000039B0   0x4648             MOV      R0,R9
   \   000039B2   0x.... 0x....      BL       __aeabi_f2d
   \   000039B6   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000039BA   0x4652             MOV      R2,R10
   \   000039BC   0xF8DF 0x1DEC      LDR.W    R1,??RoadBrd_ParseString_570+0x4
   \   000039C0   0xA80A             ADD      R0,SP,#+40
   \   000039C2   0x.... 0x....      BL       sprintf
   3454                                        break;
   \   000039C6   0xE1EC             B.N      ??RoadBrd_ParseString_532
   \                     ??RoadBrd_ParseString_471:
   \   000039C8   0x........         DC32     ?_204
   \   000039CC   0x........         DC32     ?_205
   \   000039D0   0x........         DC32     ?_206
   \   000039D4   0x........         DC32     ?_207
   \   000039D8   0x........         DC32     ?_208
   \   000039DC   0x........         DC32     ?_209
   3455                                      case CAL_ROADT_3C: //CAL_ROADT_3C Values
   3456                                        // Is this a BLE Operation?
   3457                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_525: (+1)
   \   000039E0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000039E2   0x2D00             CMP      R5,#+0
   \   000039E4   0xD024             BEQ.N    ??RoadBrd_ParseString_571
   3458                                        {
   3459                                          // Yes...Build and Send BLE Response NOW.
   3460                                          sprintf( (char *)tempBffr2, "%s:001D//%1.4f//%2.3f//", 
   3461                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3462                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3463                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   000039E6   0x0038             MOVS     R0,R7
   \   000039E8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000039EA   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000039EE   0x4683             MOV      R11,R0
   \   000039F0   0x0038             MOVS     R0,R7
   \   000039F2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000039F4   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000039F8   0x4681             MOV      R9,R0
   \   000039FA   0x0038             MOVS     R0,R7
   \   000039FC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000039FE   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003A02   0x4682             MOV      R10,R0
   \   00003A04   0x4658             MOV      R0,R11
   \   00003A06   0x.... 0x....      BL       __aeabi_f2d
   \   00003A0A   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003A0E   0x4648             MOV      R0,R9
   \   00003A10   0x.... 0x....      BL       __aeabi_f2d
   \   00003A14   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003A18   0x4652             MOV      R2,R10
   \   00003A1A   0xF8DF 0x1DE4      LDR.W    R1,??RoadBrd_ParseString_572
   \   00003A1E   0xA80A             ADD      R0,SP,#+40
   \   00003A20   0x.... 0x....      BL       sprintf
   3464                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003A24   0xA80A             ADD      R0,SP,#+40
   \   00003A26   0x.... 0x....      BL       strlen
   \   00003A2A   0xA90A             ADD      R1,SP,#+40
   \   00003A2C   0x.... 0x....      BL       BGM111_Transmit
   3465                                        }
   3466                                        sprintf( (char *)tempBffr2, "%s	001D		%1.4f		%2.3f\r\n", 
   3467                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3468                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3469                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_571: (+1)
   \   00003A30   0x0038             MOVS     R0,R7
   \   00003A32   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003A34   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003A38   0x4683             MOV      R11,R0
   \   00003A3A   0x0038             MOVS     R0,R7
   \   00003A3C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003A3E   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003A42   0x4681             MOV      R9,R0
   \   00003A44   0x0038             MOVS     R0,R7
   \   00003A46   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003A48   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003A4C   0x4682             MOV      R10,R0
   \   00003A4E   0x4658             MOV      R0,R11
   \   00003A50   0x.... 0x....      BL       __aeabi_f2d
   \   00003A54   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003A58   0x4648             MOV      R0,R9
   \   00003A5A   0x.... 0x....      BL       __aeabi_f2d
   \   00003A5E   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003A62   0x4652             MOV      R2,R10
   \   00003A64   0xF8DF 0x1DF4      LDR.W    R1,??RoadBrd_ParseString_573
   \   00003A68   0xA80A             ADD      R0,SP,#+40
   \   00003A6A   0x.... 0x....      BL       sprintf
   3470                                        break;
   \   00003A6E   0xE198             B.N      ??RoadBrd_ParseString_532
   \                     ??RoadBrd_ParseString_477:
   \   00003A70   0x........         DC32     ?_210
   \   00003A74   0x........         DC32     ?_211
   \   00003A78   0x........         DC32     ?_212
   \   00003A7C   0x........         DC32     ?_213
   \   00003A80   0x........         DC32     ?_214
   3471                                      case CAL_ROADT_4C: //CAL_ROADT_4C Values
   3472                                        // Is this a BLE Operation?
   3473                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_528: (+1)
   \   00003A84   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003A86   0x2D00             CMP      R5,#+0
   \   00003A88   0xD024             BEQ.N    ??RoadBrd_ParseString_574
   3474                                        {
   3475                                          // Yes...Build and Send BLE Response NOW.
   3476                                          sprintf( (char *)tempBffr2, "%s:001F//%1.4f//%2.3f//", 
   3477                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3478                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3479                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003A8A   0x0038             MOVS     R0,R7
   \   00003A8C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003A8E   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003A92   0x4683             MOV      R11,R0
   \   00003A94   0x0038             MOVS     R0,R7
   \   00003A96   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003A98   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003A9C   0x4681             MOV      R9,R0
   \   00003A9E   0x0038             MOVS     R0,R7
   \   00003AA0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003AA2   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003AA6   0x4682             MOV      R10,R0
   \   00003AA8   0x4658             MOV      R0,R11
   \   00003AAA   0x.... 0x....      BL       __aeabi_f2d
   \   00003AAE   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003AB2   0x4648             MOV      R0,R9
   \   00003AB4   0x.... 0x....      BL       __aeabi_f2d
   \   00003AB8   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003ABC   0x4652             MOV      R2,R10
   \   00003ABE   0xF8DF 0x1DE4      LDR.W    R1,??RoadBrd_ParseString_575
   \   00003AC2   0xA80A             ADD      R0,SP,#+40
   \   00003AC4   0x.... 0x....      BL       sprintf
   3480                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003AC8   0xA80A             ADD      R0,SP,#+40
   \   00003ACA   0x.... 0x....      BL       strlen
   \   00003ACE   0xA90A             ADD      R1,SP,#+40
   \   00003AD0   0x.... 0x....      BL       BGM111_Transmit
   3481                                        }
   3482                                        sprintf( (char *)tempBffr2, "%s	001F		%1.4f		%2.3f\r\n", 
   3483                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3484                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3485                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_574: (+1)
   \   00003AD4   0x0038             MOVS     R0,R7
   \   00003AD6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003AD8   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003ADC   0x4683             MOV      R11,R0
   \   00003ADE   0x0038             MOVS     R0,R7
   \   00003AE0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003AE2   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003AE6   0x4681             MOV      R9,R0
   \   00003AE8   0x0038             MOVS     R0,R7
   \   00003AEA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003AEC   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003AF0   0x4682             MOV      R10,R0
   \   00003AF2   0x4658             MOV      R0,R11
   \   00003AF4   0x.... 0x....      BL       __aeabi_f2d
   \   00003AF8   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003AFC   0x4648             MOV      R0,R9
   \   00003AFE   0x.... 0x....      BL       __aeabi_f2d
   \   00003B02   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003B06   0x4652             MOV      R2,R10
   \   00003B08   0xF8DF 0x1DC8      LDR.W    R1,??RoadBrd_ParseString_576
   \   00003B0C   0xA80A             ADD      R0,SP,#+40
   \   00003B0E   0x.... 0x....      BL       sprintf
   3486                                        break;
   \   00003B12   0xE146             B.N      ??RoadBrd_ParseString_532
   \                     ??RoadBrd_ParseString_482:
   \   00003B14   0x........         DC32     ?_215
   \   00003B18   0x........         DC32     ?_216
   \   00003B1C   0x........         DC32     ?_217
   \   00003B20   0x........         DC32     ?_218
   \   00003B24   0x........         DC32     ?_219
   3487                                      case CAL_ROADT_5C: //CAL_ROADT_5C Values
   3488                                        // Is this a BLE Operation?
   3489                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_527: (+1)
   \   00003B28   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003B2A   0x2D00             CMP      R5,#+0
   \   00003B2C   0xD024             BEQ.N    ??RoadBrd_ParseString_577
   3490                                        {
   3491                                          // Yes...Build and Send BLE Response NOW.
   3492                                          sprintf( (char *)tempBffr2, "%s:0021//%1.4f//%2.3f//", 
   3493                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3494                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3495                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003B2E   0x0038             MOVS     R0,R7
   \   00003B30   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003B32   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003B36   0x4683             MOV      R11,R0
   \   00003B38   0x0038             MOVS     R0,R7
   \   00003B3A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003B3C   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003B40   0x4681             MOV      R9,R0
   \   00003B42   0x0038             MOVS     R0,R7
   \   00003B44   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003B46   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003B4A   0x4682             MOV      R10,R0
   \   00003B4C   0x4658             MOV      R0,R11
   \   00003B4E   0x.... 0x....      BL       __aeabi_f2d
   \   00003B52   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003B56   0x4648             MOV      R0,R9
   \   00003B58   0x.... 0x....      BL       __aeabi_f2d
   \   00003B5C   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003B60   0x4652             MOV      R2,R10
   \   00003B62   0xF8DF 0x1DB4      LDR.W    R1,??RoadBrd_ParseString_578
   \   00003B66   0xA80A             ADD      R0,SP,#+40
   \   00003B68   0x.... 0x....      BL       sprintf
   3496                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003B6C   0xA80A             ADD      R0,SP,#+40
   \   00003B6E   0x.... 0x....      BL       strlen
   \   00003B72   0xA90A             ADD      R1,SP,#+40
   \   00003B74   0x.... 0x....      BL       BGM111_Transmit
   3497                                        }
   3498                                        sprintf( (char *)tempBffr2, "%s	0021		%1.4f		%2.3f\r\n", 
   3499                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3500                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3501                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_577: (+1)
   \   00003B78   0x0038             MOVS     R0,R7
   \   00003B7A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003B7C   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003B80   0x4683             MOV      R11,R0
   \   00003B82   0x0038             MOVS     R0,R7
   \   00003B84   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003B86   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003B8A   0x4681             MOV      R9,R0
   \   00003B8C   0x0038             MOVS     R0,R7
   \   00003B8E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003B90   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003B94   0x4682             MOV      R10,R0
   \   00003B96   0x4658             MOV      R0,R11
   \   00003B98   0x.... 0x....      BL       __aeabi_f2d
   \   00003B9C   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003BA0   0x4648             MOV      R0,R9
   \   00003BA2   0x.... 0x....      BL       __aeabi_f2d
   \   00003BA6   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003BAA   0x4652             MOV      R2,R10
   \   00003BAC   0x.... 0x....      LDR.W    R1,??DataTable3
   \   00003BB0   0xA80A             ADD      R0,SP,#+40
   \   00003BB2   0x.... 0x....      BL       sprintf
   3502                                        break;
   \   00003BB6   0xE0F4             B.N      ??RoadBrd_ParseString_532
   \                     ??RoadBrd_ParseString_490:
   \   00003BB8   0x........         DC32     ?_220
   \   00003BBC   0x........         DC32     ?_221
   \   00003BC0   0x........         DC32     ?_222
   \   00003BC4   0x........         DC32     ?_223
   3503                                      case CAL_ROADT_6C: //CAL_ROADT_6C Values
   3504                                        // Is this a BLE Operation?
   3505                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_530: (+1)
   \   00003BC8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003BCA   0x2D00             CMP      R5,#+0
   \   00003BCC   0xD024             BEQ.N    ??RoadBrd_ParseString_579
   3506                                        {
   3507                                          // Yes...Build and Send BLE Response NOW.
   3508                                          sprintf( (char *)tempBffr2, "%s:0023//%1.4f//%2.3f//", 
   3509                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3510                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3511                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003BCE   0x0038             MOVS     R0,R7
   \   00003BD0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003BD2   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003BD6   0x4683             MOV      R11,R0
   \   00003BD8   0x0038             MOVS     R0,R7
   \   00003BDA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003BDC   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003BE0   0x4681             MOV      R9,R0
   \   00003BE2   0x0038             MOVS     R0,R7
   \   00003BE4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003BE6   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003BEA   0x4682             MOV      R10,R0
   \   00003BEC   0x4658             MOV      R0,R11
   \   00003BEE   0x.... 0x....      BL       __aeabi_f2d
   \   00003BF2   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003BF6   0x4648             MOV      R0,R9
   \   00003BF8   0x.... 0x....      BL       __aeabi_f2d
   \   00003BFC   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003C00   0x4652             MOV      R2,R10
   \   00003C02   0x.... 0x....      LDR.W    R1,??DataTable3_1
   \   00003C06   0xA80A             ADD      R0,SP,#+40
   \   00003C08   0x.... 0x....      BL       sprintf
   3512                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003C0C   0xA80A             ADD      R0,SP,#+40
   \   00003C0E   0x.... 0x....      BL       strlen
   \   00003C12   0xA90A             ADD      R1,SP,#+40
   \   00003C14   0x.... 0x....      BL       BGM111_Transmit
   3513                                        }
   3514                                        sprintf( (char *)tempBffr2, "%s	0023		%1.4f		%2.3f\r\n", 
   3515                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3516                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3517                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_579: (+1)
   \   00003C18   0x0038             MOVS     R0,R7
   \   00003C1A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003C1C   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003C20   0x4683             MOV      R11,R0
   \   00003C22   0x0038             MOVS     R0,R7
   \   00003C24   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003C26   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003C2A   0x4681             MOV      R9,R0
   \   00003C2C   0x0038             MOVS     R0,R7
   \   00003C2E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003C30   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003C34   0x4682             MOV      R10,R0
   \   00003C36   0x4658             MOV      R0,R11
   \   00003C38   0x.... 0x....      BL       __aeabi_f2d
   \   00003C3C   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003C40   0x4648             MOV      R0,R9
   \   00003C42   0x.... 0x....      BL       __aeabi_f2d
   \   00003C46   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003C4A   0x4652             MOV      R2,R10
   \   00003C4C   0x.... 0x....      LDR.W    R1,??DataTable3_2
   \   00003C50   0xA80A             ADD      R0,SP,#+40
   \   00003C52   0x.... 0x....      BL       sprintf
   3518                                        break;
   \   00003C56   0xE0A4             B.N      ??RoadBrd_ParseString_532
   \                     ??RoadBrd_ParseString_495:
   \   00003C58   0x........         DC32     ?_224
   \   00003C5C   0x........         DC32     ?_225
   \   00003C60   0x........         DC32     ?_226
   \   00003C64   0x........         DC32     ?_227
   \   00003C68   0x........         DC32     ?_228
   \   00003C6C   0x........         DC32     ?_229
   3519                                      case CAL_ROADT_7C: //CAL_ROADT_7C Values
   3520                                        // Is this a BLE Operation?
   3521                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_529: (+1)
   \   00003C70   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003C72   0x2D00             CMP      R5,#+0
   \   00003C74   0xD024             BEQ.N    ??RoadBrd_ParseString_580
   3522                                        {
   3523                                          // Yes...Build and Send BLE Response NOW.
   3524                                          sprintf( (char *)tempBffr2, "%s:0025//%1.4f//%2.3f//", 
   3525                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3526                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3527                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003C76   0x0038             MOVS     R0,R7
   \   00003C78   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003C7A   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003C7E   0x4683             MOV      R11,R0
   \   00003C80   0x0038             MOVS     R0,R7
   \   00003C82   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003C84   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003C88   0x4681             MOV      R9,R0
   \   00003C8A   0x0038             MOVS     R0,R7
   \   00003C8C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003C8E   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003C92   0x4682             MOV      R10,R0
   \   00003C94   0x4658             MOV      R0,R11
   \   00003C96   0x.... 0x....      BL       __aeabi_f2d
   \   00003C9A   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003C9E   0x4648             MOV      R0,R9
   \   00003CA0   0x.... 0x....      BL       __aeabi_f2d
   \   00003CA4   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003CA8   0x4652             MOV      R2,R10
   \   00003CAA   0x.... 0x....      LDR.W    R1,??DataTable3_3
   \   00003CAE   0xA80A             ADD      R0,SP,#+40
   \   00003CB0   0x.... 0x....      BL       sprintf
   3528                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003CB4   0xA80A             ADD      R0,SP,#+40
   \   00003CB6   0x.... 0x....      BL       strlen
   \   00003CBA   0xA90A             ADD      R1,SP,#+40
   \   00003CBC   0x.... 0x....      BL       BGM111_Transmit
   3529                                        }
   3530                                        sprintf( (char *)tempBffr2, "%s	0025		%1.4f		%2.3f\r\n", 
   3531                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3532                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3533                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_580: (+1)
   \   00003CC0   0x0038             MOVS     R0,R7
   \   00003CC2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003CC4   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003CC8   0x4683             MOV      R11,R0
   \   00003CCA   0x0038             MOVS     R0,R7
   \   00003CCC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003CCE   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003CD2   0x4681             MOV      R9,R0
   \   00003CD4   0x0038             MOVS     R0,R7
   \   00003CD6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003CD8   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003CDC   0x4682             MOV      R10,R0
   \   00003CDE   0x4658             MOV      R0,R11
   \   00003CE0   0x.... 0x....      BL       __aeabi_f2d
   \   00003CE4   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003CE8   0x4648             MOV      R0,R9
   \   00003CEA   0x.... 0x....      BL       __aeabi_f2d
   \   00003CEE   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003CF2   0x4652             MOV      R2,R10
   \   00003CF4   0x.... 0x....      LDR.W    R1,??DataTable3_4
   \   00003CF8   0xA80A             ADD      R0,SP,#+40
   \   00003CFA   0x.... 0x....      BL       sprintf
   3534                                        break;
   \   00003CFE   0xE050             B.N      ??RoadBrd_ParseString_532
   \                     ??RoadBrd_ParseString_501:
   \   00003D00   0x........         DC32     ?_230
   \   00003D04   0x........         DC32     ?_231
   \   00003D08   0x........         DC32     ?_232
   \   00003D0C   0x........         DC32     ?_233
   \   00003D10   0x........         DC32     ?_234
   3535                                      case CAL_ROADT_8C: //CAL_ROADT_8C Values
   3536                                        // Is this a BLE Operation?
   3537                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_531: (+1)
   \   00003D14   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003D16   0x2D00             CMP      R5,#+0
   \   00003D18   0xD024             BEQ.N    ??RoadBrd_ParseString_581
   3538                                        {
   3539                                          // Yes...Build and Send BLE Response NOW.
   3540                                          sprintf( (char *)tempBffr2, "%s:0027//%1.4f//%2.3f//", 
   3541                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3542                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3543                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003D1A   0x0038             MOVS     R0,R7
   \   00003D1C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003D1E   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003D22   0x4683             MOV      R11,R0
   \   00003D24   0x0038             MOVS     R0,R7
   \   00003D26   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003D28   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003D2C   0x4681             MOV      R9,R0
   \   00003D2E   0x0038             MOVS     R0,R7
   \   00003D30   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003D32   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003D36   0x4682             MOV      R10,R0
   \   00003D38   0x4658             MOV      R0,R11
   \   00003D3A   0x.... 0x....      BL       __aeabi_f2d
   \   00003D3E   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003D42   0x4648             MOV      R0,R9
   \   00003D44   0x.... 0x....      BL       __aeabi_f2d
   \   00003D48   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003D4C   0x4652             MOV      R2,R10
   \   00003D4E   0x.... 0x....      LDR.W    R1,??DataTable3_5
   \   00003D52   0xA80A             ADD      R0,SP,#+40
   \   00003D54   0x.... 0x....      BL       sprintf
   3544                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003D58   0xA80A             ADD      R0,SP,#+40
   \   00003D5A   0x.... 0x....      BL       strlen
   \   00003D5E   0xA90A             ADD      R1,SP,#+40
   \   00003D60   0x.... 0x....      BL       BGM111_Transmit
   3545                                        }
   3546                                        sprintf( (char *)tempBffr2, "%s	0027		%1.4f		%2.3f\r\n", 
   3547                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3548                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3549                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_581: (+1)
   \   00003D64   0x0038             MOVS     R0,R7
   \   00003D66   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003D68   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003D6C   0x4683             MOV      R11,R0
   \   00003D6E   0x0038             MOVS     R0,R7
   \   00003D70   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003D72   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003D76   0x4681             MOV      R9,R0
   \   00003D78   0x0038             MOVS     R0,R7
   \   00003D7A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003D7C   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003D80   0x4682             MOV      R10,R0
   \   00003D82   0x4658             MOV      R0,R11
   \   00003D84   0x.... 0x....      BL       __aeabi_f2d
   \   00003D88   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003D8C   0x4648             MOV      R0,R9
   \   00003D8E   0x.... 0x....      BL       __aeabi_f2d
   \   00003D92   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003D96   0x4652             MOV      R2,R10
   \   00003D98   0x.... 0x....      LDR.W    R1,??DataTable3_6
   \   00003D9C   0xA80A             ADD      R0,SP,#+40
   \   00003D9E   0x.... 0x....      BL       sprintf
   3550                                        break;
   3551                                    } // EndSwitch(x)
   3552                                    // Now Print String.
   3553          #ifdef NUCLEO
   3554                                    Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   3555          #else
   3556                                    Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \                     ??RoadBrd_ParseString_532: (+1)
   \   00003DA2   0xA90A             ADD      R1,SP,#+40
   \   00003DA4   0x2000             MOVS     R0,#+0
   \   00003DA6   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00003DAA   0x0006             MOVS     R6,R0
   3557          #endif
   3558                                    if (Status != HAL_OK)
   \   00003DAC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00003DAE   0x2E00             CMP      R6,#+0
   \   00003DB0   0xD008             BEQ.N    ??RoadBrd_ParseString_582
   3559                                      return Status;
   \   00003DB2   0x0030             MOVS     R0,R6
   \   00003DB4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003DB6   0xF000 0xBDC2      B.W      ??RoadBrd_ParseString_4
   \   00003DBA   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_505:
   \   00003DBC   0x........         DC32     ?_235
   \   00003DC0   0x........         DC32     ?_236
   3560                                  } // EndFor(x=0; x<CAL_LAST_VALUE; x++)
   \                     ??RoadBrd_ParseString_582: (+1)
   \   00003DC4   0x1C7F             ADDS     R7,R7,#+1
   \   00003DC6   0xF7FF 0xB897      B.W      ??RoadBrd_ParseString_508
   3561                                  // Is this a BLE Operation?
   3562                                  if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_509: (+1)
   \   00003DCA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003DCC   0x2D00             CMP      R5,#+0
   \   00003DCE   0xD00A             BEQ.N    ??RoadBrd_ParseString_583
   3563                                  {
   3564                                    // Yes...Build and Send BLE Response NOW.
   3565                                    strcpy( (char *)tempBffr2, "</STATUS>");
   \   00003DD0   0x.... 0x....      LDR.W    R1,??DataTable3_7
   \   00003DD4   0xA80A             ADD      R0,SP,#+40
   \   00003DD6   0x.... 0x....      BL       strcpy
   3566                                    BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003DDA   0xA80A             ADD      R0,SP,#+40
   \   00003DDC   0x.... 0x....      BL       strlen
   \   00003DE0   0xA90A             ADD      R1,SP,#+40
   \   00003DE2   0x.... 0x....      BL       BGM111_Transmit
   3567                                  }
   3568                                  sprintf( (char *)tempBffr2, "\r\n     COMPLETE.\r\n" );
   \                     ??RoadBrd_ParseString_583: (+1)
   \   00003DE6   0x.... 0x....      LDR.W    R1,??DataTable3_8
   \   00003DEA   0xA80A             ADD      R0,SP,#+40
   \   00003DEC   0x.... 0x....      BL       sprintf
   3569                                  break;
   \   00003DF0   0xE091             B.N      ??RoadBrd_ParseString_378
   3570                                  //------------------ TCT Command: Calibration Set Time Command
   3571                                case 'T':
   3572                                  // Step 1. Validate format.
   3573                                  if(tempBffr[3]!=':')
   \                     ??RoadBrd_ParseString_387: (+1)
   \   00003DF2   0x78E0             LDRB     R0,[R4, #+3]
   \   00003DF4   0x283A             CMP      R0,#+58
   \   00003DF6   0xD013             BEQ.N    ??RoadBrd_ParseString_584
   3574                                  {
   3575                                    // Is this a BLE Operation?
   3576                                    if ( BLE_Flag )
   \   00003DF8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003DFA   0x2D00             CMP      R5,#+0
   \   00003DFC   0xD00A             BEQ.N    ??RoadBrd_ParseString_585
   3577                                    {
   3578                                      // Yes...Build and Send BLE Response NOW.
   3579                                      strcpy( (char *)tempBffr2, "<STATUS>CMD_TCT_SYNTAX</STATUS>");
   \   00003DFE   0x.... 0x....      LDR.W    R1,??DataTable3_9
   \   00003E02   0xA80A             ADD      R0,SP,#+40
   \   00003E04   0x.... 0x....      BL       strcpy
   3580                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003E08   0xA80A             ADD      R0,SP,#+40
   \   00003E0A   0x.... 0x....      BL       strlen
   \   00003E0E   0xA90A             ADD      R1,SP,#+40
   \   00003E10   0x.... 0x....      BL       BGM111_Transmit
   3581                                    }
   3582                                    
   3583                                    strcpy( (char *)tempBffr2, "TCT SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_585: (+1)
   \   00003E14   0x.... 0x....      LDR.W    R1,??DataTable3_10
   \   00003E18   0xA80A             ADD      R0,SP,#+40
   \   00003E1A   0x.... 0x....      BL       strcpy
   \   00003E1E   0xE04C             B.N      ??RoadBrd_ParseString_586
   3584                                  } // Endif (tempBffr[3]!=':')
   3585                                  else
   3586                                  {
   3587                                    // 2. Verify if remaining string is digits
   3588                                    if (Size <= 4)
   \                     ??RoadBrd_ParseString_584: (+1)
   \   00003E20   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00003E24   0xF1B8 0x0F05      CMP      R8,#+5
   \   00003E28   0xDA13             BGE.N    ??RoadBrd_ParseString_587
   3589                                    {
   3590                                      // Is this a BLE Operation?
   3591                                      if ( BLE_Flag )
   \   00003E2A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003E2C   0x2D00             CMP      R5,#+0
   \   00003E2E   0xD00A             BEQ.N    ??RoadBrd_ParseString_588
   3592                                      {
   3593                                        // Yes...Build and Send BLE Response NOW.
   3594                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_TCT_BADPARAM</STATUS>");
   \   00003E30   0x.... 0x....      LDR.W    R1,??DataTable3_11
   \   00003E34   0xA80A             ADD      R0,SP,#+40
   \   00003E36   0x.... 0x....      BL       strcpy
   3595                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003E3A   0xA80A             ADD      R0,SP,#+40
   \   00003E3C   0x.... 0x....      BL       strlen
   \   00003E40   0xA90A             ADD      R1,SP,#+40
   \   00003E42   0x.... 0x....      BL       BGM111_Transmit
   3596                                      }
   3597                                      strcpy( (char *)tempBffr2, "TCT SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_588: (+1)
   \   00003E46   0x.... 0x....      LDR.W    R1,??DataTable4
   \   00003E4A   0xA80A             ADD      R0,SP,#+40
   \   00003E4C   0x.... 0x....      BL       strcpy
   \   00003E50   0xE033             B.N      ??RoadBrd_ParseString_586
   3598                                    } // EndIf (Size > 4)
   3599                                    else
   3600                                    {
   3601                                      // 3. Grab remaining string and Save it.
   3602                                      tempPstr = &tempBffr[4];
   \                     ??RoadBrd_ParseString_587: (+1)
   \   00003E52   0x1D20             ADDS     R0,R4,#+4
   \   00003E54   0x9030             STR      R0,[SP, #+192]
   3603                                      strcpy(tempstr, tempPstr);
   \   00003E56   0x9930             LDR      R1,[SP, #+192]
   \   00003E58   0xA852             ADD      R0,SP,#+328
   \   00003E5A   0x.... 0x....      BL       strcpy
   3604                                      // NOW...Save it.
   3605                                      Status = RoadBrd_CAL_Set_TimeString( (uint8_t *)tempPstr );
   \   00003E5E   0x9830             LDR      R0,[SP, #+192]
   \   00003E60   0x.... 0x....      BL       RoadBrd_CAL_Set_TimeString
   \   00003E64   0x0006             MOVS     R6,R0
   3606                                      if (Status != HAL_OK)
   \   00003E66   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00003E68   0x2E00             CMP      R6,#+0
   \   00003E6A   0xD013             BEQ.N    ??RoadBrd_ParseString_589
   3607                                      {
   3608                                        // Is this a BLE Operation?
   3609                                        if ( BLE_Flag )
   \   00003E6C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003E6E   0x2D00             CMP      R5,#+0
   \   00003E70   0xD00A             BEQ.N    ??RoadBrd_ParseString_590
   3610                                        {
   3611                                          // Yes...Build and Send BLE Response NOW.
   3612                                          strcpy( (char *)tempBffr2, "<STATUS>CMD_TCT_ERR</STATUS>");
   \   00003E72   0x.... 0x....      LDR.W    R1,??DataTable4_1
   \   00003E76   0xA80A             ADD      R0,SP,#+40
   \   00003E78   0x.... 0x....      BL       strcpy
   3613                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003E7C   0xA80A             ADD      R0,SP,#+40
   \   00003E7E   0x.... 0x....      BL       strlen
   \   00003E82   0xA90A             ADD      R1,SP,#+40
   \   00003E84   0x.... 0x....      BL       BGM111_Transmit
   3614                                        }
   3615                                        return Status;
   \                     ??RoadBrd_ParseString_590: (+1)
   \   00003E88   0x0030             MOVS     R0,R6
   \   00003E8A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003E8C   0xF000 0xBD57      B.W      ??RoadBrd_ParseString_4
   \                     ??RoadBrd_ParseString_534:
   \   00003E90   0x........         DC32     ?_237
   3616                                      }
   3617                                      else
   3618                                      {
   3619                                        // Is this a BLE Operation?
   3620                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_589: (+1)
   \   00003E94   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003E96   0x2D00             CMP      R5,#+0
   \   00003E98   0xD00A             BEQ.N    ??RoadBrd_ParseString_591
   3621                                        {
   3622                                          // Yes...Build and Send BLE Response NOW.
   3623                                          strcpy( (char *)tempBffr2, "<STATUS>ST_TCT_ACK</STATUS>");
   \   00003E9A   0x.... 0x....      LDR.W    R1,??DataTable4_2
   \   00003E9E   0xA80A             ADD      R0,SP,#+40
   \   00003EA0   0x.... 0x....      BL       strcpy
   3624                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003EA4   0xA80A             ADD      R0,SP,#+40
   \   00003EA6   0x.... 0x....      BL       strlen
   \   00003EAA   0xA90A             ADD      R1,SP,#+40
   \   00003EAC   0x.... 0x....      BL       BGM111_Transmit
   3625                                        }
   3626                                      }
   3627                                      sprintf( (char *)tempBffr2, "\r\n     COMPLETE.\r\n" );
   \                     ??RoadBrd_ParseString_591: (+1)
   \   00003EB0   0x.... 0x....      LDR.W    R1,??DataTable3_8
   \   00003EB4   0xA80A             ADD      R0,SP,#+40
   \   00003EB6   0x.... 0x....      BL       sprintf
   3628                                    } // EndElse (Size > 4)
   3629                                  } // EndElse (tempBffr[3]!=':')
   3630                                  break;
   \                     ??RoadBrd_ParseString_586: (+1)
   \   00003EBA   0xE02C             B.N      ??RoadBrd_ParseString_378
   3631                                  //------------------ TCI Command: Calibration Initialize Cal Table(Reset)
   3632                                case 'I':
   3633                                  Status = RoadBrd_CAL_InitializeFrmFlash();
   \                     ??RoadBrd_ParseString_384: (+1)
   \   00003EBC   0x.... 0x....      BL       RoadBrd_CAL_InitializeFrmFlash
   \   00003EC0   0x0006             MOVS     R6,R0
   3634                                  if (Status != HAL_OK)
   \   00003EC2   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00003EC4   0x2E00             CMP      R6,#+0
   \   00003EC6   0xD013             BEQ.N    ??RoadBrd_ParseString_592
   3635                                  {
   3636                                    // Is this a BLE Operation?
   3637                                    if ( BLE_Flag )
   \   00003EC8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003ECA   0x2D00             CMP      R5,#+0
   \   00003ECC   0xD00A             BEQ.N    ??RoadBrd_ParseString_593
   3638                                    {
   3639                                      // Yes...Build and Send BLE Response NOW.
   3640                                      strcpy( (char *)tempBffr2, "<STATUS>CMD_TCI_ERR</STATUS>");
   \   00003ECE   0x.... 0x....      LDR.W    R1,??DataTable4_3
   \   00003ED2   0xA80A             ADD      R0,SP,#+40
   \   00003ED4   0x.... 0x....      BL       strcpy
   3641                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003ED8   0xA80A             ADD      R0,SP,#+40
   \   00003EDA   0x.... 0x....      BL       strlen
   \   00003EDE   0xA90A             ADD      R1,SP,#+40
   \   00003EE0   0x.... 0x....      BL       BGM111_Transmit
   3642                                    }
   3643                                    return Status;
   \                     ??RoadBrd_ParseString_593: (+1)
   \   00003EE4   0x0030             MOVS     R0,R6
   \   00003EE6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003EE8   0xF000 0xBD29      B.W      ??RoadBrd_ParseString_4
   \                     ??RoadBrd_ParseString_535:
   \   00003EEC   0x........         DC32     ?_238
   3644                                  }
   3645                                  else
   3646                                  {
   3647                                    // Is this a BLE Operation?
   3648                                    if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_592: (+1)
   \   00003EF0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003EF2   0x2D00             CMP      R5,#+0
   \   00003EF4   0xD00A             BEQ.N    ??RoadBrd_ParseString_594
   3649                                    {
   3650                                      // Yes...Build and Send BLE Response NOW.
   3651                                      strcpy( (char *)tempBffr2, "<STATUS>ST_TCI_ACK</STATUS>");
   \   00003EF6   0x.... 0x....      LDR.W    R1,??DataTable4_4
   \   00003EFA   0xA80A             ADD      R0,SP,#+40
   \   00003EFC   0x.... 0x....      BL       strcpy
   3652                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003F00   0xA80A             ADD      R0,SP,#+40
   \   00003F02   0x.... 0x....      BL       strlen
   \   00003F06   0xA90A             ADD      R1,SP,#+40
   \   00003F08   0x.... 0x....      BL       BGM111_Transmit
   3653                                    }
   3654                                  }
   3655                                  sprintf( (char *)tempBffr2, "\r\n     COMPLETE.\r\n" );
   \                     ??RoadBrd_ParseString_594: (+1)
   \   00003F0C   0x.... 0x....      LDR.W    R1,??DataTable3_8
   \   00003F10   0xA80A             ADD      R0,SP,#+40
   \   00003F12   0x.... 0x....      BL       sprintf
   3656                                  break;
   3657                                } //EndSwitch
   3658                              } //EndElse (Size == 2)
   3659                              break;
   \                     ??RoadBrd_ParseString_378: (+1)
   \   00003F16   0xF000 0xBC86      B.W      ??RoadBrd_ParseString_290
   3660          //++++++++++++++++++++++++++++++++++++++++++  Dump Driver State.
   3661                            case 'D':
   3662                              // Read Driver Status
   3663                              DriverStatus = Get_DriverStatus();
   \                     ??RoadBrd_ParseString_292: (+1)
   \   00003F1A   0x.... 0x....      BL       Get_DriverStatus
   \   00003F1E   0xF8AD 0x00CE      STRH     R0,[SP, #+206]
   3664                              // Is this a BLE Operation?
   3665                              if ( BLE_Flag )
   \   00003F22   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003F24   0x2D00             CMP      R5,#+0
   \   00003F26   0xD00C             BEQ.N    ??RoadBrd_ParseString_595
   3666                              {
   3667                                // Yes...Build and Send BLE Response NOW.
   3668                                sprintf( (char *)tempBffr2, "<STATUS>ST_DRIVER:%04x</STATUS>", DriverStatus );
   \   00003F28   0xF8BD 0x20CE      LDRH     R2,[SP, #+206]
   \   00003F2C   0x.... 0x....      LDR.W    R1,??DataTable4_5
   \   00003F30   0xA80A             ADD      R0,SP,#+40
   \   00003F32   0x.... 0x....      BL       sprintf
   3669                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003F36   0xA80A             ADD      R0,SP,#+40
   \   00003F38   0x.... 0x....      BL       strlen
   \   00003F3C   0xA90A             ADD      R1,SP,#+40
   \   00003F3E   0x.... 0x....      BL       BGM111_Transmit
   3670                              }
   3671                              
   3672                              sprintf( (char *)tempBffr2, "Driver Status: %04x\r\n", DriverStatus );
   \                     ??RoadBrd_ParseString_595: (+1)
   \   00003F42   0xF8BD 0x20CE      LDRH     R2,[SP, #+206]
   \   00003F46   0x.... 0x....      LDR.W    R1,??DataTable4_6
   \   00003F4A   0xA80A             ADD      R0,SP,#+40
   \   00003F4C   0x.... 0x....      BL       sprintf
   3673                              break;
   \   00003F50   0xF000 0xBC69      B.W      ??RoadBrd_ParseString_290
   \                     ??RoadBrd_ParseString_537:
   \   00003F54   0x........         DC32     ?_239
   3674          //++++++++++++++++++++++++++++++++++++++++++  RESET Micro.
   3675                            case 'R':
   3676                              // RESET
   3677                              // Is this a BLE Operation?
   3678                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_298: (+1)
   \   00003F58   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003F5A   0x2D00             CMP      R5,#+0
   \   00003F5C   0xD00D             BEQ.N    ??RoadBrd_ParseString_596
   3679                              {
   3680                                // Yes...Build and Send BLE Response NOW.
   3681                                strcpy( (char *)tempBffr2, "<STATUS>ST_RESET_ACK</STATUS>");
   \   00003F5E   0x.... 0x....      LDR.W    R1,??DataTable4_7
   \   00003F62   0xA80A             ADD      R0,SP,#+40
   \   00003F64   0x.... 0x....      BL       strcpy
   3682                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003F68   0xA80A             ADD      R0,SP,#+40
   \   00003F6A   0x.... 0x....      BL       strlen
   \   00003F6E   0xA90A             ADD      R1,SP,#+40
   \   00003F70   0x.... 0x....      BL       BGM111_Transmit
   3683                                HAL_Delay(100);           // Wait 100ms
   \   00003F74   0x2064             MOVS     R0,#+100
   \   00003F76   0x.... 0x....      BL       HAL_Delay
   3684                              }
   3685                              HAL_NVIC_SystemReset();
   \                     ??RoadBrd_ParseString_596: (+1)
   \   00003F7A   0x.... 0x....      BL       HAL_NVIC_SystemReset
   3686                              sprintf( (char *)tempBffr2, "RESET CALLED BUT NO RESPONSE!!\r\n" );
   \   00003F7E   0x.... 0x....      LDR.W    R1,??DataTable4_8
   \   00003F82   0xA80A             ADD      R0,SP,#+40
   \   00003F84   0x.... 0x....      BL       sprintf
   3687                              break;
   \   00003F88   0xF000 0xBC4D      B.W      ??RoadBrd_ParseString_290
   \                     ??RoadBrd_ParseString_538:
   \   00003F8C   0x........         DC32     ?_240
   3688          //++++++++++++++++++++++++++++++++++++++++++  Key Flash Variable Commands.
   3689                            case 'K':
   3690                              // Key Flash Variable Commands.
   3691                              // Test Size to make sure we have enough Characters for this operation
   3692                              Status = HAL_OK;
   \                     ??RoadBrd_ParseString_295: (+1)
   \   00003F90   0x2000             MOVS     R0,#+0
   \   00003F92   0x0006             MOVS     R6,R0
   3693                              if (Size < 4)
   \   00003F94   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00003F98   0xF1B8 0x0F04      CMP      R8,#+4
   \   00003F9C   0xDA16             BGE.N    ??RoadBrd_ParseString_597
   3694                              {
   3695                                // Is this a BLE Operation?
   3696                                if ( BLE_Flag )
   \   00003F9E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003FA0   0x2D00             CMP      R5,#+0
   \   00003FA2   0xD00A             BEQ.N    ??RoadBrd_ParseString_598
   3697                                {
   3698                                  // Yes...Build and Send BLE Response NOW.
   3699                                  strcpy( (char *)tempBffr2, "<STATUS>CMD_TK_SYNTAX</STATUS>");
   \   00003FA4   0x.... 0x....      LDR.W    R1,??DataTable4_9
   \   00003FA8   0xA80A             ADD      R0,SP,#+40
   \   00003FAA   0x.... 0x....      BL       strcpy
   3700                                  BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003FAE   0xA80A             ADD      R0,SP,#+40
   \   00003FB0   0x.... 0x....      BL       strlen
   \   00003FB4   0xA90A             ADD      R1,SP,#+40
   \   00003FB6   0x.... 0x....      BL       BGM111_Transmit
   3701                                }
   3702                                strcpy( (char *)tempBffr2, "TK SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_598: (+1)
   \   00003FBA   0x.... 0x....      LDR.W    R1,??DataTable4_10
   \   00003FBE   0xA80A             ADD      R0,SP,#+40
   \   00003FC0   0x.... 0x....      BL       strcpy
   \   00003FC4   0xE315             B.N      ??RoadBrd_ParseString_599
   \   00003FC6   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_540:
   \   00003FC8   0x........         DC32     ?_241
   3703                              }
   3704                              else
   3705                              {
   3706                                switch( tempBffr[2] )
   \                     ??RoadBrd_ParseString_597: (+1)
   \   00003FCC   0x78A0             LDRB     R0,[R4, #+2]
   \   00003FCE   0x2852             CMP      R0,#+82
   \   00003FD0   0xF000 0x8246      BEQ.W    ??RoadBrd_ParseString_600
   \   00003FD4   0x2853             CMP      R0,#+83
   \   00003FD6   0xF040 0x82F9      BNE.W    ??RoadBrd_ParseString_601
   3707                                {
   3708          //------------------
   3709                                  case 'S':
   3710                                    //Key Flash Variable Set Command.
   3711                                    switch( tempBffr[3] )
   \                     ??RoadBrd_ParseString_602: (+1)
   \   00003FDA   0x78E0             LDRB     R0,[R4, #+3]
   \   00003FDC   0x2842             CMP      R0,#+66
   \   00003FDE   0xF000 0x81AC      BEQ.W    ??RoadBrd_ParseString_603
   \   00003FE2   0x2852             CMP      R0,#+82
   \   00003FE4   0xD006             BEQ.N    ??RoadBrd_ParseString_604
   \   00003FE6   0x2853             CMP      R0,#+83
   \   00003FE8   0xF000 0x8091      BEQ.W    ??RoadBrd_ParseString_605
   \   00003FEC   0x2854             CMP      R0,#+84
   \   00003FEE   0xF000 0x8117      BEQ.W    ??RoadBrd_ParseString_606
   \   00003FF2   0xE22A             B.N      ??RoadBrd_ParseString_607
   3712                                    {
   3713          //------------------
   3714                                      case 'R':
   3715                                        //Key Flash Variable Set Road Sound Sample Rate Command.
   3716                                        // Step 1. Validate format.
   3717                                        if(tempBffr[4]!=':')
   \                     ??RoadBrd_ParseString_604: (+1)
   \   00003FF4   0x7920             LDRB     R0,[R4, #+4]
   \   00003FF6   0x283A             CMP      R0,#+58
   \   00003FF8   0xD01A             BEQ.N    ??RoadBrd_ParseString_608
   3718                                        {
   3719                                          // Is this a BLE Operation?
   3720                                          if ( BLE_Flag )
   \   00003FFA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003FFC   0x2D00             CMP      R5,#+0
   \   00003FFE   0xD00A             BEQ.N    ??RoadBrd_ParseString_609
   3721                                          {
   3722                                            // Yes...Build and Send BLE Response NOW.
   3723                                            strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSR_SYNTAX</STATUS>");
   \   00004000   0x.... 0x....      LDR.W    R1,??DataTable4_11
   \   00004004   0xA80A             ADD      R0,SP,#+40
   \   00004006   0x.... 0x....      BL       strcpy
   3724                                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000400A   0xA80A             ADD      R0,SP,#+40
   \   0000400C   0x.... 0x....      BL       strlen
   \   00004010   0xA90A             ADD      R1,SP,#+40
   \   00004012   0x.... 0x....      BL       BGM111_Transmit
   3725                                          }
   3726                                          strcpy( (char *)tempBffr2, "TKSR SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_609: (+1)
   \   00004016   0x.... 0x....      LDR.W    R1,??DataTable4_12
   \   0000401A   0xA80A             ADD      R0,SP,#+40
   \   0000401C   0x.... 0x....      BL       strcpy
   \   00004020   0xE074             B.N      ??RoadBrd_ParseString_610
   \   00004022   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_541:
   \   00004024   0x........         DC32     ?_242
   \   00004028   0x........         DC32     ?_243
   \   0000402C   0x........         DC32     ?_244
   3727                                        } // Endif (tempBffr[4]!=':')
   3728                                        else
   3729                                        {
   3730                                          // 2. Verify if remaining string is digits
   3731                                          if (Size > 5)
   \                     ??RoadBrd_ParseString_608: (+1)
   \   00004030   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00004034   0xF1B8 0x0F06      CMP      R8,#+6
   \   00004038   0xDB10             BLT.N    ??RoadBrd_ParseString_611
   3732                                          {
   3733                                            flag = 1;
   \   0000403A   0x2001             MOVS     R0,#+1
   \   0000403C   0x902E             STR      R0,[SP, #+184]
   3734                                            for (x=5; x< Size; x++)
   \   0000403E   0x2005             MOVS     R0,#+5
   \   00004040   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_612: (+1)
   \   00004042   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00004046   0x4547             CMP      R7,R8
   \   00004048   0xDA0A             BGE.N    ??RoadBrd_ParseString_613
   3735                                            {
   3736                                              if (isdigit(tempBffr[x]) == 0)
   \   0000404A   0x5DE0             LDRB     R0,[R4, R7]
   \   0000404C   0x.... 0x....      BL       isdigit
   \   00004050   0x2800             CMP      R0,#+0
   \   00004052   0xD101             BNE.N    ??RoadBrd_ParseString_614
   3737                                                flag = 0;
   \   00004054   0x2000             MOVS     R0,#+0
   \   00004056   0x902E             STR      R0,[SP, #+184]
   3738                                            }
   \                     ??RoadBrd_ParseString_614: (+1)
   \   00004058   0x1C7F             ADDS     R7,R7,#+1
   \   0000405A   0xE7F2             B.N      ??RoadBrd_ParseString_612
   3739                                          } // EndIf (Size > 5)
   3740                                          else
   3741                                            flag = 0;
   \                     ??RoadBrd_ParseString_611: (+1)
   \   0000405C   0x2000             MOVS     R0,#+0
   \   0000405E   0x902E             STR      R0,[SP, #+184]
   3742                                          if (flag == 0)
   \                     ??RoadBrd_ParseString_613: (+1)
   \   00004060   0x982E             LDR      R0,[SP, #+184]
   \   00004062   0x2800             CMP      R0,#+0
   \   00004064   0xD113             BNE.N    ??RoadBrd_ParseString_615
   3743                                          {
   3744                                            // Is this a BLE Operation?
   3745                                            if ( BLE_Flag )
   \   00004066   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004068   0x2D00             CMP      R5,#+0
   \   0000406A   0xD00A             BEQ.N    ??RoadBrd_ParseString_616
   3746                                            {
   3747                                              // Yes...Build and Send BLE Response NOW.
   3748                                              strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSR_BADPARAM</STATUS>");
   \   0000406C   0x.... 0x....      LDR.W    R1,??DataTable4_13
   \   00004070   0xA80A             ADD      R0,SP,#+40
   \   00004072   0x.... 0x....      BL       strcpy
   3749                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004076   0xA80A             ADD      R0,SP,#+40
   \   00004078   0x.... 0x....      BL       strlen
   \   0000407C   0xA90A             ADD      R1,SP,#+40
   \   0000407E   0x.... 0x....      BL       BGM111_Transmit
   3750                                            }
   3751                                            strcpy( (char *)tempBffr2, "TKSR SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_616: (+1)
   \   00004082   0x.... 0x....      LDR.W    R1,??DataTable4_14
   \   00004086   0xA80A             ADD      R0,SP,#+40
   \   00004088   0x.... 0x....      BL       strcpy
   \   0000408C   0xE03E             B.N      ??RoadBrd_ParseString_610
   3752                                          }
   3753                                          else
   3754                                          {
   3755                                            // 3. Grab remaining string and convert to integer.
   3756                                            tempPstr = &tempBffr[5];
   \                     ??RoadBrd_ParseString_615: (+1)
   \   0000408E   0x1D60             ADDS     R0,R4,#+5
   \   00004090   0x9030             STR      R0,[SP, #+192]
   3757                                            strcpy(tempstr, tempPstr);
   \   00004092   0x9930             LDR      R1,[SP, #+192]
   \   00004094   0xA852             ADD      R0,SP,#+328
   \   00004096   0x.... 0x....      BL       strcpy
   3758                                            new_value = atoi( tempstr );
   \   0000409A   0xA852             ADD      R0,SP,#+328
   \   0000409C   0x.... 0x....      BL       atoi
   \   000040A0   0x902F             STR      R0,[SP, #+188]
   3759                                            if((new_value > 9999) ||
   3760                                               (new_value < 0))
   \   000040A2   0x982F             LDR      R0,[SP, #+188]
   \   000040A4   0xF242 0x7110      MOVW     R1,#+10000
   \   000040A8   0x4288             CMP      R0,R1
   \   000040AA   0xDA02             BGE.N    ??RoadBrd_ParseString_617
   \   000040AC   0x982F             LDR      R0,[SP, #+188]
   \   000040AE   0x2800             CMP      R0,#+0
   \   000040B0   0xD516             BPL.N    ??RoadBrd_ParseString_618
   3761                                            {
   3762                                              // Is this a BLE Operation?
   3763                                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_617: (+1)
   \   000040B2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000040B4   0x2D00             CMP      R5,#+0
   \   000040B6   0xD00A             BEQ.N    ??RoadBrd_ParseString_619
   3764                                              {
   3765                                                // Yes...Build and Send BLE Response NOW.
   3766                                                strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSR_BADPARAM</STATUS>");
   \   000040B8   0x.... 0x....      LDR.W    R1,??DataTable4_13
   \   000040BC   0xA80A             ADD      R0,SP,#+40
   \   000040BE   0x.... 0x....      BL       strcpy
   3767                                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000040C2   0xA80A             ADD      R0,SP,#+40
   \   000040C4   0x.... 0x....      BL       strlen
   \   000040C8   0xA90A             ADD      R1,SP,#+40
   \   000040CA   0x.... 0x....      BL       BGM111_Transmit
   3768                                              }
   3769                                              strcpy( (char *)tempBffr2, "TKSR SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_619: (+1)
   \   000040CE   0x.... 0x....      LDR.W    R1,??DataTable4_14
   \   000040D2   0xA80A             ADD      R0,SP,#+40
   \   000040D4   0x.... 0x....      BL       strcpy
   \   000040D8   0xE018             B.N      ??RoadBrd_ParseString_610
   \   000040DA   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_544:
   \   000040DC   0x........         DC32     ?_245
   3770                                            }
   3771                                            else
   3772                                            {
   3773                                              // Time to set new Road Sound Sample Rate.
   3774                                              RoadBrd_Set_RdSndTickCnt( new_value );
   \                     ??RoadBrd_ParseString_618: (+1)
   \   000040E0   0x982F             LDR      R0,[SP, #+188]
   \   000040E2   0x.... 0x....      BL       RoadBrd_Set_RdSndTickCnt
   3775                                              // NOW, Build Data String..
   3776                                              // Is this a BLE Operation?
   3777                                              if ( BLE_Flag )
   \   000040E6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000040E8   0x2D00             CMP      R5,#+0
   \   000040EA   0xD00A             BEQ.N    ??RoadBrd_ParseString_620
   3778                                              {
   3779                                                // Yes...Build and Send BLE Response NOW.
   3780                                                strcpy( (char *)tempBffr2, "<STATUS>ST_TKSR_ACK</STATUS>");
   \   000040EC   0x.... 0x....      LDR.W    R1,??DataTable4_15
   \   000040F0   0xA80A             ADD      R0,SP,#+40
   \   000040F2   0x.... 0x....      BL       strcpy
   3781                                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000040F6   0xA80A             ADD      R0,SP,#+40
   \   000040F8   0x.... 0x....      BL       strlen
   \   000040FC   0xA90A             ADD      R1,SP,#+40
   \   000040FE   0x.... 0x....      BL       BGM111_Transmit
   3782                                              }
   3783                                              sprintf( (char *)tempBffr2, "COMPLETE" );
   \                     ??RoadBrd_ParseString_620: (+1)
   \   00004102   0x.... 0x....      LDR.W    R1,??DataTable4_16
   \   00004106   0xA80A             ADD      R0,SP,#+40
   \   00004108   0x.... 0x....      BL       sprintf
   3784                                            } // EndElse ((new_value > 9999) || (new_value < 0))
   3785                                          } // EndElse (flag == 0)
   3786                                        } // EndElse (tempBffr[4]!=':')
   3787                                        break;
   \                     ??RoadBrd_ParseString_610: (+1)
   \   0000410C   0xE1A2             B.N      ??RoadBrd_ParseString_621
   3788          //------------------
   3789                                      case 'S':
   3790                                        //Key Flash Variable Set Sensor Sample Rate Command.
   3791                                        // Step 1. Validate format.
   3792                                        if(tempBffr[4]!=':')
   \                     ??RoadBrd_ParseString_605: (+1)
   \   0000410E   0x7920             LDRB     R0,[R4, #+4]
   \   00004110   0x283A             CMP      R0,#+58
   \   00004112   0xD019             BEQ.N    ??RoadBrd_ParseString_622
   3793                                        {
   3794                                          // Is this a BLE Operation?
   3795                                          if ( BLE_Flag )
   \   00004114   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004116   0x2D00             CMP      R5,#+0
   \   00004118   0xD00A             BEQ.N    ??RoadBrd_ParseString_623
   3796                                          {
   3797                                            // Yes...Build and Send BLE Response NOW.
   3798                                            strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSS_SYNTAX</STATUS>");
   \   0000411A   0x.... 0x....      LDR.W    R1,??DataTable4_17
   \   0000411E   0xA80A             ADD      R0,SP,#+40
   \   00004120   0x.... 0x....      BL       strcpy
   3799                                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004124   0xA80A             ADD      R0,SP,#+40
   \   00004126   0x.... 0x....      BL       strlen
   \   0000412A   0xA90A             ADD      R1,SP,#+40
   \   0000412C   0x.... 0x....      BL       BGM111_Transmit
   3800                                          }
   3801                                          strcpy( (char *)tempBffr2, "TKSS SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_623: (+1)
   \   00004130   0x.... 0x....      LDR.W    R1,??DataTable4_18
   \   00004134   0xA80A             ADD      R0,SP,#+40
   \   00004136   0x.... 0x....      BL       strcpy
   \   0000413A   0xE070             B.N      ??RoadBrd_ParseString_624
   \                     ??RoadBrd_ParseString_545:
   \   0000413C   0x........         DC32     ?_246
   \   00004140   0x........         DC32     ?_247
   \   00004144   0x........         DC32     ?_248
   3802                                        } // Endif (tempBffr[4]!=':')
   3803                                        else
   3804                                        {
   3805                                          // 2. Verify if remaining string is digits
   3806                                          if (Size > 5)
   \                     ??RoadBrd_ParseString_622: (+1)
   \   00004148   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000414C   0xF1B8 0x0F06      CMP      R8,#+6
   \   00004150   0xDB10             BLT.N    ??RoadBrd_ParseString_625
   3807                                          {
   3808                                            flag = 1;
   \   00004152   0x2001             MOVS     R0,#+1
   \   00004154   0x902E             STR      R0,[SP, #+184]
   3809                                            for (x=5; x< Size; x++)
   \   00004156   0x2005             MOVS     R0,#+5
   \   00004158   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_626: (+1)
   \   0000415A   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000415E   0x4547             CMP      R7,R8
   \   00004160   0xDA0A             BGE.N    ??RoadBrd_ParseString_627
   3810                                            {
   3811                                              if (isdigit(tempBffr[x]) == 0)
   \   00004162   0x5DE0             LDRB     R0,[R4, R7]
   \   00004164   0x.... 0x....      BL       isdigit
   \   00004168   0x2800             CMP      R0,#+0
   \   0000416A   0xD101             BNE.N    ??RoadBrd_ParseString_628
   3812                                                flag = 0;
   \   0000416C   0x2000             MOVS     R0,#+0
   \   0000416E   0x902E             STR      R0,[SP, #+184]
   3813                                            }
   \                     ??RoadBrd_ParseString_628: (+1)
   \   00004170   0x1C7F             ADDS     R7,R7,#+1
   \   00004172   0xE7F2             B.N      ??RoadBrd_ParseString_626
   3814                                          } // EndIf (Size > 5)
   3815                                          else
   3816                                            flag = 0;
   \                     ??RoadBrd_ParseString_625: (+1)
   \   00004174   0x2000             MOVS     R0,#+0
   \   00004176   0x902E             STR      R0,[SP, #+184]
   3817                                          if (flag == 0)
   \                     ??RoadBrd_ParseString_627: (+1)
   \   00004178   0x982E             LDR      R0,[SP, #+184]
   \   0000417A   0x2800             CMP      R0,#+0
   \   0000417C   0xD113             BNE.N    ??RoadBrd_ParseString_629
   3818                                          {
   3819                                            // Is this a BLE Operation?
   3820                                            if ( BLE_Flag )
   \   0000417E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004180   0x2D00             CMP      R5,#+0
   \   00004182   0xD00A             BEQ.N    ??RoadBrd_ParseString_630
   3821                                            {
   3822                                              // Yes...Build and Send BLE Response NOW.
   3823                                              strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSS_BADPARAM</STATUS>");
   \   00004184   0x.... 0x....      LDR.W    R1,??DataTable4_19
   \   00004188   0xA80A             ADD      R0,SP,#+40
   \   0000418A   0x.... 0x....      BL       strcpy
   3824                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000418E   0xA80A             ADD      R0,SP,#+40
   \   00004190   0x.... 0x....      BL       strlen
   \   00004194   0xA90A             ADD      R1,SP,#+40
   \   00004196   0x.... 0x....      BL       BGM111_Transmit
   3825                                            }
   3826                                            strcpy( (char *)tempBffr2, "TKSS SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_630: (+1)
   \   0000419A   0x.... 0x....      LDR.W    R1,??DataTable4_20
   \   0000419E   0xA80A             ADD      R0,SP,#+40
   \   000041A0   0x.... 0x....      BL       strcpy
   \   000041A4   0xE03B             B.N      ??RoadBrd_ParseString_624
   3827                                          }
   3828                                          else
   3829                                          {
   3830                                            // 3. Grab remaining string and convert to integer.
   3831                                            tempPstr = &tempBffr[5];
   \                     ??RoadBrd_ParseString_629: (+1)
   \   000041A6   0x1D60             ADDS     R0,R4,#+5
   \   000041A8   0x9030             STR      R0,[SP, #+192]
   3832                                            strcpy(tempstr, tempPstr);
   \   000041AA   0x9930             LDR      R1,[SP, #+192]
   \   000041AC   0xA852             ADD      R0,SP,#+328
   \   000041AE   0x.... 0x....      BL       strcpy
   3833                                            new_value = atoi( tempstr );
   \   000041B2   0xA852             ADD      R0,SP,#+328
   \   000041B4   0x.... 0x....      BL       atoi
   \   000041B8   0x902F             STR      R0,[SP, #+188]
   3834                                            if((new_value > 9999) ||
   3835                                               (new_value < 0))
   \   000041BA   0x982F             LDR      R0,[SP, #+188]
   \   000041BC   0xF242 0x7110      MOVW     R1,#+10000
   \   000041C0   0x4288             CMP      R0,R1
   \   000041C2   0xDA02             BGE.N    ??RoadBrd_ParseString_631
   \   000041C4   0x982F             LDR      R0,[SP, #+188]
   \   000041C6   0x2800             CMP      R0,#+0
   \   000041C8   0xD513             BPL.N    ??RoadBrd_ParseString_632
   3836                                            {
   3837                                              // Is this a BLE Operation?
   3838                                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_631: (+1)
   \   000041CA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000041CC   0x2D00             CMP      R5,#+0
   \   000041CE   0xD00A             BEQ.N    ??RoadBrd_ParseString_633
   3839                                              {
   3840                                                // Yes...Build and Send BLE Response NOW.
   3841                                                strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSS_BADPARAM</STATUS>");
   \   000041D0   0x.... 0x....      LDR.W    R1,??DataTable4_19
   \   000041D4   0xA80A             ADD      R0,SP,#+40
   \   000041D6   0x.... 0x....      BL       strcpy
   3842                                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000041DA   0xA80A             ADD      R0,SP,#+40
   \   000041DC   0x.... 0x....      BL       strlen
   \   000041E0   0xA90A             ADD      R1,SP,#+40
   \   000041E2   0x.... 0x....      BL       BGM111_Transmit
   3843                                              }
   3844                                              strcpy( (char *)tempBffr2, "TKSS SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_633: (+1)
   \   000041E6   0x.... 0x....      LDR.W    R1,??DataTable4_20
   \   000041EA   0xA80A             ADD      R0,SP,#+40
   \   000041EC   0x.... 0x....      BL       strcpy
   \   000041F0   0xE015             B.N      ??RoadBrd_ParseString_624
   3845                                            }
   3846                                            else
   3847                                            {
   3848                                              // Time to set new Road Sound Sample Rate.
   3849                                              RoadBrd_Set_SnsrTickCnt( new_value );
   \                     ??RoadBrd_ParseString_632: (+1)
   \   000041F2   0x982F             LDR      R0,[SP, #+188]
   \   000041F4   0x.... 0x....      BL       RoadBrd_Set_SnsrTickCnt
   3850                                              // Is this a BLE Operation?
   3851                                              if ( BLE_Flag )
   \   000041F8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000041FA   0x2D00             CMP      R5,#+0
   \   000041FC   0xD00A             BEQ.N    ??RoadBrd_ParseString_634
   3852                                              {
   3853                                                // Yes...Build and Send BLE Response NOW.
   3854                                                strcpy( (char *)tempBffr2, "<STATUS>ST_TKSS_ACK</STATUS>");
   \   000041FE   0x.... 0x....      LDR.W    R1,??DataTable4_21
   \   00004202   0xA80A             ADD      R0,SP,#+40
   \   00004204   0x.... 0x....      BL       strcpy
   3855                                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004208   0xA80A             ADD      R0,SP,#+40
   \   0000420A   0x.... 0x....      BL       strlen
   \   0000420E   0xA90A             ADD      R1,SP,#+40
   \   00004210   0x.... 0x....      BL       BGM111_Transmit
   3856                                              }
   3857                                              // NOW, Build Data String..
   3858                                              sprintf( (char *)tempBffr2, "COMPLETE" );
   \                     ??RoadBrd_ParseString_634: (+1)
   \   00004214   0x.... 0x....      LDR.W    R1,??DataTable4_16
   \   00004218   0xA80A             ADD      R0,SP,#+40
   \   0000421A   0x.... 0x....      BL       sprintf
   3859                                            } // EndElse ((new_value > 9999) || (new_value < 0))
   3860                                          } // EndElse (flag == 0)
   3861                                        } // EndElse (tempBffr[4]!=':')
   3862                                        break;
   \                     ??RoadBrd_ParseString_624: (+1)
   \   0000421E   0xE119             B.N      ??RoadBrd_ParseString_621
   3863          //------------------
   3864                                      case 'T':
   3865                                        //Key Flash Variable Set TACK Limit(Multiple of Road Sound Throttles).
   3866                                        // Step 1. Validate format.
   3867                                        if(tempBffr[4]!=':')
   \                     ??RoadBrd_ParseString_606: (+1)
   \   00004220   0x7920             LDRB     R0,[R4, #+4]
   \   00004222   0x283A             CMP      R0,#+58
   \   00004224   0xD018             BEQ.N    ??RoadBrd_ParseString_635
   3868                                        {
   3869                                          // Is this a BLE Operation?
   3870                                          if ( BLE_Flag )
   \   00004226   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004228   0x2D00             CMP      R5,#+0
   \   0000422A   0xD00A             BEQ.N    ??RoadBrd_ParseString_636
   3871                                          {
   3872                                            // Yes...Build and Send BLE Response NOW.
   3873                                            strcpy( (char *)tempBffr2, "<STATUS>CMD_TKST_SYNTAX</STATUS>");
   \   0000422C   0x.... 0x....      LDR.W    R1,??DataTable4_22
   \   00004230   0xA80A             ADD      R0,SP,#+40
   \   00004232   0x.... 0x....      BL       strcpy
   3874                                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004236   0xA80A             ADD      R0,SP,#+40
   \   00004238   0x.... 0x....      BL       strlen
   \   0000423C   0xA90A             ADD      R1,SP,#+40
   \   0000423E   0x.... 0x....      BL       BGM111_Transmit
   3875                                          }
   3876                                          strcpy( (char *)tempBffr2, "TKST SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_636: (+1)
   \   00004242   0x.... 0x....      LDR.W    R1,??DataTable4_23
   \   00004246   0xA80A             ADD      R0,SP,#+40
   \   00004248   0x.... 0x....      BL       strcpy
   \   0000424C   0xE074             B.N      ??RoadBrd_ParseString_637
   \   0000424E   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_548:
   \   00004250   0x........         DC32     ?_249
   \   00004254   0x........         DC32     ?_250
   3877                                        } // Endif (tempBffr[4]!=':')
   3878                                        else
   3879                                        {
   3880                                          // 2. Verify if remaining string is digits
   3881                                          if (Size > 5)
   \                     ??RoadBrd_ParseString_635: (+1)
   \   00004258   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000425C   0xF1B8 0x0F06      CMP      R8,#+6
   \   00004260   0xDB10             BLT.N    ??RoadBrd_ParseString_638
   3882                                          {
   3883                                            flag = 1;
   \   00004262   0x2001             MOVS     R0,#+1
   \   00004264   0x902E             STR      R0,[SP, #+184]
   3884                                            for (x=5; x< Size; x++)
   \   00004266   0x2005             MOVS     R0,#+5
   \   00004268   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_639: (+1)
   \   0000426A   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000426E   0x4547             CMP      R7,R8
   \   00004270   0xDA0A             BGE.N    ??RoadBrd_ParseString_640
   3885                                            {
   3886                                              if (isdigit(tempBffr[x]) == 0)
   \   00004272   0x5DE0             LDRB     R0,[R4, R7]
   \   00004274   0x.... 0x....      BL       isdigit
   \   00004278   0x2800             CMP      R0,#+0
   \   0000427A   0xD101             BNE.N    ??RoadBrd_ParseString_641
   3887                                                flag = 0;
   \   0000427C   0x2000             MOVS     R0,#+0
   \   0000427E   0x902E             STR      R0,[SP, #+184]
   3888                                            }
   \                     ??RoadBrd_ParseString_641: (+1)
   \   00004280   0x1C7F             ADDS     R7,R7,#+1
   \   00004282   0xE7F2             B.N      ??RoadBrd_ParseString_639
   3889                                          } // EndIf (Size > 5)
   3890                                          else
   3891                                            flag = 0;
   \                     ??RoadBrd_ParseString_638: (+1)
   \   00004284   0x2000             MOVS     R0,#+0
   \   00004286   0x902E             STR      R0,[SP, #+184]
   3892                                          if (flag == 0)
   \                     ??RoadBrd_ParseString_640: (+1)
   \   00004288   0x982E             LDR      R0,[SP, #+184]
   \   0000428A   0x2800             CMP      R0,#+0
   \   0000428C   0xD116             BNE.N    ??RoadBrd_ParseString_642
   3893                                          {
   3894                                            // Is this a BLE Operation?
   3895                                            if ( BLE_Flag )
   \   0000428E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004290   0x2D00             CMP      R5,#+0
   \   00004292   0xD00A             BEQ.N    ??RoadBrd_ParseString_643
   3896                                            {
   3897                                              // Yes...Build and Send BLE Response NOW.
   3898                                              strcpy( (char *)tempBffr2, "<STATUS>CMD_TKST_BADPARAM</STATUS>");
   \   00004294   0x.... 0x....      LDR.W    R1,??DataTable4_24
   \   00004298   0xA80A             ADD      R0,SP,#+40
   \   0000429A   0x.... 0x....      BL       strcpy
   3899                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000429E   0xA80A             ADD      R0,SP,#+40
   \   000042A0   0x.... 0x....      BL       strlen
   \   000042A4   0xA90A             ADD      R1,SP,#+40
   \   000042A6   0x.... 0x....      BL       BGM111_Transmit
   3900                                            }
   3901                                            strcpy( (char *)tempBffr2, "TKST SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_643: (+1)
   \   000042AA   0x.... 0x....      LDR.W    R1,??DataTable4_25
   \   000042AE   0xA80A             ADD      R0,SP,#+40
   \   000042B0   0x.... 0x....      BL       strcpy
   \   000042B4   0xE040             B.N      ??RoadBrd_ParseString_637
   \   000042B6   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_550:
   \   000042B8   0x........         DC32     ?_251
   3902                                          }
   3903                                          else
   3904                                          {
   3905                                            // 3. Grab remaining string and convert to integer.
   3906                                            tempPstr = &tempBffr[5];
   \                     ??RoadBrd_ParseString_642: (+1)
   \   000042BC   0x1D60             ADDS     R0,R4,#+5
   \   000042BE   0x9030             STR      R0,[SP, #+192]
   3907                                            strcpy(tempstr, tempPstr);
   \   000042C0   0x9930             LDR      R1,[SP, #+192]
   \   000042C2   0xA852             ADD      R0,SP,#+328
   \   000042C4   0x.... 0x....      BL       strcpy
   3908                                            new_value = atoi( tempstr );
   \   000042C8   0xA852             ADD      R0,SP,#+328
   \   000042CA   0x.... 0x....      BL       atoi
   \   000042CE   0x902F             STR      R0,[SP, #+188]
   3909                                            if((new_value > 9999) ||
   3910                                               (new_value < 0))
   \   000042D0   0x982F             LDR      R0,[SP, #+188]
   \   000042D2   0xF242 0x7110      MOVW     R1,#+10000
   \   000042D6   0x4288             CMP      R0,R1
   \   000042D8   0xDA02             BGE.N    ??RoadBrd_ParseString_644
   \   000042DA   0x982F             LDR      R0,[SP, #+188]
   \   000042DC   0x2800             CMP      R0,#+0
   \   000042DE   0xD515             BPL.N    ??RoadBrd_ParseString_645
   3911                                            {
   3912                                              // Is this a BLE Operation?
   3913                                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_644: (+1)
   \   000042E0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000042E2   0x2D00             CMP      R5,#+0
   \   000042E4   0xD00A             BEQ.N    ??RoadBrd_ParseString_646
   3914                                              {
   3915                                                // Yes...Build and Send BLE Response NOW.
   3916                                                strcpy( (char *)tempBffr2, "<STATUS>CMD_TKST_BADPARAM</STATUS>");
   \   000042E6   0x.... 0x....      LDR.W    R1,??DataTable4_24
   \   000042EA   0xA80A             ADD      R0,SP,#+40
   \   000042EC   0x.... 0x....      BL       strcpy
   3917                                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000042F0   0xA80A             ADD      R0,SP,#+40
   \   000042F2   0x.... 0x....      BL       strlen
   \   000042F6   0xA90A             ADD      R1,SP,#+40
   \   000042F8   0x.... 0x....      BL       BGM111_Transmit
   3918                                              }
   3919                                              strcpy( (char *)tempBffr2, "TKSS SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_646: (+1)
   \   000042FC   0x.... 0x....      LDR.W    R1,??DataTable4_20
   \   00004300   0xA80A             ADD      R0,SP,#+40
   \   00004302   0x.... 0x....      BL       strcpy
   \   00004306   0xE017             B.N      ??RoadBrd_ParseString_637
   \                     ??RoadBrd_ParseString_551:
   \   00004308   0x........         DC32     ?_252
   3920                                            }
   3921                                            else
   3922                                            {
   3923                                              // Time to set new TACK Limit.
   3924                                              RoadBrd_Set_TackLimit( new_value );
   \                     ??RoadBrd_ParseString_645: (+1)
   \   0000430C   0x982F             LDR      R0,[SP, #+188]
   \   0000430E   0x.... 0x....      BL       RoadBrd_Set_TackLimit
   3925                                              // Is this a BLE Operation?
   3926                                              if ( BLE_Flag )
   \   00004312   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004314   0x2D00             CMP      R5,#+0
   \   00004316   0xD00A             BEQ.N    ??RoadBrd_ParseString_647
   3927                                              {
   3928                                                // Yes...Build and Send BLE Response NOW.
   3929                                                strcpy( (char *)tempBffr2, "<STATUS>ST_TKST_ACK</STATUS>");
   \   00004318   0x.... 0x....      LDR.W    R1,??DataTable4_26
   \   0000431C   0xA80A             ADD      R0,SP,#+40
   \   0000431E   0x.... 0x....      BL       strcpy
   3930                                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004322   0xA80A             ADD      R0,SP,#+40
   \   00004324   0x.... 0x....      BL       strlen
   \   00004328   0xA90A             ADD      R1,SP,#+40
   \   0000432A   0x.... 0x....      BL       BGM111_Transmit
   3931                                              }
   3932                                              // NOW, Build Data String..
   3933                                              sprintf( (char *)tempBffr2, "COMPLETE" );
   \                     ??RoadBrd_ParseString_647: (+1)
   \   0000432E   0x.... 0x....      LDR.W    R1,??DataTable4_16
   \   00004332   0xA80A             ADD      R0,SP,#+40
   \   00004334   0x.... 0x....      BL       sprintf
   3934                                            } // EndElse ((new_value > 9999) || (new_value < 0))
   3935                                          } // EndElse (flag == 0)
   3936                                        } // EndElse (tempBffr[4]!=':')
   3937                                        break;
   \                     ??RoadBrd_ParseString_637: (+1)
   \   00004338   0xE08C             B.N      ??RoadBrd_ParseString_621
   3938                                      case 'B':
   3939                                        //Key Flash Variable Set Boot Delay(Seconds).
   3940                                        // Step 1. Validate format.
   3941                                        if(tempBffr[4]!=':')
   \                     ??RoadBrd_ParseString_603: (+1)
   \   0000433A   0x7920             LDRB     R0,[R4, #+4]
   \   0000433C   0x283A             CMP      R0,#+58
   \   0000433E   0xD019             BEQ.N    ??RoadBrd_ParseString_648
   3942                                        {
   3943                                          // Is this a BLE Operation?
   3944                                          if ( BLE_Flag )
   \   00004340   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004342   0x2D00             CMP      R5,#+0
   \   00004344   0xD00A             BEQ.N    ??RoadBrd_ParseString_649
   3945                                          {
   3946                                            // Yes...Build and Send BLE Response NOW.
   3947                                            strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSB_SYNTAX</STATUS>");
   \   00004346   0x.... 0x....      LDR.W    R1,??DataTable4_27
   \   0000434A   0xA80A             ADD      R0,SP,#+40
   \   0000434C   0x.... 0x....      BL       strcpy
   3948                                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004350   0xA80A             ADD      R0,SP,#+40
   \   00004352   0x.... 0x....      BL       strlen
   \   00004356   0xA90A             ADD      R1,SP,#+40
   \   00004358   0x.... 0x....      BL       BGM111_Transmit
   3949                                          }
   3950                                          strcpy( (char *)tempBffr2, "TKSB SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_649: (+1)
   \   0000435C   0x.... 0x....      LDR.W    R1,??DataTable4_28
   \   00004360   0xA80A             ADD      R0,SP,#+40
   \   00004362   0x.... 0x....      BL       strcpy
   \   00004366   0xE06F             B.N      ??RoadBrd_ParseString_650
   \                     ??RoadBrd_ParseString_553:
   \   00004368   0x........         DC32     ?_253
   \   0000436C   0x........         DC32     ?_254
   \   00004370   0x........         DC32     ?_255
   3951                                        } // Endif (tempBffr[4]!=':')
   3952                                        else
   3953                                        {
   3954                                          // 2. Verify if remaining string is digits
   3955                                          if (Size > 5)
   \                     ??RoadBrd_ParseString_648: (+1)
   \   00004374   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00004378   0xF1B8 0x0F06      CMP      R8,#+6
   \   0000437C   0xDB10             BLT.N    ??RoadBrd_ParseString_651
   3956                                          {
   3957                                            flag = 1;
   \   0000437E   0x2001             MOVS     R0,#+1
   \   00004380   0x902E             STR      R0,[SP, #+184]
   3958                                            for (x=5; x< Size; x++)
   \   00004382   0x2005             MOVS     R0,#+5
   \   00004384   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_652: (+1)
   \   00004386   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000438A   0x4547             CMP      R7,R8
   \   0000438C   0xDA0A             BGE.N    ??RoadBrd_ParseString_653
   3959                                            {
   3960                                              if (isdigit(tempBffr[x]) == 0)
   \   0000438E   0x5DE0             LDRB     R0,[R4, R7]
   \   00004390   0x.... 0x....      BL       isdigit
   \   00004394   0x2800             CMP      R0,#+0
   \   00004396   0xD101             BNE.N    ??RoadBrd_ParseString_654
   3961                                                flag = 0;
   \   00004398   0x2000             MOVS     R0,#+0
   \   0000439A   0x902E             STR      R0,[SP, #+184]
   3962                                            }
   \                     ??RoadBrd_ParseString_654: (+1)
   \   0000439C   0x1C7F             ADDS     R7,R7,#+1
   \   0000439E   0xE7F2             B.N      ??RoadBrd_ParseString_652
   3963                                          } // EndIf (Size > 5)
   3964                                          else
   3965                                            flag = 0;
   \                     ??RoadBrd_ParseString_651: (+1)
   \   000043A0   0x2000             MOVS     R0,#+0
   \   000043A2   0x902E             STR      R0,[SP, #+184]
   3966                                          if (flag == 0)
   \                     ??RoadBrd_ParseString_653: (+1)
   \   000043A4   0x982E             LDR      R0,[SP, #+184]
   \   000043A6   0x2800             CMP      R0,#+0
   \   000043A8   0xD113             BNE.N    ??RoadBrd_ParseString_655
   3967                                          {
   3968                                            // Is this a BLE Operation?
   3969                                            if ( BLE_Flag )
   \   000043AA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000043AC   0x2D00             CMP      R5,#+0
   \   000043AE   0xD00A             BEQ.N    ??RoadBrd_ParseString_656
   3970                                            {
   3971                                              // Yes...Build and Send BLE Response NOW.
   3972                                              strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSB_BADPARAM</STATUS>");
   \   000043B0   0x.... 0x....      LDR.W    R1,??DataTable4_29
   \   000043B4   0xA80A             ADD      R0,SP,#+40
   \   000043B6   0x.... 0x....      BL       strcpy
   3973                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000043BA   0xA80A             ADD      R0,SP,#+40
   \   000043BC   0x.... 0x....      BL       strlen
   \   000043C0   0xA90A             ADD      R1,SP,#+40
   \   000043C2   0x.... 0x....      BL       BGM111_Transmit
   3974                                            }
   3975                                            strcpy( (char *)tempBffr2, "TKSB SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_656: (+1)
   \   000043C6   0x.... 0x....      LDR.W    R1,??DataTable4_30
   \   000043CA   0xA80A             ADD      R0,SP,#+40
   \   000043CC   0x.... 0x....      BL       strcpy
   \   000043D0   0xE03A             B.N      ??RoadBrd_ParseString_650
   3976                                          }
   3977                                          else
   3978                                          {
   3979                                            // 3. Grab remaining string and convert to integer.
   3980                                            tempPstr = &tempBffr[5];
   \                     ??RoadBrd_ParseString_655: (+1)
   \   000043D2   0x1D60             ADDS     R0,R4,#+5
   \   000043D4   0x9030             STR      R0,[SP, #+192]
   3981                                            strcpy(tempstr, tempPstr);
   \   000043D6   0x9930             LDR      R1,[SP, #+192]
   \   000043D8   0xA852             ADD      R0,SP,#+328
   \   000043DA   0x.... 0x....      BL       strcpy
   3982                                            new_value = atoi( tempstr );
   \   000043DE   0xA852             ADD      R0,SP,#+328
   \   000043E0   0x.... 0x....      BL       atoi
   \   000043E4   0x902F             STR      R0,[SP, #+188]
   3983                                            if((new_value > 999) ||
   3984                                               (new_value < 0))
   \   000043E6   0x982F             LDR      R0,[SP, #+188]
   \   000043E8   0xF5B0 0x7F7A      CMP      R0,#+1000
   \   000043EC   0xDA02             BGE.N    ??RoadBrd_ParseString_657
   \   000043EE   0x982F             LDR      R0,[SP, #+188]
   \   000043F0   0x2800             CMP      R0,#+0
   \   000043F2   0xD513             BPL.N    ??RoadBrd_ParseString_658
   3985                                            {
   3986                                              // Is this a BLE Operation?
   3987                                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_657: (+1)
   \   000043F4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000043F6   0x2D00             CMP      R5,#+0
   \   000043F8   0xD00A             BEQ.N    ??RoadBrd_ParseString_659
   3988                                              {
   3989                                                // Yes...Build and Send BLE Response NOW.
   3990                                                strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSB_BADPARAM</STATUS>");
   \   000043FA   0x.... 0x....      LDR.W    R1,??DataTable4_29
   \   000043FE   0xA80A             ADD      R0,SP,#+40
   \   00004400   0x.... 0x....      BL       strcpy
   3991                                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004404   0xA80A             ADD      R0,SP,#+40
   \   00004406   0x.... 0x....      BL       strlen
   \   0000440A   0xA90A             ADD      R1,SP,#+40
   \   0000440C   0x.... 0x....      BL       BGM111_Transmit
   3992                                              }
   3993                                              strcpy( (char *)tempBffr2, "TKSB SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_659: (+1)
   \   00004410   0x.... 0x....      LDR.W    R1,??DataTable4_30
   \   00004414   0xA80A             ADD      R0,SP,#+40
   \   00004416   0x.... 0x....      BL       strcpy
   \   0000441A   0xE015             B.N      ??RoadBrd_ParseString_650
   3994                                            }
   3995                                            else
   3996                                            {
   3997                                              // Time to set new Boot Delay.
   3998                                              RoadBrd_Set_BootDelay( new_value );
   \                     ??RoadBrd_ParseString_658: (+1)
   \   0000441C   0x982F             LDR      R0,[SP, #+188]
   \   0000441E   0x.... 0x....      BL       RoadBrd_Set_BootDelay
   3999                                              // Is this a BLE Operation?
   4000                                              if ( BLE_Flag )
   \   00004422   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004424   0x2D00             CMP      R5,#+0
   \   00004426   0xD00A             BEQ.N    ??RoadBrd_ParseString_660
   4001                                              {
   4002                                                // Yes...Build and Send BLE Response NOW.
   4003                                                strcpy( (char *)tempBffr2, "<STATUS>ST_TKSB_ACK</STATUS>");
   \   00004428   0x.... 0x....      LDR.W    R1,??DataTable4_31
   \   0000442C   0xA80A             ADD      R0,SP,#+40
   \   0000442E   0x.... 0x....      BL       strcpy
   4004                                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004432   0xA80A             ADD      R0,SP,#+40
   \   00004434   0x.... 0x....      BL       strlen
   \   00004438   0xA90A             ADD      R1,SP,#+40
   \   0000443A   0x.... 0x....      BL       BGM111_Transmit
   4005                                              }
   4006                                              // NOW, Build Data String..
   4007                                              sprintf( (char *)tempBffr2, "COMPLETE" );
   \                     ??RoadBrd_ParseString_660: (+1)
   \   0000443E   0x.... 0x....      LDR.W    R1,??DataTable4_16
   \   00004442   0xA80A             ADD      R0,SP,#+40
   \   00004444   0x.... 0x....      BL       sprintf
   4008                                            } // EndElse ((new_value > 999) || (new_value < 0))
   4009                                          } // EndElse (flag == 0)
   4010                                        } // EndElse (tempBffr[4]!=':')
   4011                                        break;
   \                     ??RoadBrd_ParseString_650: (+1)
   \   00004448   0xE004             B.N      ??RoadBrd_ParseString_621
   4012                                      default:
   4013                                        strcpy( (char *)tempBffr2, "TKS ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_607: (+1)
   \   0000444A   0x.... 0x....      LDR.W    R1,??DataTable4_32
   \   0000444E   0xA80A             ADD      R0,SP,#+40
   \   00004450   0x.... 0x....      BL       strcpy
   4014                                        break;
   4015                                    } // EndSwitch ( tempBffr[3] )
   4016                                    break;
   \                     ??RoadBrd_ParseString_621: (+1)
   \   00004454   0xE0CD             B.N      ??RoadBrd_ParseString_599
   \   00004456   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_555:
   \   00004458   0x........         DC32     ?_256
   \   0000445C   0x........         DC32     ?_257
   4017          //------------------
   4018                                  case 'R':
   4019                                    //Key Flash Variable Read Command
   4020                                    switch( tempBffr[3] )
   \                     ??RoadBrd_ParseString_600: (+1)
   \   00004460   0x78E0             LDRB     R0,[R4, #+3]
   \   00004462   0x2842             CMP      R0,#+66
   \   00004464   0xF000 0x8080      BEQ.W    ??RoadBrd_ParseString_661
   \   00004468   0x2852             CMP      R0,#+82
   \   0000446A   0xD004             BEQ.N    ??RoadBrd_ParseString_662
   \   0000446C   0x2853             CMP      R0,#+83
   \   0000446E   0xD031             BEQ.N    ??RoadBrd_ParseString_663
   \   00004470   0x2854             CMP      R0,#+84
   \   00004472   0xD05D             BEQ.N    ??RoadBrd_ParseString_664
   \   00004474   0xE092             B.N      ??RoadBrd_ParseString_665
   4021                                    {
   4022          //------------------
   4023                                      case 'R':
   4024                                        //Key Flash Variable Read Road Sound Sample Rate Command.
   4025                                        // Is this a BLE Operation?
   4026                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_662: (+1)
   \   00004476   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004478   0x2D00             CMP      R5,#+0
   \   0000447A   0xD016             BEQ.N    ??RoadBrd_ParseString_666
   4027                                        {
   4028                                          // Yes...Build and Send BLE Response NOW.
   4029                                          sprintf( (char *)tempBffr2, "<STATUS>ST_TKRR:%3.1f</STATUS>", ((float)RoadBrd_Get_RdSndTickCnt()/10));
   \   0000447C   0x.... 0x....      BL       RoadBrd_Get_RdSndTickCnt
   \   00004480   0x.... 0x....      BL       __aeabi_ui2f
   \   00004484   0x.... 0x....      LDR.W    R1,??DataTable4_33  ;; 0x41200000
   \   00004488   0x.... 0x....      BL       __aeabi_fdiv
   \   0000448C   0x.... 0x....      BL       __aeabi_f2d
   \   00004490   0x0002             MOVS     R2,R0
   \   00004492   0x000B             MOVS     R3,R1
   \   00004494   0x.... 0x....      LDR.W    R1,??DataTable4_34
   \   00004498   0xA80A             ADD      R0,SP,#+40
   \   0000449A   0x.... 0x....      BL       sprintf
   4030                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000449E   0xA80A             ADD      R0,SP,#+40
   \   000044A0   0x.... 0x....      BL       strlen
   \   000044A4   0xA90A             ADD      R1,SP,#+40
   \   000044A6   0x.... 0x....      BL       BGM111_Transmit
   4031                                        }
   4032                                        sprintf( (char *)tempBffr2, "RdSnd Sample Rate:  %3.1f Seconds.\r\n", ((float)RoadBrd_Get_RdSndTickCnt()/10));
   \                     ??RoadBrd_ParseString_666: (+1)
   \   000044AA   0x.... 0x....      BL       RoadBrd_Get_RdSndTickCnt
   \   000044AE   0x.... 0x....      BL       __aeabi_ui2f
   \   000044B2   0x.... 0x....      LDR.W    R1,??DataTable4_33  ;; 0x41200000
   \   000044B6   0x.... 0x....      BL       __aeabi_fdiv
   \   000044BA   0x.... 0x....      BL       __aeabi_f2d
   \   000044BE   0x0002             MOVS     R2,R0
   \   000044C0   0x000B             MOVS     R3,R1
   \   000044C2   0x.... 0x....      LDR.W    R1,??DataTable4_35
   \   000044C6   0xA80A             ADD      R0,SP,#+40
   \   000044C8   0x.... 0x....      BL       sprintf
   4033                                        break;
   \   000044CC   0xE079             B.N      ??RoadBrd_ParseString_667
   \   000044CE   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_557:
   \   000044D0   0x........         DC32     ?_258
   4034          //------------------
   4035                                      case 'S':
   4036                                        //Key Flash Variable Read Sensor Sample Rate Command.
   4037                                        // Is this a BLE Operation?
   4038                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_663: (+1)
   \   000044D4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000044D6   0x2D00             CMP      R5,#+0
   \   000044D8   0xD016             BEQ.N    ??RoadBrd_ParseString_668
   4039                                        {
   4040                                          // Yes...Build and Send BLE Response NOW.
   4041                                          sprintf( (char *)tempBffr2, "<STATUS>ST_TKRS:%3.1f</STATUS>", ((float)RoadBrd_Get_SnsrTickCnt()/10));
   \   000044DA   0x.... 0x....      BL       RoadBrd_Get_SnsrTickCnt
   \   000044DE   0x.... 0x....      BL       __aeabi_ui2f
   \   000044E2   0x.... 0x....      LDR.W    R1,??DataTable4_33  ;; 0x41200000
   \   000044E6   0x.... 0x....      BL       __aeabi_fdiv
   \   000044EA   0x.... 0x....      BL       __aeabi_f2d
   \   000044EE   0x0002             MOVS     R2,R0
   \   000044F0   0x000B             MOVS     R3,R1
   \   000044F2   0x.... 0x....      LDR.W    R1,??DataTable4_36
   \   000044F6   0xA80A             ADD      R0,SP,#+40
   \   000044F8   0x.... 0x....      BL       sprintf
   4042                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000044FC   0xA80A             ADD      R0,SP,#+40
   \   000044FE   0x.... 0x....      BL       strlen
   \   00004502   0xA90A             ADD      R1,SP,#+40
   \   00004504   0x.... 0x....      BL       BGM111_Transmit
   4043                                        }
   4044                                        sprintf( (char *)tempBffr2, "Sensor Sample Rate: %3.1f Seconds.\r\n\r\n> ", ((float)RoadBrd_Get_SnsrTickCnt()/10));
   \                     ??RoadBrd_ParseString_668: (+1)
   \   00004508   0x.... 0x....      BL       RoadBrd_Get_SnsrTickCnt
   \   0000450C   0x.... 0x....      BL       __aeabi_ui2f
   \   00004510   0x.... 0x....      LDR.W    R1,??DataTable4_33  ;; 0x41200000
   \   00004514   0x.... 0x....      BL       __aeabi_fdiv
   \   00004518   0x.... 0x....      BL       __aeabi_f2d
   \   0000451C   0x0002             MOVS     R2,R0
   \   0000451E   0x000B             MOVS     R3,R1
   \   00004520   0x.... 0x....      LDR.W    R1,??DataTable4_37
   \   00004524   0xA80A             ADD      R0,SP,#+40
   \   00004526   0x.... 0x....      BL       sprintf
   4045                                        break;
   \   0000452A   0xE04A             B.N      ??RoadBrd_ParseString_667
   \                     ??RoadBrd_ParseString_559:
   \   0000452C   0x........         DC32     ?_259
   4046          //------------------
   4047                                      case 'T':
   4048                                        //Key Flash Variable Read TACK Limit(Multiple of Road Sound Throttles).
   4049                                        // Is this a BLE Operation?
   4050                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_664: (+1)
   \   00004530   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004532   0x2D00             CMP      R5,#+0
   \   00004534   0xD00D             BEQ.N    ??RoadBrd_ParseString_669
   4051                                        {
   4052                                          // Yes...Build and Send BLE Response NOW.
   4053                                          sprintf( (char *)tempBffr2, "<STATUS>ST_TKRT:%d</STATUS>", RoadBrd_Get_TackLimit());
   \   00004536   0x.... 0x....      BL       RoadBrd_Get_TackLimit
   \   0000453A   0x0002             MOVS     R2,R0
   \   0000453C   0x.... 0x....      LDR.W    R1,??DataTable4_38
   \   00004540   0xA80A             ADD      R0,SP,#+40
   \   00004542   0x.... 0x....      BL       sprintf
   4054                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004546   0xA80A             ADD      R0,SP,#+40
   \   00004548   0x.... 0x....      BL       strlen
   \   0000454C   0xA90A             ADD      R1,SP,#+40
   \   0000454E   0x.... 0x....      BL       BGM111_Transmit
   4055                                        }
   4056                                        sprintf( (char *)tempBffr2, "TACK Limit: %d.\r\n\r\n> ", RoadBrd_Get_TackLimit());
   \                     ??RoadBrd_ParseString_669: (+1)
   \   00004552   0x.... 0x....      BL       RoadBrd_Get_TackLimit
   \   00004556   0x0002             MOVS     R2,R0
   \   00004558   0x.... 0x....      LDR.W    R1,??DataTable4_39
   \   0000455C   0xA80A             ADD      R0,SP,#+40
   \   0000455E   0x.... 0x....      BL       sprintf
   4057                                        break;
   \   00004562   0xE02E             B.N      ??RoadBrd_ParseString_667
   \                     ??RoadBrd_ParseString_560:
   \   00004564   0x........         DC32     ?_260
   4058          //------------------
   4059                                      case 'B':
   4060                                        //Key Flash Variable Read Boot Delay.(Seconds).
   4061                                        // Is this a BLE Operation?
   4062                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_661: (+1)
   \   00004568   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000456A   0x2D00             CMP      R5,#+0
   \   0000456C   0xD00D             BEQ.N    ??RoadBrd_ParseString_670
   4063                                        {
   4064                                          // Yes...Build and Send BLE Response NOW.
   4065                                          sprintf( (char *)tempBffr2, "<STATUS>ST_TKRB:%d</STATUS>", RoadBrd_Get_BootDelay());
   \   0000456E   0x.... 0x....      BL       RoadBrd_Get_BootDelay
   \   00004572   0x0002             MOVS     R2,R0
   \   00004574   0x.... 0x....      LDR.W    R1,??DataTable4_40
   \   00004578   0xA80A             ADD      R0,SP,#+40
   \   0000457A   0x.... 0x....      BL       sprintf
   4066                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000457E   0xA80A             ADD      R0,SP,#+40
   \   00004580   0x.... 0x....      BL       strlen
   \   00004584   0xA90A             ADD      R1,SP,#+40
   \   00004586   0x.... 0x....      BL       BGM111_Transmit
   4067                                        }
   4068                                        sprintf( (char *)tempBffr2, "Boot Delay: %d Seconds.\r\n\r\n> ", RoadBrd_Get_BootDelay());
   \                     ??RoadBrd_ParseString_670: (+1)
   \   0000458A   0x.... 0x....      BL       RoadBrd_Get_BootDelay
   \   0000458E   0x0002             MOVS     R2,R0
   \   00004590   0x.... 0x....      LDR.W    R1,??DataTable4_41
   \   00004594   0xA80A             ADD      R0,SP,#+40
   \   00004596   0x.... 0x....      BL       sprintf
   4069                                        break;
   \   0000459A   0xE012             B.N      ??RoadBrd_ParseString_667
   4070                                      default:
   4071                                        // Is this a BLE Operation?
   4072                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_665: (+1)
   \   0000459C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000459E   0x2D00             CMP      R5,#+0
   \   000045A0   0xD00A             BEQ.N    ??RoadBrd_ParseString_671
   4073                                        {
   4074                                          // Yes...Build and Send BLE Response NOW.
   4075                                          strcpy( (char *)tempBffr2, "<STATUS>CMD_TKR_SYNTAX</STATUS>");
   \   000045A2   0x.... 0x....      LDR.W    R1,??DataTable4_42
   \   000045A6   0xA80A             ADD      R0,SP,#+40
   \   000045A8   0x.... 0x....      BL       strcpy
   4076                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000045AC   0xA80A             ADD      R0,SP,#+40
   \   000045AE   0x.... 0x....      BL       strlen
   \   000045B2   0xA90A             ADD      R1,SP,#+40
   \   000045B4   0x.... 0x....      BL       BGM111_Transmit
   4077                                        }
   4078                                        strcpy( (char *)tempBffr2, "TKR ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_671: (+1)
   \   000045B8   0x.... 0x....      LDR.W    R1,??DataTable4_43
   \   000045BC   0xA80A             ADD      R0,SP,#+40
   \   000045BE   0x.... 0x....      BL       strcpy
   4079                                        break;
   4080                                    } // EndSwitch ( tempBffr[3] )
   4081                                    break;
   \                     ??RoadBrd_ParseString_667: (+1)
   \   000045C2   0xE016             B.N      ??RoadBrd_ParseString_599
   \                     ??RoadBrd_ParseString_562:
   \   000045C4   0x........         DC32     ?_261
   \   000045C8   0x........         DC32     ?_262
   4082                                    // Is this a BLE Operation?
   4083                                  default:
   4084                                    if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_601: (+1)
   \   000045CC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000045CE   0x2D00             CMP      R5,#+0
   \   000045D0   0xD00A             BEQ.N    ??RoadBrd_ParseString_672
   4085                                    {
   4086                                      // Yes...Build and Send BLE Response NOW.
   4087                                      strcpy( (char *)tempBffr2, "<STATUS>CMD_TK_SYNTAX</STATUS>");
   \   000045D2   0x.... 0x....      LDR.W    R1,??DataTable4_9
   \   000045D6   0xA80A             ADD      R0,SP,#+40
   \   000045D8   0x.... 0x....      BL       strcpy
   4088                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000045DC   0xA80A             ADD      R0,SP,#+40
   \   000045DE   0x.... 0x....      BL       strlen
   \   000045E2   0xA90A             ADD      R1,SP,#+40
   \   000045E4   0x.... 0x....      BL       BGM111_Transmit
   4089                                    }
   4090                                    strcpy( (char *)tempBffr2, "ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_672: (+1)
   \   000045E8   0x.... 0x....      LDR.W    R1,??DataTable4_44
   \   000045EC   0xA80A             ADD      R0,SP,#+40
   \   000045EE   0x.... 0x....      BL       strcpy
   4091                                    break;
   4092                                } //EndSwitch ( tempBffr[2] )
   4093                              } //EndElse (Size < 3)
   4094                              break;
   \                     ??RoadBrd_ParseString_599: (+1)
   \   000045F2   0xE118             B.N      ??RoadBrd_ParseString_290
   4095          //++++++++++++++++++++++++++++++++++++++++++  Units Enable/Disable Commands.
   4096                            case 'U':
   4097                              // Key Flash Variable Commands.
   4098                              // Test Size to make sure we have enough Characters for this operation
   4099                              Status = HAL_OK;
   \                     ??RoadBrd_ParseString_300: (+1)
   \   000045F4   0x2000             MOVS     R0,#+0
   \   000045F6   0x0006             MOVS     R6,R0
   4100                              if (Size < 3)
   \   000045F8   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000045FC   0xF1B8 0x0F03      CMP      R8,#+3
   \   00004600   0xDA13             BGE.N    ??RoadBrd_ParseString_673
   4101                              {
   4102                                // Is this a BLE Operation?
   4103                                if ( BLE_Flag )
   \   00004602   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004604   0x2D00             CMP      R5,#+0
   \   00004606   0xD00A             BEQ.N    ??RoadBrd_ParseString_674
   4104                                {
   4105                                  // Yes...Build and Send BLE Response NOW.
   4106                                  strcpy( (char *)tempBffr2, "<STATUS>CMD_TU_SYNTAX</STATUS>");
   \   00004608   0x.... 0x....      LDR.W    R1,??DataTable4_45
   \   0000460C   0xA80A             ADD      R0,SP,#+40
   \   0000460E   0x.... 0x....      BL       strcpy
   4107                                  BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004612   0xA80A             ADD      R0,SP,#+40
   \   00004614   0x.... 0x....      BL       strlen
   \   00004618   0xA90A             ADD      R1,SP,#+40
   \   0000461A   0x.... 0x....      BL       BGM111_Transmit
   4108                                }
   4109                                strcpy( (char *)tempBffr2, "TU SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_674: (+1)
   \   0000461E   0x.... 0x....      LDR.W    R1,??DataTable4_46
   \   00004622   0xA80A             ADD      R0,SP,#+40
   \   00004624   0x.... 0x....      BL       strcpy
   \   00004628   0xE04B             B.N      ??RoadBrd_ParseString_675
   4110                              }
   4111                              else
   4112                              {
   4113                                switch( tempBffr[2] )
   \                     ??RoadBrd_ParseString_673: (+1)
   \   0000462A   0x78A0             LDRB     R0,[R4, #+2]
   \   0000462C   0x2844             CMP      R0,#+68
   \   0000462E   0xD01B             BEQ.N    ??RoadBrd_ParseString_676
   \   00004630   0x2845             CMP      R0,#+69
   \   00004632   0xD133             BNE.N    ??RoadBrd_ParseString_677
   4114                                {
   4115          //------------------
   4116                                  case 'E':
   4117                                    //Units Enable Command.
   4118                                    // Is this a BLE Operation?
   4119                                    if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_678: (+1)
   \   00004634   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004636   0x2D00             CMP      R5,#+0
   \   00004638   0xD00A             BEQ.N    ??RoadBrd_ParseString_679
   4120                                    {
   4121                                      // Yes...Build and Send BLE Response NOW.
   4122                                      strcpy( (char *)tempBffr2, "<STATUS>ST_TUE_ACK</STATUS>");
   \   0000463A   0x.... 0x....      LDR.W    R1,??DataTable4_47
   \   0000463E   0xA80A             ADD      R0,SP,#+40
   \   00004640   0x.... 0x....      BL       strcpy
   4123                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004644   0xA80A             ADD      R0,SP,#+40
   \   00004646   0x.... 0x....      BL       strlen
   \   0000464A   0xA90A             ADD      R1,SP,#+40
   \   0000464C   0x.... 0x....      BL       BGM111_Transmit
   4124                                    }
   4125                                    sprintf( (char *)tempBffr2, "Units XML State CHANGED: ENABLED\r\n\r\n> ");
   \                     ??RoadBrd_ParseString_679: (+1)
   \   00004650   0x.... 0x....      LDR.W    R1,??DataTable4_48
   \   00004654   0xA80A             ADD      R0,SP,#+40
   \   00004656   0x.... 0x....      BL       sprintf
   4126                                    Status = RoadBrd_Set_UnitsFlag( true );
   \   0000465A   0x2001             MOVS     R0,#+1
   \   0000465C   0x.... 0x....      BL       RoadBrd_Set_UnitsFlag
   \   00004660   0x0006             MOVS     R6,R0
   4127                                    break;
   \   00004662   0xE02E             B.N      ??RoadBrd_ParseString_675
   \                     ??RoadBrd_ParseString_564:
   \   00004664   0x........         DC32     ?_263
   4128          //------------------
   4129                                  case 'D':
   4130                                    //Units Disable Command
   4131                                    // Is this a BLE Operation?
   4132                                    if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_676: (+1)
   \   00004668   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000466A   0x2D00             CMP      R5,#+0
   \   0000466C   0xD00A             BEQ.N    ??RoadBrd_ParseString_680
   4133                                    {
   4134                                      // Yes...Build and Send BLE Response NOW.
   4135                                      strcpy( (char *)tempBffr2, "<STATUS>ST_TUD_ACK</STATUS>");
   \   0000466E   0x.... 0x....      LDR.W    R1,??DataTable4_49
   \   00004672   0xA80A             ADD      R0,SP,#+40
   \   00004674   0x.... 0x....      BL       strcpy
   4136                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004678   0xA80A             ADD      R0,SP,#+40
   \   0000467A   0x.... 0x....      BL       strlen
   \   0000467E   0xA90A             ADD      R1,SP,#+40
   \   00004680   0x.... 0x....      BL       BGM111_Transmit
   4137                                    }
   4138                                    sprintf( (char *)tempBffr2, "Units XML State CHANGED: DISABLED\r\n\r\n> ");
   \                     ??RoadBrd_ParseString_680: (+1)
   \   00004684   0x.... 0x....      LDR.W    R1,??DataTable4_50
   \   00004688   0xA80A             ADD      R0,SP,#+40
   \   0000468A   0x.... 0x....      BL       sprintf
   4139                                    Status = RoadBrd_Set_UnitsFlag( false );
   \   0000468E   0x2000             MOVS     R0,#+0
   \   00004690   0x.... 0x....      BL       RoadBrd_Set_UnitsFlag
   \   00004694   0x0006             MOVS     R6,R0
   4140                                    break;
   \   00004696   0xE014             B.N      ??RoadBrd_ParseString_675
   \                     ??RoadBrd_ParseString_565:
   \   00004698   0x........         DC32     ?_264
   4141                                  default:
   4142                                    // Is this a BLE Operation?
   4143                                    if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_677: (+1)
   \   0000469C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000469E   0x2D00             CMP      R5,#+0
   \   000046A0   0xD00A             BEQ.N    ??RoadBrd_ParseString_681
   4144                                    {
   4145                                      // Yes...Build and Send BLE Response NOW.
   4146                                      strcpy( (char *)tempBffr2, "<STATUS>CMD_TU_SYNTAX</STATUS>");
   \   000046A2   0x.... 0x....      LDR.W    R1,??DataTable4_45
   \   000046A6   0xA80A             ADD      R0,SP,#+40
   \   000046A8   0x.... 0x....      BL       strcpy
   4147                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000046AC   0xA80A             ADD      R0,SP,#+40
   \   000046AE   0x.... 0x....      BL       strlen
   \   000046B2   0xA90A             ADD      R1,SP,#+40
   \   000046B4   0x.... 0x....      BL       BGM111_Transmit
   4148                                    }
   4149                                    strcpy( (char *)tempBffr2, "TU SYNTAX ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_681: (+1)
   \   000046B8   0x.... 0x....      LDR.W    R1,??DataTable4_51
   \   000046BC   0xA80A             ADD      R0,SP,#+40
   \   000046BE   0x.... 0x....      BL       strcpy
   4150                                    break;
   4151                                } //EndSwitch ( tempBffr[2] )
   4152                              } //EndElse (Size < 3)
   4153                              break;
   \                     ??RoadBrd_ParseString_675: (+1)
   \   000046C2   0xE0B0             B.N      ??RoadBrd_ParseString_290
   4154          //++++++++++++++++++++++++++++++++++++++++++  Special Monitor Mode to intercept traffic from UART and pass to BGM111
   4155                            case 'M':
   4156                              // Is this a BLE Operation?
   4157                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_297: (+1)
   \   000046C4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000046C6   0x2D00             CMP      R5,#+0
   \   000046C8   0xD00A             BEQ.N    ??RoadBrd_ParseString_682
   4158                              {
   4159                                // Yes...Build and Send BLE Response NOW.
   4160                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000046CA   0x.... 0x....      LDR.W    R1,??DataTable4_52
   \   000046CE   0xA80A             ADD      R0,SP,#+40
   \   000046D0   0x.... 0x....      BL       strcpy
   4161                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000046D4   0xA80A             ADD      R0,SP,#+40
   \   000046D6   0x.... 0x....      BL       strlen
   \   000046DA   0xA90A             ADD      R1,SP,#+40
   \   000046DC   0x.... 0x....      BL       BGM111_Transmit
   4162                              }
   4163                              
   4164                              strcpy( (char *)tempBffr2, "BGM111 MONITOR MODE.\r\n\r\n");
   \                     ??RoadBrd_ParseString_682: (+1)
   \   000046E0   0x.... 0x....      LDR.W    R1,??DataTable4_53
   \   000046E4   0xA80A             ADD      R0,SP,#+40
   \   000046E6   0x.... 0x....      BL       strcpy
   4165          #ifdef NUCLEO
   4166                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   4167          #else
   4168                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000046EA   0xA90A             ADD      R1,SP,#+40
   \   000046EC   0x2000             MOVS     R0,#+0
   \   000046EE   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000046F2   0x0006             MOVS     R6,R0
   4169          #endif
   4170                              if (Status != HAL_OK)
   \   000046F4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000046F6   0x2E00             CMP      R6,#+0
   \   000046F8   0xD004             BEQ.N    ??RoadBrd_ParseString_683
   4171                                return Status;
   \   000046FA   0x0030             MOVS     R0,R6
   \   000046FC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000046FE   0xE11E             B.N      ??RoadBrd_ParseString_4
   \                     ??RoadBrd_ParseString_567:
   \   00004700   0x........         DC32     ?_265
   4172                              strcpy( (char *)tempBffr2, "Use <ESC> to exit mode.\r\n\r\n");
   \                     ??RoadBrd_ParseString_683: (+1)
   \   00004704   0x.... 0x....      LDR.W    R1,??DataTable4_54
   \   00004708   0xA80A             ADD      R0,SP,#+40
   \   0000470A   0x.... 0x....      BL       strcpy
   4173                              // Set Bypass Flag
   4174                              Bypass = true;
   \   0000470E   0x2001             MOVS     R0,#+1
   \   00004710   0x.... 0x....      LDR.W    R1,??DataTable4_55
   \   00004714   0x7008             STRB     R0,[R1, #+0]
   4175                              break;
   \   00004716   0xE086             B.N      ??RoadBrd_ParseString_290
   4176          //++++++++++++++++++++++++++++++++++++++++++  Reset Flash Frame Variables(Factory).
   4177                            case 'F':
   4178                              // Reset Flash Frame Variables.
   4179                              RoadBrd_WWDG_InitializeFrmFlash();
   \                     ??RoadBrd_ParseString_293: (+1)
   \   00004718   0x.... 0x....      BL       RoadBrd_WWDG_InitializeFrmFlash
   4180                              // Is this a BLE Operation?
   4181                              if ( BLE_Flag )
   \   0000471C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000471E   0x2D00             CMP      R5,#+0
   \   00004720   0xD00A             BEQ.N    ??RoadBrd_ParseString_684
   4182                              {
   4183                                // Yes...Build and Send BLE Response NOW.
   4184                                sprintf( (char *)tempBffr2, "<STATUS>TF_ACK</STATUS>" );
   \   00004722   0x.... 0x....      LDR.W    R1,??DataTable4_56
   \   00004726   0xA80A             ADD      R0,SP,#+40
   \   00004728   0x.... 0x....      BL       sprintf
   4185                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000472C   0xA80A             ADD      R0,SP,#+40
   \   0000472E   0x.... 0x....      BL       strlen
   \   00004732   0xA90A             ADD      R1,SP,#+40
   \   00004734   0x.... 0x....      BL       BGM111_Transmit
   4186                              }
   4187                              
   4188                              sprintf( (char *)tempBffr2, "Flash Frame Variables Reset to Factory Values.\r\n" );
   \                     ??RoadBrd_ParseString_684: (+1)
   \   00004738   0x.... 0x....      LDR.W    R1,??DataTable4_57
   \   0000473C   0xA80A             ADD      R0,SP,#+40
   \   0000473E   0x.... 0x....      BL       sprintf
   4189                              break;
   \   00004742   0xE070             B.N      ??RoadBrd_ParseString_290
   \                     ??RoadBrd_ParseString_568:
   \   00004744   0x........         DC32     ?_266
   4190          //++++++++++++++++++++++++++++++++++++++++++  Lock Code to allow stable Program of BLE Module.
   4191                            case 'L':
   4192                              // Is this a BLE Operation?
   4193                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_296: (+1)
   \   00004748   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000474A   0x2D00             CMP      R5,#+0
   \   0000474C   0xD00B             BEQ.N    ??RoadBrd_ParseString_685
   4194                              {
   4195                                // Yes...Build and Send BLE Response NOW.
   4196                                sprintf( (char *)tempBffr2, "<STATUS>TL_ERROR</STATUS>" );
   \   0000474E   0x.... 0x....      LDR.W    R1,??DataTable4_58
   \   00004752   0xA80A             ADD      R0,SP,#+40
   \   00004754   0x.... 0x....      BL       sprintf
   4197                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004758   0xA80A             ADD      R0,SP,#+40
   \   0000475A   0x.... 0x....      BL       strlen
   \   0000475E   0xA90A             ADD      R1,SP,#+40
   \   00004760   0x.... 0x....      BL       BGM111_Transmit
   4198                              }
   4199                              else
   4200                              {
   4201                                sprintf( (char *)tempBffr2, "Code Locked for Programming!\r\n\r\n" );
   4202          #ifdef NUCLEO
   4203                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   4204          #else
   4205                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   4206          #endif
   4207                                if (Status != HAL_OK)
   4208                                  return Status;
   4209                                sprintf( (char *)tempBffr2, "   HARD RESET NEEDED TO EXIT MODE\r\n" );
   4210          #ifdef NUCLEO
   4211                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   4212          #else
   4213                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   4214          #endif
   4215                                if (Status != HAL_OK)
   4216                                  return Status;
   4217                                // Start Hard Loop
   4218                                for (;;)
   4219                                {
   4220                                }
   4221                              }
   4222                              break;
   \   00004764   0xE05F             B.N      ??RoadBrd_ParseString_290
   \                     ??RoadBrd_ParseString_685: (+1)
   \   00004766   0x.... 0x....      LDR.W    R1,??DataTable4_59
   \   0000476A   0xA80A             ADD      R0,SP,#+40
   \   0000476C   0x.... 0x....      BL       sprintf
   \   00004770   0xA90A             ADD      R1,SP,#+40
   \   00004772   0x2000             MOVS     R0,#+0
   \   00004774   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00004778   0x0006             MOVS     R6,R0
   \   0000477A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000477C   0x2E00             CMP      R6,#+0
   \   0000477E   0xD002             BEQ.N    ??RoadBrd_ParseString_686
   \   00004780   0x0030             MOVS     R0,R6
   \   00004782   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00004784   0xE0DB             B.N      ??RoadBrd_ParseString_4
   \                     ??RoadBrd_ParseString_686: (+1)
   \   00004786   0x.... 0x....      LDR.W    R1,??DataTable4_60
   \   0000478A   0xA80A             ADD      R0,SP,#+40
   \   0000478C   0x.... 0x....      BL       sprintf
   \   00004790   0xA90A             ADD      R1,SP,#+40
   \   00004792   0x2000             MOVS     R0,#+0
   \   00004794   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00004798   0x0006             MOVS     R6,R0
   \   0000479A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000479C   0x2E00             CMP      R6,#+0
   \   0000479E   0xD007             BEQ.N    ??RoadBrd_ParseString_687
   \   000047A0   0x0030             MOVS     R0,R6
   \   000047A2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000047A4   0xE0CB             B.N      ??RoadBrd_ParseString_4
   \   000047A6   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_570:
   \   000047A8   0x........         DC32     ?_267
   \   000047AC   0x........         DC32     ?_268
   \                     ??RoadBrd_ParseString_687: (+1)
   \   000047B0   0xE7FE             B.N      ??RoadBrd_ParseString_687
   4223          
   4224          //++++++++++++++++++++++++++++++++++++++++++  S-Record Test Monitor.
   4225                            case 'S':
   4226                              // S-Record Test Monitor.
   4227                              // Is this a BLE Operation?
   4228                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_299: (+1)
   \   000047B2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000047B4   0x2D00             CMP      R5,#+0
   \   000047B6   0xD00C             BEQ.N    ??RoadBrd_ParseString_688
   4229                              {
   4230                                // Yes...Build and Send BLE Response NOW.
   4231                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000047B8   0x....             LDR.N    R1,??DataTable4_52
   \   000047BA   0xA80A             ADD      R0,SP,#+40
   \   000047BC   0x.... 0x....      BL       strcpy
   4232                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000047C0   0xA80A             ADD      R0,SP,#+40
   \   000047C2   0x.... 0x....      BL       strlen
   \   000047C6   0xA90A             ADD      R1,SP,#+40
   \   000047C8   0x.... 0x....      BL       BGM111_Transmit
   4233                                HAL_Delay(100);           // Wait 100ms
   \   000047CC   0x2064             MOVS     R0,#+100
   \   000047CE   0x.... 0x....      BL       HAL_Delay
   4234                              }
   4235                              // Parse Data and extract S-Record.
   4236                              Numbr_Rcrds = sscanf (tempBffr, "%s %s", s_cmd, s_recrd);
   \                     ??RoadBrd_ParseString_688: (+1)
   \   000047D2   0xABFF             ADD      R3,SP,#+1020
   \   000047D4   0x3368             ADDS     R3,R3,#+104
   \   000047D6   0xAAD5             ADD      R2,SP,#+852
   \   000047D8   0x....             LDR.N    R1,??DataTable4_61
   \   000047DA   0x0020             MOVS     R0,R4
   \   000047DC   0x.... 0x....      BL       sscanf
   \   000047E0   0x9047             STR      R0,[SP, #+284]
   4237          //                    if (sscanf (tempBffr, "%s %s", s_cmd, s_recrd) == 2)
   4238                              if (Numbr_Rcrds == 2)
   \   000047E2   0x9847             LDR      R0,[SP, #+284]
   \   000047E4   0x2802             CMP      R0,#+2
   \   000047E6   0xD106             BNE.N    ??RoadBrd_ParseString_689
   4239                              {
   4240                                sprintf( (char *)tempBffr2, "TS: %s\r\n", s_recrd );
   \   000047E8   0xAAFF             ADD      R2,SP,#+1020
   \   000047EA   0x3268             ADDS     R2,R2,#+104
   \   000047EC   0x....             LDR.N    R1,??DataTable4_62
   \   000047EE   0xA80A             ADD      R0,SP,#+40
   \   000047F0   0x.... 0x....      BL       sprintf
   \   000047F4   0xE003             B.N      ??RoadBrd_ParseString_690
   4241                              }
   4242                              else
   4243                              {
   4244                                strcpy( (char *)tempBffr2, "TS SYNTAX ERROR: Too many parameters.\r\n");
   \                     ??RoadBrd_ParseString_689: (+1)
   \   000047F6   0x....             LDR.N    R1,??DataTable4_63
   \   000047F8   0xA80A             ADD      R0,SP,#+40
   \   000047FA   0x.... 0x....      BL       strcpy
   4245                              }
   4246                              break;
   \                     ??RoadBrd_ParseString_690: (+1)
   \   000047FE   0xE012             B.N      ??RoadBrd_ParseString_290
   \                     ??RoadBrd_ParseString_572:
   \   00004800   0x........         DC32     ?_269
   4247          //**************************************************************************************************
   4248                            default:
   4249                              // Is this a BLE Operation?
   4250                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_301: (+1)
   \   00004804   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004806   0x2D00             CMP      R5,#+0
   \   00004808   0xD009             BEQ.N    ??RoadBrd_ParseString_691
   4251                              {
   4252                                // Yes...Build and Send BLE Response NOW.
   4253                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   0000480A   0x....             LDR.N    R1,??DataTable4_52
   \   0000480C   0xA80A             ADD      R0,SP,#+40
   \   0000480E   0x.... 0x....      BL       strcpy
   4254                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004812   0xA80A             ADD      R0,SP,#+40
   \   00004814   0x.... 0x....      BL       strlen
   \   00004818   0xA90A             ADD      R1,SP,#+40
   \   0000481A   0x.... 0x....      BL       BGM111_Transmit
   4255                              }
   4256                              
   4257                              // ERROR if we get here.. 
   4258                              strcpy( (char *)tempBffr2, "ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_691: (+1)
   \   0000481E   0x....             LDR.N    R1,??DataTable4_44
   \   00004820   0xA80A             ADD      R0,SP,#+40
   \   00004822   0x.... 0x....      BL       strcpy
   4259                              break;
   4260                           
   4261                          } //EndSwitch ( tempBffr[1] )
   4262                        } //EndElse (Size <= 1)
   4263                        break;
   \                     ??RoadBrd_ParseString_290: (+1)
   \   00004826   0xE010             B.N      ??RoadBrd_ParseString_27
   4264          #if 0
   4265          //**************************************************************************************************
   4266                      case 'S':
   4267                        // Sleep Mode. 
   4268                        switch( tempBffr[1] )
   4269                        {
   4270          //++++++++++++++++++++++++++++++++++++++++++  5V Power Supply Commands.
   4271                          case 'S':
   4272                            // Is this a BLE Operation?
   4273                            if ( BLE_Flag )
   4274                            {
   4275                              // Yes...Build and Send BLE Response NOW.
   4276                              strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   4277                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   4278                            }
   4279                            
   4280                            strcpy( (char *)tempBffr2, "Micro in Sleep Mode NOW.\r\n");
   4281          #ifdef NUCLEO
   4282                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   4283          #else
   4284                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   4285          #endif
   4286                            if (Status != HAL_OK)
   4287                              return Status;
   4288                            // Sleep Micro NOW!
   4289                            //sleep();
   4290                            break;
   4291                          case 'D':
   4292                            // Is this a BLE Operation?
   4293                            if ( BLE_Flag )
   4294                            {
   4295                              // Yes...Build and Send BLE Response NOW.
   4296                              strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   4297                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   4298                            }
   4299                            
   4300                            // Turn off 5V Power Supply.
   4301                            strcpy( (char *)tempBffr2, "Micro in Deep Sleep Mode NOW.\r\n");
   4302          #ifdef NUCLEO
   4303                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   4304          #else
   4305                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   4306          #endif
   4307                            if (Status != HAL_OK)
   4308                              return Status;
   4309                            // Sleep Micro NOW!
   4310                            //deepsleep();
   4311                            break;
   4312                        }
   4313                        break;
   4314          #endif
   4315          //++++++++++++++++++++++++++++++++++++++++++  Unknown Command.
   4316                      default:
   4317                        // Is this a BLE Operation?
   4318                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_22: (+1)
   \   00004828   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000482A   0x2D00             CMP      R5,#+0
   \   0000482C   0xD009             BEQ.N    ??RoadBrd_ParseString_692
   4319                        {
   4320                          // Yes...Build and Send BLE Response NOW.
   4321                          strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   0000482E   0x....             LDR.N    R1,??DataTable4_52
   \   00004830   0xA80A             ADD      R0,SP,#+40
   \   00004832   0x.... 0x....      BL       strcpy
   4322                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004836   0xA80A             ADD      R0,SP,#+40
   \   00004838   0x.... 0x....      BL       strlen
   \   0000483C   0xA90A             ADD      R1,SP,#+40
   \   0000483E   0x.... 0x....      BL       BGM111_Transmit
   4323                        }
   4324                        
   4325                        // ERROR if we get here.. 
   4326                        strcpy( (char *)tempBffr2, "ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_692: (+1)
   \   00004842   0x....             LDR.N    R1,??DataTable4_44
   \   00004844   0xA80A             ADD      R0,SP,#+40
   \   00004846   0x.... 0x....      BL       strcpy
   4327                        break;
   4328                      } // EndSwitch
   4329                      
   4330          
   4331                      // Test last I2C Status to determine next msg.
   4332                      switch( Status )
   \                     ??RoadBrd_ParseString_27: (+1)
   \   0000484A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000484C   0x2E00             CMP      R6,#+0
   \   0000484E   0xD007             BEQ.N    ??RoadBrd_ParseString_693
   \   00004850   0x2E02             CMP      R6,#+2
   \   00004852   0xD041             BEQ.N    ??RoadBrd_ParseString_694
   \   00004854   0xD305             BCC.N    ??RoadBrd_ParseString_695
   \   00004856   0x2E03             CMP      R6,#+3
   \   00004858   0xD045             BEQ.N    ??RoadBrd_ParseString_696
   \   0000485A   0xE04B             B.N      ??RoadBrd_ParseString_697
   \                     ??RoadBrd_ParseString_573:
   \   0000485C   0x........         DC32     ?_270
   4333                      {
   4334                        case HAL_OK:
   4335                          break;
   \                     ??RoadBrd_ParseString_693: (+1)
   \   00004860   0xE04E             B.N      ??RoadBrd_ParseString_698
   4336                        case HAL_ERROR:
   4337                          // Determine what kind of error.
   4338                          Err_code = RoadBrd_I2C_GetError();
   \                     ??RoadBrd_ParseString_695: (+1)
   \   00004862   0x.... 0x....      BL       RoadBrd_I2C_GetError
   \   00004866   0x9046             STR      R0,[SP, #+280]
   4339                          switch( Err_code )
   \   00004868   0x9846             LDR      R0,[SP, #+280]
   \   0000486A   0x2801             CMP      R0,#+1
   \   0000486C   0xD00A             BEQ.N    ??RoadBrd_ParseString_699
   \   0000486E   0x2802             CMP      R0,#+2
   \   00004870   0xD00D             BEQ.N    ??RoadBrd_ParseString_700
   \   00004872   0x2804             CMP      R0,#+4
   \   00004874   0xD010             BEQ.N    ??RoadBrd_ParseString_701
   \   00004876   0x2808             CMP      R0,#+8
   \   00004878   0xD016             BEQ.N    ??RoadBrd_ParseString_702
   \   0000487A   0x2810             CMP      R0,#+16
   \   0000487C   0xD019             BEQ.N    ??RoadBrd_ParseString_703
   \   0000487E   0x2820             CMP      R0,#+32
   \   00004880   0xD01C             BEQ.N    ??RoadBrd_ParseString_704
   \   00004882   0xE020             B.N      ??RoadBrd_ParseString_705
   4340                          {
   4341                            case HAL_I2C_ERROR_BERR:
   4342                              strcpy( (char *)tempBffr2, "I2C ERROR: BERR: Bus Error reported.\r\n");
   \                     ??RoadBrd_ParseString_699: (+1)
   \   00004884   0x....             LDR.N    R1,??DataTable4_64
   \   00004886   0xA80A             ADD      R0,SP,#+40
   \   00004888   0x.... 0x....      BL       strcpy
   4343                              break;
   \   0000488C   0xE01F             B.N      ??RoadBrd_ParseString_706
   4344                            case HAL_I2C_ERROR_ARLO:
   4345                              strcpy( (char *)tempBffr2, "I2C ERROR: ARLO: Arbitration lost reported.\r\n");
   \                     ??RoadBrd_ParseString_700: (+1)
   \   0000488E   0x....             LDR.N    R1,??DataTable4_65
   \   00004890   0xA80A             ADD      R0,SP,#+40
   \   00004892   0x.... 0x....      BL       strcpy
   4346                              break;
   \   00004896   0xE01A             B.N      ??RoadBrd_ParseString_706
   4347                            case HAL_I2C_ERROR_AF:
   4348                              strcpy( (char *)tempBffr2, "I2C ERROR: AF: Acknowledge failure reported.\r\n");
   \                     ??RoadBrd_ParseString_701: (+1)
   \   00004898   0x....             LDR.N    R1,??DataTable4_66
   \   0000489A   0xA80A             ADD      R0,SP,#+40
   \   0000489C   0x.... 0x....      BL       strcpy
   4349                              break;
   \   000048A0   0xE015             B.N      ??RoadBrd_ParseString_706
   \   000048A2   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_575:
   \   000048A4   0x........         DC32     ?_271
   4350                            case HAL_I2C_ERROR_OVR:
   4351                              strcpy( (char *)tempBffr2, "I2C ERROR: OVR: Overrun/Underrun reported.\r\n");
   \                     ??RoadBrd_ParseString_702: (+1)
   \   000048A8   0x....             LDR.N    R1,??DataTable4_67
   \   000048AA   0xA80A             ADD      R0,SP,#+40
   \   000048AC   0x.... 0x....      BL       strcpy
   4352                              break;
   \   000048B0   0xE00D             B.N      ??RoadBrd_ParseString_706
   4353                            case HAL_I2C_ERROR_DMA:
   4354                              strcpy( (char *)tempBffr2, "I2C ERROR: DMA: DMA Error reported.\r\n");
   \                     ??RoadBrd_ParseString_703: (+1)
   \   000048B2   0x....             LDR.N    R1,??DataTable4_68
   \   000048B4   0xA80A             ADD      R0,SP,#+40
   \   000048B6   0x.... 0x....      BL       strcpy
   4355                              break;
   \   000048BA   0xE008             B.N      ??RoadBrd_ParseString_706
   4356                            case HAL_I2C_ERROR_TIMEOUT:
   4357                              strcpy( (char *)tempBffr2, "I2C ERROR: TIMEOUT: Timeout Error reported.\r\n");
   \                     ??RoadBrd_ParseString_704: (+1)
   \   000048BC   0x....             LDR.N    R1,??DataTable4_69
   \   000048BE   0xA80A             ADD      R0,SP,#+40
   \   000048C0   0x.... 0x....      BL       strcpy
   4358                              break;
   \   000048C4   0xE003             B.N      ??RoadBrd_ParseString_706
   4359                            default:
   4360                              strcpy( (char *)tempBffr2, "I2C ERROR: Unknown Error reported.\r\n");
   \                     ??RoadBrd_ParseString_705: (+1)
   \   000048C6   0x....             LDR.N    R1,??DataTable4_70
   \   000048C8   0xA80A             ADD      R0,SP,#+40
   \   000048CA   0x.... 0x....      BL       strcpy
   4361                              break;
   4362                           
   4363                          }
   4364                          // Re-Initialize I2C....It has been corrupted.
   4365                          MX_I2C1_Reset();
   \                     ??RoadBrd_ParseString_706: (+1)
   \   000048CE   0x.... 0x....      BL       MX_I2C1_Reset
   4366                          break;
   \   000048D2   0xE015             B.N      ??RoadBrd_ParseString_698
   \                     ??RoadBrd_ParseString_576:
   \   000048D4   0x........         DC32     ?_272
   4367                        case HAL_BUSY:
   4368                          strcpy( (char *)tempBffr2, "I2C BUSY: I2C reported BUSY error.\r\n");
   \                     ??RoadBrd_ParseString_694: (+1)
   \   000048D8   0x....             LDR.N    R1,??DataTable4_71
   \   000048DA   0xA80A             ADD      R0,SP,#+40
   \   000048DC   0x.... 0x....      BL       strcpy
   4369                          // Re-Initialize I2C....It has been corrupted.
   4370                          MX_I2C1_Reset();
   \   000048E0   0x.... 0x....      BL       MX_I2C1_Reset
   4371                          break;
   \   000048E4   0xE00C             B.N      ??RoadBrd_ParseString_698
   4372                        case HAL_TIMEOUT:
   4373                          strcpy( (char *)tempBffr2, "I2C TIMEOUT: I2C reported TIMEOUT.\r\n");
   \                     ??RoadBrd_ParseString_696: (+1)
   \   000048E6   0x....             LDR.N    R1,??DataTable4_72
   \   000048E8   0xA80A             ADD      R0,SP,#+40
   \   000048EA   0x.... 0x....      BL       strcpy
   4374                          // Re-Initialize I2C....It has been corrupted.
   4375                          MX_I2C1_Reset();
   \   000048EE   0x.... 0x....      BL       MX_I2C1_Reset
   4376                          break;
   \   000048F2   0xE005             B.N      ??RoadBrd_ParseString_698
   4377                        default:  
   4378                          strcpy( (char *)tempBffr2, "I2C ERROR: I2C reported unnown error.\r\n");
   \                     ??RoadBrd_ParseString_697: (+1)
   \   000048F4   0x....             LDR.N    R1,??DataTable4_73
   \   000048F6   0xA80A             ADD      R0,SP,#+40
   \   000048F8   0x.... 0x....      BL       strcpy
   4379                          // Re-Initialize I2C....It has been corrupted.
   4380                          MX_I2C1_Reset();
   \   000048FC   0x.... 0x....      BL       MX_I2C1_Reset
   4381                          break;
   4382                      }
   4383                      // Send string to UART..
   4384          #ifdef NUCLEO
   4385                      Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);
   4386          #else
   4387                      Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \                     ??RoadBrd_ParseString_698: (+1)
   \   00004900   0xA90A             ADD      R1,SP,#+40
   \   00004902   0x2000             MOVS     R0,#+0
   \   00004904   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00004908   0x0006             MOVS     R6,R0
   4388          #endif
   4389                     if (Status != HAL_OK)
   \   0000490A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000490C   0x2E00             CMP      R6,#+0
   \   0000490E   0xD005             BEQ.N    ??RoadBrd_ParseString_707
   4390                        return Status;
   \   00004910   0x0030             MOVS     R0,R6
   \   00004912   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00004914   0xE013             B.N      ??RoadBrd_ParseString_4
   \   00004916   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_578:
   \   00004918   0x........         DC32     ?_273
   4391                      // Send Prompt to UART..
   4392                      strcpy( (char *)tempBffr2, "\r\n\r\n> ");
   \                     ??RoadBrd_ParseString_707: (+1)
   \   0000491C   0x....             LDR.N    R1,??DataTable4_74
   \   0000491E   0xA80A             ADD      R0,SP,#+40
   \   00004920   0x.... 0x....      BL       strcpy
   4393          #ifdef NUCLEO
   4394                      Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);
   4395          #else
   4396                      Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00004924   0xA90A             ADD      R1,SP,#+40
   \   00004926   0x2000             MOVS     R0,#+0
   \   00004928   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000492C   0x0006             MOVS     R6,R0
   4397          #endif
   4398                      if (Status != HAL_OK)
   \   0000492E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00004930   0x2E00             CMP      R6,#+0
   \   00004932   0xD002             BEQ.N    ??RoadBrd_ParseString_3
   4399                        return Status;
   \   00004934   0x0030             MOVS     R0,R6
   \   00004936   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00004938   0xE001             B.N      ??RoadBrd_ParseString_4
   4400              } // EndElse ( Bypass )
   4401            return Status;
   \                     ??RoadBrd_ParseString_3: (+1)
   \   0000493A   0x0030             MOVS     R0,R6
   \   0000493C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??RoadBrd_ParseString_4: (+1)
   \   0000493E   0xF50D 0x6D80      ADD      SP,SP,#+1024
   \   00004942   0xB02D             ADD      SP,SP,#+180
   \   00004944   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   4402          }
   4403          
   4404          /**
   4405            * @brief  This function tests the passed string to make sure it is Hex format.
   4406            * @param  char *ptr: Ptr to string to be tested. NULL terminated
   4407            * @retval int: 1: String is HEX.
   4408            *              0:   String is not HEX.
   4409            */

   \                                 In section .text, align 2, keep-with-next
   4410          int isHexNum(char *ptr)
   4411          {
   \                     isHexNum: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   4412            int Size, x, test1;
   4413            
   4414            Size = strlen(ptr);
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       strlen
   \   0000000A   0x0005             MOVS     R5,R0
   4415            test1 = 0;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x0007             MOVS     R7,R0
   4416            for (x=0; x<Size; x++)
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x0006             MOVS     R6,R0
   \                     ??isHexNum_0: (+1)
   \   00000014   0x42AE             CMP      R6,R5
   \   00000016   0xDA16             BGE.N    ??isHexNum_1
   4417            {
   4418              if (((ptr[x] <= '9') && (ptr[x] >= '0')) ||
   4419                  ((ptr[x] <= 'F') && (ptr[x] >= 'A')))
   \   00000018   0x5DA0             LDRB     R0,[R4, R6]
   \   0000001A   0x283A             CMP      R0,#+58
   \   0000001C   0xDA02             BGE.N    ??isHexNum_2
   \   0000001E   0x5DA0             LDRB     R0,[R4, R6]
   \   00000020   0x2830             CMP      R0,#+48
   \   00000022   0xDA05             BGE.N    ??isHexNum_3
   \                     ??isHexNum_2: (+1)
   \   00000024   0x5DA0             LDRB     R0,[R4, R6]
   \   00000026   0x2847             CMP      R0,#+71
   \   00000028   0xDA05             BGE.N    ??isHexNum_4
   \   0000002A   0x5DA0             LDRB     R0,[R4, R6]
   \   0000002C   0x2841             CMP      R0,#+65
   \   0000002E   0xDB02             BLT.N    ??isHexNum_4
   4420                test1 = 0;
   \                     ??isHexNum_3: (+1)
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x0007             MOVS     R7,R0
   \   00000034   0xE001             B.N      ??isHexNum_5
   4421              else
   4422                test1 = 1;
   \                     ??isHexNum_4: (+1)
   \   00000036   0x2001             MOVS     R0,#+1
   \   00000038   0x0007             MOVS     R7,R0
   4423              if (test1 == 1)
   \                     ??isHexNum_5: (+1)
   \   0000003A   0x2F01             CMP      R7,#+1
   \   0000003C   0xD101             BNE.N    ??isHexNum_6
   4424                return 0;
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0xE002             B.N      ??isHexNum_7
   4425            }
   \                     ??isHexNum_6: (+1)
   \   00000042   0x1C76             ADDS     R6,R6,#+1
   \   00000044   0xE7E6             B.N      ??isHexNum_0
   4426            return 1;
   \                     ??isHexNum_1: (+1)
   \   00000046   0x2001             MOVS     R0,#+1
   \                     ??isHexNum_7: (+1)
   \   00000048   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
   4427          }
   4428          
   4429          /**
   4430            * @brief  This function converts the passed Hex String to an Integer value.
   4431            * @param  char *ptr: Ptr to string to be converted. NULL terminated
   4432            * @retval int: -1: Error in String
   4433            *              Value converted returned.
   4434            */

   \                                 In section .text, align 2, keep-with-next
   4435          int hatoi( char *ptr )
   4436          {
   \                     hatoi: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   4437            int Size, x;
   4438            int Value = 0;
   \   00000006   0x2700             MOVS     R7,#+0
   4439            int FinalValue = 0;
   \   00000008   0xF05F 0x0800      MOVS     R8,#+0
   4440            
   4441            Size = strlen(ptr);
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       strlen
   \   00000012   0x0005             MOVS     R5,R0
   4442            for (x=0; x<Size; x++)
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x0006             MOVS     R6,R0
   \                     ??hatoi_0: (+1)
   \   00000018   0x42AE             CMP      R6,R5
   \   0000001A   0xDA1A             BGE.N    ??hatoi_1
   4443            {
   4444              if ((ptr[x] <= '9') && (ptr[x] >= '0'))
   \   0000001C   0x5DA0             LDRB     R0,[R4, R6]
   \   0000001E   0x283A             CMP      R0,#+58
   \   00000020   0xDA06             BGE.N    ??hatoi_2
   \   00000022   0x5DA0             LDRB     R0,[R4, R6]
   \   00000024   0x2830             CMP      R0,#+48
   \   00000026   0xDB03             BLT.N    ??hatoi_2
   4445                Value = ptr[x] - '0';
   \   00000028   0x5DA0             LDRB     R0,[R4, R6]
   \   0000002A   0x3830             SUBS     R0,R0,#+48
   \   0000002C   0x0007             MOVS     R7,R0
   \   0000002E   0xE00C             B.N      ??hatoi_3
   4446              else if((ptr[x] <= 'F') && (ptr[x] >= 'A'))
   \                     ??hatoi_2: (+1)
   \   00000030   0x5DA0             LDRB     R0,[R4, R6]
   \   00000032   0x2847             CMP      R0,#+71
   \   00000034   0xDA06             BGE.N    ??hatoi_4
   \   00000036   0x5DA0             LDRB     R0,[R4, R6]
   \   00000038   0x2841             CMP      R0,#+65
   \   0000003A   0xDB03             BLT.N    ??hatoi_4
   4447                Value = ptr[x] - 'A' + 10;
   \   0000003C   0x5DA0             LDRB     R0,[R4, R6]
   \   0000003E   0x3837             SUBS     R0,R0,#+55
   \   00000040   0x0007             MOVS     R7,R0
   \   00000042   0xE002             B.N      ??hatoi_3
   4448              else
   4449                return -1;
   \                     ??hatoi_4: (+1)
   \   00000044   0xF05F 0x30FF      MOVS     R0,#-1
   \   00000048   0xE004             B.N      ??hatoi_5
   4450              FinalValue = FinalValue*16 + Value;
   \                     ??hatoi_3: (+1)
   \   0000004A   0xEB17 0x1808      ADDS     R8,R7,R8, LSL #+4
   4451            }
   \   0000004E   0x1C76             ADDS     R6,R6,#+1
   \   00000050   0xE7E2             B.N      ??hatoi_0
   4452            return FinalValue;
   \                     ??hatoi_1: (+1)
   \   00000052   0x4640             MOV      R0,R8
   \                     ??hatoi_5: (+1)
   \   00000054   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   4453          }
   4454          
   4455          

   \                                 In section .text, align 2, keep-with-next
   4456          bool Tst_Bypass( void)
   4457          {
   4458            return Bypass;
   \                     Tst_Bypass: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable4_55
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return
   4459          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     ParseString

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x........         DC32     ?_274

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     ?_275

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x........         DC32     ?_276

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x........         DC32     ?_277

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x........         DC32     ?_278

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x........         DC32     ?_279

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0x........         DC32     ?_280

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   0x........         DC32     ?_20

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \   00000000   0x........         DC32     ?_281

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_9:
   \   00000000   0x........         DC32     ?_282

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_10:
   \   00000000   0x........         DC32     ?_283

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_11:
   \   00000000   0x........         DC32     ?_284

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     ?_285

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x........         DC32     ?_286

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x........         DC32     ?_287

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x........         DC32     ?_288

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x........         DC32     ?_289

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x........         DC32     ?_290

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   0x........         DC32     ?_291

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \   00000000   0x........         DC32     ?_292

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \   00000000   0x........         DC32     ?_293

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_9:
   \   00000000   0x........         DC32     ?_294

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_10:
   \   00000000   0x........         DC32     ?_295

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_11:
   \   00000000   0x........         DC32     ?_296

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_12:
   \   00000000   0x........         DC32     ?_297

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_13:
   \   00000000   0x........         DC32     ?_298

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_14:
   \   00000000   0x........         DC32     ?_299

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_15:
   \   00000000   0x........         DC32     ?_300

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_16:
   \   00000000   0x........         DC32     ?_127

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_17:
   \   00000000   0x........         DC32     ?_301

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_18:
   \   00000000   0x........         DC32     ?_302

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_19:
   \   00000000   0x........         DC32     ?_303

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_20:
   \   00000000   0x........         DC32     ?_304

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_21:
   \   00000000   0x........         DC32     ?_305

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_22:
   \   00000000   0x........         DC32     ?_306

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_23:
   \   00000000   0x........         DC32     ?_307

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_24:
   \   00000000   0x........         DC32     ?_308

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_25:
   \   00000000   0x........         DC32     ?_309

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_26:
   \   00000000   0x........         DC32     ?_310

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_27:
   \   00000000   0x........         DC32     ?_311

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_28:
   \   00000000   0x........         DC32     ?_312

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_29:
   \   00000000   0x........         DC32     ?_313

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_30:
   \   00000000   0x........         DC32     ?_314

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_31:
   \   00000000   0x........         DC32     ?_315

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_32:
   \   00000000   0x........         DC32     ?_316

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_33:
   \   00000000   0x41200000         DC32     0x41200000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_34:
   \   00000000   0x........         DC32     ?_317

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_35:
   \   00000000   0x........         DC32     ?_318

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_36:
   \   00000000   0x........         DC32     ?_319

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_37:
   \   00000000   0x........         DC32     ?_320

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_38:
   \   00000000   0x........         DC32     ?_321

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_39:
   \   00000000   0x........         DC32     ?_322

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_40:
   \   00000000   0x........         DC32     ?_323

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_41:
   \   00000000   0x........         DC32     ?_324

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_42:
   \   00000000   0x........         DC32     ?_325

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_43:
   \   00000000   0x........         DC32     ?_326

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_44:
   \   00000000   0x........         DC32     ?_41

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_45:
   \   00000000   0x........         DC32     ?_327

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_46:
   \   00000000   0x........         DC32     ?_328

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_47:
   \   00000000   0x........         DC32     ?_329

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_48:
   \   00000000   0x........         DC32     ?_330

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_49:
   \   00000000   0x........         DC32     ?_331

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_50:
   \   00000000   0x........         DC32     ?_332

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_51:
   \   00000000   0x........         DC32     ?_333

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_52:
   \   00000000   0x........         DC32     ?_24

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_53:
   \   00000000   0x........         DC32     ?_334

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_54:
   \   00000000   0x........         DC32     ?_335

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_55:
   \   00000000   0x........         DC32     Bypass

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_56:
   \   00000000   0x........         DC32     ?_336

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_57:
   \   00000000   0x........         DC32     ?_337

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_58:
   \   00000000   0x........         DC32     ?_338

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_59:
   \   00000000   0x........         DC32     ?_339

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_60:
   \   00000000   0x........         DC32     ?_340

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_61:
   \   00000000   0x........         DC32     ?_341

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_62:
   \   00000000   0x........         DC32     ?_342

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_63:
   \   00000000   0x........         DC32     ?_343

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_64:
   \   00000000   0x........         DC32     ?_344

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_65:
   \   00000000   0x........         DC32     ?_345

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_66:
   \   00000000   0x........         DC32     ?_346

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_67:
   \   00000000   0x........         DC32     ?_347

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_68:
   \   00000000   0x........         DC32     ?_348

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_69:
   \   00000000   0x........         DC32     ?_349

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_70:
   \   00000000   0x........         DC32     ?_350

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_71:
   \   00000000   0x........         DC32     ?_351

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_72:
   \   00000000   0x........         DC32     ?_352

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_73:
   \   00000000   0x........         DC32     ?_353

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_74:
   \   00000000   0x........         DC32     ?_354

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x0D 0x0A          DC8 0DH, 0AH, 0DH, 0AH, 20H, 54H, 2EH, 2EH
   \              0x0D 0x0A    
   \              0x20 0x54    
   \              0x2E 0x2E    
   \   00000008   0x2E 0x2E          DC8 2EH, 2EH, 2EH, 2EH, 2EH, 2EH, 54H, 45H
   \              0x2E 0x2E    
   \              0x2E 0x2E    
   \              0x54 0x45    
   \   00000010   0x52 0x4D          DC8 52H, 4DH, 49H, 4EH, 41H, 54H, 49H, 4EH
   \              0x49 0x4E    
   \              0x41 0x54    
   \              0x49 0x4E    
   \   00000018   0x47 0x20          DC8 47H, 20H, 4DH, 4FH, 4EH, 49H, 54H, 4FH
   \              0x4D 0x4F    
   \              0x4E 0x49    
   \              0x54 0x4F    
   \   00000020   0x52 0x20          DC8 52H, 20H, 4DH, 4FH, 44H, 45H, 2EH, 2EH
   \              0x4D 0x4F    
   \              0x44 0x45    
   \              0x2E 0x2E    
   \   00000028   0x2E 0x2E          DC8 2EH, 2EH, 2EH, 2EH, 2EH, 2EH, 2EH, 0DH
   \              0x2E 0x2E    
   \              0x2E 0x2E    
   \              0x2E 0x0D    
   \   00000030   0x0A 0x0D          DC8 0AH, 0DH, 0AH, 3EH, 20H, 0
   \              0x0A 0x3E    
   \              0x20 0x00    
   \   00000036   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_RDSNDBFFR_FILL</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x52 0x44    
   \              0x53 0x4E    
   \              0x44 0x42    
   \              0x46 0x46    
   \              0x52 0x5F    
   \              0x46 0x49    
   \              0x4C 0x4C    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x52 0x6F          DC8 52H, 6FH, 61H, 64H, 20H, 53H, 6FH, 75H
   \              0x61 0x64    
   \              0x20 0x53    
   \              0x6F 0x75    
   \   00000008   0x6E 0x64          DC8 6EH, 64H, 3AH, 20H, 52H, 6FH, 61H, 64H
   \              0x3A 0x20    
   \              0x52 0x6F    
   \              0x61 0x64    
   \   00000010   0x20 0x53          DC8 20H, 53H, 6FH, 75H, 6EH, 64H, 20H, 6CH
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x20 0x6C    
   \   00000018   0x6F 0x61          DC8 6FH, 61H, 64H, 65H, 64H, 2CH, 20H, 70H
   \              0x64 0x65    
   \              0x64 0x2C    
   \              0x20 0x70    
   \   00000020   0x72 0x6F          DC8 72H, 6FH, 63H, 65H, 73H, 73H, 65H, 64H
   \              0x63 0x65    
   \              0x73 0x73    
   \              0x65 0x64    
   \   00000028   0x2C 0x20          DC8 2CH, 20H, 61H, 6EH, 64H, 20H, 73H, 65H
   \              0x61 0x6E    
   \              0x64 0x20    
   \              0x73 0x65    
   \   00000030   0x6E 0x74          DC8 6EH, 74H, 20H, 74H, 6FH, 20H, 46H, 46H
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x46 0x46    
   \   00000038   0x54 0x20          DC8 54H, 20H, 42H, 69H, 6EH, 73H, 2EH, 0DH
   \              0x42 0x69    
   \              0x6E 0x73    
   \              0x2E 0x0D    
   \   00000040   0x0A 0x00          DC8 0AH, 0
   \   00000042   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x52 0x6F          DC8 "Road Sound: FFT Measurements 0-15.\015\012"
   \              0x61 0x64    
   \              0x20 0x53    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x3A 0x20    
   \              0x46 0x46    
   \              0x54 0x20    
   \              0x4D 0x65    
   \              0x61 0x73    
   \              0x75 0x72    
   \              0x65 0x6D    
   \              0x65 0x6E    
   \              0x74 0x73    
   \              0x20 0x30    
   \              0x2D 0x31    
   \              0x35 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_4:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_FFT0-15:%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x46    
   \              0x46 0x54    
   \              0x30 0x2D    
   \              0x31 0x35    
   \              0x3A 0x25    
   \              0x73 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_5:
   \   00000000   0x20 0x20          DC8 "     FFT Measurements 0-15: "
   \              0x20 0x20    
   \              0x20 0x46    
   \              0x46 0x54    
   \              0x20 0x4D    
   \              0x65 0x61    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x6D 0x65    
   \              0x6E 0x74    
   \              0x73 0x20    
   \              0x30 0x2D    
   \              0x31 0x35    
   \              0x3A 0x20    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \   00000000   0x0D 0x0A          DC8 "\015\012"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_7:
   \   00000000   0x52 0x6F          DC8 "Road Sound: FFT Measurements 16-31.\015\012"
   \              0x61 0x64    
   \              0x20 0x53    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x3A 0x20    
   \              0x46 0x46    
   \              0x54 0x20    
   \              0x4D 0x65    
   \              0x61 0x73    
   \              0x75 0x72    
   \              0x65 0x6D    
   \              0x65 0x6E    
   \              0x74 0x73    
   \              0x20 0x31    
   \              0x36 0x2D    
   \              0x33 0x31    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_8:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_FFT16-31:%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x46    
   \              0x46 0x54    
   \              0x31 0x36    
   \              0x2D 0x33    
   \              0x31 0x3A    
   \              0x25 0x73    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_9:
   \   00000000   0x20 0x20          DC8 "     FFT Measurements 16-31: "
   \              0x20 0x20    
   \              0x20 0x46    
   \              0x46 0x54    
   \              0x20 0x4D    
   \              0x65 0x61    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x6D 0x65    
   \              0x6E 0x74    
   \              0x73 0x20    
   \              0x31 0x36    
   \              0x2D 0x33    
   \              0x31 0x3A    
   \              0x20 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_10:
   \   00000000   0x52 0x6F          DC8 "Road Sound: FFT Measurements 32-47.\015\012"
   \              0x61 0x64    
   \              0x20 0x53    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x3A 0x20    
   \              0x46 0x46    
   \              0x54 0x20    
   \              0x4D 0x65    
   \              0x61 0x73    
   \              0x75 0x72    
   \              0x65 0x6D    
   \              0x65 0x6E    
   \              0x74 0x73    
   \              0x20 0x33    
   \              0x32 0x2D    
   \              0x34 0x37    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_11:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_FFT32-47:%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x46    
   \              0x46 0x54    
   \              0x33 0x32    
   \              0x2D 0x34    
   \              0x37 0x3A    
   \              0x25 0x73    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_12:
   \   00000000   0x20 0x20          DC8 "     FFT Measurements 32-47: "
   \              0x20 0x20    
   \              0x20 0x46    
   \              0x46 0x54    
   \              0x20 0x4D    
   \              0x65 0x61    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x6D 0x65    
   \              0x6E 0x74    
   \              0x73 0x20    
   \              0x33 0x32    
   \              0x2D 0x34    
   \              0x37 0x3A    
   \              0x20 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_13:
   \   00000000   0x52 0x6F          DC8 "Road Sound: FFT Measurements 48-63.\015\012"
   \              0x61 0x64    
   \              0x20 0x53    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x3A 0x20    
   \              0x46 0x46    
   \              0x54 0x20    
   \              0x4D 0x65    
   \              0x61 0x73    
   \              0x75 0x72    
   \              0x65 0x6D    
   \              0x65 0x6E    
   \              0x74 0x73    
   \              0x20 0x34    
   \              0x38 0x2D    
   \              0x36 0x33    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_14:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_FFT48-63:%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x46    
   \              0x46 0x54    
   \              0x34 0x38    
   \              0x2D 0x36    
   \              0x33 0x3A    
   \              0x25 0x73    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_15:
   \   00000000   0x20 0x20          DC8 "     FFT Measurements 48-63: "
   \              0x20 0x20    
   \              0x20 0x46    
   \              0x46 0x54    
   \              0x20 0x4D    
   \              0x65 0x61    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x6D 0x65    
   \              0x6E 0x74    
   \              0x73 0x20    
   \              0x34 0x38    
   \              0x2D 0x36    
   \              0x33 0x3A    
   \              0x20 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_16:
   \   00000000   0x52 0x6F          DC8 "Road Sound: Results of save Buffer.\015\012"
   \              0x61 0x64    
   \              0x20 0x53    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x3A 0x20    
   \              0x52 0x65    
   \              0x73 0x75    
   \              0x6C 0x74    
   \              0x73 0x20    
   \              0x6F 0x66    
   \              0x20 0x73    
   \              0x61 0x76    
   \              0x65 0x20    
   \              0x42 0x75    
   \              0x66 0x66    
   \              0x65 0x72    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_17:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_FFTBFFR_DUMP:"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x46    
   \              0x46 0x54    
   \              0x42 0x46    
   \              0x46 0x52    
   \              0x5F 0x44    
   \              0x55 0x4D    
   \              0x50 0x3A    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 1
   \   00000000   0x00               DC8 ""

   \                                 In section .rodata, align 4
   \                     ?_19:
   \   00000000   0x25 0x30          DC8 "%04d "
   \              0x34 0x64    
   \              0x20 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_20:
   \   00000000   0x3C 0x2F          DC8 "</STATUS>"
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_21:
   \   00000000   0x20 0x20          DC8 "     ---COMPLETE---"
   \              0x20 0x20    
   \              0x20 0x2D    
   \              0x2D 0x2D    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2D 0x2D    
   \              0x2D 0x00    

   \                                 In section .rodata, align 4
   \                     ?_22:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_FFTCLR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x46    
   \              0x46 0x54    
   \              0x43 0x4C    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_23:
   \   00000000   0x52 0x6F          DC8 "Road Sound: All buffers cleared.\015\012"
   \              0x61 0x64    
   \              0x20 0x53    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x3A 0x20    
   \              0x41 0x6C    
   \              0x6C 0x20    
   \              0x62 0x75    
   \              0x66 0x66    
   \              0x65 0x72    
   \              0x73 0x20    
   \              0x63 0x6C    
   \              0x65 0x61    
   \              0x72 0x65    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_24:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_NOSUPPORT</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x4E 0x4F    
   \              0x53 0x55    
   \              0x50 0x50    
   \              0x4F 0x52    
   \              0x54 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_25:
   \   00000000   0x49 0x6E          DC8 "Initialize Barometer Sensor Passed.\015\012"
   \              0x69 0x74    
   \              0x69 0x61    
   \              0x6C 0x69    
   \              0x7A 0x65    
   \              0x20 0x42    
   \              0x61 0x72    
   \              0x6F 0x6D    
   \              0x65 0x74    
   \              0x65 0x72    
   \              0x20 0x53    
   \              0x65 0x6E    
   \              0x73 0x6F    
   \              0x72 0x20    
   \              0x50 0x61    
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_26:
   \   00000000   0x49 0x6E          DC8 "Initialize Barometer Sensor FAILED.\015\012"
   \              0x69 0x74    
   \              0x69 0x61    
   \              0x6C 0x69    
   \              0x7A 0x65    
   \              0x20 0x42    
   \              0x61 0x72    
   \              0x6F 0x6D    
   \              0x65 0x74    
   \              0x65 0x72    
   \              0x20 0x53    
   \              0x65 0x6E    
   \              0x73 0x6F    
   \              0x72 0x20    
   \              0x46 0x41    
   \              0x49 0x4C    
   \              0x45 0x44    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_27:
   \   00000000   0x41 0x36          DC8 "A6 Command...Read Pressure Passed.\015\012"
   \              0x20 0x43    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x2E    
   \              0x2E 0x52    
   \              0x65 0x61    
   \              0x64 0x20    
   \              0x50 0x72    
   \              0x65 0x73    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x20 0x50    
   \              0x61 0x73    
   \              0x73 0x65    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_28:
   \   00000000   0x20 0x50          DC8 20H, 50H, 52H, 45H, 53H, 53H, 55H, 52H
   \              0x52 0x45    
   \              0x53 0x53    
   \              0x55 0x52    
   \   00000008   0x45 0x28          DC8 45H, 28H, 50H, 52H, 45H, 53H, 53H, 5FH
   \              0x50 0x52    
   \              0x45 0x53    
   \              0x53 0x5F    
   \   00000010   0x4F 0x55          DC8 4FH, 55H, 54H, 5FH, 48H, 2EH, 2EH, 2EH
   \              0x54 0x5F    
   \              0x48 0x2E    
   \              0x2E 0x2E    
   \   00000018   0x50 0x52          DC8 50H, 52H, 45H, 53H, 53H, 5FH, 4FH, 55H
   \              0x45 0x53    
   \              0x53 0x5F    
   \              0x4F 0x55    
   \   00000020   0x54 0x5F          DC8 54H, 5FH, 4CH, 2EH, 2EH, 2EH, 50H, 52H
   \              0x4C 0x2E    
   \              0x2E 0x2E    
   \              0x50 0x52    
   \   00000028   0x45 0x53          DC8 45H, 53H, 53H, 5FH, 4FH, 55H, 54H, 5FH
   \              0x53 0x5F    
   \              0x4F 0x55    
   \              0x54 0x5F    
   \   00000030   0x58 0x4C          DC8 58H, 4CH, 29H, 0DH, 0AH, 0
   \              0x29 0x0D    
   \              0x0A 0x00    
   \   00000036   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_29:
   \   00000000   0x20 0x50          DC8 " PRESSURE: %s/%s\015\012"
   \              0x52 0x45    
   \              0x53 0x53    
   \              0x55 0x52    
   \              0x45 0x3A    
   \              0x20 0x25    
   \              0x73 0x2F    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_30:
   \   00000000   0x3C 0x53          DC8 "<STATUS>PRESSURE: %s/%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x50 0x52    
   \              0x45 0x53    
   \              0x53 0x55    
   \              0x52 0x45    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_31:
   \   00000000   0x20 0x50          DC8 " PRESSURE:  "
   \              0x52 0x45    
   \              0x53 0x53    
   \              0x55 0x52    
   \              0x45 0x3A    
   \              0x20 0x20    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_32:
   \   00000000   0x20 0x20          DC8 "  -  %08x\015\012"
   \              0x2D 0x20    
   \              0x20 0x25    
   \              0x30 0x38    
   \              0x78 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_33:
   \   00000000   0x41 0x36          DC8 "A6 Command...Read Pressure FAILED.\015\012"
   \              0x20 0x43    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x2E    
   \              0x2E 0x52    
   \              0x65 0x61    
   \              0x64 0x20    
   \              0x50 0x72    
   \              0x65 0x73    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x20 0x46    
   \              0x41 0x49    
   \              0x4C 0x45    
   \              0x44 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_34:
   \   00000000   0x41 0x38          DC8 "A8 Command...Read Temperature Passed.\015\012"
   \              0x20 0x43    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x2E    
   \              0x2E 0x52    
   \              0x65 0x61    
   \              0x64 0x20    
   \              0x54 0x65    
   \              0x6D 0x70    
   \              0x65 0x72    
   \              0x61 0x74    
   \              0x75 0x72    
   \              0x65 0x20    
   \              0x50 0x61    
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_35:
   \   00000000   0x20 0x20          DC8 "     TEMP DATA: "
   \              0x20 0x20    
   \              0x20 0x54    
   \              0x45 0x4D    
   \              0x50 0x20    
   \              0x44 0x41    
   \              0x54 0x41    
   \              0x3A 0x20    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_36:
   \   00000000   0x20 0x20          DC8 "     TEMP DATA(Decimal): %d\015\012"
   \              0x20 0x20    
   \              0x20 0x54    
   \              0x45 0x4D    
   \              0x50 0x20    
   \              0x44 0x41    
   \              0x54 0x41    
   \              0x28 0x44    
   \              0x65 0x63    
   \              0x69 0x6D    
   \              0x61 0x6C    
   \              0x29 0x3A    
   \              0x20 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_37:
   \   00000000   0x20 0x20          DC8 "     TempC: "
   \              0x20 0x20    
   \              0x20 0x54    
   \              0x65 0x6D    
   \              0x70 0x43    
   \              0x3A 0x20    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_38:
   \   00000000   0x20 0x20          DC8 "     TempF: "
   \              0x20 0x20    
   \              0x20 0x54    
   \              0x65 0x6D    
   \              0x70 0x46    
   \              0x3A 0x20    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_39:
   \   00000000   0x42 0x61          DC8 "Barometer Sensor: WHO_AM_I Passed.\015\012"
   \              0x72 0x6F    
   \              0x6D 0x65    
   \              0x74 0x65    
   \              0x72 0x20    
   \              0x53 0x65    
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x3A 0x20    
   \              0x57 0x48    
   \              0x4F 0x5F    
   \              0x41 0x4D    
   \              0x5F 0x49    
   \              0x20 0x50    
   \              0x61 0x73    
   \              0x73 0x65    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_40:
   \   00000000   0x42 0x61          DC8 "Barometer Sensor: WHO_AM_I FAILED.\015\012"
   \              0x72 0x6F    
   \              0x6D 0x65    
   \              0x74 0x65    
   \              0x72 0x20    
   \              0x53 0x65    
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x3A 0x20    
   \              0x57 0x48    
   \              0x4F 0x5F    
   \              0x41 0x4D    
   \              0x5F 0x49    
   \              0x20 0x46    
   \              0x41 0x49    
   \              0x4C 0x45    
   \              0x44 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_41:
   \   00000000   0x45 0x52          DC8 "ERROR: Not a legal command.\015\012"
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x61    
   \              0x20 0x6C    
   \              0x65 0x67    
   \              0x61 0x6C    
   \              0x20 0x63    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_42:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_THERMAL_DUMP:"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x48 0x45    
   \              0x52 0x4D    
   \              0x41 0x4C    
   \              0x5F 0x44    
   \              0x55 0x4D    
   \              0x50 0x3A    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_43:
   \   00000000   0x56 0x6F          DC8 "Voltage Monitor/Shunt Voltage...\015\012"
   \              0x6C 0x74    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x4D 0x6F    
   \              0x6E 0x69    
   \              0x74 0x6F    
   \              0x72 0x2F    
   \              0x53 0x68    
   \              0x75 0x6E    
   \              0x74 0x20    
   \              0x56 0x6F    
   \              0x6C 0x74    
   \              0x61 0x67    
   \              0x65 0x2E    
   \              0x2E 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_44:
   \   00000000   0x20 0x20          DC8 "     Thermistor DATA: %s   %s/%s   %s/%s   %d\015\012"
   \              0x20 0x20    
   \              0x20 0x54    
   \              0x68 0x65    
   \              0x72 0x6D    
   \              0x69 0x73    
   \              0x74 0x6F    
   \              0x72 0x20    
   \              0x44 0x41    
   \              0x54 0x41    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x20 0x20    
   \              0x20 0x25    
   \              0x73 0x2F    
   \              0x25 0x73    
   \              0x20 0x20    
   \              0x20 0x25    
   \              0x73 0x2F    
   \              0x25 0x73    
   \              0x20 0x20    
   \              0x20 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_45:
   \   00000000   0x20 0x20          DC8 "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\015\012"
   \              0x20 0x20    
   \              0x20 0x47    
   \              0x72 0x69    
   \              0x64 0x20    
   \              0x33 0x33    
   \              0x20 0x44    
   \              0x41 0x54    
   \              0x41 0x3A    
   \              0x20 0x25    
   \              0x73 0x20    
   \              0x20 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x20    
   \              0x20 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x20    
   \              0x20 0x20    
   \              0x25 0x64    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_46:
   \   00000000   0x20 0x20          DC8 "     SHNT VLTG DATA: "
   \              0x20 0x20    
   \              0x20 0x53    
   \              0x48 0x4E    
   \              0x54 0x20    
   \              0x56 0x4C    
   \              0x54 0x47    
   \              0x20 0x44    
   \              0x41 0x54    
   \              0x41 0x3A    
   \              0x20 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_47:
   \   00000000   0x20 0x20          DC8 "     COMPLETE.\015\012"
   \              0x20 0x20    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_48:
   \   00000000   0x43 0x6F          DC8 43H, 6FH, 6FH, 6CH, 20H, 45H, 79H, 65H
   \              0x6F 0x6C    
   \              0x20 0x45    
   \              0x79 0x65    
   \   00000008   0x2F 0x47          DC8 2FH, 47H, 72H, 69H, 64H, 20H, 45H, 79H
   \              0x72 0x69    
   \              0x64 0x20    
   \              0x45 0x79    
   \   00000010   0x65 0x20          DC8 65H, 20H, 53H, 65H, 6EH, 73H, 6FH, 72H
   \              0x53 0x65    
   \              0x6E 0x73    
   \              0x6F 0x72    
   \   00000018   0x3A 0x20          DC8 3AH, 20H, 49H, 6EH, 69H, 74H, 69H, 61H
   \              0x49 0x6E    
   \              0x69 0x74    
   \              0x69 0x61    
   \   00000020   0x6C 0x69          DC8 6CH, 69H, 7AH, 61H, 74H, 69H, 6FH, 6EH
   \              0x7A 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \   00000028   0x20 0x43          DC8 20H, 43H, 6FH, 6DH, 70H, 6CH, 65H, 74H
   \              0x6F 0x6D    
   \              0x70 0x6C    
   \              0x65 0x74    
   \   00000030   0x65 0x2E          DC8 65H, 2EH, 0DH, 0AH, 0
   \              0x0D 0x0A    
   \              0x00         
   \   00000035   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_49:
   \   00000000   0x43 0x6F          DC8 "Cool Eye/Grid Eye Sensor: Reset Complete.\015\012"
   \              0x6F 0x6C    
   \              0x20 0x45    
   \              0x79 0x65    
   \              0x2F 0x47    
   \              0x72 0x69    
   \              0x64 0x20    
   \              0x45 0x79    
   \              0x65 0x20    
   \              0x53 0x65    
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x3A 0x20    
   \              0x52 0x65    
   \              0x73 0x65    
   \              0x74 0x20    
   \              0x43 0x6F    
   \              0x6D 0x70    
   \              0x6C 0x65    
   \              0x74 0x65    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_50:
   \   00000000   0x56 0x6F          DC8 "Voltage Monitor/Read Bus Voltage...\015\012"
   \              0x6C 0x74    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x4D 0x6F    
   \              0x6E 0x69    
   \              0x74 0x6F    
   \              0x72 0x2F    
   \              0x52 0x65    
   \              0x61 0x64    
   \              0x20 0x42    
   \              0x75 0x73    
   \              0x20 0x56    
   \              0x6F 0x6C    
   \              0x74 0x61    
   \              0x67 0x65    
   \              0x2E 0x2E    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_51:
   \   00000000   0x20 0x20          DC8 "     BUS VOLTAGE DATA: "
   \              0x20 0x20    
   \              0x20 0x42    
   \              0x55 0x53    
   \              0x20 0x56    
   \              0x4F 0x4C    
   \              0x54 0x41    
   \              0x47 0x45    
   \              0x20 0x44    
   \              0x41 0x54    
   \              0x41 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_52:
   \   00000000   0x3C 0x53          DC8 "<STATUS>BUS_VLTG:%s/%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x42 0x55    
   \              0x53 0x5F    
   \              0x56 0x4C    
   \              0x54 0x47    
   \              0x3A 0x25    
   \              0x73 0x2F    
   \              0x25 0x73    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_53:
   \   00000000   0x20 0x20          DC8 "     Bus Voltage: %s/%s\015\012"
   \              0x20 0x20    
   \              0x20 0x42    
   \              0x75 0x73    
   \              0x20 0x56    
   \              0x6F 0x6C    
   \              0x74 0x61    
   \              0x67 0x65    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x0D    
   \              0x0A 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_54:
   \   00000000   0x56 0x6F          DC8 "Voltage Monitor: Initialization Complete.\015\012"
   \              0x6C 0x74    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x4D 0x6F    
   \              0x6E 0x69    
   \              0x74 0x6F    
   \              0x72 0x3A    
   \              0x20 0x49    
   \              0x6E 0x69    
   \              0x74 0x69    
   \              0x61 0x6C    
   \              0x69 0x7A    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x43 0x6F    
   \              0x6D 0x70    
   \              0x6C 0x65    
   \              0x74 0x65    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_55:
   \   00000000   0x3C 0x53          DC8 "<STATUS>SHNT_VLTG:%s/%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x48    
   \              0x4E 0x54    
   \              0x5F 0x56    
   \              0x4C 0x54    
   \              0x47 0x3A    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_56:
   \   00000000   0x20 0x20          DC8 "     Shunt Voltage: %s/%s\015\012"
   \              0x20 0x20    
   \              0x20 0x53    
   \              0x68 0x75    
   \              0x6E 0x74    
   \              0x20 0x56    
   \              0x6F 0x6C    
   \              0x74 0x61    
   \              0x67 0x65    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_57:
   \   00000000   0x56 0x6F          DC8 "Voltage Monitor/Read Current...\015\012"
   \              0x6C 0x74    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x4D 0x6F    
   \              0x6E 0x69    
   \              0x74 0x6F    
   \              0x72 0x2F    
   \              0x52 0x65    
   \              0x61 0x64    
   \              0x20 0x43    
   \              0x75 0x72    
   \              0x72 0x65    
   \              0x6E 0x74    
   \              0x2E 0x2E    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_58:
   \   00000000   0x20 0x20          DC8 "     CURRENT DATA: "
   \              0x20 0x20    
   \              0x20 0x43    
   \              0x55 0x52    
   \              0x52 0x45    
   \              0x4E 0x54    
   \              0x20 0x44    
   \              0x41 0x54    
   \              0x41 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_59:
   \   00000000   0x3C 0x53          DC8 "<STATUS>SHNT_CRNT:%s/%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x48    
   \              0x4E 0x54    
   \              0x5F 0x43    
   \              0x52 0x4E    
   \              0x54 0x3A    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_60:
   \   00000000   0x20 0x20          DC8 "     Current: %s/%s\015\012"
   \              0x20 0x20    
   \              0x20 0x43    
   \              0x75 0x72    
   \              0x72 0x65    
   \              0x6E 0x74    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x0D    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_61:
   \   00000000   0x56 0x6F          DC8 "Voltage Monitor/Read Power...\015\012"
   \              0x6C 0x74    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x4D 0x6F    
   \              0x6E 0x69    
   \              0x74 0x6F    
   \              0x72 0x2F    
   \              0x52 0x65    
   \              0x61 0x64    
   \              0x20 0x50    
   \              0x6F 0x77    
   \              0x65 0x72    
   \              0x2E 0x2E    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_62:
   \   00000000   0x20 0x20          DC8 "     POWER DATA: "
   \              0x20 0x20    
   \              0x20 0x50    
   \              0x4F 0x57    
   \              0x45 0x52    
   \              0x20 0x44    
   \              0x41 0x54    
   \              0x41 0x3A    
   \              0x20 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_63:
   \   00000000   0x3C 0x53          DC8 "<STATUS>POWER:%s/%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x50 0x4F    
   \              0x57 0x45    
   \              0x52 0x3A    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_64:
   \   00000000   0x20 0x20          DC8 "     Power: %s/%s\015\012"
   \              0x20 0x20    
   \              0x20 0x50    
   \              0x6F 0x77    
   \              0x65 0x72    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_65:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_C_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x43 0x5F    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_66:
   \   00000000   0x48 0x75          DC8 "Humidity SENSOR...\015\012"
   \              0x6D 0x69    
   \              0x64 0x69    
   \              0x74 0x79    
   \              0x20 0x53    
   \              0x45 0x4E    
   \              0x53 0x4F    
   \              0x52 0x2E    
   \              0x2E 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_67:
   \   00000000   0x20 0x20          DC8 "     Humidity DATA: "
   \              0x20 0x20    
   \              0x20 0x48    
   \              0x75 0x6D    
   \              0x69 0x64    
   \              0x69 0x74    
   \              0x79 0x20    
   \              0x44 0x41    
   \              0x54 0x41    
   \              0x3A 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_68:
   \   00000000   0x20 0x20          DC8 "     Humidity DATA(Decimal): %d\015\012"
   \              0x20 0x20    
   \              0x20 0x48    
   \              0x75 0x6D    
   \              0x69 0x64    
   \              0x69 0x74    
   \              0x79 0x20    
   \              0x44 0x41    
   \              0x54 0x41    
   \              0x28 0x44    
   \              0x65 0x63    
   \              0x69 0x6D    
   \              0x61 0x6C    
   \              0x29 0x3A    
   \              0x20 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_69:
   \   00000000   0x3C 0x53          DC8 "<STATUS>HUMIDITY:%s/%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x48 0x55    
   \              0x4D 0x49    
   \              0x44 0x49    
   \              0x54 0x59    
   \              0x3A 0x25    
   \              0x73 0x2F    
   \              0x25 0x73    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_70:
   \   00000000   0x20 0x20          DC8 "     Humidity: %s/%s\015\012"
   \              0x20 0x20    
   \              0x20 0x48    
   \              0x75 0x6D    
   \              0x69 0x64    
   \              0x69 0x74    
   \              0x79 0x3A    
   \              0x20 0x25    
   \              0x73 0x2F    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_71:
   \   00000000   0x48 0x75          DC8 "Humidity Sensor: Initialization Complete.\015\012"
   \              0x6D 0x69    
   \              0x64 0x69    
   \              0x74 0x79    
   \              0x20 0x53    
   \              0x65 0x6E    
   \              0x73 0x6F    
   \              0x72 0x3A    
   \              0x20 0x49    
   \              0x6E 0x69    
   \              0x74 0x69    
   \              0x61 0x6C    
   \              0x69 0x7A    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x43 0x6F    
   \              0x6D 0x70    
   \              0x6C 0x65    
   \              0x74 0x65    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_72:
   \   00000000   0x20 0x20          DC8 "     Humidity: "
   \              0x20 0x20    
   \              0x20 0x48    
   \              0x75 0x6D    
   \              0x69 0x64    
   \              0x69 0x74    
   \              0x79 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_73:
   \   00000000   0x54 0x42          DC8 "TBD: Read Temp and Pressure NOT IMPLEMENTED\015\012"
   \              0x44 0x3A    
   \              0x20 0x52    
   \              0x65 0x61    
   \              0x64 0x20    
   \              0x54 0x65    
   \              0x6D 0x70    
   \              0x20 0x61    
   \              0x6E 0x64    
   \              0x20 0x50    
   \              0x72 0x65    
   \              0x73 0x73    
   \              0x75 0x72    
   \              0x65 0x20    
   \              0x4E 0x4F    
   \              0x54 0x20    
   \              0x49 0x4D    
   \              0x50 0x4C    
   \              0x45 0x4D    
   \              0x45 0x4E    
   \              0x54 0x45    
   \              0x44 0x0D    
   \              0x0A 0x00    
   \   0000002E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_74:
   \   00000000   0x4E 0x4F          DC8 "NO Action...(0x00).\015\012"
   \              0x20 0x41    
   \              0x63 0x74    
   \              0x69 0x6F    
   \              0x6E 0x2E    
   \              0x2E 0x2E    
   \              0x28 0x30    
   \              0x78 0x30    
   \              0x30 0x29    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_75:
   \   00000000   0x54 0x45          DC8 "TEMP SENSOR...\015\012"
   \              0x4D 0x50    
   \              0x20 0x53    
   \              0x45 0x4E    
   \              0x53 0x4F    
   \              0x52 0x2E    
   \              0x2E 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_76:
   \   00000000   0x3C 0x53          DC8 "<STATUS>TEMPC:%s/%s//TEMPF:%s/%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x54 0x45    
   \              0x4D 0x50    
   \              0x43 0x3A    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x2F    
   \              0x2F 0x54    
   \              0x45 0x4D    
   \              0x50 0x46    
   \              0x3A 0x25    
   \              0x73 0x2F    
   \              0x25 0x73    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000002A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_77:
   \   00000000   0x20 0x20          DC8 "     TempC: %s/%s     TempF: %s/%s\015\012"
   \              0x20 0x20    
   \              0x20 0x54    
   \              0x65 0x6D    
   \              0x70 0x43    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x54 0x65    
   \              0x6D 0x70    
   \              0x46 0x3A    
   \              0x20 0x25    
   \              0x73 0x2F    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_78:
   \   00000000   0x52 0x47          DC8 "RGB Color Light Sensor...\015\012"
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \              0x72 0x20    
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \              0x53 0x65    
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x2E 0x2E    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_79:
   \   00000000   0x20 0x52          DC8 20H, 52H, 47H, 42H, 28H, 52H, 45H, 44H
   \              0x47 0x42    
   \              0x28 0x52    
   \              0x45 0x44    
   \   00000008   0x6D 0x73          DC8 6DH, 73H, 62H, 2CH, 52H, 45H, 44H, 6CH
   \              0x62 0x2C    
   \              0x52 0x45    
   \              0x44 0x6C    
   \   00000010   0x73 0x62          DC8 73H, 62H, 2CH, 47H, 52H, 45H, 45H, 4EH
   \              0x2C 0x47    
   \              0x52 0x45    
   \              0x45 0x4E    
   \   00000018   0x6D 0x73          DC8 6DH, 73H, 62H, 2CH, 47H, 52H, 45H, 45H
   \              0x62 0x2C    
   \              0x47 0x52    
   \              0x45 0x45    
   \   00000020   0x4E 0x6C          DC8 4EH, 6CH, 73H, 62H, 2CH, 42H, 4CH, 55H
   \              0x73 0x62    
   \              0x2C 0x42    
   \              0x4C 0x55    
   \   00000028   0x45 0x6D          DC8 45H, 6DH, 73H, 62H, 2CH, 42H, 4CH, 55H
   \              0x73 0x62    
   \              0x2C 0x42    
   \              0x4C 0x55    
   \   00000030   0x45 0x6C          DC8 45H, 6CH, 73H, 62H, 29H, 0DH, 0AH, 0
   \              0x73 0x62    
   \              0x29 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_80:
   \   00000000   0x20 0x20          DC8 "       DATA: "
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x44    
   \              0x41 0x54    
   \              0x41 0x3A    
   \              0x20 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_81:
   \   00000000   0x3C 0x53          DC8 "<STATUS>RED:%s/GREEN:%s/BLUE:%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x52 0x45    
   \              0x44 0x3A    
   \              0x25 0x73    
   \              0x2F 0x47    
   \              0x52 0x45    
   \              0x45 0x4E    
   \              0x3A 0x25    
   \              0x73 0x2F    
   \              0x42 0x4C    
   \              0x55 0x45    
   \              0x3A 0x25    
   \              0x73 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_82:
   \   00000000   0x20 0x20          DC8 "    Red: "
   \              0x20 0x20    
   \              0x52 0x65    
   \              0x64 0x3A    
   \              0x20 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_83:
   \   00000000   0x20 0x20          DC8 "    Green: "
   \              0x20 0x20    
   \              0x47 0x72    
   \              0x65 0x65    
   \              0x6E 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_84:
   \   00000000   0x20 0x20          DC8 "    Blue: "
   \              0x20 0x20    
   \              0x42 0x6C    
   \              0x75 0x65    
   \              0x3A 0x20    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_85:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 3AH, 20H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x3A 0x20    
   \   00000018   0x49 0x6E          DC8 49H, 6EH, 69H, 74H, 69H, 61H, 6CH, 69H
   \              0x69 0x74    
   \              0x69 0x61    
   \              0x6C 0x69    
   \   00000020   0x7A 0x61          DC8 7AH, 61H, 74H, 69H, 6FH, 6EH, 20H, 43H
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x43    
   \   00000028   0x6F 0x6D          DC8 6FH, 6DH, 70H, 6CH, 65H, 74H, 65H, 20H
   \              0x70 0x6C    
   \              0x65 0x74    
   \              0x65 0x20    
   \   00000030   0x77 0x69          DC8 77H, 69H, 74H, 68H, 20H, 44H, 45H, 46H
   \              0x74 0x68    
   \              0x20 0x44    
   \              0x45 0x46    
   \   00000038   0x41 0x55          DC8 41H, 55H, 4CH, 54H, 20H, 56H, 61H, 6CH
   \              0x4C 0x54    
   \              0x20 0x56    
   \              0x61 0x6C    
   \   00000040   0x75 0x65          DC8 75H, 65H, 73H, 2EH, 0DH, 0AH, 0
   \              0x73 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000047   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_86:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 3AH, 20H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x3A 0x20    
   \   00000018   0x53 0x59          DC8 53H, 59H, 4EH, 54H, 41H, 58H, 20H, 45H
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \   00000020   0x72 0x72          DC8 72H, 72H, 6FH, 72H, 2EH, 20H, 50H, 61H
   \              0x6F 0x72    
   \              0x2E 0x20    
   \              0x50 0x61    
   \   00000028   0x72 0x61          DC8 72H, 61H, 6DH, 65H, 74H, 65H, 72H, 73H
   \              0x6D 0x65    
   \              0x74 0x65    
   \              0x72 0x73    
   \   00000030   0x20 0x61          DC8 20H, 61H, 72H, 65H, 20H, 6EH, 6FH, 74H
   \              0x72 0x65    
   \              0x20 0x6E    
   \              0x6F 0x74    
   \   00000038   0x20 0x63          DC8 20H, 63H, 6FH, 72H, 72H, 65H, 63H, 74H
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \   00000040   0x2E 0x0D          DC8 2EH, 0DH, 0AH, 0
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_87:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 4EH, 6FH, 74H
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \   00000028   0x20 0x63          DC8 20H, 63H, 6FH, 72H, 72H, 65H, 63H, 74H
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \   00000030   0x20 0x66          DC8 20H, 66H, 6FH, 72H, 6DH, 61H, 74H, 2EH
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \   00000038   0x20 0x50          DC8 20H, 50H, 75H, 6EH, 63H, 74H, 75H, 61H
   \              0x75 0x6E    
   \              0x63 0x74    
   \              0x75 0x61    
   \   00000040   0x74 0x69          DC8 74H, 69H, 6FH, 6EH, 21H, 0DH, 0AH, 0
   \              0x6F 0x6E    
   \              0x21 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_88:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 50H, 61H, 72H, 61H
   \              0x52 0x3A    
   \              0x50 0x61    
   \              0x72 0x61    
   \   00000028   0x6D 0x65          DC8 6DH, 65H, 74H, 65H, 72H, 73H, 20H, 6EH
   \              0x74 0x65    
   \              0x72 0x73    
   \              0x20 0x6E    
   \   00000030   0x6F 0x74          DC8 6FH, 74H, 20H, 48H, 45H, 58H, 20H, 56H
   \              0x20 0x48    
   \              0x45 0x58    
   \              0x20 0x56    
   \   00000038   0x61 0x6C          DC8 61H, 6CH, 75H, 65H, 2EH, 0DH, 0AH, 0
   \              0x75 0x65    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_89:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x4F 0x50          DC8 4FH, 50H, 5FH, 4DH, 4FH, 44H, 45H, 2EH
   \              0x5F 0x4D    
   \              0x4F 0x44    
   \              0x45 0x2E    
   \   00000038   0x0D 0x0A          DC8 0DH, 0AH, 0
   \              0x00         
   \   0000003B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_90:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x44 0x53          DC8 44H, 53H, 5FH, 52H, 41H, 4EH, 47H, 45H
   \              0x5F 0x52    
   \              0x41 0x4E    
   \              0x47 0x45    
   \   00000038   0x2E 0x0D          DC8 2EH, 0DH, 0AH, 0
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_91:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x41 0x44          DC8 41H, 44H, 43H, 5FH, 52H, 53H, 4CH, 2EH
   \              0x43 0x5F    
   \              0x52 0x53    
   \              0x4C 0x2E    
   \   00000038   0x0D 0x0A          DC8 0DH, 0AH, 0
   \              0x00         
   \   0000003B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_92:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x53 0x59          DC8 53H, 59H, 4EH, 43H, 2EH, 0DH, 0AH, 0
   \              0x4E 0x43    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_93:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x43 0x4D          DC8 43H, 4DH, 50H, 5FH, 41H, 44H, 4AH, 53H
   \              0x50 0x5F    
   \              0x41 0x44    
   \              0x4A 0x53    
   \   00000038   0x54 0x2E          DC8 54H, 2EH, 0DH, 0AH, 0
   \              0x0D 0x0A    
   \              0x00         
   \   0000003D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_94:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x43 0x4D          DC8 43H, 4DH, 50H, 5FH, 4FH, 46H, 46H, 53H
   \              0x50 0x5F    
   \              0x4F 0x46    
   \              0x46 0x53    
   \   00000038   0x54 0x2E          DC8 54H, 2EH, 0DH, 0AH, 0
   \              0x0D 0x0A    
   \              0x00         
   \   0000003D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_95:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x49 0x4E          DC8 49H, 4EH, 54H, 5FH, 41H, 53H, 53H, 47H
   \              0x54 0x5F    
   \              0x41 0x53    
   \              0x53 0x47    
   \   00000038   0x4E 0x2E          DC8 4EH, 2EH, 0DH, 0AH, 0
   \              0x0D 0x0A    
   \              0x00         
   \   0000003D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_96:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x49 0x4E          DC8 49H, 4EH, 54H, 5FH, 50H, 45H, 52H, 53H
   \              0x54 0x5F    
   \              0x50 0x45    
   \              0x52 0x53    
   \   00000038   0x49 0x53          DC8 49H, 53H, 54H, 2EH, 0DH, 0AH, 0
   \              0x54 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000003F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_97:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x43 0x4E          DC8 43H, 4EH, 56H, 52H, 53H, 4EH, 5FH, 49H
   \              0x56 0x52    
   \              0x53 0x4E    
   \              0x5F 0x49    
   \   00000038   0x4E 0x54          DC8 4EH, 54H, 2EH, 0DH, 0AH, 0
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   0000003E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_98:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 3AH, 20H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x3A 0x20    
   \   00000018   0x49 0x6E          DC8 49H, 6EH, 69H, 74H, 69H, 61H, 6CH, 69H
   \              0x69 0x74    
   \              0x69 0x61    
   \              0x6C 0x69    
   \   00000020   0x7A 0x61          DC8 7AH, 61H, 74H, 69H, 6FH, 6EH, 20H, 43H
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x43    
   \   00000028   0x6F 0x6D          DC8 6FH, 6DH, 70H, 6CH, 65H, 74H, 65H, 20H
   \              0x70 0x6C    
   \              0x65 0x74    
   \              0x65 0x20    
   \   00000030   0x77 0x69          DC8 77H, 69H, 74H, 68H, 20H, 55H, 53H, 45H
   \              0x74 0x68    
   \              0x20 0x55    
   \              0x53 0x45    
   \   00000038   0x52 0x20          DC8 52H, 20H, 56H, 61H, 6CH, 75H, 65H, 73H
   \              0x56 0x61    
   \              0x6C 0x75    
   \              0x65 0x73    
   \   00000040   0x2E 0x0D          DC8 2EH, 0DH, 0AH, 0
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_99:
   \   00000000   0x52 0x47          DC8 "RGB Color Light Sensor Status: "
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \              0x72 0x20    
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \              0x53 0x65    
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \              0x74 0x61    
   \              0x74 0x75    
   \              0x73 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_100:
   \   00000000   0x25 0x30          DC8 "%02x / "
   \              0x32 0x78    
   \              0x20 0x2F    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_101:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 3AH, 20H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x3A 0x20    
   \   00000018   0x52 0x45          DC8 52H, 45H, 53H, 45H, 54H, 20H, 43H, 4DH
   \              0x53 0x45    
   \              0x54 0x20    
   \              0x43 0x4D    
   \   00000020   0x44 0x20          DC8 44H, 20H, 53H, 65H, 6EH, 74H, 20H, 53H
   \              0x53 0x65    
   \              0x6E 0x74    
   \              0x20 0x53    
   \   00000028   0x75 0x63          DC8 75H, 63H, 63H, 65H, 73H, 66H, 75H, 6CH
   \              0x63 0x65    
   \              0x73 0x66    
   \              0x75 0x6C    
   \   00000030   0x2E 0x0D          DC8 2EH, 0DH, 0AH, 0
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_102:
   \   00000000   0x52 0x47          DC8 "RGB Color Light Sensor ID Code: "
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \              0x72 0x20    
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \              0x53 0x65    
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x49    
   \              0x44 0x20    
   \              0x43 0x6F    
   \              0x64 0x65    
   \              0x3A 0x20    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_103:
   \   00000000   0x35 0x56          DC8 "5V Power Plane Powered UP.\015\012"
   \              0x20 0x50    
   \              0x6F 0x77    
   \              0x65 0x72    
   \              0x20 0x50    
   \              0x6C 0x61    
   \              0x6E 0x65    
   \              0x20 0x50    
   \              0x6F 0x77    
   \              0x65 0x72    
   \              0x65 0x64    
   \              0x20 0x55    
   \              0x50 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_104:
   \   00000000   0x35 0x56          DC8 "5V Power Plane Powered DOWN.\015\012"
   \              0x20 0x50    
   \              0x6F 0x77    
   \              0x65 0x72    
   \              0x20 0x50    
   \              0x6C 0x61    
   \              0x6E 0x65    
   \              0x20 0x50    
   \              0x6F 0x77    
   \              0x65 0x72    
   \              0x65 0x64    
   \              0x20 0x44    
   \              0x4F 0x57    
   \              0x4E 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_105:
   \   00000000   0x45 0x52          DC8 "ERROR: Illegal 5V Power Plane Command.\015\012"
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x49    
   \              0x6C 0x6C    
   \              0x65 0x67    
   \              0x61 0x6C    
   \              0x20 0x35    
   \              0x56 0x20    
   \              0x50 0x6F    
   \              0x77 0x65    
   \              0x72 0x20    
   \              0x50 0x6C    
   \              0x61 0x6E    
   \              0x65 0x20    
   \              0x43 0x6F    
   \              0x6D 0x6D    
   \              0x61 0x6E    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_106:
   \   00000000   0x54 0x20          DC8 "T ERROR: Not a legal command.\015\012"
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x61    
   \              0x20 0x6C    
   \              0x65 0x67    
   \              0x61 0x6C    
   \              0x20 0x63    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_107:
   \   00000000   0x54 0x49          DC8 "TI SYNTAX ERROR: Not correct format.\015\012"
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x63    
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_108:
   \   00000000   0x54 0x49          DC8 "TIS SYNTAX ERROR: Not correct format.\015\012"
   \              0x53 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x4E 0x6F    
   \              0x74 0x20    
   \              0x63 0x6F    
   \              0x72 0x72    
   \              0x65 0x63    
   \              0x74 0x20    
   \              0x66 0x6F    
   \              0x72 0x6D    
   \              0x61 0x74    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_109:
   \   00000000   0x54 0x49          DC8 "TIS SYNTAX ERROR: Address not HEX Value.\015\012"
   \              0x53 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x41 0x64    
   \              0x64 0x72    
   \              0x65 0x73    
   \              0x73 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x48 0x45    
   \              0x58 0x20    
   \              0x56 0x61    
   \              0x6C 0x75    
   \              0x65 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_110:
   \   00000000   0x54 0x49          DC8 54H, 49H, 53H, 20H, 53H, 59H, 4EH, 54H
   \              0x53 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \   00000008   0x41 0x58          DC8 41H, 58H, 20H, 45H, 52H, 52H, 4FH, 52H
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \   00000010   0x3A 0x20          DC8 3AH, 20H, 4EH, 75H, 6DH, 62H, 65H, 72H
   \              0x4E 0x75    
   \              0x6D 0x62    
   \              0x65 0x72    
   \   00000018   0x20 0x6F          DC8 20H, 6FH, 66H, 20H, 42H, 79H, 74H, 65H
   \              0x66 0x20    
   \              0x42 0x79    
   \              0x74 0x65    
   \   00000020   0x73 0x20          DC8 73H, 20H, 6EH, 6FH, 74H, 20H, 48H, 45H
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x48 0x45    
   \   00000028   0x58 0x20          DC8 58H, 20H, 56H, 61H, 6CH, 75H, 65H, 2EH
   \              0x56 0x61    
   \              0x6C 0x75    
   \              0x65 0x2E    
   \   00000030   0x0D 0x0A          DC8 0DH, 0AH, 0
   \              0x00         
   \   00000033   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_111:
   \   00000000   0x54 0x49          DC8 "TIS: GOOD CMD: %x.\015\012"
   \              0x53 0x3A    
   \              0x20 0x47    
   \              0x4F 0x4F    
   \              0x44 0x20    
   \              0x43 0x4D    
   \              0x44 0x3A    
   \              0x20 0x25    
   \              0x78 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_112:
   \   00000000   0x54 0x49          DC8 "TIS: GOOD CMD: %x."
   \              0x53 0x3A    
   \              0x20 0x47    
   \              0x4F 0x4F    
   \              0x44 0x20    
   \              0x43 0x4D    
   \              0x44 0x3A    
   \              0x20 0x25    
   \              0x78 0x2E    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \   00000000   0x25 0x78          DC8 "%x."
   \              0x2E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_114:
   \   00000000   0x54 0x49          DC8 "TIR SYNTAX ERROR: Not correct format.\015\012"
   \              0x52 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x4E 0x6F    
   \              0x74 0x20    
   \              0x63 0x6F    
   \              0x72 0x72    
   \              0x65 0x63    
   \              0x74 0x20    
   \              0x66 0x6F    
   \              0x72 0x6D    
   \              0x61 0x74    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_115:
   \   00000000   0x54 0x49          DC8 "TIR SYNTAX ERROR: Address not HEX Value.\015\012"
   \              0x52 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x41 0x64    
   \              0x64 0x72    
   \              0x65 0x73    
   \              0x73 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x48 0x45    
   \              0x58 0x20    
   \              0x56 0x61    
   \              0x6C 0x75    
   \              0x65 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_116:
   \   00000000   0x54 0x49          DC8 54H, 49H, 52H, 20H, 53H, 59H, 4EH, 54H
   \              0x52 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \   00000008   0x41 0x58          DC8 41H, 58H, 20H, 45H, 52H, 52H, 4FH, 52H
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \   00000010   0x3A 0x20          DC8 3AH, 20H, 4EH, 75H, 6DH, 62H, 65H, 72H
   \              0x4E 0x75    
   \              0x6D 0x62    
   \              0x65 0x72    
   \   00000018   0x20 0x6F          DC8 20H, 6FH, 66H, 20H, 42H, 79H, 74H, 65H
   \              0x66 0x20    
   \              0x42 0x79    
   \              0x74 0x65    
   \   00000020   0x73 0x20          DC8 73H, 20H, 6EH, 6FH, 74H, 20H, 48H, 45H
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x48 0x45    
   \   00000028   0x58 0x20          DC8 58H, 20H, 56H, 61H, 6CH, 75H, 65H, 2EH
   \              0x56 0x61    
   \              0x6C 0x75    
   \              0x65 0x2E    
   \   00000030   0x0D 0x0A          DC8 0DH, 0AH, 0
   \              0x00         
   \   00000033   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_117:
   \   00000000   0x54 0x49          DC8 54H, 49H, 52H, 20H, 53H, 59H, 4EH, 54H
   \              0x52 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \   00000008   0x41 0x58          DC8 41H, 58H, 20H, 45H, 52H, 52H, 4FH, 52H
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \   00000010   0x3A 0x20          DC8 3AH, 20H, 4EH, 75H, 6DH, 62H, 65H, 72H
   \              0x4E 0x75    
   \              0x6D 0x62    
   \              0x65 0x72    
   \   00000018   0x20 0x6F          DC8 20H, 6FH, 66H, 20H, 42H, 79H, 74H, 65H
   \              0x66 0x20    
   \              0x42 0x79    
   \              0x74 0x65    
   \   00000020   0x73 0x20          DC8 73H, 20H, 52H, 45H, 43H, 45H, 49H, 56H
   \              0x52 0x45    
   \              0x43 0x45    
   \              0x49 0x56    
   \   00000028   0x45 0x44          DC8 45H, 44H, 20H, 6EH, 6FH, 74H, 20H, 48H
   \              0x20 0x6E    
   \              0x6F 0x74    
   \              0x20 0x48    
   \   00000030   0x45 0x58          DC8 45H, 58H, 20H, 56H, 61H, 6CH, 75H, 65H
   \              0x20 0x56    
   \              0x61 0x6C    
   \              0x75 0x65    
   \   00000038   0x2E 0x0D          DC8 2EH, 0DH, 0AH, 0
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_118:
   \   00000000   0x54 0x49          DC8 "TIR: GOOD CMD: %x.\015\012"
   \              0x52 0x3A    
   \              0x20 0x47    
   \              0x4F 0x4F    
   \              0x44 0x20    
   \              0x43 0x4D    
   \              0x44 0x3A    
   \              0x20 0x25    
   \              0x78 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_119:
   \   00000000   0x54 0x49          DC8 "TIR SYNTAX ERROR: Data not HEX Value.\015\012"
   \              0x52 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x44 0x61    
   \              0x74 0x61    
   \              0x20 0x6E    
   \              0x6F 0x74    
   \              0x20 0x48    
   \              0x45 0x58    
   \              0x20 0x56    
   \              0x61 0x6C    
   \              0x75 0x65    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_120:
   \   00000000   0x54 0x49          DC8 "TIR: GOOD CMD: %x."
   \              0x52 0x3A    
   \              0x20 0x47    
   \              0x4F 0x4F    
   \              0x44 0x20    
   \              0x43 0x4D    
   \              0x44 0x3A    
   \              0x20 0x25    
   \              0x78 0x2E    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_121:
   \   00000000   0x20 0x20          DC8 "     DATA: "
   \              0x20 0x20    
   \              0x20 0x44    
   \              0x41 0x54    
   \              0x41 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_122:
   \   00000000   0x54 0x49          DC8 "TIQ SYNTAX ERROR: Not correct format.\015\012"
   \              0x51 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x4E 0x6F    
   \              0x74 0x20    
   \              0x63 0x6F    
   \              0x72 0x72    
   \              0x65 0x63    
   \              0x74 0x20    
   \              0x66 0x6F    
   \              0x72 0x6D    
   \              0x61 0x74    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_123:
   \   00000000   0x54 0x49          DC8 "TIQ SYNTAX ERROR: Address not HEX Value.\015\012"
   \              0x51 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x41 0x64    
   \              0x64 0x72    
   \              0x65 0x73    
   \              0x73 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x48 0x45    
   \              0x58 0x20    
   \              0x56 0x61    
   \              0x6C 0x75    
   \              0x65 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_124:
   \   00000000   0x54 0x49          DC8 54H, 49H, 51H, 20H, 53H, 59H, 4EH, 54H
   \              0x51 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \   00000008   0x41 0x58          DC8 41H, 58H, 20H, 45H, 52H, 52H, 4FH, 52H
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \   00000010   0x3A 0x20          DC8 3AH, 20H, 4EH, 75H, 6DH, 62H, 65H, 72H
   \              0x4E 0x75    
   \              0x6D 0x62    
   \              0x65 0x72    
   \   00000018   0x20 0x6F          DC8 20H, 6FH, 66H, 20H, 42H, 79H, 74H, 65H
   \              0x66 0x20    
   \              0x42 0x79    
   \              0x74 0x65    
   \   00000020   0x73 0x20          DC8 73H, 20H, 6EH, 6FH, 74H, 20H, 48H, 45H
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x48 0x45    
   \   00000028   0x58 0x20          DC8 58H, 20H, 56H, 61H, 6CH, 75H, 65H, 2EH
   \              0x56 0x61    
   \              0x6C 0x75    
   \              0x65 0x2E    
   \   00000030   0x0D 0x0A          DC8 0DH, 0AH, 0
   \              0x00         
   \   00000033   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_125:
   \   00000000   0x3C 0x53          DC8 3CH, 53H, 54H, 41H, 54H, 55H, 53H, 3EH
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \   00000008   0x25 0x73          DC8 25H, 73H, 2FH, 2FH, 25H, 73H, 2FH, 2FH
   \              0x2F 0x2F    
   \              0x25 0x73    
   \              0x2F 0x2F    
   \   00000010   0x25 0x73          DC8 25H, 73H, 2FH, 2FH, 25H, 73H, 2FH, 2FH
   \              0x2F 0x2F    
   \              0x25 0x73    
   \              0x2F 0x2F    
   \   00000018   0x25 0x73          DC8 25H, 73H, 2FH, 2FH, 25H, 73H, 2FH, 2FH
   \              0x2F 0x2F    
   \              0x25 0x73    
   \              0x2F 0x2F    
   \   00000020   0x25 0x73          DC8 25H, 73H, 2FH, 2FH, 25H, 73H, 2FH, 2FH
   \              0x2F 0x2F    
   \              0x25 0x73    
   \              0x2F 0x2F    
   \   00000028   0x25 0x73          DC8 25H, 73H, 2FH, 2FH, 25H, 73H, 2FH, 2FH
   \              0x2F 0x2F    
   \              0x25 0x73    
   \              0x2F 0x2F    
   \   00000030   0x25 0x73          DC8 25H, 73H, 2FH, 2FH, 25H, 73H, 3CH, 2FH
   \              0x2F 0x2F    
   \              0x25 0x73    
   \              0x3C 0x2F    
   \   00000038   0x53 0x54          DC8 53H, 54H, 41H, 54H, 55H, 53H, 3EH, 0
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_126:
   \   00000000   0x25 0x73          DC8 "%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\015\012"
   \              0x2C 0x25    
   \              0x73 0x2C    
   \              0x25 0x73    
   \              0x2C 0x25    
   \              0x73 0x2C    
   \              0x25 0x73    
   \              0x2C 0x25    
   \              0x73 0x2C    
   \              0x25 0x73    
   \              0x2C 0x25    
   \              0x73 0x2C    
   \              0x25 0x73    
   \              0x2C 0x25    
   \              0x73 0x2C    
   \              0x25 0x73    
   \              0x2C 0x25    
   \              0x73 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_127:
   \   00000000   0x43 0x4F          DC8 "COMPLETE"
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_128:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TC_HWERR_PRESSUE</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x5F 0x48    
   \              0x57 0x45    
   \              0x52 0x52    
   \              0x5F 0x50    
   \              0x52 0x45    
   \              0x53 0x53    
   \              0x55 0x45    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_129:
   \   00000000   0x50 0x72          DC8 "Pressure TASKING ERROR!"
   \              0x65 0x73    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x20 0x54    
   \              0x41 0x53    
   \              0x4B 0x49    
   \              0x4E 0x47    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x21 0x00    

   \                                 In section .rodata, align 4
   \                     ?_130:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TC_HWERR_HUMIDITY</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x5F 0x48    
   \              0x57 0x45    
   \              0x52 0x52    
   \              0x5F 0x48    
   \              0x55 0x4D    
   \              0x49 0x44    
   \              0x49 0x54    
   \              0x59 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_131:
   \   00000000   0x48 0x75          DC8 "Humidity TASKING ERROR!"
   \              0x6D 0x69    
   \              0x64 0x69    
   \              0x74 0x79    
   \              0x20 0x54    
   \              0x41 0x53    
   \              0x4B 0x49    
   \              0x4E 0x47    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x21 0x00    

   \                                 In section .rodata, align 4
   \                     ?_132:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TC_HWERR_TEMPERATURE</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x5F 0x48    
   \              0x57 0x45    
   \              0x52 0x52    
   \              0x5F 0x54    
   \              0x45 0x4D    
   \              0x50 0x45    
   \              0x52 0x41    
   \              0x54 0x55    
   \              0x52 0x45    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000002A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_133:
   \   00000000   0x41 0x4D          DC8 "AMBIENT TEMPERATURE TASKING ERROR!"
   \              0x42 0x49    
   \              0x45 0x4E    
   \              0x54 0x20    
   \              0x54 0x45    
   \              0x4D 0x50    
   \              0x45 0x52    
   \              0x41 0x54    
   \              0x55 0x52    
   \              0x45 0x20    
   \              0x54 0x41    
   \              0x53 0x4B    
   \              0x49 0x4E    
   \              0x47 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x21    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_134:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TC_HWERR_IRTEMP</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x5F 0x48    
   \              0x57 0x45    
   \              0x52 0x52    
   \              0x5F 0x49    
   \              0x52 0x54    
   \              0x45 0x4D    
   \              0x50 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_135:
   \   00000000   0x47 0x52          DC8 "GRID EYE/COOL EYE TASKING ERROR!"
   \              0x49 0x44    
   \              0x20 0x45    
   \              0x59 0x45    
   \              0x2F 0x43    
   \              0x4F 0x4F    
   \              0x4C 0x20    
   \              0x45 0x59    
   \              0x45 0x20    
   \              0x54 0x41    
   \              0x53 0x4B    
   \              0x49 0x4E    
   \              0x47 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x21    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_136:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TCS_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x53 0x5F    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_137:
   \   00000000   0x54 0x43          DC8 "TCS SYNTAX ERROR: Not correct format.\015\012"
   \              0x53 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x4E 0x6F    
   \              0x74 0x20    
   \              0x63 0x6F    
   \              0x72 0x72    
   \              0x65 0x63    
   \              0x74 0x20    
   \              0x66 0x6F    
   \              0x72 0x6D    
   \              0x61 0x74    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_138:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TCS_BADPARAM</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x53 0x5F    
   \              0x42 0x41    
   \              0x44 0x50    
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_139:
   \   00000000   0x54 0x43          DC8 "TCS SYNTAX ERROR: Bad Parameter.\015\012"
   \              0x53 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x42 0x61    
   \              0x64 0x20    
   \              0x50 0x61    
   \              0x72 0x61    
   \              0x6D 0x65    
   \              0x74 0x65    
   \              0x72 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_140:
   \   00000000   0x25 0x73          DC8 "%s %f %f"
   \              0x20 0x25    
   \              0x66 0x20    
   \              0x25 0x66    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_141:
   \   00000000   0x50 0x61          DC8 "Parms: %s, %f, %f.\015\012"
   \              0x72 0x6D    
   \              0x73 0x3A    
   \              0x20 0x25    
   \              0x73 0x2C    
   \              0x20 0x25    
   \              0x66 0x2C    
   \              0x20 0x25    
   \              0x66 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_142:
   \   00000000   0x30 0x30          DC8 "0002"
   \              0x30 0x32    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_143:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_SHNT_VLTG</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x53    
   \              0x48 0x4E    
   \              0x54 0x5F    
   \              0x56 0x4C    
   \              0x54 0x47    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_144:
   \   00000000   0x53 0x68          DC8 "Shnt_Vltg Set COMPLETE.\015\012"
   \              0x6E 0x74    
   \              0x5F 0x56    
   \              0x6C 0x74    
   \              0x67 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_145:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_SHNT_VLTG_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x53    
   \              0x48 0x4E    
   \              0x54 0x5F    
   \              0x56 0x4C    
   \              0x54 0x47    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_146:
   \   00000000   0x54 0x43          DC8 "TCS SET ERROR: FAILED.\015\012"
   \              0x53 0x20    
   \              0x53 0x45    
   \              0x54 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x46    
   \              0x41 0x49    
   \              0x4C 0x45    
   \              0x44 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_147:
   \   00000000   0x30 0x30          DC8 "0004"
   \              0x30 0x34    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_148:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_CURRENT</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x43    
   \              0x55 0x52    
   \              0x52 0x45    
   \              0x4E 0x54    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_149:
   \   00000000   0x43 0x75          DC8 "Current Set COMPLETE."
   \              0x72 0x72    
   \              0x65 0x6E    
   \              0x74 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_150:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_CURRENT_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x43    
   \              0x55 0x52    
   \              0x52 0x45    
   \              0x4E 0x54    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_151:
   \   00000000   0x30 0x30          DC8 "0006"
   \              0x30 0x36    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_152:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_POWER</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x50    
   \              0x4F 0x57    
   \              0x45 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_153:
   \   00000000   0x50 0x6F          DC8 "Power Set COMPLETE."
   \              0x77 0x65    
   \              0x72 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_154:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_POWER_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x50    
   \              0x4F 0x57    
   \              0x45 0x52    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_155:
   \   00000000   0x30 0x30          DC8 "0008"
   \              0x30 0x38    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_156:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_VOLTAGE</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x56    
   \              0x4F 0x4C    
   \              0x54 0x41    
   \              0x47 0x45    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_157:
   \   00000000   0x56 0x6F          DC8 "Voltage Set COMPLETE."
   \              0x6C 0x74    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_158:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_VOLTAGE_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x56    
   \              0x4F 0x4C    
   \              0x54 0x41    
   \              0x47 0x45    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_159:
   \   00000000   0x30 0x30          DC8 "000A"
   \              0x30 0x41    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_160:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_TEMPC</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x54    
   \              0x45 0x4D    
   \              0x50 0x43    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_161:
   \   00000000   0x54 0x65          DC8 "TempC Set COMPLETE."
   \              0x6D 0x70    
   \              0x43 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_162:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_TEMPC_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x54    
   \              0x45 0x4D    
   \              0x50 0x43    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_163:
   \   00000000   0x30 0x30          DC8 "000B"
   \              0x30 0x42    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_164:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_TEMPF</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x54    
   \              0x45 0x4D    
   \              0x50 0x46    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_165:
   \   00000000   0x54 0x65          DC8 "TempF Set COMPLETE."
   \              0x6D 0x70    
   \              0x46 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_166:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_TEMPF_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x54    
   \              0x45 0x4D    
   \              0x50 0x46    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_167:
   \   00000000   0x30 0x30          DC8 "0011"
   \              0x31 0x31    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_168:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_PRESSURE</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x50    
   \              0x52 0x45    
   \              0x53 0x53    
   \              0x55 0x52    
   \              0x45 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_169:
   \   00000000   0x50 0x72          DC8 "Pressure Set COMPLETE."
   \              0x65 0x73    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_170:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_PRESSURE_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x50    
   \              0x52 0x45    
   \              0x53 0x53    
   \              0x55 0x52    
   \              0x45 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_171:
   \   00000000   0x30 0x30          DC8 "0030"
   \              0x33 0x30    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_172:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_HUMIDITY</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x48    
   \              0x55 0x4D    
   \              0x49 0x44    
   \              0x49 0x54    
   \              0x59 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_173:
   \   00000000   0x48 0x75          DC8 "Humidity Set COMPLETE."
   \              0x6D 0x69    
   \              0x64 0x69    
   \              0x74 0x79    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_174:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_HUMIDITY_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x48    
   \              0x55 0x4D    
   \              0x49 0x44    
   \              0x49 0x54    
   \              0x59 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_175:
   \   00000000   0x30 0x30          DC8 "0032"
   \              0x33 0x32    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_176:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_HUM_TEMPC</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x48    
   \              0x55 0x4D    
   \              0x5F 0x54    
   \              0x45 0x4D    
   \              0x50 0x43    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_177:
   \   00000000   0x48 0x75          DC8 "Hum_TempC Set COMPLETE."
   \              0x6D 0x5F    
   \              0x54 0x65    
   \              0x6D 0x70    
   \              0x43 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_178:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_HUM_TEMPC_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x48    
   \              0x55 0x4D    
   \              0x5F 0x54    
   \              0x45 0x4D    
   \              0x50 0x43    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_179:
   \   00000000   0x30 0x30          DC8 "0033"
   \              0x33 0x33    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_180:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_HUM_TEMPF</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x48    
   \              0x55 0x4D    
   \              0x5F 0x54    
   \              0x45 0x4D    
   \              0x50 0x46    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_181:
   \   00000000   0x48 0x75          DC8 "Hum_TempF Set COMPLETE."
   \              0x6D 0x5F    
   \              0x54 0x65    
   \              0x6D 0x70    
   \              0x46 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_182:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_HUM_TEMPF_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x48    
   \              0x55 0x4D    
   \              0x5F 0x54    
   \              0x45 0x4D    
   \              0x50 0x46    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_183:
   \   00000000   0x30 0x30          DC8 "000D"
   \              0x30 0x44    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_184:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_RGB_RED</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x47 0x42    
   \              0x5F 0x52    
   \              0x45 0x44    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_185:
   \   00000000   0x52 0x47          DC8 "RGB_Red Set COMPLETE."
   \              0x42 0x5F    
   \              0x52 0x65    
   \              0x64 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_186:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_RGB_RED_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x47 0x42    
   \              0x5F 0x52    
   \              0x45 0x44    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_187:
   \   00000000   0x30 0x30          DC8 "000E"
   \              0x30 0x45    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_188:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_RGB_GREEN</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x47 0x42    
   \              0x5F 0x47    
   \              0x52 0x45    
   \              0x45 0x4E    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_189:
   \   00000000   0x52 0x47          DC8 "RGB_Green Set COMPLETE."
   \              0x42 0x5F    
   \              0x47 0x72    
   \              0x65 0x65    
   \              0x6E 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_190:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_RGB_GREEN_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x47 0x42    
   \              0x5F 0x47    
   \              0x52 0x45    
   \              0x45 0x4E    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_191:
   \   00000000   0x30 0x30          DC8 "000F"
   \              0x30 0x46    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_192:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_RGB_BLUE</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x47 0x42    
   \              0x5F 0x42    
   \              0x4C 0x55    
   \              0x45 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_193:
   \   00000000   0x52 0x47          DC8 "RGB_Blue Set COMPLETE."
   \              0x42 0x5F    
   \              0x42 0x6C    
   \              0x75 0x65    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_194:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_RGB_BLUE_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x47 0x42    
   \              0x5F 0x42    
   \              0x4C 0x55    
   \              0x45 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_195:
   \   00000000   0x30 0x30          DC8 "0017"
   \              0x31 0x37    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_196:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_THERM_C</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x54    
   \              0x48 0x45    
   \              0x52 0x4D    
   \              0x5F 0x43    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_197:
   \   00000000   0x54 0x68          DC8 "Therm_C Set COMPLETE."
   \              0x65 0x72    
   \              0x6D 0x5F    
   \              0x43 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_198:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_THERM_C_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x54    
   \              0x48 0x45    
   \              0x52 0x4D    
   \              0x5F 0x43    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_199:
   \   00000000   0x30 0x30          DC8 "0019"
   \              0x31 0x39    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_200:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_1C</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x31    
   \              0x43 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_201:
   \   00000000   0x52 0x6F          DC8 "RoadT_1C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x31 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_202:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_1C_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x31    
   \              0x43 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_203:
   \   00000000   0x30 0x30          DC8 "001B"
   \              0x31 0x42    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_204:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_2C</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x32    
   \              0x43 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_205:
   \   00000000   0x52 0x6F          DC8 "RoadT_2C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x32 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_206:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_2C_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x32    
   \              0x43 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_207:
   \   00000000   0x30 0x30          DC8 "001D"
   \              0x31 0x44    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_208:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_3C</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x33    
   \              0x43 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_209:
   \   00000000   0x52 0x6F          DC8 "RoadT_3C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x33 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_210:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_3C_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x33    
   \              0x43 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_211:
   \   00000000   0x30 0x30          DC8 "001F"
   \              0x31 0x46    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_212:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_4C</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x34    
   \              0x43 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_213:
   \   00000000   0x52 0x6F          DC8 "RoadT_4C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x34 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_214:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_4C_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x34    
   \              0x43 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_215:
   \   00000000   0x30 0x30          DC8 "0021"
   \              0x32 0x31    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_216:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_5C</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x35    
   \              0x43 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_217:
   \   00000000   0x52 0x6F          DC8 "RoadT_5C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x35 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_218:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_5C_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x35    
   \              0x43 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_219:
   \   00000000   0x30 0x30          DC8 "0023"
   \              0x32 0x33    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_220:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_6C</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x36    
   \              0x43 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_221:
   \   00000000   0x52 0x6F          DC8 "RoadT_6C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x36 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_222:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_6C_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x36    
   \              0x43 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_223:
   \   00000000   0x30 0x30          DC8 "0025"
   \              0x32 0x35    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_224:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_7C</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x37    
   \              0x43 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_225:
   \   00000000   0x52 0x6F          DC8 "RoadT_7C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x37 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_226:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_7C_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x37    
   \              0x43 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_227:
   \   00000000   0x30 0x30          DC8 "0027"
   \              0x32 0x37    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_228:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_8C</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x38    
   \              0x43 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_229:
   \   00000000   0x52 0x6F          DC8 "RoadT_8C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x38 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_230:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_8C_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x38    
   \              0x43 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_231:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TCS_BADUUID</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x53 0x5F    
   \              0x42 0x41    
   \              0x44 0x55    
   \              0x55 0x49    
   \              0x44 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_232:
   \   00000000   0x54 0x43          DC8 "TCS SYNTAX ERROR: Bad UUID.\015\012"
   \              0x53 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x42 0x61    
   \              0x64 0x20    
   \              0x55 0x55    
   \              0x49 0x44    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_233:
   \   00000000   0x54 0x43          DC8 "TCS SYNTAX ERROR: Wrong Number of Parameters.\015\012"
   \              0x53 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x57 0x72    
   \              0x6F 0x6E    
   \              0x67 0x20    
   \              0x4E 0x75    
   \              0x6D 0x62    
   \              0x65 0x72    
   \              0x20 0x6F    
   \              0x66 0x20    
   \              0x50 0x61    
   \              0x72 0x61    
   \              0x6D 0x65    
   \              0x74 0x65    
   \              0x72 0x73    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_234:
   \   00000000   0x3C 0x53          DC8 "<STATUS>TCR:%s\\"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x54 0x43    
   \              0x52 0x3A    
   \              0x25 0x73    
   \              0x5C 0x00    

   \                                 In section .rodata, align 4
   \                     ?_235:
   \   00000000   0x43 0x41          DC8 "CALIBRATION DATA\015\012Date: %s\015\012"
   \              0x4C 0x49    
   \              0x42 0x52    
   \              0x41 0x54    
   \              0x49 0x4F    
   \              0x4E 0x20    
   \              0x44 0x41    
   \              0x54 0x41    
   \              0x0D 0x0A    
   \              0x44 0x61    
   \              0x74 0x65    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_236:
   \   00000000   0x4E 0x61          DC8 "Name\t\t        UUID\t\tSlope\t\tOffset\015\012"
   \              0x6D 0x65    
   \              0x09 0x09    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x55 0x55    
   \              0x49 0x44    
   \              0x09 0x09    
   \              0x53 0x6C    
   \              0x6F 0x70    
   \              0x65 0x09    
   \              0x09 0x4F    
   \              0x66 0x66    
   \              0x73 0x65    
   \              0x74 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_237:
   \   00000000   0x25 0x73          DC8 "%s:0002//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x30    
   \              0x32 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_238:
   \   00000000   0x25 0x73          DC8 "%s\t0002\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x30    
   \              0x32 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_239:
   \   00000000   0x25 0x73          DC8 "%s:0004//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x30    
   \              0x34 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_240:
   \   00000000   0x25 0x73          DC8 "%s\t        0004\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x30    
   \              0x30 0x30    
   \              0x34 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_241:
   \   00000000   0x25 0x73          DC8 "%s:0006//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x30    
   \              0x36 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_242:
   \   00000000   0x25 0x73          DC8 "%s\t0006\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x30    
   \              0x36 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_243:
   \   00000000   0x25 0x73          DC8 "%s:0008//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x30    
   \              0x38 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_244:
   \   00000000   0x25 0x73          DC8 "%s\t        0008\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x30    
   \              0x30 0x30    
   \              0x38 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_245:
   \   00000000   0x25 0x73          DC8 "%s:000A//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x30    
   \              0x41 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_246:
   \   00000000   0x25 0x73          DC8 "%s\t000A\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x30    
   \              0x41 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_247:
   \   00000000   0x25 0x73          DC8 "%s:000B//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x30    
   \              0x42 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_248:
   \   00000000   0x25 0x73          DC8 "%s\t000B\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x30    
   \              0x42 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_249:
   \   00000000   0x25 0x73          DC8 "%s:0011//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x31    
   \              0x31 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_250:
   \   00000000   0x25 0x73          DC8 "%s\t0011\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x31    
   \              0x31 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_251:
   \   00000000   0x25 0x73          DC8 "%s:0030//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x33    
   \              0x30 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_252:
   \   00000000   0x25 0x73          DC8 "%s\t0030\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x33    
   \              0x30 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_253:
   \   00000000   0x25 0x73          DC8 "%s:0032//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x33    
   \              0x32 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_254:
   \   00000000   0x25 0x73          DC8 "%s\t0032\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x33    
   \              0x32 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_255:
   \   00000000   0x25 0x73          DC8 "%s:0033//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x33    
   \              0x33 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_256:
   \   00000000   0x25 0x73          DC8 "%s\t0033\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x33    
   \              0x33 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_257:
   \   00000000   0x25 0x73          DC8 "%s:000D//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x30    
   \              0x44 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_258:
   \   00000000   0x25 0x73          DC8 "%s\t        000D\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x30    
   \              0x30 0x30    
   \              0x44 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_259:
   \   00000000   0x25 0x73          DC8 "%s:000E//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x30    
   \              0x45 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_260:
   \   00000000   0x25 0x73          DC8 "%s\t000E\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x30    
   \              0x45 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_261:
   \   00000000   0x25 0x73          DC8 "%s:000F//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x30    
   \              0x46 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_262:
   \   00000000   0x25 0x73          DC8 "%s\t000F\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x30    
   \              0x46 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_263:
   \   00000000   0x25 0x73          DC8 "%s:0017//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x31    
   \              0x37 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_264:
   \   00000000   0x25 0x73          DC8 "%s\t        0017\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x30    
   \              0x30 0x31    
   \              0x37 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_265:
   \   00000000   0x25 0x73          DC8 "%s:0019//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x31    
   \              0x39 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_266:
   \   00000000   0x25 0x73          DC8 "%s\t0019\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x31    
   \              0x39 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_267:
   \   00000000   0x25 0x73          DC8 "%s:001B//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x31    
   \              0x42 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_268:
   \   00000000   0x25 0x73          DC8 "%s\t001B\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x31    
   \              0x42 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_269:
   \   00000000   0x25 0x73          DC8 "%s:001D//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x31    
   \              0x44 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_270:
   \   00000000   0x25 0x73          DC8 "%s\t001D\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x31    
   \              0x44 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_271:
   \   00000000   0x25 0x73          DC8 "%s:001F//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x31    
   \              0x46 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_272:
   \   00000000   0x25 0x73          DC8 "%s\t001F\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x31    
   \              0x46 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_273:
   \   00000000   0x25 0x73          DC8 "%s:0021//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x32    
   \              0x31 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_274:
   \   00000000   0x25 0x73          DC8 "%s\t0021\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x32    
   \              0x31 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_275:
   \   00000000   0x25 0x73          DC8 "%s:0023//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x32    
   \              0x33 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_276:
   \   00000000   0x25 0x73          DC8 "%s\t0023\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x32    
   \              0x33 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_277:
   \   00000000   0x25 0x73          DC8 "%s:0025//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x32    
   \              0x35 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_278:
   \   00000000   0x25 0x73          DC8 "%s\t0025\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x32    
   \              0x35 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_279:
   \   00000000   0x25 0x73          DC8 "%s:0027//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x32    
   \              0x37 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_280:
   \   00000000   0x25 0x73          DC8 "%s\t0027\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x32    
   \              0x37 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_281:
   \   00000000   0x0D 0x0A          DC8 "\015\012     COMPLETE.\015\012"
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_282:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TCT_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x54 0x5F    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_283:
   \   00000000   0x54 0x43          DC8 "TCT SYNTAX ERROR: Not correct format.\015\012"
   \              0x54 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x4E 0x6F    
   \              0x74 0x20    
   \              0x63 0x6F    
   \              0x72 0x72    
   \              0x65 0x63    
   \              0x74 0x20    
   \              0x66 0x6F    
   \              0x72 0x6D    
   \              0x61 0x74    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_284:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TCT_BADPARAM</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x54 0x5F    
   \              0x42 0x41    
   \              0x44 0x50    
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_285:
   \   00000000   0x54 0x43          DC8 "TCT SYNTAX ERROR: Bad Parameter.\015\012"
   \              0x54 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x42 0x61    
   \              0x64 0x20    
   \              0x50 0x61    
   \              0x72 0x61    
   \              0x6D 0x65    
   \              0x74 0x65    
   \              0x72 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_286:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TCT_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x54 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_287:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCT_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x54    
   \              0x5F 0x41    
   \              0x43 0x4B    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_288:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TCI_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x49 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_289:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCI_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x49    
   \              0x5F 0x41    
   \              0x43 0x4B    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_290:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_DRIVER:%04x</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x44    
   \              0x52 0x49    
   \              0x56 0x45    
   \              0x52 0x3A    
   \              0x25 0x30    
   \              0x34 0x78    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_291:
   \   00000000   0x44 0x72          DC8 "Driver Status: %04x\015\012"
   \              0x69 0x76    
   \              0x65 0x72    
   \              0x20 0x53    
   \              0x74 0x61    
   \              0x74 0x75    
   \              0x73 0x3A    
   \              0x20 0x25    
   \              0x30 0x34    
   \              0x78 0x0D    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_292:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_RESET_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x52    
   \              0x45 0x53    
   \              0x45 0x54    
   \              0x5F 0x41    
   \              0x43 0x4B    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_293:
   \   00000000   0x52 0x45          DC8 "RESET CALLED BUT NO RESPONSE!!\015\012"
   \              0x53 0x45    
   \              0x54 0x20    
   \              0x43 0x41    
   \              0x4C 0x4C    
   \              0x45 0x44    
   \              0x20 0x42    
   \              0x55 0x54    
   \              0x20 0x4E    
   \              0x4F 0x20    
   \              0x52 0x45    
   \              0x53 0x50    
   \              0x4F 0x4E    
   \              0x53 0x45    
   \              0x21 0x21    
   \              0x0D 0x0A    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_294:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TK_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x5F 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_295:
   \   00000000   0x54 0x4B          DC8 "TK SYNTAX ERROR: Not correct format.\015\012"
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x63    
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_296:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKSR_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x53 0x52    
   \              0x5F 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_297:
   \   00000000   0x54 0x4B          DC8 "TKSR SYNTAX ERROR: Not correct format.\015\012"
   \              0x53 0x52    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x63    
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_298:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKSR_BADPARAM</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x53 0x52    
   \              0x5F 0x42    
   \              0x41 0x44    
   \              0x50 0x41    
   \              0x52 0x41    
   \              0x4D 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_299:
   \   00000000   0x54 0x4B          DC8 "TKSR SYNTAX ERROR: Bad Parameter.\015\012"
   \              0x53 0x52    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x61 0x64    
   \              0x20 0x50    
   \              0x61 0x72    
   \              0x61 0x6D    
   \              0x65 0x74    
   \              0x65 0x72    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_300:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TKSR_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x4B 0x53    
   \              0x52 0x5F    
   \              0x41 0x43    
   \              0x4B 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_301:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKSS_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x53 0x53    
   \              0x5F 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_302:
   \   00000000   0x54 0x4B          DC8 "TKSS SYNTAX ERROR: Not correct format.\015\012"
   \              0x53 0x53    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x63    
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_303:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKSS_BADPARAM</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x53 0x53    
   \              0x5F 0x42    
   \              0x41 0x44    
   \              0x50 0x41    
   \              0x52 0x41    
   \              0x4D 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_304:
   \   00000000   0x54 0x4B          DC8 "TKSS SYNTAX ERROR: Bad Parameter.\015\012"
   \              0x53 0x53    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x61 0x64    
   \              0x20 0x50    
   \              0x61 0x72    
   \              0x61 0x6D    
   \              0x65 0x74    
   \              0x65 0x72    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_305:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TKSS_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x4B 0x53    
   \              0x53 0x5F    
   \              0x41 0x43    
   \              0x4B 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_306:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKST_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x53 0x54    
   \              0x5F 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_307:
   \   00000000   0x54 0x4B          DC8 "TKST SYNTAX ERROR: Not correct format.\015\012"
   \              0x53 0x54    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x63    
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_308:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKST_BADPARAM</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x53 0x54    
   \              0x5F 0x42    
   \              0x41 0x44    
   \              0x50 0x41    
   \              0x52 0x41    
   \              0x4D 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_309:
   \   00000000   0x54 0x4B          DC8 "TKST SYNTAX ERROR: Bad Parameter.\015\012"
   \              0x53 0x54    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x61 0x64    
   \              0x20 0x50    
   \              0x61 0x72    
   \              0x61 0x6D    
   \              0x65 0x74    
   \              0x65 0x72    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_310:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TKST_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x4B 0x53    
   \              0x54 0x5F    
   \              0x41 0x43    
   \              0x4B 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_311:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKSB_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x53 0x42    
   \              0x5F 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_312:
   \   00000000   0x54 0x4B          DC8 "TKSB SYNTAX ERROR: Not correct format.\015\012"
   \              0x53 0x42    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x63    
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_313:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKSB_BADPARAM</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x53 0x42    
   \              0x5F 0x42    
   \              0x41 0x44    
   \              0x50 0x41    
   \              0x52 0x41    
   \              0x4D 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_314:
   \   00000000   0x54 0x4B          DC8 "TKSB SYNTAX ERROR: Bad Parameter.\015\012"
   \              0x53 0x42    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x61 0x64    
   \              0x20 0x50    
   \              0x61 0x72    
   \              0x61 0x6D    
   \              0x65 0x74    
   \              0x65 0x72    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_315:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TKSB_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x4B 0x53    
   \              0x42 0x5F    
   \              0x41 0x43    
   \              0x4B 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_316:
   \   00000000   0x54 0x4B          DC8 "TKS ERROR: Not a legal command.\015\012"
   \              0x53 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x61    
   \              0x20 0x6C    
   \              0x65 0x67    
   \              0x61 0x6C    
   \              0x20 0x63    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_317:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TKRR:%3.1f</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x4B 0x52    
   \              0x52 0x3A    
   \              0x25 0x33    
   \              0x2E 0x31    
   \              0x66 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_318:
   \   00000000   0x52 0x64          DC8 "RdSnd Sample Rate:  %3.1f Seconds.\015\012"
   \              0x53 0x6E    
   \              0x64 0x20    
   \              0x53 0x61    
   \              0x6D 0x70    
   \              0x6C 0x65    
   \              0x20 0x52    
   \              0x61 0x74    
   \              0x65 0x3A    
   \              0x20 0x20    
   \              0x25 0x33    
   \              0x2E 0x31    
   \              0x66 0x20    
   \              0x53 0x65    
   \              0x63 0x6F    
   \              0x6E 0x64    
   \              0x73 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_319:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TKRS:%3.1f</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x4B 0x52    
   \              0x53 0x3A    
   \              0x25 0x33    
   \              0x2E 0x31    
   \              0x66 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_320:
   \   00000000   0x53 0x65          DC8 "Sensor Sample Rate: %3.1f Seconds.\015\012\015\012> "
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \              0x61 0x6D    
   \              0x70 0x6C    
   \              0x65 0x20    
   \              0x52 0x61    
   \              0x74 0x65    
   \              0x3A 0x20    
   \              0x25 0x33    
   \              0x2E 0x31    
   \              0x66 0x20    
   \              0x53 0x65    
   \              0x63 0x6F    
   \              0x6E 0x64    
   \              0x73 0x2E    
   \              0x0D 0x0A    
   \              0x0D 0x0A    
   \              0x3E 0x20    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_321:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TKRT:%d</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x4B 0x52    
   \              0x54 0x3A    
   \              0x25 0x64    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_322:
   \   00000000   0x54 0x41          DC8 "TACK Limit: %d.\015\012\015\012> "
   \              0x43 0x4B    
   \              0x20 0x4C    
   \              0x69 0x6D    
   \              0x69 0x74    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x0D    
   \              0x0A 0x3E    
   \              0x20 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_323:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TKRB:%d</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x4B 0x52    
   \              0x42 0x3A    
   \              0x25 0x64    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_324:
   \   00000000   0x42 0x6F          DC8 "Boot Delay: %d Seconds.\015\012\015\012> "
   \              0x6F 0x74    
   \              0x20 0x44    
   \              0x65 0x6C    
   \              0x61 0x79    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x20 0x53    
   \              0x65 0x63    
   \              0x6F 0x6E    
   \              0x64 0x73    
   \              0x2E 0x0D    
   \              0x0A 0x0D    
   \              0x0A 0x3E    
   \              0x20 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_325:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKR_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x52 0x5F    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_326:
   \   00000000   0x54 0x4B          DC8 "TKR ERROR: Not a legal command.\015\012"
   \              0x52 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x61    
   \              0x20 0x6C    
   \              0x65 0x67    
   \              0x61 0x6C    
   \              0x20 0x63    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_327:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TU_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x55    
   \              0x5F 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_328:
   \   00000000   0x54 0x55          DC8 "TU SYNTAX ERROR: Not correct format.\015\012"
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x63    
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_329:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TUE_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x55 0x45    
   \              0x5F 0x41    
   \              0x43 0x4B    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_330:
   \   00000000   0x55 0x6E          DC8 "Units XML State CHANGED: ENABLED\015\012\015\012> "
   \              0x69 0x74    
   \              0x73 0x20    
   \              0x58 0x4D    
   \              0x4C 0x20    
   \              0x53 0x74    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x43 0x48    
   \              0x41 0x4E    
   \              0x47 0x45    
   \              0x44 0x3A    
   \              0x20 0x45    
   \              0x4E 0x41    
   \              0x42 0x4C    
   \              0x45 0x44    
   \              0x0D 0x0A    
   \              0x0D 0x0A    
   \              0x3E 0x20    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_331:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TUD_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x55 0x44    
   \              0x5F 0x41    
   \              0x43 0x4B    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_332:
   \   00000000   0x55 0x6E          DC8 "Units XML State CHANGED: DISABLED\015\012\015\012> "
   \              0x69 0x74    
   \              0x73 0x20    
   \              0x58 0x4D    
   \              0x4C 0x20    
   \              0x53 0x74    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x43 0x48    
   \              0x41 0x4E    
   \              0x47 0x45    
   \              0x44 0x3A    
   \              0x20 0x44    
   \              0x49 0x53    
   \              0x41 0x42    
   \              0x4C 0x45    
   \              0x44 0x0D    
   \              0x0A 0x0D    
   \              0x0A 0x3E    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_333:
   \   00000000   0x54 0x55          DC8 "TU SYNTAX ERROR: Not a legal command.\015\012"
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x61    
   \              0x20 0x6C    
   \              0x65 0x67    
   \              0x61 0x6C    
   \              0x20 0x63    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_334:
   \   00000000   0x42 0x47          DC8 "BGM111 MONITOR MODE.\015\012\015\012"
   \              0x4D 0x31    
   \              0x31 0x31    
   \              0x20 0x4D    
   \              0x4F 0x4E    
   \              0x49 0x54    
   \              0x4F 0x52    
   \              0x20 0x4D    
   \              0x4F 0x44    
   \              0x45 0x2E    
   \              0x0D 0x0A    
   \              0x0D 0x0A    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_335:
   \   00000000   0x55 0x73          DC8 "Use <ESC> to exit mode.\015\012\015\012"
   \              0x65 0x20    
   \              0x3C 0x45    
   \              0x53 0x43    
   \              0x3E 0x20    
   \              0x74 0x6F    
   \              0x20 0x65    
   \              0x78 0x69    
   \              0x74 0x20    
   \              0x6D 0x6F    
   \              0x64 0x65    
   \              0x2E 0x0D    
   \              0x0A 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_336:
   \   00000000   0x3C 0x53          DC8 "<STATUS>TF_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x54 0x46    
   \              0x5F 0x41    
   \              0x43 0x4B    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_337:
   \   00000000   0x46 0x6C          DC8 "Flash Frame Variables Reset to Factory Values.\015\012"
   \              0x61 0x73    
   \              0x68 0x20    
   \              0x46 0x72    
   \              0x61 0x6D    
   \              0x65 0x20    
   \              0x56 0x61    
   \              0x72 0x69    
   \              0x61 0x62    
   \              0x6C 0x65    
   \              0x73 0x20    
   \              0x52 0x65    
   \              0x73 0x65    
   \              0x74 0x20    
   \              0x74 0x6F    
   \              0x20 0x46    
   \              0x61 0x63    
   \              0x74 0x6F    
   \              0x72 0x79    
   \              0x20 0x56    
   \              0x61 0x6C    
   \              0x75 0x65    
   \              0x73 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000031   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_338:
   \   00000000   0x3C 0x53          DC8 "<STATUS>TL_ERROR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x54 0x4C    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_339:
   \   00000000   0x43 0x6F          DC8 "Code Locked for Programming!\015\012\015\012"
   \              0x64 0x65    
   \              0x20 0x4C    
   \              0x6F 0x63    
   \              0x6B 0x65    
   \              0x64 0x20    
   \              0x66 0x6F    
   \              0x72 0x20    
   \              0x50 0x72    
   \              0x6F 0x67    
   \              0x72 0x61    
   \              0x6D 0x6D    
   \              0x69 0x6E    
   \              0x67 0x21    
   \              0x0D 0x0A    
   \              0x0D 0x0A    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_340:
   \   00000000   0x20 0x20          DC8 "   HARD RESET NEEDED TO EXIT MODE\015\012"
   \              0x20 0x48    
   \              0x41 0x52    
   \              0x44 0x20    
   \              0x52 0x45    
   \              0x53 0x45    
   \              0x54 0x20    
   \              0x4E 0x45    
   \              0x45 0x44    
   \              0x45 0x44    
   \              0x20 0x54    
   \              0x4F 0x20    
   \              0x45 0x58    
   \              0x49 0x54    
   \              0x20 0x4D    
   \              0x4F 0x44    
   \              0x45 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_341:
   \   00000000   0x25 0x73          DC8 "%s %s"
   \              0x20 0x25    
   \              0x73 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_342:
   \   00000000   0x54 0x53          DC8 "TS: %s\015\012"
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_343:
   \   00000000   0x54 0x53          DC8 "TS SYNTAX ERROR: Too many parameters.\015\012"
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x54    
   \              0x6F 0x6F    
   \              0x20 0x6D    
   \              0x61 0x6E    
   \              0x79 0x20    
   \              0x70 0x61    
   \              0x72 0x61    
   \              0x6D 0x65    
   \              0x74 0x65    
   \              0x72 0x73    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_344:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: BERR: Bus Error reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x45 0x52    
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x75 0x73    
   \              0x20 0x45    
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x20 0x72    
   \              0x65 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_345:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: ARLO: Arbitration lost reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x41    
   \              0x52 0x4C    
   \              0x4F 0x3A    
   \              0x20 0x41    
   \              0x72 0x62    
   \              0x69 0x74    
   \              0x72 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x6C    
   \              0x6F 0x73    
   \              0x74 0x20    
   \              0x72 0x65    
   \              0x70 0x6F    
   \              0x72 0x74    
   \              0x65 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   0000002E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_346:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: AF: Acknowledge failure reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x41    
   \              0x46 0x3A    
   \              0x20 0x41    
   \              0x63 0x6B    
   \              0x6E 0x6F    
   \              0x77 0x6C    
   \              0x65 0x64    
   \              0x67 0x65    
   \              0x20 0x66    
   \              0x61 0x69    
   \              0x6C 0x75    
   \              0x72 0x65    
   \              0x20 0x72    
   \              0x65 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_347:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: OVR: Overrun/Underrun reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4F    
   \              0x56 0x52    
   \              0x3A 0x20    
   \              0x4F 0x76    
   \              0x65 0x72    
   \              0x72 0x75    
   \              0x6E 0x2F    
   \              0x55 0x6E    
   \              0x64 0x65    
   \              0x72 0x72    
   \              0x75 0x6E    
   \              0x20 0x72    
   \              0x65 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_348:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: DMA: DMA Error reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x44    
   \              0x4D 0x41    
   \              0x3A 0x20    
   \              0x44 0x4D    
   \              0x41 0x20    
   \              0x45 0x72    
   \              0x72 0x6F    
   \              0x72 0x20    
   \              0x72 0x65    
   \              0x70 0x6F    
   \              0x72 0x74    
   \              0x65 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_349:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: TIMEOUT: Timeout Error reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x54    
   \              0x49 0x4D    
   \              0x45 0x4F    
   \              0x55 0x54    
   \              0x3A 0x20    
   \              0x54 0x69    
   \              0x6D 0x65    
   \              0x6F 0x75    
   \              0x74 0x20    
   \              0x45 0x72    
   \              0x72 0x6F    
   \              0x72 0x20    
   \              0x72 0x65    
   \              0x70 0x6F    
   \              0x72 0x74    
   \              0x65 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   0000002E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_350:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: Unknown Error reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x55    
   \              0x6E 0x6B    
   \              0x6E 0x6F    
   \              0x77 0x6E    
   \              0x20 0x45    
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x20 0x72    
   \              0x65 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_351:
   \   00000000   0x49 0x32          DC8 "I2C BUSY: I2C reported BUSY error.\015\012"
   \              0x43 0x20    
   \              0x42 0x55    
   \              0x53 0x59    
   \              0x3A 0x20    
   \              0x49 0x32    
   \              0x43 0x20    
   \              0x72 0x65    
   \              0x70 0x6F    
   \              0x72 0x74    
   \              0x65 0x64    
   \              0x20 0x42    
   \              0x55 0x53    
   \              0x59 0x20    
   \              0x65 0x72    
   \              0x72 0x6F    
   \              0x72 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_352:
   \   00000000   0x49 0x32          DC8 "I2C TIMEOUT: I2C reported TIMEOUT.\015\012"
   \              0x43 0x20    
   \              0x54 0x49    
   \              0x4D 0x45    
   \              0x4F 0x55    
   \              0x54 0x3A    
   \              0x20 0x49    
   \              0x32 0x43    
   \              0x20 0x72    
   \              0x65 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x20    
   \              0x54 0x49    
   \              0x4D 0x45    
   \              0x4F 0x55    
   \              0x54 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_353:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: I2C reported unnown error.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x49    
   \              0x32 0x43    
   \              0x20 0x72    
   \              0x65 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x20    
   \              0x75 0x6E    
   \              0x6E 0x6F    
   \              0x77 0x6E    
   \              0x20 0x65    
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_354:
   \   00000000   0x0D 0x0A          DC8 "\015\012\015\012> "
   \              0x0D 0x0A    
   \              0x3E 0x20    
   \              0x00         
   \   00000007   0x00               DC8 0
   4460          
   4461          /*void sleep(void) {
   4462          //    TimMasterHandle.Instance = TIM5;
   4463           
   4464              // Disable HAL tick interrupt
   4465          //    __HAL_TIM_DISABLE_IT(&TimMasterHandle, TIM_IT_CC2);
   4466           
   4467              // Request to enter SLEEP mode
   4468              HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
   4469           
   4470              // Enable HAL tick interrupt
   4471          //    __HAL_TIM_ENABLE_IT(&TimMasterHandle, TIM_IT_CC2);
   4472          }*/
   4473           
   4474          /*void deepsleep(void) {
   4475              // Request to enter STOP mode with regulator in low power mode
   4476              HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
   4477           
   4478              // After wake-up from STOP reconfigure the PLL
   4479              //SetSysClock();
   4480              SystemClock_Config();
   4481          }*/
   4482          
   4483          /************************ (C) COPYRIGHT WeatherCloud *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
    1240   RoadBrd_ParseString
      1240   -> BGM111_Transmit
      1240   -> Get_DriverStates
      1240   -> Get_DriverStatus
      1240   -> HAL_Delay
      1240   -> HAL_NVIC_SystemReset
      1240   -> MX_I2C1_Reset
      1240   -> RdBrd_CAL_GetStr
      1240   -> RoadBrdSnd_ClrBffrs
      1240   -> RoadBrdSnd_DumpBin0
      1240   -> RoadBrdSnd_DumpBin16
      1240   -> RoadBrdSnd_DumpBin32
      1240   -> RoadBrdSnd_DumpBin48
      1240   -> RoadBrdSnd_ProcessSound
      1240   -> RoadBrdSnd_getSaveBffr
      1240   -> RoadBrd_Baro_ReadPressure
      1240   -> RoadBrd_Baro_ReadPressure_Scaled
      1240   -> RoadBrd_Baro_ReadTemp
      1240   -> RoadBrd_CAL_GetOffset
      1240   -> RoadBrd_CAL_GetSlope
      1240   -> RoadBrd_CAL_GetTimeString
      1240   -> RoadBrd_CAL_InitializeFrmFlash
      1240   -> RoadBrd_CAL_Set_CalItem
      1240   -> RoadBrd_CAL_Set_TimeString
      1240   -> RoadBrd_CoolEye_ReadValues
      1240   -> RoadBrd_CoolEye_ReadValues_Scaled
      1240   -> RoadBrd_Get_BootDelay
      1240   -> RoadBrd_Get_RdSndTickCnt
      1240   -> RoadBrd_Get_SnsrTickCnt
      1240   -> RoadBrd_Get_TackLimit
      1240   -> RoadBrd_GridEyeInit
      1240   -> RoadBrd_GridEyeReset
      1240   -> RoadBrd_GridEye_ReadValues
      1240   -> RoadBrd_GridEye_ReadValues_Scaled
      1240   -> RoadBrd_HumidityInit
      1240   -> RoadBrd_Humidity_ReadHumidity
      1240   -> RoadBrd_Humidity_ReadHumidity_Scaled
      1240   -> RoadBrd_Humidity_ReadTemperature
      1240   -> RoadBrd_I2C_GetError
      1240   -> RoadBrd_I2C_Master_Receive
      1240   -> RoadBrd_I2C_Master_Transmit
      1240   -> RoadBrd_Init_Barometer
      1240   -> RoadBrd_Init_VMonitor
      1240   -> RoadBrd_RGBFullInit
      1240   -> RoadBrd_RGBInit
      1240   -> RoadBrd_RGBReadID
      1240   -> RoadBrd_RGBReadStatus
      1240   -> RoadBrd_RGBReadValues
      1240   -> RoadBrd_RGBReset
      1240   -> RoadBrd_ReadTemp
      1240   -> RoadBrd_ReadTemp_Scaled
      1240   -> RoadBrd_Set_BootDelay
      1240   -> RoadBrd_Set_RdSndTickCnt
      1240   -> RoadBrd_Set_SnsrTickCnt
      1240   -> RoadBrd_Set_TackLimit
      1240   -> RoadBrd_Set_UnitsFlag
      1240   -> RoadBrd_TestandRead_Barometer
      1240   -> RoadBrd_UART_Transmit
      1240   -> RoadBrd_VMonitor_RdCurrent
      1240   -> RoadBrd_VMonitor_RdCurrent_Scaled
      1240   -> RoadBrd_VMonitor_RdPower
      1240   -> RoadBrd_VMonitor_RdPower_Scaled
      1240   -> RoadBrd_VMonitor_RdShntVltg
      1240   -> RoadBrd_VMonitor_RdShntVltg_Scaled
      1240   -> RoadBrd_VMonitor_RdVoltage
      1240   -> RoadBrd_VMonitor_RdVoltage_Scaled
      1240   -> RoadBrd_WWDG_InitializeFrmFlash
      1240   -> RoadBrd_WaitForState
      1240   -> RoadBrd_gpio_Off
      1240   -> RoadBrd_gpio_On
      1240   -> __aeabi_f2d
      1240   -> __aeabi_fdiv
      1240   -> __aeabi_ui2f
      1240   -> atoi
      1240   -> hatoi
      1240   -> isHexNum
      1240   -> isdigit
      1240   -> sprintf
      1240   -> sscanf
      1240   -> strcat
      1240   -> strcpy
      1240   -> strlen
      1240   -> strncmp
       0   RoadBrd_ParserInit
       8   RoadBrd_ParserTsk
         8   -> strcpy
         8   -> strlen
       8   RoadBrd_ProcessParserTsk
         8   -> RoadBrd_ParseString
       0   Tst_Bypass
      24   hatoi
        24   -> strlen
      24   isHexNum
        24   -> strlen


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_10
       4  ??DataTable3_11
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable3_9
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_10
       4  ??DataTable4_11
       4  ??DataTable4_12
       4  ??DataTable4_13
       4  ??DataTable4_14
       4  ??DataTable4_15
       4  ??DataTable4_16
       4  ??DataTable4_17
       4  ??DataTable4_18
       4  ??DataTable4_19
       4  ??DataTable4_2
       4  ??DataTable4_20
       4  ??DataTable4_21
       4  ??DataTable4_22
       4  ??DataTable4_23
       4  ??DataTable4_24
       4  ??DataTable4_25
       4  ??DataTable4_26
       4  ??DataTable4_27
       4  ??DataTable4_28
       4  ??DataTable4_29
       4  ??DataTable4_3
       4  ??DataTable4_30
       4  ??DataTable4_31
       4  ??DataTable4_32
       4  ??DataTable4_33
       4  ??DataTable4_34
       4  ??DataTable4_35
       4  ??DataTable4_36
       4  ??DataTable4_37
       4  ??DataTable4_38
       4  ??DataTable4_39
       4  ??DataTable4_4
       4  ??DataTable4_40
       4  ??DataTable4_41
       4  ??DataTable4_42
       4  ??DataTable4_43
       4  ??DataTable4_44
       4  ??DataTable4_45
       4  ??DataTable4_46
       4  ??DataTable4_47
       4  ??DataTable4_48
       4  ??DataTable4_49
       4  ??DataTable4_5
       4  ??DataTable4_50
       4  ??DataTable4_51
       4  ??DataTable4_52
       4  ??DataTable4_53
       4  ??DataTable4_54
       4  ??DataTable4_55
       4  ??DataTable4_56
       4  ??DataTable4_57
       4  ??DataTable4_58
       4  ??DataTable4_59
       4  ??DataTable4_6
       4  ??DataTable4_60
       4  ??DataTable4_61
       4  ??DataTable4_62
       4  ??DataTable4_63
       4  ??DataTable4_64
       4  ??DataTable4_65
       4  ??DataTable4_66
       4  ??DataTable4_67
       4  ??DataTable4_68
       4  ??DataTable4_69
       4  ??DataTable4_7
       4  ??DataTable4_70
       4  ??DataTable4_71
       4  ??DataTable4_72
       4  ??DataTable4_73
       4  ??DataTable4_74
       4  ??DataTable4_8
       4  ??DataTable4_9
      56  ?_0
      36  ?_1
      40  ?_10
       8  ?_100
      52  ?_101
      36  ?_102
      32  ?_103
      32  ?_104
      44  ?_105
      32  ?_106
      40  ?_107
      40  ?_108
      44  ?_109
      32  ?_11
      52  ?_110
      24  ?_111
      20  ?_112
       4  ?_113
      40  ?_114
      44  ?_115
      52  ?_116
      60  ?_117
      24  ?_118
      40  ?_119
      32  ?_12
      20  ?_120
      12  ?_121
      40  ?_122
      44  ?_123
      52  ?_124
      64  ?_125
      40  ?_126
      12  ?_127
      40  ?_128
      24  ?_129
      40  ?_13
      40  ?_130
      24  ?_131
      44  ?_132
      36  ?_133
      40  ?_134
      36  ?_135
      32  ?_136
      40  ?_137
      36  ?_138
      36  ?_139
      32  ?_14
      12  ?_140
      24  ?_141
       8  ?_142
      36  ?_143
      28  ?_144
      40  ?_145
      28  ?_146
       8  ?_147
      32  ?_148
      24  ?_149
      32  ?_15
      36  ?_150
       8  ?_151
      32  ?_152
      20  ?_153
      36  ?_154
       8  ?_155
      32  ?_156
      24  ?_157
      36  ?_158
       8  ?_159
      40  ?_16
      32  ?_160
      20  ?_161
      36  ?_162
       8  ?_163
      32  ?_164
      20  ?_165
      36  ?_166
       8  ?_167
      36  ?_168
      24  ?_169
      28  ?_17
      40  ?_170
       8  ?_171
      36  ?_172
      24  ?_173
      40  ?_174
       8  ?_175
      36  ?_176
      24  ?_177
      40  ?_178
       8  ?_179
       1  ?_18
      36  ?_180
      24  ?_181
      40  ?_182
       8  ?_183
      32  ?_184
      24  ?_185
      36  ?_186
       8  ?_187
      36  ?_188
      24  ?_189
       8  ?_19
      40  ?_190
       8  ?_191
      36  ?_192
      24  ?_193
      40  ?_194
       8  ?_195
      32  ?_196
      24  ?_197
      36  ?_198
       8  ?_199
      68  ?_2
      12  ?_20
      36  ?_200
      24  ?_201
      40  ?_202
       8  ?_203
      36  ?_204
      24  ?_205
      40  ?_206
       8  ?_207
      36  ?_208
      24  ?_209
      20  ?_21
      40  ?_210
       8  ?_211
      36  ?_212
      24  ?_213
      40  ?_214
       8  ?_215
      36  ?_216
      24  ?_217
      40  ?_218
       8  ?_219
      28  ?_22
      36  ?_220
      24  ?_221
      40  ?_222
       8  ?_223
      36  ?_224
      24  ?_225
      40  ?_226
       8  ?_227
      36  ?_228
      24  ?_229
      36  ?_23
      40  ?_230
      36  ?_231
      32  ?_232
      48  ?_233
      16  ?_234
      32  ?_235
      36  ?_236
      24  ?_237
      24  ?_238
      24  ?_239
      32  ?_24
      32  ?_240
      24  ?_241
      24  ?_242
      24  ?_243
      32  ?_244
      24  ?_245
      24  ?_246
      24  ?_247
      24  ?_248
      24  ?_249
      40  ?_25
      24  ?_250
      24  ?_251
      24  ?_252
      24  ?_253
      24  ?_254
      24  ?_255
      24  ?_256
      24  ?_257
      32  ?_258
      24  ?_259
      40  ?_26
      24  ?_260
      24  ?_261
      24  ?_262
      24  ?_263
      32  ?_264
      24  ?_265
      24  ?_266
      24  ?_267
      24  ?_268
      24  ?_269
      40  ?_27
      24  ?_270
      24  ?_271
      24  ?_272
      24  ?_273
      24  ?_274
      24  ?_275
      24  ?_276
      24  ?_277
      24  ?_278
      24  ?_279
      56  ?_28
      24  ?_280
      20  ?_281
      32  ?_282
      40  ?_283
      36  ?_284
      36  ?_285
      32  ?_286
      28  ?_287
      32  ?_288
      28  ?_289
      20  ?_29
      32  ?_290
      24  ?_291
      32  ?_292
      36  ?_293
      32  ?_294
      40  ?_295
      36  ?_296
      44  ?_297
      36  ?_298
      36  ?_299
      40  ?_3
      36  ?_30
      32  ?_300
      36  ?_301
      44  ?_302
      36  ?_303
      36  ?_304
      32  ?_305
      36  ?_306
      44  ?_307
      36  ?_308
      36  ?_309
      16  ?_31
      32  ?_310
      36  ?_311
      44  ?_312
      36  ?_313
      36  ?_314
      32  ?_315
      36  ?_316
      32  ?_317
      40  ?_318
      32  ?_319
      12  ?_32
      44  ?_320
      28  ?_321
      24  ?_322
      28  ?_323
      32  ?_324
      32  ?_325
      36  ?_326
      32  ?_327
      40  ?_328
      28  ?_329
      40  ?_33
      40  ?_330
      28  ?_331
      40  ?_332
      40  ?_333
      28  ?_334
      28  ?_335
      24  ?_336
      52  ?_337
      28  ?_338
      36  ?_339
      40  ?_34
      36  ?_340
       8  ?_341
      12  ?_342
      40  ?_343
      40  ?_344
      48  ?_345
      48  ?_346
      48  ?_347
      40  ?_348
      48  ?_349
      20  ?_35
      40  ?_350
      40  ?_351
      40  ?_352
      40  ?_353
       8  ?_354
      32  ?_36
      16  ?_37
      16  ?_38
      40  ?_39
      32  ?_4
      40  ?_40
      32  ?_41
      28  ?_42
      36  ?_43
      48  ?_44
      48  ?_45
      24  ?_46
      20  ?_47
      56  ?_48
      44  ?_49
      32  ?_5
      40  ?_50
      24  ?_51
      32  ?_52
      28  ?_53
      44  ?_54
      36  ?_55
      28  ?_56
      36  ?_57
      20  ?_58
      36  ?_59
       4  ?_6
      24  ?_60
      32  ?_61
      20  ?_62
      32  ?_63
      20  ?_64
      32  ?_65
      24  ?_66
      24  ?_67
      36  ?_68
      32  ?_69
      40  ?_7
      24  ?_70
      44  ?_71
      16  ?_72
      48  ?_73
      24  ?_74
      20  ?_75
      44  ?_76
      40  ?_77
      28  ?_78
      56  ?_79
      32  ?_8
      16  ?_80
      44  ?_81
      12  ?_82
      12  ?_83
      12  ?_84
      72  ?_85
      68  ?_86
      72  ?_87
      64  ?_88
      60  ?_89
      32  ?_9
      60  ?_90
      60  ?_91
      56  ?_92
      64  ?_93
      64  ?_94
      64  ?_95
      64  ?_96
      64  ?_97
      68  ?_98
      32  ?_99
       1  Bypass
      44  ParseString
   18760  RoadBrd_ParseString
      12  RoadBrd_ParserInit
      66  RoadBrd_ParserTsk
      40  RoadBrd_ProcessParserTsk
       6  Tst_Bypass
      88  hatoi
      74  isHexNum

 
     45 bytes in section .bss
 11 253 bytes in section .rodata
 19 398 bytes in section .text
 
 19 398 bytes of CODE  memory
 11 253 bytes of CONST memory
     45 bytes of DATA  memory

Errors: none
Warnings: none
