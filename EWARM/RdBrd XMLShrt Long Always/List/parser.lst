###############################################################################
#
# IAR ANSI C/C++ Compiler V7.60.2.11341/W32 for ARM       05/Nov/2017  09:59:26
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\parser.c
#    Command line =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\parser.c
#        -D USE_HAL_DRIVER -D STM32L152xE -D USE_STM32L1XX_NUCLEO -D ASCII -D
#        REV_L -D LONG_DELAY -D XML_SHRT -lCN
#        "D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\RdBrd
#        XMLShrt Long Always\List" -o
#        "D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\RdBrd
#        XMLShrt Long Always\Obj" --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_clustering --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.4\arm\INC\c\DLib_Config_Full.h" -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/STM32L1xx_HAL_Driver/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/STM32L1xx_HAL_Driver/Inc/Legacy\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/BSP/STM32L1xx_Nucleo\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/portable/IAR/ARM_CM3\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Core/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/CMSIS/Include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/CMSIS/Device/ST/STM32L1xx/Include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\..\Middlewares\Third_Party\BgLib\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.4\arm\CMSIS\Include\"
#    Locale       =  English_United States.1252
#    List file    =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\RdBrd
#        XMLShrt Long Always\List\parser.lst
#    Object file  =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\RdBrd
#        XMLShrt Long Always\Obj\parser.o
#
###############################################################################

D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\parser.c
      1          /**
      2            ******************************************************************************
      3            * File Name          : parser.c
      4            * Description        : This file provides code that parses the passed string and 
      5            *                      performs the requested operation. It then returns a string
      6            *                      hardware based on the LPS22HB chip.
      7            ******************************************************************************
      8            *
      9            * COPYRIGHT(c) 2016 WeatherCloud
     10            *
     11            * Redistribution and use in source and binary forms, with or without modification,
     12            * are permitted provided that the following conditions are met:
     13            *   1. Redistributions of source code must retain the above copyright notice,
     14            *      this list of conditions and the following disclaimer.
     15            *   2. Redistributions in binary form must reproduce the above copyright notice,
     16            *      this list of conditions and the following disclaimer in the documentation
     17            *      and/or other materials provided with the distribution.
     18            *   3. Neither the name of WeatherCloud nor the names of its contributors
     19            *      may be used to endorse or promote products derived from this software
     20            *      without specific prior written permission.
     21            *
     22            * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     23            * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     24            * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     25            * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
     26            * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     27            * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     28            * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
     29            * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
     30            * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
     31            * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     32            *
     33            ******************************************************************************
     34            */
     35          
     36          /* Includes ------------------------------------------------------------------*/
     37          #include "parser.h"
     38          #include "ErrorCodes.h"
     39          #include <ctype.h>
     40          #include <stdlib.h>
     41          #include "wwdg.h"
     42          #include "Calibration.h"
     43          
     44          // Enums
     45          typedef enum 
     46          {
     47            NOT_INIT = 0,
     48            AVAILABLE = 1,
     49            BUSY = 2
     50          } ParseTskFlg;
     51          

   \                                 In section .bss, align 1
     52          static bool Bypass = false;
   \                     Bypass:
   \   00000000                      DS8 1
     53          
     54          // Parser Structure for tasks.
     55          struct
     56          {
     57            char          tempBuffer[BUFFER_SIZE];
     58            ParseTskFlg   ParseFlg;

   \                                 In section .bss, align 4
     59          } static ParseString;
   \                     ParseString:
   \   00000000                      DS8 44
     60          
     61          /* Parser functions */
     62          
     63          /**
     64            * @brief  This routine initializes the Parse Task Structure.
     65            * @param  *tempBffr: String to be parsed.
     66            * @retval HAL_StatusTypeDef:     HAL_OK:       Tasking of block of data to UART success.
     67            */

   \                                 In section .text, align 2, keep-with-next
     68          HAL_StatusTypeDef RoadBrd_ParserInit( void )
     69          {
     70            ParseString.ParseFlg = AVAILABLE;
   \                     RoadBrd_ParserInit: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x....             LDR.N    R1,??DataTable2
   \   00000004   0xF881 0x0028      STRB     R0,[R1, #+40]
     71            return HAL_OK;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x4770             BX       LR               ;; return
     72          }
     73          
     74          /**
     75            * @brief  This routine handles the operation of setting up a Parse Event.
     76            * @param  *tempBffr: String to be parsed.
     77            * @retval HAL_StatusTypeDef:     HAL_OK:       Tasking of block of data to UART success.
     78            *                                HAL_ERROR:    Error found in Tasking or data passed.
     79            *                                HAL_BUSY:     UART is busy.
     80            *                                HAL_TIMEOUT:  UART timed out.
     81            */

   \                                 In section .text, align 2, keep-with-next
     82          HAL_StatusTypeDef RoadBrd_ParserTsk(char *tempBffr)
     83          {
   \                     RoadBrd_ParserTsk: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     84            // Test ParseFlg.
     85            if (ParseString.ParseFlg == BUSY)
   \   00000004   0x....             LDR.N    R0,??DataTable2
   \   00000006   0xF890 0x0028      LDRB     R0,[R0, #+40]
   \   0000000A   0x2802             CMP      R0,#+2
   \   0000000C   0xD101             BNE.N    ??RoadBrd_ParserTsk_0
     86              return HAL_BUSY;
   \   0000000E   0x2002             MOVS     R0,#+2
   \   00000010   0xE016             B.N      ??RoadBrd_ParserTsk_1
     87            else if (ParseString.ParseFlg == NOT_INIT)
   \                     ??RoadBrd_ParserTsk_0: (+1)
   \   00000012   0x....             LDR.N    R0,??DataTable2
   \   00000014   0xF890 0x0028      LDRB     R0,[R0, #+40]
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD101             BNE.N    ??RoadBrd_ParserTsk_2
     88              return HAL_ERROR;
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0xE00F             B.N      ??RoadBrd_ParserTsk_1
     89            // Next Lets make sure passed string is not too big.
     90          //  if (strlen((char *)tempBffr) >= BUFFER_SIZE)
     91            if (strlen(tempBffr) >= BUFFER_SIZE)
   \                     ??RoadBrd_ParserTsk_2: (+1)
   \   00000020   0x0020             MOVS     R0,R4
   \   00000022   0x.... 0x....      BL       strlen
   \   00000026   0x2828             CMP      R0,#+40
   \   00000028   0xD301             BCC.N    ??RoadBrd_ParserTsk_3
     92              return HAL_ERROR;
   \   0000002A   0x2001             MOVS     R0,#+1
   \   0000002C   0xE008             B.N      ??RoadBrd_ParserTsk_1
     93            // Copy String into Structure and set as busy.
     94          //  strcpy( (char *)ParseString.tempBuffer, (char *)tempBffr);
     95            strcpy( ParseString.tempBuffer, tempBffr);
   \                     ??RoadBrd_ParserTsk_3: (+1)
   \   0000002E   0x0021             MOVS     R1,R4
   \   00000030   0x....             LDR.N    R0,??DataTable2
   \   00000032   0x.... 0x....      BL       strcpy
     96            ParseString.ParseFlg = BUSY;
   \   00000036   0x2002             MOVS     R0,#+2
   \   00000038   0x....             LDR.N    R1,??DataTable2
   \   0000003A   0xF881 0x0028      STRB     R0,[R1, #+40]
     97            return HAL_OK;
   \   0000003E   0x2000             MOVS     R0,#+0
   \                     ??RoadBrd_ParserTsk_1: (+1)
   \   00000040   0xBD10             POP      {R4,PC}          ;; return
     98          }
     99          
    100          /**
    101            * @brief  This routine handles the operation of processing a Parse Event.
    102            * @param  *tempBffr: String to be parsed.
    103            * @retval HAL_StatusTypeDef:     HAL_OK:       Tasking of block of data to UART success.
    104            *                                HAL_ERROR:    Error found in Tasking or data passed.
    105            *                                HAL_BUSY:     UART is busy.
    106            *                                HAL_TIMEOUT:  UART timed out.
    107            */

   \                                 In section .text, align 2, keep-with-next
    108          HAL_StatusTypeDef RoadBrd_ProcessParserTsk( void )
    109          {
   \                     RoadBrd_ProcessParserTsk: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    110            HAL_StatusTypeDef Status;
    111          
    112            // Test ParseFlg and process.
    113            if (ParseString.ParseFlg == BUSY)
   \   00000002   0x....             LDR.N    R0,??DataTable2
   \   00000004   0xF890 0x0028      LDRB     R0,[R0, #+40]
   \   00000008   0x2802             CMP      R0,#+2
   \   0000000A   0xD10B             BNE.N    ??RoadBrd_ProcessParserTsk_0
    114            {
    115              Status = RoadBrd_ParseString(ParseString.tempBuffer, true);
   \   0000000C   0x2101             MOVS     R1,#+1
   \   0000000E   0x....             LDR.N    R0,??DataTable2
   \   00000010   0x.... 0x....      BL       RoadBrd_ParseString
   \   00000014   0x0004             MOVS     R4,R0
    116              ParseString.ParseFlg = AVAILABLE;
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0x....             LDR.N    R1,??DataTable2
   \   0000001A   0xF881 0x0028      STRB     R0,[R1, #+40]
    117              return Status;
   \   0000001E   0x0020             MOVS     R0,R4
   \   00000020   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000022   0xE000             B.N      ??RoadBrd_ProcessParserTsk_1
    118            }
    119            else
    120              return HAL_OK;
   \                     ??RoadBrd_ProcessParserTsk_0: (+1)
   \   00000024   0x2000             MOVS     R0,#+0
   \                     ??RoadBrd_ProcessParserTsk_1: (+1)
   \   00000026   0xBD10             POP      {R4,PC}          ;; return
    121          }
    122          
    123          
    124          /**
    125            * @brief  This routine parses the passed string and performs the passed operation
    126            * @param  *tempBffr: String to be parsed.
    127            * @retval HAL_StatusTypeDef:     HAL_OK:       Tasking of block of data to UART success.
    128            *                                HAL_ERROR:    Error found in Tasking or data passed.
    129            *                                HAL_BUSY:     UART is busy.
    130            *                                HAL_TIMEOUT:  UART timed out.
    131            */

   \                                 In section .text, align 4, keep-with-next
    132          HAL_StatusTypeDef RoadBrd_ParseString(char *tempBffr, bool BLE_Flag)
    133          {
   \                     RoadBrd_ParseString: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xF5AD 0x6D80      SUB      SP,SP,#+1024
   \   00000008   0xB097             SUB      SP,SP,#+92
   \   0000000A   0x0004             MOVS     R4,R0
   \   0000000C   0x000D             MOVS     R5,R1
    134          #ifdef TEST2
    135            #define RECEIVE_SZ      5
    136            uint8_t Size;
    137            uint8_t i2cData[80];
    138            uint8_t tempBffr3[10];
    139            char tempBffr2[5];
    140            int Loop_cnt;
    141            HAL_StatusTypeDef Status, Save_Status;
    142            int Address;
    143            int num_bytes;
    144            int num_bytes_received;
    145            int Error, x;
    146            char tempstr[20];
    147            char* tempPstr;
    148            int new_value, flag;
    149            float Temp_C, Temp_F, Shunt_V, Bus_V, Crrnt, Power;
    150            uint32_t Err_code;
    151          #else
    152            #ifdef TEST
    153              #define RECEIVE_SZ      5
    154            #else
    155              #define RECEIVE_SZ      30
    156              uint16_t DriverStatus;
    157              int8_t tempBffr2[120];
    158              int8_t tempBffr3[10];
    159              int8_t* BufferPntr;
    160              HAL_StatusTypeDef Status, Save_Status;
    161              uint8_t Size;
    162              int Address;
    163              int num_bytes;
    164              int num_bytes_received;
    165              uint8_t i2cData[80];
    166              int Error, x, y;
    167              Voltage VMeasure, VMeasureScaled;
    168              Current CMeasure, CMeasureScaled;
    169              Power PMeasure, PMeasureScaled;
    170              Temperature TMeasure, TMeasureScaled;
    171              Humidity HMeasure, HMeasureScaled;
    172              RGBInitialize RGBMeasure;
    173              RGBIdent IDMeasure;
    174              RGBStatus RGBSMeasure;
    175              RGBLight RGBValues;
    176              char uuid[10];
    177              float Scale, Offset;
    178          //    PRStatus PRMeasure;
    179              PRPressure PRPMeasure, PRPMeasureScaled;
    180              BinString RSFFTBins;
    181              GridEye     GridMeasure, GridMeasureScaled;
    182              uint32_t Err_code;
    183              uint8_t op_mode, ds_range, adc_rsl, sync, cmp_adjst, cmp_offst, int_assgn, int_persist, cnvrsn_int;
    184              int new_value, flag;
    185              char* tempPstr;
    186              char tempstr[20];
    187            #endif
    188          #endif
    189          
    190              Size = strlen((char *)tempBffr);
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0x.... 0x....      BL       strlen
   \   00000014   0x4680             MOV      R8,R0
    191              
    192              // Test Bypass. If set, then we are in streaming mode.
    193              if ( Bypass )
   \   00000016   0xF8DF 0x0DFC      LDR.W    R0,??RoadBrd_ParseString_0
   \   0000001A   0x7800             LDRB     R0,[R0, #+0]
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD01E             BEQ.N    ??RoadBrd_ParseString_1
    194              {
    195                if (tempBffr[0] == 0x1B)
   \   00000020   0x7820             LDRB     R0,[R4, #+0]
   \   00000022   0x281B             CMP      R0,#+27
   \   00000024   0xD115             BNE.N    ??RoadBrd_ParseString_2
    196                {
    197                  Bypass = false;
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0xF8DF 0x1DE8      LDR.W    R1,??RoadBrd_ParseString_0
   \   0000002C   0x7008             STRB     R0,[R1, #+0]
    198                  strcpy( (char *)tempBffr2, "\r\n\r\n T........TERMINATING MONITOR MODE.........\r\n\r\n> ");
   \   0000002E   0xF8DF 0x1DE8      LDR.W    R1,??RoadBrd_ParseString_0+0x4
   \   00000032   0xA80A             ADD      R0,SP,#+40
   \   00000034   0x.... 0x....      BL       strcpy
    199          #ifdef NUCLEO
    200                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    201          #else
    202                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000038   0xA90A             ADD      R1,SP,#+40
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000040   0x0006             MOVS     R6,R0
    203          #endif
    204                  if (Status != HAL_OK)
   \   00000042   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000044   0x2E00             CMP      R6,#+0
   \   00000046   0xF004 0x8449      BEQ.W    ??RoadBrd_ParseString_3
    205                    return Status;
   \   0000004A   0x0030             MOVS     R0,R6
   \   0000004C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004E   0xF004 0xBC47      B.W      ??RoadBrd_ParseString_4
    206                }
    207                else
    208                {
    209                  // Transmit Character to BGM111.
    210                  BGM111_Transmit(1, (uint8_t *)tempBffr);
   \                     ??RoadBrd_ParseString_2: (+1)
   \   00000052   0x0021             MOVS     R1,R4
   \   00000054   0x2001             MOVS     R0,#+1
   \   00000056   0x.... 0x....      BL       BGM111_Transmit
   \   0000005A   0xF004 0xBC3F      B.W      ??RoadBrd_ParseString_3
    211                }
    212              }// EndIf ( Bypass )
    213              else
    214              {
    215                // Normal Mode
    216              
    217                      // We have a good Tasking String. Time to determine action.
    218                      switch( tempBffr[0] )
   \                     ??RoadBrd_ParseString_1: (+1)
   \   0000005E   0x7820             LDRB     R0,[R4, #+0]
   \   00000060   0x2830             CMP      R0,#+48
   \   00000062   0xD02F             BEQ.N    ??RoadBrd_ParseString_5
   \   00000064   0x2831             CMP      R0,#+49
   \   00000066   0xD048             BEQ.N    ??RoadBrd_ParseString_6
   \   00000068   0x2832             CMP      R0,#+50
   \   0000006A   0xD079             BEQ.N    ??RoadBrd_ParseString_7
   \   0000006C   0x2833             CMP      R0,#+51
   \   0000006E   0xF000 0x80AA      BEQ.W    ??RoadBrd_ParseString_8
   \   00000072   0x2834             CMP      R0,#+52
   \   00000074   0xF000 0x80DA      BEQ.W    ??RoadBrd_ParseString_9
   \   00000078   0x2835             CMP      R0,#+53
   \   0000007A   0xF000 0x810A      BEQ.W    ??RoadBrd_ParseString_10
   \   0000007E   0x2836             CMP      R0,#+54
   \   00000080   0xF000 0x817E      BEQ.W    ??RoadBrd_ParseString_11
   \   00000084   0x2841             CMP      R0,#+65
   \   00000086   0xF000 0x8194      BEQ.W    ??RoadBrd_ParseString_12
   \   0000008A   0x2842             CMP      R0,#+66
   \   0000008C   0xF000 0x82F1      BEQ.W    ??RoadBrd_ParseString_13
   \   00000090   0x2843             CMP      R0,#+67
   \   00000092   0xF000 0x85B6      BEQ.W    ??RoadBrd_ParseString_14
   \   00000096   0x2844             CMP      R0,#+68
   \   00000098   0xF000 0x87B8      BEQ.W    ??RoadBrd_ParseString_15
   \   0000009C   0x2845             CMP      R0,#+69
   \   0000009E   0xF001 0x8133      BEQ.W    ??RoadBrd_ParseString_16
   \   000000A2   0x2846             CMP      R0,#+70
   \   000000A4   0xF001 0x8145      BEQ.W    ??RoadBrd_ParseString_17
   \   000000A8   0x2847             CMP      R0,#+71
   \   000000AA   0xF001 0x815D      BEQ.W    ??RoadBrd_ParseString_18
   \   000000AE   0x2848             CMP      R0,#+72
   \   000000B0   0xF001 0x81DA      BEQ.W    ??RoadBrd_ParseString_19
   \   000000B4   0x2850             CMP      R0,#+80
   \   000000B6   0xF001 0x84BB      BEQ.W    ??RoadBrd_ParseString_20
   \   000000BA   0x2854             CMP      R0,#+84
   \   000000BC   0xF001 0x84E8      BEQ.W    ??RoadBrd_ParseString_21
   \   000000C0   0xF004 0xBB83      B.W      ??RoadBrd_ParseString_22
    219                      {
    220          //**************************************************************************************************
    221                      case '0':
    222                        // Enable Road sound and fill buffer. 
    223                        Status = RoadBrdSnd_ProcessSound();
   \                     ??RoadBrd_ParseString_5: (+1)
   \   000000C4   0x.... 0x....      BL       RoadBrdSnd_ProcessSound
   \   000000C8   0x0006             MOVS     R6,R0
    224                        if (Status == HAL_OK)
   \   000000CA   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000CC   0x2E00             CMP      R6,#+0
   \   000000CE   0xD112             BNE.N    ??RoadBrd_ParseString_23
    225                        {
    226                          // Is this a BLE Operation?
    227                          if ( BLE_Flag )
   \   000000D0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000D2   0x2D00             CMP      R5,#+0
   \   000000D4   0xD00A             BEQ.N    ??RoadBrd_ParseString_24
    228                          {
    229                            // Yes...Build and Send BLE Response NOW.
    230                            strcpy( (char *)tempBffr2, "<STATUS>CMD_RDSNDBFFR_FILL</STATUS>");
   \   000000D6   0xF8DF 0x1E24      LDR.W    R1,??RoadBrd_ParseString_25
   \   000000DA   0xA80A             ADD      R0,SP,#+40
   \   000000DC   0x.... 0x....      BL       strcpy
    231                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000000E0   0xA80A             ADD      R0,SP,#+40
   \   000000E2   0x.... 0x....      BL       strlen
   \   000000E6   0xA90A             ADD      R1,SP,#+40
   \   000000E8   0x.... 0x....      BL       BGM111_Transmit
    232                          }
    233                          strcpy( (char *)tempBffr2, "Road Sound: Road Sound loaded, processed, and sent to FFT Bins.\r\n");
   \                     ??RoadBrd_ParseString_24: (+1)
   \   000000EC   0xF8DF 0x1E10      LDR.W    R1,??RoadBrd_ParseString_25+0x4
   \   000000F0   0xA80A             ADD      R0,SP,#+40
   \   000000F2   0x.... 0x....      BL       strcpy
    234                        }
    235                        break;
   \                     ??RoadBrd_ParseString_23: (+1)
   \   000000F6   0xF004 0xBB79      B.W      ??RoadBrd_ParseString_26
    236          //**************************************************************************************************
    237                      case '1':
    238                        // Rd_Sound FFT Measurements 0-15. 
    239                        Status = RoadBrdSnd_DumpBin0( &RSFFTBins );
   \                     ??RoadBrd_ParseString_6: (+1)
   \   000000FA   0xA890             ADD      R0,SP,#+576
   \   000000FC   0x.... 0x....      BL       RoadBrdSnd_DumpBin0
   \   00000100   0x0006             MOVS     R6,R0
    240                        strcpy( (char *)tempBffr2, "Road Sound: FFT Measurements 0-15.\r\n");
   \   00000102   0xF8DF 0x1E04      LDR.W    R1,??RoadBrd_ParseString_25+0xC
   \   00000106   0xA80A             ADD      R0,SP,#+40
   \   00000108   0x.... 0x....      BL       strcpy
    241          #ifdef NUCLEO
    242                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    243          #else
    244                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000010C   0xA90A             ADD      R1,SP,#+40
   \   0000010E   0x2000             MOVS     R0,#+0
   \   00000110   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000114   0x0006             MOVS     R6,R0
    245          #endif
    246                        if (Status != HAL_OK)
   \   00000116   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000118   0x2E00             CMP      R6,#+0
   \   0000011A   0xD003             BEQ.N    ??RoadBrd_ParseString_27
    247                          return Status;
   \   0000011C   0x0030             MOVS     R0,R6
   \   0000011E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000120   0xF004 0xBBDE      B.W      ??RoadBrd_ParseString_4
    248                        // Is this a BLE Operation?
    249                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_27: (+1)
   \   00000124   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000126   0x2D00             CMP      R5,#+0
   \   00000128   0xD00B             BEQ.N    ??RoadBrd_ParseString_28
    250                        {
    251                          // Yes...Build and Send BLE Response NOW.
    252                          sprintf( (char *)tempBffr2, "<STATUS>ST_FFT0-15:%s</STATUS>", RSFFTBins.dumpStr );
   \   0000012A   0xAA90             ADD      R2,SP,#+576
   \   0000012C   0xF8DF 0x1DDC      LDR.W    R1,??RoadBrd_ParseString_25+0x10
   \   00000130   0xA80A             ADD      R0,SP,#+40
   \   00000132   0x.... 0x....      BL       sprintf
    253                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000136   0xA80A             ADD      R0,SP,#+40
   \   00000138   0x.... 0x....      BL       strlen
   \   0000013C   0xA90A             ADD      R1,SP,#+40
   \   0000013E   0x.... 0x....      BL       BGM111_Transmit
    254                        }
    255                        // NOW, Build Data String..
    256                        sprintf( (char *)tempBffr2, "     FFT Measurements 0-15: " );
   \                     ??RoadBrd_ParseString_28: (+1)
   \   00000142   0xF8DF 0x1DCC      LDR.W    R1,??RoadBrd_ParseString_25+0x14
   \   00000146   0xA80A             ADD      R0,SP,#+40
   \   00000148   0x.... 0x....      BL       sprintf
    257                        strcat( (char *)tempBffr2, (char *)RSFFTBins.dumpStr );
   \   0000014C   0xA990             ADD      R1,SP,#+576
   \   0000014E   0xA80A             ADD      R0,SP,#+40
   \   00000150   0x.... 0x....      BL       strcat
    258                        strcat( (char *)tempBffr2, "\r\n" );
   \   00000154   0xA1DB             ADR.N    R1,??RoadBrd_ParseString_29  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000156   0xA80A             ADD      R0,SP,#+40
   \   00000158   0x.... 0x....      BL       strcat
    259                       break;
   \   0000015C   0xF004 0xBB46      B.W      ??RoadBrd_ParseString_26
    260          //**************************************************************************************************
    261                      case '2':
    262                        // Rd_Sound FFT Measurements 16-31. 
    263                        Status = RoadBrdSnd_DumpBin16( &RSFFTBins );
   \                     ??RoadBrd_ParseString_7: (+1)
   \   00000160   0xA890             ADD      R0,SP,#+576
   \   00000162   0x.... 0x....      BL       RoadBrdSnd_DumpBin16
   \   00000166   0x0006             MOVS     R6,R0
    264                        strcpy( (char *)tempBffr2, "Road Sound: FFT Measurements 16-31.\r\n");
   \   00000168   0xF8DF 0x1DA8      LDR.W    R1,??RoadBrd_ParseString_25+0x18
   \   0000016C   0xA80A             ADD      R0,SP,#+40
   \   0000016E   0x.... 0x....      BL       strcpy
    265          #ifdef NUCLEO
    266                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    267          #else
    268                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000172   0xA90A             ADD      R1,SP,#+40
   \   00000174   0x2000             MOVS     R0,#+0
   \   00000176   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000017A   0x0006             MOVS     R6,R0
    269          #endif
    270                        if (Status != HAL_OK)
   \   0000017C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000017E   0x2E00             CMP      R6,#+0
   \   00000180   0xD003             BEQ.N    ??RoadBrd_ParseString_30
    271                          return Status;
   \   00000182   0x0030             MOVS     R0,R6
   \   00000184   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000186   0xF004 0xBBAB      B.W      ??RoadBrd_ParseString_4
    272                        // Is this a BLE Operation?
    273                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_30: (+1)
   \   0000018A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000018C   0x2D00             CMP      R5,#+0
   \   0000018E   0xD00B             BEQ.N    ??RoadBrd_ParseString_31
    274                        {
    275                          // Yes...Build and Send BLE Response NOW.
    276                          sprintf( (char *)tempBffr2, "<STATUS>ST_FFT16-31:%s</STATUS>", RSFFTBins.dumpStr );
   \   00000190   0xAA90             ADD      R2,SP,#+576
   \   00000192   0xF8DF 0x1D84      LDR.W    R1,??RoadBrd_ParseString_25+0x1C
   \   00000196   0xA80A             ADD      R0,SP,#+40
   \   00000198   0x.... 0x....      BL       sprintf
    277                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000019C   0xA80A             ADD      R0,SP,#+40
   \   0000019E   0x.... 0x....      BL       strlen
   \   000001A2   0xA90A             ADD      R1,SP,#+40
   \   000001A4   0x.... 0x....      BL       BGM111_Transmit
    278                        }
    279                        // NOW, Build Data String..
    280                        sprintf( (char *)tempBffr2, "     FFT Measurements 16-31: " );
   \                     ??RoadBrd_ParseString_31: (+1)
   \   000001A8   0xF8DF 0x1E14      LDR.W    R1,??RoadBrd_ParseString_32
   \   000001AC   0xA80A             ADD      R0,SP,#+40
   \   000001AE   0x.... 0x....      BL       sprintf
    281                        strcat( (char *)tempBffr2, (char *)RSFFTBins.dumpStr );
   \   000001B2   0xA990             ADD      R1,SP,#+576
   \   000001B4   0xA80A             ADD      R0,SP,#+40
   \   000001B6   0x.... 0x....      BL       strcat
    282                        strcat( (char *)tempBffr2, "\r\n" );
   \   000001BA   0xA1C2             ADR.N    R1,??RoadBrd_ParseString_29  ;; 0x0D, 0x0A, 0x00, 0x00
   \   000001BC   0xA80A             ADD      R0,SP,#+40
   \   000001BE   0x.... 0x....      BL       strcat
    283                        break;
   \   000001C2   0xF004 0xBB13      B.W      ??RoadBrd_ParseString_26
    284          //**************************************************************************************************
    285                      case '3':
    286                        // Rd_Sound FFT Measurements 32-47. 
    287                        Status = RoadBrdSnd_DumpBin32( &RSFFTBins );
   \                     ??RoadBrd_ParseString_8: (+1)
   \   000001C6   0xA890             ADD      R0,SP,#+576
   \   000001C8   0x.... 0x....      BL       RoadBrdSnd_DumpBin32
   \   000001CC   0x0006             MOVS     R6,R0
    288                        strcpy( (char *)tempBffr2, "Road Sound: FFT Measurements 32-47.\r\n");
   \   000001CE   0xF8DF 0x1DF4      LDR.W    R1,??RoadBrd_ParseString_32+0x4
   \   000001D2   0xA80A             ADD      R0,SP,#+40
   \   000001D4   0x.... 0x....      BL       strcpy
    289          #ifdef NUCLEO
    290                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    291          #else
    292                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000001D8   0xA90A             ADD      R1,SP,#+40
   \   000001DA   0x2000             MOVS     R0,#+0
   \   000001DC   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000001E0   0x0006             MOVS     R6,R0
    293          #endif
    294                        if (Status != HAL_OK)
   \   000001E2   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000001E4   0x2E00             CMP      R6,#+0
   \   000001E6   0xD003             BEQ.N    ??RoadBrd_ParseString_33
    295                          return Status;
   \   000001E8   0x0030             MOVS     R0,R6
   \   000001EA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001EC   0xF004 0xBB78      B.W      ??RoadBrd_ParseString_4
    296                        // Is this a BLE Operation?
    297                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_33: (+1)
   \   000001F0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000001F2   0x2D00             CMP      R5,#+0
   \   000001F4   0xD00B             BEQ.N    ??RoadBrd_ParseString_34
    298                        {
    299                          // Yes...Build and Send BLE Response NOW.
    300                          sprintf( (char *)tempBffr2, "<STATUS>ST_FFT32-47:%s</STATUS>", RSFFTBins.dumpStr );
   \   000001F6   0xAA90             ADD      R2,SP,#+576
   \   000001F8   0xF8DF 0x1DF8      LDR.W    R1,??RoadBrd_ParseString_35
   \   000001FC   0xA80A             ADD      R0,SP,#+40
   \   000001FE   0x.... 0x....      BL       sprintf
    301                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000202   0xA80A             ADD      R0,SP,#+40
   \   00000204   0x.... 0x....      BL       strlen
   \   00000208   0xA90A             ADD      R1,SP,#+40
   \   0000020A   0x.... 0x....      BL       BGM111_Transmit
    302                        }
    303                        // NOW, Build Data String..
    304                        sprintf( (char *)tempBffr2, "     FFT Measurements 32-47: " );
   \                     ??RoadBrd_ParseString_34: (+1)
   \   0000020E   0xF8DF 0x1DE8      LDR.W    R1,??RoadBrd_ParseString_35+0x4
   \   00000212   0xA80A             ADD      R0,SP,#+40
   \   00000214   0x.... 0x....      BL       sprintf
    305                        strcat( (char *)tempBffr2, (char *)RSFFTBins.dumpStr );
   \   00000218   0xA990             ADD      R1,SP,#+576
   \   0000021A   0xA80A             ADD      R0,SP,#+40
   \   0000021C   0x.... 0x....      BL       strcat
    306                        strcat( (char *)tempBffr2, "\r\n" );
   \   00000220   0xA1A8             ADR.N    R1,??RoadBrd_ParseString_29  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000222   0xA80A             ADD      R0,SP,#+40
   \   00000224   0x.... 0x....      BL       strcat
    307                        break;
   \   00000228   0xF004 0xBAE0      B.W      ??RoadBrd_ParseString_26
    308          //**************************************************************************************************
    309                      case '4':
    310                        // Rd_Sound FFT Measurements 48-63. 
    311                        Status = RoadBrdSnd_DumpBin48( &RSFFTBins );
   \                     ??RoadBrd_ParseString_9: (+1)
   \   0000022C   0xA890             ADD      R0,SP,#+576
   \   0000022E   0x.... 0x....      BL       RoadBrdSnd_DumpBin48
   \   00000232   0x0006             MOVS     R6,R0
    312                        strcpy( (char *)tempBffr2, "Road Sound: FFT Measurements 48-63.\r\n");
   \   00000234   0xF8DF 0x1DC4      LDR.W    R1,??RoadBrd_ParseString_35+0x8
   \   00000238   0xA80A             ADD      R0,SP,#+40
   \   0000023A   0x.... 0x....      BL       strcpy
    313          #ifdef NUCLEO
    314                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    315          #else
    316                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000023E   0xA90A             ADD      R1,SP,#+40
   \   00000240   0x2000             MOVS     R0,#+0
   \   00000242   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000246   0x0006             MOVS     R6,R0
    317          #endif
    318                        if (Status != HAL_OK)
   \   00000248   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000024A   0x2E00             CMP      R6,#+0
   \   0000024C   0xD003             BEQ.N    ??RoadBrd_ParseString_36
    319                          return Status;
   \   0000024E   0x0030             MOVS     R0,R6
   \   00000250   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000252   0xF004 0xBB45      B.W      ??RoadBrd_ParseString_4
    320                        // Is this a BLE Operation?
    321                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_36: (+1)
   \   00000256   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000258   0x2D00             CMP      R5,#+0
   \   0000025A   0xD00B             BEQ.N    ??RoadBrd_ParseString_37
    322                        {
    323                          // Yes...Build and Send BLE Response NOW.
    324                          sprintf( (char *)tempBffr2, "<STATUS>ST_FFT48-63:%s</STATUS>", RSFFTBins.dumpStr );
   \   0000025C   0xAA90             ADD      R2,SP,#+576
   \   0000025E   0xF8DF 0x1DA0      LDR.W    R1,??RoadBrd_ParseString_35+0xC
   \   00000262   0xA80A             ADD      R0,SP,#+40
   \   00000264   0x.... 0x....      BL       sprintf
    325                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000268   0xA80A             ADD      R0,SP,#+40
   \   0000026A   0x.... 0x....      BL       strlen
   \   0000026E   0xA90A             ADD      R1,SP,#+40
   \   00000270   0x.... 0x....      BL       BGM111_Transmit
    326                        }
    327                        // NOW, Build Data String..
    328                        sprintf( (char *)tempBffr2, "     FFT Measurements 48-63: " );
   \                     ??RoadBrd_ParseString_37: (+1)
   \   00000274   0xF8DF 0x1D8C      LDR.W    R1,??RoadBrd_ParseString_35+0x10
   \   00000278   0xA80A             ADD      R0,SP,#+40
   \   0000027A   0x.... 0x....      BL       sprintf
    329                        strcat( (char *)tempBffr2, (char *)RSFFTBins.dumpStr );
   \   0000027E   0xA990             ADD      R1,SP,#+576
   \   00000280   0xA80A             ADD      R0,SP,#+40
   \   00000282   0x.... 0x....      BL       strcat
    330                        strcat( (char *)tempBffr2, "\r\n" );
   \   00000286   0xA18F             ADR.N    R1,??RoadBrd_ParseString_29  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000288   0xA80A             ADD      R0,SP,#+40
   \   0000028A   0x.... 0x....      BL       strcat
    331                       break;
   \   0000028E   0xF004 0xBAAD      B.W      ??RoadBrd_ParseString_26
    332          //**************************************************************************************************
    333                      case '5':
    334                        // dump results of save Buffer. BufferPntr
    335                        BufferPntr = RoadBrdSnd_getSaveBffr();
   \                     ??RoadBrd_ParseString_10: (+1)
   \   00000292   0x.... 0x....      BL       RoadBrdSnd_getSaveBffr
   \   00000296   0x9047             STR      R0,[SP, #+284]
    336                        strcpy( (char *)tempBffr2, "Road Sound: Results of save Buffer.\r\n");
   \   00000298   0xF8DF 0x1D6C      LDR.W    R1,??RoadBrd_ParseString_35+0x14
   \   0000029C   0xA80A             ADD      R0,SP,#+40
   \   0000029E   0x.... 0x....      BL       strcpy
    337                        Status = RoadBrdSnd_DumpBin0( &RSFFTBins );
   \   000002A2   0xA890             ADD      R0,SP,#+576
   \   000002A4   0x.... 0x....      BL       RoadBrdSnd_DumpBin0
   \   000002A8   0x0006             MOVS     R6,R0
    338          #ifdef NUCLEO
    339                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    340          #else
    341                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000002AA   0xA90A             ADD      R1,SP,#+40
   \   000002AC   0x2000             MOVS     R0,#+0
   \   000002AE   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000002B2   0x0006             MOVS     R6,R0
    342          #endif
    343                        if (Status != HAL_OK)
   \   000002B4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000002B6   0x2E00             CMP      R6,#+0
   \   000002B8   0xD003             BEQ.N    ??RoadBrd_ParseString_38
    344                          return Status;
   \   000002BA   0x0030             MOVS     R0,R6
   \   000002BC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000002BE   0xF004 0xBB0F      B.W      ??RoadBrd_ParseString_4
    345                        // Is this a BLE Operation?
    346                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_38: (+1)
   \   000002C2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000002C4   0x2D00             CMP      R5,#+0
   \   000002C6   0xD00A             BEQ.N    ??RoadBrd_ParseString_39
    347                        {
    348                          // Yes...Build and Send BLE Response NOW.
    349                          strcpy( (char *)tempBffr2, "<STATUS>ST_FFTBFFR_DUMP:");
   \   000002C8   0xF8DF 0x1E1C      LDR.W    R1,??RoadBrd_ParseString_40
   \   000002CC   0xA80A             ADD      R0,SP,#+40
   \   000002CE   0x.... 0x....      BL       strcpy
    350                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000002D2   0xA80A             ADD      R0,SP,#+40
   \   000002D4   0x.... 0x....      BL       strlen
   \   000002D8   0xA90A             ADD      R1,SP,#+40
   \   000002DA   0x.... 0x....      BL       BGM111_Transmit
    351                        }
    352                        // NOW, Build Data String..
    353                        y=0;
   \                     ??RoadBrd_ParseString_39: (+1)
   \   000002DE   0x2000             MOVS     R0,#+0
   \   000002E0   0x903A             STR      R0,[SP, #+232]
    354                        sprintf( (char *)tempBffr2, "" );
   \   000002E2   0xA1DB             ADR.N    R1,??RoadBrd_ParseString_41  ;; ""
   \   000002E4   0xA80A             ADD      R0,SP,#+40
   \   000002E6   0x.... 0x....      BL       sprintf
    355                        for (x=0; x<FFT_BUFFER_SIZE; x++)
   \   000002EA   0x2000             MOVS     R0,#+0
   \   000002EC   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_42: (+1)
   \   000002EE   0x2F80             CMP      R7,#+128
   \   000002F0   0xDA31             BGE.N    ??RoadBrd_ParseString_43
    356                        {
    357          //                sprintf( (char *)tempBffr3, "%02x ", BufferPntr[x]);
    358                          sprintf( (char *)tempBffr3, "%04d ", BufferPntr[x]);
   \   000002F2   0x9847             LDR      R0,[SP, #+284]
   \   000002F4   0x57C2             LDRSB    R2,[R0, R7]
   \   000002F6   0xF8DF 0x1DF4      LDR.W    R1,??RoadBrd_ParseString_40+0x4
   \   000002FA   0xA82A             ADD      R0,SP,#+168
   \   000002FC   0x.... 0x....      BL       sprintf
    359                          strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   00000300   0xA92A             ADD      R1,SP,#+168
   \   00000302   0xA80A             ADD      R0,SP,#+40
   \   00000304   0x.... 0x....      BL       strcat
    360                          y++;
   \   00000308   0x983A             LDR      R0,[SP, #+232]
   \   0000030A   0x1C40             ADDS     R0,R0,#+1
   \   0000030C   0x903A             STR      R0,[SP, #+232]
    361                          if (y>=16)
   \   0000030E   0x983A             LDR      R0,[SP, #+232]
   \   00000310   0x2810             CMP      R0,#+16
   \   00000312   0xDB1E             BLT.N    ??RoadBrd_ParseString_44
    362                          {
    363                            strcat( (char *)tempBffr2, "\r\n" );
   \   00000314   0xA16B             ADR.N    R1,??RoadBrd_ParseString_29  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000316   0xA80A             ADD      R0,SP,#+40
   \   00000318   0x.... 0x....      BL       strcat
    364                            y=0;
   \   0000031C   0x2000             MOVS     R0,#+0
   \   0000031E   0x903A             STR      R0,[SP, #+232]
    365           #ifdef NUCLEO
    366                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    367          #else
    368                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000320   0xA90A             ADD      R1,SP,#+40
   \   00000322   0x2000             MOVS     R0,#+0
   \   00000324   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000328   0x0006             MOVS     R6,R0
    369          #endif
    370                            if (Status != HAL_OK)
   \   0000032A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000032C   0x2E00             CMP      R6,#+0
   \   0000032E   0xD003             BEQ.N    ??RoadBrd_ParseString_45
    371                              return Status;
   \   00000330   0x0030             MOVS     R0,R6
   \   00000332   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000334   0xF004 0xBAD4      B.W      ??RoadBrd_ParseString_4
    372                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_45: (+1)
   \   00000338   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000033A   0x2D00             CMP      R5,#+0
   \   0000033C   0xD005             BEQ.N    ??RoadBrd_ParseString_46
    373                            {
    374                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000033E   0xA80A             ADD      R0,SP,#+40
   \   00000340   0x.... 0x....      BL       strlen
   \   00000344   0xA90A             ADD      R1,SP,#+40
   \   00000346   0x.... 0x....      BL       BGM111_Transmit
    375                            }
    376                            sprintf( (char *)tempBffr2, "" );
   \                     ??RoadBrd_ParseString_46: (+1)
   \   0000034A   0xA1C1             ADR.N    R1,??RoadBrd_ParseString_41  ;; ""
   \   0000034C   0xA80A             ADD      R0,SP,#+40
   \   0000034E   0x.... 0x....      BL       sprintf
    377                          }
    378                        }
   \                     ??RoadBrd_ParseString_44: (+1)
   \   00000352   0x1C7F             ADDS     R7,R7,#+1
   \   00000354   0xE7CB             B.N      ??RoadBrd_ParseString_42
    379                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_43: (+1)
   \   00000356   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000358   0x2D00             CMP      R5,#+0
   \   0000035A   0xD00A             BEQ.N    ??RoadBrd_ParseString_47
    380                        {
    381                          strcpy( (char *)tempBffr2, "</STATUS>");
   \   0000035C   0xF8DF 0x1DD4      LDR.W    R1,??RoadBrd_ParseString_48
   \   00000360   0xA80A             ADD      R0,SP,#+40
   \   00000362   0x.... 0x....      BL       strcpy
    382                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000366   0xA80A             ADD      R0,SP,#+40
   \   00000368   0x.... 0x....      BL       strlen
   \   0000036C   0xA90A             ADD      R1,SP,#+40
   \   0000036E   0x.... 0x....      BL       BGM111_Transmit
    383                        }
    384                        sprintf( (char *)tempBffr2, "     ---COMPLETE---" );
   \                     ??RoadBrd_ParseString_47: (+1)
   \   00000372   0xF8DF 0x1DC4      LDR.W    R1,??RoadBrd_ParseString_48+0x4
   \   00000376   0xA80A             ADD      R0,SP,#+40
   \   00000378   0x.... 0x....      BL       sprintf
    385                        break;
   \   0000037C   0xF004 0xBA36      B.W      ??RoadBrd_ParseString_26
    386          //**************************************************************************************************
    387                      case '6':
    388                        // Clear all buffers. 
    389                        Status = HAL_OK;
   \                     ??RoadBrd_ParseString_11: (+1)
   \   00000380   0x2000             MOVS     R0,#+0
   \   00000382   0x0006             MOVS     R6,R0
    390                        RoadBrdSnd_ClrBffrs();
   \   00000384   0x.... 0x....      BL       RoadBrdSnd_ClrBffrs
    391                        // Is this a BLE Operation?
    392                        if ( BLE_Flag )
   \   00000388   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000038A   0x2D00             CMP      R5,#+0
   \   0000038C   0xD00A             BEQ.N    ??RoadBrd_ParseString_49
    393                        {
    394                          // Yes...Build and Send BLE Response NOW.
    395                          strcpy( (char *)tempBffr2, "<STATUS>ST_FFTCLR</STATUS>");
   \   0000038E   0xF8DF 0x1DAC      LDR.W    R1,??RoadBrd_ParseString_48+0x8
   \   00000392   0xA80A             ADD      R0,SP,#+40
   \   00000394   0x.... 0x....      BL       strcpy
    396                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000398   0xA80A             ADD      R0,SP,#+40
   \   0000039A   0x.... 0x....      BL       strlen
   \   0000039E   0xA90A             ADD      R1,SP,#+40
   \   000003A0   0x.... 0x....      BL       BGM111_Transmit
    397                        }
    398                        strcpy( (char *)tempBffr2, "Road Sound: All buffers cleared.\r\n");;
   \                     ??RoadBrd_ParseString_49: (+1)
   \   000003A4   0xF8DF 0x1E10      LDR.W    R1,??RoadBrd_ParseString_50
   \   000003A8   0xA80A             ADD      R0,SP,#+40
   \   000003AA   0x.... 0x....      BL       strcpy
    399                        break;
   \   000003AE   0xF004 0xBA1D      B.W      ??RoadBrd_ParseString_26
    400          //**************************************************************************************************
    401                      case 'A':
    402                        // Barometer. 
    403                        if (Size == 1)
   \                     ??RoadBrd_ParseString_12: (+1)
   \   000003B2   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000003B6   0xF1B8 0x0F01      CMP      R8,#+1
   \   000003BA   0xF000 0x8158      BEQ.W    ??RoadBrd_ParseString_51
    404                        {
    405          //------------------ A Command...Read Pressure...PRESS_OUT_XL...PRESS_OUT_L...PRESS_OUT_H     
    406                        }
    407                        else
    408                        {
    409                          switch( tempBffr[1] )
   \   000003BE   0x7860             LDRB     R0,[R4, #+1]
   \   000003C0   0x2836             CMP      R0,#+54
   \   000003C2   0xD039             BEQ.N    ??RoadBrd_ParseString_52
   \   000003C4   0x2838             CMP      R0,#+56
   \   000003C6   0xF000 0x80BB      BEQ.W    ??RoadBrd_ParseString_53
   \   000003CA   0x2839             CMP      R0,#+57
   \   000003CC   0xF000 0x8125      BEQ.W    ??RoadBrd_ParseString_54
   \   000003D0   0x2849             CMP      R0,#+73
   \   000003D2   0xF040 0x8147      BNE.W    ??RoadBrd_ParseString_55
    410                          {
    411          //------------------ AI Command...Initialize Barometer Sensor     
    412                            case 'I':
    413                              // Clean out old pressure.
    414          //                    Status = RoadBrd_Baro_ReadPressure( &PRPMeasure );
    415                              // Clean out old Temp data.
    416          //                    Status = RoadBrd_Baro_ReadTemp( i2cData );
    417                              //************ Wait 50msec.
    418          //                    RoadBrd_Delay(500);  
    419                   
    420                              Status = RoadBrd_Init_Barometer();
   \                     ??RoadBrd_ParseString_56: (+1)
   \   000003D6   0x.... 0x....      BL       RoadBrd_Init_Barometer
   \   000003DA   0x0006             MOVS     R6,R0
    421                              // Is this a BLE Operation?
    422                              if ( BLE_Flag )
   \   000003DC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000003DE   0x2D00             CMP      R5,#+0
   \   000003E0   0xD00A             BEQ.N    ??RoadBrd_ParseString_57
    423                              {
    424                                // Yes...Build and Send BLE Response NOW.
    425                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000003E2   0xF8DF 0x1DD8      LDR.W    R1,??RoadBrd_ParseString_50+0x4
   \   000003E6   0xA80A             ADD      R0,SP,#+40
   \   000003E8   0x.... 0x....      BL       strcpy
    426                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000003EC   0xA80A             ADD      R0,SP,#+40
   \   000003EE   0x.... 0x....      BL       strlen
   \   000003F2   0xA90A             ADD      R1,SP,#+40
   \   000003F4   0x.... 0x....      BL       BGM111_Transmit
    427                              }
    428                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_57: (+1)
   \   000003F8   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000003FA   0x2E00             CMP      R6,#+0
   \   000003FC   0xD105             BNE.N    ??RoadBrd_ParseString_58
    429                              {
    430                                  strcpy( (char *)tempBffr2, "Initialize Barometer Sensor Passed.\r\n");;
   \   000003FE   0xF8DF 0x1DC0      LDR.W    R1,??RoadBrd_ParseString_50+0x8
   \   00000402   0xA80A             ADD      R0,SP,#+40
   \   00000404   0x.... 0x....      BL       strcpy
   \   00000408   0xE015             B.N      ??RoadBrd_ParseString_59
    431                              }
    432                              else
    433                              {
    434                                  strcpy( (char *)tempBffr2, "Initialize Barometer Sensor FAILED.\r\n");
   \                     ??RoadBrd_ParseString_58: (+1)
   \   0000040A   0xF8DF 0x1DB8      LDR.W    R1,??RoadBrd_ParseString_50+0xC
   \   0000040E   0xA80A             ADD      R0,SP,#+40
   \   00000410   0x.... 0x....      BL       strcpy
    435                                  Save_Status = Status;
   \   00000414   0xF88D 0x60B4      STRB     R6,[SP, #+180]
    436          #ifdef NUCLEO
    437                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    438          #else
    439                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000418   0xA90A             ADD      R1,SP,#+40
   \   0000041A   0x2000             MOVS     R0,#+0
   \   0000041C   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000420   0x0006             MOVS     R6,R0
    440          #endif
    441                                  if (Status != HAL_OK)
   \   00000422   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000424   0x2E00             CMP      R6,#+0
   \   00000426   0xD003             BEQ.N    ??RoadBrd_ParseString_60
    442                                    return Status;
   \   00000428   0x0030             MOVS     R0,R6
   \   0000042A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000042C   0xF004 0xBA58      B.W      ??RoadBrd_ParseString_4
    443                                  else
    444                                    Status = Save_Status;
   \                     ??RoadBrd_ParseString_60: (+1)
   \   00000430   0xF89D 0x00B4      LDRB     R0,[SP, #+180]
   \   00000434   0x0006             MOVS     R6,R0
    445                              }
    446                              break;
   \                     ??RoadBrd_ParseString_59: (+1)
   \   00000436   0xE11A             B.N      ??RoadBrd_ParseString_51
    447          //------------------ A0 Command...Enable Barometer     
    448          #if 0                  
    449                          case '0':
    450                              Status = RoadBrd_Enable_Barometer();
    451                              // Is this a BLE Operation?
    452                              if ( BLE_Flag )
    453                              {
    454                                // Yes...Build and Send BLE Response NOW.
    455                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
    456                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
    457                              }
    458                              if (Status == HAL_OK)
    459                              {
    460                                  strcpy( (char *)tempBffr2, "Barometer Sensor: Enable Barometer Passed.\r\n");;
    461                              }
    462                              else
    463                              {
    464                                  strcpy( (char *)tempBffr2, "Barometer Sensor: Enable Barometer FAILED.\r\n");;
    465                              }
    466                              break;
    467          //------------------ A1 Command...Disable Barometer     
    468                            case '1':
    469                              Status = RoadBrd_Disable_Barometer();
    470                              // Is this a BLE Operation?
    471                              if ( BLE_Flag )
    472                              {
    473                                // Yes...Build and Send BLE Response NOW.
    474                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
    475                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
    476                              }
    477                              if (Status == HAL_OK)
    478                              {
    479                                  strcpy( (char *)tempBffr2, "Barometer Sensor: Disable Barometer Passed.\r\n");;
    480                              }
    481                              else
    482                              {
    483                                  strcpy( (char *)tempBffr2, "Barometer Sensor: Disable Barometer FAILED.\r\n");;
    484                                  Save_Status = Status;
    485          #ifdef NUCLEO
    486                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    487          #else
    488                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
    489          #endif
    490                                  if (Status != HAL_OK)
    491                                    return Status;
    492                                  else
    493                                    Status = Save_Status;
    494                              }
    495                              break;
    496          //------------------ A2 Command...Start the Barometer but do not wait.     
    497                            case '2':
    498                              Status = RoadBrd_StartSample_Barometer();
    499                              // Is this a BLE Operation?
    500                              if ( BLE_Flag )
    501                              {
    502                                // Yes...Build and Send BLE Response NOW.
    503                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
    504                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
    505                              }
    506                              if (Status == HAL_OK)
    507                              {
    508                                  strcpy( (char *)tempBffr2, "Start the Barometer but do not wait Passed.\r\n");;
    509                              }
    510                              else
    511                              {
    512                                  strcpy( (char *)tempBffr2, "Start the Barometer but do not wait FAILED.\r\n");;
    513                                  Save_Status = Status;
    514          #ifdef NUCLEO
    515                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    516          #else
    517                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
    518          #endif
    519                                  if (Status != HAL_OK)
    520                                    return Status;
    521                                  else
    522                                    Status = Save_Status;
    523                              }
    524                              break;
    525          //------------------ A3 Command...Start the Barometer and wait for response.    
    526                            case '3':
    527                              Status = RoadBrd_StartSample_BarometerWait();
    528                              // Is this a BLE Operation?
    529                              if ( BLE_Flag )
    530                              {
    531                                // Yes...Build and Send BLE Response NOW.
    532                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
    533                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
    534                              }
    535                              if (Status == HAL_OK)
    536                              {
    537                                  strcpy( (char *)tempBffr2, "Start the Barometer and wait for response Passed.\r\n");;
    538                              }
    539                              else
    540                              {
    541                                  strcpy( (char *)tempBffr2, "Start the Barometer and wait for response FAILED.\r\n");;
    542                                  Save_Status = Status;
    543          #ifdef NUCLEO
    544                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    545          #else
    546                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
    547          #endif
    548                                  if (Status != HAL_OK)
    549                                    return Status;
    550                                  else
    551                                    Status = Save_Status;
    552                              }
    553                              break;
    554          //------------------ A4 Command...Return Status    
    555                            case '4':
    556                              // Is this a BLE Operation?
    557                              if ( BLE_Flag )
    558                              {
    559                                // Yes...Build and Send BLE Response NOW.
    560                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
    561                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
    562                              }
    563                              Status = RoadBrd_Barometer_Status( &PRMeasure );
    564                              if (Status == HAL_OK)
    565                              {
    566                                sprintf( (char *)tempBffr2, "Barometer Sensor Status: %02x / ", PRMeasure.Status );
    567                                strcat( (char *)tempBffr2, (char *)PRMeasure.Raw );
    568                                strcat( (char *)tempBffr2, "\r\n" );
    569                              }
    570                              break;
    571          //------------------ A5 Command...Wait for Pressure to be complete. 
    572                            case '5':
    573                              Status = RoadBrd_WaitForPressure( (uint16_t)BARO_WAITCNT );
    574                              // Is this a BLE Operation?
    575                              if ( BLE_Flag )
    576                              {
    577                                // Yes...Build and Send BLE Response NOW.
    578                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
    579                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
    580                              }
    581                              if (Status == HAL_OK)
    582                              {
    583                                  strcpy( (char *)tempBffr2, "Wait for Pressure to be complete Passed.\r\n");;
    584                              }
    585                              else
    586                              {
    587                                  strcpy( (char *)tempBffr2, "Wait for Pressure to be complete FAILED.\r\n");;
    588                                  Save_Status = Status;
    589          #ifdef NUCLEO
    590                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    591          #else
    592                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
    593          #endif
    594                                  if (Status != HAL_OK)
    595                                    return Status;
    596                                  else
    597                                    Status = Save_Status;
    598                              }
    599                              break;
    600          #endif
    601          //------------------ A6 Command...Read Pressure...PRESS_OUT_XL...PRESS_OUT_L...PRESS_OUT_H     
    602                            case '6':
    603                              //Status = RoadBrd_Barometer_Status( &PRMeasure );
    604                              Status = RoadBrd_Baro_ReadPressure( &PRPMeasure );
   \                     ??RoadBrd_ParseString_52: (+1)
   \   00000438   0xA8AD             ADD      R0,SP,#+692
   \   0000043A   0x.... 0x....      BL       RoadBrd_Baro_ReadPressure
   \   0000043E   0x0006             MOVS     R6,R0
    605                              if (Status == HAL_OK)
   \   00000440   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000442   0x2E00             CMP      R6,#+0
   \   00000444   0xD104             BNE.N    ??RoadBrd_ParseString_61
    606                                Status = RoadBrd_Baro_ReadPressure_Scaled( &PRPMeasureScaled );
   \   00000446   0xF50D 0x6085      ADD      R0,SP,#+1064
   \   0000044A   0x.... 0x....      BL       RoadBrd_Baro_ReadPressure_Scaled
   \   0000044E   0x0006             MOVS     R6,R0
    607                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_61: (+1)
   \   00000450   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000452   0x2E00             CMP      R6,#+0
   \   00000454   0xD15D             BNE.N    ??RoadBrd_ParseString_62
    608                              {
    609                                strcpy( (char *)tempBffr2, "A6 Command...Read Pressure Passed.\r\n");;
   \   00000456   0xF8DF 0x1E08      LDR.W    R1,??RoadBrd_ParseString_63
   \   0000045A   0xA80A             ADD      R0,SP,#+40
   \   0000045C   0x.... 0x....      BL       strcpy
    610          #ifdef NUCLEO
    611                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    612          #else
    613                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000460   0xA90A             ADD      R1,SP,#+40
   \   00000462   0x2000             MOVS     R0,#+0
   \   00000464   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000468   0x0006             MOVS     R6,R0
    614          #endif
    615                                if (Status != HAL_OK)
   \   0000046A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000046C   0x2E00             CMP      R6,#+0
   \   0000046E   0xD003             BEQ.N    ??RoadBrd_ParseString_64
    616                                  return Status;
   \   00000470   0x0030             MOVS     R0,R6
   \   00000472   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000474   0xF004 0xBA34      B.W      ??RoadBrd_ParseString_4
    617                                // NOW, Build Data String..
    618                                sprintf( (char *)tempBffr2, " PRESSURE(PRESS_OUT_H...PRESS_OUT_L...PRESS_OUT_XL)\r\n" );
   \                     ??RoadBrd_ParseString_64: (+1)
   \   00000478   0xF8DF 0x1DE8      LDR.W    R1,??RoadBrd_ParseString_63+0x4
   \   0000047C   0xA80A             ADD      R0,SP,#+40
   \   0000047E   0x.... 0x....      BL       sprintf
    619          #ifdef NUCLEO
    620                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    621          #else
    622                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000482   0xA90A             ADD      R1,SP,#+40
   \   00000484   0x2000             MOVS     R0,#+0
   \   00000486   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000048A   0x0006             MOVS     R6,R0
    623          #endif
    624                                if (Status != HAL_OK)
   \   0000048C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000048E   0x2E00             CMP      R6,#+0
   \   00000490   0xD003             BEQ.N    ??RoadBrd_ParseString_65
    625                                  return Status;
   \   00000492   0x0030             MOVS     R0,R6
   \   00000494   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000496   0xF004 0xBA23      B.W      ??RoadBrd_ParseString_4
    626                               
    627                                // Now show Decimal value of items.
    628                                sprintf( (char *)tempBffr2, " PRESSURE: %s/%s\r\n", (char *)PRPMeasure.Pressure, (char *)PRPMeasureScaled.Pressure );
   \                     ??RoadBrd_ParseString_65: (+1)
   \   0000049A   0xF50D 0x6385      ADD      R3,SP,#+1064
   \   0000049E   0xAAAD             ADD      R2,SP,#+692
   \   000004A0   0xF8DF 0x1DC4      LDR.W    R1,??RoadBrd_ParseString_63+0x8
   \   000004A4   0xA80A             ADD      R0,SP,#+40
   \   000004A6   0x.... 0x....      BL       sprintf
    629          #ifdef NUCLEO
    630                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    631          #else
    632                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000004AA   0xA90A             ADD      R1,SP,#+40
   \   000004AC   0x2000             MOVS     R0,#+0
   \   000004AE   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000004B2   0x0006             MOVS     R6,R0
    633          #endif
    634                                if (Status != HAL_OK)
   \   000004B4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000004B6   0x2E00             CMP      R6,#+0
   \   000004B8   0xD006             BEQ.N    ??RoadBrd_ParseString_66
    635                                  return Status;
   \   000004BA   0x0030             MOVS     R0,R6
   \   000004BC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000004BE   0xF004 0xBA0F      B.W      ??RoadBrd_ParseString_4
   \   000004C2   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_29:
   \   000004C4   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
    636                                // Is this a BLE Operation?
    637                                if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_66: (+1)
   \   000004C8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000004CA   0x2D00             CMP      R5,#+0
   \   000004CC   0xD00D             BEQ.N    ??RoadBrd_ParseString_67
    638                                {
    639                                  // Yes...Build and Send BLE Response NOW.
    640                                  sprintf( (char *)tempBffr2, "<STATUS>PRESSURE: %s/%s</STATUS>", (char *)PRPMeasure.Pressure, (char *)PRPMeasureScaled.Pressure );
   \   000004CE   0xF50D 0x6385      ADD      R3,SP,#+1064
   \   000004D2   0xAAAD             ADD      R2,SP,#+692
   \   000004D4   0xF8DF 0x1D98      LDR.W    R1,??RoadBrd_ParseString_63+0x10
   \   000004D8   0xA80A             ADD      R0,SP,#+40
   \   000004DA   0x.... 0x....      BL       sprintf
    641                                  BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000004DE   0xA80A             ADD      R0,SP,#+40
   \   000004E0   0x.... 0x....      BL       strlen
   \   000004E4   0xA90A             ADD      R1,SP,#+40
   \   000004E6   0x.... 0x....      BL       BGM111_Transmit
    642                                }
    643                                // Now show hex value of items.
    644                                sprintf( (char *)tempBffr2, " PRESSURE:  " );
   \                     ??RoadBrd_ParseString_67: (+1)
   \   000004EA   0xF8DF 0x1D88      LDR.W    R1,??RoadBrd_ParseString_63+0x14
   \   000004EE   0xA80A             ADD      R0,SP,#+40
   \   000004F0   0x.... 0x....      BL       sprintf
    645                                strcat( (char *)tempBffr2, (char *)PRPMeasure.Raw );
   \   000004F4   0xA9B0             ADD      R1,SP,#+704
   \   000004F6   0xA80A             ADD      R0,SP,#+40
   \   000004F8   0x.... 0x....      BL       strcat
    646                                sprintf( (char *)tempBffr3, "  -  %08x\r\n", PRPMeasure.RawC);
   \   000004FC   0x9AB3             LDR      R2,[SP, #+716]
   \   000004FE   0xF8DF 0x1D78      LDR.W    R1,??RoadBrd_ParseString_63+0x18
   \   00000502   0xA82A             ADD      R0,SP,#+168
   \   00000504   0x.... 0x....      BL       sprintf
    647                                strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   00000508   0xA92A             ADD      R1,SP,#+168
   \   0000050A   0xA80A             ADD      R0,SP,#+40
   \   0000050C   0x.... 0x....      BL       strcat
   \   00000510   0xE015             B.N      ??RoadBrd_ParseString_68
    648                              }
    649                              else
    650                              {
    651                                  strcpy( (char *)tempBffr2, "A6 Command...Read Pressure FAILED.\r\n");;
   \                     ??RoadBrd_ParseString_62: (+1)
   \   00000512   0xF8DF 0x1D68      LDR.W    R1,??RoadBrd_ParseString_63+0x1C
   \   00000516   0xA80A             ADD      R0,SP,#+40
   \   00000518   0x.... 0x....      BL       strcpy
    652                                  Save_Status = Status;
   \   0000051C   0xF88D 0x60B4      STRB     R6,[SP, #+180]
    653          #ifdef NUCLEO
    654                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    655          #else
    656                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000520   0xA90A             ADD      R1,SP,#+40
   \   00000522   0x2000             MOVS     R0,#+0
   \   00000524   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000528   0x0006             MOVS     R6,R0
    657          #endif
    658                                  if (Status != HAL_OK)
   \   0000052A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000052C   0x2E00             CMP      R6,#+0
   \   0000052E   0xD003             BEQ.N    ??RoadBrd_ParseString_69
    659                                    return Status;
   \   00000530   0x0030             MOVS     R0,R6
   \   00000532   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000534   0xF004 0xB9D4      B.W      ??RoadBrd_ParseString_4
    660                                  else
    661                                    Status = Save_Status;
   \                     ??RoadBrd_ParseString_69: (+1)
   \   00000538   0xF89D 0x00B4      LDRB     R0,[SP, #+180]
   \   0000053C   0x0006             MOVS     R6,R0
    662                              }
    663                              break;
   \                     ??RoadBrd_ParseString_68: (+1)
   \   0000053E   0xE096             B.N      ??RoadBrd_ParseString_51
    664          
    665          //------------------ A8 Command...Read Temperature....TEMP_OUT_L...TEMP_OUT_H    
    666                            case '8':
    667                              Status = RoadBrd_Baro_ReadTemp( &TMeasure );
   \                     ??RoadBrd_ParseString_53: (+1)
   \   00000540   0xA83C             ADD      R0,SP,#+240
   \   00000542   0x.... 0x....      BL       RoadBrd_Baro_ReadTemp
   \   00000546   0x0006             MOVS     R6,R0
    668                              if (Status == HAL_OK)
   \   00000548   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000054A   0x2E00             CMP      R6,#+0
   \   0000054C   0xD127             BNE.N    ??RoadBrd_ParseString_70
    669                              {
    670                                // Send string to UART..
    671                                strcpy( (char *)tempBffr2, "A8 Command...Read Temperature Passed.\r\n");
   \   0000054E   0xF8DF 0x1E0C      LDR.W    R1,??RoadBrd_ParseString_71
   \   00000552   0xA80A             ADD      R0,SP,#+40
   \   00000554   0x.... 0x....      BL       strcpy
    672          #ifdef NUCLEO
    673                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    674          #else
    675                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000558   0xA90A             ADD      R1,SP,#+40
   \   0000055A   0x2000             MOVS     R0,#+0
   \   0000055C   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000560   0x0006             MOVS     R6,R0
    676          #endif
    677                                if (Status != HAL_OK)
   \   00000562   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000564   0x2E00             CMP      R6,#+0
   \   00000566   0xD003             BEQ.N    ??RoadBrd_ParseString_72
    678                                  return Status;
   \   00000568   0x0030             MOVS     R0,R6
   \   0000056A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000056C   0xF004 0xB9B8      B.W      ??RoadBrd_ParseString_4
    679                                // NOW, Build Data String..
    680                                sprintf( (char *)tempBffr2, "     TEMP DATA: " );
   \                     ??RoadBrd_ParseString_72: (+1)
   \   00000570   0xF8DF 0x1DEC      LDR.W    R1,??RoadBrd_ParseString_71+0x4
   \   00000574   0xA80A             ADD      R0,SP,#+40
   \   00000576   0x.... 0x....      BL       sprintf
    681                                strcat( (char *)tempBffr2, (char *)TMeasure.Raw );
   \   0000057A   0xF10D 0x01FE      ADD      R1,SP,#+254
   \   0000057E   0xA80A             ADD      R0,SP,#+40
   \   00000580   0x.... 0x....      BL       strcat
    682                                strcat( (char *)tempBffr2, "\r\n" );
   \   00000584   0xA1DB             ADR.N    R1,??RoadBrd_ParseString_73  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000586   0xA80A             ADD      R0,SP,#+40
   \   00000588   0x.... 0x....      BL       strcat
    683                              }
    684                              else
    685                                break;
    686          #ifdef NUCLEO
    687                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    688          #else
    689                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000058C   0xA90A             ADD      R1,SP,#+40
   \   0000058E   0x2000             MOVS     R0,#+0
   \   00000590   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000594   0x0006             MOVS     R6,R0
    690          #endif
    691                              if (Status != HAL_OK)
   \   00000596   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000598   0x2E00             CMP      R6,#+0
   \   0000059A   0xD101             BNE.N    ??RoadBrd_ParseString_74
   \   0000059C   0xE004             B.N      ??RoadBrd_ParseString_75
   \                     ??RoadBrd_ParseString_70: (+1)
   \   0000059E   0xE066             B.N      ??RoadBrd_ParseString_51
    692                                return Status;
   \                     ??RoadBrd_ParseString_74: (+1)
   \   000005A0   0x0030             MOVS     R0,R6
   \   000005A2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000005A4   0xF004 0xB99C      B.W      ??RoadBrd_ParseString_4
    693                              // NOW, Build Data String..
    694                              sprintf( (char *)tempBffr2, "     TEMP DATA(Decimal): %d\r\n", TMeasure.RawC );
   \                     ??RoadBrd_ParseString_75: (+1)
   \   000005A8   0xF8BD 0x2106      LDRH     R2,[SP, #+262]
   \   000005AC   0xF8DF 0x1DB4      LDR.W    R1,??RoadBrd_ParseString_71+0x8
   \   000005B0   0xA80A             ADD      R0,SP,#+40
   \   000005B2   0x.... 0x....      BL       sprintf
    695          #ifdef NUCLEO
    696                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    697          #else
    698                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000005B6   0xA90A             ADD      R1,SP,#+40
   \   000005B8   0x2000             MOVS     R0,#+0
   \   000005BA   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000005BE   0x0006             MOVS     R6,R0
    699          #endif
    700                              if (Status != HAL_OK)
   \   000005C0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000005C2   0x2E00             CMP      R6,#+0
   \   000005C4   0xD003             BEQ.N    ??RoadBrd_ParseString_76
    701                                return Status;
   \   000005C6   0x0030             MOVS     R0,R6
   \   000005C8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000005CA   0xF004 0xB989      B.W      ??RoadBrd_ParseString_4
    702                              // Is this a BLE Operation?
    703                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_76: (+1)
   \   000005CE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000005D0   0x2D00             CMP      R5,#+0
   \   000005D2   0xD00A             BEQ.N    ??RoadBrd_ParseString_77
    704                              {
    705                                // Yes...Build and Send BLE Response NOW.
    706                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000005D4   0xF8DF 0x1BE4      LDR.W    R1,??RoadBrd_ParseString_50+0x4
   \   000005D8   0xA80A             ADD      R0,SP,#+40
   \   000005DA   0x.... 0x....      BL       strcpy
    707                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000005DE   0xA80A             ADD      R0,SP,#+40
   \   000005E0   0x.... 0x....      BL       strlen
   \   000005E4   0xA90A             ADD      R1,SP,#+40
   \   000005E6   0x.... 0x....      BL       BGM111_Transmit
    708                              }
    709                              // Now calculate Celcius and Farenheit Temp.
    710                              sprintf( (char *)tempBffr2, "     TempC: " );
   \                     ??RoadBrd_ParseString_77: (+1)
   \   000005EA   0xF8DF 0x1E1C      LDR.W    R1,??RoadBrd_ParseString_78
   \   000005EE   0xA80A             ADD      R0,SP,#+40
   \   000005F0   0x.... 0x....      BL       sprintf
    711                              strcat( (char *)tempBffr2, (char *)TMeasure.TempC );
   \   000005F4   0xA93C             ADD      R1,SP,#+240
   \   000005F6   0xA80A             ADD      R0,SP,#+40
   \   000005F8   0x.... 0x....      BL       strcat
    712                              strcat( (char *)tempBffr2, "     TempF: " );
   \   000005FC   0xF8DF 0x1E0C      LDR.W    R1,??RoadBrd_ParseString_78+0x4
   \   00000600   0xA80A             ADD      R0,SP,#+40
   \   00000602   0x.... 0x....      BL       strcat
    713                              strcat( (char *)tempBffr2, (char *)TMeasure.TempF );
   \   00000606   0xF10D 0x01F7      ADD      R1,SP,#+247
   \   0000060A   0xA80A             ADD      R0,SP,#+40
   \   0000060C   0x.... 0x....      BL       strcat
    714                              strcat( (char *)tempBffr2, "\r\n" );
   \   00000610   0xA1B8             ADR.N    R1,??RoadBrd_ParseString_73  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000612   0xA80A             ADD      R0,SP,#+40
   \   00000614   0x.... 0x....      BL       strcat
    715          /*                    if (Status == HAL_OK)
    716                              {
    717                                strcpy( (char *)tempBffr2, "A8 Command...Read Temperature Passed.\r\n");;
    718          #ifdef NUCLEO
    719                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    720          #else
    721                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
    722          #endif
    723                                if (Status != HAL_OK)
    724                                  return Status;
    725                                // NOW, Build Data String..
    726                                sprintf( (char *)tempBffr2, " Temperature(TEMP_OUT_L...TEMP_OUT_H)\r\n" );
    727          #ifdef NUCLEO
    728                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    729          #else
    730                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
    731          #endif
    732                                if (Status != HAL_OK)
    733                                  return Status;
    734                                sprintf( (char *)tempBffr2, " Temperature:  %02x   %02x\r\n", i2cData[0], i2cData[1] );
    735                              }
    736                              else
    737                              {
    738                                  strcpy( (char *)tempBffr2, "A8 Command...Read Temperature FAILED.\r\n");;
    739                                  Save_Status = Status;
    740          #ifdef NUCLEO
    741                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    742          #else
    743                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
    744          #endif
    745                                  if (Status != HAL_OK)
    746                                    return Status;
    747                                  else
    748                                    Status = Save_Status;
    749                              }*/
    750                              break;
   \   00000618   0xE029             B.N      ??RoadBrd_ParseString_51
    751          //------------------ A9 Command...Test and Verify WHO_AM_I     
    752                            case '9':
    753                              Status = RoadBrd_TestandRead_Barometer();
   \                     ??RoadBrd_ParseString_54: (+1)
   \   0000061A   0x.... 0x....      BL       RoadBrd_TestandRead_Barometer
   \   0000061E   0x0006             MOVS     R6,R0
    754                              // Is this a BLE Operation?
    755                              if ( BLE_Flag )
   \   00000620   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000622   0x2D00             CMP      R5,#+0
   \   00000624   0xD00A             BEQ.N    ??RoadBrd_ParseString_79
    756                              {
    757                                // Yes...Build and Send BLE Response NOW.
    758                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00000626   0xF8DF 0x1B94      LDR.W    R1,??RoadBrd_ParseString_50+0x4
   \   0000062A   0xA80A             ADD      R0,SP,#+40
   \   0000062C   0x.... 0x....      BL       strcpy
    759                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000630   0xA80A             ADD      R0,SP,#+40
   \   00000632   0x.... 0x....      BL       strlen
   \   00000636   0xA90A             ADD      R1,SP,#+40
   \   00000638   0x.... 0x....      BL       BGM111_Transmit
    760                              }
    761                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_79: (+1)
   \   0000063C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000063E   0x2E00             CMP      R6,#+0
   \   00000640   0xD108             BNE.N    ??RoadBrd_ParseString_80
    762                              {
    763                                  strcpy( (char *)tempBffr2, "Barometer Sensor: WHO_AM_I Passed.\r\n");
   \   00000642   0xF8DF 0x1E18      LDR.W    R1,??RoadBrd_ParseString_81
   \   00000646   0xA80A             ADD      R0,SP,#+40
   \   00000648   0x.... 0x....      BL       strcpy
   \   0000064C   0xE009             B.N      ??RoadBrd_ParseString_82
   \   0000064E   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_41:
   \   00000650   0x00 0x00          DC8      "",0x0,0x0,0x0
   \              0x00 0x00    
    764                              }
    765                              else
    766                              {
    767                                  strcpy( (char *)tempBffr2, "Barometer Sensor: WHO_AM_I FAILED.\r\n");
   \                     ??RoadBrd_ParseString_80: (+1)
   \   00000654   0xF8DF 0x1E08      LDR.W    R1,??RoadBrd_ParseString_81+0x4
   \   00000658   0xA80A             ADD      R0,SP,#+40
   \   0000065A   0x.... 0x....      BL       strcpy
    768                                  Status = HAL_OK;
   \   0000065E   0x2000             MOVS     R0,#+0
   \   00000660   0x0006             MOVS     R6,R0
    769                              }
    770                              break;
   \                     ??RoadBrd_ParseString_82: (+1)
   \   00000662   0xE004             B.N      ??RoadBrd_ParseString_51
    771                            default:
    772                              strcpy( (char *)tempBffr2, "ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_55: (+1)
   \   00000664   0xF8DF 0x1DFC      LDR.W    R1,??RoadBrd_ParseString_81+0x8
   \   00000668   0xA80A             ADD      R0,SP,#+40
   \   0000066A   0x.... 0x....      BL       strcpy
    773                              break;
    774                          } //EndSwitch
    775                        } //EndElse (Size == 1)
    776                        break;
   \                     ??RoadBrd_ParseString_51: (+1)
   \   0000066E   0xF004 0xB8BD      B.W      ??RoadBrd_ParseString_26
    777          //**************************************************************************************************
    778                      case 'B':
    779                        // Read Cool Eye. 
    780          //++++++++++++++++++++++++++++++++++++++++++  Cool Eye/Grid Eye Monitor Commands.
    781                        if (Size == 1)
   \                     ??RoadBrd_ParseString_13: (+1)
   \   00000672   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000676   0xF1B8 0x0F01      CMP      R8,#+1
   \   0000067A   0xF040 0x8150      BNE.W    ??RoadBrd_ParseString_83
    782                        {
    783          //------------------ B Command: Read Cool Eye/Grid Eye Values      
    784                          // Read Cool Eye/Grid Eye Values.....
    785                          if ( Get_DriverStates( GRIDEYE_MNTR_TASK ))
   \   0000067E   0x2005             MOVS     R0,#+5
   \   00000680   0x.... 0x....      BL       Get_DriverStates
   \   00000684   0x2800             CMP      R0,#+0
   \   00000686   0xD00B             BEQ.N    ??RoadBrd_ParseString_84
    786                          {
    787                            Status = RoadBrd_GridEye_ReadValues( &GridMeasure );
   \   00000688   0xA85A             ADD      R0,SP,#+360
   \   0000068A   0x.... 0x....      BL       RoadBrd_GridEye_ReadValues
   \   0000068E   0x0006             MOVS     R6,R0
    788                            if (Status == HAL_OK)
   \   00000690   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000692   0x2E00             CMP      R6,#+0
   \   00000694   0xD117             BNE.N    ??RoadBrd_ParseString_85
    789                              Status = RoadBrd_GridEye_ReadValues_Scaled( &GridMeasureScaled );
   \   00000696   0xA8D4             ADD      R0,SP,#+848
   \   00000698   0x.... 0x....      BL       RoadBrd_GridEye_ReadValues_Scaled
   \   0000069C   0x0006             MOVS     R6,R0
   \   0000069E   0xE012             B.N      ??RoadBrd_ParseString_85
    790                          }
    791                          else if ( Get_DriverStates( COOLEYE_MNTR_TASK ))
   \                     ??RoadBrd_ParseString_84: (+1)
   \   000006A0   0x2006             MOVS     R0,#+6
   \   000006A2   0x.... 0x....      BL       Get_DriverStates
   \   000006A6   0x2800             CMP      R0,#+0
   \   000006A8   0xD00B             BEQ.N    ??RoadBrd_ParseString_86
    792                          {
    793                            Status = RoadBrd_CoolEye_ReadValues( &GridMeasure );
   \   000006AA   0xA85A             ADD      R0,SP,#+360
   \   000006AC   0x.... 0x....      BL       RoadBrd_CoolEye_ReadValues
   \   000006B0   0x0006             MOVS     R6,R0
    794                            if (Status == HAL_OK)
   \   000006B2   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000006B4   0x2E00             CMP      R6,#+0
   \   000006B6   0xD106             BNE.N    ??RoadBrd_ParseString_85
    795                              Status = RoadBrd_CoolEye_ReadValues_Scaled( &GridMeasureScaled );
   \   000006B8   0xA8D4             ADD      R0,SP,#+848
   \   000006BA   0x.... 0x....      BL       RoadBrd_CoolEye_ReadValues_Scaled
   \   000006BE   0x0006             MOVS     R6,R0
   \   000006C0   0xE001             B.N      ??RoadBrd_ParseString_85
    796                          }
    797                          else
    798                            Status = HAL_ERROR;
   \                     ??RoadBrd_ParseString_86: (+1)
   \   000006C2   0x2001             MOVS     R0,#+1
   \   000006C4   0x0006             MOVS     R6,R0
    799                          
    800                          // Is this a BLE Operation?
    801                          if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_85: (+1)
   \   000006C6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000006C8   0x2D00             CMP      R5,#+0
   \   000006CA   0xD00A             BEQ.N    ??RoadBrd_ParseString_87
    802                          {
    803                            // Yes...Build and Send BLE Response NOW.
    804                            strcpy( (char *)tempBffr2, "<STATUS>ST_THERMAL_DUMP:");
   \   000006CC   0xF8DF 0x1E28      LDR.W    R1,??RoadBrd_ParseString_88
   \   000006D0   0xA80A             ADD      R0,SP,#+40
   \   000006D2   0x.... 0x....      BL       strcpy
    805                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000006D6   0xA80A             ADD      R0,SP,#+40
   \   000006D8   0x.... 0x....      BL       strlen
   \   000006DC   0xA90A             ADD      R1,SP,#+40
   \   000006DE   0x.... 0x....      BL       BGM111_Transmit
    806                          }
    807                          if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_87: (+1)
   \   000006E2   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000006E4   0x2E00             CMP      R6,#+0
   \   000006E6   0xF040 0x8107      BNE.W    ??RoadBrd_ParseString_89
    808                          {
    809                            // Send string to UART..
    810                            strcpy( (char *)tempBffr2, "Voltage Monitor/Shunt Voltage...\r\n");
   \   000006EA   0xF8DF 0x1E10      LDR.W    R1,??RoadBrd_ParseString_88+0x4
   \   000006EE   0xA80A             ADD      R0,SP,#+40
   \   000006F0   0x.... 0x....      BL       strcpy
    811          #ifdef NUCLEO
    812                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    813          #else
    814                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000006F4   0xA90A             ADD      R1,SP,#+40
   \   000006F6   0x2000             MOVS     R0,#+0
   \   000006F8   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000006FC   0x0006             MOVS     R6,R0
    815          #endif
    816                            if (Status != HAL_OK)
   \   000006FE   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000700   0x2E00             CMP      R6,#+0
   \   00000702   0xD003             BEQ.N    ??RoadBrd_ParseString_90
    817                              return Status;
   \   00000704   0x0030             MOVS     R0,R6
   \   00000706   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000708   0xF004 0xB8EA      B.W      ??RoadBrd_ParseString_4
    818                            // NOW, Build Data String..
    819                            for (x=0; x<9; x++)
   \                     ??RoadBrd_ParseString_90: (+1)
   \   0000070C   0x2000             MOVS     R0,#+0
   \   0000070E   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_91: (+1)
   \   00000710   0x2F09             CMP      R7,#+9
   \   00000712   0xF280 0x80DD      BGE.W    ??RoadBrd_ParseString_92
    820                            {
    821                              // Build String
    822                              switch(x)
   \   00000716   0x2F00             CMP      R7,#+0
   \   00000718   0xD00F             BEQ.N    ??RoadBrd_ParseString_93
   \   0000071A   0x2F02             CMP      R7,#+2
   \   0000071C   0xD035             BEQ.N    ??RoadBrd_ParseString_94
   \   0000071E   0xD320             BCC.N    ??RoadBrd_ParseString_95
   \   00000720   0x2F04             CMP      R7,#+4
   \   00000722   0xD05A             BEQ.N    ??RoadBrd_ParseString_96
   \   00000724   0xD345             BCC.N    ??RoadBrd_ParseString_97
   \   00000726   0x2F06             CMP      R7,#+6
   \   00000728   0xF000 0x807F      BEQ.W    ??RoadBrd_ParseString_98
   \   0000072C   0xD369             BCC.N    ??RoadBrd_ParseString_99
   \   0000072E   0x2F08             CMP      R7,#+8
   \   00000730   0xF000 0x80A3      BEQ.W    ??RoadBrd_ParseString_100
   \   00000734   0xF0C0 0x808D      BCC.W    ??RoadBrd_ParseString_101
   \   00000738   0xE0B3             B.N      ??RoadBrd_ParseString_102
    823                              {
    824                                case 0: //Thermistor Values
    825                                  sprintf( (char *)tempBffr2, "     Thermistor DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.Thermistor.Raw,
    826                                                                                                         GridMeasure.Thermistor.TempC,GridMeasureScaled.Thermistor.TempC,
    827                                                                                                         GridMeasure.Thermistor.TempF,GridMeasureScaled.Thermistor.TempF,
    828                                                                                                         GridMeasure.Thermistor.RawC );
   \                     ??RoadBrd_ParseString_93: (+1)
   \   0000073A   0xF8BD 0x017E      LDRH     R0,[SP, #+382]
   \   0000073E   0x9003             STR      R0,[SP, #+12]
   \   00000740   0xA8D5             ADD      R0,SP,#+852
   \   00000742   0x1CC0             ADDS     R0,R0,#+3
   \   00000744   0x9002             STR      R0,[SP, #+8]
   \   00000746   0xA85B             ADD      R0,SP,#+364
   \   00000748   0x1CC0             ADDS     R0,R0,#+3
   \   0000074A   0x9001             STR      R0,[SP, #+4]
   \   0000074C   0xA8D4             ADD      R0,SP,#+848
   \   0000074E   0x9000             STR      R0,[SP, #+0]
   \   00000750   0xAB5A             ADD      R3,SP,#+360
   \   00000752   0xF50D 0x72BB      ADD      R2,SP,#+374
   \   00000756   0xF8DF 0x1E0C      LDR.W    R1,??RoadBrd_ParseString_103
   \   0000075A   0xA80A             ADD      R0,SP,#+40
   \   0000075C   0x.... 0x....      BL       sprintf
    829          //                        sprintf( (char *)tempBffr2, "     Thermistor DATA: %s   %s   %s   %d\r\n", GridMeasure.Thermistor.Raw,
    830          //                                                                                               GridMeasure.Thermistor.TempC,
    831          //                                                                                               GridMeasure.Thermistor.TempF,
    832          //                                                                                               GridMeasure.Thermistor.RawC );
    833                                  break;
   \   00000760   0xE09F             B.N      ??RoadBrd_ParseString_102
    834                                case 1: //GridEye1 Values
    835                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye1.Raw,
    836                                                                                                         GridMeasure.GridEye1.TempC,GridMeasureScaled.GridEye1.TempC,
    837                                                                                                         GridMeasure.GridEye1.TempF,GridMeasureScaled.GridEye1.TempF,
    838                                                                                                         GridMeasure.GridEye1.RawC );
   \                     ??RoadBrd_ParseString_95: (+1)
   \   00000762   0xF8BD 0x0196      LDRH     R0,[SP, #+406]
   \   00000766   0x9003             STR      R0,[SP, #+12]
   \   00000768   0xA8DB             ADD      R0,SP,#+876
   \   0000076A   0x1CC0             ADDS     R0,R0,#+3
   \   0000076C   0x9002             STR      R0,[SP, #+8]
   \   0000076E   0xA861             ADD      R0,SP,#+388
   \   00000770   0x1CC0             ADDS     R0,R0,#+3
   \   00000772   0x9001             STR      R0,[SP, #+4]
   \   00000774   0xA8DA             ADD      R0,SP,#+872
   \   00000776   0x9000             STR      R0,[SP, #+0]
   \   00000778   0xAB60             ADD      R3,SP,#+384
   \   0000077A   0xF50D 0x72C7      ADD      R2,SP,#+398
   \   0000077E   0xF8DF 0x1DE8      LDR.W    R1,??RoadBrd_ParseString_103+0x4
   \   00000782   0xA80A             ADD      R0,SP,#+40
   \   00000784   0x.... 0x....      BL       sprintf
    839          //                        sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye1.Raw,
    840          //                                                                                               GridMeasure.GridEye1.TempC,
    841          //                                                                                               GridMeasure.GridEye1.TempF,
    842          //                                                                                               GridMeasure.GridEye1.RawC );
    843                                  break;
   \   00000788   0xE08B             B.N      ??RoadBrd_ParseString_102
    844                                case 2: //GridEye2 Values
    845                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye2.Raw,
    846                                                                                                         GridMeasure.GridEye2.TempC,GridMeasureScaled.GridEye2.TempC,
    847                                                                                                         GridMeasure.GridEye2.TempF,GridMeasureScaled.GridEye2.TempF,
    848                                                                                                         GridMeasure.GridEye2.RawC );
   \                     ??RoadBrd_ParseString_94: (+1)
   \   0000078A   0xF8BD 0x01AE      LDRH     R0,[SP, #+430]
   \   0000078E   0x9003             STR      R0,[SP, #+12]
   \   00000790   0xA8E1             ADD      R0,SP,#+900
   \   00000792   0x1CC0             ADDS     R0,R0,#+3
   \   00000794   0x9002             STR      R0,[SP, #+8]
   \   00000796   0xA867             ADD      R0,SP,#+412
   \   00000798   0x1CC0             ADDS     R0,R0,#+3
   \   0000079A   0x9001             STR      R0,[SP, #+4]
   \   0000079C   0xA8E0             ADD      R0,SP,#+896
   \   0000079E   0x9000             STR      R0,[SP, #+0]
   \   000007A0   0xAB66             ADD      R3,SP,#+408
   \   000007A2   0xF50D 0x72D3      ADD      R2,SP,#+422
   \   000007A6   0xF8DF 0x1DC0      LDR.W    R1,??RoadBrd_ParseString_103+0x4
   \   000007AA   0xA80A             ADD      R0,SP,#+40
   \   000007AC   0x.... 0x....      BL       sprintf
    849          //                        sprintf( (char *)tempBffr2, "     Grid 34 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye2.Raw,
    850          //                                                                                               GridMeasure.GridEye2.TempC,
    851          //                                                                                               GridMeasure.GridEye2.TempF,
    852          //                                                                                               GridMeasure.GridEye2.RawC );
    853                                  break;
   \   000007B0   0xE077             B.N      ??RoadBrd_ParseString_102
    854                                case 3: //GridEye3 Values
    855                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye3.Raw,
    856                                                                                                         GridMeasure.GridEye3.TempC,GridMeasureScaled.GridEye3.TempC,
    857                                                                                                         GridMeasure.GridEye3.TempF,GridMeasureScaled.GridEye3.TempF,
    858                                                                                                         GridMeasure.GridEye3.RawC );
   \                     ??RoadBrd_ParseString_97: (+1)
   \   000007B2   0xF8BD 0x01C6      LDRH     R0,[SP, #+454]
   \   000007B6   0x9003             STR      R0,[SP, #+12]
   \   000007B8   0xA8E7             ADD      R0,SP,#+924
   \   000007BA   0x1CC0             ADDS     R0,R0,#+3
   \   000007BC   0x9002             STR      R0,[SP, #+8]
   \   000007BE   0xA86D             ADD      R0,SP,#+436
   \   000007C0   0x1CC0             ADDS     R0,R0,#+3
   \   000007C2   0x9001             STR      R0,[SP, #+4]
   \   000007C4   0xA8E6             ADD      R0,SP,#+920
   \   000007C6   0x9000             STR      R0,[SP, #+0]
   \   000007C8   0xAB6C             ADD      R3,SP,#+432
   \   000007CA   0xF50D 0x72DF      ADD      R2,SP,#+446
   \   000007CE   0xF8DF 0x1D98      LDR.W    R1,??RoadBrd_ParseString_103+0x4
   \   000007D2   0xA80A             ADD      R0,SP,#+40
   \   000007D4   0x.... 0x....      BL       sprintf
    859          //                        sprintf( (char *)tempBffr2, "     Grid 35 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye3.Raw,
    860          //                                                                                               GridMeasure.GridEye3.TempC,
    861          //                                                                                               GridMeasure.GridEye3.TempF,
    862          //                                                                                               GridMeasure.GridEye3.RawC );
    863                                  break;
   \   000007D8   0xE063             B.N      ??RoadBrd_ParseString_102
    864                                case 4: //GridEye4 Values
    865                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye4.Raw,
    866                                                                                                         GridMeasure.GridEye4.TempC,GridMeasureScaled.GridEye4.TempC,
    867                                                                                                         GridMeasure.GridEye4.TempF,GridMeasureScaled.GridEye4.TempF,
    868                                                                                                         GridMeasure.GridEye4.RawC );
   \                     ??RoadBrd_ParseString_96: (+1)
   \   000007DA   0xF8BD 0x01DE      LDRH     R0,[SP, #+478]
   \   000007DE   0x9003             STR      R0,[SP, #+12]
   \   000007E0   0xA8ED             ADD      R0,SP,#+948
   \   000007E2   0x1CC0             ADDS     R0,R0,#+3
   \   000007E4   0x9002             STR      R0,[SP, #+8]
   \   000007E6   0xA873             ADD      R0,SP,#+460
   \   000007E8   0x1CC0             ADDS     R0,R0,#+3
   \   000007EA   0x9001             STR      R0,[SP, #+4]
   \   000007EC   0xA8EC             ADD      R0,SP,#+944
   \   000007EE   0x9000             STR      R0,[SP, #+0]
   \   000007F0   0xAB72             ADD      R3,SP,#+456
   \   000007F2   0xF50D 0x72EB      ADD      R2,SP,#+470
   \   000007F6   0xF8DF 0x1D70      LDR.W    R1,??RoadBrd_ParseString_103+0x4
   \   000007FA   0xA80A             ADD      R0,SP,#+40
   \   000007FC   0x.... 0x....      BL       sprintf
    869          //                        sprintf( (char *)tempBffr2, "     Grid 36 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye4.Raw,
    870          //                                                                                               GridMeasure.GridEye4.TempC,
    871          //                                                                                               GridMeasure.GridEye4.TempF,
    872          //                                                                                               GridMeasure.GridEye4.RawC );
    873                                  break;
   \   00000800   0xE04F             B.N      ??RoadBrd_ParseString_102
    874                                case 5: //GridEye5 Values
    875                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye5.Raw,
    876                                                                                                         GridMeasure.GridEye5.TempC,GridMeasureScaled.GridEye5.TempC,
    877                                                                                                         GridMeasure.GridEye5.TempF,GridMeasureScaled.GridEye5.TempF,
    878                                                                                                         GridMeasure.GridEye5.RawC );
   \                     ??RoadBrd_ParseString_99: (+1)
   \   00000802   0xF8BD 0x01F6      LDRH     R0,[SP, #+502]
   \   00000806   0x9003             STR      R0,[SP, #+12]
   \   00000808   0xA8F3             ADD      R0,SP,#+972
   \   0000080A   0x1CC0             ADDS     R0,R0,#+3
   \   0000080C   0x9002             STR      R0,[SP, #+8]
   \   0000080E   0xA879             ADD      R0,SP,#+484
   \   00000810   0x1CC0             ADDS     R0,R0,#+3
   \   00000812   0x9001             STR      R0,[SP, #+4]
   \   00000814   0xA8F2             ADD      R0,SP,#+968
   \   00000816   0x9000             STR      R0,[SP, #+0]
   \   00000818   0xAB78             ADD      R3,SP,#+480
   \   0000081A   0xF50D 0x72F7      ADD      R2,SP,#+494
   \   0000081E   0xF8DF 0x1D48      LDR.W    R1,??RoadBrd_ParseString_103+0x4
   \   00000822   0xA80A             ADD      R0,SP,#+40
   \   00000824   0x.... 0x....      BL       sprintf
    879          //                        sprintf( (char *)tempBffr2, "     Grid 37 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye5.Raw,
    880          //                                                                                               GridMeasure.GridEye5.TempC,
    881          //                                                                                               GridMeasure.GridEye5.TempF,
    882          //                                                                                               GridMeasure.GridEye5.RawC );
    883                                  break;
   \   00000828   0xE03B             B.N      ??RoadBrd_ParseString_102
    884                                case 6: //GridEye6 Values
    885                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye6.Raw,
    886                                                                                                         GridMeasure.GridEye6.TempC,GridMeasureScaled.GridEye6.TempC,
    887                                                                                                         GridMeasure.GridEye6.TempF,GridMeasureScaled.GridEye6.TempF,
    888                                                                                                         GridMeasure.GridEye6.RawC );
   \                     ??RoadBrd_ParseString_98: (+1)
   \   0000082A   0xF8BD 0x020E      LDRH     R0,[SP, #+526]
   \   0000082E   0x9003             STR      R0,[SP, #+12]
   \   00000830   0xA8F9             ADD      R0,SP,#+996
   \   00000832   0x1CC0             ADDS     R0,R0,#+3
   \   00000834   0x9002             STR      R0,[SP, #+8]
   \   00000836   0xA87F             ADD      R0,SP,#+508
   \   00000838   0x1CC0             ADDS     R0,R0,#+3
   \   0000083A   0x9001             STR      R0,[SP, #+4]
   \   0000083C   0xA8F8             ADD      R0,SP,#+992
   \   0000083E   0x9000             STR      R0,[SP, #+0]
   \   00000840   0xAB7E             ADD      R3,SP,#+504
   \   00000842   0xAA81             ADD      R2,SP,#+516
   \   00000844   0x1C92             ADDS     R2,R2,#+2
   \   00000846   0xF8DF 0x1D20      LDR.W    R1,??RoadBrd_ParseString_103+0x4
   \   0000084A   0xA80A             ADD      R0,SP,#+40
   \   0000084C   0x.... 0x....      BL       sprintf
    889          //                        sprintf( (char *)tempBffr2, "     Grid 38 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye6.Raw,
    890          //                                                                                               GridMeasure.GridEye6.TempC,
    891          //                                                                                               GridMeasure.GridEye6.TempF,
    892          //                                                                                               GridMeasure.GridEye6.RawC );
    893                                  break;
   \   00000850   0xE027             B.N      ??RoadBrd_ParseString_102
    894                                case 7: //GridEye7 Values
    895                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye7.Raw,
    896                                                                                                         GridMeasure.GridEye7.TempC,GridMeasureScaled.GridEye7.TempC,
    897                                                                                                         GridMeasure.GridEye7.TempF,GridMeasureScaled.GridEye7.TempF,
    898                                                                                                         GridMeasure.GridEye7.RawC );
   \                     ??RoadBrd_ParseString_101: (+1)
   \   00000852   0xF8BD 0x0226      LDRH     R0,[SP, #+550]
   \   00000856   0x9003             STR      R0,[SP, #+12]
   \   00000858   0xA8FF             ADD      R0,SP,#+1020
   \   0000085A   0x1CC0             ADDS     R0,R0,#+3
   \   0000085C   0x9002             STR      R0,[SP, #+8]
   \   0000085E   0xA885             ADD      R0,SP,#+532
   \   00000860   0x1CC0             ADDS     R0,R0,#+3
   \   00000862   0x9001             STR      R0,[SP, #+4]
   \   00000864   0xA8FE             ADD      R0,SP,#+1016
   \   00000866   0x9000             STR      R0,[SP, #+0]
   \   00000868   0xAB84             ADD      R3,SP,#+528
   \   0000086A   0xAA87             ADD      R2,SP,#+540
   \   0000086C   0x1C92             ADDS     R2,R2,#+2
   \   0000086E   0xF8DF 0x1CF8      LDR.W    R1,??RoadBrd_ParseString_103+0x4
   \   00000872   0xA80A             ADD      R0,SP,#+40
   \   00000874   0x.... 0x....      BL       sprintf
    899          //                        sprintf( (char *)tempBffr2, "     Grid 39 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye7.Raw,
    900          //                                                                                               GridMeasure.GridEye7.TempC,
    901          //                                                                                               GridMeasure.GridEye7.TempF,
    902          //                                                                                               GridMeasure.GridEye7.RawC );
    903                                  break;
   \   00000878   0xE013             B.N      ??RoadBrd_ParseString_102
    904                                case 8: //GridEye8 Values
    905                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye8.Raw,
    906                                                                                                         GridMeasure.GridEye8.TempC,GridMeasureScaled.GridEye8.TempC,
    907                                                                                                         GridMeasure.GridEye8.TempF,GridMeasureScaled.GridEye8.TempF,
    908                                                                                                         GridMeasure.GridEye8.RawC );
   \                     ??RoadBrd_ParseString_100: (+1)
   \   0000087A   0xF8BD 0x023E      LDRH     R0,[SP, #+574]
   \   0000087E   0x9003             STR      R0,[SP, #+12]
   \   00000880   0xA8FF             ADD      R0,SP,#+1020
   \   00000882   0x301B             ADDS     R0,R0,#+27
   \   00000884   0x9002             STR      R0,[SP, #+8]
   \   00000886   0xA88B             ADD      R0,SP,#+556
   \   00000888   0x1CC0             ADDS     R0,R0,#+3
   \   0000088A   0x9001             STR      R0,[SP, #+4]
   \   0000088C   0xF50D 0x6082      ADD      R0,SP,#+1040
   \   00000890   0x9000             STR      R0,[SP, #+0]
   \   00000892   0xAB8A             ADD      R3,SP,#+552
   \   00000894   0xAA8D             ADD      R2,SP,#+564
   \   00000896   0x1C92             ADDS     R2,R2,#+2
   \   00000898   0xF8DF 0x1CCC      LDR.W    R1,??RoadBrd_ParseString_103+0x4
   \   0000089C   0xA80A             ADD      R0,SP,#+40
   \   0000089E   0x.... 0x....      BL       sprintf
    909          //                        sprintf( (char *)tempBffr2, "     Grid 40 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye8.Raw,
    910          //                                                                                               GridMeasure.GridEye8.TempC,
    911          //                                                                                               GridMeasure.GridEye8.TempF,
    912          //                                                                                               GridMeasure.GridEye8.RawC );
    913                                  break;
    914                              } // EndSwitch(x)
    915                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_102: (+1)
   \   000008A2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000008A4   0x2D00             CMP      R5,#+0
   \   000008A6   0xD005             BEQ.N    ??RoadBrd_ParseString_104
    916                              {
    917                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000008A8   0xA80A             ADD      R0,SP,#+40
   \   000008AA   0x.... 0x....      BL       strlen
   \   000008AE   0xA90A             ADD      R1,SP,#+40
   \   000008B0   0x.... 0x....      BL       BGM111_Transmit
    918                              }
    919                              // Now Print String.
    920           #ifdef NUCLEO
    921                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    922          #else
    923                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \                     ??RoadBrd_ParseString_104: (+1)
   \   000008B4   0xA90A             ADD      R1,SP,#+40
   \   000008B6   0x2000             MOVS     R0,#+0
   \   000008B8   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000008BC   0x0006             MOVS     R6,R0
    924          #endif
    925                              if (Status != HAL_OK)
   \   000008BE   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000008C0   0x2E00             CMP      R6,#+0
   \   000008C2   0xD003             BEQ.N    ??RoadBrd_ParseString_105
    926                                return Status;
   \   000008C4   0x0030             MOVS     R0,R6
   \   000008C6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000008C8   0xF004 0xB80A      B.W      ??RoadBrd_ParseString_4
    927                            } // EndFor(x=0; x<9; x++)
   \                     ??RoadBrd_ParseString_105: (+1)
   \   000008CC   0x1C7F             ADDS     R7,R7,#+1
   \   000008CE   0xE71F             B.N      ??RoadBrd_ParseString_91
    928                            sprintf( (char *)tempBffr2, "     SHNT VLTG DATA: " );
   \                     ??RoadBrd_ParseString_92: (+1)
   \   000008D0   0xF8DF 0x1E04      LDR.W    R1,??RoadBrd_ParseString_106
   \   000008D4   0xA80A             ADD      R0,SP,#+40
   \   000008D6   0x.... 0x....      BL       sprintf
    929                            strcat( (char *)tempBffr2, (char *)VMeasure.Raw );
   \   000008DA   0xA944             ADD      R1,SP,#+272
   \   000008DC   0xA80A             ADD      R0,SP,#+40
   \   000008DE   0x.... 0x....      BL       strcat
    930                            strcat( (char *)tempBffr2, "\r\n" );
   \   000008E2   0xA104             ADR.N    R1,??RoadBrd_ParseString_73  ;; 0x0D, 0x0A, 0x00, 0x00
   \   000008E4   0xA80A             ADD      R0,SP,#+40
   \   000008E6   0x.... 0x....      BL       strcat
    931                          } //Endif(Status == HAL_OK)
    932                          else
    933                            break;
    934                          if ( BLE_Flag )
   \   000008EA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000008EC   0x2D00             CMP      R5,#+0
   \   000008EE   0xD105             BNE.N    ??RoadBrd_ParseString_107
   \   000008F0   0xE00F             B.N      ??RoadBrd_ParseString_108
   \   000008F2   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_73:
   \   000008F4   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
   \                     ??RoadBrd_ParseString_89: (+1)
   \   000008F8   0xF003 0xBF78      B.W      ??RoadBrd_ParseString_26
    935                          {
    936                            strcpy( (char *)tempBffr2, "</STATUS>");
   \                     ??RoadBrd_ParseString_107: (+1)
   \   000008FC   0xF8DF 0x1834      LDR.W    R1,??RoadBrd_ParseString_48
   \   00000900   0xA80A             ADD      R0,SP,#+40
   \   00000902   0x.... 0x....      BL       strcpy
    937                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000906   0xA80A             ADD      R0,SP,#+40
   \   00000908   0x.... 0x....      BL       strlen
   \   0000090C   0xA90A             ADD      R1,SP,#+40
   \   0000090E   0x.... 0x....      BL       BGM111_Transmit
    938                          }
    939                          sprintf( (char *)tempBffr2, "     COMPLETE.\r\n" );
   \                     ??RoadBrd_ParseString_108: (+1)
   \   00000912   0xF8DF 0x1E10      LDR.W    R1,??RoadBrd_ParseString_109
   \   00000916   0xA80A             ADD      R0,SP,#+40
   \   00000918   0x.... 0x....      BL       sprintf
   \   0000091C   0xE16F             B.N      ??RoadBrd_ParseString_110
    940                        }
    941                        else
    942                        {
    943                          switch( tempBffr[1] )
   \                     ??RoadBrd_ParseString_83: (+1)
   \   0000091E   0x7860             LDRB     R0,[R4, #+1]
   \   00000920   0x2830             CMP      R0,#+48
   \   00000922   0xD01F             BEQ.N    ??RoadBrd_ParseString_111
   \   00000924   0x2831             CMP      R0,#+49
   \   00000926   0xF000 0x8151      BEQ.W    ??RoadBrd_ParseString_112
   \   0000092A   0x2849             CMP      R0,#+73
   \   0000092C   0xF040 0x8167      BNE.W    ??RoadBrd_ParseString_110
    944                          {
    945          //------------------ BI Command: Initialize Cool Eye/Grid Eye Sensor
    946                            case 'I':
    947                              // Initialize Cool Eye/Grid Eye Sensor.
    948                              Status = RoadBrd_GridEyeInit();
   \                     ??RoadBrd_ParseString_113: (+1)
   \   00000930   0x.... 0x....      BL       RoadBrd_GridEyeInit
   \   00000934   0x0006             MOVS     R6,R0
    949                              // Is this a BLE Operation?
    950                              if ( BLE_Flag )
   \   00000936   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000938   0x2D00             CMP      R5,#+0
   \   0000093A   0xD00A             BEQ.N    ??RoadBrd_ParseString_114
    951                              {
    952                                // Yes...Build and Send BLE Response NOW.
    953                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   0000093C   0xF8DF 0x187C      LDR.W    R1,??RoadBrd_ParseString_50+0x4
   \   00000940   0xA80A             ADD      R0,SP,#+40
   \   00000942   0x.... 0x....      BL       strcpy
    954                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000946   0xA80A             ADD      R0,SP,#+40
   \   00000948   0x.... 0x....      BL       strlen
   \   0000094C   0xA90A             ADD      R1,SP,#+40
   \   0000094E   0x.... 0x....      BL       BGM111_Transmit
    955                              }
    956                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_114: (+1)
   \   00000952   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000954   0x2E00             CMP      R6,#+0
   \   00000956   0xD104             BNE.N    ??RoadBrd_ParseString_115
    957                              {
    958                                strcpy( (char *)tempBffr2, "Cool Eye/Grid Eye Sensor: Initialization Complete.\r\n");;
   \   00000958   0xF8DF 0x1E10      LDR.W    R1,??RoadBrd_ParseString_116
   \   0000095C   0xA80A             ADD      R0,SP,#+40
   \   0000095E   0x.... 0x....      BL       strcpy
    959                              }
    960                              break;
   \                     ??RoadBrd_ParseString_115: (+1)
   \   00000962   0xE14C             B.N      ??RoadBrd_ParseString_110
    961          //------------------ B0 Command...Read Cool Eye/Grid Eye Values.....
    962                            case '0':
    963                              // Read Cool Eye/Grid Eye Values.....
    964                              if ( Get_DriverStates( GRIDEYE_MNTR_TASK ))
   \                     ??RoadBrd_ParseString_111: (+1)
   \   00000964   0x2005             MOVS     R0,#+5
   \   00000966   0x.... 0x....      BL       Get_DriverStates
   \   0000096A   0x2800             CMP      R0,#+0
   \   0000096C   0xD00B             BEQ.N    ??RoadBrd_ParseString_117
    965                              {
    966                                Status = RoadBrd_GridEye_ReadValues( &GridMeasure );
   \   0000096E   0xA85A             ADD      R0,SP,#+360
   \   00000970   0x.... 0x....      BL       RoadBrd_GridEye_ReadValues
   \   00000974   0x0006             MOVS     R6,R0
    967                                if (Status == HAL_OK)
   \   00000976   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000978   0x2E00             CMP      R6,#+0
   \   0000097A   0xD117             BNE.N    ??RoadBrd_ParseString_118
    968                                  Status = RoadBrd_GridEye_ReadValues_Scaled( &GridMeasureScaled );
   \   0000097C   0xA8D4             ADD      R0,SP,#+848
   \   0000097E   0x.... 0x....      BL       RoadBrd_GridEye_ReadValues_Scaled
   \   00000982   0x0006             MOVS     R6,R0
   \   00000984   0xE012             B.N      ??RoadBrd_ParseString_118
    969                              }
    970                              else if ( Get_DriverStates( COOLEYE_MNTR_TASK ))
   \                     ??RoadBrd_ParseString_117: (+1)
   \   00000986   0x2006             MOVS     R0,#+6
   \   00000988   0x.... 0x....      BL       Get_DriverStates
   \   0000098C   0x2800             CMP      R0,#+0
   \   0000098E   0xD00B             BEQ.N    ??RoadBrd_ParseString_119
    971                              {
    972                                Status = RoadBrd_CoolEye_ReadValues( &GridMeasure );
   \   00000990   0xA85A             ADD      R0,SP,#+360
   \   00000992   0x.... 0x....      BL       RoadBrd_CoolEye_ReadValues
   \   00000996   0x0006             MOVS     R6,R0
    973                                if (Status == HAL_OK)
   \   00000998   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000099A   0x2E00             CMP      R6,#+0
   \   0000099C   0xD106             BNE.N    ??RoadBrd_ParseString_118
    974                                  Status = RoadBrd_CoolEye_ReadValues_Scaled( &GridMeasureScaled );
   \   0000099E   0xA8D4             ADD      R0,SP,#+848
   \   000009A0   0x.... 0x....      BL       RoadBrd_CoolEye_ReadValues_Scaled
   \   000009A4   0x0006             MOVS     R6,R0
   \   000009A6   0xE001             B.N      ??RoadBrd_ParseString_118
    975                              }
    976                              else
    977                                Status = HAL_ERROR;
   \                     ??RoadBrd_ParseString_119: (+1)
   \   000009A8   0x2001             MOVS     R0,#+1
   \   000009AA   0x0006             MOVS     R6,R0
    978          
    979                              // Is this a BLE Operation?
    980                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_118: (+1)
   \   000009AC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000009AE   0x2D00             CMP      R5,#+0
   \   000009B0   0xD00A             BEQ.N    ??RoadBrd_ParseString_120
    981                              {
    982                                // Yes...Build and Send BLE Response NOW.
    983                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000009B2   0xF8DF 0x1808      LDR.W    R1,??RoadBrd_ParseString_50+0x4
   \   000009B6   0xA80A             ADD      R0,SP,#+40
   \   000009B8   0x.... 0x....      BL       strcpy
    984                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000009BC   0xA80A             ADD      R0,SP,#+40
   \   000009BE   0x.... 0x....      BL       strlen
   \   000009C2   0xA90A             ADD      R1,SP,#+40
   \   000009C4   0x.... 0x....      BL       BGM111_Transmit
    985                              }
    986          
    987                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_120: (+1)
   \   000009C8   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000009CA   0x2E00             CMP      R6,#+0
   \   000009CC   0xF040 0x80FD      BNE.W    ??RoadBrd_ParseString_121
    988                              {
    989                                // Send string to UART..
    990                                strcpy( (char *)tempBffr2, "Voltage Monitor/Shunt Voltage...\r\n");
   \   000009D0   0xF8DF 0x1B28      LDR.W    R1,??RoadBrd_ParseString_88+0x4
   \   000009D4   0xA80A             ADD      R0,SP,#+40
   \   000009D6   0x.... 0x....      BL       strcpy
    991          #ifdef NUCLEO
    992                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    993          #else
    994                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000009DA   0xA90A             ADD      R1,SP,#+40
   \   000009DC   0x2000             MOVS     R0,#+0
   \   000009DE   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000009E2   0x0006             MOVS     R6,R0
    995          #endif
    996                                if (Status != HAL_OK)
   \   000009E4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000009E6   0x2E00             CMP      R6,#+0
   \   000009E8   0xD003             BEQ.N    ??RoadBrd_ParseString_122
    997                                  return Status;
   \   000009EA   0x0030             MOVS     R0,R6
   \   000009EC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000009EE   0xF003 0xBF77      B.W      ??RoadBrd_ParseString_4
    998                                // NOW, Build Data String..
    999                                for (x=0; x<9; x++)
   \                     ??RoadBrd_ParseString_122: (+1)
   \   000009F2   0x2000             MOVS     R0,#+0
   \   000009F4   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_123: (+1)
   \   000009F6   0x2F09             CMP      R7,#+9
   \   000009F8   0xF280 0x80D4      BGE.W    ??RoadBrd_ParseString_124
   1000                                {
   1001                                  // Build String
   1002                                  switch(x)
   \   000009FC   0x2F00             CMP      R7,#+0
   \   000009FE   0xD00F             BEQ.N    ??RoadBrd_ParseString_125
   \   00000A00   0x2F02             CMP      R7,#+2
   \   00000A02   0xD035             BEQ.N    ??RoadBrd_ParseString_126
   \   00000A04   0xD320             BCC.N    ??RoadBrd_ParseString_127
   \   00000A06   0x2F04             CMP      R7,#+4
   \   00000A08   0xD05A             BEQ.N    ??RoadBrd_ParseString_128
   \   00000A0A   0xD345             BCC.N    ??RoadBrd_ParseString_129
   \   00000A0C   0x2F06             CMP      R7,#+6
   \   00000A0E   0xF000 0x807F      BEQ.W    ??RoadBrd_ParseString_130
   \   00000A12   0xD369             BCC.N    ??RoadBrd_ParseString_131
   \   00000A14   0x2F08             CMP      R7,#+8
   \   00000A16   0xF000 0x80A3      BEQ.W    ??RoadBrd_ParseString_132
   \   00000A1A   0xF0C0 0x808D      BCC.W    ??RoadBrd_ParseString_133
   \   00000A1E   0xE0B3             B.N      ??RoadBrd_ParseString_134
   1003                                  {
   1004                                  case 0: //Thermistor Values
   1005                                    sprintf( (char *)tempBffr2, "     Thermistor DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.Thermistor.Raw,
   1006                                            GridMeasure.Thermistor.TempC,GridMeasureScaled.Thermistor.TempC,
   1007                                            GridMeasure.Thermistor.TempF,GridMeasureScaled.Thermistor.TempF,
   1008                                            GridMeasure.Thermistor.RawC );
   \                     ??RoadBrd_ParseString_125: (+1)
   \   00000A20   0xF8BD 0x017E      LDRH     R0,[SP, #+382]
   \   00000A24   0x9003             STR      R0,[SP, #+12]
   \   00000A26   0xA8D5             ADD      R0,SP,#+852
   \   00000A28   0x1CC0             ADDS     R0,R0,#+3
   \   00000A2A   0x9002             STR      R0,[SP, #+8]
   \   00000A2C   0xA85B             ADD      R0,SP,#+364
   \   00000A2E   0x1CC0             ADDS     R0,R0,#+3
   \   00000A30   0x9001             STR      R0,[SP, #+4]
   \   00000A32   0xA8D4             ADD      R0,SP,#+848
   \   00000A34   0x9000             STR      R0,[SP, #+0]
   \   00000A36   0xAB5A             ADD      R3,SP,#+360
   \   00000A38   0xF50D 0x72BB      ADD      R2,SP,#+374
   \   00000A3C   0xF8DF 0x1B24      LDR.W    R1,??RoadBrd_ParseString_103
   \   00000A40   0xA80A             ADD      R0,SP,#+40
   \   00000A42   0x.... 0x....      BL       sprintf
   1009                                    //                        sprintf( (char *)tempBffr2, "     Thermistor DATA: %s   %s   %s   %d\r\n", GridMeasure.Thermistor.Raw,
   1010                                    //                                                                                               GridMeasure.Thermistor.TempC,
   1011                                    //                                                                                               GridMeasure.Thermistor.TempF,
   1012                                    //                                                                                               GridMeasure.Thermistor.RawC );
   1013                                    break;
   \   00000A46   0xE09F             B.N      ??RoadBrd_ParseString_134
   1014                                  case 1: //GridEye1 Values
   1015                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye1.Raw,
   1016                                            GridMeasure.GridEye1.TempC,GridMeasureScaled.GridEye1.TempC,
   1017                                            GridMeasure.GridEye1.TempF,GridMeasureScaled.GridEye1.TempF,
   1018                                            GridMeasure.GridEye1.RawC );
   \                     ??RoadBrd_ParseString_127: (+1)
   \   00000A48   0xF8BD 0x0196      LDRH     R0,[SP, #+406]
   \   00000A4C   0x9003             STR      R0,[SP, #+12]
   \   00000A4E   0xA8DB             ADD      R0,SP,#+876
   \   00000A50   0x1CC0             ADDS     R0,R0,#+3
   \   00000A52   0x9002             STR      R0,[SP, #+8]
   \   00000A54   0xA861             ADD      R0,SP,#+388
   \   00000A56   0x1CC0             ADDS     R0,R0,#+3
   \   00000A58   0x9001             STR      R0,[SP, #+4]
   \   00000A5A   0xA8DA             ADD      R0,SP,#+872
   \   00000A5C   0x9000             STR      R0,[SP, #+0]
   \   00000A5E   0xAB60             ADD      R3,SP,#+384
   \   00000A60   0xF50D 0x72C7      ADD      R2,SP,#+398
   \   00000A64   0xF8DF 0x1B00      LDR.W    R1,??RoadBrd_ParseString_103+0x4
   \   00000A68   0xA80A             ADD      R0,SP,#+40
   \   00000A6A   0x.... 0x....      BL       sprintf
   1019                                    //                        sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye1.Raw,
   1020                                    //                                                                                               GridMeasure.GridEye1.TempC,
   1021                                    //                                                                                               GridMeasure.GridEye1.TempF,
   1022                                    //                                                                                               GridMeasure.GridEye1.RawC );
   1023                                    break;
   \   00000A6E   0xE08B             B.N      ??RoadBrd_ParseString_134
   1024                                  case 2: //GridEye2 Values
   1025                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye2.Raw,
   1026                                            GridMeasure.GridEye2.TempC,GridMeasureScaled.GridEye2.TempC,
   1027                                            GridMeasure.GridEye2.TempF,GridMeasureScaled.GridEye2.TempF,
   1028                                            GridMeasure.GridEye2.RawC );
   \                     ??RoadBrd_ParseString_126: (+1)
   \   00000A70   0xF8BD 0x01AE      LDRH     R0,[SP, #+430]
   \   00000A74   0x9003             STR      R0,[SP, #+12]
   \   00000A76   0xA8E1             ADD      R0,SP,#+900
   \   00000A78   0x1CC0             ADDS     R0,R0,#+3
   \   00000A7A   0x9002             STR      R0,[SP, #+8]
   \   00000A7C   0xA867             ADD      R0,SP,#+412
   \   00000A7E   0x1CC0             ADDS     R0,R0,#+3
   \   00000A80   0x9001             STR      R0,[SP, #+4]
   \   00000A82   0xA8E0             ADD      R0,SP,#+896
   \   00000A84   0x9000             STR      R0,[SP, #+0]
   \   00000A86   0xAB66             ADD      R3,SP,#+408
   \   00000A88   0xF50D 0x72D3      ADD      R2,SP,#+422
   \   00000A8C   0xF8DF 0x1AD8      LDR.W    R1,??RoadBrd_ParseString_103+0x4
   \   00000A90   0xA80A             ADD      R0,SP,#+40
   \   00000A92   0x.... 0x....      BL       sprintf
   1029                                    //                        sprintf( (char *)tempBffr2, "     Grid 34 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye2.Raw,
   1030                                    //                                                                                               GridMeasure.GridEye2.TempC,
   1031                                    //                                                                                               GridMeasure.GridEye2.TempF,
   1032                                    //                                                                                               GridMeasure.GridEye2.RawC );
   1033                                    break;
   \   00000A96   0xE077             B.N      ??RoadBrd_ParseString_134
   1034                                  case 3: //GridEye3 Values
   1035                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye3.Raw,
   1036                                            GridMeasure.GridEye3.TempC,GridMeasureScaled.GridEye3.TempC,
   1037                                            GridMeasure.GridEye3.TempF,GridMeasureScaled.GridEye3.TempF,
   1038                                            GridMeasure.GridEye3.RawC );
   \                     ??RoadBrd_ParseString_129: (+1)
   \   00000A98   0xF8BD 0x01C6      LDRH     R0,[SP, #+454]
   \   00000A9C   0x9003             STR      R0,[SP, #+12]
   \   00000A9E   0xA8E7             ADD      R0,SP,#+924
   \   00000AA0   0x1CC0             ADDS     R0,R0,#+3
   \   00000AA2   0x9002             STR      R0,[SP, #+8]
   \   00000AA4   0xA86D             ADD      R0,SP,#+436
   \   00000AA6   0x1CC0             ADDS     R0,R0,#+3
   \   00000AA8   0x9001             STR      R0,[SP, #+4]
   \   00000AAA   0xA8E6             ADD      R0,SP,#+920
   \   00000AAC   0x9000             STR      R0,[SP, #+0]
   \   00000AAE   0xAB6C             ADD      R3,SP,#+432
   \   00000AB0   0xF50D 0x72DF      ADD      R2,SP,#+446
   \   00000AB4   0xF8DF 0x1AB0      LDR.W    R1,??RoadBrd_ParseString_103+0x4
   \   00000AB8   0xA80A             ADD      R0,SP,#+40
   \   00000ABA   0x.... 0x....      BL       sprintf
   1039                                    //                        sprintf( (char *)tempBffr2, "     Grid 35 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye3.Raw,
   1040                                    //                                                                                               GridMeasure.GridEye3.TempC,
   1041                                    //                                                                                               GridMeasure.GridEye3.TempF,
   1042                                    //                                                                                               GridMeasure.GridEye3.RawC );
   1043                                    break;
   \   00000ABE   0xE063             B.N      ??RoadBrd_ParseString_134
   1044                                  case 4: //GridEye4 Values
   1045                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye4.Raw,
   1046                                            GridMeasure.GridEye4.TempC,GridMeasureScaled.GridEye4.TempC,
   1047                                            GridMeasure.GridEye4.TempF,GridMeasureScaled.GridEye4.TempF,
   1048                                            GridMeasure.GridEye4.RawC );
   \                     ??RoadBrd_ParseString_128: (+1)
   \   00000AC0   0xF8BD 0x01DE      LDRH     R0,[SP, #+478]
   \   00000AC4   0x9003             STR      R0,[SP, #+12]
   \   00000AC6   0xA8ED             ADD      R0,SP,#+948
   \   00000AC8   0x1CC0             ADDS     R0,R0,#+3
   \   00000ACA   0x9002             STR      R0,[SP, #+8]
   \   00000ACC   0xA873             ADD      R0,SP,#+460
   \   00000ACE   0x1CC0             ADDS     R0,R0,#+3
   \   00000AD0   0x9001             STR      R0,[SP, #+4]
   \   00000AD2   0xA8EC             ADD      R0,SP,#+944
   \   00000AD4   0x9000             STR      R0,[SP, #+0]
   \   00000AD6   0xAB72             ADD      R3,SP,#+456
   \   00000AD8   0xF50D 0x72EB      ADD      R2,SP,#+470
   \   00000ADC   0xF8DF 0x1A88      LDR.W    R1,??RoadBrd_ParseString_103+0x4
   \   00000AE0   0xA80A             ADD      R0,SP,#+40
   \   00000AE2   0x.... 0x....      BL       sprintf
   1049                                    //                        sprintf( (char *)tempBffr2, "     Grid 36 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye4.Raw,
   1050                                    //                                                                                               GridMeasure.GridEye4.TempC,
   1051                                    //                                                                                               GridMeasure.GridEye4.TempF,
   1052                                    //                                                                                               GridMeasure.GridEye4.RawC );
   1053                                    break;
   \   00000AE6   0xE04F             B.N      ??RoadBrd_ParseString_134
   1054                                  case 5: //GridEye5 Values
   1055                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye5.Raw,
   1056                                            GridMeasure.GridEye5.TempC,GridMeasureScaled.GridEye5.TempC,
   1057                                            GridMeasure.GridEye5.TempF,GridMeasureScaled.GridEye5.TempF,
   1058                                            GridMeasure.GridEye5.RawC );
   \                     ??RoadBrd_ParseString_131: (+1)
   \   00000AE8   0xF8BD 0x01F6      LDRH     R0,[SP, #+502]
   \   00000AEC   0x9003             STR      R0,[SP, #+12]
   \   00000AEE   0xA8F3             ADD      R0,SP,#+972
   \   00000AF0   0x1CC0             ADDS     R0,R0,#+3
   \   00000AF2   0x9002             STR      R0,[SP, #+8]
   \   00000AF4   0xA879             ADD      R0,SP,#+484
   \   00000AF6   0x1CC0             ADDS     R0,R0,#+3
   \   00000AF8   0x9001             STR      R0,[SP, #+4]
   \   00000AFA   0xA8F2             ADD      R0,SP,#+968
   \   00000AFC   0x9000             STR      R0,[SP, #+0]
   \   00000AFE   0xAB78             ADD      R3,SP,#+480
   \   00000B00   0xF50D 0x72F7      ADD      R2,SP,#+494
   \   00000B04   0xF8DF 0x1A60      LDR.W    R1,??RoadBrd_ParseString_103+0x4
   \   00000B08   0xA80A             ADD      R0,SP,#+40
   \   00000B0A   0x.... 0x....      BL       sprintf
   1059                                    //                        sprintf( (char *)tempBffr2, "     Grid 37 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye5.Raw,
   1060                                    //                                                                                               GridMeasure.GridEye5.TempC,
   1061                                    //                                                                                               GridMeasure.GridEye5.TempF,
   1062                                    //                                                                                               GridMeasure.GridEye5.RawC );
   1063                                    break;
   \   00000B0E   0xE03B             B.N      ??RoadBrd_ParseString_134
   1064                                  case 6: //GridEye6 Values
   1065                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye6.Raw,
   1066                                            GridMeasure.GridEye6.TempC,GridMeasureScaled.GridEye6.TempC,
   1067                                            GridMeasure.GridEye6.TempF,GridMeasureScaled.GridEye6.TempF,
   1068                                            GridMeasure.GridEye6.RawC );
   \                     ??RoadBrd_ParseString_130: (+1)
   \   00000B10   0xF8BD 0x020E      LDRH     R0,[SP, #+526]
   \   00000B14   0x9003             STR      R0,[SP, #+12]
   \   00000B16   0xA8F9             ADD      R0,SP,#+996
   \   00000B18   0x1CC0             ADDS     R0,R0,#+3
   \   00000B1A   0x9002             STR      R0,[SP, #+8]
   \   00000B1C   0xA87F             ADD      R0,SP,#+508
   \   00000B1E   0x1CC0             ADDS     R0,R0,#+3
   \   00000B20   0x9001             STR      R0,[SP, #+4]
   \   00000B22   0xA8F8             ADD      R0,SP,#+992
   \   00000B24   0x9000             STR      R0,[SP, #+0]
   \   00000B26   0xAB7E             ADD      R3,SP,#+504
   \   00000B28   0xAA81             ADD      R2,SP,#+516
   \   00000B2A   0x1C92             ADDS     R2,R2,#+2
   \   00000B2C   0xF8DF 0x1A38      LDR.W    R1,??RoadBrd_ParseString_103+0x4
   \   00000B30   0xA80A             ADD      R0,SP,#+40
   \   00000B32   0x.... 0x....      BL       sprintf
   1069                                    //                        sprintf( (char *)tempBffr2, "     Grid 38 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye6.Raw,
   1070                                    //                                                                                               GridMeasure.GridEye6.TempC,
   1071                                    //                                                                                               GridMeasure.GridEye6.TempF,
   1072                                    //                                                                                               GridMeasure.GridEye6.RawC );
   1073                                    break;
   \   00000B36   0xE027             B.N      ??RoadBrd_ParseString_134
   1074                                  case 7: //GridEye7 Values
   1075                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye7.Raw,
   1076                                            GridMeasure.GridEye7.TempC,GridMeasureScaled.GridEye7.TempC,
   1077                                            GridMeasure.GridEye7.TempF,GridMeasureScaled.GridEye7.TempF,
   1078                                            GridMeasure.GridEye7.RawC );
   \                     ??RoadBrd_ParseString_133: (+1)
   \   00000B38   0xF8BD 0x0226      LDRH     R0,[SP, #+550]
   \   00000B3C   0x9003             STR      R0,[SP, #+12]
   \   00000B3E   0xA8FF             ADD      R0,SP,#+1020
   \   00000B40   0x1CC0             ADDS     R0,R0,#+3
   \   00000B42   0x9002             STR      R0,[SP, #+8]
   \   00000B44   0xA885             ADD      R0,SP,#+532
   \   00000B46   0x1CC0             ADDS     R0,R0,#+3
   \   00000B48   0x9001             STR      R0,[SP, #+4]
   \   00000B4A   0xA8FE             ADD      R0,SP,#+1016
   \   00000B4C   0x9000             STR      R0,[SP, #+0]
   \   00000B4E   0xAB84             ADD      R3,SP,#+528
   \   00000B50   0xAA87             ADD      R2,SP,#+540
   \   00000B52   0x1C92             ADDS     R2,R2,#+2
   \   00000B54   0xF8DF 0x1A10      LDR.W    R1,??RoadBrd_ParseString_103+0x4
   \   00000B58   0xA80A             ADD      R0,SP,#+40
   \   00000B5A   0x.... 0x....      BL       sprintf
   1079                                    //                        sprintf( (char *)tempBffr2, "     Grid 39 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye7.Raw,
   1080                                    //                                                                                               GridMeasure.GridEye7.TempC,
   1081                                    //                                                                                               GridMeasure.GridEye7.TempF,
   1082                                    //                                                                                               GridMeasure.GridEye7.RawC );
   1083                                    break;
   \   00000B5E   0xE013             B.N      ??RoadBrd_ParseString_134
   1084                                  case 8: //GridEye8 Values
   1085                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye8.Raw,
   1086                                            GridMeasure.GridEye8.TempC,GridMeasureScaled.GridEye8.TempC,
   1087                                            GridMeasure.GridEye8.TempF,GridMeasureScaled.GridEye8.TempF,
   1088                                            GridMeasure.GridEye8.RawC );
   \                     ??RoadBrd_ParseString_132: (+1)
   \   00000B60   0xF8BD 0x023E      LDRH     R0,[SP, #+574]
   \   00000B64   0x9003             STR      R0,[SP, #+12]
   \   00000B66   0xA8FF             ADD      R0,SP,#+1020
   \   00000B68   0x301B             ADDS     R0,R0,#+27
   \   00000B6A   0x9002             STR      R0,[SP, #+8]
   \   00000B6C   0xA88B             ADD      R0,SP,#+556
   \   00000B6E   0x1CC0             ADDS     R0,R0,#+3
   \   00000B70   0x9001             STR      R0,[SP, #+4]
   \   00000B72   0xF50D 0x6082      ADD      R0,SP,#+1040
   \   00000B76   0x9000             STR      R0,[SP, #+0]
   \   00000B78   0xAB8A             ADD      R3,SP,#+552
   \   00000B7A   0xAA8D             ADD      R2,SP,#+564
   \   00000B7C   0x1C92             ADDS     R2,R2,#+2
   \   00000B7E   0xF8DF 0x19E8      LDR.W    R1,??RoadBrd_ParseString_103+0x4
   \   00000B82   0xA80A             ADD      R0,SP,#+40
   \   00000B84   0x.... 0x....      BL       sprintf
   1089                                    //                        sprintf( (char *)tempBffr2, "     Grid 40 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye8.Raw,
   1090                                    //                                                                                               GridMeasure.GridEye8.TempC,
   1091                                    //                                                                                               GridMeasure.GridEye8.TempF,
   1092                                    //                                                                                               GridMeasure.GridEye8.RawC );
   1093                                    break;
   1094                                  } // EndSwitch(x)
   1095                                  // Now Print String.
   1096           #ifdef NUCLEO
   1097                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1098          #else
   1099                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \                     ??RoadBrd_ParseString_134: (+1)
   \   00000B88   0xA90A             ADD      R1,SP,#+40
   \   00000B8A   0x2000             MOVS     R0,#+0
   \   00000B8C   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000B90   0x0006             MOVS     R6,R0
   1100          #endif
   1101                                  if (Status != HAL_OK)
   \   00000B92   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000B94   0x2E00             CMP      R6,#+0
   \   00000B96   0xD003             BEQ.N    ??RoadBrd_ParseString_135
   1102                                    return Status;
   \   00000B98   0x0030             MOVS     R0,R6
   \   00000B9A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000B9C   0xF003 0xBEA0      B.W      ??RoadBrd_ParseString_4
   1103                               } // EndFor(x=0; x<9; x++)
   \                     ??RoadBrd_ParseString_135: (+1)
   \   00000BA0   0x1C7F             ADDS     R7,R7,#+1
   \   00000BA2   0xE728             B.N      ??RoadBrd_ParseString_123
   1104                                sprintf( (char *)tempBffr2, "     SHNT VLTG DATA: " );
   \                     ??RoadBrd_ParseString_124: (+1)
   \   00000BA4   0xF8DF 0x1B30      LDR.W    R1,??RoadBrd_ParseString_106
   \   00000BA8   0xA80A             ADD      R0,SP,#+40
   \   00000BAA   0x.... 0x....      BL       sprintf
   1105                                strcat( (char *)tempBffr2, (char *)VMeasure.Raw );
   \   00000BAE   0xA944             ADD      R1,SP,#+272
   \   00000BB0   0xA80A             ADD      R0,SP,#+40
   \   00000BB2   0x.... 0x....      BL       strcat
   1106                                strcat( (char *)tempBffr2, "\r\n" );
   \   00000BB6   0xA1D3             ADR.N    R1,??RoadBrd_ParseString_25+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000BB8   0xA80A             ADD      R0,SP,#+40
   \   00000BBA   0x.... 0x....      BL       strcat
   1107                              } //Endif(Status == HAL_OK)
   1108                              else
   1109                                break;
   1110                              sprintf( (char *)tempBffr2, "     COMPLETE.\r\n" );
   \   00000BBE   0xF8DF 0x1B64      LDR.W    R1,??RoadBrd_ParseString_109
   \   00000BC2   0xA80A             ADD      R0,SP,#+40
   \   00000BC4   0x.... 0x....      BL       sprintf
   1111                              break;
   \   00000BC8   0xE019             B.N      ??RoadBrd_ParseString_110
   \                     ??RoadBrd_ParseString_121: (+1)
   \   00000BCA   0xE018             B.N      ??RoadBrd_ParseString_110
   1112          //------------------ B1 Command...Reset Cool Eye/Grid Eye Sensor..... 
   1113                            case '1':
   1114                              // Reset Cool Eye/Grid Eye Sensor.
   1115                              Status = RoadBrd_GridEyeReset();
   \                     ??RoadBrd_ParseString_112: (+1)
   \   00000BCC   0x.... 0x....      BL       RoadBrd_GridEyeReset
   \   00000BD0   0x0006             MOVS     R6,R0
   1116                              // Is this a BLE Operation?
   1117                              if ( BLE_Flag )
   \   00000BD2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000BD4   0x2D00             CMP      R5,#+0
   \   00000BD6   0xD00A             BEQ.N    ??RoadBrd_ParseString_136
   1118                              {
   1119                                // Yes...Build and Send BLE Response NOW.
   1120                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00000BD8   0xF8DF 0x15E0      LDR.W    R1,??RoadBrd_ParseString_50+0x4
   \   00000BDC   0xA80A             ADD      R0,SP,#+40
   \   00000BDE   0x.... 0x....      BL       strcpy
   1121                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000BE2   0xA80A             ADD      R0,SP,#+40
   \   00000BE4   0x.... 0x....      BL       strlen
   \   00000BE8   0xA90A             ADD      R1,SP,#+40
   \   00000BEA   0x.... 0x....      BL       BGM111_Transmit
   1122                              }
   1123          
   1124                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_136: (+1)
   \   00000BEE   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000BF0   0x2E00             CMP      R6,#+0
   \   00000BF2   0xD104             BNE.N    ??RoadBrd_ParseString_137
   1125                              {
   1126                                strcpy( (char *)tempBffr2, "Cool Eye/Grid Eye Sensor: Reset Complete.\r\n");;
   \   00000BF4   0xF8DF 0x1DBC      LDR.W    R1,??RoadBrd_ParseString_138
   \   00000BF8   0xA80A             ADD      R0,SP,#+40
   \   00000BFA   0x.... 0x....      BL       strcpy
   1127                              }
   1128                              break;
   1129                          } //EndSwitch
   1130                        } //EndElse (Size == 1)
   1131                        break;
   \                     ??RoadBrd_ParseString_137: (+1)
   \                     ??RoadBrd_ParseString_110: (+1)
   \   00000BFE   0xF003 0xBDF5      B.W      ??RoadBrd_ParseString_26
   1132          //**************************************************************************************************
   1133                      case 'C':
   1134                        // Read Voltage. 
   1135          //++++++++++++++++++++++++++++++++++++++++++  Voltage Monitor Commands.
   1136                        if (Size == 1)
   \                     ??RoadBrd_ParseString_14: (+1)
   \   00000C02   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000C06   0xF1B8 0x0F01      CMP      R8,#+1
   \   00000C0A   0xD152             BNE.N    ??RoadBrd_ParseString_139
   1137                        {
   1138          //------------------ C Command       
   1139                          // Read Bus Voltage and return as 2 Byte Field.
   1140                          Status = RoadBrd_VMonitor_RdVoltage( &VMeasure );
   \   00000C0C   0xA842             ADD      R0,SP,#+264
   \   00000C0E   0x.... 0x....      BL       RoadBrd_VMonitor_RdVoltage
   \   00000C12   0x0006             MOVS     R6,R0
   1141                          if (Status == HAL_OK)
   \   00000C14   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000C16   0x2E00             CMP      R6,#+0
   \   00000C18   0xD103             BNE.N    ??RoadBrd_ParseString_140
   1142                            Status = RoadBrd_VMonitor_RdVoltage_Scaled( &VMeasureScaled );
   \   00000C1A   0xA84D             ADD      R0,SP,#+308
   \   00000C1C   0x.... 0x....      BL       RoadBrd_VMonitor_RdVoltage_Scaled
   \   00000C20   0x0006             MOVS     R6,R0
   1143                          if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_140: (+1)
   \   00000C22   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000C24   0x2E00             CMP      R6,#+0
   \   00000C26   0xD126             BNE.N    ??RoadBrd_ParseString_141
   1144                          {
   1145                            // Send string to UART..
   1146                            strcpy( (char *)tempBffr2, "Voltage Monitor/Read Bus Voltage...\r\n");
   \   00000C28   0xF8DF 0x1DEC      LDR.W    R1,??RoadBrd_ParseString_142
   \   00000C2C   0xA80A             ADD      R0,SP,#+40
   \   00000C2E   0x.... 0x....      BL       strcpy
   1147          #ifdef NUCLEO
   1148                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1149          #else
   1150                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000C32   0xA90A             ADD      R1,SP,#+40
   \   00000C34   0x2000             MOVS     R0,#+0
   \   00000C36   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000C3A   0x0006             MOVS     R6,R0
   1151          #endif
   1152                            if (Status != HAL_OK)
   \   00000C3C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000C3E   0x2E00             CMP      R6,#+0
   \   00000C40   0xD003             BEQ.N    ??RoadBrd_ParseString_143
   1153                            return Status;
   \   00000C42   0x0030             MOVS     R0,R6
   \   00000C44   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000C46   0xF003 0xBE4B      B.W      ??RoadBrd_ParseString_4
   1154                            // NOW, Build Data String..
   1155                            sprintf( (char *)tempBffr2, "     BUS VOLTAGE DATA: " );
   \                     ??RoadBrd_ParseString_143: (+1)
   \   00000C4A   0xF8DF 0x1DD0      LDR.W    R1,??RoadBrd_ParseString_142+0x4
   \   00000C4E   0xA80A             ADD      R0,SP,#+40
   \   00000C50   0x.... 0x....      BL       sprintf
   1156                            strcat( (char *)tempBffr2, (char *)VMeasure.Raw );
   \   00000C54   0xA944             ADD      R1,SP,#+272
   \   00000C56   0xA80A             ADD      R0,SP,#+40
   \   00000C58   0x.... 0x....      BL       strcat
   1157                            strcat( (char *)tempBffr2, "\r\n" );
   \   00000C5C   0xA1A9             ADR.N    R1,??RoadBrd_ParseString_25+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000C5E   0xA80A             ADD      R0,SP,#+40
   \   00000C60   0x.... 0x....      BL       strcat
   1158                          }
   1159                          else
   1160                            break;
   1161          #ifdef NUCLEO
   1162                          Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1163          #else
   1164                          Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000C64   0xA90A             ADD      R1,SP,#+40
   \   00000C66   0x2000             MOVS     R0,#+0
   \   00000C68   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000C6C   0x0006             MOVS     R6,R0
   1165          #endif
   1166                          if (Status != HAL_OK)
   \   00000C6E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000C70   0x2E00             CMP      R6,#+0
   \   00000C72   0xD102             BNE.N    ??RoadBrd_ParseString_144
   \   00000C74   0xE005             B.N      ??RoadBrd_ParseString_145
   \                     ??RoadBrd_ParseString_141: (+1)
   \   00000C76   0xF003 0xBDB9      B.W      ??RoadBrd_ParseString_26
   1167                            return Status;
   \                     ??RoadBrd_ParseString_144: (+1)
   \   00000C7A   0x0030             MOVS     R0,R6
   \   00000C7C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000C7E   0xF003 0xBE2F      B.W      ??RoadBrd_ParseString_4
   1168                          // Is this a BLE Operation?
   1169                          if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_145: (+1)
   \   00000C82   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000C84   0x2D00             CMP      R5,#+0
   \   00000C86   0xD00C             BEQ.N    ??RoadBrd_ParseString_146
   1170                          {
   1171                            // Yes...Build and Send BLE Response NOW.
   1172                            sprintf( (char *)tempBffr2, "<STATUS>BUS_VLTG:%s/%s</STATUS>", (char *)VMeasure.Voltage, (char *)VMeasureScaled.Voltage );
   \   00000C88   0xAB4D             ADD      R3,SP,#+308
   \   00000C8A   0xAA42             ADD      R2,SP,#+264
   \   00000C8C   0xF8DF 0x1DF8      LDR.W    R1,??RoadBrd_ParseString_147
   \   00000C90   0xA80A             ADD      R0,SP,#+40
   \   00000C92   0x.... 0x....      BL       sprintf
   1173                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000C96   0xA80A             ADD      R0,SP,#+40
   \   00000C98   0x.... 0x....      BL       strlen
   \   00000C9C   0xA90A             ADD      R1,SP,#+40
   \   00000C9E   0x.... 0x....      BL       BGM111_Transmit
   1174                          }
   1175                          // Now calculate Bus Voltage.
   1176                          sprintf( (char *)tempBffr2, "     Bus Voltage: %s/%s\r\n", (char *)VMeasure.Voltage, (char *)VMeasureScaled.Voltage );
   \                     ??RoadBrd_ParseString_146: (+1)
   \   00000CA2   0xAB4D             ADD      R3,SP,#+308
   \   00000CA4   0xAA42             ADD      R2,SP,#+264
   \   00000CA6   0xF8DF 0x1DE4      LDR.W    R1,??RoadBrd_ParseString_147+0x4
   \   00000CAA   0xA80A             ADD      R0,SP,#+40
   \   00000CAC   0x.... 0x....      BL       sprintf
   \   00000CB0   0xE19D             B.N      ??RoadBrd_ParseString_148
   1177                        }
   1178                        else
   1179                        {
   1180                          switch( tempBffr[1] )
   \                     ??RoadBrd_ParseString_139: (+1)
   \   00000CB2   0x7860             LDRB     R0,[R4, #+1]
   \   00000CB4   0x2830             CMP      R0,#+48
   \   00000CB6   0xD024             BEQ.N    ??RoadBrd_ParseString_149
   \   00000CB8   0x2831             CMP      R0,#+49
   \   00000CBA   0xD074             BEQ.N    ??RoadBrd_ParseString_150
   \   00000CBC   0x2832             CMP      R0,#+50
   \   00000CBE   0xF000 0x80CA      BEQ.W    ??RoadBrd_ParseString_151
   \   00000CC2   0x2833             CMP      R0,#+51
   \   00000CC4   0xF000 0x812A      BEQ.W    ??RoadBrd_ParseString_152
   \   00000CC8   0x2849             CMP      R0,#+73
   \   00000CCA   0xF040 0x817D      BNE.W    ??RoadBrd_ParseString_153
   1181                          {
   1182          //------------------ CI Command       
   1183                            case 'I':
   1184                              // Initialize and load Calibration Register.
   1185                              // Read Calibration Value first.
   1186                              Status = RoadBrd_Init_VMonitor();
   \                     ??RoadBrd_ParseString_154: (+1)
   \   00000CCE   0x.... 0x....      BL       RoadBrd_Init_VMonitor
   \   00000CD2   0x0006             MOVS     R6,R0
   1187                              // Is this a BLE Operation?
   1188                              if ( BLE_Flag )
   \   00000CD4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000CD6   0x2D00             CMP      R5,#+0
   \   00000CD8   0xD00A             BEQ.N    ??RoadBrd_ParseString_155
   1189                              {
   1190                                // Yes...Build and Send BLE Response NOW.
   1191                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00000CDA   0xF8DF 0x14E0      LDR.W    R1,??RoadBrd_ParseString_50+0x4
   \   00000CDE   0xA80A             ADD      R0,SP,#+40
   \   00000CE0   0x.... 0x....      BL       strcpy
   1192                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000CE4   0xA80A             ADD      R0,SP,#+40
   \   00000CE6   0x.... 0x....      BL       strlen
   \   00000CEA   0xA90A             ADD      R1,SP,#+40
   \   00000CEC   0x.... 0x....      BL       BGM111_Transmit
   1193                              }
   1194                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_155: (+1)
   \   00000CF0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000CF2   0x2E00             CMP      R6,#+0
   \   00000CF4   0xD104             BNE.N    ??RoadBrd_ParseString_156
   1195                              {
   1196                                strcpy( (char *)tempBffr2, "Voltage Monitor: Initialization Complete.\r\n");;
   \   00000CF6   0xF8DF 0x1DCC      LDR.W    R1,??RoadBrd_ParseString_157
   \   00000CFA   0xA80A             ADD      R0,SP,#+40
   \   00000CFC   0x.... 0x....      BL       strcpy
   1197                              }
   1198                              break;
   \                     ??RoadBrd_ParseString_156: (+1)
   \   00000D00   0xE175             B.N      ??RoadBrd_ParseString_148
   1199          //------------------ C0 Command...Read Shunt Voltage and return results.....
   1200                            case '0':
   1201                              // Read Shunt Voltage and return results.....
   1202                              Status = RoadBrd_VMonitor_RdShntVltg( &VMeasure );
   \                     ??RoadBrd_ParseString_149: (+1)
   \   00000D02   0xA842             ADD      R0,SP,#+264
   \   00000D04   0x.... 0x....      BL       RoadBrd_VMonitor_RdShntVltg
   \   00000D08   0x0006             MOVS     R6,R0
   1203                              if (Status == HAL_OK)
   \   00000D0A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000D0C   0x2E00             CMP      R6,#+0
   \   00000D0E   0xD103             BNE.N    ??RoadBrd_ParseString_158
   1204                                Status = RoadBrd_VMonitor_RdShntVltg_Scaled( &VMeasureScaled );
   \   00000D10   0xA84D             ADD      R0,SP,#+308
   \   00000D12   0x.... 0x....      BL       RoadBrd_VMonitor_RdShntVltg_Scaled
   \   00000D16   0x0006             MOVS     R6,R0
   1205                              // Is this a BLE Operation?
   1206                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_158: (+1)
   \   00000D18   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000D1A   0x2E00             CMP      R6,#+0
   \   00000D1C   0xD126             BNE.N    ??RoadBrd_ParseString_159
   1207                              {
   1208                                // Send string to UART..
   1209                                strcpy( (char *)tempBffr2, "Voltage Monitor/Shunt Voltage...\r\n");
   \   00000D1E   0xF8DF 0x17DC      LDR.W    R1,??RoadBrd_ParseString_88+0x4
   \   00000D22   0xA80A             ADD      R0,SP,#+40
   \   00000D24   0x.... 0x....      BL       strcpy
   1210          #ifdef NUCLEO
   1211                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1212          #else
   1213                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000D28   0xA90A             ADD      R1,SP,#+40
   \   00000D2A   0x2000             MOVS     R0,#+0
   \   00000D2C   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000D30   0x0006             MOVS     R6,R0
   1214          #endif
   1215                                if (Status != HAL_OK)
   \   00000D32   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000D34   0x2E00             CMP      R6,#+0
   \   00000D36   0xD003             BEQ.N    ??RoadBrd_ParseString_160
   1216                                  return Status;
   \   00000D38   0x0030             MOVS     R0,R6
   \   00000D3A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000D3C   0xF003 0xBDD0      B.W      ??RoadBrd_ParseString_4
   1217                                // NOW, Build Data String..
   1218                                sprintf( (char *)tempBffr2, "     SHNT VLTG DATA: " );
   \                     ??RoadBrd_ParseString_160: (+1)
   \   00000D40   0xF8DF 0x1994      LDR.W    R1,??RoadBrd_ParseString_106
   \   00000D44   0xA80A             ADD      R0,SP,#+40
   \   00000D46   0x.... 0x....      BL       sprintf
   1219                                strcat( (char *)tempBffr2, (char *)VMeasure.Raw );
   \   00000D4A   0xA944             ADD      R1,SP,#+272
   \   00000D4C   0xA80A             ADD      R0,SP,#+40
   \   00000D4E   0x.... 0x....      BL       strcat
   1220                                strcat( (char *)tempBffr2, "\r\n" );
   \   00000D52   0xA16C             ADR.N    R1,??RoadBrd_ParseString_25+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000D54   0xA80A             ADD      R0,SP,#+40
   \   00000D56   0x.... 0x....      BL       strcat
   1221                              }
   1222                              else
   1223                                break;
   1224          #ifdef NUCLEO
   1225                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1226          #else
   1227                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000D5A   0xA90A             ADD      R1,SP,#+40
   \   00000D5C   0x2000             MOVS     R0,#+0
   \   00000D5E   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000D62   0x0006             MOVS     R6,R0
   1228          #endif
   1229                              if (Status != HAL_OK)
   \   00000D64   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000D66   0x2E00             CMP      R6,#+0
   \   00000D68   0xD101             BNE.N    ??RoadBrd_ParseString_161
   \   00000D6A   0xE004             B.N      ??RoadBrd_ParseString_162
   \                     ??RoadBrd_ParseString_159: (+1)
   \   00000D6C   0xE13F             B.N      ??RoadBrd_ParseString_148
   1230                                return Status;
   \                     ??RoadBrd_ParseString_161: (+1)
   \   00000D6E   0x0030             MOVS     R0,R6
   \   00000D70   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000D72   0xF003 0xBDB5      B.W      ??RoadBrd_ParseString_4
   1231                              // Now calculate Shunt Voltage.
   1232                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_162: (+1)
   \   00000D76   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000D78   0x2D00             CMP      R5,#+0
   \   00000D7A   0xD00C             BEQ.N    ??RoadBrd_ParseString_163
   1233                              {
   1234                                // Yes...Build and Send BLE Response NOW.
   1235                                sprintf( (char *)tempBffr2, "<STATUS>SHNT_VLTG:%s/%s</STATUS>", (char *)VMeasure.Voltage, (char *)VMeasureScaled.Voltage );
   \   00000D7C   0xAB4D             ADD      R3,SP,#+308
   \   00000D7E   0xAA42             ADD      R2,SP,#+264
   \   00000D80   0xF8DF 0x1DFC      LDR.W    R1,??RoadBrd_ParseString_164
   \   00000D84   0xA80A             ADD      R0,SP,#+40
   \   00000D86   0x.... 0x....      BL       sprintf
   1236                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000D8A   0xA80A             ADD      R0,SP,#+40
   \   00000D8C   0x.... 0x....      BL       strlen
   \   00000D90   0xA90A             ADD      R1,SP,#+40
   \   00000D92   0x.... 0x....      BL       BGM111_Transmit
   1237                              }
   1238                              sprintf( (char *)tempBffr2, "     Shunt Voltage: %s/%s\r\n", (char *)VMeasure.Voltage, (char *)VMeasureScaled.Voltage );
   \                     ??RoadBrd_ParseString_163: (+1)
   \   00000D96   0xAB4D             ADD      R3,SP,#+308
   \   00000D98   0xAA42             ADD      R2,SP,#+264
   \   00000D9A   0xF8DF 0x1DE8      LDR.W    R1,??RoadBrd_ParseString_164+0x4
   \   00000D9E   0xA80A             ADD      R0,SP,#+40
   \   00000DA0   0x.... 0x....      BL       sprintf
   1239                              break;
   \   00000DA4   0xE123             B.N      ??RoadBrd_ParseString_148
   1240          //------------------ C1 Command...Read Current and return results..... 
   1241                            case '1':
   1242                              // Read Current and return results.....
   1243                              Status = RoadBrd_VMonitor_RdCurrent( &CMeasure );
   \                     ??RoadBrd_ParseString_150: (+1)
   \   00000DA6   0xA8D0             ADD      R0,SP,#+832
   \   00000DA8   0x.... 0x....      BL       RoadBrd_VMonitor_RdCurrent
   \   00000DAC   0x0006             MOVS     R6,R0
   1244                              if (Status == HAL_OK)
   \   00000DAE   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000DB0   0x2E00             CMP      R6,#+0
   \   00000DB2   0xD103             BNE.N    ??RoadBrd_ParseString_165
   1245                                Status = RoadBrd_VMonitor_RdCurrent_Scaled( &CMeasureScaled );
   \   00000DB4   0xA8CC             ADD      R0,SP,#+816
   \   00000DB6   0x.... 0x....      BL       RoadBrd_VMonitor_RdCurrent_Scaled
   \   00000DBA   0x0006             MOVS     R6,R0
   1246                              // Is this a BLE Operation?
   1247                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_165: (+1)
   \   00000DBC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000DBE   0x2E00             CMP      R6,#+0
   \   00000DC0   0xD12C             BNE.N    ??RoadBrd_ParseString_166
   1248                              {
   1249                                // Send string to UART..
   1250                                strcpy( (char *)tempBffr2, "Voltage Monitor/Read Current...\r\n");
   \   00000DC2   0xF8DF 0x1DC4      LDR.W    R1,??RoadBrd_ParseString_164+0x8
   \   00000DC6   0xA80A             ADD      R0,SP,#+40
   \   00000DC8   0x.... 0x....      BL       strcpy
   1251          #ifdef NUCLEO
   1252                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1253          #else
   1254                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000DCC   0xA90A             ADD      R1,SP,#+40
   \   00000DCE   0x2000             MOVS     R0,#+0
   \   00000DD0   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000DD4   0x0006             MOVS     R6,R0
   1255          #endif
   1256                                if (Status != HAL_OK)
   \   00000DD6   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000DD8   0x2E00             CMP      R6,#+0
   \   00000DDA   0xD003             BEQ.N    ??RoadBrd_ParseString_167
   1257                                  return Status;
   \   00000DDC   0x0030             MOVS     R0,R6
   \   00000DDE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000DE0   0xF003 0xBD7E      B.W      ??RoadBrd_ParseString_4
   1258                                // NOW, Build Data String..
   1259                                sprintf( (char *)tempBffr2, "     CURRENT DATA: " );
   \                     ??RoadBrd_ParseString_167: (+1)
   \   00000DE4   0xF8DF 0x1DA4      LDR.W    R1,??RoadBrd_ParseString_164+0xC
   \   00000DE8   0xA80A             ADD      R0,SP,#+40
   \   00000DEA   0x.... 0x....      BL       sprintf
   1260                                strcat( (char *)tempBffr2, (char *)CMeasure.Raw );
   \   00000DEE   0xA9D2             ADD      R1,SP,#+840
   \   00000DF0   0x1C49             ADDS     R1,R1,#+1
   \   00000DF2   0xA80A             ADD      R0,SP,#+40
   \   00000DF4   0x.... 0x....      BL       strcat
   1261                                strcat( (char *)tempBffr2, "\r\n" );
   \   00000DF8   0xA142             ADR.N    R1,??RoadBrd_ParseString_25+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000DFA   0xA80A             ADD      R0,SP,#+40
   \   00000DFC   0x.... 0x....      BL       strcat
   1262                              }
   1263                              else
   1264                                break;
   1265          #ifdef NUCLEO
   1266                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1267          #else
   1268                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000E00   0xA90A             ADD      R1,SP,#+40
   \   00000E02   0x2000             MOVS     R0,#+0
   \   00000E04   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000E08   0x0006             MOVS     R6,R0
   1269          #endif
   1270                              if (Status != HAL_OK)
   \   00000E0A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000E0C   0x2E00             CMP      R6,#+0
   \   00000E0E   0xD106             BNE.N    ??RoadBrd_ParseString_168
   \   00000E10   0xE009             B.N      ??RoadBrd_ParseString_169
   \   00000E12   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_0:
   \   00000E14   0x........         DC32     Bypass
   \   00000E18   0x........         DC32     ?_0
   \                     ??RoadBrd_ParseString_166: (+1)
   \   00000E1C   0xE0E7             B.N      ??RoadBrd_ParseString_148
   1271                                return Status;
   \                     ??RoadBrd_ParseString_168: (+1)
   \   00000E1E   0x0030             MOVS     R0,R6
   \   00000E20   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000E22   0xF003 0xBD5D      B.W      ??RoadBrd_ParseString_4
   1272                              // Now calculate Current.
   1273                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_169: (+1)
   \   00000E26   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000E28   0x2D00             CMP      R5,#+0
   \   00000E2A   0xD00C             BEQ.N    ??RoadBrd_ParseString_170
   1274                              {
   1275                                // Yes...Build and Send BLE Response NOW.
   1276                                sprintf( (char *)tempBffr2, "<STATUS>SHNT_CRNT:%s/%s</STATUS>", (char *)CMeasure.Current, (char *)CMeasureScaled.Current );
   \   00000E2C   0xABCC             ADD      R3,SP,#+816
   \   00000E2E   0xAAD0             ADD      R2,SP,#+832
   \   00000E30   0xF8DF 0x1DF8      LDR.W    R1,??RoadBrd_ParseString_171+0x4
   \   00000E34   0xA80A             ADD      R0,SP,#+40
   \   00000E36   0x.... 0x....      BL       sprintf
   1277                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000E3A   0xA80A             ADD      R0,SP,#+40
   \   00000E3C   0x.... 0x....      BL       strlen
   \   00000E40   0xA90A             ADD      R1,SP,#+40
   \   00000E42   0x.... 0x....      BL       BGM111_Transmit
   1278                              }
   1279                              sprintf( (char *)tempBffr2, "     Current: %s/%s\r\n", (char *)CMeasure.Current, (char *)CMeasureScaled.Current );
   \                     ??RoadBrd_ParseString_170: (+1)
   \   00000E46   0xABCC             ADD      R3,SP,#+816
   \   00000E48   0xAAD0             ADD      R2,SP,#+832
   \   00000E4A   0xF8DF 0x1DE4      LDR.W    R1,??RoadBrd_ParseString_171+0x8
   \   00000E4E   0xA80A             ADD      R0,SP,#+40
   \   00000E50   0x.... 0x....      BL       sprintf
   1280                              break;
   \   00000E54   0xE0CB             B.N      ??RoadBrd_ParseString_148
   1281          //------------------ C2 Command...Read Power and return results.....     
   1282                            case '2':
   1283                              // Read Power and return results.....
   1284                              Status = RoadBrd_VMonitor_RdPower( &PMeasure );
   \                     ??RoadBrd_ParseString_151: (+1)
   \   00000E56   0xA8C8             ADD      R0,SP,#+800
   \   00000E58   0x.... 0x....      BL       RoadBrd_VMonitor_RdPower
   \   00000E5C   0x0006             MOVS     R6,R0
   1285                              if (Status == HAL_OK)
   \   00000E5E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000E60   0x2E00             CMP      R6,#+0
   \   00000E62   0xD103             BNE.N    ??RoadBrd_ParseString_172
   1286                                Status = RoadBrd_VMonitor_RdPower_Scaled( &PMeasureScaled );
   \   00000E64   0xA8C4             ADD      R0,SP,#+784
   \   00000E66   0x.... 0x....      BL       RoadBrd_VMonitor_RdPower_Scaled
   \   00000E6A   0x0006             MOVS     R6,R0
   1287                              // Is this a BLE Operation?
   1288                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_172: (+1)
   \   00000E6C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000E6E   0x2E00             CMP      R6,#+0
   \   00000E70   0xD127             BNE.N    ??RoadBrd_ParseString_173
   1289                              {
   1290                                // Send string to UART..
   1291                                strcpy( (char *)tempBffr2, "Voltage Monitor/Read Power...\r\n");
   \   00000E72   0xF8DF 0x1DC0      LDR.W    R1,??RoadBrd_ParseString_171+0xC
   \   00000E76   0xA80A             ADD      R0,SP,#+40
   \   00000E78   0x.... 0x....      BL       strcpy
   1292          #ifdef NUCLEO
   1293                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1294          #else
   1295                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000E7C   0xA90A             ADD      R1,SP,#+40
   \   00000E7E   0x2000             MOVS     R0,#+0
   \   00000E80   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000E84   0x0006             MOVS     R6,R0
   1296          #endif
   1297                                if (Status != HAL_OK)
   \   00000E86   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000E88   0x2E00             CMP      R6,#+0
   \   00000E8A   0xD003             BEQ.N    ??RoadBrd_ParseString_174
   1298                                  return Status;
   \   00000E8C   0x0030             MOVS     R0,R6
   \   00000E8E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000E90   0xF003 0xBD26      B.W      ??RoadBrd_ParseString_4
   1299                                // NOW, Build Data String..
   1300                                sprintf( (char *)tempBffr2, "     POWER DATA: " );
   \                     ??RoadBrd_ParseString_174: (+1)
   \   00000E94   0xF8DF 0x1DA0      LDR.W    R1,??RoadBrd_ParseString_171+0x10
   \   00000E98   0xA80A             ADD      R0,SP,#+40
   \   00000E9A   0x.... 0x....      BL       sprintf
   1301                                strcat( (char *)tempBffr2, (char *)PMeasure.Raw );
   \   00000E9E   0xA9CA             ADD      R1,SP,#+808
   \   00000EA0   0x1C49             ADDS     R1,R1,#+1
   \   00000EA2   0xA80A             ADD      R0,SP,#+40
   \   00000EA4   0x.... 0x....      BL       strcat
   1302                                strcat( (char *)tempBffr2, "\r\n" );
   \   00000EA8   0xA116             ADR.N    R1,??RoadBrd_ParseString_25+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000EAA   0xA80A             ADD      R0,SP,#+40
   \   00000EAC   0x.... 0x....      BL       strcat
   1303                              }
   1304                              else
   1305                                break;
   1306          #ifdef NUCLEO
   1307                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1308          #else
   1309                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000EB0   0xA90A             ADD      R1,SP,#+40
   \   00000EB2   0x2000             MOVS     R0,#+0
   \   00000EB4   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000EB8   0x0006             MOVS     R6,R0
   1310          #endif
   1311                              if (Status != HAL_OK)
   \   00000EBA   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000EBC   0x2E00             CMP      R6,#+0
   \   00000EBE   0xD101             BNE.N    ??RoadBrd_ParseString_175
   \   00000EC0   0xE004             B.N      ??RoadBrd_ParseString_176
   \                     ??RoadBrd_ParseString_173: (+1)
   \   00000EC2   0xE094             B.N      ??RoadBrd_ParseString_148
   1312                                return Status;
   \                     ??RoadBrd_ParseString_175: (+1)
   \   00000EC4   0x0030             MOVS     R0,R6
   \   00000EC6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000EC8   0xF003 0xBD0A      B.W      ??RoadBrd_ParseString_4
   1313                              // Now calculate Power.
   1314                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_176: (+1)
   \   00000ECC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000ECE   0x2D00             CMP      R5,#+0
   \   00000ED0   0xD00C             BEQ.N    ??RoadBrd_ParseString_177
   1315                              {
   1316                                // Yes...Build and Send BLE Response NOW.
   1317                                sprintf( (char *)tempBffr2, "<STATUS>POWER:%s/%s</STATUS>", (char *)PMeasure.Power, (char *)PMeasureScaled.Power );
   \   00000ED2   0xABC4             ADD      R3,SP,#+784
   \   00000ED4   0xAAC8             ADD      R2,SP,#+800
   \   00000ED6   0xF8DF 0x1D64      LDR.W    R1,??RoadBrd_ParseString_171+0x14
   \   00000EDA   0xA80A             ADD      R0,SP,#+40
   \   00000EDC   0x.... 0x....      BL       sprintf
   1318                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000EE0   0xA80A             ADD      R0,SP,#+40
   \   00000EE2   0x.... 0x....      BL       strlen
   \   00000EE6   0xA90A             ADD      R1,SP,#+40
   \   00000EE8   0x.... 0x....      BL       BGM111_Transmit
   1319                              }
   1320                              sprintf( (char *)tempBffr2, "     Power: %s/%s\r\n", (char *)PMeasure.Power, (char *)PMeasureScaled.Power );
   \                     ??RoadBrd_ParseString_177: (+1)
   \   00000EEC   0xABC4             ADD      R3,SP,#+784
   \   00000EEE   0xAAC8             ADD      R2,SP,#+800
   \   00000EF0   0xF8DF 0x1D4C      LDR.W    R1,??RoadBrd_ParseString_171+0x18
   \   00000EF4   0xA80A             ADD      R0,SP,#+40
   \   00000EF6   0x.... 0x....      BL       sprintf
   1321                              break;
   \   00000EFA   0xE078             B.N      ??RoadBrd_ParseString_148
   \                     ??RoadBrd_ParseString_25:
   \   00000EFC   0x........         DC32     ?_1
   \   00000F00   0x........         DC32     ?_2
   \   00000F04   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
   \   00000F08   0x........         DC32     ?_3
   \   00000F0C   0x........         DC32     ?_4
   \   00000F10   0x........         DC32     ?_5
   \   00000F14   0x........         DC32     ?_7
   \   00000F18   0x........         DC32     ?_8
   1322          //------------------ C3 Command...Read Bus Voltage and return results.....
   1323                            case '3':
   1324                              // Read Bus Voltage and return results.....
   1325                              Status = RoadBrd_VMonitor_RdVoltage( &VMeasure );
   \                     ??RoadBrd_ParseString_152: (+1)
   \   00000F1C   0xA842             ADD      R0,SP,#+264
   \   00000F1E   0x.... 0x....      BL       RoadBrd_VMonitor_RdVoltage
   \   00000F22   0x0006             MOVS     R6,R0
   1326                              if (Status == HAL_OK)
   \   00000F24   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000F26   0x2E00             CMP      R6,#+0
   \   00000F28   0xD103             BNE.N    ??RoadBrd_ParseString_178
   1327                                Status = RoadBrd_VMonitor_RdVoltage_Scaled( &VMeasureScaled );
   \   00000F2A   0xA84D             ADD      R0,SP,#+308
   \   00000F2C   0x.... 0x....      BL       RoadBrd_VMonitor_RdVoltage_Scaled
   \   00000F30   0x0006             MOVS     R6,R0
   1328                                
   1329                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_178: (+1)
   \   00000F32   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000F34   0x2E00             CMP      R6,#+0
   \   00000F36   0xD126             BNE.N    ??RoadBrd_ParseString_179
   1330                              {
   1331                                // Send string to UART..
   1332                                strcpy( (char *)tempBffr2, "Voltage Monitor/Read Bus Voltage...\r\n");
   \   00000F38   0xF8DF 0x1ADC      LDR.W    R1,??RoadBrd_ParseString_142
   \   00000F3C   0xA80A             ADD      R0,SP,#+40
   \   00000F3E   0x.... 0x....      BL       strcpy
   1333          #ifdef NUCLEO
   1334                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1335          #else
   1336                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000F42   0xA90A             ADD      R1,SP,#+40
   \   00000F44   0x2000             MOVS     R0,#+0
   \   00000F46   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000F4A   0x0006             MOVS     R6,R0
   1337          #endif
   1338                                if (Status != HAL_OK)
   \   00000F4C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000F4E   0x2E00             CMP      R6,#+0
   \   00000F50   0xD003             BEQ.N    ??RoadBrd_ParseString_180
   1339                                  return Status;
   \   00000F52   0x0030             MOVS     R0,R6
   \   00000F54   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000F56   0xF003 0xBCC3      B.W      ??RoadBrd_ParseString_4
   1340                                // NOW, Build Data String..
   1341                                sprintf( (char *)tempBffr2, "     BUS VOLTAGE DATA: " );
   \                     ??RoadBrd_ParseString_180: (+1)
   \   00000F5A   0xF8DF 0x1AC0      LDR.W    R1,??RoadBrd_ParseString_142+0x4
   \   00000F5E   0xA80A             ADD      R0,SP,#+40
   \   00000F60   0x.... 0x....      BL       sprintf
   1342                                strcat( (char *)tempBffr2, (char *)VMeasure.Raw );
   \   00000F64   0xA944             ADD      R1,SP,#+272
   \   00000F66   0xA80A             ADD      R0,SP,#+40
   \   00000F68   0x.... 0x....      BL       strcat
   1343                                strcat( (char *)tempBffr2, "\r\n" );
   \   00000F6C   0xA1BF             ADR.N    R1,??RoadBrd_ParseString_63+0xC  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000F6E   0xA80A             ADD      R0,SP,#+40
   \   00000F70   0x.... 0x....      BL       strcat
   1344                              }
   1345                              else
   1346                                break;
   1347          #ifdef NUCLEO
   1348                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1349          #else
   1350                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000F74   0xA90A             ADD      R1,SP,#+40
   \   00000F76   0x2000             MOVS     R0,#+0
   \   00000F78   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000F7C   0x0006             MOVS     R6,R0
   1351          #endif
   1352                              if (Status != HAL_OK)
   \   00000F7E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000F80   0x2E00             CMP      R6,#+0
   \   00000F82   0xD101             BNE.N    ??RoadBrd_ParseString_181
   \   00000F84   0xE004             B.N      ??RoadBrd_ParseString_182
   \                     ??RoadBrd_ParseString_179: (+1)
   \   00000F86   0xE032             B.N      ??RoadBrd_ParseString_148
   1353                                return Status;
   \                     ??RoadBrd_ParseString_181: (+1)
   \   00000F88   0x0030             MOVS     R0,R6
   \   00000F8A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000F8C   0xF003 0xBCA8      B.W      ??RoadBrd_ParseString_4
   1354                              // Now calculate Bus Voltage.
   1355                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_182: (+1)
   \   00000F90   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000F92   0x2D00             CMP      R5,#+0
   \   00000F94   0xD00C             BEQ.N    ??RoadBrd_ParseString_183
   1356                              {
   1357                                // Yes...Build and Send BLE Response NOW.
   1358                                sprintf( (char *)tempBffr2, "<STATUS>BUS_VLTG:%s/%s</STATUS>", (char *)VMeasure.Voltage, (char *)VMeasureScaled.Voltage );
   \   00000F96   0xAB4D             ADD      R3,SP,#+308
   \   00000F98   0xAA42             ADD      R2,SP,#+264
   \   00000F9A   0xF8DF 0x1AEC      LDR.W    R1,??RoadBrd_ParseString_147
   \   00000F9E   0xA80A             ADD      R0,SP,#+40
   \   00000FA0   0x.... 0x....      BL       sprintf
   1359                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000FA4   0xA80A             ADD      R0,SP,#+40
   \   00000FA6   0x.... 0x....      BL       strlen
   \   00000FAA   0xA90A             ADD      R1,SP,#+40
   \   00000FAC   0x.... 0x....      BL       BGM111_Transmit
   1360                              }
   1361                              sprintf( (char *)tempBffr2, "     Bus Voltage: %s/%s\r\n", (char *)VMeasure.Voltage, (char *)VMeasureScaled.Voltage );
   \                     ??RoadBrd_ParseString_183: (+1)
   \   00000FB0   0xAB4D             ADD      R3,SP,#+308
   \   00000FB2   0xAA42             ADD      R2,SP,#+264
   \   00000FB4   0xF8DF 0x1AD4      LDR.W    R1,??RoadBrd_ParseString_147+0x4
   \   00000FB8   0xA80A             ADD      R0,SP,#+40
   \   00000FBA   0x.... 0x....      BL       sprintf
   1362                              break;
   \   00000FBE   0xE016             B.N      ??RoadBrd_ParseString_148
   \                     ??RoadBrd_ParseString_32:
   \   00000FC0   0x........         DC32     ?_9
   \   00000FC4   0x........         DC32     ?_10
   1363                            default:
   1364                              // Is this a BLE Operation?
   1365                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_153: (+1)
   \   00000FC8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000FCA   0x2D00             CMP      R5,#+0
   \   00000FCC   0xD00A             BEQ.N    ??RoadBrd_ParseString_184
   1366                              {
   1367                                // Yes...Build and Send BLE Response NOW.
   1368                                strcpy( (char *)tempBffr2, "<STATUS>CMD_C_SYNTAX</STATUS>");
   \   00000FCE   0xF8DF 0x1E0C      LDR.W    R1,??RoadBrd_ParseString_185
   \   00000FD2   0xA80A             ADD      R0,SP,#+40
   \   00000FD4   0x.... 0x....      BL       strcpy
   1369                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000FD8   0xA80A             ADD      R0,SP,#+40
   \   00000FDA   0x.... 0x....      BL       strlen
   \   00000FDE   0xA90A             ADD      R1,SP,#+40
   \   00000FE0   0x.... 0x....      BL       BGM111_Transmit
   1370                              }
   1371                              strcpy( (char *)tempBffr2, "ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_184: (+1)
   \   00000FE4   0xF8DF 0x147C      LDR.W    R1,??RoadBrd_ParseString_81+0x8
   \   00000FE8   0xA80A             ADD      R0,SP,#+40
   \   00000FEA   0x.... 0x....      BL       strcpy
   1372                              break;
   1373                          } //EndSwitch
   1374                        } //EndElse (Size == 1)
   1375                        break;
   \                     ??RoadBrd_ParseString_148: (+1)
   \   00000FEE   0xF003 0xBBFD      B.W      ??RoadBrd_ParseString_26
   \   00000FF2   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_35:
   \   00000FF4   0x........         DC32     ?_11
   \   00000FF8   0x........         DC32     ?_12
   \   00000FFC   0x........         DC32     ?_13
   \   00001000   0x........         DC32     ?_14
   \   00001004   0x........         DC32     ?_15
   \   00001008   0x........         DC32     ?_16
   1376          //**************************************************************************************************
   1377                      case 'D':
   1378                        // Read Humidity. 
   1379                        if (Size == 1)
   \                     ??RoadBrd_ParseString_15: (+1)
   \   0000100C   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00001010   0xF1B8 0x0F01      CMP      R8,#+1
   \   00001014   0xD16C             BNE.N    ??RoadBrd_ParseString_186
   1380                        {
   1381          //------------------ D Command: Read Humidity Values      
   1382                          // Read Humidity Sensor sensor and return Humidity results....
   1383                          Status = RoadBrd_Humidity_ReadHumidity( &HMeasure );
   \   00001016   0xA848             ADD      R0,SP,#+288
   \   00001018   0x.... 0x....      BL       RoadBrd_Humidity_ReadHumidity
   \   0000101C   0x0006             MOVS     R6,R0
   1384                          if (Status == HAL_OK)
   \   0000101E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001020   0x2E00             CMP      R6,#+0
   \   00001022   0xD104             BNE.N    ??RoadBrd_ParseString_187
   1385                            Status = RoadBrd_Humidity_ReadHumidity_Scaled( &HMeasureScaled );
   \   00001024   0xA8FF             ADD      R0,SP,#+1020
   \   00001026   0x3048             ADDS     R0,R0,#+72
   \   00001028   0x.... 0x....      BL       RoadBrd_Humidity_ReadHumidity_Scaled
   \   0000102C   0x0006             MOVS     R6,R0
   1386                          // Is this a BLE Operation?
   1387                          if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_187: (+1)
   \   0000102E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001030   0x2E00             CMP      R6,#+0
   \   00001032   0xD126             BNE.N    ??RoadBrd_ParseString_188
   1388                          {
   1389                            // Send string to UART..
   1390                            strcpy( (char *)tempBffr2, "Humidity SENSOR...\r\n");
   \   00001034   0xF8DF 0x1DA8      LDR.W    R1,??RoadBrd_ParseString_185+0x4
   \   00001038   0xA80A             ADD      R0,SP,#+40
   \   0000103A   0x.... 0x....      BL       strcpy
   1391          #ifdef NUCLEO
   1392                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1393          #else
   1394                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000103E   0xA90A             ADD      R1,SP,#+40
   \   00001040   0x2000             MOVS     R0,#+0
   \   00001042   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001046   0x0006             MOVS     R6,R0
   1395          #endif
   1396                            if (Status != HAL_OK)
   \   00001048   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000104A   0x2E00             CMP      R6,#+0
   \   0000104C   0xD003             BEQ.N    ??RoadBrd_ParseString_189
   1397                              return Status;
   \   0000104E   0x0030             MOVS     R0,R6
   \   00001050   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001052   0xF003 0xBC45      B.W      ??RoadBrd_ParseString_4
   1398                            // NOW, Build Data String..
   1399                            sprintf( (char *)tempBffr2, "     Humidity DATA: " );
   \                     ??RoadBrd_ParseString_189: (+1)
   \   00001056   0xF8DF 0x1DF8      LDR.W    R1,??RoadBrd_ParseString_190
   \   0000105A   0xA80A             ADD      R0,SP,#+40
   \   0000105C   0x.... 0x....      BL       sprintf
   1400                            strcat( (char *)tempBffr2, (char *)HMeasure.HRaw );
   \   00001060   0xA94A             ADD      R1,SP,#+296
   \   00001062   0xA80A             ADD      R0,SP,#+40
   \   00001064   0x.... 0x....      BL       strcat
   1401                            strcat( (char *)tempBffr2, "\r\n" );
   \   00001068   0xA180             ADR.N    R1,??RoadBrd_ParseString_63+0xC  ;; 0x0D, 0x0A, 0x00, 0x00
   \   0000106A   0xA80A             ADD      R0,SP,#+40
   \   0000106C   0x.... 0x....      BL       strcat
   1402                          }
   1403                          else
   1404                            break;
   1405          #ifdef NUCLEO
   1406                          Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1407          #else
   1408                          Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00001070   0xA90A             ADD      R1,SP,#+40
   \   00001072   0x2000             MOVS     R0,#+0
   \   00001074   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001078   0x0006             MOVS     R6,R0
   1409          #endif
   1410                          if (Status != HAL_OK)
   \   0000107A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000107C   0x2E00             CMP      R6,#+0
   \   0000107E   0xD102             BNE.N    ??RoadBrd_ParseString_191
   \   00001080   0xE005             B.N      ??RoadBrd_ParseString_192
   \                     ??RoadBrd_ParseString_188: (+1)
   \   00001082   0xF003 0xBBB3      B.W      ??RoadBrd_ParseString_26
   1411                            return Status;
   \                     ??RoadBrd_ParseString_191: (+1)
   \   00001086   0x0030             MOVS     R0,R6
   \   00001088   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000108A   0xF003 0xBC29      B.W      ??RoadBrd_ParseString_4
   1412                          // NOW, Build Data String..
   1413                          sprintf( (char *)tempBffr2, "     Humidity DATA(Decimal): %d\r\n", HMeasure.HRawC );
   \                     ??RoadBrd_ParseString_192: (+1)
   \   0000108E   0xF8BD 0x2130      LDRH     R2,[SP, #+304]
   \   00001092   0xF8DF 0x1DC0      LDR.W    R1,??RoadBrd_ParseString_190+0x4
   \   00001096   0xA80A             ADD      R0,SP,#+40
   \   00001098   0x.... 0x....      BL       sprintf
   1414          #ifdef NUCLEO
   1415                          Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1416          #else
   1417                          Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000109C   0xA90A             ADD      R1,SP,#+40
   \   0000109E   0x2000             MOVS     R0,#+0
   \   000010A0   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000010A4   0x0006             MOVS     R6,R0
   1418          #endif
   1419                          if (Status != HAL_OK)
   \   000010A6   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000010A8   0x2E00             CMP      R6,#+0
   \   000010AA   0xD003             BEQ.N    ??RoadBrd_ParseString_193
   1420                            return Status;
   \   000010AC   0x0030             MOVS     R0,R6
   \   000010AE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000010B0   0xF003 0xBC16      B.W      ??RoadBrd_ParseString_4
   1421                          // Now calculate Celcius and Farenheit Temp.
   1422                          if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_193: (+1)
   \   000010B4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000010B6   0x2D00             CMP      R5,#+0
   \   000010B8   0xD00D             BEQ.N    ??RoadBrd_ParseString_194
   1423                          {
   1424                            // Yes...Build and Send BLE Response NOW.
   1425                            sprintf( (char *)tempBffr2, "<STATUS>HUMIDITY:%s/%s</STATUS>", (char *)HMeasure.Humidity, (char *)HMeasureScaled.Humidity );
   \   000010BA   0xABFF             ADD      R3,SP,#+1020
   \   000010BC   0x3348             ADDS     R3,R3,#+72
   \   000010BE   0xAA48             ADD      R2,SP,#+288
   \   000010C0   0xF8DF 0x1D94      LDR.W    R1,??RoadBrd_ParseString_190+0x8
   \   000010C4   0xA80A             ADD      R0,SP,#+40
   \   000010C6   0x.... 0x....      BL       sprintf
   1426                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000010CA   0xA80A             ADD      R0,SP,#+40
   \   000010CC   0x.... 0x....      BL       strlen
   \   000010D0   0xA90A             ADD      R1,SP,#+40
   \   000010D2   0x.... 0x....      BL       BGM111_Transmit
   1427                          }
   1428                          sprintf( (char *)tempBffr2, "     Humidity: %s/%s\r\n", (char *)HMeasure.Humidity, (char *)HMeasureScaled.Humidity );
   \                     ??RoadBrd_ParseString_194: (+1)
   \   000010D6   0xABFF             ADD      R3,SP,#+1020
   \   000010D8   0x3348             ADDS     R3,R3,#+72
   \   000010DA   0xAA48             ADD      R2,SP,#+288
   \   000010DC   0xF8DF 0x1D7C      LDR.W    R1,??RoadBrd_ParseString_190+0xC
   \   000010E0   0xA80A             ADD      R0,SP,#+40
   \   000010E2   0x.... 0x....      BL       sprintf
   \   000010E6   0xE10D             B.N      ??RoadBrd_ParseString_195
   \                     ??RoadBrd_ParseString_40:
   \   000010E8   0x........         DC32     ?_17
   \   000010EC   0x........         DC32     ?_19
   1429                        }
   1430                        else
   1431                        {
   1432                          switch( tempBffr[1] )
   \                     ??RoadBrd_ParseString_186: (+1)
   \   000010F0   0x7860             LDRB     R0,[R4, #+1]
   \   000010F2   0x2830             CMP      R0,#+48
   \   000010F4   0xD024             BEQ.N    ??RoadBrd_ParseString_196
   \   000010F6   0x2831             CMP      R0,#+49
   \   000010F8   0xF000 0x808C      BEQ.W    ??RoadBrd_ParseString_197
   \   000010FC   0x2849             CMP      R0,#+73
   \   000010FE   0xF040 0x8101      BNE.W    ??RoadBrd_ParseString_195
   1433                          {
   1434          //------------------ DI Command: Initialize Humidity Sensor
   1435                            case 'I':
   1436                              // Initialize Humidity Sensor.
   1437                              Status = RoadBrd_HumidityInit();
   \                     ??RoadBrd_ParseString_198: (+1)
   \   00001102   0x.... 0x....      BL       RoadBrd_HumidityInit
   \   00001106   0x0006             MOVS     R6,R0
   1438                              // Is this a BLE Operation?
   1439                              if ( BLE_Flag )
   \   00001108   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000110A   0x2D00             CMP      R5,#+0
   \   0000110C   0xD009             BEQ.N    ??RoadBrd_ParseString_199
   1440                              {
   1441                                // Yes...Build and Send BLE Response NOW.
   1442                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   0000110E   0x492B             LDR.N    R1,??RoadBrd_ParseString_50+0x4
   \   00001110   0xA80A             ADD      R0,SP,#+40
   \   00001112   0x.... 0x....      BL       strcpy
   1443                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001116   0xA80A             ADD      R0,SP,#+40
   \   00001118   0x.... 0x....      BL       strlen
   \   0000111C   0xA90A             ADD      R1,SP,#+40
   \   0000111E   0x.... 0x....      BL       BGM111_Transmit
   1444                              }
   1445          
   1446                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_199: (+1)
   \   00001122   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001124   0x2E00             CMP      R6,#+0
   \   00001126   0xD104             BNE.N    ??RoadBrd_ParseString_200
   1447                              {
   1448                                strcpy( (char *)tempBffr2, "Humidity Sensor: Initialization Complete.\r\n");;
   \   00001128   0xF8DF 0x1D34      LDR.W    R1,??RoadBrd_ParseString_190+0x10
   \   0000112C   0xA80A             ADD      R0,SP,#+40
   \   0000112E   0x.... 0x....      BL       strcpy
   1449                              }
   1450                              break;
   \                     ??RoadBrd_ParseString_200: (+1)
   \   00001132   0xE0E7             B.N      ??RoadBrd_ParseString_195
   \                     ??RoadBrd_ParseString_48:
   \   00001134   0x........         DC32     ?_20
   \   00001138   0x........         DC32     ?_21
   \   0000113C   0x........         DC32     ?_22
   1451          //------------------ D0 Command...Read Humidity Values.....
   1452                            case '0':
   1453                              // Read Humidity Sensor sensor and return Humidity results....
   1454                              Status = RoadBrd_Humidity_ReadHumidity( &HMeasure );
   \                     ??RoadBrd_ParseString_196: (+1)
   \   00001140   0xA848             ADD      R0,SP,#+288
   \   00001142   0x.... 0x....      BL       RoadBrd_Humidity_ReadHumidity
   \   00001146   0x0006             MOVS     R6,R0
   1455                              // Is this a BLE Operation?
   1456                              if ( BLE_Flag )
   \   00001148   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000114A   0x2D00             CMP      R5,#+0
   \   0000114C   0xD009             BEQ.N    ??RoadBrd_ParseString_201
   1457                              {
   1458                                // Yes...Build and Send BLE Response NOW.
   1459                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   0000114E   0x491B             LDR.N    R1,??RoadBrd_ParseString_50+0x4
   \   00001150   0xA80A             ADD      R0,SP,#+40
   \   00001152   0x.... 0x....      BL       strcpy
   1460                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001156   0xA80A             ADD      R0,SP,#+40
   \   00001158   0x.... 0x....      BL       strlen
   \   0000115C   0xA90A             ADD      R1,SP,#+40
   \   0000115E   0x.... 0x....      BL       BGM111_Transmit
   1461                              }
   1462          
   1463                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_201: (+1)
   \   00001162   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001164   0x2E00             CMP      R6,#+0
   \   00001166   0xD12F             BNE.N    ??RoadBrd_ParseString_202
   1464                              {
   1465                                // Send string to UART..
   1466                                strcpy( (char *)tempBffr2, "Humidity SENSOR...\r\n");
   \   00001168   0xF8DF 0x1C74      LDR.W    R1,??RoadBrd_ParseString_185+0x4
   \   0000116C   0xA80A             ADD      R0,SP,#+40
   \   0000116E   0x.... 0x....      BL       strcpy
   1467          #ifdef NUCLEO
   1468                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1469          #else
   1470                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00001172   0xA90A             ADD      R1,SP,#+40
   \   00001174   0x2000             MOVS     R0,#+0
   \   00001176   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000117A   0x0006             MOVS     R6,R0
   1471          #endif
   1472                                if (Status != HAL_OK)
   \   0000117C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000117E   0x2E00             CMP      R6,#+0
   \   00001180   0xD003             BEQ.N    ??RoadBrd_ParseString_203
   1473                                  return Status;
   \   00001182   0x0030             MOVS     R0,R6
   \   00001184   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001186   0xF003 0xBBAB      B.W      ??RoadBrd_ParseString_4
   1474                                // NOW, Build Data String..
   1475                                sprintf( (char *)tempBffr2, "     Humidity DATA: " );
   \                     ??RoadBrd_ParseString_203: (+1)
   \   0000118A   0xF8DF 0x1CC4      LDR.W    R1,??RoadBrd_ParseString_190
   \   0000118E   0xA80A             ADD      R0,SP,#+40
   \   00001190   0x.... 0x....      BL       sprintf
   1476                                strcat( (char *)tempBffr2, (char *)HMeasure.HRaw );
   \   00001194   0xA94A             ADD      R1,SP,#+296
   \   00001196   0xA80A             ADD      R0,SP,#+40
   \   00001198   0x.... 0x....      BL       strcat
   1477                                strcat( (char *)tempBffr2, "\r\n" );
   \   0000119C   0xA133             ADR.N    R1,??RoadBrd_ParseString_63+0xC  ;; 0x0D, 0x0A, 0x00, 0x00
   \   0000119E   0xA80A             ADD      R0,SP,#+40
   \   000011A0   0x.... 0x....      BL       strcat
   1478                              }
   1479                              else
   1480                                break;
   1481          #ifdef NUCLEO
   1482                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1483          #else
   1484                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000011A4   0xA90A             ADD      R1,SP,#+40
   \   000011A6   0x2000             MOVS     R0,#+0
   \   000011A8   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000011AC   0x0006             MOVS     R6,R0
   1485          #endif
   1486                              if (Status != HAL_OK)
   \   000011AE   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000011B0   0x2E00             CMP      R6,#+0
   \   000011B2   0xD10A             BNE.N    ??RoadBrd_ParseString_204
   \   000011B4   0xE00D             B.N      ??RoadBrd_ParseString_205
   \   000011B6   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_50:
   \   000011B8   0x........         DC32     ?_23
   \   000011BC   0x........         DC32     ?_24
   \   000011C0   0x........         DC32     ?_25
   \   000011C4   0x........         DC32     ?_26
   \                     ??RoadBrd_ParseString_202: (+1)
   \   000011C8   0xE09C             B.N      ??RoadBrd_ParseString_195
   1487                                return Status;
   \                     ??RoadBrd_ParseString_204: (+1)
   \   000011CA   0x0030             MOVS     R0,R6
   \   000011CC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000011CE   0xF003 0xBB87      B.W      ??RoadBrd_ParseString_4
   1488                              // NOW, Build Data String..
   1489                              sprintf( (char *)tempBffr2, "     Humidity DATA(Decimal): %d\r\n", HMeasure.HRawC );
   \                     ??RoadBrd_ParseString_205: (+1)
   \   000011D2   0xF8BD 0x2130      LDRH     R2,[SP, #+304]
   \   000011D6   0xF8DF 0x1C7C      LDR.W    R1,??RoadBrd_ParseString_190+0x4
   \   000011DA   0xA80A             ADD      R0,SP,#+40
   \   000011DC   0x.... 0x....      BL       sprintf
   1490          #ifdef NUCLEO
   1491                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1492          #else
   1493                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000011E0   0xA90A             ADD      R1,SP,#+40
   \   000011E2   0x2000             MOVS     R0,#+0
   \   000011E4   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000011E8   0x0006             MOVS     R6,R0
   1494          #endif
   1495                              if (Status != HAL_OK)
   \   000011EA   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000011EC   0x2E00             CMP      R6,#+0
   \   000011EE   0xD003             BEQ.N    ??RoadBrd_ParseString_206
   1496                                return Status;
   \   000011F0   0x0030             MOVS     R0,R6
   \   000011F2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000011F4   0xF003 0xBB74      B.W      ??RoadBrd_ParseString_4
   1497                              // Now calculate Humidity.
   1498                              sprintf( (char *)tempBffr2, "     Humidity: " );
   \                     ??RoadBrd_ParseString_206: (+1)
   \   000011F8   0xF8DF 0x1DF8      LDR.W    R1,??RoadBrd_ParseString_207
   \   000011FC   0xA80A             ADD      R0,SP,#+40
   \   000011FE   0x.... 0x....      BL       sprintf
   1499                              strcat( (char *)tempBffr2, (char *)HMeasure.Humidity );
   \   00001202   0xA948             ADD      R1,SP,#+288
   \   00001204   0xA80A             ADD      R0,SP,#+40
   \   00001206   0x.... 0x....      BL       strcat
   1500                              strcat( (char *)tempBffr2, "\r\n" );
   \   0000120A   0xA118             ADR.N    R1,??RoadBrd_ParseString_63+0xC  ;; 0x0D, 0x0A, 0x00, 0x00
   \   0000120C   0xA80A             ADD      R0,SP,#+40
   \   0000120E   0x.... 0x....      BL       strcat
   1501                              break;
   \   00001212   0xE077             B.N      ??RoadBrd_ParseString_195
   1502          //------------------ D1 Command...Read Temperature Values..... 
   1503                            case '1':
   1504                              // Read Humidity Sensor sensor and return Temperature results....
   1505                              Status = RoadBrd_Humidity_ReadTemperature( &TMeasure );
   \                     ??RoadBrd_ParseString_197: (+1)
   \   00001214   0xA83C             ADD      R0,SP,#+240
   \   00001216   0x.... 0x....      BL       RoadBrd_Humidity_ReadTemperature
   \   0000121A   0x0006             MOVS     R6,R0
   1506                              // Is this a BLE Operation?
   1507                              if ( BLE_Flag )
   \   0000121C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000121E   0x2D00             CMP      R5,#+0
   \   00001220   0xD00A             BEQ.N    ??RoadBrd_ParseString_208
   1508                              {
   1509                                // Yes...Build and Send BLE Response NOW.
   1510                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001222   0xF8DF 0x1DD4      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   00001226   0xA80A             ADD      R0,SP,#+40
   \   00001228   0x.... 0x....      BL       strcpy
   1511                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000122C   0xA80A             ADD      R0,SP,#+40
   \   0000122E   0x.... 0x....      BL       strlen
   \   00001232   0xA90A             ADD      R1,SP,#+40
   \   00001234   0x.... 0x....      BL       BGM111_Transmit
   1512                              }
   1513          
   1514                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_208: (+1)
   \   00001238   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000123A   0x2E00             CMP      R6,#+0
   \   0000123C   0xD136             BNE.N    ??RoadBrd_ParseString_209
   1515                              {
   1516                                // Send string to UART..
   1517                                strcpy( (char *)tempBffr2, "Humidity SENSOR...\r\n");
   \   0000123E   0xF8DF 0x1BA0      LDR.W    R1,??RoadBrd_ParseString_185+0x4
   \   00001242   0xA80A             ADD      R0,SP,#+40
   \   00001244   0x.... 0x....      BL       strcpy
   1518          #ifdef NUCLEO
   1519                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1520          #else
   1521                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00001248   0xA90A             ADD      R1,SP,#+40
   \   0000124A   0x2000             MOVS     R0,#+0
   \   0000124C   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001250   0x0006             MOVS     R6,R0
   1522          #endif
   1523                                if (Status != HAL_OK)
   \   00001252   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001254   0x2E00             CMP      R6,#+0
   \   00001256   0xD013             BEQ.N    ??RoadBrd_ParseString_210
   1524                                  return Status;
   \   00001258   0x0030             MOVS     R0,R6
   \   0000125A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000125C   0xF003 0xBB40      B.W      ??RoadBrd_ParseString_4
   \                     ??RoadBrd_ParseString_63:
   \   00001260   0x........         DC32     ?_27
   \   00001264   0x........         DC32     ?_28
   \   00001268   0x........         DC32     ?_29
   \   0000126C   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
   \   00001270   0x........         DC32     ?_30
   \   00001274   0x........         DC32     ?_31
   \   00001278   0x........         DC32     ?_32
   \   0000127C   0x........         DC32     ?_33
   1525                                // NOW, Build Data String..
   1526                                sprintf( (char *)tempBffr2, "     TEMP DATA: " );
   \                     ??RoadBrd_ParseString_210: (+1)
   \   00001280   0x4937             LDR.N    R1,??RoadBrd_ParseString_71+0x4
   \   00001282   0xA80A             ADD      R0,SP,#+40
   \   00001284   0x.... 0x....      BL       sprintf
   1527                                strcat( (char *)tempBffr2, (char *)TMeasure.Raw );
   \   00001288   0xF10D 0x01FE      ADD      R1,SP,#+254
   \   0000128C   0xA80A             ADD      R0,SP,#+40
   \   0000128E   0x.... 0x....      BL       strcat
   1528                                strcat( (char *)tempBffr2, "\r\n" );
   \   00001292   0xA1B6             ADR.N    R1,??RoadBrd_ParseString_103+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001294   0xA80A             ADD      R0,SP,#+40
   \   00001296   0x.... 0x....      BL       strcat
   1529                              }
   1530                              else
   1531                                break;
   1532          #ifdef NUCLEO
   1533                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1534          #else
   1535                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000129A   0xA90A             ADD      R1,SP,#+40
   \   0000129C   0x2000             MOVS     R0,#+0
   \   0000129E   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000012A2   0x0006             MOVS     R6,R0
   1536          #endif
   1537                              if (Status != HAL_OK)
   \   000012A4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000012A6   0x2E00             CMP      R6,#+0
   \   000012A8   0xD101             BNE.N    ??RoadBrd_ParseString_211
   \   000012AA   0xE004             B.N      ??RoadBrd_ParseString_212
   \                     ??RoadBrd_ParseString_209: (+1)
   \   000012AC   0xE02A             B.N      ??RoadBrd_ParseString_195
   1538                                return Status;
   \                     ??RoadBrd_ParseString_211: (+1)
   \   000012AE   0x0030             MOVS     R0,R6
   \   000012B0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000012B2   0xF003 0xBB15      B.W      ??RoadBrd_ParseString_4
   1539                              // NOW, Build Data String..
   1540                              sprintf( (char *)tempBffr2, "     TEMP DATA(Decimal): %d\r\n", TMeasure.RawC );
   \                     ??RoadBrd_ParseString_212: (+1)
   \   000012B6   0xF8BD 0x2106      LDRH     R2,[SP, #+262]
   \   000012BA   0x492A             LDR.N    R1,??RoadBrd_ParseString_71+0x8
   \   000012BC   0xA80A             ADD      R0,SP,#+40
   \   000012BE   0x.... 0x....      BL       sprintf
   1541          #ifdef NUCLEO
   1542                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1543          #else
   1544                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000012C2   0xA90A             ADD      R1,SP,#+40
   \   000012C4   0x2000             MOVS     R0,#+0
   \   000012C6   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000012CA   0x0006             MOVS     R6,R0
   1545          #endif
   1546                              if (Status != HAL_OK)
   \   000012CC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000012CE   0x2E00             CMP      R6,#+0
   \   000012D0   0xD003             BEQ.N    ??RoadBrd_ParseString_213
   1547                                return Status;
   \   000012D2   0x0030             MOVS     R0,R6
   \   000012D4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000012D6   0xF003 0xBB03      B.W      ??RoadBrd_ParseString_4
   1548                              // Now calculate Celcius and Farenheit Temp.
   1549                              sprintf( (char *)tempBffr2, "     TempC: " );
   \                     ??RoadBrd_ParseString_213: (+1)
   \   000012DA   0x494B             LDR.N    R1,??RoadBrd_ParseString_78
   \   000012DC   0xA80A             ADD      R0,SP,#+40
   \   000012DE   0x.... 0x....      BL       sprintf
   1550                              strcat( (char *)tempBffr2, (char *)TMeasure.TempC );
   \   000012E2   0xA93C             ADD      R1,SP,#+240
   \   000012E4   0xA80A             ADD      R0,SP,#+40
   \   000012E6   0x.... 0x....      BL       strcat
   1551                              strcat( (char *)tempBffr2, "     TempF: " );
   \   000012EA   0x4948             LDR.N    R1,??RoadBrd_ParseString_78+0x4
   \   000012EC   0xA80A             ADD      R0,SP,#+40
   \   000012EE   0x.... 0x....      BL       strcat
   1552                              strcat( (char *)tempBffr2, (char *)TMeasure.TempF );
   \   000012F2   0xF10D 0x01F7      ADD      R1,SP,#+247
   \   000012F6   0xA80A             ADD      R0,SP,#+40
   \   000012F8   0x.... 0x....      BL       strcat
   1553                              strcat( (char *)tempBffr2, "\r\n" );
   \   000012FC   0xA19B             ADR.N    R1,??RoadBrd_ParseString_103+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   000012FE   0xA80A             ADD      R0,SP,#+40
   \   00001300   0x.... 0x....      BL       strcat
   1554                              break;
   1555                          } //EndSwitch
   1556                        } //EndElse (Size == 1)
   1557                        break;
   \                     ??RoadBrd_ParseString_195: (+1)
   \   00001304   0xF003 0xBA72      B.W      ??RoadBrd_ParseString_26
   1558          //**************************************************************************************************
   1559                      case 'E':
   1560                        // Read Temp and Pressure. 
   1561                        // Is this a BLE Operation?
   1562                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_16: (+1)
   \   00001308   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000130A   0x2D00             CMP      R5,#+0
   \   0000130C   0xD00A             BEQ.N    ??RoadBrd_ParseString_214
   1563                        {
   1564                          // Yes...Build and Send BLE Response NOW.
   1565                          strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   0000130E   0xF8DF 0x1CE8      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   00001312   0xA80A             ADD      R0,SP,#+40
   \   00001314   0x.... 0x....      BL       strcpy
   1566                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001318   0xA80A             ADD      R0,SP,#+40
   \   0000131A   0x.... 0x....      BL       strlen
   \   0000131E   0xA90A             ADD      R1,SP,#+40
   \   00001320   0x.... 0x....      BL       BGM111_Transmit
   1567                        }
   1568                        
   1569                        strcpy( (char *)tempBffr2, "TBD: Read Temp and Pressure NOT IMPLEMENTED\r\n");
   \                     ??RoadBrd_ParseString_214: (+1)
   \   00001324   0xF8DF 0x1D7C      LDR.W    R1,??RoadBrd_ParseString_215
   \   00001328   0xA80A             ADD      R0,SP,#+40
   \   0000132A   0x.... 0x....      BL       strcpy
   1570                        break;
   \   0000132E   0xF003 0xBA5D      B.W      ??RoadBrd_ParseString_26
   1571          //**************************************************************************************************
   1572                      case 'F':
   1573                        // NO ACTION. 
   1574                        // Is this a BLE Operation?
   1575                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_17: (+1)
   \   00001332   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001334   0x2D00             CMP      R5,#+0
   \   00001336   0xD00A             BEQ.N    ??RoadBrd_ParseString_216
   1576                        {
   1577                          // Yes...Build and Send BLE Response NOW.
   1578                          strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001338   0xF8DF 0x1CBC      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   0000133C   0xA80A             ADD      R0,SP,#+40
   \   0000133E   0x.... 0x....      BL       strcpy
   1579                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001342   0xA80A             ADD      R0,SP,#+40
   \   00001344   0x.... 0x....      BL       strlen
   \   00001348   0xA90A             ADD      R1,SP,#+40
   \   0000134A   0x.... 0x....      BL       BGM111_Transmit
   1580                        }
   1581                        
   1582                        strcpy( (char *)tempBffr2, "NO Action...(0x00).\r\n");
   \                     ??RoadBrd_ParseString_216: (+1)
   \   0000134E   0xF8DF 0x1D58      LDR.W    R1,??RoadBrd_ParseString_215+0x4
   \   00001352   0xA80A             ADD      R0,SP,#+40
   \   00001354   0x.... 0x....      BL       strcpy
   1583                        break;
   \   00001358   0xF003 0xBA48      B.W      ??RoadBrd_ParseString_26
   \                     ??RoadBrd_ParseString_71:
   \   0000135C   0x........         DC32     ?_34
   \   00001360   0x........         DC32     ?_35
   \   00001364   0x........         DC32     ?_36
   1584          //**************************************************************************************************
   1585                      case 'G':
   1586                        // Read Temperature sensor and return results....Temperature Sensor U10(PCT2075GVJ).  Addr: 0x94
   1587                        Status = RoadBrd_ReadTemp( &TMeasure );
   \                     ??RoadBrd_ParseString_18: (+1)
   \   00001368   0xA83C             ADD      R0,SP,#+240
   \   0000136A   0x.... 0x....      BL       RoadBrd_ReadTemp
   \   0000136E   0x0006             MOVS     R6,R0
   1588                        if (Status == HAL_OK)
   \   00001370   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001372   0x2E00             CMP      R6,#+0
   \   00001374   0xD103             BNE.N    ??RoadBrd_ParseString_217
   1589                          Status = RoadBrd_ReadTemp_Scaled( &TMeasureScaled );
   \   00001376   0xA8BE             ADD      R0,SP,#+760
   \   00001378   0x.... 0x....      BL       RoadBrd_ReadTemp_Scaled
   \   0000137C   0x0006             MOVS     R6,R0
   1590                        if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_217: (+1)
   \   0000137E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001380   0x2E00             CMP      R6,#+0
   \   00001382   0xD127             BNE.N    ??RoadBrd_ParseString_218
   1591                        {
   1592                          // Send string to UART..
   1593                          strcpy( (char *)tempBffr2, "TEMP SENSOR...\r\n");
   \   00001384   0xF8DF 0x1D24      LDR.W    R1,??RoadBrd_ParseString_215+0x8
   \   00001388   0xA80A             ADD      R0,SP,#+40
   \   0000138A   0x.... 0x....      BL       strcpy
   1594          #ifdef NUCLEO
   1595                          Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1596          #else
   1597                          Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000138E   0xA90A             ADD      R1,SP,#+40
   \   00001390   0x2000             MOVS     R0,#+0
   \   00001392   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001396   0x0006             MOVS     R6,R0
   1598          #endif
   1599                          if (Status != HAL_OK)
   \   00001398   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000139A   0x2E00             CMP      R6,#+0
   \   0000139C   0xD003             BEQ.N    ??RoadBrd_ParseString_219
   1600                            return Status;
   \   0000139E   0x0030             MOVS     R0,R6
   \   000013A0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000013A2   0xF003 0xBA9D      B.W      ??RoadBrd_ParseString_4
   1601                          // NOW, Build Data String..
   1602                          sprintf( (char *)tempBffr2, "     TEMP DATA: " );
   \                     ??RoadBrd_ParseString_219: (+1)
   \   000013A6   0xF8DF 0x1D08      LDR.W    R1,??RoadBrd_ParseString_215+0xC
   \   000013AA   0xA80A             ADD      R0,SP,#+40
   \   000013AC   0x.... 0x....      BL       sprintf
   1603                          strcat( (char *)tempBffr2, (char *)TMeasure.Raw );
   \   000013B0   0xF10D 0x01FE      ADD      R1,SP,#+254
   \   000013B4   0xA80A             ADD      R0,SP,#+40
   \   000013B6   0x.... 0x....      BL       strcat
   1604                          strcat( (char *)tempBffr2, "\r\n" );
   \   000013BA   0xA16C             ADR.N    R1,??RoadBrd_ParseString_103+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   000013BC   0xA80A             ADD      R0,SP,#+40
   \   000013BE   0x.... 0x....      BL       strcat
   1605                        }
   1606                        else
   1607                          break;
   1608          #ifdef NUCLEO
   1609                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1610          #else
   1611                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000013C2   0xA90A             ADD      R1,SP,#+40
   \   000013C4   0x2000             MOVS     R0,#+0
   \   000013C6   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000013CA   0x0006             MOVS     R6,R0
   1612          #endif
   1613                        if (Status != HAL_OK)
   \   000013CC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000013CE   0x2E00             CMP      R6,#+0
   \   000013D0   0xD102             BNE.N    ??RoadBrd_ParseString_220
   \   000013D2   0xE005             B.N      ??RoadBrd_ParseString_221
   \                     ??RoadBrd_ParseString_218: (+1)
   \   000013D4   0xF003 0xBA0A      B.W      ??RoadBrd_ParseString_26
   1614                          return Status;
   \                     ??RoadBrd_ParseString_220: (+1)
   \   000013D8   0x0030             MOVS     R0,R6
   \   000013DA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000013DC   0xF003 0xBA80      B.W      ??RoadBrd_ParseString_4
   1615                        // NOW, Build Data String..
   1616                        sprintf( (char *)tempBffr2, "     TEMP DATA(Decimal): %d\r\n", TMeasure.RawC );
   \                     ??RoadBrd_ParseString_221: (+1)
   \   000013E0   0xF8BD 0x2106      LDRH     R2,[SP, #+262]
   \   000013E4   0xF8DF 0x1DEC      LDR.W    R1,??RoadBrd_ParseString_222
   \   000013E8   0xA80A             ADD      R0,SP,#+40
   \   000013EA   0x.... 0x....      BL       sprintf
   1617          #ifdef NUCLEO
   1618                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1619          #else
   1620                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000013EE   0xA90A             ADD      R1,SP,#+40
   \   000013F0   0x2000             MOVS     R0,#+0
   \   000013F2   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000013F6   0x0006             MOVS     R6,R0
   1621          #endif
   1622                        if (Status != HAL_OK)
   \   000013F8   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000013FA   0x2E00             CMP      R6,#+0
   \   000013FC   0xD008             BEQ.N    ??RoadBrd_ParseString_223
   1623                          return Status;
   \   000013FE   0x0030             MOVS     R0,R6
   \   00001400   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001402   0xF003 0xBA6D      B.W      ??RoadBrd_ParseString_4
   \   00001406   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_78:
   \   00001408   0x........         DC32     ?_37
   \   0000140C   0x........         DC32     ?_38
   1624                        // Is this a BLE Operation?
   1625                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_223: (+1)
   \   00001410   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001412   0x2D00             CMP      R5,#+0
   \   00001414   0xD012             BEQ.N    ??RoadBrd_ParseString_224
   1626                        {
   1627                          // Yes...Build and Send BLE Response NOW.
   1628                          sprintf( (char *)tempBffr2, "<STATUS>TEMPC:%s/%s//TEMPF:%s/%s</STATUS>", 
   1629                                  (char *)TMeasure.TempC, 
   1630                                  (char *)TMeasureScaled.TempC,
   1631                                  (char *)TMeasure.TempF, 
   1632                                  (char *)TMeasureScaled.TempF);
   \   00001416   0xA8BF             ADD      R0,SP,#+764
   \   00001418   0x1CC0             ADDS     R0,R0,#+3
   \   0000141A   0x9001             STR      R0,[SP, #+4]
   \   0000141C   0xF10D 0x00F7      ADD      R0,SP,#+247
   \   00001420   0x9000             STR      R0,[SP, #+0]
   \   00001422   0xABBE             ADD      R3,SP,#+760
   \   00001424   0xAA3C             ADD      R2,SP,#+240
   \   00001426   0xF8DF 0x1E04      LDR.W    R1,??RoadBrd_ParseString_225
   \   0000142A   0xA80A             ADD      R0,SP,#+40
   \   0000142C   0x.... 0x....      BL       sprintf
   1633                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001430   0xA80A             ADD      R0,SP,#+40
   \   00001432   0x.... 0x....      BL       strlen
   \   00001436   0xA90A             ADD      R1,SP,#+40
   \   00001438   0x.... 0x....      BL       BGM111_Transmit
   1634                        }
   1635                        
   1636                        // Now calculate Celcius and Farenheit Temp.
   1637                        sprintf( (char *)tempBffr2, "     TempC: %s/%s     TempF: %s/%s\r\n", 
   1638                                (char *)TMeasure.TempC, 
   1639                                (char *)TMeasureScaled.TempC,
   1640                                (char *)TMeasure.TempF, 
   1641                                (char *)TMeasureScaled.TempF);
   \                     ??RoadBrd_ParseString_224: (+1)
   \   0000143C   0xA8BF             ADD      R0,SP,#+764
   \   0000143E   0x1CC0             ADDS     R0,R0,#+3
   \   00001440   0x9001             STR      R0,[SP, #+4]
   \   00001442   0xF10D 0x00F7      ADD      R0,SP,#+247
   \   00001446   0x9000             STR      R0,[SP, #+0]
   \   00001448   0xABBE             ADD      R3,SP,#+760
   \   0000144A   0xAA3C             ADD      R2,SP,#+240
   \   0000144C   0xF8DF 0x1DE0      LDR.W    R1,??RoadBrd_ParseString_225+0x4
   \   00001450   0xA80A             ADD      R0,SP,#+40
   \   00001452   0x.... 0x....      BL       sprintf
   1642                        break;
   \   00001456   0xF003 0xB9C9      B.W      ??RoadBrd_ParseString_26
   \   0000145A   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_81:
   \   0000145C   0x........         DC32     ?_39
   \   00001460   0x........         DC32     ?_40
   \   00001464   0x........         DC32     ?_41
   1643          //**************************************************************************************************
   1644                      case 'H':
   1645                        // RGB Color Light Sensor U15(ISL91250).  Addr: 0x88
   1646                        if (Size == 1)
   \                     ??RoadBrd_ParseString_19: (+1)
   \   00001468   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000146C   0xF1B8 0x0F01      CMP      R8,#+1
   \   00001470   0xF040 0x8080      BNE.W    ??RoadBrd_ParseString_226
   1647                        {
   1648          //------------------ H Command...Read RGB Values and Return as 3 (2 Byte Fields)....REDmsb,REDlsb,GREENmsb,GREENlsb,BLUEmsb,BLUElsb.....     
   1649                          // 1. Time to send Command and collect status.
   1650                          Status = RoadBrd_RGBReadValues( &RGBValues );
   \   00001474   0xA8B4             ADD      R0,SP,#+720
   \   00001476   0x.... 0x....      BL       RoadBrd_RGBReadValues
   \   0000147A   0x0006             MOVS     R6,R0
   1651                          if (Status == HAL_OK)
   \   0000147C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000147E   0x2E00             CMP      R6,#+0
   \   00001480   0xD176             BNE.N    ??RoadBrd_ParseString_227
   1652                          {
   1653                            // Send string to UART..
   1654                            strcpy( (char *)tempBffr2, "RGB Color Light Sensor...\r\n");
   \   00001482   0xF8DF 0x1DDC      LDR.W    R1,??RoadBrd_ParseString_228
   \   00001486   0xA80A             ADD      R0,SP,#+40
   \   00001488   0x.... 0x....      BL       strcpy
   1655          #ifdef NUCLEO
   1656                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1657          #else
   1658                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000148C   0xA90A             ADD      R1,SP,#+40
   \   0000148E   0x2000             MOVS     R0,#+0
   \   00001490   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001494   0x0006             MOVS     R6,R0
   1659          #endif
   1660                            if (Status != HAL_OK)
   \   00001496   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001498   0x2E00             CMP      R6,#+0
   \   0000149A   0xD003             BEQ.N    ??RoadBrd_ParseString_229
   1661                              return Status;
   \   0000149C   0x0030             MOVS     R0,R6
   \   0000149E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000014A0   0xF003 0xBA1E      B.W      ??RoadBrd_ParseString_4
   1662                            // NOW, Build Data String..
   1663                            sprintf( (char *)tempBffr2, " RGB(REDmsb,REDlsb,GREENmsb,GREENlsb,BLUEmsb,BLUElsb)\r\n" );
   \                     ??RoadBrd_ParseString_229: (+1)
   \   000014A4   0xF8DF 0x1DE8      LDR.W    R1,??RoadBrd_ParseString_230
   \   000014A8   0xA80A             ADD      R0,SP,#+40
   \   000014AA   0x.... 0x....      BL       sprintf
   1664          #ifdef NUCLEO
   1665                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1666          #else
   1667                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000014AE   0xA90A             ADD      R1,SP,#+40
   \   000014B0   0x2000             MOVS     R0,#+0
   \   000014B2   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000014B6   0x0006             MOVS     R6,R0
   1668          #endif
   1669                            if (Status != HAL_OK)
   \   000014B8   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000014BA   0x2E00             CMP      R6,#+0
   \   000014BC   0xD003             BEQ.N    ??RoadBrd_ParseString_231
   1670                              return Status;
   \   000014BE   0x0030             MOVS     R0,R6
   \   000014C0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000014C2   0xF003 0xBA0D      B.W      ??RoadBrd_ParseString_4
   1671                            strcpy( (char *)tempBffr2, "       DATA: ");
   \                     ??RoadBrd_ParseString_231: (+1)
   \   000014C6   0xF8DF 0x1DCC      LDR.W    R1,??RoadBrd_ParseString_230+0x4
   \   000014CA   0xA80A             ADD      R0,SP,#+40
   \   000014CC   0x.... 0x....      BL       strcpy
   1672                            strcat( (char *)tempBffr2, (char *)RGBValues.Raw );
   \   000014D0   0xA9BA             ADD      R1,SP,#+744
   \   000014D2   0xA80A             ADD      R0,SP,#+40
   \   000014D4   0x.... 0x....      BL       strcat
   1673                            strcat( (char *)tempBffr2, "\r\n" );
   \   000014D8   0xA124             ADR.N    R1,??RoadBrd_ParseString_103+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   000014DA   0xA80A             ADD      R0,SP,#+40
   \   000014DC   0x.... 0x....      BL       strcat
   1674          #ifdef NUCLEO
   1675                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1676          #else
   1677                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000014E0   0xA90A             ADD      R1,SP,#+40
   \   000014E2   0x2000             MOVS     R0,#+0
   \   000014E4   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000014E8   0x0006             MOVS     R6,R0
   1678          #endif
   1679                            if (Status != HAL_OK)
   \   000014EA   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000014EC   0x2E00             CMP      R6,#+0
   \   000014EE   0xD007             BEQ.N    ??RoadBrd_ParseString_232
   1680                              return Status;
   \   000014F0   0x0030             MOVS     R0,R6
   \   000014F2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000014F4   0xF003 0xB9F4      B.W      ??RoadBrd_ParseString_4
   \                     ??RoadBrd_ParseString_88:
   \   000014F8   0x........         DC32     ?_42
   \   000014FC   0x........         DC32     ?_43
   1681                            // Is this a BLE Operation?
   1682                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_232: (+1)
   \   00001500   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001502   0x2D00             CMP      R5,#+0
   \   00001504   0xD00E             BEQ.N    ??RoadBrd_ParseString_233
   1683                            {
   1684                              // Yes...Build and Send BLE Response NOW.
   1685                              sprintf( (char *)tempBffr2, "<STATUS>RED:%s/GREEN:%s/BLUE:%s</STATUS>", 
   1686                                      (char *)RGBValues.Red, 
   1687                                      (char *)RGBValues.Green,
   1688                                      (char *)RGBValues.Blue);
   \   00001506   0xA8B8             ADD      R0,SP,#+736
   \   00001508   0x9000             STR      R0,[SP, #+0]
   \   0000150A   0xABB6             ADD      R3,SP,#+728
   \   0000150C   0xAAB4             ADD      R2,SP,#+720
   \   0000150E   0xF8DF 0x1DD4      LDR.W    R1,??RoadBrd_ParseString_234
   \   00001512   0xA80A             ADD      R0,SP,#+40
   \   00001514   0x.... 0x....      BL       sprintf
   1689                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001518   0xA80A             ADD      R0,SP,#+40
   \   0000151A   0x.... 0x....      BL       strlen
   \   0000151E   0xA90A             ADD      R1,SP,#+40
   \   00001520   0x.... 0x....      BL       BGM111_Transmit
   1690                            }
   1691                            
   1692                            // Now DisplayEach Value Calculated.
   1693                            strcpy( (char *)tempBffr2, "    Red: ");
   \                     ??RoadBrd_ParseString_233: (+1)
   \   00001524   0xF8DF 0x1DC0      LDR.W    R1,??RoadBrd_ParseString_234+0x4
   \   00001528   0xA80A             ADD      R0,SP,#+40
   \   0000152A   0x.... 0x....      BL       strcpy
   1694                            strcat( (char *)tempBffr2, (char *)RGBValues.Red );
   \   0000152E   0xA9B4             ADD      R1,SP,#+720
   \   00001530   0xA80A             ADD      R0,SP,#+40
   \   00001532   0x.... 0x....      BL       strcat
   1695                            strcat( (char *)tempBffr2, "    Green: ");
   \   00001536   0xF8DF 0x1DB4      LDR.W    R1,??RoadBrd_ParseString_234+0x8
   \   0000153A   0xA80A             ADD      R0,SP,#+40
   \   0000153C   0x.... 0x....      BL       strcat
   1696                            strcat( (char *)tempBffr2, (char *)RGBValues.Green );
   \   00001540   0xA9B6             ADD      R1,SP,#+728
   \   00001542   0xA80A             ADD      R0,SP,#+40
   \   00001544   0x.... 0x....      BL       strcat
   1697                            strcat( (char *)tempBffr2, "    Blue: ");
   \   00001548   0xF8DF 0x1DD8      LDR.W    R1,??RoadBrd_ParseString_235
   \   0000154C   0xA80A             ADD      R0,SP,#+40
   \   0000154E   0x.... 0x....      BL       strcat
   1698                            strcat( (char *)tempBffr2, (char *)RGBValues.Blue );
   \   00001552   0xA9B8             ADD      R1,SP,#+736
   \   00001554   0xA80A             ADD      R0,SP,#+40
   \   00001556   0x.... 0x....      BL       strcat
   1699                            strcat( (char *)tempBffr2, "\r\n" );
   \   0000155A   0xA104             ADR.N    R1,??RoadBrd_ParseString_103+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   0000155C   0xA80A             ADD      R0,SP,#+40
   \   0000155E   0x.... 0x....      BL       strcat
   \   00001562   0xE263             B.N      ??RoadBrd_ParseString_236
   \                     ??RoadBrd_ParseString_103:
   \   00001564   0x........         DC32     ?_44
   \   00001568   0x........         DC32     ?_45
   \   0000156C   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
   1700                          }
   1701                          else
   1702                            break;
   \                     ??RoadBrd_ParseString_227: (+1)
   \   00001570   0xF003 0xB93C      B.W      ??RoadBrd_ParseString_26
   1703                        }
   1704                        else
   1705                        {
   1706                          switch( tempBffr[1] )
   \                     ??RoadBrd_ParseString_226: (+1)
   \   00001574   0x7860             LDRB     R0,[R4, #+1]
   \   00001576   0x2830             CMP      R0,#+48
   \   00001578   0xF000 0x8161      BEQ.W    ??RoadBrd_ParseString_237
   \   0000157C   0x2831             CMP      R0,#+49
   \   0000157E   0xF000 0x81CF      BEQ.W    ??RoadBrd_ParseString_238
   \   00001582   0x2832             CMP      R0,#+50
   \   00001584   0xF000 0x81FC      BEQ.W    ??RoadBrd_ParseString_239
   \   00001588   0x2833             CMP      R0,#+51
   \   0000158A   0xF000 0x8216      BEQ.W    ??RoadBrd_ParseString_240
   \   0000158E   0x2849             CMP      R0,#+73
   \   00001590   0xF040 0x8247      BNE.W    ??RoadBrd_ParseString_241
   1707                          {
   1708          //------------------ HI Command...Initialize RGB Color Light Sensor.....     
   1709                            case 'I':
   1710                              if (Size == 2)
   \                     ??RoadBrd_ParseString_242: (+1)
   \   00001594   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00001598   0xF1B8 0x0F02      CMP      R8,#+2
   \   0000159C   0xD11A             BNE.N    ??RoadBrd_ParseString_243
   1711                              {
   1712                                // This is the default init. Assume Default Parms and write them.
   1713                                Status = RoadBrd_RGBInit();
   \   0000159E   0x.... 0x....      BL       RoadBrd_RGBInit
   \   000015A2   0x0006             MOVS     R6,R0
   1714          
   1715                                // Is this a BLE Operation?
   1716                                if ( BLE_Flag )
   \   000015A4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000015A6   0x2D00             CMP      R5,#+0
   \   000015A8   0xD00A             BEQ.N    ??RoadBrd_ParseString_244
   1717                                {
   1718                                  // Yes...Build and Send BLE Response NOW.
   1719                                  strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000015AA   0xF8DF 0x1A4C      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   000015AE   0xA80A             ADD      R0,SP,#+40
   \   000015B0   0x.... 0x....      BL       strcpy
   1720                                  BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000015B4   0xA80A             ADD      R0,SP,#+40
   \   000015B6   0x.... 0x....      BL       strlen
   \   000015BA   0xA90A             ADD      R1,SP,#+40
   \   000015BC   0x.... 0x....      BL       BGM111_Transmit
   1721                                }
   1722                                
   1723                                if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_244: (+1)
   \   000015C0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000015C2   0x2E00             CMP      R6,#+0
   \   000015C4   0xF040 0x813A      BNE.W    ??RoadBrd_ParseString_245
   1724                                {
   1725                                  strcpy( (char *)tempBffr2, "RGB Color Light Sensor: Initialization Complete with DEFAULT Values.\r\n");;
   \   000015C8   0xF8DF 0x1D5C      LDR.W    R1,??RoadBrd_ParseString_235+0x4
   \   000015CC   0xA80A             ADD      R0,SP,#+40
   \   000015CE   0x.... 0x....      BL       strcpy
   \   000015D2   0xE133             B.N      ??RoadBrd_ParseString_245
   1726                                }
   1727                                
   1728                              }
   1729                              else
   1730                              {
   1731                                // Is this a BLE Operation?
   1732                                if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_243: (+1)
   \   000015D4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000015D6   0x2D00             CMP      R5,#+0
   \   000015D8   0xD00A             BEQ.N    ??RoadBrd_ParseString_246
   1733                                {
   1734                                  // Yes...Build and Send BLE Response NOW.
   1735                                  strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000015DA   0xF8DF 0x1A1C      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   000015DE   0xA80A             ADD      R0,SP,#+40
   \   000015E0   0x.... 0x....      BL       strcpy
   1736                                  BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000015E4   0xA80A             ADD      R0,SP,#+40
   \   000015E6   0x.... 0x....      BL       strlen
   \   000015EA   0xA90A             ADD      R1,SP,#+40
   \   000015EC   0x.... 0x....      BL       BGM111_Transmit
   1737                                }
   1738                                
   1739                                // This is the Parameter init. Will have to verify all parameters first.
   1740                                if ( Size != 29 )
   \                     ??RoadBrd_ParseString_246: (+1)
   \   000015F0   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000015F4   0xF1B8 0x0F1D      CMP      R8,#+29
   \   000015F8   0xD005             BEQ.N    ??RoadBrd_ParseString_247
   1741                                {
   1742                                  strcpy( (char *)tempBffr2, "RGB Color Light Sensor: SYNTAX Error. Parameters are not correct.\r\n");;
   \   000015FA   0xF8DF 0x1DC8      LDR.W    R1,??RoadBrd_ParseString_248
   \   000015FE   0xA80A             ADD      R0,SP,#+40
   \   00001600   0x.... 0x....      BL       strcpy
   \   00001604   0xE11A             B.N      ??RoadBrd_ParseString_245
   1743                                }
   1744                                else
   1745                                {
   1746                                  // Step 1. Validate format.
   1747                                  if( (tempBffr[2]!=':') ||
   1748                                      (tempBffr[5]!='.') || 
   1749                                      (tempBffr[8]!='.') || 
   1750                                      (tempBffr[11]!='.') || 
   1751                                      (tempBffr[14]!='.') || 
   1752                                      (tempBffr[17]!='.') || 
   1753                                      (tempBffr[20]!='.') || 
   1754                                      (tempBffr[23]!='.') || 
   1755                                      (tempBffr[26]!='.') )
   \                     ??RoadBrd_ParseString_247: (+1)
   \   00001606   0x78A0             LDRB     R0,[R4, #+2]
   \   00001608   0x283A             CMP      R0,#+58
   \   0000160A   0xD117             BNE.N    ??RoadBrd_ParseString_249
   \   0000160C   0x7960             LDRB     R0,[R4, #+5]
   \   0000160E   0x282E             CMP      R0,#+46
   \   00001610   0xD114             BNE.N    ??RoadBrd_ParseString_249
   \   00001612   0x7A20             LDRB     R0,[R4, #+8]
   \   00001614   0x282E             CMP      R0,#+46
   \   00001616   0xD111             BNE.N    ??RoadBrd_ParseString_249
   \   00001618   0x7AE0             LDRB     R0,[R4, #+11]
   \   0000161A   0x282E             CMP      R0,#+46
   \   0000161C   0xD10E             BNE.N    ??RoadBrd_ParseString_249
   \   0000161E   0x7BA0             LDRB     R0,[R4, #+14]
   \   00001620   0x282E             CMP      R0,#+46
   \   00001622   0xD10B             BNE.N    ??RoadBrd_ParseString_249
   \   00001624   0x7C60             LDRB     R0,[R4, #+17]
   \   00001626   0x282E             CMP      R0,#+46
   \   00001628   0xD108             BNE.N    ??RoadBrd_ParseString_249
   \   0000162A   0x7D20             LDRB     R0,[R4, #+20]
   \   0000162C   0x282E             CMP      R0,#+46
   \   0000162E   0xD105             BNE.N    ??RoadBrd_ParseString_249
   \   00001630   0x7DE0             LDRB     R0,[R4, #+23]
   \   00001632   0x282E             CMP      R0,#+46
   \   00001634   0xD102             BNE.N    ??RoadBrd_ParseString_249
   \   00001636   0x7EA0             LDRB     R0,[R4, #+26]
   \   00001638   0x282E             CMP      R0,#+46
   \   0000163A   0xD005             BEQ.N    ??RoadBrd_ParseString_250
   1756                                  {
   1757                                    strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: Not correct format. Punctuation!\r\n");
   \                     ??RoadBrd_ParseString_249: (+1)
   \   0000163C   0xF8DF 0x1E08      LDR.W    R1,??RoadBrd_ParseString_251
   \   00001640   0xA80A             ADD      R0,SP,#+40
   \   00001642   0x.... 0x....      BL       strcpy
   \   00001646   0xE0F9             B.N      ??RoadBrd_ParseString_245
   1758                                  }
   1759                                  else
   1760                                  {
   1761                                    // Syntax correct. Time to grab parameters.
   1762                                    Error = 0;
   \                     ??RoadBrd_ParseString_250: (+1)
   \   00001648   0x2000             MOVS     R0,#+0
   \   0000164A   0x9035             STR      R0,[SP, #+212]
   1763                                    for (x=0; x<9; x++)
   \   0000164C   0x2000             MOVS     R0,#+0
   \   0000164E   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_252: (+1)
   \   00001650   0x2F09             CMP      R7,#+9
   \   00001652   0xDA26             BGE.N    ??RoadBrd_ParseString_253
   1764                                    {
   1765                                      tempBffr3[0] = tempBffr[3+x*3];
   \   00001654   0x2003             MOVS     R0,#+3
   \   00001656   0xFB00 0xF007      MUL      R0,R0,R7
   \   0000165A   0x4420             ADD      R0,R4,R0
   \   0000165C   0xF990 0x0003      LDRSB    R0,[R0, #+3]
   \   00001660   0xF88D 0x00A8      STRB     R0,[SP, #+168]
   1766                                      tempBffr3[1] = tempBffr[4+x*3];
   \   00001664   0x2003             MOVS     R0,#+3
   \   00001666   0xFB00 0xF007      MUL      R0,R0,R7
   \   0000166A   0x4420             ADD      R0,R4,R0
   \   0000166C   0xF990 0x0004      LDRSB    R0,[R0, #+4]
   \   00001670   0xF88D 0x00A9      STRB     R0,[SP, #+169]
   1767                                      tempBffr3[2] = 0x00;
   \   00001674   0x2000             MOVS     R0,#+0
   \   00001676   0xF88D 0x00AA      STRB     R0,[SP, #+170]
   1768                                      if (isHexNum( (char *)tempBffr3 ) == 0)
   \   0000167A   0xA82A             ADD      R0,SP,#+168
   \   0000167C   0x.... 0x....      BL       isHexNum
   \   00001680   0x2800             CMP      R0,#+0
   \   00001682   0xD107             BNE.N    ??RoadBrd_ParseString_254
   1769                                      {
   1770                                        strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR:Parameters not HEX Value.\r\n");
   \   00001684   0xF8DF 0x1DC4      LDR.W    R1,??RoadBrd_ParseString_251+0x4
   \   00001688   0xA80A             ADD      R0,SP,#+40
   \   0000168A   0x.... 0x....      BL       strcpy
   1771                                        Error = 1;
   \   0000168E   0x2001             MOVS     R0,#+1
   \   00001690   0x9035             STR      R0,[SP, #+212]
   1772                                        break;
   \   00001692   0xE006             B.N      ??RoadBrd_ParseString_253
   1773                                      }
   1774                                      else
   1775                                      {
   1776                                        i2cData[x] =  hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_254: (+1)
   \   00001694   0xA82A             ADD      R0,SP,#+168
   \   00001696   0x.... 0x....      BL       hatoi
   \   0000169A   0xA999             ADD      R1,SP,#+612
   \   0000169C   0x55C8             STRB     R0,[R1, R7]
   1777                                      } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)
   1778                                    } //EndFor (x=0; x<num_bytes; x++)
   \   0000169E   0x1C7F             ADDS     R7,R7,#+1
   \   000016A0   0xE7D6             B.N      ??RoadBrd_ParseString_252
   1779                                    // Format and parameters now in i2cData array. Pull them out and validate them.
   1780                                    // OP_MODE Verify.
   1781                                    if(i2cData[0]>7)
   \                     ??RoadBrd_ParseString_253: (+1)
   \   000016A2   0xF89D 0x0264      LDRB     R0,[SP, #+612]
   \   000016A6   0x2808             CMP      R0,#+8
   \   000016A8   0xDB05             BLT.N    ??RoadBrd_ParseString_255
   1782                                    {
   1783                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: OP_MODE.\r\n");
   \   000016AA   0xF8DF 0x1DA4      LDR.W    R1,??RoadBrd_ParseString_251+0x8
   \   000016AE   0xA80A             ADD      R0,SP,#+40
   \   000016B0   0x.... 0x....      BL       strcpy
   1784                                      break;
   \   000016B4   0xE1BA             B.N      ??RoadBrd_ParseString_236
   1785                                    }
   1786                                    else
   1787                                      op_mode = (i2cData[0] & 0x07) * 1;
   \                     ??RoadBrd_ParseString_255: (+1)
   \   000016B6   0xF89D 0x0264      LDRB     R0,[SP, #+612]
   \   000016BA   0xF010 0x0007      ANDS     R0,R0,#0x7
   \   000016BE   0xF88D 0x00CD      STRB     R0,[SP, #+205]
   1788                                    // DS_RANGE Verify.
   1789                                    if(i2cData[1]>1)
   \   000016C2   0xF89D 0x0265      LDRB     R0,[SP, #+613]
   \   000016C6   0x2802             CMP      R0,#+2
   \   000016C8   0xDB08             BLT.N    ??RoadBrd_ParseString_256
   1790                                    {
   1791                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: DS_RANGE.\r\n");
   \   000016CA   0xF8DF 0x1E00      LDR.W    R1,??RoadBrd_ParseString_257
   \   000016CE   0xA80A             ADD      R0,SP,#+40
   \   000016D0   0x.... 0x....      BL       strcpy
   1792                                      break;
   \   000016D4   0xE1AA             B.N      ??RoadBrd_ParseString_236
   \   000016D6   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_106:
   \   000016D8   0x........         DC32     ?_46
   1793                                    }
   1794                                    else
   1795                                      ds_range = (i2cData[1] & 0x01) * 8;
   \                     ??RoadBrd_ParseString_256: (+1)
   \   000016DC   0xF89D 0x0265      LDRB     R0,[SP, #+613]
   \   000016E0   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   000016E4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000016E6   0x00C0             LSLS     R0,R0,#+3
   \   000016E8   0xF88D 0x00CC      STRB     R0,[SP, #+204]
   1796                                    // ADC_RSL Verify.
   1797                                    if(i2cData[2]>1)
   \   000016EC   0xF89D 0x0266      LDRB     R0,[SP, #+614]
   \   000016F0   0x2802             CMP      R0,#+2
   \   000016F2   0xDB05             BLT.N    ??RoadBrd_ParseString_258
   1798                                    {
   1799                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: ADC_RSL.\r\n");
   \   000016F4   0xF8DF 0x1DD8      LDR.W    R1,??RoadBrd_ParseString_257+0x4
   \   000016F8   0xA80A             ADD      R0,SP,#+40
   \   000016FA   0x.... 0x....      BL       strcpy
   1800                                      break;
   \   000016FE   0xE195             B.N      ??RoadBrd_ParseString_236
   1801                                    }
   1802                                    else
   1803                                      adc_rsl = (i2cData[2] & 0x01) * 16;
   \                     ??RoadBrd_ParseString_258: (+1)
   \   00001700   0xF89D 0x0266      LDRB     R0,[SP, #+614]
   \   00001704   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00001708   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000170A   0x0100             LSLS     R0,R0,#+4
   \   0000170C   0xF88D 0x00CB      STRB     R0,[SP, #+203]
   1804                                    // SYNC Verify.
   1805                                    if(i2cData[3]>1)
   \   00001710   0xF89D 0x0267      LDRB     R0,[SP, #+615]
   \   00001714   0x2802             CMP      R0,#+2
   \   00001716   0xDB07             BLT.N    ??RoadBrd_ParseString_259
   1806                                    {
   1807                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: SYNC.\r\n");
   \   00001718   0xF8DF 0x1DB8      LDR.W    R1,??RoadBrd_ParseString_257+0x8
   \   0000171C   0xA80A             ADD      R0,SP,#+40
   \   0000171E   0x.... 0x....      BL       strcpy
   1808                                      break;
   \   00001722   0xE183             B.N      ??RoadBrd_ParseString_236
   \                     ??RoadBrd_ParseString_109:
   \   00001724   0x........         DC32     ?_47
   1809                                    }
   1810                                    else
   1811                                      sync = (i2cData[3] & 0x01) * 32;
   \                     ??RoadBrd_ParseString_259: (+1)
   \   00001728   0xF89D 0x0267      LDRB     R0,[SP, #+615]
   \   0000172C   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00001730   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001732   0x0140             LSLS     R0,R0,#+5
   \   00001734   0xF88D 0x00CA      STRB     R0,[SP, #+202]
   1812                                    // CMP_ADJST Verify.
   1813                                    if(i2cData[4]>63)
   \   00001738   0xF89D 0x0268      LDRB     R0,[SP, #+616]
   \   0000173C   0x2840             CMP      R0,#+64
   \   0000173E   0xDB05             BLT.N    ??RoadBrd_ParseString_260
   1814                                    {
   1815                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: CMP_ADJST.\r\n");
   \   00001740   0xF8DF 0x1E0C      LDR.W    R1,??RoadBrd_ParseString_261
   \   00001744   0xA80A             ADD      R0,SP,#+40
   \   00001746   0x.... 0x....      BL       strcpy
   1816                                      break;
   \   0000174A   0xE16F             B.N      ??RoadBrd_ParseString_236
   1817                                    }
   1818                                    else
   1819                                      cmp_adjst = (i2cData[4] & 0x3f) * 1;
   \                     ??RoadBrd_ParseString_260: (+1)
   \   0000174C   0xF89D 0x0268      LDRB     R0,[SP, #+616]
   \   00001750   0xF010 0x003F      ANDS     R0,R0,#0x3F
   \   00001754   0xF88D 0x00C9      STRB     R0,[SP, #+201]
   1820                                    // CMP_OFFST Verify.
   1821                                    if(i2cData[5]>1)
   \   00001758   0xF89D 0x0269      LDRB     R0,[SP, #+617]
   \   0000175C   0x2802             CMP      R0,#+2
   \   0000175E   0xDB07             BLT.N    ??RoadBrd_ParseString_262
   1822                                    {
   1823                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: CMP_OFFST.\r\n");
   \   00001760   0xF8DF 0x1DF0      LDR.W    R1,??RoadBrd_ParseString_261+0x4
   \   00001764   0xA80A             ADD      R0,SP,#+40
   \   00001766   0x.... 0x....      BL       strcpy
   1824                                      break;
   \   0000176A   0xE15F             B.N      ??RoadBrd_ParseString_236
   \                     ??RoadBrd_ParseString_116:
   \   0000176C   0x........         DC32     ?_48
   1825                                    }
   1826                                    else
   1827                                      cmp_offst = (i2cData[5] & 0x01) * 128;
   \                     ??RoadBrd_ParseString_262: (+1)
   \   00001770   0xF89D 0x0269      LDRB     R0,[SP, #+617]
   \   00001774   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00001778   0x2180             MOVS     R1,#+128
   \   0000177A   0x4348             MULS     R0,R1,R0
   \   0000177C   0xF88D 0x00C8      STRB     R0,[SP, #+200]
   1828                                    // INT_ASSGN Verify.
   1829                                    if(i2cData[6]>3)
   \   00001780   0xF89D 0x026A      LDRB     R0,[SP, #+618]
   \   00001784   0x2804             CMP      R0,#+4
   \   00001786   0xDB05             BLT.N    ??RoadBrd_ParseString_263
   1830                                    {
   1831                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: INT_ASSGN.\r\n");
   \   00001788   0xF8DF 0x1DCC      LDR.W    R1,??RoadBrd_ParseString_261+0x8
   \   0000178C   0xA80A             ADD      R0,SP,#+40
   \   0000178E   0x.... 0x....      BL       strcpy
   1832                                      break;
   \   00001792   0xE14B             B.N      ??RoadBrd_ParseString_236
   1833                                    }
   1834                                    else
   1835                                      int_assgn = (i2cData[6] & 0x03) * 1;
   \                     ??RoadBrd_ParseString_263: (+1)
   \   00001794   0xF89D 0x026A      LDRB     R0,[SP, #+618]
   \   00001798   0xF010 0x0003      ANDS     R0,R0,#0x3
   \   0000179C   0xF88D 0x00B7      STRB     R0,[SP, #+183]
   1836                                    // INT_PERSIST Verify.
   1837                                    if(i2cData[7]>3)
   \   000017A0   0xF89D 0x026B      LDRB     R0,[SP, #+619]
   \   000017A4   0x2804             CMP      R0,#+4
   \   000017A6   0xDB05             BLT.N    ??RoadBrd_ParseString_264
   1838                                    {
   1839                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: INT_PERSIST.\r\n");
   \   000017A8   0xF8DF 0x1E28      LDR.W    R1,??RoadBrd_ParseString_265
   \   000017AC   0xA80A             ADD      R0,SP,#+40
   \   000017AE   0x.... 0x....      BL       strcpy
   1840                                      break;
   \   000017B2   0xE13B             B.N      ??RoadBrd_ParseString_236
   1841                                    }
   1842                                    else
   1843                                      int_persist = (i2cData[7] & 0x03) * 4;
   \                     ??RoadBrd_ParseString_264: (+1)
   \   000017B4   0xF89D 0x026B      LDRB     R0,[SP, #+619]
   \   000017B8   0xF010 0x0003      ANDS     R0,R0,#0x3
   \   000017BC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000017BE   0x0080             LSLS     R0,R0,#+2
   \   000017C0   0xF88D 0x00B6      STRB     R0,[SP, #+182]
   1844                                    // CNVRSN_INT Verify.
   1845                                    if(i2cData[8]>1)
   \   000017C4   0xF89D 0x026C      LDRB     R0,[SP, #+620]
   \   000017C8   0x2802             CMP      R0,#+2
   \   000017CA   0xDB05             BLT.N    ??RoadBrd_ParseString_266
   1846                                    {
   1847                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: CNVRSN_INT.\r\n");
   \   000017CC   0xF8DF 0x1E08      LDR.W    R1,??RoadBrd_ParseString_265+0x4
   \   000017D0   0xA80A             ADD      R0,SP,#+40
   \   000017D2   0x.... 0x....      BL       strcpy
   1848                                      break;
   \   000017D6   0xE129             B.N      ??RoadBrd_ParseString_236
   1849                                    }
   1850                                    else
   1851                                      cnvrsn_int = (i2cData[8] & 0x01) * 16;
   \                     ??RoadBrd_ParseString_266: (+1)
   \   000017D8   0xF89D 0x026C      LDRB     R0,[SP, #+620]
   \   000017DC   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   000017E0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000017E2   0x0100             LSLS     R0,R0,#+4
   \   000017E4   0xF88D 0x00B5      STRB     R0,[SP, #+181]
   1852                                    // OK, all parameters have been verified. Time to build final params.
   1853                                    RGBMeasure.config1 = op_mode + ds_range + adc_rsl + sync;
   \   000017E8   0xF89D 0x00CD      LDRB     R0,[SP, #+205]
   \   000017EC   0xF89D 0x10CC      LDRB     R1,[SP, #+204]
   \   000017F0   0x1808             ADDS     R0,R1,R0
   \   000017F2   0xF89D 0x10CB      LDRB     R1,[SP, #+203]
   \   000017F6   0x1808             ADDS     R0,R1,R0
   \   000017F8   0xF89D 0x10CA      LDRB     R1,[SP, #+202]
   \   000017FC   0x1808             ADDS     R0,R1,R0
   \   000017FE   0xF88D 0x00EC      STRB     R0,[SP, #+236]
   1854                                    RGBMeasure.config2 = cmp_adjst + cmp_offst;
   \   00001802   0xF89D 0x00C9      LDRB     R0,[SP, #+201]
   \   00001806   0xF89D 0x10C8      LDRB     R1,[SP, #+200]
   \   0000180A   0x1808             ADDS     R0,R1,R0
   \   0000180C   0xF88D 0x00ED      STRB     R0,[SP, #+237]
   1855                                    RGBMeasure.config3 = int_assgn + int_persist + cnvrsn_int;
   \   00001810   0xF89D 0x00B7      LDRB     R0,[SP, #+183]
   \   00001814   0xF89D 0x10B6      LDRB     R1,[SP, #+182]
   \   00001818   0x1808             ADDS     R0,R1,R0
   \   0000181A   0xF89D 0x10B5      LDRB     R1,[SP, #+181]
   \   0000181E   0x1808             ADDS     R0,R1,R0
   \   00001820   0xF88D 0x00EE      STRB     R0,[SP, #+238]
   1856                                    // Load Config Register with Config Settings
   1857                                    Status = RoadBrd_RGBFullInit( &RGBMeasure );
   \   00001824   0xA83B             ADD      R0,SP,#+236
   \   00001826   0x.... 0x....      BL       RoadBrd_RGBFullInit
   \   0000182A   0x0006             MOVS     R6,R0
   1858          
   1859                                    if (Status == HAL_OK)
   \   0000182C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000182E   0x2E00             CMP      R6,#+0
   \   00001830   0xD104             BNE.N    ??RoadBrd_ParseString_245
   1860                                    {
   1861                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor: Initialization Complete with USER Values.\r\n");;
   \   00001832   0xF8DF 0x1DA8      LDR.W    R1,??RoadBrd_ParseString_265+0x8
   \   00001836   0xA80A             ADD      R0,SP,#+40
   \   00001838   0x.... 0x....      BL       strcpy
   1862                                    }
   1863                                  } //ElseIf Validate format.
   1864                                } //ElseIf ( Size != 29 )
   1865                              } //ElseIf (Size == 2)
   1866                              break;
   \                     ??RoadBrd_ParseString_245: (+1)
   \   0000183C   0xE0F6             B.N      ??RoadBrd_ParseString_236
   1867          //------------------ H0 Command...Read RGB Values and Return as 3 (2 Byte Fields)....REDmsb,REDlsb,GREENmsb,GREENlsb,BLUEmsb,BLUElsb.....     
   1868                            case '0':
   1869                              // 1. Time to send Command and collect status.
   1870                              Status = RoadBrd_RGBReadValues( &RGBValues );
   \                     ??RoadBrd_ParseString_237: (+1)
   \   0000183E   0xA8B4             ADD      R0,SP,#+720
   \   00001840   0x.... 0x....      BL       RoadBrd_RGBReadValues
   \   00001844   0x0006             MOVS     R6,R0
   1871                              // Is this a BLE Operation?
   1872                              if ( BLE_Flag )
   \   00001846   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001848   0x2D00             CMP      R5,#+0
   \   0000184A   0xD00A             BEQ.N    ??RoadBrd_ParseString_267
   1873                              {
   1874                                // Yes...Build and Send BLE Response NOW.
   1875                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   0000184C   0xF8DF 0x17A8      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   00001850   0xA80A             ADD      R0,SP,#+40
   \   00001852   0x.... 0x....      BL       strcpy
   1876                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001856   0xA80A             ADD      R0,SP,#+40
   \   00001858   0x.... 0x....      BL       strlen
   \   0000185C   0xA90A             ADD      R1,SP,#+40
   \   0000185E   0x.... 0x....      BL       BGM111_Transmit
   1877                              }
   1878                              
   1879                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_267: (+1)
   \   00001862   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001864   0x2E00             CMP      R6,#+0
   \   00001866   0xD15A             BNE.N    ??RoadBrd_ParseString_268
   1880                              {
   1881                                // Send string to UART..
   1882                                strcpy( (char *)tempBffr2, "RGB Color Light Sensor...\r\n");
   \   00001868   0xF8DF 0x19F4      LDR.W    R1,??RoadBrd_ParseString_228
   \   0000186C   0xA80A             ADD      R0,SP,#+40
   \   0000186E   0x.... 0x....      BL       strcpy
   1883          #ifdef NUCLEO
   1884                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1885          #else
   1886                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00001872   0xA90A             ADD      R1,SP,#+40
   \   00001874   0x2000             MOVS     R0,#+0
   \   00001876   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000187A   0x0006             MOVS     R6,R0
   1887          #endif
   1888                                if (Status != HAL_OK)
   \   0000187C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000187E   0x2E00             CMP      R6,#+0
   \   00001880   0xD003             BEQ.N    ??RoadBrd_ParseString_269
   1889                                  return Status;
   \   00001882   0x0030             MOVS     R0,R6
   \   00001884   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001886   0xF003 0xB82B      B.W      ??RoadBrd_ParseString_4
   1890                                // NOW, Build Data String..
   1891                                sprintf( (char *)tempBffr2, " RGB(REDmsb,REDlsb,GREENmsb,GREENlsb,BLUEmsb,BLUElsb)\r\n" );
   \                     ??RoadBrd_ParseString_269: (+1)
   \   0000188A   0xF8DF 0x1A04      LDR.W    R1,??RoadBrd_ParseString_230
   \   0000188E   0xA80A             ADD      R0,SP,#+40
   \   00001890   0x.... 0x....      BL       sprintf
   1892          #ifdef NUCLEO
   1893                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1894          #else
   1895                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00001894   0xA90A             ADD      R1,SP,#+40
   \   00001896   0x2000             MOVS     R0,#+0
   \   00001898   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000189C   0x0006             MOVS     R6,R0
   1896          #endif
   1897                                if (Status != HAL_OK)
   \   0000189E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000018A0   0x2E00             CMP      R6,#+0
   \   000018A2   0xD003             BEQ.N    ??RoadBrd_ParseString_270
   1898                                  return Status;
   \   000018A4   0x0030             MOVS     R0,R6
   \   000018A6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000018A8   0xF003 0xB81A      B.W      ??RoadBrd_ParseString_4
   1899                                strcpy( (char *)tempBffr2, "       DATA: ");
   \                     ??RoadBrd_ParseString_270: (+1)
   \   000018AC   0xF8DF 0x19E4      LDR.W    R1,??RoadBrd_ParseString_230+0x4
   \   000018B0   0xA80A             ADD      R0,SP,#+40
   \   000018B2   0x.... 0x....      BL       strcpy
   1900                                strcat( (char *)tempBffr2, (char *)RGBValues.Raw );
   \   000018B6   0xA9BA             ADD      R1,SP,#+744
   \   000018B8   0xA80A             ADD      R0,SP,#+40
   \   000018BA   0x.... 0x....      BL       strcat
   1901                                strcat( (char *)tempBffr2, "\r\n" );
   \   000018BE   0xA1DA             ADR.N    R1,??RoadBrd_ParseString_171  ;; 0x0D, 0x0A, 0x00, 0x00
   \   000018C0   0xA80A             ADD      R0,SP,#+40
   \   000018C2   0x.... 0x....      BL       strcat
   1902          #ifdef NUCLEO
   1903                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1904          #else
   1905                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000018C6   0xA90A             ADD      R1,SP,#+40
   \   000018C8   0x2000             MOVS     R0,#+0
   \   000018CA   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000018CE   0x0006             MOVS     R6,R0
   1906          #endif
   1907                                if (Status != HAL_OK)
   \   000018D0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000018D2   0x2E00             CMP      R6,#+0
   \   000018D4   0xD003             BEQ.N    ??RoadBrd_ParseString_271
   1908                                  return Status;
   \   000018D6   0x0030             MOVS     R0,R6
   \   000018D8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000018DA   0xF003 0xB801      B.W      ??RoadBrd_ParseString_4
   1909                                // Now DisplayEach Value Calculated.
   1910                                strcpy( (char *)tempBffr2, "    Red: ");
   \                     ??RoadBrd_ParseString_271: (+1)
   \   000018DE   0xF8DF 0x1A08      LDR.W    R1,??RoadBrd_ParseString_234+0x4
   \   000018E2   0xA80A             ADD      R0,SP,#+40
   \   000018E4   0x.... 0x....      BL       strcpy
   1911                                strcat( (char *)tempBffr2, (char *)RGBValues.Red );
   \   000018E8   0xA9B4             ADD      R1,SP,#+720
   \   000018EA   0xA80A             ADD      R0,SP,#+40
   \   000018EC   0x.... 0x....      BL       strcat
   1912                                strcat( (char *)tempBffr2, "    Green: ");
   \   000018F0   0xF8DF 0x19F8      LDR.W    R1,??RoadBrd_ParseString_234+0x8
   \   000018F4   0xA80A             ADD      R0,SP,#+40
   \   000018F6   0x.... 0x....      BL       strcat
   1913                                strcat( (char *)tempBffr2, (char *)RGBValues.Green );
   \   000018FA   0xA9B6             ADD      R1,SP,#+728
   \   000018FC   0xA80A             ADD      R0,SP,#+40
   \   000018FE   0x.... 0x....      BL       strcat
   1914                                strcat( (char *)tempBffr2, "    Blue: ");
   \   00001902   0xF8DF 0x1A20      LDR.W    R1,??RoadBrd_ParseString_235
   \   00001906   0xA80A             ADD      R0,SP,#+40
   \   00001908   0x.... 0x....      BL       strcat
   1915                                strcat( (char *)tempBffr2, (char *)RGBValues.Blue );
   \   0000190C   0xA9B8             ADD      R1,SP,#+736
   \   0000190E   0xA80A             ADD      R0,SP,#+40
   \   00001910   0x.... 0x....      BL       strcat
   1916                                strcat( (char *)tempBffr2, "\r\n" );
   \   00001914   0xA1C4             ADR.N    R1,??RoadBrd_ParseString_171  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001916   0xA80A             ADD      R0,SP,#+40
   \   00001918   0x.... 0x....      BL       strcat
   1917                              }
   1918                              else
   1919                                break;
   1920                              break;
   \   0000191C   0xE086             B.N      ??RoadBrd_ParseString_236
   \                     ??RoadBrd_ParseString_268: (+1)
   \   0000191E   0xE085             B.N      ??RoadBrd_ParseString_236
   1921          //------------------ H1 Command...Read Status.....     
   1922                            case '1':
   1923                              // 1. Time to send Command and collect status.  RGBSMeasure
   1924                              Status = RoadBrd_RGBReadStatus( &RGBSMeasure );
   \                     ??RoadBrd_ParseString_238: (+1)
   \   00001920   0xA856             ADD      R0,SP,#+344
   \   00001922   0x.... 0x....      BL       RoadBrd_RGBReadStatus
   \   00001926   0x0006             MOVS     R6,R0
   1925          
   1926                              // Is this a BLE Operation?
   1927                              if ( BLE_Flag )
   \   00001928   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000192A   0x2D00             CMP      R5,#+0
   \   0000192C   0xD00A             BEQ.N    ??RoadBrd_ParseString_272
   1928                              {
   1929                                // Yes...Build and Send BLE Response NOW.
   1930                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   0000192E   0xF8DF 0x16C8      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   00001932   0xA80A             ADD      R0,SP,#+40
   \   00001934   0x.... 0x....      BL       strcpy
   1931                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001938   0xA80A             ADD      R0,SP,#+40
   \   0000193A   0x.... 0x....      BL       strlen
   \   0000193E   0xA90A             ADD      R1,SP,#+40
   \   00001940   0x.... 0x....      BL       BGM111_Transmit
   1932                              }
   1933                              
   1934                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_272: (+1)
   \   00001944   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001946   0x2E00             CMP      R6,#+0
   \   00001948   0xD119             BNE.N    ??RoadBrd_ParseString_273
   1935                              {
   1936                                // Build Status
   1937                                strcpy( (char *)tempBffr2, "RGB Color Light Sensor Status: ");
   \   0000194A   0xF8DF 0x1DF0      LDR.W    R1,??RoadBrd_ParseString_274
   \   0000194E   0xA80A             ADD      R0,SP,#+40
   \   00001950   0x.... 0x....      BL       strcpy
   1938                                sprintf( (char *)tempBffr3, "%02x / ", RGBSMeasure.status);
   \   00001954   0xF89D 0x2158      LDRB     R2,[SP, #+344]
   \   00001958   0xF8DF 0x1DE4      LDR.W    R1,??RoadBrd_ParseString_274+0x4
   \   0000195C   0xA82A             ADD      R0,SP,#+168
   \   0000195E   0x.... 0x....      BL       sprintf
   1939                                strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   00001962   0xA92A             ADD      R1,SP,#+168
   \   00001964   0xA80A             ADD      R0,SP,#+40
   \   00001966   0x.... 0x....      BL       strcat
   1940                                strcat( (char *)tempBffr2, (char *)RGBSMeasure.Raw );
   \   0000196A   0xA956             ADD      R1,SP,#+344
   \   0000196C   0x1C49             ADDS     R1,R1,#+1
   \   0000196E   0xA80A             ADD      R0,SP,#+40
   \   00001970   0x.... 0x....      BL       strcat
   1941                                strcat( (char *)tempBffr2, "\r\n" );
   \   00001974   0xA1AC             ADR.N    R1,??RoadBrd_ParseString_171  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001976   0xA80A             ADD      R0,SP,#+40
   \   00001978   0x.... 0x....      BL       strcat
   1942                              }
   1943                              else
   1944                                break;
   1945                              break;
   \   0000197C   0xE056             B.N      ??RoadBrd_ParseString_236
   \                     ??RoadBrd_ParseString_273: (+1)
   \   0000197E   0xE055             B.N      ??RoadBrd_ParseString_236
   1946          //------------------ H2 Command...Reset Hardware......     
   1947                            case '2':
   1948                              Status = RoadBrd_RGBReset();
   \                     ??RoadBrd_ParseString_239: (+1)
   \   00001980   0x.... 0x....      BL       RoadBrd_RGBReset
   \   00001984   0x0006             MOVS     R6,R0
   1949                              // Is this a BLE Operation?
   1950                              if ( BLE_Flag )
   \   00001986   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001988   0x2D00             CMP      R5,#+0
   \   0000198A   0xD00A             BEQ.N    ??RoadBrd_ParseString_275
   1951                              {
   1952                                // Yes...Build and Send BLE Response NOW.
   1953                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   0000198C   0xF8DF 0x1668      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   00001990   0xA80A             ADD      R0,SP,#+40
   \   00001992   0x.... 0x....      BL       strcpy
   1954                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001996   0xA80A             ADD      R0,SP,#+40
   \   00001998   0x.... 0x....      BL       strlen
   \   0000199C   0xA90A             ADD      R1,SP,#+40
   \   0000199E   0x.... 0x....      BL       BGM111_Transmit
   1955                              }
   1956                              
   1957                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_275: (+1)
   \   000019A2   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000019A4   0x2E00             CMP      R6,#+0
   \   000019A6   0xD107             BNE.N    ??RoadBrd_ParseString_276
   1958                              {
   1959                                // Build Status
   1960                                strcpy( (char *)tempBffr2, "RGB Color Light Sensor: RESET CMD Sent Succesful.\r\n" );
   \   000019A8   0xF8DF 0x1E0C      LDR.W    R1,??RoadBrd_ParseString_277
   \   000019AC   0xA80A             ADD      R0,SP,#+40
   \   000019AE   0x.... 0x....      BL       strcpy
   1961                              }
   1962                              else
   1963                                break;
   1964                              break;
   \   000019B2   0xE03B             B.N      ??RoadBrd_ParseString_236
   \                     ??RoadBrd_ParseString_138:
   \   000019B4   0x........         DC32     ?_49
   \                     ??RoadBrd_ParseString_276: (+1)
   \   000019B8   0xE038             B.N      ??RoadBrd_ParseString_236
   1965          //------------------ H3 Command...Read ID.....     
   1966                            case '3':
   1967                              // 1. Time to send Command and collect status.  IDMeasure
   1968                              Status = RoadBrd_RGBReadID( &IDMeasure );
   \                     ??RoadBrd_ParseString_240: (+1)
   \   000019BA   0xA858             ADD      R0,SP,#+352
   \   000019BC   0x.... 0x....      BL       RoadBrd_RGBReadID
   \   000019C0   0x0006             MOVS     R6,R0
   1969                              // Is this a BLE Operation?
   1970                              if ( BLE_Flag )
   \   000019C2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000019C4   0x2D00             CMP      R5,#+0
   \   000019C6   0xD00A             BEQ.N    ??RoadBrd_ParseString_278
   1971                              {
   1972                                // Yes...Build and Send BLE Response NOW.
   1973                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000019C8   0xF8DF 0x162C      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   000019CC   0xA80A             ADD      R0,SP,#+40
   \   000019CE   0x.... 0x....      BL       strcpy
   1974                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000019D2   0xA80A             ADD      R0,SP,#+40
   \   000019D4   0x.... 0x....      BL       strlen
   \   000019D8   0xA90A             ADD      R1,SP,#+40
   \   000019DA   0x.... 0x....      BL       BGM111_Transmit
   1975                              }
   1976                              
   1977                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_278: (+1)
   \   000019DE   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000019E0   0x2E00             CMP      R6,#+0
   \   000019E2   0xD11D             BNE.N    ??RoadBrd_ParseString_279
   1978                              {
   1979                                // Build Status
   1980                                strcpy( (char *)tempBffr2, "RGB Color Light Sensor ID Code: ");
   \   000019E4   0xF8DF 0x1DD4      LDR.W    R1,??RoadBrd_ParseString_277+0x4
   \   000019E8   0xA80A             ADD      R0,SP,#+40
   \   000019EA   0x.... 0x....      BL       strcpy
   1981                                sprintf( (char *)tempBffr3, "%02x / ", IDMeasure.id);
   \   000019EE   0xF89D 0x2160      LDRB     R2,[SP, #+352]
   \   000019F2   0xF8DF 0x1D4C      LDR.W    R1,??RoadBrd_ParseString_274+0x4
   \   000019F6   0xA82A             ADD      R0,SP,#+168
   \   000019F8   0x.... 0x....      BL       sprintf
   1982                                strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   000019FC   0xA92A             ADD      R1,SP,#+168
   \   000019FE   0xA80A             ADD      R0,SP,#+40
   \   00001A00   0x.... 0x....      BL       strcat
   1983                                strcat( (char *)tempBffr2, (char *)IDMeasure.Raw );
   \   00001A04   0xA958             ADD      R1,SP,#+352
   \   00001A06   0x1C49             ADDS     R1,R1,#+1
   \   00001A08   0xA80A             ADD      R0,SP,#+40
   \   00001A0A   0x.... 0x....      BL       strcat
   1984                                strcat( (char *)tempBffr2, "\r\n" );
   \   00001A0E   0xA186             ADR.N    R1,??RoadBrd_ParseString_171  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001A10   0xA80A             ADD      R0,SP,#+40
   \   00001A12   0x.... 0x....      BL       strcat
   1985                             }
   1986                              else
   1987                                break;
   1988                              break;
   \   00001A16   0xE009             B.N      ??RoadBrd_ParseString_236
   \                     ??RoadBrd_ParseString_142:
   \   00001A18   0x........         DC32     ?_50
   \   00001A1C   0x........         DC32     ?_51
   \                     ??RoadBrd_ParseString_279: (+1)
   \   00001A20   0xE004             B.N      ??RoadBrd_ParseString_236
   1989                            default:
   1990                              strcpy( (char *)tempBffr2, "ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_241: (+1)
   \   00001A22   0xF8DF 0x1E10      LDR.W    R1,??RoadBrd_ParseString_280
   \   00001A26   0xA80A             ADD      R0,SP,#+40
   \   00001A28   0x.... 0x....      BL       strcpy
   1991                              break;
   1992                          } //EndSwitch
   1993                        } //EndElse (Size == 1)
   1994                        break;    
   \                     ??RoadBrd_ParseString_236: (+1)
   \   00001A2C   0xF002 0xBEDE      B.W      ??RoadBrd_ParseString_26
   1995          //**************************************************************************************************
   1996                      case 'P':
   1997                        // POWER SYSTEM. 
   1998                        switch( tempBffr[1] )
   \                     ??RoadBrd_ParseString_20: (+1)
   \   00001A30   0x7860             LDRB     R0,[R4, #+1]
   \   00001A32   0x2844             CMP      R0,#+68
   \   00001A34   0xD018             BEQ.N    ??RoadBrd_ParseString_281
   \   00001A36   0x2855             CMP      R0,#+85
   \   00001A38   0xD11F             BNE.N    ??RoadBrd_ParseString_282
   1999                        {
   2000          //++++++++++++++++++++++++++++++++++++++++++  5V Power Supply Commands.
   2001                          case 'U':
   2002                            // Turn on 5V Power Supply.
   2003                            RoadBrd_gpio_On( gTAM_PWR );
   \                     ??RoadBrd_ParseString_283: (+1)
   \   00001A3A   0x2004             MOVS     R0,#+4
   \   00001A3C   0x.... 0x....      BL       RoadBrd_gpio_On
   2004                            // Is this a BLE Operation?
   2005                            if ( BLE_Flag )
   \   00001A40   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001A42   0x2D00             CMP      R5,#+0
   \   00001A44   0xD00A             BEQ.N    ??RoadBrd_ParseString_284
   2006                            {
   2007                              // Yes...Build and Send BLE Response NOW.
   2008                              strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001A46   0xF8DF 0x15B0      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   00001A4A   0xA80A             ADD      R0,SP,#+40
   \   00001A4C   0x.... 0x....      BL       strcpy
   2009                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001A50   0xA80A             ADD      R0,SP,#+40
   \   00001A52   0x.... 0x....      BL       strlen
   \   00001A56   0xA90A             ADD      R1,SP,#+40
   \   00001A58   0x.... 0x....      BL       BGM111_Transmit
   2010                            }
   2011                            
   2012                            strcpy( (char *)tempBffr2, "5V Power Plane Powered UP.\r\n");
   \                     ??RoadBrd_ParseString_284: (+1)
   \   00001A5C   0xF8DF 0x1DD8      LDR.W    R1,??RoadBrd_ParseString_280+0x4
   \   00001A60   0xA80A             ADD      R0,SP,#+40
   \   00001A62   0x.... 0x....      BL       strcpy
   2013                            break;
   \   00001A66   0xE00D             B.N      ??RoadBrd_ParseString_285
   2014                          case 'D':
   2015                            // Turn off 5V Power Supply.
   2016                            RoadBrd_gpio_Off( gTAM_PWR );
   \                     ??RoadBrd_ParseString_281: (+1)
   \   00001A68   0x2004             MOVS     R0,#+4
   \   00001A6A   0x.... 0x....      BL       RoadBrd_gpio_Off
   2017                            strcpy( (char *)tempBffr2, "5V Power Plane Powered DOWN.\r\n");
   \   00001A6E   0xF8DF 0x1DCC      LDR.W    R1,??RoadBrd_ParseString_280+0x8
   \   00001A72   0xA80A             ADD      R0,SP,#+40
   \   00001A74   0x.... 0x....      BL       strcpy
   2018                            break;
   \   00001A78   0xE004             B.N      ??RoadBrd_ParseString_285
   2019                          default:
   2020                            strcpy( (char *)tempBffr2, "ERROR: Illegal 5V Power Plane Command.\r\n");
   \                     ??RoadBrd_ParseString_282: (+1)
   \   00001A7A   0xF8DF 0x1DC4      LDR.W    R1,??RoadBrd_ParseString_280+0xC
   \   00001A7E   0xA80A             ADD      R0,SP,#+40
   \   00001A80   0x.... 0x....      BL       strcpy
   2021                            break;
   2022                        }
   2023                        break;
   \                     ??RoadBrd_ParseString_285: (+1)
   \   00001A84   0xF002 0xBEB2      B.W      ??RoadBrd_ParseString_26
   \                     ??RoadBrd_ParseString_147:
   \   00001A88   0x........         DC32     ?_52
   \   00001A8C   0x........         DC32     ?_53
   2024          //**************************************************************************************************
   2025                      case 'T':
   2026                        // TEST CMDS. 
   2027                        // Test Size to make sure we have enough Characters for this operation
   2028                        if (Size <= 1)
   \                     ??RoadBrd_ParseString_21: (+1)
   \   00001A90   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00001A94   0xF1B8 0x0F02      CMP      R8,#+2
   \   00001A98   0xDA16             BGE.N    ??RoadBrd_ParseString_286
   2029                        {
   2030                          // Is this a BLE Operation?
   2031                          if ( BLE_Flag )
   \   00001A9A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001A9C   0x2D00             CMP      R5,#+0
   \   00001A9E   0xD00A             BEQ.N    ??RoadBrd_ParseString_287
   2032                          {
   2033                            // Yes...Build and Send BLE Response NOW.
   2034                            strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001AA0   0xF8DF 0x1554      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   00001AA4   0xA80A             ADD      R0,SP,#+40
   \   00001AA6   0x.... 0x....      BL       strcpy
   2035                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001AAA   0xA80A             ADD      R0,SP,#+40
   \   00001AAC   0x.... 0x....      BL       strlen
   \   00001AB0   0xA90A             ADD      R1,SP,#+40
   \   00001AB2   0x.... 0x....      BL       BGM111_Transmit
   2036                          }
   2037                          
   2038                          strcpy( (char *)tempBffr2, "T ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_287: (+1)
   \   00001AB6   0xF8DF 0x1E00      LDR.W    R1,??RoadBrd_ParseString_288
   \   00001ABA   0xA80A             ADD      R0,SP,#+40
   \   00001ABC   0x.... 0x....      BL       strcpy
   \   00001AC0   0xF002 0xBE82      B.W      ??RoadBrd_ParseString_289
   \                     ??RoadBrd_ParseString_157:
   \   00001AC4   0x........         DC32     ?_54
   2039                        }
   2040                        else
   2041                        {
   2042                          switch( tempBffr[1] )
   \                     ??RoadBrd_ParseString_286: (+1)
   \   00001AC8   0x7860             LDRB     R0,[R4, #+1]
   \   00001ACA   0x2843             CMP      R0,#+67
   \   00001ACC   0xF000 0x82F2      BEQ.W    ??RoadBrd_ParseString_290
   \   00001AD0   0x2844             CMP      R0,#+68
   \   00001AD2   0xF002 0x821E      BEQ.W    ??RoadBrd_ParseString_291
   \   00001AD6   0x2846             CMP      R0,#+70
   \   00001AD8   0xF002 0x861A      BEQ.W    ??RoadBrd_ParseString_292
   \   00001ADC   0x2849             CMP      R0,#+73
   \   00001ADE   0xD010             BEQ.N    ??RoadBrd_ParseString_293
   \   00001AE0   0x284B             CMP      R0,#+75
   \   00001AE2   0xF002 0x8251      BEQ.W    ??RoadBrd_ParseString_294
   \   00001AE6   0x284C             CMP      R0,#+76
   \   00001AE8   0xF002 0x862A      BEQ.W    ??RoadBrd_ParseString_295
   \   00001AEC   0x284D             CMP      R0,#+77
   \   00001AEE   0xF002 0x85E5      BEQ.W    ??RoadBrd_ParseString_296
   \   00001AF2   0x2852             CMP      R0,#+82
   \   00001AF4   0xF002 0x822C      BEQ.W    ??RoadBrd_ParseString_297
   \   00001AF8   0x2855             CMP      R0,#+85
   \   00001AFA   0xF002 0x8577      BEQ.W    ??RoadBrd_ParseString_298
   \   00001AFE   0xF002 0xBE52      B.W      ??RoadBrd_ParseString_299
   2043                          {
   2044          //++++++++++++++++++++++++++++++++++++++++++  I2C Commands.
   2045                            case 'I':
   2046                              // I2C Commands.
   2047                              // Test Size to make sure we have enough Characters for this operation
   2048                              if (Size < 9)
   \                     ??RoadBrd_ParseString_293: (+1)
   \   00001B02   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00001B06   0xF1B8 0x0F09      CMP      R8,#+9
   \   00001B0A   0xDA13             BGE.N    ??RoadBrd_ParseString_300
   2049                              {
   2050                                // Is this a BLE Operation?
   2051                                if ( BLE_Flag )
   \   00001B0C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001B0E   0x2D00             CMP      R5,#+0
   \   00001B10   0xD00A             BEQ.N    ??RoadBrd_ParseString_301
   2052                                {
   2053                                  // Yes...Build and Send BLE Response NOW.
   2054                                  strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001B12   0xF8DF 0x14E4      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   00001B16   0xA80A             ADD      R0,SP,#+40
   \   00001B18   0x.... 0x....      BL       strcpy
   2055                                  BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001B1C   0xA80A             ADD      R0,SP,#+40
   \   00001B1E   0x.... 0x....      BL       strlen
   \   00001B22   0xA90A             ADD      R1,SP,#+40
   \   00001B24   0x.... 0x....      BL       BGM111_Transmit
   2056                                }
   2057                                
   2058                                strcpy( (char *)tempBffr2, "TI SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_301: (+1)
   \   00001B28   0xF8DF 0x1E04      LDR.W    R1,??RoadBrd_ParseString_302
   \   00001B2C   0xA80A             ADD      R0,SP,#+40
   \   00001B2E   0x.... 0x....      BL       strcpy
   \   00001B32   0xE2B4             B.N      ??RoadBrd_ParseString_303
   2059                              }
   2060                              else
   2061                              {
   2062                                switch( tempBffr[2] )
   \                     ??RoadBrd_ParseString_300: (+1)
   \   00001B34   0x78A0             LDRB     R0,[R4, #+2]
   \   00001B36   0x2851             CMP      R0,#+81
   \   00001B38   0xF000 0x8205      BEQ.W    ??RoadBrd_ParseString_304
   \   00001B3C   0xF0C0 0x82AA      BCC.W    ??RoadBrd_ParseString_305
   \   00001B40   0x2853             CMP      R0,#+83
   \   00001B42   0xD002             BEQ.N    ??RoadBrd_ParseString_306
   \   00001B44   0xF0C0 0x80D6      BCC.W    ??RoadBrd_ParseString_307
   \   00001B48   0xE2A4             B.N      ??RoadBrd_ParseString_305
   2063                                {
   2064          //------------------
   2065                                  case 'S':
   2066                                    //I2C Send Command.
   2067                                    // Step 1. Validate format.
   2068                                    if( (tempBffr[3]!=':') ||
   2069                                        (tempBffr[6]!='.') )
   \                     ??RoadBrd_ParseString_306: (+1)
   \   00001B4A   0x78E0             LDRB     R0,[R4, #+3]
   \   00001B4C   0x283A             CMP      R0,#+58
   \   00001B4E   0xD102             BNE.N    ??RoadBrd_ParseString_308
   \   00001B50   0x79A0             LDRB     R0,[R4, #+6]
   \   00001B52   0x282E             CMP      R0,#+46
   \   00001B54   0xD01C             BEQ.N    ??RoadBrd_ParseString_309
   2070                                    {
   2071                                      // Is this a BLE Operation?
   2072                                      if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_308: (+1)
   \   00001B56   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001B58   0x2D00             CMP      R5,#+0
   \   00001B5A   0xD00A             BEQ.N    ??RoadBrd_ParseString_310
   2073                                      {
   2074                                        // Yes...Build and Send BLE Response NOW.
   2075                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001B5C   0xF8DF 0x1498      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   00001B60   0xA80A             ADD      R0,SP,#+40
   \   00001B62   0x.... 0x....      BL       strcpy
   2076                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001B66   0xA80A             ADD      R0,SP,#+40
   \   00001B68   0x.... 0x....      BL       strlen
   \   00001B6C   0xA90A             ADD      R1,SP,#+40
   \   00001B6E   0x.... 0x....      BL       BGM111_Transmit
   2077                                      }
   2078                                     
   2079                                      strcpy( (char *)tempBffr2, "TIS SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_310: (+1)
   \   00001B72   0xF8DF 0x1E34      LDR.W    R1,??RoadBrd_ParseString_311
   \   00001B76   0xA80A             ADD      R0,SP,#+40
   \   00001B78   0x.... 0x....      BL       strcpy
   \   00001B7C   0xE0B9             B.N      ??RoadBrd_ParseString_312
   \   00001B7E   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_164:
   \   00001B80   0x........         DC32     ?_55
   \   00001B84   0x........         DC32     ?_56
   \   00001B88   0x........         DC32     ?_57
   \   00001B8C   0x........         DC32     ?_58
   2080                                    }
   2081                                    else
   2082                                    {
   2083                                      // Is this a BLE Operation?
   2084                                      if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_309: (+1)
   \   00001B90   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001B92   0x2D00             CMP      R5,#+0
   \   00001B94   0xD00A             BEQ.N    ??RoadBrd_ParseString_313
   2085                                      {
   2086                                        // Yes...Build and Send BLE Response NOW.
   2087                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001B96   0xF8DF 0x1460      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   00001B9A   0xA80A             ADD      R0,SP,#+40
   \   00001B9C   0x.... 0x....      BL       strcpy
   2088                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001BA0   0xA80A             ADD      R0,SP,#+40
   \   00001BA2   0x.... 0x....      BL       strlen
   \   00001BA6   0xA90A             ADD      R1,SP,#+40
   \   00001BA8   0x.... 0x....      BL       BGM111_Transmit
   2089                                      }
   2090                                      
   2091                                      // 2. Grab Address and validate a legal number
   2092                                      tempBffr3[0] = tempBffr[4];
   \                     ??RoadBrd_ParseString_313: (+1)
   \   00001BAC   0xF994 0x0004      LDRSB    R0,[R4, #+4]
   \   00001BB0   0xF88D 0x00A8      STRB     R0,[SP, #+168]
   2093                                      tempBffr3[1] = tempBffr[5];
   \   00001BB4   0xF994 0x0005      LDRSB    R0,[R4, #+5]
   \   00001BB8   0xF88D 0x00A9      STRB     R0,[SP, #+169]
   2094                                      tempBffr3[2] = 0x00;
   \   00001BBC   0x2000             MOVS     R0,#+0
   \   00001BBE   0xF88D 0x00AA      STRB     R0,[SP, #+170]
   2095                                      if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001BC2   0xA82A             ADD      R0,SP,#+168
   \   00001BC4   0x.... 0x....      BL       isHexNum
   \   00001BC8   0x2800             CMP      R0,#+0
   \   00001BCA   0xD105             BNE.N    ??RoadBrd_ParseString_314
   2096                                        strcpy( (char *)tempBffr2, "TIS SYNTAX ERROR: Address not HEX Value.\r\n");
   \   00001BCC   0xF8DF 0x1DDC      LDR.W    R1,??RoadBrd_ParseString_311+0x4
   \   00001BD0   0xA80A             ADD      R0,SP,#+40
   \   00001BD2   0x.... 0x....      BL       strcpy
   \   00001BD6   0xE08C             B.N      ??RoadBrd_ParseString_312
   2097                                      else
   2098                                      {
   2099                                        // Legal Address. Save it as value
   2100                                        Address = hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_314: (+1)
   \   00001BD8   0xA82A             ADD      R0,SP,#+168
   \   00001BDA   0x.... 0x....      BL       hatoi
   \   00001BDE   0x9031             STR      R0,[SP, #+196]
   2101                                        // 3. Now get the number of bytes of data from field.
   2102          //                              sprintf( (char *)tempBffr2, "TIS: Good Address: %x.\r\n", Address);
   2103                                        tempBffr3[0] = tempBffr[7];
   \   00001BE0   0xF994 0x0007      LDRSB    R0,[R4, #+7]
   \   00001BE4   0xF88D 0x00A8      STRB     R0,[SP, #+168]
   2104                                        tempBffr3[1] = tempBffr[8];
   \   00001BE8   0xF994 0x0008      LDRSB    R0,[R4, #+8]
   \   00001BEC   0xF88D 0x00A9      STRB     R0,[SP, #+169]
   2105                                        tempBffr3[2] = 0x00;
   \   00001BF0   0x2000             MOVS     R0,#+0
   \   00001BF2   0xF88D 0x00AA      STRB     R0,[SP, #+170]
   2106                                        if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001BF6   0xA82A             ADD      R0,SP,#+168
   \   00001BF8   0x.... 0x....      BL       isHexNum
   \   00001BFC   0x2800             CMP      R0,#+0
   \   00001BFE   0xD105             BNE.N    ??RoadBrd_ParseString_315
   2107                                          strcpy( (char *)tempBffr2, "TIS SYNTAX ERROR: Number of Bytes not HEX Value.\r\n");
   \   00001C00   0xF8DF 0x1DAC      LDR.W    R1,??RoadBrd_ParseString_311+0x8
   \   00001C04   0xA80A             ADD      R0,SP,#+40
   \   00001C06   0x.... 0x....      BL       strcpy
   \   00001C0A   0xE072             B.N      ??RoadBrd_ParseString_312
   2108                                        else
   2109                                        {
   2110                                          // Legal NUMBER BYTES. Save it as value
   2111                                          num_bytes = hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_315: (+1)
   \   00001C0C   0xA82A             ADD      R0,SP,#+168
   \   00001C0E   0x.... 0x....      BL       hatoi
   \   00001C12   0x9034             STR      R0,[SP, #+208]
   2112                                          // 4. Test num_bytes. If Zero, We are done
   2113                                          if (num_bytes == 0)
   \   00001C14   0x9834             LDR      R0,[SP, #+208]
   \   00001C16   0x2800             CMP      R0,#+0
   \   00001C18   0xD114             BNE.N    ??RoadBrd_ParseString_316
   2114                                          {
   2115                                            sprintf( (char *)tempBffr2, "TIS: GOOD CMD: %x.\r\n", Address);
   \   00001C1A   0x9A31             LDR      R2,[SP, #+196]
   \   00001C1C   0xF8DF 0x1D94      LDR.W    R1,??RoadBrd_ParseString_311+0xC
   \   00001C20   0xA80A             ADD      R0,SP,#+40
   \   00001C22   0x.... 0x....      BL       sprintf
   \   00001C26   0xE03B             B.N      ??RoadBrd_ParseString_317
   \                     ??RoadBrd_ParseString_171:
   \   00001C28   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
   \   00001C2C   0x........         DC32     ?_59
   \   00001C30   0x........         DC32     ?_60
   \   00001C34   0x........         DC32     ?_61
   \   00001C38   0x........         DC32     ?_62
   \   00001C3C   0x........         DC32     ?_63
   \   00001C40   0x........         DC32     ?_64
   2116                                          }
   2117                                          else
   2118                                          {
   2119                                            // 5. Time to get all the data.
   2120                                            Error = 0;
   \                     ??RoadBrd_ParseString_316: (+1)
   \   00001C44   0x2000             MOVS     R0,#+0
   \   00001C46   0x9035             STR      R0,[SP, #+212]
   2121                                            for (x=0; x<num_bytes; x++)
   \   00001C48   0x2000             MOVS     R0,#+0
   \   00001C4A   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_318: (+1)
   \   00001C4C   0x9834             LDR      R0,[SP, #+208]
   \   00001C4E   0x4287             CMP      R7,R0
   \   00001C50   0xDA26             BGE.N    ??RoadBrd_ParseString_317
   2122                                            {
   2123                                              tempBffr3[0] = tempBffr[10+x*3];
   \   00001C52   0x2003             MOVS     R0,#+3
   \   00001C54   0xFB00 0xF007      MUL      R0,R0,R7
   \   00001C58   0x4420             ADD      R0,R4,R0
   \   00001C5A   0xF990 0x000A      LDRSB    R0,[R0, #+10]
   \   00001C5E   0xF88D 0x00A8      STRB     R0,[SP, #+168]
   2124                                              tempBffr3[1] = tempBffr[11+x*3];
   \   00001C62   0x2003             MOVS     R0,#+3
   \   00001C64   0xFB00 0xF007      MUL      R0,R0,R7
   \   00001C68   0x4420             ADD      R0,R4,R0
   \   00001C6A   0xF990 0x000B      LDRSB    R0,[R0, #+11]
   \   00001C6E   0xF88D 0x00A9      STRB     R0,[SP, #+169]
   2125                                              tempBffr3[2] = 0x00;
   \   00001C72   0x2000             MOVS     R0,#+0
   \   00001C74   0xF88D 0x00AA      STRB     R0,[SP, #+170]
   2126                                              if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001C78   0xA82A             ADD      R0,SP,#+168
   \   00001C7A   0x.... 0x....      BL       isHexNum
   \   00001C7E   0x2800             CMP      R0,#+0
   \   00001C80   0xD107             BNE.N    ??RoadBrd_ParseString_319
   2127                                              {
   2128                                                strcpy( (char *)tempBffr2, "TIS SYNTAX ERROR: Address not HEX Value.\r\n");
   \   00001C82   0xF8DF 0x1D28      LDR.W    R1,??RoadBrd_ParseString_311+0x4
   \   00001C86   0xA80A             ADD      R0,SP,#+40
   \   00001C88   0x.... 0x....      BL       strcpy
   2129                                                Error = 1;
   \   00001C8C   0x2001             MOVS     R0,#+1
   \   00001C8E   0x9035             STR      R0,[SP, #+212]
   2130                                                break;
   \   00001C90   0xE006             B.N      ??RoadBrd_ParseString_317
   2131                                              }
   2132                                              else
   2133                                              {
   2134                                                i2cData[x] =  hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_319: (+1)
   \   00001C92   0xA82A             ADD      R0,SP,#+168
   \   00001C94   0x.... 0x....      BL       hatoi
   \   00001C98   0xA999             ADD      R1,SP,#+612
   \   00001C9A   0x55C8             STRB     R0,[R1, R7]
   2135                                              } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)
   2136                                            } //EndFor (x=0; x<num_bytes; x++)
   \   00001C9C   0x1C7F             ADDS     R7,R7,#+1
   \   00001C9E   0xE7D5             B.N      ??RoadBrd_ParseString_318
   2137                                          } //EndElse (num_bytes == 0)
   2138                                          if (Error==0)
   \                     ??RoadBrd_ParseString_317: (+1)
   \   00001CA0   0x9835             LDR      R0,[SP, #+212]
   \   00001CA2   0x2800             CMP      R0,#+0
   \   00001CA4   0xD105             BNE.N    ??RoadBrd_ParseString_320
   2139                                          {
   2140                                            sprintf( (char *)tempBffr2, "TIS: GOOD CMD: %x.", Address);
   \   00001CA6   0x9A31             LDR      R2,[SP, #+196]
   \   00001CA8   0xF8DF 0x1DF0      LDR.W    R1,??RoadBrd_ParseString_321
   \   00001CAC   0xA80A             ADD      R0,SP,#+40
   \   00001CAE   0x.... 0x....      BL       sprintf
   2141                                          }
   2142                                          for(x=0; x<num_bytes; x++)
   \                     ??RoadBrd_ParseString_320: (+1)
   \   00001CB2   0x2000             MOVS     R0,#+0
   \   00001CB4   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_322: (+1)
   \   00001CB6   0x9834             LDR      R0,[SP, #+208]
   \   00001CB8   0x4287             CMP      R7,R0
   \   00001CBA   0xDA0B             BGE.N    ??RoadBrd_ParseString_323
   2143                                          {
   2144                                            sprintf( (char *)tempBffr3, "%x.", i2cData[x]);
   \   00001CBC   0xA899             ADD      R0,SP,#+612
   \   00001CBE   0x5DC2             LDRB     R2,[R0, R7]
   \   00001CC0   0xA1CE             ADR.N    R1,??RoadBrd_ParseString_207+0x8  ;; "%x."
   \   00001CC2   0xA82A             ADD      R0,SP,#+168
   \   00001CC4   0x.... 0x....      BL       sprintf
   2145                                            strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   00001CC8   0xA92A             ADD      R1,SP,#+168
   \   00001CCA   0xA80A             ADD      R0,SP,#+40
   \   00001CCC   0x.... 0x....      BL       strcat
   2146                                          }
   \   00001CD0   0x1C7F             ADDS     R7,R7,#+1
   \   00001CD2   0xE7F0             B.N      ??RoadBrd_ParseString_322
   2147                                          strcat( (char *)tempBffr2, "\r\n" );
   \                     ??RoadBrd_ParseString_323: (+1)
   \   00001CD4   0xA1CA             ADR.N    R1,??RoadBrd_ParseString_207+0xC  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001CD6   0xA80A             ADD      R0,SP,#+40
   \   00001CD8   0x.... 0x....      BL       strcat
   2148                                          // 6. Time to send Command and collect status.
   2149                                          Status =  RoadBrd_I2C_Master_Transmit((uint16_t)Address, i2cData, (uint16_t)num_bytes, I2C_TIMEOUT);
   \   00001CDC   0xF44F 0x73FA      MOV      R3,#+500
   \   00001CE0   0x9834             LDR      R0,[SP, #+208]
   \   00001CE2   0x0002             MOVS     R2,R0
   \   00001CE4   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00001CE6   0xA999             ADD      R1,SP,#+612
   \   00001CE8   0x9831             LDR      R0,[SP, #+196]
   \   00001CEA   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00001CEC   0x.... 0x....      BL       RoadBrd_I2C_Master_Transmit
   \   00001CF0   0x0006             MOVS     R6,R0
   2150                                          
   2151                                        } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)...NUMBER BYTES
   2152                                        
   2153                                      } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)...Address
   2154                                      
   2155                                    } //EndElse ( (tempBffr[2]!=':') || (tempBffr[5]!='.') )
   2156                                
   2157                                    break;
   \                     ??RoadBrd_ParseString_312: (+1)
   \   00001CF2   0xE1D4             B.N      ??RoadBrd_ParseString_303
   2158          //------------------
   2159                                  case 'R':
   2160                                    //I2C Receive Command
   2161                                    // Step 1. Validate format.
   2162                                    if( (tempBffr[3]!=':') ||
   2163                                        (tempBffr[6]!='.') ||
   2164                                        (tempBffr[9]!='.')  )
   \                     ??RoadBrd_ParseString_307: (+1)
   \   00001CF4   0x78E0             LDRB     R0,[R4, #+3]
   \   00001CF6   0x283A             CMP      R0,#+58
   \   00001CF8   0xD105             BNE.N    ??RoadBrd_ParseString_324
   \   00001CFA   0x79A0             LDRB     R0,[R4, #+6]
   \   00001CFC   0x282E             CMP      R0,#+46
   \   00001CFE   0xD102             BNE.N    ??RoadBrd_ParseString_324
   \   00001D00   0x7A60             LDRB     R0,[R4, #+9]
   \   00001D02   0x282E             CMP      R0,#+46
   \   00001D04   0xD012             BEQ.N    ??RoadBrd_ParseString_325
   2165                                    {
   2166                                      // Is this a BLE Operation?
   2167                                      if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_324: (+1)
   \   00001D06   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001D08   0x2D00             CMP      R5,#+0
   \   00001D0A   0xD009             BEQ.N    ??RoadBrd_ParseString_326
   2168                                      {
   2169                                        // Yes...Build and Send BLE Response NOW.
   2170                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001D0C   0x49BA             LDR.N    R1,??RoadBrd_ParseString_207+0x4
   \   00001D0E   0xA80A             ADD      R0,SP,#+40
   \   00001D10   0x.... 0x....      BL       strcpy
   2171                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001D14   0xA80A             ADD      R0,SP,#+40
   \   00001D16   0x.... 0x....      BL       strlen
   \   00001D1A   0xA90A             ADD      R1,SP,#+40
   \   00001D1C   0x.... 0x....      BL       BGM111_Transmit
   2172                                      }
   2173                                      
   2174                                      strcpy( (char *)tempBffr2, "TIR SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_326: (+1)
   \   00001D20   0xF8DF 0x1DF0      LDR.W    R1,??RoadBrd_ParseString_327
   \   00001D24   0xA80A             ADD      R0,SP,#+40
   \   00001D26   0x.... 0x....      BL       strcpy
   \   00001D2A   0xE10B             B.N      ??RoadBrd_ParseString_328
   2175                                    }
   2176                                    else
   2177                                    {
   2178                                      // Is this a BLE Operation?
   2179                                      if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_325: (+1)
   \   00001D2C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001D2E   0x2D00             CMP      R5,#+0
   \   00001D30   0xD009             BEQ.N    ??RoadBrd_ParseString_329
   2180                                      {
   2181                                        // Yes...Build and Send BLE Response NOW.
   2182                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001D32   0x49B1             LDR.N    R1,??RoadBrd_ParseString_207+0x4
   \   00001D34   0xA80A             ADD      R0,SP,#+40
   \   00001D36   0x.... 0x....      BL       strcpy
   2183                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001D3A   0xA80A             ADD      R0,SP,#+40
   \   00001D3C   0x.... 0x....      BL       strlen
   \   00001D40   0xA90A             ADD      R1,SP,#+40
   \   00001D42   0x.... 0x....      BL       BGM111_Transmit
   2184                                      }
   2185                                      
   2186                                      // 2. Grab Address and validate a legal number
   2187                                      tempBffr3[0] = tempBffr[4];
   \                     ??RoadBrd_ParseString_329: (+1)
   \   00001D46   0xF994 0x0004      LDRSB    R0,[R4, #+4]
   \   00001D4A   0xF88D 0x00A8      STRB     R0,[SP, #+168]
   2188                                      tempBffr3[1] = tempBffr[5];
   \   00001D4E   0xF994 0x0005      LDRSB    R0,[R4, #+5]
   \   00001D52   0xF88D 0x00A9      STRB     R0,[SP, #+169]
   2189                                      tempBffr3[2] = 0x00;
   \   00001D56   0x2000             MOVS     R0,#+0
   \   00001D58   0xF88D 0x00AA      STRB     R0,[SP, #+170]
   2190                                      if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001D5C   0xA82A             ADD      R0,SP,#+168
   \   00001D5E   0x.... 0x....      BL       isHexNum
   \   00001D62   0x2800             CMP      R0,#+0
   \   00001D64   0xD105             BNE.N    ??RoadBrd_ParseString_330
   2191                                        strcpy( (char *)tempBffr2, "TIR SYNTAX ERROR: Address not HEX Value.\r\n");
   \   00001D66   0xF8DF 0x1E24      LDR.W    R1,??RoadBrd_ParseString_331
   \   00001D6A   0xA80A             ADD      R0,SP,#+40
   \   00001D6C   0x.... 0x....      BL       strcpy
   \   00001D70   0xE0E8             B.N      ??RoadBrd_ParseString_328
   2192                                      else
   2193                                      {
   2194                                        // Legal Address. Save it as value
   2195                                        Address = hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_330: (+1)
   \   00001D72   0xA82A             ADD      R0,SP,#+168
   \   00001D74   0x.... 0x....      BL       hatoi
   \   00001D78   0x9031             STR      R0,[SP, #+196]
   2196                                        // 3. Now get the number of bytes of data from field.
   2197                                        tempBffr3[0] = tempBffr[7];
   \   00001D7A   0xF994 0x0007      LDRSB    R0,[R4, #+7]
   \   00001D7E   0xF88D 0x00A8      STRB     R0,[SP, #+168]
   2198                                        tempBffr3[1] = tempBffr[8];
   \   00001D82   0xF994 0x0008      LDRSB    R0,[R4, #+8]
   \   00001D86   0xF88D 0x00A9      STRB     R0,[SP, #+169]
   2199                                        tempBffr3[2] = 0x00;
   \   00001D8A   0x2000             MOVS     R0,#+0
   \   00001D8C   0xF88D 0x00AA      STRB     R0,[SP, #+170]
   2200                                        if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001D90   0xA82A             ADD      R0,SP,#+168
   \   00001D92   0x.... 0x....      BL       isHexNum
   \   00001D96   0x2800             CMP      R0,#+0
   \   00001D98   0xD105             BNE.N    ??RoadBrd_ParseString_332
   2201                                          strcpy( (char *)tempBffr2, "TIR SYNTAX ERROR: Number of Bytes not HEX Value.\r\n");
   \   00001D9A   0xF8DF 0x1DF4      LDR.W    R1,??RoadBrd_ParseString_331+0x4
   \   00001D9E   0xA80A             ADD      R0,SP,#+40
   \   00001DA0   0x.... 0x....      BL       strcpy
   \   00001DA4   0xE0CE             B.N      ??RoadBrd_ParseString_328
   2202                                        else
   2203                                        {
   2204                                          // Legal NUMBER BYTES. Save it as value
   2205                                          num_bytes = hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_332: (+1)
   \   00001DA6   0xA82A             ADD      R0,SP,#+168
   \   00001DA8   0x.... 0x....      BL       hatoi
   \   00001DAC   0x9034             STR      R0,[SP, #+208]
   2206                                          
   2207                                          // 3a. Now get the number of bytes Received of data from field.
   2208                                          tempBffr3[0] = tempBffr[10];
   \   00001DAE   0xF994 0x000A      LDRSB    R0,[R4, #+10]
   \   00001DB2   0xF88D 0x00A8      STRB     R0,[SP, #+168]
   2209                                          tempBffr3[1] = tempBffr[11];
   \   00001DB6   0xF994 0x000B      LDRSB    R0,[R4, #+11]
   \   00001DBA   0xF88D 0x00A9      STRB     R0,[SP, #+169]
   2210                                          tempBffr3[2] = 0x00;
   \   00001DBE   0x2000             MOVS     R0,#+0
   \   00001DC0   0xF88D 0x00AA      STRB     R0,[SP, #+170]
   2211                                          if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001DC4   0xA82A             ADD      R0,SP,#+168
   \   00001DC6   0x.... 0x....      BL       isHexNum
   \   00001DCA   0x2800             CMP      R0,#+0
   \   00001DCC   0xD10A             BNE.N    ??RoadBrd_ParseString_333
   2212                                            strcpy( (char *)tempBffr2, "TIR SYNTAX ERROR: Number of Bytes RECEIVED not HEX Value.\r\n");
   \   00001DCE   0xF8DF 0x1E38      LDR.W    R1,??RoadBrd_ParseString_334
   \   00001DD2   0xA80A             ADD      R0,SP,#+40
   \   00001DD4   0x.... 0x....      BL       strcpy
   \   00001DD8   0xE0B4             B.N      ??RoadBrd_ParseString_328
   \   00001DDA   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_185:
   \   00001DDC   0x........         DC32     ?_65
   \   00001DE0   0x........         DC32     ?_66
   2213                                          else
   2214                                          {
   2215                                            // Legal NUMBER BYTES. Save it as value
   2216                                            num_bytes_received = hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_333: (+1)
   \   00001DE4   0xA82A             ADD      R0,SP,#+168
   \   00001DE6   0x.... 0x....      BL       hatoi
   \   00001DEA   0x9039             STR      R0,[SP, #+228]
   2217                                            // 4. Test num_bytes. If Zero, We are done
   2218                                            if (num_bytes == 0)
   \   00001DEC   0x9834             LDR      R0,[SP, #+208]
   \   00001DEE   0x2800             CMP      R0,#+0
   \   00001DF0   0xD106             BNE.N    ??RoadBrd_ParseString_335
   2219                                            {
   2220                                              sprintf( (char *)tempBffr2, "TIR: GOOD CMD: %x.\r\n", Address);
   \   00001DF2   0x9A31             LDR      R2,[SP, #+196]
   \   00001DF4   0xF8DF 0x1E14      LDR.W    R1,??RoadBrd_ParseString_334+0x4
   \   00001DF8   0xA80A             ADD      R0,SP,#+40
   \   00001DFA   0x.... 0x....      BL       sprintf
   \   00001DFE   0xE038             B.N      ??RoadBrd_ParseString_336
   2221                                            }
   2222                                            else
   2223                                            {
   2224                                              // 5. Time to get all the data.
   2225                                              Error = 0;
   \                     ??RoadBrd_ParseString_335: (+1)
   \   00001E00   0x2000             MOVS     R0,#+0
   \   00001E02   0x9035             STR      R0,[SP, #+212]
   2226                                              for (x=0; x<num_bytes; x++)
   \   00001E04   0x2000             MOVS     R0,#+0
   \   00001E06   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_337: (+1)
   \   00001E08   0x9834             LDR      R0,[SP, #+208]
   \   00001E0A   0x4287             CMP      R7,R0
   \   00001E0C   0xDA31             BGE.N    ??RoadBrd_ParseString_336
   2227                                              {
   2228                                                tempBffr3[0] = tempBffr[13+x*3];
   \   00001E0E   0x2003             MOVS     R0,#+3
   \   00001E10   0xFB00 0xF007      MUL      R0,R0,R7
   \   00001E14   0x4420             ADD      R0,R4,R0
   \   00001E16   0xF990 0x000D      LDRSB    R0,[R0, #+13]
   \   00001E1A   0xF88D 0x00A8      STRB     R0,[SP, #+168]
   2229                                                tempBffr3[1] = tempBffr[14+x*3];
   \   00001E1E   0x2003             MOVS     R0,#+3
   \   00001E20   0xFB00 0xF007      MUL      R0,R0,R7
   \   00001E24   0x4420             ADD      R0,R4,R0
   \   00001E26   0xF990 0x000E      LDRSB    R0,[R0, #+14]
   \   00001E2A   0xF88D 0x00A9      STRB     R0,[SP, #+169]
   2230                                                tempBffr3[2] = 0x00;
   \   00001E2E   0x2000             MOVS     R0,#+0
   \   00001E30   0xF88D 0x00AA      STRB     R0,[SP, #+170]
   2231                                                if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001E34   0xA82A             ADD      R0,SP,#+168
   \   00001E36   0x.... 0x....      BL       isHexNum
   \   00001E3A   0x2800             CMP      R0,#+0
   \   00001E3C   0xD112             BNE.N    ??RoadBrd_ParseString_338
   2232                                                {
   2233                                                  strcpy( (char *)tempBffr2, "TIR SYNTAX ERROR: Data not HEX Value.\r\n");
   \   00001E3E   0xF8DF 0x1DD0      LDR.W    R1,??RoadBrd_ParseString_334+0x8
   \   00001E42   0xA80A             ADD      R0,SP,#+40
   \   00001E44   0x.... 0x....      BL       strcpy
   2234                                                  Error = 1;
   \   00001E48   0x2001             MOVS     R0,#+1
   \   00001E4A   0x9035             STR      R0,[SP, #+212]
   2235                                                  break;
   \   00001E4C   0xE011             B.N      ??RoadBrd_ParseString_336
   \   00001E4E   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_190:
   \   00001E50   0x........         DC32     ?_67
   \   00001E54   0x........         DC32     ?_68
   \   00001E58   0x........         DC32     ?_69
   \   00001E5C   0x........         DC32     ?_70
   \   00001E60   0x........         DC32     ?_71
   2236                                                }
   2237                                                else
   2238                                                {
   2239                                                  i2cData[x] =  hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_338: (+1)
   \   00001E64   0xA82A             ADD      R0,SP,#+168
   \   00001E66   0x.... 0x....      BL       hatoi
   \   00001E6A   0xA999             ADD      R1,SP,#+612
   \   00001E6C   0x55C8             STRB     R0,[R1, R7]
   2240                                                } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)
   2241                                              } //EndFor (x=0; x<num_bytes; x++)
   \   00001E6E   0x1C7F             ADDS     R7,R7,#+1
   \   00001E70   0xE7CA             B.N      ??RoadBrd_ParseString_337
   2242                                            } //EndElse (num_bytes == 0)
   2243                                            if (Error==0)
   \                     ??RoadBrd_ParseString_336: (+1)
   \   00001E72   0x9835             LDR      R0,[SP, #+212]
   \   00001E74   0x2800             CMP      R0,#+0
   \   00001E76   0xD105             BNE.N    ??RoadBrd_ParseString_339
   2244                                            {
   2245                                              sprintf( (char *)tempBffr2, "TIR: GOOD CMD: %x.", Address);
   \   00001E78   0x9A31             LDR      R2,[SP, #+196]
   \   00001E7A   0xF8DF 0x1E0C      LDR.W    R1,??RoadBrd_ParseString_340
   \   00001E7E   0xA80A             ADD      R0,SP,#+40
   \   00001E80   0x.... 0x....      BL       sprintf
   2246                                            }
   2247                                            for(x=0; x<num_bytes; x++)
   \                     ??RoadBrd_ParseString_339: (+1)
   \   00001E84   0x2000             MOVS     R0,#+0
   \   00001E86   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_341: (+1)
   \   00001E88   0x9834             LDR      R0,[SP, #+208]
   \   00001E8A   0x4287             CMP      R7,R0
   \   00001E8C   0xDA0B             BGE.N    ??RoadBrd_ParseString_342
   2248                                            {
   2249                                              sprintf( (char *)tempBffr3, "%x.", i2cData[x]);
   \   00001E8E   0xA899             ADD      R0,SP,#+612
   \   00001E90   0x5DC2             LDRB     R2,[R0, R7]
   \   00001E92   0xA15A             ADR.N    R1,??RoadBrd_ParseString_207+0x8  ;; "%x."
   \   00001E94   0xA82A             ADD      R0,SP,#+168
   \   00001E96   0x.... 0x....      BL       sprintf
   2250                                              strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   00001E9A   0xA92A             ADD      R1,SP,#+168
   \   00001E9C   0xA80A             ADD      R0,SP,#+40
   \   00001E9E   0x.... 0x....      BL       strcat
   2251                                            }
   \   00001EA2   0x1C7F             ADDS     R7,R7,#+1
   \   00001EA4   0xE7F0             B.N      ??RoadBrd_ParseString_341
   2252                                            strcat( (char *)tempBffr2, "\r\n" );
   \                     ??RoadBrd_ParseString_342: (+1)
   \   00001EA6   0xA156             ADR.N    R1,??RoadBrd_ParseString_207+0xC  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001EA8   0xA80A             ADD      R0,SP,#+40
   \   00001EAA   0x.... 0x....      BL       strcat
   2253                                            // 6. Time to send Command and collect status.
   2254                                            Status =  RoadBrd_I2C_Master_Transmit((uint16_t)Address, i2cData, (uint16_t)num_bytes, I2C_TIMEOUT);
   \   00001EAE   0xF44F 0x73FA      MOV      R3,#+500
   \   00001EB2   0x9834             LDR      R0,[SP, #+208]
   \   00001EB4   0x0002             MOVS     R2,R0
   \   00001EB6   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00001EB8   0xA999             ADD      R1,SP,#+612
   \   00001EBA   0x9831             LDR      R0,[SP, #+196]
   \   00001EBC   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00001EBE   0x.... 0x....      BL       RoadBrd_I2C_Master_Transmit
   \   00001EC2   0x0006             MOVS     R6,R0
   2255                                            // 6a. Wait for Command to complete(100ms).
   2256           
   2257                                            // 7. If Status was good, Time to get response.
   2258                                            if (Status == HAL_OK)
   \   00001EC4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001EC6   0x2E00             CMP      R6,#+0
   \   00001EC8   0xD10E             BNE.N    ??RoadBrd_ParseString_343
   2259                                            {
   2260                                              Status =  RoadBrd_I2C_Master_Receive((uint16_t)Address, i2cData, (uint16_t)num_bytes_received, I2C_TIMEOUT);
   \   00001ECA   0xF44F 0x73FA      MOV      R3,#+500
   \   00001ECE   0x9839             LDR      R0,[SP, #+228]
   \   00001ED0   0x0002             MOVS     R2,R0
   \   00001ED2   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00001ED4   0xA999             ADD      R1,SP,#+612
   \   00001ED6   0x9831             LDR      R0,[SP, #+196]
   \   00001ED8   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00001EDA   0x.... 0x....      BL       RoadBrd_I2C_Master_Receive
   \   00001EDE   0x0006             MOVS     R6,R0
   2261                                            }
   2262                                            else
   2263                                              break;
   2264                                            // 7a. Wait for Command to complete(100ms).
   2265                                            if (Status == HAL_OK)
   \   00001EE0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001EE2   0x2E00             CMP      R6,#+0
   \   00001EE4   0xD105             BNE.N    ??RoadBrd_ParseString_344
   \   00001EE6   0xE000             B.N      ??RoadBrd_ParseString_345
   \                     ??RoadBrd_ParseString_343: (+1)
   \   00001EE8   0xE0D9             B.N      ??RoadBrd_ParseString_303
   2266                                            {
   2267                                              Status = RoadBrd_WaitForState( 20 );
   \                     ??RoadBrd_ParseString_345: (+1)
   \   00001EEA   0x2014             MOVS     R0,#+20
   \   00001EEC   0x.... 0x....      BL       RoadBrd_WaitForState
   \   00001EF0   0x0006             MOVS     R6,R0
   2268                                            }
   2269          
   2270                                            // 8. IfGood report, Need to Output Data.
   2271                                            if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_344: (+1)
   \   00001EF2   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001EF4   0x2E00             CMP      R6,#+0
   \   00001EF6   0xD125             BNE.N    ??RoadBrd_ParseString_328
   2272                                            {
   2273                                              // Send string to UART..
   2274          #ifdef NUCLEO
   2275                                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   2276          #else
   2277                                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00001EF8   0xA90A             ADD      R1,SP,#+40
   \   00001EFA   0x2000             MOVS     R0,#+0
   \   00001EFC   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001F00   0x0006             MOVS     R6,R0
   2278          #endif
   2279                                              if (Status != HAL_OK)
   \   00001F02   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001F04   0x2E00             CMP      R6,#+0
   \   00001F06   0xD003             BEQ.N    ??RoadBrd_ParseString_346
   2280                                                return Status;
   \   00001F08   0x0030             MOVS     R0,R6
   \   00001F0A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001F0C   0xF002 0xBCE8      B.W      ??RoadBrd_ParseString_4
   2281                                              // NOW, Build Data String..
   2282                                              sprintf( (char *)tempBffr2, "     DATA: " );
   \                     ??RoadBrd_ParseString_346: (+1)
   \   00001F10   0xF8DF 0x1DEC      LDR.W    R1,??RoadBrd_ParseString_347
   \   00001F14   0xA80A             ADD      R0,SP,#+40
   \   00001F16   0x.... 0x....      BL       sprintf
   2283                                              for(x=0; x<num_bytes_received; x++)
   \   00001F1A   0x2000             MOVS     R0,#+0
   \   00001F1C   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_348: (+1)
   \   00001F1E   0x9839             LDR      R0,[SP, #+228]
   \   00001F20   0x4287             CMP      R7,R0
   \   00001F22   0xDA0B             BGE.N    ??RoadBrd_ParseString_349
   2284                                              {
   2285                                                sprintf( (char *)tempBffr3, "%x.", i2cData[x]);
   \   00001F24   0xA899             ADD      R0,SP,#+612
   \   00001F26   0x5DC2             LDRB     R2,[R0, R7]
   \   00001F28   0xA134             ADR.N    R1,??RoadBrd_ParseString_207+0x8  ;; "%x."
   \   00001F2A   0xA82A             ADD      R0,SP,#+168
   \   00001F2C   0x.... 0x....      BL       sprintf
   2286                                                strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   00001F30   0xA92A             ADD      R1,SP,#+168
   \   00001F32   0xA80A             ADD      R0,SP,#+40
   \   00001F34   0x.... 0x....      BL       strcat
   2287                                              }
   \   00001F38   0x1C7F             ADDS     R7,R7,#+1
   \   00001F3A   0xE7F0             B.N      ??RoadBrd_ParseString_348
   2288                                              strcat( (char *)tempBffr2, "\r\n" );
   \                     ??RoadBrd_ParseString_349: (+1)
   \   00001F3C   0xA130             ADR.N    R1,??RoadBrd_ParseString_207+0xC  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001F3E   0xA80A             ADD      R0,SP,#+40
   \   00001F40   0x.... 0x....      BL       strcat
   2289                                            }
   2290                                          }
   2291                                        } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)...NUMBER BYTES
   2292                                        
   2293                                      } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)...Address
   2294                                      
   2295                                    } //EndElse ( (tempBffr[2]!=':') || (tempBffr[5]!='.') )
   2296                                
   2297                                    break;
   \                     ??RoadBrd_ParseString_328: (+1)
   \   00001F44   0xE0AB             B.N      ??RoadBrd_ParseString_303
   2298          //------------------
   2299                                  case 'Q':
   2300                                    //I2C Receive Command
   2301                                    // Step 1. Validate format.
   2302                                    if( (tempBffr[3]!=':') ||
   2303                                        (tempBffr[6]!='.')  )
   \                     ??RoadBrd_ParseString_304: (+1)
   \   00001F46   0x78E0             LDRB     R0,[R4, #+3]
   \   00001F48   0x283A             CMP      R0,#+58
   \   00001F4A   0xD102             BNE.N    ??RoadBrd_ParseString_350
   \   00001F4C   0x79A0             LDRB     R0,[R4, #+6]
   \   00001F4E   0x282E             CMP      R0,#+46
   \   00001F50   0xD012             BEQ.N    ??RoadBrd_ParseString_351
   2304                                    {
   2305                                      // Is this a BLE Operation?
   2306                                      if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_350: (+1)
   \   00001F52   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001F54   0x2D00             CMP      R5,#+0
   \   00001F56   0xD009             BEQ.N    ??RoadBrd_ParseString_352
   2307                                      {
   2308                                        // Yes...Build and Send BLE Response NOW.
   2309                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001F58   0x4927             LDR.N    R1,??RoadBrd_ParseString_207+0x4
   \   00001F5A   0xA80A             ADD      R0,SP,#+40
   \   00001F5C   0x.... 0x....      BL       strcpy
   2310                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001F60   0xA80A             ADD      R0,SP,#+40
   \   00001F62   0x.... 0x....      BL       strlen
   \   00001F66   0xA90A             ADD      R1,SP,#+40
   \   00001F68   0x.... 0x....      BL       BGM111_Transmit
   2311                                      }
   2312                                      
   2313                                      strcpy( (char *)tempBffr2, "TIQ SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_352: (+1)
   \   00001F6C   0xF8DF 0x1E08      LDR.W    R1,??RoadBrd_ParseString_353
   \   00001F70   0xA80A             ADD      R0,SP,#+40
   \   00001F72   0x.... 0x....      BL       strcpy
   \   00001F76   0xE08C             B.N      ??RoadBrd_ParseString_354
   2314                                    }
   2315                                    else
   2316                                    {
   2317                                      // Is this a BLE Operation?
   2318                                      if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_351: (+1)
   \   00001F78   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001F7A   0x2D00             CMP      R5,#+0
   \   00001F7C   0xD009             BEQ.N    ??RoadBrd_ParseString_355
   2319                                      {
   2320                                        // Yes...Build and Send BLE Response NOW.
   2321                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001F7E   0x491E             LDR.N    R1,??RoadBrd_ParseString_207+0x4
   \   00001F80   0xA80A             ADD      R0,SP,#+40
   \   00001F82   0x.... 0x....      BL       strcpy
   2322                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001F86   0xA80A             ADD      R0,SP,#+40
   \   00001F88   0x.... 0x....      BL       strlen
   \   00001F8C   0xA90A             ADD      R1,SP,#+40
   \   00001F8E   0x.... 0x....      BL       BGM111_Transmit
   2323                                      }
   2324                                      
   2325                                      // 2. Grab Address and validate a legal number
   2326                                      tempBffr3[0] = tempBffr[4];
   \                     ??RoadBrd_ParseString_355: (+1)
   \   00001F92   0xF994 0x0004      LDRSB    R0,[R4, #+4]
   \   00001F96   0xF88D 0x00A8      STRB     R0,[SP, #+168]
   2327                                      tempBffr3[1] = tempBffr[5];
   \   00001F9A   0xF994 0x0005      LDRSB    R0,[R4, #+5]
   \   00001F9E   0xF88D 0x00A9      STRB     R0,[SP, #+169]
   2328                                      tempBffr3[2] = 0x00;
   \   00001FA2   0x2000             MOVS     R0,#+0
   \   00001FA4   0xF88D 0x00AA      STRB     R0,[SP, #+170]
   2329                                      if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001FA8   0xA82A             ADD      R0,SP,#+168
   \   00001FAA   0x.... 0x....      BL       isHexNum
   \   00001FAE   0x2800             CMP      R0,#+0
   \   00001FB0   0xD105             BNE.N    ??RoadBrd_ParseString_356
   2330                                        strcpy( (char *)tempBffr2, "TIQ SYNTAX ERROR: Address not HEX Value.\r\n");
   \   00001FB2   0xF8DF 0x1DC8      LDR.W    R1,??RoadBrd_ParseString_353+0x4
   \   00001FB6   0xA80A             ADD      R0,SP,#+40
   \   00001FB8   0x.... 0x....      BL       strcpy
   \   00001FBC   0xE069             B.N      ??RoadBrd_ParseString_354
   2331                                      else
   2332                                      {
   2333                                        // Legal Address. Save it as value
   2334                                        Address = hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_356: (+1)
   \   00001FBE   0xA82A             ADD      R0,SP,#+168
   \   00001FC0   0x.... 0x....      BL       hatoi
   \   00001FC4   0x9031             STR      R0,[SP, #+196]
   2335                                        // 3. Now get the number of bytes Received of data from field.
   2336                                        tempBffr3[0] = tempBffr[7];
   \   00001FC6   0xF994 0x0007      LDRSB    R0,[R4, #+7]
   \   00001FCA   0xF88D 0x00A8      STRB     R0,[SP, #+168]
   2337                                        tempBffr3[1] = tempBffr[8];
   \   00001FCE   0xF994 0x0008      LDRSB    R0,[R4, #+8]
   \   00001FD2   0xF88D 0x00A9      STRB     R0,[SP, #+169]
   2338                                        tempBffr3[2] = 0x00;
   \   00001FD6   0x2000             MOVS     R0,#+0
   \   00001FD8   0xF88D 0x00AA      STRB     R0,[SP, #+170]
   2339                                        if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001FDC   0xA82A             ADD      R0,SP,#+168
   \   00001FDE   0x.... 0x....      BL       isHexNum
   \   00001FE2   0x2800             CMP      R0,#+0
   \   00001FE4   0xD10E             BNE.N    ??RoadBrd_ParseString_357
   2340                                          strcpy( (char *)tempBffr2, "TIQ SYNTAX ERROR: Number of Bytes not HEX Value.\r\n");
   \   00001FE6   0xF8DF 0x1E34      LDR.W    R1,??RoadBrd_ParseString_358
   \   00001FEA   0xA80A             ADD      R0,SP,#+40
   \   00001FEC   0x.... 0x....      BL       strcpy
   \   00001FF0   0xE04F             B.N      ??RoadBrd_ParseString_354
   \   00001FF2   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_207:
   \   00001FF4   0x........         DC32     ?_72
   \   00001FF8   0x........         DC32     ?_24
   \   00001FFC   0x25 0x78          DC8      "%x."
   \              0x2E 0x00    
   \   00002000   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
   2341                                        else
   2342                                        {
   2343                                            // Legal NUMBER BYTES. Save it as value
   2344                                            num_bytes_received = hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_357: (+1)
   \   00002004   0xA82A             ADD      R0,SP,#+168
   \   00002006   0x.... 0x....      BL       hatoi
   \   0000200A   0x9039             STR      R0,[SP, #+228]
   2345                                            // 4. Test num_bytes. If Zero, We are done
   2346                                            sprintf( (char *)tempBffr2, "TIR: GOOD CMD: %x.\r\n", Address);
   \   0000200C   0x9A31             LDR      R2,[SP, #+196]
   \   0000200E   0xF8DF 0x1BFC      LDR.W    R1,??RoadBrd_ParseString_334+0x4
   \   00002012   0xA80A             ADD      R0,SP,#+40
   \   00002014   0x.... 0x....      BL       sprintf
   2347                                            // 7. If Status was good, Time to get response.
   2348                                            Status =  RoadBrd_I2C_Master_Receive((uint16_t)Address, i2cData, (uint16_t)num_bytes_received, I2C_TIMEOUT);
   \   00002018   0xF44F 0x73FA      MOV      R3,#+500
   \   0000201C   0x9839             LDR      R0,[SP, #+228]
   \   0000201E   0x0002             MOVS     R2,R0
   \   00002020   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00002022   0xA999             ADD      R1,SP,#+612
   \   00002024   0x9831             LDR      R0,[SP, #+196]
   \   00002026   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00002028   0x.... 0x....      BL       RoadBrd_I2C_Master_Receive
   \   0000202C   0x0006             MOVS     R6,R0
   2349                                            // 7a. Wait for Command to complete(100ms).
   2350                                            if (Status == HAL_OK)
   \   0000202E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002030   0x2E00             CMP      R6,#+0
   \   00002032   0xD107             BNE.N    ??RoadBrd_ParseString_359
   2351                                            {
   2352                                              Status = RoadBrd_WaitForState( 20 );
   \   00002034   0x2014             MOVS     R0,#+20
   \   00002036   0x.... 0x....      BL       RoadBrd_WaitForState
   \   0000203A   0x0006             MOVS     R6,R0
   2353                                            }
   2354                                            else
   2355                                              break;
   2356                                            // 8. IfGood report, Need to Output Data.
   2357                                            if (Status == HAL_OK)
   \   0000203C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000203E   0x2E00             CMP      R6,#+0
   \   00002040   0xD127             BNE.N    ??RoadBrd_ParseString_354
   \   00002042   0xE000             B.N      ??RoadBrd_ParseString_360
   \                     ??RoadBrd_ParseString_359: (+1)
   \   00002044   0xE02B             B.N      ??RoadBrd_ParseString_303
   2358                                            {
   2359                                              // Send string to UART..
   2360          #ifdef NUCLEO
   2361                                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   2362          #else
   2363                                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \                     ??RoadBrd_ParseString_360: (+1)
   \   00002046   0xA90A             ADD      R1,SP,#+40
   \   00002048   0x2000             MOVS     R0,#+0
   \   0000204A   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000204E   0x0006             MOVS     R6,R0
   2364          #endif
   2365                                              if (Status != HAL_OK)
   \   00002050   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002052   0x2E00             CMP      R6,#+0
   \   00002054   0xD003             BEQ.N    ??RoadBrd_ParseString_361
   2366                                                return Status;
   \   00002056   0x0030             MOVS     R0,R6
   \   00002058   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000205A   0xF002 0xBC41      B.W      ??RoadBrd_ParseString_4
   2367                                              // NOW, Build Data String..
   2368                                              sprintf( (char *)tempBffr2, "     DATA: " );
   \                     ??RoadBrd_ParseString_361: (+1)
   \   0000205E   0xF8DF 0x1CA0      LDR.W    R1,??RoadBrd_ParseString_347
   \   00002062   0xA80A             ADD      R0,SP,#+40
   \   00002064   0x.... 0x....      BL       sprintf
   2369                                              for(x=0; x<num_bytes_received; x++)
   \   00002068   0x2000             MOVS     R0,#+0
   \   0000206A   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_362: (+1)
   \   0000206C   0x9839             LDR      R0,[SP, #+228]
   \   0000206E   0x4287             CMP      R7,R0
   \   00002070   0xDA0B             BGE.N    ??RoadBrd_ParseString_363
   2370                                              {
   2371                                                sprintf( (char *)tempBffr3, "%x.", i2cData[x]);
   \   00002072   0xA899             ADD      R0,SP,#+612
   \   00002074   0x5DC2             LDRB     R2,[R0, R7]
   \   00002076   0xA1D4             ADR.N    R1,??RoadBrd_ParseString_248+0x4  ;; "%x."
   \   00002078   0xA82A             ADD      R0,SP,#+168
   \   0000207A   0x.... 0x....      BL       sprintf
   2372                                                strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   0000207E   0xA92A             ADD      R1,SP,#+168
   \   00002080   0xA80A             ADD      R0,SP,#+40
   \   00002082   0x.... 0x....      BL       strcat
   2373                                              }
   \   00002086   0x1C7F             ADDS     R7,R7,#+1
   \   00002088   0xE7F0             B.N      ??RoadBrd_ParseString_362
   2374                                              strcat( (char *)tempBffr2, "\r\n" );
   \                     ??RoadBrd_ParseString_363: (+1)
   \   0000208A   0xA1D0             ADR.N    R1,??RoadBrd_ParseString_248+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   0000208C   0xA80A             ADD      R0,SP,#+40
   \   0000208E   0x.... 0x....      BL       strcat
   2375                                          }
   2376                                        } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)...NUMBER BYTES
   2377                                        
   2378                                      } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)...Address
   2379                                      
   2380                                    } //EndElse ( (tempBffr[2]!=':') || (tempBffr[5]!='.') )
   2381                                
   2382                                    break;
   \                     ??RoadBrd_ParseString_354: (+1)
   \   00002092   0xE004             B.N      ??RoadBrd_ParseString_303
   2383                                  default:
   2384                                    strcpy( (char *)tempBffr2, "ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_305: (+1)
   \   00002094   0xF8DF 0x179C      LDR.W    R1,??RoadBrd_ParseString_280
   \   00002098   0xA80A             ADD      R0,SP,#+40
   \   0000209A   0x.... 0x....      BL       strcpy
   2385                                    break;
   2386                                } //EndSwitch ( tempBffr[2] )
   2387                              } //EndElse (Size < 9)
   2388                              break;
   \                     ??RoadBrd_ParseString_303: (+1)
   \   0000209E   0xF002 0xBB93      B.W      ??RoadBrd_ParseString_289
   \   000020A2   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_215:
   \   000020A4   0x........         DC32     ?_73
   \   000020A8   0x........         DC32     ?_74
   \   000020AC   0x........         DC32     ?_75
   \   000020B0   0x........         DC32     ?_35
   2389          //++++++++++++++++++++++++++++++++++++++++++  Calibration Commands.
   2390                            case 'C':
   2391                              Status = HAL_OK;
   \                     ??RoadBrd_ParseString_290: (+1)
   \   000020B4   0x2000             MOVS     R0,#+0
   \   000020B6   0x0006             MOVS     R6,R0
   2392                              if (Size == 2)
   \   000020B8   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000020BC   0xF1B8 0x0F02      CMP      R8,#+2
   \   000020C0   0xF040 0x80EA      BNE.W    ??RoadBrd_ParseString_364
   2393                              {
   2394                                //------------------ TC Command: Dump Calibration Settings.      
   2395                                // Read Cool Eye/Grid Eye Values.....
   2396                                if ( Get_DriverStates( GRIDEYE_MNTR_TASK ))
   \   000020C4   0x2005             MOVS     R0,#+5
   \   000020C6   0x.... 0x....      BL       Get_DriverStates
   \   000020CA   0x2800             CMP      R0,#+0
   \   000020CC   0xD004             BEQ.N    ??RoadBrd_ParseString_365
   2397                                {
   2398                                  Status = RoadBrd_GridEye_ReadValues_Scaled( &GridMeasure );
   \   000020CE   0xA85A             ADD      R0,SP,#+360
   \   000020D0   0x.... 0x....      BL       RoadBrd_GridEye_ReadValues_Scaled
   \   000020D4   0x0006             MOVS     R6,R0
   \   000020D6   0xE00B             B.N      ??RoadBrd_ParseString_366
   2399                                }
   2400                                else if ( Get_DriverStates( COOLEYE_MNTR_TASK ))
   \                     ??RoadBrd_ParseString_365: (+1)
   \   000020D8   0x2006             MOVS     R0,#+6
   \   000020DA   0x.... 0x....      BL       Get_DriverStates
   \   000020DE   0x2800             CMP      R0,#+0
   \   000020E0   0xD004             BEQ.N    ??RoadBrd_ParseString_367
   2401                                {
   2402                                  Status = RoadBrd_CoolEye_ReadValues_Scaled( &GridMeasure );
   \   000020E2   0xA85A             ADD      R0,SP,#+360
   \   000020E4   0x.... 0x....      BL       RoadBrd_CoolEye_ReadValues_Scaled
   \   000020E8   0x0006             MOVS     R6,R0
   \   000020EA   0xE001             B.N      ??RoadBrd_ParseString_366
   2403                                }
   2404                                else
   2405                                  Status = HAL_ERROR;
   \                     ??RoadBrd_ParseString_367: (+1)
   \   000020EC   0x2001             MOVS     R0,#+1
   \   000020EE   0x0006             MOVS     R6,R0
   2406                                
   2407                                // Is this a BLE Operation?
   2408                                if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_366: (+1)
   \   000020F0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000020F2   0x2E00             CMP      R6,#+0
   \   000020F4   0xF040 0x80B6      BNE.W    ??RoadBrd_ParseString_368
   2409                                {
   2410                                  // OK Next Sensor.
   2411                                  // Read Temperature sensor and return results....Temperature Sensor U10(PCT2075GVJ).  Addr: 0x94
   2412                                  Status = RoadBrd_ReadTemp_Scaled( &TMeasure );
   \   000020F8   0xA83C             ADD      R0,SP,#+240
   \   000020FA   0x.... 0x....      BL       RoadBrd_ReadTemp_Scaled
   \   000020FE   0x0006             MOVS     R6,R0
   2413                                  if (Status == HAL_OK)
   \   00002100   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002102   0x2E00             CMP      R6,#+0
   \   00002104   0xF040 0x8096      BNE.W    ??RoadBrd_ParseString_369
   2414                                  {
   2415                                    // OK Next Sensor.
   2416                                    // Read Humidity Sensor sensor and return Humidity results....
   2417                                    Status = RoadBrd_Humidity_ReadHumidity_Scaled( &HMeasure );
   \   00002108   0xA848             ADD      R0,SP,#+288
   \   0000210A   0x.... 0x....      BL       RoadBrd_Humidity_ReadHumidity_Scaled
   \   0000210E   0x0006             MOVS     R6,R0
   2418                                    if (Status == HAL_OK)
   \   00002110   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002112   0x2E00             CMP      R6,#+0
   \   00002114   0xD175             BNE.N    ??RoadBrd_ParseString_370
   2419                                    {
   2420                                      // OK Next Sensor.
   2421                                      //Status = RoadBrd_Barometer_Status( &PRMeasure );
   2422                                      Status = RoadBrd_Baro_ReadPressure_Scaled( &PRPMeasure );
   \   00002116   0xA8AD             ADD      R0,SP,#+692
   \   00002118   0x.... 0x....      BL       RoadBrd_Baro_ReadPressure_Scaled
   \   0000211C   0x0006             MOVS     R6,R0
   2423                                      if (Status == HAL_OK)
   \   0000211E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002120   0x2E00             CMP      R6,#+0
   \   00002122   0xD159             BNE.N    ??RoadBrd_ParseString_371
   2424                                      {
   2425                                        if ( BLE_Flag )
   \   00002124   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002126   0x2D00             CMP      R5,#+0
   \   00002128   0xD025             BEQ.N    ??RoadBrd_ParseString_372
   2426                                        {
   2427                                          // Yes...Build and Send BLE Response NOW.
   2428                                          sprintf( (char *)tempBffr2, "<STATUS>%s//%s//%s//%s//%s//%s//%s//%s//%s//%s//%s//%s</STATUS>", (char *)GridMeasure.GridEye1.TempC,
   2429                                                  (char *)GridMeasure.GridEye2.TempC,
   2430                                                  (char *)GridMeasure.GridEye3.TempC,
   2431                                                  (char *)GridMeasure.GridEye4.TempC,
   2432                                                  (char *)GridMeasure.GridEye5.TempC,
   2433                                                  (char *)GridMeasure.GridEye6.TempC,
   2434                                                  (char *)GridMeasure.GridEye7.TempC,
   2435                                                  (char *)GridMeasure.GridEye8.TempC,
   2436                                                  (char *)GridMeasure.Thermistor.TempC,
   2437                                                  (char *)TMeasure.TempC,
   2438                                                  (char *)HMeasure.Humidity,
   2439                                                  (char *)PRPMeasure.Pressure);
   \   0000212A   0xA8AD             ADD      R0,SP,#+692
   \   0000212C   0x9009             STR      R0,[SP, #+36]
   \   0000212E   0xA848             ADD      R0,SP,#+288
   \   00002130   0x9008             STR      R0,[SP, #+32]
   \   00002132   0xA83C             ADD      R0,SP,#+240
   \   00002134   0x9007             STR      R0,[SP, #+28]
   \   00002136   0xA85A             ADD      R0,SP,#+360
   \   00002138   0x9006             STR      R0,[SP, #+24]
   \   0000213A   0xA88A             ADD      R0,SP,#+552
   \   0000213C   0x9005             STR      R0,[SP, #+20]
   \   0000213E   0xA884             ADD      R0,SP,#+528
   \   00002140   0x9004             STR      R0,[SP, #+16]
   \   00002142   0xA87E             ADD      R0,SP,#+504
   \   00002144   0x9003             STR      R0,[SP, #+12]
   \   00002146   0xA878             ADD      R0,SP,#+480
   \   00002148   0x9002             STR      R0,[SP, #+8]
   \   0000214A   0xA872             ADD      R0,SP,#+456
   \   0000214C   0x9001             STR      R0,[SP, #+4]
   \   0000214E   0xA86C             ADD      R0,SP,#+432
   \   00002150   0x9000             STR      R0,[SP, #+0]
   \   00002152   0xAB66             ADD      R3,SP,#+408
   \   00002154   0xAA60             ADD      R2,SP,#+384
   \   00002156   0xF8DF 0x1D88      LDR.W    R1,??RoadBrd_ParseString_373
   \   0000215A   0xA80A             ADD      R0,SP,#+40
   \   0000215C   0x.... 0x....      BL       sprintf
   2440                                          strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00002160   0xF8DF 0x1D80      LDR.W    R1,??RoadBrd_ParseString_373+0x4
   \   00002164   0xA80A             ADD      R0,SP,#+40
   \   00002166   0x.... 0x....      BL       strcpy
   2441                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000216A   0xA80A             ADD      R0,SP,#+40
   \   0000216C   0x.... 0x....      BL       strlen
   \   00002170   0xA90A             ADD      R1,SP,#+40
   \   00002172   0x.... 0x....      BL       BGM111_Transmit
   2442                                        }
   2443                                        
   2444                                        //sprintf( (char *)tempBffr2, "Driver Status: %04x\r\n", DriverStatus );
   2445                                        sprintf( (char *)tempBffr2, "%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\r\n", (char *)GridMeasure.GridEye1.TempC,
   2446                                                (char *)GridMeasure.GridEye2.TempC,
   2447                                                (char *)GridMeasure.GridEye3.TempC,
   2448                                                (char *)GridMeasure.GridEye4.TempC,
   2449                                                (char *)GridMeasure.GridEye5.TempC,
   2450                                                (char *)GridMeasure.GridEye6.TempC,
   2451                                                (char *)GridMeasure.GridEye7.TempC,
   2452                                                (char *)GridMeasure.GridEye8.TempC,
   2453                                                (char *)GridMeasure.Thermistor.TempC,
   2454                                                (char *)TMeasure.TempC,
   2455                                                (char *)HMeasure.Humidity,
   2456                                                (char *)PRPMeasure.Pressure);
   \                     ??RoadBrd_ParseString_372: (+1)
   \   00002176   0xA8AD             ADD      R0,SP,#+692
   \   00002178   0x9009             STR      R0,[SP, #+36]
   \   0000217A   0xA848             ADD      R0,SP,#+288
   \   0000217C   0x9008             STR      R0,[SP, #+32]
   \   0000217E   0xA83C             ADD      R0,SP,#+240
   \   00002180   0x9007             STR      R0,[SP, #+28]
   \   00002182   0xA85A             ADD      R0,SP,#+360
   \   00002184   0x9006             STR      R0,[SP, #+24]
   \   00002186   0xA88A             ADD      R0,SP,#+552
   \   00002188   0x9005             STR      R0,[SP, #+20]
   \   0000218A   0xA884             ADD      R0,SP,#+528
   \   0000218C   0x9004             STR      R0,[SP, #+16]
   \   0000218E   0xA87E             ADD      R0,SP,#+504
   \   00002190   0x9003             STR      R0,[SP, #+12]
   \   00002192   0xA878             ADD      R0,SP,#+480
   \   00002194   0x9002             STR      R0,[SP, #+8]
   \   00002196   0xA872             ADD      R0,SP,#+456
   \   00002198   0x9001             STR      R0,[SP, #+4]
   \   0000219A   0xA86C             ADD      R0,SP,#+432
   \   0000219C   0x9000             STR      R0,[SP, #+0]
   \   0000219E   0xAB66             ADD      R3,SP,#+408
   \   000021A0   0xAA60             ADD      R2,SP,#+384
   \   000021A2   0xF8DF 0x1D44      LDR.W    R1,??RoadBrd_ParseString_373+0x8
   \   000021A6   0xA80A             ADD      R0,SP,#+40
   \   000021A8   0x.... 0x....      BL       sprintf
   2457                                        // Send string to UART..
   2458          #ifdef NUCLEO
   2459                                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   2460          #else
   2461                                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000021AC   0xA90A             ADD      R1,SP,#+40
   \   000021AE   0x2000             MOVS     R0,#+0
   \   000021B0   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000021B4   0x0006             MOVS     R6,R0
   2462          #endif
   2463                                        if (Status != HAL_OK)
   \   000021B6   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000021B8   0x2E00             CMP      R6,#+0
   \   000021BA   0xD003             BEQ.N    ??RoadBrd_ParseString_374
   2464                                          return Status;
   \   000021BC   0x0030             MOVS     R0,R6
   \   000021BE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000021C0   0xF002 0xBB8E      B.W      ??RoadBrd_ParseString_4
   2465                                        // NOW, Build Data String..
   2466                                        sprintf( (char *)tempBffr2, "COMPLETE" );
   \                     ??RoadBrd_ParseString_374: (+1)
   \   000021C4   0xF8DF 0x1E34      LDR.W    R1,??RoadBrd_ParseString_375
   \   000021C8   0xA80A             ADD      R0,SP,#+40
   \   000021CA   0x.... 0x....      BL       sprintf
   \   000021CE   0xF001 0xBE9E      B.W      ??RoadBrd_ParseString_376
   \   000021D2   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_222:
   \   000021D4   0x........         DC32     ?_36
   2467                                      } // Endif (Status == HAL_OK) RoadBrd_Baro_ReadPressure
   2468                                      else
   2469                                      {
   2470                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_371: (+1)
   \   000021D8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000021DA   0x2D00             CMP      R5,#+0
   \   000021DC   0xD00A             BEQ.N    ??RoadBrd_ParseString_377
   2471                                        {
   2472                                          // Yes...Build and Send BLE Response NOW.
   2473                                          strcpy( (char *)tempBffr2, "<STATUS>CMD_TC_HWERR_PRESSUE</STATUS>");
   \   000021DE   0xF8DF 0x1E20      LDR.W    R1,??RoadBrd_ParseString_375+0x4
   \   000021E2   0xA80A             ADD      R0,SP,#+40
   \   000021E4   0x.... 0x....      BL       strcpy
   2474                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000021E8   0xA80A             ADD      R0,SP,#+40
   \   000021EA   0x.... 0x....      BL       strlen
   \   000021EE   0xA90A             ADD      R1,SP,#+40
   \   000021F0   0x.... 0x....      BL       BGM111_Transmit
   2475                                        }
   2476                                        
   2477                                        sprintf( (char *)tempBffr2, "Pressure TASKING ERROR!" );
   \                     ??RoadBrd_ParseString_377: (+1)
   \   000021F4   0xF8DF 0x1E0C      LDR.W    R1,??RoadBrd_ParseString_375+0x8
   \   000021F8   0xA80A             ADD      R0,SP,#+40
   \   000021FA   0x.... 0x....      BL       sprintf
   \   000021FE   0xF001 0xBE86      B.W      ??RoadBrd_ParseString_376
   2478                                      } // EndElse (Status == HAL_OK) RoadBrd_Baro_ReadPressure
   2479                                    } // Endif (Status == HAL_OK) RoadBrd_Humidity_ReadHumidity
   2480                                    else
   2481                                    {
   2482                                      if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_370: (+1)
   \   00002202   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002204   0x2D00             CMP      R5,#+0
   \   00002206   0xD00A             BEQ.N    ??RoadBrd_ParseString_378
   2483                                      {
   2484                                        // Yes...Build and Send BLE Response NOW.
   2485                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_TC_HWERR_HUMIDITY</STATUS>");
   \   00002208   0xF8DF 0x1DFC      LDR.W    R1,??RoadBrd_ParseString_375+0xC
   \   0000220C   0xA80A             ADD      R0,SP,#+40
   \   0000220E   0x.... 0x....      BL       strcpy
   2486                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002212   0xA80A             ADD      R0,SP,#+40
   \   00002214   0x.... 0x....      BL       strlen
   \   00002218   0xA90A             ADD      R1,SP,#+40
   \   0000221A   0x.... 0x....      BL       BGM111_Transmit
   2487                                      }
   2488                                      
   2489                                      sprintf( (char *)tempBffr2, "Humidity TASKING ERROR!" );
   \                     ??RoadBrd_ParseString_378: (+1)
   \   0000221E   0xF8DF 0x1DEC      LDR.W    R1,??RoadBrd_ParseString_375+0x10
   \   00002222   0xA80A             ADD      R0,SP,#+40
   \   00002224   0x.... 0x....      BL       sprintf
   \   00002228   0xF001 0xBE71      B.W      ??RoadBrd_ParseString_376
   \                     ??RoadBrd_ParseString_225:
   \   0000222C   0x........         DC32     ?_76
   \   00002230   0x........         DC32     ?_77
   2490                                    } // EndElse (Status == HAL_OK) RoadBrd_Humidity_ReadHumidity
   2491                                  } // Endif (Status == HAL_OK) RoadBrd_ReadTemp
   2492                                  else
   2493                                  {
   2494                                    if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_369: (+1)
   \   00002234   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002236   0x2D00             CMP      R5,#+0
   \   00002238   0xD00A             BEQ.N    ??RoadBrd_ParseString_379
   2495                                    {
   2496                                      // Yes...Build and Send BLE Response NOW.
   2497                                      strcpy( (char *)tempBffr2, "<STATUS>CMD_TC_HWERR_TEMPERATURE</STATUS>");
   \   0000223A   0xF8DF 0x1DD4      LDR.W    R1,??RoadBrd_ParseString_375+0x14
   \   0000223E   0xA80A             ADD      R0,SP,#+40
   \   00002240   0x.... 0x....      BL       strcpy
   2498                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002244   0xA80A             ADD      R0,SP,#+40
   \   00002246   0x.... 0x....      BL       strlen
   \   0000224A   0xA90A             ADD      R1,SP,#+40
   \   0000224C   0x.... 0x....      BL       BGM111_Transmit
   2499                                    }
   2500                                    
   2501                                    sprintf( (char *)tempBffr2, "AMBIENT TEMPERATURE TASKING ERROR!" );
   \                     ??RoadBrd_ParseString_379: (+1)
   \   00002250   0xF8DF 0x1DC0      LDR.W    R1,??RoadBrd_ParseString_375+0x18
   \   00002254   0xA80A             ADD      R0,SP,#+40
   \   00002256   0x.... 0x....      BL       sprintf
   \   0000225A   0xF001 0xBE58      B.W      ??RoadBrd_ParseString_376
   \   0000225E   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_228:
   \   00002260   0x........         DC32     ?_78
   2502                                  } // EndElse (Status == HAL_OK) RoadBrd_ReadTemp
   2503                                } // Endif (Status == HAL_OK) RoadBrd_CoolEye_ReadValues
   2504                                else
   2505                                {
   2506                                  if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_368: (+1)
   \   00002264   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002266   0x2D00             CMP      R5,#+0
   \   00002268   0xD00A             BEQ.N    ??RoadBrd_ParseString_380
   2507                                  {
   2508                                    // Yes...Build and Send BLE Response NOW.
   2509                                    strcpy( (char *)tempBffr2, "<STATUS>CMD_TC_HWERR_IRTEMP</STATUS>");
   \   0000226A   0xF8DF 0x1E40      LDR.W    R1,??RoadBrd_ParseString_381
   \   0000226E   0xA80A             ADD      R0,SP,#+40
   \   00002270   0x.... 0x....      BL       strcpy
   2510                                    BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002274   0xA80A             ADD      R0,SP,#+40
   \   00002276   0x.... 0x....      BL       strlen
   \   0000227A   0xA90A             ADD      R1,SP,#+40
   \   0000227C   0x.... 0x....      BL       BGM111_Transmit
   2511                                  }
   2512                                  
   2513                                  sprintf( (char *)tempBffr2, "GRID EYE/COOL EYE TASKING ERROR!" );
   \                     ??RoadBrd_ParseString_380: (+1)
   \   00002280   0xF8DF 0x1E2C      LDR.W    R1,??RoadBrd_ParseString_381+0x4
   \   00002284   0xA80A             ADD      R0,SP,#+40
   \   00002286   0x.... 0x....      BL       sprintf
   \   0000228A   0xF001 0xBE40      B.W      ??RoadBrd_ParseString_376
   \   0000228E   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_230:
   \   00002290   0x........         DC32     ?_79
   \   00002294   0x........         DC32     ?_80
   2514                                } // EndElse (Status == HAL_OK) RoadBrd_CoolEye_ReadValues
   2515                              }
   2516                              else
   2517                              {
   2518                                switch( tempBffr[2] )
   \                     ??RoadBrd_ParseString_364: (+1)
   \   00002298   0x78A0             LDRB     R0,[R4, #+2]
   \   0000229A   0x2849             CMP      R0,#+73
   \   0000229C   0xF001 0x860A      BEQ.W    ??RoadBrd_ParseString_382
   \   000022A0   0x2852             CMP      R0,#+82
   \   000022A2   0xF000 0x85E7      BEQ.W    ??RoadBrd_ParseString_383
   \   000022A6   0x2853             CMP      R0,#+83
   \   000022A8   0xD004             BEQ.N    ??RoadBrd_ParseString_384
   \   000022AA   0x2854             CMP      R0,#+84
   \   000022AC   0xF001 0x859D      BEQ.W    ??RoadBrd_ParseString_385
   \   000022B0   0xF001 0xBE2D      B.W      ??RoadBrd_ParseString_376
   2519                                {
   2520                                  //------------------ TCS Command: Calibration Set Command
   2521                                case 'S':
   2522                                  // Step 1. Validate format.
   2523                                  if(tempBffr[3]!=':')
   \                     ??RoadBrd_ParseString_384: (+1)
   \   000022B4   0x78E0             LDRB     R0,[R4, #+3]
   \   000022B6   0x283A             CMP      R0,#+58
   \   000022B8   0xD01A             BEQ.N    ??RoadBrd_ParseString_386
   2524                                  {
   2525                                    // Is this a BLE Operation?
   2526                                    if ( BLE_Flag )
   \   000022BA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000022BC   0x2D00             CMP      R5,#+0
   \   000022BE   0xD00A             BEQ.N    ??RoadBrd_ParseString_387
   2527                                    {
   2528                                      // Yes...Build and Send BLE Response NOW.
   2529                                      strcpy( (char *)tempBffr2, "<STATUS>CMD_TCS_SYNTAX</STATUS>");
   \   000022C0   0xF8DF 0x1DF0      LDR.W    R1,??RoadBrd_ParseString_381+0x8
   \   000022C4   0xA80A             ADD      R0,SP,#+40
   \   000022C6   0x.... 0x....      BL       strcpy
   2530                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000022CA   0xA80A             ADD      R0,SP,#+40
   \   000022CC   0x.... 0x....      BL       strlen
   \   000022D0   0xA90A             ADD      R1,SP,#+40
   \   000022D2   0x.... 0x....      BL       BGM111_Transmit
   2531                                    }
   2532                                    
   2533                                    strcpy( (char *)tempBffr2, "TCS SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_387: (+1)
   \   000022D6   0xF8DF 0x1DE0      LDR.W    R1,??RoadBrd_ParseString_381+0xC
   \   000022DA   0xA80A             ADD      R0,SP,#+40
   \   000022DC   0x.... 0x....      BL       strcpy
   \   000022E0   0xF000 0xBDC6      B.W      ??RoadBrd_ParseString_388
   \                     ??RoadBrd_ParseString_234:
   \   000022E4   0x........         DC32     ?_81
   \   000022E8   0x........         DC32     ?_82
   \   000022EC   0x........         DC32     ?_83
   2534                                  } // Endif (tempBffr[3]!=':')
   2535                                  else
   2536                                  {
   2537                                    // 2. Verify if remaining string is digits
   2538                                    if (Size <= 4)
   \                     ??RoadBrd_ParseString_386: (+1)
   \   000022F0   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000022F4   0xF1B8 0x0F05      CMP      R8,#+5
   \   000022F8   0xDA18             BGE.N    ??RoadBrd_ParseString_389
   2539                                    {
   2540                                      // Is this a BLE Operation?
   2541                                      if ( BLE_Flag )
   \   000022FA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000022FC   0x2D00             CMP      R5,#+0
   \   000022FE   0xD00A             BEQ.N    ??RoadBrd_ParseString_390
   2542                                      {
   2543                                        // Yes...Build and Send BLE Response NOW.
   2544                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_TCS_BADPARAM</STATUS>");
   \   00002300   0xF8DF 0x1E4C      LDR.W    R1,??RoadBrd_ParseString_391
   \   00002304   0xA80A             ADD      R0,SP,#+40
   \   00002306   0x.... 0x....      BL       strcpy
   2545                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000230A   0xA80A             ADD      R0,SP,#+40
   \   0000230C   0x.... 0x....      BL       strlen
   \   00002310   0xA90A             ADD      R1,SP,#+40
   \   00002312   0x.... 0x....      BL       BGM111_Transmit
   2546                                      }
   2547                                      strcpy( (char *)tempBffr2, "TCS SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_390: (+1)
   \   00002316   0xF8DF 0x1E3C      LDR.W    R1,??RoadBrd_ParseString_391+0x4
   \   0000231A   0xA80A             ADD      R0,SP,#+40
   \   0000231C   0x.... 0x....      BL       strcpy
   \   00002320   0xF000 0xBDA6      B.W      ??RoadBrd_ParseString_388
   \                     ??RoadBrd_ParseString_235:
   \   00002324   0x........         DC32     ?_84
   \   00002328   0x........         DC32     ?_85
   2548                                    } // EndIf (Size > 4)
   2549                                    else
   2550                                    {
   2551                                      // 3. Grab remaining string and convert to integer.
   2552                                      tempPstr = &tempBffr[4];
   \                     ??RoadBrd_ParseString_389: (+1)
   \   0000232C   0x1D20             ADDS     R0,R4,#+4
   \   0000232E   0x9030             STR      R0,[SP, #+192]
   2553                                      strcpy(tempstr, tempPstr);
   \   00002330   0x9930             LDR      R1,[SP, #+192]
   \   00002332   0xA851             ADD      R0,SP,#+324
   \   00002334   0x.... 0x....      BL       strcpy
   2554                                      // Time to parse and test remaining string
   2555                                      Scale = 0.0;
   \   00002338   0x2000             MOVS     R0,#+0
   \   0000233A   0x9029             STR      R0,[SP, #+164]
   2556                                      Offset = 0.0;
   \   0000233C   0x2000             MOVS     R0,#+0
   \   0000233E   0x9028             STR      R0,[SP, #+160]
   2557                                      if (sscanf (tempstr, "%s %f %f", uuid, &Scale, &Offset) == 3)
   \   00002340   0xA828             ADD      R0,SP,#+160
   \   00002342   0x9000             STR      R0,[SP, #+0]
   \   00002344   0xAB29             ADD      R3,SP,#+164
   \   00002346   0xAA36             ADD      R2,SP,#+216
   \   00002348   0xF8DF 0x1E0C      LDR.W    R1,??RoadBrd_ParseString_391+0x8
   \   0000234C   0xA851             ADD      R0,SP,#+324
   \   0000234E   0x.... 0x....      BL       sscanf
   \   00002352   0x2803             CMP      R0,#+3
   \   00002354   0xF040 0x857A      BNE.W    ??RoadBrd_ParseString_392
   2558                                      {
   2559                                        sprintf( (char *)tempBffr2, "Parms: %s, %f, %f.\r\n", uuid, Scale, Offset );
   \   00002358   0x9828             LDR      R0,[SP, #+160]
   \   0000235A   0x.... 0x....      BL       __aeabi_f2d
   \   0000235E   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00002362   0x9829             LDR      R0,[SP, #+164]
   \   00002364   0x.... 0x....      BL       __aeabi_f2d
   \   00002368   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000236C   0xAA36             ADD      R2,SP,#+216
   \   0000236E   0xF8DF 0x1DEC      LDR.W    R1,??RoadBrd_ParseString_391+0xC
   \   00002372   0xA80A             ADD      R0,SP,#+40
   \   00002374   0x.... 0x....      BL       sprintf
   2560                                        // OK, We have 3 good parameters... NOW Need to determine if UUID is good.
   2561                                        if (strncmp((char *)uuid,"0002",4) == 0) // Shnt_Vltg
   \   00002378   0x2204             MOVS     R2,#+4
   \   0000237A   0xF8DF 0x1DE4      LDR.W    R1,??RoadBrd_ParseString_391+0x10
   \   0000237E   0xA836             ADD      R0,SP,#+216
   \   00002380   0x.... 0x....      BL       strncmp
   \   00002384   0x2800             CMP      R0,#+0
   \   00002386   0xD138             BNE.N    ??RoadBrd_ParseString_393
   2562                                        {
   2563                                          Status = RoadBrd_CAL_Set_CalItem( CAL_SHNT_VLTG, Offset, Scale);
   \   00002388   0x9A29             LDR      R2,[SP, #+164]
   \   0000238A   0x9928             LDR      R1,[SP, #+160]
   \   0000238C   0x2000             MOVS     R0,#+0
   \   0000238E   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002392   0x0006             MOVS     R6,R0
   2564                                          if (Status == HAL_OK)
   \   00002394   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002396   0x2E00             CMP      R6,#+0
   \   00002398   0xD11A             BNE.N    ??RoadBrd_ParseString_394
   2565                                          {
   2566                                            // Is this a BLE Operation?
   2567                                            if ( BLE_Flag )
   \   0000239A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000239C   0x2D00             CMP      R5,#+0
   \   0000239E   0xD00A             BEQ.N    ??RoadBrd_ParseString_395
   2568                                            {
   2569                                              // Yes...Build and Send BLE Response NOW.
   2570                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_SHNT_VLTG</STATUS>");
   \   000023A0   0xF8DF 0x1E54      LDR.W    R1,??RoadBrd_ParseString_396
   \   000023A4   0xA80A             ADD      R0,SP,#+40
   \   000023A6   0x.... 0x....      BL       strcpy
   2571                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000023AA   0xA80A             ADD      R0,SP,#+40
   \   000023AC   0x.... 0x....      BL       strlen
   \   000023B0   0xA90A             ADD      R1,SP,#+40
   \   000023B2   0x.... 0x....      BL       BGM111_Transmit
   2572                                            }
   2573                                            sprintf( (char *)tempBffr2, "Shnt_Vltg Set COMPLETE.\r\n" );
   \                     ??RoadBrd_ParseString_395: (+1)
   \   000023B6   0xF8DF 0x1E44      LDR.W    R1,??RoadBrd_ParseString_396+0x4
   \   000023BA   0xA80A             ADD      R0,SP,#+40
   \   000023BC   0x.... 0x....      BL       sprintf
   \   000023C0   0xF000 0xBD41      B.W      ??RoadBrd_ParseString_397
   \                     ??RoadBrd_ParseString_248:
   \   000023C4   0x........         DC32     ?_86
   \   000023C8   0x25 0x78          DC8      "%x."
   \              0x2E 0x00    
   \   000023CC   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
   2574                                          }
   2575                                          else
   2576                                          {
   2577                                            // Is this a BLE Operation?
   2578                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_394: (+1)
   \   000023D0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000023D2   0x2D00             CMP      R5,#+0
   \   000023D4   0xD00A             BEQ.N    ??RoadBrd_ParseString_398
   2579                                            {
   2580                                              // Yes...Build and Send BLE Response NOW.
   2581                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_SHNT_VLTG_ERR</STATUS>");
   \   000023D6   0xF8DF 0x1E28      LDR.W    R1,??RoadBrd_ParseString_396+0x8
   \   000023DA   0xA80A             ADD      R0,SP,#+40
   \   000023DC   0x.... 0x....      BL       strcpy
   2582                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000023E0   0xA80A             ADD      R0,SP,#+40
   \   000023E2   0x.... 0x....      BL       strlen
   \   000023E6   0xA90A             ADD      R1,SP,#+40
   \   000023E8   0x.... 0x....      BL       BGM111_Transmit
   2583                                            }
   2584                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_398: (+1)
   \   000023EC   0xF8DF 0x1E14      LDR.W    R1,??RoadBrd_ParseString_396+0xC
   \   000023F0   0xA80A             ADD      R0,SP,#+40
   \   000023F2   0x.... 0x....      BL       sprintf
   \   000023F6   0xF000 0xBD26      B.W      ??RoadBrd_ParseString_397
   2585                                          }
   2586                                        }
   2587                                        else if (strncmp((char *)uuid,"0004",4) == 0) // Current
   \                     ??RoadBrd_ParseString_393: (+1)
   \   000023FA   0x2204             MOVS     R2,#+4
   \   000023FC   0xF8DF 0x1E08      LDR.W    R1,??RoadBrd_ParseString_396+0x10
   \   00002400   0xA836             ADD      R0,SP,#+216
   \   00002402   0x.... 0x....      BL       strncmp
   \   00002406   0x2800             CMP      R0,#+0
   \   00002408   0xD139             BNE.N    ??RoadBrd_ParseString_399
   2588                                        {
   2589                                          Status = RoadBrd_CAL_Set_CalItem( CAL_CURRENT, Offset, Scale);
   \   0000240A   0x9A29             LDR      R2,[SP, #+164]
   \   0000240C   0x9928             LDR      R1,[SP, #+160]
   \   0000240E   0x2001             MOVS     R0,#+1
   \   00002410   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002414   0x0006             MOVS     R6,R0
   2590                                          if (Status == HAL_OK)
   \   00002416   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002418   0x2E00             CMP      R6,#+0
   \   0000241A   0xD11B             BNE.N    ??RoadBrd_ParseString_400
   2591                                          {
   2592                                            // Is this a BLE Operation?
   2593                                            if ( BLE_Flag )
   \   0000241C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000241E   0x2D00             CMP      R5,#+0
   \   00002420   0xD00A             BEQ.N    ??RoadBrd_ParseString_401
   2594                                            {
   2595                                              // Yes...Build and Send BLE Response NOW.
   2596                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_CURRENT</STATUS>");
   \   00002422   0xF8DF 0x1DE8      LDR.W    R1,??RoadBrd_ParseString_396+0x14
   \   00002426   0xA80A             ADD      R0,SP,#+40
   \   00002428   0x.... 0x....      BL       strcpy
   2597                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000242C   0xA80A             ADD      R0,SP,#+40
   \   0000242E   0x.... 0x....      BL       strlen
   \   00002432   0xA90A             ADD      R1,SP,#+40
   \   00002434   0x.... 0x....      BL       BGM111_Transmit
   2598                                            }
   2599                                            sprintf( (char *)tempBffr2, "Current Set COMPLETE." );
   \                     ??RoadBrd_ParseString_401: (+1)
   \   00002438   0xF8DF 0x1E68      LDR.W    R1,??RoadBrd_ParseString_402
   \   0000243C   0xA80A             ADD      R0,SP,#+40
   \   0000243E   0x.... 0x....      BL       sprintf
   \   00002442   0xF000 0xBD00      B.W      ??RoadBrd_ParseString_397
   \   00002446   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_251:
   \   00002448   0x........         DC32     ?_87
   \   0000244C   0x........         DC32     ?_88
   \   00002450   0x........         DC32     ?_89
   2600                                          }
   2601                                          else
   2602                                          {
   2603                                            // Is this a BLE Operation?
   2604                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_400: (+1)
   \   00002454   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002456   0x2D00             CMP      R5,#+0
   \   00002458   0xD00A             BEQ.N    ??RoadBrd_ParseString_403
   2605                                            {
   2606                                              // Yes...Build and Send BLE Response NOW.
   2607                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_CURRENT_ERR</STATUS>");
   \   0000245A   0xF8DF 0x1E4C      LDR.W    R1,??RoadBrd_ParseString_402+0x4
   \   0000245E   0xA80A             ADD      R0,SP,#+40
   \   00002460   0x.... 0x....      BL       strcpy
   2608                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002464   0xA80A             ADD      R0,SP,#+40
   \   00002466   0x.... 0x....      BL       strlen
   \   0000246A   0xA90A             ADD      R1,SP,#+40
   \   0000246C   0x.... 0x....      BL       BGM111_Transmit
   2609                                            }
   2610                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_403: (+1)
   \   00002470   0xF8DF 0x1D90      LDR.W    R1,??RoadBrd_ParseString_396+0xC
   \   00002474   0xA80A             ADD      R0,SP,#+40
   \   00002476   0x.... 0x....      BL       sprintf
   \   0000247A   0xF000 0xBCE4      B.W      ??RoadBrd_ParseString_397
   2611                                          }
   2612                                        }
   2613                                        else if (strncmp((char *)uuid,"0006",4) == 0) // Power
   \                     ??RoadBrd_ParseString_399: (+1)
   \   0000247E   0x2204             MOVS     R2,#+4
   \   00002480   0xF8DF 0x1E28      LDR.W    R1,??RoadBrd_ParseString_402+0x8
   \   00002484   0xA836             ADD      R0,SP,#+216
   \   00002486   0x.... 0x....      BL       strncmp
   \   0000248A   0x2800             CMP      R0,#+0
   \   0000248C   0xD139             BNE.N    ??RoadBrd_ParseString_404
   2614                                        {
   2615                                          Status = RoadBrd_CAL_Set_CalItem( CAL_POWER, Offset, Scale);
   \   0000248E   0x9A29             LDR      R2,[SP, #+164]
   \   00002490   0x9928             LDR      R1,[SP, #+160]
   \   00002492   0x2002             MOVS     R0,#+2
   \   00002494   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002498   0x0006             MOVS     R6,R0
   2616                                          if (Status == HAL_OK)
   \   0000249A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000249C   0x2E00             CMP      R6,#+0
   \   0000249E   0xD11B             BNE.N    ??RoadBrd_ParseString_405
   2617                                          {
   2618                                            // Is this a BLE Operation?
   2619                                            if ( BLE_Flag )
   \   000024A0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000024A2   0x2D00             CMP      R5,#+0
   \   000024A4   0xD00A             BEQ.N    ??RoadBrd_ParseString_406
   2620                                            {
   2621                                              // Yes...Build and Send BLE Response NOW.
   2622                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_POWER</STATUS>");
   \   000024A6   0xF8DF 0x1E08      LDR.W    R1,??RoadBrd_ParseString_402+0xC
   \   000024AA   0xA80A             ADD      R0,SP,#+40
   \   000024AC   0x.... 0x....      BL       strcpy
   2623                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000024B0   0xA80A             ADD      R0,SP,#+40
   \   000024B2   0x.... 0x....      BL       strlen
   \   000024B6   0xA90A             ADD      R1,SP,#+40
   \   000024B8   0x.... 0x....      BL       BGM111_Transmit
   2624                                            }
   2625                                            sprintf( (char *)tempBffr2, "Power Set COMPLETE." );
   \                     ??RoadBrd_ParseString_406: (+1)
   \   000024BC   0xF8DF 0x1DF4      LDR.W    R1,??RoadBrd_ParseString_402+0x10
   \   000024C0   0xA80A             ADD      R0,SP,#+40
   \   000024C2   0x.... 0x....      BL       sprintf
   \   000024C6   0xF000 0xBCBE      B.W      ??RoadBrd_ParseString_397
   \   000024CA   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_257:
   \   000024CC   0x........         DC32     ?_90
   \   000024D0   0x........         DC32     ?_91
   \   000024D4   0x........         DC32     ?_92
   2626                                          }
   2627                                          else
   2628                                          {
   2629                                            // Is this a BLE Operation?
   2630                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_405: (+1)
   \   000024D8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000024DA   0x2D00             CMP      R5,#+0
   \   000024DC   0xD00A             BEQ.N    ??RoadBrd_ParseString_407
   2631                                            {
   2632                                              // Yes...Build and Send BLE Response NOW.
   2633                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_POWER_ERR</STATUS>");
   \   000024DE   0xF8DF 0x1E6C      LDR.W    R1,??RoadBrd_ParseString_408
   \   000024E2   0xA80A             ADD      R0,SP,#+40
   \   000024E4   0x.... 0x....      BL       strcpy
   2634                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000024E8   0xA80A             ADD      R0,SP,#+40
   \   000024EA   0x.... 0x....      BL       strlen
   \   000024EE   0xA90A             ADD      R1,SP,#+40
   \   000024F0   0x.... 0x....      BL       BGM111_Transmit
   2635                                            }
   2636                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_407: (+1)
   \   000024F4   0xF8DF 0x1D0C      LDR.W    R1,??RoadBrd_ParseString_396+0xC
   \   000024F8   0xA80A             ADD      R0,SP,#+40
   \   000024FA   0x.... 0x....      BL       sprintf
   \   000024FE   0xF000 0xBCA2      B.W      ??RoadBrd_ParseString_397
   2637                                          }
   2638                                        }
   2639                                        else if (strncmp((char *)uuid,"0008",4) == 0) // Voltage
   \                     ??RoadBrd_ParseString_404: (+1)
   \   00002502   0x2204             MOVS     R2,#+4
   \   00002504   0xF8DF 0x1E48      LDR.W    R1,??RoadBrd_ParseString_408+0x4
   \   00002508   0xA836             ADD      R0,SP,#+216
   \   0000250A   0x.... 0x....      BL       strncmp
   \   0000250E   0x2800             CMP      R0,#+0
   \   00002510   0xD139             BNE.N    ??RoadBrd_ParseString_409
   2640                                        {
   2641                                          Status = RoadBrd_CAL_Set_CalItem( CAL_VOLTAGE, Offset, Scale);
   \   00002512   0x9A29             LDR      R2,[SP, #+164]
   \   00002514   0x9928             LDR      R1,[SP, #+160]
   \   00002516   0x2003             MOVS     R0,#+3
   \   00002518   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   0000251C   0x0006             MOVS     R6,R0
   2642                                          if (Status == HAL_OK)
   \   0000251E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002520   0x2E00             CMP      R6,#+0
   \   00002522   0xD11B             BNE.N    ??RoadBrd_ParseString_410
   2643                                          {
   2644                                            // Is this a BLE Operation?
   2645                                            if ( BLE_Flag )
   \   00002524   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002526   0x2D00             CMP      R5,#+0
   \   00002528   0xD00A             BEQ.N    ??RoadBrd_ParseString_411
   2646                                            {
   2647                                              // Yes...Build and Send BLE Response NOW.
   2648                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_VOLTAGE</STATUS>");
   \   0000252A   0xF8DF 0x1E28      LDR.W    R1,??RoadBrd_ParseString_408+0x8
   \   0000252E   0xA80A             ADD      R0,SP,#+40
   \   00002530   0x.... 0x....      BL       strcpy
   2649                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002534   0xA80A             ADD      R0,SP,#+40
   \   00002536   0x.... 0x....      BL       strlen
   \   0000253A   0xA90A             ADD      R1,SP,#+40
   \   0000253C   0x.... 0x....      BL       BGM111_Transmit
   2650                                            }
   2651                                            sprintf( (char *)tempBffr2, "Voltage Set COMPLETE." );
   \                     ??RoadBrd_ParseString_411: (+1)
   \   00002540   0xF8DF 0x1E14      LDR.W    R1,??RoadBrd_ParseString_408+0xC
   \   00002544   0xA80A             ADD      R0,SP,#+40
   \   00002546   0x.... 0x....      BL       sprintf
   \   0000254A   0xF000 0xBC7C      B.W      ??RoadBrd_ParseString_397
   \   0000254E   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_261:
   \   00002550   0x........         DC32     ?_93
   \   00002554   0x........         DC32     ?_94
   \   00002558   0x........         DC32     ?_95
   2652                                          }
   2653                                          else
   2654                                          {
   2655                                            // Is this a BLE Operation?
   2656                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_410: (+1)
   \   0000255C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000255E   0x2D00             CMP      R5,#+0
   \   00002560   0xD00A             BEQ.N    ??RoadBrd_ParseString_412
   2657                                            {
   2658                                              // Yes...Build and Send BLE Response NOW.
   2659                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_VOLTAGE_ERR</STATUS>");
   \   00002562   0xF8DF 0x1DF8      LDR.W    R1,??RoadBrd_ParseString_408+0x10
   \   00002566   0xA80A             ADD      R0,SP,#+40
   \   00002568   0x.... 0x....      BL       strcpy
   2660                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000256C   0xA80A             ADD      R0,SP,#+40
   \   0000256E   0x.... 0x....      BL       strlen
   \   00002572   0xA90A             ADD      R1,SP,#+40
   \   00002574   0x.... 0x....      BL       BGM111_Transmit
   2661                                            }
   2662                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_412: (+1)
   \   00002578   0xF8DF 0x1C88      LDR.W    R1,??RoadBrd_ParseString_396+0xC
   \   0000257C   0xA80A             ADD      R0,SP,#+40
   \   0000257E   0x.... 0x....      BL       sprintf
   \   00002582   0xF000 0xBC60      B.W      ??RoadBrd_ParseString_397
   2663                                          }
   2664                                        }
   2665                                        else if (strncmp((char *)uuid,"000A",4) == 0) // TempC
   \                     ??RoadBrd_ParseString_409: (+1)
   \   00002586   0x2204             MOVS     R2,#+4
   \   00002588   0xF8DF 0x1E68      LDR.W    R1,??RoadBrd_ParseString_413
   \   0000258C   0xA836             ADD      R0,SP,#+216
   \   0000258E   0x.... 0x....      BL       strncmp
   \   00002592   0x2800             CMP      R0,#+0
   \   00002594   0xD139             BNE.N    ??RoadBrd_ParseString_414
   2666                                        {
   2667                                          Status = RoadBrd_CAL_Set_CalItem( CAL_TEMPC, Offset, Scale);
   \   00002596   0x9A29             LDR      R2,[SP, #+164]
   \   00002598   0x9928             LDR      R1,[SP, #+160]
   \   0000259A   0x2004             MOVS     R0,#+4
   \   0000259C   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   000025A0   0x0006             MOVS     R6,R0
   2668                                          if (Status == HAL_OK)
   \   000025A2   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000025A4   0x2E00             CMP      R6,#+0
   \   000025A6   0xD11B             BNE.N    ??RoadBrd_ParseString_415
   2669                                          {
   2670                                            // Is this a BLE Operation?
   2671                                            if ( BLE_Flag )
   \   000025A8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000025AA   0x2D00             CMP      R5,#+0
   \   000025AC   0xD00A             BEQ.N    ??RoadBrd_ParseString_416
   2672                                            {
   2673                                              // Yes...Build and Send BLE Response NOW.
   2674                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_TEMPC</STATUS>");
   \   000025AE   0xF8DF 0x1E48      LDR.W    R1,??RoadBrd_ParseString_413+0x4
   \   000025B2   0xA80A             ADD      R0,SP,#+40
   \   000025B4   0x.... 0x....      BL       strcpy
   2675                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000025B8   0xA80A             ADD      R0,SP,#+40
   \   000025BA   0x.... 0x....      BL       strlen
   \   000025BE   0xA90A             ADD      R1,SP,#+40
   \   000025C0   0x.... 0x....      BL       BGM111_Transmit
   2676                                            }
   2677                                            sprintf( (char *)tempBffr2, "TempC Set COMPLETE." );
   \                     ??RoadBrd_ParseString_416: (+1)
   \   000025C4   0xF8DF 0x1E34      LDR.W    R1,??RoadBrd_ParseString_413+0x8
   \   000025C8   0xA80A             ADD      R0,SP,#+40
   \   000025CA   0x.... 0x....      BL       sprintf
   \   000025CE   0xF000 0xBC3A      B.W      ??RoadBrd_ParseString_397
   \   000025D2   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_265:
   \   000025D4   0x........         DC32     ?_96
   \   000025D8   0x........         DC32     ?_97
   \   000025DC   0x........         DC32     ?_98
   2678                                          }
   2679                                          else
   2680                                          {
   2681                                            // Is this a BLE Operation?
   2682                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_415: (+1)
   \   000025E0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000025E2   0x2D00             CMP      R5,#+0
   \   000025E4   0xD00A             BEQ.N    ??RoadBrd_ParseString_417
   2683                                            {
   2684                                              // Yes...Build and Send BLE Response NOW.
   2685                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_TEMPC_ERR</STATUS>");
   \   000025E6   0xF8DF 0x1E18      LDR.W    R1,??RoadBrd_ParseString_413+0xC
   \   000025EA   0xA80A             ADD      R0,SP,#+40
   \   000025EC   0x.... 0x....      BL       strcpy
   2686                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000025F0   0xA80A             ADD      R0,SP,#+40
   \   000025F2   0x.... 0x....      BL       strlen
   \   000025F6   0xA90A             ADD      R1,SP,#+40
   \   000025F8   0x.... 0x....      BL       BGM111_Transmit
   2687                                            }
   2688                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_417: (+1)
   \   000025FC   0xF8DF 0x1C04      LDR.W    R1,??RoadBrd_ParseString_396+0xC
   \   00002600   0xA80A             ADD      R0,SP,#+40
   \   00002602   0x.... 0x....      BL       sprintf
   \   00002606   0xF000 0xBC1E      B.W      ??RoadBrd_ParseString_397
   2689                                          }
   2690                                        }
   2691                                        else if (strncmp((char *)uuid,"000B",4) == 0) // TempF
   \                     ??RoadBrd_ParseString_414: (+1)
   \   0000260A   0x2204             MOVS     R2,#+4
   \   0000260C   0xF8DF 0x1DF4      LDR.W    R1,??RoadBrd_ParseString_413+0x10
   \   00002610   0xA836             ADD      R0,SP,#+216
   \   00002612   0x.... 0x....      BL       strncmp
   \   00002616   0x2800             CMP      R0,#+0
   \   00002618   0xD131             BNE.N    ??RoadBrd_ParseString_418
   2692                                        {
   2693                                          Status = RoadBrd_CAL_Set_CalItem( CAL_TEMPF, Offset, Scale);
   \   0000261A   0x9A29             LDR      R2,[SP, #+164]
   \   0000261C   0x9928             LDR      R1,[SP, #+160]
   \   0000261E   0x2005             MOVS     R0,#+5
   \   00002620   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002624   0x0006             MOVS     R6,R0
   2694                                          if (Status == HAL_OK)
   \   00002626   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002628   0x2E00             CMP      R6,#+0
   \   0000262A   0xD114             BNE.N    ??RoadBrd_ParseString_419
   2695                                          {
   2696                                            // Is this a BLE Operation?
   2697                                            if ( BLE_Flag )
   \   0000262C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000262E   0x2D00             CMP      R5,#+0
   \   00002630   0xD00A             BEQ.N    ??RoadBrd_ParseString_420
   2698                                            {
   2699                                              // Yes...Build and Send BLE Response NOW.
   2700                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_TEMPF</STATUS>");
   \   00002632   0xF8DF 0x1E68      LDR.W    R1,??RoadBrd_ParseString_421
   \   00002636   0xA80A             ADD      R0,SP,#+40
   \   00002638   0x.... 0x....      BL       strcpy
   2701                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000263C   0xA80A             ADD      R0,SP,#+40
   \   0000263E   0x.... 0x....      BL       strlen
   \   00002642   0xA90A             ADD      R1,SP,#+40
   \   00002644   0x.... 0x....      BL       BGM111_Transmit
   2702                                            }
   2703                                            sprintf( (char *)tempBffr2, "TempF Set COMPLETE." );
   \                     ??RoadBrd_ParseString_420: (+1)
   \   00002648   0xF8DF 0x1E54      LDR.W    R1,??RoadBrd_ParseString_421+0x4
   \   0000264C   0xA80A             ADD      R0,SP,#+40
   \   0000264E   0x.... 0x....      BL       sprintf
   \   00002652   0xF000 0xBBF8      B.W      ??RoadBrd_ParseString_397
   2704                                          }
   2705                                          else
   2706                                          {
   2707                                            // Is this a BLE Operation?
   2708                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_419: (+1)
   \   00002656   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002658   0x2D00             CMP      R5,#+0
   \   0000265A   0xD00A             BEQ.N    ??RoadBrd_ParseString_422
   2709                                            {
   2710                                              // Yes...Build and Send BLE Response NOW.
   2711                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_TEMPF_ERR</STATUS>");
   \   0000265C   0xF8DF 0x1E44      LDR.W    R1,??RoadBrd_ParseString_421+0x8
   \   00002660   0xA80A             ADD      R0,SP,#+40
   \   00002662   0x.... 0x....      BL       strcpy
   2712                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002666   0xA80A             ADD      R0,SP,#+40
   \   00002668   0x.... 0x....      BL       strlen
   \   0000266C   0xA90A             ADD      R1,SP,#+40
   \   0000266E   0x.... 0x....      BL       BGM111_Transmit
   2713                                            }
   2714                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_422: (+1)
   \   00002672   0xF8DF 0x1B90      LDR.W    R1,??RoadBrd_ParseString_396+0xC
   \   00002676   0xA80A             ADD      R0,SP,#+40
   \   00002678   0x.... 0x....      BL       sprintf
   \   0000267C   0xE3E3             B.N      ??RoadBrd_ParseString_397
   2715                                          }
   2716                                        }
   2717                                        else if (strncmp((char *)uuid,"0011",4) == 0) // Pressure
   \                     ??RoadBrd_ParseString_418: (+1)
   \   0000267E   0x2204             MOVS     R2,#+4
   \   00002680   0xF8DF 0x1E24      LDR.W    R1,??RoadBrd_ParseString_421+0xC
   \   00002684   0xA836             ADD      R0,SP,#+216
   \   00002686   0x.... 0x....      BL       strncmp
   \   0000268A   0x2800             CMP      R0,#+0
   \   0000268C   0xD130             BNE.N    ??RoadBrd_ParseString_423
   2718                                        {
   2719                                          Status = RoadBrd_CAL_Set_CalItem( CAL_PRESSURE, Offset, Scale);
   \   0000268E   0x9A29             LDR      R2,[SP, #+164]
   \   00002690   0x9928             LDR      R1,[SP, #+160]
   \   00002692   0x2006             MOVS     R0,#+6
   \   00002694   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002698   0x0006             MOVS     R6,R0
   2720                                          if (Status == HAL_OK)
   \   0000269A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000269C   0x2E00             CMP      R6,#+0
   \   0000269E   0xD113             BNE.N    ??RoadBrd_ParseString_424
   2721                                          {
   2722                                            // Is this a BLE Operation?
   2723                                            if ( BLE_Flag )
   \   000026A0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000026A2   0x2D00             CMP      R5,#+0
   \   000026A4   0xD00A             BEQ.N    ??RoadBrd_ParseString_425
   2724                                            {
   2725                                              // Yes...Build and Send BLE Response NOW.
   2726                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_PRESSURE</STATUS>");
   \   000026A6   0xF8DF 0x1E04      LDR.W    R1,??RoadBrd_ParseString_421+0x10
   \   000026AA   0xA80A             ADD      R0,SP,#+40
   \   000026AC   0x.... 0x....      BL       strcpy
   2727                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000026B0   0xA80A             ADD      R0,SP,#+40
   \   000026B2   0x.... 0x....      BL       strlen
   \   000026B6   0xA90A             ADD      R1,SP,#+40
   \   000026B8   0x.... 0x....      BL       BGM111_Transmit
   2728                                            }
   2729                                            sprintf( (char *)tempBffr2, "Pressure Set COMPLETE." );
   \                     ??RoadBrd_ParseString_425: (+1)
   \   000026BC   0xF8DF 0x1E84      LDR.W    R1,??RoadBrd_ParseString_426
   \   000026C0   0xA80A             ADD      R0,SP,#+40
   \   000026C2   0x.... 0x....      BL       sprintf
   \   000026C6   0xE3BE             B.N      ??RoadBrd_ParseString_397
   2730                                          }
   2731                                          else
   2732                                          {
   2733                                            // Is this a BLE Operation?
   2734                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_424: (+1)
   \   000026C8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000026CA   0x2D00             CMP      R5,#+0
   \   000026CC   0xD00A             BEQ.N    ??RoadBrd_ParseString_427
   2735                                            {
   2736                                              // Yes...Build and Send BLE Response NOW.
   2737                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_PRESSURE_ERR</STATUS>");
   \   000026CE   0xF8DF 0x1E78      LDR.W    R1,??RoadBrd_ParseString_426+0x4
   \   000026D2   0xA80A             ADD      R0,SP,#+40
   \   000026D4   0x.... 0x....      BL       strcpy
   2738                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000026D8   0xA80A             ADD      R0,SP,#+40
   \   000026DA   0x.... 0x....      BL       strlen
   \   000026DE   0xA90A             ADD      R1,SP,#+40
   \   000026E0   0x.... 0x....      BL       BGM111_Transmit
   2739                                            }
   2740                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_427: (+1)
   \   000026E4   0xF8DF 0x1B1C      LDR.W    R1,??RoadBrd_ParseString_396+0xC
   \   000026E8   0xA80A             ADD      R0,SP,#+40
   \   000026EA   0x.... 0x....      BL       sprintf
   \   000026EE   0xE3AA             B.N      ??RoadBrd_ParseString_397
   2741                                          }
   2742                                        }
   2743                                        else if (strncmp((char *)uuid,"0030",4) == 0) // Humidity
   \                     ??RoadBrd_ParseString_423: (+1)
   \   000026F0   0x2204             MOVS     R2,#+4
   \   000026F2   0xF8DF 0x1E58      LDR.W    R1,??RoadBrd_ParseString_426+0x8
   \   000026F6   0xA836             ADD      R0,SP,#+216
   \   000026F8   0x.... 0x....      BL       strncmp
   \   000026FC   0x2800             CMP      R0,#+0
   \   000026FE   0xD135             BNE.N    ??RoadBrd_ParseString_428
   2744                                        {
   2745                                          Status = RoadBrd_CAL_Set_CalItem( CAL_HUMIDITY, Offset, Scale);
   \   00002700   0x9A29             LDR      R2,[SP, #+164]
   \   00002702   0x9928             LDR      R1,[SP, #+160]
   \   00002704   0x2007             MOVS     R0,#+7
   \   00002706   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   0000270A   0x0006             MOVS     R6,R0
   2746                                          if (Status == HAL_OK)
   \   0000270C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000270E   0x2E00             CMP      R6,#+0
   \   00002710   0xD118             BNE.N    ??RoadBrd_ParseString_429
   2747                                          {
   2748                                            // Is this a BLE Operation?
   2749                                            if ( BLE_Flag )
   \   00002712   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002714   0x2D00             CMP      R5,#+0
   \   00002716   0xD00A             BEQ.N    ??RoadBrd_ParseString_430
   2750                                            {
   2751                                              // Yes...Build and Send BLE Response NOW.
   2752                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_HUMIDITY</STATUS>");
   \   00002718   0xF8DF 0x1E34      LDR.W    R1,??RoadBrd_ParseString_426+0xC
   \   0000271C   0xA80A             ADD      R0,SP,#+40
   \   0000271E   0x.... 0x....      BL       strcpy
   2753                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002722   0xA80A             ADD      R0,SP,#+40
   \   00002724   0x.... 0x....      BL       strlen
   \   00002728   0xA90A             ADD      R1,SP,#+40
   \   0000272A   0x.... 0x....      BL       BGM111_Transmit
   2754                                            }
   2755                                            sprintf( (char *)tempBffr2, "Humidity Set COMPLETE." );
   \                     ??RoadBrd_ParseString_430: (+1)
   \   0000272E   0xF8DF 0x1E24      LDR.W    R1,??RoadBrd_ParseString_426+0x10
   \   00002732   0xA80A             ADD      R0,SP,#+40
   \   00002734   0x.... 0x....      BL       sprintf
   \   00002738   0xE385             B.N      ??RoadBrd_ParseString_397
   \   0000273A   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_274:
   \   0000273C   0x........         DC32     ?_99
   \   00002740   0x........         DC32     ?_100
   2756                                          }
   2757                                          else
   2758                                          {
   2759                                            // Is this a BLE Operation?
   2760                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_429: (+1)
   \   00002744   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002746   0x2D00             CMP      R5,#+0
   \   00002748   0xD00A             BEQ.N    ??RoadBrd_ParseString_431
   2761                                            {
   2762                                              // Yes...Build and Send BLE Response NOW.
   2763                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_HUMIDITY_ERR</STATUS>");
   \   0000274A   0xF8DF 0x1E9C      LDR.W    R1,??RoadBrd_ParseString_432
   \   0000274E   0xA80A             ADD      R0,SP,#+40
   \   00002750   0x.... 0x....      BL       strcpy
   2764                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002754   0xA80A             ADD      R0,SP,#+40
   \   00002756   0x.... 0x....      BL       strlen
   \   0000275A   0xA90A             ADD      R1,SP,#+40
   \   0000275C   0x.... 0x....      BL       BGM111_Transmit
   2765                                            }
   2766                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_431: (+1)
   \   00002760   0xF8DF 0x1AA0      LDR.W    R1,??RoadBrd_ParseString_396+0xC
   \   00002764   0xA80A             ADD      R0,SP,#+40
   \   00002766   0x.... 0x....      BL       sprintf
   \   0000276A   0xE36C             B.N      ??RoadBrd_ParseString_397
   2767                                          }
   2768                                        }
   2769                                        else if (strncmp((char *)uuid,"0032",4) == 0) // Hum_TempC
   \                     ??RoadBrd_ParseString_428: (+1)
   \   0000276C   0x2204             MOVS     R2,#+4
   \   0000276E   0xF8DF 0x1E7C      LDR.W    R1,??RoadBrd_ParseString_432+0x4
   \   00002772   0xA836             ADD      R0,SP,#+216
   \   00002774   0x.... 0x....      BL       strncmp
   \   00002778   0x2800             CMP      R0,#+0
   \   0000277A   0xD135             BNE.N    ??RoadBrd_ParseString_433
   2770                                        {
   2771                                          Status = RoadBrd_CAL_Set_CalItem( CAL_HUM_TEMPC, Offset, Scale);
   \   0000277C   0x9A29             LDR      R2,[SP, #+164]
   \   0000277E   0x9928             LDR      R1,[SP, #+160]
   \   00002780   0x2008             MOVS     R0,#+8
   \   00002782   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002786   0x0006             MOVS     R6,R0
   2772                                          if (Status == HAL_OK)
   \   00002788   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000278A   0x2E00             CMP      R6,#+0
   \   0000278C   0xD118             BNE.N    ??RoadBrd_ParseString_434
   2773                                          {
   2774                                            // Is this a BLE Operation?
   2775                                            if ( BLE_Flag )
   \   0000278E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002790   0x2D00             CMP      R5,#+0
   \   00002792   0xD00A             BEQ.N    ??RoadBrd_ParseString_435
   2776                                            {
   2777                                              // Yes...Build and Send BLE Response NOW.
   2778                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_HUM_TEMPC</STATUS>");
   \   00002794   0xF8DF 0x1E58      LDR.W    R1,??RoadBrd_ParseString_432+0x8
   \   00002798   0xA80A             ADD      R0,SP,#+40
   \   0000279A   0x.... 0x....      BL       strcpy
   2779                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000279E   0xA80A             ADD      R0,SP,#+40
   \   000027A0   0x.... 0x....      BL       strlen
   \   000027A4   0xA90A             ADD      R1,SP,#+40
   \   000027A6   0x.... 0x....      BL       BGM111_Transmit
   2780                                            }
   2781                                            sprintf( (char *)tempBffr2, "Hum_TempC Set COMPLETE." );
   \                     ??RoadBrd_ParseString_435: (+1)
   \   000027AA   0xF8DF 0x1E48      LDR.W    R1,??RoadBrd_ParseString_432+0xC
   \   000027AE   0xA80A             ADD      R0,SP,#+40
   \   000027B0   0x.... 0x....      BL       sprintf
   \   000027B4   0xE347             B.N      ??RoadBrd_ParseString_397
   \   000027B6   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_277:
   \   000027B8   0x........         DC32     ?_101
   \   000027BC   0x........         DC32     ?_102
   2782                                          }
   2783                                          else
   2784                                          {
   2785                                            // Is this a BLE Operation?
   2786                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_434: (+1)
   \   000027C0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000027C2   0x2D00             CMP      R5,#+0
   \   000027C4   0xD00A             BEQ.N    ??RoadBrd_ParseString_436
   2787                                            {
   2788                                              // Yes...Build and Send BLE Response NOW.
   2789                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_HUM_TEMPC_ERR</STATUS>");
   \   000027C6   0xF8DF 0x1E30      LDR.W    R1,??RoadBrd_ParseString_432+0x10
   \   000027CA   0xA80A             ADD      R0,SP,#+40
   \   000027CC   0x.... 0x....      BL       strcpy
   2790                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000027D0   0xA80A             ADD      R0,SP,#+40
   \   000027D2   0x.... 0x....      BL       strlen
   \   000027D6   0xA90A             ADD      R1,SP,#+40
   \   000027D8   0x.... 0x....      BL       BGM111_Transmit
   2791                                            }
   2792                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_436: (+1)
   \   000027DC   0xF8DF 0x1A24      LDR.W    R1,??RoadBrd_ParseString_396+0xC
   \   000027E0   0xA80A             ADD      R0,SP,#+40
   \   000027E2   0x.... 0x....      BL       sprintf
   \   000027E6   0xE32E             B.N      ??RoadBrd_ParseString_397
   2793                                          }
   2794                                        }
   2795                                        else if (strncmp((char *)uuid,"0033",4) == 0) // Hum_TempF
   \                     ??RoadBrd_ParseString_433: (+1)
   \   000027E8   0x2204             MOVS     R2,#+4
   \   000027EA   0xF8DF 0x1EA0      LDR.W    R1,??RoadBrd_ParseString_437
   \   000027EE   0xA836             ADD      R0,SP,#+216
   \   000027F0   0x.... 0x....      BL       strncmp
   \   000027F4   0x2800             CMP      R0,#+0
   \   000027F6   0xD139             BNE.N    ??RoadBrd_ParseString_438
   2796                                        {
   2797                                          Status = RoadBrd_CAL_Set_CalItem( CAL_HUM_TEMPF, Offset, Scale);
   \   000027F8   0x9A29             LDR      R2,[SP, #+164]
   \   000027FA   0x9928             LDR      R1,[SP, #+160]
   \   000027FC   0x2009             MOVS     R0,#+9
   \   000027FE   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002802   0x0006             MOVS     R6,R0
   2798                                          if (Status == HAL_OK)
   \   00002804   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002806   0x2E00             CMP      R6,#+0
   \   00002808   0xD11C             BNE.N    ??RoadBrd_ParseString_439
   2799                                          {
   2800                                            // Is this a BLE Operation?
   2801                                            if ( BLE_Flag )
   \   0000280A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000280C   0x2D00             CMP      R5,#+0
   \   0000280E   0xD00A             BEQ.N    ??RoadBrd_ParseString_440
   2802                                            {
   2803                                              // Yes...Build and Send BLE Response NOW.
   2804                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_HUM_TEMPF</STATUS>");
   \   00002810   0xF8DF 0x1E7C      LDR.W    R1,??RoadBrd_ParseString_437+0x4
   \   00002814   0xA80A             ADD      R0,SP,#+40
   \   00002816   0x.... 0x....      BL       strcpy
   2805                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000281A   0xA80A             ADD      R0,SP,#+40
   \   0000281C   0x.... 0x....      BL       strlen
   \   00002820   0xA90A             ADD      R1,SP,#+40
   \   00002822   0x.... 0x....      BL       BGM111_Transmit
   2806                                            }
   2807                                            sprintf( (char *)tempBffr2, "Hum_TempF Set COMPLETE." );
   \                     ??RoadBrd_ParseString_440: (+1)
   \   00002826   0xF8DF 0x1E6C      LDR.W    R1,??RoadBrd_ParseString_437+0x8
   \   0000282A   0xA80A             ADD      R0,SP,#+40
   \   0000282C   0x.... 0x....      BL       sprintf
   \   00002830   0xE309             B.N      ??RoadBrd_ParseString_397
   \   00002832   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_280:
   \   00002834   0x........         DC32     ?_41
   \   00002838   0x........         DC32     ?_103
   \   0000283C   0x........         DC32     ?_104
   \   00002840   0x........         DC32     ?_105
   2808                                          }
   2809                                          else
   2810                                          {
   2811                                            // Is this a BLE Operation?
   2812                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_439: (+1)
   \   00002844   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002846   0x2D00             CMP      R5,#+0
   \   00002848   0xD00A             BEQ.N    ??RoadBrd_ParseString_441
   2813                                            {
   2814                                              // Yes...Build and Send BLE Response NOW.
   2815                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_HUM_TEMPF_ERR</STATUS>");
   \   0000284A   0xF8DF 0x1E4C      LDR.W    R1,??RoadBrd_ParseString_437+0xC
   \   0000284E   0xA80A             ADD      R0,SP,#+40
   \   00002850   0x.... 0x....      BL       strcpy
   2816                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002854   0xA80A             ADD      R0,SP,#+40
   \   00002856   0x.... 0x....      BL       strlen
   \   0000285A   0xA90A             ADD      R1,SP,#+40
   \   0000285C   0x.... 0x....      BL       BGM111_Transmit
   2817                                            }
   2818                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_441: (+1)
   \   00002860   0xF8DF 0x19A0      LDR.W    R1,??RoadBrd_ParseString_396+0xC
   \   00002864   0xA80A             ADD      R0,SP,#+40
   \   00002866   0x.... 0x....      BL       sprintf
   \   0000286A   0xE2EC             B.N      ??RoadBrd_ParseString_397
   2819                                          }
   2820                                        }
   2821                                        else if (strncmp((char *)uuid,"000D",4) == 0) // RGB_Red
   \                     ??RoadBrd_ParseString_438: (+1)
   \   0000286C   0x2204             MOVS     R2,#+4
   \   0000286E   0xF8DF 0x1E2C      LDR.W    R1,??RoadBrd_ParseString_437+0x10
   \   00002872   0xA836             ADD      R0,SP,#+216
   \   00002874   0x.... 0x....      BL       strncmp
   \   00002878   0x2800             CMP      R0,#+0
   \   0000287A   0xD133             BNE.N    ??RoadBrd_ParseString_442
   2822                                        {
   2823                                          Status = RoadBrd_CAL_Set_CalItem( CAL_RGB_RED, Offset, Scale);
   \   0000287C   0x9A29             LDR      R2,[SP, #+164]
   \   0000287E   0x9928             LDR      R1,[SP, #+160]
   \   00002880   0x200A             MOVS     R0,#+10
   \   00002882   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002886   0x0006             MOVS     R6,R0
   2824                                          if (Status == HAL_OK)
   \   00002888   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000288A   0x2E00             CMP      R6,#+0
   \   0000288C   0xD116             BNE.N    ??RoadBrd_ParseString_443
   2825                                          {
   2826                                            // Is this a BLE Operation?
   2827                                            if ( BLE_Flag )
   \   0000288E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002890   0x2D00             CMP      R5,#+0
   \   00002892   0xD00A             BEQ.N    ??RoadBrd_ParseString_444
   2828                                            {
   2829                                              // Yes...Build and Send BLE Response NOW.
   2830                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_RGB_RED</STATUS>");
   \   00002894   0xF8DF 0x1E98      LDR.W    R1,??RoadBrd_ParseString_445
   \   00002898   0xA80A             ADD      R0,SP,#+40
   \   0000289A   0x.... 0x....      BL       strcpy
   2831                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000289E   0xA80A             ADD      R0,SP,#+40
   \   000028A0   0x.... 0x....      BL       strlen
   \   000028A4   0xA90A             ADD      R1,SP,#+40
   \   000028A6   0x.... 0x....      BL       BGM111_Transmit
   2832                                            }
   2833                                            sprintf( (char *)tempBffr2, "RGB_Red Set COMPLETE." );
   \                     ??RoadBrd_ParseString_444: (+1)
   \   000028AA   0xF8DF 0x1E88      LDR.W    R1,??RoadBrd_ParseString_445+0x4
   \   000028AE   0xA80A             ADD      R0,SP,#+40
   \   000028B0   0x.... 0x....      BL       sprintf
   \   000028B4   0xE2C7             B.N      ??RoadBrd_ParseString_397
   \   000028B6   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_288:
   \   000028B8   0x........         DC32     ?_106
   2834                                          }
   2835                                          else
   2836                                          {
   2837                                            // Is this a BLE Operation?
   2838                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_443: (+1)
   \   000028BC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000028BE   0x2D00             CMP      R5,#+0
   \   000028C0   0xD00A             BEQ.N    ??RoadBrd_ParseString_446
   2839                                            {
   2840                                              // Yes...Build and Send BLE Response NOW.
   2841                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_RGB_RED_ERR</STATUS>");
   \   000028C2   0xF8DF 0x1E74      LDR.W    R1,??RoadBrd_ParseString_445+0x8
   \   000028C6   0xA80A             ADD      R0,SP,#+40
   \   000028C8   0x.... 0x....      BL       strcpy
   2842                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000028CC   0xA80A             ADD      R0,SP,#+40
   \   000028CE   0x.... 0x....      BL       strlen
   \   000028D2   0xA90A             ADD      R1,SP,#+40
   \   000028D4   0x.... 0x....      BL       BGM111_Transmit
   2843                                            }
   2844                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_446: (+1)
   \   000028D8   0xF8DF 0x1928      LDR.W    R1,??RoadBrd_ParseString_396+0xC
   \   000028DC   0xA80A             ADD      R0,SP,#+40
   \   000028DE   0x.... 0x....      BL       sprintf
   \   000028E2   0xE2B0             B.N      ??RoadBrd_ParseString_397
   2845                                          }
   2846                                        }
   2847                                        else if (strncmp((char *)uuid,"000E",4) == 0) // RGB_Green
   \                     ??RoadBrd_ParseString_442: (+1)
   \   000028E4   0x2204             MOVS     R2,#+4
   \   000028E6   0xF8DF 0x1E54      LDR.W    R1,??RoadBrd_ParseString_445+0xC
   \   000028EA   0xA836             ADD      R0,SP,#+216
   \   000028EC   0x.... 0x....      BL       strncmp
   \   000028F0   0x2800             CMP      R0,#+0
   \   000028F2   0xD133             BNE.N    ??RoadBrd_ParseString_447
   2848                                        {
   2849                                          Status = RoadBrd_CAL_Set_CalItem( CAL_RGB_GREEN, Offset, Scale);
   \   000028F4   0x9A29             LDR      R2,[SP, #+164]
   \   000028F6   0x9928             LDR      R1,[SP, #+160]
   \   000028F8   0x200B             MOVS     R0,#+11
   \   000028FA   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   000028FE   0x0006             MOVS     R6,R0
   2850                                          if (Status == HAL_OK)
   \   00002900   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002902   0x2E00             CMP      R6,#+0
   \   00002904   0xD116             BNE.N    ??RoadBrd_ParseString_448
   2851                                          {
   2852                                            // Is this a BLE Operation?
   2853                                            if ( BLE_Flag )
   \   00002906   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002908   0x2D00             CMP      R5,#+0
   \   0000290A   0xD00A             BEQ.N    ??RoadBrd_ParseString_449
   2854                                            {
   2855                                              // Yes...Build and Send BLE Response NOW.
   2856                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_RGB_GREEN</STATUS>");
   \   0000290C   0xF8DF 0x1E30      LDR.W    R1,??RoadBrd_ParseString_445+0x10
   \   00002910   0xA80A             ADD      R0,SP,#+40
   \   00002912   0x.... 0x....      BL       strcpy
   2857                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002916   0xA80A             ADD      R0,SP,#+40
   \   00002918   0x.... 0x....      BL       strlen
   \   0000291C   0xA90A             ADD      R1,SP,#+40
   \   0000291E   0x.... 0x....      BL       BGM111_Transmit
   2858                                            }
   2859                                            sprintf( (char *)tempBffr2, "RGB_Green Set COMPLETE." );
   \                     ??RoadBrd_ParseString_449: (+1)
   \   00002922   0xF8DF 0x1EB0      LDR.W    R1,??RoadBrd_ParseString_450
   \   00002926   0xA80A             ADD      R0,SP,#+40
   \   00002928   0x.... 0x....      BL       sprintf
   \   0000292C   0xE28B             B.N      ??RoadBrd_ParseString_397
   \   0000292E   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_302:
   \   00002930   0x........         DC32     ?_107
   2860                                          }
   2861                                          else
   2862                                          {
   2863                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_448: (+1)
   \   00002934   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002936   0x2D00             CMP      R5,#+0
   \   00002938   0xD00A             BEQ.N    ??RoadBrd_ParseString_451
   2864                                            {
   2865                                              // Yes...Build and Send BLE Response NOW.
   2866                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_RGB_GREEN_ERR</STATUS>");
   \   0000293A   0xF8DF 0x1E9C      LDR.W    R1,??RoadBrd_ParseString_450+0x4
   \   0000293E   0xA80A             ADD      R0,SP,#+40
   \   00002940   0x.... 0x....      BL       strcpy
   2867                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002944   0xA80A             ADD      R0,SP,#+40
   \   00002946   0x.... 0x....      BL       strlen
   \   0000294A   0xA90A             ADD      R1,SP,#+40
   \   0000294C   0x.... 0x....      BL       BGM111_Transmit
   2868                                            }
   2869                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_451: (+1)
   \   00002950   0xF8DF 0x18B0      LDR.W    R1,??RoadBrd_ParseString_396+0xC
   \   00002954   0xA80A             ADD      R0,SP,#+40
   \   00002956   0x.... 0x....      BL       sprintf
   \   0000295A   0xE274             B.N      ??RoadBrd_ParseString_397
   2870                                          }
   2871                                        }
   2872                                        else if (strncmp((char *)uuid,"000F",4) == 0) // RGB_Blue
   \                     ??RoadBrd_ParseString_447: (+1)
   \   0000295C   0x2204             MOVS     R2,#+4
   \   0000295E   0xF8DF 0x1E7C      LDR.W    R1,??RoadBrd_ParseString_450+0x8
   \   00002962   0xA836             ADD      R0,SP,#+216
   \   00002964   0x.... 0x....      BL       strncmp
   \   00002968   0x2800             CMP      R0,#+0
   \   0000296A   0xD139             BNE.N    ??RoadBrd_ParseString_452
   2873                                        {
   2874                                          Status = RoadBrd_CAL_Set_CalItem( CAL_RGB_BLUE, Offset, Scale);
   \   0000296C   0x9A29             LDR      R2,[SP, #+164]
   \   0000296E   0x9928             LDR      R1,[SP, #+160]
   \   00002970   0x200C             MOVS     R0,#+12
   \   00002972   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002976   0x0006             MOVS     R6,R0
   2875                                          if (Status == HAL_OK)
   \   00002978   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000297A   0x2E00             CMP      R6,#+0
   \   0000297C   0xD11C             BNE.N    ??RoadBrd_ParseString_453
   2876                                          {
   2877                                            // Is this a BLE Operation?
   2878                                            if ( BLE_Flag )
   \   0000297E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002980   0x2D00             CMP      R5,#+0
   \   00002982   0xD00A             BEQ.N    ??RoadBrd_ParseString_454
   2879                                            {
   2880                                              // Yes...Build and Send BLE Response NOW.
   2881                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_RGB_BLUE</STATUS>");
   \   00002984   0xF8DF 0x1E58      LDR.W    R1,??RoadBrd_ParseString_450+0xC
   \   00002988   0xA80A             ADD      R0,SP,#+40
   \   0000298A   0x.... 0x....      BL       strcpy
   2882                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000298E   0xA80A             ADD      R0,SP,#+40
   \   00002990   0x.... 0x....      BL       strlen
   \   00002994   0xA90A             ADD      R1,SP,#+40
   \   00002996   0x.... 0x....      BL       BGM111_Transmit
   2883                                            }
   2884                                            sprintf( (char *)tempBffr2, "RGB_Blue Set COMPLETE." );
   \                     ??RoadBrd_ParseString_454: (+1)
   \   0000299A   0xF8DF 0x1E48      LDR.W    R1,??RoadBrd_ParseString_450+0x10
   \   0000299E   0xA80A             ADD      R0,SP,#+40
   \   000029A0   0x.... 0x....      BL       sprintf
   \   000029A4   0xE24F             B.N      ??RoadBrd_ParseString_397
   \   000029A6   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_311:
   \   000029A8   0x........         DC32     ?_108
   \   000029AC   0x........         DC32     ?_109
   \   000029B0   0x........         DC32     ?_110
   \   000029B4   0x........         DC32     ?_111
   2885                                          }
   2886                                          else
   2887                                          {
   2888                                            // Is this a BLE Operation?
   2889                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_453: (+1)
   \   000029B8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000029BA   0x2D00             CMP      R5,#+0
   \   000029BC   0xD00A             BEQ.N    ??RoadBrd_ParseString_455
   2890                                            {
   2891                                              // Yes...Build and Send BLE Response NOW.
   2892                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_RGB_BLUE_ERR</STATUS>");
   \   000029BE   0xF8DF 0x1EB8      LDR.W    R1,??RoadBrd_ParseString_456
   \   000029C2   0xA80A             ADD      R0,SP,#+40
   \   000029C4   0x.... 0x....      BL       strcpy
   2893                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000029C8   0xA80A             ADD      R0,SP,#+40
   \   000029CA   0x.... 0x....      BL       strlen
   \   000029CE   0xA90A             ADD      R1,SP,#+40
   \   000029D0   0x.... 0x....      BL       BGM111_Transmit
   2894                                            }
   2895                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_455: (+1)
   \   000029D4   0xF8DF 0x182C      LDR.W    R1,??RoadBrd_ParseString_396+0xC
   \   000029D8   0xA80A             ADD      R0,SP,#+40
   \   000029DA   0x.... 0x....      BL       sprintf
   \   000029DE   0xE232             B.N      ??RoadBrd_ParseString_397
   2896                                          }
   2897                                        }
   2898                                        else if (strncmp((char *)uuid,"0017",4) == 0) // Therm_C
   \                     ??RoadBrd_ParseString_452: (+1)
   \   000029E0   0x2204             MOVS     R2,#+4
   \   000029E2   0xF8DF 0x1E98      LDR.W    R1,??RoadBrd_ParseString_456+0x4
   \   000029E6   0xA836             ADD      R0,SP,#+216
   \   000029E8   0x.... 0x....      BL       strncmp
   \   000029EC   0x2800             CMP      R0,#+0
   \   000029EE   0xD130             BNE.N    ??RoadBrd_ParseString_457
   2899                                        {
   2900                                          Status = RoadBrd_CAL_Set_CalItem( CAL_THERM_C, Offset, Scale);
   \   000029F0   0x9A29             LDR      R2,[SP, #+164]
   \   000029F2   0x9928             LDR      R1,[SP, #+160]
   \   000029F4   0x200D             MOVS     R0,#+13
   \   000029F6   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   000029FA   0x0006             MOVS     R6,R0
   2901                                          if (Status == HAL_OK)
   \   000029FC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000029FE   0x2E00             CMP      R6,#+0
   \   00002A00   0xD113             BNE.N    ??RoadBrd_ParseString_458
   2902                                          {
   2903                                            // Is this a BLE Operation?
   2904                                            if ( BLE_Flag )
   \   00002A02   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002A04   0x2D00             CMP      R5,#+0
   \   00002A06   0xD00A             BEQ.N    ??RoadBrd_ParseString_459
   2905                                            {
   2906                                              // Yes...Build and Send BLE Response NOW.
   2907                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_THERM_C</STATUS>");
   \   00002A08   0xF8DF 0x1E74      LDR.W    R1,??RoadBrd_ParseString_456+0x8
   \   00002A0C   0xA80A             ADD      R0,SP,#+40
   \   00002A0E   0x.... 0x....      BL       strcpy
   2908                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002A12   0xA80A             ADD      R0,SP,#+40
   \   00002A14   0x.... 0x....      BL       strlen
   \   00002A18   0xA90A             ADD      R1,SP,#+40
   \   00002A1A   0x.... 0x....      BL       BGM111_Transmit
   2909                                            }
   2910                                            sprintf( (char *)tempBffr2, "Therm_C Set COMPLETE." );
   \                     ??RoadBrd_ParseString_459: (+1)
   \   00002A1E   0xF8DF 0x1E64      LDR.W    R1,??RoadBrd_ParseString_456+0xC
   \   00002A22   0xA80A             ADD      R0,SP,#+40
   \   00002A24   0x.... 0x....      BL       sprintf
   \   00002A28   0xE20D             B.N      ??RoadBrd_ParseString_397
   2911                                          }
   2912                                          else
   2913                                          {
   2914                                            // Is this a BLE Operation?
   2915                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_458: (+1)
   \   00002A2A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002A2C   0x2D00             CMP      R5,#+0
   \   00002A2E   0xD00A             BEQ.N    ??RoadBrd_ParseString_460
   2916                                            {
   2917                                              // Yes...Build and Send BLE Response NOW.
   2918                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_THERM_C_ERR</STATUS>");
   \   00002A30   0xF8DF 0x1E54      LDR.W    R1,??RoadBrd_ParseString_456+0x10
   \   00002A34   0xA80A             ADD      R0,SP,#+40
   \   00002A36   0x.... 0x....      BL       strcpy
   2919                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002A3A   0xA80A             ADD      R0,SP,#+40
   \   00002A3C   0x.... 0x....      BL       strlen
   \   00002A40   0xA90A             ADD      R1,SP,#+40
   \   00002A42   0x.... 0x....      BL       BGM111_Transmit
   2920                                            }
   2921                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_460: (+1)
   \   00002A46   0xF8DF 0x17BC      LDR.W    R1,??RoadBrd_ParseString_396+0xC
   \   00002A4A   0xA80A             ADD      R0,SP,#+40
   \   00002A4C   0x.... 0x....      BL       sprintf
   \   00002A50   0xE1F9             B.N      ??RoadBrd_ParseString_397
   2922                                          }
   2923                                        }
   2924                                        else if (strncmp((char *)uuid,"0019",4) == 0) // RoadT_1C
   \                     ??RoadBrd_ParseString_457: (+1)
   \   00002A52   0x2204             MOVS     R2,#+4
   \   00002A54   0xF8DF 0x1EC4      LDR.W    R1,??RoadBrd_ParseString_461
   \   00002A58   0xA836             ADD      R0,SP,#+216
   \   00002A5A   0x.... 0x....      BL       strncmp
   \   00002A5E   0x2800             CMP      R0,#+0
   \   00002A60   0xD132             BNE.N    ??RoadBrd_ParseString_462
   2925                                        {
   2926                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_1C, Offset, Scale);
   \   00002A62   0x9A29             LDR      R2,[SP, #+164]
   \   00002A64   0x9928             LDR      R1,[SP, #+160]
   \   00002A66   0x200E             MOVS     R0,#+14
   \   00002A68   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002A6C   0x0006             MOVS     R6,R0
   2927                                          if (Status == HAL_OK)
   \   00002A6E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002A70   0x2E00             CMP      R6,#+0
   \   00002A72   0xD115             BNE.N    ??RoadBrd_ParseString_463
   2928                                          {
   2929                                            // Is this a BLE Operation?
   2930                                            if ( BLE_Flag )
   \   00002A74   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002A76   0x2D00             CMP      R5,#+0
   \   00002A78   0xD00A             BEQ.N    ??RoadBrd_ParseString_464
   2931                                            {
   2932                                              // Yes...Build and Send BLE Response NOW.
   2933                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_1C</STATUS>");
   \   00002A7A   0xF8DF 0x1EA4      LDR.W    R1,??RoadBrd_ParseString_461+0x4
   \   00002A7E   0xA80A             ADD      R0,SP,#+40
   \   00002A80   0x.... 0x....      BL       strcpy
   2934                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002A84   0xA80A             ADD      R0,SP,#+40
   \   00002A86   0x.... 0x....      BL       strlen
   \   00002A8A   0xA90A             ADD      R1,SP,#+40
   \   00002A8C   0x.... 0x....      BL       BGM111_Transmit
   2935                                            }
   2936                                            sprintf( (char *)tempBffr2, "RoadT_1C Set COMPLETE." );
   \                     ??RoadBrd_ParseString_464: (+1)
   \   00002A90   0xF8DF 0x1E90      LDR.W    R1,??RoadBrd_ParseString_461+0x8
   \   00002A94   0xA80A             ADD      R0,SP,#+40
   \   00002A96   0x.... 0x....      BL       sprintf
   \   00002A9A   0xE1D4             B.N      ??RoadBrd_ParseString_397
   \                     ??RoadBrd_ParseString_321:
   \   00002A9C   0x........         DC32     ?_112
   2937                                          }
   2938                                          else
   2939                                          {
   2940                                            // Is this a BLE Operation?
   2941                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_463: (+1)
   \   00002AA0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002AA2   0x2D00             CMP      R5,#+0
   \   00002AA4   0xD00A             BEQ.N    ??RoadBrd_ParseString_465
   2942                                            {
   2943                                              // Yes...Build and Send BLE Response NOW.
   2944                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_1C_ERR</STATUS>");
   \   00002AA6   0xF8DF 0x1E80      LDR.W    R1,??RoadBrd_ParseString_461+0xC
   \   00002AAA   0xA80A             ADD      R0,SP,#+40
   \   00002AAC   0x.... 0x....      BL       strcpy
   2945                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002AB0   0xA80A             ADD      R0,SP,#+40
   \   00002AB2   0x.... 0x....      BL       strlen
   \   00002AB6   0xA90A             ADD      R1,SP,#+40
   \   00002AB8   0x.... 0x....      BL       BGM111_Transmit
   2946                                            }
   2947                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_465: (+1)
   \   00002ABC   0xF8DF 0x1744      LDR.W    R1,??RoadBrd_ParseString_396+0xC
   \   00002AC0   0xA80A             ADD      R0,SP,#+40
   \   00002AC2   0x.... 0x....      BL       sprintf
   \   00002AC6   0xE1BE             B.N      ??RoadBrd_ParseString_397
   2948                                          }
   2949                                        }
   2950                                        else if (strncmp((char *)uuid,"001B",4) == 0) // RoadT_2C
   \                     ??RoadBrd_ParseString_462: (+1)
   \   00002AC8   0x2204             MOVS     R2,#+4
   \   00002ACA   0xF8DF 0x1E60      LDR.W    R1,??RoadBrd_ParseString_461+0x10
   \   00002ACE   0xA836             ADD      R0,SP,#+216
   \   00002AD0   0x.... 0x....      BL       strncmp
   \   00002AD4   0x2800             CMP      R0,#+0
   \   00002AD6   0xD133             BNE.N    ??RoadBrd_ParseString_466
   2951                                        {
   2952                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_2C, Offset, Scale);
   \   00002AD8   0x9A29             LDR      R2,[SP, #+164]
   \   00002ADA   0x9928             LDR      R1,[SP, #+160]
   \   00002ADC   0x200F             MOVS     R0,#+15
   \   00002ADE   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002AE2   0x0006             MOVS     R6,R0
   2953                                          if (Status == HAL_OK)
   \   00002AE4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002AE6   0x2E00             CMP      R6,#+0
   \   00002AE8   0xD116             BNE.N    ??RoadBrd_ParseString_467
   2954                                          {
   2955                                            // Is this a BLE Operation?
   2956                                            if ( BLE_Flag )
   \   00002AEA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002AEC   0x2D00             CMP      R5,#+0
   \   00002AEE   0xD00A             BEQ.N    ??RoadBrd_ParseString_468
   2957                                            {
   2958                                              // Yes...Build and Send BLE Response NOW.
   2959                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_2C</STATUS>");
   \   00002AF0   0xF8DF 0x1ECC      LDR.W    R1,??RoadBrd_ParseString_469
   \   00002AF4   0xA80A             ADD      R0,SP,#+40
   \   00002AF6   0x.... 0x....      BL       strcpy
   2960                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002AFA   0xA80A             ADD      R0,SP,#+40
   \   00002AFC   0x.... 0x....      BL       strlen
   \   00002B00   0xA90A             ADD      R1,SP,#+40
   \   00002B02   0x.... 0x....      BL       BGM111_Transmit
   2961                                            }
   2962                                            sprintf( (char *)tempBffr2, "RoadT_2C Set COMPLETE." );
   \                     ??RoadBrd_ParseString_468: (+1)
   \   00002B06   0xF8DF 0x1EBC      LDR.W    R1,??RoadBrd_ParseString_469+0x4
   \   00002B0A   0xA80A             ADD      R0,SP,#+40
   \   00002B0C   0x.... 0x....      BL       sprintf
   \   00002B10   0xE199             B.N      ??RoadBrd_ParseString_397
   \   00002B12   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_327:
   \   00002B14   0x........         DC32     ?_114
   2963                                          }
   2964                                          else
   2965                                          {
   2966                                            // Is this a BLE Operation?
   2967                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_467: (+1)
   \   00002B18   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002B1A   0x2D00             CMP      R5,#+0
   \   00002B1C   0xD00A             BEQ.N    ??RoadBrd_ParseString_470
   2968                                            {
   2969                                              // Yes...Build and Send BLE Response NOW.
   2970                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_2C_ERR</STATUS>");
   \   00002B1E   0xF8DF 0x1EA8      LDR.W    R1,??RoadBrd_ParseString_469+0x8
   \   00002B22   0xA80A             ADD      R0,SP,#+40
   \   00002B24   0x.... 0x....      BL       strcpy
   2971                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002B28   0xA80A             ADD      R0,SP,#+40
   \   00002B2A   0x.... 0x....      BL       strlen
   \   00002B2E   0xA90A             ADD      R1,SP,#+40
   \   00002B30   0x.... 0x....      BL       BGM111_Transmit
   2972                                            }
   2973                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_470: (+1)
   \   00002B34   0xF8DF 0x16CC      LDR.W    R1,??RoadBrd_ParseString_396+0xC
   \   00002B38   0xA80A             ADD      R0,SP,#+40
   \   00002B3A   0x.... 0x....      BL       sprintf
   \   00002B3E   0xE182             B.N      ??RoadBrd_ParseString_397
   2974                                          }
   2975                                        }
   2976                                        else if (strncmp((char *)uuid,"001D",4) == 0) // RoadT_3C
   \                     ??RoadBrd_ParseString_466: (+1)
   \   00002B40   0x2204             MOVS     R2,#+4
   \   00002B42   0xF8DF 0x1E88      LDR.W    R1,??RoadBrd_ParseString_469+0xC
   \   00002B46   0xA836             ADD      R0,SP,#+216
   \   00002B48   0x.... 0x....      BL       strncmp
   \   00002B4C   0x2800             CMP      R0,#+0
   \   00002B4E   0xD135             BNE.N    ??RoadBrd_ParseString_471
   2977                                        {
   2978                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_3C, Offset, Scale);
   \   00002B50   0x9A29             LDR      R2,[SP, #+164]
   \   00002B52   0x9928             LDR      R1,[SP, #+160]
   \   00002B54   0x2010             MOVS     R0,#+16
   \   00002B56   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002B5A   0x0006             MOVS     R6,R0
   2979                                          if (Status == HAL_OK)
   \   00002B5C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002B5E   0x2E00             CMP      R6,#+0
   \   00002B60   0xD118             BNE.N    ??RoadBrd_ParseString_472
   2980                                          {
   2981                                            // Is this a BLE Operation?
   2982                                            if ( BLE_Flag )
   \   00002B62   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002B64   0x2D00             CMP      R5,#+0
   \   00002B66   0xD00A             BEQ.N    ??RoadBrd_ParseString_473
   2983                                            {
   2984                                              // Yes...Build and Send BLE Response NOW.
   2985                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_3C</STATUS>");
   \   00002B68   0xF8DF 0x1E64      LDR.W    R1,??RoadBrd_ParseString_469+0x10
   \   00002B6C   0xA80A             ADD      R0,SP,#+40
   \   00002B6E   0x.... 0x....      BL       strcpy
   2986                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002B72   0xA80A             ADD      R0,SP,#+40
   \   00002B74   0x.... 0x....      BL       strlen
   \   00002B78   0xA90A             ADD      R1,SP,#+40
   \   00002B7A   0x.... 0x....      BL       BGM111_Transmit
   2987                                            }
   2988                                            sprintf( (char *)tempBffr2, "RoadT_3C Set COMPLETE." );
   \                     ??RoadBrd_ParseString_473: (+1)
   \   00002B7E   0xF8DF 0x1E54      LDR.W    R1,??RoadBrd_ParseString_469+0x14
   \   00002B82   0xA80A             ADD      R0,SP,#+40
   \   00002B84   0x.... 0x....      BL       sprintf
   \   00002B88   0xE15D             B.N      ??RoadBrd_ParseString_397
   \   00002B8A   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_331:
   \   00002B8C   0x........         DC32     ?_115
   \   00002B90   0x........         DC32     ?_116
   2989                                          }
   2990                                          else
   2991                                          {
   2992                                            // Is this a BLE Operation?
   2993                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_472: (+1)
   \   00002B94   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002B96   0x2D00             CMP      R5,#+0
   \   00002B98   0xD00A             BEQ.N    ??RoadBrd_ParseString_474
   2994                                            {
   2995                                              // Yes...Build and Send BLE Response NOW.
   2996                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_3C_ERR</STATUS>");
   \   00002B9A   0xF8DF 0x1ECC      LDR.W    R1,??RoadBrd_ParseString_475
   \   00002B9E   0xA80A             ADD      R0,SP,#+40
   \   00002BA0   0x.... 0x....      BL       strcpy
   2997                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002BA4   0xA80A             ADD      R0,SP,#+40
   \   00002BA6   0x.... 0x....      BL       strlen
   \   00002BAA   0xA90A             ADD      R1,SP,#+40
   \   00002BAC   0x.... 0x....      BL       BGM111_Transmit
   2998                                            }
   2999                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_474: (+1)
   \   00002BB0   0xF8DF 0x1650      LDR.W    R1,??RoadBrd_ParseString_396+0xC
   \   00002BB4   0xA80A             ADD      R0,SP,#+40
   \   00002BB6   0x.... 0x....      BL       sprintf
   \   00002BBA   0xE144             B.N      ??RoadBrd_ParseString_397
   3000                                          }
   3001                                        }
   3002                                        else if (strncmp((char *)uuid,"001F",4) == 0) // RoadT_4C
   \                     ??RoadBrd_ParseString_471: (+1)
   \   00002BBC   0x2204             MOVS     R2,#+4
   \   00002BBE   0xF8DF 0x1EAC      LDR.W    R1,??RoadBrd_ParseString_475+0x4
   \   00002BC2   0xA836             ADD      R0,SP,#+216
   \   00002BC4   0x.... 0x....      BL       strncmp
   \   00002BC8   0x2800             CMP      R0,#+0
   \   00002BCA   0xD137             BNE.N    ??RoadBrd_ParseString_476
   3003                                        {
   3004                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_4C, Offset, Scale);
   \   00002BCC   0x9A29             LDR      R2,[SP, #+164]
   \   00002BCE   0x9928             LDR      R1,[SP, #+160]
   \   00002BD0   0x2011             MOVS     R0,#+17
   \   00002BD2   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002BD6   0x0006             MOVS     R6,R0
   3005                                          if (Status == HAL_OK)
   \   00002BD8   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002BDA   0x2E00             CMP      R6,#+0
   \   00002BDC   0xD11A             BNE.N    ??RoadBrd_ParseString_477
   3006                                          {
   3007                                            // Is this a BLE Operation?
   3008                                            if ( BLE_Flag )
   \   00002BDE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002BE0   0x2D00             CMP      R5,#+0
   \   00002BE2   0xD00A             BEQ.N    ??RoadBrd_ParseString_478
   3009                                            {
   3010                                              // Yes...Build and Send BLE Response NOW.
   3011                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_4C</STATUS>");
   \   00002BE4   0xF8DF 0x1E88      LDR.W    R1,??RoadBrd_ParseString_475+0x8
   \   00002BE8   0xA80A             ADD      R0,SP,#+40
   \   00002BEA   0x.... 0x....      BL       strcpy
   3012                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002BEE   0xA80A             ADD      R0,SP,#+40
   \   00002BF0   0x.... 0x....      BL       strlen
   \   00002BF4   0xA90A             ADD      R1,SP,#+40
   \   00002BF6   0x.... 0x....      BL       BGM111_Transmit
   3013                                            }
   3014                                            sprintf( (char *)tempBffr2, "RoadT_4C Set COMPLETE." );
   \                     ??RoadBrd_ParseString_478: (+1)
   \   00002BFA   0xF8DF 0x1E78      LDR.W    R1,??RoadBrd_ParseString_475+0xC
   \   00002BFE   0xA80A             ADD      R0,SP,#+40
   \   00002C00   0x.... 0x....      BL       sprintf
   \   00002C04   0xE11F             B.N      ??RoadBrd_ParseString_397
   \   00002C06   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_334:
   \   00002C08   0x........         DC32     ?_117
   \   00002C0C   0x........         DC32     ?_118
   \   00002C10   0x........         DC32     ?_119
   3015                                          }
   3016                                          else
   3017                                          {
   3018                                            // Is this a BLE Operation?
   3019                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_477: (+1)
   \   00002C14   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002C16   0x2D00             CMP      R5,#+0
   \   00002C18   0xD00A             BEQ.N    ??RoadBrd_ParseString_479
   3020                                            {
   3021                                              // Yes...Build and Send BLE Response NOW.
   3022                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_4C_ERR</STATUS>");
   \   00002C1A   0xF8DF 0x1E5C      LDR.W    R1,??RoadBrd_ParseString_475+0x10
   \   00002C1E   0xA80A             ADD      R0,SP,#+40
   \   00002C20   0x.... 0x....      BL       strcpy
   3023                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002C24   0xA80A             ADD      R0,SP,#+40
   \   00002C26   0x.... 0x....      BL       strlen
   \   00002C2A   0xA90A             ADD      R1,SP,#+40
   \   00002C2C   0x.... 0x....      BL       BGM111_Transmit
   3024                                            }
   3025                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_479: (+1)
   \   00002C30   0xF8DF 0x15D0      LDR.W    R1,??RoadBrd_ParseString_396+0xC
   \   00002C34   0xA80A             ADD      R0,SP,#+40
   \   00002C36   0x.... 0x....      BL       sprintf
   \   00002C3A   0xE104             B.N      ??RoadBrd_ParseString_397
   3026                                          }
   3027                                        }
   3028                                        else if (strncmp((char *)uuid,"0021",4) == 0) // RoadT_5C
   \                     ??RoadBrd_ParseString_476: (+1)
   \   00002C3C   0x2204             MOVS     R2,#+4
   \   00002C3E   0xF8DF 0x1ECC      LDR.W    R1,??RoadBrd_ParseString_480
   \   00002C42   0xA836             ADD      R0,SP,#+216
   \   00002C44   0x.... 0x....      BL       strncmp
   \   00002C48   0x2800             CMP      R0,#+0
   \   00002C4A   0xD133             BNE.N    ??RoadBrd_ParseString_481
   3029                                        {
   3030                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_5C, Offset, Scale);
   \   00002C4C   0x9A29             LDR      R2,[SP, #+164]
   \   00002C4E   0x9928             LDR      R1,[SP, #+160]
   \   00002C50   0x2012             MOVS     R0,#+18
   \   00002C52   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002C56   0x0006             MOVS     R6,R0
   3031                                          if (Status == HAL_OK)
   \   00002C58   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002C5A   0x2E00             CMP      R6,#+0
   \   00002C5C   0xD116             BNE.N    ??RoadBrd_ParseString_482
   3032                                          {
   3033                                            // Is this a BLE Operation?
   3034                                            if ( BLE_Flag )
   \   00002C5E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002C60   0x2D00             CMP      R5,#+0
   \   00002C62   0xD00A             BEQ.N    ??RoadBrd_ParseString_483
   3035                                            {
   3036                                              // Yes...Build and Send BLE Response NOW.
   3037                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_5C</STATUS>");
   \   00002C64   0xF8DF 0x1EA8      LDR.W    R1,??RoadBrd_ParseString_480+0x4
   \   00002C68   0xA80A             ADD      R0,SP,#+40
   \   00002C6A   0x.... 0x....      BL       strcpy
   3038                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002C6E   0xA80A             ADD      R0,SP,#+40
   \   00002C70   0x.... 0x....      BL       strlen
   \   00002C74   0xA90A             ADD      R1,SP,#+40
   \   00002C76   0x.... 0x....      BL       BGM111_Transmit
   3039                                            }
   3040                                            sprintf( (char *)tempBffr2, "RoadT_5C Set COMPLETE." );
   \                     ??RoadBrd_ParseString_483: (+1)
   \   00002C7A   0xF8DF 0x1E98      LDR.W    R1,??RoadBrd_ParseString_480+0x8
   \   00002C7E   0xA80A             ADD      R0,SP,#+40
   \   00002C80   0x.... 0x....      BL       sprintf
   \   00002C84   0xE0DF             B.N      ??RoadBrd_ParseString_397
   \   00002C86   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_340:
   \   00002C88   0x........         DC32     ?_120
   3041                                          }
   3042                                          else
   3043                                          {
   3044                                            // Is this a BLE Operation?
   3045                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_482: (+1)
   \   00002C8C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002C8E   0x2D00             CMP      R5,#+0
   \   00002C90   0xD00A             BEQ.N    ??RoadBrd_ParseString_484
   3046                                            {
   3047                                              // Yes...Build and Send BLE Response NOW.
   3048                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_5C_ERR</STATUS>");
   \   00002C92   0xF8DF 0x1E84      LDR.W    R1,??RoadBrd_ParseString_480+0xC
   \   00002C96   0xA80A             ADD      R0,SP,#+40
   \   00002C98   0x.... 0x....      BL       strcpy
   3049                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002C9C   0xA80A             ADD      R0,SP,#+40
   \   00002C9E   0x.... 0x....      BL       strlen
   \   00002CA2   0xA90A             ADD      R1,SP,#+40
   \   00002CA4   0x.... 0x....      BL       BGM111_Transmit
   3050                                            }
   3051                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_484: (+1)
   \   00002CA8   0xF8DF 0x1558      LDR.W    R1,??RoadBrd_ParseString_396+0xC
   \   00002CAC   0xA80A             ADD      R0,SP,#+40
   \   00002CAE   0x.... 0x....      BL       sprintf
   \   00002CB2   0xE0C8             B.N      ??RoadBrd_ParseString_397
   3052                                          }
   3053                                        }
   3054                                        else if (strncmp((char *)uuid,"0023",4) == 0) // RoadT_6C
   \                     ??RoadBrd_ParseString_481: (+1)
   \   00002CB4   0x2204             MOVS     R2,#+4
   \   00002CB6   0xF8DF 0x1E64      LDR.W    R1,??RoadBrd_ParseString_480+0x10
   \   00002CBA   0xA836             ADD      R0,SP,#+216
   \   00002CBC   0x.... 0x....      BL       strncmp
   \   00002CC0   0x2800             CMP      R0,#+0
   \   00002CC2   0xD133             BNE.N    ??RoadBrd_ParseString_485
   3055                                        {
   3056                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_6C, Offset, Scale);
   \   00002CC4   0x9A29             LDR      R2,[SP, #+164]
   \   00002CC6   0x9928             LDR      R1,[SP, #+160]
   \   00002CC8   0x2013             MOVS     R0,#+19
   \   00002CCA   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002CCE   0x0006             MOVS     R6,R0
   3057                                          if (Status == HAL_OK)
   \   00002CD0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002CD2   0x2E00             CMP      R6,#+0
   \   00002CD4   0xD116             BNE.N    ??RoadBrd_ParseString_486
   3058                                          {
   3059                                            // Is this a BLE Operation?
   3060                                            if ( BLE_Flag )
   \   00002CD6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002CD8   0x2D00             CMP      R5,#+0
   \   00002CDA   0xD00A             BEQ.N    ??RoadBrd_ParseString_487
   3061                                            {
   3062                                              // Yes...Build and Send BLE Response NOW.
   3063                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_6C</STATUS>");
   \   00002CDC   0xF8DF 0x1ED0      LDR.W    R1,??RoadBrd_ParseString_488
   \   00002CE0   0xA80A             ADD      R0,SP,#+40
   \   00002CE2   0x.... 0x....      BL       strcpy
   3064                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002CE6   0xA80A             ADD      R0,SP,#+40
   \   00002CE8   0x.... 0x....      BL       strlen
   \   00002CEC   0xA90A             ADD      R1,SP,#+40
   \   00002CEE   0x.... 0x....      BL       BGM111_Transmit
   3065                                            }
   3066                                            sprintf( (char *)tempBffr2, "RoadT_6C Set COMPLETE." );
   \                     ??RoadBrd_ParseString_487: (+1)
   \   00002CF2   0xF8DF 0x1EC0      LDR.W    R1,??RoadBrd_ParseString_488+0x4
   \   00002CF6   0xA80A             ADD      R0,SP,#+40
   \   00002CF8   0x.... 0x....      BL       sprintf
   \   00002CFC   0xE0A3             B.N      ??RoadBrd_ParseString_397
   \   00002CFE   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_347:
   \   00002D00   0x........         DC32     ?_121
   3067                                          }
   3068                                          else
   3069                                          {
   3070                                            // Is this a BLE Operation?
   3071                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_486: (+1)
   \   00002D04   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002D06   0x2D00             CMP      R5,#+0
   \   00002D08   0xD00A             BEQ.N    ??RoadBrd_ParseString_489
   3072                                            {
   3073                                              // Yes...Build and Send BLE Response NOW.
   3074                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_6C_ERR</STATUS>");
   \   00002D0A   0xF8DF 0x1EAC      LDR.W    R1,??RoadBrd_ParseString_488+0x8
   \   00002D0E   0xA80A             ADD      R0,SP,#+40
   \   00002D10   0x.... 0x....      BL       strcpy
   3075                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002D14   0xA80A             ADD      R0,SP,#+40
   \   00002D16   0x.... 0x....      BL       strlen
   \   00002D1A   0xA90A             ADD      R1,SP,#+40
   \   00002D1C   0x.... 0x....      BL       BGM111_Transmit
   3076                                            }
   3077                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_489: (+1)
   \   00002D20   0xF8DF 0x14E0      LDR.W    R1,??RoadBrd_ParseString_396+0xC
   \   00002D24   0xA80A             ADD      R0,SP,#+40
   \   00002D26   0x.... 0x....      BL       sprintf
   \   00002D2A   0xE08C             B.N      ??RoadBrd_ParseString_397
   3078                                          }
   3079                                        }
   3080                                        else if (strncmp((char *)uuid,"0025",4) == 0) // RoadT_7C
   \                     ??RoadBrd_ParseString_485: (+1)
   \   00002D2C   0x2204             MOVS     R2,#+4
   \   00002D2E   0xF8DF 0x1E8C      LDR.W    R1,??RoadBrd_ParseString_488+0xC
   \   00002D32   0xA836             ADD      R0,SP,#+216
   \   00002D34   0x.... 0x....      BL       strncmp
   \   00002D38   0x2800             CMP      R0,#+0
   \   00002D3A   0xD135             BNE.N    ??RoadBrd_ParseString_490
   3081                                        {
   3082                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_7C, Offset, Scale);
   \   00002D3C   0x9A29             LDR      R2,[SP, #+164]
   \   00002D3E   0x9928             LDR      R1,[SP, #+160]
   \   00002D40   0x2014             MOVS     R0,#+20
   \   00002D42   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002D46   0x0006             MOVS     R6,R0
   3083                                          if (Status == HAL_OK)
   \   00002D48   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002D4A   0x2E00             CMP      R6,#+0
   \   00002D4C   0xD118             BNE.N    ??RoadBrd_ParseString_491
   3084                                          {
   3085                                            // Is this a BLE Operation?
   3086                                            if ( BLE_Flag )
   \   00002D4E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002D50   0x2D00             CMP      R5,#+0
   \   00002D52   0xD00A             BEQ.N    ??RoadBrd_ParseString_492
   3087                                            {
   3088                                              // Yes...Build and Send BLE Response NOW.
   3089                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_7C</STATUS>");
   \   00002D54   0xF8DF 0x1EF8      LDR.W    R1,??RoadBrd_ParseString_493
   \   00002D58   0xA80A             ADD      R0,SP,#+40
   \   00002D5A   0x.... 0x....      BL       strcpy
   3090                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002D5E   0xA80A             ADD      R0,SP,#+40
   \   00002D60   0x.... 0x....      BL       strlen
   \   00002D64   0xA90A             ADD      R1,SP,#+40
   \   00002D66   0x.... 0x....      BL       BGM111_Transmit
   3091                                            }
   3092                                            sprintf( (char *)tempBffr2, "RoadT_7C Set COMPLETE." );
   \                     ??RoadBrd_ParseString_492: (+1)
   \   00002D6A   0xF8DF 0x1EE8      LDR.W    R1,??RoadBrd_ParseString_493+0x4
   \   00002D6E   0xA80A             ADD      R0,SP,#+40
   \   00002D70   0x.... 0x....      BL       sprintf
   \   00002D74   0xE067             B.N      ??RoadBrd_ParseString_397
   \   00002D76   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_353:
   \   00002D78   0x........         DC32     ?_122
   \   00002D7C   0x........         DC32     ?_123
   3093                                          }
   3094                                          else
   3095                                          {
   3096                                            // Is this a BLE Operation?
   3097                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_491: (+1)
   \   00002D80   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002D82   0x2D00             CMP      R5,#+0
   \   00002D84   0xD00A             BEQ.N    ??RoadBrd_ParseString_494
   3098                                            {
   3099                                              // Yes...Build and Send BLE Response NOW.
   3100                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_7C_ERR</STATUS>");
   \   00002D86   0xF8DF 0x1ED0      LDR.W    R1,??RoadBrd_ParseString_493+0x8
   \   00002D8A   0xA80A             ADD      R0,SP,#+40
   \   00002D8C   0x.... 0x....      BL       strcpy
   3101                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002D90   0xA80A             ADD      R0,SP,#+40
   \   00002D92   0x.... 0x....      BL       strlen
   \   00002D96   0xA90A             ADD      R1,SP,#+40
   \   00002D98   0x.... 0x....      BL       BGM111_Transmit
   3102                                            }
   3103                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_494: (+1)
   \   00002D9C   0xF8DF 0x1464      LDR.W    R1,??RoadBrd_ParseString_396+0xC
   \   00002DA0   0xA80A             ADD      R0,SP,#+40
   \   00002DA2   0x.... 0x....      BL       sprintf
   \   00002DA6   0xE04E             B.N      ??RoadBrd_ParseString_397
   3104                                          }
   3105                                        }
   3106                                        else if (strncmp((char *)uuid,"0027",4) == 0) // RoadT_8C
   \                     ??RoadBrd_ParseString_490: (+1)
   \   00002DA8   0x2204             MOVS     R2,#+4
   \   00002DAA   0xF8DF 0x1EB0      LDR.W    R1,??RoadBrd_ParseString_493+0xC
   \   00002DAE   0xA836             ADD      R0,SP,#+216
   \   00002DB0   0x.... 0x....      BL       strncmp
   \   00002DB4   0x2800             CMP      R0,#+0
   \   00002DB6   0xD133             BNE.N    ??RoadBrd_ParseString_495
   3107                                        {
   3108                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_8C, Offset, Scale);
   \   00002DB8   0x9A29             LDR      R2,[SP, #+164]
   \   00002DBA   0x9928             LDR      R1,[SP, #+160]
   \   00002DBC   0x2015             MOVS     R0,#+21
   \   00002DBE   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002DC2   0x0006             MOVS     R6,R0
   3109                                          if (Status == HAL_OK)
   \   00002DC4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002DC6   0x2E00             CMP      R6,#+0
   \   00002DC8   0xD113             BNE.N    ??RoadBrd_ParseString_496
   3110                                          {
   3111                                            // Is this a BLE Operation?
   3112                                            if ( BLE_Flag )
   \   00002DCA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002DCC   0x2D00             CMP      R5,#+0
   \   00002DCE   0xD00A             BEQ.N    ??RoadBrd_ParseString_497
   3113                                            {
   3114                                              // Yes...Build and Send BLE Response NOW.
   3115                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_8C</STATUS>");
   \   00002DD0   0xF8DF 0x1E8C      LDR.W    R1,??RoadBrd_ParseString_493+0x10
   \   00002DD4   0xA80A             ADD      R0,SP,#+40
   \   00002DD6   0x.... 0x....      BL       strcpy
   3116                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002DDA   0xA80A             ADD      R0,SP,#+40
   \   00002DDC   0x.... 0x....      BL       strlen
   \   00002DE0   0xA90A             ADD      R1,SP,#+40
   \   00002DE2   0x.... 0x....      BL       BGM111_Transmit
   3117                                            }
   3118                                            sprintf( (char *)tempBffr2, "RoadT_8C Set COMPLETE." );
   \                     ??RoadBrd_ParseString_497: (+1)
   \   00002DE6   0xF8DF 0x1E7C      LDR.W    R1,??RoadBrd_ParseString_493+0x14
   \   00002DEA   0xA80A             ADD      R0,SP,#+40
   \   00002DEC   0x.... 0x....      BL       sprintf
   \   00002DF0   0xE029             B.N      ??RoadBrd_ParseString_397
   3119                                          }
   3120                                          else
   3121                                          {
   3122                                            // Is this a BLE Operation?
   3123                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_496: (+1)
   \   00002DF2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002DF4   0x2D00             CMP      R5,#+0
   \   00002DF6   0xD00A             BEQ.N    ??RoadBrd_ParseString_498
   3124                                            {
   3125                                              // Yes...Build and Send BLE Response NOW.
   3126                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_8C_ERR</STATUS>");
   \   00002DF8   0xF8DF 0x1EFC      LDR.W    R1,??RoadBrd_ParseString_499
   \   00002DFC   0xA80A             ADD      R0,SP,#+40
   \   00002DFE   0x.... 0x....      BL       strcpy
   3127                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002E02   0xA80A             ADD      R0,SP,#+40
   \   00002E04   0x.... 0x....      BL       strlen
   \   00002E08   0xA90A             ADD      R1,SP,#+40
   \   00002E0A   0x.... 0x....      BL       BGM111_Transmit
   3128                                            }
   3129                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_498: (+1)
   \   00002E0E   0xF8DF 0x13F4      LDR.W    R1,??RoadBrd_ParseString_396+0xC
   \   00002E12   0xA80A             ADD      R0,SP,#+40
   \   00002E14   0x.... 0x....      BL       sprintf
   \   00002E18   0xE015             B.N      ??RoadBrd_ParseString_397
   \   00002E1A   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_358:
   \   00002E1C   0x........         DC32     ?_124
   3130                                          }
   3131                                        }
   3132                                        else
   3133                                        {
   3134                                          // Is this a BLE Operation?
   3135                                          if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_495: (+1)
   \   00002E20   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002E22   0x2D00             CMP      R5,#+0
   \   00002E24   0xD00A             BEQ.N    ??RoadBrd_ParseString_500
   3136                                          {
   3137                                            // Yes...Build and Send BLE Response NOW.
   3138                                            strcpy( (char *)tempBffr2, "<STATUS>CMD_TCS_BADUUID</STATUS>");
   \   00002E26   0xF8DF 0x1ED4      LDR.W    R1,??RoadBrd_ParseString_499+0x4
   \   00002E2A   0xA80A             ADD      R0,SP,#+40
   \   00002E2C   0x.... 0x....      BL       strcpy
   3139                                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002E30   0xA80A             ADD      R0,SP,#+40
   \   00002E32   0x.... 0x....      BL       strlen
   \   00002E36   0xA90A             ADD      R1,SP,#+40
   \   00002E38   0x.... 0x....      BL       BGM111_Transmit
   3140                                          }
   3141                                          sprintf( (char *)tempBffr2, "TCS SYNTAX ERROR: Bad UUID.\r\n" );
   \                     ??RoadBrd_ParseString_500: (+1)
   \   00002E3C   0xF8DF 0x1EC0      LDR.W    R1,??RoadBrd_ParseString_499+0x8
   \   00002E40   0xA80A             ADD      R0,SP,#+40
   \   00002E42   0x.... 0x....      BL       sprintf
   3142                                        }
   3143                                        Status = HAL_OK;
   \                     ??RoadBrd_ParseString_397: (+1)
   \   00002E46   0x2000             MOVS     R0,#+0
   \   00002E48   0x0006             MOVS     R6,R0
   \   00002E4A   0xE011             B.N      ??RoadBrd_ParseString_388
   3144                                      }
   3145                                      else
   3146                                      {
   3147                                        // Is this a BLE Operation?
   3148                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_392: (+1)
   \   00002E4C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002E4E   0x2D00             CMP      R5,#+0
   \   00002E50   0xD009             BEQ.N    ??RoadBrd_ParseString_501
   3149                                        {
   3150                                          // Yes...Build and Send BLE Response NOW.
   3151                                          strcpy( (char *)tempBffr2, "<STATUS>CMD_TCS_BADPARAM</STATUS>");
   \   00002E52   0x49BF             LDR.N    R1,??RoadBrd_ParseString_391
   \   00002E54   0xA80A             ADD      R0,SP,#+40
   \   00002E56   0x.... 0x....      BL       strcpy
   3152                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002E5A   0xA80A             ADD      R0,SP,#+40
   \   00002E5C   0x.... 0x....      BL       strlen
   \   00002E60   0xA90A             ADD      R1,SP,#+40
   \   00002E62   0x.... 0x....      BL       BGM111_Transmit
   3153                                        }
   3154                                        
   3155                                        strcpy( (char *)tempBffr2, "TCS SYNTAX ERROR: Wrong Number of Parameters.\r\n");
   \                     ??RoadBrd_ParseString_501: (+1)
   \   00002E66   0xF8DF 0x1E9C      LDR.W    R1,??RoadBrd_ParseString_499+0xC
   \   00002E6A   0xA80A             ADD      R0,SP,#+40
   \   00002E6C   0x.... 0x....      BL       strcpy
   3156                                      }
   3157                                    } // EndElse (flag == 0)
   3158                                  } // EndElse (tempBffr[3]!=':')
   3159                                  break;
   \                     ??RoadBrd_ParseString_388: (+1)
   \   00002E70   0xF001 0xB84D      B.W      ??RoadBrd_ParseString_376
   3160                                  //------------------ TCR Command: Calibration Read Command
   3161                                case 'R':
   3162                                  // Build Read Calibration Dump Part I....
   3163                                  // Is this a BLE Operation?
   3164                                  if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_383: (+1)
   \   00002E74   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002E76   0x2D00             CMP      R5,#+0
   \   00002E78   0xD00D             BEQ.N    ??RoadBrd_ParseString_502
   3165                                  {
   3166                                    // Yes...Build and Send BLE Response NOW.
   3167                                    sprintf( (char *)tempBffr2, "<STATUS>TCR:%s\\",  RoadBrd_CAL_GetTimeString());
   \   00002E7A   0x.... 0x....      BL       RoadBrd_CAL_GetTimeString
   \   00002E7E   0x0002             MOVS     R2,R0
   \   00002E80   0xF8DF 0x1E84      LDR.W    R1,??RoadBrd_ParseString_499+0x10
   \   00002E84   0xA80A             ADD      R0,SP,#+40
   \   00002E86   0x.... 0x....      BL       sprintf
   3168                                    BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002E8A   0xA80A             ADD      R0,SP,#+40
   \   00002E8C   0x.... 0x....      BL       strlen
   \   00002E90   0xA90A             ADD      R1,SP,#+40
   \   00002E92   0x.... 0x....      BL       BGM111_Transmit
   3169                                  }
   3170                                  
   3171                                  // Send string to UART..
   3172                                  sprintf( (char *)tempBffr2, "CALIBRATION DATA\r\nDate: %s\r\n",  RoadBrd_CAL_GetTimeString());
   \                     ??RoadBrd_ParseString_502: (+1)
   \   00002E96   0x.... 0x....      BL       RoadBrd_CAL_GetTimeString
   \   00002E9A   0x0002             MOVS     R2,R0
   \   00002E9C   0xF8DF 0x1F14      LDR.W    R1,??RoadBrd_ParseString_503
   \   00002EA0   0xA80A             ADD      R0,SP,#+40
   \   00002EA2   0x.... 0x....      BL       sprintf
   3173          #ifdef NUCLEO
   3174                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   3175          #else
   3176                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00002EA6   0xA90A             ADD      R1,SP,#+40
   \   00002EA8   0x2000             MOVS     R0,#+0
   \   00002EAA   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00002EAE   0x0006             MOVS     R6,R0
   3177          #endif
   3178                                  if (Status != HAL_OK)
   \   00002EB0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002EB2   0x2E00             CMP      R6,#+0
   \   00002EB4   0xD003             BEQ.N    ??RoadBrd_ParseString_504
   3179                                      return Status;
   \   00002EB6   0x0030             MOVS     R0,R6
   \   00002EB8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002EBA   0xF001 0xBD11      B.W      ??RoadBrd_ParseString_4
   3180                                  // Build Read Calibration Dump Part II....
   3181                                  // Send string to UART..
   3182                                  sprintf( (char *)tempBffr2, "Name		        UUID		Slope		Offset\r\n" );
   \                     ??RoadBrd_ParseString_504: (+1)
   \   00002EBE   0xF8DF 0x1EF8      LDR.W    R1,??RoadBrd_ParseString_503+0x4
   \   00002EC2   0xA80A             ADD      R0,SP,#+40
   \   00002EC4   0x.... 0x....      BL       sprintf
   3183          #ifdef NUCLEO
   3184                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   3185          #else
   3186                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00002EC8   0xA90A             ADD      R1,SP,#+40
   \   00002ECA   0x2000             MOVS     R0,#+0
   \   00002ECC   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00002ED0   0x0006             MOVS     R6,R0
   3187          #endif
   3188                                  if (Status != HAL_OK)
   \   00002ED2   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002ED4   0x2E00             CMP      R6,#+0
   \   00002ED6   0xD009             BEQ.N    ??RoadBrd_ParseString_505
   3189                                      return Status;
   \   00002ED8   0x0030             MOVS     R0,R6
   \   00002EDA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002EDC   0xF001 0xBD00      B.W      ??RoadBrd_ParseString_4
   \                     ??RoadBrd_ParseString_373:
   \   00002EE0   0x........         DC32     ?_125
   \   00002EE4   0x........         DC32     ?_24
   \   00002EE8   0x........         DC32     ?_126
   3190                                  // NOW, Build Data String..
   3191                                  for (x=0; x<CAL_LAST_VALUE; x++)
   \                     ??RoadBrd_ParseString_505: (+1)
   \   00002EEC   0x2000             MOVS     R0,#+0
   \   00002EEE   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_506: (+1)
   \   00002EF0   0x2F16             CMP      R7,#+22
   \   00002EF2   0xF280 0x8766      BGE.W    ??RoadBrd_ParseString_507
   3192                                  {
   3193                                    // Build String
   3194                                    switch(x)
   \   00002EF6   0x2F00             CMP      R7,#+0
   \   00002EF8   0xD036             BEQ.N    ??RoadBrd_ParseString_508
   \   00002EFA   0x2F02             CMP      R7,#+2
   \   00002EFC   0xF000 0x80DE      BEQ.W    ??RoadBrd_ParseString_509
   \   00002F00   0xF0C0 0x808A      BCC.W    ??RoadBrd_ParseString_510
   \   00002F04   0x2F04             CMP      R7,#+4
   \   00002F06   0xF000 0x8183      BEQ.W    ??RoadBrd_ParseString_511
   \   00002F0A   0xF0C0 0x812B      BCC.W    ??RoadBrd_ParseString_512
   \   00002F0E   0x2F06             CMP      R7,#+6
   \   00002F10   0xF000 0x8226      BEQ.W    ??RoadBrd_ParseString_513
   \   00002F14   0xF0C0 0x81D0      BCC.W    ??RoadBrd_ParseString_514
   \   00002F18   0x2F08             CMP      R7,#+8
   \   00002F1A   0xF000 0x82C9      BEQ.W    ??RoadBrd_ParseString_515
   \   00002F1E   0xF0C0 0x8273      BCC.W    ??RoadBrd_ParseString_516
   \   00002F22   0x2F0A             CMP      R7,#+10
   \   00002F24   0xF000 0x836A      BEQ.W    ??RoadBrd_ParseString_517
   \   00002F28   0xF0C0 0x8316      BCC.W    ??RoadBrd_ParseString_518
   \   00002F2C   0x2F0C             CMP      R7,#+12
   \   00002F2E   0xF000 0x8409      BEQ.W    ??RoadBrd_ParseString_519
   \   00002F32   0xF0C0 0x83B5      BCC.W    ??RoadBrd_ParseString_520
   \   00002F36   0x2F0E             CMP      R7,#+14
   \   00002F38   0xF000 0x84A8      BEQ.W    ??RoadBrd_ParseString_521
   \   00002F3C   0xF0C0 0x8454      BCC.W    ??RoadBrd_ParseString_522
   \   00002F40   0x2F10             CMP      R7,#+16
   \   00002F42   0xF000 0x8549      BEQ.W    ??RoadBrd_ParseString_523
   \   00002F46   0xF0C0 0x84F3      BCC.W    ??RoadBrd_ParseString_524
   \   00002F4A   0x2F12             CMP      R7,#+18
   \   00002F4C   0xF000 0x85E8      BEQ.W    ??RoadBrd_ParseString_525
   \   00002F50   0xF0C0 0x8594      BCC.W    ??RoadBrd_ParseString_526
   \   00002F54   0x2F14             CMP      R7,#+20
   \   00002F56   0xF000 0x8687      BEQ.W    ??RoadBrd_ParseString_527
   \   00002F5A   0xF0C0 0x8631      BCC.W    ??RoadBrd_ParseString_528
   \   00002F5E   0x2F15             CMP      R7,#+21
   \   00002F60   0xF000 0x86D4      BEQ.W    ??RoadBrd_ParseString_529
   \   00002F64   0xF000 0xBF19      B.W      ??RoadBrd_ParseString_530
   3195                                    {
   3196                                      case CAL_SHNT_VLTG: //CAL_SHNT_VLTG Values
   3197                                        // Is this a BLE Operation?
   3198                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_508: (+1)
   \   00002F68   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002F6A   0x2D00             CMP      R5,#+0
   \   00002F6C   0xD024             BEQ.N    ??RoadBrd_ParseString_531
   3199                                        {
   3200                                          // Yes...Build and Send BLE Response NOW.
   3201                                          sprintf( (char *)tempBffr2, "%s:0002//%1.4f//%2.3f//", 
   3202                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3203                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3204                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00002F6E   0x0038             MOVS     R0,R7
   \   00002F70   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002F72   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00002F76   0x4683             MOV      R11,R0
   \   00002F78   0x0038             MOVS     R0,R7
   \   00002F7A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002F7C   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00002F80   0x4681             MOV      R9,R0
   \   00002F82   0x0038             MOVS     R0,R7
   \   00002F84   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002F86   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00002F8A   0x4682             MOV      R10,R0
   \   00002F8C   0x4658             MOV      R0,R11
   \   00002F8E   0x.... 0x....      BL       __aeabi_f2d
   \   00002F92   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00002F96   0x4648             MOV      R0,R9
   \   00002F98   0x.... 0x....      BL       __aeabi_f2d
   \   00002F9C   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00002FA0   0x4652             MOV      R2,R10
   \   00002FA2   0xF8DF 0x1EE4      LDR.W    R1,??RoadBrd_ParseString_532
   \   00002FA6   0xA80A             ADD      R0,SP,#+40
   \   00002FA8   0x.... 0x....      BL       sprintf
   3205                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002FAC   0xA80A             ADD      R0,SP,#+40
   \   00002FAE   0x.... 0x....      BL       strlen
   \   00002FB2   0xA90A             ADD      R1,SP,#+40
   \   00002FB4   0x.... 0x....      BL       BGM111_Transmit
   3206                                        }
   3207                                        sprintf( (char *)tempBffr2, "%s	0002		%1.4f		%2.3f\r\n", 
   3208                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3209                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3210                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_531: (+1)
   \   00002FB8   0x0038             MOVS     R0,R7
   \   00002FBA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002FBC   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00002FC0   0x4683             MOV      R11,R0
   \   00002FC2   0x0038             MOVS     R0,R7
   \   00002FC4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002FC6   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00002FCA   0x4681             MOV      R9,R0
   \   00002FCC   0x0038             MOVS     R0,R7
   \   00002FCE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002FD0   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00002FD4   0x4682             MOV      R10,R0
   \   00002FD6   0x4658             MOV      R0,R11
   \   00002FD8   0x.... 0x....      BL       __aeabi_f2d
   \   00002FDC   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00002FE0   0x4648             MOV      R0,R9
   \   00002FE2   0x.... 0x....      BL       __aeabi_f2d
   \   00002FE6   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00002FEA   0x4652             MOV      R2,R10
   \   00002FEC   0xF8DF 0x1EF4      LDR.W    R1,??RoadBrd_ParseString_533
   \   00002FF0   0xA80A             ADD      R0,SP,#+40
   \   00002FF2   0x.... 0x....      BL       sprintf
   3211                                        break;
   \   00002FF6   0xF000 0xBED0      B.W      ??RoadBrd_ParseString_530
   \   00002FFA   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_375:
   \   00002FFC   0x........         DC32     ?_127
   \   00003000   0x........         DC32     ?_128
   \   00003004   0x........         DC32     ?_129
   \   00003008   0x........         DC32     ?_130
   \   0000300C   0x........         DC32     ?_131
   \   00003010   0x........         DC32     ?_132
   \   00003014   0x........         DC32     ?_133
   3212                                      case CAL_CURRENT: //CAL_CURRENT Values
   3213                                        // Is this a BLE Operation?
   3214                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_510: (+1)
   \   00003018   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000301A   0x2D00             CMP      R5,#+0
   \   0000301C   0xD024             BEQ.N    ??RoadBrd_ParseString_534
   3215                                        {
   3216                                          // Yes...Build and Send BLE Response NOW.
   3217                                          sprintf( (char *)tempBffr2, "%s:0004//%1.4f//%2.3f//", 
   3218                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3219                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3220                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   0000301E   0x0038             MOVS     R0,R7
   \   00003020   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003022   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003026   0x4683             MOV      R11,R0
   \   00003028   0x0038             MOVS     R0,R7
   \   0000302A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000302C   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003030   0x4681             MOV      R9,R0
   \   00003032   0x0038             MOVS     R0,R7
   \   00003034   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003036   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   0000303A   0x4682             MOV      R10,R0
   \   0000303C   0x4658             MOV      R0,R11
   \   0000303E   0x.... 0x....      BL       __aeabi_f2d
   \   00003042   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003046   0x4648             MOV      R0,R9
   \   00003048   0x.... 0x....      BL       __aeabi_f2d
   \   0000304C   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003050   0x4652             MOV      R2,R10
   \   00003052   0xF8DF 0x1EF8      LDR.W    R1,??RoadBrd_ParseString_535
   \   00003056   0xA80A             ADD      R0,SP,#+40
   \   00003058   0x.... 0x....      BL       sprintf
   3221                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000305C   0xA80A             ADD      R0,SP,#+40
   \   0000305E   0x.... 0x....      BL       strlen
   \   00003062   0xA90A             ADD      R1,SP,#+40
   \   00003064   0x.... 0x....      BL       BGM111_Transmit
   3222                                        }
   3223                                        sprintf( (char *)tempBffr2, "%s	        0004		%1.4f		%2.3f\r\n", 
   3224                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3225                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3226                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_534: (+1)
   \   00003068   0x0038             MOVS     R0,R7
   \   0000306A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000306C   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003070   0x4683             MOV      R11,R0
   \   00003072   0x0038             MOVS     R0,R7
   \   00003074   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003076   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   0000307A   0x4681             MOV      R9,R0
   \   0000307C   0x0038             MOVS     R0,R7
   \   0000307E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003080   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003084   0x4682             MOV      R10,R0
   \   00003086   0x4658             MOV      R0,R11
   \   00003088   0x.... 0x....      BL       __aeabi_f2d
   \   0000308C   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003090   0x4648             MOV      R0,R9
   \   00003092   0x.... 0x....      BL       __aeabi_f2d
   \   00003096   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000309A   0x4652             MOV      R2,R10
   \   0000309C   0xF8DF 0x1EE4      LDR.W    R1,??RoadBrd_ParseString_536
   \   000030A0   0xA80A             ADD      R0,SP,#+40
   \   000030A2   0x.... 0x....      BL       sprintf
   3227                                        break;
   \   000030A6   0xF000 0xBE78      B.W      ??RoadBrd_ParseString_530
   \   000030AA   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_381:
   \   000030AC   0x........         DC32     ?_134
   \   000030B0   0x........         DC32     ?_135
   \   000030B4   0x........         DC32     ?_136
   \   000030B8   0x........         DC32     ?_137
   3228                                      case CAL_POWER: //CAL_POWER Values
   3229                                        // Is this a BLE Operation?
   3230                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_509: (+1)
   \   000030BC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000030BE   0x2D00             CMP      R5,#+0
   \   000030C0   0xD024             BEQ.N    ??RoadBrd_ParseString_537
   3231                                        {
   3232                                          // Yes...Build and Send BLE Response NOW.
   3233                                          sprintf( (char *)tempBffr2, "%s:0006//%1.4f//%2.3f//", 
   3234                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3235                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3236                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   000030C2   0x0038             MOVS     R0,R7
   \   000030C4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000030C6   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000030CA   0x4683             MOV      R11,R0
   \   000030CC   0x0038             MOVS     R0,R7
   \   000030CE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000030D0   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000030D4   0x4681             MOV      R9,R0
   \   000030D6   0x0038             MOVS     R0,R7
   \   000030D8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000030DA   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000030DE   0x4682             MOV      R10,R0
   \   000030E0   0x4658             MOV      R0,R11
   \   000030E2   0x.... 0x....      BL       __aeabi_f2d
   \   000030E6   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000030EA   0x4648             MOV      R0,R9
   \   000030EC   0x.... 0x....      BL       __aeabi_f2d
   \   000030F0   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000030F4   0x4652             MOV      R2,R10
   \   000030F6   0xF8DF 0x1EC8      LDR.W    R1,??RoadBrd_ParseString_538
   \   000030FA   0xA80A             ADD      R0,SP,#+40
   \   000030FC   0x.... 0x....      BL       sprintf
   3237                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003100   0xA80A             ADD      R0,SP,#+40
   \   00003102   0x.... 0x....      BL       strlen
   \   00003106   0xA90A             ADD      R1,SP,#+40
   \   00003108   0x.... 0x....      BL       BGM111_Transmit
   3238                                        }
   3239                                        sprintf( (char *)tempBffr2, "%s	0006		%1.4f		%2.3f\r\n", 
   3240                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3241                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3242                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_537: (+1)
   \   0000310C   0x0038             MOVS     R0,R7
   \   0000310E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003110   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003114   0x4683             MOV      R11,R0
   \   00003116   0x0038             MOVS     R0,R7
   \   00003118   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000311A   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   0000311E   0x4681             MOV      R9,R0
   \   00003120   0x0038             MOVS     R0,R7
   \   00003122   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003124   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003128   0x4682             MOV      R10,R0
   \   0000312A   0x4658             MOV      R0,R11
   \   0000312C   0x.... 0x....      BL       __aeabi_f2d
   \   00003130   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003134   0x4648             MOV      R0,R9
   \   00003136   0x.... 0x....      BL       __aeabi_f2d
   \   0000313A   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000313E   0x4652             MOV      R2,R10
   \   00003140   0xF8DF 0x1ED8      LDR.W    R1,??RoadBrd_ParseString_539
   \   00003144   0xA80A             ADD      R0,SP,#+40
   \   00003146   0x.... 0x....      BL       sprintf
   3243                                        break;
   \   0000314A   0xF000 0xBE26      B.W      ??RoadBrd_ParseString_530
   \   0000314E   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_391:
   \   00003150   0x........         DC32     ?_138
   \   00003154   0x........         DC32     ?_139
   \   00003158   0x........         DC32     ?_140
   \   0000315C   0x........         DC32     ?_141
   \   00003160   0x........         DC32     ?_142
   3244                                      case CAL_VOLTAGE: //CAL_VOLTAGE Values
   3245                                        // Is this a BLE Operation?
   3246                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_512: (+1)
   \   00003164   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003166   0x2D00             CMP      R5,#+0
   \   00003168   0xD024             BEQ.N    ??RoadBrd_ParseString_540
   3247                                        {
   3248                                          // Yes...Build and Send BLE Response NOW.
   3249                                          sprintf( (char *)tempBffr2, "%s:0008//%1.4f//%2.3f//", 
   3250                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3251                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3252                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   0000316A   0x0038             MOVS     R0,R7
   \   0000316C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000316E   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003172   0x4683             MOV      R11,R0
   \   00003174   0x0038             MOVS     R0,R7
   \   00003176   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003178   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   0000317C   0x4681             MOV      R9,R0
   \   0000317E   0x0038             MOVS     R0,R7
   \   00003180   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003182   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003186   0x4682             MOV      R10,R0
   \   00003188   0x4658             MOV      R0,R11
   \   0000318A   0x.... 0x....      BL       __aeabi_f2d
   \   0000318E   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003192   0x4648             MOV      R0,R9
   \   00003194   0x.... 0x....      BL       __aeabi_f2d
   \   00003198   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000319C   0x4652             MOV      R2,R10
   \   0000319E   0xF8DF 0x1E80      LDR.W    R1,??RoadBrd_ParseString_539+0x4
   \   000031A2   0xA80A             ADD      R0,SP,#+40
   \   000031A4   0x.... 0x....      BL       sprintf
   3253                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000031A8   0xA80A             ADD      R0,SP,#+40
   \   000031AA   0x.... 0x....      BL       strlen
   \   000031AE   0xA90A             ADD      R1,SP,#+40
   \   000031B0   0x.... 0x....      BL       BGM111_Transmit
   3254                                        }
   3255                                        sprintf( (char *)tempBffr2, "%s	        0008		%1.4f		%2.3f\r\n", 
   3256                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3257                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3258                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_540: (+1)
   \   000031B4   0x0038             MOVS     R0,R7
   \   000031B6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000031B8   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000031BC   0x4683             MOV      R11,R0
   \   000031BE   0x0038             MOVS     R0,R7
   \   000031C0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000031C2   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000031C6   0x4681             MOV      R9,R0
   \   000031C8   0x0038             MOVS     R0,R7
   \   000031CA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000031CC   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000031D0   0x4682             MOV      R10,R0
   \   000031D2   0x4658             MOV      R0,R11
   \   000031D4   0x.... 0x....      BL       __aeabi_f2d
   \   000031D8   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000031DC   0x4648             MOV      R0,R9
   \   000031DE   0x.... 0x....      BL       __aeabi_f2d
   \   000031E2   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000031E6   0x4652             MOV      R2,R10
   \   000031E8   0xF8DF 0x1E38      LDR.W    R1,??RoadBrd_ParseString_539+0x8
   \   000031EC   0xA80A             ADD      R0,SP,#+40
   \   000031EE   0x.... 0x....      BL       sprintf
   3259                                        break;
   \   000031F2   0xF000 0xBDD2      B.W      ??RoadBrd_ParseString_530
   \   000031F6   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_396:
   \   000031F8   0x........         DC32     ?_143
   \   000031FC   0x........         DC32     ?_144
   \   00003200   0x........         DC32     ?_145
   \   00003204   0x........         DC32     ?_146
   \   00003208   0x........         DC32     ?_147
   \   0000320C   0x........         DC32     ?_148
   3260                                      case CAL_TEMPC: //CAL_TEMPC Values
   3261                                        // Is this a BLE Operation?
   3262                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_511: (+1)
   \   00003210   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003212   0x2D00             CMP      R5,#+0
   \   00003214   0xD024             BEQ.N    ??RoadBrd_ParseString_541
   3263                                        {
   3264                                          // Yes...Build and Send BLE Response NOW.
   3265                                          sprintf( (char *)tempBffr2, "%s:000A//%1.4f//%2.3f//", 
   3266                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3267                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3268                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003216   0x0038             MOVS     R0,R7
   \   00003218   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000321A   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   0000321E   0x4683             MOV      R11,R0
   \   00003220   0x0038             MOVS     R0,R7
   \   00003222   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003224   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003228   0x4681             MOV      R9,R0
   \   0000322A   0x0038             MOVS     R0,R7
   \   0000322C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000322E   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003232   0x4682             MOV      R10,R0
   \   00003234   0x4658             MOV      R0,R11
   \   00003236   0x.... 0x....      BL       __aeabi_f2d
   \   0000323A   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   0000323E   0x4648             MOV      R0,R9
   \   00003240   0x.... 0x....      BL       __aeabi_f2d
   \   00003244   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003248   0x4652             MOV      R2,R10
   \   0000324A   0xF8DF 0x1E88      LDR.W    R1,??RoadBrd_ParseString_542
   \   0000324E   0xA80A             ADD      R0,SP,#+40
   \   00003250   0x.... 0x....      BL       sprintf
   3269                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003254   0xA80A             ADD      R0,SP,#+40
   \   00003256   0x.... 0x....      BL       strlen
   \   0000325A   0xA90A             ADD      R1,SP,#+40
   \   0000325C   0x.... 0x....      BL       BGM111_Transmit
   3270                                        }
   3271                                        sprintf( (char *)tempBffr2, "%s	000A		%1.4f		%2.3f\r\n", 
   3272                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3273                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3274                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_541: (+1)
   \   00003260   0x0038             MOVS     R0,R7
   \   00003262   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003264   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003268   0x4683             MOV      R11,R0
   \   0000326A   0x0038             MOVS     R0,R7
   \   0000326C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000326E   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003272   0x4681             MOV      R9,R0
   \   00003274   0x0038             MOVS     R0,R7
   \   00003276   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003278   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   0000327C   0x4682             MOV      R10,R0
   \   0000327E   0x4658             MOV      R0,R11
   \   00003280   0x.... 0x....      BL       __aeabi_f2d
   \   00003284   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003288   0x4648             MOV      R0,R9
   \   0000328A   0x.... 0x....      BL       __aeabi_f2d
   \   0000328E   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003292   0x4652             MOV      R2,R10
   \   00003294   0xF8DF 0x1E9C      LDR.W    R1,??RoadBrd_ParseString_543
   \   00003298   0xA80A             ADD      R0,SP,#+40
   \   0000329A   0x.... 0x....      BL       sprintf
   3275                                        break;
   \   0000329E   0xF000 0xBD7C      B.W      ??RoadBrd_ParseString_530
   \   000032A2   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_402:
   \   000032A4   0x........         DC32     ?_149
   \   000032A8   0x........         DC32     ?_150
   \   000032AC   0x........         DC32     ?_151
   \   000032B0   0x........         DC32     ?_152
   \   000032B4   0x........         DC32     ?_153
   3276                                      case CAL_TEMPF: //CAL_TEMPF Values
   3277                                        // Is this a BLE Operation?
   3278                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_514: (+1)
   \   000032B8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000032BA   0x2D00             CMP      R5,#+0
   \   000032BC   0xD024             BEQ.N    ??RoadBrd_ParseString_544
   3279                                        {
   3280                                          // Yes...Build and Send BLE Response NOW.
   3281                                          sprintf( (char *)tempBffr2, "%s:000B//%1.4f//%2.3f//", 
   3282                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3283                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3284                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   000032BE   0x0038             MOVS     R0,R7
   \   000032C0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000032C2   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000032C6   0x4683             MOV      R11,R0
   \   000032C8   0x0038             MOVS     R0,R7
   \   000032CA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000032CC   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000032D0   0x4681             MOV      R9,R0
   \   000032D2   0x0038             MOVS     R0,R7
   \   000032D4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000032D6   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000032DA   0x4682             MOV      R10,R0
   \   000032DC   0x4658             MOV      R0,R11
   \   000032DE   0x.... 0x....      BL       __aeabi_f2d
   \   000032E2   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000032E6   0x4648             MOV      R0,R9
   \   000032E8   0x.... 0x....      BL       __aeabi_f2d
   \   000032EC   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000032F0   0x4652             MOV      R2,R10
   \   000032F2   0xF8DF 0x1E44      LDR.W    R1,??RoadBrd_ParseString_543+0x4
   \   000032F6   0xA80A             ADD      R0,SP,#+40
   \   000032F8   0x.... 0x....      BL       sprintf
   3285                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000032FC   0xA80A             ADD      R0,SP,#+40
   \   000032FE   0x.... 0x....      BL       strlen
   \   00003302   0xA90A             ADD      R1,SP,#+40
   \   00003304   0x.... 0x....      BL       BGM111_Transmit
   3286                                        }
   3287                                        sprintf( (char *)tempBffr2, "%s	000B		%1.4f		%2.3f\r\n", 
   3288                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3289                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3290                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_544: (+1)
   \   00003308   0x0038             MOVS     R0,R7
   \   0000330A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000330C   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003310   0x4683             MOV      R11,R0
   \   00003312   0x0038             MOVS     R0,R7
   \   00003314   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003316   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   0000331A   0x4681             MOV      R9,R0
   \   0000331C   0x0038             MOVS     R0,R7
   \   0000331E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003320   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003324   0x4682             MOV      R10,R0
   \   00003326   0x4658             MOV      R0,R11
   \   00003328   0x.... 0x....      BL       __aeabi_f2d
   \   0000332C   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003330   0x4648             MOV      R0,R9
   \   00003332   0x.... 0x....      BL       __aeabi_f2d
   \   00003336   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000333A   0x4652             MOV      R2,R10
   \   0000333C   0xF8DF 0x1DFC      LDR.W    R1,??RoadBrd_ParseString_543+0x8
   \   00003340   0xA80A             ADD      R0,SP,#+40
   \   00003342   0x.... 0x....      BL       sprintf
   3291                                        break;
   \   00003346   0xF000 0xBD28      B.W      ??RoadBrd_ParseString_530
   \   0000334A   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_408:
   \   0000334C   0x........         DC32     ?_154
   \   00003350   0x........         DC32     ?_155
   \   00003354   0x........         DC32     ?_156
   \   00003358   0x........         DC32     ?_157
   \   0000335C   0x........         DC32     ?_158
   3292                                      case CAL_PRESSURE: //CAL_PRESSURE Values
   3293                                        // Is this a BLE Operation?
   3294                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_513: (+1)
   \   00003360   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003362   0x2D00             CMP      R5,#+0
   \   00003364   0xD024             BEQ.N    ??RoadBrd_ParseString_545
   3295                                        {
   3296                                          // Yes...Build and Send BLE Response NOW.
   3297                                          sprintf( (char *)tempBffr2, "%s:0011//%1.4f//%2.3f//", 
   3298                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3299                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3300                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003366   0x0038             MOVS     R0,R7
   \   00003368   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000336A   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   0000336E   0x4683             MOV      R11,R0
   \   00003370   0x0038             MOVS     R0,R7
   \   00003372   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003374   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003378   0x4681             MOV      R9,R0
   \   0000337A   0x0038             MOVS     R0,R7
   \   0000337C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000337E   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003382   0x4682             MOV      R10,R0
   \   00003384   0x4658             MOV      R0,R11
   \   00003386   0x.... 0x....      BL       __aeabi_f2d
   \   0000338A   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   0000338E   0x4648             MOV      R0,R9
   \   00003390   0x.... 0x....      BL       __aeabi_f2d
   \   00003394   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003398   0x4652             MOV      R2,R10
   \   0000339A   0xF8DF 0x1EAC      LDR.W    R1,??RoadBrd_ParseString_546
   \   0000339E   0xA80A             ADD      R0,SP,#+40
   \   000033A0   0x.... 0x....      BL       sprintf
   3301                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000033A4   0xA80A             ADD      R0,SP,#+40
   \   000033A6   0x.... 0x....      BL       strlen
   \   000033AA   0xA90A             ADD      R1,SP,#+40
   \   000033AC   0x.... 0x....      BL       BGM111_Transmit
   3302                                        }
   3303                                        sprintf( (char *)tempBffr2, "%s	0011		%1.4f		%2.3f\r\n", 
   3304                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3305                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3306                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_545: (+1)
   \   000033B0   0x0038             MOVS     R0,R7
   \   000033B2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000033B4   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000033B8   0x4683             MOV      R11,R0
   \   000033BA   0x0038             MOVS     R0,R7
   \   000033BC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000033BE   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000033C2   0x4681             MOV      R9,R0
   \   000033C4   0x0038             MOVS     R0,R7
   \   000033C6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000033C8   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000033CC   0x4682             MOV      R10,R0
   \   000033CE   0x4658             MOV      R0,R11
   \   000033D0   0x.... 0x....      BL       __aeabi_f2d
   \   000033D4   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000033D8   0x4648             MOV      R0,R9
   \   000033DA   0x.... 0x....      BL       __aeabi_f2d
   \   000033DE   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000033E2   0x4652             MOV      R2,R10
   \   000033E4   0xF8DF 0x1E64      LDR.W    R1,??RoadBrd_ParseString_546+0x4
   \   000033E8   0xA80A             ADD      R0,SP,#+40
   \   000033EA   0x.... 0x....      BL       sprintf
   3307                                        break;
   \   000033EE   0xF000 0xBCD4      B.W      ??RoadBrd_ParseString_530
   \   000033F2   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_413:
   \   000033F4   0x........         DC32     ?_159
   \   000033F8   0x........         DC32     ?_160
   \   000033FC   0x........         DC32     ?_161
   \   00003400   0x........         DC32     ?_162
   \   00003404   0x........         DC32     ?_163
   3308                                      case CAL_HUMIDITY: //CAL_HUMIDITY Values
   3309                                        // Is this a BLE Operation?
   3310                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_516: (+1)
   \   00003408   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000340A   0x2D00             CMP      R5,#+0
   \   0000340C   0xD024             BEQ.N    ??RoadBrd_ParseString_547
   3311                                        {
   3312                                          // Yes...Build and Send BLE Response NOW.
   3313                                          sprintf( (char *)tempBffr2, "%s:0030//%1.4f//%2.3f//", 
   3314                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3315                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3316                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   0000340E   0x0038             MOVS     R0,R7
   \   00003410   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003412   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003416   0x4683             MOV      R11,R0
   \   00003418   0x0038             MOVS     R0,R7
   \   0000341A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000341C   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003420   0x4681             MOV      R9,R0
   \   00003422   0x0038             MOVS     R0,R7
   \   00003424   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003426   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   0000342A   0x4682             MOV      R10,R0
   \   0000342C   0x4658             MOV      R0,R11
   \   0000342E   0x.... 0x....      BL       __aeabi_f2d
   \   00003432   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003436   0x4648             MOV      R0,R9
   \   00003438   0x.... 0x....      BL       __aeabi_f2d
   \   0000343C   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003440   0x4652             MOV      R2,R10
   \   00003442   0xF8DF 0x1E6C      LDR.W    R1,??RoadBrd_ParseString_548
   \   00003446   0xA80A             ADD      R0,SP,#+40
   \   00003448   0x.... 0x....      BL       sprintf
   3317                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000344C   0xA80A             ADD      R0,SP,#+40
   \   0000344E   0x.... 0x....      BL       strlen
   \   00003452   0xA90A             ADD      R1,SP,#+40
   \   00003454   0x.... 0x....      BL       BGM111_Transmit
   3318                                        }
   3319                                        sprintf( (char *)tempBffr2, "%s	0030		%1.4f		%2.3f\r\n", 
   3320                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3321                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3322                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_547: (+1)
   \   00003458   0x0038             MOVS     R0,R7
   \   0000345A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000345C   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003460   0x4683             MOV      R11,R0
   \   00003462   0x0038             MOVS     R0,R7
   \   00003464   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003466   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   0000346A   0x4681             MOV      R9,R0
   \   0000346C   0x0038             MOVS     R0,R7
   \   0000346E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003470   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003474   0x4682             MOV      R10,R0
   \   00003476   0x4658             MOV      R0,R11
   \   00003478   0x.... 0x....      BL       __aeabi_f2d
   \   0000347C   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003480   0x4648             MOV      R0,R9
   \   00003482   0x.... 0x....      BL       __aeabi_f2d
   \   00003486   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000348A   0x4652             MOV      R2,R10
   \   0000348C   0xF8DF 0x1E70      LDR.W    R1,??RoadBrd_ParseString_549
   \   00003490   0xA80A             ADD      R0,SP,#+40
   \   00003492   0x.... 0x....      BL       sprintf
   3323                                        break;
   \   00003496   0xF000 0xBC80      B.W      ??RoadBrd_ParseString_530
   \   0000349A   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_421:
   \   0000349C   0x........         DC32     ?_164
   \   000034A0   0x........         DC32     ?_165
   \   000034A4   0x........         DC32     ?_166
   \   000034A8   0x........         DC32     ?_167
   \   000034AC   0x........         DC32     ?_168
   3324                                      case CAL_HUM_TEMPC: //CAL_HUM_TEMPC Values
   3325                                        // Is this a BLE Operation?
   3326                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_515: (+1)
   \   000034B0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000034B2   0x2D00             CMP      R5,#+0
   \   000034B4   0xD024             BEQ.N    ??RoadBrd_ParseString_550
   3327                                        {
   3328                                          // Yes...Build and Send BLE Response NOW.
   3329                                          sprintf( (char *)tempBffr2, "%s:0032//%1.4f//%2.3f//", 
   3330                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3331                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3332                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   000034B6   0x0038             MOVS     R0,R7
   \   000034B8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000034BA   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000034BE   0x4683             MOV      R11,R0
   \   000034C0   0x0038             MOVS     R0,R7
   \   000034C2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000034C4   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000034C8   0x4681             MOV      R9,R0
   \   000034CA   0x0038             MOVS     R0,R7
   \   000034CC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000034CE   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000034D2   0x4682             MOV      R10,R0
   \   000034D4   0x4658             MOV      R0,R11
   \   000034D6   0x.... 0x....      BL       __aeabi_f2d
   \   000034DA   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000034DE   0x4648             MOV      R0,R9
   \   000034E0   0x.... 0x....      BL       __aeabi_f2d
   \   000034E4   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000034E8   0x4652             MOV      R2,R10
   \   000034EA   0xF8DF 0x1E74      LDR.W    R1,??RoadBrd_ParseString_551
   \   000034EE   0xA80A             ADD      R0,SP,#+40
   \   000034F0   0x.... 0x....      BL       sprintf
   3333                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000034F4   0xA80A             ADD      R0,SP,#+40
   \   000034F6   0x.... 0x....      BL       strlen
   \   000034FA   0xA90A             ADD      R1,SP,#+40
   \   000034FC   0x.... 0x....      BL       BGM111_Transmit
   3334                                        }
   3335                                        sprintf( (char *)tempBffr2, "%s	0032		%1.4f		%2.3f\r\n", 
   3336                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3337                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3338                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_550: (+1)
   \   00003500   0x0038             MOVS     R0,R7
   \   00003502   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003504   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003508   0x4683             MOV      R11,R0
   \   0000350A   0x0038             MOVS     R0,R7
   \   0000350C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000350E   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003512   0x4681             MOV      R9,R0
   \   00003514   0x0038             MOVS     R0,R7
   \   00003516   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003518   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   0000351C   0x4682             MOV      R10,R0
   \   0000351E   0x4658             MOV      R0,R11
   \   00003520   0x.... 0x....      BL       __aeabi_f2d
   \   00003524   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003528   0x4648             MOV      R0,R9
   \   0000352A   0x.... 0x....      BL       __aeabi_f2d
   \   0000352E   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003532   0x4652             MOV      R2,R10
   \   00003534   0xF8DF 0x1E2C      LDR.W    R1,??RoadBrd_ParseString_551+0x4
   \   00003538   0xA80A             ADD      R0,SP,#+40
   \   0000353A   0x.... 0x....      BL       sprintf
   3339                                        break;
   \   0000353E   0xF000 0xBC2C      B.W      ??RoadBrd_ParseString_530
   \   00003542   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_426:
   \   00003544   0x........         DC32     ?_169
   \   00003548   0x........         DC32     ?_170
   \   0000354C   0x........         DC32     ?_171
   \   00003550   0x........         DC32     ?_172
   \   00003554   0x........         DC32     ?_173
   3340                                      case CAL_HUM_TEMPF: //CAL_HUM_TEMPF Values
   3341                                        // Is this a BLE Operation?
   3342                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_518: (+1)
   \   00003558   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000355A   0x2D00             CMP      R5,#+0
   \   0000355C   0xD024             BEQ.N    ??RoadBrd_ParseString_552
   3343                                        {
   3344                                          // Yes...Build and Send BLE Response NOW.
   3345                                          sprintf( (char *)tempBffr2, "%s:0033//%1.4f//%2.3f//", 
   3346                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3347                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3348                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   0000355E   0x0038             MOVS     R0,R7
   \   00003560   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003562   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003566   0x4683             MOV      R11,R0
   \   00003568   0x0038             MOVS     R0,R7
   \   0000356A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000356C   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003570   0x4681             MOV      R9,R0
   \   00003572   0x0038             MOVS     R0,R7
   \   00003574   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003576   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   0000357A   0x4682             MOV      R10,R0
   \   0000357C   0x4658             MOV      R0,R11
   \   0000357E   0x.... 0x....      BL       __aeabi_f2d
   \   00003582   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003586   0x4648             MOV      R0,R9
   \   00003588   0x.... 0x....      BL       __aeabi_f2d
   \   0000358C   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003590   0x4652             MOV      R2,R10
   \   00003592   0xF8DF 0x1DD4      LDR.W    R1,??RoadBrd_ParseString_551+0x8
   \   00003596   0xA80A             ADD      R0,SP,#+40
   \   00003598   0x.... 0x....      BL       sprintf
   3349                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000359C   0xA80A             ADD      R0,SP,#+40
   \   0000359E   0x.... 0x....      BL       strlen
   \   000035A2   0xA90A             ADD      R1,SP,#+40
   \   000035A4   0x.... 0x....      BL       BGM111_Transmit
   3350                                        }
   3351                                        sprintf( (char *)tempBffr2, "%s	0033		%1.4f		%2.3f\r\n", 
   3352                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3353                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3354                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_552: (+1)
   \   000035A8   0x0038             MOVS     R0,R7
   \   000035AA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000035AC   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000035B0   0x4683             MOV      R11,R0
   \   000035B2   0x0038             MOVS     R0,R7
   \   000035B4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000035B6   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000035BA   0x4681             MOV      R9,R0
   \   000035BC   0x0038             MOVS     R0,R7
   \   000035BE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000035C0   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000035C4   0x4682             MOV      R10,R0
   \   000035C6   0x4658             MOV      R0,R11
   \   000035C8   0x.... 0x....      BL       __aeabi_f2d
   \   000035CC   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000035D0   0x4648             MOV      R0,R9
   \   000035D2   0x.... 0x....      BL       __aeabi_f2d
   \   000035D6   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000035DA   0x4652             MOV      R2,R10
   \   000035DC   0xF8DF 0x1E70      LDR.W    R1,??RoadBrd_ParseString_553
   \   000035E0   0xA80A             ADD      R0,SP,#+40
   \   000035E2   0x.... 0x....      BL       sprintf
   3355                                        break;
   \   000035E6   0xE3D8             B.N      ??RoadBrd_ParseString_530
   \                     ??RoadBrd_ParseString_432:
   \   000035E8   0x........         DC32     ?_174
   \   000035EC   0x........         DC32     ?_175
   \   000035F0   0x........         DC32     ?_176
   \   000035F4   0x........         DC32     ?_177
   \   000035F8   0x........         DC32     ?_178
   3356                                      case CAL_RGB_RED: //CAL_RGB_RED Values
   3357                                        // Is this a BLE Operation?
   3358                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_517: (+1)
   \   000035FC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000035FE   0x2D00             CMP      R5,#+0
   \   00003600   0xD024             BEQ.N    ??RoadBrd_ParseString_554
   3359                                        {
   3360                                          // Yes...Build and Send BLE Response NOW.
   3361                                          sprintf( (char *)tempBffr2, "%s:000D//%1.4f//%2.3f//", 
   3362                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3363                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3364                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003602   0x0038             MOVS     R0,R7
   \   00003604   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003606   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   0000360A   0x4683             MOV      R11,R0
   \   0000360C   0x0038             MOVS     R0,R7
   \   0000360E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003610   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003614   0x4681             MOV      R9,R0
   \   00003616   0x0038             MOVS     R0,R7
   \   00003618   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000361A   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   0000361E   0x4682             MOV      R10,R0
   \   00003620   0x4658             MOV      R0,R11
   \   00003622   0x.... 0x....      BL       __aeabi_f2d
   \   00003626   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   0000362A   0x4648             MOV      R0,R9
   \   0000362C   0x.... 0x....      BL       __aeabi_f2d
   \   00003630   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003634   0x4652             MOV      R2,R10
   \   00003636   0xF8DF 0x1E1C      LDR.W    R1,??RoadBrd_ParseString_553+0x4
   \   0000363A   0xA80A             ADD      R0,SP,#+40
   \   0000363C   0x.... 0x....      BL       sprintf
   3365                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003640   0xA80A             ADD      R0,SP,#+40
   \   00003642   0x.... 0x....      BL       strlen
   \   00003646   0xA90A             ADD      R1,SP,#+40
   \   00003648   0x.... 0x....      BL       BGM111_Transmit
   3366                                        }
   3367                                        sprintf( (char *)tempBffr2, "%s	        000D		%1.4f		%2.3f\r\n", 
   3368                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3369                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3370                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_554: (+1)
   \   0000364C   0x0038             MOVS     R0,R7
   \   0000364E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003650   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003654   0x4683             MOV      R11,R0
   \   00003656   0x0038             MOVS     R0,R7
   \   00003658   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000365A   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   0000365E   0x4681             MOV      R9,R0
   \   00003660   0x0038             MOVS     R0,R7
   \   00003662   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003664   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003668   0x4682             MOV      R10,R0
   \   0000366A   0x4658             MOV      R0,R11
   \   0000366C   0x.... 0x....      BL       __aeabi_f2d
   \   00003670   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003674   0x4648             MOV      R0,R9
   \   00003676   0x.... 0x....      BL       __aeabi_f2d
   \   0000367A   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000367E   0x4652             MOV      R2,R10
   \   00003680   0xF8DF 0x1E44      LDR.W    R1,??RoadBrd_ParseString_555
   \   00003684   0xA80A             ADD      R0,SP,#+40
   \   00003686   0x.... 0x....      BL       sprintf
   3371                                        break;
   \   0000368A   0xE386             B.N      ??RoadBrd_ParseString_530
   \                     ??RoadBrd_ParseString_437:
   \   0000368C   0x........         DC32     ?_179
   \   00003690   0x........         DC32     ?_180
   \   00003694   0x........         DC32     ?_181
   \   00003698   0x........         DC32     ?_182
   \   0000369C   0x........         DC32     ?_183
   3372                                      case CAL_RGB_GREEN: //CAL_RGB_GREEN Values
   3373                                        // Is this a BLE Operation?
   3374                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_520: (+1)
   \   000036A0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000036A2   0x2D00             CMP      R5,#+0
   \   000036A4   0xD024             BEQ.N    ??RoadBrd_ParseString_556
   3375                                        {
   3376                                          // Yes...Build and Send BLE Response NOW.
   3377                                          sprintf( (char *)tempBffr2, "%s:000E//%1.4f//%2.3f//", 
   3378                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3379                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3380                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   000036A6   0x0038             MOVS     R0,R7
   \   000036A8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000036AA   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000036AE   0x4683             MOV      R11,R0
   \   000036B0   0x0038             MOVS     R0,R7
   \   000036B2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000036B4   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000036B8   0x4681             MOV      R9,R0
   \   000036BA   0x0038             MOVS     R0,R7
   \   000036BC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000036BE   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000036C2   0x4682             MOV      R10,R0
   \   000036C4   0x4658             MOV      R0,R11
   \   000036C6   0x.... 0x....      BL       __aeabi_f2d
   \   000036CA   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000036CE   0x4648             MOV      R0,R9
   \   000036D0   0x.... 0x....      BL       __aeabi_f2d
   \   000036D4   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000036D8   0x4652             MOV      R2,R10
   \   000036DA   0xF8DF 0x1E48      LDR.W    R1,??RoadBrd_ParseString_557
   \   000036DE   0xA80A             ADD      R0,SP,#+40
   \   000036E0   0x.... 0x....      BL       sprintf
   3381                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000036E4   0xA80A             ADD      R0,SP,#+40
   \   000036E6   0x.... 0x....      BL       strlen
   \   000036EA   0xA90A             ADD      R1,SP,#+40
   \   000036EC   0x.... 0x....      BL       BGM111_Transmit
   3382                                        }
   3383                                        sprintf( (char *)tempBffr2, "%s	000E		%1.4f		%2.3f\r\n", 
   3384                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3385                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3386                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_556: (+1)
   \   000036F0   0x0038             MOVS     R0,R7
   \   000036F2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000036F4   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000036F8   0x4683             MOV      R11,R0
   \   000036FA   0x0038             MOVS     R0,R7
   \   000036FC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000036FE   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003702   0x4681             MOV      R9,R0
   \   00003704   0x0038             MOVS     R0,R7
   \   00003706   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003708   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   0000370C   0x4682             MOV      R10,R0
   \   0000370E   0x4658             MOV      R0,R11
   \   00003710   0x.... 0x....      BL       __aeabi_f2d
   \   00003714   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003718   0x4648             MOV      R0,R9
   \   0000371A   0x.... 0x....      BL       __aeabi_f2d
   \   0000371E   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003722   0x4652             MOV      R2,R10
   \   00003724   0xF8DF 0x1E34      LDR.W    R1,??RoadBrd_ParseString_558
   \   00003728   0xA80A             ADD      R0,SP,#+40
   \   0000372A   0x.... 0x....      BL       sprintf
   3387                                        break;
   \   0000372E   0xE334             B.N      ??RoadBrd_ParseString_530
   \                     ??RoadBrd_ParseString_445:
   \   00003730   0x........         DC32     ?_184
   \   00003734   0x........         DC32     ?_185
   \   00003738   0x........         DC32     ?_186
   \   0000373C   0x........         DC32     ?_187
   \   00003740   0x........         DC32     ?_188
   3388                                      case CAL_RGB_BLUE: //CAL_RGB_BLUE Values
   3389                                        // Is this a BLE Operation?
   3390                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_519: (+1)
   \   00003744   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003746   0x2D00             CMP      R5,#+0
   \   00003748   0xD024             BEQ.N    ??RoadBrd_ParseString_559
   3391                                        {
   3392                                          // Yes...Build and Send BLE Response NOW.
   3393                                          sprintf( (char *)tempBffr2, "%s:000F//%1.4f//%2.3f//", 
   3394                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3395                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3396                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   0000374A   0x0038             MOVS     R0,R7
   \   0000374C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000374E   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003752   0x4683             MOV      R11,R0
   \   00003754   0x0038             MOVS     R0,R7
   \   00003756   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003758   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   0000375C   0x4681             MOV      R9,R0
   \   0000375E   0x0038             MOVS     R0,R7
   \   00003760   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003762   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003766   0x4682             MOV      R10,R0
   \   00003768   0x4658             MOV      R0,R11
   \   0000376A   0x.... 0x....      BL       __aeabi_f2d
   \   0000376E   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003772   0x4648             MOV      R0,R9
   \   00003774   0x.... 0x....      BL       __aeabi_f2d
   \   00003778   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000377C   0x4652             MOV      R2,R10
   \   0000377E   0xF8DF 0x1E3C      LDR.W    R1,??RoadBrd_ParseString_560
   \   00003782   0xA80A             ADD      R0,SP,#+40
   \   00003784   0x.... 0x....      BL       sprintf
   3397                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003788   0xA80A             ADD      R0,SP,#+40
   \   0000378A   0x.... 0x....      BL       strlen
   \   0000378E   0xA90A             ADD      R1,SP,#+40
   \   00003790   0x.... 0x....      BL       BGM111_Transmit
   3398                                        }
   3399                                        sprintf( (char *)tempBffr2, "%s	000F		%1.4f		%2.3f\r\n", 
   3400                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3401                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3402                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_559: (+1)
   \   00003794   0x0038             MOVS     R0,R7
   \   00003796   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003798   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   0000379C   0x4683             MOV      R11,R0
   \   0000379E   0x0038             MOVS     R0,R7
   \   000037A0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000037A2   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000037A6   0x4681             MOV      R9,R0
   \   000037A8   0x0038             MOVS     R0,R7
   \   000037AA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000037AC   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000037B0   0x4682             MOV      R10,R0
   \   000037B2   0x4658             MOV      R0,R11
   \   000037B4   0x.... 0x....      BL       __aeabi_f2d
   \   000037B8   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000037BC   0x4648             MOV      R0,R9
   \   000037BE   0x.... 0x....      BL       __aeabi_f2d
   \   000037C2   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000037C6   0x4652             MOV      R2,R10
   \   000037C8   0xF8DF 0x1DF4      LDR.W    R1,??RoadBrd_ParseString_560+0x4
   \   000037CC   0xA80A             ADD      R0,SP,#+40
   \   000037CE   0x.... 0x....      BL       sprintf
   3403                                        break;
   \   000037D2   0xE2E2             B.N      ??RoadBrd_ParseString_530
   \                     ??RoadBrd_ParseString_450:
   \   000037D4   0x........         DC32     ?_189
   \   000037D8   0x........         DC32     ?_190
   \   000037DC   0x........         DC32     ?_191
   \   000037E0   0x........         DC32     ?_192
   \   000037E4   0x........         DC32     ?_193
   3404                                      case CAL_THERM_C: //CAL_THERM_C Values
   3405                                        // Is this a BLE Operation?
   3406                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_522: (+1)
   \   000037E8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000037EA   0x2D00             CMP      R5,#+0
   \   000037EC   0xD024             BEQ.N    ??RoadBrd_ParseString_561
   3407                                        {
   3408                                          // Yes...Build and Send BLE Response NOW.
   3409                                          sprintf( (char *)tempBffr2, "%s:0017//%1.4f//%2.3f//", 
   3410                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3411                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3412                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   000037EE   0x0038             MOVS     R0,R7
   \   000037F0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000037F2   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000037F6   0x4683             MOV      R11,R0
   \   000037F8   0x0038             MOVS     R0,R7
   \   000037FA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000037FC   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003800   0x4681             MOV      R9,R0
   \   00003802   0x0038             MOVS     R0,R7
   \   00003804   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003806   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   0000380A   0x4682             MOV      R10,R0
   \   0000380C   0x4658             MOV      R0,R11
   \   0000380E   0x.... 0x....      BL       __aeabi_f2d
   \   00003812   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003816   0x4648             MOV      R0,R9
   \   00003818   0x.... 0x....      BL       __aeabi_f2d
   \   0000381C   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003820   0x4652             MOV      R2,R10
   \   00003822   0xF8DF 0x1E38      LDR.W    R1,??RoadBrd_ParseString_562
   \   00003826   0xA80A             ADD      R0,SP,#+40
   \   00003828   0x.... 0x....      BL       sprintf
   3413                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000382C   0xA80A             ADD      R0,SP,#+40
   \   0000382E   0x.... 0x....      BL       strlen
   \   00003832   0xA90A             ADD      R1,SP,#+40
   \   00003834   0x.... 0x....      BL       BGM111_Transmit
   3414                                        }
   3415                                        sprintf( (char *)tempBffr2, "%s	        0017		%1.4f		%2.3f\r\n", 
   3416                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3417                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3418                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_561: (+1)
   \   00003838   0x0038             MOVS     R0,R7
   \   0000383A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000383C   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003840   0x4683             MOV      R11,R0
   \   00003842   0x0038             MOVS     R0,R7
   \   00003844   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003846   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   0000384A   0x4681             MOV      R9,R0
   \   0000384C   0x0038             MOVS     R0,R7
   \   0000384E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003850   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003854   0x4682             MOV      R10,R0
   \   00003856   0x4658             MOV      R0,R11
   \   00003858   0x.... 0x....      BL       __aeabi_f2d
   \   0000385C   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003860   0x4648             MOV      R0,R9
   \   00003862   0x.... 0x....      BL       __aeabi_f2d
   \   00003866   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000386A   0x4652             MOV      R2,R10
   \   0000386C   0xF8DF 0x1E20      LDR.W    R1,??RoadBrd_ParseString_563
   \   00003870   0xA80A             ADD      R0,SP,#+40
   \   00003872   0x.... 0x....      BL       sprintf
   3419                                        break;
   \   00003876   0xE290             B.N      ??RoadBrd_ParseString_530
   \                     ??RoadBrd_ParseString_456:
   \   00003878   0x........         DC32     ?_194
   \   0000387C   0x........         DC32     ?_195
   \   00003880   0x........         DC32     ?_196
   \   00003884   0x........         DC32     ?_197
   \   00003888   0x........         DC32     ?_198
   3420                                      case CAL_ROADT_1C: //CAL_ROADT_1C Values
   3421                                        // Is this a BLE Operation?
   3422                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_521: (+1)
   \   0000388C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000388E   0x2D00             CMP      R5,#+0
   \   00003890   0xD024             BEQ.N    ??RoadBrd_ParseString_564
   3423                                        {
   3424                                          // Yes...Build and Send BLE Response NOW.
   3425                                          sprintf( (char *)tempBffr2, "%s:0019//%1.4f//%2.3f//", 
   3426                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3427                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3428                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003892   0x0038             MOVS     R0,R7
   \   00003894   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003896   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   0000389A   0x4683             MOV      R11,R0
   \   0000389C   0x0038             MOVS     R0,R7
   \   0000389E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000038A0   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000038A4   0x4681             MOV      R9,R0
   \   000038A6   0x0038             MOVS     R0,R7
   \   000038A8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000038AA   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000038AE   0x4682             MOV      R10,R0
   \   000038B0   0x4658             MOV      R0,R11
   \   000038B2   0x.... 0x....      BL       __aeabi_f2d
   \   000038B6   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000038BA   0x4648             MOV      R0,R9
   \   000038BC   0x.... 0x....      BL       __aeabi_f2d
   \   000038C0   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000038C4   0x4652             MOV      R2,R10
   \   000038C6   0xF8DF 0x1E30      LDR.W    R1,??RoadBrd_ParseString_565
   \   000038CA   0xA80A             ADD      R0,SP,#+40
   \   000038CC   0x.... 0x....      BL       sprintf
   3429                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000038D0   0xA80A             ADD      R0,SP,#+40
   \   000038D2   0x.... 0x....      BL       strlen
   \   000038D6   0xA90A             ADD      R1,SP,#+40
   \   000038D8   0x.... 0x....      BL       BGM111_Transmit
   3430                                        }
   3431                                        sprintf( (char *)tempBffr2, "%s	0019		%1.4f		%2.3f\r\n", 
   3432                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3433                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3434                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_564: (+1)
   \   000038DC   0x0038             MOVS     R0,R7
   \   000038DE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000038E0   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000038E4   0x4683             MOV      R11,R0
   \   000038E6   0x0038             MOVS     R0,R7
   \   000038E8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000038EA   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000038EE   0x4681             MOV      R9,R0
   \   000038F0   0x0038             MOVS     R0,R7
   \   000038F2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000038F4   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000038F8   0x4682             MOV      R10,R0
   \   000038FA   0x4658             MOV      R0,R11
   \   000038FC   0x.... 0x....      BL       __aeabi_f2d
   \   00003900   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003904   0x4648             MOV      R0,R9
   \   00003906   0x.... 0x....      BL       __aeabi_f2d
   \   0000390A   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000390E   0x4652             MOV      R2,R10
   \   00003910   0xF8DF 0x1E28      LDR.W    R1,??RoadBrd_ParseString_566
   \   00003914   0xA80A             ADD      R0,SP,#+40
   \   00003916   0x.... 0x....      BL       sprintf
   3435                                        break;
   \   0000391A   0xE23E             B.N      ??RoadBrd_ParseString_530
   \                     ??RoadBrd_ParseString_461:
   \   0000391C   0x........         DC32     ?_199
   \   00003920   0x........         DC32     ?_200
   \   00003924   0x........         DC32     ?_201
   \   00003928   0x........         DC32     ?_202
   \   0000392C   0x........         DC32     ?_203
   3436                                      case CAL_ROADT_2C: //CAL_ROADT_2C Values
   3437                                        // Is this a BLE Operation?
   3438                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_524: (+1)
   \   00003930   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003932   0x2D00             CMP      R5,#+0
   \   00003934   0xD024             BEQ.N    ??RoadBrd_ParseString_567
   3439                                        {
   3440                                          // Yes...Build and Send BLE Response NOW.
   3441                                          sprintf( (char *)tempBffr2, "%s:001B//%1.4f//%2.3f//", 
   3442                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3443                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3444                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003936   0x0038             MOVS     R0,R7
   \   00003938   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000393A   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   0000393E   0x4683             MOV      R11,R0
   \   00003940   0x0038             MOVS     R0,R7
   \   00003942   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003944   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003948   0x4681             MOV      R9,R0
   \   0000394A   0x0038             MOVS     R0,R7
   \   0000394C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000394E   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003952   0x4682             MOV      R10,R0
   \   00003954   0x4658             MOV      R0,R11
   \   00003956   0x.... 0x....      BL       __aeabi_f2d
   \   0000395A   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   0000395E   0x4648             MOV      R0,R9
   \   00003960   0x.... 0x....      BL       __aeabi_f2d
   \   00003964   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003968   0x4652             MOV      R2,R10
   \   0000396A   0xF8DF 0x1E30      LDR.W    R1,??RoadBrd_ParseString_568
   \   0000396E   0xA80A             ADD      R0,SP,#+40
   \   00003970   0x.... 0x....      BL       sprintf
   3445                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003974   0xA80A             ADD      R0,SP,#+40
   \   00003976   0x.... 0x....      BL       strlen
   \   0000397A   0xA90A             ADD      R1,SP,#+40
   \   0000397C   0x.... 0x....      BL       BGM111_Transmit
   3446                                        }
   3447                                        sprintf( (char *)tempBffr2, "%s	001B		%1.4f		%2.3f\r\n", 
   3448                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3449                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3450                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_567: (+1)
   \   00003980   0x0038             MOVS     R0,R7
   \   00003982   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003984   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003988   0x4683             MOV      R11,R0
   \   0000398A   0x0038             MOVS     R0,R7
   \   0000398C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000398E   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003992   0x4681             MOV      R9,R0
   \   00003994   0x0038             MOVS     R0,R7
   \   00003996   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003998   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   0000399C   0x4682             MOV      R10,R0
   \   0000399E   0x4658             MOV      R0,R11
   \   000039A0   0x.... 0x....      BL       __aeabi_f2d
   \   000039A4   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000039A8   0x4648             MOV      R0,R9
   \   000039AA   0x.... 0x....      BL       __aeabi_f2d
   \   000039AE   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000039B2   0x4652             MOV      R2,R10
   \   000039B4   0xF8DF 0x1DE8      LDR.W    R1,??RoadBrd_ParseString_568+0x4
   \   000039B8   0xA80A             ADD      R0,SP,#+40
   \   000039BA   0x.... 0x....      BL       sprintf
   3451                                        break;
   \   000039BE   0xE1EC             B.N      ??RoadBrd_ParseString_530
   \                     ??RoadBrd_ParseString_469:
   \   000039C0   0x........         DC32     ?_204
   \   000039C4   0x........         DC32     ?_205
   \   000039C8   0x........         DC32     ?_206
   \   000039CC   0x........         DC32     ?_207
   \   000039D0   0x........         DC32     ?_208
   \   000039D4   0x........         DC32     ?_209
   3452                                      case CAL_ROADT_3C: //CAL_ROADT_3C Values
   3453                                        // Is this a BLE Operation?
   3454                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_523: (+1)
   \   000039D8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000039DA   0x2D00             CMP      R5,#+0
   \   000039DC   0xD024             BEQ.N    ??RoadBrd_ParseString_569
   3455                                        {
   3456                                          // Yes...Build and Send BLE Response NOW.
   3457                                          sprintf( (char *)tempBffr2, "%s:001D//%1.4f//%2.3f//", 
   3458                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3459                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3460                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   000039DE   0x0038             MOVS     R0,R7
   \   000039E0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000039E2   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000039E6   0x4683             MOV      R11,R0
   \   000039E8   0x0038             MOVS     R0,R7
   \   000039EA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000039EC   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000039F0   0x4681             MOV      R9,R0
   \   000039F2   0x0038             MOVS     R0,R7
   \   000039F4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000039F6   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000039FA   0x4682             MOV      R10,R0
   \   000039FC   0x4658             MOV      R0,R11
   \   000039FE   0x.... 0x....      BL       __aeabi_f2d
   \   00003A02   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003A06   0x4648             MOV      R0,R9
   \   00003A08   0x.... 0x....      BL       __aeabi_f2d
   \   00003A0C   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003A10   0x4652             MOV      R2,R10
   \   00003A12   0xF8DF 0x1DEC      LDR.W    R1,??RoadBrd_ParseString_570
   \   00003A16   0xA80A             ADD      R0,SP,#+40
   \   00003A18   0x.... 0x....      BL       sprintf
   3461                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003A1C   0xA80A             ADD      R0,SP,#+40
   \   00003A1E   0x.... 0x....      BL       strlen
   \   00003A22   0xA90A             ADD      R1,SP,#+40
   \   00003A24   0x.... 0x....      BL       BGM111_Transmit
   3462                                        }
   3463                                        sprintf( (char *)tempBffr2, "%s	001D		%1.4f		%2.3f\r\n", 
   3464                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3465                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3466                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_569: (+1)
   \   00003A28   0x0038             MOVS     R0,R7
   \   00003A2A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003A2C   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003A30   0x4683             MOV      R11,R0
   \   00003A32   0x0038             MOVS     R0,R7
   \   00003A34   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003A36   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003A3A   0x4681             MOV      R9,R0
   \   00003A3C   0x0038             MOVS     R0,R7
   \   00003A3E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003A40   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003A44   0x4682             MOV      R10,R0
   \   00003A46   0x4658             MOV      R0,R11
   \   00003A48   0x.... 0x....      BL       __aeabi_f2d
   \   00003A4C   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003A50   0x4648             MOV      R0,R9
   \   00003A52   0x.... 0x....      BL       __aeabi_f2d
   \   00003A56   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003A5A   0x4652             MOV      R2,R10
   \   00003A5C   0xF8DF 0x1DF0      LDR.W    R1,??RoadBrd_ParseString_571
   \   00003A60   0xA80A             ADD      R0,SP,#+40
   \   00003A62   0x.... 0x....      BL       sprintf
   3467                                        break;
   \   00003A66   0xE198             B.N      ??RoadBrd_ParseString_530
   \                     ??RoadBrd_ParseString_475:
   \   00003A68   0x........         DC32     ?_210
   \   00003A6C   0x........         DC32     ?_211
   \   00003A70   0x........         DC32     ?_212
   \   00003A74   0x........         DC32     ?_213
   \   00003A78   0x........         DC32     ?_214
   3468                                      case CAL_ROADT_4C: //CAL_ROADT_4C Values
   3469                                        // Is this a BLE Operation?
   3470                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_526: (+1)
   \   00003A7C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003A7E   0x2D00             CMP      R5,#+0
   \   00003A80   0xD024             BEQ.N    ??RoadBrd_ParseString_572
   3471                                        {
   3472                                          // Yes...Build and Send BLE Response NOW.
   3473                                          sprintf( (char *)tempBffr2, "%s:001F//%1.4f//%2.3f//", 
   3474                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3475                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3476                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003A82   0x0038             MOVS     R0,R7
   \   00003A84   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003A86   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003A8A   0x4683             MOV      R11,R0
   \   00003A8C   0x0038             MOVS     R0,R7
   \   00003A8E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003A90   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003A94   0x4681             MOV      R9,R0
   \   00003A96   0x0038             MOVS     R0,R7
   \   00003A98   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003A9A   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003A9E   0x4682             MOV      R10,R0
   \   00003AA0   0x4658             MOV      R0,R11
   \   00003AA2   0x.... 0x....      BL       __aeabi_f2d
   \   00003AA6   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003AAA   0x4648             MOV      R0,R9
   \   00003AAC   0x.... 0x....      BL       __aeabi_f2d
   \   00003AB0   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003AB4   0x4652             MOV      R2,R10
   \   00003AB6   0xF8DF 0x1DDC      LDR.W    R1,??RoadBrd_ParseString_573
   \   00003ABA   0xA80A             ADD      R0,SP,#+40
   \   00003ABC   0x.... 0x....      BL       sprintf
   3477                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003AC0   0xA80A             ADD      R0,SP,#+40
   \   00003AC2   0x.... 0x....      BL       strlen
   \   00003AC6   0xA90A             ADD      R1,SP,#+40
   \   00003AC8   0x.... 0x....      BL       BGM111_Transmit
   3478                                        }
   3479                                        sprintf( (char *)tempBffr2, "%s	001F		%1.4f		%2.3f\r\n", 
   3480                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3481                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3482                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_572: (+1)
   \   00003ACC   0x0038             MOVS     R0,R7
   \   00003ACE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003AD0   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003AD4   0x4683             MOV      R11,R0
   \   00003AD6   0x0038             MOVS     R0,R7
   \   00003AD8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003ADA   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003ADE   0x4681             MOV      R9,R0
   \   00003AE0   0x0038             MOVS     R0,R7
   \   00003AE2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003AE4   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003AE8   0x4682             MOV      R10,R0
   \   00003AEA   0x4658             MOV      R0,R11
   \   00003AEC   0x.... 0x....      BL       __aeabi_f2d
   \   00003AF0   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003AF4   0x4648             MOV      R0,R9
   \   00003AF6   0x.... 0x....      BL       __aeabi_f2d
   \   00003AFA   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003AFE   0x4652             MOV      R2,R10
   \   00003B00   0xF8DF 0x1D94      LDR.W    R1,??RoadBrd_ParseString_573+0x4
   \   00003B04   0xA80A             ADD      R0,SP,#+40
   \   00003B06   0x.... 0x....      BL       sprintf
   3483                                        break;
   \   00003B0A   0xE146             B.N      ??RoadBrd_ParseString_530
   \                     ??RoadBrd_ParseString_480:
   \   00003B0C   0x........         DC32     ?_215
   \   00003B10   0x........         DC32     ?_216
   \   00003B14   0x........         DC32     ?_217
   \   00003B18   0x........         DC32     ?_218
   \   00003B1C   0x........         DC32     ?_219
   3484                                      case CAL_ROADT_5C: //CAL_ROADT_5C Values
   3485                                        // Is this a BLE Operation?
   3486                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_525: (+1)
   \   00003B20   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003B22   0x2D00             CMP      R5,#+0
   \   00003B24   0xD024             BEQ.N    ??RoadBrd_ParseString_574
   3487                                        {
   3488                                          // Yes...Build and Send BLE Response NOW.
   3489                                          sprintf( (char *)tempBffr2, "%s:0021//%1.4f//%2.3f//", 
   3490                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3491                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3492                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003B26   0x0038             MOVS     R0,R7
   \   00003B28   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003B2A   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003B2E   0x4683             MOV      R11,R0
   \   00003B30   0x0038             MOVS     R0,R7
   \   00003B32   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003B34   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003B38   0x4681             MOV      R9,R0
   \   00003B3A   0x0038             MOVS     R0,R7
   \   00003B3C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003B3E   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003B42   0x4682             MOV      R10,R0
   \   00003B44   0x4658             MOV      R0,R11
   \   00003B46   0x.... 0x....      BL       __aeabi_f2d
   \   00003B4A   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003B4E   0x4648             MOV      R0,R9
   \   00003B50   0x.... 0x....      BL       __aeabi_f2d
   \   00003B54   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003B58   0x4652             MOV      R2,R10
   \   00003B5A   0x.... 0x....      LDR.W    R1,??DataTable3
   \   00003B5E   0xA80A             ADD      R0,SP,#+40
   \   00003B60   0x.... 0x....      BL       sprintf
   3493                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003B64   0xA80A             ADD      R0,SP,#+40
   \   00003B66   0x.... 0x....      BL       strlen
   \   00003B6A   0xA90A             ADD      R1,SP,#+40
   \   00003B6C   0x.... 0x....      BL       BGM111_Transmit
   3494                                        }
   3495                                        sprintf( (char *)tempBffr2, "%s	0021		%1.4f		%2.3f\r\n", 
   3496                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3497                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3498                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_574: (+1)
   \   00003B70   0x0038             MOVS     R0,R7
   \   00003B72   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003B74   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003B78   0x4683             MOV      R11,R0
   \   00003B7A   0x0038             MOVS     R0,R7
   \   00003B7C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003B7E   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003B82   0x4681             MOV      R9,R0
   \   00003B84   0x0038             MOVS     R0,R7
   \   00003B86   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003B88   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003B8C   0x4682             MOV      R10,R0
   \   00003B8E   0x4658             MOV      R0,R11
   \   00003B90   0x.... 0x....      BL       __aeabi_f2d
   \   00003B94   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003B98   0x4648             MOV      R0,R9
   \   00003B9A   0x.... 0x....      BL       __aeabi_f2d
   \   00003B9E   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003BA2   0x4652             MOV      R2,R10
   \   00003BA4   0x.... 0x....      LDR.W    R1,??DataTable3_1
   \   00003BA8   0xA80A             ADD      R0,SP,#+40
   \   00003BAA   0x.... 0x....      BL       sprintf
   3499                                        break;
   \   00003BAE   0xE0F4             B.N      ??RoadBrd_ParseString_530
   \                     ??RoadBrd_ParseString_488:
   \   00003BB0   0x........         DC32     ?_220
   \   00003BB4   0x........         DC32     ?_221
   \   00003BB8   0x........         DC32     ?_222
   \   00003BBC   0x........         DC32     ?_223
   3500                                      case CAL_ROADT_6C: //CAL_ROADT_6C Values
   3501                                        // Is this a BLE Operation?
   3502                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_528: (+1)
   \   00003BC0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003BC2   0x2D00             CMP      R5,#+0
   \   00003BC4   0xD024             BEQ.N    ??RoadBrd_ParseString_575
   3503                                        {
   3504                                          // Yes...Build and Send BLE Response NOW.
   3505                                          sprintf( (char *)tempBffr2, "%s:0023//%1.4f//%2.3f//", 
   3506                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3507                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3508                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003BC6   0x0038             MOVS     R0,R7
   \   00003BC8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003BCA   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003BCE   0x4683             MOV      R11,R0
   \   00003BD0   0x0038             MOVS     R0,R7
   \   00003BD2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003BD4   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003BD8   0x4681             MOV      R9,R0
   \   00003BDA   0x0038             MOVS     R0,R7
   \   00003BDC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003BDE   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003BE2   0x4682             MOV      R10,R0
   \   00003BE4   0x4658             MOV      R0,R11
   \   00003BE6   0x.... 0x....      BL       __aeabi_f2d
   \   00003BEA   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003BEE   0x4648             MOV      R0,R9
   \   00003BF0   0x.... 0x....      BL       __aeabi_f2d
   \   00003BF4   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003BF8   0x4652             MOV      R2,R10
   \   00003BFA   0x.... 0x....      LDR.W    R1,??DataTable3_2
   \   00003BFE   0xA80A             ADD      R0,SP,#+40
   \   00003C00   0x.... 0x....      BL       sprintf
   3509                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003C04   0xA80A             ADD      R0,SP,#+40
   \   00003C06   0x.... 0x....      BL       strlen
   \   00003C0A   0xA90A             ADD      R1,SP,#+40
   \   00003C0C   0x.... 0x....      BL       BGM111_Transmit
   3510                                        }
   3511                                        sprintf( (char *)tempBffr2, "%s	0023		%1.4f		%2.3f\r\n", 
   3512                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3513                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3514                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_575: (+1)
   \   00003C10   0x0038             MOVS     R0,R7
   \   00003C12   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003C14   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003C18   0x4683             MOV      R11,R0
   \   00003C1A   0x0038             MOVS     R0,R7
   \   00003C1C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003C1E   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003C22   0x4681             MOV      R9,R0
   \   00003C24   0x0038             MOVS     R0,R7
   \   00003C26   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003C28   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003C2C   0x4682             MOV      R10,R0
   \   00003C2E   0x4658             MOV      R0,R11
   \   00003C30   0x.... 0x....      BL       __aeabi_f2d
   \   00003C34   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003C38   0x4648             MOV      R0,R9
   \   00003C3A   0x.... 0x....      BL       __aeabi_f2d
   \   00003C3E   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003C42   0x4652             MOV      R2,R10
   \   00003C44   0x.... 0x....      LDR.W    R1,??DataTable3_3
   \   00003C48   0xA80A             ADD      R0,SP,#+40
   \   00003C4A   0x.... 0x....      BL       sprintf
   3515                                        break;
   \   00003C4E   0xE0A4             B.N      ??RoadBrd_ParseString_530
   \                     ??RoadBrd_ParseString_493:
   \   00003C50   0x........         DC32     ?_224
   \   00003C54   0x........         DC32     ?_225
   \   00003C58   0x........         DC32     ?_226
   \   00003C5C   0x........         DC32     ?_227
   \   00003C60   0x........         DC32     ?_228
   \   00003C64   0x........         DC32     ?_229
   3516                                      case CAL_ROADT_7C: //CAL_ROADT_7C Values
   3517                                        // Is this a BLE Operation?
   3518                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_527: (+1)
   \   00003C68   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003C6A   0x2D00             CMP      R5,#+0
   \   00003C6C   0xD024             BEQ.N    ??RoadBrd_ParseString_576
   3519                                        {
   3520                                          // Yes...Build and Send BLE Response NOW.
   3521                                          sprintf( (char *)tempBffr2, "%s:0025//%1.4f//%2.3f//", 
   3522                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3523                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3524                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003C6E   0x0038             MOVS     R0,R7
   \   00003C70   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003C72   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003C76   0x4683             MOV      R11,R0
   \   00003C78   0x0038             MOVS     R0,R7
   \   00003C7A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003C7C   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003C80   0x4681             MOV      R9,R0
   \   00003C82   0x0038             MOVS     R0,R7
   \   00003C84   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003C86   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003C8A   0x4682             MOV      R10,R0
   \   00003C8C   0x4658             MOV      R0,R11
   \   00003C8E   0x.... 0x....      BL       __aeabi_f2d
   \   00003C92   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003C96   0x4648             MOV      R0,R9
   \   00003C98   0x.... 0x....      BL       __aeabi_f2d
   \   00003C9C   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003CA0   0x4652             MOV      R2,R10
   \   00003CA2   0x.... 0x....      LDR.W    R1,??DataTable3_4
   \   00003CA6   0xA80A             ADD      R0,SP,#+40
   \   00003CA8   0x.... 0x....      BL       sprintf
   3525                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003CAC   0xA80A             ADD      R0,SP,#+40
   \   00003CAE   0x.... 0x....      BL       strlen
   \   00003CB2   0xA90A             ADD      R1,SP,#+40
   \   00003CB4   0x.... 0x....      BL       BGM111_Transmit
   3526                                        }
   3527                                        sprintf( (char *)tempBffr2, "%s	0025		%1.4f		%2.3f\r\n", 
   3528                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3529                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3530                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_576: (+1)
   \   00003CB8   0x0038             MOVS     R0,R7
   \   00003CBA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003CBC   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003CC0   0x4683             MOV      R11,R0
   \   00003CC2   0x0038             MOVS     R0,R7
   \   00003CC4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003CC6   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003CCA   0x4681             MOV      R9,R0
   \   00003CCC   0x0038             MOVS     R0,R7
   \   00003CCE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003CD0   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003CD4   0x4682             MOV      R10,R0
   \   00003CD6   0x4658             MOV      R0,R11
   \   00003CD8   0x.... 0x....      BL       __aeabi_f2d
   \   00003CDC   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003CE0   0x4648             MOV      R0,R9
   \   00003CE2   0x.... 0x....      BL       __aeabi_f2d
   \   00003CE6   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003CEA   0x4652             MOV      R2,R10
   \   00003CEC   0x.... 0x....      LDR.W    R1,??DataTable3_5
   \   00003CF0   0xA80A             ADD      R0,SP,#+40
   \   00003CF2   0x.... 0x....      BL       sprintf
   3531                                        break;
   \   00003CF6   0xE050             B.N      ??RoadBrd_ParseString_530
   \                     ??RoadBrd_ParseString_499:
   \   00003CF8   0x........         DC32     ?_230
   \   00003CFC   0x........         DC32     ?_231
   \   00003D00   0x........         DC32     ?_232
   \   00003D04   0x........         DC32     ?_233
   \   00003D08   0x........         DC32     ?_234
   3532                                      case CAL_ROADT_8C: //CAL_ROADT_8C Values
   3533                                        // Is this a BLE Operation?
   3534                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_529: (+1)
   \   00003D0C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003D0E   0x2D00             CMP      R5,#+0
   \   00003D10   0xD024             BEQ.N    ??RoadBrd_ParseString_577
   3535                                        {
   3536                                          // Yes...Build and Send BLE Response NOW.
   3537                                          sprintf( (char *)tempBffr2, "%s:0027//%1.4f//%2.3f//", 
   3538                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3539                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3540                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003D12   0x0038             MOVS     R0,R7
   \   00003D14   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003D16   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003D1A   0x4683             MOV      R11,R0
   \   00003D1C   0x0038             MOVS     R0,R7
   \   00003D1E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003D20   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003D24   0x4681             MOV      R9,R0
   \   00003D26   0x0038             MOVS     R0,R7
   \   00003D28   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003D2A   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003D2E   0x4682             MOV      R10,R0
   \   00003D30   0x4658             MOV      R0,R11
   \   00003D32   0x.... 0x....      BL       __aeabi_f2d
   \   00003D36   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003D3A   0x4648             MOV      R0,R9
   \   00003D3C   0x.... 0x....      BL       __aeabi_f2d
   \   00003D40   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003D44   0x4652             MOV      R2,R10
   \   00003D46   0x.... 0x....      LDR.W    R1,??DataTable3_6
   \   00003D4A   0xA80A             ADD      R0,SP,#+40
   \   00003D4C   0x.... 0x....      BL       sprintf
   3541                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003D50   0xA80A             ADD      R0,SP,#+40
   \   00003D52   0x.... 0x....      BL       strlen
   \   00003D56   0xA90A             ADD      R1,SP,#+40
   \   00003D58   0x.... 0x....      BL       BGM111_Transmit
   3542                                        }
   3543                                        sprintf( (char *)tempBffr2, "%s	0027		%1.4f		%2.3f\r\n", 
   3544                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3545                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3546                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_577: (+1)
   \   00003D5C   0x0038             MOVS     R0,R7
   \   00003D5E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003D60   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003D64   0x4683             MOV      R11,R0
   \   00003D66   0x0038             MOVS     R0,R7
   \   00003D68   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003D6A   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003D6E   0x4681             MOV      R9,R0
   \   00003D70   0x0038             MOVS     R0,R7
   \   00003D72   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003D74   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003D78   0x4682             MOV      R10,R0
   \   00003D7A   0x4658             MOV      R0,R11
   \   00003D7C   0x.... 0x....      BL       __aeabi_f2d
   \   00003D80   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003D84   0x4648             MOV      R0,R9
   \   00003D86   0x.... 0x....      BL       __aeabi_f2d
   \   00003D8A   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003D8E   0x4652             MOV      R2,R10
   \   00003D90   0x.... 0x....      LDR.W    R1,??DataTable3_7
   \   00003D94   0xA80A             ADD      R0,SP,#+40
   \   00003D96   0x.... 0x....      BL       sprintf
   3547                                        break;
   3548                                    } // EndSwitch(x)
   3549                                    // Now Print String.
   3550          #ifdef NUCLEO
   3551                                    Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   3552          #else
   3553                                    Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \                     ??RoadBrd_ParseString_530: (+1)
   \   00003D9A   0xA90A             ADD      R1,SP,#+40
   \   00003D9C   0x2000             MOVS     R0,#+0
   \   00003D9E   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00003DA2   0x0006             MOVS     R6,R0
   3554          #endif
   3555                                    if (Status != HAL_OK)
   \   00003DA4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00003DA6   0x2E00             CMP      R6,#+0
   \   00003DA8   0xD008             BEQ.N    ??RoadBrd_ParseString_578
   3556                                      return Status;
   \   00003DAA   0x0030             MOVS     R0,R6
   \   00003DAC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003DAE   0xF000 0xBD97      B.W      ??RoadBrd_ParseString_4
   \   00003DB2   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_503:
   \   00003DB4   0x........         DC32     ?_235
   \   00003DB8   0x........         DC32     ?_236
   3557                                  } // EndFor(x=0; x<CAL_LAST_VALUE; x++)
   \                     ??RoadBrd_ParseString_578: (+1)
   \   00003DBC   0x1C7F             ADDS     R7,R7,#+1
   \   00003DBE   0xF7FF 0xB897      B.W      ??RoadBrd_ParseString_506
   3558                                  // Is this a BLE Operation?
   3559                                  if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_507: (+1)
   \   00003DC2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003DC4   0x2D00             CMP      R5,#+0
   \   00003DC6   0xD00A             BEQ.N    ??RoadBrd_ParseString_579
   3560                                  {
   3561                                    // Yes...Build and Send BLE Response NOW.
   3562                                    strcpy( (char *)tempBffr2, "</STATUS>");
   \   00003DC8   0x.... 0x....      LDR.W    R1,??DataTable3_8
   \   00003DCC   0xA80A             ADD      R0,SP,#+40
   \   00003DCE   0x.... 0x....      BL       strcpy
   3563                                    BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003DD2   0xA80A             ADD      R0,SP,#+40
   \   00003DD4   0x.... 0x....      BL       strlen
   \   00003DD8   0xA90A             ADD      R1,SP,#+40
   \   00003DDA   0x.... 0x....      BL       BGM111_Transmit
   3564                                  }
   3565                                  sprintf( (char *)tempBffr2, "\r\n     COMPLETE.\r\n" );
   \                     ??RoadBrd_ParseString_579: (+1)
   \   00003DDE   0x.... 0x....      LDR.W    R1,??DataTable4
   \   00003DE2   0xA80A             ADD      R0,SP,#+40
   \   00003DE4   0x.... 0x....      BL       sprintf
   3566                                  break;
   \   00003DE8   0xE091             B.N      ??RoadBrd_ParseString_376
   3567                                  //------------------ TCT Command: Calibration Set Time Command
   3568                                case 'T':
   3569                                  // Step 1. Validate format.
   3570                                  if(tempBffr[3]!=':')
   \                     ??RoadBrd_ParseString_385: (+1)
   \   00003DEA   0x78E0             LDRB     R0,[R4, #+3]
   \   00003DEC   0x283A             CMP      R0,#+58
   \   00003DEE   0xD013             BEQ.N    ??RoadBrd_ParseString_580
   3571                                  {
   3572                                    // Is this a BLE Operation?
   3573                                    if ( BLE_Flag )
   \   00003DF0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003DF2   0x2D00             CMP      R5,#+0
   \   00003DF4   0xD00A             BEQ.N    ??RoadBrd_ParseString_581
   3574                                    {
   3575                                      // Yes...Build and Send BLE Response NOW.
   3576                                      strcpy( (char *)tempBffr2, "<STATUS>CMD_TCT_SYNTAX</STATUS>");
   \   00003DF6   0x.... 0x....      LDR.W    R1,??DataTable4_1
   \   00003DFA   0xA80A             ADD      R0,SP,#+40
   \   00003DFC   0x.... 0x....      BL       strcpy
   3577                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003E00   0xA80A             ADD      R0,SP,#+40
   \   00003E02   0x.... 0x....      BL       strlen
   \   00003E06   0xA90A             ADD      R1,SP,#+40
   \   00003E08   0x.... 0x....      BL       BGM111_Transmit
   3578                                    }
   3579                                    
   3580                                    strcpy( (char *)tempBffr2, "TCT SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_581: (+1)
   \   00003E0C   0x.... 0x....      LDR.W    R1,??DataTable4_2
   \   00003E10   0xA80A             ADD      R0,SP,#+40
   \   00003E12   0x.... 0x....      BL       strcpy
   \   00003E16   0xE04C             B.N      ??RoadBrd_ParseString_582
   3581                                  } // Endif (tempBffr[3]!=':')
   3582                                  else
   3583                                  {
   3584                                    // 2. Verify if remaining string is digits
   3585                                    if (Size <= 4)
   \                     ??RoadBrd_ParseString_580: (+1)
   \   00003E18   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00003E1C   0xF1B8 0x0F05      CMP      R8,#+5
   \   00003E20   0xDA13             BGE.N    ??RoadBrd_ParseString_583
   3586                                    {
   3587                                      // Is this a BLE Operation?
   3588                                      if ( BLE_Flag )
   \   00003E22   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003E24   0x2D00             CMP      R5,#+0
   \   00003E26   0xD00A             BEQ.N    ??RoadBrd_ParseString_584
   3589                                      {
   3590                                        // Yes...Build and Send BLE Response NOW.
   3591                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_TCT_BADPARAM</STATUS>");
   \   00003E28   0x.... 0x....      LDR.W    R1,??DataTable4_3
   \   00003E2C   0xA80A             ADD      R0,SP,#+40
   \   00003E2E   0x.... 0x....      BL       strcpy
   3592                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003E32   0xA80A             ADD      R0,SP,#+40
   \   00003E34   0x.... 0x....      BL       strlen
   \   00003E38   0xA90A             ADD      R1,SP,#+40
   \   00003E3A   0x.... 0x....      BL       BGM111_Transmit
   3593                                      }
   3594                                      strcpy( (char *)tempBffr2, "TCT SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_584: (+1)
   \   00003E3E   0x.... 0x....      LDR.W    R1,??DataTable4_4
   \   00003E42   0xA80A             ADD      R0,SP,#+40
   \   00003E44   0x.... 0x....      BL       strcpy
   \   00003E48   0xE033             B.N      ??RoadBrd_ParseString_582
   3595                                    } // EndIf (Size > 4)
   3596                                    else
   3597                                    {
   3598                                      // 3. Grab remaining string and Save it.
   3599                                      tempPstr = &tempBffr[4];
   \                     ??RoadBrd_ParseString_583: (+1)
   \   00003E4A   0x1D20             ADDS     R0,R4,#+4
   \   00003E4C   0x9030             STR      R0,[SP, #+192]
   3600                                      strcpy(tempstr, tempPstr);
   \   00003E4E   0x9930             LDR      R1,[SP, #+192]
   \   00003E50   0xA851             ADD      R0,SP,#+324
   \   00003E52   0x.... 0x....      BL       strcpy
   3601                                      // NOW...Save it.
   3602                                      Status = RoadBrd_CAL_Set_TimeString( (uint8_t *)tempPstr );
   \   00003E56   0x9830             LDR      R0,[SP, #+192]
   \   00003E58   0x.... 0x....      BL       RoadBrd_CAL_Set_TimeString
   \   00003E5C   0x0006             MOVS     R6,R0
   3603                                      if (Status != HAL_OK)
   \   00003E5E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00003E60   0x2E00             CMP      R6,#+0
   \   00003E62   0xD013             BEQ.N    ??RoadBrd_ParseString_585
   3604                                      {
   3605                                        // Is this a BLE Operation?
   3606                                        if ( BLE_Flag )
   \   00003E64   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003E66   0x2D00             CMP      R5,#+0
   \   00003E68   0xD00A             BEQ.N    ??RoadBrd_ParseString_586
   3607                                        {
   3608                                          // Yes...Build and Send BLE Response NOW.
   3609                                          strcpy( (char *)tempBffr2, "<STATUS>CMD_TCT_ERR</STATUS>");
   \   00003E6A   0x.... 0x....      LDR.W    R1,??DataTable4_5
   \   00003E6E   0xA80A             ADD      R0,SP,#+40
   \   00003E70   0x.... 0x....      BL       strcpy
   3610                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003E74   0xA80A             ADD      R0,SP,#+40
   \   00003E76   0x.... 0x....      BL       strlen
   \   00003E7A   0xA90A             ADD      R1,SP,#+40
   \   00003E7C   0x.... 0x....      BL       BGM111_Transmit
   3611                                        }
   3612                                        return Status;
   \                     ??RoadBrd_ParseString_586: (+1)
   \   00003E80   0x0030             MOVS     R0,R6
   \   00003E82   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003E84   0xF000 0xBD2C      B.W      ??RoadBrd_ParseString_4
   \                     ??RoadBrd_ParseString_532:
   \   00003E88   0x........         DC32     ?_237
   3613                                      }
   3614                                      else
   3615                                      {
   3616                                        // Is this a BLE Operation?
   3617                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_585: (+1)
   \   00003E8C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003E8E   0x2D00             CMP      R5,#+0
   \   00003E90   0xD00A             BEQ.N    ??RoadBrd_ParseString_587
   3618                                        {
   3619                                          // Yes...Build and Send BLE Response NOW.
   3620                                          strcpy( (char *)tempBffr2, "<STATUS>ST_TCT_ACK</STATUS>");
   \   00003E92   0x.... 0x....      LDR.W    R1,??DataTable4_6
   \   00003E96   0xA80A             ADD      R0,SP,#+40
   \   00003E98   0x.... 0x....      BL       strcpy
   3621                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003E9C   0xA80A             ADD      R0,SP,#+40
   \   00003E9E   0x.... 0x....      BL       strlen
   \   00003EA2   0xA90A             ADD      R1,SP,#+40
   \   00003EA4   0x.... 0x....      BL       BGM111_Transmit
   3622                                        }
   3623                                      }
   3624                                      sprintf( (char *)tempBffr2, "\r\n     COMPLETE.\r\n" );
   \                     ??RoadBrd_ParseString_587: (+1)
   \   00003EA8   0x.... 0x....      LDR.W    R1,??DataTable4
   \   00003EAC   0xA80A             ADD      R0,SP,#+40
   \   00003EAE   0x.... 0x....      BL       sprintf
   3625                                    } // EndElse (Size > 4)
   3626                                  } // EndElse (tempBffr[3]!=':')
   3627                                  break;
   \                     ??RoadBrd_ParseString_582: (+1)
   \   00003EB2   0xE02C             B.N      ??RoadBrd_ParseString_376
   3628                                  //------------------ TCI Command: Calibration Initialize Cal Table(Reset)
   3629                                case 'I':
   3630                                  Status = RoadBrd_CAL_InitializeFrmFlash();
   \                     ??RoadBrd_ParseString_382: (+1)
   \   00003EB4   0x.... 0x....      BL       RoadBrd_CAL_InitializeFrmFlash
   \   00003EB8   0x0006             MOVS     R6,R0
   3631                                  if (Status != HAL_OK)
   \   00003EBA   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00003EBC   0x2E00             CMP      R6,#+0
   \   00003EBE   0xD013             BEQ.N    ??RoadBrd_ParseString_588
   3632                                  {
   3633                                    // Is this a BLE Operation?
   3634                                    if ( BLE_Flag )
   \   00003EC0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003EC2   0x2D00             CMP      R5,#+0
   \   00003EC4   0xD00A             BEQ.N    ??RoadBrd_ParseString_589
   3635                                    {
   3636                                      // Yes...Build and Send BLE Response NOW.
   3637                                      strcpy( (char *)tempBffr2, "<STATUS>CMD_TCI_ERR</STATUS>");
   \   00003EC6   0x.... 0x....      LDR.W    R1,??DataTable4_7
   \   00003ECA   0xA80A             ADD      R0,SP,#+40
   \   00003ECC   0x.... 0x....      BL       strcpy
   3638                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003ED0   0xA80A             ADD      R0,SP,#+40
   \   00003ED2   0x.... 0x....      BL       strlen
   \   00003ED6   0xA90A             ADD      R1,SP,#+40
   \   00003ED8   0x.... 0x....      BL       BGM111_Transmit
   3639                                    }
   3640                                    return Status;
   \                     ??RoadBrd_ParseString_589: (+1)
   \   00003EDC   0x0030             MOVS     R0,R6
   \   00003EDE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003EE0   0xF000 0xBCFE      B.W      ??RoadBrd_ParseString_4
   \                     ??RoadBrd_ParseString_533:
   \   00003EE4   0x........         DC32     ?_238
   3641                                  }
   3642                                  else
   3643                                  {
   3644                                    // Is this a BLE Operation?
   3645                                    if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_588: (+1)
   \   00003EE8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003EEA   0x2D00             CMP      R5,#+0
   \   00003EEC   0xD00A             BEQ.N    ??RoadBrd_ParseString_590
   3646                                    {
   3647                                      // Yes...Build and Send BLE Response NOW.
   3648                                      strcpy( (char *)tempBffr2, "<STATUS>ST_TCI_ACK</STATUS>");
   \   00003EEE   0x.... 0x....      LDR.W    R1,??DataTable4_8
   \   00003EF2   0xA80A             ADD      R0,SP,#+40
   \   00003EF4   0x.... 0x....      BL       strcpy
   3649                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003EF8   0xA80A             ADD      R0,SP,#+40
   \   00003EFA   0x.... 0x....      BL       strlen
   \   00003EFE   0xA90A             ADD      R1,SP,#+40
   \   00003F00   0x.... 0x....      BL       BGM111_Transmit
   3650                                    }
   3651                                  }
   3652                                  sprintf( (char *)tempBffr2, "\r\n     COMPLETE.\r\n" );
   \                     ??RoadBrd_ParseString_590: (+1)
   \   00003F04   0x.... 0x....      LDR.W    R1,??DataTable4
   \   00003F08   0xA80A             ADD      R0,SP,#+40
   \   00003F0A   0x.... 0x....      BL       sprintf
   3653                                  break;
   3654                                } //EndSwitch
   3655                              } //EndElse (Size == 2)
   3656                              break;
   \                     ??RoadBrd_ParseString_376: (+1)
   \   00003F0E   0xF000 0xBC5B      B.W      ??RoadBrd_ParseString_289
   3657          //++++++++++++++++++++++++++++++++++++++++++  Dump Driver State.
   3658                            case 'D':
   3659                              // Read Driver Status
   3660                              DriverStatus = Get_DriverStatus();
   \                     ??RoadBrd_ParseString_291: (+1)
   \   00003F12   0x.... 0x....      BL       Get_DriverStatus
   \   00003F16   0xF8AD 0x00CE      STRH     R0,[SP, #+206]
   3661                              // Is this a BLE Operation?
   3662                              if ( BLE_Flag )
   \   00003F1A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003F1C   0x2D00             CMP      R5,#+0
   \   00003F1E   0xD00C             BEQ.N    ??RoadBrd_ParseString_591
   3663                              {
   3664                                // Yes...Build and Send BLE Response NOW.
   3665                                sprintf( (char *)tempBffr2, "<STATUS>ST_DRIVER:%04x</STATUS>", DriverStatus );
   \   00003F20   0xF8BD 0x20CE      LDRH     R2,[SP, #+206]
   \   00003F24   0x.... 0x....      LDR.W    R1,??DataTable4_9
   \   00003F28   0xA80A             ADD      R0,SP,#+40
   \   00003F2A   0x.... 0x....      BL       sprintf
   3666                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003F2E   0xA80A             ADD      R0,SP,#+40
   \   00003F30   0x.... 0x....      BL       strlen
   \   00003F34   0xA90A             ADD      R1,SP,#+40
   \   00003F36   0x.... 0x....      BL       BGM111_Transmit
   3667                              }
   3668                              
   3669                              sprintf( (char *)tempBffr2, "Driver Status: %04x\r\n", DriverStatus );
   \                     ??RoadBrd_ParseString_591: (+1)
   \   00003F3A   0xF8BD 0x20CE      LDRH     R2,[SP, #+206]
   \   00003F3E   0x.... 0x....      LDR.W    R1,??DataTable4_10
   \   00003F42   0xA80A             ADD      R0,SP,#+40
   \   00003F44   0x.... 0x....      BL       sprintf
   3670                              break;
   \   00003F48   0xF000 0xBC3E      B.W      ??RoadBrd_ParseString_289
   \                     ??RoadBrd_ParseString_535:
   \   00003F4C   0x........         DC32     ?_239
   3671          //++++++++++++++++++++++++++++++++++++++++++  RESET Micro.
   3672                            case 'R':
   3673                              // RESET
   3674                              // Is this a BLE Operation?
   3675                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_297: (+1)
   \   00003F50   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003F52   0x2D00             CMP      R5,#+0
   \   00003F54   0xD00D             BEQ.N    ??RoadBrd_ParseString_592
   3676                              {
   3677                                // Yes...Build and Send BLE Response NOW.
   3678                                strcpy( (char *)tempBffr2, "<STATUS>ST_RESET_ACK</STATUS>");
   \   00003F56   0x.... 0x....      LDR.W    R1,??DataTable4_11
   \   00003F5A   0xA80A             ADD      R0,SP,#+40
   \   00003F5C   0x.... 0x....      BL       strcpy
   3679                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003F60   0xA80A             ADD      R0,SP,#+40
   \   00003F62   0x.... 0x....      BL       strlen
   \   00003F66   0xA90A             ADD      R1,SP,#+40
   \   00003F68   0x.... 0x....      BL       BGM111_Transmit
   3680                                HAL_Delay(100);           // Wait 100ms
   \   00003F6C   0x2064             MOVS     R0,#+100
   \   00003F6E   0x.... 0x....      BL       HAL_Delay
   3681                              }
   3682                              HAL_NVIC_SystemReset();
   \                     ??RoadBrd_ParseString_592: (+1)
   \   00003F72   0x.... 0x....      BL       HAL_NVIC_SystemReset
   3683                              sprintf( (char *)tempBffr2, "RESET CALLED BUT NO RESPONSE!!\r\n" );
   \   00003F76   0x.... 0x....      LDR.W    R1,??DataTable4_12
   \   00003F7A   0xA80A             ADD      R0,SP,#+40
   \   00003F7C   0x.... 0x....      BL       sprintf
   3684                              break;
   \   00003F80   0xF000 0xBC22      B.W      ??RoadBrd_ParseString_289
   \                     ??RoadBrd_ParseString_536:
   \   00003F84   0x........         DC32     ?_240
   3685          //++++++++++++++++++++++++++++++++++++++++++  Key Flash Variable Commands.
   3686                            case 'K':
   3687                              // Key Flash Variable Commands.
   3688                              // Test Size to make sure we have enough Characters for this operation
   3689                              Status = HAL_OK;
   \                     ??RoadBrd_ParseString_294: (+1)
   \   00003F88   0x2000             MOVS     R0,#+0
   \   00003F8A   0x0006             MOVS     R6,R0
   3690                              if (Size < 4)
   \   00003F8C   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00003F90   0xF1B8 0x0F04      CMP      R8,#+4
   \   00003F94   0xDA16             BGE.N    ??RoadBrd_ParseString_593
   3691                              {
   3692                                // Is this a BLE Operation?
   3693                                if ( BLE_Flag )
   \   00003F96   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003F98   0x2D00             CMP      R5,#+0
   \   00003F9A   0xD00A             BEQ.N    ??RoadBrd_ParseString_594
   3694                                {
   3695                                  // Yes...Build and Send BLE Response NOW.
   3696                                  strcpy( (char *)tempBffr2, "<STATUS>CMD_TK_SYNTAX</STATUS>");
   \   00003F9C   0x.... 0x....      LDR.W    R1,??DataTable4_13
   \   00003FA0   0xA80A             ADD      R0,SP,#+40
   \   00003FA2   0x.... 0x....      BL       strcpy
   3697                                  BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003FA6   0xA80A             ADD      R0,SP,#+40
   \   00003FA8   0x.... 0x....      BL       strlen
   \   00003FAC   0xA90A             ADD      R1,SP,#+40
   \   00003FAE   0x.... 0x....      BL       BGM111_Transmit
   3698                                }
   3699                                strcpy( (char *)tempBffr2, "TK SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_594: (+1)
   \   00003FB2   0x.... 0x....      LDR.W    R1,??DataTable4_14
   \   00003FB6   0xA80A             ADD      R0,SP,#+40
   \   00003FB8   0x.... 0x....      BL       strcpy
   \   00003FBC   0xE315             B.N      ??RoadBrd_ParseString_595
   \   00003FBE   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_538:
   \   00003FC0   0x........         DC32     ?_241
   3700                              }
   3701                              else
   3702                              {
   3703                                switch( tempBffr[2] )
   \                     ??RoadBrd_ParseString_593: (+1)
   \   00003FC4   0x78A0             LDRB     R0,[R4, #+2]
   \   00003FC6   0x2852             CMP      R0,#+82
   \   00003FC8   0xF000 0x8246      BEQ.W    ??RoadBrd_ParseString_596
   \   00003FCC   0x2853             CMP      R0,#+83
   \   00003FCE   0xF040 0x82F9      BNE.W    ??RoadBrd_ParseString_597
   3704                                {
   3705          //------------------
   3706                                  case 'S':
   3707                                    //Key Flash Variable Set Command.
   3708                                    switch( tempBffr[3] )
   \                     ??RoadBrd_ParseString_598: (+1)
   \   00003FD2   0x78E0             LDRB     R0,[R4, #+3]
   \   00003FD4   0x2842             CMP      R0,#+66
   \   00003FD6   0xF000 0x81AC      BEQ.W    ??RoadBrd_ParseString_599
   \   00003FDA   0x2852             CMP      R0,#+82
   \   00003FDC   0xD006             BEQ.N    ??RoadBrd_ParseString_600
   \   00003FDE   0x2853             CMP      R0,#+83
   \   00003FE0   0xF000 0x8091      BEQ.W    ??RoadBrd_ParseString_601
   \   00003FE4   0x2854             CMP      R0,#+84
   \   00003FE6   0xF000 0x8117      BEQ.W    ??RoadBrd_ParseString_602
   \   00003FEA   0xE22A             B.N      ??RoadBrd_ParseString_603
   3709                                    {
   3710          //------------------
   3711                                      case 'R':
   3712                                        //Key Flash Variable Set Road Sound Sample Rate Command.
   3713                                        // Step 1. Validate format.
   3714                                        if(tempBffr[4]!=':')
   \                     ??RoadBrd_ParseString_600: (+1)
   \   00003FEC   0x7920             LDRB     R0,[R4, #+4]
   \   00003FEE   0x283A             CMP      R0,#+58
   \   00003FF0   0xD01A             BEQ.N    ??RoadBrd_ParseString_604
   3715                                        {
   3716                                          // Is this a BLE Operation?
   3717                                          if ( BLE_Flag )
   \   00003FF2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003FF4   0x2D00             CMP      R5,#+0
   \   00003FF6   0xD00A             BEQ.N    ??RoadBrd_ParseString_605
   3718                                          {
   3719                                            // Yes...Build and Send BLE Response NOW.
   3720                                            strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSR_SYNTAX</STATUS>");
   \   00003FF8   0x.... 0x....      LDR.W    R1,??DataTable4_15
   \   00003FFC   0xA80A             ADD      R0,SP,#+40
   \   00003FFE   0x.... 0x....      BL       strcpy
   3721                                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004002   0xA80A             ADD      R0,SP,#+40
   \   00004004   0x.... 0x....      BL       strlen
   \   00004008   0xA90A             ADD      R1,SP,#+40
   \   0000400A   0x.... 0x....      BL       BGM111_Transmit
   3722                                          }
   3723                                          strcpy( (char *)tempBffr2, "TKSR SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_605: (+1)
   \   0000400E   0x.... 0x....      LDR.W    R1,??DataTable4_16
   \   00004012   0xA80A             ADD      R0,SP,#+40
   \   00004014   0x.... 0x....      BL       strcpy
   \   00004018   0xE074             B.N      ??RoadBrd_ParseString_606
   \   0000401A   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_539:
   \   0000401C   0x........         DC32     ?_242
   \   00004020   0x........         DC32     ?_243
   \   00004024   0x........         DC32     ?_244
   3724                                        } // Endif (tempBffr[4]!=':')
   3725                                        else
   3726                                        {
   3727                                          // 2. Verify if remaining string is digits
   3728                                          if (Size > 5)
   \                     ??RoadBrd_ParseString_604: (+1)
   \   00004028   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000402C   0xF1B8 0x0F06      CMP      R8,#+6
   \   00004030   0xDB10             BLT.N    ??RoadBrd_ParseString_607
   3729                                          {
   3730                                            flag = 1;
   \   00004032   0x2001             MOVS     R0,#+1
   \   00004034   0x902E             STR      R0,[SP, #+184]
   3731                                            for (x=5; x< Size; x++)
   \   00004036   0x2005             MOVS     R0,#+5
   \   00004038   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_608: (+1)
   \   0000403A   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000403E   0x4547             CMP      R7,R8
   \   00004040   0xDA0A             BGE.N    ??RoadBrd_ParseString_609
   3732                                            {
   3733                                              if (isdigit(tempBffr[x]) == 0)
   \   00004042   0x5DE0             LDRB     R0,[R4, R7]
   \   00004044   0x.... 0x....      BL       isdigit
   \   00004048   0x2800             CMP      R0,#+0
   \   0000404A   0xD101             BNE.N    ??RoadBrd_ParseString_610
   3734                                                flag = 0;
   \   0000404C   0x2000             MOVS     R0,#+0
   \   0000404E   0x902E             STR      R0,[SP, #+184]
   3735                                            }
   \                     ??RoadBrd_ParseString_610: (+1)
   \   00004050   0x1C7F             ADDS     R7,R7,#+1
   \   00004052   0xE7F2             B.N      ??RoadBrd_ParseString_608
   3736                                          } // EndIf (Size > 5)
   3737                                          else
   3738                                            flag = 0;
   \                     ??RoadBrd_ParseString_607: (+1)
   \   00004054   0x2000             MOVS     R0,#+0
   \   00004056   0x902E             STR      R0,[SP, #+184]
   3739                                          if (flag == 0)
   \                     ??RoadBrd_ParseString_609: (+1)
   \   00004058   0x982E             LDR      R0,[SP, #+184]
   \   0000405A   0x2800             CMP      R0,#+0
   \   0000405C   0xD113             BNE.N    ??RoadBrd_ParseString_611
   3740                                          {
   3741                                            // Is this a BLE Operation?
   3742                                            if ( BLE_Flag )
   \   0000405E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004060   0x2D00             CMP      R5,#+0
   \   00004062   0xD00A             BEQ.N    ??RoadBrd_ParseString_612
   3743                                            {
   3744                                              // Yes...Build and Send BLE Response NOW.
   3745                                              strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSR_BADPARAM</STATUS>");
   \   00004064   0x.... 0x....      LDR.W    R1,??DataTable4_17
   \   00004068   0xA80A             ADD      R0,SP,#+40
   \   0000406A   0x.... 0x....      BL       strcpy
   3746                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000406E   0xA80A             ADD      R0,SP,#+40
   \   00004070   0x.... 0x....      BL       strlen
   \   00004074   0xA90A             ADD      R1,SP,#+40
   \   00004076   0x.... 0x....      BL       BGM111_Transmit
   3747                                            }
   3748                                            strcpy( (char *)tempBffr2, "TKSR SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_612: (+1)
   \   0000407A   0x.... 0x....      LDR.W    R1,??DataTable4_18
   \   0000407E   0xA80A             ADD      R0,SP,#+40
   \   00004080   0x.... 0x....      BL       strcpy
   \   00004084   0xE03E             B.N      ??RoadBrd_ParseString_606
   3749                                          }
   3750                                          else
   3751                                          {
   3752                                            // 3. Grab remaining string and convert to integer.
   3753                                            tempPstr = &tempBffr[5];
   \                     ??RoadBrd_ParseString_611: (+1)
   \   00004086   0x1D60             ADDS     R0,R4,#+5
   \   00004088   0x9030             STR      R0,[SP, #+192]
   3754                                            strcpy(tempstr, tempPstr);
   \   0000408A   0x9930             LDR      R1,[SP, #+192]
   \   0000408C   0xA851             ADD      R0,SP,#+324
   \   0000408E   0x.... 0x....      BL       strcpy
   3755                                            new_value = atoi( tempstr );
   \   00004092   0xA851             ADD      R0,SP,#+324
   \   00004094   0x.... 0x....      BL       atoi
   \   00004098   0x902F             STR      R0,[SP, #+188]
   3756                                            if((new_value > 9999) ||
   3757                                               (new_value < 0))
   \   0000409A   0x982F             LDR      R0,[SP, #+188]
   \   0000409C   0xF242 0x7110      MOVW     R1,#+10000
   \   000040A0   0x4288             CMP      R0,R1
   \   000040A2   0xDA02             BGE.N    ??RoadBrd_ParseString_613
   \   000040A4   0x982F             LDR      R0,[SP, #+188]
   \   000040A6   0x2800             CMP      R0,#+0
   \   000040A8   0xD516             BPL.N    ??RoadBrd_ParseString_614
   3758                                            {
   3759                                              // Is this a BLE Operation?
   3760                                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_613: (+1)
   \   000040AA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000040AC   0x2D00             CMP      R5,#+0
   \   000040AE   0xD00A             BEQ.N    ??RoadBrd_ParseString_615
   3761                                              {
   3762                                                // Yes...Build and Send BLE Response NOW.
   3763                                                strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSR_BADPARAM</STATUS>");
   \   000040B0   0x.... 0x....      LDR.W    R1,??DataTable4_17
   \   000040B4   0xA80A             ADD      R0,SP,#+40
   \   000040B6   0x.... 0x....      BL       strcpy
   3764                                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000040BA   0xA80A             ADD      R0,SP,#+40
   \   000040BC   0x.... 0x....      BL       strlen
   \   000040C0   0xA90A             ADD      R1,SP,#+40
   \   000040C2   0x.... 0x....      BL       BGM111_Transmit
   3765                                              }
   3766                                              strcpy( (char *)tempBffr2, "TKSR SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_615: (+1)
   \   000040C6   0x.... 0x....      LDR.W    R1,??DataTable4_18
   \   000040CA   0xA80A             ADD      R0,SP,#+40
   \   000040CC   0x.... 0x....      BL       strcpy
   \   000040D0   0xE018             B.N      ??RoadBrd_ParseString_606
   \   000040D2   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_542:
   \   000040D4   0x........         DC32     ?_245
   3767                                            }
   3768                                            else
   3769                                            {
   3770                                              // Time to set new Road Sound Sample Rate.
   3771                                              RoadBrd_Set_RdSndTickCnt( new_value );
   \                     ??RoadBrd_ParseString_614: (+1)
   \   000040D8   0x982F             LDR      R0,[SP, #+188]
   \   000040DA   0x.... 0x....      BL       RoadBrd_Set_RdSndTickCnt
   3772                                              // NOW, Build Data String..
   3773                                              // Is this a BLE Operation?
   3774                                              if ( BLE_Flag )
   \   000040DE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000040E0   0x2D00             CMP      R5,#+0
   \   000040E2   0xD00A             BEQ.N    ??RoadBrd_ParseString_616
   3775                                              {
   3776                                                // Yes...Build and Send BLE Response NOW.
   3777                                                strcpy( (char *)tempBffr2, "<STATUS>ST_TKSR_ACK</STATUS>");
   \   000040E4   0x.... 0x....      LDR.W    R1,??DataTable4_19
   \   000040E8   0xA80A             ADD      R0,SP,#+40
   \   000040EA   0x.... 0x....      BL       strcpy
   3778                                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000040EE   0xA80A             ADD      R0,SP,#+40
   \   000040F0   0x.... 0x....      BL       strlen
   \   000040F4   0xA90A             ADD      R1,SP,#+40
   \   000040F6   0x.... 0x....      BL       BGM111_Transmit
   3779                                              }
   3780                                              sprintf( (char *)tempBffr2, "COMPLETE" );
   \                     ??RoadBrd_ParseString_616: (+1)
   \   000040FA   0x.... 0x....      LDR.W    R1,??DataTable4_20
   \   000040FE   0xA80A             ADD      R0,SP,#+40
   \   00004100   0x.... 0x....      BL       sprintf
   3781                                            } // EndElse ((new_value > 9999) || (new_value < 0))
   3782                                          } // EndElse (flag == 0)
   3783                                        } // EndElse (tempBffr[4]!=':')
   3784                                        break;
   \                     ??RoadBrd_ParseString_606: (+1)
   \   00004104   0xE1A2             B.N      ??RoadBrd_ParseString_617
   3785          //------------------
   3786                                      case 'S':
   3787                                        //Key Flash Variable Set Sensor Sample Rate Command.
   3788                                        // Step 1. Validate format.
   3789                                        if(tempBffr[4]!=':')
   \                     ??RoadBrd_ParseString_601: (+1)
   \   00004106   0x7920             LDRB     R0,[R4, #+4]
   \   00004108   0x283A             CMP      R0,#+58
   \   0000410A   0xD019             BEQ.N    ??RoadBrd_ParseString_618
   3790                                        {
   3791                                          // Is this a BLE Operation?
   3792                                          if ( BLE_Flag )
   \   0000410C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000410E   0x2D00             CMP      R5,#+0
   \   00004110   0xD00A             BEQ.N    ??RoadBrd_ParseString_619
   3793                                          {
   3794                                            // Yes...Build and Send BLE Response NOW.
   3795                                            strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSS_SYNTAX</STATUS>");
   \   00004112   0x.... 0x....      LDR.W    R1,??DataTable4_21
   \   00004116   0xA80A             ADD      R0,SP,#+40
   \   00004118   0x.... 0x....      BL       strcpy
   3796                                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000411C   0xA80A             ADD      R0,SP,#+40
   \   0000411E   0x.... 0x....      BL       strlen
   \   00004122   0xA90A             ADD      R1,SP,#+40
   \   00004124   0x.... 0x....      BL       BGM111_Transmit
   3797                                          }
   3798                                          strcpy( (char *)tempBffr2, "TKSS SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_619: (+1)
   \   00004128   0x.... 0x....      LDR.W    R1,??DataTable4_22
   \   0000412C   0xA80A             ADD      R0,SP,#+40
   \   0000412E   0x.... 0x....      BL       strcpy
   \   00004132   0xE070             B.N      ??RoadBrd_ParseString_620
   \                     ??RoadBrd_ParseString_543:
   \   00004134   0x........         DC32     ?_246
   \   00004138   0x........         DC32     ?_247
   \   0000413C   0x........         DC32     ?_248
   3799                                        } // Endif (tempBffr[4]!=':')
   3800                                        else
   3801                                        {
   3802                                          // 2. Verify if remaining string is digits
   3803                                          if (Size > 5)
   \                     ??RoadBrd_ParseString_618: (+1)
   \   00004140   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00004144   0xF1B8 0x0F06      CMP      R8,#+6
   \   00004148   0xDB10             BLT.N    ??RoadBrd_ParseString_621
   3804                                          {
   3805                                            flag = 1;
   \   0000414A   0x2001             MOVS     R0,#+1
   \   0000414C   0x902E             STR      R0,[SP, #+184]
   3806                                            for (x=5; x< Size; x++)
   \   0000414E   0x2005             MOVS     R0,#+5
   \   00004150   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_622: (+1)
   \   00004152   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00004156   0x4547             CMP      R7,R8
   \   00004158   0xDA0A             BGE.N    ??RoadBrd_ParseString_623
   3807                                            {
   3808                                              if (isdigit(tempBffr[x]) == 0)
   \   0000415A   0x5DE0             LDRB     R0,[R4, R7]
   \   0000415C   0x.... 0x....      BL       isdigit
   \   00004160   0x2800             CMP      R0,#+0
   \   00004162   0xD101             BNE.N    ??RoadBrd_ParseString_624
   3809                                                flag = 0;
   \   00004164   0x2000             MOVS     R0,#+0
   \   00004166   0x902E             STR      R0,[SP, #+184]
   3810                                            }
   \                     ??RoadBrd_ParseString_624: (+1)
   \   00004168   0x1C7F             ADDS     R7,R7,#+1
   \   0000416A   0xE7F2             B.N      ??RoadBrd_ParseString_622
   3811                                          } // EndIf (Size > 5)
   3812                                          else
   3813                                            flag = 0;
   \                     ??RoadBrd_ParseString_621: (+1)
   \   0000416C   0x2000             MOVS     R0,#+0
   \   0000416E   0x902E             STR      R0,[SP, #+184]
   3814                                          if (flag == 0)
   \                     ??RoadBrd_ParseString_623: (+1)
   \   00004170   0x982E             LDR      R0,[SP, #+184]
   \   00004172   0x2800             CMP      R0,#+0
   \   00004174   0xD113             BNE.N    ??RoadBrd_ParseString_625
   3815                                          {
   3816                                            // Is this a BLE Operation?
   3817                                            if ( BLE_Flag )
   \   00004176   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004178   0x2D00             CMP      R5,#+0
   \   0000417A   0xD00A             BEQ.N    ??RoadBrd_ParseString_626
   3818                                            {
   3819                                              // Yes...Build and Send BLE Response NOW.
   3820                                              strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSS_BADPARAM</STATUS>");
   \   0000417C   0x.... 0x....      LDR.W    R1,??DataTable4_23
   \   00004180   0xA80A             ADD      R0,SP,#+40
   \   00004182   0x.... 0x....      BL       strcpy
   3821                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004186   0xA80A             ADD      R0,SP,#+40
   \   00004188   0x.... 0x....      BL       strlen
   \   0000418C   0xA90A             ADD      R1,SP,#+40
   \   0000418E   0x.... 0x....      BL       BGM111_Transmit
   3822                                            }
   3823                                            strcpy( (char *)tempBffr2, "TKSS SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_626: (+1)
   \   00004192   0x.... 0x....      LDR.W    R1,??DataTable4_24
   \   00004196   0xA80A             ADD      R0,SP,#+40
   \   00004198   0x.... 0x....      BL       strcpy
   \   0000419C   0xE03B             B.N      ??RoadBrd_ParseString_620
   3824                                          }
   3825                                          else
   3826                                          {
   3827                                            // 3. Grab remaining string and convert to integer.
   3828                                            tempPstr = &tempBffr[5];
   \                     ??RoadBrd_ParseString_625: (+1)
   \   0000419E   0x1D60             ADDS     R0,R4,#+5
   \   000041A0   0x9030             STR      R0,[SP, #+192]
   3829                                            strcpy(tempstr, tempPstr);
   \   000041A2   0x9930             LDR      R1,[SP, #+192]
   \   000041A4   0xA851             ADD      R0,SP,#+324
   \   000041A6   0x.... 0x....      BL       strcpy
   3830                                            new_value = atoi( tempstr );
   \   000041AA   0xA851             ADD      R0,SP,#+324
   \   000041AC   0x.... 0x....      BL       atoi
   \   000041B0   0x902F             STR      R0,[SP, #+188]
   3831                                            if((new_value > 9999) ||
   3832                                               (new_value < 0))
   \   000041B2   0x982F             LDR      R0,[SP, #+188]
   \   000041B4   0xF242 0x7110      MOVW     R1,#+10000
   \   000041B8   0x4288             CMP      R0,R1
   \   000041BA   0xDA02             BGE.N    ??RoadBrd_ParseString_627
   \   000041BC   0x982F             LDR      R0,[SP, #+188]
   \   000041BE   0x2800             CMP      R0,#+0
   \   000041C0   0xD513             BPL.N    ??RoadBrd_ParseString_628
   3833                                            {
   3834                                              // Is this a BLE Operation?
   3835                                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_627: (+1)
   \   000041C2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000041C4   0x2D00             CMP      R5,#+0
   \   000041C6   0xD00A             BEQ.N    ??RoadBrd_ParseString_629
   3836                                              {
   3837                                                // Yes...Build and Send BLE Response NOW.
   3838                                                strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSS_BADPARAM</STATUS>");
   \   000041C8   0x.... 0x....      LDR.W    R1,??DataTable4_23
   \   000041CC   0xA80A             ADD      R0,SP,#+40
   \   000041CE   0x.... 0x....      BL       strcpy
   3839                                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000041D2   0xA80A             ADD      R0,SP,#+40
   \   000041D4   0x.... 0x....      BL       strlen
   \   000041D8   0xA90A             ADD      R1,SP,#+40
   \   000041DA   0x.... 0x....      BL       BGM111_Transmit
   3840                                              }
   3841                                              strcpy( (char *)tempBffr2, "TKSS SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_629: (+1)
   \   000041DE   0x.... 0x....      LDR.W    R1,??DataTable4_24
   \   000041E2   0xA80A             ADD      R0,SP,#+40
   \   000041E4   0x.... 0x....      BL       strcpy
   \   000041E8   0xE015             B.N      ??RoadBrd_ParseString_620
   3842                                            }
   3843                                            else
   3844                                            {
   3845                                              // Time to set new Road Sound Sample Rate.
   3846                                              RoadBrd_Set_SnsrTickCnt( new_value );
   \                     ??RoadBrd_ParseString_628: (+1)
   \   000041EA   0x982F             LDR      R0,[SP, #+188]
   \   000041EC   0x.... 0x....      BL       RoadBrd_Set_SnsrTickCnt
   3847                                              // Is this a BLE Operation?
   3848                                              if ( BLE_Flag )
   \   000041F0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000041F2   0x2D00             CMP      R5,#+0
   \   000041F4   0xD00A             BEQ.N    ??RoadBrd_ParseString_630
   3849                                              {
   3850                                                // Yes...Build and Send BLE Response NOW.
   3851                                                strcpy( (char *)tempBffr2, "<STATUS>ST_TKSS_ACK</STATUS>");
   \   000041F6   0x.... 0x....      LDR.W    R1,??DataTable4_25
   \   000041FA   0xA80A             ADD      R0,SP,#+40
   \   000041FC   0x.... 0x....      BL       strcpy
   3852                                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004200   0xA80A             ADD      R0,SP,#+40
   \   00004202   0x.... 0x....      BL       strlen
   \   00004206   0xA90A             ADD      R1,SP,#+40
   \   00004208   0x.... 0x....      BL       BGM111_Transmit
   3853                                              }
   3854                                              // NOW, Build Data String..
   3855                                              sprintf( (char *)tempBffr2, "COMPLETE" );
   \                     ??RoadBrd_ParseString_630: (+1)
   \   0000420C   0x.... 0x....      LDR.W    R1,??DataTable4_20
   \   00004210   0xA80A             ADD      R0,SP,#+40
   \   00004212   0x.... 0x....      BL       sprintf
   3856                                            } // EndElse ((new_value > 9999) || (new_value < 0))
   3857                                          } // EndElse (flag == 0)
   3858                                        } // EndElse (tempBffr[4]!=':')
   3859                                        break;
   \                     ??RoadBrd_ParseString_620: (+1)
   \   00004216   0xE119             B.N      ??RoadBrd_ParseString_617
   3860          //------------------
   3861                                      case 'T':
   3862                                        //Key Flash Variable Set TACK Limit(Multiple of Road Sound Throttles).
   3863                                        // Step 1. Validate format.
   3864                                        if(tempBffr[4]!=':')
   \                     ??RoadBrd_ParseString_602: (+1)
   \   00004218   0x7920             LDRB     R0,[R4, #+4]
   \   0000421A   0x283A             CMP      R0,#+58
   \   0000421C   0xD018             BEQ.N    ??RoadBrd_ParseString_631
   3865                                        {
   3866                                          // Is this a BLE Operation?
   3867                                          if ( BLE_Flag )
   \   0000421E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004220   0x2D00             CMP      R5,#+0
   \   00004222   0xD00A             BEQ.N    ??RoadBrd_ParseString_632
   3868                                          {
   3869                                            // Yes...Build and Send BLE Response NOW.
   3870                                            strcpy( (char *)tempBffr2, "<STATUS>CMD_TKST_SYNTAX</STATUS>");
   \   00004224   0x.... 0x....      LDR.W    R1,??DataTable4_26
   \   00004228   0xA80A             ADD      R0,SP,#+40
   \   0000422A   0x.... 0x....      BL       strcpy
   3871                                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000422E   0xA80A             ADD      R0,SP,#+40
   \   00004230   0x.... 0x....      BL       strlen
   \   00004234   0xA90A             ADD      R1,SP,#+40
   \   00004236   0x.... 0x....      BL       BGM111_Transmit
   3872                                          }
   3873                                          strcpy( (char *)tempBffr2, "TKST SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_632: (+1)
   \   0000423A   0x.... 0x....      LDR.W    R1,??DataTable4_27
   \   0000423E   0xA80A             ADD      R0,SP,#+40
   \   00004240   0x.... 0x....      BL       strcpy
   \   00004244   0xE074             B.N      ??RoadBrd_ParseString_633
   \   00004246   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_546:
   \   00004248   0x........         DC32     ?_249
   \   0000424C   0x........         DC32     ?_250
   3874                                        } // Endif (tempBffr[4]!=':')
   3875                                        else
   3876                                        {
   3877                                          // 2. Verify if remaining string is digits
   3878                                          if (Size > 5)
   \                     ??RoadBrd_ParseString_631: (+1)
   \   00004250   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00004254   0xF1B8 0x0F06      CMP      R8,#+6
   \   00004258   0xDB10             BLT.N    ??RoadBrd_ParseString_634
   3879                                          {
   3880                                            flag = 1;
   \   0000425A   0x2001             MOVS     R0,#+1
   \   0000425C   0x902E             STR      R0,[SP, #+184]
   3881                                            for (x=5; x< Size; x++)
   \   0000425E   0x2005             MOVS     R0,#+5
   \   00004260   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_635: (+1)
   \   00004262   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00004266   0x4547             CMP      R7,R8
   \   00004268   0xDA0A             BGE.N    ??RoadBrd_ParseString_636
   3882                                            {
   3883                                              if (isdigit(tempBffr[x]) == 0)
   \   0000426A   0x5DE0             LDRB     R0,[R4, R7]
   \   0000426C   0x.... 0x....      BL       isdigit
   \   00004270   0x2800             CMP      R0,#+0
   \   00004272   0xD101             BNE.N    ??RoadBrd_ParseString_637
   3884                                                flag = 0;
   \   00004274   0x2000             MOVS     R0,#+0
   \   00004276   0x902E             STR      R0,[SP, #+184]
   3885                                            }
   \                     ??RoadBrd_ParseString_637: (+1)
   \   00004278   0x1C7F             ADDS     R7,R7,#+1
   \   0000427A   0xE7F2             B.N      ??RoadBrd_ParseString_635
   3886                                          } // EndIf (Size > 5)
   3887                                          else
   3888                                            flag = 0;
   \                     ??RoadBrd_ParseString_634: (+1)
   \   0000427C   0x2000             MOVS     R0,#+0
   \   0000427E   0x902E             STR      R0,[SP, #+184]
   3889                                          if (flag == 0)
   \                     ??RoadBrd_ParseString_636: (+1)
   \   00004280   0x982E             LDR      R0,[SP, #+184]
   \   00004282   0x2800             CMP      R0,#+0
   \   00004284   0xD116             BNE.N    ??RoadBrd_ParseString_638
   3890                                          {
   3891                                            // Is this a BLE Operation?
   3892                                            if ( BLE_Flag )
   \   00004286   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004288   0x2D00             CMP      R5,#+0
   \   0000428A   0xD00A             BEQ.N    ??RoadBrd_ParseString_639
   3893                                            {
   3894                                              // Yes...Build and Send BLE Response NOW.
   3895                                              strcpy( (char *)tempBffr2, "<STATUS>CMD_TKST_BADPARAM</STATUS>");
   \   0000428C   0x.... 0x....      LDR.W    R1,??DataTable4_28
   \   00004290   0xA80A             ADD      R0,SP,#+40
   \   00004292   0x.... 0x....      BL       strcpy
   3896                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004296   0xA80A             ADD      R0,SP,#+40
   \   00004298   0x.... 0x....      BL       strlen
   \   0000429C   0xA90A             ADD      R1,SP,#+40
   \   0000429E   0x.... 0x....      BL       BGM111_Transmit
   3897                                            }
   3898                                            strcpy( (char *)tempBffr2, "TKST SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_639: (+1)
   \   000042A2   0x.... 0x....      LDR.W    R1,??DataTable4_29
   \   000042A6   0xA80A             ADD      R0,SP,#+40
   \   000042A8   0x.... 0x....      BL       strcpy
   \   000042AC   0xE040             B.N      ??RoadBrd_ParseString_633
   \   000042AE   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_548:
   \   000042B0   0x........         DC32     ?_251
   3899                                          }
   3900                                          else
   3901                                          {
   3902                                            // 3. Grab remaining string and convert to integer.
   3903                                            tempPstr = &tempBffr[5];
   \                     ??RoadBrd_ParseString_638: (+1)
   \   000042B4   0x1D60             ADDS     R0,R4,#+5
   \   000042B6   0x9030             STR      R0,[SP, #+192]
   3904                                            strcpy(tempstr, tempPstr);
   \   000042B8   0x9930             LDR      R1,[SP, #+192]
   \   000042BA   0xA851             ADD      R0,SP,#+324
   \   000042BC   0x.... 0x....      BL       strcpy
   3905                                            new_value = atoi( tempstr );
   \   000042C0   0xA851             ADD      R0,SP,#+324
   \   000042C2   0x.... 0x....      BL       atoi
   \   000042C6   0x902F             STR      R0,[SP, #+188]
   3906                                            if((new_value > 9999) ||
   3907                                               (new_value < 0))
   \   000042C8   0x982F             LDR      R0,[SP, #+188]
   \   000042CA   0xF242 0x7110      MOVW     R1,#+10000
   \   000042CE   0x4288             CMP      R0,R1
   \   000042D0   0xDA02             BGE.N    ??RoadBrd_ParseString_640
   \   000042D2   0x982F             LDR      R0,[SP, #+188]
   \   000042D4   0x2800             CMP      R0,#+0
   \   000042D6   0xD515             BPL.N    ??RoadBrd_ParseString_641
   3908                                            {
   3909                                              // Is this a BLE Operation?
   3910                                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_640: (+1)
   \   000042D8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000042DA   0x2D00             CMP      R5,#+0
   \   000042DC   0xD00A             BEQ.N    ??RoadBrd_ParseString_642
   3911                                              {
   3912                                                // Yes...Build and Send BLE Response NOW.
   3913                                                strcpy( (char *)tempBffr2, "<STATUS>CMD_TKST_BADPARAM</STATUS>");
   \   000042DE   0x.... 0x....      LDR.W    R1,??DataTable4_28
   \   000042E2   0xA80A             ADD      R0,SP,#+40
   \   000042E4   0x.... 0x....      BL       strcpy
   3914                                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000042E8   0xA80A             ADD      R0,SP,#+40
   \   000042EA   0x.... 0x....      BL       strlen
   \   000042EE   0xA90A             ADD      R1,SP,#+40
   \   000042F0   0x.... 0x....      BL       BGM111_Transmit
   3915                                              }
   3916                                              strcpy( (char *)tempBffr2, "TKSS SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_642: (+1)
   \   000042F4   0x.... 0x....      LDR.W    R1,??DataTable4_24
   \   000042F8   0xA80A             ADD      R0,SP,#+40
   \   000042FA   0x.... 0x....      BL       strcpy
   \   000042FE   0xE017             B.N      ??RoadBrd_ParseString_633
   \                     ??RoadBrd_ParseString_549:
   \   00004300   0x........         DC32     ?_252
   3917                                            }
   3918                                            else
   3919                                            {
   3920                                              // Time to set new TACK Limit.
   3921                                              RoadBrd_Set_TackLimit( new_value );
   \                     ??RoadBrd_ParseString_641: (+1)
   \   00004304   0x982F             LDR      R0,[SP, #+188]
   \   00004306   0x.... 0x....      BL       RoadBrd_Set_TackLimit
   3922                                              // Is this a BLE Operation?
   3923                                              if ( BLE_Flag )
   \   0000430A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000430C   0x2D00             CMP      R5,#+0
   \   0000430E   0xD00A             BEQ.N    ??RoadBrd_ParseString_643
   3924                                              {
   3925                                                // Yes...Build and Send BLE Response NOW.
   3926                                                strcpy( (char *)tempBffr2, "<STATUS>ST_TKST_ACK</STATUS>");
   \   00004310   0x.... 0x....      LDR.W    R1,??DataTable4_30
   \   00004314   0xA80A             ADD      R0,SP,#+40
   \   00004316   0x.... 0x....      BL       strcpy
   3927                                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000431A   0xA80A             ADD      R0,SP,#+40
   \   0000431C   0x.... 0x....      BL       strlen
   \   00004320   0xA90A             ADD      R1,SP,#+40
   \   00004322   0x.... 0x....      BL       BGM111_Transmit
   3928                                              }
   3929                                              // NOW, Build Data String..
   3930                                              sprintf( (char *)tempBffr2, "COMPLETE" );
   \                     ??RoadBrd_ParseString_643: (+1)
   \   00004326   0x.... 0x....      LDR.W    R1,??DataTable4_20
   \   0000432A   0xA80A             ADD      R0,SP,#+40
   \   0000432C   0x.... 0x....      BL       sprintf
   3931                                            } // EndElse ((new_value > 9999) || (new_value < 0))
   3932                                          } // EndElse (flag == 0)
   3933                                        } // EndElse (tempBffr[4]!=':')
   3934                                        break;
   \                     ??RoadBrd_ParseString_633: (+1)
   \   00004330   0xE08C             B.N      ??RoadBrd_ParseString_617
   3935                                      case 'B':
   3936                                        //Key Flash Variable Set Boot Delay(Seconds).
   3937                                        // Step 1. Validate format.
   3938                                        if(tempBffr[4]!=':')
   \                     ??RoadBrd_ParseString_599: (+1)
   \   00004332   0x7920             LDRB     R0,[R4, #+4]
   \   00004334   0x283A             CMP      R0,#+58
   \   00004336   0xD019             BEQ.N    ??RoadBrd_ParseString_644
   3939                                        {
   3940                                          // Is this a BLE Operation?
   3941                                          if ( BLE_Flag )
   \   00004338   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000433A   0x2D00             CMP      R5,#+0
   \   0000433C   0xD00A             BEQ.N    ??RoadBrd_ParseString_645
   3942                                          {
   3943                                            // Yes...Build and Send BLE Response NOW.
   3944                                            strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSB_SYNTAX</STATUS>");
   \   0000433E   0x.... 0x....      LDR.W    R1,??DataTable4_31
   \   00004342   0xA80A             ADD      R0,SP,#+40
   \   00004344   0x.... 0x....      BL       strcpy
   3945                                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004348   0xA80A             ADD      R0,SP,#+40
   \   0000434A   0x.... 0x....      BL       strlen
   \   0000434E   0xA90A             ADD      R1,SP,#+40
   \   00004350   0x.... 0x....      BL       BGM111_Transmit
   3946                                          }
   3947                                          strcpy( (char *)tempBffr2, "TKSB SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_645: (+1)
   \   00004354   0x.... 0x....      LDR.W    R1,??DataTable4_32
   \   00004358   0xA80A             ADD      R0,SP,#+40
   \   0000435A   0x.... 0x....      BL       strcpy
   \   0000435E   0xE06F             B.N      ??RoadBrd_ParseString_646
   \                     ??RoadBrd_ParseString_551:
   \   00004360   0x........         DC32     ?_253
   \   00004364   0x........         DC32     ?_254
   \   00004368   0x........         DC32     ?_255
   3948                                        } // Endif (tempBffr[4]!=':')
   3949                                        else
   3950                                        {
   3951                                          // 2. Verify if remaining string is digits
   3952                                          if (Size > 5)
   \                     ??RoadBrd_ParseString_644: (+1)
   \   0000436C   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00004370   0xF1B8 0x0F06      CMP      R8,#+6
   \   00004374   0xDB10             BLT.N    ??RoadBrd_ParseString_647
   3953                                          {
   3954                                            flag = 1;
   \   00004376   0x2001             MOVS     R0,#+1
   \   00004378   0x902E             STR      R0,[SP, #+184]
   3955                                            for (x=5; x< Size; x++)
   \   0000437A   0x2005             MOVS     R0,#+5
   \   0000437C   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_648: (+1)
   \   0000437E   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00004382   0x4547             CMP      R7,R8
   \   00004384   0xDA0A             BGE.N    ??RoadBrd_ParseString_649
   3956                                            {
   3957                                              if (isdigit(tempBffr[x]) == 0)
   \   00004386   0x5DE0             LDRB     R0,[R4, R7]
   \   00004388   0x.... 0x....      BL       isdigit
   \   0000438C   0x2800             CMP      R0,#+0
   \   0000438E   0xD101             BNE.N    ??RoadBrd_ParseString_650
   3958                                                flag = 0;
   \   00004390   0x2000             MOVS     R0,#+0
   \   00004392   0x902E             STR      R0,[SP, #+184]
   3959                                            }
   \                     ??RoadBrd_ParseString_650: (+1)
   \   00004394   0x1C7F             ADDS     R7,R7,#+1
   \   00004396   0xE7F2             B.N      ??RoadBrd_ParseString_648
   3960                                          } // EndIf (Size > 5)
   3961                                          else
   3962                                            flag = 0;
   \                     ??RoadBrd_ParseString_647: (+1)
   \   00004398   0x2000             MOVS     R0,#+0
   \   0000439A   0x902E             STR      R0,[SP, #+184]
   3963                                          if (flag == 0)
   \                     ??RoadBrd_ParseString_649: (+1)
   \   0000439C   0x982E             LDR      R0,[SP, #+184]
   \   0000439E   0x2800             CMP      R0,#+0
   \   000043A0   0xD113             BNE.N    ??RoadBrd_ParseString_651
   3964                                          {
   3965                                            // Is this a BLE Operation?
   3966                                            if ( BLE_Flag )
   \   000043A2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000043A4   0x2D00             CMP      R5,#+0
   \   000043A6   0xD00A             BEQ.N    ??RoadBrd_ParseString_652
   3967                                            {
   3968                                              // Yes...Build and Send BLE Response NOW.
   3969                                              strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSB_BADPARAM</STATUS>");
   \   000043A8   0x.... 0x....      LDR.W    R1,??DataTable4_33
   \   000043AC   0xA80A             ADD      R0,SP,#+40
   \   000043AE   0x.... 0x....      BL       strcpy
   3970                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000043B2   0xA80A             ADD      R0,SP,#+40
   \   000043B4   0x.... 0x....      BL       strlen
   \   000043B8   0xA90A             ADD      R1,SP,#+40
   \   000043BA   0x.... 0x....      BL       BGM111_Transmit
   3971                                            }
   3972                                            strcpy( (char *)tempBffr2, "TKSB SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_652: (+1)
   \   000043BE   0x.... 0x....      LDR.W    R1,??DataTable4_34
   \   000043C2   0xA80A             ADD      R0,SP,#+40
   \   000043C4   0x.... 0x....      BL       strcpy
   \   000043C8   0xE03A             B.N      ??RoadBrd_ParseString_646
   3973                                          }
   3974                                          else
   3975                                          {
   3976                                            // 3. Grab remaining string and convert to integer.
   3977                                            tempPstr = &tempBffr[5];
   \                     ??RoadBrd_ParseString_651: (+1)
   \   000043CA   0x1D60             ADDS     R0,R4,#+5
   \   000043CC   0x9030             STR      R0,[SP, #+192]
   3978                                            strcpy(tempstr, tempPstr);
   \   000043CE   0x9930             LDR      R1,[SP, #+192]
   \   000043D0   0xA851             ADD      R0,SP,#+324
   \   000043D2   0x.... 0x....      BL       strcpy
   3979                                            new_value = atoi( tempstr );
   \   000043D6   0xA851             ADD      R0,SP,#+324
   \   000043D8   0x.... 0x....      BL       atoi
   \   000043DC   0x902F             STR      R0,[SP, #+188]
   3980                                            if((new_value > 999) ||
   3981                                               (new_value < 0))
   \   000043DE   0x982F             LDR      R0,[SP, #+188]
   \   000043E0   0xF5B0 0x7F7A      CMP      R0,#+1000
   \   000043E4   0xDA02             BGE.N    ??RoadBrd_ParseString_653
   \   000043E6   0x982F             LDR      R0,[SP, #+188]
   \   000043E8   0x2800             CMP      R0,#+0
   \   000043EA   0xD513             BPL.N    ??RoadBrd_ParseString_654
   3982                                            {
   3983                                              // Is this a BLE Operation?
   3984                                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_653: (+1)
   \   000043EC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000043EE   0x2D00             CMP      R5,#+0
   \   000043F0   0xD00A             BEQ.N    ??RoadBrd_ParseString_655
   3985                                              {
   3986                                                // Yes...Build and Send BLE Response NOW.
   3987                                                strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSB_BADPARAM</STATUS>");
   \   000043F2   0x.... 0x....      LDR.W    R1,??DataTable4_33
   \   000043F6   0xA80A             ADD      R0,SP,#+40
   \   000043F8   0x.... 0x....      BL       strcpy
   3988                                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000043FC   0xA80A             ADD      R0,SP,#+40
   \   000043FE   0x.... 0x....      BL       strlen
   \   00004402   0xA90A             ADD      R1,SP,#+40
   \   00004404   0x.... 0x....      BL       BGM111_Transmit
   3989                                              }
   3990                                              strcpy( (char *)tempBffr2, "TKSB SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_655: (+1)
   \   00004408   0x.... 0x....      LDR.W    R1,??DataTable4_34
   \   0000440C   0xA80A             ADD      R0,SP,#+40
   \   0000440E   0x.... 0x....      BL       strcpy
   \   00004412   0xE015             B.N      ??RoadBrd_ParseString_646
   3991                                            }
   3992                                            else
   3993                                            {
   3994                                              // Time to set new Boot Delay.
   3995                                              RoadBrd_Set_BootDelay( new_value );
   \                     ??RoadBrd_ParseString_654: (+1)
   \   00004414   0x982F             LDR      R0,[SP, #+188]
   \   00004416   0x.... 0x....      BL       RoadBrd_Set_BootDelay
   3996                                              // Is this a BLE Operation?
   3997                                              if ( BLE_Flag )
   \   0000441A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000441C   0x2D00             CMP      R5,#+0
   \   0000441E   0xD00A             BEQ.N    ??RoadBrd_ParseString_656
   3998                                              {
   3999                                                // Yes...Build and Send BLE Response NOW.
   4000                                                strcpy( (char *)tempBffr2, "<STATUS>ST_TKSB_ACK</STATUS>");
   \   00004420   0x.... 0x....      LDR.W    R1,??DataTable4_35
   \   00004424   0xA80A             ADD      R0,SP,#+40
   \   00004426   0x.... 0x....      BL       strcpy
   4001                                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000442A   0xA80A             ADD      R0,SP,#+40
   \   0000442C   0x.... 0x....      BL       strlen
   \   00004430   0xA90A             ADD      R1,SP,#+40
   \   00004432   0x.... 0x....      BL       BGM111_Transmit
   4002                                              }
   4003                                              // NOW, Build Data String..
   4004                                              sprintf( (char *)tempBffr2, "COMPLETE" );
   \                     ??RoadBrd_ParseString_656: (+1)
   \   00004436   0x.... 0x....      LDR.W    R1,??DataTable4_20
   \   0000443A   0xA80A             ADD      R0,SP,#+40
   \   0000443C   0x.... 0x....      BL       sprintf
   4005                                            } // EndElse ((new_value > 999) || (new_value < 0))
   4006                                          } // EndElse (flag == 0)
   4007                                        } // EndElse (tempBffr[4]!=':')
   4008                                        break;
   \                     ??RoadBrd_ParseString_646: (+1)
   \   00004440   0xE004             B.N      ??RoadBrd_ParseString_617
   4009                                      default:
   4010                                        strcpy( (char *)tempBffr2, "TKS ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_603: (+1)
   \   00004442   0x.... 0x....      LDR.W    R1,??DataTable4_36
   \   00004446   0xA80A             ADD      R0,SP,#+40
   \   00004448   0x.... 0x....      BL       strcpy
   4011                                        break;
   4012                                    } // EndSwitch ( tempBffr[3] )
   4013                                    break;
   \                     ??RoadBrd_ParseString_617: (+1)
   \   0000444C   0xE0CD             B.N      ??RoadBrd_ParseString_595
   \   0000444E   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_553:
   \   00004450   0x........         DC32     ?_256
   \   00004454   0x........         DC32     ?_257
   4014          //------------------
   4015                                  case 'R':
   4016                                    //Key Flash Variable Read Command
   4017                                    switch( tempBffr[3] )
   \                     ??RoadBrd_ParseString_596: (+1)
   \   00004458   0x78E0             LDRB     R0,[R4, #+3]
   \   0000445A   0x2842             CMP      R0,#+66
   \   0000445C   0xF000 0x8080      BEQ.W    ??RoadBrd_ParseString_657
   \   00004460   0x2852             CMP      R0,#+82
   \   00004462   0xD004             BEQ.N    ??RoadBrd_ParseString_658
   \   00004464   0x2853             CMP      R0,#+83
   \   00004466   0xD031             BEQ.N    ??RoadBrd_ParseString_659
   \   00004468   0x2854             CMP      R0,#+84
   \   0000446A   0xD05D             BEQ.N    ??RoadBrd_ParseString_660
   \   0000446C   0xE092             B.N      ??RoadBrd_ParseString_661
   4018                                    {
   4019          //------------------
   4020                                      case 'R':
   4021                                        //Key Flash Variable Read Road Sound Sample Rate Command.
   4022                                        // Is this a BLE Operation?
   4023                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_658: (+1)
   \   0000446E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004470   0x2D00             CMP      R5,#+0
   \   00004472   0xD016             BEQ.N    ??RoadBrd_ParseString_662
   4024                                        {
   4025                                          // Yes...Build and Send BLE Response NOW.
   4026                                          sprintf( (char *)tempBffr2, "<STATUS>ST_TKRR:%3.1f</STATUS>", ((float)RoadBrd_Get_RdSndTickCnt()/10));
   \   00004474   0x.... 0x....      BL       RoadBrd_Get_RdSndTickCnt
   \   00004478   0x.... 0x....      BL       __aeabi_ui2f
   \   0000447C   0x.... 0x....      LDR.W    R1,??DataTable4_37  ;; 0x41200000
   \   00004480   0x.... 0x....      BL       __aeabi_fdiv
   \   00004484   0x.... 0x....      BL       __aeabi_f2d
   \   00004488   0x0002             MOVS     R2,R0
   \   0000448A   0x000B             MOVS     R3,R1
   \   0000448C   0x.... 0x....      LDR.W    R1,??DataTable4_38
   \   00004490   0xA80A             ADD      R0,SP,#+40
   \   00004492   0x.... 0x....      BL       sprintf
   4027                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004496   0xA80A             ADD      R0,SP,#+40
   \   00004498   0x.... 0x....      BL       strlen
   \   0000449C   0xA90A             ADD      R1,SP,#+40
   \   0000449E   0x.... 0x....      BL       BGM111_Transmit
   4028                                        }
   4029                                        sprintf( (char *)tempBffr2, "RdSnd Sample Rate:  %3.1f Seconds.\r\n", ((float)RoadBrd_Get_RdSndTickCnt()/10));
   \                     ??RoadBrd_ParseString_662: (+1)
   \   000044A2   0x.... 0x....      BL       RoadBrd_Get_RdSndTickCnt
   \   000044A6   0x.... 0x....      BL       __aeabi_ui2f
   \   000044AA   0x.... 0x....      LDR.W    R1,??DataTable4_37  ;; 0x41200000
   \   000044AE   0x.... 0x....      BL       __aeabi_fdiv
   \   000044B2   0x.... 0x....      BL       __aeabi_f2d
   \   000044B6   0x0002             MOVS     R2,R0
   \   000044B8   0x000B             MOVS     R3,R1
   \   000044BA   0x.... 0x....      LDR.W    R1,??DataTable4_39
   \   000044BE   0xA80A             ADD      R0,SP,#+40
   \   000044C0   0x.... 0x....      BL       sprintf
   4030                                        break;
   \   000044C4   0xE079             B.N      ??RoadBrd_ParseString_663
   \   000044C6   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_555:
   \   000044C8   0x........         DC32     ?_258
   4031          //------------------
   4032                                      case 'S':
   4033                                        //Key Flash Variable Read Sensor Sample Rate Command.
   4034                                        // Is this a BLE Operation?
   4035                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_659: (+1)
   \   000044CC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000044CE   0x2D00             CMP      R5,#+0
   \   000044D0   0xD016             BEQ.N    ??RoadBrd_ParseString_664
   4036                                        {
   4037                                          // Yes...Build and Send BLE Response NOW.
   4038                                          sprintf( (char *)tempBffr2, "<STATUS>ST_TKRS:%3.1f</STATUS>", ((float)RoadBrd_Get_SnsrTickCnt()/10));
   \   000044D2   0x.... 0x....      BL       RoadBrd_Get_SnsrTickCnt
   \   000044D6   0x.... 0x....      BL       __aeabi_ui2f
   \   000044DA   0x.... 0x....      LDR.W    R1,??DataTable4_37  ;; 0x41200000
   \   000044DE   0x.... 0x....      BL       __aeabi_fdiv
   \   000044E2   0x.... 0x....      BL       __aeabi_f2d
   \   000044E6   0x0002             MOVS     R2,R0
   \   000044E8   0x000B             MOVS     R3,R1
   \   000044EA   0x.... 0x....      LDR.W    R1,??DataTable4_40
   \   000044EE   0xA80A             ADD      R0,SP,#+40
   \   000044F0   0x.... 0x....      BL       sprintf
   4039                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000044F4   0xA80A             ADD      R0,SP,#+40
   \   000044F6   0x.... 0x....      BL       strlen
   \   000044FA   0xA90A             ADD      R1,SP,#+40
   \   000044FC   0x.... 0x....      BL       BGM111_Transmit
   4040                                        }
   4041                                        sprintf( (char *)tempBffr2, "Sensor Sample Rate: %3.1f Seconds.\r\n\r\n> ", ((float)RoadBrd_Get_SnsrTickCnt()/10));
   \                     ??RoadBrd_ParseString_664: (+1)
   \   00004500   0x.... 0x....      BL       RoadBrd_Get_SnsrTickCnt
   \   00004504   0x.... 0x....      BL       __aeabi_ui2f
   \   00004508   0x.... 0x....      LDR.W    R1,??DataTable4_37  ;; 0x41200000
   \   0000450C   0x.... 0x....      BL       __aeabi_fdiv
   \   00004510   0x.... 0x....      BL       __aeabi_f2d
   \   00004514   0x0002             MOVS     R2,R0
   \   00004516   0x000B             MOVS     R3,R1
   \   00004518   0x.... 0x....      LDR.W    R1,??DataTable4_41
   \   0000451C   0xA80A             ADD      R0,SP,#+40
   \   0000451E   0x.... 0x....      BL       sprintf
   4042                                        break;
   \   00004522   0xE04A             B.N      ??RoadBrd_ParseString_663
   \                     ??RoadBrd_ParseString_557:
   \   00004524   0x........         DC32     ?_259
   4043          //------------------
   4044                                      case 'T':
   4045                                        //Key Flash Variable Read TACK Limit(Multiple of Road Sound Throttles).
   4046                                        // Is this a BLE Operation?
   4047                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_660: (+1)
   \   00004528   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000452A   0x2D00             CMP      R5,#+0
   \   0000452C   0xD00D             BEQ.N    ??RoadBrd_ParseString_665
   4048                                        {
   4049                                          // Yes...Build and Send BLE Response NOW.
   4050                                          sprintf( (char *)tempBffr2, "<STATUS>ST_TKRT:%d</STATUS>", RoadBrd_Get_TackLimit());
   \   0000452E   0x.... 0x....      BL       RoadBrd_Get_TackLimit
   \   00004532   0x0002             MOVS     R2,R0
   \   00004534   0x.... 0x....      LDR.W    R1,??DataTable4_42
   \   00004538   0xA80A             ADD      R0,SP,#+40
   \   0000453A   0x.... 0x....      BL       sprintf
   4051                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000453E   0xA80A             ADD      R0,SP,#+40
   \   00004540   0x.... 0x....      BL       strlen
   \   00004544   0xA90A             ADD      R1,SP,#+40
   \   00004546   0x.... 0x....      BL       BGM111_Transmit
   4052                                        }
   4053                                        sprintf( (char *)tempBffr2, "TACK Limit: %d.\r\n\r\n> ", RoadBrd_Get_TackLimit());
   \                     ??RoadBrd_ParseString_665: (+1)
   \   0000454A   0x.... 0x....      BL       RoadBrd_Get_TackLimit
   \   0000454E   0x0002             MOVS     R2,R0
   \   00004550   0x.... 0x....      LDR.W    R1,??DataTable4_43
   \   00004554   0xA80A             ADD      R0,SP,#+40
   \   00004556   0x.... 0x....      BL       sprintf
   4054                                        break;
   \   0000455A   0xE02E             B.N      ??RoadBrd_ParseString_663
   \                     ??RoadBrd_ParseString_558:
   \   0000455C   0x........         DC32     ?_260
   4055          //------------------
   4056                                      case 'B':
   4057                                        //Key Flash Variable Read Boot Delay.(Seconds).
   4058                                        // Is this a BLE Operation?
   4059                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_657: (+1)
   \   00004560   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004562   0x2D00             CMP      R5,#+0
   \   00004564   0xD00D             BEQ.N    ??RoadBrd_ParseString_666
   4060                                        {
   4061                                          // Yes...Build and Send BLE Response NOW.
   4062                                          sprintf( (char *)tempBffr2, "<STATUS>ST_TKRB:%d</STATUS>", RoadBrd_Get_BootDelay());
   \   00004566   0x.... 0x....      BL       RoadBrd_Get_BootDelay
   \   0000456A   0x0002             MOVS     R2,R0
   \   0000456C   0x.... 0x....      LDR.W    R1,??DataTable4_44
   \   00004570   0xA80A             ADD      R0,SP,#+40
   \   00004572   0x.... 0x....      BL       sprintf
   4063                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004576   0xA80A             ADD      R0,SP,#+40
   \   00004578   0x.... 0x....      BL       strlen
   \   0000457C   0xA90A             ADD      R1,SP,#+40
   \   0000457E   0x.... 0x....      BL       BGM111_Transmit
   4064                                        }
   4065                                        sprintf( (char *)tempBffr2, "Boot Delay: %d Seconds.\r\n\r\n> ", RoadBrd_Get_BootDelay());
   \                     ??RoadBrd_ParseString_666: (+1)
   \   00004582   0x.... 0x....      BL       RoadBrd_Get_BootDelay
   \   00004586   0x0002             MOVS     R2,R0
   \   00004588   0x.... 0x....      LDR.W    R1,??DataTable4_45
   \   0000458C   0xA80A             ADD      R0,SP,#+40
   \   0000458E   0x.... 0x....      BL       sprintf
   4066                                        break;
   \   00004592   0xE012             B.N      ??RoadBrd_ParseString_663
   4067                                      default:
   4068                                        // Is this a BLE Operation?
   4069                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_661: (+1)
   \   00004594   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004596   0x2D00             CMP      R5,#+0
   \   00004598   0xD00A             BEQ.N    ??RoadBrd_ParseString_667
   4070                                        {
   4071                                          // Yes...Build and Send BLE Response NOW.
   4072                                          strcpy( (char *)tempBffr2, "<STATUS>CMD_TKR_SYNTAX</STATUS>");
   \   0000459A   0x.... 0x....      LDR.W    R1,??DataTable4_46
   \   0000459E   0xA80A             ADD      R0,SP,#+40
   \   000045A0   0x.... 0x....      BL       strcpy
   4073                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000045A4   0xA80A             ADD      R0,SP,#+40
   \   000045A6   0x.... 0x....      BL       strlen
   \   000045AA   0xA90A             ADD      R1,SP,#+40
   \   000045AC   0x.... 0x....      BL       BGM111_Transmit
   4074                                        }
   4075                                        strcpy( (char *)tempBffr2, "TKR ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_667: (+1)
   \   000045B0   0x.... 0x....      LDR.W    R1,??DataTable4_47
   \   000045B4   0xA80A             ADD      R0,SP,#+40
   \   000045B6   0x.... 0x....      BL       strcpy
   4076                                        break;
   4077                                    } // EndSwitch ( tempBffr[3] )
   4078                                    break;
   \                     ??RoadBrd_ParseString_663: (+1)
   \   000045BA   0xE016             B.N      ??RoadBrd_ParseString_595
   \                     ??RoadBrd_ParseString_560:
   \   000045BC   0x........         DC32     ?_261
   \   000045C0   0x........         DC32     ?_262
   4079                                    // Is this a BLE Operation?
   4080                                  default:
   4081                                    if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_597: (+1)
   \   000045C4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000045C6   0x2D00             CMP      R5,#+0
   \   000045C8   0xD00A             BEQ.N    ??RoadBrd_ParseString_668
   4082                                    {
   4083                                      // Yes...Build and Send BLE Response NOW.
   4084                                      strcpy( (char *)tempBffr2, "<STATUS>CMD_TK_SYNTAX</STATUS>");
   \   000045CA   0x.... 0x....      LDR.W    R1,??DataTable4_13
   \   000045CE   0xA80A             ADD      R0,SP,#+40
   \   000045D0   0x.... 0x....      BL       strcpy
   4085                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000045D4   0xA80A             ADD      R0,SP,#+40
   \   000045D6   0x.... 0x....      BL       strlen
   \   000045DA   0xA90A             ADD      R1,SP,#+40
   \   000045DC   0x.... 0x....      BL       BGM111_Transmit
   4086                                    }
   4087                                    strcpy( (char *)tempBffr2, "ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_668: (+1)
   \   000045E0   0x.... 0x....      LDR.W    R1,??DataTable4_48
   \   000045E4   0xA80A             ADD      R0,SP,#+40
   \   000045E6   0x.... 0x....      BL       strcpy
   4088                                    break;
   4089                                } //EndSwitch ( tempBffr[2] )
   4090                              } //EndElse (Size < 3)
   4091                              break;
   \                     ??RoadBrd_ParseString_595: (+1)
   \   000045EA   0xE0ED             B.N      ??RoadBrd_ParseString_289
   4092          //++++++++++++++++++++++++++++++++++++++++++  Units Enable/Disable Commands.
   4093                            case 'U':
   4094                              // Key Flash Variable Commands.
   4095                              // Test Size to make sure we have enough Characters for this operation
   4096                              Status = HAL_OK;
   \                     ??RoadBrd_ParseString_298: (+1)
   \   000045EC   0x2000             MOVS     R0,#+0
   \   000045EE   0x0006             MOVS     R6,R0
   4097                              if (Size < 3)
   \   000045F0   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000045F4   0xF1B8 0x0F03      CMP      R8,#+3
   \   000045F8   0xDA13             BGE.N    ??RoadBrd_ParseString_669
   4098                              {
   4099                                // Is this a BLE Operation?
   4100                                if ( BLE_Flag )
   \   000045FA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000045FC   0x2D00             CMP      R5,#+0
   \   000045FE   0xD00A             BEQ.N    ??RoadBrd_ParseString_670
   4101                                {
   4102                                  // Yes...Build and Send BLE Response NOW.
   4103                                  strcpy( (char *)tempBffr2, "<STATUS>CMD_TU_SYNTAX</STATUS>");
   \   00004600   0x.... 0x....      LDR.W    R1,??DataTable4_49
   \   00004604   0xA80A             ADD      R0,SP,#+40
   \   00004606   0x.... 0x....      BL       strcpy
   4104                                  BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000460A   0xA80A             ADD      R0,SP,#+40
   \   0000460C   0x.... 0x....      BL       strlen
   \   00004610   0xA90A             ADD      R1,SP,#+40
   \   00004612   0x.... 0x....      BL       BGM111_Transmit
   4105                                }
   4106                                strcpy( (char *)tempBffr2, "TU SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_670: (+1)
   \   00004616   0x.... 0x....      LDR.W    R1,??DataTable4_50
   \   0000461A   0xA80A             ADD      R0,SP,#+40
   \   0000461C   0x.... 0x....      BL       strcpy
   \   00004620   0xE04B             B.N      ??RoadBrd_ParseString_671
   4107                              }
   4108                              else
   4109                              {
   4110                                switch( tempBffr[2] )
   \                     ??RoadBrd_ParseString_669: (+1)
   \   00004622   0x78A0             LDRB     R0,[R4, #+2]
   \   00004624   0x2844             CMP      R0,#+68
   \   00004626   0xD01B             BEQ.N    ??RoadBrd_ParseString_672
   \   00004628   0x2845             CMP      R0,#+69
   \   0000462A   0xD133             BNE.N    ??RoadBrd_ParseString_673
   4111                                {
   4112          //------------------
   4113                                  case 'E':
   4114                                    //Units Enable Command.
   4115                                    // Is this a BLE Operation?
   4116                                    if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_674: (+1)
   \   0000462C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000462E   0x2D00             CMP      R5,#+0
   \   00004630   0xD00A             BEQ.N    ??RoadBrd_ParseString_675
   4117                                    {
   4118                                      // Yes...Build and Send BLE Response NOW.
   4119                                      strcpy( (char *)tempBffr2, "<STATUS>ST_TUE_ACK</STATUS>");
   \   00004632   0x.... 0x....      LDR.W    R1,??DataTable4_51
   \   00004636   0xA80A             ADD      R0,SP,#+40
   \   00004638   0x.... 0x....      BL       strcpy
   4120                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000463C   0xA80A             ADD      R0,SP,#+40
   \   0000463E   0x.... 0x....      BL       strlen
   \   00004642   0xA90A             ADD      R1,SP,#+40
   \   00004644   0x.... 0x....      BL       BGM111_Transmit
   4121                                    }
   4122                                    sprintf( (char *)tempBffr2, "Units XML State CHANGED: ENABLED\r\n\r\n> ");
   \                     ??RoadBrd_ParseString_675: (+1)
   \   00004648   0x.... 0x....      LDR.W    R1,??DataTable4_52
   \   0000464C   0xA80A             ADD      R0,SP,#+40
   \   0000464E   0x.... 0x....      BL       sprintf
   4123                                    Status = RoadBrd_Set_UnitsFlag( true );
   \   00004652   0x2001             MOVS     R0,#+1
   \   00004654   0x.... 0x....      BL       RoadBrd_Set_UnitsFlag
   \   00004658   0x0006             MOVS     R6,R0
   4124                                    break;
   \   0000465A   0xE02E             B.N      ??RoadBrd_ParseString_671
   \                     ??RoadBrd_ParseString_562:
   \   0000465C   0x........         DC32     ?_263
   4125          //------------------
   4126                                  case 'D':
   4127                                    //Units Disable Command
   4128                                    // Is this a BLE Operation?
   4129                                    if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_672: (+1)
   \   00004660   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004662   0x2D00             CMP      R5,#+0
   \   00004664   0xD00A             BEQ.N    ??RoadBrd_ParseString_676
   4130                                    {
   4131                                      // Yes...Build and Send BLE Response NOW.
   4132                                      strcpy( (char *)tempBffr2, "<STATUS>ST_TUD_ACK</STATUS>");
   \   00004666   0x.... 0x....      LDR.W    R1,??DataTable4_53
   \   0000466A   0xA80A             ADD      R0,SP,#+40
   \   0000466C   0x.... 0x....      BL       strcpy
   4133                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004670   0xA80A             ADD      R0,SP,#+40
   \   00004672   0x.... 0x....      BL       strlen
   \   00004676   0xA90A             ADD      R1,SP,#+40
   \   00004678   0x.... 0x....      BL       BGM111_Transmit
   4134                                    }
   4135                                    sprintf( (char *)tempBffr2, "Units XML State CHANGED: DISABLED\r\n\r\n> ");
   \                     ??RoadBrd_ParseString_676: (+1)
   \   0000467C   0x.... 0x....      LDR.W    R1,??DataTable4_54
   \   00004680   0xA80A             ADD      R0,SP,#+40
   \   00004682   0x.... 0x....      BL       sprintf
   4136                                    Status = RoadBrd_Set_UnitsFlag( false );
   \   00004686   0x2000             MOVS     R0,#+0
   \   00004688   0x.... 0x....      BL       RoadBrd_Set_UnitsFlag
   \   0000468C   0x0006             MOVS     R6,R0
   4137                                    break;
   \   0000468E   0xE014             B.N      ??RoadBrd_ParseString_671
   \                     ??RoadBrd_ParseString_563:
   \   00004690   0x........         DC32     ?_264
   4138                                  default:
   4139                                    // Is this a BLE Operation?
   4140                                    if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_673: (+1)
   \   00004694   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004696   0x2D00             CMP      R5,#+0
   \   00004698   0xD00A             BEQ.N    ??RoadBrd_ParseString_677
   4141                                    {
   4142                                      // Yes...Build and Send BLE Response NOW.
   4143                                      strcpy( (char *)tempBffr2, "<STATUS>CMD_TU_SYNTAX</STATUS>");
   \   0000469A   0x.... 0x....      LDR.W    R1,??DataTable4_49
   \   0000469E   0xA80A             ADD      R0,SP,#+40
   \   000046A0   0x.... 0x....      BL       strcpy
   4144                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000046A4   0xA80A             ADD      R0,SP,#+40
   \   000046A6   0x.... 0x....      BL       strlen
   \   000046AA   0xA90A             ADD      R1,SP,#+40
   \   000046AC   0x.... 0x....      BL       BGM111_Transmit
   4145                                    }
   4146                                    strcpy( (char *)tempBffr2, "TU SYNTAX ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_677: (+1)
   \   000046B0   0x.... 0x....      LDR.W    R1,??DataTable4_55
   \   000046B4   0xA80A             ADD      R0,SP,#+40
   \   000046B6   0x.... 0x....      BL       strcpy
   4147                                    break;
   4148                                } //EndSwitch ( tempBffr[2] )
   4149                              } //EndElse (Size < 3)
   4150                              break;
   \                     ??RoadBrd_ParseString_671: (+1)
   \   000046BA   0xE085             B.N      ??RoadBrd_ParseString_289
   4151          //++++++++++++++++++++++++++++++++++++++++++  Special Monitor Mode to intercept traffic from UART and pass to BGM111
   4152                            case 'M':
   4153                              // Is this a BLE Operation?
   4154                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_296: (+1)
   \   000046BC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000046BE   0x2D00             CMP      R5,#+0
   \   000046C0   0xD00A             BEQ.N    ??RoadBrd_ParseString_678
   4155                              {
   4156                                // Yes...Build and Send BLE Response NOW.
   4157                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000046C2   0x.... 0x....      LDR.W    R1,??DataTable4_56
   \   000046C6   0xA80A             ADD      R0,SP,#+40
   \   000046C8   0x.... 0x....      BL       strcpy
   4158                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000046CC   0xA80A             ADD      R0,SP,#+40
   \   000046CE   0x.... 0x....      BL       strlen
   \   000046D2   0xA90A             ADD      R1,SP,#+40
   \   000046D4   0x.... 0x....      BL       BGM111_Transmit
   4159                              }
   4160                              
   4161                              strcpy( (char *)tempBffr2, "BGM111 MONITOR MODE.\r\n\r\n");
   \                     ??RoadBrd_ParseString_678: (+1)
   \   000046D8   0x.... 0x....      LDR.W    R1,??DataTable4_57
   \   000046DC   0xA80A             ADD      R0,SP,#+40
   \   000046DE   0x.... 0x....      BL       strcpy
   4162          #ifdef NUCLEO
   4163                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   4164          #else
   4165                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000046E2   0xA90A             ADD      R1,SP,#+40
   \   000046E4   0x2000             MOVS     R0,#+0
   \   000046E6   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000046EA   0x0006             MOVS     R6,R0
   4166          #endif
   4167                              if (Status != HAL_OK)
   \   000046EC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000046EE   0x2E00             CMP      R6,#+0
   \   000046F0   0xD004             BEQ.N    ??RoadBrd_ParseString_679
   4168                                return Status;
   \   000046F2   0x0030             MOVS     R0,R6
   \   000046F4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000046F6   0xE0F3             B.N      ??RoadBrd_ParseString_4
   \                     ??RoadBrd_ParseString_565:
   \   000046F8   0x........         DC32     ?_265
   4169                              strcpy( (char *)tempBffr2, "Use <ESC> to exit mode.\r\n\r\n");
   \                     ??RoadBrd_ParseString_679: (+1)
   \   000046FC   0x.... 0x....      LDR.W    R1,??DataTable4_58
   \   00004700   0xA80A             ADD      R0,SP,#+40
   \   00004702   0x.... 0x....      BL       strcpy
   4170                              // Set Bypass Flag
   4171                              Bypass = true;
   \   00004706   0x2001             MOVS     R0,#+1
   \   00004708   0x.... 0x....      LDR.W    R1,??DataTable4_59
   \   0000470C   0x7008             STRB     R0,[R1, #+0]
   4172                              break;
   \   0000470E   0xE05B             B.N      ??RoadBrd_ParseString_289
   4173          //++++++++++++++++++++++++++++++++++++++++++  Reset Flash Frame Variables(Factory).
   4174                            case 'F':
   4175                              // Reset Flash Frame Variables.
   4176                              RoadBrd_WWDG_InitializeFrmFlash();
   \                     ??RoadBrd_ParseString_292: (+1)
   \   00004710   0x.... 0x....      BL       RoadBrd_WWDG_InitializeFrmFlash
   4177                              // Is this a BLE Operation?
   4178                              if ( BLE_Flag )
   \   00004714   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004716   0x2D00             CMP      R5,#+0
   \   00004718   0xD00A             BEQ.N    ??RoadBrd_ParseString_680
   4179                              {
   4180                                // Yes...Build and Send BLE Response NOW.
   4181                                sprintf( (char *)tempBffr2, "<STATUS>TF_ACK</STATUS>" );
   \   0000471A   0x.... 0x....      LDR.W    R1,??DataTable4_60
   \   0000471E   0xA80A             ADD      R0,SP,#+40
   \   00004720   0x.... 0x....      BL       sprintf
   4182                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004724   0xA80A             ADD      R0,SP,#+40
   \   00004726   0x.... 0x....      BL       strlen
   \   0000472A   0xA90A             ADD      R1,SP,#+40
   \   0000472C   0x.... 0x....      BL       BGM111_Transmit
   4183                              }
   4184                              
   4185                              sprintf( (char *)tempBffr2, "Flash Frame Variables Reset to Factory Values.\r\n" );
   \                     ??RoadBrd_ParseString_680: (+1)
   \   00004730   0x.... 0x....      LDR.W    R1,??DataTable4_61
   \   00004734   0xA80A             ADD      R0,SP,#+40
   \   00004736   0x.... 0x....      BL       sprintf
   4186                              break;
   \   0000473A   0xE045             B.N      ??RoadBrd_ParseString_289
   \                     ??RoadBrd_ParseString_566:
   \   0000473C   0x........         DC32     ?_266
   4187          //++++++++++++++++++++++++++++++++++++++++++  Lock Code to allow stable Program of BLE Module.
   4188                            case 'L':
   4189                              // Is this a BLE Operation?
   4190                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_295: (+1)
   \   00004740   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004742   0x2D00             CMP      R5,#+0
   \   00004744   0xD00B             BEQ.N    ??RoadBrd_ParseString_681
   4191                              {
   4192                                // Yes...Build and Send BLE Response NOW.
   4193                                sprintf( (char *)tempBffr2, "<STATUS>TL_ERROR</STATUS>" );
   \   00004746   0x.... 0x....      LDR.W    R1,??DataTable4_62
   \   0000474A   0xA80A             ADD      R0,SP,#+40
   \   0000474C   0x.... 0x....      BL       sprintf
   4194                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004750   0xA80A             ADD      R0,SP,#+40
   \   00004752   0x.... 0x....      BL       strlen
   \   00004756   0xA90A             ADD      R1,SP,#+40
   \   00004758   0x.... 0x....      BL       BGM111_Transmit
   4195                              }
   4196                              else
   4197                              {
   4198                                sprintf( (char *)tempBffr2, "Code Locked for Programming!\r\n\r\n" );
   4199          #ifdef NUCLEO
   4200                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   4201          #else
   4202                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   4203          #endif
   4204                                if (Status != HAL_OK)
   4205                                  return Status;
   4206                                sprintf( (char *)tempBffr2, "   HARD RESET NEEDED TO EXIT MODE\r\n" );
   4207          #ifdef NUCLEO
   4208                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   4209          #else
   4210                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   4211          #endif
   4212                                if (Status != HAL_OK)
   4213                                  return Status;
   4214                                // Start Hard Loop
   4215                                for (;;)
   4216                                {
   4217                                }
   4218                              }
   4219                              break;
   \   0000475C   0xE034             B.N      ??RoadBrd_ParseString_289
   \                     ??RoadBrd_ParseString_681: (+1)
   \   0000475E   0x.... 0x....      LDR.W    R1,??DataTable4_63
   \   00004762   0xA80A             ADD      R0,SP,#+40
   \   00004764   0x.... 0x....      BL       sprintf
   \   00004768   0xA90A             ADD      R1,SP,#+40
   \   0000476A   0x2000             MOVS     R0,#+0
   \   0000476C   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00004770   0x0006             MOVS     R6,R0
   \   00004772   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00004774   0x2E00             CMP      R6,#+0
   \   00004776   0xD002             BEQ.N    ??RoadBrd_ParseString_682
   \   00004778   0x0030             MOVS     R0,R6
   \   0000477A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000477C   0xE0B0             B.N      ??RoadBrd_ParseString_4
   \                     ??RoadBrd_ParseString_682: (+1)
   \   0000477E   0x....             LDR.N    R1,??DataTable4_64
   \   00004780   0xA80A             ADD      R0,SP,#+40
   \   00004782   0x.... 0x....      BL       sprintf
   \   00004786   0xA90A             ADD      R1,SP,#+40
   \   00004788   0x2000             MOVS     R0,#+0
   \   0000478A   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000478E   0x0006             MOVS     R6,R0
   \   00004790   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00004792   0x2E00             CMP      R6,#+0
   \   00004794   0xD006             BEQ.N    ??RoadBrd_ParseString_683
   \   00004796   0x0030             MOVS     R0,R6
   \   00004798   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000479A   0xE0A1             B.N      ??RoadBrd_ParseString_4
   \                     ??RoadBrd_ParseString_568:
   \   0000479C   0x........         DC32     ?_267
   \   000047A0   0x........         DC32     ?_268
   \                     ??RoadBrd_ParseString_683: (+1)
   \   000047A4   0xE7FE             B.N      ??RoadBrd_ParseString_683
   4220          
   4221          //**************************************************************************************************
   4222                            default:
   4223                              // Is this a BLE Operation?
   4224                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_299: (+1)
   \   000047A6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000047A8   0x2D00             CMP      R5,#+0
   \   000047AA   0xD009             BEQ.N    ??RoadBrd_ParseString_684
   4225                              {
   4226                                // Yes...Build and Send BLE Response NOW.
   4227                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000047AC   0x....             LDR.N    R1,??DataTable4_56
   \   000047AE   0xA80A             ADD      R0,SP,#+40
   \   000047B0   0x.... 0x....      BL       strcpy
   4228                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000047B4   0xA80A             ADD      R0,SP,#+40
   \   000047B6   0x.... 0x....      BL       strlen
   \   000047BA   0xA90A             ADD      R1,SP,#+40
   \   000047BC   0x.... 0x....      BL       BGM111_Transmit
   4229                              }
   4230                              
   4231                              // ERROR if we get here.. 
   4232                              strcpy( (char *)tempBffr2, "ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_684: (+1)
   \   000047C0   0x....             LDR.N    R1,??DataTable4_48
   \   000047C2   0xA80A             ADD      R0,SP,#+40
   \   000047C4   0x.... 0x....      BL       strcpy
   4233                              break;
   4234                           
   4235                          } //EndSwitch ( tempBffr[1] )
   4236                        } //EndElse (Size <= 1)
   4237                        break;
   \                     ??RoadBrd_ParseString_289: (+1)
   \   000047C8   0xE010             B.N      ??RoadBrd_ParseString_26
   4238          #if 0
   4239          //**************************************************************************************************
   4240                      case 'S':
   4241                        // Sleep Mode. 
   4242                        switch( tempBffr[1] )
   4243                        {
   4244          //++++++++++++++++++++++++++++++++++++++++++  5V Power Supply Commands.
   4245                          case 'S':
   4246                            // Is this a BLE Operation?
   4247                            if ( BLE_Flag )
   4248                            {
   4249                              // Yes...Build and Send BLE Response NOW.
   4250                              strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   4251                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   4252                            }
   4253                            
   4254                            strcpy( (char *)tempBffr2, "Micro in Sleep Mode NOW.\r\n");
   4255          #ifdef NUCLEO
   4256                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   4257          #else
   4258                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   4259          #endif
   4260                            if (Status != HAL_OK)
   4261                              return Status;
   4262                            // Sleep Micro NOW!
   4263                            //sleep();
   4264                            break;
   4265                          case 'D':
   4266                            // Is this a BLE Operation?
   4267                            if ( BLE_Flag )
   4268                            {
   4269                              // Yes...Build and Send BLE Response NOW.
   4270                              strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   4271                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   4272                            }
   4273                            
   4274                            // Turn off 5V Power Supply.
   4275                            strcpy( (char *)tempBffr2, "Micro in Deep Sleep Mode NOW.\r\n");
   4276          #ifdef NUCLEO
   4277                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   4278          #else
   4279                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   4280          #endif
   4281                            if (Status != HAL_OK)
   4282                              return Status;
   4283                            // Sleep Micro NOW!
   4284                            //deepsleep();
   4285                            break;
   4286                        }
   4287                        break;
   4288          #endif
   4289          //++++++++++++++++++++++++++++++++++++++++++  Unknown Command.
   4290                      default:
   4291                        // Is this a BLE Operation?
   4292                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_22: (+1)
   \   000047CA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000047CC   0x2D00             CMP      R5,#+0
   \   000047CE   0xD009             BEQ.N    ??RoadBrd_ParseString_685
   4293                        {
   4294                          // Yes...Build and Send BLE Response NOW.
   4295                          strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000047D0   0x....             LDR.N    R1,??DataTable4_56
   \   000047D2   0xA80A             ADD      R0,SP,#+40
   \   000047D4   0x.... 0x....      BL       strcpy
   4296                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000047D8   0xA80A             ADD      R0,SP,#+40
   \   000047DA   0x.... 0x....      BL       strlen
   \   000047DE   0xA90A             ADD      R1,SP,#+40
   \   000047E0   0x.... 0x....      BL       BGM111_Transmit
   4297                        }
   4298                        
   4299                        // ERROR if we get here.. 
   4300                        strcpy( (char *)tempBffr2, "ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_685: (+1)
   \   000047E4   0x....             LDR.N    R1,??DataTable4_48
   \   000047E6   0xA80A             ADD      R0,SP,#+40
   \   000047E8   0x.... 0x....      BL       strcpy
   4301                        break;
   4302                      } // EndSwitch
   4303                      
   4304          
   4305                      // Test last I2C Status to determine next msg.
   4306                      switch( Status )
   \                     ??RoadBrd_ParseString_26: (+1)
   \   000047EC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000047EE   0x2E00             CMP      R6,#+0
   \   000047F0   0xD008             BEQ.N    ??RoadBrd_ParseString_686
   \   000047F2   0x2E02             CMP      R6,#+2
   \   000047F4   0xD03F             BEQ.N    ??RoadBrd_ParseString_687
   \   000047F6   0xD306             BCC.N    ??RoadBrd_ParseString_688
   \   000047F8   0x2E03             CMP      R6,#+3
   \   000047FA   0xD043             BEQ.N    ??RoadBrd_ParseString_689
   \   000047FC   0xE04E             B.N      ??RoadBrd_ParseString_690
   \   000047FE   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_570:
   \   00004800   0x........         DC32     ?_269
   4307                      {
   4308                        case HAL_OK:
   4309                          break;
   \                     ??RoadBrd_ParseString_686: (+1)
   \   00004804   0xE050             B.N      ??RoadBrd_ParseString_691
   4310                        case HAL_ERROR:
   4311                          // Determine what kind of error.
   4312                          Err_code = RoadBrd_I2C_GetError();
   \                     ??RoadBrd_ParseString_688: (+1)
   \   00004806   0x.... 0x....      BL       RoadBrd_I2C_GetError
   \   0000480A   0x9046             STR      R0,[SP, #+280]
   4313                          switch( Err_code )
   \   0000480C   0x9846             LDR      R0,[SP, #+280]
   \   0000480E   0x2801             CMP      R0,#+1
   \   00004810   0xD00A             BEQ.N    ??RoadBrd_ParseString_692
   \   00004812   0x2802             CMP      R0,#+2
   \   00004814   0xD00D             BEQ.N    ??RoadBrd_ParseString_693
   \   00004816   0x2804             CMP      R0,#+4
   \   00004818   0xD010             BEQ.N    ??RoadBrd_ParseString_694
   \   0000481A   0x2808             CMP      R0,#+8
   \   0000481C   0xD013             BEQ.N    ??RoadBrd_ParseString_695
   \   0000481E   0x2810             CMP      R0,#+16
   \   00004820   0xD018             BEQ.N    ??RoadBrd_ParseString_696
   \   00004822   0x2820             CMP      R0,#+32
   \   00004824   0xD01B             BEQ.N    ??RoadBrd_ParseString_697
   \   00004826   0xE01F             B.N      ??RoadBrd_ParseString_698
   4314                          {
   4315                            case HAL_I2C_ERROR_BERR:
   4316                              strcpy( (char *)tempBffr2, "I2C ERROR: BERR: Bus Error reported.\r\n");
   \                     ??RoadBrd_ParseString_692: (+1)
   \   00004828   0x....             LDR.N    R1,??DataTable4_65
   \   0000482A   0xA80A             ADD      R0,SP,#+40
   \   0000482C   0x.... 0x....      BL       strcpy
   4317                              break;
   \   00004830   0xE01E             B.N      ??RoadBrd_ParseString_699
   4318                            case HAL_I2C_ERROR_ARLO:
   4319                              strcpy( (char *)tempBffr2, "I2C ERROR: ARLO: Arbitration lost reported.\r\n");
   \                     ??RoadBrd_ParseString_693: (+1)
   \   00004832   0x....             LDR.N    R1,??DataTable4_66
   \   00004834   0xA80A             ADD      R0,SP,#+40
   \   00004836   0x.... 0x....      BL       strcpy
   4320                              break;
   \   0000483A   0xE019             B.N      ??RoadBrd_ParseString_699
   4321                            case HAL_I2C_ERROR_AF:
   4322                              strcpy( (char *)tempBffr2, "I2C ERROR: AF: Acknowledge failure reported.\r\n");
   \                     ??RoadBrd_ParseString_694: (+1)
   \   0000483C   0x....             LDR.N    R1,??DataTable4_67
   \   0000483E   0xA80A             ADD      R0,SP,#+40
   \   00004840   0x.... 0x....      BL       strcpy
   4323                              break;
   \   00004844   0xE014             B.N      ??RoadBrd_ParseString_699
   4324                            case HAL_I2C_ERROR_OVR:
   4325                              strcpy( (char *)tempBffr2, "I2C ERROR: OVR: Overrun/Underrun reported.\r\n");
   \                     ??RoadBrd_ParseString_695: (+1)
   \   00004846   0x....             LDR.N    R1,??DataTable4_68
   \   00004848   0xA80A             ADD      R0,SP,#+40
   \   0000484A   0x.... 0x....      BL       strcpy
   4326                              break;
   \   0000484E   0xE00F             B.N      ??RoadBrd_ParseString_699
   \                     ??RoadBrd_ParseString_571:
   \   00004850   0x........         DC32     ?_270
   4327                            case HAL_I2C_ERROR_DMA:
   4328                              strcpy( (char *)tempBffr2, "I2C ERROR: DMA: DMA Error reported.\r\n");
   \                     ??RoadBrd_ParseString_696: (+1)
   \   00004854   0x....             LDR.N    R1,??DataTable4_69
   \   00004856   0xA80A             ADD      R0,SP,#+40
   \   00004858   0x.... 0x....      BL       strcpy
   4329                              break;
   \   0000485C   0xE008             B.N      ??RoadBrd_ParseString_699
   4330                            case HAL_I2C_ERROR_TIMEOUT:
   4331                              strcpy( (char *)tempBffr2, "I2C ERROR: TIMEOUT: Timeout Error reported.\r\n");
   \                     ??RoadBrd_ParseString_697: (+1)
   \   0000485E   0x....             LDR.N    R1,??DataTable4_70
   \   00004860   0xA80A             ADD      R0,SP,#+40
   \   00004862   0x.... 0x....      BL       strcpy
   4332                              break;
   \   00004866   0xE003             B.N      ??RoadBrd_ParseString_699
   4333                            default:
   4334                              strcpy( (char *)tempBffr2, "I2C ERROR: Unknown Error reported.\r\n");
   \                     ??RoadBrd_ParseString_698: (+1)
   \   00004868   0x....             LDR.N    R1,??DataTable4_71
   \   0000486A   0xA80A             ADD      R0,SP,#+40
   \   0000486C   0x.... 0x....      BL       strcpy
   4335                              break;
   4336                           
   4337                          }
   4338                          // Re-Initialize I2C....It has been corrupted.
   4339                          MX_I2C1_Reset();
   \                     ??RoadBrd_ParseString_699: (+1)
   \   00004870   0x.... 0x....      BL       MX_I2C1_Reset
   4340                          break;
   \   00004874   0xE018             B.N      ??RoadBrd_ParseString_691
   4341                        case HAL_BUSY:
   4342                          strcpy( (char *)tempBffr2, "I2C BUSY: I2C reported BUSY error.\r\n");
   \                     ??RoadBrd_ParseString_687: (+1)
   \   00004876   0x....             LDR.N    R1,??DataTable4_72
   \   00004878   0xA80A             ADD      R0,SP,#+40
   \   0000487A   0x.... 0x....      BL       strcpy
   4343                          // Re-Initialize I2C....It has been corrupted.
   4344                          MX_I2C1_Reset();
   \   0000487E   0x.... 0x....      BL       MX_I2C1_Reset
   4345                          break;
   \   00004882   0xE011             B.N      ??RoadBrd_ParseString_691
   4346                        case HAL_TIMEOUT:
   4347                          strcpy( (char *)tempBffr2, "I2C TIMEOUT: I2C reported TIMEOUT.\r\n");
   \                     ??RoadBrd_ParseString_689: (+1)
   \   00004884   0x....             LDR.N    R1,??DataTable4_73
   \   00004886   0xA80A             ADD      R0,SP,#+40
   \   00004888   0x.... 0x....      BL       strcpy
   4348                          // Re-Initialize I2C....It has been corrupted.
   4349                          MX_I2C1_Reset();
   \   0000488C   0x.... 0x....      BL       MX_I2C1_Reset
   4350                          break;
   \   00004890   0xE00A             B.N      ??RoadBrd_ParseString_691
   \   00004892   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_573:
   \   00004894   0x........         DC32     ?_271
   \   00004898   0x........         DC32     ?_272
   4351                        default:  
   4352                          strcpy( (char *)tempBffr2, "I2C ERROR: I2C reported unnown error.\r\n");
   \                     ??RoadBrd_ParseString_690: (+1)
   \   0000489C   0x....             LDR.N    R1,??DataTable4_74
   \   0000489E   0xA80A             ADD      R0,SP,#+40
   \   000048A0   0x.... 0x....      BL       strcpy
   4353                          // Re-Initialize I2C....It has been corrupted.
   4354                          MX_I2C1_Reset();
   \   000048A4   0x.... 0x....      BL       MX_I2C1_Reset
   4355                          break;
   4356                      }
   4357                      // Send string to UART..
   4358          #ifdef NUCLEO
   4359                      Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);
   4360          #else
   4361                      Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \                     ??RoadBrd_ParseString_691: (+1)
   \   000048A8   0xA90A             ADD      R1,SP,#+40
   \   000048AA   0x2000             MOVS     R0,#+0
   \   000048AC   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000048B0   0x0006             MOVS     R6,R0
   4362          #endif
   4363                     if (Status != HAL_OK)
   \   000048B2   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000048B4   0x2E00             CMP      R6,#+0
   \   000048B6   0xD002             BEQ.N    ??RoadBrd_ParseString_700
   4364                        return Status;
   \   000048B8   0x0030             MOVS     R0,R6
   \   000048BA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000048BC   0xE010             B.N      ??RoadBrd_ParseString_4
   4365                      // Send Prompt to UART..
   4366                      strcpy( (char *)tempBffr2, "\r\n\r\n> ");
   \                     ??RoadBrd_ParseString_700: (+1)
   \   000048BE   0x....             LDR.N    R1,??DataTable4_75
   \   000048C0   0xA80A             ADD      R0,SP,#+40
   \   000048C2   0x.... 0x....      BL       strcpy
   4367          #ifdef NUCLEO
   4368                      Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);
   4369          #else
   4370                      Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000048C6   0xA90A             ADD      R1,SP,#+40
   \   000048C8   0x2000             MOVS     R0,#+0
   \   000048CA   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000048CE   0x0006             MOVS     R6,R0
   4371          #endif
   4372                      if (Status != HAL_OK)
   \   000048D0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000048D2   0x2E00             CMP      R6,#+0
   \   000048D4   0xD002             BEQ.N    ??RoadBrd_ParseString_3
   4373                        return Status;
   \   000048D6   0x0030             MOVS     R0,R6
   \   000048D8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000048DA   0xE001             B.N      ??RoadBrd_ParseString_4
   4374              } // EndElse ( Bypass )
   4375            return Status;
   \                     ??RoadBrd_ParseString_3: (+1)
   \   000048DC   0x0030             MOVS     R0,R6
   \   000048DE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??RoadBrd_ParseString_4: (+1)
   \   000048E0   0xF50D 0x6D80      ADD      SP,SP,#+1024
   \   000048E4   0xB017             ADD      SP,SP,#+92
   \   000048E6   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   4376          }
   4377          
   4378          /**
   4379            * @brief  This function tests the passed string to make sure it is Hex format.
   4380            * @param  char *ptr: Ptr to string to be tested. NULL terminated
   4381            * @retval int: 1: String is HEX.
   4382            *              0:   String is not HEX.
   4383            */

   \                                 In section .text, align 2, keep-with-next
   4384          int isHexNum(char *ptr)
   4385          {
   \                     isHexNum: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   4386            int Size, x, test1;
   4387            
   4388            Size = strlen(ptr);
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       strlen
   \   0000000A   0x0005             MOVS     R5,R0
   4389            test1 = 0;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x0007             MOVS     R7,R0
   4390            for (x=0; x<Size; x++)
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x0006             MOVS     R6,R0
   \                     ??isHexNum_0: (+1)
   \   00000014   0x42AE             CMP      R6,R5
   \   00000016   0xDA16             BGE.N    ??isHexNum_1
   4391            {
   4392              if (((ptr[x] <= '9') && (ptr[x] >= '0')) ||
   4393                  ((ptr[x] <= 'F') && (ptr[x] >= 'A')))
   \   00000018   0x5DA0             LDRB     R0,[R4, R6]
   \   0000001A   0x283A             CMP      R0,#+58
   \   0000001C   0xDA02             BGE.N    ??isHexNum_2
   \   0000001E   0x5DA0             LDRB     R0,[R4, R6]
   \   00000020   0x2830             CMP      R0,#+48
   \   00000022   0xDA05             BGE.N    ??isHexNum_3
   \                     ??isHexNum_2: (+1)
   \   00000024   0x5DA0             LDRB     R0,[R4, R6]
   \   00000026   0x2847             CMP      R0,#+71
   \   00000028   0xDA05             BGE.N    ??isHexNum_4
   \   0000002A   0x5DA0             LDRB     R0,[R4, R6]
   \   0000002C   0x2841             CMP      R0,#+65
   \   0000002E   0xDB02             BLT.N    ??isHexNum_4
   4394                test1 = 0;
   \                     ??isHexNum_3: (+1)
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x0007             MOVS     R7,R0
   \   00000034   0xE001             B.N      ??isHexNum_5
   4395              else
   4396                test1 = 1;
   \                     ??isHexNum_4: (+1)
   \   00000036   0x2001             MOVS     R0,#+1
   \   00000038   0x0007             MOVS     R7,R0
   4397              if (test1 == 1)
   \                     ??isHexNum_5: (+1)
   \   0000003A   0x2F01             CMP      R7,#+1
   \   0000003C   0xD101             BNE.N    ??isHexNum_6
   4398                return 0;
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0xE002             B.N      ??isHexNum_7
   4399            }
   \                     ??isHexNum_6: (+1)
   \   00000042   0x1C76             ADDS     R6,R6,#+1
   \   00000044   0xE7E6             B.N      ??isHexNum_0
   4400            return 1;
   \                     ??isHexNum_1: (+1)
   \   00000046   0x2001             MOVS     R0,#+1
   \                     ??isHexNum_7: (+1)
   \   00000048   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
   4401          }
   4402          
   4403          /**
   4404            * @brief  This function converts the passed Hex String to an Integer value.
   4405            * @param  char *ptr: Ptr to string to be converted. NULL terminated
   4406            * @retval int: -1: Error in String
   4407            *              Value converted returned.
   4408            */

   \                                 In section .text, align 2, keep-with-next
   4409          int hatoi( char *ptr )
   4410          {
   \                     hatoi: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   4411            int Size, x;
   4412            int Value = 0;
   \   00000006   0x2700             MOVS     R7,#+0
   4413            int FinalValue = 0;
   \   00000008   0xF05F 0x0800      MOVS     R8,#+0
   4414            
   4415            Size = strlen(ptr);
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       strlen
   \   00000012   0x0005             MOVS     R5,R0
   4416            for (x=0; x<Size; x++)
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x0006             MOVS     R6,R0
   \                     ??hatoi_0: (+1)
   \   00000018   0x42AE             CMP      R6,R5
   \   0000001A   0xDA1A             BGE.N    ??hatoi_1
   4417            {
   4418              if ((ptr[x] <= '9') && (ptr[x] >= '0'))
   \   0000001C   0x5DA0             LDRB     R0,[R4, R6]
   \   0000001E   0x283A             CMP      R0,#+58
   \   00000020   0xDA06             BGE.N    ??hatoi_2
   \   00000022   0x5DA0             LDRB     R0,[R4, R6]
   \   00000024   0x2830             CMP      R0,#+48
   \   00000026   0xDB03             BLT.N    ??hatoi_2
   4419                Value = ptr[x] - '0';
   \   00000028   0x5DA0             LDRB     R0,[R4, R6]
   \   0000002A   0x3830             SUBS     R0,R0,#+48
   \   0000002C   0x0007             MOVS     R7,R0
   \   0000002E   0xE00C             B.N      ??hatoi_3
   4420              else if((ptr[x] <= 'F') && (ptr[x] >= 'A'))
   \                     ??hatoi_2: (+1)
   \   00000030   0x5DA0             LDRB     R0,[R4, R6]
   \   00000032   0x2847             CMP      R0,#+71
   \   00000034   0xDA06             BGE.N    ??hatoi_4
   \   00000036   0x5DA0             LDRB     R0,[R4, R6]
   \   00000038   0x2841             CMP      R0,#+65
   \   0000003A   0xDB03             BLT.N    ??hatoi_4
   4421                Value = ptr[x] - 'A' + 10;
   \   0000003C   0x5DA0             LDRB     R0,[R4, R6]
   \   0000003E   0x3837             SUBS     R0,R0,#+55
   \   00000040   0x0007             MOVS     R7,R0
   \   00000042   0xE002             B.N      ??hatoi_3
   4422              else
   4423                return -1;
   \                     ??hatoi_4: (+1)
   \   00000044   0xF05F 0x30FF      MOVS     R0,#-1
   \   00000048   0xE004             B.N      ??hatoi_5
   4424              FinalValue = FinalValue*16 + Value;
   \                     ??hatoi_3: (+1)
   \   0000004A   0xEB17 0x1808      ADDS     R8,R7,R8, LSL #+4
   4425            }
   \   0000004E   0x1C76             ADDS     R6,R6,#+1
   \   00000050   0xE7E2             B.N      ??hatoi_0
   4426            return FinalValue;
   \                     ??hatoi_1: (+1)
   \   00000052   0x4640             MOV      R0,R8
   \                     ??hatoi_5: (+1)
   \   00000054   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   4427          }
   4428          
   4429          

   \                                 In section .text, align 2, keep-with-next
   4430          bool Tst_Bypass( void)
   4431          {
   4432            return Bypass;
   \                     Tst_Bypass: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable4_59
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return
   4433          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     ParseString

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x........         DC32     ?_273

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     ?_274

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x........         DC32     ?_275

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x........         DC32     ?_276

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x........         DC32     ?_277

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x........         DC32     ?_278

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0x........         DC32     ?_279

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   0x........         DC32     ?_280

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \   00000000   0x........         DC32     ?_20

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     ?_281

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x........         DC32     ?_282

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x........         DC32     ?_283

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x........         DC32     ?_284

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x........         DC32     ?_285

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x........         DC32     ?_286

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   0x........         DC32     ?_287

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \   00000000   0x........         DC32     ?_288

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \   00000000   0x........         DC32     ?_289

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_9:
   \   00000000   0x........         DC32     ?_290

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_10:
   \   00000000   0x........         DC32     ?_291

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_11:
   \   00000000   0x........         DC32     ?_292

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_12:
   \   00000000   0x........         DC32     ?_293

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_13:
   \   00000000   0x........         DC32     ?_294

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_14:
   \   00000000   0x........         DC32     ?_295

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_15:
   \   00000000   0x........         DC32     ?_296

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_16:
   \   00000000   0x........         DC32     ?_297

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_17:
   \   00000000   0x........         DC32     ?_298

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_18:
   \   00000000   0x........         DC32     ?_299

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_19:
   \   00000000   0x........         DC32     ?_300

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_20:
   \   00000000   0x........         DC32     ?_127

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_21:
   \   00000000   0x........         DC32     ?_301

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_22:
   \   00000000   0x........         DC32     ?_302

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_23:
   \   00000000   0x........         DC32     ?_303

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_24:
   \   00000000   0x........         DC32     ?_304

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_25:
   \   00000000   0x........         DC32     ?_305

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_26:
   \   00000000   0x........         DC32     ?_306

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_27:
   \   00000000   0x........         DC32     ?_307

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_28:
   \   00000000   0x........         DC32     ?_308

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_29:
   \   00000000   0x........         DC32     ?_309

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_30:
   \   00000000   0x........         DC32     ?_310

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_31:
   \   00000000   0x........         DC32     ?_311

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_32:
   \   00000000   0x........         DC32     ?_312

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_33:
   \   00000000   0x........         DC32     ?_313

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_34:
   \   00000000   0x........         DC32     ?_314

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_35:
   \   00000000   0x........         DC32     ?_315

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_36:
   \   00000000   0x........         DC32     ?_316

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_37:
   \   00000000   0x41200000         DC32     0x41200000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_38:
   \   00000000   0x........         DC32     ?_317

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_39:
   \   00000000   0x........         DC32     ?_318

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_40:
   \   00000000   0x........         DC32     ?_319

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_41:
   \   00000000   0x........         DC32     ?_320

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_42:
   \   00000000   0x........         DC32     ?_321

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_43:
   \   00000000   0x........         DC32     ?_322

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_44:
   \   00000000   0x........         DC32     ?_323

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_45:
   \   00000000   0x........         DC32     ?_324

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_46:
   \   00000000   0x........         DC32     ?_325

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_47:
   \   00000000   0x........         DC32     ?_326

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_48:
   \   00000000   0x........         DC32     ?_41

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_49:
   \   00000000   0x........         DC32     ?_327

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_50:
   \   00000000   0x........         DC32     ?_328

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_51:
   \   00000000   0x........         DC32     ?_329

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_52:
   \   00000000   0x........         DC32     ?_330

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_53:
   \   00000000   0x........         DC32     ?_331

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_54:
   \   00000000   0x........         DC32     ?_332

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_55:
   \   00000000   0x........         DC32     ?_333

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_56:
   \   00000000   0x........         DC32     ?_24

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_57:
   \   00000000   0x........         DC32     ?_334

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_58:
   \   00000000   0x........         DC32     ?_335

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_59:
   \   00000000   0x........         DC32     Bypass

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_60:
   \   00000000   0x........         DC32     ?_336

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_61:
   \   00000000   0x........         DC32     ?_337

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_62:
   \   00000000   0x........         DC32     ?_338

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_63:
   \   00000000   0x........         DC32     ?_339

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_64:
   \   00000000   0x........         DC32     ?_340

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_65:
   \   00000000   0x........         DC32     ?_341

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_66:
   \   00000000   0x........         DC32     ?_342

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_67:
   \   00000000   0x........         DC32     ?_343

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_68:
   \   00000000   0x........         DC32     ?_344

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_69:
   \   00000000   0x........         DC32     ?_345

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_70:
   \   00000000   0x........         DC32     ?_346

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_71:
   \   00000000   0x........         DC32     ?_347

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_72:
   \   00000000   0x........         DC32     ?_348

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_73:
   \   00000000   0x........         DC32     ?_349

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_74:
   \   00000000   0x........         DC32     ?_350

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_75:
   \   00000000   0x........         DC32     ?_351

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x0D 0x0A          DC8 0DH, 0AH, 0DH, 0AH, 20H, 54H, 2EH, 2EH
   \              0x0D 0x0A    
   \              0x20 0x54    
   \              0x2E 0x2E    
   \   00000008   0x2E 0x2E          DC8 2EH, 2EH, 2EH, 2EH, 2EH, 2EH, 54H, 45H
   \              0x2E 0x2E    
   \              0x2E 0x2E    
   \              0x54 0x45    
   \   00000010   0x52 0x4D          DC8 52H, 4DH, 49H, 4EH, 41H, 54H, 49H, 4EH
   \              0x49 0x4E    
   \              0x41 0x54    
   \              0x49 0x4E    
   \   00000018   0x47 0x20          DC8 47H, 20H, 4DH, 4FH, 4EH, 49H, 54H, 4FH
   \              0x4D 0x4F    
   \              0x4E 0x49    
   \              0x54 0x4F    
   \   00000020   0x52 0x20          DC8 52H, 20H, 4DH, 4FH, 44H, 45H, 2EH, 2EH
   \              0x4D 0x4F    
   \              0x44 0x45    
   \              0x2E 0x2E    
   \   00000028   0x2E 0x2E          DC8 2EH, 2EH, 2EH, 2EH, 2EH, 2EH, 2EH, 0DH
   \              0x2E 0x2E    
   \              0x2E 0x2E    
   \              0x2E 0x0D    
   \   00000030   0x0A 0x0D          DC8 0AH, 0DH, 0AH, 3EH, 20H, 0
   \              0x0A 0x3E    
   \              0x20 0x00    
   \   00000036   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_RDSNDBFFR_FILL</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x52 0x44    
   \              0x53 0x4E    
   \              0x44 0x42    
   \              0x46 0x46    
   \              0x52 0x5F    
   \              0x46 0x49    
   \              0x4C 0x4C    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x52 0x6F          DC8 52H, 6FH, 61H, 64H, 20H, 53H, 6FH, 75H
   \              0x61 0x64    
   \              0x20 0x53    
   \              0x6F 0x75    
   \   00000008   0x6E 0x64          DC8 6EH, 64H, 3AH, 20H, 52H, 6FH, 61H, 64H
   \              0x3A 0x20    
   \              0x52 0x6F    
   \              0x61 0x64    
   \   00000010   0x20 0x53          DC8 20H, 53H, 6FH, 75H, 6EH, 64H, 20H, 6CH
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x20 0x6C    
   \   00000018   0x6F 0x61          DC8 6FH, 61H, 64H, 65H, 64H, 2CH, 20H, 70H
   \              0x64 0x65    
   \              0x64 0x2C    
   \              0x20 0x70    
   \   00000020   0x72 0x6F          DC8 72H, 6FH, 63H, 65H, 73H, 73H, 65H, 64H
   \              0x63 0x65    
   \              0x73 0x73    
   \              0x65 0x64    
   \   00000028   0x2C 0x20          DC8 2CH, 20H, 61H, 6EH, 64H, 20H, 73H, 65H
   \              0x61 0x6E    
   \              0x64 0x20    
   \              0x73 0x65    
   \   00000030   0x6E 0x74          DC8 6EH, 74H, 20H, 74H, 6FH, 20H, 46H, 46H
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x46 0x46    
   \   00000038   0x54 0x20          DC8 54H, 20H, 42H, 69H, 6EH, 73H, 2EH, 0DH
   \              0x42 0x69    
   \              0x6E 0x73    
   \              0x2E 0x0D    
   \   00000040   0x0A 0x00          DC8 0AH, 0
   \   00000042   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x52 0x6F          DC8 "Road Sound: FFT Measurements 0-15.\015\012"
   \              0x61 0x64    
   \              0x20 0x53    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x3A 0x20    
   \              0x46 0x46    
   \              0x54 0x20    
   \              0x4D 0x65    
   \              0x61 0x73    
   \              0x75 0x72    
   \              0x65 0x6D    
   \              0x65 0x6E    
   \              0x74 0x73    
   \              0x20 0x30    
   \              0x2D 0x31    
   \              0x35 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_4:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_FFT0-15:%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x46    
   \              0x46 0x54    
   \              0x30 0x2D    
   \              0x31 0x35    
   \              0x3A 0x25    
   \              0x73 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_5:
   \   00000000   0x20 0x20          DC8 "     FFT Measurements 0-15: "
   \              0x20 0x20    
   \              0x20 0x46    
   \              0x46 0x54    
   \              0x20 0x4D    
   \              0x65 0x61    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x6D 0x65    
   \              0x6E 0x74    
   \              0x73 0x20    
   \              0x30 0x2D    
   \              0x31 0x35    
   \              0x3A 0x20    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \   00000000   0x0D 0x0A          DC8 "\015\012"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_7:
   \   00000000   0x52 0x6F          DC8 "Road Sound: FFT Measurements 16-31.\015\012"
   \              0x61 0x64    
   \              0x20 0x53    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x3A 0x20    
   \              0x46 0x46    
   \              0x54 0x20    
   \              0x4D 0x65    
   \              0x61 0x73    
   \              0x75 0x72    
   \              0x65 0x6D    
   \              0x65 0x6E    
   \              0x74 0x73    
   \              0x20 0x31    
   \              0x36 0x2D    
   \              0x33 0x31    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_8:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_FFT16-31:%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x46    
   \              0x46 0x54    
   \              0x31 0x36    
   \              0x2D 0x33    
   \              0x31 0x3A    
   \              0x25 0x73    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_9:
   \   00000000   0x20 0x20          DC8 "     FFT Measurements 16-31: "
   \              0x20 0x20    
   \              0x20 0x46    
   \              0x46 0x54    
   \              0x20 0x4D    
   \              0x65 0x61    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x6D 0x65    
   \              0x6E 0x74    
   \              0x73 0x20    
   \              0x31 0x36    
   \              0x2D 0x33    
   \              0x31 0x3A    
   \              0x20 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_10:
   \   00000000   0x52 0x6F          DC8 "Road Sound: FFT Measurements 32-47.\015\012"
   \              0x61 0x64    
   \              0x20 0x53    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x3A 0x20    
   \              0x46 0x46    
   \              0x54 0x20    
   \              0x4D 0x65    
   \              0x61 0x73    
   \              0x75 0x72    
   \              0x65 0x6D    
   \              0x65 0x6E    
   \              0x74 0x73    
   \              0x20 0x33    
   \              0x32 0x2D    
   \              0x34 0x37    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_11:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_FFT32-47:%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x46    
   \              0x46 0x54    
   \              0x33 0x32    
   \              0x2D 0x34    
   \              0x37 0x3A    
   \              0x25 0x73    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_12:
   \   00000000   0x20 0x20          DC8 "     FFT Measurements 32-47: "
   \              0x20 0x20    
   \              0x20 0x46    
   \              0x46 0x54    
   \              0x20 0x4D    
   \              0x65 0x61    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x6D 0x65    
   \              0x6E 0x74    
   \              0x73 0x20    
   \              0x33 0x32    
   \              0x2D 0x34    
   \              0x37 0x3A    
   \              0x20 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_13:
   \   00000000   0x52 0x6F          DC8 "Road Sound: FFT Measurements 48-63.\015\012"
   \              0x61 0x64    
   \              0x20 0x53    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x3A 0x20    
   \              0x46 0x46    
   \              0x54 0x20    
   \              0x4D 0x65    
   \              0x61 0x73    
   \              0x75 0x72    
   \              0x65 0x6D    
   \              0x65 0x6E    
   \              0x74 0x73    
   \              0x20 0x34    
   \              0x38 0x2D    
   \              0x36 0x33    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_14:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_FFT48-63:%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x46    
   \              0x46 0x54    
   \              0x34 0x38    
   \              0x2D 0x36    
   \              0x33 0x3A    
   \              0x25 0x73    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_15:
   \   00000000   0x20 0x20          DC8 "     FFT Measurements 48-63: "
   \              0x20 0x20    
   \              0x20 0x46    
   \              0x46 0x54    
   \              0x20 0x4D    
   \              0x65 0x61    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x6D 0x65    
   \              0x6E 0x74    
   \              0x73 0x20    
   \              0x34 0x38    
   \              0x2D 0x36    
   \              0x33 0x3A    
   \              0x20 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_16:
   \   00000000   0x52 0x6F          DC8 "Road Sound: Results of save Buffer.\015\012"
   \              0x61 0x64    
   \              0x20 0x53    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x3A 0x20    
   \              0x52 0x65    
   \              0x73 0x75    
   \              0x6C 0x74    
   \              0x73 0x20    
   \              0x6F 0x66    
   \              0x20 0x73    
   \              0x61 0x76    
   \              0x65 0x20    
   \              0x42 0x75    
   \              0x66 0x66    
   \              0x65 0x72    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_17:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_FFTBFFR_DUMP:"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x46    
   \              0x46 0x54    
   \              0x42 0x46    
   \              0x46 0x52    
   \              0x5F 0x44    
   \              0x55 0x4D    
   \              0x50 0x3A    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 1
   \   00000000   0x00               DC8 ""

   \                                 In section .rodata, align 4
   \                     ?_19:
   \   00000000   0x25 0x30          DC8 "%04d "
   \              0x34 0x64    
   \              0x20 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_20:
   \   00000000   0x3C 0x2F          DC8 "</STATUS>"
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_21:
   \   00000000   0x20 0x20          DC8 "     ---COMPLETE---"
   \              0x20 0x20    
   \              0x20 0x2D    
   \              0x2D 0x2D    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2D 0x2D    
   \              0x2D 0x00    

   \                                 In section .rodata, align 4
   \                     ?_22:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_FFTCLR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x46    
   \              0x46 0x54    
   \              0x43 0x4C    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_23:
   \   00000000   0x52 0x6F          DC8 "Road Sound: All buffers cleared.\015\012"
   \              0x61 0x64    
   \              0x20 0x53    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x3A 0x20    
   \              0x41 0x6C    
   \              0x6C 0x20    
   \              0x62 0x75    
   \              0x66 0x66    
   \              0x65 0x72    
   \              0x73 0x20    
   \              0x63 0x6C    
   \              0x65 0x61    
   \              0x72 0x65    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_24:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_NOSUPPORT</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x4E 0x4F    
   \              0x53 0x55    
   \              0x50 0x50    
   \              0x4F 0x52    
   \              0x54 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_25:
   \   00000000   0x49 0x6E          DC8 "Initialize Barometer Sensor Passed.\015\012"
   \              0x69 0x74    
   \              0x69 0x61    
   \              0x6C 0x69    
   \              0x7A 0x65    
   \              0x20 0x42    
   \              0x61 0x72    
   \              0x6F 0x6D    
   \              0x65 0x74    
   \              0x65 0x72    
   \              0x20 0x53    
   \              0x65 0x6E    
   \              0x73 0x6F    
   \              0x72 0x20    
   \              0x50 0x61    
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_26:
   \   00000000   0x49 0x6E          DC8 "Initialize Barometer Sensor FAILED.\015\012"
   \              0x69 0x74    
   \              0x69 0x61    
   \              0x6C 0x69    
   \              0x7A 0x65    
   \              0x20 0x42    
   \              0x61 0x72    
   \              0x6F 0x6D    
   \              0x65 0x74    
   \              0x65 0x72    
   \              0x20 0x53    
   \              0x65 0x6E    
   \              0x73 0x6F    
   \              0x72 0x20    
   \              0x46 0x41    
   \              0x49 0x4C    
   \              0x45 0x44    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_27:
   \   00000000   0x41 0x36          DC8 "A6 Command...Read Pressure Passed.\015\012"
   \              0x20 0x43    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x2E    
   \              0x2E 0x52    
   \              0x65 0x61    
   \              0x64 0x20    
   \              0x50 0x72    
   \              0x65 0x73    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x20 0x50    
   \              0x61 0x73    
   \              0x73 0x65    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_28:
   \   00000000   0x20 0x50          DC8 20H, 50H, 52H, 45H, 53H, 53H, 55H, 52H
   \              0x52 0x45    
   \              0x53 0x53    
   \              0x55 0x52    
   \   00000008   0x45 0x28          DC8 45H, 28H, 50H, 52H, 45H, 53H, 53H, 5FH
   \              0x50 0x52    
   \              0x45 0x53    
   \              0x53 0x5F    
   \   00000010   0x4F 0x55          DC8 4FH, 55H, 54H, 5FH, 48H, 2EH, 2EH, 2EH
   \              0x54 0x5F    
   \              0x48 0x2E    
   \              0x2E 0x2E    
   \   00000018   0x50 0x52          DC8 50H, 52H, 45H, 53H, 53H, 5FH, 4FH, 55H
   \              0x45 0x53    
   \              0x53 0x5F    
   \              0x4F 0x55    
   \   00000020   0x54 0x5F          DC8 54H, 5FH, 4CH, 2EH, 2EH, 2EH, 50H, 52H
   \              0x4C 0x2E    
   \              0x2E 0x2E    
   \              0x50 0x52    
   \   00000028   0x45 0x53          DC8 45H, 53H, 53H, 5FH, 4FH, 55H, 54H, 5FH
   \              0x53 0x5F    
   \              0x4F 0x55    
   \              0x54 0x5F    
   \   00000030   0x58 0x4C          DC8 58H, 4CH, 29H, 0DH, 0AH, 0
   \              0x29 0x0D    
   \              0x0A 0x00    
   \   00000036   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_29:
   \   00000000   0x20 0x50          DC8 " PRESSURE: %s/%s\015\012"
   \              0x52 0x45    
   \              0x53 0x53    
   \              0x55 0x52    
   \              0x45 0x3A    
   \              0x20 0x25    
   \              0x73 0x2F    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_30:
   \   00000000   0x3C 0x53          DC8 "<STATUS>PRESSURE: %s/%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x50 0x52    
   \              0x45 0x53    
   \              0x53 0x55    
   \              0x52 0x45    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_31:
   \   00000000   0x20 0x50          DC8 " PRESSURE:  "
   \              0x52 0x45    
   \              0x53 0x53    
   \              0x55 0x52    
   \              0x45 0x3A    
   \              0x20 0x20    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_32:
   \   00000000   0x20 0x20          DC8 "  -  %08x\015\012"
   \              0x2D 0x20    
   \              0x20 0x25    
   \              0x30 0x38    
   \              0x78 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_33:
   \   00000000   0x41 0x36          DC8 "A6 Command...Read Pressure FAILED.\015\012"
   \              0x20 0x43    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x2E    
   \              0x2E 0x52    
   \              0x65 0x61    
   \              0x64 0x20    
   \              0x50 0x72    
   \              0x65 0x73    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x20 0x46    
   \              0x41 0x49    
   \              0x4C 0x45    
   \              0x44 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_34:
   \   00000000   0x41 0x38          DC8 "A8 Command...Read Temperature Passed.\015\012"
   \              0x20 0x43    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x2E    
   \              0x2E 0x52    
   \              0x65 0x61    
   \              0x64 0x20    
   \              0x54 0x65    
   \              0x6D 0x70    
   \              0x65 0x72    
   \              0x61 0x74    
   \              0x75 0x72    
   \              0x65 0x20    
   \              0x50 0x61    
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_35:
   \   00000000   0x20 0x20          DC8 "     TEMP DATA: "
   \              0x20 0x20    
   \              0x20 0x54    
   \              0x45 0x4D    
   \              0x50 0x20    
   \              0x44 0x41    
   \              0x54 0x41    
   \              0x3A 0x20    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_36:
   \   00000000   0x20 0x20          DC8 "     TEMP DATA(Decimal): %d\015\012"
   \              0x20 0x20    
   \              0x20 0x54    
   \              0x45 0x4D    
   \              0x50 0x20    
   \              0x44 0x41    
   \              0x54 0x41    
   \              0x28 0x44    
   \              0x65 0x63    
   \              0x69 0x6D    
   \              0x61 0x6C    
   \              0x29 0x3A    
   \              0x20 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_37:
   \   00000000   0x20 0x20          DC8 "     TempC: "
   \              0x20 0x20    
   \              0x20 0x54    
   \              0x65 0x6D    
   \              0x70 0x43    
   \              0x3A 0x20    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_38:
   \   00000000   0x20 0x20          DC8 "     TempF: "
   \              0x20 0x20    
   \              0x20 0x54    
   \              0x65 0x6D    
   \              0x70 0x46    
   \              0x3A 0x20    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_39:
   \   00000000   0x42 0x61          DC8 "Barometer Sensor: WHO_AM_I Passed.\015\012"
   \              0x72 0x6F    
   \              0x6D 0x65    
   \              0x74 0x65    
   \              0x72 0x20    
   \              0x53 0x65    
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x3A 0x20    
   \              0x57 0x48    
   \              0x4F 0x5F    
   \              0x41 0x4D    
   \              0x5F 0x49    
   \              0x20 0x50    
   \              0x61 0x73    
   \              0x73 0x65    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_40:
   \   00000000   0x42 0x61          DC8 "Barometer Sensor: WHO_AM_I FAILED.\015\012"
   \              0x72 0x6F    
   \              0x6D 0x65    
   \              0x74 0x65    
   \              0x72 0x20    
   \              0x53 0x65    
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x3A 0x20    
   \              0x57 0x48    
   \              0x4F 0x5F    
   \              0x41 0x4D    
   \              0x5F 0x49    
   \              0x20 0x46    
   \              0x41 0x49    
   \              0x4C 0x45    
   \              0x44 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_41:
   \   00000000   0x45 0x52          DC8 "ERROR: Not a legal command.\015\012"
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x61    
   \              0x20 0x6C    
   \              0x65 0x67    
   \              0x61 0x6C    
   \              0x20 0x63    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_42:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_THERMAL_DUMP:"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x48 0x45    
   \              0x52 0x4D    
   \              0x41 0x4C    
   \              0x5F 0x44    
   \              0x55 0x4D    
   \              0x50 0x3A    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_43:
   \   00000000   0x56 0x6F          DC8 "Voltage Monitor/Shunt Voltage...\015\012"
   \              0x6C 0x74    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x4D 0x6F    
   \              0x6E 0x69    
   \              0x74 0x6F    
   \              0x72 0x2F    
   \              0x53 0x68    
   \              0x75 0x6E    
   \              0x74 0x20    
   \              0x56 0x6F    
   \              0x6C 0x74    
   \              0x61 0x67    
   \              0x65 0x2E    
   \              0x2E 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_44:
   \   00000000   0x20 0x20          DC8 "     Thermistor DATA: %s   %s/%s   %s/%s   %d\015\012"
   \              0x20 0x20    
   \              0x20 0x54    
   \              0x68 0x65    
   \              0x72 0x6D    
   \              0x69 0x73    
   \              0x74 0x6F    
   \              0x72 0x20    
   \              0x44 0x41    
   \              0x54 0x41    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x20 0x20    
   \              0x20 0x25    
   \              0x73 0x2F    
   \              0x25 0x73    
   \              0x20 0x20    
   \              0x20 0x25    
   \              0x73 0x2F    
   \              0x25 0x73    
   \              0x20 0x20    
   \              0x20 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_45:
   \   00000000   0x20 0x20          DC8 "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\015\012"
   \              0x20 0x20    
   \              0x20 0x47    
   \              0x72 0x69    
   \              0x64 0x20    
   \              0x33 0x33    
   \              0x20 0x44    
   \              0x41 0x54    
   \              0x41 0x3A    
   \              0x20 0x25    
   \              0x73 0x20    
   \              0x20 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x20    
   \              0x20 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x20    
   \              0x20 0x20    
   \              0x25 0x64    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_46:
   \   00000000   0x20 0x20          DC8 "     SHNT VLTG DATA: "
   \              0x20 0x20    
   \              0x20 0x53    
   \              0x48 0x4E    
   \              0x54 0x20    
   \              0x56 0x4C    
   \              0x54 0x47    
   \              0x20 0x44    
   \              0x41 0x54    
   \              0x41 0x3A    
   \              0x20 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_47:
   \   00000000   0x20 0x20          DC8 "     COMPLETE.\015\012"
   \              0x20 0x20    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_48:
   \   00000000   0x43 0x6F          DC8 43H, 6FH, 6FH, 6CH, 20H, 45H, 79H, 65H
   \              0x6F 0x6C    
   \              0x20 0x45    
   \              0x79 0x65    
   \   00000008   0x2F 0x47          DC8 2FH, 47H, 72H, 69H, 64H, 20H, 45H, 79H
   \              0x72 0x69    
   \              0x64 0x20    
   \              0x45 0x79    
   \   00000010   0x65 0x20          DC8 65H, 20H, 53H, 65H, 6EH, 73H, 6FH, 72H
   \              0x53 0x65    
   \              0x6E 0x73    
   \              0x6F 0x72    
   \   00000018   0x3A 0x20          DC8 3AH, 20H, 49H, 6EH, 69H, 74H, 69H, 61H
   \              0x49 0x6E    
   \              0x69 0x74    
   \              0x69 0x61    
   \   00000020   0x6C 0x69          DC8 6CH, 69H, 7AH, 61H, 74H, 69H, 6FH, 6EH
   \              0x7A 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \   00000028   0x20 0x43          DC8 20H, 43H, 6FH, 6DH, 70H, 6CH, 65H, 74H
   \              0x6F 0x6D    
   \              0x70 0x6C    
   \              0x65 0x74    
   \   00000030   0x65 0x2E          DC8 65H, 2EH, 0DH, 0AH, 0
   \              0x0D 0x0A    
   \              0x00         
   \   00000035   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_49:
   \   00000000   0x43 0x6F          DC8 "Cool Eye/Grid Eye Sensor: Reset Complete.\015\012"
   \              0x6F 0x6C    
   \              0x20 0x45    
   \              0x79 0x65    
   \              0x2F 0x47    
   \              0x72 0x69    
   \              0x64 0x20    
   \              0x45 0x79    
   \              0x65 0x20    
   \              0x53 0x65    
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x3A 0x20    
   \              0x52 0x65    
   \              0x73 0x65    
   \              0x74 0x20    
   \              0x43 0x6F    
   \              0x6D 0x70    
   \              0x6C 0x65    
   \              0x74 0x65    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_50:
   \   00000000   0x56 0x6F          DC8 "Voltage Monitor/Read Bus Voltage...\015\012"
   \              0x6C 0x74    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x4D 0x6F    
   \              0x6E 0x69    
   \              0x74 0x6F    
   \              0x72 0x2F    
   \              0x52 0x65    
   \              0x61 0x64    
   \              0x20 0x42    
   \              0x75 0x73    
   \              0x20 0x56    
   \              0x6F 0x6C    
   \              0x74 0x61    
   \              0x67 0x65    
   \              0x2E 0x2E    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_51:
   \   00000000   0x20 0x20          DC8 "     BUS VOLTAGE DATA: "
   \              0x20 0x20    
   \              0x20 0x42    
   \              0x55 0x53    
   \              0x20 0x56    
   \              0x4F 0x4C    
   \              0x54 0x41    
   \              0x47 0x45    
   \              0x20 0x44    
   \              0x41 0x54    
   \              0x41 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_52:
   \   00000000   0x3C 0x53          DC8 "<STATUS>BUS_VLTG:%s/%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x42 0x55    
   \              0x53 0x5F    
   \              0x56 0x4C    
   \              0x54 0x47    
   \              0x3A 0x25    
   \              0x73 0x2F    
   \              0x25 0x73    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_53:
   \   00000000   0x20 0x20          DC8 "     Bus Voltage: %s/%s\015\012"
   \              0x20 0x20    
   \              0x20 0x42    
   \              0x75 0x73    
   \              0x20 0x56    
   \              0x6F 0x6C    
   \              0x74 0x61    
   \              0x67 0x65    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x0D    
   \              0x0A 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_54:
   \   00000000   0x56 0x6F          DC8 "Voltage Monitor: Initialization Complete.\015\012"
   \              0x6C 0x74    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x4D 0x6F    
   \              0x6E 0x69    
   \              0x74 0x6F    
   \              0x72 0x3A    
   \              0x20 0x49    
   \              0x6E 0x69    
   \              0x74 0x69    
   \              0x61 0x6C    
   \              0x69 0x7A    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x43 0x6F    
   \              0x6D 0x70    
   \              0x6C 0x65    
   \              0x74 0x65    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_55:
   \   00000000   0x3C 0x53          DC8 "<STATUS>SHNT_VLTG:%s/%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x48    
   \              0x4E 0x54    
   \              0x5F 0x56    
   \              0x4C 0x54    
   \              0x47 0x3A    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_56:
   \   00000000   0x20 0x20          DC8 "     Shunt Voltage: %s/%s\015\012"
   \              0x20 0x20    
   \              0x20 0x53    
   \              0x68 0x75    
   \              0x6E 0x74    
   \              0x20 0x56    
   \              0x6F 0x6C    
   \              0x74 0x61    
   \              0x67 0x65    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_57:
   \   00000000   0x56 0x6F          DC8 "Voltage Monitor/Read Current...\015\012"
   \              0x6C 0x74    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x4D 0x6F    
   \              0x6E 0x69    
   \              0x74 0x6F    
   \              0x72 0x2F    
   \              0x52 0x65    
   \              0x61 0x64    
   \              0x20 0x43    
   \              0x75 0x72    
   \              0x72 0x65    
   \              0x6E 0x74    
   \              0x2E 0x2E    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_58:
   \   00000000   0x20 0x20          DC8 "     CURRENT DATA: "
   \              0x20 0x20    
   \              0x20 0x43    
   \              0x55 0x52    
   \              0x52 0x45    
   \              0x4E 0x54    
   \              0x20 0x44    
   \              0x41 0x54    
   \              0x41 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_59:
   \   00000000   0x3C 0x53          DC8 "<STATUS>SHNT_CRNT:%s/%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x48    
   \              0x4E 0x54    
   \              0x5F 0x43    
   \              0x52 0x4E    
   \              0x54 0x3A    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_60:
   \   00000000   0x20 0x20          DC8 "     Current: %s/%s\015\012"
   \              0x20 0x20    
   \              0x20 0x43    
   \              0x75 0x72    
   \              0x72 0x65    
   \              0x6E 0x74    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x0D    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_61:
   \   00000000   0x56 0x6F          DC8 "Voltage Monitor/Read Power...\015\012"
   \              0x6C 0x74    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x4D 0x6F    
   \              0x6E 0x69    
   \              0x74 0x6F    
   \              0x72 0x2F    
   \              0x52 0x65    
   \              0x61 0x64    
   \              0x20 0x50    
   \              0x6F 0x77    
   \              0x65 0x72    
   \              0x2E 0x2E    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_62:
   \   00000000   0x20 0x20          DC8 "     POWER DATA: "
   \              0x20 0x20    
   \              0x20 0x50    
   \              0x4F 0x57    
   \              0x45 0x52    
   \              0x20 0x44    
   \              0x41 0x54    
   \              0x41 0x3A    
   \              0x20 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_63:
   \   00000000   0x3C 0x53          DC8 "<STATUS>POWER:%s/%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x50 0x4F    
   \              0x57 0x45    
   \              0x52 0x3A    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_64:
   \   00000000   0x20 0x20          DC8 "     Power: %s/%s\015\012"
   \              0x20 0x20    
   \              0x20 0x50    
   \              0x6F 0x77    
   \              0x65 0x72    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_65:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_C_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x43 0x5F    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_66:
   \   00000000   0x48 0x75          DC8 "Humidity SENSOR...\015\012"
   \              0x6D 0x69    
   \              0x64 0x69    
   \              0x74 0x79    
   \              0x20 0x53    
   \              0x45 0x4E    
   \              0x53 0x4F    
   \              0x52 0x2E    
   \              0x2E 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_67:
   \   00000000   0x20 0x20          DC8 "     Humidity DATA: "
   \              0x20 0x20    
   \              0x20 0x48    
   \              0x75 0x6D    
   \              0x69 0x64    
   \              0x69 0x74    
   \              0x79 0x20    
   \              0x44 0x41    
   \              0x54 0x41    
   \              0x3A 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_68:
   \   00000000   0x20 0x20          DC8 "     Humidity DATA(Decimal): %d\015\012"
   \              0x20 0x20    
   \              0x20 0x48    
   \              0x75 0x6D    
   \              0x69 0x64    
   \              0x69 0x74    
   \              0x79 0x20    
   \              0x44 0x41    
   \              0x54 0x41    
   \              0x28 0x44    
   \              0x65 0x63    
   \              0x69 0x6D    
   \              0x61 0x6C    
   \              0x29 0x3A    
   \              0x20 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_69:
   \   00000000   0x3C 0x53          DC8 "<STATUS>HUMIDITY:%s/%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x48 0x55    
   \              0x4D 0x49    
   \              0x44 0x49    
   \              0x54 0x59    
   \              0x3A 0x25    
   \              0x73 0x2F    
   \              0x25 0x73    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_70:
   \   00000000   0x20 0x20          DC8 "     Humidity: %s/%s\015\012"
   \              0x20 0x20    
   \              0x20 0x48    
   \              0x75 0x6D    
   \              0x69 0x64    
   \              0x69 0x74    
   \              0x79 0x3A    
   \              0x20 0x25    
   \              0x73 0x2F    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_71:
   \   00000000   0x48 0x75          DC8 "Humidity Sensor: Initialization Complete.\015\012"
   \              0x6D 0x69    
   \              0x64 0x69    
   \              0x74 0x79    
   \              0x20 0x53    
   \              0x65 0x6E    
   \              0x73 0x6F    
   \              0x72 0x3A    
   \              0x20 0x49    
   \              0x6E 0x69    
   \              0x74 0x69    
   \              0x61 0x6C    
   \              0x69 0x7A    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x43 0x6F    
   \              0x6D 0x70    
   \              0x6C 0x65    
   \              0x74 0x65    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_72:
   \   00000000   0x20 0x20          DC8 "     Humidity: "
   \              0x20 0x20    
   \              0x20 0x48    
   \              0x75 0x6D    
   \              0x69 0x64    
   \              0x69 0x74    
   \              0x79 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_73:
   \   00000000   0x54 0x42          DC8 "TBD: Read Temp and Pressure NOT IMPLEMENTED\015\012"
   \              0x44 0x3A    
   \              0x20 0x52    
   \              0x65 0x61    
   \              0x64 0x20    
   \              0x54 0x65    
   \              0x6D 0x70    
   \              0x20 0x61    
   \              0x6E 0x64    
   \              0x20 0x50    
   \              0x72 0x65    
   \              0x73 0x73    
   \              0x75 0x72    
   \              0x65 0x20    
   \              0x4E 0x4F    
   \              0x54 0x20    
   \              0x49 0x4D    
   \              0x50 0x4C    
   \              0x45 0x4D    
   \              0x45 0x4E    
   \              0x54 0x45    
   \              0x44 0x0D    
   \              0x0A 0x00    
   \   0000002E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_74:
   \   00000000   0x4E 0x4F          DC8 "NO Action...(0x00).\015\012"
   \              0x20 0x41    
   \              0x63 0x74    
   \              0x69 0x6F    
   \              0x6E 0x2E    
   \              0x2E 0x2E    
   \              0x28 0x30    
   \              0x78 0x30    
   \              0x30 0x29    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_75:
   \   00000000   0x54 0x45          DC8 "TEMP SENSOR...\015\012"
   \              0x4D 0x50    
   \              0x20 0x53    
   \              0x45 0x4E    
   \              0x53 0x4F    
   \              0x52 0x2E    
   \              0x2E 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_76:
   \   00000000   0x3C 0x53          DC8 "<STATUS>TEMPC:%s/%s//TEMPF:%s/%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x54 0x45    
   \              0x4D 0x50    
   \              0x43 0x3A    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x2F    
   \              0x2F 0x54    
   \              0x45 0x4D    
   \              0x50 0x46    
   \              0x3A 0x25    
   \              0x73 0x2F    
   \              0x25 0x73    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000002A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_77:
   \   00000000   0x20 0x20          DC8 "     TempC: %s/%s     TempF: %s/%s\015\012"
   \              0x20 0x20    
   \              0x20 0x54    
   \              0x65 0x6D    
   \              0x70 0x43    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x54 0x65    
   \              0x6D 0x70    
   \              0x46 0x3A    
   \              0x20 0x25    
   \              0x73 0x2F    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_78:
   \   00000000   0x52 0x47          DC8 "RGB Color Light Sensor...\015\012"
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \              0x72 0x20    
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \              0x53 0x65    
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x2E 0x2E    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_79:
   \   00000000   0x20 0x52          DC8 20H, 52H, 47H, 42H, 28H, 52H, 45H, 44H
   \              0x47 0x42    
   \              0x28 0x52    
   \              0x45 0x44    
   \   00000008   0x6D 0x73          DC8 6DH, 73H, 62H, 2CH, 52H, 45H, 44H, 6CH
   \              0x62 0x2C    
   \              0x52 0x45    
   \              0x44 0x6C    
   \   00000010   0x73 0x62          DC8 73H, 62H, 2CH, 47H, 52H, 45H, 45H, 4EH
   \              0x2C 0x47    
   \              0x52 0x45    
   \              0x45 0x4E    
   \   00000018   0x6D 0x73          DC8 6DH, 73H, 62H, 2CH, 47H, 52H, 45H, 45H
   \              0x62 0x2C    
   \              0x47 0x52    
   \              0x45 0x45    
   \   00000020   0x4E 0x6C          DC8 4EH, 6CH, 73H, 62H, 2CH, 42H, 4CH, 55H
   \              0x73 0x62    
   \              0x2C 0x42    
   \              0x4C 0x55    
   \   00000028   0x45 0x6D          DC8 45H, 6DH, 73H, 62H, 2CH, 42H, 4CH, 55H
   \              0x73 0x62    
   \              0x2C 0x42    
   \              0x4C 0x55    
   \   00000030   0x45 0x6C          DC8 45H, 6CH, 73H, 62H, 29H, 0DH, 0AH, 0
   \              0x73 0x62    
   \              0x29 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_80:
   \   00000000   0x20 0x20          DC8 "       DATA: "
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x44    
   \              0x41 0x54    
   \              0x41 0x3A    
   \              0x20 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_81:
   \   00000000   0x3C 0x53          DC8 "<STATUS>RED:%s/GREEN:%s/BLUE:%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x52 0x45    
   \              0x44 0x3A    
   \              0x25 0x73    
   \              0x2F 0x47    
   \              0x52 0x45    
   \              0x45 0x4E    
   \              0x3A 0x25    
   \              0x73 0x2F    
   \              0x42 0x4C    
   \              0x55 0x45    
   \              0x3A 0x25    
   \              0x73 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_82:
   \   00000000   0x20 0x20          DC8 "    Red: "
   \              0x20 0x20    
   \              0x52 0x65    
   \              0x64 0x3A    
   \              0x20 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_83:
   \   00000000   0x20 0x20          DC8 "    Green: "
   \              0x20 0x20    
   \              0x47 0x72    
   \              0x65 0x65    
   \              0x6E 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_84:
   \   00000000   0x20 0x20          DC8 "    Blue: "
   \              0x20 0x20    
   \              0x42 0x6C    
   \              0x75 0x65    
   \              0x3A 0x20    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_85:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 3AH, 20H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x3A 0x20    
   \   00000018   0x49 0x6E          DC8 49H, 6EH, 69H, 74H, 69H, 61H, 6CH, 69H
   \              0x69 0x74    
   \              0x69 0x61    
   \              0x6C 0x69    
   \   00000020   0x7A 0x61          DC8 7AH, 61H, 74H, 69H, 6FH, 6EH, 20H, 43H
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x43    
   \   00000028   0x6F 0x6D          DC8 6FH, 6DH, 70H, 6CH, 65H, 74H, 65H, 20H
   \              0x70 0x6C    
   \              0x65 0x74    
   \              0x65 0x20    
   \   00000030   0x77 0x69          DC8 77H, 69H, 74H, 68H, 20H, 44H, 45H, 46H
   \              0x74 0x68    
   \              0x20 0x44    
   \              0x45 0x46    
   \   00000038   0x41 0x55          DC8 41H, 55H, 4CH, 54H, 20H, 56H, 61H, 6CH
   \              0x4C 0x54    
   \              0x20 0x56    
   \              0x61 0x6C    
   \   00000040   0x75 0x65          DC8 75H, 65H, 73H, 2EH, 0DH, 0AH, 0
   \              0x73 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000047   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_86:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 3AH, 20H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x3A 0x20    
   \   00000018   0x53 0x59          DC8 53H, 59H, 4EH, 54H, 41H, 58H, 20H, 45H
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \   00000020   0x72 0x72          DC8 72H, 72H, 6FH, 72H, 2EH, 20H, 50H, 61H
   \              0x6F 0x72    
   \              0x2E 0x20    
   \              0x50 0x61    
   \   00000028   0x72 0x61          DC8 72H, 61H, 6DH, 65H, 74H, 65H, 72H, 73H
   \              0x6D 0x65    
   \              0x74 0x65    
   \              0x72 0x73    
   \   00000030   0x20 0x61          DC8 20H, 61H, 72H, 65H, 20H, 6EH, 6FH, 74H
   \              0x72 0x65    
   \              0x20 0x6E    
   \              0x6F 0x74    
   \   00000038   0x20 0x63          DC8 20H, 63H, 6FH, 72H, 72H, 65H, 63H, 74H
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \   00000040   0x2E 0x0D          DC8 2EH, 0DH, 0AH, 0
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_87:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 4EH, 6FH, 74H
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \   00000028   0x20 0x63          DC8 20H, 63H, 6FH, 72H, 72H, 65H, 63H, 74H
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \   00000030   0x20 0x66          DC8 20H, 66H, 6FH, 72H, 6DH, 61H, 74H, 2EH
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \   00000038   0x20 0x50          DC8 20H, 50H, 75H, 6EH, 63H, 74H, 75H, 61H
   \              0x75 0x6E    
   \              0x63 0x74    
   \              0x75 0x61    
   \   00000040   0x74 0x69          DC8 74H, 69H, 6FH, 6EH, 21H, 0DH, 0AH, 0
   \              0x6F 0x6E    
   \              0x21 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_88:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 50H, 61H, 72H, 61H
   \              0x52 0x3A    
   \              0x50 0x61    
   \              0x72 0x61    
   \   00000028   0x6D 0x65          DC8 6DH, 65H, 74H, 65H, 72H, 73H, 20H, 6EH
   \              0x74 0x65    
   \              0x72 0x73    
   \              0x20 0x6E    
   \   00000030   0x6F 0x74          DC8 6FH, 74H, 20H, 48H, 45H, 58H, 20H, 56H
   \              0x20 0x48    
   \              0x45 0x58    
   \              0x20 0x56    
   \   00000038   0x61 0x6C          DC8 61H, 6CH, 75H, 65H, 2EH, 0DH, 0AH, 0
   \              0x75 0x65    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_89:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x4F 0x50          DC8 4FH, 50H, 5FH, 4DH, 4FH, 44H, 45H, 2EH
   \              0x5F 0x4D    
   \              0x4F 0x44    
   \              0x45 0x2E    
   \   00000038   0x0D 0x0A          DC8 0DH, 0AH, 0
   \              0x00         
   \   0000003B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_90:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x44 0x53          DC8 44H, 53H, 5FH, 52H, 41H, 4EH, 47H, 45H
   \              0x5F 0x52    
   \              0x41 0x4E    
   \              0x47 0x45    
   \   00000038   0x2E 0x0D          DC8 2EH, 0DH, 0AH, 0
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_91:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x41 0x44          DC8 41H, 44H, 43H, 5FH, 52H, 53H, 4CH, 2EH
   \              0x43 0x5F    
   \              0x52 0x53    
   \              0x4C 0x2E    
   \   00000038   0x0D 0x0A          DC8 0DH, 0AH, 0
   \              0x00         
   \   0000003B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_92:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x53 0x59          DC8 53H, 59H, 4EH, 43H, 2EH, 0DH, 0AH, 0
   \              0x4E 0x43    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_93:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x43 0x4D          DC8 43H, 4DH, 50H, 5FH, 41H, 44H, 4AH, 53H
   \              0x50 0x5F    
   \              0x41 0x44    
   \              0x4A 0x53    
   \   00000038   0x54 0x2E          DC8 54H, 2EH, 0DH, 0AH, 0
   \              0x0D 0x0A    
   \              0x00         
   \   0000003D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_94:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x43 0x4D          DC8 43H, 4DH, 50H, 5FH, 4FH, 46H, 46H, 53H
   \              0x50 0x5F    
   \              0x4F 0x46    
   \              0x46 0x53    
   \   00000038   0x54 0x2E          DC8 54H, 2EH, 0DH, 0AH, 0
   \              0x0D 0x0A    
   \              0x00         
   \   0000003D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_95:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x49 0x4E          DC8 49H, 4EH, 54H, 5FH, 41H, 53H, 53H, 47H
   \              0x54 0x5F    
   \              0x41 0x53    
   \              0x53 0x47    
   \   00000038   0x4E 0x2E          DC8 4EH, 2EH, 0DH, 0AH, 0
   \              0x0D 0x0A    
   \              0x00         
   \   0000003D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_96:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x49 0x4E          DC8 49H, 4EH, 54H, 5FH, 50H, 45H, 52H, 53H
   \              0x54 0x5F    
   \              0x50 0x45    
   \              0x52 0x53    
   \   00000038   0x49 0x53          DC8 49H, 53H, 54H, 2EH, 0DH, 0AH, 0
   \              0x54 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000003F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_97:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x43 0x4E          DC8 43H, 4EH, 56H, 52H, 53H, 4EH, 5FH, 49H
   \              0x56 0x52    
   \              0x53 0x4E    
   \              0x5F 0x49    
   \   00000038   0x4E 0x54          DC8 4EH, 54H, 2EH, 0DH, 0AH, 0
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   0000003E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_98:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 3AH, 20H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x3A 0x20    
   \   00000018   0x49 0x6E          DC8 49H, 6EH, 69H, 74H, 69H, 61H, 6CH, 69H
   \              0x69 0x74    
   \              0x69 0x61    
   \              0x6C 0x69    
   \   00000020   0x7A 0x61          DC8 7AH, 61H, 74H, 69H, 6FH, 6EH, 20H, 43H
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x43    
   \   00000028   0x6F 0x6D          DC8 6FH, 6DH, 70H, 6CH, 65H, 74H, 65H, 20H
   \              0x70 0x6C    
   \              0x65 0x74    
   \              0x65 0x20    
   \   00000030   0x77 0x69          DC8 77H, 69H, 74H, 68H, 20H, 55H, 53H, 45H
   \              0x74 0x68    
   \              0x20 0x55    
   \              0x53 0x45    
   \   00000038   0x52 0x20          DC8 52H, 20H, 56H, 61H, 6CH, 75H, 65H, 73H
   \              0x56 0x61    
   \              0x6C 0x75    
   \              0x65 0x73    
   \   00000040   0x2E 0x0D          DC8 2EH, 0DH, 0AH, 0
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_99:
   \   00000000   0x52 0x47          DC8 "RGB Color Light Sensor Status: "
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \              0x72 0x20    
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \              0x53 0x65    
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \              0x74 0x61    
   \              0x74 0x75    
   \              0x73 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_100:
   \   00000000   0x25 0x30          DC8 "%02x / "
   \              0x32 0x78    
   \              0x20 0x2F    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_101:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 3AH, 20H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x3A 0x20    
   \   00000018   0x52 0x45          DC8 52H, 45H, 53H, 45H, 54H, 20H, 43H, 4DH
   \              0x53 0x45    
   \              0x54 0x20    
   \              0x43 0x4D    
   \   00000020   0x44 0x20          DC8 44H, 20H, 53H, 65H, 6EH, 74H, 20H, 53H
   \              0x53 0x65    
   \              0x6E 0x74    
   \              0x20 0x53    
   \   00000028   0x75 0x63          DC8 75H, 63H, 63H, 65H, 73H, 66H, 75H, 6CH
   \              0x63 0x65    
   \              0x73 0x66    
   \              0x75 0x6C    
   \   00000030   0x2E 0x0D          DC8 2EH, 0DH, 0AH, 0
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_102:
   \   00000000   0x52 0x47          DC8 "RGB Color Light Sensor ID Code: "
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \              0x72 0x20    
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \              0x53 0x65    
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x49    
   \              0x44 0x20    
   \              0x43 0x6F    
   \              0x64 0x65    
   \              0x3A 0x20    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_103:
   \   00000000   0x35 0x56          DC8 "5V Power Plane Powered UP.\015\012"
   \              0x20 0x50    
   \              0x6F 0x77    
   \              0x65 0x72    
   \              0x20 0x50    
   \              0x6C 0x61    
   \              0x6E 0x65    
   \              0x20 0x50    
   \              0x6F 0x77    
   \              0x65 0x72    
   \              0x65 0x64    
   \              0x20 0x55    
   \              0x50 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_104:
   \   00000000   0x35 0x56          DC8 "5V Power Plane Powered DOWN.\015\012"
   \              0x20 0x50    
   \              0x6F 0x77    
   \              0x65 0x72    
   \              0x20 0x50    
   \              0x6C 0x61    
   \              0x6E 0x65    
   \              0x20 0x50    
   \              0x6F 0x77    
   \              0x65 0x72    
   \              0x65 0x64    
   \              0x20 0x44    
   \              0x4F 0x57    
   \              0x4E 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_105:
   \   00000000   0x45 0x52          DC8 "ERROR: Illegal 5V Power Plane Command.\015\012"
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x49    
   \              0x6C 0x6C    
   \              0x65 0x67    
   \              0x61 0x6C    
   \              0x20 0x35    
   \              0x56 0x20    
   \              0x50 0x6F    
   \              0x77 0x65    
   \              0x72 0x20    
   \              0x50 0x6C    
   \              0x61 0x6E    
   \              0x65 0x20    
   \              0x43 0x6F    
   \              0x6D 0x6D    
   \              0x61 0x6E    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_106:
   \   00000000   0x54 0x20          DC8 "T ERROR: Not a legal command.\015\012"
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x61    
   \              0x20 0x6C    
   \              0x65 0x67    
   \              0x61 0x6C    
   \              0x20 0x63    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_107:
   \   00000000   0x54 0x49          DC8 "TI SYNTAX ERROR: Not correct format.\015\012"
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x63    
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_108:
   \   00000000   0x54 0x49          DC8 "TIS SYNTAX ERROR: Not correct format.\015\012"
   \              0x53 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x4E 0x6F    
   \              0x74 0x20    
   \              0x63 0x6F    
   \              0x72 0x72    
   \              0x65 0x63    
   \              0x74 0x20    
   \              0x66 0x6F    
   \              0x72 0x6D    
   \              0x61 0x74    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_109:
   \   00000000   0x54 0x49          DC8 "TIS SYNTAX ERROR: Address not HEX Value.\015\012"
   \              0x53 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x41 0x64    
   \              0x64 0x72    
   \              0x65 0x73    
   \              0x73 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x48 0x45    
   \              0x58 0x20    
   \              0x56 0x61    
   \              0x6C 0x75    
   \              0x65 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_110:
   \   00000000   0x54 0x49          DC8 54H, 49H, 53H, 20H, 53H, 59H, 4EH, 54H
   \              0x53 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \   00000008   0x41 0x58          DC8 41H, 58H, 20H, 45H, 52H, 52H, 4FH, 52H
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \   00000010   0x3A 0x20          DC8 3AH, 20H, 4EH, 75H, 6DH, 62H, 65H, 72H
   \              0x4E 0x75    
   \              0x6D 0x62    
   \              0x65 0x72    
   \   00000018   0x20 0x6F          DC8 20H, 6FH, 66H, 20H, 42H, 79H, 74H, 65H
   \              0x66 0x20    
   \              0x42 0x79    
   \              0x74 0x65    
   \   00000020   0x73 0x20          DC8 73H, 20H, 6EH, 6FH, 74H, 20H, 48H, 45H
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x48 0x45    
   \   00000028   0x58 0x20          DC8 58H, 20H, 56H, 61H, 6CH, 75H, 65H, 2EH
   \              0x56 0x61    
   \              0x6C 0x75    
   \              0x65 0x2E    
   \   00000030   0x0D 0x0A          DC8 0DH, 0AH, 0
   \              0x00         
   \   00000033   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_111:
   \   00000000   0x54 0x49          DC8 "TIS: GOOD CMD: %x.\015\012"
   \              0x53 0x3A    
   \              0x20 0x47    
   \              0x4F 0x4F    
   \              0x44 0x20    
   \              0x43 0x4D    
   \              0x44 0x3A    
   \              0x20 0x25    
   \              0x78 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_112:
   \   00000000   0x54 0x49          DC8 "TIS: GOOD CMD: %x."
   \              0x53 0x3A    
   \              0x20 0x47    
   \              0x4F 0x4F    
   \              0x44 0x20    
   \              0x43 0x4D    
   \              0x44 0x3A    
   \              0x20 0x25    
   \              0x78 0x2E    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \   00000000   0x25 0x78          DC8 "%x."
   \              0x2E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_114:
   \   00000000   0x54 0x49          DC8 "TIR SYNTAX ERROR: Not correct format.\015\012"
   \              0x52 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x4E 0x6F    
   \              0x74 0x20    
   \              0x63 0x6F    
   \              0x72 0x72    
   \              0x65 0x63    
   \              0x74 0x20    
   \              0x66 0x6F    
   \              0x72 0x6D    
   \              0x61 0x74    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_115:
   \   00000000   0x54 0x49          DC8 "TIR SYNTAX ERROR: Address not HEX Value.\015\012"
   \              0x52 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x41 0x64    
   \              0x64 0x72    
   \              0x65 0x73    
   \              0x73 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x48 0x45    
   \              0x58 0x20    
   \              0x56 0x61    
   \              0x6C 0x75    
   \              0x65 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_116:
   \   00000000   0x54 0x49          DC8 54H, 49H, 52H, 20H, 53H, 59H, 4EH, 54H
   \              0x52 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \   00000008   0x41 0x58          DC8 41H, 58H, 20H, 45H, 52H, 52H, 4FH, 52H
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \   00000010   0x3A 0x20          DC8 3AH, 20H, 4EH, 75H, 6DH, 62H, 65H, 72H
   \              0x4E 0x75    
   \              0x6D 0x62    
   \              0x65 0x72    
   \   00000018   0x20 0x6F          DC8 20H, 6FH, 66H, 20H, 42H, 79H, 74H, 65H
   \              0x66 0x20    
   \              0x42 0x79    
   \              0x74 0x65    
   \   00000020   0x73 0x20          DC8 73H, 20H, 6EH, 6FH, 74H, 20H, 48H, 45H
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x48 0x45    
   \   00000028   0x58 0x20          DC8 58H, 20H, 56H, 61H, 6CH, 75H, 65H, 2EH
   \              0x56 0x61    
   \              0x6C 0x75    
   \              0x65 0x2E    
   \   00000030   0x0D 0x0A          DC8 0DH, 0AH, 0
   \              0x00         
   \   00000033   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_117:
   \   00000000   0x54 0x49          DC8 54H, 49H, 52H, 20H, 53H, 59H, 4EH, 54H
   \              0x52 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \   00000008   0x41 0x58          DC8 41H, 58H, 20H, 45H, 52H, 52H, 4FH, 52H
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \   00000010   0x3A 0x20          DC8 3AH, 20H, 4EH, 75H, 6DH, 62H, 65H, 72H
   \              0x4E 0x75    
   \              0x6D 0x62    
   \              0x65 0x72    
   \   00000018   0x20 0x6F          DC8 20H, 6FH, 66H, 20H, 42H, 79H, 74H, 65H
   \              0x66 0x20    
   \              0x42 0x79    
   \              0x74 0x65    
   \   00000020   0x73 0x20          DC8 73H, 20H, 52H, 45H, 43H, 45H, 49H, 56H
   \              0x52 0x45    
   \              0x43 0x45    
   \              0x49 0x56    
   \   00000028   0x45 0x44          DC8 45H, 44H, 20H, 6EH, 6FH, 74H, 20H, 48H
   \              0x20 0x6E    
   \              0x6F 0x74    
   \              0x20 0x48    
   \   00000030   0x45 0x58          DC8 45H, 58H, 20H, 56H, 61H, 6CH, 75H, 65H
   \              0x20 0x56    
   \              0x61 0x6C    
   \              0x75 0x65    
   \   00000038   0x2E 0x0D          DC8 2EH, 0DH, 0AH, 0
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_118:
   \   00000000   0x54 0x49          DC8 "TIR: GOOD CMD: %x.\015\012"
   \              0x52 0x3A    
   \              0x20 0x47    
   \              0x4F 0x4F    
   \              0x44 0x20    
   \              0x43 0x4D    
   \              0x44 0x3A    
   \              0x20 0x25    
   \              0x78 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_119:
   \   00000000   0x54 0x49          DC8 "TIR SYNTAX ERROR: Data not HEX Value.\015\012"
   \              0x52 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x44 0x61    
   \              0x74 0x61    
   \              0x20 0x6E    
   \              0x6F 0x74    
   \              0x20 0x48    
   \              0x45 0x58    
   \              0x20 0x56    
   \              0x61 0x6C    
   \              0x75 0x65    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_120:
   \   00000000   0x54 0x49          DC8 "TIR: GOOD CMD: %x."
   \              0x52 0x3A    
   \              0x20 0x47    
   \              0x4F 0x4F    
   \              0x44 0x20    
   \              0x43 0x4D    
   \              0x44 0x3A    
   \              0x20 0x25    
   \              0x78 0x2E    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_121:
   \   00000000   0x20 0x20          DC8 "     DATA: "
   \              0x20 0x20    
   \              0x20 0x44    
   \              0x41 0x54    
   \              0x41 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_122:
   \   00000000   0x54 0x49          DC8 "TIQ SYNTAX ERROR: Not correct format.\015\012"
   \              0x51 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x4E 0x6F    
   \              0x74 0x20    
   \              0x63 0x6F    
   \              0x72 0x72    
   \              0x65 0x63    
   \              0x74 0x20    
   \              0x66 0x6F    
   \              0x72 0x6D    
   \              0x61 0x74    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_123:
   \   00000000   0x54 0x49          DC8 "TIQ SYNTAX ERROR: Address not HEX Value.\015\012"
   \              0x51 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x41 0x64    
   \              0x64 0x72    
   \              0x65 0x73    
   \              0x73 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x48 0x45    
   \              0x58 0x20    
   \              0x56 0x61    
   \              0x6C 0x75    
   \              0x65 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_124:
   \   00000000   0x54 0x49          DC8 54H, 49H, 51H, 20H, 53H, 59H, 4EH, 54H
   \              0x51 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \   00000008   0x41 0x58          DC8 41H, 58H, 20H, 45H, 52H, 52H, 4FH, 52H
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \   00000010   0x3A 0x20          DC8 3AH, 20H, 4EH, 75H, 6DH, 62H, 65H, 72H
   \              0x4E 0x75    
   \              0x6D 0x62    
   \              0x65 0x72    
   \   00000018   0x20 0x6F          DC8 20H, 6FH, 66H, 20H, 42H, 79H, 74H, 65H
   \              0x66 0x20    
   \              0x42 0x79    
   \              0x74 0x65    
   \   00000020   0x73 0x20          DC8 73H, 20H, 6EH, 6FH, 74H, 20H, 48H, 45H
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x48 0x45    
   \   00000028   0x58 0x20          DC8 58H, 20H, 56H, 61H, 6CH, 75H, 65H, 2EH
   \              0x56 0x61    
   \              0x6C 0x75    
   \              0x65 0x2E    
   \   00000030   0x0D 0x0A          DC8 0DH, 0AH, 0
   \              0x00         
   \   00000033   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_125:
   \   00000000   0x3C 0x53          DC8 3CH, 53H, 54H, 41H, 54H, 55H, 53H, 3EH
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \   00000008   0x25 0x73          DC8 25H, 73H, 2FH, 2FH, 25H, 73H, 2FH, 2FH
   \              0x2F 0x2F    
   \              0x25 0x73    
   \              0x2F 0x2F    
   \   00000010   0x25 0x73          DC8 25H, 73H, 2FH, 2FH, 25H, 73H, 2FH, 2FH
   \              0x2F 0x2F    
   \              0x25 0x73    
   \              0x2F 0x2F    
   \   00000018   0x25 0x73          DC8 25H, 73H, 2FH, 2FH, 25H, 73H, 2FH, 2FH
   \              0x2F 0x2F    
   \              0x25 0x73    
   \              0x2F 0x2F    
   \   00000020   0x25 0x73          DC8 25H, 73H, 2FH, 2FH, 25H, 73H, 2FH, 2FH
   \              0x2F 0x2F    
   \              0x25 0x73    
   \              0x2F 0x2F    
   \   00000028   0x25 0x73          DC8 25H, 73H, 2FH, 2FH, 25H, 73H, 2FH, 2FH
   \              0x2F 0x2F    
   \              0x25 0x73    
   \              0x2F 0x2F    
   \   00000030   0x25 0x73          DC8 25H, 73H, 2FH, 2FH, 25H, 73H, 3CH, 2FH
   \              0x2F 0x2F    
   \              0x25 0x73    
   \              0x3C 0x2F    
   \   00000038   0x53 0x54          DC8 53H, 54H, 41H, 54H, 55H, 53H, 3EH, 0
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_126:
   \   00000000   0x25 0x73          DC8 "%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\015\012"
   \              0x2C 0x25    
   \              0x73 0x2C    
   \              0x25 0x73    
   \              0x2C 0x25    
   \              0x73 0x2C    
   \              0x25 0x73    
   \              0x2C 0x25    
   \              0x73 0x2C    
   \              0x25 0x73    
   \              0x2C 0x25    
   \              0x73 0x2C    
   \              0x25 0x73    
   \              0x2C 0x25    
   \              0x73 0x2C    
   \              0x25 0x73    
   \              0x2C 0x25    
   \              0x73 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_127:
   \   00000000   0x43 0x4F          DC8 "COMPLETE"
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_128:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TC_HWERR_PRESSUE</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x5F 0x48    
   \              0x57 0x45    
   \              0x52 0x52    
   \              0x5F 0x50    
   \              0x52 0x45    
   \              0x53 0x53    
   \              0x55 0x45    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_129:
   \   00000000   0x50 0x72          DC8 "Pressure TASKING ERROR!"
   \              0x65 0x73    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x20 0x54    
   \              0x41 0x53    
   \              0x4B 0x49    
   \              0x4E 0x47    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x21 0x00    

   \                                 In section .rodata, align 4
   \                     ?_130:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TC_HWERR_HUMIDITY</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x5F 0x48    
   \              0x57 0x45    
   \              0x52 0x52    
   \              0x5F 0x48    
   \              0x55 0x4D    
   \              0x49 0x44    
   \              0x49 0x54    
   \              0x59 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_131:
   \   00000000   0x48 0x75          DC8 "Humidity TASKING ERROR!"
   \              0x6D 0x69    
   \              0x64 0x69    
   \              0x74 0x79    
   \              0x20 0x54    
   \              0x41 0x53    
   \              0x4B 0x49    
   \              0x4E 0x47    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x21 0x00    

   \                                 In section .rodata, align 4
   \                     ?_132:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TC_HWERR_TEMPERATURE</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x5F 0x48    
   \              0x57 0x45    
   \              0x52 0x52    
   \              0x5F 0x54    
   \              0x45 0x4D    
   \              0x50 0x45    
   \              0x52 0x41    
   \              0x54 0x55    
   \              0x52 0x45    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000002A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_133:
   \   00000000   0x41 0x4D          DC8 "AMBIENT TEMPERATURE TASKING ERROR!"
   \              0x42 0x49    
   \              0x45 0x4E    
   \              0x54 0x20    
   \              0x54 0x45    
   \              0x4D 0x50    
   \              0x45 0x52    
   \              0x41 0x54    
   \              0x55 0x52    
   \              0x45 0x20    
   \              0x54 0x41    
   \              0x53 0x4B    
   \              0x49 0x4E    
   \              0x47 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x21    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_134:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TC_HWERR_IRTEMP</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x5F 0x48    
   \              0x57 0x45    
   \              0x52 0x52    
   \              0x5F 0x49    
   \              0x52 0x54    
   \              0x45 0x4D    
   \              0x50 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_135:
   \   00000000   0x47 0x52          DC8 "GRID EYE/COOL EYE TASKING ERROR!"
   \              0x49 0x44    
   \              0x20 0x45    
   \              0x59 0x45    
   \              0x2F 0x43    
   \              0x4F 0x4F    
   \              0x4C 0x20    
   \              0x45 0x59    
   \              0x45 0x20    
   \              0x54 0x41    
   \              0x53 0x4B    
   \              0x49 0x4E    
   \              0x47 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x21    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_136:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TCS_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x53 0x5F    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_137:
   \   00000000   0x54 0x43          DC8 "TCS SYNTAX ERROR: Not correct format.\015\012"
   \              0x53 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x4E 0x6F    
   \              0x74 0x20    
   \              0x63 0x6F    
   \              0x72 0x72    
   \              0x65 0x63    
   \              0x74 0x20    
   \              0x66 0x6F    
   \              0x72 0x6D    
   \              0x61 0x74    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_138:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TCS_BADPARAM</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x53 0x5F    
   \              0x42 0x41    
   \              0x44 0x50    
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_139:
   \   00000000   0x54 0x43          DC8 "TCS SYNTAX ERROR: Bad Parameter.\015\012"
   \              0x53 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x42 0x61    
   \              0x64 0x20    
   \              0x50 0x61    
   \              0x72 0x61    
   \              0x6D 0x65    
   \              0x74 0x65    
   \              0x72 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_140:
   \   00000000   0x25 0x73          DC8 "%s %f %f"
   \              0x20 0x25    
   \              0x66 0x20    
   \              0x25 0x66    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_141:
   \   00000000   0x50 0x61          DC8 "Parms: %s, %f, %f.\015\012"
   \              0x72 0x6D    
   \              0x73 0x3A    
   \              0x20 0x25    
   \              0x73 0x2C    
   \              0x20 0x25    
   \              0x66 0x2C    
   \              0x20 0x25    
   \              0x66 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_142:
   \   00000000   0x30 0x30          DC8 "0002"
   \              0x30 0x32    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_143:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_SHNT_VLTG</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x53    
   \              0x48 0x4E    
   \              0x54 0x5F    
   \              0x56 0x4C    
   \              0x54 0x47    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_144:
   \   00000000   0x53 0x68          DC8 "Shnt_Vltg Set COMPLETE.\015\012"
   \              0x6E 0x74    
   \              0x5F 0x56    
   \              0x6C 0x74    
   \              0x67 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_145:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_SHNT_VLTG_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x53    
   \              0x48 0x4E    
   \              0x54 0x5F    
   \              0x56 0x4C    
   \              0x54 0x47    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_146:
   \   00000000   0x54 0x43          DC8 "TCS SET ERROR: FAILED.\015\012"
   \              0x53 0x20    
   \              0x53 0x45    
   \              0x54 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x46    
   \              0x41 0x49    
   \              0x4C 0x45    
   \              0x44 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_147:
   \   00000000   0x30 0x30          DC8 "0004"
   \              0x30 0x34    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_148:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_CURRENT</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x43    
   \              0x55 0x52    
   \              0x52 0x45    
   \              0x4E 0x54    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_149:
   \   00000000   0x43 0x75          DC8 "Current Set COMPLETE."
   \              0x72 0x72    
   \              0x65 0x6E    
   \              0x74 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_150:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_CURRENT_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x43    
   \              0x55 0x52    
   \              0x52 0x45    
   \              0x4E 0x54    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_151:
   \   00000000   0x30 0x30          DC8 "0006"
   \              0x30 0x36    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_152:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_POWER</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x50    
   \              0x4F 0x57    
   \              0x45 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_153:
   \   00000000   0x50 0x6F          DC8 "Power Set COMPLETE."
   \              0x77 0x65    
   \              0x72 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_154:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_POWER_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x50    
   \              0x4F 0x57    
   \              0x45 0x52    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_155:
   \   00000000   0x30 0x30          DC8 "0008"
   \              0x30 0x38    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_156:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_VOLTAGE</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x56    
   \              0x4F 0x4C    
   \              0x54 0x41    
   \              0x47 0x45    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_157:
   \   00000000   0x56 0x6F          DC8 "Voltage Set COMPLETE."
   \              0x6C 0x74    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_158:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_VOLTAGE_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x56    
   \              0x4F 0x4C    
   \              0x54 0x41    
   \              0x47 0x45    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_159:
   \   00000000   0x30 0x30          DC8 "000A"
   \              0x30 0x41    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_160:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_TEMPC</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x54    
   \              0x45 0x4D    
   \              0x50 0x43    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_161:
   \   00000000   0x54 0x65          DC8 "TempC Set COMPLETE."
   \              0x6D 0x70    
   \              0x43 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_162:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_TEMPC_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x54    
   \              0x45 0x4D    
   \              0x50 0x43    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_163:
   \   00000000   0x30 0x30          DC8 "000B"
   \              0x30 0x42    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_164:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_TEMPF</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x54    
   \              0x45 0x4D    
   \              0x50 0x46    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_165:
   \   00000000   0x54 0x65          DC8 "TempF Set COMPLETE."
   \              0x6D 0x70    
   \              0x46 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_166:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_TEMPF_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x54    
   \              0x45 0x4D    
   \              0x50 0x46    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_167:
   \   00000000   0x30 0x30          DC8 "0011"
   \              0x31 0x31    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_168:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_PRESSURE</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x50    
   \              0x52 0x45    
   \              0x53 0x53    
   \              0x55 0x52    
   \              0x45 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_169:
   \   00000000   0x50 0x72          DC8 "Pressure Set COMPLETE."
   \              0x65 0x73    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_170:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_PRESSURE_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x50    
   \              0x52 0x45    
   \              0x53 0x53    
   \              0x55 0x52    
   \              0x45 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_171:
   \   00000000   0x30 0x30          DC8 "0030"
   \              0x33 0x30    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_172:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_HUMIDITY</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x48    
   \              0x55 0x4D    
   \              0x49 0x44    
   \              0x49 0x54    
   \              0x59 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_173:
   \   00000000   0x48 0x75          DC8 "Humidity Set COMPLETE."
   \              0x6D 0x69    
   \              0x64 0x69    
   \              0x74 0x79    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_174:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_HUMIDITY_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x48    
   \              0x55 0x4D    
   \              0x49 0x44    
   \              0x49 0x54    
   \              0x59 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_175:
   \   00000000   0x30 0x30          DC8 "0032"
   \              0x33 0x32    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_176:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_HUM_TEMPC</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x48    
   \              0x55 0x4D    
   \              0x5F 0x54    
   \              0x45 0x4D    
   \              0x50 0x43    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_177:
   \   00000000   0x48 0x75          DC8 "Hum_TempC Set COMPLETE."
   \              0x6D 0x5F    
   \              0x54 0x65    
   \              0x6D 0x70    
   \              0x43 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_178:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_HUM_TEMPC_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x48    
   \              0x55 0x4D    
   \              0x5F 0x54    
   \              0x45 0x4D    
   \              0x50 0x43    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_179:
   \   00000000   0x30 0x30          DC8 "0033"
   \              0x33 0x33    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_180:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_HUM_TEMPF</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x48    
   \              0x55 0x4D    
   \              0x5F 0x54    
   \              0x45 0x4D    
   \              0x50 0x46    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_181:
   \   00000000   0x48 0x75          DC8 "Hum_TempF Set COMPLETE."
   \              0x6D 0x5F    
   \              0x54 0x65    
   \              0x6D 0x70    
   \              0x46 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_182:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_HUM_TEMPF_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x48    
   \              0x55 0x4D    
   \              0x5F 0x54    
   \              0x45 0x4D    
   \              0x50 0x46    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_183:
   \   00000000   0x30 0x30          DC8 "000D"
   \              0x30 0x44    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_184:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_RGB_RED</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x47 0x42    
   \              0x5F 0x52    
   \              0x45 0x44    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_185:
   \   00000000   0x52 0x47          DC8 "RGB_Red Set COMPLETE."
   \              0x42 0x5F    
   \              0x52 0x65    
   \              0x64 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_186:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_RGB_RED_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x47 0x42    
   \              0x5F 0x52    
   \              0x45 0x44    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_187:
   \   00000000   0x30 0x30          DC8 "000E"
   \              0x30 0x45    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_188:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_RGB_GREEN</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x47 0x42    
   \              0x5F 0x47    
   \              0x52 0x45    
   \              0x45 0x4E    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_189:
   \   00000000   0x52 0x47          DC8 "RGB_Green Set COMPLETE."
   \              0x42 0x5F    
   \              0x47 0x72    
   \              0x65 0x65    
   \              0x6E 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_190:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_RGB_GREEN_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x47 0x42    
   \              0x5F 0x47    
   \              0x52 0x45    
   \              0x45 0x4E    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_191:
   \   00000000   0x30 0x30          DC8 "000F"
   \              0x30 0x46    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_192:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_RGB_BLUE</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x47 0x42    
   \              0x5F 0x42    
   \              0x4C 0x55    
   \              0x45 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_193:
   \   00000000   0x52 0x47          DC8 "RGB_Blue Set COMPLETE."
   \              0x42 0x5F    
   \              0x42 0x6C    
   \              0x75 0x65    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_194:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_RGB_BLUE_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x47 0x42    
   \              0x5F 0x42    
   \              0x4C 0x55    
   \              0x45 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_195:
   \   00000000   0x30 0x30          DC8 "0017"
   \              0x31 0x37    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_196:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_THERM_C</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x54    
   \              0x48 0x45    
   \              0x52 0x4D    
   \              0x5F 0x43    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_197:
   \   00000000   0x54 0x68          DC8 "Therm_C Set COMPLETE."
   \              0x65 0x72    
   \              0x6D 0x5F    
   \              0x43 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_198:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_THERM_C_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x54    
   \              0x48 0x45    
   \              0x52 0x4D    
   \              0x5F 0x43    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_199:
   \   00000000   0x30 0x30          DC8 "0019"
   \              0x31 0x39    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_200:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_1C</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x31    
   \              0x43 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_201:
   \   00000000   0x52 0x6F          DC8 "RoadT_1C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x31 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_202:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_1C_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x31    
   \              0x43 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_203:
   \   00000000   0x30 0x30          DC8 "001B"
   \              0x31 0x42    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_204:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_2C</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x32    
   \              0x43 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_205:
   \   00000000   0x52 0x6F          DC8 "RoadT_2C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x32 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_206:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_2C_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x32    
   \              0x43 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_207:
   \   00000000   0x30 0x30          DC8 "001D"
   \              0x31 0x44    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_208:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_3C</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x33    
   \              0x43 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_209:
   \   00000000   0x52 0x6F          DC8 "RoadT_3C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x33 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_210:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_3C_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x33    
   \              0x43 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_211:
   \   00000000   0x30 0x30          DC8 "001F"
   \              0x31 0x46    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_212:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_4C</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x34    
   \              0x43 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_213:
   \   00000000   0x52 0x6F          DC8 "RoadT_4C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x34 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_214:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_4C_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x34    
   \              0x43 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_215:
   \   00000000   0x30 0x30          DC8 "0021"
   \              0x32 0x31    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_216:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_5C</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x35    
   \              0x43 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_217:
   \   00000000   0x52 0x6F          DC8 "RoadT_5C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x35 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_218:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_5C_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x35    
   \              0x43 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_219:
   \   00000000   0x30 0x30          DC8 "0023"
   \              0x32 0x33    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_220:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_6C</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x36    
   \              0x43 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_221:
   \   00000000   0x52 0x6F          DC8 "RoadT_6C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x36 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_222:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_6C_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x36    
   \              0x43 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_223:
   \   00000000   0x30 0x30          DC8 "0025"
   \              0x32 0x35    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_224:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_7C</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x37    
   \              0x43 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_225:
   \   00000000   0x52 0x6F          DC8 "RoadT_7C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x37 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_226:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_7C_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x37    
   \              0x43 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_227:
   \   00000000   0x30 0x30          DC8 "0027"
   \              0x32 0x37    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_228:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_8C</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x38    
   \              0x43 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_229:
   \   00000000   0x52 0x6F          DC8 "RoadT_8C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x38 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_230:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_8C_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x38    
   \              0x43 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_231:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TCS_BADUUID</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x53 0x5F    
   \              0x42 0x41    
   \              0x44 0x55    
   \              0x55 0x49    
   \              0x44 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_232:
   \   00000000   0x54 0x43          DC8 "TCS SYNTAX ERROR: Bad UUID.\015\012"
   \              0x53 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x42 0x61    
   \              0x64 0x20    
   \              0x55 0x55    
   \              0x49 0x44    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_233:
   \   00000000   0x54 0x43          DC8 "TCS SYNTAX ERROR: Wrong Number of Parameters.\015\012"
   \              0x53 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x57 0x72    
   \              0x6F 0x6E    
   \              0x67 0x20    
   \              0x4E 0x75    
   \              0x6D 0x62    
   \              0x65 0x72    
   \              0x20 0x6F    
   \              0x66 0x20    
   \              0x50 0x61    
   \              0x72 0x61    
   \              0x6D 0x65    
   \              0x74 0x65    
   \              0x72 0x73    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_234:
   \   00000000   0x3C 0x53          DC8 "<STATUS>TCR:%s\\"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x54 0x43    
   \              0x52 0x3A    
   \              0x25 0x73    
   \              0x5C 0x00    

   \                                 In section .rodata, align 4
   \                     ?_235:
   \   00000000   0x43 0x41          DC8 "CALIBRATION DATA\015\012Date: %s\015\012"
   \              0x4C 0x49    
   \              0x42 0x52    
   \              0x41 0x54    
   \              0x49 0x4F    
   \              0x4E 0x20    
   \              0x44 0x41    
   \              0x54 0x41    
   \              0x0D 0x0A    
   \              0x44 0x61    
   \              0x74 0x65    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_236:
   \   00000000   0x4E 0x61          DC8 "Name\t\t        UUID\t\tSlope\t\tOffset\015\012"
   \              0x6D 0x65    
   \              0x09 0x09    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x55 0x55    
   \              0x49 0x44    
   \              0x09 0x09    
   \              0x53 0x6C    
   \              0x6F 0x70    
   \              0x65 0x09    
   \              0x09 0x4F    
   \              0x66 0x66    
   \              0x73 0x65    
   \              0x74 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_237:
   \   00000000   0x25 0x73          DC8 "%s:0002//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x30    
   \              0x32 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_238:
   \   00000000   0x25 0x73          DC8 "%s\t0002\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x30    
   \              0x32 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_239:
   \   00000000   0x25 0x73          DC8 "%s:0004//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x30    
   \              0x34 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_240:
   \   00000000   0x25 0x73          DC8 "%s\t        0004\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x30    
   \              0x30 0x30    
   \              0x34 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_241:
   \   00000000   0x25 0x73          DC8 "%s:0006//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x30    
   \              0x36 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_242:
   \   00000000   0x25 0x73          DC8 "%s\t0006\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x30    
   \              0x36 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_243:
   \   00000000   0x25 0x73          DC8 "%s:0008//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x30    
   \              0x38 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_244:
   \   00000000   0x25 0x73          DC8 "%s\t        0008\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x30    
   \              0x30 0x30    
   \              0x38 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_245:
   \   00000000   0x25 0x73          DC8 "%s:000A//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x30    
   \              0x41 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_246:
   \   00000000   0x25 0x73          DC8 "%s\t000A\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x30    
   \              0x41 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_247:
   \   00000000   0x25 0x73          DC8 "%s:000B//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x30    
   \              0x42 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_248:
   \   00000000   0x25 0x73          DC8 "%s\t000B\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x30    
   \              0x42 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_249:
   \   00000000   0x25 0x73          DC8 "%s:0011//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x31    
   \              0x31 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_250:
   \   00000000   0x25 0x73          DC8 "%s\t0011\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x31    
   \              0x31 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_251:
   \   00000000   0x25 0x73          DC8 "%s:0030//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x33    
   \              0x30 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_252:
   \   00000000   0x25 0x73          DC8 "%s\t0030\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x33    
   \              0x30 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_253:
   \   00000000   0x25 0x73          DC8 "%s:0032//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x33    
   \              0x32 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_254:
   \   00000000   0x25 0x73          DC8 "%s\t0032\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x33    
   \              0x32 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_255:
   \   00000000   0x25 0x73          DC8 "%s:0033//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x33    
   \              0x33 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_256:
   \   00000000   0x25 0x73          DC8 "%s\t0033\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x33    
   \              0x33 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_257:
   \   00000000   0x25 0x73          DC8 "%s:000D//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x30    
   \              0x44 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_258:
   \   00000000   0x25 0x73          DC8 "%s\t        000D\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x30    
   \              0x30 0x30    
   \              0x44 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_259:
   \   00000000   0x25 0x73          DC8 "%s:000E//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x30    
   \              0x45 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_260:
   \   00000000   0x25 0x73          DC8 "%s\t000E\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x30    
   \              0x45 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_261:
   \   00000000   0x25 0x73          DC8 "%s:000F//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x30    
   \              0x46 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_262:
   \   00000000   0x25 0x73          DC8 "%s\t000F\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x30    
   \              0x46 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_263:
   \   00000000   0x25 0x73          DC8 "%s:0017//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x31    
   \              0x37 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_264:
   \   00000000   0x25 0x73          DC8 "%s\t        0017\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x30    
   \              0x30 0x31    
   \              0x37 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_265:
   \   00000000   0x25 0x73          DC8 "%s:0019//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x31    
   \              0x39 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_266:
   \   00000000   0x25 0x73          DC8 "%s\t0019\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x31    
   \              0x39 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_267:
   \   00000000   0x25 0x73          DC8 "%s:001B//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x31    
   \              0x42 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_268:
   \   00000000   0x25 0x73          DC8 "%s\t001B\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x31    
   \              0x42 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_269:
   \   00000000   0x25 0x73          DC8 "%s:001D//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x31    
   \              0x44 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_270:
   \   00000000   0x25 0x73          DC8 "%s\t001D\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x31    
   \              0x44 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_271:
   \   00000000   0x25 0x73          DC8 "%s:001F//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x31    
   \              0x46 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_272:
   \   00000000   0x25 0x73          DC8 "%s\t001F\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x31    
   \              0x46 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_273:
   \   00000000   0x25 0x73          DC8 "%s:0021//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x32    
   \              0x31 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_274:
   \   00000000   0x25 0x73          DC8 "%s\t0021\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x32    
   \              0x31 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_275:
   \   00000000   0x25 0x73          DC8 "%s:0023//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x32    
   \              0x33 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_276:
   \   00000000   0x25 0x73          DC8 "%s\t0023\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x32    
   \              0x33 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_277:
   \   00000000   0x25 0x73          DC8 "%s:0025//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x32    
   \              0x35 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_278:
   \   00000000   0x25 0x73          DC8 "%s\t0025\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x32    
   \              0x35 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_279:
   \   00000000   0x25 0x73          DC8 "%s:0027//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x32    
   \              0x37 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_280:
   \   00000000   0x25 0x73          DC8 "%s\t0027\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x32    
   \              0x37 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_281:
   \   00000000   0x0D 0x0A          DC8 "\015\012     COMPLETE.\015\012"
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_282:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TCT_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x54 0x5F    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_283:
   \   00000000   0x54 0x43          DC8 "TCT SYNTAX ERROR: Not correct format.\015\012"
   \              0x54 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x4E 0x6F    
   \              0x74 0x20    
   \              0x63 0x6F    
   \              0x72 0x72    
   \              0x65 0x63    
   \              0x74 0x20    
   \              0x66 0x6F    
   \              0x72 0x6D    
   \              0x61 0x74    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_284:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TCT_BADPARAM</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x54 0x5F    
   \              0x42 0x41    
   \              0x44 0x50    
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_285:
   \   00000000   0x54 0x43          DC8 "TCT SYNTAX ERROR: Bad Parameter.\015\012"
   \              0x54 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x42 0x61    
   \              0x64 0x20    
   \              0x50 0x61    
   \              0x72 0x61    
   \              0x6D 0x65    
   \              0x74 0x65    
   \              0x72 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_286:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TCT_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x54 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_287:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCT_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x54    
   \              0x5F 0x41    
   \              0x43 0x4B    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_288:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TCI_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x49 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_289:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCI_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x49    
   \              0x5F 0x41    
   \              0x43 0x4B    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_290:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_DRIVER:%04x</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x44    
   \              0x52 0x49    
   \              0x56 0x45    
   \              0x52 0x3A    
   \              0x25 0x30    
   \              0x34 0x78    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_291:
   \   00000000   0x44 0x72          DC8 "Driver Status: %04x\015\012"
   \              0x69 0x76    
   \              0x65 0x72    
   \              0x20 0x53    
   \              0x74 0x61    
   \              0x74 0x75    
   \              0x73 0x3A    
   \              0x20 0x25    
   \              0x30 0x34    
   \              0x78 0x0D    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_292:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_RESET_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x52    
   \              0x45 0x53    
   \              0x45 0x54    
   \              0x5F 0x41    
   \              0x43 0x4B    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_293:
   \   00000000   0x52 0x45          DC8 "RESET CALLED BUT NO RESPONSE!!\015\012"
   \              0x53 0x45    
   \              0x54 0x20    
   \              0x43 0x41    
   \              0x4C 0x4C    
   \              0x45 0x44    
   \              0x20 0x42    
   \              0x55 0x54    
   \              0x20 0x4E    
   \              0x4F 0x20    
   \              0x52 0x45    
   \              0x53 0x50    
   \              0x4F 0x4E    
   \              0x53 0x45    
   \              0x21 0x21    
   \              0x0D 0x0A    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_294:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TK_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x5F 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_295:
   \   00000000   0x54 0x4B          DC8 "TK SYNTAX ERROR: Not correct format.\015\012"
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x63    
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_296:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKSR_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x53 0x52    
   \              0x5F 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_297:
   \   00000000   0x54 0x4B          DC8 "TKSR SYNTAX ERROR: Not correct format.\015\012"
   \              0x53 0x52    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x63    
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_298:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKSR_BADPARAM</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x53 0x52    
   \              0x5F 0x42    
   \              0x41 0x44    
   \              0x50 0x41    
   \              0x52 0x41    
   \              0x4D 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_299:
   \   00000000   0x54 0x4B          DC8 "TKSR SYNTAX ERROR: Bad Parameter.\015\012"
   \              0x53 0x52    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x61 0x64    
   \              0x20 0x50    
   \              0x61 0x72    
   \              0x61 0x6D    
   \              0x65 0x74    
   \              0x65 0x72    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_300:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TKSR_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x4B 0x53    
   \              0x52 0x5F    
   \              0x41 0x43    
   \              0x4B 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_301:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKSS_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x53 0x53    
   \              0x5F 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_302:
   \   00000000   0x54 0x4B          DC8 "TKSS SYNTAX ERROR: Not correct format.\015\012"
   \              0x53 0x53    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x63    
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_303:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKSS_BADPARAM</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x53 0x53    
   \              0x5F 0x42    
   \              0x41 0x44    
   \              0x50 0x41    
   \              0x52 0x41    
   \              0x4D 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_304:
   \   00000000   0x54 0x4B          DC8 "TKSS SYNTAX ERROR: Bad Parameter.\015\012"
   \              0x53 0x53    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x61 0x64    
   \              0x20 0x50    
   \              0x61 0x72    
   \              0x61 0x6D    
   \              0x65 0x74    
   \              0x65 0x72    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_305:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TKSS_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x4B 0x53    
   \              0x53 0x5F    
   \              0x41 0x43    
   \              0x4B 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_306:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKST_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x53 0x54    
   \              0x5F 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_307:
   \   00000000   0x54 0x4B          DC8 "TKST SYNTAX ERROR: Not correct format.\015\012"
   \              0x53 0x54    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x63    
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_308:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKST_BADPARAM</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x53 0x54    
   \              0x5F 0x42    
   \              0x41 0x44    
   \              0x50 0x41    
   \              0x52 0x41    
   \              0x4D 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_309:
   \   00000000   0x54 0x4B          DC8 "TKST SYNTAX ERROR: Bad Parameter.\015\012"
   \              0x53 0x54    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x61 0x64    
   \              0x20 0x50    
   \              0x61 0x72    
   \              0x61 0x6D    
   \              0x65 0x74    
   \              0x65 0x72    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_310:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TKST_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x4B 0x53    
   \              0x54 0x5F    
   \              0x41 0x43    
   \              0x4B 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_311:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKSB_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x53 0x42    
   \              0x5F 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_312:
   \   00000000   0x54 0x4B          DC8 "TKSB SYNTAX ERROR: Not correct format.\015\012"
   \              0x53 0x42    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x63    
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_313:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKSB_BADPARAM</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x53 0x42    
   \              0x5F 0x42    
   \              0x41 0x44    
   \              0x50 0x41    
   \              0x52 0x41    
   \              0x4D 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_314:
   \   00000000   0x54 0x4B          DC8 "TKSB SYNTAX ERROR: Bad Parameter.\015\012"
   \              0x53 0x42    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x61 0x64    
   \              0x20 0x50    
   \              0x61 0x72    
   \              0x61 0x6D    
   \              0x65 0x74    
   \              0x65 0x72    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_315:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TKSB_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x4B 0x53    
   \              0x42 0x5F    
   \              0x41 0x43    
   \              0x4B 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_316:
   \   00000000   0x54 0x4B          DC8 "TKS ERROR: Not a legal command.\015\012"
   \              0x53 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x61    
   \              0x20 0x6C    
   \              0x65 0x67    
   \              0x61 0x6C    
   \              0x20 0x63    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_317:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TKRR:%3.1f</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x4B 0x52    
   \              0x52 0x3A    
   \              0x25 0x33    
   \              0x2E 0x31    
   \              0x66 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_318:
   \   00000000   0x52 0x64          DC8 "RdSnd Sample Rate:  %3.1f Seconds.\015\012"
   \              0x53 0x6E    
   \              0x64 0x20    
   \              0x53 0x61    
   \              0x6D 0x70    
   \              0x6C 0x65    
   \              0x20 0x52    
   \              0x61 0x74    
   \              0x65 0x3A    
   \              0x20 0x20    
   \              0x25 0x33    
   \              0x2E 0x31    
   \              0x66 0x20    
   \              0x53 0x65    
   \              0x63 0x6F    
   \              0x6E 0x64    
   \              0x73 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_319:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TKRS:%3.1f</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x4B 0x52    
   \              0x53 0x3A    
   \              0x25 0x33    
   \              0x2E 0x31    
   \              0x66 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_320:
   \   00000000   0x53 0x65          DC8 "Sensor Sample Rate: %3.1f Seconds.\015\012\015\012> "
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \              0x61 0x6D    
   \              0x70 0x6C    
   \              0x65 0x20    
   \              0x52 0x61    
   \              0x74 0x65    
   \              0x3A 0x20    
   \              0x25 0x33    
   \              0x2E 0x31    
   \              0x66 0x20    
   \              0x53 0x65    
   \              0x63 0x6F    
   \              0x6E 0x64    
   \              0x73 0x2E    
   \              0x0D 0x0A    
   \              0x0D 0x0A    
   \              0x3E 0x20    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_321:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TKRT:%d</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x4B 0x52    
   \              0x54 0x3A    
   \              0x25 0x64    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_322:
   \   00000000   0x54 0x41          DC8 "TACK Limit: %d.\015\012\015\012> "
   \              0x43 0x4B    
   \              0x20 0x4C    
   \              0x69 0x6D    
   \              0x69 0x74    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x0D    
   \              0x0A 0x3E    
   \              0x20 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_323:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TKRB:%d</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x4B 0x52    
   \              0x42 0x3A    
   \              0x25 0x64    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_324:
   \   00000000   0x42 0x6F          DC8 "Boot Delay: %d Seconds.\015\012\015\012> "
   \              0x6F 0x74    
   \              0x20 0x44    
   \              0x65 0x6C    
   \              0x61 0x79    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x20 0x53    
   \              0x65 0x63    
   \              0x6F 0x6E    
   \              0x64 0x73    
   \              0x2E 0x0D    
   \              0x0A 0x0D    
   \              0x0A 0x3E    
   \              0x20 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_325:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKR_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x52 0x5F    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_326:
   \   00000000   0x54 0x4B          DC8 "TKR ERROR: Not a legal command.\015\012"
   \              0x52 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x61    
   \              0x20 0x6C    
   \              0x65 0x67    
   \              0x61 0x6C    
   \              0x20 0x63    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_327:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TU_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x55    
   \              0x5F 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_328:
   \   00000000   0x54 0x55          DC8 "TU SYNTAX ERROR: Not correct format.\015\012"
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x63    
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_329:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TUE_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x55 0x45    
   \              0x5F 0x41    
   \              0x43 0x4B    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_330:
   \   00000000   0x55 0x6E          DC8 "Units XML State CHANGED: ENABLED\015\012\015\012> "
   \              0x69 0x74    
   \              0x73 0x20    
   \              0x58 0x4D    
   \              0x4C 0x20    
   \              0x53 0x74    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x43 0x48    
   \              0x41 0x4E    
   \              0x47 0x45    
   \              0x44 0x3A    
   \              0x20 0x45    
   \              0x4E 0x41    
   \              0x42 0x4C    
   \              0x45 0x44    
   \              0x0D 0x0A    
   \              0x0D 0x0A    
   \              0x3E 0x20    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_331:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TUD_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x55 0x44    
   \              0x5F 0x41    
   \              0x43 0x4B    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_332:
   \   00000000   0x55 0x6E          DC8 "Units XML State CHANGED: DISABLED\015\012\015\012> "
   \              0x69 0x74    
   \              0x73 0x20    
   \              0x58 0x4D    
   \              0x4C 0x20    
   \              0x53 0x74    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x43 0x48    
   \              0x41 0x4E    
   \              0x47 0x45    
   \              0x44 0x3A    
   \              0x20 0x44    
   \              0x49 0x53    
   \              0x41 0x42    
   \              0x4C 0x45    
   \              0x44 0x0D    
   \              0x0A 0x0D    
   \              0x0A 0x3E    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_333:
   \   00000000   0x54 0x55          DC8 "TU SYNTAX ERROR: Not a legal command.\015\012"
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x61    
   \              0x20 0x6C    
   \              0x65 0x67    
   \              0x61 0x6C    
   \              0x20 0x63    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_334:
   \   00000000   0x42 0x47          DC8 "BGM111 MONITOR MODE.\015\012\015\012"
   \              0x4D 0x31    
   \              0x31 0x31    
   \              0x20 0x4D    
   \              0x4F 0x4E    
   \              0x49 0x54    
   \              0x4F 0x52    
   \              0x20 0x4D    
   \              0x4F 0x44    
   \              0x45 0x2E    
   \              0x0D 0x0A    
   \              0x0D 0x0A    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_335:
   \   00000000   0x55 0x73          DC8 "Use <ESC> to exit mode.\015\012\015\012"
   \              0x65 0x20    
   \              0x3C 0x45    
   \              0x53 0x43    
   \              0x3E 0x20    
   \              0x74 0x6F    
   \              0x20 0x65    
   \              0x78 0x69    
   \              0x74 0x20    
   \              0x6D 0x6F    
   \              0x64 0x65    
   \              0x2E 0x0D    
   \              0x0A 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_336:
   \   00000000   0x3C 0x53          DC8 "<STATUS>TF_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x54 0x46    
   \              0x5F 0x41    
   \              0x43 0x4B    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_337:
   \   00000000   0x46 0x6C          DC8 "Flash Frame Variables Reset to Factory Values.\015\012"
   \              0x61 0x73    
   \              0x68 0x20    
   \              0x46 0x72    
   \              0x61 0x6D    
   \              0x65 0x20    
   \              0x56 0x61    
   \              0x72 0x69    
   \              0x61 0x62    
   \              0x6C 0x65    
   \              0x73 0x20    
   \              0x52 0x65    
   \              0x73 0x65    
   \              0x74 0x20    
   \              0x74 0x6F    
   \              0x20 0x46    
   \              0x61 0x63    
   \              0x74 0x6F    
   \              0x72 0x79    
   \              0x20 0x56    
   \              0x61 0x6C    
   \              0x75 0x65    
   \              0x73 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000031   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_338:
   \   00000000   0x3C 0x53          DC8 "<STATUS>TL_ERROR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x54 0x4C    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_339:
   \   00000000   0x43 0x6F          DC8 "Code Locked for Programming!\015\012\015\012"
   \              0x64 0x65    
   \              0x20 0x4C    
   \              0x6F 0x63    
   \              0x6B 0x65    
   \              0x64 0x20    
   \              0x66 0x6F    
   \              0x72 0x20    
   \              0x50 0x72    
   \              0x6F 0x67    
   \              0x72 0x61    
   \              0x6D 0x6D    
   \              0x69 0x6E    
   \              0x67 0x21    
   \              0x0D 0x0A    
   \              0x0D 0x0A    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_340:
   \   00000000   0x20 0x20          DC8 "   HARD RESET NEEDED TO EXIT MODE\015\012"
   \              0x20 0x48    
   \              0x41 0x52    
   \              0x44 0x20    
   \              0x52 0x45    
   \              0x53 0x45    
   \              0x54 0x20    
   \              0x4E 0x45    
   \              0x45 0x44    
   \              0x45 0x44    
   \              0x20 0x54    
   \              0x4F 0x20    
   \              0x45 0x58    
   \              0x49 0x54    
   \              0x20 0x4D    
   \              0x4F 0x44    
   \              0x45 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_341:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: BERR: Bus Error reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x45 0x52    
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x75 0x73    
   \              0x20 0x45    
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x20 0x72    
   \              0x65 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_342:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: ARLO: Arbitration lost reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x41    
   \              0x52 0x4C    
   \              0x4F 0x3A    
   \              0x20 0x41    
   \              0x72 0x62    
   \              0x69 0x74    
   \              0x72 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x6C    
   \              0x6F 0x73    
   \              0x74 0x20    
   \              0x72 0x65    
   \              0x70 0x6F    
   \              0x72 0x74    
   \              0x65 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   0000002E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_343:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: AF: Acknowledge failure reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x41    
   \              0x46 0x3A    
   \              0x20 0x41    
   \              0x63 0x6B    
   \              0x6E 0x6F    
   \              0x77 0x6C    
   \              0x65 0x64    
   \              0x67 0x65    
   \              0x20 0x66    
   \              0x61 0x69    
   \              0x6C 0x75    
   \              0x72 0x65    
   \              0x20 0x72    
   \              0x65 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_344:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: OVR: Overrun/Underrun reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4F    
   \              0x56 0x52    
   \              0x3A 0x20    
   \              0x4F 0x76    
   \              0x65 0x72    
   \              0x72 0x75    
   \              0x6E 0x2F    
   \              0x55 0x6E    
   \              0x64 0x65    
   \              0x72 0x72    
   \              0x75 0x6E    
   \              0x20 0x72    
   \              0x65 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_345:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: DMA: DMA Error reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x44    
   \              0x4D 0x41    
   \              0x3A 0x20    
   \              0x44 0x4D    
   \              0x41 0x20    
   \              0x45 0x72    
   \              0x72 0x6F    
   \              0x72 0x20    
   \              0x72 0x65    
   \              0x70 0x6F    
   \              0x72 0x74    
   \              0x65 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_346:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: TIMEOUT: Timeout Error reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x54    
   \              0x49 0x4D    
   \              0x45 0x4F    
   \              0x55 0x54    
   \              0x3A 0x20    
   \              0x54 0x69    
   \              0x6D 0x65    
   \              0x6F 0x75    
   \              0x74 0x20    
   \              0x45 0x72    
   \              0x72 0x6F    
   \              0x72 0x20    
   \              0x72 0x65    
   \              0x70 0x6F    
   \              0x72 0x74    
   \              0x65 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   0000002E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_347:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: Unknown Error reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x55    
   \              0x6E 0x6B    
   \              0x6E 0x6F    
   \              0x77 0x6E    
   \              0x20 0x45    
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x20 0x72    
   \              0x65 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_348:
   \   00000000   0x49 0x32          DC8 "I2C BUSY: I2C reported BUSY error.\015\012"
   \              0x43 0x20    
   \              0x42 0x55    
   \              0x53 0x59    
   \              0x3A 0x20    
   \              0x49 0x32    
   \              0x43 0x20    
   \              0x72 0x65    
   \              0x70 0x6F    
   \              0x72 0x74    
   \              0x65 0x64    
   \              0x20 0x42    
   \              0x55 0x53    
   \              0x59 0x20    
   \              0x65 0x72    
   \              0x72 0x6F    
   \              0x72 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_349:
   \   00000000   0x49 0x32          DC8 "I2C TIMEOUT: I2C reported TIMEOUT.\015\012"
   \              0x43 0x20    
   \              0x54 0x49    
   \              0x4D 0x45    
   \              0x4F 0x55    
   \              0x54 0x3A    
   \              0x20 0x49    
   \              0x32 0x43    
   \              0x20 0x72    
   \              0x65 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x20    
   \              0x54 0x49    
   \              0x4D 0x45    
   \              0x4F 0x55    
   \              0x54 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_350:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: I2C reported unnown error.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x49    
   \              0x32 0x43    
   \              0x20 0x72    
   \              0x65 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x20    
   \              0x75 0x6E    
   \              0x6E 0x6F    
   \              0x77 0x6E    
   \              0x20 0x65    
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_351:
   \   00000000   0x0D 0x0A          DC8 "\015\012\015\012> "
   \              0x0D 0x0A    
   \              0x3E 0x20    
   \              0x00         
   \   00000007   0x00               DC8 0
   4434          
   4435          /*void sleep(void) {
   4436          //    TimMasterHandle.Instance = TIM5;
   4437           
   4438              // Disable HAL tick interrupt
   4439          //    __HAL_TIM_DISABLE_IT(&TimMasterHandle, TIM_IT_CC2);
   4440           
   4441              // Request to enter SLEEP mode
   4442              HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
   4443           
   4444              // Enable HAL tick interrupt
   4445          //    __HAL_TIM_ENABLE_IT(&TimMasterHandle, TIM_IT_CC2);
   4446          }*/
   4447           
   4448          /*void deepsleep(void) {
   4449              // Request to enter STOP mode with regulator in low power mode
   4450              HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
   4451           
   4452              // After wake-up from STOP reconfigure the PLL
   4453              //SetSysClock();
   4454              SystemClock_Config();
   4455          }*/
   4456          
   4457          /************************ (C) COPYRIGHT WeatherCloud *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
    1152   RoadBrd_ParseString
      1152   -> BGM111_Transmit
      1152   -> Get_DriverStates
      1152   -> Get_DriverStatus
      1152   -> HAL_Delay
      1152   -> HAL_NVIC_SystemReset
      1152   -> MX_I2C1_Reset
      1152   -> RdBrd_CAL_GetStr
      1152   -> RoadBrdSnd_ClrBffrs
      1152   -> RoadBrdSnd_DumpBin0
      1152   -> RoadBrdSnd_DumpBin16
      1152   -> RoadBrdSnd_DumpBin32
      1152   -> RoadBrdSnd_DumpBin48
      1152   -> RoadBrdSnd_ProcessSound
      1152   -> RoadBrdSnd_getSaveBffr
      1152   -> RoadBrd_Baro_ReadPressure
      1152   -> RoadBrd_Baro_ReadPressure_Scaled
      1152   -> RoadBrd_Baro_ReadTemp
      1152   -> RoadBrd_CAL_GetOffset
      1152   -> RoadBrd_CAL_GetSlope
      1152   -> RoadBrd_CAL_GetTimeString
      1152   -> RoadBrd_CAL_InitializeFrmFlash
      1152   -> RoadBrd_CAL_Set_CalItem
      1152   -> RoadBrd_CAL_Set_TimeString
      1152   -> RoadBrd_CoolEye_ReadValues
      1152   -> RoadBrd_CoolEye_ReadValues_Scaled
      1152   -> RoadBrd_Get_BootDelay
      1152   -> RoadBrd_Get_RdSndTickCnt
      1152   -> RoadBrd_Get_SnsrTickCnt
      1152   -> RoadBrd_Get_TackLimit
      1152   -> RoadBrd_GridEyeInit
      1152   -> RoadBrd_GridEyeReset
      1152   -> RoadBrd_GridEye_ReadValues
      1152   -> RoadBrd_GridEye_ReadValues_Scaled
      1152   -> RoadBrd_HumidityInit
      1152   -> RoadBrd_Humidity_ReadHumidity
      1152   -> RoadBrd_Humidity_ReadHumidity_Scaled
      1152   -> RoadBrd_Humidity_ReadTemperature
      1152   -> RoadBrd_I2C_GetError
      1152   -> RoadBrd_I2C_Master_Receive
      1152   -> RoadBrd_I2C_Master_Transmit
      1152   -> RoadBrd_Init_Barometer
      1152   -> RoadBrd_Init_VMonitor
      1152   -> RoadBrd_RGBFullInit
      1152   -> RoadBrd_RGBInit
      1152   -> RoadBrd_RGBReadID
      1152   -> RoadBrd_RGBReadStatus
      1152   -> RoadBrd_RGBReadValues
      1152   -> RoadBrd_RGBReset
      1152   -> RoadBrd_ReadTemp
      1152   -> RoadBrd_ReadTemp_Scaled
      1152   -> RoadBrd_Set_BootDelay
      1152   -> RoadBrd_Set_RdSndTickCnt
      1152   -> RoadBrd_Set_SnsrTickCnt
      1152   -> RoadBrd_Set_TackLimit
      1152   -> RoadBrd_Set_UnitsFlag
      1152   -> RoadBrd_TestandRead_Barometer
      1152   -> RoadBrd_UART_Transmit
      1152   -> RoadBrd_VMonitor_RdCurrent
      1152   -> RoadBrd_VMonitor_RdCurrent_Scaled
      1152   -> RoadBrd_VMonitor_RdPower
      1152   -> RoadBrd_VMonitor_RdPower_Scaled
      1152   -> RoadBrd_VMonitor_RdShntVltg
      1152   -> RoadBrd_VMonitor_RdShntVltg_Scaled
      1152   -> RoadBrd_VMonitor_RdVoltage
      1152   -> RoadBrd_VMonitor_RdVoltage_Scaled
      1152   -> RoadBrd_WWDG_InitializeFrmFlash
      1152   -> RoadBrd_WaitForState
      1152   -> RoadBrd_gpio_Off
      1152   -> RoadBrd_gpio_On
      1152   -> __aeabi_f2d
      1152   -> __aeabi_fdiv
      1152   -> __aeabi_ui2f
      1152   -> atoi
      1152   -> hatoi
      1152   -> isHexNum
      1152   -> isdigit
      1152   -> sprintf
      1152   -> sscanf
      1152   -> strcat
      1152   -> strcpy
      1152   -> strlen
      1152   -> strncmp
       0   RoadBrd_ParserInit
       8   RoadBrd_ParserTsk
         8   -> strcpy
         8   -> strlen
       8   RoadBrd_ProcessParserTsk
         8   -> RoadBrd_ParseString
       0   Tst_Bypass
      24   hatoi
        24   -> strlen
      24   isHexNum
        24   -> strlen


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_10
       4  ??DataTable4_11
       4  ??DataTable4_12
       4  ??DataTable4_13
       4  ??DataTable4_14
       4  ??DataTable4_15
       4  ??DataTable4_16
       4  ??DataTable4_17
       4  ??DataTable4_18
       4  ??DataTable4_19
       4  ??DataTable4_2
       4  ??DataTable4_20
       4  ??DataTable4_21
       4  ??DataTable4_22
       4  ??DataTable4_23
       4  ??DataTable4_24
       4  ??DataTable4_25
       4  ??DataTable4_26
       4  ??DataTable4_27
       4  ??DataTable4_28
       4  ??DataTable4_29
       4  ??DataTable4_3
       4  ??DataTable4_30
       4  ??DataTable4_31
       4  ??DataTable4_32
       4  ??DataTable4_33
       4  ??DataTable4_34
       4  ??DataTable4_35
       4  ??DataTable4_36
       4  ??DataTable4_37
       4  ??DataTable4_38
       4  ??DataTable4_39
       4  ??DataTable4_4
       4  ??DataTable4_40
       4  ??DataTable4_41
       4  ??DataTable4_42
       4  ??DataTable4_43
       4  ??DataTable4_44
       4  ??DataTable4_45
       4  ??DataTable4_46
       4  ??DataTable4_47
       4  ??DataTable4_48
       4  ??DataTable4_49
       4  ??DataTable4_5
       4  ??DataTable4_50
       4  ??DataTable4_51
       4  ??DataTable4_52
       4  ??DataTable4_53
       4  ??DataTable4_54
       4  ??DataTable4_55
       4  ??DataTable4_56
       4  ??DataTable4_57
       4  ??DataTable4_58
       4  ??DataTable4_59
       4  ??DataTable4_6
       4  ??DataTable4_60
       4  ??DataTable4_61
       4  ??DataTable4_62
       4  ??DataTable4_63
       4  ??DataTable4_64
       4  ??DataTable4_65
       4  ??DataTable4_66
       4  ??DataTable4_67
       4  ??DataTable4_68
       4  ??DataTable4_69
       4  ??DataTable4_7
       4  ??DataTable4_70
       4  ??DataTable4_71
       4  ??DataTable4_72
       4  ??DataTable4_73
       4  ??DataTable4_74
       4  ??DataTable4_75
       4  ??DataTable4_8
       4  ??DataTable4_9
      56  ?_0
      36  ?_1
      40  ?_10
       8  ?_100
      52  ?_101
      36  ?_102
      32  ?_103
      32  ?_104
      44  ?_105
      32  ?_106
      40  ?_107
      40  ?_108
      44  ?_109
      32  ?_11
      52  ?_110
      24  ?_111
      20  ?_112
       4  ?_113
      40  ?_114
      44  ?_115
      52  ?_116
      60  ?_117
      24  ?_118
      40  ?_119
      32  ?_12
      20  ?_120
      12  ?_121
      40  ?_122
      44  ?_123
      52  ?_124
      64  ?_125
      40  ?_126
      12  ?_127
      40  ?_128
      24  ?_129
      40  ?_13
      40  ?_130
      24  ?_131
      44  ?_132
      36  ?_133
      40  ?_134
      36  ?_135
      32  ?_136
      40  ?_137
      36  ?_138
      36  ?_139
      32  ?_14
      12  ?_140
      24  ?_141
       8  ?_142
      36  ?_143
      28  ?_144
      40  ?_145
      28  ?_146
       8  ?_147
      32  ?_148
      24  ?_149
      32  ?_15
      36  ?_150
       8  ?_151
      32  ?_152
      20  ?_153
      36  ?_154
       8  ?_155
      32  ?_156
      24  ?_157
      36  ?_158
       8  ?_159
      40  ?_16
      32  ?_160
      20  ?_161
      36  ?_162
       8  ?_163
      32  ?_164
      20  ?_165
      36  ?_166
       8  ?_167
      36  ?_168
      24  ?_169
      28  ?_17
      40  ?_170
       8  ?_171
      36  ?_172
      24  ?_173
      40  ?_174
       8  ?_175
      36  ?_176
      24  ?_177
      40  ?_178
       8  ?_179
       1  ?_18
      36  ?_180
      24  ?_181
      40  ?_182
       8  ?_183
      32  ?_184
      24  ?_185
      36  ?_186
       8  ?_187
      36  ?_188
      24  ?_189
       8  ?_19
      40  ?_190
       8  ?_191
      36  ?_192
      24  ?_193
      40  ?_194
       8  ?_195
      32  ?_196
      24  ?_197
      36  ?_198
       8  ?_199
      68  ?_2
      12  ?_20
      36  ?_200
      24  ?_201
      40  ?_202
       8  ?_203
      36  ?_204
      24  ?_205
      40  ?_206
       8  ?_207
      36  ?_208
      24  ?_209
      20  ?_21
      40  ?_210
       8  ?_211
      36  ?_212
      24  ?_213
      40  ?_214
       8  ?_215
      36  ?_216
      24  ?_217
      40  ?_218
       8  ?_219
      28  ?_22
      36  ?_220
      24  ?_221
      40  ?_222
       8  ?_223
      36  ?_224
      24  ?_225
      40  ?_226
       8  ?_227
      36  ?_228
      24  ?_229
      36  ?_23
      40  ?_230
      36  ?_231
      32  ?_232
      48  ?_233
      16  ?_234
      32  ?_235
      36  ?_236
      24  ?_237
      24  ?_238
      24  ?_239
      32  ?_24
      32  ?_240
      24  ?_241
      24  ?_242
      24  ?_243
      32  ?_244
      24  ?_245
      24  ?_246
      24  ?_247
      24  ?_248
      24  ?_249
      40  ?_25
      24  ?_250
      24  ?_251
      24  ?_252
      24  ?_253
      24  ?_254
      24  ?_255
      24  ?_256
      24  ?_257
      32  ?_258
      24  ?_259
      40  ?_26
      24  ?_260
      24  ?_261
      24  ?_262
      24  ?_263
      32  ?_264
      24  ?_265
      24  ?_266
      24  ?_267
      24  ?_268
      24  ?_269
      40  ?_27
      24  ?_270
      24  ?_271
      24  ?_272
      24  ?_273
      24  ?_274
      24  ?_275
      24  ?_276
      24  ?_277
      24  ?_278
      24  ?_279
      56  ?_28
      24  ?_280
      20  ?_281
      32  ?_282
      40  ?_283
      36  ?_284
      36  ?_285
      32  ?_286
      28  ?_287
      32  ?_288
      28  ?_289
      20  ?_29
      32  ?_290
      24  ?_291
      32  ?_292
      36  ?_293
      32  ?_294
      40  ?_295
      36  ?_296
      44  ?_297
      36  ?_298
      36  ?_299
      40  ?_3
      36  ?_30
      32  ?_300
      36  ?_301
      44  ?_302
      36  ?_303
      36  ?_304
      32  ?_305
      36  ?_306
      44  ?_307
      36  ?_308
      36  ?_309
      16  ?_31
      32  ?_310
      36  ?_311
      44  ?_312
      36  ?_313
      36  ?_314
      32  ?_315
      36  ?_316
      32  ?_317
      40  ?_318
      32  ?_319
      12  ?_32
      44  ?_320
      28  ?_321
      24  ?_322
      28  ?_323
      32  ?_324
      32  ?_325
      36  ?_326
      32  ?_327
      40  ?_328
      28  ?_329
      40  ?_33
      40  ?_330
      28  ?_331
      40  ?_332
      40  ?_333
      28  ?_334
      28  ?_335
      24  ?_336
      52  ?_337
      28  ?_338
      36  ?_339
      40  ?_34
      36  ?_340
      40  ?_341
      48  ?_342
      48  ?_343
      48  ?_344
      40  ?_345
      48  ?_346
      40  ?_347
      40  ?_348
      40  ?_349
      20  ?_35
      40  ?_350
       8  ?_351
      32  ?_36
      16  ?_37
      16  ?_38
      40  ?_39
      32  ?_4
      40  ?_40
      32  ?_41
      28  ?_42
      36  ?_43
      48  ?_44
      48  ?_45
      24  ?_46
      20  ?_47
      56  ?_48
      44  ?_49
      32  ?_5
      40  ?_50
      24  ?_51
      32  ?_52
      28  ?_53
      44  ?_54
      36  ?_55
      28  ?_56
      36  ?_57
      20  ?_58
      36  ?_59
       4  ?_6
      24  ?_60
      32  ?_61
      20  ?_62
      32  ?_63
      20  ?_64
      32  ?_65
      24  ?_66
      24  ?_67
      36  ?_68
      32  ?_69
      40  ?_7
      24  ?_70
      44  ?_71
      16  ?_72
      48  ?_73
      24  ?_74
      20  ?_75
      44  ?_76
      40  ?_77
      28  ?_78
      56  ?_79
      32  ?_8
      16  ?_80
      44  ?_81
      12  ?_82
      12  ?_83
      12  ?_84
      72  ?_85
      68  ?_86
      72  ?_87
      64  ?_88
      60  ?_89
      32  ?_9
      60  ?_90
      60  ?_91
      56  ?_92
      64  ?_93
      64  ?_94
      64  ?_95
      64  ?_96
      64  ?_97
      68  ?_98
      32  ?_99
       1  Bypass
      44  ParseString
   18666  RoadBrd_ParseString
      12  RoadBrd_ParserInit
      66  RoadBrd_ParserTsk
      40  RoadBrd_ProcessParserTsk
       6  Tst_Bypass
      88  hatoi
      74  isHexNum

 
     45 bytes in section .bss
 11 193 bytes in section .rodata
 19 296 bytes in section .text
 
 19 296 bytes of CODE  memory
 11 193 bytes of CONST memory
     45 bytes of DATA  memory

Errors: none
Warnings: none
