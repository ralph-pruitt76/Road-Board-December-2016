###############################################################################
#
# IAR ANSI C/C++ Compiler V7.60.2.11341/W32 for ARM       03/Jan/2018  15:24:45
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\parser.c
#    Command line =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\parser.c
#        -D USE_HAL_DRIVER -D STM32L152xE -D USE_STM32L1XX_NUCLEO -D ASCII -D
#        REV_L -D LONG_DELAY -D XML_SHRT -lCN
#        "D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\RdBrd
#        XMLShrt Long Always\List" -o
#        "D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\RdBrd
#        XMLShrt Long Always\Obj" --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_clustering --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.4\arm\INC\c\DLib_Config_Full.h" -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/STM32L1xx_HAL_Driver/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/STM32L1xx_HAL_Driver/Inc/Legacy\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/BSP/STM32L1xx_Nucleo\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/portable/IAR/ARM_CM3\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Core/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/CMSIS/Include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/CMSIS/Device/ST/STM32L1xx/Include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\..\Middlewares\Third_Party\BgLib\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.4\arm\CMSIS\Include\"
#    Locale       =  English_United States.1252
#    List file    =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\RdBrd
#        XMLShrt Long Always\List\parser.lst
#    Object file  =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\RdBrd
#        XMLShrt Long Always\Obj\parser.o
#
###############################################################################

D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\parser.c
      1          /**
      2            ******************************************************************************
      3            * File Name          : parser.c
      4            * Description        : This file provides code that parses the passed string and 
      5            *                      performs the requested operation. It then returns a string
      6            *                      hardware based on the LPS22HB chip.
      7            ******************************************************************************
      8            *
      9            * COPYRIGHT(c) 2016 WeatherCloud
     10            *
     11            * Redistribution and use in source and binary forms, with or without modification,
     12            * are permitted provided that the following conditions are met:
     13            *   1. Redistributions of source code must retain the above copyright notice,
     14            *      this list of conditions and the following disclaimer.
     15            *   2. Redistributions in binary form must reproduce the above copyright notice,
     16            *      this list of conditions and the following disclaimer in the documentation
     17            *      and/or other materials provided with the distribution.
     18            *   3. Neither the name of WeatherCloud nor the names of its contributors
     19            *      may be used to endorse or promote products derived from this software
     20            *      without specific prior written permission.
     21            *
     22            * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     23            * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     24            * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     25            * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
     26            * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     27            * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     28            * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
     29            * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
     30            * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
     31            * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     32            *
     33            ******************************************************************************
     34            */
     35          
     36          /* Includes ------------------------------------------------------------------*/
     37          #include "parser.h"
     38          #include "ErrorCodes.h"
     39          #include <ctype.h>
     40          #include <stdlib.h>
     41          #include "wwdg.h"
     42          #include "Calibration.h"
     43          #include "s_record.h"
     44          #include "BootMonitor.h"
     45          
     46          // Enums
     47          typedef enum 
     48          {
     49            NOT_INIT = 0,
     50            AVAILABLE = 1,
     51            BUSY = 2
     52          } ParseTskFlg;
     53          

   \                                 In section .bss, align 1
     54          static bool Bypass = false;
   \                     Bypass:
   \   00000000                      DS8 1
     55          
     56          // Parser Structure for tasks.
     57          struct
     58          {
     59            char          tempBuffer[BUFFER_SIZE];
     60            ParseTskFlg   ParseFlg;

   \                                 In section .bss, align 4
     61          } static ParseString;
   \                     ParseString:
   \   00000000                      DS8 44
     62          
     63          /* Parser functions */
     64          
     65          /**
     66            * @brief  This routine initializes the Parse Task Structure.
     67            * @param  *tempBffr: String to be parsed.
     68            * @retval HAL_StatusTypeDef:     HAL_OK:       Tasking of block of data to UART success.
     69            */

   \                                 In section .text, align 2, keep-with-next
     70          HAL_StatusTypeDef RoadBrd_ParserInit( void )
     71          {
     72            ParseString.ParseFlg = AVAILABLE;
   \                     RoadBrd_ParserInit: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x....             LDR.N    R1,??DataTable2
   \   00000004   0xF881 0x0028      STRB     R0,[R1, #+40]
     73            return HAL_OK;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x4770             BX       LR               ;; return
     74          }
     75          
     76          /**
     77            * @brief  This routine handles the operation of setting up a Parse Event.
     78            * @param  *tempBffr: String to be parsed.
     79            * @retval HAL_StatusTypeDef:     HAL_OK:       Tasking of block of data to UART success.
     80            *                                HAL_ERROR:    Error found in Tasking or data passed.
     81            *                                HAL_BUSY:     UART is busy.
     82            *                                HAL_TIMEOUT:  UART timed out.
     83            */

   \                                 In section .text, align 2, keep-with-next
     84          HAL_StatusTypeDef RoadBrd_ParserTsk(char *tempBffr)
     85          {
   \                     RoadBrd_ParserTsk: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     86            // Test ParseFlg.
     87            if (ParseString.ParseFlg == BUSY)
   \   00000004   0x....             LDR.N    R0,??DataTable2
   \   00000006   0xF890 0x0028      LDRB     R0,[R0, #+40]
   \   0000000A   0x2802             CMP      R0,#+2
   \   0000000C   0xD101             BNE.N    ??RoadBrd_ParserTsk_0
     88              return HAL_BUSY;
   \   0000000E   0x2002             MOVS     R0,#+2
   \   00000010   0xE016             B.N      ??RoadBrd_ParserTsk_1
     89            else if (ParseString.ParseFlg == NOT_INIT)
   \                     ??RoadBrd_ParserTsk_0: (+1)
   \   00000012   0x....             LDR.N    R0,??DataTable2
   \   00000014   0xF890 0x0028      LDRB     R0,[R0, #+40]
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD101             BNE.N    ??RoadBrd_ParserTsk_2
     90              return HAL_ERROR;
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0xE00F             B.N      ??RoadBrd_ParserTsk_1
     91            // Next Lets make sure passed string is not too big.
     92          //  if (strlen((char *)tempBffr) >= BUFFER_SIZE)
     93            if (strlen(tempBffr) >= BUFFER_SIZE)
   \                     ??RoadBrd_ParserTsk_2: (+1)
   \   00000020   0x0020             MOVS     R0,R4
   \   00000022   0x.... 0x....      BL       strlen
   \   00000026   0x2828             CMP      R0,#+40
   \   00000028   0xD301             BCC.N    ??RoadBrd_ParserTsk_3
     94              return HAL_ERROR;
   \   0000002A   0x2001             MOVS     R0,#+1
   \   0000002C   0xE008             B.N      ??RoadBrd_ParserTsk_1
     95            // Copy String into Structure and set as busy.
     96          //  strcpy( (char *)ParseString.tempBuffer, (char *)tempBffr);
     97            strcpy( ParseString.tempBuffer, tempBffr);
   \                     ??RoadBrd_ParserTsk_3: (+1)
   \   0000002E   0x0021             MOVS     R1,R4
   \   00000030   0x....             LDR.N    R0,??DataTable2
   \   00000032   0x.... 0x....      BL       strcpy
     98            ParseString.ParseFlg = BUSY;
   \   00000036   0x2002             MOVS     R0,#+2
   \   00000038   0x....             LDR.N    R1,??DataTable2
   \   0000003A   0xF881 0x0028      STRB     R0,[R1, #+40]
     99            return HAL_OK;
   \   0000003E   0x2000             MOVS     R0,#+0
   \                     ??RoadBrd_ParserTsk_1: (+1)
   \   00000040   0xBD10             POP      {R4,PC}          ;; return
    100          }
    101          
    102          /**
    103            * @brief  This routine handles the operation of processing a Parse Event.
    104            * @param  *tempBffr: String to be parsed.
    105            * @retval HAL_StatusTypeDef:     HAL_OK:       Tasking of block of data to UART success.
    106            *                                HAL_ERROR:    Error found in Tasking or data passed.
    107            *                                HAL_BUSY:     UART is busy.
    108            *                                HAL_TIMEOUT:  UART timed out.
    109            */

   \                                 In section .text, align 2, keep-with-next
    110          HAL_StatusTypeDef RoadBrd_ProcessParserTsk( void )
    111          {
   \                     RoadBrd_ProcessParserTsk: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    112            HAL_StatusTypeDef Status;
    113          
    114            // Test ParseFlg and process.
    115            if (ParseString.ParseFlg == BUSY)
   \   00000002   0x....             LDR.N    R0,??DataTable2
   \   00000004   0xF890 0x0028      LDRB     R0,[R0, #+40]
   \   00000008   0x2802             CMP      R0,#+2
   \   0000000A   0xD115             BNE.N    ??RoadBrd_ProcessParserTsk_0
    116            {
    117              // Next We need to see if OTA Parser is active...
    118              // Test Boot Monitor Flag...If Set, we ae in special Boot monitor mode.
    119              if (Tst_Boot_Bypass())
   \   0000000C   0x.... 0x....      BL       Tst_Boot_Bypass
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD005             BEQ.N    ??RoadBrd_ProcessParserTsk_1
    120              {
    121                // Yes...Task to Boot Monitor.
    122                Status = Parse_BootString(ParseString.tempBuffer, true);
   \   00000014   0x2101             MOVS     R1,#+1
   \   00000016   0x....             LDR.N    R0,??DataTable2
   \   00000018   0x.... 0x....      BL       Parse_BootString
   \   0000001C   0x0004             MOVS     R4,R0
   \   0000001E   0xE004             B.N      ??RoadBrd_ProcessParserTsk_2
    123              }
    124              else
    125              {
    126                // Else...Normal Monitor Tasking.
    127                Status = RoadBrd_ParseString(ParseString.tempBuffer, true);
   \                     ??RoadBrd_ProcessParserTsk_1: (+1)
   \   00000020   0x2101             MOVS     R1,#+1
   \   00000022   0x....             LDR.N    R0,??DataTable2
   \   00000024   0x.... 0x....      BL       RoadBrd_ParseString
   \   00000028   0x0004             MOVS     R4,R0
    128              }
    129              ParseString.ParseFlg = AVAILABLE;
   \                     ??RoadBrd_ProcessParserTsk_2: (+1)
   \   0000002A   0x2001             MOVS     R0,#+1
   \   0000002C   0x....             LDR.N    R1,??DataTable2
   \   0000002E   0xF881 0x0028      STRB     R0,[R1, #+40]
    130              return Status;
   \   00000032   0x0020             MOVS     R0,R4
   \   00000034   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000036   0xE000             B.N      ??RoadBrd_ProcessParserTsk_3
    131            }
    132            else
    133              return HAL_OK;
   \                     ??RoadBrd_ProcessParserTsk_0: (+1)
   \   00000038   0x2000             MOVS     R0,#+0
   \                     ??RoadBrd_ProcessParserTsk_3: (+1)
   \   0000003A   0xBD10             POP      {R4,PC}          ;; return
    134          }
    135          
    136          
    137          /**
    138            * @brief  This routine parses the passed string and performs the passed operation
    139            * @param  *tempBffr: String to be parsed.
    140            * @retval HAL_StatusTypeDef:     HAL_OK:       Tasking of block of data to UART success.
    141            *                                HAL_ERROR:    Error found in Tasking or data passed.
    142            *                                HAL_BUSY:     UART is busy.
    143            *                                HAL_TIMEOUT:  UART timed out.
    144            */

   \                                 In section .text, align 4, keep-with-next
    145          HAL_StatusTypeDef RoadBrd_ParseString(char *tempBffr, bool BLE_Flag)
    146          {
   \                     RoadBrd_ParseString: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xF5AD 0x6DA0      SUB      SP,SP,#+1280
   \   00000008   0xB08D             SUB      SP,SP,#+52
   \   0000000A   0x0004             MOVS     R4,R0
   \   0000000C   0x000D             MOVS     R5,R1
    147          #ifdef TEST2
    148            #define RECEIVE_SZ      5
    149            uint8_t Size;
    150            uint8_t i2cData[80];
    151            uint8_t tempBffr3[10];
    152            char tempBffr2[5];
    153            int Loop_cnt;
    154            HAL_StatusTypeDef Status, Save_Status;
    155            int Address;
    156            int num_bytes;
    157            int num_bytes_received;
    158            int Error, x;
    159            char tempstr[20];
    160            char* tempPstr;
    161            int new_value, flag;
    162            float Temp_C, Temp_F, Shunt_V, Bus_V, Crrnt, Power;
    163            uint32_t Err_code;
    164          #else
    165            #ifdef TEST
    166              #define RECEIVE_SZ      5
    167            #else
    168              #define RECEIVE_SZ      30
    169              uint16_t DriverStatus;
    170              int8_t tempBffr2[120];
    171              int8_t tempBffr3[10];
    172              int8_t s_cmd[5];
    173              int8_t s_recrd[120];
    174              int8_t* BufferPntr;
    175              HAL_StatusTypeDef Status, Save_Status;
    176              uint8_t Size;
    177              int Address;
    178              int num_bytes;
    179              int Numbr_Rcrds;
    180              int num_bytes_received;
    181              uint8_t i2cData[80];
    182              int Error, x, y;
    183              Voltage VMeasure, VMeasureScaled;
    184              Current CMeasure, CMeasureScaled;
    185              Power PMeasure, PMeasureScaled;
    186              Temperature TMeasure, TMeasureScaled;
    187              Humidity HMeasure, HMeasureScaled;
    188              RGBInitialize RGBMeasure;
    189              RGBIdent IDMeasure;
    190              RGBStatus RGBSMeasure;
    191              RGBLight RGBValues;
    192              SrecElement Srec_Elem;
    193              char uuid[10];
    194              float Scale, Offset;
    195          //    PRStatus PRMeasure;
    196              PRPressure PRPMeasure, PRPMeasureScaled;
    197              BinString RSFFTBins;
    198              GridEye     GridMeasure, GridMeasureScaled;
    199              uint32_t Err_code;
    200              uint8_t op_mode, ds_range, adc_rsl, sync, cmp_adjst, cmp_offst, int_assgn, int_persist, cnvrsn_int;
    201              int new_value, flag;
    202              char* tempPstr;
    203              char tempstr[20];
    204            #endif
    205          #endif
    206          
    207              Size = strlen((char *)tempBffr);
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0x.... 0x....      BL       strlen
   \   00000014   0xF88D 0x0028      STRB     R0,[SP, #+40]
    208              Status = HAL_OK;
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x0006             MOVS     R6,R0
    209              
    210              // Test Bypass. If set, then we are in streaming mode.
    211              if ( Bypass )
   \   0000001C   0xF8DF 0x0DF4      LDR.W    R0,??RoadBrd_ParseString_0
   \   00000020   0x7800             LDRB     R0,[R0, #+0]
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD01E             BEQ.N    ??RoadBrd_ParseString_1
    212              {
    213                if (tempBffr[0] == 0x1B)
   \   00000026   0x7820             LDRB     R0,[R4, #+0]
   \   00000028   0x281B             CMP      R0,#+27
   \   0000002A   0xD115             BNE.N    ??RoadBrd_ParseString_2
    214                {
    215                  Bypass = false;
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0xF8DF 0x1DE4      LDR.W    R1,??RoadBrd_ParseString_0
   \   00000032   0x7008             STRB     R0,[R1, #+0]
    216                  strcpy( (char *)tempBffr2, "\r\n\r\n T........TERMINATING MONITOR MODE.........\r\n\r\n> ");
   \   00000034   0xF8DF 0x1DE0      LDR.W    R1,??RoadBrd_ParseString_0+0x4
   \   00000038   0xA80B             ADD      R0,SP,#+44
   \   0000003A   0x.... 0x....      BL       strcpy
    217          #ifdef NUCLEO
    218                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    219          #else
    220                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000003E   0xA90B             ADD      R1,SP,#+44
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000046   0x0006             MOVS     R6,R0
    221          #endif
    222                  if (Status != HAL_OK)
   \   00000048   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000004A   0x2E00             CMP      R6,#+0
   \   0000004C   0xF004 0x85D1      BEQ.W    ??RoadBrd_ParseString_3
    223                    return Status;
   \   00000050   0x0030             MOVS     R0,R6
   \   00000052   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000054   0xF004 0xBDCF      B.W      ??RoadBrd_ParseString_4
    224                }
    225                else
    226                {
    227                  // Transmit Character to BGM111.
    228                  BGM111_Transmit(1, (uint8_t *)tempBffr);
   \                     ??RoadBrd_ParseString_2: (+1)
   \   00000058   0x0021             MOVS     R1,R4
   \   0000005A   0x2001             MOVS     R0,#+1
   \   0000005C   0x.... 0x....      BL       BGM111_Transmit
   \   00000060   0xF004 0xBDC7      B.W      ??RoadBrd_ParseString_3
    229                }
    230              }// EndIf ( Bypass )
    231              else
    232              {
    233                // Normal Mode
    234              
    235                      // We have a good Tasking String. Time to determine action.
    236                      switch( tempBffr[0] )
   \                     ??RoadBrd_ParseString_1: (+1)
   \   00000064   0x7820             LDRB     R0,[R4, #+0]
   \   00000066   0x2830             CMP      R0,#+48
   \   00000068   0xD02F             BEQ.N    ??RoadBrd_ParseString_5
   \   0000006A   0x2831             CMP      R0,#+49
   \   0000006C   0xD048             BEQ.N    ??RoadBrd_ParseString_6
   \   0000006E   0x2832             CMP      R0,#+50
   \   00000070   0xD079             BEQ.N    ??RoadBrd_ParseString_7
   \   00000072   0x2833             CMP      R0,#+51
   \   00000074   0xF000 0x80AA      BEQ.W    ??RoadBrd_ParseString_8
   \   00000078   0x2834             CMP      R0,#+52
   \   0000007A   0xF000 0x80DA      BEQ.W    ??RoadBrd_ParseString_9
   \   0000007E   0x2835             CMP      R0,#+53
   \   00000080   0xF000 0x810A      BEQ.W    ??RoadBrd_ParseString_10
   \   00000084   0x2836             CMP      R0,#+54
   \   00000086   0xF000 0x817D      BEQ.W    ??RoadBrd_ParseString_11
   \   0000008A   0x2841             CMP      R0,#+65
   \   0000008C   0xF000 0x8193      BEQ.W    ??RoadBrd_ParseString_12
   \   00000090   0x2842             CMP      R0,#+66
   \   00000092   0xF000 0x82EE      BEQ.W    ??RoadBrd_ParseString_13
   \   00000096   0x2843             CMP      R0,#+67
   \   00000098   0xF000 0x85B4      BEQ.W    ??RoadBrd_ParseString_14
   \   0000009C   0x2844             CMP      R0,#+68
   \   0000009E   0xF000 0x87B5      BEQ.W    ??RoadBrd_ParseString_15
   \   000000A2   0x2845             CMP      R0,#+69
   \   000000A4   0xF001 0x8130      BEQ.W    ??RoadBrd_ParseString_16
   \   000000A8   0x2846             CMP      R0,#+70
   \   000000AA   0xF001 0x8142      BEQ.W    ??RoadBrd_ParseString_17
   \   000000AE   0x2847             CMP      R0,#+71
   \   000000B0   0xF001 0x815A      BEQ.W    ??RoadBrd_ParseString_18
   \   000000B4   0x2848             CMP      R0,#+72
   \   000000B6   0xF001 0x81D7      BEQ.W    ??RoadBrd_ParseString_19
   \   000000BA   0x2850             CMP      R0,#+80
   \   000000BC   0xF001 0x84B6      BEQ.W    ??RoadBrd_ParseString_20
   \   000000C0   0x2854             CMP      R0,#+84
   \   000000C2   0xF001 0x84E1      BEQ.W    ??RoadBrd_ParseString_21
   \   000000C6   0xF004 0xBD01      B.W      ??RoadBrd_ParseString_22
    237                      {
    238          //**************************************************************************************************
    239                      case '0':
    240                        // Enable Road sound and fill buffer. 
    241                        Status = RoadBrdSnd_ProcessSound();
   \                     ??RoadBrd_ParseString_5: (+1)
   \   000000CA   0x.... 0x....      BL       RoadBrdSnd_ProcessSound
   \   000000CE   0x0006             MOVS     R6,R0
    242                        if (Status == HAL_OK)
   \   000000D0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000D2   0x2E00             CMP      R6,#+0
   \   000000D4   0xD112             BNE.N    ??RoadBrd_ParseString_23
    243                        {
    244                          // Is this a BLE Operation?
    245                          if ( BLE_Flag )
   \   000000D6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000D8   0x2D00             CMP      R5,#+0
   \   000000DA   0xD00A             BEQ.N    ??RoadBrd_ParseString_24
    246                          {
    247                            // Yes...Build and Send BLE Response NOW.
    248                            strcpy( (char *)tempBffr2, "<STATUS>CMD_RDSNDBFFR_FILL</STATUS>");
   \   000000DC   0xF8DF 0x1E1C      LDR.W    R1,??RoadBrd_ParseString_25
   \   000000E0   0xA80B             ADD      R0,SP,#+44
   \   000000E2   0x.... 0x....      BL       strcpy
    249                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000000E6   0xA80B             ADD      R0,SP,#+44
   \   000000E8   0x.... 0x....      BL       strlen
   \   000000EC   0xA90B             ADD      R1,SP,#+44
   \   000000EE   0x.... 0x....      BL       BGM111_Transmit
    250                          }
    251                          strcpy( (char *)tempBffr2, "Road Sound: Road Sound loaded, processed, and sent to FFT Bins.\r\n");
   \                     ??RoadBrd_ParseString_24: (+1)
   \   000000F2   0xF8DF 0x1E0C      LDR.W    R1,??RoadBrd_ParseString_25+0x4
   \   000000F6   0xA80B             ADD      R0,SP,#+44
   \   000000F8   0x.... 0x....      BL       strcpy
    252                        }
    253                        break;
   \                     ??RoadBrd_ParseString_23: (+1)
   \   000000FC   0xF004 0xBCF7      B.W      ??RoadBrd_ParseString_26
    254          //**************************************************************************************************
    255                      case '1':
    256                        // Rd_Sound FFT Measurements 0-15. 
    257                        Status = RoadBrdSnd_DumpBin0( &RSFFTBins );
   \                     ??RoadBrd_ParseString_6: (+1)
   \   00000100   0xA891             ADD      R0,SP,#+580
   \   00000102   0x.... 0x....      BL       RoadBrdSnd_DumpBin0
   \   00000106   0x0006             MOVS     R6,R0
    258                        strcpy( (char *)tempBffr2, "Road Sound: FFT Measurements 0-15.\r\n");
   \   00000108   0xF8DF 0x1DFC      LDR.W    R1,??RoadBrd_ParseString_25+0xC
   \   0000010C   0xA80B             ADD      R0,SP,#+44
   \   0000010E   0x.... 0x....      BL       strcpy
    259          #ifdef NUCLEO
    260                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    261          #else
    262                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000112   0xA90B             ADD      R1,SP,#+44
   \   00000114   0x2000             MOVS     R0,#+0
   \   00000116   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000011A   0x0006             MOVS     R6,R0
    263          #endif
    264                        if (Status != HAL_OK)
   \   0000011C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000011E   0x2E00             CMP      R6,#+0
   \   00000120   0xD003             BEQ.N    ??RoadBrd_ParseString_27
    265                          return Status;
   \   00000122   0x0030             MOVS     R0,R6
   \   00000124   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000126   0xF004 0xBD66      B.W      ??RoadBrd_ParseString_4
    266                        // Is this a BLE Operation?
    267                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_27: (+1)
   \   0000012A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000012C   0x2D00             CMP      R5,#+0
   \   0000012E   0xD00B             BEQ.N    ??RoadBrd_ParseString_28
    268                        {
    269                          // Yes...Build and Send BLE Response NOW.
    270                          sprintf( (char *)tempBffr2, "<STATUS>ST_FFT0-15:%s</STATUS>", RSFFTBins.dumpStr );
   \   00000130   0xAA91             ADD      R2,SP,#+580
   \   00000132   0xF8DF 0x1DD8      LDR.W    R1,??RoadBrd_ParseString_25+0x10
   \   00000136   0xA80B             ADD      R0,SP,#+44
   \   00000138   0x.... 0x....      BL       sprintf
    271                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000013C   0xA80B             ADD      R0,SP,#+44
   \   0000013E   0x.... 0x....      BL       strlen
   \   00000142   0xA90B             ADD      R1,SP,#+44
   \   00000144   0x.... 0x....      BL       BGM111_Transmit
    272                        }
    273                        // NOW, Build Data String..
    274                        sprintf( (char *)tempBffr2, "     FFT Measurements 0-15: " );
   \                     ??RoadBrd_ParseString_28: (+1)
   \   00000148   0xF8DF 0x1DC4      LDR.W    R1,??RoadBrd_ParseString_25+0x14
   \   0000014C   0xA80B             ADD      R0,SP,#+44
   \   0000014E   0x.... 0x....      BL       sprintf
    275                        strcat( (char *)tempBffr2, (char *)RSFFTBins.dumpStr );
   \   00000152   0xA991             ADD      R1,SP,#+580
   \   00000154   0xA80B             ADD      R0,SP,#+44
   \   00000156   0x.... 0x....      BL       strcat
    276                        strcat( (char *)tempBffr2, "\r\n" );
   \   0000015A   0xA1DA             ADR.N    R1,??RoadBrd_ParseString_29  ;; 0x0D, 0x0A, 0x00, 0x00
   \   0000015C   0xA80B             ADD      R0,SP,#+44
   \   0000015E   0x.... 0x....      BL       strcat
    277                       break;
   \   00000162   0xF004 0xBCC4      B.W      ??RoadBrd_ParseString_26
    278          //**************************************************************************************************
    279                      case '2':
    280                        // Rd_Sound FFT Measurements 16-31. 
    281                        Status = RoadBrdSnd_DumpBin16( &RSFFTBins );
   \                     ??RoadBrd_ParseString_7: (+1)
   \   00000166   0xA891             ADD      R0,SP,#+580
   \   00000168   0x.... 0x....      BL       RoadBrdSnd_DumpBin16
   \   0000016C   0x0006             MOVS     R6,R0
    282                        strcpy( (char *)tempBffr2, "Road Sound: FFT Measurements 16-31.\r\n");
   \   0000016E   0xF8DF 0x1DA4      LDR.W    R1,??RoadBrd_ParseString_25+0x18
   \   00000172   0xA80B             ADD      R0,SP,#+44
   \   00000174   0x.... 0x....      BL       strcpy
    283          #ifdef NUCLEO
    284                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    285          #else
    286                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000178   0xA90B             ADD      R1,SP,#+44
   \   0000017A   0x2000             MOVS     R0,#+0
   \   0000017C   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000180   0x0006             MOVS     R6,R0
    287          #endif
    288                        if (Status != HAL_OK)
   \   00000182   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000184   0x2E00             CMP      R6,#+0
   \   00000186   0xD003             BEQ.N    ??RoadBrd_ParseString_30
    289                          return Status;
   \   00000188   0x0030             MOVS     R0,R6
   \   0000018A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000018C   0xF004 0xBD33      B.W      ??RoadBrd_ParseString_4
    290                        // Is this a BLE Operation?
    291                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_30: (+1)
   \   00000190   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000192   0x2D00             CMP      R5,#+0
   \   00000194   0xD00B             BEQ.N    ??RoadBrd_ParseString_31
    292                        {
    293                          // Yes...Build and Send BLE Response NOW.
    294                          sprintf( (char *)tempBffr2, "<STATUS>ST_FFT16-31:%s</STATUS>", RSFFTBins.dumpStr );
   \   00000196   0xAA91             ADD      R2,SP,#+580
   \   00000198   0xF8DF 0x1E20      LDR.W    R1,??RoadBrd_ParseString_32
   \   0000019C   0xA80B             ADD      R0,SP,#+44
   \   0000019E   0x.... 0x....      BL       sprintf
    295                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000001A2   0xA80B             ADD      R0,SP,#+44
   \   000001A4   0x.... 0x....      BL       strlen
   \   000001A8   0xA90B             ADD      R1,SP,#+44
   \   000001AA   0x.... 0x....      BL       BGM111_Transmit
    296                        }
    297                        // NOW, Build Data String..
    298                        sprintf( (char *)tempBffr2, "     FFT Measurements 16-31: " );
   \                     ??RoadBrd_ParseString_31: (+1)
   \   000001AE   0xF8DF 0x1E10      LDR.W    R1,??RoadBrd_ParseString_32+0x4
   \   000001B2   0xA80B             ADD      R0,SP,#+44
   \   000001B4   0x.... 0x....      BL       sprintf
    299                        strcat( (char *)tempBffr2, (char *)RSFFTBins.dumpStr );
   \   000001B8   0xA991             ADD      R1,SP,#+580
   \   000001BA   0xA80B             ADD      R0,SP,#+44
   \   000001BC   0x.... 0x....      BL       strcat
    300                        strcat( (char *)tempBffr2, "\r\n" );
   \   000001C0   0xA1C0             ADR.N    R1,??RoadBrd_ParseString_29  ;; 0x0D, 0x0A, 0x00, 0x00
   \   000001C2   0xA80B             ADD      R0,SP,#+44
   \   000001C4   0x.... 0x....      BL       strcat
    301                        break;
   \   000001C8   0xF004 0xBC91      B.W      ??RoadBrd_ParseString_26
    302          //**************************************************************************************************
    303                      case '3':
    304                        // Rd_Sound FFT Measurements 32-47. 
    305                        Status = RoadBrdSnd_DumpBin32( &RSFFTBins );
   \                     ??RoadBrd_ParseString_8: (+1)
   \   000001CC   0xA891             ADD      R0,SP,#+580
   \   000001CE   0x.... 0x....      BL       RoadBrdSnd_DumpBin32
   \   000001D2   0x0006             MOVS     R6,R0
    306                        strcpy( (char *)tempBffr2, "Road Sound: FFT Measurements 32-47.\r\n");
   \   000001D4   0xF8DF 0x1DEC      LDR.W    R1,??RoadBrd_ParseString_32+0x8
   \   000001D8   0xA80B             ADD      R0,SP,#+44
   \   000001DA   0x.... 0x....      BL       strcpy
    307          #ifdef NUCLEO
    308                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    309          #else
    310                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000001DE   0xA90B             ADD      R1,SP,#+44
   \   000001E0   0x2000             MOVS     R0,#+0
   \   000001E2   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000001E6   0x0006             MOVS     R6,R0
    311          #endif
    312                        if (Status != HAL_OK)
   \   000001E8   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000001EA   0x2E00             CMP      R6,#+0
   \   000001EC   0xD003             BEQ.N    ??RoadBrd_ParseString_33
    313                          return Status;
   \   000001EE   0x0030             MOVS     R0,R6
   \   000001F0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001F2   0xF004 0xBD00      B.W      ??RoadBrd_ParseString_4
    314                        // Is this a BLE Operation?
    315                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_33: (+1)
   \   000001F6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000001F8   0x2D00             CMP      R5,#+0
   \   000001FA   0xD00B             BEQ.N    ??RoadBrd_ParseString_34
    316                        {
    317                          // Yes...Build and Send BLE Response NOW.
    318                          sprintf( (char *)tempBffr2, "<STATUS>ST_FFT32-47:%s</STATUS>", RSFFTBins.dumpStr );
   \   000001FC   0xAA91             ADD      R2,SP,#+580
   \   000001FE   0xF8DF 0x1DF4      LDR.W    R1,??RoadBrd_ParseString_35
   \   00000202   0xA80B             ADD      R0,SP,#+44
   \   00000204   0x.... 0x....      BL       sprintf
    319                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000208   0xA80B             ADD      R0,SP,#+44
   \   0000020A   0x.... 0x....      BL       strlen
   \   0000020E   0xA90B             ADD      R1,SP,#+44
   \   00000210   0x.... 0x....      BL       BGM111_Transmit
    320                        }
    321                        // NOW, Build Data String..
    322                        sprintf( (char *)tempBffr2, "     FFT Measurements 32-47: " );
   \                     ??RoadBrd_ParseString_34: (+1)
   \   00000214   0xF8DF 0x1DE0      LDR.W    R1,??RoadBrd_ParseString_35+0x4
   \   00000218   0xA80B             ADD      R0,SP,#+44
   \   0000021A   0x.... 0x....      BL       sprintf
    323                        strcat( (char *)tempBffr2, (char *)RSFFTBins.dumpStr );
   \   0000021E   0xA991             ADD      R1,SP,#+580
   \   00000220   0xA80B             ADD      R0,SP,#+44
   \   00000222   0x.... 0x....      BL       strcat
    324                        strcat( (char *)tempBffr2, "\r\n" );
   \   00000226   0xA1A7             ADR.N    R1,??RoadBrd_ParseString_29  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000228   0xA80B             ADD      R0,SP,#+44
   \   0000022A   0x.... 0x....      BL       strcat
    325                        break;
   \   0000022E   0xF004 0xBC5E      B.W      ??RoadBrd_ParseString_26
    326          //**************************************************************************************************
    327                      case '4':
    328                        // Rd_Sound FFT Measurements 48-63. 
    329                        Status = RoadBrdSnd_DumpBin48( &RSFFTBins );
   \                     ??RoadBrd_ParseString_9: (+1)
   \   00000232   0xA891             ADD      R0,SP,#+580
   \   00000234   0x.... 0x....      BL       RoadBrdSnd_DumpBin48
   \   00000238   0x0006             MOVS     R6,R0
    330                        strcpy( (char *)tempBffr2, "Road Sound: FFT Measurements 48-63.\r\n");
   \   0000023A   0xF8DF 0x1DC0      LDR.W    R1,??RoadBrd_ParseString_35+0x8
   \   0000023E   0xA80B             ADD      R0,SP,#+44
   \   00000240   0x.... 0x....      BL       strcpy
    331          #ifdef NUCLEO
    332                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    333          #else
    334                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000244   0xA90B             ADD      R1,SP,#+44
   \   00000246   0x2000             MOVS     R0,#+0
   \   00000248   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000024C   0x0006             MOVS     R6,R0
    335          #endif
    336                        if (Status != HAL_OK)
   \   0000024E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000250   0x2E00             CMP      R6,#+0
   \   00000252   0xD003             BEQ.N    ??RoadBrd_ParseString_36
    337                          return Status;
   \   00000254   0x0030             MOVS     R0,R6
   \   00000256   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000258   0xF004 0xBCCD      B.W      ??RoadBrd_ParseString_4
    338                        // Is this a BLE Operation?
    339                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_36: (+1)
   \   0000025C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000025E   0x2D00             CMP      R5,#+0
   \   00000260   0xD00B             BEQ.N    ??RoadBrd_ParseString_37
    340                        {
    341                          // Yes...Build and Send BLE Response NOW.
    342                          sprintf( (char *)tempBffr2, "<STATUS>ST_FFT48-63:%s</STATUS>", RSFFTBins.dumpStr );
   \   00000262   0xAA91             ADD      R2,SP,#+580
   \   00000264   0xF8DF 0x1D98      LDR.W    R1,??RoadBrd_ParseString_35+0xC
   \   00000268   0xA80B             ADD      R0,SP,#+44
   \   0000026A   0x.... 0x....      BL       sprintf
    343                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000026E   0xA80B             ADD      R0,SP,#+44
   \   00000270   0x.... 0x....      BL       strlen
   \   00000274   0xA90B             ADD      R1,SP,#+44
   \   00000276   0x.... 0x....      BL       BGM111_Transmit
    344                        }
    345                        // NOW, Build Data String..
    346                        sprintf( (char *)tempBffr2, "     FFT Measurements 48-63: " );
   \                     ??RoadBrd_ParseString_37: (+1)
   \   0000027A   0xF8DF 0x1D88      LDR.W    R1,??RoadBrd_ParseString_35+0x10
   \   0000027E   0xA80B             ADD      R0,SP,#+44
   \   00000280   0x.... 0x....      BL       sprintf
    347                        strcat( (char *)tempBffr2, (char *)RSFFTBins.dumpStr );
   \   00000284   0xA991             ADD      R1,SP,#+580
   \   00000286   0xA80B             ADD      R0,SP,#+44
   \   00000288   0x.... 0x....      BL       strcat
    348                        strcat( (char *)tempBffr2, "\r\n" );
   \   0000028C   0xA18D             ADR.N    R1,??RoadBrd_ParseString_29  ;; 0x0D, 0x0A, 0x00, 0x00
   \   0000028E   0xA80B             ADD      R0,SP,#+44
   \   00000290   0x.... 0x....      BL       strcat
    349                       break;
   \   00000294   0xF004 0xBC2B      B.W      ??RoadBrd_ParseString_26
    350          //**************************************************************************************************
    351                      case '5':
    352                        // dump results of save Buffer. BufferPntr
    353                        BufferPntr = RoadBrdSnd_getSaveBffr();
   \                     ??RoadBrd_ParseString_10: (+1)
   \   00000298   0x.... 0x....      BL       RoadBrdSnd_getSaveBffr
   \   0000029C   0x9048             STR      R0,[SP, #+288]
    354                        strcpy( (char *)tempBffr2, "Road Sound: Results of save Buffer.\r\n");
   \   0000029E   0xF8DF 0x1D68      LDR.W    R1,??RoadBrd_ParseString_35+0x14
   \   000002A2   0xA80B             ADD      R0,SP,#+44
   \   000002A4   0x.... 0x....      BL       strcpy
    355                        Status = RoadBrdSnd_DumpBin0( &RSFFTBins );
   \   000002A8   0xA891             ADD      R0,SP,#+580
   \   000002AA   0x.... 0x....      BL       RoadBrdSnd_DumpBin0
   \   000002AE   0x0006             MOVS     R6,R0
    356          #ifdef NUCLEO
    357                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    358          #else
    359                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000002B0   0xA90B             ADD      R1,SP,#+44
   \   000002B2   0x2000             MOVS     R0,#+0
   \   000002B4   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000002B8   0x0006             MOVS     R6,R0
    360          #endif
    361                        if (Status != HAL_OK)
   \   000002BA   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000002BC   0x2E00             CMP      R6,#+0
   \   000002BE   0xD003             BEQ.N    ??RoadBrd_ParseString_38
    362                          return Status;
   \   000002C0   0x0030             MOVS     R0,R6
   \   000002C2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000002C4   0xF004 0xBC97      B.W      ??RoadBrd_ParseString_4
    363                        // Is this a BLE Operation?
    364                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_38: (+1)
   \   000002C8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000002CA   0x2D00             CMP      R5,#+0
   \   000002CC   0xD00A             BEQ.N    ??RoadBrd_ParseString_39
    365                        {
    366                          // Yes...Build and Send BLE Response NOW.
    367                          strcpy( (char *)tempBffr2, "<STATUS>ST_FFTBFFR_DUMP:");
   \   000002CE   0xF8DF 0x1E18      LDR.W    R1,??RoadBrd_ParseString_40
   \   000002D2   0xA80B             ADD      R0,SP,#+44
   \   000002D4   0x.... 0x....      BL       strcpy
    368                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000002D8   0xA80B             ADD      R0,SP,#+44
   \   000002DA   0x.... 0x....      BL       strlen
   \   000002DE   0xA90B             ADD      R1,SP,#+44
   \   000002E0   0x.... 0x....      BL       BGM111_Transmit
    369                        }
    370                        // NOW, Build Data String..
    371                        y=0;
   \                     ??RoadBrd_ParseString_39: (+1)
   \   000002E4   0x2000             MOVS     R0,#+0
   \   000002E6   0x4680             MOV      R8,R0
    372                        sprintf( (char *)tempBffr2, "" );
   \   000002E8   0xA1D9             ADR.N    R1,??RoadBrd_ParseString_41  ;; ""
   \   000002EA   0xA80B             ADD      R0,SP,#+44
   \   000002EC   0x.... 0x....      BL       sprintf
    373                        for (x=0; x<FFT_BUFFER_SIZE; x++)
   \   000002F0   0x2000             MOVS     R0,#+0
   \   000002F2   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_42: (+1)
   \   000002F4   0x2F80             CMP      R7,#+128
   \   000002F6   0xDA30             BGE.N    ??RoadBrd_ParseString_43
    374                        {
    375          //                sprintf( (char *)tempBffr3, "%02x ", BufferPntr[x]);
    376                          sprintf( (char *)tempBffr3, "%04d ", BufferPntr[x]);
   \   000002F8   0x9848             LDR      R0,[SP, #+288]
   \   000002FA   0x57C2             LDRSB    R2,[R0, R7]
   \   000002FC   0xF8DF 0x1DEC      LDR.W    R1,??RoadBrd_ParseString_40+0x4
   \   00000300   0xA82B             ADD      R0,SP,#+172
   \   00000302   0x.... 0x....      BL       sprintf
    377                          strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   00000306   0xA92B             ADD      R1,SP,#+172
   \   00000308   0xA80B             ADD      R0,SP,#+44
   \   0000030A   0x.... 0x....      BL       strcat
    378                          y++;
   \   0000030E   0xF118 0x0801      ADDS     R8,R8,#+1
    379                          if (y>=16)
   \   00000312   0xF1B8 0x0F10      CMP      R8,#+16
   \   00000316   0xDB1E             BLT.N    ??RoadBrd_ParseString_44
    380                          {
    381                            strcat( (char *)tempBffr2, "\r\n" );
   \   00000318   0xA16A             ADR.N    R1,??RoadBrd_ParseString_29  ;; 0x0D, 0x0A, 0x00, 0x00
   \   0000031A   0xA80B             ADD      R0,SP,#+44
   \   0000031C   0x.... 0x....      BL       strcat
    382                            y=0;
   \   00000320   0x2000             MOVS     R0,#+0
   \   00000322   0x4680             MOV      R8,R0
    383           #ifdef NUCLEO
    384                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    385          #else
    386                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000324   0xA90B             ADD      R1,SP,#+44
   \   00000326   0x2000             MOVS     R0,#+0
   \   00000328   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000032C   0x0006             MOVS     R6,R0
    387          #endif
    388                            if (Status != HAL_OK)
   \   0000032E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000330   0x2E00             CMP      R6,#+0
   \   00000332   0xD003             BEQ.N    ??RoadBrd_ParseString_45
    389                              return Status;
   \   00000334   0x0030             MOVS     R0,R6
   \   00000336   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000338   0xF004 0xBC5D      B.W      ??RoadBrd_ParseString_4
    390                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_45: (+1)
   \   0000033C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000033E   0x2D00             CMP      R5,#+0
   \   00000340   0xD005             BEQ.N    ??RoadBrd_ParseString_46
    391                            {
    392                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000342   0xA80B             ADD      R0,SP,#+44
   \   00000344   0x.... 0x....      BL       strlen
   \   00000348   0xA90B             ADD      R1,SP,#+44
   \   0000034A   0x.... 0x....      BL       BGM111_Transmit
    393                            }
    394                            sprintf( (char *)tempBffr2, "" );
   \                     ??RoadBrd_ParseString_46: (+1)
   \   0000034E   0xA1C0             ADR.N    R1,??RoadBrd_ParseString_41  ;; ""
   \   00000350   0xA80B             ADD      R0,SP,#+44
   \   00000352   0x.... 0x....      BL       sprintf
    395                          }
    396                        }
   \                     ??RoadBrd_ParseString_44: (+1)
   \   00000356   0x1C7F             ADDS     R7,R7,#+1
   \   00000358   0xE7CC             B.N      ??RoadBrd_ParseString_42
    397                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_43: (+1)
   \   0000035A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000035C   0x2D00             CMP      R5,#+0
   \   0000035E   0xD00A             BEQ.N    ??RoadBrd_ParseString_47
    398                        {
    399                          strcpy( (char *)tempBffr2, "</STATUS>");
   \   00000360   0xF8DF 0x1DD0      LDR.W    R1,??RoadBrd_ParseString_48
   \   00000364   0xA80B             ADD      R0,SP,#+44
   \   00000366   0x.... 0x....      BL       strcpy
    400                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000036A   0xA80B             ADD      R0,SP,#+44
   \   0000036C   0x.... 0x....      BL       strlen
   \   00000370   0xA90B             ADD      R1,SP,#+44
   \   00000372   0x.... 0x....      BL       BGM111_Transmit
    401                        }
    402                        sprintf( (char *)tempBffr2, "     ---COMPLETE---" );
   \                     ??RoadBrd_ParseString_47: (+1)
   \   00000376   0xF8DF 0x1DC0      LDR.W    R1,??RoadBrd_ParseString_48+0x4
   \   0000037A   0xA80B             ADD      R0,SP,#+44
   \   0000037C   0x.... 0x....      BL       sprintf
    403                        break;
   \   00000380   0xF004 0xBBB5      B.W      ??RoadBrd_ParseString_26
    404          //**************************************************************************************************
    405                      case '6':
    406                        // Clear all buffers. 
    407                        Status = HAL_OK;
   \                     ??RoadBrd_ParseString_11: (+1)
   \   00000384   0x2000             MOVS     R0,#+0
   \   00000386   0x0006             MOVS     R6,R0
    408                        RoadBrdSnd_ClrBffrs();
   \   00000388   0x.... 0x....      BL       RoadBrdSnd_ClrBffrs
    409                        // Is this a BLE Operation?
    410                        if ( BLE_Flag )
   \   0000038C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000038E   0x2D00             CMP      R5,#+0
   \   00000390   0xD00A             BEQ.N    ??RoadBrd_ParseString_49
    411                        {
    412                          // Yes...Build and Send BLE Response NOW.
    413                          strcpy( (char *)tempBffr2, "<STATUS>ST_FFTCLR</STATUS>");
   \   00000392   0xF8DF 0x1E20      LDR.W    R1,??RoadBrd_ParseString_50
   \   00000396   0xA80B             ADD      R0,SP,#+44
   \   00000398   0x.... 0x....      BL       strcpy
    414                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000039C   0xA80B             ADD      R0,SP,#+44
   \   0000039E   0x.... 0x....      BL       strlen
   \   000003A2   0xA90B             ADD      R1,SP,#+44
   \   000003A4   0x.... 0x....      BL       BGM111_Transmit
    415                        }
    416                        strcpy( (char *)tempBffr2, "Road Sound: All buffers cleared.\r\n");;
   \                     ??RoadBrd_ParseString_49: (+1)
   \   000003A8   0xF8DF 0x1E0C      LDR.W    R1,??RoadBrd_ParseString_50+0x4
   \   000003AC   0xA80B             ADD      R0,SP,#+44
   \   000003AE   0x.... 0x....      BL       strcpy
    417                        break;
   \   000003B2   0xF004 0xBB9C      B.W      ??RoadBrd_ParseString_26
    418          //**************************************************************************************************
    419                      case 'A':
    420                        // Barometer. 
    421                        if (Size == 1)
   \                     ??RoadBrd_ParseString_12: (+1)
   \   000003B6   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   000003BA   0x2801             CMP      R0,#+1
   \   000003BC   0xF000 0x8157      BEQ.W    ??RoadBrd_ParseString_51
    422                        {
    423          //------------------ A Command...Read Pressure...PRESS_OUT_XL...PRESS_OUT_L...PRESS_OUT_H     
    424                        }
    425                        else
    426                        {
    427                          switch( tempBffr[1] )
   \   000003C0   0x7860             LDRB     R0,[R4, #+1]
   \   000003C2   0x2836             CMP      R0,#+54
   \   000003C4   0xD039             BEQ.N    ??RoadBrd_ParseString_52
   \   000003C6   0x2838             CMP      R0,#+56
   \   000003C8   0xF000 0x80BA      BEQ.W    ??RoadBrd_ParseString_53
   \   000003CC   0x2839             CMP      R0,#+57
   \   000003CE   0xF000 0x8124      BEQ.W    ??RoadBrd_ParseString_54
   \   000003D2   0x2849             CMP      R0,#+73
   \   000003D4   0xF040 0x8146      BNE.W    ??RoadBrd_ParseString_55
    428                          {
    429          //------------------ AI Command...Initialize Barometer Sensor     
    430                            case 'I':
    431                              // Clean out old pressure.
    432          //                    Status = RoadBrd_Baro_ReadPressure( &PRPMeasure );
    433                              // Clean out old Temp data.
    434          //                    Status = RoadBrd_Baro_ReadTemp( i2cData );
    435                              //************ Wait 50msec.
    436          //                    RoadBrd_Delay(500);  
    437                   
    438                              Status = RoadBrd_Init_Barometer();
   \                     ??RoadBrd_ParseString_56: (+1)
   \   000003D8   0x.... 0x....      BL       RoadBrd_Init_Barometer
   \   000003DC   0x0006             MOVS     R6,R0
    439                              // Is this a BLE Operation?
    440                              if ( BLE_Flag )
   \   000003DE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000003E0   0x2D00             CMP      R5,#+0
   \   000003E2   0xD00A             BEQ.N    ??RoadBrd_ParseString_57
    441                              {
    442                                // Yes...Build and Send BLE Response NOW.
    443                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000003E4   0xF8DF 0x1DD4      LDR.W    R1,??RoadBrd_ParseString_50+0x8
   \   000003E8   0xA80B             ADD      R0,SP,#+44
   \   000003EA   0x.... 0x....      BL       strcpy
    444                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000003EE   0xA80B             ADD      R0,SP,#+44
   \   000003F0   0x.... 0x....      BL       strlen
   \   000003F4   0xA90B             ADD      R1,SP,#+44
   \   000003F6   0x.... 0x....      BL       BGM111_Transmit
    445                              }
    446                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_57: (+1)
   \   000003FA   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000003FC   0x2E00             CMP      R6,#+0
   \   000003FE   0xD105             BNE.N    ??RoadBrd_ParseString_58
    447                              {
    448                                  strcpy( (char *)tempBffr2, "Initialize Barometer Sensor Passed.\r\n");;
   \   00000400   0xF8DF 0x1DBC      LDR.W    R1,??RoadBrd_ParseString_50+0xC
   \   00000404   0xA80B             ADD      R0,SP,#+44
   \   00000406   0x.... 0x....      BL       strcpy
   \   0000040A   0xE015             B.N      ??RoadBrd_ParseString_59
    449                              }
    450                              else
    451                              {
    452                                  strcpy( (char *)tempBffr2, "Initialize Barometer Sensor FAILED.\r\n");
   \                     ??RoadBrd_ParseString_58: (+1)
   \   0000040C   0xF8DF 0x1DB4      LDR.W    R1,??RoadBrd_ParseString_50+0x10
   \   00000410   0xA80B             ADD      R0,SP,#+44
   \   00000412   0x.... 0x....      BL       strcpy
    453                                  Save_Status = Status;
   \   00000416   0xF88D 0x6029      STRB     R6,[SP, #+41]
    454          #ifdef NUCLEO
    455                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    456          #else
    457                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000041A   0xA90B             ADD      R1,SP,#+44
   \   0000041C   0x2000             MOVS     R0,#+0
   \   0000041E   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000422   0x0006             MOVS     R6,R0
    458          #endif
    459                                  if (Status != HAL_OK)
   \   00000424   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000426   0x2E00             CMP      R6,#+0
   \   00000428   0xD003             BEQ.N    ??RoadBrd_ParseString_60
    460                                    return Status;
   \   0000042A   0x0030             MOVS     R0,R6
   \   0000042C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000042E   0xF004 0xBBE2      B.W      ??RoadBrd_ParseString_4
    461                                  else
    462                                    Status = Save_Status;
   \                     ??RoadBrd_ParseString_60: (+1)
   \   00000432   0xF89D 0x0029      LDRB     R0,[SP, #+41]
   \   00000436   0x0006             MOVS     R6,R0
    463                              }
    464                              break;
   \                     ??RoadBrd_ParseString_59: (+1)
   \   00000438   0xE119             B.N      ??RoadBrd_ParseString_51
    465          //------------------ A0 Command...Enable Barometer     
    466          #if 0                  
    467                          case '0':
    468                              Status = RoadBrd_Enable_Barometer();
    469                              // Is this a BLE Operation?
    470                              if ( BLE_Flag )
    471                              {
    472                                // Yes...Build and Send BLE Response NOW.
    473                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
    474                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
    475                              }
    476                              if (Status == HAL_OK)
    477                              {
    478                                  strcpy( (char *)tempBffr2, "Barometer Sensor: Enable Barometer Passed.\r\n");;
    479                              }
    480                              else
    481                              {
    482                                  strcpy( (char *)tempBffr2, "Barometer Sensor: Enable Barometer FAILED.\r\n");;
    483                              }
    484                              break;
    485          //------------------ A1 Command...Disable Barometer     
    486                            case '1':
    487                              Status = RoadBrd_Disable_Barometer();
    488                              // Is this a BLE Operation?
    489                              if ( BLE_Flag )
    490                              {
    491                                // Yes...Build and Send BLE Response NOW.
    492                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
    493                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
    494                              }
    495                              if (Status == HAL_OK)
    496                              {
    497                                  strcpy( (char *)tempBffr2, "Barometer Sensor: Disable Barometer Passed.\r\n");;
    498                              }
    499                              else
    500                              {
    501                                  strcpy( (char *)tempBffr2, "Barometer Sensor: Disable Barometer FAILED.\r\n");;
    502                                  Save_Status = Status;
    503          #ifdef NUCLEO
    504                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    505          #else
    506                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
    507          #endif
    508                                  if (Status != HAL_OK)
    509                                    return Status;
    510                                  else
    511                                    Status = Save_Status;
    512                              }
    513                              break;
    514          //------------------ A2 Command...Start the Barometer but do not wait.     
    515                            case '2':
    516                              Status = RoadBrd_StartSample_Barometer();
    517                              // Is this a BLE Operation?
    518                              if ( BLE_Flag )
    519                              {
    520                                // Yes...Build and Send BLE Response NOW.
    521                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
    522                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
    523                              }
    524                              if (Status == HAL_OK)
    525                              {
    526                                  strcpy( (char *)tempBffr2, "Start the Barometer but do not wait Passed.\r\n");;
    527                              }
    528                              else
    529                              {
    530                                  strcpy( (char *)tempBffr2, "Start the Barometer but do not wait FAILED.\r\n");;
    531                                  Save_Status = Status;
    532          #ifdef NUCLEO
    533                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    534          #else
    535                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
    536          #endif
    537                                  if (Status != HAL_OK)
    538                                    return Status;
    539                                  else
    540                                    Status = Save_Status;
    541                              }
    542                              break;
    543          //------------------ A3 Command...Start the Barometer and wait for response.    
    544                            case '3':
    545                              Status = RoadBrd_StartSample_BarometerWait();
    546                              // Is this a BLE Operation?
    547                              if ( BLE_Flag )
    548                              {
    549                                // Yes...Build and Send BLE Response NOW.
    550                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
    551                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
    552                              }
    553                              if (Status == HAL_OK)
    554                              {
    555                                  strcpy( (char *)tempBffr2, "Start the Barometer and wait for response Passed.\r\n");;
    556                              }
    557                              else
    558                              {
    559                                  strcpy( (char *)tempBffr2, "Start the Barometer and wait for response FAILED.\r\n");;
    560                                  Save_Status = Status;
    561          #ifdef NUCLEO
    562                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    563          #else
    564                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
    565          #endif
    566                                  if (Status != HAL_OK)
    567                                    return Status;
    568                                  else
    569                                    Status = Save_Status;
    570                              }
    571                              break;
    572          //------------------ A4 Command...Return Status    
    573                            case '4':
    574                              // Is this a BLE Operation?
    575                              if ( BLE_Flag )
    576                              {
    577                                // Yes...Build and Send BLE Response NOW.
    578                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
    579                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
    580                              }
    581                              Status = RoadBrd_Barometer_Status( &PRMeasure );
    582                              if (Status == HAL_OK)
    583                              {
    584                                sprintf( (char *)tempBffr2, "Barometer Sensor Status: %02x / ", PRMeasure.Status );
    585                                strcat( (char *)tempBffr2, (char *)PRMeasure.Raw );
    586                                strcat( (char *)tempBffr2, "\r\n" );
    587                              }
    588                              break;
    589          //------------------ A5 Command...Wait for Pressure to be complete. 
    590                            case '5':
    591                              Status = RoadBrd_WaitForPressure( (uint16_t)BARO_WAITCNT );
    592                              // Is this a BLE Operation?
    593                              if ( BLE_Flag )
    594                              {
    595                                // Yes...Build and Send BLE Response NOW.
    596                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
    597                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
    598                              }
    599                              if (Status == HAL_OK)
    600                              {
    601                                  strcpy( (char *)tempBffr2, "Wait for Pressure to be complete Passed.\r\n");;
    602                              }
    603                              else
    604                              {
    605                                  strcpy( (char *)tempBffr2, "Wait for Pressure to be complete FAILED.\r\n");;
    606                                  Save_Status = Status;
    607          #ifdef NUCLEO
    608                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    609          #else
    610                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
    611          #endif
    612                                  if (Status != HAL_OK)
    613                                    return Status;
    614                                  else
    615                                    Status = Save_Status;
    616                              }
    617                              break;
    618          #endif
    619          //------------------ A6 Command...Read Pressure...PRESS_OUT_XL...PRESS_OUT_L...PRESS_OUT_H     
    620                            case '6':
    621                              //Status = RoadBrd_Barometer_Status( &PRMeasure );
    622                              Status = RoadBrd_Baro_ReadPressure( &PRPMeasure );
   \                     ??RoadBrd_ParseString_52: (+1)
   \   0000043A   0xA8AE             ADD      R0,SP,#+696
   \   0000043C   0x.... 0x....      BL       RoadBrd_Baro_ReadPressure
   \   00000440   0x0006             MOVS     R6,R0
    623                              if (Status == HAL_OK)
   \   00000442   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000444   0x2E00             CMP      R6,#+0
   \   00000446   0xD104             BNE.N    ??RoadBrd_ParseString_61
    624                                Status = RoadBrd_Baro_ReadPressure_Scaled( &PRPMeasureScaled );
   \   00000448   0xA8FF             ADD      R0,SP,#+1020
   \   0000044A   0x3038             ADDS     R0,R0,#+56
   \   0000044C   0x.... 0x....      BL       RoadBrd_Baro_ReadPressure_Scaled
   \   00000450   0x0006             MOVS     R6,R0
    625                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_61: (+1)
   \   00000452   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000454   0x2E00             CMP      R6,#+0
   \   00000456   0xD15C             BNE.N    ??RoadBrd_ParseString_62
    626                              {
    627                                strcpy( (char *)tempBffr2, "A6 Command...Read Pressure Passed.\r\n");;
   \   00000458   0xF8DF 0x1E04      LDR.W    R1,??RoadBrd_ParseString_63
   \   0000045C   0xA80B             ADD      R0,SP,#+44
   \   0000045E   0x.... 0x....      BL       strcpy
    628          #ifdef NUCLEO
    629                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    630          #else
    631                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000462   0xA90B             ADD      R1,SP,#+44
   \   00000464   0x2000             MOVS     R0,#+0
   \   00000466   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000046A   0x0006             MOVS     R6,R0
    632          #endif
    633                                if (Status != HAL_OK)
   \   0000046C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000046E   0x2E00             CMP      R6,#+0
   \   00000470   0xD003             BEQ.N    ??RoadBrd_ParseString_64
    634                                  return Status;
   \   00000472   0x0030             MOVS     R0,R6
   \   00000474   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000476   0xF004 0xBBBE      B.W      ??RoadBrd_ParseString_4
    635                                // NOW, Build Data String..
    636                                sprintf( (char *)tempBffr2, " PRESSURE(PRESS_OUT_H...PRESS_OUT_L...PRESS_OUT_XL)\r\n" );
   \                     ??RoadBrd_ParseString_64: (+1)
   \   0000047A   0xF8DF 0x1DE8      LDR.W    R1,??RoadBrd_ParseString_63+0x4
   \   0000047E   0xA80B             ADD      R0,SP,#+44
   \   00000480   0x.... 0x....      BL       sprintf
    637          #ifdef NUCLEO
    638                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    639          #else
    640                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000484   0xA90B             ADD      R1,SP,#+44
   \   00000486   0x2000             MOVS     R0,#+0
   \   00000488   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000048C   0x0006             MOVS     R6,R0
    641          #endif
    642                                if (Status != HAL_OK)
   \   0000048E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000490   0x2E00             CMP      R6,#+0
   \   00000492   0xD003             BEQ.N    ??RoadBrd_ParseString_65
    643                                  return Status;
   \   00000494   0x0030             MOVS     R0,R6
   \   00000496   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000498   0xF004 0xBBAD      B.W      ??RoadBrd_ParseString_4
    644                               
    645                                // Now show Decimal value of items.
    646                                sprintf( (char *)tempBffr2, " PRESSURE: %s/%s\r\n", (char *)PRPMeasure.Pressure, (char *)PRPMeasureScaled.Pressure );
   \                     ??RoadBrd_ParseString_65: (+1)
   \   0000049C   0xABFF             ADD      R3,SP,#+1020
   \   0000049E   0x3338             ADDS     R3,R3,#+56
   \   000004A0   0xAAAE             ADD      R2,SP,#+696
   \   000004A2   0xF8DF 0x1DC4      LDR.W    R1,??RoadBrd_ParseString_63+0x8
   \   000004A6   0xA80B             ADD      R0,SP,#+44
   \   000004A8   0x.... 0x....      BL       sprintf
    647          #ifdef NUCLEO
    648                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    649          #else
    650                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000004AC   0xA90B             ADD      R1,SP,#+44
   \   000004AE   0x2000             MOVS     R0,#+0
   \   000004B0   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000004B4   0x0006             MOVS     R6,R0
    651          #endif
    652                                if (Status != HAL_OK)
   \   000004B6   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000004B8   0x2E00             CMP      R6,#+0
   \   000004BA   0xD005             BEQ.N    ??RoadBrd_ParseString_66
    653                                  return Status;
   \   000004BC   0x0030             MOVS     R0,R6
   \   000004BE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000004C0   0xF004 0xBB99      B.W      ??RoadBrd_ParseString_4
   \                     ??RoadBrd_ParseString_29:
   \   000004C4   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
    654                                // Is this a BLE Operation?
    655                                if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_66: (+1)
   \   000004C8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000004CA   0x2D00             CMP      R5,#+0
   \   000004CC   0xD00D             BEQ.N    ??RoadBrd_ParseString_67
    656                                {
    657                                  // Yes...Build and Send BLE Response NOW.
    658                                  sprintf( (char *)tempBffr2, "<STATUS>PRESSURE: %s/%s</STATUS>", (char *)PRPMeasure.Pressure, (char *)PRPMeasureScaled.Pressure );
   \   000004CE   0xABFF             ADD      R3,SP,#+1020
   \   000004D0   0x3338             ADDS     R3,R3,#+56
   \   000004D2   0xAAAE             ADD      R2,SP,#+696
   \   000004D4   0xF8DF 0x1D98      LDR.W    R1,??RoadBrd_ParseString_63+0x10
   \   000004D8   0xA80B             ADD      R0,SP,#+44
   \   000004DA   0x.... 0x....      BL       sprintf
    659                                  BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000004DE   0xA80B             ADD      R0,SP,#+44
   \   000004E0   0x.... 0x....      BL       strlen
   \   000004E4   0xA90B             ADD      R1,SP,#+44
   \   000004E6   0x.... 0x....      BL       BGM111_Transmit
    660                                }
    661                                // Now show hex value of items.
    662                                sprintf( (char *)tempBffr2, " PRESSURE:  " );
   \                     ??RoadBrd_ParseString_67: (+1)
   \   000004EA   0xF8DF 0x1D88      LDR.W    R1,??RoadBrd_ParseString_63+0x14
   \   000004EE   0xA80B             ADD      R0,SP,#+44
   \   000004F0   0x.... 0x....      BL       sprintf
    663                                strcat( (char *)tempBffr2, (char *)PRPMeasure.Raw );
   \   000004F4   0xA9B1             ADD      R1,SP,#+708
   \   000004F6   0xA80B             ADD      R0,SP,#+44
   \   000004F8   0x.... 0x....      BL       strcat
    664                                sprintf( (char *)tempBffr3, "  -  %08x\r\n", PRPMeasure.RawC);
   \   000004FC   0x9AB4             LDR      R2,[SP, #+720]
   \   000004FE   0xF8DF 0x1D78      LDR.W    R1,??RoadBrd_ParseString_63+0x18
   \   00000502   0xA82B             ADD      R0,SP,#+172
   \   00000504   0x.... 0x....      BL       sprintf
    665                                strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   00000508   0xA92B             ADD      R1,SP,#+172
   \   0000050A   0xA80B             ADD      R0,SP,#+44
   \   0000050C   0x.... 0x....      BL       strcat
   \   00000510   0xE015             B.N      ??RoadBrd_ParseString_68
    666                              }
    667                              else
    668                              {
    669                                  strcpy( (char *)tempBffr2, "A6 Command...Read Pressure FAILED.\r\n");;
   \                     ??RoadBrd_ParseString_62: (+1)
   \   00000512   0xF8DF 0x1D68      LDR.W    R1,??RoadBrd_ParseString_63+0x1C
   \   00000516   0xA80B             ADD      R0,SP,#+44
   \   00000518   0x.... 0x....      BL       strcpy
    670                                  Save_Status = Status;
   \   0000051C   0xF88D 0x6029      STRB     R6,[SP, #+41]
    671          #ifdef NUCLEO
    672                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    673          #else
    674                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000520   0xA90B             ADD      R1,SP,#+44
   \   00000522   0x2000             MOVS     R0,#+0
   \   00000524   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000528   0x0006             MOVS     R6,R0
    675          #endif
    676                                  if (Status != HAL_OK)
   \   0000052A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000052C   0x2E00             CMP      R6,#+0
   \   0000052E   0xD003             BEQ.N    ??RoadBrd_ParseString_69
    677                                    return Status;
   \   00000530   0x0030             MOVS     R0,R6
   \   00000532   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000534   0xF004 0xBB5F      B.W      ??RoadBrd_ParseString_4
    678                                  else
    679                                    Status = Save_Status;
   \                     ??RoadBrd_ParseString_69: (+1)
   \   00000538   0xF89D 0x0029      LDRB     R0,[SP, #+41]
   \   0000053C   0x0006             MOVS     R6,R0
    680                              }
    681                              break;
   \                     ??RoadBrd_ParseString_68: (+1)
   \   0000053E   0xE096             B.N      ??RoadBrd_ParseString_51
    682          
    683          //------------------ A8 Command...Read Temperature....TEMP_OUT_L...TEMP_OUT_H    
    684                            case '8':
    685                              Status = RoadBrd_Baro_ReadTemp( &TMeasure );
   \                     ??RoadBrd_ParseString_53: (+1)
   \   00000540   0xA83C             ADD      R0,SP,#+240
   \   00000542   0x.... 0x....      BL       RoadBrd_Baro_ReadTemp
   \   00000546   0x0006             MOVS     R6,R0
    686                              if (Status == HAL_OK)
   \   00000548   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000054A   0x2E00             CMP      R6,#+0
   \   0000054C   0xD127             BNE.N    ??RoadBrd_ParseString_70
    687                              {
    688                                // Send string to UART..
    689                                strcpy( (char *)tempBffr2, "A8 Command...Read Temperature Passed.\r\n");
   \   0000054E   0xF8DF 0x1E0C      LDR.W    R1,??RoadBrd_ParseString_71
   \   00000552   0xA80B             ADD      R0,SP,#+44
   \   00000554   0x.... 0x....      BL       strcpy
    690          #ifdef NUCLEO
    691                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    692          #else
    693                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000558   0xA90B             ADD      R1,SP,#+44
   \   0000055A   0x2000             MOVS     R0,#+0
   \   0000055C   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000560   0x0006             MOVS     R6,R0
    694          #endif
    695                                if (Status != HAL_OK)
   \   00000562   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000564   0x2E00             CMP      R6,#+0
   \   00000566   0xD003             BEQ.N    ??RoadBrd_ParseString_72
    696                                  return Status;
   \   00000568   0x0030             MOVS     R0,R6
   \   0000056A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000056C   0xF004 0xBB43      B.W      ??RoadBrd_ParseString_4
    697                                // NOW, Build Data String..
    698                                sprintf( (char *)tempBffr2, "     TEMP DATA: " );
   \                     ??RoadBrd_ParseString_72: (+1)
   \   00000570   0xF8DF 0x1DEC      LDR.W    R1,??RoadBrd_ParseString_71+0x4
   \   00000574   0xA80B             ADD      R0,SP,#+44
   \   00000576   0x.... 0x....      BL       sprintf
    699                                strcat( (char *)tempBffr2, (char *)TMeasure.Raw );
   \   0000057A   0xF10D 0x01FE      ADD      R1,SP,#+254
   \   0000057E   0xA80B             ADD      R0,SP,#+44
   \   00000580   0x.... 0x....      BL       strcat
    700                                strcat( (char *)tempBffr2, "\r\n" );
   \   00000584   0xA1DB             ADR.N    R1,??RoadBrd_ParseString_73  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000586   0xA80B             ADD      R0,SP,#+44
   \   00000588   0x.... 0x....      BL       strcat
    701                              }
    702                              else
    703                                break;
    704          #ifdef NUCLEO
    705                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    706          #else
    707                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000058C   0xA90B             ADD      R1,SP,#+44
   \   0000058E   0x2000             MOVS     R0,#+0
   \   00000590   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000594   0x0006             MOVS     R6,R0
    708          #endif
    709                              if (Status != HAL_OK)
   \   00000596   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000598   0x2E00             CMP      R6,#+0
   \   0000059A   0xD101             BNE.N    ??RoadBrd_ParseString_74
   \   0000059C   0xE004             B.N      ??RoadBrd_ParseString_75
   \                     ??RoadBrd_ParseString_70: (+1)
   \   0000059E   0xE066             B.N      ??RoadBrd_ParseString_51
    710                                return Status;
   \                     ??RoadBrd_ParseString_74: (+1)
   \   000005A0   0x0030             MOVS     R0,R6
   \   000005A2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000005A4   0xF004 0xBB27      B.W      ??RoadBrd_ParseString_4
    711                              // NOW, Build Data String..
    712                              sprintf( (char *)tempBffr2, "     TEMP DATA(Decimal): %d\r\n", TMeasure.RawC );
   \                     ??RoadBrd_ParseString_75: (+1)
   \   000005A8   0xF8BD 0x2106      LDRH     R2,[SP, #+262]
   \   000005AC   0xF8DF 0x1DB4      LDR.W    R1,??RoadBrd_ParseString_71+0x8
   \   000005B0   0xA80B             ADD      R0,SP,#+44
   \   000005B2   0x.... 0x....      BL       sprintf
    713          #ifdef NUCLEO
    714                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    715          #else
    716                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000005B6   0xA90B             ADD      R1,SP,#+44
   \   000005B8   0x2000             MOVS     R0,#+0
   \   000005BA   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000005BE   0x0006             MOVS     R6,R0
    717          #endif
    718                              if (Status != HAL_OK)
   \   000005C0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000005C2   0x2E00             CMP      R6,#+0
   \   000005C4   0xD003             BEQ.N    ??RoadBrd_ParseString_76
    719                                return Status;
   \   000005C6   0x0030             MOVS     R0,R6
   \   000005C8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000005CA   0xF004 0xBB14      B.W      ??RoadBrd_ParseString_4
    720                              // Is this a BLE Operation?
    721                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_76: (+1)
   \   000005CE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000005D0   0x2D00             CMP      R5,#+0
   \   000005D2   0xD00A             BEQ.N    ??RoadBrd_ParseString_77
    722                              {
    723                                // Yes...Build and Send BLE Response NOW.
    724                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000005D4   0xF8DF 0x1BE4      LDR.W    R1,??RoadBrd_ParseString_50+0x8
   \   000005D8   0xA80B             ADD      R0,SP,#+44
   \   000005DA   0x.... 0x....      BL       strcpy
    725                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000005DE   0xA80B             ADD      R0,SP,#+44
   \   000005E0   0x.... 0x....      BL       strlen
   \   000005E4   0xA90B             ADD      R1,SP,#+44
   \   000005E6   0x.... 0x....      BL       BGM111_Transmit
    726                              }
    727                              // Now calculate Celcius and Farenheit Temp.
    728                              sprintf( (char *)tempBffr2, "     TempC: " );
   \                     ??RoadBrd_ParseString_77: (+1)
   \   000005EA   0xF8DF 0x1E1C      LDR.W    R1,??RoadBrd_ParseString_78
   \   000005EE   0xA80B             ADD      R0,SP,#+44
   \   000005F0   0x.... 0x....      BL       sprintf
    729                              strcat( (char *)tempBffr2, (char *)TMeasure.TempC );
   \   000005F4   0xA93C             ADD      R1,SP,#+240
   \   000005F6   0xA80B             ADD      R0,SP,#+44
   \   000005F8   0x.... 0x....      BL       strcat
    730                              strcat( (char *)tempBffr2, "     TempF: " );
   \   000005FC   0xF8DF 0x1E0C      LDR.W    R1,??RoadBrd_ParseString_78+0x4
   \   00000600   0xA80B             ADD      R0,SP,#+44
   \   00000602   0x.... 0x....      BL       strcat
    731                              strcat( (char *)tempBffr2, (char *)TMeasure.TempF );
   \   00000606   0xF10D 0x01F7      ADD      R1,SP,#+247
   \   0000060A   0xA80B             ADD      R0,SP,#+44
   \   0000060C   0x.... 0x....      BL       strcat
    732                              strcat( (char *)tempBffr2, "\r\n" );
   \   00000610   0xA1B8             ADR.N    R1,??RoadBrd_ParseString_73  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000612   0xA80B             ADD      R0,SP,#+44
   \   00000614   0x.... 0x....      BL       strcat
    733          /*                    if (Status == HAL_OK)
    734                              {
    735                                strcpy( (char *)tempBffr2, "A8 Command...Read Temperature Passed.\r\n");;
    736          #ifdef NUCLEO
    737                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    738          #else
    739                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
    740          #endif
    741                                if (Status != HAL_OK)
    742                                  return Status;
    743                                // NOW, Build Data String..
    744                                sprintf( (char *)tempBffr2, " Temperature(TEMP_OUT_L...TEMP_OUT_H)\r\n" );
    745          #ifdef NUCLEO
    746                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    747          #else
    748                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
    749          #endif
    750                                if (Status != HAL_OK)
    751                                  return Status;
    752                                sprintf( (char *)tempBffr2, " Temperature:  %02x   %02x\r\n", i2cData[0], i2cData[1] );
    753                              }
    754                              else
    755                              {
    756                                  strcpy( (char *)tempBffr2, "A8 Command...Read Temperature FAILED.\r\n");;
    757                                  Save_Status = Status;
    758          #ifdef NUCLEO
    759                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    760          #else
    761                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
    762          #endif
    763                                  if (Status != HAL_OK)
    764                                    return Status;
    765                                  else
    766                                    Status = Save_Status;
    767                              }*/
    768                              break;
   \   00000618   0xE029             B.N      ??RoadBrd_ParseString_51
    769          //------------------ A9 Command...Test and Verify WHO_AM_I     
    770                            case '9':
    771                              Status = RoadBrd_TestandRead_Barometer();
   \                     ??RoadBrd_ParseString_54: (+1)
   \   0000061A   0x.... 0x....      BL       RoadBrd_TestandRead_Barometer
   \   0000061E   0x0006             MOVS     R6,R0
    772                              // Is this a BLE Operation?
    773                              if ( BLE_Flag )
   \   00000620   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000622   0x2D00             CMP      R5,#+0
   \   00000624   0xD00A             BEQ.N    ??RoadBrd_ParseString_79
    774                              {
    775                                // Yes...Build and Send BLE Response NOW.
    776                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00000626   0xF8DF 0x1B94      LDR.W    R1,??RoadBrd_ParseString_50+0x8
   \   0000062A   0xA80B             ADD      R0,SP,#+44
   \   0000062C   0x.... 0x....      BL       strcpy
    777                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000630   0xA80B             ADD      R0,SP,#+44
   \   00000632   0x.... 0x....      BL       strlen
   \   00000636   0xA90B             ADD      R1,SP,#+44
   \   00000638   0x.... 0x....      BL       BGM111_Transmit
    778                              }
    779                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_79: (+1)
   \   0000063C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000063E   0x2E00             CMP      R6,#+0
   \   00000640   0xD108             BNE.N    ??RoadBrd_ParseString_80
    780                              {
    781                                  strcpy( (char *)tempBffr2, "Barometer Sensor: WHO_AM_I Passed.\r\n");
   \   00000642   0xF8DF 0x1E18      LDR.W    R1,??RoadBrd_ParseString_81
   \   00000646   0xA80B             ADD      R0,SP,#+44
   \   00000648   0x.... 0x....      BL       strcpy
   \   0000064C   0xE009             B.N      ??RoadBrd_ParseString_82
   \   0000064E   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_41:
   \   00000650   0x00 0x00          DC8      "",0x0,0x0,0x0
   \              0x00 0x00    
    782                              }
    783                              else
    784                              {
    785                                  strcpy( (char *)tempBffr2, "Barometer Sensor: WHO_AM_I FAILED.\r\n");
   \                     ??RoadBrd_ParseString_80: (+1)
   \   00000654   0xF8DF 0x1E08      LDR.W    R1,??RoadBrd_ParseString_81+0x4
   \   00000658   0xA80B             ADD      R0,SP,#+44
   \   0000065A   0x.... 0x....      BL       strcpy
    786                                  Status = HAL_OK;
   \   0000065E   0x2000             MOVS     R0,#+0
   \   00000660   0x0006             MOVS     R6,R0
    787                              }
    788                              break;
   \                     ??RoadBrd_ParseString_82: (+1)
   \   00000662   0xE004             B.N      ??RoadBrd_ParseString_51
    789                            default:
    790                              strcpy( (char *)tempBffr2, "ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_55: (+1)
   \   00000664   0xF8DF 0x1DFC      LDR.W    R1,??RoadBrd_ParseString_81+0x8
   \   00000668   0xA80B             ADD      R0,SP,#+44
   \   0000066A   0x.... 0x....      BL       strcpy
    791                              break;
    792                          } //EndSwitch
    793                        } //EndElse (Size == 1)
    794                        break;
   \                     ??RoadBrd_ParseString_51: (+1)
   \   0000066E   0xF004 0xBA3E      B.W      ??RoadBrd_ParseString_26
    795          //**************************************************************************************************
    796                      case 'B':
    797                        // Read Cool Eye. 
    798          //++++++++++++++++++++++++++++++++++++++++++  Cool Eye/Grid Eye Monitor Commands.
    799                        if (Size == 1)
   \                     ??RoadBrd_ParseString_13: (+1)
   \   00000672   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   00000676   0x2801             CMP      R0,#+1
   \   00000678   0xF040 0x8151      BNE.W    ??RoadBrd_ParseString_83
    800                        {
    801          //------------------ B Command: Read Cool Eye/Grid Eye Values      
    802                          // Read Cool Eye/Grid Eye Values.....
    803                          if ( Get_DriverStates( GRIDEYE_MNTR_TASK ))
   \   0000067C   0x2005             MOVS     R0,#+5
   \   0000067E   0x.... 0x....      BL       Get_DriverStates
   \   00000682   0x2800             CMP      R0,#+0
   \   00000684   0xD00B             BEQ.N    ??RoadBrd_ParseString_84
    804                          {
    805                            Status = RoadBrd_GridEye_ReadValues( &GridMeasure );
   \   00000686   0xA85B             ADD      R0,SP,#+364
   \   00000688   0x.... 0x....      BL       RoadBrd_GridEye_ReadValues
   \   0000068C   0x0006             MOVS     R6,R0
    806                            if (Status == HAL_OK)
   \   0000068E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000690   0x2E00             CMP      R6,#+0
   \   00000692   0xD117             BNE.N    ??RoadBrd_ParseString_85
    807                              Status = RoadBrd_GridEye_ReadValues_Scaled( &GridMeasureScaled );
   \   00000694   0xA8D7             ADD      R0,SP,#+860
   \   00000696   0x.... 0x....      BL       RoadBrd_GridEye_ReadValues_Scaled
   \   0000069A   0x0006             MOVS     R6,R0
   \   0000069C   0xE012             B.N      ??RoadBrd_ParseString_85
    808                          }
    809                          else if ( Get_DriverStates( COOLEYE_MNTR_TASK ))
   \                     ??RoadBrd_ParseString_84: (+1)
   \   0000069E   0x2006             MOVS     R0,#+6
   \   000006A0   0x.... 0x....      BL       Get_DriverStates
   \   000006A4   0x2800             CMP      R0,#+0
   \   000006A6   0xD00B             BEQ.N    ??RoadBrd_ParseString_86
    810                          {
    811                            Status = RoadBrd_CoolEye_ReadValues( &GridMeasure );
   \   000006A8   0xA85B             ADD      R0,SP,#+364
   \   000006AA   0x.... 0x....      BL       RoadBrd_CoolEye_ReadValues
   \   000006AE   0x0006             MOVS     R6,R0
    812                            if (Status == HAL_OK)
   \   000006B0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000006B2   0x2E00             CMP      R6,#+0
   \   000006B4   0xD106             BNE.N    ??RoadBrd_ParseString_85
    813                              Status = RoadBrd_CoolEye_ReadValues_Scaled( &GridMeasureScaled );
   \   000006B6   0xA8D7             ADD      R0,SP,#+860
   \   000006B8   0x.... 0x....      BL       RoadBrd_CoolEye_ReadValues_Scaled
   \   000006BC   0x0006             MOVS     R6,R0
   \   000006BE   0xE001             B.N      ??RoadBrd_ParseString_85
    814                          }
    815                          else
    816                            Status = HAL_ERROR;
   \                     ??RoadBrd_ParseString_86: (+1)
   \   000006C0   0x2001             MOVS     R0,#+1
   \   000006C2   0x0006             MOVS     R6,R0
    817                          
    818                          // Is this a BLE Operation?
    819                          if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_85: (+1)
   \   000006C4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000006C6   0x2D00             CMP      R5,#+0
   \   000006C8   0xD00A             BEQ.N    ??RoadBrd_ParseString_87
    820                          {
    821                            // Yes...Build and Send BLE Response NOW.
    822                            strcpy( (char *)tempBffr2, "<STATUS>ST_THERMAL_DUMP:");
   \   000006CA   0xF8DF 0x1E2C      LDR.W    R1,??RoadBrd_ParseString_88
   \   000006CE   0xA80B             ADD      R0,SP,#+44
   \   000006D0   0x.... 0x....      BL       strcpy
    823                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000006D4   0xA80B             ADD      R0,SP,#+44
   \   000006D6   0x.... 0x....      BL       strlen
   \   000006DA   0xA90B             ADD      R1,SP,#+44
   \   000006DC   0x.... 0x....      BL       BGM111_Transmit
    824                          }
    825                          if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_87: (+1)
   \   000006E0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000006E2   0x2E00             CMP      R6,#+0
   \   000006E4   0xF040 0x8108      BNE.W    ??RoadBrd_ParseString_89
    826                          {
    827                            // Send string to UART..
    828                            strcpy( (char *)tempBffr2, "Voltage Monitor/Shunt Voltage...\r\n");
   \   000006E8   0xF8DF 0x1E10      LDR.W    R1,??RoadBrd_ParseString_88+0x4
   \   000006EC   0xA80B             ADD      R0,SP,#+44
   \   000006EE   0x.... 0x....      BL       strcpy
    829          #ifdef NUCLEO
    830                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    831          #else
    832                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000006F2   0xA90B             ADD      R1,SP,#+44
   \   000006F4   0x2000             MOVS     R0,#+0
   \   000006F6   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000006FA   0x0006             MOVS     R6,R0
    833          #endif
    834                            if (Status != HAL_OK)
   \   000006FC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000006FE   0x2E00             CMP      R6,#+0
   \   00000700   0xD003             BEQ.N    ??RoadBrd_ParseString_90
    835                              return Status;
   \   00000702   0x0030             MOVS     R0,R6
   \   00000704   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000706   0xF004 0xBA76      B.W      ??RoadBrd_ParseString_4
    836                            // NOW, Build Data String..
    837                            for (x=0; x<9; x++)
   \                     ??RoadBrd_ParseString_90: (+1)
   \   0000070A   0x2000             MOVS     R0,#+0
   \   0000070C   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_91: (+1)
   \   0000070E   0x2F09             CMP      R7,#+9
   \   00000710   0xF280 0x80DE      BGE.W    ??RoadBrd_ParseString_92
    838                            {
    839                              // Build String
    840                              switch(x)
   \   00000714   0x2F00             CMP      R7,#+0
   \   00000716   0xD00F             BEQ.N    ??RoadBrd_ParseString_93
   \   00000718   0x2F02             CMP      R7,#+2
   \   0000071A   0xD035             BEQ.N    ??RoadBrd_ParseString_94
   \   0000071C   0xD320             BCC.N    ??RoadBrd_ParseString_95
   \   0000071E   0x2F04             CMP      R7,#+4
   \   00000720   0xD05A             BEQ.N    ??RoadBrd_ParseString_96
   \   00000722   0xD345             BCC.N    ??RoadBrd_ParseString_97
   \   00000724   0x2F06             CMP      R7,#+6
   \   00000726   0xF000 0x807F      BEQ.W    ??RoadBrd_ParseString_98
   \   0000072A   0xD369             BCC.N    ??RoadBrd_ParseString_99
   \   0000072C   0x2F08             CMP      R7,#+8
   \   0000072E   0xF000 0x80A4      BEQ.W    ??RoadBrd_ParseString_100
   \   00000732   0xF0C0 0x808D      BCC.W    ??RoadBrd_ParseString_101
   \   00000736   0xE0B4             B.N      ??RoadBrd_ParseString_102
    841                              {
    842                                case 0: //Thermistor Values
    843                                  sprintf( (char *)tempBffr2, "     Thermistor DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.Thermistor.Raw,
    844                                                                                                         GridMeasure.Thermistor.TempC,GridMeasureScaled.Thermistor.TempC,
    845                                                                                                         GridMeasure.Thermistor.TempF,GridMeasureScaled.Thermistor.TempF,
    846                                                                                                         GridMeasure.Thermistor.RawC );
   \                     ??RoadBrd_ParseString_93: (+1)
   \   00000738   0xF8BD 0x0182      LDRH     R0,[SP, #+386]
   \   0000073C   0x9003             STR      R0,[SP, #+12]
   \   0000073E   0xA8D8             ADD      R0,SP,#+864
   \   00000740   0x1CC0             ADDS     R0,R0,#+3
   \   00000742   0x9002             STR      R0,[SP, #+8]
   \   00000744   0xA85C             ADD      R0,SP,#+368
   \   00000746   0x1CC0             ADDS     R0,R0,#+3
   \   00000748   0x9001             STR      R0,[SP, #+4]
   \   0000074A   0xA8D7             ADD      R0,SP,#+860
   \   0000074C   0x9000             STR      R0,[SP, #+0]
   \   0000074E   0xAB5B             ADD      R3,SP,#+364
   \   00000750   0xF50D 0x72BD      ADD      R2,SP,#+378
   \   00000754   0xF8DF 0x1E0C      LDR.W    R1,??RoadBrd_ParseString_103
   \   00000758   0xA80B             ADD      R0,SP,#+44
   \   0000075A   0x.... 0x....      BL       sprintf
    847          //                        sprintf( (char *)tempBffr2, "     Thermistor DATA: %s   %s   %s   %d\r\n", GridMeasure.Thermistor.Raw,
    848          //                                                                                               GridMeasure.Thermistor.TempC,
    849          //                                                                                               GridMeasure.Thermistor.TempF,
    850          //                                                                                               GridMeasure.Thermistor.RawC );
    851                                  break;
   \   0000075E   0xE0A0             B.N      ??RoadBrd_ParseString_102
    852                                case 1: //GridEye1 Values
    853                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye1.Raw,
    854                                                                                                         GridMeasure.GridEye1.TempC,GridMeasureScaled.GridEye1.TempC,
    855                                                                                                         GridMeasure.GridEye1.TempF,GridMeasureScaled.GridEye1.TempF,
    856                                                                                                         GridMeasure.GridEye1.RawC );
   \                     ??RoadBrd_ParseString_95: (+1)
   \   00000760   0xF8BD 0x019A      LDRH     R0,[SP, #+410]
   \   00000764   0x9003             STR      R0,[SP, #+12]
   \   00000766   0xA8DE             ADD      R0,SP,#+888
   \   00000768   0x1CC0             ADDS     R0,R0,#+3
   \   0000076A   0x9002             STR      R0,[SP, #+8]
   \   0000076C   0xA862             ADD      R0,SP,#+392
   \   0000076E   0x1CC0             ADDS     R0,R0,#+3
   \   00000770   0x9001             STR      R0,[SP, #+4]
   \   00000772   0xA8DD             ADD      R0,SP,#+884
   \   00000774   0x9000             STR      R0,[SP, #+0]
   \   00000776   0xAB61             ADD      R3,SP,#+388
   \   00000778   0xF50D 0x72C9      ADD      R2,SP,#+402
   \   0000077C   0xF8DF 0x1DE8      LDR.W    R1,??RoadBrd_ParseString_103+0x4
   \   00000780   0xA80B             ADD      R0,SP,#+44
   \   00000782   0x.... 0x....      BL       sprintf
    857          //                        sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye1.Raw,
    858          //                                                                                               GridMeasure.GridEye1.TempC,
    859          //                                                                                               GridMeasure.GridEye1.TempF,
    860          //                                                                                               GridMeasure.GridEye1.RawC );
    861                                  break;
   \   00000786   0xE08C             B.N      ??RoadBrd_ParseString_102
    862                                case 2: //GridEye2 Values
    863                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye2.Raw,
    864                                                                                                         GridMeasure.GridEye2.TempC,GridMeasureScaled.GridEye2.TempC,
    865                                                                                                         GridMeasure.GridEye2.TempF,GridMeasureScaled.GridEye2.TempF,
    866                                                                                                         GridMeasure.GridEye2.RawC );
   \                     ??RoadBrd_ParseString_94: (+1)
   \   00000788   0xF8BD 0x01B2      LDRH     R0,[SP, #+434]
   \   0000078C   0x9003             STR      R0,[SP, #+12]
   \   0000078E   0xA8E4             ADD      R0,SP,#+912
   \   00000790   0x1CC0             ADDS     R0,R0,#+3
   \   00000792   0x9002             STR      R0,[SP, #+8]
   \   00000794   0xA868             ADD      R0,SP,#+416
   \   00000796   0x1CC0             ADDS     R0,R0,#+3
   \   00000798   0x9001             STR      R0,[SP, #+4]
   \   0000079A   0xA8E3             ADD      R0,SP,#+908
   \   0000079C   0x9000             STR      R0,[SP, #+0]
   \   0000079E   0xAB67             ADD      R3,SP,#+412
   \   000007A0   0xF50D 0x72D5      ADD      R2,SP,#+426
   \   000007A4   0xF8DF 0x1DC0      LDR.W    R1,??RoadBrd_ParseString_103+0x4
   \   000007A8   0xA80B             ADD      R0,SP,#+44
   \   000007AA   0x.... 0x....      BL       sprintf
    867          //                        sprintf( (char *)tempBffr2, "     Grid 34 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye2.Raw,
    868          //                                                                                               GridMeasure.GridEye2.TempC,
    869          //                                                                                               GridMeasure.GridEye2.TempF,
    870          //                                                                                               GridMeasure.GridEye2.RawC );
    871                                  break;
   \   000007AE   0xE078             B.N      ??RoadBrd_ParseString_102
    872                                case 3: //GridEye3 Values
    873                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye3.Raw,
    874                                                                                                         GridMeasure.GridEye3.TempC,GridMeasureScaled.GridEye3.TempC,
    875                                                                                                         GridMeasure.GridEye3.TempF,GridMeasureScaled.GridEye3.TempF,
    876                                                                                                         GridMeasure.GridEye3.RawC );
   \                     ??RoadBrd_ParseString_97: (+1)
   \   000007B0   0xF8BD 0x01CA      LDRH     R0,[SP, #+458]
   \   000007B4   0x9003             STR      R0,[SP, #+12]
   \   000007B6   0xA8EA             ADD      R0,SP,#+936
   \   000007B8   0x1CC0             ADDS     R0,R0,#+3
   \   000007BA   0x9002             STR      R0,[SP, #+8]
   \   000007BC   0xA86E             ADD      R0,SP,#+440
   \   000007BE   0x1CC0             ADDS     R0,R0,#+3
   \   000007C0   0x9001             STR      R0,[SP, #+4]
   \   000007C2   0xA8E9             ADD      R0,SP,#+932
   \   000007C4   0x9000             STR      R0,[SP, #+0]
   \   000007C6   0xAB6D             ADD      R3,SP,#+436
   \   000007C8   0xF50D 0x72E1      ADD      R2,SP,#+450
   \   000007CC   0xF8DF 0x1D98      LDR.W    R1,??RoadBrd_ParseString_103+0x4
   \   000007D0   0xA80B             ADD      R0,SP,#+44
   \   000007D2   0x.... 0x....      BL       sprintf
    877          //                        sprintf( (char *)tempBffr2, "     Grid 35 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye3.Raw,
    878          //                                                                                               GridMeasure.GridEye3.TempC,
    879          //                                                                                               GridMeasure.GridEye3.TempF,
    880          //                                                                                               GridMeasure.GridEye3.RawC );
    881                                  break;
   \   000007D6   0xE064             B.N      ??RoadBrd_ParseString_102
    882                                case 4: //GridEye4 Values
    883                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye4.Raw,
    884                                                                                                         GridMeasure.GridEye4.TempC,GridMeasureScaled.GridEye4.TempC,
    885                                                                                                         GridMeasure.GridEye4.TempF,GridMeasureScaled.GridEye4.TempF,
    886                                                                                                         GridMeasure.GridEye4.RawC );
   \                     ??RoadBrd_ParseString_96: (+1)
   \   000007D8   0xF8BD 0x01E2      LDRH     R0,[SP, #+482]
   \   000007DC   0x9003             STR      R0,[SP, #+12]
   \   000007DE   0xA8F0             ADD      R0,SP,#+960
   \   000007E0   0x1CC0             ADDS     R0,R0,#+3
   \   000007E2   0x9002             STR      R0,[SP, #+8]
   \   000007E4   0xA874             ADD      R0,SP,#+464
   \   000007E6   0x1CC0             ADDS     R0,R0,#+3
   \   000007E8   0x9001             STR      R0,[SP, #+4]
   \   000007EA   0xA8EF             ADD      R0,SP,#+956
   \   000007EC   0x9000             STR      R0,[SP, #+0]
   \   000007EE   0xAB73             ADD      R3,SP,#+460
   \   000007F0   0xF50D 0x72ED      ADD      R2,SP,#+474
   \   000007F4   0xF8DF 0x1D70      LDR.W    R1,??RoadBrd_ParseString_103+0x4
   \   000007F8   0xA80B             ADD      R0,SP,#+44
   \   000007FA   0x.... 0x....      BL       sprintf
    887          //                        sprintf( (char *)tempBffr2, "     Grid 36 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye4.Raw,
    888          //                                                                                               GridMeasure.GridEye4.TempC,
    889          //                                                                                               GridMeasure.GridEye4.TempF,
    890          //                                                                                               GridMeasure.GridEye4.RawC );
    891                                  break;
   \   000007FE   0xE050             B.N      ??RoadBrd_ParseString_102
    892                                case 5: //GridEye5 Values
    893                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye5.Raw,
    894                                                                                                         GridMeasure.GridEye5.TempC,GridMeasureScaled.GridEye5.TempC,
    895                                                                                                         GridMeasure.GridEye5.TempF,GridMeasureScaled.GridEye5.TempF,
    896                                                                                                         GridMeasure.GridEye5.RawC );
   \                     ??RoadBrd_ParseString_99: (+1)
   \   00000800   0xF8BD 0x01FA      LDRH     R0,[SP, #+506]
   \   00000804   0x9003             STR      R0,[SP, #+12]
   \   00000806   0xA8F6             ADD      R0,SP,#+984
   \   00000808   0x1CC0             ADDS     R0,R0,#+3
   \   0000080A   0x9002             STR      R0,[SP, #+8]
   \   0000080C   0xA87A             ADD      R0,SP,#+488
   \   0000080E   0x1CC0             ADDS     R0,R0,#+3
   \   00000810   0x9001             STR      R0,[SP, #+4]
   \   00000812   0xA8F5             ADD      R0,SP,#+980
   \   00000814   0x9000             STR      R0,[SP, #+0]
   \   00000816   0xAB79             ADD      R3,SP,#+484
   \   00000818   0xF50D 0x72F9      ADD      R2,SP,#+498
   \   0000081C   0xF8DF 0x1D48      LDR.W    R1,??RoadBrd_ParseString_103+0x4
   \   00000820   0xA80B             ADD      R0,SP,#+44
   \   00000822   0x.... 0x....      BL       sprintf
    897          //                        sprintf( (char *)tempBffr2, "     Grid 37 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye5.Raw,
    898          //                                                                                               GridMeasure.GridEye5.TempC,
    899          //                                                                                               GridMeasure.GridEye5.TempF,
    900          //                                                                                               GridMeasure.GridEye5.RawC );
    901                                  break;
   \   00000826   0xE03C             B.N      ??RoadBrd_ParseString_102
    902                                case 6: //GridEye6 Values
    903                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye6.Raw,
    904                                                                                                         GridMeasure.GridEye6.TempC,GridMeasureScaled.GridEye6.TempC,
    905                                                                                                         GridMeasure.GridEye6.TempF,GridMeasureScaled.GridEye6.TempF,
    906                                                                                                         GridMeasure.GridEye6.RawC );
   \                     ??RoadBrd_ParseString_98: (+1)
   \   00000828   0xF8BD 0x0212      LDRH     R0,[SP, #+530]
   \   0000082C   0x9003             STR      R0,[SP, #+12]
   \   0000082E   0xA8FC             ADD      R0,SP,#+1008
   \   00000830   0x1CC0             ADDS     R0,R0,#+3
   \   00000832   0x9002             STR      R0,[SP, #+8]
   \   00000834   0xA880             ADD      R0,SP,#+512
   \   00000836   0x1CC0             ADDS     R0,R0,#+3
   \   00000838   0x9001             STR      R0,[SP, #+4]
   \   0000083A   0xA8FB             ADD      R0,SP,#+1004
   \   0000083C   0x9000             STR      R0,[SP, #+0]
   \   0000083E   0xAB7F             ADD      R3,SP,#+508
   \   00000840   0xAA82             ADD      R2,SP,#+520
   \   00000842   0x1C92             ADDS     R2,R2,#+2
   \   00000844   0xF8DF 0x1D20      LDR.W    R1,??RoadBrd_ParseString_103+0x4
   \   00000848   0xA80B             ADD      R0,SP,#+44
   \   0000084A   0x.... 0x....      BL       sprintf
    907          //                        sprintf( (char *)tempBffr2, "     Grid 38 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye6.Raw,
    908          //                                                                                               GridMeasure.GridEye6.TempC,
    909          //                                                                                               GridMeasure.GridEye6.TempF,
    910          //                                                                                               GridMeasure.GridEye6.RawC );
    911                                  break;
   \   0000084E   0xE028             B.N      ??RoadBrd_ParseString_102
    912                                case 7: //GridEye7 Values
    913                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye7.Raw,
    914                                                                                                         GridMeasure.GridEye7.TempC,GridMeasureScaled.GridEye7.TempC,
    915                                                                                                         GridMeasure.GridEye7.TempF,GridMeasureScaled.GridEye7.TempF,
    916                                                                                                         GridMeasure.GridEye7.RawC );
   \                     ??RoadBrd_ParseString_101: (+1)
   \   00000850   0xF8BD 0x022A      LDRH     R0,[SP, #+554]
   \   00000854   0x9003             STR      R0,[SP, #+12]
   \   00000856   0xA8FF             ADD      R0,SP,#+1020
   \   00000858   0x300F             ADDS     R0,R0,#+15
   \   0000085A   0x9002             STR      R0,[SP, #+8]
   \   0000085C   0xA886             ADD      R0,SP,#+536
   \   0000085E   0x1CC0             ADDS     R0,R0,#+3
   \   00000860   0x9001             STR      R0,[SP, #+4]
   \   00000862   0xA8FF             ADD      R0,SP,#+1020
   \   00000864   0x3008             ADDS     R0,R0,#+8
   \   00000866   0x9000             STR      R0,[SP, #+0]
   \   00000868   0xAB85             ADD      R3,SP,#+532
   \   0000086A   0xAA88             ADD      R2,SP,#+544
   \   0000086C   0x1C92             ADDS     R2,R2,#+2
   \   0000086E   0xF8DF 0x1CF8      LDR.W    R1,??RoadBrd_ParseString_103+0x4
   \   00000872   0xA80B             ADD      R0,SP,#+44
   \   00000874   0x.... 0x....      BL       sprintf
    917          //                        sprintf( (char *)tempBffr2, "     Grid 39 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye7.Raw,
    918          //                                                                                               GridMeasure.GridEye7.TempC,
    919          //                                                                                               GridMeasure.GridEye7.TempF,
    920          //                                                                                               GridMeasure.GridEye7.RawC );
    921                                  break;
   \   00000878   0xE013             B.N      ??RoadBrd_ParseString_102
    922                                case 8: //GridEye8 Values
    923                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye8.Raw,
    924                                                                                                         GridMeasure.GridEye8.TempC,GridMeasureScaled.GridEye8.TempC,
    925                                                                                                         GridMeasure.GridEye8.TempF,GridMeasureScaled.GridEye8.TempF,
    926                                                                                                         GridMeasure.GridEye8.RawC );
   \                     ??RoadBrd_ParseString_100: (+1)
   \   0000087A   0xF8BD 0x0242      LDRH     R0,[SP, #+578]
   \   0000087E   0x9003             STR      R0,[SP, #+12]
   \   00000880   0xA8FF             ADD      R0,SP,#+1020
   \   00000882   0x3027             ADDS     R0,R0,#+39
   \   00000884   0x9002             STR      R0,[SP, #+8]
   \   00000886   0xA88C             ADD      R0,SP,#+560
   \   00000888   0x1CC0             ADDS     R0,R0,#+3
   \   0000088A   0x9001             STR      R0,[SP, #+4]
   \   0000088C   0xA8FF             ADD      R0,SP,#+1020
   \   0000088E   0x3020             ADDS     R0,R0,#+32
   \   00000890   0x9000             STR      R0,[SP, #+0]
   \   00000892   0xAB8B             ADD      R3,SP,#+556
   \   00000894   0xAA8E             ADD      R2,SP,#+568
   \   00000896   0x1C92             ADDS     R2,R2,#+2
   \   00000898   0xF8DF 0x1CCC      LDR.W    R1,??RoadBrd_ParseString_103+0x4
   \   0000089C   0xA80B             ADD      R0,SP,#+44
   \   0000089E   0x.... 0x....      BL       sprintf
    927          //                        sprintf( (char *)tempBffr2, "     Grid 40 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye8.Raw,
    928          //                                                                                               GridMeasure.GridEye8.TempC,
    929          //                                                                                               GridMeasure.GridEye8.TempF,
    930          //                                                                                               GridMeasure.GridEye8.RawC );
    931                                  break;
    932                              } // EndSwitch(x)
    933                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_102: (+1)
   \   000008A2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000008A4   0x2D00             CMP      R5,#+0
   \   000008A6   0xD005             BEQ.N    ??RoadBrd_ParseString_104
    934                              {
    935                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000008A8   0xA80B             ADD      R0,SP,#+44
   \   000008AA   0x.... 0x....      BL       strlen
   \   000008AE   0xA90B             ADD      R1,SP,#+44
   \   000008B0   0x.... 0x....      BL       BGM111_Transmit
    936                              }
    937                              // Now Print String.
    938           #ifdef NUCLEO
    939                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    940          #else
    941                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \                     ??RoadBrd_ParseString_104: (+1)
   \   000008B4   0xA90B             ADD      R1,SP,#+44
   \   000008B6   0x2000             MOVS     R0,#+0
   \   000008B8   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000008BC   0x0006             MOVS     R6,R0
    942          #endif
    943                              if (Status != HAL_OK)
   \   000008BE   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000008C0   0x2E00             CMP      R6,#+0
   \   000008C2   0xD003             BEQ.N    ??RoadBrd_ParseString_105
    944                                return Status;
   \   000008C4   0x0030             MOVS     R0,R6
   \   000008C6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000008C8   0xF004 0xB995      B.W      ??RoadBrd_ParseString_4
    945                            } // EndFor(x=0; x<9; x++)
   \                     ??RoadBrd_ParseString_105: (+1)
   \   000008CC   0x1C7F             ADDS     R7,R7,#+1
   \   000008CE   0xE71E             B.N      ??RoadBrd_ParseString_91
    946                            sprintf( (char *)tempBffr2, "     SHNT VLTG DATA: " );
   \                     ??RoadBrd_ParseString_92: (+1)
   \   000008D0   0xF8DF 0x1E00      LDR.W    R1,??RoadBrd_ParseString_106
   \   000008D4   0xA80B             ADD      R0,SP,#+44
   \   000008D6   0x.... 0x....      BL       sprintf
    947                            strcat( (char *)tempBffr2, (char *)VMeasure.Raw );
   \   000008DA   0xA944             ADD      R1,SP,#+272
   \   000008DC   0xA80B             ADD      R0,SP,#+44
   \   000008DE   0x.... 0x....      BL       strcat
    948                            strcat( (char *)tempBffr2, "\r\n" );
   \   000008E2   0xA104             ADR.N    R1,??RoadBrd_ParseString_73  ;; 0x0D, 0x0A, 0x00, 0x00
   \   000008E4   0xA80B             ADD      R0,SP,#+44
   \   000008E6   0x.... 0x....      BL       strcat
    949                          } //Endif(Status == HAL_OK)
    950                          else
    951                            break;
    952                          if ( BLE_Flag )
   \   000008EA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000008EC   0x2D00             CMP      R5,#+0
   \   000008EE   0xD105             BNE.N    ??RoadBrd_ParseString_107
   \   000008F0   0xE00F             B.N      ??RoadBrd_ParseString_108
   \   000008F2   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_73:
   \   000008F4   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
   \                     ??RoadBrd_ParseString_89: (+1)
   \   000008F8   0xF004 0xB8F9      B.W      ??RoadBrd_ParseString_26
    953                          {
    954                            strcpy( (char *)tempBffr2, "</STATUS>");
   \                     ??RoadBrd_ParseString_107: (+1)
   \   000008FC   0xF8DF 0x1834      LDR.W    R1,??RoadBrd_ParseString_48
   \   00000900   0xA80B             ADD      R0,SP,#+44
   \   00000902   0x.... 0x....      BL       strcpy
    955                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000906   0xA80B             ADD      R0,SP,#+44
   \   00000908   0x.... 0x....      BL       strlen
   \   0000090C   0xA90B             ADD      R1,SP,#+44
   \   0000090E   0x.... 0x....      BL       BGM111_Transmit
    956                          }
    957                          sprintf( (char *)tempBffr2, "     COMPLETE.\r\n" );
   \                     ??RoadBrd_ParseString_108: (+1)
   \   00000912   0xF8DF 0x1E0C      LDR.W    R1,??RoadBrd_ParseString_109
   \   00000916   0xA80B             ADD      R0,SP,#+44
   \   00000918   0x.... 0x....      BL       sprintf
   \   0000091C   0xE170             B.N      ??RoadBrd_ParseString_110
    958                        }
    959                        else
    960                        {
    961                          switch( tempBffr[1] )
   \                     ??RoadBrd_ParseString_83: (+1)
   \   0000091E   0x7860             LDRB     R0,[R4, #+1]
   \   00000920   0x2830             CMP      R0,#+48
   \   00000922   0xD01F             BEQ.N    ??RoadBrd_ParseString_111
   \   00000924   0x2831             CMP      R0,#+49
   \   00000926   0xF000 0x8152      BEQ.W    ??RoadBrd_ParseString_112
   \   0000092A   0x2849             CMP      R0,#+73
   \   0000092C   0xF040 0x8168      BNE.W    ??RoadBrd_ParseString_110
    962                          {
    963          //------------------ BI Command: Initialize Cool Eye/Grid Eye Sensor
    964                            case 'I':
    965                              // Initialize Cool Eye/Grid Eye Sensor.
    966                              Status = RoadBrd_GridEyeInit();
   \                     ??RoadBrd_ParseString_113: (+1)
   \   00000930   0x.... 0x....      BL       RoadBrd_GridEyeInit
   \   00000934   0x0006             MOVS     R6,R0
    967                              // Is this a BLE Operation?
    968                              if ( BLE_Flag )
   \   00000936   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000938   0x2D00             CMP      R5,#+0
   \   0000093A   0xD00A             BEQ.N    ??RoadBrd_ParseString_114
    969                              {
    970                                // Yes...Build and Send BLE Response NOW.
    971                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   0000093C   0xF8DF 0x187C      LDR.W    R1,??RoadBrd_ParseString_50+0x8
   \   00000940   0xA80B             ADD      R0,SP,#+44
   \   00000942   0x.... 0x....      BL       strcpy
    972                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000946   0xA80B             ADD      R0,SP,#+44
   \   00000948   0x.... 0x....      BL       strlen
   \   0000094C   0xA90B             ADD      R1,SP,#+44
   \   0000094E   0x.... 0x....      BL       BGM111_Transmit
    973                              }
    974                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_114: (+1)
   \   00000952   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000954   0x2E00             CMP      R6,#+0
   \   00000956   0xD104             BNE.N    ??RoadBrd_ParseString_115
    975                              {
    976                                strcpy( (char *)tempBffr2, "Cool Eye/Grid Eye Sensor: Initialization Complete.\r\n");;
   \   00000958   0xF8DF 0x1E0C      LDR.W    R1,??RoadBrd_ParseString_116
   \   0000095C   0xA80B             ADD      R0,SP,#+44
   \   0000095E   0x.... 0x....      BL       strcpy
    977                              }
    978                              break;
   \                     ??RoadBrd_ParseString_115: (+1)
   \   00000962   0xE14D             B.N      ??RoadBrd_ParseString_110
    979          //------------------ B0 Command...Read Cool Eye/Grid Eye Values.....
    980                            case '0':
    981                              // Read Cool Eye/Grid Eye Values.....
    982                              if ( Get_DriverStates( GRIDEYE_MNTR_TASK ))
   \                     ??RoadBrd_ParseString_111: (+1)
   \   00000964   0x2005             MOVS     R0,#+5
   \   00000966   0x.... 0x....      BL       Get_DriverStates
   \   0000096A   0x2800             CMP      R0,#+0
   \   0000096C   0xD00B             BEQ.N    ??RoadBrd_ParseString_117
    983                              {
    984                                Status = RoadBrd_GridEye_ReadValues( &GridMeasure );
   \   0000096E   0xA85B             ADD      R0,SP,#+364
   \   00000970   0x.... 0x....      BL       RoadBrd_GridEye_ReadValues
   \   00000974   0x0006             MOVS     R6,R0
    985                                if (Status == HAL_OK)
   \   00000976   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000978   0x2E00             CMP      R6,#+0
   \   0000097A   0xD117             BNE.N    ??RoadBrd_ParseString_118
    986                                  Status = RoadBrd_GridEye_ReadValues_Scaled( &GridMeasureScaled );
   \   0000097C   0xA8D7             ADD      R0,SP,#+860
   \   0000097E   0x.... 0x....      BL       RoadBrd_GridEye_ReadValues_Scaled
   \   00000982   0x0006             MOVS     R6,R0
   \   00000984   0xE012             B.N      ??RoadBrd_ParseString_118
    987                              }
    988                              else if ( Get_DriverStates( COOLEYE_MNTR_TASK ))
   \                     ??RoadBrd_ParseString_117: (+1)
   \   00000986   0x2006             MOVS     R0,#+6
   \   00000988   0x.... 0x....      BL       Get_DriverStates
   \   0000098C   0x2800             CMP      R0,#+0
   \   0000098E   0xD00B             BEQ.N    ??RoadBrd_ParseString_119
    989                              {
    990                                Status = RoadBrd_CoolEye_ReadValues( &GridMeasure );
   \   00000990   0xA85B             ADD      R0,SP,#+364
   \   00000992   0x.... 0x....      BL       RoadBrd_CoolEye_ReadValues
   \   00000996   0x0006             MOVS     R6,R0
    991                                if (Status == HAL_OK)
   \   00000998   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000099A   0x2E00             CMP      R6,#+0
   \   0000099C   0xD106             BNE.N    ??RoadBrd_ParseString_118
    992                                  Status = RoadBrd_CoolEye_ReadValues_Scaled( &GridMeasureScaled );
   \   0000099E   0xA8D7             ADD      R0,SP,#+860
   \   000009A0   0x.... 0x....      BL       RoadBrd_CoolEye_ReadValues_Scaled
   \   000009A4   0x0006             MOVS     R6,R0
   \   000009A6   0xE001             B.N      ??RoadBrd_ParseString_118
    993                              }
    994                              else
    995                                Status = HAL_ERROR;
   \                     ??RoadBrd_ParseString_119: (+1)
   \   000009A8   0x2001             MOVS     R0,#+1
   \   000009AA   0x0006             MOVS     R6,R0
    996          
    997                              // Is this a BLE Operation?
    998                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_118: (+1)
   \   000009AC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000009AE   0x2D00             CMP      R5,#+0
   \   000009B0   0xD00A             BEQ.N    ??RoadBrd_ParseString_120
    999                              {
   1000                                // Yes...Build and Send BLE Response NOW.
   1001                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000009B2   0xF8DF 0x1808      LDR.W    R1,??RoadBrd_ParseString_50+0x8
   \   000009B6   0xA80B             ADD      R0,SP,#+44
   \   000009B8   0x.... 0x....      BL       strcpy
   1002                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000009BC   0xA80B             ADD      R0,SP,#+44
   \   000009BE   0x.... 0x....      BL       strlen
   \   000009C2   0xA90B             ADD      R1,SP,#+44
   \   000009C4   0x.... 0x....      BL       BGM111_Transmit
   1003                              }
   1004          
   1005                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_120: (+1)
   \   000009C8   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000009CA   0x2E00             CMP      R6,#+0
   \   000009CC   0xF040 0x80FE      BNE.W    ??RoadBrd_ParseString_121
   1006                              {
   1007                                // Send string to UART..
   1008                                strcpy( (char *)tempBffr2, "Voltage Monitor/Shunt Voltage...\r\n");
   \   000009D0   0xF8DF 0x1B28      LDR.W    R1,??RoadBrd_ParseString_88+0x4
   \   000009D4   0xA80B             ADD      R0,SP,#+44
   \   000009D6   0x.... 0x....      BL       strcpy
   1009          #ifdef NUCLEO
   1010                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1011          #else
   1012                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000009DA   0xA90B             ADD      R1,SP,#+44
   \   000009DC   0x2000             MOVS     R0,#+0
   \   000009DE   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000009E2   0x0006             MOVS     R6,R0
   1013          #endif
   1014                                if (Status != HAL_OK)
   \   000009E4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000009E6   0x2E00             CMP      R6,#+0
   \   000009E8   0xD003             BEQ.N    ??RoadBrd_ParseString_122
   1015                                  return Status;
   \   000009EA   0x0030             MOVS     R0,R6
   \   000009EC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000009EE   0xF004 0xB902      B.W      ??RoadBrd_ParseString_4
   1016                                // NOW, Build Data String..
   1017                                for (x=0; x<9; x++)
   \                     ??RoadBrd_ParseString_122: (+1)
   \   000009F2   0x2000             MOVS     R0,#+0
   \   000009F4   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_123: (+1)
   \   000009F6   0x2F09             CMP      R7,#+9
   \   000009F8   0xF280 0x80D5      BGE.W    ??RoadBrd_ParseString_124
   1018                                {
   1019                                  // Build String
   1020                                  switch(x)
   \   000009FC   0x2F00             CMP      R7,#+0
   \   000009FE   0xD00F             BEQ.N    ??RoadBrd_ParseString_125
   \   00000A00   0x2F02             CMP      R7,#+2
   \   00000A02   0xD035             BEQ.N    ??RoadBrd_ParseString_126
   \   00000A04   0xD320             BCC.N    ??RoadBrd_ParseString_127
   \   00000A06   0x2F04             CMP      R7,#+4
   \   00000A08   0xD05A             BEQ.N    ??RoadBrd_ParseString_128
   \   00000A0A   0xD345             BCC.N    ??RoadBrd_ParseString_129
   \   00000A0C   0x2F06             CMP      R7,#+6
   \   00000A0E   0xF000 0x807F      BEQ.W    ??RoadBrd_ParseString_130
   \   00000A12   0xD369             BCC.N    ??RoadBrd_ParseString_131
   \   00000A14   0x2F08             CMP      R7,#+8
   \   00000A16   0xF000 0x80A4      BEQ.W    ??RoadBrd_ParseString_132
   \   00000A1A   0xF0C0 0x808D      BCC.W    ??RoadBrd_ParseString_133
   \   00000A1E   0xE0B4             B.N      ??RoadBrd_ParseString_134
   1021                                  {
   1022                                  case 0: //Thermistor Values
   1023                                    sprintf( (char *)tempBffr2, "     Thermistor DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.Thermistor.Raw,
   1024                                            GridMeasure.Thermistor.TempC,GridMeasureScaled.Thermistor.TempC,
   1025                                            GridMeasure.Thermistor.TempF,GridMeasureScaled.Thermistor.TempF,
   1026                                            GridMeasure.Thermistor.RawC );
   \                     ??RoadBrd_ParseString_125: (+1)
   \   00000A20   0xF8BD 0x0182      LDRH     R0,[SP, #+386]
   \   00000A24   0x9003             STR      R0,[SP, #+12]
   \   00000A26   0xA8D8             ADD      R0,SP,#+864
   \   00000A28   0x1CC0             ADDS     R0,R0,#+3
   \   00000A2A   0x9002             STR      R0,[SP, #+8]
   \   00000A2C   0xA85C             ADD      R0,SP,#+368
   \   00000A2E   0x1CC0             ADDS     R0,R0,#+3
   \   00000A30   0x9001             STR      R0,[SP, #+4]
   \   00000A32   0xA8D7             ADD      R0,SP,#+860
   \   00000A34   0x9000             STR      R0,[SP, #+0]
   \   00000A36   0xAB5B             ADD      R3,SP,#+364
   \   00000A38   0xF50D 0x72BD      ADD      R2,SP,#+378
   \   00000A3C   0xF8DF 0x1B24      LDR.W    R1,??RoadBrd_ParseString_103
   \   00000A40   0xA80B             ADD      R0,SP,#+44
   \   00000A42   0x.... 0x....      BL       sprintf
   1027                                    //                        sprintf( (char *)tempBffr2, "     Thermistor DATA: %s   %s   %s   %d\r\n", GridMeasure.Thermistor.Raw,
   1028                                    //                                                                                               GridMeasure.Thermistor.TempC,
   1029                                    //                                                                                               GridMeasure.Thermistor.TempF,
   1030                                    //                                                                                               GridMeasure.Thermistor.RawC );
   1031                                    break;
   \   00000A46   0xE0A0             B.N      ??RoadBrd_ParseString_134
   1032                                  case 1: //GridEye1 Values
   1033                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye1.Raw,
   1034                                            GridMeasure.GridEye1.TempC,GridMeasureScaled.GridEye1.TempC,
   1035                                            GridMeasure.GridEye1.TempF,GridMeasureScaled.GridEye1.TempF,
   1036                                            GridMeasure.GridEye1.RawC );
   \                     ??RoadBrd_ParseString_127: (+1)
   \   00000A48   0xF8BD 0x019A      LDRH     R0,[SP, #+410]
   \   00000A4C   0x9003             STR      R0,[SP, #+12]
   \   00000A4E   0xA8DE             ADD      R0,SP,#+888
   \   00000A50   0x1CC0             ADDS     R0,R0,#+3
   \   00000A52   0x9002             STR      R0,[SP, #+8]
   \   00000A54   0xA862             ADD      R0,SP,#+392
   \   00000A56   0x1CC0             ADDS     R0,R0,#+3
   \   00000A58   0x9001             STR      R0,[SP, #+4]
   \   00000A5A   0xA8DD             ADD      R0,SP,#+884
   \   00000A5C   0x9000             STR      R0,[SP, #+0]
   \   00000A5E   0xAB61             ADD      R3,SP,#+388
   \   00000A60   0xF50D 0x72C9      ADD      R2,SP,#+402
   \   00000A64   0xF8DF 0x1B00      LDR.W    R1,??RoadBrd_ParseString_103+0x4
   \   00000A68   0xA80B             ADD      R0,SP,#+44
   \   00000A6A   0x.... 0x....      BL       sprintf
   1037                                    //                        sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye1.Raw,
   1038                                    //                                                                                               GridMeasure.GridEye1.TempC,
   1039                                    //                                                                                               GridMeasure.GridEye1.TempF,
   1040                                    //                                                                                               GridMeasure.GridEye1.RawC );
   1041                                    break;
   \   00000A6E   0xE08C             B.N      ??RoadBrd_ParseString_134
   1042                                  case 2: //GridEye2 Values
   1043                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye2.Raw,
   1044                                            GridMeasure.GridEye2.TempC,GridMeasureScaled.GridEye2.TempC,
   1045                                            GridMeasure.GridEye2.TempF,GridMeasureScaled.GridEye2.TempF,
   1046                                            GridMeasure.GridEye2.RawC );
   \                     ??RoadBrd_ParseString_126: (+1)
   \   00000A70   0xF8BD 0x01B2      LDRH     R0,[SP, #+434]
   \   00000A74   0x9003             STR      R0,[SP, #+12]
   \   00000A76   0xA8E4             ADD      R0,SP,#+912
   \   00000A78   0x1CC0             ADDS     R0,R0,#+3
   \   00000A7A   0x9002             STR      R0,[SP, #+8]
   \   00000A7C   0xA868             ADD      R0,SP,#+416
   \   00000A7E   0x1CC0             ADDS     R0,R0,#+3
   \   00000A80   0x9001             STR      R0,[SP, #+4]
   \   00000A82   0xA8E3             ADD      R0,SP,#+908
   \   00000A84   0x9000             STR      R0,[SP, #+0]
   \   00000A86   0xAB67             ADD      R3,SP,#+412
   \   00000A88   0xF50D 0x72D5      ADD      R2,SP,#+426
   \   00000A8C   0xF8DF 0x1AD8      LDR.W    R1,??RoadBrd_ParseString_103+0x4
   \   00000A90   0xA80B             ADD      R0,SP,#+44
   \   00000A92   0x.... 0x....      BL       sprintf
   1047                                    //                        sprintf( (char *)tempBffr2, "     Grid 34 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye2.Raw,
   1048                                    //                                                                                               GridMeasure.GridEye2.TempC,
   1049                                    //                                                                                               GridMeasure.GridEye2.TempF,
   1050                                    //                                                                                               GridMeasure.GridEye2.RawC );
   1051                                    break;
   \   00000A96   0xE078             B.N      ??RoadBrd_ParseString_134
   1052                                  case 3: //GridEye3 Values
   1053                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye3.Raw,
   1054                                            GridMeasure.GridEye3.TempC,GridMeasureScaled.GridEye3.TempC,
   1055                                            GridMeasure.GridEye3.TempF,GridMeasureScaled.GridEye3.TempF,
   1056                                            GridMeasure.GridEye3.RawC );
   \                     ??RoadBrd_ParseString_129: (+1)
   \   00000A98   0xF8BD 0x01CA      LDRH     R0,[SP, #+458]
   \   00000A9C   0x9003             STR      R0,[SP, #+12]
   \   00000A9E   0xA8EA             ADD      R0,SP,#+936
   \   00000AA0   0x1CC0             ADDS     R0,R0,#+3
   \   00000AA2   0x9002             STR      R0,[SP, #+8]
   \   00000AA4   0xA86E             ADD      R0,SP,#+440
   \   00000AA6   0x1CC0             ADDS     R0,R0,#+3
   \   00000AA8   0x9001             STR      R0,[SP, #+4]
   \   00000AAA   0xA8E9             ADD      R0,SP,#+932
   \   00000AAC   0x9000             STR      R0,[SP, #+0]
   \   00000AAE   0xAB6D             ADD      R3,SP,#+436
   \   00000AB0   0xF50D 0x72E1      ADD      R2,SP,#+450
   \   00000AB4   0xF8DF 0x1AB0      LDR.W    R1,??RoadBrd_ParseString_103+0x4
   \   00000AB8   0xA80B             ADD      R0,SP,#+44
   \   00000ABA   0x.... 0x....      BL       sprintf
   1057                                    //                        sprintf( (char *)tempBffr2, "     Grid 35 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye3.Raw,
   1058                                    //                                                                                               GridMeasure.GridEye3.TempC,
   1059                                    //                                                                                               GridMeasure.GridEye3.TempF,
   1060                                    //                                                                                               GridMeasure.GridEye3.RawC );
   1061                                    break;
   \   00000ABE   0xE064             B.N      ??RoadBrd_ParseString_134
   1062                                  case 4: //GridEye4 Values
   1063                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye4.Raw,
   1064                                            GridMeasure.GridEye4.TempC,GridMeasureScaled.GridEye4.TempC,
   1065                                            GridMeasure.GridEye4.TempF,GridMeasureScaled.GridEye4.TempF,
   1066                                            GridMeasure.GridEye4.RawC );
   \                     ??RoadBrd_ParseString_128: (+1)
   \   00000AC0   0xF8BD 0x01E2      LDRH     R0,[SP, #+482]
   \   00000AC4   0x9003             STR      R0,[SP, #+12]
   \   00000AC6   0xA8F0             ADD      R0,SP,#+960
   \   00000AC8   0x1CC0             ADDS     R0,R0,#+3
   \   00000ACA   0x9002             STR      R0,[SP, #+8]
   \   00000ACC   0xA874             ADD      R0,SP,#+464
   \   00000ACE   0x1CC0             ADDS     R0,R0,#+3
   \   00000AD0   0x9001             STR      R0,[SP, #+4]
   \   00000AD2   0xA8EF             ADD      R0,SP,#+956
   \   00000AD4   0x9000             STR      R0,[SP, #+0]
   \   00000AD6   0xAB73             ADD      R3,SP,#+460
   \   00000AD8   0xF50D 0x72ED      ADD      R2,SP,#+474
   \   00000ADC   0xF8DF 0x1A88      LDR.W    R1,??RoadBrd_ParseString_103+0x4
   \   00000AE0   0xA80B             ADD      R0,SP,#+44
   \   00000AE2   0x.... 0x....      BL       sprintf
   1067                                    //                        sprintf( (char *)tempBffr2, "     Grid 36 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye4.Raw,
   1068                                    //                                                                                               GridMeasure.GridEye4.TempC,
   1069                                    //                                                                                               GridMeasure.GridEye4.TempF,
   1070                                    //                                                                                               GridMeasure.GridEye4.RawC );
   1071                                    break;
   \   00000AE6   0xE050             B.N      ??RoadBrd_ParseString_134
   1072                                  case 5: //GridEye5 Values
   1073                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye5.Raw,
   1074                                            GridMeasure.GridEye5.TempC,GridMeasureScaled.GridEye5.TempC,
   1075                                            GridMeasure.GridEye5.TempF,GridMeasureScaled.GridEye5.TempF,
   1076                                            GridMeasure.GridEye5.RawC );
   \                     ??RoadBrd_ParseString_131: (+1)
   \   00000AE8   0xF8BD 0x01FA      LDRH     R0,[SP, #+506]
   \   00000AEC   0x9003             STR      R0,[SP, #+12]
   \   00000AEE   0xA8F6             ADD      R0,SP,#+984
   \   00000AF0   0x1CC0             ADDS     R0,R0,#+3
   \   00000AF2   0x9002             STR      R0,[SP, #+8]
   \   00000AF4   0xA87A             ADD      R0,SP,#+488
   \   00000AF6   0x1CC0             ADDS     R0,R0,#+3
   \   00000AF8   0x9001             STR      R0,[SP, #+4]
   \   00000AFA   0xA8F5             ADD      R0,SP,#+980
   \   00000AFC   0x9000             STR      R0,[SP, #+0]
   \   00000AFE   0xAB79             ADD      R3,SP,#+484
   \   00000B00   0xF50D 0x72F9      ADD      R2,SP,#+498
   \   00000B04   0xF8DF 0x1A60      LDR.W    R1,??RoadBrd_ParseString_103+0x4
   \   00000B08   0xA80B             ADD      R0,SP,#+44
   \   00000B0A   0x.... 0x....      BL       sprintf
   1077                                    //                        sprintf( (char *)tempBffr2, "     Grid 37 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye5.Raw,
   1078                                    //                                                                                               GridMeasure.GridEye5.TempC,
   1079                                    //                                                                                               GridMeasure.GridEye5.TempF,
   1080                                    //                                                                                               GridMeasure.GridEye5.RawC );
   1081                                    break;
   \   00000B0E   0xE03C             B.N      ??RoadBrd_ParseString_134
   1082                                  case 6: //GridEye6 Values
   1083                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye6.Raw,
   1084                                            GridMeasure.GridEye6.TempC,GridMeasureScaled.GridEye6.TempC,
   1085                                            GridMeasure.GridEye6.TempF,GridMeasureScaled.GridEye6.TempF,
   1086                                            GridMeasure.GridEye6.RawC );
   \                     ??RoadBrd_ParseString_130: (+1)
   \   00000B10   0xF8BD 0x0212      LDRH     R0,[SP, #+530]
   \   00000B14   0x9003             STR      R0,[SP, #+12]
   \   00000B16   0xA8FC             ADD      R0,SP,#+1008
   \   00000B18   0x1CC0             ADDS     R0,R0,#+3
   \   00000B1A   0x9002             STR      R0,[SP, #+8]
   \   00000B1C   0xA880             ADD      R0,SP,#+512
   \   00000B1E   0x1CC0             ADDS     R0,R0,#+3
   \   00000B20   0x9001             STR      R0,[SP, #+4]
   \   00000B22   0xA8FB             ADD      R0,SP,#+1004
   \   00000B24   0x9000             STR      R0,[SP, #+0]
   \   00000B26   0xAB7F             ADD      R3,SP,#+508
   \   00000B28   0xAA82             ADD      R2,SP,#+520
   \   00000B2A   0x1C92             ADDS     R2,R2,#+2
   \   00000B2C   0xF8DF 0x1A38      LDR.W    R1,??RoadBrd_ParseString_103+0x4
   \   00000B30   0xA80B             ADD      R0,SP,#+44
   \   00000B32   0x.... 0x....      BL       sprintf
   1087                                    //                        sprintf( (char *)tempBffr2, "     Grid 38 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye6.Raw,
   1088                                    //                                                                                               GridMeasure.GridEye6.TempC,
   1089                                    //                                                                                               GridMeasure.GridEye6.TempF,
   1090                                    //                                                                                               GridMeasure.GridEye6.RawC );
   1091                                    break;
   \   00000B36   0xE028             B.N      ??RoadBrd_ParseString_134
   1092                                  case 7: //GridEye7 Values
   1093                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye7.Raw,
   1094                                            GridMeasure.GridEye7.TempC,GridMeasureScaled.GridEye7.TempC,
   1095                                            GridMeasure.GridEye7.TempF,GridMeasureScaled.GridEye7.TempF,
   1096                                            GridMeasure.GridEye7.RawC );
   \                     ??RoadBrd_ParseString_133: (+1)
   \   00000B38   0xF8BD 0x022A      LDRH     R0,[SP, #+554]
   \   00000B3C   0x9003             STR      R0,[SP, #+12]
   \   00000B3E   0xA8FF             ADD      R0,SP,#+1020
   \   00000B40   0x300F             ADDS     R0,R0,#+15
   \   00000B42   0x9002             STR      R0,[SP, #+8]
   \   00000B44   0xA886             ADD      R0,SP,#+536
   \   00000B46   0x1CC0             ADDS     R0,R0,#+3
   \   00000B48   0x9001             STR      R0,[SP, #+4]
   \   00000B4A   0xA8FF             ADD      R0,SP,#+1020
   \   00000B4C   0x3008             ADDS     R0,R0,#+8
   \   00000B4E   0x9000             STR      R0,[SP, #+0]
   \   00000B50   0xAB85             ADD      R3,SP,#+532
   \   00000B52   0xAA88             ADD      R2,SP,#+544
   \   00000B54   0x1C92             ADDS     R2,R2,#+2
   \   00000B56   0xF8DF 0x1A10      LDR.W    R1,??RoadBrd_ParseString_103+0x4
   \   00000B5A   0xA80B             ADD      R0,SP,#+44
   \   00000B5C   0x.... 0x....      BL       sprintf
   1097                                    //                        sprintf( (char *)tempBffr2, "     Grid 39 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye7.Raw,
   1098                                    //                                                                                               GridMeasure.GridEye7.TempC,
   1099                                    //                                                                                               GridMeasure.GridEye7.TempF,
   1100                                    //                                                                                               GridMeasure.GridEye7.RawC );
   1101                                    break;
   \   00000B60   0xE013             B.N      ??RoadBrd_ParseString_134
   1102                                  case 8: //GridEye8 Values
   1103                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye8.Raw,
   1104                                            GridMeasure.GridEye8.TempC,GridMeasureScaled.GridEye8.TempC,
   1105                                            GridMeasure.GridEye8.TempF,GridMeasureScaled.GridEye8.TempF,
   1106                                            GridMeasure.GridEye8.RawC );
   \                     ??RoadBrd_ParseString_132: (+1)
   \   00000B62   0xF8BD 0x0242      LDRH     R0,[SP, #+578]
   \   00000B66   0x9003             STR      R0,[SP, #+12]
   \   00000B68   0xA8FF             ADD      R0,SP,#+1020
   \   00000B6A   0x3027             ADDS     R0,R0,#+39
   \   00000B6C   0x9002             STR      R0,[SP, #+8]
   \   00000B6E   0xA88C             ADD      R0,SP,#+560
   \   00000B70   0x1CC0             ADDS     R0,R0,#+3
   \   00000B72   0x9001             STR      R0,[SP, #+4]
   \   00000B74   0xA8FF             ADD      R0,SP,#+1020
   \   00000B76   0x3020             ADDS     R0,R0,#+32
   \   00000B78   0x9000             STR      R0,[SP, #+0]
   \   00000B7A   0xAB8B             ADD      R3,SP,#+556
   \   00000B7C   0xAA8E             ADD      R2,SP,#+568
   \   00000B7E   0x1C92             ADDS     R2,R2,#+2
   \   00000B80   0xF8DF 0x19E4      LDR.W    R1,??RoadBrd_ParseString_103+0x4
   \   00000B84   0xA80B             ADD      R0,SP,#+44
   \   00000B86   0x.... 0x....      BL       sprintf
   1107                                    //                        sprintf( (char *)tempBffr2, "     Grid 40 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye8.Raw,
   1108                                    //                                                                                               GridMeasure.GridEye8.TempC,
   1109                                    //                                                                                               GridMeasure.GridEye8.TempF,
   1110                                    //                                                                                               GridMeasure.GridEye8.RawC );
   1111                                    break;
   1112                                  } // EndSwitch(x)
   1113                                  // Now Print String.
   1114           #ifdef NUCLEO
   1115                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1116          #else
   1117                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \                     ??RoadBrd_ParseString_134: (+1)
   \   00000B8A   0xA90B             ADD      R1,SP,#+44
   \   00000B8C   0x2000             MOVS     R0,#+0
   \   00000B8E   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000B92   0x0006             MOVS     R6,R0
   1118          #endif
   1119                                  if (Status != HAL_OK)
   \   00000B94   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000B96   0x2E00             CMP      R6,#+0
   \   00000B98   0xD003             BEQ.N    ??RoadBrd_ParseString_135
   1120                                    return Status;
   \   00000B9A   0x0030             MOVS     R0,R6
   \   00000B9C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000B9E   0xF004 0xB82A      B.W      ??RoadBrd_ParseString_4
   1121                               } // EndFor(x=0; x<9; x++)
   \                     ??RoadBrd_ParseString_135: (+1)
   \   00000BA2   0x1C7F             ADDS     R7,R7,#+1
   \   00000BA4   0xE727             B.N      ??RoadBrd_ParseString_123
   1122                                sprintf( (char *)tempBffr2, "     SHNT VLTG DATA: " );
   \                     ??RoadBrd_ParseString_124: (+1)
   \   00000BA6   0xF8DF 0x1B2C      LDR.W    R1,??RoadBrd_ParseString_106
   \   00000BAA   0xA80B             ADD      R0,SP,#+44
   \   00000BAC   0x.... 0x....      BL       sprintf
   1123                                strcat( (char *)tempBffr2, (char *)VMeasure.Raw );
   \   00000BB0   0xA944             ADD      R1,SP,#+272
   \   00000BB2   0xA80B             ADD      R0,SP,#+44
   \   00000BB4   0x.... 0x....      BL       strcat
   1124                                strcat( (char *)tempBffr2, "\r\n" );
   \   00000BB8   0xA1D2             ADR.N    R1,??RoadBrd_ParseString_25+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000BBA   0xA80B             ADD      R0,SP,#+44
   \   00000BBC   0x.... 0x....      BL       strcat
   1125                              } //Endif(Status == HAL_OK)
   1126                              else
   1127                                break;
   1128                              sprintf( (char *)tempBffr2, "     COMPLETE.\r\n" );
   \   00000BC0   0xF8DF 0x1B5C      LDR.W    R1,??RoadBrd_ParseString_109
   \   00000BC4   0xA80B             ADD      R0,SP,#+44
   \   00000BC6   0x.... 0x....      BL       sprintf
   1129                              break;
   \   00000BCA   0xE019             B.N      ??RoadBrd_ParseString_110
   \                     ??RoadBrd_ParseString_121: (+1)
   \   00000BCC   0xE018             B.N      ??RoadBrd_ParseString_110
   1130          //------------------ B1 Command...Reset Cool Eye/Grid Eye Sensor..... 
   1131                            case '1':
   1132                              // Reset Cool Eye/Grid Eye Sensor.
   1133                              Status = RoadBrd_GridEyeReset();
   \                     ??RoadBrd_ParseString_112: (+1)
   \   00000BCE   0x.... 0x....      BL       RoadBrd_GridEyeReset
   \   00000BD2   0x0006             MOVS     R6,R0
   1134                              // Is this a BLE Operation?
   1135                              if ( BLE_Flag )
   \   00000BD4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000BD6   0x2D00             CMP      R5,#+0
   \   00000BD8   0xD00A             BEQ.N    ??RoadBrd_ParseString_136
   1136                              {
   1137                                // Yes...Build and Send BLE Response NOW.
   1138                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00000BDA   0xF8DF 0x15E0      LDR.W    R1,??RoadBrd_ParseString_50+0x8
   \   00000BDE   0xA80B             ADD      R0,SP,#+44
   \   00000BE0   0x.... 0x....      BL       strcpy
   1139                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000BE4   0xA80B             ADD      R0,SP,#+44
   \   00000BE6   0x.... 0x....      BL       strlen
   \   00000BEA   0xA90B             ADD      R1,SP,#+44
   \   00000BEC   0x.... 0x....      BL       BGM111_Transmit
   1140                              }
   1141          
   1142                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_136: (+1)
   \   00000BF0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000BF2   0x2E00             CMP      R6,#+0
   \   00000BF4   0xD104             BNE.N    ??RoadBrd_ParseString_137
   1143                              {
   1144                                strcpy( (char *)tempBffr2, "Cool Eye/Grid Eye Sensor: Reset Complete.\r\n");;
   \   00000BF6   0xF8DF 0x1DB8      LDR.W    R1,??RoadBrd_ParseString_138
   \   00000BFA   0xA80B             ADD      R0,SP,#+44
   \   00000BFC   0x.... 0x....      BL       strcpy
   1145                              }
   1146                              break;
   1147                          } //EndSwitch
   1148                        } //EndElse (Size == 1)
   1149                        break;
   \                     ??RoadBrd_ParseString_137: (+1)
   \                     ??RoadBrd_ParseString_110: (+1)
   \   00000C00   0xF003 0xBF75      B.W      ??RoadBrd_ParseString_26
   1150          //**************************************************************************************************
   1151                      case 'C':
   1152                        // Read Voltage. 
   1153          //++++++++++++++++++++++++++++++++++++++++++  Voltage Monitor Commands.
   1154                        if (Size == 1)
   \                     ??RoadBrd_ParseString_14: (+1)
   \   00000C04   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   00000C08   0x2801             CMP      R0,#+1
   \   00000C0A   0xD152             BNE.N    ??RoadBrd_ParseString_139
   1155                        {
   1156          //------------------ C Command       
   1157                          // Read Bus Voltage and return as 2 Byte Field.
   1158                          Status = RoadBrd_VMonitor_RdVoltage( &VMeasure );
   \   00000C0C   0xA842             ADD      R0,SP,#+264
   \   00000C0E   0x.... 0x....      BL       RoadBrd_VMonitor_RdVoltage
   \   00000C12   0x0006             MOVS     R6,R0
   1159                          if (Status == HAL_OK)
   \   00000C14   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000C16   0x2E00             CMP      R6,#+0
   \   00000C18   0xD103             BNE.N    ??RoadBrd_ParseString_140
   1160                            Status = RoadBrd_VMonitor_RdVoltage_Scaled( &VMeasureScaled );
   \   00000C1A   0xA84E             ADD      R0,SP,#+312
   \   00000C1C   0x.... 0x....      BL       RoadBrd_VMonitor_RdVoltage_Scaled
   \   00000C20   0x0006             MOVS     R6,R0
   1161                          if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_140: (+1)
   \   00000C22   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000C24   0x2E00             CMP      R6,#+0
   \   00000C26   0xD126             BNE.N    ??RoadBrd_ParseString_141
   1162                          {
   1163                            // Send string to UART..
   1164                            strcpy( (char *)tempBffr2, "Voltage Monitor/Read Bus Voltage...\r\n");
   \   00000C28   0xF8DF 0x1DE8      LDR.W    R1,??RoadBrd_ParseString_142
   \   00000C2C   0xA80B             ADD      R0,SP,#+44
   \   00000C2E   0x.... 0x....      BL       strcpy
   1165          #ifdef NUCLEO
   1166                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1167          #else
   1168                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000C32   0xA90B             ADD      R1,SP,#+44
   \   00000C34   0x2000             MOVS     R0,#+0
   \   00000C36   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000C3A   0x0006             MOVS     R6,R0
   1169          #endif
   1170                            if (Status != HAL_OK)
   \   00000C3C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000C3E   0x2E00             CMP      R6,#+0
   \   00000C40   0xD003             BEQ.N    ??RoadBrd_ParseString_143
   1171                            return Status;
   \   00000C42   0x0030             MOVS     R0,R6
   \   00000C44   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000C46   0xF003 0xBFD6      B.W      ??RoadBrd_ParseString_4
   1172                            // NOW, Build Data String..
   1173                            sprintf( (char *)tempBffr2, "     BUS VOLTAGE DATA: " );
   \                     ??RoadBrd_ParseString_143: (+1)
   \   00000C4A   0xF8DF 0x1DCC      LDR.W    R1,??RoadBrd_ParseString_142+0x4
   \   00000C4E   0xA80B             ADD      R0,SP,#+44
   \   00000C50   0x.... 0x....      BL       sprintf
   1174                            strcat( (char *)tempBffr2, (char *)VMeasure.Raw );
   \   00000C54   0xA944             ADD      R1,SP,#+272
   \   00000C56   0xA80B             ADD      R0,SP,#+44
   \   00000C58   0x.... 0x....      BL       strcat
   1175                            strcat( (char *)tempBffr2, "\r\n" );
   \   00000C5C   0xA1A9             ADR.N    R1,??RoadBrd_ParseString_25+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000C5E   0xA80B             ADD      R0,SP,#+44
   \   00000C60   0x.... 0x....      BL       strcat
   1176                          }
   1177                          else
   1178                            break;
   1179          #ifdef NUCLEO
   1180                          Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1181          #else
   1182                          Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000C64   0xA90B             ADD      R1,SP,#+44
   \   00000C66   0x2000             MOVS     R0,#+0
   \   00000C68   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000C6C   0x0006             MOVS     R6,R0
   1183          #endif
   1184                          if (Status != HAL_OK)
   \   00000C6E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000C70   0x2E00             CMP      R6,#+0
   \   00000C72   0xD102             BNE.N    ??RoadBrd_ParseString_144
   \   00000C74   0xE005             B.N      ??RoadBrd_ParseString_145
   \                     ??RoadBrd_ParseString_141: (+1)
   \   00000C76   0xF003 0xBF3A      B.W      ??RoadBrd_ParseString_26
   1185                            return Status;
   \                     ??RoadBrd_ParseString_144: (+1)
   \   00000C7A   0x0030             MOVS     R0,R6
   \   00000C7C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000C7E   0xF003 0xBFBA      B.W      ??RoadBrd_ParseString_4
   1186                          // Is this a BLE Operation?
   1187                          if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_145: (+1)
   \   00000C82   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000C84   0x2D00             CMP      R5,#+0
   \   00000C86   0xD00C             BEQ.N    ??RoadBrd_ParseString_146
   1188                          {
   1189                            // Yes...Build and Send BLE Response NOW.
   1190                            sprintf( (char *)tempBffr2, "<STATUS>BUS_VLTG:%s/%s</STATUS>", (char *)VMeasure.Voltage, (char *)VMeasureScaled.Voltage );
   \   00000C88   0xAB4E             ADD      R3,SP,#+312
   \   00000C8A   0xAA42             ADD      R2,SP,#+264
   \   00000C8C   0xF8DF 0x1DF4      LDR.W    R1,??RoadBrd_ParseString_147
   \   00000C90   0xA80B             ADD      R0,SP,#+44
   \   00000C92   0x.... 0x....      BL       sprintf
   1191                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000C96   0xA80B             ADD      R0,SP,#+44
   \   00000C98   0x.... 0x....      BL       strlen
   \   00000C9C   0xA90B             ADD      R1,SP,#+44
   \   00000C9E   0x.... 0x....      BL       BGM111_Transmit
   1192                          }
   1193                          // Now calculate Bus Voltage.
   1194                          sprintf( (char *)tempBffr2, "     Bus Voltage: %s/%s\r\n", (char *)VMeasure.Voltage, (char *)VMeasureScaled.Voltage );
   \                     ??RoadBrd_ParseString_146: (+1)
   \   00000CA2   0xAB4E             ADD      R3,SP,#+312
   \   00000CA4   0xAA42             ADD      R2,SP,#+264
   \   00000CA6   0xF8DF 0x1E14      LDR.W    R1,??RoadBrd_ParseString_148
   \   00000CAA   0xA80B             ADD      R0,SP,#+44
   \   00000CAC   0x.... 0x....      BL       sprintf
   \   00000CB0   0xE19D             B.N      ??RoadBrd_ParseString_149
   1195                        }
   1196                        else
   1197                        {
   1198                          switch( tempBffr[1] )
   \                     ??RoadBrd_ParseString_139: (+1)
   \   00000CB2   0x7860             LDRB     R0,[R4, #+1]
   \   00000CB4   0x2830             CMP      R0,#+48
   \   00000CB6   0xD024             BEQ.N    ??RoadBrd_ParseString_150
   \   00000CB8   0x2831             CMP      R0,#+49
   \   00000CBA   0xD074             BEQ.N    ??RoadBrd_ParseString_151
   \   00000CBC   0x2832             CMP      R0,#+50
   \   00000CBE   0xF000 0x80CA      BEQ.W    ??RoadBrd_ParseString_152
   \   00000CC2   0x2833             CMP      R0,#+51
   \   00000CC4   0xF000 0x8128      BEQ.W    ??RoadBrd_ParseString_153
   \   00000CC8   0x2849             CMP      R0,#+73
   \   00000CCA   0xF040 0x817D      BNE.W    ??RoadBrd_ParseString_154
   1199                          {
   1200          //------------------ CI Command       
   1201                            case 'I':
   1202                              // Initialize and load Calibration Register.
   1203                              // Read Calibration Value first.
   1204                              Status = RoadBrd_Init_VMonitor();
   \                     ??RoadBrd_ParseString_155: (+1)
   \   00000CCE   0x.... 0x....      BL       RoadBrd_Init_VMonitor
   \   00000CD2   0x0006             MOVS     R6,R0
   1205                              // Is this a BLE Operation?
   1206                              if ( BLE_Flag )
   \   00000CD4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000CD6   0x2D00             CMP      R5,#+0
   \   00000CD8   0xD00A             BEQ.N    ??RoadBrd_ParseString_156
   1207                              {
   1208                                // Yes...Build and Send BLE Response NOW.
   1209                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00000CDA   0xF8DF 0x14E0      LDR.W    R1,??RoadBrd_ParseString_50+0x8
   \   00000CDE   0xA80B             ADD      R0,SP,#+44
   \   00000CE0   0x.... 0x....      BL       strcpy
   1210                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000CE4   0xA80B             ADD      R0,SP,#+44
   \   00000CE6   0x.... 0x....      BL       strlen
   \   00000CEA   0xA90B             ADD      R1,SP,#+44
   \   00000CEC   0x.... 0x....      BL       BGM111_Transmit
   1211                              }
   1212                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_156: (+1)
   \   00000CF0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000CF2   0x2E00             CMP      R6,#+0
   \   00000CF4   0xD104             BNE.N    ??RoadBrd_ParseString_157
   1213                              {
   1214                                strcpy( (char *)tempBffr2, "Voltage Monitor: Initialization Complete.\r\n");;
   \   00000CF6   0xF8DF 0x1DC8      LDR.W    R1,??RoadBrd_ParseString_148+0x4
   \   00000CFA   0xA80B             ADD      R0,SP,#+44
   \   00000CFC   0x.... 0x....      BL       strcpy
   1215                              }
   1216                              break;
   \                     ??RoadBrd_ParseString_157: (+1)
   \   00000D00   0xE175             B.N      ??RoadBrd_ParseString_149
   1217          //------------------ C0 Command...Read Shunt Voltage and return results.....
   1218                            case '0':
   1219                              // Read Shunt Voltage and return results.....
   1220                              Status = RoadBrd_VMonitor_RdShntVltg( &VMeasure );
   \                     ??RoadBrd_ParseString_150: (+1)
   \   00000D02   0xA842             ADD      R0,SP,#+264
   \   00000D04   0x.... 0x....      BL       RoadBrd_VMonitor_RdShntVltg
   \   00000D08   0x0006             MOVS     R6,R0
   1221                              if (Status == HAL_OK)
   \   00000D0A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000D0C   0x2E00             CMP      R6,#+0
   \   00000D0E   0xD103             BNE.N    ??RoadBrd_ParseString_158
   1222                                Status = RoadBrd_VMonitor_RdShntVltg_Scaled( &VMeasureScaled );
   \   00000D10   0xA84E             ADD      R0,SP,#+312
   \   00000D12   0x.... 0x....      BL       RoadBrd_VMonitor_RdShntVltg_Scaled
   \   00000D16   0x0006             MOVS     R6,R0
   1223                              // Is this a BLE Operation?
   1224                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_158: (+1)
   \   00000D18   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000D1A   0x2E00             CMP      R6,#+0
   \   00000D1C   0xD126             BNE.N    ??RoadBrd_ParseString_159
   1225                              {
   1226                                // Send string to UART..
   1227                                strcpy( (char *)tempBffr2, "Voltage Monitor/Shunt Voltage...\r\n");
   \   00000D1E   0xF8DF 0x17DC      LDR.W    R1,??RoadBrd_ParseString_88+0x4
   \   00000D22   0xA80B             ADD      R0,SP,#+44
   \   00000D24   0x.... 0x....      BL       strcpy
   1228          #ifdef NUCLEO
   1229                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1230          #else
   1231                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000D28   0xA90B             ADD      R1,SP,#+44
   \   00000D2A   0x2000             MOVS     R0,#+0
   \   00000D2C   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000D30   0x0006             MOVS     R6,R0
   1232          #endif
   1233                                if (Status != HAL_OK)
   \   00000D32   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000D34   0x2E00             CMP      R6,#+0
   \   00000D36   0xD003             BEQ.N    ??RoadBrd_ParseString_160
   1234                                  return Status;
   \   00000D38   0x0030             MOVS     R0,R6
   \   00000D3A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000D3C   0xF003 0xBF5B      B.W      ??RoadBrd_ParseString_4
   1235                                // NOW, Build Data String..
   1236                                sprintf( (char *)tempBffr2, "     SHNT VLTG DATA: " );
   \                     ??RoadBrd_ParseString_160: (+1)
   \   00000D40   0xF8DF 0x1990      LDR.W    R1,??RoadBrd_ParseString_106
   \   00000D44   0xA80B             ADD      R0,SP,#+44
   \   00000D46   0x.... 0x....      BL       sprintf
   1237                                strcat( (char *)tempBffr2, (char *)VMeasure.Raw );
   \   00000D4A   0xA944             ADD      R1,SP,#+272
   \   00000D4C   0xA80B             ADD      R0,SP,#+44
   \   00000D4E   0x.... 0x....      BL       strcat
   1238                                strcat( (char *)tempBffr2, "\r\n" );
   \   00000D52   0xA16C             ADR.N    R1,??RoadBrd_ParseString_25+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000D54   0xA80B             ADD      R0,SP,#+44
   \   00000D56   0x.... 0x....      BL       strcat
   1239                              }
   1240                              else
   1241                                break;
   1242          #ifdef NUCLEO
   1243                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1244          #else
   1245                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000D5A   0xA90B             ADD      R1,SP,#+44
   \   00000D5C   0x2000             MOVS     R0,#+0
   \   00000D5E   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000D62   0x0006             MOVS     R6,R0
   1246          #endif
   1247                              if (Status != HAL_OK)
   \   00000D64   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000D66   0x2E00             CMP      R6,#+0
   \   00000D68   0xD101             BNE.N    ??RoadBrd_ParseString_161
   \   00000D6A   0xE004             B.N      ??RoadBrd_ParseString_162
   \                     ??RoadBrd_ParseString_159: (+1)
   \   00000D6C   0xE13F             B.N      ??RoadBrd_ParseString_149
   1248                                return Status;
   \                     ??RoadBrd_ParseString_161: (+1)
   \   00000D6E   0x0030             MOVS     R0,R6
   \   00000D70   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000D72   0xF003 0xBF40      B.W      ??RoadBrd_ParseString_4
   1249                              // Now calculate Shunt Voltage.
   1250                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_162: (+1)
   \   00000D76   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000D78   0x2D00             CMP      R5,#+0
   \   00000D7A   0xD00C             BEQ.N    ??RoadBrd_ParseString_163
   1251                              {
   1252                                // Yes...Build and Send BLE Response NOW.
   1253                                sprintf( (char *)tempBffr2, "<STATUS>SHNT_VLTG:%s/%s</STATUS>", (char *)VMeasure.Voltage, (char *)VMeasureScaled.Voltage );
   \   00000D7C   0xAB4E             ADD      R3,SP,#+312
   \   00000D7E   0xAA42             ADD      R2,SP,#+264
   \   00000D80   0xF8DF 0x1E00      LDR.W    R1,??RoadBrd_ParseString_164
   \   00000D84   0xA80B             ADD      R0,SP,#+44
   \   00000D86   0x.... 0x....      BL       sprintf
   1254                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000D8A   0xA80B             ADD      R0,SP,#+44
   \   00000D8C   0x.... 0x....      BL       strlen
   \   00000D90   0xA90B             ADD      R1,SP,#+44
   \   00000D92   0x.... 0x....      BL       BGM111_Transmit
   1255                              }
   1256                              sprintf( (char *)tempBffr2, "     Shunt Voltage: %s/%s\r\n", (char *)VMeasure.Voltage, (char *)VMeasureScaled.Voltage );
   \                     ??RoadBrd_ParseString_163: (+1)
   \   00000D96   0xAB4E             ADD      R3,SP,#+312
   \   00000D98   0xAA42             ADD      R2,SP,#+264
   \   00000D9A   0xF8DF 0x1DEC      LDR.W    R1,??RoadBrd_ParseString_164+0x4
   \   00000D9E   0xA80B             ADD      R0,SP,#+44
   \   00000DA0   0x.... 0x....      BL       sprintf
   1257                              break;
   \   00000DA4   0xE123             B.N      ??RoadBrd_ParseString_149
   1258          //------------------ C1 Command...Read Current and return results..... 
   1259                            case '1':
   1260                              // Read Current and return results.....
   1261                              Status = RoadBrd_VMonitor_RdCurrent( &CMeasure );
   \                     ??RoadBrd_ParseString_151: (+1)
   \   00000DA6   0xA8D1             ADD      R0,SP,#+836
   \   00000DA8   0x.... 0x....      BL       RoadBrd_VMonitor_RdCurrent
   \   00000DAC   0x0006             MOVS     R6,R0
   1262                              if (Status == HAL_OK)
   \   00000DAE   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000DB0   0x2E00             CMP      R6,#+0
   \   00000DB2   0xD103             BNE.N    ??RoadBrd_ParseString_165
   1263                                Status = RoadBrd_VMonitor_RdCurrent_Scaled( &CMeasureScaled );
   \   00000DB4   0xA8CD             ADD      R0,SP,#+820
   \   00000DB6   0x.... 0x....      BL       RoadBrd_VMonitor_RdCurrent_Scaled
   \   00000DBA   0x0006             MOVS     R6,R0
   1264                              // Is this a BLE Operation?
   1265                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_165: (+1)
   \   00000DBC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000DBE   0x2E00             CMP      R6,#+0
   \   00000DC0   0xD12C             BNE.N    ??RoadBrd_ParseString_166
   1266                              {
   1267                                // Send string to UART..
   1268                                strcpy( (char *)tempBffr2, "Voltage Monitor/Read Current...\r\n");
   \   00000DC2   0xF8DF 0x1DC8      LDR.W    R1,??RoadBrd_ParseString_164+0x8
   \   00000DC6   0xA80B             ADD      R0,SP,#+44
   \   00000DC8   0x.... 0x....      BL       strcpy
   1269          #ifdef NUCLEO
   1270                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1271          #else
   1272                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000DCC   0xA90B             ADD      R1,SP,#+44
   \   00000DCE   0x2000             MOVS     R0,#+0
   \   00000DD0   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000DD4   0x0006             MOVS     R6,R0
   1273          #endif
   1274                                if (Status != HAL_OK)
   \   00000DD6   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000DD8   0x2E00             CMP      R6,#+0
   \   00000DDA   0xD003             BEQ.N    ??RoadBrd_ParseString_167
   1275                                  return Status;
   \   00000DDC   0x0030             MOVS     R0,R6
   \   00000DDE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000DE0   0xF003 0xBF09      B.W      ??RoadBrd_ParseString_4
   1276                                // NOW, Build Data String..
   1277                                sprintf( (char *)tempBffr2, "     CURRENT DATA: " );
   \                     ??RoadBrd_ParseString_167: (+1)
   \   00000DE4   0xF8DF 0x1DA8      LDR.W    R1,??RoadBrd_ParseString_164+0xC
   \   00000DE8   0xA80B             ADD      R0,SP,#+44
   \   00000DEA   0x.... 0x....      BL       sprintf
   1278                                strcat( (char *)tempBffr2, (char *)CMeasure.Raw );
   \   00000DEE   0xA9D3             ADD      R1,SP,#+844
   \   00000DF0   0x1C49             ADDS     R1,R1,#+1
   \   00000DF2   0xA80B             ADD      R0,SP,#+44
   \   00000DF4   0x.... 0x....      BL       strcat
   1279                                strcat( (char *)tempBffr2, "\r\n" );
   \   00000DF8   0xA142             ADR.N    R1,??RoadBrd_ParseString_25+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000DFA   0xA80B             ADD      R0,SP,#+44
   \   00000DFC   0x.... 0x....      BL       strcat
   1280                              }
   1281                              else
   1282                                break;
   1283          #ifdef NUCLEO
   1284                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1285          #else
   1286                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000E00   0xA90B             ADD      R1,SP,#+44
   \   00000E02   0x2000             MOVS     R0,#+0
   \   00000E04   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000E08   0x0006             MOVS     R6,R0
   1287          #endif
   1288                              if (Status != HAL_OK)
   \   00000E0A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000E0C   0x2E00             CMP      R6,#+0
   \   00000E0E   0xD106             BNE.N    ??RoadBrd_ParseString_168
   \   00000E10   0xE009             B.N      ??RoadBrd_ParseString_169
   \   00000E12   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_0:
   \   00000E14   0x........         DC32     Bypass
   \   00000E18   0x........         DC32     ?_0
   \                     ??RoadBrd_ParseString_166: (+1)
   \   00000E1C   0xE0E7             B.N      ??RoadBrd_ParseString_149
   1289                                return Status;
   \                     ??RoadBrd_ParseString_168: (+1)
   \   00000E1E   0x0030             MOVS     R0,R6
   \   00000E20   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000E22   0xF003 0xBEE8      B.W      ??RoadBrd_ParseString_4
   1290                              // Now calculate Current.
   1291                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_169: (+1)
   \   00000E26   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000E28   0x2D00             CMP      R5,#+0
   \   00000E2A   0xD00C             BEQ.N    ??RoadBrd_ParseString_170
   1292                              {
   1293                                // Yes...Build and Send BLE Response NOW.
   1294                                sprintf( (char *)tempBffr2, "<STATUS>SHNT_CRNT:%s/%s</STATUS>", (char *)CMeasure.Current, (char *)CMeasureScaled.Current );
   \   00000E2C   0xABCD             ADD      R3,SP,#+820
   \   00000E2E   0xAAD1             ADD      R2,SP,#+836
   \   00000E30   0xF8DF 0x1DFC      LDR.W    R1,??RoadBrd_ParseString_171+0x4
   \   00000E34   0xA80B             ADD      R0,SP,#+44
   \   00000E36   0x.... 0x....      BL       sprintf
   1295                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000E3A   0xA80B             ADD      R0,SP,#+44
   \   00000E3C   0x.... 0x....      BL       strlen
   \   00000E40   0xA90B             ADD      R1,SP,#+44
   \   00000E42   0x.... 0x....      BL       BGM111_Transmit
   1296                              }
   1297                              sprintf( (char *)tempBffr2, "     Current: %s/%s\r\n", (char *)CMeasure.Current, (char *)CMeasureScaled.Current );
   \                     ??RoadBrd_ParseString_170: (+1)
   \   00000E46   0xABCD             ADD      R3,SP,#+820
   \   00000E48   0xAAD1             ADD      R2,SP,#+836
   \   00000E4A   0xF8DF 0x1DE8      LDR.W    R1,??RoadBrd_ParseString_171+0x8
   \   00000E4E   0xA80B             ADD      R0,SP,#+44
   \   00000E50   0x.... 0x....      BL       sprintf
   1298                              break;
   \   00000E54   0xE0CB             B.N      ??RoadBrd_ParseString_149
   1299          //------------------ C2 Command...Read Power and return results.....     
   1300                            case '2':
   1301                              // Read Power and return results.....
   1302                              Status = RoadBrd_VMonitor_RdPower( &PMeasure );
   \                     ??RoadBrd_ParseString_152: (+1)
   \   00000E56   0xA8C9             ADD      R0,SP,#+804
   \   00000E58   0x.... 0x....      BL       RoadBrd_VMonitor_RdPower
   \   00000E5C   0x0006             MOVS     R6,R0
   1303                              if (Status == HAL_OK)
   \   00000E5E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000E60   0x2E00             CMP      R6,#+0
   \   00000E62   0xD103             BNE.N    ??RoadBrd_ParseString_172
   1304                                Status = RoadBrd_VMonitor_RdPower_Scaled( &PMeasureScaled );
   \   00000E64   0xA8C5             ADD      R0,SP,#+788
   \   00000E66   0x.... 0x....      BL       RoadBrd_VMonitor_RdPower_Scaled
   \   00000E6A   0x0006             MOVS     R6,R0
   1305                              // Is this a BLE Operation?
   1306                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_172: (+1)
   \   00000E6C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000E6E   0x2E00             CMP      R6,#+0
   \   00000E70   0xD127             BNE.N    ??RoadBrd_ParseString_173
   1307                              {
   1308                                // Send string to UART..
   1309                                strcpy( (char *)tempBffr2, "Voltage Monitor/Read Power...\r\n");
   \   00000E72   0xF8DF 0x1DC4      LDR.W    R1,??RoadBrd_ParseString_171+0xC
   \   00000E76   0xA80B             ADD      R0,SP,#+44
   \   00000E78   0x.... 0x....      BL       strcpy
   1310          #ifdef NUCLEO
   1311                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1312          #else
   1313                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000E7C   0xA90B             ADD      R1,SP,#+44
   \   00000E7E   0x2000             MOVS     R0,#+0
   \   00000E80   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000E84   0x0006             MOVS     R6,R0
   1314          #endif
   1315                                if (Status != HAL_OK)
   \   00000E86   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000E88   0x2E00             CMP      R6,#+0
   \   00000E8A   0xD003             BEQ.N    ??RoadBrd_ParseString_174
   1316                                  return Status;
   \   00000E8C   0x0030             MOVS     R0,R6
   \   00000E8E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000E90   0xF003 0xBEB1      B.W      ??RoadBrd_ParseString_4
   1317                                // NOW, Build Data String..
   1318                                sprintf( (char *)tempBffr2, "     POWER DATA: " );
   \                     ??RoadBrd_ParseString_174: (+1)
   \   00000E94   0xF8DF 0x1DA4      LDR.W    R1,??RoadBrd_ParseString_171+0x10
   \   00000E98   0xA80B             ADD      R0,SP,#+44
   \   00000E9A   0x.... 0x....      BL       sprintf
   1319                                strcat( (char *)tempBffr2, (char *)PMeasure.Raw );
   \   00000E9E   0xA9CB             ADD      R1,SP,#+812
   \   00000EA0   0x1C49             ADDS     R1,R1,#+1
   \   00000EA2   0xA80B             ADD      R0,SP,#+44
   \   00000EA4   0x.... 0x....      BL       strcat
   1320                                strcat( (char *)tempBffr2, "\r\n" );
   \   00000EA8   0xA116             ADR.N    R1,??RoadBrd_ParseString_25+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000EAA   0xA80B             ADD      R0,SP,#+44
   \   00000EAC   0x.... 0x....      BL       strcat
   1321                              }
   1322                              else
   1323                                break;
   1324          #ifdef NUCLEO
   1325                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1326          #else
   1327                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000EB0   0xA90B             ADD      R1,SP,#+44
   \   00000EB2   0x2000             MOVS     R0,#+0
   \   00000EB4   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000EB8   0x0006             MOVS     R6,R0
   1328          #endif
   1329                              if (Status != HAL_OK)
   \   00000EBA   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000EBC   0x2E00             CMP      R6,#+0
   \   00000EBE   0xD101             BNE.N    ??RoadBrd_ParseString_175
   \   00000EC0   0xE004             B.N      ??RoadBrd_ParseString_176
   \                     ??RoadBrd_ParseString_173: (+1)
   \   00000EC2   0xE094             B.N      ??RoadBrd_ParseString_149
   1330                                return Status;
   \                     ??RoadBrd_ParseString_175: (+1)
   \   00000EC4   0x0030             MOVS     R0,R6
   \   00000EC6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000EC8   0xF003 0xBE95      B.W      ??RoadBrd_ParseString_4
   1331                              // Now calculate Power.
   1332                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_176: (+1)
   \   00000ECC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000ECE   0x2D00             CMP      R5,#+0
   \   00000ED0   0xD00C             BEQ.N    ??RoadBrd_ParseString_177
   1333                              {
   1334                                // Yes...Build and Send BLE Response NOW.
   1335                                sprintf( (char *)tempBffr2, "<STATUS>POWER:%s/%s</STATUS>", (char *)PMeasure.Power, (char *)PMeasureScaled.Power );
   \   00000ED2   0xABC5             ADD      R3,SP,#+788
   \   00000ED4   0xAAC9             ADD      R2,SP,#+804
   \   00000ED6   0xF8DF 0x1D68      LDR.W    R1,??RoadBrd_ParseString_171+0x14
   \   00000EDA   0xA80B             ADD      R0,SP,#+44
   \   00000EDC   0x.... 0x....      BL       sprintf
   1336                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000EE0   0xA80B             ADD      R0,SP,#+44
   \   00000EE2   0x.... 0x....      BL       strlen
   \   00000EE6   0xA90B             ADD      R1,SP,#+44
   \   00000EE8   0x.... 0x....      BL       BGM111_Transmit
   1337                              }
   1338                              sprintf( (char *)tempBffr2, "     Power: %s/%s\r\n", (char *)PMeasure.Power, (char *)PMeasureScaled.Power );
   \                     ??RoadBrd_ParseString_177: (+1)
   \   00000EEC   0xABC5             ADD      R3,SP,#+788
   \   00000EEE   0xAAC9             ADD      R2,SP,#+804
   \   00000EF0   0xF8DF 0x1D50      LDR.W    R1,??RoadBrd_ParseString_171+0x18
   \   00000EF4   0xA80B             ADD      R0,SP,#+44
   \   00000EF6   0x.... 0x....      BL       sprintf
   1339                              break;
   \   00000EFA   0xE078             B.N      ??RoadBrd_ParseString_149
   \                     ??RoadBrd_ParseString_25:
   \   00000EFC   0x........         DC32     ?_1
   \   00000F00   0x........         DC32     ?_2
   \   00000F04   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
   \   00000F08   0x........         DC32     ?_3
   \   00000F0C   0x........         DC32     ?_4
   \   00000F10   0x........         DC32     ?_5
   \   00000F14   0x........         DC32     ?_7
   1340          //------------------ C3 Command...Read Bus Voltage and return results.....
   1341                            case '3':
   1342                              // Read Bus Voltage and return results.....
   1343                              Status = RoadBrd_VMonitor_RdVoltage( &VMeasure );
   \                     ??RoadBrd_ParseString_153: (+1)
   \   00000F18   0xA842             ADD      R0,SP,#+264
   \   00000F1A   0x.... 0x....      BL       RoadBrd_VMonitor_RdVoltage
   \   00000F1E   0x0006             MOVS     R6,R0
   1344                              if (Status == HAL_OK)
   \   00000F20   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000F22   0x2E00             CMP      R6,#+0
   \   00000F24   0xD103             BNE.N    ??RoadBrd_ParseString_178
   1345                                Status = RoadBrd_VMonitor_RdVoltage_Scaled( &VMeasureScaled );
   \   00000F26   0xA84E             ADD      R0,SP,#+312
   \   00000F28   0x.... 0x....      BL       RoadBrd_VMonitor_RdVoltage_Scaled
   \   00000F2C   0x0006             MOVS     R6,R0
   1346                                
   1347                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_178: (+1)
   \   00000F2E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000F30   0x2E00             CMP      R6,#+0
   \   00000F32   0xD126             BNE.N    ??RoadBrd_ParseString_179
   1348                              {
   1349                                // Send string to UART..
   1350                                strcpy( (char *)tempBffr2, "Voltage Monitor/Read Bus Voltage...\r\n");
   \   00000F34   0xF8DF 0x1ADC      LDR.W    R1,??RoadBrd_ParseString_142
   \   00000F38   0xA80B             ADD      R0,SP,#+44
   \   00000F3A   0x.... 0x....      BL       strcpy
   1351          #ifdef NUCLEO
   1352                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1353          #else
   1354                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000F3E   0xA90B             ADD      R1,SP,#+44
   \   00000F40   0x2000             MOVS     R0,#+0
   \   00000F42   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000F46   0x0006             MOVS     R6,R0
   1355          #endif
   1356                                if (Status != HAL_OK)
   \   00000F48   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000F4A   0x2E00             CMP      R6,#+0
   \   00000F4C   0xD003             BEQ.N    ??RoadBrd_ParseString_180
   1357                                  return Status;
   \   00000F4E   0x0030             MOVS     R0,R6
   \   00000F50   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000F52   0xF003 0xBE50      B.W      ??RoadBrd_ParseString_4
   1358                                // NOW, Build Data String..
   1359                                sprintf( (char *)tempBffr2, "     BUS VOLTAGE DATA: " );
   \                     ??RoadBrd_ParseString_180: (+1)
   \   00000F56   0xF8DF 0x1AC0      LDR.W    R1,??RoadBrd_ParseString_142+0x4
   \   00000F5A   0xA80B             ADD      R0,SP,#+44
   \   00000F5C   0x.... 0x....      BL       sprintf
   1360                                strcat( (char *)tempBffr2, (char *)VMeasure.Raw );
   \   00000F60   0xA944             ADD      R1,SP,#+272
   \   00000F62   0xA80B             ADD      R0,SP,#+44
   \   00000F64   0x.... 0x....      BL       strcat
   1361                                strcat( (char *)tempBffr2, "\r\n" );
   \   00000F68   0xA1C0             ADR.N    R1,??RoadBrd_ParseString_63+0xC  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000F6A   0xA80B             ADD      R0,SP,#+44
   \   00000F6C   0x.... 0x....      BL       strcat
   1362                              }
   1363                              else
   1364                                break;
   1365          #ifdef NUCLEO
   1366                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1367          #else
   1368                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000F70   0xA90B             ADD      R1,SP,#+44
   \   00000F72   0x2000             MOVS     R0,#+0
   \   00000F74   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000F78   0x0006             MOVS     R6,R0
   1369          #endif
   1370                              if (Status != HAL_OK)
   \   00000F7A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000F7C   0x2E00             CMP      R6,#+0
   \   00000F7E   0xD101             BNE.N    ??RoadBrd_ParseString_181
   \   00000F80   0xE004             B.N      ??RoadBrd_ParseString_182
   \                     ??RoadBrd_ParseString_179: (+1)
   \   00000F82   0xE034             B.N      ??RoadBrd_ParseString_149
   1371                                return Status;
   \                     ??RoadBrd_ParseString_181: (+1)
   \   00000F84   0x0030             MOVS     R0,R6
   \   00000F86   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000F88   0xF003 0xBE35      B.W      ??RoadBrd_ParseString_4
   1372                              // Now calculate Bus Voltage.
   1373                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_182: (+1)
   \   00000F8C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000F8E   0x2D00             CMP      R5,#+0
   \   00000F90   0xD00C             BEQ.N    ??RoadBrd_ParseString_183
   1374                              {
   1375                                // Yes...Build and Send BLE Response NOW.
   1376                                sprintf( (char *)tempBffr2, "<STATUS>BUS_VLTG:%s/%s</STATUS>", (char *)VMeasure.Voltage, (char *)VMeasureScaled.Voltage );
   \   00000F92   0xAB4E             ADD      R3,SP,#+312
   \   00000F94   0xAA42             ADD      R2,SP,#+264
   \   00000F96   0xF8DF 0x1AEC      LDR.W    R1,??RoadBrd_ParseString_147
   \   00000F9A   0xA80B             ADD      R0,SP,#+44
   \   00000F9C   0x.... 0x....      BL       sprintf
   1377                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000FA0   0xA80B             ADD      R0,SP,#+44
   \   00000FA2   0x.... 0x....      BL       strlen
   \   00000FA6   0xA90B             ADD      R1,SP,#+44
   \   00000FA8   0x.... 0x....      BL       BGM111_Transmit
   1378                              }
   1379                              sprintf( (char *)tempBffr2, "     Bus Voltage: %s/%s\r\n", (char *)VMeasure.Voltage, (char *)VMeasureScaled.Voltage );
   \                     ??RoadBrd_ParseString_183: (+1)
   \   00000FAC   0xAB4E             ADD      R3,SP,#+312
   \   00000FAE   0xAA42             ADD      R2,SP,#+264
   \   00000FB0   0xF8DF 0x1B08      LDR.W    R1,??RoadBrd_ParseString_148
   \   00000FB4   0xA80B             ADD      R0,SP,#+44
   \   00000FB6   0x.... 0x....      BL       sprintf
   1380                              break;
   \   00000FBA   0xE018             B.N      ??RoadBrd_ParseString_149
   \                     ??RoadBrd_ParseString_32:
   \   00000FBC   0x........         DC32     ?_8
   \   00000FC0   0x........         DC32     ?_9
   \   00000FC4   0x........         DC32     ?_10
   1381                            default:
   1382                              // Is this a BLE Operation?
   1383                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_154: (+1)
   \   00000FC8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000FCA   0x2D00             CMP      R5,#+0
   \   00000FCC   0xD00A             BEQ.N    ??RoadBrd_ParseString_184
   1384                              {
   1385                                // Yes...Build and Send BLE Response NOW.
   1386                                strcpy( (char *)tempBffr2, "<STATUS>CMD_C_SYNTAX</STATUS>");
   \   00000FCE   0xF8DF 0x1E10      LDR.W    R1,??RoadBrd_ParseString_185
   \   00000FD2   0xA80B             ADD      R0,SP,#+44
   \   00000FD4   0x.... 0x....      BL       strcpy
   1387                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000FD8   0xA80B             ADD      R0,SP,#+44
   \   00000FDA   0x.... 0x....      BL       strlen
   \   00000FDE   0xA90B             ADD      R1,SP,#+44
   \   00000FE0   0x.... 0x....      BL       BGM111_Transmit
   1388                              }
   1389                              strcpy( (char *)tempBffr2, "ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_184: (+1)
   \   00000FE4   0xF8DF 0x147C      LDR.W    R1,??RoadBrd_ParseString_81+0x8
   \   00000FE8   0xA80B             ADD      R0,SP,#+44
   \   00000FEA   0x.... 0x....      BL       strcpy
   1390                              break;
   1391                          } //EndSwitch
   1392                        } //EndElse (Size == 1)
   1393                        break;
   \                     ??RoadBrd_ParseString_149: (+1)
   \   00000FEE   0xF003 0xBD7E      B.W      ??RoadBrd_ParseString_26
   \   00000FF2   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_35:
   \   00000FF4   0x........         DC32     ?_11
   \   00000FF8   0x........         DC32     ?_12
   \   00000FFC   0x........         DC32     ?_13
   \   00001000   0x........         DC32     ?_14
   \   00001004   0x........         DC32     ?_15
   \   00001008   0x........         DC32     ?_16
   1394          //**************************************************************************************************
   1395                      case 'D':
   1396                        // Read Humidity. 
   1397                        if (Size == 1)
   \                     ??RoadBrd_ParseString_15: (+1)
   \   0000100C   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   00001010   0x2801             CMP      R0,#+1
   \   00001012   0xD16D             BNE.N    ??RoadBrd_ParseString_186
   1398                        {
   1399          //------------------ D Command: Read Humidity Values      
   1400                          // Read Humidity Sensor sensor and return Humidity results....
   1401                          Status = RoadBrd_Humidity_ReadHumidity( &HMeasure );
   \   00001014   0xA849             ADD      R0,SP,#+292
   \   00001016   0x.... 0x....      BL       RoadBrd_Humidity_ReadHumidity
   \   0000101A   0x0006             MOVS     R6,R0
   1402                          if (Status == HAL_OK)
   \   0000101C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000101E   0x2E00             CMP      R6,#+0
   \   00001020   0xD104             BNE.N    ??RoadBrd_ParseString_187
   1403                            Status = RoadBrd_Humidity_ReadHumidity_Scaled( &HMeasureScaled );
   \   00001022   0xF50D 0x608A      ADD      R0,SP,#+1104
   \   00001026   0x.... 0x....      BL       RoadBrd_Humidity_ReadHumidity_Scaled
   \   0000102A   0x0006             MOVS     R6,R0
   1404                          // Is this a BLE Operation?
   1405                          if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_187: (+1)
   \   0000102C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000102E   0x2E00             CMP      R6,#+0
   \   00001030   0xD126             BNE.N    ??RoadBrd_ParseString_188
   1406                          {
   1407                            // Send string to UART..
   1408                            strcpy( (char *)tempBffr2, "Humidity SENSOR...\r\n");
   \   00001032   0xF8DF 0x1DB0      LDR.W    R1,??RoadBrd_ParseString_185+0x4
   \   00001036   0xA80B             ADD      R0,SP,#+44
   \   00001038   0x.... 0x....      BL       strcpy
   1409          #ifdef NUCLEO
   1410                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1411          #else
   1412                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000103C   0xA90B             ADD      R1,SP,#+44
   \   0000103E   0x2000             MOVS     R0,#+0
   \   00001040   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001044   0x0006             MOVS     R6,R0
   1413          #endif
   1414                            if (Status != HAL_OK)
   \   00001046   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001048   0x2E00             CMP      R6,#+0
   \   0000104A   0xD003             BEQ.N    ??RoadBrd_ParseString_189
   1415                              return Status;
   \   0000104C   0x0030             MOVS     R0,R6
   \   0000104E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001050   0xF003 0xBDD1      B.W      ??RoadBrd_ParseString_4
   1416                            // NOW, Build Data String..
   1417                            sprintf( (char *)tempBffr2, "     Humidity DATA: " );
   \                     ??RoadBrd_ParseString_189: (+1)
   \   00001054   0xF8DF 0x1DFC      LDR.W    R1,??RoadBrd_ParseString_190
   \   00001058   0xA80B             ADD      R0,SP,#+44
   \   0000105A   0x.... 0x....      BL       sprintf
   1418                            strcat( (char *)tempBffr2, (char *)HMeasure.HRaw );
   \   0000105E   0xA94B             ADD      R1,SP,#+300
   \   00001060   0xA80B             ADD      R0,SP,#+44
   \   00001062   0x.... 0x....      BL       strcat
   1419                            strcat( (char *)tempBffr2, "\r\n" );
   \   00001066   0xA181             ADR.N    R1,??RoadBrd_ParseString_63+0xC  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001068   0xA80B             ADD      R0,SP,#+44
   \   0000106A   0x.... 0x....      BL       strcat
   1420                          }
   1421                          else
   1422                            break;
   1423          #ifdef NUCLEO
   1424                          Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1425          #else
   1426                          Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000106E   0xA90B             ADD      R1,SP,#+44
   \   00001070   0x2000             MOVS     R0,#+0
   \   00001072   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001076   0x0006             MOVS     R6,R0
   1427          #endif
   1428                          if (Status != HAL_OK)
   \   00001078   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000107A   0x2E00             CMP      R6,#+0
   \   0000107C   0xD102             BNE.N    ??RoadBrd_ParseString_191
   \   0000107E   0xE005             B.N      ??RoadBrd_ParseString_192
   \                     ??RoadBrd_ParseString_188: (+1)
   \   00001080   0xF003 0xBD35      B.W      ??RoadBrd_ParseString_26
   1429                            return Status;
   \                     ??RoadBrd_ParseString_191: (+1)
   \   00001084   0x0030             MOVS     R0,R6
   \   00001086   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001088   0xF003 0xBDB5      B.W      ??RoadBrd_ParseString_4
   1430                          // NOW, Build Data String..
   1431                          sprintf( (char *)tempBffr2, "     Humidity DATA(Decimal): %d\r\n", HMeasure.HRawC );
   \                     ??RoadBrd_ParseString_192: (+1)
   \   0000108C   0xF8BD 0x2134      LDRH     R2,[SP, #+308]
   \   00001090   0xF8DF 0x1DC4      LDR.W    R1,??RoadBrd_ParseString_190+0x4
   \   00001094   0xA80B             ADD      R0,SP,#+44
   \   00001096   0x.... 0x....      BL       sprintf
   1432          #ifdef NUCLEO
   1433                          Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1434          #else
   1435                          Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000109A   0xA90B             ADD      R1,SP,#+44
   \   0000109C   0x2000             MOVS     R0,#+0
   \   0000109E   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000010A2   0x0006             MOVS     R6,R0
   1436          #endif
   1437                          if (Status != HAL_OK)
   \   000010A4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000010A6   0x2E00             CMP      R6,#+0
   \   000010A8   0xD003             BEQ.N    ??RoadBrd_ParseString_193
   1438                            return Status;
   \   000010AA   0x0030             MOVS     R0,R6
   \   000010AC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000010AE   0xF003 0xBDA2      B.W      ??RoadBrd_ParseString_4
   1439                          // Now calculate Celcius and Farenheit Temp.
   1440                          if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_193: (+1)
   \   000010B2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000010B4   0x2D00             CMP      R5,#+0
   \   000010B6   0xD00D             BEQ.N    ??RoadBrd_ParseString_194
   1441                          {
   1442                            // Yes...Build and Send BLE Response NOW.
   1443                            sprintf( (char *)tempBffr2, "<STATUS>HUMIDITY:%s/%s</STATUS>", (char *)HMeasure.Humidity, (char *)HMeasureScaled.Humidity );
   \   000010B8   0xF50D 0x638A      ADD      R3,SP,#+1104
   \   000010BC   0xAA49             ADD      R2,SP,#+292
   \   000010BE   0xF8DF 0x1D9C      LDR.W    R1,??RoadBrd_ParseString_190+0x8
   \   000010C2   0xA80B             ADD      R0,SP,#+44
   \   000010C4   0x.... 0x....      BL       sprintf
   1444                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000010C8   0xA80B             ADD      R0,SP,#+44
   \   000010CA   0x.... 0x....      BL       strlen
   \   000010CE   0xA90B             ADD      R1,SP,#+44
   \   000010D0   0x.... 0x....      BL       BGM111_Transmit
   1445                          }
   1446                          sprintf( (char *)tempBffr2, "     Humidity: %s/%s\r\n", (char *)HMeasure.Humidity, (char *)HMeasureScaled.Humidity );
   \                     ??RoadBrd_ParseString_194: (+1)
   \   000010D4   0xF50D 0x638A      ADD      R3,SP,#+1104
   \   000010D8   0xAA49             ADD      R2,SP,#+292
   \   000010DA   0xF8DF 0x1D84      LDR.W    R1,??RoadBrd_ParseString_190+0xC
   \   000010DE   0xA80B             ADD      R0,SP,#+44
   \   000010E0   0x.... 0x....      BL       sprintf
   \   000010E4   0xE10E             B.N      ??RoadBrd_ParseString_195
   \   000010E6   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_40:
   \   000010E8   0x........         DC32     ?_17
   \   000010EC   0x........         DC32     ?_19
   1447                        }
   1448                        else
   1449                        {
   1450                          switch( tempBffr[1] )
   \                     ??RoadBrd_ParseString_186: (+1)
   \   000010F0   0x7860             LDRB     R0,[R4, #+1]
   \   000010F2   0x2830             CMP      R0,#+48
   \   000010F4   0xD022             BEQ.N    ??RoadBrd_ParseString_196
   \   000010F6   0x2831             CMP      R0,#+49
   \   000010F8   0xF000 0x808C      BEQ.W    ??RoadBrd_ParseString_197
   \   000010FC   0x2849             CMP      R0,#+73
   \   000010FE   0xF040 0x8101      BNE.W    ??RoadBrd_ParseString_195
   1451                          {
   1452          //------------------ DI Command: Initialize Humidity Sensor
   1453                            case 'I':
   1454                              // Initialize Humidity Sensor.
   1455                              Status = RoadBrd_HumidityInit();
   \                     ??RoadBrd_ParseString_198: (+1)
   \   00001102   0x.... 0x....      BL       RoadBrd_HumidityInit
   \   00001106   0x0006             MOVS     R6,R0
   1456                              // Is this a BLE Operation?
   1457                              if ( BLE_Flag )
   \   00001108   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000110A   0x2D00             CMP      R5,#+0
   \   0000110C   0xD009             BEQ.N    ??RoadBrd_ParseString_199
   1458                              {
   1459                                // Yes...Build and Send BLE Response NOW.
   1460                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   0000110E   0x492B             LDR.N    R1,??RoadBrd_ParseString_50+0x8
   \   00001110   0xA80B             ADD      R0,SP,#+44
   \   00001112   0x.... 0x....      BL       strcpy
   1461                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001116   0xA80B             ADD      R0,SP,#+44
   \   00001118   0x.... 0x....      BL       strlen
   \   0000111C   0xA90B             ADD      R1,SP,#+44
   \   0000111E   0x.... 0x....      BL       BGM111_Transmit
   1462                              }
   1463          
   1464                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_199: (+1)
   \   00001122   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001124   0x2E00             CMP      R6,#+0
   \   00001126   0xD104             BNE.N    ??RoadBrd_ParseString_200
   1465                              {
   1466                                strcpy( (char *)tempBffr2, "Humidity Sensor: Initialization Complete.\r\n");;
   \   00001128   0xF8DF 0x1D38      LDR.W    R1,??RoadBrd_ParseString_190+0x10
   \   0000112C   0xA80B             ADD      R0,SP,#+44
   \   0000112E   0x.... 0x....      BL       strcpy
   1467                              }
   1468                              break;
   \                     ??RoadBrd_ParseString_200: (+1)
   \   00001132   0xE0E7             B.N      ??RoadBrd_ParseString_195
   \                     ??RoadBrd_ParseString_48:
   \   00001134   0x........         DC32     ?_20
   \   00001138   0x........         DC32     ?_21
   1469          //------------------ D0 Command...Read Humidity Values.....
   1470                            case '0':
   1471                              // Read Humidity Sensor sensor and return Humidity results....
   1472                              Status = RoadBrd_Humidity_ReadHumidity( &HMeasure );
   \                     ??RoadBrd_ParseString_196: (+1)
   \   0000113C   0xA849             ADD      R0,SP,#+292
   \   0000113E   0x.... 0x....      BL       RoadBrd_Humidity_ReadHumidity
   \   00001142   0x0006             MOVS     R6,R0
   1473                              // Is this a BLE Operation?
   1474                              if ( BLE_Flag )
   \   00001144   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001146   0x2D00             CMP      R5,#+0
   \   00001148   0xD009             BEQ.N    ??RoadBrd_ParseString_201
   1475                              {
   1476                                // Yes...Build and Send BLE Response NOW.
   1477                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   0000114A   0x491C             LDR.N    R1,??RoadBrd_ParseString_50+0x8
   \   0000114C   0xA80B             ADD      R0,SP,#+44
   \   0000114E   0x.... 0x....      BL       strcpy
   1478                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001152   0xA80B             ADD      R0,SP,#+44
   \   00001154   0x.... 0x....      BL       strlen
   \   00001158   0xA90B             ADD      R1,SP,#+44
   \   0000115A   0x.... 0x....      BL       BGM111_Transmit
   1479                              }
   1480          
   1481                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_201: (+1)
   \   0000115E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001160   0x2E00             CMP      R6,#+0
   \   00001162   0xD131             BNE.N    ??RoadBrd_ParseString_202
   1482                              {
   1483                                // Send string to UART..
   1484                                strcpy( (char *)tempBffr2, "Humidity SENSOR...\r\n");
   \   00001164   0xF8DF 0x1C7C      LDR.W    R1,??RoadBrd_ParseString_185+0x4
   \   00001168   0xA80B             ADD      R0,SP,#+44
   \   0000116A   0x.... 0x....      BL       strcpy
   1485          #ifdef NUCLEO
   1486                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1487          #else
   1488                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000116E   0xA90B             ADD      R1,SP,#+44
   \   00001170   0x2000             MOVS     R0,#+0
   \   00001172   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001176   0x0006             MOVS     R6,R0
   1489          #endif
   1490                                if (Status != HAL_OK)
   \   00001178   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000117A   0x2E00             CMP      R6,#+0
   \   0000117C   0xD003             BEQ.N    ??RoadBrd_ParseString_203
   1491                                  return Status;
   \   0000117E   0x0030             MOVS     R0,R6
   \   00001180   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001182   0xF003 0xBD38      B.W      ??RoadBrd_ParseString_4
   1492                                // NOW, Build Data String..
   1493                                sprintf( (char *)tempBffr2, "     Humidity DATA: " );
   \                     ??RoadBrd_ParseString_203: (+1)
   \   00001186   0xF8DF 0x1CCC      LDR.W    R1,??RoadBrd_ParseString_190
   \   0000118A   0xA80B             ADD      R0,SP,#+44
   \   0000118C   0x.... 0x....      BL       sprintf
   1494                                strcat( (char *)tempBffr2, (char *)HMeasure.HRaw );
   \   00001190   0xA94B             ADD      R1,SP,#+300
   \   00001192   0xA80B             ADD      R0,SP,#+44
   \   00001194   0x.... 0x....      BL       strcat
   1495                                strcat( (char *)tempBffr2, "\r\n" );
   \   00001198   0xA134             ADR.N    R1,??RoadBrd_ParseString_63+0xC  ;; 0x0D, 0x0A, 0x00, 0x00
   \   0000119A   0xA80B             ADD      R0,SP,#+44
   \   0000119C   0x.... 0x....      BL       strcat
   1496                              }
   1497                              else
   1498                                break;
   1499          #ifdef NUCLEO
   1500                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1501          #else
   1502                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000011A0   0xA90B             ADD      R1,SP,#+44
   \   000011A2   0x2000             MOVS     R0,#+0
   \   000011A4   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000011A8   0x0006             MOVS     R6,R0
   1503          #endif
   1504                              if (Status != HAL_OK)
   \   000011AA   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000011AC   0x2E00             CMP      R6,#+0
   \   000011AE   0xD10C             BNE.N    ??RoadBrd_ParseString_204
   \   000011B0   0xE00F             B.N      ??RoadBrd_ParseString_205
   \   000011B2   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_50:
   \   000011B4   0x........         DC32     ?_22
   \   000011B8   0x........         DC32     ?_23
   \   000011BC   0x........         DC32     ?_24
   \   000011C0   0x........         DC32     ?_25
   \   000011C4   0x........         DC32     ?_26
   \                     ??RoadBrd_ParseString_202: (+1)
   \   000011C8   0xE09C             B.N      ??RoadBrd_ParseString_195
   1505                                return Status;
   \                     ??RoadBrd_ParseString_204: (+1)
   \   000011CA   0x0030             MOVS     R0,R6
   \   000011CC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000011CE   0xF003 0xBD12      B.W      ??RoadBrd_ParseString_4
   1506                              // NOW, Build Data String..
   1507                              sprintf( (char *)tempBffr2, "     Humidity DATA(Decimal): %d\r\n", HMeasure.HRawC );
   \                     ??RoadBrd_ParseString_205: (+1)
   \   000011D2   0xF8BD 0x2134      LDRH     R2,[SP, #+308]
   \   000011D6   0xF8DF 0x1C80      LDR.W    R1,??RoadBrd_ParseString_190+0x4
   \   000011DA   0xA80B             ADD      R0,SP,#+44
   \   000011DC   0x.... 0x....      BL       sprintf
   1508          #ifdef NUCLEO
   1509                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1510          #else
   1511                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000011E0   0xA90B             ADD      R1,SP,#+44
   \   000011E2   0x2000             MOVS     R0,#+0
   \   000011E4   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000011E8   0x0006             MOVS     R6,R0
   1512          #endif
   1513                              if (Status != HAL_OK)
   \   000011EA   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000011EC   0x2E00             CMP      R6,#+0
   \   000011EE   0xD003             BEQ.N    ??RoadBrd_ParseString_206
   1514                                return Status;
   \   000011F0   0x0030             MOVS     R0,R6
   \   000011F2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000011F4   0xF003 0xBCFF      B.W      ??RoadBrd_ParseString_4
   1515                              // Now calculate Humidity.
   1516                              sprintf( (char *)tempBffr2, "     Humidity: " );
   \                     ??RoadBrd_ParseString_206: (+1)
   \   000011F8   0xF8DF 0x1DC8      LDR.W    R1,??RoadBrd_ParseString_207
   \   000011FC   0xA80B             ADD      R0,SP,#+44
   \   000011FE   0x.... 0x....      BL       sprintf
   1517                              strcat( (char *)tempBffr2, (char *)HMeasure.Humidity );
   \   00001202   0xA949             ADD      R1,SP,#+292
   \   00001204   0xA80B             ADD      R0,SP,#+44
   \   00001206   0x.... 0x....      BL       strcat
   1518                              strcat( (char *)tempBffr2, "\r\n" );
   \   0000120A   0xA118             ADR.N    R1,??RoadBrd_ParseString_63+0xC  ;; 0x0D, 0x0A, 0x00, 0x00
   \   0000120C   0xA80B             ADD      R0,SP,#+44
   \   0000120E   0x.... 0x....      BL       strcat
   1519                              break;
   \   00001212   0xE077             B.N      ??RoadBrd_ParseString_195
   1520          //------------------ D1 Command...Read Temperature Values..... 
   1521                            case '1':
   1522                              // Read Humidity Sensor sensor and return Temperature results....
   1523                              Status = RoadBrd_Humidity_ReadTemperature( &TMeasure );
   \                     ??RoadBrd_ParseString_197: (+1)
   \   00001214   0xA83C             ADD      R0,SP,#+240
   \   00001216   0x.... 0x....      BL       RoadBrd_Humidity_ReadTemperature
   \   0000121A   0x0006             MOVS     R6,R0
   1524                              // Is this a BLE Operation?
   1525                              if ( BLE_Flag )
   \   0000121C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000121E   0x2D00             CMP      R5,#+0
   \   00001220   0xD00A             BEQ.N    ??RoadBrd_ParseString_208
   1526                              {
   1527                                // Yes...Build and Send BLE Response NOW.
   1528                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001222   0xF8DF 0x1DA4      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   00001226   0xA80B             ADD      R0,SP,#+44
   \   00001228   0x.... 0x....      BL       strcpy
   1529                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000122C   0xA80B             ADD      R0,SP,#+44
   \   0000122E   0x.... 0x....      BL       strlen
   \   00001232   0xA90B             ADD      R1,SP,#+44
   \   00001234   0x.... 0x....      BL       BGM111_Transmit
   1530                              }
   1531          
   1532                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_208: (+1)
   \   00001238   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000123A   0x2E00             CMP      R6,#+0
   \   0000123C   0xD136             BNE.N    ??RoadBrd_ParseString_209
   1533                              {
   1534                                // Send string to UART..
   1535                                strcpy( (char *)tempBffr2, "Humidity SENSOR...\r\n");
   \   0000123E   0xF8DF 0x1BA4      LDR.W    R1,??RoadBrd_ParseString_185+0x4
   \   00001242   0xA80B             ADD      R0,SP,#+44
   \   00001244   0x.... 0x....      BL       strcpy
   1536          #ifdef NUCLEO
   1537                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1538          #else
   1539                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00001248   0xA90B             ADD      R1,SP,#+44
   \   0000124A   0x2000             MOVS     R0,#+0
   \   0000124C   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001250   0x0006             MOVS     R6,R0
   1540          #endif
   1541                                if (Status != HAL_OK)
   \   00001252   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001254   0x2E00             CMP      R6,#+0
   \   00001256   0xD013             BEQ.N    ??RoadBrd_ParseString_210
   1542                                  return Status;
   \   00001258   0x0030             MOVS     R0,R6
   \   0000125A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000125C   0xF003 0xBCCB      B.W      ??RoadBrd_ParseString_4
   \                     ??RoadBrd_ParseString_63:
   \   00001260   0x........         DC32     ?_27
   \   00001264   0x........         DC32     ?_28
   \   00001268   0x........         DC32     ?_29
   \   0000126C   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
   \   00001270   0x........         DC32     ?_30
   \   00001274   0x........         DC32     ?_31
   \   00001278   0x........         DC32     ?_32
   \   0000127C   0x........         DC32     ?_33
   1543                                // NOW, Build Data String..
   1544                                sprintf( (char *)tempBffr2, "     TEMP DATA: " );
   \                     ??RoadBrd_ParseString_210: (+1)
   \   00001280   0x4937             LDR.N    R1,??RoadBrd_ParseString_71+0x4
   \   00001282   0xA80B             ADD      R0,SP,#+44
   \   00001284   0x.... 0x....      BL       sprintf
   1545                                strcat( (char *)tempBffr2, (char *)TMeasure.Raw );
   \   00001288   0xF10D 0x01FE      ADD      R1,SP,#+254
   \   0000128C   0xA80B             ADD      R0,SP,#+44
   \   0000128E   0x.... 0x....      BL       strcat
   1546                                strcat( (char *)tempBffr2, "\r\n" );
   \   00001292   0xA1B6             ADR.N    R1,??RoadBrd_ParseString_103+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001294   0xA80B             ADD      R0,SP,#+44
   \   00001296   0x.... 0x....      BL       strcat
   1547                              }
   1548                              else
   1549                                break;
   1550          #ifdef NUCLEO
   1551                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1552          #else
   1553                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000129A   0xA90B             ADD      R1,SP,#+44
   \   0000129C   0x2000             MOVS     R0,#+0
   \   0000129E   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000012A2   0x0006             MOVS     R6,R0
   1554          #endif
   1555                              if (Status != HAL_OK)
   \   000012A4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000012A6   0x2E00             CMP      R6,#+0
   \   000012A8   0xD101             BNE.N    ??RoadBrd_ParseString_211
   \   000012AA   0xE004             B.N      ??RoadBrd_ParseString_212
   \                     ??RoadBrd_ParseString_209: (+1)
   \   000012AC   0xE02A             B.N      ??RoadBrd_ParseString_195
   1556                                return Status;
   \                     ??RoadBrd_ParseString_211: (+1)
   \   000012AE   0x0030             MOVS     R0,R6
   \   000012B0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000012B2   0xF003 0xBCA0      B.W      ??RoadBrd_ParseString_4
   1557                              // NOW, Build Data String..
   1558                              sprintf( (char *)tempBffr2, "     TEMP DATA(Decimal): %d\r\n", TMeasure.RawC );
   \                     ??RoadBrd_ParseString_212: (+1)
   \   000012B6   0xF8BD 0x2106      LDRH     R2,[SP, #+262]
   \   000012BA   0x492A             LDR.N    R1,??RoadBrd_ParseString_71+0x8
   \   000012BC   0xA80B             ADD      R0,SP,#+44
   \   000012BE   0x.... 0x....      BL       sprintf
   1559          #ifdef NUCLEO
   1560                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1561          #else
   1562                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000012C2   0xA90B             ADD      R1,SP,#+44
   \   000012C4   0x2000             MOVS     R0,#+0
   \   000012C6   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000012CA   0x0006             MOVS     R6,R0
   1563          #endif
   1564                              if (Status != HAL_OK)
   \   000012CC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000012CE   0x2E00             CMP      R6,#+0
   \   000012D0   0xD003             BEQ.N    ??RoadBrd_ParseString_213
   1565                                return Status;
   \   000012D2   0x0030             MOVS     R0,R6
   \   000012D4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000012D6   0xF003 0xBC8E      B.W      ??RoadBrd_ParseString_4
   1566                              // Now calculate Celcius and Farenheit Temp.
   1567                              sprintf( (char *)tempBffr2, "     TempC: " );
   \                     ??RoadBrd_ParseString_213: (+1)
   \   000012DA   0x494B             LDR.N    R1,??RoadBrd_ParseString_78
   \   000012DC   0xA80B             ADD      R0,SP,#+44
   \   000012DE   0x.... 0x....      BL       sprintf
   1568                              strcat( (char *)tempBffr2, (char *)TMeasure.TempC );
   \   000012E2   0xA93C             ADD      R1,SP,#+240
   \   000012E4   0xA80B             ADD      R0,SP,#+44
   \   000012E6   0x.... 0x....      BL       strcat
   1569                              strcat( (char *)tempBffr2, "     TempF: " );
   \   000012EA   0x4948             LDR.N    R1,??RoadBrd_ParseString_78+0x4
   \   000012EC   0xA80B             ADD      R0,SP,#+44
   \   000012EE   0x.... 0x....      BL       strcat
   1570                              strcat( (char *)tempBffr2, (char *)TMeasure.TempF );
   \   000012F2   0xF10D 0x01F7      ADD      R1,SP,#+247
   \   000012F6   0xA80B             ADD      R0,SP,#+44
   \   000012F8   0x.... 0x....      BL       strcat
   1571                              strcat( (char *)tempBffr2, "\r\n" );
   \   000012FC   0xA19B             ADR.N    R1,??RoadBrd_ParseString_103+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   000012FE   0xA80B             ADD      R0,SP,#+44
   \   00001300   0x.... 0x....      BL       strcat
   1572                              break;
   1573                          } //EndSwitch
   1574                        } //EndElse (Size == 1)
   1575                        break;
   \                     ??RoadBrd_ParseString_195: (+1)
   \   00001304   0xF003 0xBBF3      B.W      ??RoadBrd_ParseString_26
   1576          //**************************************************************************************************
   1577                      case 'E':
   1578                        // Read Temp and Pressure. 
   1579                        // Is this a BLE Operation?
   1580                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_16: (+1)
   \   00001308   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000130A   0x2D00             CMP      R5,#+0
   \   0000130C   0xD00A             BEQ.N    ??RoadBrd_ParseString_214
   1581                        {
   1582                          // Yes...Build and Send BLE Response NOW.
   1583                          strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   0000130E   0xF8DF 0x1CB8      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   00001312   0xA80B             ADD      R0,SP,#+44
   \   00001314   0x.... 0x....      BL       strcpy
   1584                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001318   0xA80B             ADD      R0,SP,#+44
   \   0000131A   0x.... 0x....      BL       strlen
   \   0000131E   0xA90B             ADD      R1,SP,#+44
   \   00001320   0x.... 0x....      BL       BGM111_Transmit
   1585                        }
   1586                        
   1587                        strcpy( (char *)tempBffr2, "TBD: Read Temp and Pressure NOT IMPLEMENTED\r\n");
   \                     ??RoadBrd_ParseString_214: (+1)
   \   00001324   0xF8DF 0x1D80      LDR.W    R1,??RoadBrd_ParseString_215
   \   00001328   0xA80B             ADD      R0,SP,#+44
   \   0000132A   0x.... 0x....      BL       strcpy
   1588                        break;
   \   0000132E   0xF003 0xBBDE      B.W      ??RoadBrd_ParseString_26
   1589          //**************************************************************************************************
   1590                      case 'F':
   1591                        // NO ACTION. 
   1592                        // Is this a BLE Operation?
   1593                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_17: (+1)
   \   00001332   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001334   0x2D00             CMP      R5,#+0
   \   00001336   0xD00A             BEQ.N    ??RoadBrd_ParseString_216
   1594                        {
   1595                          // Yes...Build and Send BLE Response NOW.
   1596                          strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001338   0xF8DF 0x1C8C      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   0000133C   0xA80B             ADD      R0,SP,#+44
   \   0000133E   0x.... 0x....      BL       strcpy
   1597                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001342   0xA80B             ADD      R0,SP,#+44
   \   00001344   0x.... 0x....      BL       strlen
   \   00001348   0xA90B             ADD      R1,SP,#+44
   \   0000134A   0x.... 0x....      BL       BGM111_Transmit
   1598                        }
   1599                        
   1600                        strcpy( (char *)tempBffr2, "NO Action...(0x00).\r\n");
   \                     ??RoadBrd_ParseString_216: (+1)
   \   0000134E   0xF8DF 0x1D5C      LDR.W    R1,??RoadBrd_ParseString_215+0x4
   \   00001352   0xA80B             ADD      R0,SP,#+44
   \   00001354   0x.... 0x....      BL       strcpy
   1601                        break;
   \   00001358   0xF003 0xBBC9      B.W      ??RoadBrd_ParseString_26
   \                     ??RoadBrd_ParseString_71:
   \   0000135C   0x........         DC32     ?_34
   \   00001360   0x........         DC32     ?_35
   \   00001364   0x........         DC32     ?_36
   1602          //**************************************************************************************************
   1603                      case 'G':
   1604                        // Read Temperature sensor and return results....Temperature Sensor U10(PCT2075GVJ).  Addr: 0x94
   1605                        Status = RoadBrd_ReadTemp( &TMeasure );
   \                     ??RoadBrd_ParseString_18: (+1)
   \   00001368   0xA83C             ADD      R0,SP,#+240
   \   0000136A   0x.... 0x....      BL       RoadBrd_ReadTemp
   \   0000136E   0x0006             MOVS     R6,R0
   1606                        if (Status == HAL_OK)
   \   00001370   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001372   0x2E00             CMP      R6,#+0
   \   00001374   0xD103             BNE.N    ??RoadBrd_ParseString_217
   1607                          Status = RoadBrd_ReadTemp_Scaled( &TMeasureScaled );
   \   00001376   0xA8BF             ADD      R0,SP,#+764
   \   00001378   0x.... 0x....      BL       RoadBrd_ReadTemp_Scaled
   \   0000137C   0x0006             MOVS     R6,R0
   1608                        if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_217: (+1)
   \   0000137E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001380   0x2E00             CMP      R6,#+0
   \   00001382   0xD127             BNE.N    ??RoadBrd_ParseString_218
   1609                        {
   1610                          // Send string to UART..
   1611                          strcpy( (char *)tempBffr2, "TEMP SENSOR...\r\n");
   \   00001384   0xF8DF 0x1D28      LDR.W    R1,??RoadBrd_ParseString_215+0x8
   \   00001388   0xA80B             ADD      R0,SP,#+44
   \   0000138A   0x.... 0x....      BL       strcpy
   1612          #ifdef NUCLEO
   1613                          Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1614          #else
   1615                          Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000138E   0xA90B             ADD      R1,SP,#+44
   \   00001390   0x2000             MOVS     R0,#+0
   \   00001392   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001396   0x0006             MOVS     R6,R0
   1616          #endif
   1617                          if (Status != HAL_OK)
   \   00001398   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000139A   0x2E00             CMP      R6,#+0
   \   0000139C   0xD003             BEQ.N    ??RoadBrd_ParseString_219
   1618                            return Status;
   \   0000139E   0x0030             MOVS     R0,R6
   \   000013A0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000013A2   0xF003 0xBC28      B.W      ??RoadBrd_ParseString_4
   1619                          // NOW, Build Data String..
   1620                          sprintf( (char *)tempBffr2, "     TEMP DATA: " );
   \                     ??RoadBrd_ParseString_219: (+1)
   \   000013A6   0xF8DF 0x1D0C      LDR.W    R1,??RoadBrd_ParseString_215+0xC
   \   000013AA   0xA80B             ADD      R0,SP,#+44
   \   000013AC   0x.... 0x....      BL       sprintf
   1621                          strcat( (char *)tempBffr2, (char *)TMeasure.Raw );
   \   000013B0   0xF10D 0x01FE      ADD      R1,SP,#+254
   \   000013B4   0xA80B             ADD      R0,SP,#+44
   \   000013B6   0x.... 0x....      BL       strcat
   1622                          strcat( (char *)tempBffr2, "\r\n" );
   \   000013BA   0xA16C             ADR.N    R1,??RoadBrd_ParseString_103+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   000013BC   0xA80B             ADD      R0,SP,#+44
   \   000013BE   0x.... 0x....      BL       strcat
   1623                        }
   1624                        else
   1625                          break;
   1626          #ifdef NUCLEO
   1627                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1628          #else
   1629                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000013C2   0xA90B             ADD      R1,SP,#+44
   \   000013C4   0x2000             MOVS     R0,#+0
   \   000013C6   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000013CA   0x0006             MOVS     R6,R0
   1630          #endif
   1631                        if (Status != HAL_OK)
   \   000013CC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000013CE   0x2E00             CMP      R6,#+0
   \   000013D0   0xD102             BNE.N    ??RoadBrd_ParseString_220
   \   000013D2   0xE005             B.N      ??RoadBrd_ParseString_221
   \                     ??RoadBrd_ParseString_218: (+1)
   \   000013D4   0xF003 0xBB8B      B.W      ??RoadBrd_ParseString_26
   1632                          return Status;
   \                     ??RoadBrd_ParseString_220: (+1)
   \   000013D8   0x0030             MOVS     R0,R6
   \   000013DA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000013DC   0xF003 0xBC0B      B.W      ??RoadBrd_ParseString_4
   1633                        // NOW, Build Data String..
   1634                        sprintf( (char *)tempBffr2, "     TEMP DATA(Decimal): %d\r\n", TMeasure.RawC );
   \                     ??RoadBrd_ParseString_221: (+1)
   \   000013E0   0xF8BD 0x2106      LDRH     R2,[SP, #+262]
   \   000013E4   0xF8DF 0x1DEC      LDR.W    R1,??RoadBrd_ParseString_222
   \   000013E8   0xA80B             ADD      R0,SP,#+44
   \   000013EA   0x.... 0x....      BL       sprintf
   1635          #ifdef NUCLEO
   1636                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1637          #else
   1638                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000013EE   0xA90B             ADD      R1,SP,#+44
   \   000013F0   0x2000             MOVS     R0,#+0
   \   000013F2   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000013F6   0x0006             MOVS     R6,R0
   1639          #endif
   1640                        if (Status != HAL_OK)
   \   000013F8   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000013FA   0x2E00             CMP      R6,#+0
   \   000013FC   0xD008             BEQ.N    ??RoadBrd_ParseString_223
   1641                          return Status;
   \   000013FE   0x0030             MOVS     R0,R6
   \   00001400   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001402   0xF003 0xBBF8      B.W      ??RoadBrd_ParseString_4
   \   00001406   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_78:
   \   00001408   0x........         DC32     ?_37
   \   0000140C   0x........         DC32     ?_38
   1642                        // Is this a BLE Operation?
   1643                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_223: (+1)
   \   00001410   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001412   0x2D00             CMP      R5,#+0
   \   00001414   0xD012             BEQ.N    ??RoadBrd_ParseString_224
   1644                        {
   1645                          // Yes...Build and Send BLE Response NOW.
   1646                          sprintf( (char *)tempBffr2, "<STATUS>TEMPC:%s/%s//TEMPF:%s/%s</STATUS>", 
   1647                                  (char *)TMeasure.TempC, 
   1648                                  (char *)TMeasureScaled.TempC,
   1649                                  (char *)TMeasure.TempF, 
   1650                                  (char *)TMeasureScaled.TempF);
   \   00001416   0xA8C0             ADD      R0,SP,#+768
   \   00001418   0x1CC0             ADDS     R0,R0,#+3
   \   0000141A   0x9001             STR      R0,[SP, #+4]
   \   0000141C   0xF10D 0x00F7      ADD      R0,SP,#+247
   \   00001420   0x9000             STR      R0,[SP, #+0]
   \   00001422   0xABBF             ADD      R3,SP,#+764
   \   00001424   0xAA3C             ADD      R2,SP,#+240
   \   00001426   0xF8DF 0x1E04      LDR.W    R1,??RoadBrd_ParseString_225
   \   0000142A   0xA80B             ADD      R0,SP,#+44
   \   0000142C   0x.... 0x....      BL       sprintf
   1651                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001430   0xA80B             ADD      R0,SP,#+44
   \   00001432   0x.... 0x....      BL       strlen
   \   00001436   0xA90B             ADD      R1,SP,#+44
   \   00001438   0x.... 0x....      BL       BGM111_Transmit
   1652                        }
   1653                        
   1654                        // Now calculate Celcius and Farenheit Temp.
   1655                        sprintf( (char *)tempBffr2, "     TempC: %s/%s     TempF: %s/%s\r\n", 
   1656                                (char *)TMeasure.TempC, 
   1657                                (char *)TMeasureScaled.TempC,
   1658                                (char *)TMeasure.TempF, 
   1659                                (char *)TMeasureScaled.TempF);
   \                     ??RoadBrd_ParseString_224: (+1)
   \   0000143C   0xA8C0             ADD      R0,SP,#+768
   \   0000143E   0x1CC0             ADDS     R0,R0,#+3
   \   00001440   0x9001             STR      R0,[SP, #+4]
   \   00001442   0xF10D 0x00F7      ADD      R0,SP,#+247
   \   00001446   0x9000             STR      R0,[SP, #+0]
   \   00001448   0xABBF             ADD      R3,SP,#+764
   \   0000144A   0xAA3C             ADD      R2,SP,#+240
   \   0000144C   0xF8DF 0x1DE0      LDR.W    R1,??RoadBrd_ParseString_225+0x4
   \   00001450   0xA80B             ADD      R0,SP,#+44
   \   00001452   0x.... 0x....      BL       sprintf
   1660                        break;
   \   00001456   0xF003 0xBB4A      B.W      ??RoadBrd_ParseString_26
   \   0000145A   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_81:
   \   0000145C   0x........         DC32     ?_39
   \   00001460   0x........         DC32     ?_40
   \   00001464   0x........         DC32     ?_41
   1661          //**************************************************************************************************
   1662                      case 'H':
   1663                        // RGB Color Light Sensor U15(ISL91250).  Addr: 0x88
   1664                        if (Size == 1)
   \                     ??RoadBrd_ParseString_19: (+1)
   \   00001468   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   0000146C   0x2801             CMP      R0,#+1
   \   0000146E   0xF040 0x8081      BNE.W    ??RoadBrd_ParseString_226
   1665                        {
   1666          //------------------ H Command...Read RGB Values and Return as 3 (2 Byte Fields)....REDmsb,REDlsb,GREENmsb,GREENlsb,BLUEmsb,BLUElsb.....     
   1667                          // 1. Time to send Command and collect status.
   1668                          Status = RoadBrd_RGBReadValues( &RGBValues );
   \   00001472   0xA8B5             ADD      R0,SP,#+724
   \   00001474   0x.... 0x....      BL       RoadBrd_RGBReadValues
   \   00001478   0x0006             MOVS     R6,R0
   1669                          if (Status == HAL_OK)
   \   0000147A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000147C   0x2E00             CMP      R6,#+0
   \   0000147E   0xD177             BNE.N    ??RoadBrd_ParseString_227
   1670                          {
   1671                            // Send string to UART..
   1672                            strcpy( (char *)tempBffr2, "RGB Color Light Sensor...\r\n");
   \   00001480   0xF8DF 0x1DDC      LDR.W    R1,??RoadBrd_ParseString_228
   \   00001484   0xA80B             ADD      R0,SP,#+44
   \   00001486   0x.... 0x....      BL       strcpy
   1673          #ifdef NUCLEO
   1674                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1675          #else
   1676                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000148A   0xA90B             ADD      R1,SP,#+44
   \   0000148C   0x2000             MOVS     R0,#+0
   \   0000148E   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001492   0x0006             MOVS     R6,R0
   1677          #endif
   1678                            if (Status != HAL_OK)
   \   00001494   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001496   0x2E00             CMP      R6,#+0
   \   00001498   0xD003             BEQ.N    ??RoadBrd_ParseString_229
   1679                              return Status;
   \   0000149A   0x0030             MOVS     R0,R6
   \   0000149C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000149E   0xF003 0xBBAA      B.W      ??RoadBrd_ParseString_4
   1680                            // NOW, Build Data String..
   1681                            sprintf( (char *)tempBffr2, " RGB(REDmsb,REDlsb,GREENmsb,GREENlsb,BLUEmsb,BLUElsb)\r\n" );
   \                     ??RoadBrd_ParseString_229: (+1)
   \   000014A2   0xF8DF 0x1DEC      LDR.W    R1,??RoadBrd_ParseString_230
   \   000014A6   0xA80B             ADD      R0,SP,#+44
   \   000014A8   0x.... 0x....      BL       sprintf
   1682          #ifdef NUCLEO
   1683                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1684          #else
   1685                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000014AC   0xA90B             ADD      R1,SP,#+44
   \   000014AE   0x2000             MOVS     R0,#+0
   \   000014B0   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000014B4   0x0006             MOVS     R6,R0
   1686          #endif
   1687                            if (Status != HAL_OK)
   \   000014B6   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000014B8   0x2E00             CMP      R6,#+0
   \   000014BA   0xD003             BEQ.N    ??RoadBrd_ParseString_231
   1688                              return Status;
   \   000014BC   0x0030             MOVS     R0,R6
   \   000014BE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000014C0   0xF003 0xBB99      B.W      ??RoadBrd_ParseString_4
   1689                            strcpy( (char *)tempBffr2, "       DATA: ");
   \                     ??RoadBrd_ParseString_231: (+1)
   \   000014C4   0xF8DF 0x1DCC      LDR.W    R1,??RoadBrd_ParseString_230+0x4
   \   000014C8   0xA80B             ADD      R0,SP,#+44
   \   000014CA   0x.... 0x....      BL       strcpy
   1690                            strcat( (char *)tempBffr2, (char *)RGBValues.Raw );
   \   000014CE   0xA9BB             ADD      R1,SP,#+748
   \   000014D0   0xA80B             ADD      R0,SP,#+44
   \   000014D2   0x.... 0x....      BL       strcat
   1691                            strcat( (char *)tempBffr2, "\r\n" );
   \   000014D6   0xA125             ADR.N    R1,??RoadBrd_ParseString_103+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   000014D8   0xA80B             ADD      R0,SP,#+44
   \   000014DA   0x.... 0x....      BL       strcat
   1692          #ifdef NUCLEO
   1693                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1694          #else
   1695                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000014DE   0xA90B             ADD      R1,SP,#+44
   \   000014E0   0x2000             MOVS     R0,#+0
   \   000014E2   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000014E6   0x0006             MOVS     R6,R0
   1696          #endif
   1697                            if (Status != HAL_OK)
   \   000014E8   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000014EA   0x2E00             CMP      R6,#+0
   \   000014EC   0xD008             BEQ.N    ??RoadBrd_ParseString_232
   1698                              return Status;
   \   000014EE   0x0030             MOVS     R0,R6
   \   000014F0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000014F2   0xF003 0xBB80      B.W      ??RoadBrd_ParseString_4
   \   000014F6   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_88:
   \   000014F8   0x........         DC32     ?_42
   \   000014FC   0x........         DC32     ?_43
   1699                            // Is this a BLE Operation?
   1700                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_232: (+1)
   \   00001500   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001502   0x2D00             CMP      R5,#+0
   \   00001504   0xD00E             BEQ.N    ??RoadBrd_ParseString_233
   1701                            {
   1702                              // Yes...Build and Send BLE Response NOW.
   1703                              sprintf( (char *)tempBffr2, "<STATUS>RED:%s/GREEN:%s/BLUE:%s</STATUS>", 
   1704                                      (char *)RGBValues.Red, 
   1705                                      (char *)RGBValues.Green,
   1706                                      (char *)RGBValues.Blue);
   \   00001506   0xA8B9             ADD      R0,SP,#+740
   \   00001508   0x9000             STR      R0,[SP, #+0]
   \   0000150A   0xABB7             ADD      R3,SP,#+732
   \   0000150C   0xAAB5             ADD      R2,SP,#+724
   \   0000150E   0xF8DF 0x1DD4      LDR.W    R1,??RoadBrd_ParseString_234
   \   00001512   0xA80B             ADD      R0,SP,#+44
   \   00001514   0x.... 0x....      BL       sprintf
   1707                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001518   0xA80B             ADD      R0,SP,#+44
   \   0000151A   0x.... 0x....      BL       strlen
   \   0000151E   0xA90B             ADD      R1,SP,#+44
   \   00001520   0x.... 0x....      BL       BGM111_Transmit
   1708                            }
   1709                            
   1710                            // Now DisplayEach Value Calculated.
   1711                            strcpy( (char *)tempBffr2, "    Red: ");
   \                     ??RoadBrd_ParseString_233: (+1)
   \   00001524   0xF8DF 0x1DC0      LDR.W    R1,??RoadBrd_ParseString_234+0x4
   \   00001528   0xA80B             ADD      R0,SP,#+44
   \   0000152A   0x.... 0x....      BL       strcpy
   1712                            strcat( (char *)tempBffr2, (char *)RGBValues.Red );
   \   0000152E   0xA9B5             ADD      R1,SP,#+724
   \   00001530   0xA80B             ADD      R0,SP,#+44
   \   00001532   0x.... 0x....      BL       strcat
   1713                            strcat( (char *)tempBffr2, "    Green: ");
   \   00001536   0xF8DF 0x1DB4      LDR.W    R1,??RoadBrd_ParseString_234+0x8
   \   0000153A   0xA80B             ADD      R0,SP,#+44
   \   0000153C   0x.... 0x....      BL       strcat
   1714                            strcat( (char *)tempBffr2, (char *)RGBValues.Green );
   \   00001540   0xA9B7             ADD      R1,SP,#+732
   \   00001542   0xA80B             ADD      R0,SP,#+44
   \   00001544   0x.... 0x....      BL       strcat
   1715                            strcat( (char *)tempBffr2, "    Blue: ");
   \   00001548   0xF8DF 0x1DD8      LDR.W    R1,??RoadBrd_ParseString_235
   \   0000154C   0xA80B             ADD      R0,SP,#+44
   \   0000154E   0x.... 0x....      BL       strcat
   1716                            strcat( (char *)tempBffr2, (char *)RGBValues.Blue );
   \   00001552   0xA9B9             ADD      R1,SP,#+740
   \   00001554   0xA80B             ADD      R0,SP,#+44
   \   00001556   0x.... 0x....      BL       strcat
   1717                            strcat( (char *)tempBffr2, "\r\n" );
   \   0000155A   0xA104             ADR.N    R1,??RoadBrd_ParseString_103+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   0000155C   0xA80B             ADD      R0,SP,#+44
   \   0000155E   0x.... 0x....      BL       strcat
   \   00001562   0xE261             B.N      ??RoadBrd_ParseString_236
   \                     ??RoadBrd_ParseString_103:
   \   00001564   0x........         DC32     ?_44
   \   00001568   0x........         DC32     ?_45
   \   0000156C   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
   1718                          }
   1719                          else
   1720                            break;
   \                     ??RoadBrd_ParseString_227: (+1)
   \   00001570   0xF003 0xBABD      B.W      ??RoadBrd_ParseString_26
   1721                        }
   1722                        else
   1723                        {
   1724                          switch( tempBffr[1] )
   \                     ??RoadBrd_ParseString_226: (+1)
   \   00001574   0x7860             LDRB     R0,[R4, #+1]
   \   00001576   0x2830             CMP      R0,#+48
   \   00001578   0xF000 0x815F      BEQ.W    ??RoadBrd_ParseString_237
   \   0000157C   0x2831             CMP      R0,#+49
   \   0000157E   0xF000 0x81CD      BEQ.W    ??RoadBrd_ParseString_238
   \   00001582   0x2832             CMP      R0,#+50
   \   00001584   0xF000 0x81FA      BEQ.W    ??RoadBrd_ParseString_239
   \   00001588   0x2833             CMP      R0,#+51
   \   0000158A   0xF000 0x8214      BEQ.W    ??RoadBrd_ParseString_240
   \   0000158E   0x2849             CMP      R0,#+73
   \   00001590   0xF040 0x8245      BNE.W    ??RoadBrd_ParseString_241
   1725                          {
   1726          //------------------ HI Command...Initialize RGB Color Light Sensor.....     
   1727                            case 'I':
   1728                              if (Size == 2)
   \                     ??RoadBrd_ParseString_242: (+1)
   \   00001594   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   00001598   0x2802             CMP      R0,#+2
   \   0000159A   0xD11A             BNE.N    ??RoadBrd_ParseString_243
   1729                              {
   1730                                // This is the default init. Assume Default Parms and write them.
   1731                                Status = RoadBrd_RGBInit();
   \   0000159C   0x.... 0x....      BL       RoadBrd_RGBInit
   \   000015A0   0x0006             MOVS     R6,R0
   1732          
   1733                                // Is this a BLE Operation?
   1734                                if ( BLE_Flag )
   \   000015A2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000015A4   0x2D00             CMP      R5,#+0
   \   000015A6   0xD00A             BEQ.N    ??RoadBrd_ParseString_244
   1735                                {
   1736                                  // Yes...Build and Send BLE Response NOW.
   1737                                  strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000015A8   0xF8DF 0x1A1C      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   000015AC   0xA80B             ADD      R0,SP,#+44
   \   000015AE   0x.... 0x....      BL       strcpy
   1738                                  BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000015B2   0xA80B             ADD      R0,SP,#+44
   \   000015B4   0x.... 0x....      BL       strlen
   \   000015B8   0xA90B             ADD      R1,SP,#+44
   \   000015BA   0x.... 0x....      BL       BGM111_Transmit
   1739                                }
   1740                                
   1741                                if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_244: (+1)
   \   000015BE   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000015C0   0x2E00             CMP      R6,#+0
   \   000015C2   0xF040 0x8139      BNE.W    ??RoadBrd_ParseString_245
   1742                                {
   1743                                  strcpy( (char *)tempBffr2, "RGB Color Light Sensor: Initialization Complete with DEFAULT Values.\r\n");;
   \   000015C6   0xF8DF 0x1D60      LDR.W    R1,??RoadBrd_ParseString_235+0x4
   \   000015CA   0xA80B             ADD      R0,SP,#+44
   \   000015CC   0x.... 0x....      BL       strcpy
   \   000015D0   0xE132             B.N      ??RoadBrd_ParseString_245
   1744                                }
   1745                                
   1746                              }
   1747                              else
   1748                              {
   1749                                // Is this a BLE Operation?
   1750                                if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_243: (+1)
   \   000015D2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000015D4   0x2D00             CMP      R5,#+0
   \   000015D6   0xD00A             BEQ.N    ??RoadBrd_ParseString_246
   1751                                {
   1752                                  // Yes...Build and Send BLE Response NOW.
   1753                                  strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000015D8   0xF8DF 0x19EC      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   000015DC   0xA80B             ADD      R0,SP,#+44
   \   000015DE   0x.... 0x....      BL       strcpy
   1754                                  BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000015E2   0xA80B             ADD      R0,SP,#+44
   \   000015E4   0x.... 0x....      BL       strlen
   \   000015E8   0xA90B             ADD      R1,SP,#+44
   \   000015EA   0x.... 0x....      BL       BGM111_Transmit
   1755                                }
   1756                                
   1757                                // This is the Parameter init. Will have to verify all parameters first.
   1758                                if ( Size != 29 )
   \                     ??RoadBrd_ParseString_246: (+1)
   \   000015EE   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   000015F2   0x281D             CMP      R0,#+29
   \   000015F4   0xD005             BEQ.N    ??RoadBrd_ParseString_247
   1759                                {
   1760                                  strcpy( (char *)tempBffr2, "RGB Color Light Sensor: SYNTAX Error. Parameters are not correct.\r\n");;
   \   000015F6   0xF8DF 0x1DCC      LDR.W    R1,??RoadBrd_ParseString_248
   \   000015FA   0xA80B             ADD      R0,SP,#+44
   \   000015FC   0x.... 0x....      BL       strcpy
   \   00001600   0xE11A             B.N      ??RoadBrd_ParseString_245
   1761                                }
   1762                                else
   1763                                {
   1764                                  // Step 1. Validate format.
   1765                                  if( (tempBffr[2]!=':') ||
   1766                                      (tempBffr[5]!='.') || 
   1767                                      (tempBffr[8]!='.') || 
   1768                                      (tempBffr[11]!='.') || 
   1769                                      (tempBffr[14]!='.') || 
   1770                                      (tempBffr[17]!='.') || 
   1771                                      (tempBffr[20]!='.') || 
   1772                                      (tempBffr[23]!='.') || 
   1773                                      (tempBffr[26]!='.') )
   \                     ??RoadBrd_ParseString_247: (+1)
   \   00001602   0x78A0             LDRB     R0,[R4, #+2]
   \   00001604   0x283A             CMP      R0,#+58
   \   00001606   0xD117             BNE.N    ??RoadBrd_ParseString_249
   \   00001608   0x7960             LDRB     R0,[R4, #+5]
   \   0000160A   0x282E             CMP      R0,#+46
   \   0000160C   0xD114             BNE.N    ??RoadBrd_ParseString_249
   \   0000160E   0x7A20             LDRB     R0,[R4, #+8]
   \   00001610   0x282E             CMP      R0,#+46
   \   00001612   0xD111             BNE.N    ??RoadBrd_ParseString_249
   \   00001614   0x7AE0             LDRB     R0,[R4, #+11]
   \   00001616   0x282E             CMP      R0,#+46
   \   00001618   0xD10E             BNE.N    ??RoadBrd_ParseString_249
   \   0000161A   0x7BA0             LDRB     R0,[R4, #+14]
   \   0000161C   0x282E             CMP      R0,#+46
   \   0000161E   0xD10B             BNE.N    ??RoadBrd_ParseString_249
   \   00001620   0x7C60             LDRB     R0,[R4, #+17]
   \   00001622   0x282E             CMP      R0,#+46
   \   00001624   0xD108             BNE.N    ??RoadBrd_ParseString_249
   \   00001626   0x7D20             LDRB     R0,[R4, #+20]
   \   00001628   0x282E             CMP      R0,#+46
   \   0000162A   0xD105             BNE.N    ??RoadBrd_ParseString_249
   \   0000162C   0x7DE0             LDRB     R0,[R4, #+23]
   \   0000162E   0x282E             CMP      R0,#+46
   \   00001630   0xD102             BNE.N    ??RoadBrd_ParseString_249
   \   00001632   0x7EA0             LDRB     R0,[R4, #+26]
   \   00001634   0x282E             CMP      R0,#+46
   \   00001636   0xD005             BEQ.N    ??RoadBrd_ParseString_250
   1774                                  {
   1775                                    strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: Not correct format. Punctuation!\r\n");
   \                     ??RoadBrd_ParseString_249: (+1)
   \   00001638   0xF8DF 0x1D94      LDR.W    R1,??RoadBrd_ParseString_248+0xC
   \   0000163C   0xA80B             ADD      R0,SP,#+44
   \   0000163E   0x.... 0x....      BL       strcpy
   \   00001642   0xE0F9             B.N      ??RoadBrd_ParseString_245
   1776                                  }
   1777                                  else
   1778                                  {
   1779                                    // Syntax correct. Time to grab parameters.
   1780                                    Error = 0;
   \                     ??RoadBrd_ParseString_250: (+1)
   \   00001644   0x2000             MOVS     R0,#+0
   \   00001646   0x9035             STR      R0,[SP, #+212]
   1781                                    for (x=0; x<9; x++)
   \   00001648   0x2000             MOVS     R0,#+0
   \   0000164A   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_251: (+1)
   \   0000164C   0x2F09             CMP      R7,#+9
   \   0000164E   0xDA26             BGE.N    ??RoadBrd_ParseString_252
   1782                                    {
   1783                                      tempBffr3[0] = tempBffr[3+x*3];
   \   00001650   0x2003             MOVS     R0,#+3
   \   00001652   0xFB00 0xF007      MUL      R0,R0,R7
   \   00001656   0x4420             ADD      R0,R4,R0
   \   00001658   0xF990 0x0003      LDRSB    R0,[R0, #+3]
   \   0000165C   0xF88D 0x00AC      STRB     R0,[SP, #+172]
   1784                                      tempBffr3[1] = tempBffr[4+x*3];
   \   00001660   0x2003             MOVS     R0,#+3
   \   00001662   0xFB00 0xF007      MUL      R0,R0,R7
   \   00001666   0x4420             ADD      R0,R4,R0
   \   00001668   0xF990 0x0004      LDRSB    R0,[R0, #+4]
   \   0000166C   0xF88D 0x00AD      STRB     R0,[SP, #+173]
   1785                                      tempBffr3[2] = 0x00;
   \   00001670   0x2000             MOVS     R0,#+0
   \   00001672   0xF88D 0x00AE      STRB     R0,[SP, #+174]
   1786                                      if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001676   0xA82B             ADD      R0,SP,#+172
   \   00001678   0x.... 0x....      BL       isHexNum
   \   0000167C   0x2800             CMP      R0,#+0
   \   0000167E   0xD107             BNE.N    ??RoadBrd_ParseString_253
   1787                                      {
   1788                                        strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR:Parameters not HEX Value.\r\n");
   \   00001680   0xF8DF 0x1DC8      LDR.W    R1,??RoadBrd_ParseString_254
   \   00001684   0xA80B             ADD      R0,SP,#+44
   \   00001686   0x.... 0x....      BL       strcpy
   1789                                        Error = 1;
   \   0000168A   0x2001             MOVS     R0,#+1
   \   0000168C   0x9035             STR      R0,[SP, #+212]
   1790                                        break;
   \   0000168E   0xE006             B.N      ??RoadBrd_ParseString_252
   1791                                      }
   1792                                      else
   1793                                      {
   1794                                        i2cData[x] =  hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_253: (+1)
   \   00001690   0xA82B             ADD      R0,SP,#+172
   \   00001692   0x.... 0x....      BL       hatoi
   \   00001696   0xA99A             ADD      R1,SP,#+616
   \   00001698   0x55C8             STRB     R0,[R1, R7]
   1795                                      } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)
   1796                                    } //EndFor (x=0; x<num_bytes; x++)
   \   0000169A   0x1C7F             ADDS     R7,R7,#+1
   \   0000169C   0xE7D6             B.N      ??RoadBrd_ParseString_251
   1797                                    // Format and parameters now in i2cData array. Pull them out and validate them.
   1798                                    // OP_MODE Verify.
   1799                                    if(i2cData[0]>7)
   \                     ??RoadBrd_ParseString_252: (+1)
   \   0000169E   0xF89D 0x0268      LDRB     R0,[SP, #+616]
   \   000016A2   0x2808             CMP      R0,#+8
   \   000016A4   0xDB05             BLT.N    ??RoadBrd_ParseString_255
   1800                                    {
   1801                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: OP_MODE.\r\n");
   \   000016A6   0xF8DF 0x1DA8      LDR.W    R1,??RoadBrd_ParseString_254+0x4
   \   000016AA   0xA80B             ADD      R0,SP,#+44
   \   000016AC   0x.... 0x....      BL       strcpy
   1802                                      break;
   \   000016B0   0xE1BA             B.N      ??RoadBrd_ParseString_236
   1803                                    }
   1804                                    else
   1805                                      op_mode = (i2cData[0] & 0x07) * 1;
   \                     ??RoadBrd_ParseString_255: (+1)
   \   000016B2   0xF89D 0x0268      LDRB     R0,[SP, #+616]
   \   000016B6   0xF010 0x0007      ANDS     R0,R0,#0x7
   \   000016BA   0xF88D 0x00CE      STRB     R0,[SP, #+206]
   1806                                    // DS_RANGE Verify.
   1807                                    if(i2cData[1]>1)
   \   000016BE   0xF89D 0x0269      LDRB     R0,[SP, #+617]
   \   000016C2   0x2802             CMP      R0,#+2
   \   000016C4   0xDB08             BLT.N    ??RoadBrd_ParseString_256
   1808                                    {
   1809                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: DS_RANGE.\r\n");
   \   000016C6   0xF8DF 0x1E04      LDR.W    R1,??RoadBrd_ParseString_257
   \   000016CA   0xA80B             ADD      R0,SP,#+44
   \   000016CC   0x.... 0x....      BL       strcpy
   1810                                      break;
   \   000016D0   0xE1AA             B.N      ??RoadBrd_ParseString_236
   \   000016D2   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_106:
   \   000016D4   0x........         DC32     ?_46
   1811                                    }
   1812                                    else
   1813                                      ds_range = (i2cData[1] & 0x01) * 8;
   \                     ??RoadBrd_ParseString_256: (+1)
   \   000016D8   0xF89D 0x0269      LDRB     R0,[SP, #+617]
   \   000016DC   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   000016E0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000016E2   0x00C0             LSLS     R0,R0,#+3
   \   000016E4   0xF88D 0x00CD      STRB     R0,[SP, #+205]
   1814                                    // ADC_RSL Verify.
   1815                                    if(i2cData[2]>1)
   \   000016E8   0xF89D 0x026A      LDRB     R0,[SP, #+618]
   \   000016EC   0x2802             CMP      R0,#+2
   \   000016EE   0xDB05             BLT.N    ??RoadBrd_ParseString_258
   1816                                    {
   1817                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: ADC_RSL.\r\n");
   \   000016F0   0xF8DF 0x1DDC      LDR.W    R1,??RoadBrd_ParseString_257+0x4
   \   000016F4   0xA80B             ADD      R0,SP,#+44
   \   000016F6   0x.... 0x....      BL       strcpy
   1818                                      break;
   \   000016FA   0xE195             B.N      ??RoadBrd_ParseString_236
   1819                                    }
   1820                                    else
   1821                                      adc_rsl = (i2cData[2] & 0x01) * 16;
   \                     ??RoadBrd_ParseString_258: (+1)
   \   000016FC   0xF89D 0x026A      LDRB     R0,[SP, #+618]
   \   00001700   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00001704   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001706   0x0100             LSLS     R0,R0,#+4
   \   00001708   0xF88D 0x00CC      STRB     R0,[SP, #+204]
   1822                                    // SYNC Verify.
   1823                                    if(i2cData[3]>1)
   \   0000170C   0xF89D 0x026B      LDRB     R0,[SP, #+619]
   \   00001710   0x2802             CMP      R0,#+2
   \   00001712   0xDB07             BLT.N    ??RoadBrd_ParseString_259
   1824                                    {
   1825                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: SYNC.\r\n");
   \   00001714   0xF8DF 0x1DBC      LDR.W    R1,??RoadBrd_ParseString_257+0x8
   \   00001718   0xA80B             ADD      R0,SP,#+44
   \   0000171A   0x.... 0x....      BL       strcpy
   1826                                      break;
   \   0000171E   0xE183             B.N      ??RoadBrd_ParseString_236
   \                     ??RoadBrd_ParseString_109:
   \   00001720   0x........         DC32     ?_47
   1827                                    }
   1828                                    else
   1829                                      sync = (i2cData[3] & 0x01) * 32;
   \                     ??RoadBrd_ParseString_259: (+1)
   \   00001724   0xF89D 0x026B      LDRB     R0,[SP, #+619]
   \   00001728   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   0000172C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000172E   0x0140             LSLS     R0,R0,#+5
   \   00001730   0xF88D 0x00CB      STRB     R0,[SP, #+203]
   1830                                    // CMP_ADJST Verify.
   1831                                    if(i2cData[4]>63)
   \   00001734   0xF89D 0x026C      LDRB     R0,[SP, #+620]
   \   00001738   0x2840             CMP      R0,#+64
   \   0000173A   0xDB05             BLT.N    ??RoadBrd_ParseString_260
   1832                                    {
   1833                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: CMP_ADJST.\r\n");
   \   0000173C   0xF8DF 0x1E10      LDR.W    R1,??RoadBrd_ParseString_261
   \   00001740   0xA80B             ADD      R0,SP,#+44
   \   00001742   0x.... 0x....      BL       strcpy
   1834                                      break;
   \   00001746   0xE16F             B.N      ??RoadBrd_ParseString_236
   1835                                    }
   1836                                    else
   1837                                      cmp_adjst = (i2cData[4] & 0x3f) * 1;
   \                     ??RoadBrd_ParseString_260: (+1)
   \   00001748   0xF89D 0x026C      LDRB     R0,[SP, #+620]
   \   0000174C   0xF010 0x003F      ANDS     R0,R0,#0x3F
   \   00001750   0xF88D 0x00CA      STRB     R0,[SP, #+202]
   1838                                    // CMP_OFFST Verify.
   1839                                    if(i2cData[5]>1)
   \   00001754   0xF89D 0x026D      LDRB     R0,[SP, #+621]
   \   00001758   0x2802             CMP      R0,#+2
   \   0000175A   0xDB07             BLT.N    ??RoadBrd_ParseString_262
   1840                                    {
   1841                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: CMP_OFFST.\r\n");
   \   0000175C   0xF8DF 0x1DF4      LDR.W    R1,??RoadBrd_ParseString_261+0x4
   \   00001760   0xA80B             ADD      R0,SP,#+44
   \   00001762   0x.... 0x....      BL       strcpy
   1842                                      break;
   \   00001766   0xE15F             B.N      ??RoadBrd_ParseString_236
   \                     ??RoadBrd_ParseString_116:
   \   00001768   0x........         DC32     ?_48
   1843                                    }
   1844                                    else
   1845                                      cmp_offst = (i2cData[5] & 0x01) * 128;
   \                     ??RoadBrd_ParseString_262: (+1)
   \   0000176C   0xF89D 0x026D      LDRB     R0,[SP, #+621]
   \   00001770   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00001774   0x2180             MOVS     R1,#+128
   \   00001776   0x4348             MULS     R0,R1,R0
   \   00001778   0xF88D 0x00C9      STRB     R0,[SP, #+201]
   1846                                    // INT_ASSGN Verify.
   1847                                    if(i2cData[6]>3)
   \   0000177C   0xF89D 0x026E      LDRB     R0,[SP, #+622]
   \   00001780   0x2804             CMP      R0,#+4
   \   00001782   0xDB05             BLT.N    ??RoadBrd_ParseString_263
   1848                                    {
   1849                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: INT_ASSGN.\r\n");
   \   00001784   0xF8DF 0x1DD0      LDR.W    R1,??RoadBrd_ParseString_261+0x8
   \   00001788   0xA80B             ADD      R0,SP,#+44
   \   0000178A   0x.... 0x....      BL       strcpy
   1850                                      break;
   \   0000178E   0xE14B             B.N      ??RoadBrd_ParseString_236
   1851                                    }
   1852                                    else
   1853                                      int_assgn = (i2cData[6] & 0x03) * 1;
   \                     ??RoadBrd_ParseString_263: (+1)
   \   00001790   0xF89D 0x026E      LDRB     R0,[SP, #+622]
   \   00001794   0xF010 0x0003      ANDS     R0,R0,#0x3
   \   00001798   0xF88D 0x00C8      STRB     R0,[SP, #+200]
   1854                                    // INT_PERSIST Verify.
   1855                                    if(i2cData[7]>3)
   \   0000179C   0xF89D 0x026F      LDRB     R0,[SP, #+623]
   \   000017A0   0x2804             CMP      R0,#+4
   \   000017A2   0xDB05             BLT.N    ??RoadBrd_ParseString_264
   1856                                    {
   1857                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: INT_PERSIST.\r\n");
   \   000017A4   0xF8DF 0x1E2C      LDR.W    R1,??RoadBrd_ParseString_265
   \   000017A8   0xA80B             ADD      R0,SP,#+44
   \   000017AA   0x.... 0x....      BL       strcpy
   1858                                      break;
   \   000017AE   0xE13B             B.N      ??RoadBrd_ParseString_236
   1859                                    }
   1860                                    else
   1861                                      int_persist = (i2cData[7] & 0x03) * 4;
   \                     ??RoadBrd_ParseString_264: (+1)
   \   000017B0   0xF89D 0x026F      LDRB     R0,[SP, #+623]
   \   000017B4   0xF010 0x0003      ANDS     R0,R0,#0x3
   \   000017B8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000017BA   0x0080             LSLS     R0,R0,#+2
   \   000017BC   0xF88D 0x002B      STRB     R0,[SP, #+43]
   1862                                    // CNVRSN_INT Verify.
   1863                                    if(i2cData[8]>1)
   \   000017C0   0xF89D 0x0270      LDRB     R0,[SP, #+624]
   \   000017C4   0x2802             CMP      R0,#+2
   \   000017C6   0xDB05             BLT.N    ??RoadBrd_ParseString_266
   1864                                    {
   1865                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: CNVRSN_INT.\r\n");
   \   000017C8   0xF8DF 0x1E0C      LDR.W    R1,??RoadBrd_ParseString_265+0x4
   \   000017CC   0xA80B             ADD      R0,SP,#+44
   \   000017CE   0x.... 0x....      BL       strcpy
   1866                                      break;
   \   000017D2   0xE129             B.N      ??RoadBrd_ParseString_236
   1867                                    }
   1868                                    else
   1869                                      cnvrsn_int = (i2cData[8] & 0x01) * 16;
   \                     ??RoadBrd_ParseString_266: (+1)
   \   000017D4   0xF89D 0x0270      LDRB     R0,[SP, #+624]
   \   000017D8   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   000017DC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000017DE   0x0100             LSLS     R0,R0,#+4
   \   000017E0   0xF88D 0x002A      STRB     R0,[SP, #+42]
   1870                                    // OK, all parameters have been verified. Time to build final params.
   1871                                    RGBMeasure.config1 = op_mode + ds_range + adc_rsl + sync;
   \   000017E4   0xF89D 0x00CE      LDRB     R0,[SP, #+206]
   \   000017E8   0xF89D 0x10CD      LDRB     R1,[SP, #+205]
   \   000017EC   0x1808             ADDS     R0,R1,R0
   \   000017EE   0xF89D 0x10CC      LDRB     R1,[SP, #+204]
   \   000017F2   0x1808             ADDS     R0,R1,R0
   \   000017F4   0xF89D 0x10CB      LDRB     R1,[SP, #+203]
   \   000017F8   0x1808             ADDS     R0,R1,R0
   \   000017FA   0xF88D 0x00EC      STRB     R0,[SP, #+236]
   1872                                    RGBMeasure.config2 = cmp_adjst + cmp_offst;
   \   000017FE   0xF89D 0x00CA      LDRB     R0,[SP, #+202]
   \   00001802   0xF89D 0x10C9      LDRB     R1,[SP, #+201]
   \   00001806   0x1808             ADDS     R0,R1,R0
   \   00001808   0xF88D 0x00ED      STRB     R0,[SP, #+237]
   1873                                    RGBMeasure.config3 = int_assgn + int_persist + cnvrsn_int;
   \   0000180C   0xF89D 0x00C8      LDRB     R0,[SP, #+200]
   \   00001810   0xF89D 0x102B      LDRB     R1,[SP, #+43]
   \   00001814   0x1808             ADDS     R0,R1,R0
   \   00001816   0xF89D 0x102A      LDRB     R1,[SP, #+42]
   \   0000181A   0x1808             ADDS     R0,R1,R0
   \   0000181C   0xF88D 0x00EE      STRB     R0,[SP, #+238]
   1874                                    // Load Config Register with Config Settings
   1875                                    Status = RoadBrd_RGBFullInit( &RGBMeasure );
   \   00001820   0xA83B             ADD      R0,SP,#+236
   \   00001822   0x.... 0x....      BL       RoadBrd_RGBFullInit
   \   00001826   0x0006             MOVS     R6,R0
   1876          
   1877                                    if (Status == HAL_OK)
   \   00001828   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000182A   0x2E00             CMP      R6,#+0
   \   0000182C   0xD104             BNE.N    ??RoadBrd_ParseString_245
   1878                                    {
   1879                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor: Initialization Complete with USER Values.\r\n");;
   \   0000182E   0xF8DF 0x1DAC      LDR.W    R1,??RoadBrd_ParseString_265+0x8
   \   00001832   0xA80B             ADD      R0,SP,#+44
   \   00001834   0x.... 0x....      BL       strcpy
   1880                                    }
   1881                                  } //ElseIf Validate format.
   1882                                } //ElseIf ( Size != 29 )
   1883                              } //ElseIf (Size == 2)
   1884                              break;
   \                     ??RoadBrd_ParseString_245: (+1)
   \   00001838   0xE0F6             B.N      ??RoadBrd_ParseString_236
   1885          //------------------ H0 Command...Read RGB Values and Return as 3 (2 Byte Fields)....REDmsb,REDlsb,GREENmsb,GREENlsb,BLUEmsb,BLUElsb.....     
   1886                            case '0':
   1887                              // 1. Time to send Command and collect status.
   1888                              Status = RoadBrd_RGBReadValues( &RGBValues );
   \                     ??RoadBrd_ParseString_237: (+1)
   \   0000183A   0xA8B5             ADD      R0,SP,#+724
   \   0000183C   0x.... 0x....      BL       RoadBrd_RGBReadValues
   \   00001840   0x0006             MOVS     R6,R0
   1889                              // Is this a BLE Operation?
   1890                              if ( BLE_Flag )
   \   00001842   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001844   0x2D00             CMP      R5,#+0
   \   00001846   0xD00A             BEQ.N    ??RoadBrd_ParseString_267
   1891                              {
   1892                                // Yes...Build and Send BLE Response NOW.
   1893                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001848   0xF8DF 0x177C      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   0000184C   0xA80B             ADD      R0,SP,#+44
   \   0000184E   0x.... 0x....      BL       strcpy
   1894                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001852   0xA80B             ADD      R0,SP,#+44
   \   00001854   0x.... 0x....      BL       strlen
   \   00001858   0xA90B             ADD      R1,SP,#+44
   \   0000185A   0x.... 0x....      BL       BGM111_Transmit
   1895                              }
   1896                              
   1897                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_267: (+1)
   \   0000185E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001860   0x2E00             CMP      R6,#+0
   \   00001862   0xD15A             BNE.N    ??RoadBrd_ParseString_268
   1898                              {
   1899                                // Send string to UART..
   1900                                strcpy( (char *)tempBffr2, "RGB Color Light Sensor...\r\n");
   \   00001864   0xF8DF 0x19F8      LDR.W    R1,??RoadBrd_ParseString_228
   \   00001868   0xA80B             ADD      R0,SP,#+44
   \   0000186A   0x.... 0x....      BL       strcpy
   1901          #ifdef NUCLEO
   1902                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1903          #else
   1904                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000186E   0xA90B             ADD      R1,SP,#+44
   \   00001870   0x2000             MOVS     R0,#+0
   \   00001872   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001876   0x0006             MOVS     R6,R0
   1905          #endif
   1906                                if (Status != HAL_OK)
   \   00001878   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000187A   0x2E00             CMP      R6,#+0
   \   0000187C   0xD003             BEQ.N    ??RoadBrd_ParseString_269
   1907                                  return Status;
   \   0000187E   0x0030             MOVS     R0,R6
   \   00001880   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001882   0xF003 0xB9B8      B.W      ??RoadBrd_ParseString_4
   1908                                // NOW, Build Data String..
   1909                                sprintf( (char *)tempBffr2, " RGB(REDmsb,REDlsb,GREENmsb,GREENlsb,BLUEmsb,BLUElsb)\r\n" );
   \                     ??RoadBrd_ParseString_269: (+1)
   \   00001886   0xF8DF 0x1A08      LDR.W    R1,??RoadBrd_ParseString_230
   \   0000188A   0xA80B             ADD      R0,SP,#+44
   \   0000188C   0x.... 0x....      BL       sprintf
   1910          #ifdef NUCLEO
   1911                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1912          #else
   1913                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00001890   0xA90B             ADD      R1,SP,#+44
   \   00001892   0x2000             MOVS     R0,#+0
   \   00001894   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001898   0x0006             MOVS     R6,R0
   1914          #endif
   1915                                if (Status != HAL_OK)
   \   0000189A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000189C   0x2E00             CMP      R6,#+0
   \   0000189E   0xD003             BEQ.N    ??RoadBrd_ParseString_270
   1916                                  return Status;
   \   000018A0   0x0030             MOVS     R0,R6
   \   000018A2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000018A4   0xF003 0xB9A7      B.W      ??RoadBrd_ParseString_4
   1917                                strcpy( (char *)tempBffr2, "       DATA: ");
   \                     ??RoadBrd_ParseString_270: (+1)
   \   000018A8   0xF8DF 0x19E8      LDR.W    R1,??RoadBrd_ParseString_230+0x4
   \   000018AC   0xA80B             ADD      R0,SP,#+44
   \   000018AE   0x.... 0x....      BL       strcpy
   1918                                strcat( (char *)tempBffr2, (char *)RGBValues.Raw );
   \   000018B2   0xA9BB             ADD      R1,SP,#+748
   \   000018B4   0xA80B             ADD      R0,SP,#+44
   \   000018B6   0x.... 0x....      BL       strcat
   1919                                strcat( (char *)tempBffr2, "\r\n" );
   \   000018BA   0xA1DC             ADR.N    R1,??RoadBrd_ParseString_171  ;; 0x0D, 0x0A, 0x00, 0x00
   \   000018BC   0xA80B             ADD      R0,SP,#+44
   \   000018BE   0x.... 0x....      BL       strcat
   1920          #ifdef NUCLEO
   1921                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1922          #else
   1923                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000018C2   0xA90B             ADD      R1,SP,#+44
   \   000018C4   0x2000             MOVS     R0,#+0
   \   000018C6   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000018CA   0x0006             MOVS     R6,R0
   1924          #endif
   1925                                if (Status != HAL_OK)
   \   000018CC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000018CE   0x2E00             CMP      R6,#+0
   \   000018D0   0xD003             BEQ.N    ??RoadBrd_ParseString_271
   1926                                  return Status;
   \   000018D2   0x0030             MOVS     R0,R6
   \   000018D4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000018D6   0xF003 0xB98E      B.W      ??RoadBrd_ParseString_4
   1927                                // Now DisplayEach Value Calculated.
   1928                                strcpy( (char *)tempBffr2, "    Red: ");
   \                     ??RoadBrd_ParseString_271: (+1)
   \   000018DA   0xF8DF 0x1A0C      LDR.W    R1,??RoadBrd_ParseString_234+0x4
   \   000018DE   0xA80B             ADD      R0,SP,#+44
   \   000018E0   0x.... 0x....      BL       strcpy
   1929                                strcat( (char *)tempBffr2, (char *)RGBValues.Red );
   \   000018E4   0xA9B5             ADD      R1,SP,#+724
   \   000018E6   0xA80B             ADD      R0,SP,#+44
   \   000018E8   0x.... 0x....      BL       strcat
   1930                                strcat( (char *)tempBffr2, "    Green: ");
   \   000018EC   0xF8DF 0x19FC      LDR.W    R1,??RoadBrd_ParseString_234+0x8
   \   000018F0   0xA80B             ADD      R0,SP,#+44
   \   000018F2   0x.... 0x....      BL       strcat
   1931                                strcat( (char *)tempBffr2, (char *)RGBValues.Green );
   \   000018F6   0xA9B7             ADD      R1,SP,#+732
   \   000018F8   0xA80B             ADD      R0,SP,#+44
   \   000018FA   0x.... 0x....      BL       strcat
   1932                                strcat( (char *)tempBffr2, "    Blue: ");
   \   000018FE   0xF8DF 0x1A24      LDR.W    R1,??RoadBrd_ParseString_235
   \   00001902   0xA80B             ADD      R0,SP,#+44
   \   00001904   0x.... 0x....      BL       strcat
   1933                                strcat( (char *)tempBffr2, (char *)RGBValues.Blue );
   \   00001908   0xA9B9             ADD      R1,SP,#+740
   \   0000190A   0xA80B             ADD      R0,SP,#+44
   \   0000190C   0x.... 0x....      BL       strcat
   1934                                strcat( (char *)tempBffr2, "\r\n" );
   \   00001910   0xA1C6             ADR.N    R1,??RoadBrd_ParseString_171  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001912   0xA80B             ADD      R0,SP,#+44
   \   00001914   0x.... 0x....      BL       strcat
   1935                              }
   1936                              else
   1937                                break;
   1938                              break;
   \   00001918   0xE086             B.N      ??RoadBrd_ParseString_236
   \                     ??RoadBrd_ParseString_268: (+1)
   \   0000191A   0xE085             B.N      ??RoadBrd_ParseString_236
   1939          //------------------ H1 Command...Read Status.....     
   1940                            case '1':
   1941                              // 1. Time to send Command and collect status.  RGBSMeasure
   1942                              Status = RoadBrd_RGBReadStatus( &RGBSMeasure );
   \                     ??RoadBrd_ParseString_238: (+1)
   \   0000191C   0xA857             ADD      R0,SP,#+348
   \   0000191E   0x.... 0x....      BL       RoadBrd_RGBReadStatus
   \   00001922   0x0006             MOVS     R6,R0
   1943          
   1944                              // Is this a BLE Operation?
   1945                              if ( BLE_Flag )
   \   00001924   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001926   0x2D00             CMP      R5,#+0
   \   00001928   0xD00A             BEQ.N    ??RoadBrd_ParseString_272
   1946                              {
   1947                                // Yes...Build and Send BLE Response NOW.
   1948                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   0000192A   0xF8DF 0x169C      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   0000192E   0xA80B             ADD      R0,SP,#+44
   \   00001930   0x.... 0x....      BL       strcpy
   1949                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001934   0xA80B             ADD      R0,SP,#+44
   \   00001936   0x.... 0x....      BL       strlen
   \   0000193A   0xA90B             ADD      R1,SP,#+44
   \   0000193C   0x.... 0x....      BL       BGM111_Transmit
   1950                              }
   1951                              
   1952                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_272: (+1)
   \   00001940   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001942   0x2E00             CMP      R6,#+0
   \   00001944   0xD119             BNE.N    ??RoadBrd_ParseString_273
   1953                              {
   1954                                // Build Status
   1955                                strcpy( (char *)tempBffr2, "RGB Color Light Sensor Status: ");
   \   00001946   0xF8DF 0x1DF4      LDR.W    R1,??RoadBrd_ParseString_274
   \   0000194A   0xA80B             ADD      R0,SP,#+44
   \   0000194C   0x.... 0x....      BL       strcpy
   1956                                sprintf( (char *)tempBffr3, "%02x / ", RGBSMeasure.status);
   \   00001950   0xF89D 0x215C      LDRB     R2,[SP, #+348]
   \   00001954   0xF8DF 0x1DE8      LDR.W    R1,??RoadBrd_ParseString_274+0x4
   \   00001958   0xA82B             ADD      R0,SP,#+172
   \   0000195A   0x.... 0x....      BL       sprintf
   1957                                strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   0000195E   0xA92B             ADD      R1,SP,#+172
   \   00001960   0xA80B             ADD      R0,SP,#+44
   \   00001962   0x.... 0x....      BL       strcat
   1958                                strcat( (char *)tempBffr2, (char *)RGBSMeasure.Raw );
   \   00001966   0xA957             ADD      R1,SP,#+348
   \   00001968   0x1C49             ADDS     R1,R1,#+1
   \   0000196A   0xA80B             ADD      R0,SP,#+44
   \   0000196C   0x.... 0x....      BL       strcat
   1959                                strcat( (char *)tempBffr2, "\r\n" );
   \   00001970   0xA1AE             ADR.N    R1,??RoadBrd_ParseString_171  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001972   0xA80B             ADD      R0,SP,#+44
   \   00001974   0x.... 0x....      BL       strcat
   1960                              }
   1961                              else
   1962                                break;
   1963                              break;
   \   00001978   0xE056             B.N      ??RoadBrd_ParseString_236
   \                     ??RoadBrd_ParseString_273: (+1)
   \   0000197A   0xE055             B.N      ??RoadBrd_ParseString_236
   1964          //------------------ H2 Command...Reset Hardware......     
   1965                            case '2':
   1966                              Status = RoadBrd_RGBReset();
   \                     ??RoadBrd_ParseString_239: (+1)
   \   0000197C   0x.... 0x....      BL       RoadBrd_RGBReset
   \   00001980   0x0006             MOVS     R6,R0
   1967                              // Is this a BLE Operation?
   1968                              if ( BLE_Flag )
   \   00001982   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001984   0x2D00             CMP      R5,#+0
   \   00001986   0xD00A             BEQ.N    ??RoadBrd_ParseString_275
   1969                              {
   1970                                // Yes...Build and Send BLE Response NOW.
   1971                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001988   0xF8DF 0x163C      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   0000198C   0xA80B             ADD      R0,SP,#+44
   \   0000198E   0x.... 0x....      BL       strcpy
   1972                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001992   0xA80B             ADD      R0,SP,#+44
   \   00001994   0x.... 0x....      BL       strlen
   \   00001998   0xA90B             ADD      R1,SP,#+44
   \   0000199A   0x.... 0x....      BL       BGM111_Transmit
   1973                              }
   1974                              
   1975                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_275: (+1)
   \   0000199E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000019A0   0x2E00             CMP      R6,#+0
   \   000019A2   0xD107             BNE.N    ??RoadBrd_ParseString_276
   1976                              {
   1977                                // Build Status
   1978                                strcpy( (char *)tempBffr2, "RGB Color Light Sensor: RESET CMD Sent Succesful.\r\n" );
   \   000019A4   0xF8DF 0x1E10      LDR.W    R1,??RoadBrd_ParseString_277
   \   000019A8   0xA80B             ADD      R0,SP,#+44
   \   000019AA   0x.... 0x....      BL       strcpy
   1979                              }
   1980                              else
   1981                                break;
   1982                              break;
   \   000019AE   0xE03B             B.N      ??RoadBrd_ParseString_236
   \                     ??RoadBrd_ParseString_138:
   \   000019B0   0x........         DC32     ?_49
   \                     ??RoadBrd_ParseString_276: (+1)
   \   000019B4   0xE038             B.N      ??RoadBrd_ParseString_236
   1983          //------------------ H3 Command...Read ID.....     
   1984                            case '3':
   1985                              // 1. Time to send Command and collect status.  IDMeasure
   1986                              Status = RoadBrd_RGBReadID( &IDMeasure );
   \                     ??RoadBrd_ParseString_240: (+1)
   \   000019B6   0xA859             ADD      R0,SP,#+356
   \   000019B8   0x.... 0x....      BL       RoadBrd_RGBReadID
   \   000019BC   0x0006             MOVS     R6,R0
   1987                              // Is this a BLE Operation?
   1988                              if ( BLE_Flag )
   \   000019BE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000019C0   0x2D00             CMP      R5,#+0
   \   000019C2   0xD00A             BEQ.N    ??RoadBrd_ParseString_278
   1989                              {
   1990                                // Yes...Build and Send BLE Response NOW.
   1991                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000019C4   0xF8DF 0x1600      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   000019C8   0xA80B             ADD      R0,SP,#+44
   \   000019CA   0x.... 0x....      BL       strcpy
   1992                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000019CE   0xA80B             ADD      R0,SP,#+44
   \   000019D0   0x.... 0x....      BL       strlen
   \   000019D4   0xA90B             ADD      R1,SP,#+44
   \   000019D6   0x.... 0x....      BL       BGM111_Transmit
   1993                              }
   1994                              
   1995                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_278: (+1)
   \   000019DA   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000019DC   0x2E00             CMP      R6,#+0
   \   000019DE   0xD11D             BNE.N    ??RoadBrd_ParseString_279
   1996                              {
   1997                                // Build Status
   1998                                strcpy( (char *)tempBffr2, "RGB Color Light Sensor ID Code: ");
   \   000019E0   0xF8DF 0x1DD8      LDR.W    R1,??RoadBrd_ParseString_277+0x4
   \   000019E4   0xA80B             ADD      R0,SP,#+44
   \   000019E6   0x.... 0x....      BL       strcpy
   1999                                sprintf( (char *)tempBffr3, "%02x / ", IDMeasure.id);
   \   000019EA   0xF89D 0x2164      LDRB     R2,[SP, #+356]
   \   000019EE   0xF8DF 0x1D50      LDR.W    R1,??RoadBrd_ParseString_274+0x4
   \   000019F2   0xA82B             ADD      R0,SP,#+172
   \   000019F4   0x.... 0x....      BL       sprintf
   2000                                strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   000019F8   0xA92B             ADD      R1,SP,#+172
   \   000019FA   0xA80B             ADD      R0,SP,#+44
   \   000019FC   0x.... 0x....      BL       strcat
   2001                                strcat( (char *)tempBffr2, (char *)IDMeasure.Raw );
   \   00001A00   0xA959             ADD      R1,SP,#+356
   \   00001A02   0x1C49             ADDS     R1,R1,#+1
   \   00001A04   0xA80B             ADD      R0,SP,#+44
   \   00001A06   0x.... 0x....      BL       strcat
   2002                                strcat( (char *)tempBffr2, "\r\n" );
   \   00001A0A   0xA188             ADR.N    R1,??RoadBrd_ParseString_171  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001A0C   0xA80B             ADD      R0,SP,#+44
   \   00001A0E   0x.... 0x....      BL       strcat
   2003                             }
   2004                              else
   2005                                break;
   2006                              break;
   \   00001A12   0xE009             B.N      ??RoadBrd_ParseString_236
   \                     ??RoadBrd_ParseString_142:
   \   00001A14   0x........         DC32     ?_50
   \   00001A18   0x........         DC32     ?_51
   \                     ??RoadBrd_ParseString_279: (+1)
   \   00001A1C   0xE004             B.N      ??RoadBrd_ParseString_236
   2007                            default:
   2008                              strcpy( (char *)tempBffr2, "ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_241: (+1)
   \   00001A1E   0xF8DF 0x1E14      LDR.W    R1,??RoadBrd_ParseString_280
   \   00001A22   0xA80B             ADD      R0,SP,#+44
   \   00001A24   0x.... 0x....      BL       strcpy
   2009                              break;
   2010                          } //EndSwitch
   2011                        } //EndElse (Size == 1)
   2012                        break;    
   \                     ??RoadBrd_ParseString_236: (+1)
   \   00001A28   0xF003 0xB861      B.W      ??RoadBrd_ParseString_26
   2013          //**************************************************************************************************
   2014                      case 'P':
   2015                        // POWER SYSTEM. 
   2016                        switch( tempBffr[1] )
   \                     ??RoadBrd_ParseString_20: (+1)
   \   00001A2C   0x7860             LDRB     R0,[R4, #+1]
   \   00001A2E   0x2844             CMP      R0,#+68
   \   00001A30   0xD018             BEQ.N    ??RoadBrd_ParseString_281
   \   00001A32   0x2855             CMP      R0,#+85
   \   00001A34   0xD11F             BNE.N    ??RoadBrd_ParseString_282
   2017                        {
   2018          //++++++++++++++++++++++++++++++++++++++++++  5V Power Supply Commands.
   2019                          case 'U':
   2020                            // Turn on 5V Power Supply.
   2021                            RoadBrd_gpio_On( gTAM_PWR );
   \                     ??RoadBrd_ParseString_283: (+1)
   \   00001A36   0x2004             MOVS     R0,#+4
   \   00001A38   0x.... 0x....      BL       RoadBrd_gpio_On
   2022                            // Is this a BLE Operation?
   2023                            if ( BLE_Flag )
   \   00001A3C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001A3E   0x2D00             CMP      R5,#+0
   \   00001A40   0xD00A             BEQ.N    ??RoadBrd_ParseString_284
   2024                            {
   2025                              // Yes...Build and Send BLE Response NOW.
   2026                              strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001A42   0xF8DF 0x1584      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   00001A46   0xA80B             ADD      R0,SP,#+44
   \   00001A48   0x.... 0x....      BL       strcpy
   2027                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001A4C   0xA80B             ADD      R0,SP,#+44
   \   00001A4E   0x.... 0x....      BL       strlen
   \   00001A52   0xA90B             ADD      R1,SP,#+44
   \   00001A54   0x.... 0x....      BL       BGM111_Transmit
   2028                            }
   2029                            
   2030                            strcpy( (char *)tempBffr2, "5V Power Plane Powered UP.\r\n");
   \                     ??RoadBrd_ParseString_284: (+1)
   \   00001A58   0xF8DF 0x1DDC      LDR.W    R1,??RoadBrd_ParseString_280+0x4
   \   00001A5C   0xA80B             ADD      R0,SP,#+44
   \   00001A5E   0x.... 0x....      BL       strcpy
   2031                            break;
   \   00001A62   0xE00D             B.N      ??RoadBrd_ParseString_285
   2032                          case 'D':
   2033                            // Turn off 5V Power Supply.
   2034                            RoadBrd_gpio_Off( gTAM_PWR );
   \                     ??RoadBrd_ParseString_281: (+1)
   \   00001A64   0x2004             MOVS     R0,#+4
   \   00001A66   0x.... 0x....      BL       RoadBrd_gpio_Off
   2035                            strcpy( (char *)tempBffr2, "5V Power Plane Powered DOWN.\r\n");
   \   00001A6A   0xF8DF 0x1DD0      LDR.W    R1,??RoadBrd_ParseString_280+0x8
   \   00001A6E   0xA80B             ADD      R0,SP,#+44
   \   00001A70   0x.... 0x....      BL       strcpy
   2036                            break;
   \   00001A74   0xE004             B.N      ??RoadBrd_ParseString_285
   2037                          default:
   2038                            strcpy( (char *)tempBffr2, "ERROR: Illegal 5V Power Plane Command.\r\n");
   \                     ??RoadBrd_ParseString_282: (+1)
   \   00001A76   0xF8DF 0x1DC8      LDR.W    R1,??RoadBrd_ParseString_280+0xC
   \   00001A7A   0xA80B             ADD      R0,SP,#+44
   \   00001A7C   0x.... 0x....      BL       strcpy
   2039                            break;
   2040                        }
   2041                        break;
   \                     ??RoadBrd_ParseString_285: (+1)
   \   00001A80   0xF003 0xB835      B.W      ??RoadBrd_ParseString_26
   \                     ??RoadBrd_ParseString_147:
   \   00001A84   0x........         DC32     ?_52
   2042          //**************************************************************************************************
   2043                      case 'T':
   2044                        // TEST CMDS. 
   2045                        // Test Size to make sure we have enough Characters for this operation
   2046                        if (Size <= 1)
   \                     ??RoadBrd_ParseString_21: (+1)
   \   00001A88   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   00001A8C   0x2802             CMP      R0,#+2
   \   00001A8E   0xDA19             BGE.N    ??RoadBrd_ParseString_286
   2047                        {
   2048                          // Is this a BLE Operation?
   2049                          if ( BLE_Flag )
   \   00001A90   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001A92   0x2D00             CMP      R5,#+0
   \   00001A94   0xD00A             BEQ.N    ??RoadBrd_ParseString_287
   2050                          {
   2051                            // Yes...Build and Send BLE Response NOW.
   2052                            strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001A96   0xF8DF 0x1530      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   00001A9A   0xA80B             ADD      R0,SP,#+44
   \   00001A9C   0x.... 0x....      BL       strcpy
   2053                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001AA0   0xA80B             ADD      R0,SP,#+44
   \   00001AA2   0x.... 0x....      BL       strlen
   \   00001AA6   0xA90B             ADD      R1,SP,#+44
   \   00001AA8   0x.... 0x....      BL       BGM111_Transmit
   2054                          }
   2055                          
   2056                          strcpy( (char *)tempBffr2, "T ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_287: (+1)
   \   00001AAC   0xF8DF 0x1E08      LDR.W    R1,??RoadBrd_ParseString_288
   \   00001AB0   0xA80B             ADD      R0,SP,#+44
   \   00001AB2   0x.... 0x....      BL       strcpy
   \   00001AB6   0xF003 0xB808      B.W      ??RoadBrd_ParseString_289
   \   00001ABA   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_148:
   \   00001ABC   0x........         DC32     ?_53
   \   00001AC0   0x........         DC32     ?_54
   2057                        }
   2058                        else
   2059                        {
   2060                          switch( tempBffr[1] )
   \                     ??RoadBrd_ParseString_286: (+1)
   \   00001AC4   0x7860             LDRB     R0,[R4, #+1]
   \   00001AC6   0x2842             CMP      R0,#+66
   \   00001AC8   0xF002 0x8665      BEQ.W    ??RoadBrd_ParseString_290
   \   00001ACC   0x2843             CMP      R0,#+67
   \   00001ACE   0xF000 0x82F3      BEQ.W    ??RoadBrd_ParseString_291
   \   00001AD2   0x2844             CMP      R0,#+68
   \   00001AD4   0xF002 0x821D      BEQ.W    ??RoadBrd_ParseString_292
   \   00001AD8   0x2846             CMP      R0,#+70
   \   00001ADA   0xF002 0x8611      BEQ.W    ??RoadBrd_ParseString_293
   \   00001ADE   0x2849             CMP      R0,#+73
   \   00001AE0   0xD013             BEQ.N    ??RoadBrd_ParseString_294
   \   00001AE2   0x284B             CMP      R0,#+75
   \   00001AE4   0xF002 0x8250      BEQ.W    ??RoadBrd_ParseString_295
   \   00001AE8   0x284C             CMP      R0,#+76
   \   00001AEA   0xF002 0x8621      BEQ.W    ??RoadBrd_ParseString_296
   \   00001AEE   0x284D             CMP      R0,#+77
   \   00001AF0   0xF002 0x85DC      BEQ.W    ??RoadBrd_ParseString_297
   \   00001AF4   0x2852             CMP      R0,#+82
   \   00001AF6   0xF002 0x822B      BEQ.W    ??RoadBrd_ParseString_298
   \   00001AFA   0x2853             CMP      R0,#+83
   \   00001AFC   0xF002 0x8676      BEQ.W    ??RoadBrd_ParseString_299
   \   00001B00   0x2855             CMP      R0,#+85
   \   00001B02   0xF002 0x8569      BEQ.W    ??RoadBrd_ParseString_300
   \   00001B06   0xF002 0xBFCF      B.W      ??RoadBrd_ParseString_301
   2061                          {
   2062          //++++++++++++++++++++++++++++++++++++++++++  I2C Commands.
   2063                            case 'I':
   2064                              // I2C Commands.
   2065                              // Test Size to make sure we have enough Characters for this operation
   2066                              if (Size < 9)
   \                     ??RoadBrd_ParseString_294: (+1)
   \   00001B0A   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   00001B0E   0x2809             CMP      R0,#+9
   \   00001B10   0xDA13             BGE.N    ??RoadBrd_ParseString_302
   2067                              {
   2068                                // Is this a BLE Operation?
   2069                                if ( BLE_Flag )
   \   00001B12   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001B14   0x2D00             CMP      R5,#+0
   \   00001B16   0xD00A             BEQ.N    ??RoadBrd_ParseString_303
   2070                                {
   2071                                  // Yes...Build and Send BLE Response NOW.
   2072                                  strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001B18   0xF8DF 0x14AC      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   00001B1C   0xA80B             ADD      R0,SP,#+44
   \   00001B1E   0x.... 0x....      BL       strcpy
   2073                                  BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001B22   0xA80B             ADD      R0,SP,#+44
   \   00001B24   0x.... 0x....      BL       strlen
   \   00001B28   0xA90B             ADD      R1,SP,#+44
   \   00001B2A   0x.... 0x....      BL       BGM111_Transmit
   2074                                }
   2075                                
   2076                                strcpy( (char *)tempBffr2, "TI SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_303: (+1)
   \   00001B2E   0xF8DF 0x1E00      LDR.W    R1,??RoadBrd_ParseString_304
   \   00001B32   0xA80B             ADD      R0,SP,#+44
   \   00001B34   0x.... 0x....      BL       strcpy
   \   00001B38   0xE2B3             B.N      ??RoadBrd_ParseString_305
   2077                              }
   2078                              else
   2079                              {
   2080                                switch( tempBffr[2] )
   \                     ??RoadBrd_ParseString_302: (+1)
   \   00001B3A   0x78A0             LDRB     R0,[R4, #+2]
   \   00001B3C   0x2851             CMP      R0,#+81
   \   00001B3E   0xF000 0x8204      BEQ.W    ??RoadBrd_ParseString_306
   \   00001B42   0xF0C0 0x82A9      BCC.W    ??RoadBrd_ParseString_307
   \   00001B46   0x2853             CMP      R0,#+83
   \   00001B48   0xD002             BEQ.N    ??RoadBrd_ParseString_308
   \   00001B4A   0xF0C0 0x80D5      BCC.W    ??RoadBrd_ParseString_309
   \   00001B4E   0xE2A3             B.N      ??RoadBrd_ParseString_307
   2081                                {
   2082          //------------------
   2083                                  case 'S':
   2084                                    //I2C Send Command.
   2085                                    // Step 1. Validate format.
   2086                                    if( (tempBffr[3]!=':') ||
   2087                                        (tempBffr[6]!='.') )
   \                     ??RoadBrd_ParseString_308: (+1)
   \   00001B50   0x78E0             LDRB     R0,[R4, #+3]
   \   00001B52   0x283A             CMP      R0,#+58
   \   00001B54   0xD102             BNE.N    ??RoadBrd_ParseString_310
   \   00001B56   0x79A0             LDRB     R0,[R4, #+6]
   \   00001B58   0x282E             CMP      R0,#+46
   \   00001B5A   0xD01B             BEQ.N    ??RoadBrd_ParseString_311
   2088                                    {
   2089                                      // Is this a BLE Operation?
   2090                                      if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_310: (+1)
   \   00001B5C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001B5E   0x2D00             CMP      R5,#+0
   \   00001B60   0xD00A             BEQ.N    ??RoadBrd_ParseString_312
   2091                                      {
   2092                                        // Yes...Build and Send BLE Response NOW.
   2093                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001B62   0xF8DF 0x1464      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   00001B66   0xA80B             ADD      R0,SP,#+44
   \   00001B68   0x.... 0x....      BL       strcpy
   2094                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001B6C   0xA80B             ADD      R0,SP,#+44
   \   00001B6E   0x.... 0x....      BL       strlen
   \   00001B72   0xA90B             ADD      R1,SP,#+44
   \   00001B74   0x.... 0x....      BL       BGM111_Transmit
   2095                                      }
   2096                                     
   2097                                      strcpy( (char *)tempBffr2, "TIS SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_312: (+1)
   \   00001B78   0xF8DF 0x1E2C      LDR.W    R1,??RoadBrd_ParseString_313
   \   00001B7C   0xA80B             ADD      R0,SP,#+44
   \   00001B7E   0x.... 0x....      BL       strcpy
   \   00001B82   0xE0B8             B.N      ??RoadBrd_ParseString_314
   \                     ??RoadBrd_ParseString_164:
   \   00001B84   0x........         DC32     ?_55
   \   00001B88   0x........         DC32     ?_56
   \   00001B8C   0x........         DC32     ?_57
   \   00001B90   0x........         DC32     ?_58
   2098                                    }
   2099                                    else
   2100                                    {
   2101                                      // Is this a BLE Operation?
   2102                                      if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_311: (+1)
   \   00001B94   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001B96   0x2D00             CMP      R5,#+0
   \   00001B98   0xD00A             BEQ.N    ??RoadBrd_ParseString_315
   2103                                      {
   2104                                        // Yes...Build and Send BLE Response NOW.
   2105                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001B9A   0xF8DF 0x142C      LDR.W    R1,??RoadBrd_ParseString_207+0x4
   \   00001B9E   0xA80B             ADD      R0,SP,#+44
   \   00001BA0   0x.... 0x....      BL       strcpy
   2106                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001BA4   0xA80B             ADD      R0,SP,#+44
   \   00001BA6   0x.... 0x....      BL       strlen
   \   00001BAA   0xA90B             ADD      R1,SP,#+44
   \   00001BAC   0x.... 0x....      BL       BGM111_Transmit
   2107                                      }
   2108                                      
   2109                                      // 2. Grab Address and validate a legal number
   2110                                      tempBffr3[0] = tempBffr[4];
   \                     ??RoadBrd_ParseString_315: (+1)
   \   00001BB0   0xF994 0x0004      LDRSB    R0,[R4, #+4]
   \   00001BB4   0xF88D 0x00AC      STRB     R0,[SP, #+172]
   2111                                      tempBffr3[1] = tempBffr[5];
   \   00001BB8   0xF994 0x0005      LDRSB    R0,[R4, #+5]
   \   00001BBC   0xF88D 0x00AD      STRB     R0,[SP, #+173]
   2112                                      tempBffr3[2] = 0x00;
   \   00001BC0   0x2000             MOVS     R0,#+0
   \   00001BC2   0xF88D 0x00AE      STRB     R0,[SP, #+174]
   2113                                      if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001BC6   0xA82B             ADD      R0,SP,#+172
   \   00001BC8   0x.... 0x....      BL       isHexNum
   \   00001BCC   0x2800             CMP      R0,#+0
   \   00001BCE   0xD105             BNE.N    ??RoadBrd_ParseString_316
   2114                                        strcpy( (char *)tempBffr2, "TIS SYNTAX ERROR: Address not HEX Value.\r\n");
   \   00001BD0   0xF8DF 0x1DD8      LDR.W    R1,??RoadBrd_ParseString_313+0x4
   \   00001BD4   0xA80B             ADD      R0,SP,#+44
   \   00001BD6   0x.... 0x....      BL       strcpy
   \   00001BDA   0xE08C             B.N      ??RoadBrd_ParseString_314
   2115                                      else
   2116                                      {
   2117                                        // Legal Address. Save it as value
   2118                                        Address = hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_316: (+1)
   \   00001BDC   0xA82B             ADD      R0,SP,#+172
   \   00001BDE   0x.... 0x....      BL       hatoi
   \   00001BE2   0x9031             STR      R0,[SP, #+196]
   2119                                        // 3. Now get the number of bytes of data from field.
   2120          //                              sprintf( (char *)tempBffr2, "TIS: Good Address: %x.\r\n", Address);
   2121                                        tempBffr3[0] = tempBffr[7];
   \   00001BE4   0xF994 0x0007      LDRSB    R0,[R4, #+7]
   \   00001BE8   0xF88D 0x00AC      STRB     R0,[SP, #+172]
   2122                                        tempBffr3[1] = tempBffr[8];
   \   00001BEC   0xF994 0x0008      LDRSB    R0,[R4, #+8]
   \   00001BF0   0xF88D 0x00AD      STRB     R0,[SP, #+173]
   2123                                        tempBffr3[2] = 0x00;
   \   00001BF4   0x2000             MOVS     R0,#+0
   \   00001BF6   0xF88D 0x00AE      STRB     R0,[SP, #+174]
   2124                                        if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001BFA   0xA82B             ADD      R0,SP,#+172
   \   00001BFC   0x.... 0x....      BL       isHexNum
   \   00001C00   0x2800             CMP      R0,#+0
   \   00001C02   0xD105             BNE.N    ??RoadBrd_ParseString_317
   2125                                          strcpy( (char *)tempBffr2, "TIS SYNTAX ERROR: Number of Bytes not HEX Value.\r\n");
   \   00001C04   0xF8DF 0x1DA8      LDR.W    R1,??RoadBrd_ParseString_313+0x8
   \   00001C08   0xA80B             ADD      R0,SP,#+44
   \   00001C0A   0x.... 0x....      BL       strcpy
   \   00001C0E   0xE072             B.N      ??RoadBrd_ParseString_314
   2126                                        else
   2127                                        {
   2128                                          // Legal NUMBER BYTES. Save it as value
   2129                                          num_bytes = hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_317: (+1)
   \   00001C10   0xA82B             ADD      R0,SP,#+172
   \   00001C12   0x.... 0x....      BL       hatoi
   \   00001C16   0x9034             STR      R0,[SP, #+208]
   2130                                          // 4. Test num_bytes. If Zero, We are done
   2131                                          if (num_bytes == 0)
   \   00001C18   0x9834             LDR      R0,[SP, #+208]
   \   00001C1A   0x2800             CMP      R0,#+0
   \   00001C1C   0xD114             BNE.N    ??RoadBrd_ParseString_318
   2132                                          {
   2133                                            sprintf( (char *)tempBffr2, "TIS: GOOD CMD: %x.\r\n", Address);
   \   00001C1E   0x9A31             LDR      R2,[SP, #+196]
   \   00001C20   0xF8DF 0x1D90      LDR.W    R1,??RoadBrd_ParseString_313+0xC
   \   00001C24   0xA80B             ADD      R0,SP,#+44
   \   00001C26   0x.... 0x....      BL       sprintf
   \   00001C2A   0xE03B             B.N      ??RoadBrd_ParseString_319
   \                     ??RoadBrd_ParseString_171:
   \   00001C2C   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
   \   00001C30   0x........         DC32     ?_59
   \   00001C34   0x........         DC32     ?_60
   \   00001C38   0x........         DC32     ?_61
   \   00001C3C   0x........         DC32     ?_62
   \   00001C40   0x........         DC32     ?_63
   \   00001C44   0x........         DC32     ?_64
   2134                                          }
   2135                                          else
   2136                                          {
   2137                                            // 5. Time to get all the data.
   2138                                            Error = 0;
   \                     ??RoadBrd_ParseString_318: (+1)
   \   00001C48   0x2000             MOVS     R0,#+0
   \   00001C4A   0x9035             STR      R0,[SP, #+212]
   2139                                            for (x=0; x<num_bytes; x++)
   \   00001C4C   0x2000             MOVS     R0,#+0
   \   00001C4E   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_320: (+1)
   \   00001C50   0x9834             LDR      R0,[SP, #+208]
   \   00001C52   0x4287             CMP      R7,R0
   \   00001C54   0xDA26             BGE.N    ??RoadBrd_ParseString_319
   2140                                            {
   2141                                              tempBffr3[0] = tempBffr[10+x*3];
   \   00001C56   0x2003             MOVS     R0,#+3
   \   00001C58   0xFB00 0xF007      MUL      R0,R0,R7
   \   00001C5C   0x4420             ADD      R0,R4,R0
   \   00001C5E   0xF990 0x000A      LDRSB    R0,[R0, #+10]
   \   00001C62   0xF88D 0x00AC      STRB     R0,[SP, #+172]
   2142                                              tempBffr3[1] = tempBffr[11+x*3];
   \   00001C66   0x2003             MOVS     R0,#+3
   \   00001C68   0xFB00 0xF007      MUL      R0,R0,R7
   \   00001C6C   0x4420             ADD      R0,R4,R0
   \   00001C6E   0xF990 0x000B      LDRSB    R0,[R0, #+11]
   \   00001C72   0xF88D 0x00AD      STRB     R0,[SP, #+173]
   2143                                              tempBffr3[2] = 0x00;
   \   00001C76   0x2000             MOVS     R0,#+0
   \   00001C78   0xF88D 0x00AE      STRB     R0,[SP, #+174]
   2144                                              if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001C7C   0xA82B             ADD      R0,SP,#+172
   \   00001C7E   0x.... 0x....      BL       isHexNum
   \   00001C82   0x2800             CMP      R0,#+0
   \   00001C84   0xD107             BNE.N    ??RoadBrd_ParseString_321
   2145                                              {
   2146                                                strcpy( (char *)tempBffr2, "TIS SYNTAX ERROR: Address not HEX Value.\r\n");
   \   00001C86   0xF8DF 0x1D24      LDR.W    R1,??RoadBrd_ParseString_313+0x4
   \   00001C8A   0xA80B             ADD      R0,SP,#+44
   \   00001C8C   0x.... 0x....      BL       strcpy
   2147                                                Error = 1;
   \   00001C90   0x2001             MOVS     R0,#+1
   \   00001C92   0x9035             STR      R0,[SP, #+212]
   2148                                                break;
   \   00001C94   0xE006             B.N      ??RoadBrd_ParseString_319
   2149                                              }
   2150                                              else
   2151                                              {
   2152                                                i2cData[x] =  hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_321: (+1)
   \   00001C96   0xA82B             ADD      R0,SP,#+172
   \   00001C98   0x.... 0x....      BL       hatoi
   \   00001C9C   0xA99A             ADD      R1,SP,#+616
   \   00001C9E   0x55C8             STRB     R0,[R1, R7]
   2153                                              } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)
   2154                                            } //EndFor (x=0; x<num_bytes; x++)
   \   00001CA0   0x1C7F             ADDS     R7,R7,#+1
   \   00001CA2   0xE7D5             B.N      ??RoadBrd_ParseString_320
   2155                                          } //EndElse (num_bytes == 0)
   2156                                          if (Error==0)
   \                     ??RoadBrd_ParseString_319: (+1)
   \   00001CA4   0x9835             LDR      R0,[SP, #+212]
   \   00001CA6   0x2800             CMP      R0,#+0
   \   00001CA8   0xD105             BNE.N    ??RoadBrd_ParseString_322
   2157                                          {
   2158                                            sprintf( (char *)tempBffr2, "TIS: GOOD CMD: %x.", Address);
   \   00001CAA   0x9A31             LDR      R2,[SP, #+196]
   \   00001CAC   0xF8DF 0x1DEC      LDR.W    R1,??RoadBrd_ParseString_323
   \   00001CB0   0xA80B             ADD      R0,SP,#+44
   \   00001CB2   0x.... 0x....      BL       sprintf
   2159                                          }
   2160                                          for(x=0; x<num_bytes; x++)
   \                     ??RoadBrd_ParseString_322: (+1)
   \   00001CB6   0x2000             MOVS     R0,#+0
   \   00001CB8   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_324: (+1)
   \   00001CBA   0x9834             LDR      R0,[SP, #+208]
   \   00001CBC   0x4287             CMP      R7,R0
   \   00001CBE   0xDA0B             BGE.N    ??RoadBrd_ParseString_325
   2161                                          {
   2162                                            sprintf( (char *)tempBffr3, "%x.", i2cData[x]);
   \   00001CC0   0xA89A             ADD      R0,SP,#+616
   \   00001CC2   0x5DC2             LDRB     R2,[R0, R7]
   \   00001CC4   0xA1C1             ADR.N    R1,??RoadBrd_ParseString_207+0x8  ;; "%x."
   \   00001CC6   0xA82B             ADD      R0,SP,#+172
   \   00001CC8   0x.... 0x....      BL       sprintf
   2163                                            strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   00001CCC   0xA92B             ADD      R1,SP,#+172
   \   00001CCE   0xA80B             ADD      R0,SP,#+44
   \   00001CD0   0x.... 0x....      BL       strcat
   2164                                          }
   \   00001CD4   0x1C7F             ADDS     R7,R7,#+1
   \   00001CD6   0xE7F0             B.N      ??RoadBrd_ParseString_324
   2165                                          strcat( (char *)tempBffr2, "\r\n" );
   \                     ??RoadBrd_ParseString_325: (+1)
   \   00001CD8   0xA1BD             ADR.N    R1,??RoadBrd_ParseString_207+0xC  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001CDA   0xA80B             ADD      R0,SP,#+44
   \   00001CDC   0x.... 0x....      BL       strcat
   2166                                          // 6. Time to send Command and collect status.
   2167                                          Status =  RoadBrd_I2C_Master_Transmit((uint16_t)Address, i2cData, (uint16_t)num_bytes, I2C_TIMEOUT);
   \   00001CE0   0xF44F 0x73FA      MOV      R3,#+500
   \   00001CE4   0x9834             LDR      R0,[SP, #+208]
   \   00001CE6   0x0002             MOVS     R2,R0
   \   00001CE8   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00001CEA   0xA99A             ADD      R1,SP,#+616
   \   00001CEC   0x9831             LDR      R0,[SP, #+196]
   \   00001CEE   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00001CF0   0x.... 0x....      BL       RoadBrd_I2C_Master_Transmit
   \   00001CF4   0x0006             MOVS     R6,R0
   2168                                          
   2169                                        } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)...NUMBER BYTES
   2170                                        
   2171                                      } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)...Address
   2172                                      
   2173                                    } //EndElse ( (tempBffr[2]!=':') || (tempBffr[5]!='.') )
   2174                                
   2175                                    break;
   \                     ??RoadBrd_ParseString_314: (+1)
   \   00001CF6   0xE1D4             B.N      ??RoadBrd_ParseString_305
   2176          //------------------
   2177                                  case 'R':
   2178                                    //I2C Receive Command
   2179                                    // Step 1. Validate format.
   2180                                    if( (tempBffr[3]!=':') ||
   2181                                        (tempBffr[6]!='.') ||
   2182                                        (tempBffr[9]!='.')  )
   \                     ??RoadBrd_ParseString_309: (+1)
   \   00001CF8   0x78E0             LDRB     R0,[R4, #+3]
   \   00001CFA   0x283A             CMP      R0,#+58
   \   00001CFC   0xD105             BNE.N    ??RoadBrd_ParseString_326
   \   00001CFE   0x79A0             LDRB     R0,[R4, #+6]
   \   00001D00   0x282E             CMP      R0,#+46
   \   00001D02   0xD102             BNE.N    ??RoadBrd_ParseString_326
   \   00001D04   0x7A60             LDRB     R0,[R4, #+9]
   \   00001D06   0x282E             CMP      R0,#+46
   \   00001D08   0xD012             BEQ.N    ??RoadBrd_ParseString_327
   2183                                    {
   2184                                      // Is this a BLE Operation?
   2185                                      if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_326: (+1)
   \   00001D0A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001D0C   0x2D00             CMP      R5,#+0
   \   00001D0E   0xD009             BEQ.N    ??RoadBrd_ParseString_328
   2186                                      {
   2187                                        // Yes...Build and Send BLE Response NOW.
   2188                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001D10   0x49AD             LDR.N    R1,??RoadBrd_ParseString_207+0x4
   \   00001D12   0xA80B             ADD      R0,SP,#+44
   \   00001D14   0x.... 0x....      BL       strcpy
   2189                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001D18   0xA80B             ADD      R0,SP,#+44
   \   00001D1A   0x.... 0x....      BL       strlen
   \   00001D1E   0xA90B             ADD      R1,SP,#+44
   \   00001D20   0x.... 0x....      BL       BGM111_Transmit
   2190                                      }
   2191                                      
   2192                                      strcpy( (char *)tempBffr2, "TIR SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_328: (+1)
   \   00001D24   0xF8DF 0x1DEC      LDR.W    R1,??RoadBrd_ParseString_329
   \   00001D28   0xA80B             ADD      R0,SP,#+44
   \   00001D2A   0x.... 0x....      BL       strcpy
   \   00001D2E   0xE10B             B.N      ??RoadBrd_ParseString_330
   2193                                    }
   2194                                    else
   2195                                    {
   2196                                      // Is this a BLE Operation?
   2197                                      if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_327: (+1)
   \   00001D30   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001D32   0x2D00             CMP      R5,#+0
   \   00001D34   0xD009             BEQ.N    ??RoadBrd_ParseString_331
   2198                                      {
   2199                                        // Yes...Build and Send BLE Response NOW.
   2200                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001D36   0x49A4             LDR.N    R1,??RoadBrd_ParseString_207+0x4
   \   00001D38   0xA80B             ADD      R0,SP,#+44
   \   00001D3A   0x.... 0x....      BL       strcpy
   2201                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001D3E   0xA80B             ADD      R0,SP,#+44
   \   00001D40   0x.... 0x....      BL       strlen
   \   00001D44   0xA90B             ADD      R1,SP,#+44
   \   00001D46   0x.... 0x....      BL       BGM111_Transmit
   2202                                      }
   2203                                      
   2204                                      // 2. Grab Address and validate a legal number
   2205                                      tempBffr3[0] = tempBffr[4];
   \                     ??RoadBrd_ParseString_331: (+1)
   \   00001D4A   0xF994 0x0004      LDRSB    R0,[R4, #+4]
   \   00001D4E   0xF88D 0x00AC      STRB     R0,[SP, #+172]
   2206                                      tempBffr3[1] = tempBffr[5];
   \   00001D52   0xF994 0x0005      LDRSB    R0,[R4, #+5]
   \   00001D56   0xF88D 0x00AD      STRB     R0,[SP, #+173]
   2207                                      tempBffr3[2] = 0x00;
   \   00001D5A   0x2000             MOVS     R0,#+0
   \   00001D5C   0xF88D 0x00AE      STRB     R0,[SP, #+174]
   2208                                      if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001D60   0xA82B             ADD      R0,SP,#+172
   \   00001D62   0x.... 0x....      BL       isHexNum
   \   00001D66   0x2800             CMP      R0,#+0
   \   00001D68   0xD105             BNE.N    ??RoadBrd_ParseString_332
   2209                                        strcpy( (char *)tempBffr2, "TIR SYNTAX ERROR: Address not HEX Value.\r\n");
   \   00001D6A   0xF8DF 0x1E20      LDR.W    R1,??RoadBrd_ParseString_333
   \   00001D6E   0xA80B             ADD      R0,SP,#+44
   \   00001D70   0x.... 0x....      BL       strcpy
   \   00001D74   0xE0E8             B.N      ??RoadBrd_ParseString_330
   2210                                      else
   2211                                      {
   2212                                        // Legal Address. Save it as value
   2213                                        Address = hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_332: (+1)
   \   00001D76   0xA82B             ADD      R0,SP,#+172
   \   00001D78   0x.... 0x....      BL       hatoi
   \   00001D7C   0x9031             STR      R0,[SP, #+196]
   2214                                        // 3. Now get the number of bytes of data from field.
   2215                                        tempBffr3[0] = tempBffr[7];
   \   00001D7E   0xF994 0x0007      LDRSB    R0,[R4, #+7]
   \   00001D82   0xF88D 0x00AC      STRB     R0,[SP, #+172]
   2216                                        tempBffr3[1] = tempBffr[8];
   \   00001D86   0xF994 0x0008      LDRSB    R0,[R4, #+8]
   \   00001D8A   0xF88D 0x00AD      STRB     R0,[SP, #+173]
   2217                                        tempBffr3[2] = 0x00;
   \   00001D8E   0x2000             MOVS     R0,#+0
   \   00001D90   0xF88D 0x00AE      STRB     R0,[SP, #+174]
   2218                                        if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001D94   0xA82B             ADD      R0,SP,#+172
   \   00001D96   0x.... 0x....      BL       isHexNum
   \   00001D9A   0x2800             CMP      R0,#+0
   \   00001D9C   0xD105             BNE.N    ??RoadBrd_ParseString_334
   2219                                          strcpy( (char *)tempBffr2, "TIR SYNTAX ERROR: Number of Bytes not HEX Value.\r\n");
   \   00001D9E   0xF8DF 0x1DF0      LDR.W    R1,??RoadBrd_ParseString_333+0x4
   \   00001DA2   0xA80B             ADD      R0,SP,#+44
   \   00001DA4   0x.... 0x....      BL       strcpy
   \   00001DA8   0xE0CE             B.N      ??RoadBrd_ParseString_330
   2220                                        else
   2221                                        {
   2222                                          // Legal NUMBER BYTES. Save it as value
   2223                                          num_bytes = hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_334: (+1)
   \   00001DAA   0xA82B             ADD      R0,SP,#+172
   \   00001DAC   0x.... 0x....      BL       hatoi
   \   00001DB0   0x9034             STR      R0,[SP, #+208]
   2224                                          
   2225                                          // 3a. Now get the number of bytes Received of data from field.
   2226                                          tempBffr3[0] = tempBffr[10];
   \   00001DB2   0xF994 0x000A      LDRSB    R0,[R4, #+10]
   \   00001DB6   0xF88D 0x00AC      STRB     R0,[SP, #+172]
   2227                                          tempBffr3[1] = tempBffr[11];
   \   00001DBA   0xF994 0x000B      LDRSB    R0,[R4, #+11]
   \   00001DBE   0xF88D 0x00AD      STRB     R0,[SP, #+173]
   2228                                          tempBffr3[2] = 0x00;
   \   00001DC2   0x2000             MOVS     R0,#+0
   \   00001DC4   0xF88D 0x00AE      STRB     R0,[SP, #+174]
   2229                                          if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001DC8   0xA82B             ADD      R0,SP,#+172
   \   00001DCA   0x.... 0x....      BL       isHexNum
   \   00001DCE   0x2800             CMP      R0,#+0
   \   00001DD0   0xD10A             BNE.N    ??RoadBrd_ParseString_335
   2230                                            strcpy( (char *)tempBffr2, "TIR SYNTAX ERROR: Number of Bytes RECEIVED not HEX Value.\r\n");
   \   00001DD2   0xF8DF 0x1E34      LDR.W    R1,??RoadBrd_ParseString_336
   \   00001DD6   0xA80B             ADD      R0,SP,#+44
   \   00001DD8   0x.... 0x....      BL       strcpy
   \   00001DDC   0xE0B4             B.N      ??RoadBrd_ParseString_330
   \   00001DDE   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_185:
   \   00001DE0   0x........         DC32     ?_65
   \   00001DE4   0x........         DC32     ?_66
   2231                                          else
   2232                                          {
   2233                                            // Legal NUMBER BYTES. Save it as value
   2234                                            num_bytes_received = hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_335: (+1)
   \   00001DE8   0xA82B             ADD      R0,SP,#+172
   \   00001DEA   0x.... 0x....      BL       hatoi
   \   00001DEE   0x903A             STR      R0,[SP, #+232]
   2235                                            // 4. Test num_bytes. If Zero, We are done
   2236                                            if (num_bytes == 0)
   \   00001DF0   0x9834             LDR      R0,[SP, #+208]
   \   00001DF2   0x2800             CMP      R0,#+0
   \   00001DF4   0xD106             BNE.N    ??RoadBrd_ParseString_337
   2237                                            {
   2238                                              sprintf( (char *)tempBffr2, "TIR: GOOD CMD: %x.\r\n", Address);
   \   00001DF6   0x9A31             LDR      R2,[SP, #+196]
   \   00001DF8   0xF8DF 0x1E10      LDR.W    R1,??RoadBrd_ParseString_336+0x4
   \   00001DFC   0xA80B             ADD      R0,SP,#+44
   \   00001DFE   0x.... 0x....      BL       sprintf
   \   00001E02   0xE038             B.N      ??RoadBrd_ParseString_338
   2239                                            }
   2240                                            else
   2241                                            {
   2242                                              // 5. Time to get all the data.
   2243                                              Error = 0;
   \                     ??RoadBrd_ParseString_337: (+1)
   \   00001E04   0x2000             MOVS     R0,#+0
   \   00001E06   0x9035             STR      R0,[SP, #+212]
   2244                                              for (x=0; x<num_bytes; x++)
   \   00001E08   0x2000             MOVS     R0,#+0
   \   00001E0A   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_339: (+1)
   \   00001E0C   0x9834             LDR      R0,[SP, #+208]
   \   00001E0E   0x4287             CMP      R7,R0
   \   00001E10   0xDA31             BGE.N    ??RoadBrd_ParseString_338
   2245                                              {
   2246                                                tempBffr3[0] = tempBffr[13+x*3];
   \   00001E12   0x2003             MOVS     R0,#+3
   \   00001E14   0xFB00 0xF007      MUL      R0,R0,R7
   \   00001E18   0x4420             ADD      R0,R4,R0
   \   00001E1A   0xF990 0x000D      LDRSB    R0,[R0, #+13]
   \   00001E1E   0xF88D 0x00AC      STRB     R0,[SP, #+172]
   2247                                                tempBffr3[1] = tempBffr[14+x*3];
   \   00001E22   0x2003             MOVS     R0,#+3
   \   00001E24   0xFB00 0xF007      MUL      R0,R0,R7
   \   00001E28   0x4420             ADD      R0,R4,R0
   \   00001E2A   0xF990 0x000E      LDRSB    R0,[R0, #+14]
   \   00001E2E   0xF88D 0x00AD      STRB     R0,[SP, #+173]
   2248                                                tempBffr3[2] = 0x00;
   \   00001E32   0x2000             MOVS     R0,#+0
   \   00001E34   0xF88D 0x00AE      STRB     R0,[SP, #+174]
   2249                                                if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001E38   0xA82B             ADD      R0,SP,#+172
   \   00001E3A   0x.... 0x....      BL       isHexNum
   \   00001E3E   0x2800             CMP      R0,#+0
   \   00001E40   0xD112             BNE.N    ??RoadBrd_ParseString_340
   2250                                                {
   2251                                                  strcpy( (char *)tempBffr2, "TIR SYNTAX ERROR: Data not HEX Value.\r\n");
   \   00001E42   0xF8DF 0x1E40      LDR.W    R1,??RoadBrd_ParseString_341
   \   00001E46   0xA80B             ADD      R0,SP,#+44
   \   00001E48   0x.... 0x....      BL       strcpy
   2252                                                  Error = 1;
   \   00001E4C   0x2001             MOVS     R0,#+1
   \   00001E4E   0x9035             STR      R0,[SP, #+212]
   2253                                                  break;
   \   00001E50   0xE011             B.N      ??RoadBrd_ParseString_338
   \   00001E52   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_190:
   \   00001E54   0x........         DC32     ?_67
   \   00001E58   0x........         DC32     ?_68
   \   00001E5C   0x........         DC32     ?_69
   \   00001E60   0x........         DC32     ?_70
   \   00001E64   0x........         DC32     ?_71
   2254                                                }
   2255                                                else
   2256                                                {
   2257                                                  i2cData[x] =  hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_340: (+1)
   \   00001E68   0xA82B             ADD      R0,SP,#+172
   \   00001E6A   0x.... 0x....      BL       hatoi
   \   00001E6E   0xA99A             ADD      R1,SP,#+616
   \   00001E70   0x55C8             STRB     R0,[R1, R7]
   2258                                                } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)
   2259                                              } //EndFor (x=0; x<num_bytes; x++)
   \   00001E72   0x1C7F             ADDS     R7,R7,#+1
   \   00001E74   0xE7CA             B.N      ??RoadBrd_ParseString_339
   2260                                            } //EndElse (num_bytes == 0)
   2261                                            if (Error==0)
   \                     ??RoadBrd_ParseString_338: (+1)
   \   00001E76   0x9835             LDR      R0,[SP, #+212]
   \   00001E78   0x2800             CMP      R0,#+0
   \   00001E7A   0xD105             BNE.N    ??RoadBrd_ParseString_342
   2262                                            {
   2263                                              sprintf( (char *)tempBffr2, "TIR: GOOD CMD: %x.", Address);
   \   00001E7C   0x9A31             LDR      R2,[SP, #+196]
   \   00001E7E   0xF8DF 0x1E08      LDR.W    R1,??RoadBrd_ParseString_341+0x4
   \   00001E82   0xA80B             ADD      R0,SP,#+44
   \   00001E84   0x.... 0x....      BL       sprintf
   2264                                            }
   2265                                            for(x=0; x<num_bytes; x++)
   \                     ??RoadBrd_ParseString_342: (+1)
   \   00001E88   0x2000             MOVS     R0,#+0
   \   00001E8A   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_343: (+1)
   \   00001E8C   0x9834             LDR      R0,[SP, #+208]
   \   00001E8E   0x4287             CMP      R7,R0
   \   00001E90   0xDA0B             BGE.N    ??RoadBrd_ParseString_344
   2266                                            {
   2267                                              sprintf( (char *)tempBffr3, "%x.", i2cData[x]);
   \   00001E92   0xA89A             ADD      R0,SP,#+616
   \   00001E94   0x5DC2             LDRB     R2,[R0, R7]
   \   00001E96   0xA14D             ADR.N    R1,??RoadBrd_ParseString_207+0x8  ;; "%x."
   \   00001E98   0xA82B             ADD      R0,SP,#+172
   \   00001E9A   0x.... 0x....      BL       sprintf
   2268                                              strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   00001E9E   0xA92B             ADD      R1,SP,#+172
   \   00001EA0   0xA80B             ADD      R0,SP,#+44
   \   00001EA2   0x.... 0x....      BL       strcat
   2269                                            }
   \   00001EA6   0x1C7F             ADDS     R7,R7,#+1
   \   00001EA8   0xE7F0             B.N      ??RoadBrd_ParseString_343
   2270                                            strcat( (char *)tempBffr2, "\r\n" );
   \                     ??RoadBrd_ParseString_344: (+1)
   \   00001EAA   0xA149             ADR.N    R1,??RoadBrd_ParseString_207+0xC  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001EAC   0xA80B             ADD      R0,SP,#+44
   \   00001EAE   0x.... 0x....      BL       strcat
   2271                                            // 6. Time to send Command and collect status.
   2272                                            Status =  RoadBrd_I2C_Master_Transmit((uint16_t)Address, i2cData, (uint16_t)num_bytes, I2C_TIMEOUT);
   \   00001EB2   0xF44F 0x73FA      MOV      R3,#+500
   \   00001EB6   0x9834             LDR      R0,[SP, #+208]
   \   00001EB8   0x0002             MOVS     R2,R0
   \   00001EBA   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00001EBC   0xA99A             ADD      R1,SP,#+616
   \   00001EBE   0x9831             LDR      R0,[SP, #+196]
   \   00001EC0   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00001EC2   0x.... 0x....      BL       RoadBrd_I2C_Master_Transmit
   \   00001EC6   0x0006             MOVS     R6,R0
   2273                                            // 6a. Wait for Command to complete(100ms).
   2274           
   2275                                            // 7. If Status was good, Time to get response.
   2276                                            if (Status == HAL_OK)
   \   00001EC8   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001ECA   0x2E00             CMP      R6,#+0
   \   00001ECC   0xD10E             BNE.N    ??RoadBrd_ParseString_345
   2277                                            {
   2278                                              Status =  RoadBrd_I2C_Master_Receive((uint16_t)Address, i2cData, (uint16_t)num_bytes_received, I2C_TIMEOUT);
   \   00001ECE   0xF44F 0x73FA      MOV      R3,#+500
   \   00001ED2   0x983A             LDR      R0,[SP, #+232]
   \   00001ED4   0x0002             MOVS     R2,R0
   \   00001ED6   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00001ED8   0xA99A             ADD      R1,SP,#+616
   \   00001EDA   0x9831             LDR      R0,[SP, #+196]
   \   00001EDC   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00001EDE   0x.... 0x....      BL       RoadBrd_I2C_Master_Receive
   \   00001EE2   0x0006             MOVS     R6,R0
   2279                                            }
   2280                                            else
   2281                                              break;
   2282                                            // 7a. Wait for Command to complete(100ms).
   2283                                            if (Status == HAL_OK)
   \   00001EE4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001EE6   0x2E00             CMP      R6,#+0
   \   00001EE8   0xD105             BNE.N    ??RoadBrd_ParseString_346
   \   00001EEA   0xE000             B.N      ??RoadBrd_ParseString_347
   \                     ??RoadBrd_ParseString_345: (+1)
   \   00001EEC   0xE0D9             B.N      ??RoadBrd_ParseString_305
   2284                                            {
   2285                                              Status = RoadBrd_WaitForState( 20 );
   \                     ??RoadBrd_ParseString_347: (+1)
   \   00001EEE   0x2014             MOVS     R0,#+20
   \   00001EF0   0x.... 0x....      BL       RoadBrd_WaitForState
   \   00001EF4   0x0006             MOVS     R6,R0
   2286                                            }
   2287          
   2288                                            // 8. IfGood report, Need to Output Data.
   2289                                            if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_346: (+1)
   \   00001EF6   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001EF8   0x2E00             CMP      R6,#+0
   \   00001EFA   0xD125             BNE.N    ??RoadBrd_ParseString_330
   2290                                            {
   2291                                              // Send string to UART..
   2292          #ifdef NUCLEO
   2293                                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   2294          #else
   2295                                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00001EFC   0xA90B             ADD      R1,SP,#+44
   \   00001EFE   0x2000             MOVS     R0,#+0
   \   00001F00   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001F04   0x0006             MOVS     R6,R0
   2296          #endif
   2297                                              if (Status != HAL_OK)
   \   00001F06   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001F08   0x2E00             CMP      R6,#+0
   \   00001F0A   0xD003             BEQ.N    ??RoadBrd_ParseString_348
   2298                                                return Status;
   \   00001F0C   0x0030             MOVS     R0,R6
   \   00001F0E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001F10   0xF002 0xBE71      B.W      ??RoadBrd_ParseString_4
   2299                                              // NOW, Build Data String..
   2300                                              sprintf( (char *)tempBffr2, "     DATA: " );
   \                     ??RoadBrd_ParseString_348: (+1)
   \   00001F14   0xF8DF 0x1DE8      LDR.W    R1,??RoadBrd_ParseString_349
   \   00001F18   0xA80B             ADD      R0,SP,#+44
   \   00001F1A   0x.... 0x....      BL       sprintf
   2301                                              for(x=0; x<num_bytes_received; x++)
   \   00001F1E   0x2000             MOVS     R0,#+0
   \   00001F20   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_350: (+1)
   \   00001F22   0x983A             LDR      R0,[SP, #+232]
   \   00001F24   0x4287             CMP      R7,R0
   \   00001F26   0xDA0B             BGE.N    ??RoadBrd_ParseString_351
   2302                                              {
   2303                                                sprintf( (char *)tempBffr3, "%x.", i2cData[x]);
   \   00001F28   0xA89A             ADD      R0,SP,#+616
   \   00001F2A   0x5DC2             LDRB     R2,[R0, R7]
   \   00001F2C   0xA127             ADR.N    R1,??RoadBrd_ParseString_207+0x8  ;; "%x."
   \   00001F2E   0xA82B             ADD      R0,SP,#+172
   \   00001F30   0x.... 0x....      BL       sprintf
   2304                                                strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   00001F34   0xA92B             ADD      R1,SP,#+172
   \   00001F36   0xA80B             ADD      R0,SP,#+44
   \   00001F38   0x.... 0x....      BL       strcat
   2305                                              }
   \   00001F3C   0x1C7F             ADDS     R7,R7,#+1
   \   00001F3E   0xE7F0             B.N      ??RoadBrd_ParseString_350
   2306                                              strcat( (char *)tempBffr2, "\r\n" );
   \                     ??RoadBrd_ParseString_351: (+1)
   \   00001F40   0xA123             ADR.N    R1,??RoadBrd_ParseString_207+0xC  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001F42   0xA80B             ADD      R0,SP,#+44
   \   00001F44   0x.... 0x....      BL       strcat
   2307                                            }
   2308                                          }
   2309                                        } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)...NUMBER BYTES
   2310                                        
   2311                                      } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)...Address
   2312                                      
   2313                                    } //EndElse ( (tempBffr[2]!=':') || (tempBffr[5]!='.') )
   2314                                
   2315                                    break;
   \                     ??RoadBrd_ParseString_330: (+1)
   \   00001F48   0xE0AB             B.N      ??RoadBrd_ParseString_305
   2316          //------------------
   2317                                  case 'Q':
   2318                                    //I2C Receive Command
   2319                                    // Step 1. Validate format.
   2320                                    if( (tempBffr[3]!=':') ||
   2321                                        (tempBffr[6]!='.')  )
   \                     ??RoadBrd_ParseString_306: (+1)
   \   00001F4A   0x78E0             LDRB     R0,[R4, #+3]
   \   00001F4C   0x283A             CMP      R0,#+58
   \   00001F4E   0xD102             BNE.N    ??RoadBrd_ParseString_352
   \   00001F50   0x79A0             LDRB     R0,[R4, #+6]
   \   00001F52   0x282E             CMP      R0,#+46
   \   00001F54   0xD012             BEQ.N    ??RoadBrd_ParseString_353
   2322                                    {
   2323                                      // Is this a BLE Operation?
   2324                                      if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_352: (+1)
   \   00001F56   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001F58   0x2D00             CMP      R5,#+0
   \   00001F5A   0xD009             BEQ.N    ??RoadBrd_ParseString_354
   2325                                      {
   2326                                        // Yes...Build and Send BLE Response NOW.
   2327                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001F5C   0x491A             LDR.N    R1,??RoadBrd_ParseString_207+0x4
   \   00001F5E   0xA80B             ADD      R0,SP,#+44
   \   00001F60   0x.... 0x....      BL       strcpy
   2328                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001F64   0xA80B             ADD      R0,SP,#+44
   \   00001F66   0x.... 0x....      BL       strlen
   \   00001F6A   0xA90B             ADD      R1,SP,#+44
   \   00001F6C   0x.... 0x....      BL       BGM111_Transmit
   2329                                      }
   2330                                      
   2331                                      strcpy( (char *)tempBffr2, "TIQ SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_354: (+1)
   \   00001F70   0xF8DF 0x1E04      LDR.W    R1,??RoadBrd_ParseString_355
   \   00001F74   0xA80B             ADD      R0,SP,#+44
   \   00001F76   0x.... 0x....      BL       strcpy
   \   00001F7A   0xE08C             B.N      ??RoadBrd_ParseString_356
   2332                                    }
   2333                                    else
   2334                                    {
   2335                                      // Is this a BLE Operation?
   2336                                      if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_353: (+1)
   \   00001F7C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001F7E   0x2D00             CMP      R5,#+0
   \   00001F80   0xD009             BEQ.N    ??RoadBrd_ParseString_357
   2337                                      {
   2338                                        // Yes...Build and Send BLE Response NOW.
   2339                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001F82   0x4911             LDR.N    R1,??RoadBrd_ParseString_207+0x4
   \   00001F84   0xA80B             ADD      R0,SP,#+44
   \   00001F86   0x.... 0x....      BL       strcpy
   2340                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001F8A   0xA80B             ADD      R0,SP,#+44
   \   00001F8C   0x.... 0x....      BL       strlen
   \   00001F90   0xA90B             ADD      R1,SP,#+44
   \   00001F92   0x.... 0x....      BL       BGM111_Transmit
   2341                                      }
   2342                                      
   2343                                      // 2. Grab Address and validate a legal number
   2344                                      tempBffr3[0] = tempBffr[4];
   \                     ??RoadBrd_ParseString_357: (+1)
   \   00001F96   0xF994 0x0004      LDRSB    R0,[R4, #+4]
   \   00001F9A   0xF88D 0x00AC      STRB     R0,[SP, #+172]
   2345                                      tempBffr3[1] = tempBffr[5];
   \   00001F9E   0xF994 0x0005      LDRSB    R0,[R4, #+5]
   \   00001FA2   0xF88D 0x00AD      STRB     R0,[SP, #+173]
   2346                                      tempBffr3[2] = 0x00;
   \   00001FA6   0x2000             MOVS     R0,#+0
   \   00001FA8   0xF88D 0x00AE      STRB     R0,[SP, #+174]
   2347                                      if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001FAC   0xA82B             ADD      R0,SP,#+172
   \   00001FAE   0x.... 0x....      BL       isHexNum
   \   00001FB2   0x2800             CMP      R0,#+0
   \   00001FB4   0xD10E             BNE.N    ??RoadBrd_ParseString_358
   2348                                        strcpy( (char *)tempBffr2, "TIQ SYNTAX ERROR: Address not HEX Value.\r\n");
   \   00001FB6   0xF8DF 0x1DC4      LDR.W    R1,??RoadBrd_ParseString_355+0x4
   \   00001FBA   0xA80B             ADD      R0,SP,#+44
   \   00001FBC   0x.... 0x....      BL       strcpy
   \   00001FC0   0xE069             B.N      ??RoadBrd_ParseString_356
   \   00001FC2   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_207:
   \   00001FC4   0x........         DC32     ?_72
   \   00001FC8   0x........         DC32     ?_24
   \   00001FCC   0x25 0x78          DC8      "%x."
   \              0x2E 0x00    
   \   00001FD0   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
   2349                                      else
   2350                                      {
   2351                                        // Legal Address. Save it as value
   2352                                        Address = hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_358: (+1)
   \   00001FD4   0xA82B             ADD      R0,SP,#+172
   \   00001FD6   0x.... 0x....      BL       hatoi
   \   00001FDA   0x9031             STR      R0,[SP, #+196]
   2353                                        // 3. Now get the number of bytes Received of data from field.
   2354                                        tempBffr3[0] = tempBffr[7];
   \   00001FDC   0xF994 0x0007      LDRSB    R0,[R4, #+7]
   \   00001FE0   0xF88D 0x00AC      STRB     R0,[SP, #+172]
   2355                                        tempBffr3[1] = tempBffr[8];
   \   00001FE4   0xF994 0x0008      LDRSB    R0,[R4, #+8]
   \   00001FE8   0xF88D 0x00AD      STRB     R0,[SP, #+173]
   2356                                        tempBffr3[2] = 0x00;
   \   00001FEC   0x2000             MOVS     R0,#+0
   \   00001FEE   0xF88D 0x00AE      STRB     R0,[SP, #+174]
   2357                                        if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001FF2   0xA82B             ADD      R0,SP,#+172
   \   00001FF4   0x.... 0x....      BL       isHexNum
   \   00001FF8   0x2800             CMP      R0,#+0
   \   00001FFA   0xD105             BNE.N    ??RoadBrd_ParseString_359
   2358                                          strcpy( (char *)tempBffr2, "TIQ SYNTAX ERROR: Number of Bytes not HEX Value.\r\n");
   \   00001FFC   0xF8DF 0x1E1C      LDR.W    R1,??RoadBrd_ParseString_360
   \   00002000   0xA80B             ADD      R0,SP,#+44
   \   00002002   0x.... 0x....      BL       strcpy
   \   00002006   0xE046             B.N      ??RoadBrd_ParseString_356
   2359                                        else
   2360                                        {
   2361                                            // Legal NUMBER BYTES. Save it as value
   2362                                            num_bytes_received = hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_359: (+1)
   \   00002008   0xA82B             ADD      R0,SP,#+172
   \   0000200A   0x.... 0x....      BL       hatoi
   \   0000200E   0x903A             STR      R0,[SP, #+232]
   2363                                            // 4. Test num_bytes. If Zero, We are done
   2364                                            sprintf( (char *)tempBffr2, "TIR: GOOD CMD: %x.\r\n", Address);
   \   00002010   0x9A31             LDR      R2,[SP, #+196]
   \   00002012   0xF8DF 0x1BF8      LDR.W    R1,??RoadBrd_ParseString_336+0x4
   \   00002016   0xA80B             ADD      R0,SP,#+44
   \   00002018   0x.... 0x....      BL       sprintf
   2365                                            // 7. If Status was good, Time to get response.
   2366                                            Status =  RoadBrd_I2C_Master_Receive((uint16_t)Address, i2cData, (uint16_t)num_bytes_received, I2C_TIMEOUT);
   \   0000201C   0xF44F 0x73FA      MOV      R3,#+500
   \   00002020   0x983A             LDR      R0,[SP, #+232]
   \   00002022   0x0002             MOVS     R2,R0
   \   00002024   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00002026   0xA99A             ADD      R1,SP,#+616
   \   00002028   0x9831             LDR      R0,[SP, #+196]
   \   0000202A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000202C   0x.... 0x....      BL       RoadBrd_I2C_Master_Receive
   \   00002030   0x0006             MOVS     R6,R0
   2367                                            // 7a. Wait for Command to complete(100ms).
   2368                                            if (Status == HAL_OK)
   \   00002032   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002034   0x2E00             CMP      R6,#+0
   \   00002036   0xD107             BNE.N    ??RoadBrd_ParseString_361
   2369                                            {
   2370                                              Status = RoadBrd_WaitForState( 20 );
   \   00002038   0x2014             MOVS     R0,#+20
   \   0000203A   0x.... 0x....      BL       RoadBrd_WaitForState
   \   0000203E   0x0006             MOVS     R6,R0
   2371                                            }
   2372                                            else
   2373                                              break;
   2374                                            // 8. IfGood report, Need to Output Data.
   2375                                            if (Status == HAL_OK)
   \   00002040   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002042   0x2E00             CMP      R6,#+0
   \   00002044   0xD127             BNE.N    ??RoadBrd_ParseString_356
   \   00002046   0xE000             B.N      ??RoadBrd_ParseString_362
   \                     ??RoadBrd_ParseString_361: (+1)
   \   00002048   0xE02B             B.N      ??RoadBrd_ParseString_305
   2376                                            {
   2377                                              // Send string to UART..
   2378          #ifdef NUCLEO
   2379                                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   2380          #else
   2381                                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \                     ??RoadBrd_ParseString_362: (+1)
   \   0000204A   0xA90B             ADD      R1,SP,#+44
   \   0000204C   0x2000             MOVS     R0,#+0
   \   0000204E   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00002052   0x0006             MOVS     R6,R0
   2382          #endif
   2383                                              if (Status != HAL_OK)
   \   00002054   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002056   0x2E00             CMP      R6,#+0
   \   00002058   0xD003             BEQ.N    ??RoadBrd_ParseString_363
   2384                                                return Status;
   \   0000205A   0x0030             MOVS     R0,R6
   \   0000205C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000205E   0xF002 0xBDCA      B.W      ??RoadBrd_ParseString_4
   2385                                              // NOW, Build Data String..
   2386                                              sprintf( (char *)tempBffr2, "     DATA: " );
   \                     ??RoadBrd_ParseString_363: (+1)
   \   00002062   0xF8DF 0x1C9C      LDR.W    R1,??RoadBrd_ParseString_349
   \   00002066   0xA80B             ADD      R0,SP,#+44
   \   00002068   0x.... 0x....      BL       sprintf
   2387                                              for(x=0; x<num_bytes_received; x++)
   \   0000206C   0x2000             MOVS     R0,#+0
   \   0000206E   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_364: (+1)
   \   00002070   0x983A             LDR      R0,[SP, #+232]
   \   00002072   0x4287             CMP      R7,R0
   \   00002074   0xDA0B             BGE.N    ??RoadBrd_ParseString_365
   2388                                              {
   2389                                                sprintf( (char *)tempBffr3, "%x.", i2cData[x]);
   \   00002076   0xA89A             ADD      R0,SP,#+616
   \   00002078   0x5DC2             LDRB     R2,[R0, R7]
   \   0000207A   0xA1D3             ADR.N    R1,??RoadBrd_ParseString_248+0x4  ;; "%x."
   \   0000207C   0xA82B             ADD      R0,SP,#+172
   \   0000207E   0x.... 0x....      BL       sprintf
   2390                                                strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   00002082   0xA92B             ADD      R1,SP,#+172
   \   00002084   0xA80B             ADD      R0,SP,#+44
   \   00002086   0x.... 0x....      BL       strcat
   2391                                              }
   \   0000208A   0x1C7F             ADDS     R7,R7,#+1
   \   0000208C   0xE7F0             B.N      ??RoadBrd_ParseString_364
   2392                                              strcat( (char *)tempBffr2, "\r\n" );
   \                     ??RoadBrd_ParseString_365: (+1)
   \   0000208E   0xA1CF             ADR.N    R1,??RoadBrd_ParseString_248+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00002090   0xA80B             ADD      R0,SP,#+44
   \   00002092   0x.... 0x....      BL       strcat
   2393                                          }
   2394                                        } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)...NUMBER BYTES
   2395                                        
   2396                                      } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)...Address
   2397                                      
   2398                                    } //EndElse ( (tempBffr[2]!=':') || (tempBffr[5]!='.') )
   2399                                
   2400                                    break;
   \                     ??RoadBrd_ParseString_356: (+1)
   \   00002096   0xE004             B.N      ??RoadBrd_ParseString_305
   2401                                  default:
   2402                                    strcpy( (char *)tempBffr2, "ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_307: (+1)
   \   00002098   0xF8DF 0x1798      LDR.W    R1,??RoadBrd_ParseString_280
   \   0000209C   0xA80B             ADD      R0,SP,#+44
   \   0000209E   0x.... 0x....      BL       strcpy
   2403                                    break;
   2404                                } //EndSwitch ( tempBffr[2] )
   2405                              } //EndElse (Size < 9)
   2406                              break;
   \                     ??RoadBrd_ParseString_305: (+1)
   \   000020A2   0xF002 0xBD12      B.W      ??RoadBrd_ParseString_289
   \   000020A6   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_215:
   \   000020A8   0x........         DC32     ?_73
   \   000020AC   0x........         DC32     ?_74
   \   000020B0   0x........         DC32     ?_75
   \   000020B4   0x........         DC32     ?_35
   2407          //++++++++++++++++++++++++++++++++++++++++++  Calibration Commands.
   2408                            case 'C':
   2409                              Status = HAL_OK;
   \                     ??RoadBrd_ParseString_291: (+1)
   \   000020B8   0x2000             MOVS     R0,#+0
   \   000020BA   0x0006             MOVS     R6,R0
   2410                              if (Size == 2)
   \   000020BC   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   000020C0   0x2802             CMP      R0,#+2
   \   000020C2   0xF040 0x80E9      BNE.W    ??RoadBrd_ParseString_366
   2411                              {
   2412                                //------------------ TC Command: Dump Calibration Settings.      
   2413                                // Read Cool Eye/Grid Eye Values.....
   2414                                if ( Get_DriverStates( GRIDEYE_MNTR_TASK ))
   \   000020C6   0x2005             MOVS     R0,#+5
   \   000020C8   0x.... 0x....      BL       Get_DriverStates
   \   000020CC   0x2800             CMP      R0,#+0
   \   000020CE   0xD004             BEQ.N    ??RoadBrd_ParseString_367
   2415                                {
   2416                                  Status = RoadBrd_GridEye_ReadValues_Scaled( &GridMeasure );
   \   000020D0   0xA85B             ADD      R0,SP,#+364
   \   000020D2   0x.... 0x....      BL       RoadBrd_GridEye_ReadValues_Scaled
   \   000020D6   0x0006             MOVS     R6,R0
   \   000020D8   0xE00B             B.N      ??RoadBrd_ParseString_368
   2417                                }
   2418                                else if ( Get_DriverStates( COOLEYE_MNTR_TASK ))
   \                     ??RoadBrd_ParseString_367: (+1)
   \   000020DA   0x2006             MOVS     R0,#+6
   \   000020DC   0x.... 0x....      BL       Get_DriverStates
   \   000020E0   0x2800             CMP      R0,#+0
   \   000020E2   0xD004             BEQ.N    ??RoadBrd_ParseString_369
   2419                                {
   2420                                  Status = RoadBrd_CoolEye_ReadValues_Scaled( &GridMeasure );
   \   000020E4   0xA85B             ADD      R0,SP,#+364
   \   000020E6   0x.... 0x....      BL       RoadBrd_CoolEye_ReadValues_Scaled
   \   000020EA   0x0006             MOVS     R6,R0
   \   000020EC   0xE001             B.N      ??RoadBrd_ParseString_368
   2421                                }
   2422                                else
   2423                                  Status = HAL_ERROR;
   \                     ??RoadBrd_ParseString_369: (+1)
   \   000020EE   0x2001             MOVS     R0,#+1
   \   000020F0   0x0006             MOVS     R6,R0
   2424                                
   2425                                // Is this a BLE Operation?
   2426                                if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_368: (+1)
   \   000020F2   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000020F4   0x2E00             CMP      R6,#+0
   \   000020F6   0xF040 0x80B5      BNE.W    ??RoadBrd_ParseString_370
   2427                                {
   2428                                  // OK Next Sensor.
   2429                                  // Read Temperature sensor and return results....Temperature Sensor U10(PCT2075GVJ).  Addr: 0x94
   2430                                  Status = RoadBrd_ReadTemp_Scaled( &TMeasure );
   \   000020FA   0xA83C             ADD      R0,SP,#+240
   \   000020FC   0x.... 0x....      BL       RoadBrd_ReadTemp_Scaled
   \   00002100   0x0006             MOVS     R6,R0
   2431                                  if (Status == HAL_OK)
   \   00002102   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002104   0x2E00             CMP      R6,#+0
   \   00002106   0xF040 0x8095      BNE.W    ??RoadBrd_ParseString_371
   2432                                  {
   2433                                    // OK Next Sensor.
   2434                                    // Read Humidity Sensor sensor and return Humidity results....
   2435                                    Status = RoadBrd_Humidity_ReadHumidity_Scaled( &HMeasure );
   \   0000210A   0xA849             ADD      R0,SP,#+292
   \   0000210C   0x.... 0x....      BL       RoadBrd_Humidity_ReadHumidity_Scaled
   \   00002110   0x0006             MOVS     R6,R0
   2436                                    if (Status == HAL_OK)
   \   00002112   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002114   0x2E00             CMP      R6,#+0
   \   00002116   0xD174             BNE.N    ??RoadBrd_ParseString_372
   2437                                    {
   2438                                      // OK Next Sensor.
   2439                                      //Status = RoadBrd_Barometer_Status( &PRMeasure );
   2440                                      Status = RoadBrd_Baro_ReadPressure_Scaled( &PRPMeasure );
   \   00002118   0xA8AE             ADD      R0,SP,#+696
   \   0000211A   0x.... 0x....      BL       RoadBrd_Baro_ReadPressure_Scaled
   \   0000211E   0x0006             MOVS     R6,R0
   2441                                      if (Status == HAL_OK)
   \   00002120   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002122   0x2E00             CMP      R6,#+0
   \   00002124   0xD158             BNE.N    ??RoadBrd_ParseString_373
   2442                                      {
   2443                                        if ( BLE_Flag )
   \   00002126   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002128   0x2D00             CMP      R5,#+0
   \   0000212A   0xD025             BEQ.N    ??RoadBrd_ParseString_374
   2444                                        {
   2445                                          // Yes...Build and Send BLE Response NOW.
   2446                                          sprintf( (char *)tempBffr2, "<STATUS>%s//%s//%s//%s//%s//%s//%s//%s//%s//%s//%s//%s</STATUS>", (char *)GridMeasure.GridEye1.TempC,
   2447                                                  (char *)GridMeasure.GridEye2.TempC,
   2448                                                  (char *)GridMeasure.GridEye3.TempC,
   2449                                                  (char *)GridMeasure.GridEye4.TempC,
   2450                                                  (char *)GridMeasure.GridEye5.TempC,
   2451                                                  (char *)GridMeasure.GridEye6.TempC,
   2452                                                  (char *)GridMeasure.GridEye7.TempC,
   2453                                                  (char *)GridMeasure.GridEye8.TempC,
   2454                                                  (char *)GridMeasure.Thermistor.TempC,
   2455                                                  (char *)TMeasure.TempC,
   2456                                                  (char *)HMeasure.Humidity,
   2457                                                  (char *)PRPMeasure.Pressure);
   \   0000212C   0xA8AE             ADD      R0,SP,#+696
   \   0000212E   0x9009             STR      R0,[SP, #+36]
   \   00002130   0xA849             ADD      R0,SP,#+292
   \   00002132   0x9008             STR      R0,[SP, #+32]
   \   00002134   0xA83C             ADD      R0,SP,#+240
   \   00002136   0x9007             STR      R0,[SP, #+28]
   \   00002138   0xA85B             ADD      R0,SP,#+364
   \   0000213A   0x9006             STR      R0,[SP, #+24]
   \   0000213C   0xA88B             ADD      R0,SP,#+556
   \   0000213E   0x9005             STR      R0,[SP, #+20]
   \   00002140   0xA885             ADD      R0,SP,#+532
   \   00002142   0x9004             STR      R0,[SP, #+16]
   \   00002144   0xA87F             ADD      R0,SP,#+508
   \   00002146   0x9003             STR      R0,[SP, #+12]
   \   00002148   0xA879             ADD      R0,SP,#+484
   \   0000214A   0x9002             STR      R0,[SP, #+8]
   \   0000214C   0xA873             ADD      R0,SP,#+460
   \   0000214E   0x9001             STR      R0,[SP, #+4]
   \   00002150   0xA86D             ADD      R0,SP,#+436
   \   00002152   0x9000             STR      R0,[SP, #+0]
   \   00002154   0xAB67             ADD      R3,SP,#+412
   \   00002156   0xAA61             ADD      R2,SP,#+388
   \   00002158   0xF8DF 0x1D84      LDR.W    R1,??RoadBrd_ParseString_375
   \   0000215C   0xA80B             ADD      R0,SP,#+44
   \   0000215E   0x.... 0x....      BL       sprintf
   2458                                          strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00002162   0xF8DF 0x1D80      LDR.W    R1,??RoadBrd_ParseString_375+0x4
   \   00002166   0xA80B             ADD      R0,SP,#+44
   \   00002168   0x.... 0x....      BL       strcpy
   2459                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000216C   0xA80B             ADD      R0,SP,#+44
   \   0000216E   0x.... 0x....      BL       strlen
   \   00002172   0xA90B             ADD      R1,SP,#+44
   \   00002174   0x.... 0x....      BL       BGM111_Transmit
   2460                                        }
   2461                                        
   2462                                        //sprintf( (char *)tempBffr2, "Driver Status: %04x\r\n", DriverStatus );
   2463                                        sprintf( (char *)tempBffr2, "%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\r\n", (char *)GridMeasure.GridEye1.TempC,
   2464                                                (char *)GridMeasure.GridEye2.TempC,
   2465                                                (char *)GridMeasure.GridEye3.TempC,
   2466                                                (char *)GridMeasure.GridEye4.TempC,
   2467                                                (char *)GridMeasure.GridEye5.TempC,
   2468                                                (char *)GridMeasure.GridEye6.TempC,
   2469                                                (char *)GridMeasure.GridEye7.TempC,
   2470                                                (char *)GridMeasure.GridEye8.TempC,
   2471                                                (char *)GridMeasure.Thermistor.TempC,
   2472                                                (char *)TMeasure.TempC,
   2473                                                (char *)HMeasure.Humidity,
   2474                                                (char *)PRPMeasure.Pressure);
   \                     ??RoadBrd_ParseString_374: (+1)
   \   00002178   0xA8AE             ADD      R0,SP,#+696
   \   0000217A   0x9009             STR      R0,[SP, #+36]
   \   0000217C   0xA849             ADD      R0,SP,#+292
   \   0000217E   0x9008             STR      R0,[SP, #+32]
   \   00002180   0xA83C             ADD      R0,SP,#+240
   \   00002182   0x9007             STR      R0,[SP, #+28]
   \   00002184   0xA85B             ADD      R0,SP,#+364
   \   00002186   0x9006             STR      R0,[SP, #+24]
   \   00002188   0xA88B             ADD      R0,SP,#+556
   \   0000218A   0x9005             STR      R0,[SP, #+20]
   \   0000218C   0xA885             ADD      R0,SP,#+532
   \   0000218E   0x9004             STR      R0,[SP, #+16]
   \   00002190   0xA87F             ADD      R0,SP,#+508
   \   00002192   0x9003             STR      R0,[SP, #+12]
   \   00002194   0xA879             ADD      R0,SP,#+484
   \   00002196   0x9002             STR      R0,[SP, #+8]
   \   00002198   0xA873             ADD      R0,SP,#+460
   \   0000219A   0x9001             STR      R0,[SP, #+4]
   \   0000219C   0xA86D             ADD      R0,SP,#+436
   \   0000219E   0x9000             STR      R0,[SP, #+0]
   \   000021A0   0xAB67             ADD      R3,SP,#+412
   \   000021A2   0xAA61             ADD      R2,SP,#+388
   \   000021A4   0xF8DF 0x1D40      LDR.W    R1,??RoadBrd_ParseString_375+0x8
   \   000021A8   0xA80B             ADD      R0,SP,#+44
   \   000021AA   0x.... 0x....      BL       sprintf
   2475                                        // Send string to UART..
   2476          #ifdef NUCLEO
   2477                                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   2478          #else
   2479                                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000021AE   0xA90B             ADD      R1,SP,#+44
   \   000021B0   0x2000             MOVS     R0,#+0
   \   000021B2   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000021B6   0x0006             MOVS     R6,R0
   2480          #endif
   2481                                        if (Status != HAL_OK)
   \   000021B8   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000021BA   0x2E00             CMP      R6,#+0
   \   000021BC   0xD003             BEQ.N    ??RoadBrd_ParseString_376
   2482                                          return Status;
   \   000021BE   0x0030             MOVS     R0,R6
   \   000021C0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000021C2   0xF002 0xBD18      B.W      ??RoadBrd_ParseString_4
   2483                                        // NOW, Build Data String..
   2484                                        sprintf( (char *)tempBffr2, "COMPLETE" );
   \                     ??RoadBrd_ParseString_376: (+1)
   \   000021C6   0xF8DF 0x1E34      LDR.W    R1,??RoadBrd_ParseString_377
   \   000021CA   0xA80B             ADD      R0,SP,#+44
   \   000021CC   0x.... 0x....      BL       sprintf
   \   000021D0   0xF001 0xBE9D      B.W      ??RoadBrd_ParseString_378
   \                     ??RoadBrd_ParseString_222:
   \   000021D4   0x........         DC32     ?_36
   2485                                      } // Endif (Status == HAL_OK) RoadBrd_Baro_ReadPressure
   2486                                      else
   2487                                      {
   2488                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_373: (+1)
   \   000021D8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000021DA   0x2D00             CMP      R5,#+0
   \   000021DC   0xD00A             BEQ.N    ??RoadBrd_ParseString_379
   2489                                        {
   2490                                          // Yes...Build and Send BLE Response NOW.
   2491                                          strcpy( (char *)tempBffr2, "<STATUS>CMD_TC_HWERR_PRESSUE</STATUS>");
   \   000021DE   0xF8DF 0x1E20      LDR.W    R1,??RoadBrd_ParseString_377+0x4
   \   000021E2   0xA80B             ADD      R0,SP,#+44
   \   000021E4   0x.... 0x....      BL       strcpy
   2492                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000021E8   0xA80B             ADD      R0,SP,#+44
   \   000021EA   0x.... 0x....      BL       strlen
   \   000021EE   0xA90B             ADD      R1,SP,#+44
   \   000021F0   0x.... 0x....      BL       BGM111_Transmit
   2493                                        }
   2494                                        
   2495                                        sprintf( (char *)tempBffr2, "Pressure TASKING ERROR!" );
   \                     ??RoadBrd_ParseString_379: (+1)
   \   000021F4   0xF8DF 0x1E0C      LDR.W    R1,??RoadBrd_ParseString_377+0x8
   \   000021F8   0xA80B             ADD      R0,SP,#+44
   \   000021FA   0x.... 0x....      BL       sprintf
   \   000021FE   0xF001 0xBE86      B.W      ??RoadBrd_ParseString_378
   2496                                      } // EndElse (Status == HAL_OK) RoadBrd_Baro_ReadPressure
   2497                                    } // Endif (Status == HAL_OK) RoadBrd_Humidity_ReadHumidity
   2498                                    else
   2499                                    {
   2500                                      if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_372: (+1)
   \   00002202   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002204   0x2D00             CMP      R5,#+0
   \   00002206   0xD00A             BEQ.N    ??RoadBrd_ParseString_380
   2501                                      {
   2502                                        // Yes...Build and Send BLE Response NOW.
   2503                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_TC_HWERR_HUMIDITY</STATUS>");
   \   00002208   0xF8DF 0x1DFC      LDR.W    R1,??RoadBrd_ParseString_377+0xC
   \   0000220C   0xA80B             ADD      R0,SP,#+44
   \   0000220E   0x.... 0x....      BL       strcpy
   2504                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002212   0xA80B             ADD      R0,SP,#+44
   \   00002214   0x.... 0x....      BL       strlen
   \   00002218   0xA90B             ADD      R1,SP,#+44
   \   0000221A   0x.... 0x....      BL       BGM111_Transmit
   2505                                      }
   2506                                      
   2507                                      sprintf( (char *)tempBffr2, "Humidity TASKING ERROR!" );
   \                     ??RoadBrd_ParseString_380: (+1)
   \   0000221E   0xF8DF 0x1DEC      LDR.W    R1,??RoadBrd_ParseString_377+0x10
   \   00002222   0xA80B             ADD      R0,SP,#+44
   \   00002224   0x.... 0x....      BL       sprintf
   \   00002228   0xF001 0xBE71      B.W      ??RoadBrd_ParseString_378
   \                     ??RoadBrd_ParseString_225:
   \   0000222C   0x........         DC32     ?_76
   \   00002230   0x........         DC32     ?_77
   2508                                    } // EndElse (Status == HAL_OK) RoadBrd_Humidity_ReadHumidity
   2509                                  } // Endif (Status == HAL_OK) RoadBrd_ReadTemp
   2510                                  else
   2511                                  {
   2512                                    if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_371: (+1)
   \   00002234   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002236   0x2D00             CMP      R5,#+0
   \   00002238   0xD00A             BEQ.N    ??RoadBrd_ParseString_381
   2513                                    {
   2514                                      // Yes...Build and Send BLE Response NOW.
   2515                                      strcpy( (char *)tempBffr2, "<STATUS>CMD_TC_HWERR_TEMPERATURE</STATUS>");
   \   0000223A   0xF8DF 0x1DD4      LDR.W    R1,??RoadBrd_ParseString_377+0x14
   \   0000223E   0xA80B             ADD      R0,SP,#+44
   \   00002240   0x.... 0x....      BL       strcpy
   2516                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002244   0xA80B             ADD      R0,SP,#+44
   \   00002246   0x.... 0x....      BL       strlen
   \   0000224A   0xA90B             ADD      R1,SP,#+44
   \   0000224C   0x.... 0x....      BL       BGM111_Transmit
   2517                                    }
   2518                                    
   2519                                    sprintf( (char *)tempBffr2, "AMBIENT TEMPERATURE TASKING ERROR!" );
   \                     ??RoadBrd_ParseString_381: (+1)
   \   00002250   0xF8DF 0x1DC0      LDR.W    R1,??RoadBrd_ParseString_377+0x18
   \   00002254   0xA80B             ADD      R0,SP,#+44
   \   00002256   0x.... 0x....      BL       sprintf
   \   0000225A   0xF001 0xBE58      B.W      ??RoadBrd_ParseString_378
   \   0000225E   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_228:
   \   00002260   0x........         DC32     ?_78
   2520                                  } // EndElse (Status == HAL_OK) RoadBrd_ReadTemp
   2521                                } // Endif (Status == HAL_OK) RoadBrd_CoolEye_ReadValues
   2522                                else
   2523                                {
   2524                                  if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_370: (+1)
   \   00002264   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002266   0x2D00             CMP      R5,#+0
   \   00002268   0xD00A             BEQ.N    ??RoadBrd_ParseString_382
   2525                                  {
   2526                                    // Yes...Build and Send BLE Response NOW.
   2527                                    strcpy( (char *)tempBffr2, "<STATUS>CMD_TC_HWERR_IRTEMP</STATUS>");
   \   0000226A   0xF8DF 0x1E40      LDR.W    R1,??RoadBrd_ParseString_383
   \   0000226E   0xA80B             ADD      R0,SP,#+44
   \   00002270   0x.... 0x....      BL       strcpy
   2528                                    BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002274   0xA80B             ADD      R0,SP,#+44
   \   00002276   0x.... 0x....      BL       strlen
   \   0000227A   0xA90B             ADD      R1,SP,#+44
   \   0000227C   0x.... 0x....      BL       BGM111_Transmit
   2529                                  }
   2530                                  
   2531                                  sprintf( (char *)tempBffr2, "GRID EYE/COOL EYE TASKING ERROR!" );
   \                     ??RoadBrd_ParseString_382: (+1)
   \   00002280   0xF8DF 0x1E2C      LDR.W    R1,??RoadBrd_ParseString_383+0x4
   \   00002284   0xA80B             ADD      R0,SP,#+44
   \   00002286   0x.... 0x....      BL       sprintf
   \   0000228A   0xF001 0xBE40      B.W      ??RoadBrd_ParseString_378
   \   0000228E   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_230:
   \   00002290   0x........         DC32     ?_79
   \   00002294   0x........         DC32     ?_80
   2532                                } // EndElse (Status == HAL_OK) RoadBrd_CoolEye_ReadValues
   2533                              }
   2534                              else
   2535                              {
   2536                                switch( tempBffr[2] )
   \                     ??RoadBrd_ParseString_366: (+1)
   \   00002298   0x78A0             LDRB     R0,[R4, #+2]
   \   0000229A   0x2849             CMP      R0,#+73
   \   0000229C   0xF001 0x860A      BEQ.W    ??RoadBrd_ParseString_384
   \   000022A0   0x2852             CMP      R0,#+82
   \   000022A2   0xF000 0x85E7      BEQ.W    ??RoadBrd_ParseString_385
   \   000022A6   0x2853             CMP      R0,#+83
   \   000022A8   0xD004             BEQ.N    ??RoadBrd_ParseString_386
   \   000022AA   0x2854             CMP      R0,#+84
   \   000022AC   0xF001 0x859D      BEQ.W    ??RoadBrd_ParseString_387
   \   000022B0   0xF001 0xBE2D      B.W      ??RoadBrd_ParseString_378
   2537                                {
   2538                                  //------------------ TCS Command: Calibration Set Command
   2539                                case 'S':
   2540                                  // Step 1. Validate format.
   2541                                  if(tempBffr[3]!=':')
   \                     ??RoadBrd_ParseString_386: (+1)
   \   000022B4   0x78E0             LDRB     R0,[R4, #+3]
   \   000022B6   0x283A             CMP      R0,#+58
   \   000022B8   0xD01A             BEQ.N    ??RoadBrd_ParseString_388
   2542                                  {
   2543                                    // Is this a BLE Operation?
   2544                                    if ( BLE_Flag )
   \   000022BA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000022BC   0x2D00             CMP      R5,#+0
   \   000022BE   0xD00A             BEQ.N    ??RoadBrd_ParseString_389
   2545                                    {
   2546                                      // Yes...Build and Send BLE Response NOW.
   2547                                      strcpy( (char *)tempBffr2, "<STATUS>CMD_TCS_SYNTAX</STATUS>");
   \   000022C0   0xF8DF 0x1DF0      LDR.W    R1,??RoadBrd_ParseString_383+0x8
   \   000022C4   0xA80B             ADD      R0,SP,#+44
   \   000022C6   0x.... 0x....      BL       strcpy
   2548                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000022CA   0xA80B             ADD      R0,SP,#+44
   \   000022CC   0x.... 0x....      BL       strlen
   \   000022D0   0xA90B             ADD      R1,SP,#+44
   \   000022D2   0x.... 0x....      BL       BGM111_Transmit
   2549                                    }
   2550                                    
   2551                                    strcpy( (char *)tempBffr2, "TCS SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_389: (+1)
   \   000022D6   0xF8DF 0x1DE0      LDR.W    R1,??RoadBrd_ParseString_383+0xC
   \   000022DA   0xA80B             ADD      R0,SP,#+44
   \   000022DC   0x.... 0x....      BL       strcpy
   \   000022E0   0xF000 0xBDC6      B.W      ??RoadBrd_ParseString_390
   \                     ??RoadBrd_ParseString_234:
   \   000022E4   0x........         DC32     ?_81
   \   000022E8   0x........         DC32     ?_82
   \   000022EC   0x........         DC32     ?_83
   2552                                  } // Endif (tempBffr[3]!=':')
   2553                                  else
   2554                                  {
   2555                                    // 2. Verify if remaining string is digits
   2556                                    if (Size <= 4)
   \                     ??RoadBrd_ParseString_388: (+1)
   \   000022F0   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   000022F4   0x2805             CMP      R0,#+5
   \   000022F6   0xDA19             BGE.N    ??RoadBrd_ParseString_391
   2557                                    {
   2558                                      // Is this a BLE Operation?
   2559                                      if ( BLE_Flag )
   \   000022F8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000022FA   0x2D00             CMP      R5,#+0
   \   000022FC   0xD00A             BEQ.N    ??RoadBrd_ParseString_392
   2560                                      {
   2561                                        // Yes...Build and Send BLE Response NOW.
   2562                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_TCS_BADPARAM</STATUS>");
   \   000022FE   0xF8DF 0x1E50      LDR.W    R1,??RoadBrd_ParseString_393
   \   00002302   0xA80B             ADD      R0,SP,#+44
   \   00002304   0x.... 0x....      BL       strcpy
   2563                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002308   0xA80B             ADD      R0,SP,#+44
   \   0000230A   0x.... 0x....      BL       strlen
   \   0000230E   0xA90B             ADD      R1,SP,#+44
   \   00002310   0x.... 0x....      BL       BGM111_Transmit
   2564                                      }
   2565                                      strcpy( (char *)tempBffr2, "TCS SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_392: (+1)
   \   00002314   0xF8DF 0x1E3C      LDR.W    R1,??RoadBrd_ParseString_393+0x4
   \   00002318   0xA80B             ADD      R0,SP,#+44
   \   0000231A   0x.... 0x....      BL       strcpy
   \   0000231E   0xF000 0xBDA7      B.W      ??RoadBrd_ParseString_390
   \   00002322   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_235:
   \   00002324   0x........         DC32     ?_84
   \   00002328   0x........         DC32     ?_85
   2566                                    } // EndIf (Size > 4)
   2567                                    else
   2568                                    {
   2569                                      // 3. Grab remaining string and convert to integer.
   2570                                      tempPstr = &tempBffr[4];
   \                     ??RoadBrd_ParseString_391: (+1)
   \   0000232C   0x1D20             ADDS     R0,R4,#+4
   \   0000232E   0x9030             STR      R0,[SP, #+192]
   2571                                      strcpy(tempstr, tempPstr);
   \   00002330   0x9930             LDR      R1,[SP, #+192]
   \   00002332   0xA852             ADD      R0,SP,#+328
   \   00002334   0x.... 0x....      BL       strcpy
   2572                                      // Time to parse and test remaining string
   2573                                      Scale = 0.0;
   \   00002338   0x2000             MOVS     R0,#+0
   \   0000233A   0x902A             STR      R0,[SP, #+168]
   2574                                      Offset = 0.0;
   \   0000233C   0x2000             MOVS     R0,#+0
   \   0000233E   0x9029             STR      R0,[SP, #+164]
   2575                                      if (sscanf (tempstr, "%s %f %f", uuid, &Scale, &Offset) == 3)
   \   00002340   0xA829             ADD      R0,SP,#+164
   \   00002342   0x9000             STR      R0,[SP, #+0]
   \   00002344   0xAB2A             ADD      R3,SP,#+168
   \   00002346   0xAA36             ADD      R2,SP,#+216
   \   00002348   0xF8DF 0x1E0C      LDR.W    R1,??RoadBrd_ParseString_393+0x8
   \   0000234C   0xA852             ADD      R0,SP,#+328
   \   0000234E   0x.... 0x....      BL       sscanf
   \   00002352   0x2803             CMP      R0,#+3
   \   00002354   0xF040 0x857A      BNE.W    ??RoadBrd_ParseString_394
   2576                                      {
   2577                                        sprintf( (char *)tempBffr2, "Parms: %s, %f, %f.\r\n", uuid, Scale, Offset );
   \   00002358   0x9829             LDR      R0,[SP, #+164]
   \   0000235A   0x.... 0x....      BL       __aeabi_f2d
   \   0000235E   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00002362   0x982A             LDR      R0,[SP, #+168]
   \   00002364   0x.... 0x....      BL       __aeabi_f2d
   \   00002368   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000236C   0xAA36             ADD      R2,SP,#+216
   \   0000236E   0xF8DF 0x1DEC      LDR.W    R1,??RoadBrd_ParseString_393+0xC
   \   00002372   0xA80B             ADD      R0,SP,#+44
   \   00002374   0x.... 0x....      BL       sprintf
   2578                                        // OK, We have 3 good parameters... NOW Need to determine if UUID is good.
   2579                                        if (strncmp((char *)uuid,"0002",4) == 0) // Shnt_Vltg
   \   00002378   0x2204             MOVS     R2,#+4
   \   0000237A   0xF8DF 0x1DE4      LDR.W    R1,??RoadBrd_ParseString_393+0x10
   \   0000237E   0xA836             ADD      R0,SP,#+216
   \   00002380   0x.... 0x....      BL       strncmp
   \   00002384   0x2800             CMP      R0,#+0
   \   00002386   0xD13A             BNE.N    ??RoadBrd_ParseString_395
   2580                                        {
   2581                                          Status = RoadBrd_CAL_Set_CalItem( CAL_SHNT_VLTG, Offset, Scale);
   \   00002388   0x9A2A             LDR      R2,[SP, #+168]
   \   0000238A   0x9929             LDR      R1,[SP, #+164]
   \   0000238C   0x2000             MOVS     R0,#+0
   \   0000238E   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002392   0x0006             MOVS     R6,R0
   2582                                          if (Status == HAL_OK)
   \   00002394   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002396   0x2E00             CMP      R6,#+0
   \   00002398   0xD11C             BNE.N    ??RoadBrd_ParseString_396
   2583                                          {
   2584                                            // Is this a BLE Operation?
   2585                                            if ( BLE_Flag )
   \   0000239A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000239C   0x2D00             CMP      R5,#+0
   \   0000239E   0xD00A             BEQ.N    ??RoadBrd_ParseString_397
   2586                                            {
   2587                                              // Yes...Build and Send BLE Response NOW.
   2588                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_SHNT_VLTG</STATUS>");
   \   000023A0   0xF8DF 0x1E54      LDR.W    R1,??RoadBrd_ParseString_398
   \   000023A4   0xA80B             ADD      R0,SP,#+44
   \   000023A6   0x.... 0x....      BL       strcpy
   2589                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000023AA   0xA80B             ADD      R0,SP,#+44
   \   000023AC   0x.... 0x....      BL       strlen
   \   000023B0   0xA90B             ADD      R1,SP,#+44
   \   000023B2   0x.... 0x....      BL       BGM111_Transmit
   2590                                            }
   2591                                            sprintf( (char *)tempBffr2, "Shnt_Vltg Set COMPLETE.\r\n" );
   \                     ??RoadBrd_ParseString_397: (+1)
   \   000023B6   0xF8DF 0x1E44      LDR.W    R1,??RoadBrd_ParseString_398+0x4
   \   000023BA   0xA80B             ADD      R0,SP,#+44
   \   000023BC   0x.... 0x....      BL       sprintf
   \   000023C0   0xF000 0xBD41      B.W      ??RoadBrd_ParseString_399
   \                     ??RoadBrd_ParseString_248:
   \   000023C4   0x........         DC32     ?_86
   \   000023C8   0x25 0x78          DC8      "%x."
   \              0x2E 0x00    
   \   000023CC   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
   \   000023D0   0x........         DC32     ?_87
   2592                                          }
   2593                                          else
   2594                                          {
   2595                                            // Is this a BLE Operation?
   2596                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_396: (+1)
   \   000023D4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000023D6   0x2D00             CMP      R5,#+0
   \   000023D8   0xD00A             BEQ.N    ??RoadBrd_ParseString_400
   2597                                            {
   2598                                              // Yes...Build and Send BLE Response NOW.
   2599                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_SHNT_VLTG_ERR</STATUS>");
   \   000023DA   0xF8DF 0x1E24      LDR.W    R1,??RoadBrd_ParseString_398+0x8
   \   000023DE   0xA80B             ADD      R0,SP,#+44
   \   000023E0   0x.... 0x....      BL       strcpy
   2600                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000023E4   0xA80B             ADD      R0,SP,#+44
   \   000023E6   0x.... 0x....      BL       strlen
   \   000023EA   0xA90B             ADD      R1,SP,#+44
   \   000023EC   0x.... 0x....      BL       BGM111_Transmit
   2601                                            }
   2602                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_400: (+1)
   \   000023F0   0xF8DF 0x1E10      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   000023F4   0xA80B             ADD      R0,SP,#+44
   \   000023F6   0x.... 0x....      BL       sprintf
   \   000023FA   0xF000 0xBD24      B.W      ??RoadBrd_ParseString_399
   2603                                          }
   2604                                        }
   2605                                        else if (strncmp((char *)uuid,"0004",4) == 0) // Current
   \                     ??RoadBrd_ParseString_395: (+1)
   \   000023FE   0x2204             MOVS     R2,#+4
   \   00002400   0xF8DF 0x1E04      LDR.W    R1,??RoadBrd_ParseString_398+0x10
   \   00002404   0xA836             ADD      R0,SP,#+216
   \   00002406   0x.... 0x....      BL       strncmp
   \   0000240A   0x2800             CMP      R0,#+0
   \   0000240C   0xD137             BNE.N    ??RoadBrd_ParseString_401
   2606                                        {
   2607                                          Status = RoadBrd_CAL_Set_CalItem( CAL_CURRENT, Offset, Scale);
   \   0000240E   0x9A2A             LDR      R2,[SP, #+168]
   \   00002410   0x9929             LDR      R1,[SP, #+164]
   \   00002412   0x2001             MOVS     R0,#+1
   \   00002414   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002418   0x0006             MOVS     R6,R0
   2608                                          if (Status == HAL_OK)
   \   0000241A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000241C   0x2E00             CMP      R6,#+0
   \   0000241E   0xD119             BNE.N    ??RoadBrd_ParseString_402
   2609                                          {
   2610                                            // Is this a BLE Operation?
   2611                                            if ( BLE_Flag )
   \   00002420   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002422   0x2D00             CMP      R5,#+0
   \   00002424   0xD00A             BEQ.N    ??RoadBrd_ParseString_403
   2612                                            {
   2613                                              // Yes...Build and Send BLE Response NOW.
   2614                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_CURRENT</STATUS>");
   \   00002426   0xF8DF 0x1DE4      LDR.W    R1,??RoadBrd_ParseString_398+0x14
   \   0000242A   0xA80B             ADD      R0,SP,#+44
   \   0000242C   0x.... 0x....      BL       strcpy
   2615                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002430   0xA80B             ADD      R0,SP,#+44
   \   00002432   0x.... 0x....      BL       strlen
   \   00002436   0xA90B             ADD      R1,SP,#+44
   \   00002438   0x.... 0x....      BL       BGM111_Transmit
   2616                                            }
   2617                                            sprintf( (char *)tempBffr2, "Current Set COMPLETE." );
   \                     ??RoadBrd_ParseString_403: (+1)
   \   0000243C   0xF8DF 0x1E64      LDR.W    R1,??RoadBrd_ParseString_404
   \   00002440   0xA80B             ADD      R0,SP,#+44
   \   00002442   0x.... 0x....      BL       sprintf
   \   00002446   0xF000 0xBCFE      B.W      ??RoadBrd_ParseString_399
   \   0000244A   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_254:
   \   0000244C   0x........         DC32     ?_88
   \   00002450   0x........         DC32     ?_89
   2618                                          }
   2619                                          else
   2620                                          {
   2621                                            // Is this a BLE Operation?
   2622                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_402: (+1)
   \   00002454   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002456   0x2D00             CMP      R5,#+0
   \   00002458   0xD00A             BEQ.N    ??RoadBrd_ParseString_405
   2623                                            {
   2624                                              // Yes...Build and Send BLE Response NOW.
   2625                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_CURRENT_ERR</STATUS>");
   \   0000245A   0xF8DF 0x1E4C      LDR.W    R1,??RoadBrd_ParseString_404+0x4
   \   0000245E   0xA80B             ADD      R0,SP,#+44
   \   00002460   0x.... 0x....      BL       strcpy
   2626                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002464   0xA80B             ADD      R0,SP,#+44
   \   00002466   0x.... 0x....      BL       strlen
   \   0000246A   0xA90B             ADD      R1,SP,#+44
   \   0000246C   0x.... 0x....      BL       BGM111_Transmit
   2627                                            }
   2628                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_405: (+1)
   \   00002470   0xF8DF 0x1D90      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   00002474   0xA80B             ADD      R0,SP,#+44
   \   00002476   0x.... 0x....      BL       sprintf
   \   0000247A   0xF000 0xBCE4      B.W      ??RoadBrd_ParseString_399
   2629                                          }
   2630                                        }
   2631                                        else if (strncmp((char *)uuid,"0006",4) == 0) // Power
   \                     ??RoadBrd_ParseString_401: (+1)
   \   0000247E   0x2204             MOVS     R2,#+4
   \   00002480   0xF8DF 0x1E28      LDR.W    R1,??RoadBrd_ParseString_404+0x8
   \   00002484   0xA836             ADD      R0,SP,#+216
   \   00002486   0x.... 0x....      BL       strncmp
   \   0000248A   0x2800             CMP      R0,#+0
   \   0000248C   0xD139             BNE.N    ??RoadBrd_ParseString_406
   2632                                        {
   2633                                          Status = RoadBrd_CAL_Set_CalItem( CAL_POWER, Offset, Scale);
   \   0000248E   0x9A2A             LDR      R2,[SP, #+168]
   \   00002490   0x9929             LDR      R1,[SP, #+164]
   \   00002492   0x2002             MOVS     R0,#+2
   \   00002494   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002498   0x0006             MOVS     R6,R0
   2634                                          if (Status == HAL_OK)
   \   0000249A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000249C   0x2E00             CMP      R6,#+0
   \   0000249E   0xD11B             BNE.N    ??RoadBrd_ParseString_407
   2635                                          {
   2636                                            // Is this a BLE Operation?
   2637                                            if ( BLE_Flag )
   \   000024A0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000024A2   0x2D00             CMP      R5,#+0
   \   000024A4   0xD00A             BEQ.N    ??RoadBrd_ParseString_408
   2638                                            {
   2639                                              // Yes...Build and Send BLE Response NOW.
   2640                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_POWER</STATUS>");
   \   000024A6   0xF8DF 0x1E08      LDR.W    R1,??RoadBrd_ParseString_404+0xC
   \   000024AA   0xA80B             ADD      R0,SP,#+44
   \   000024AC   0x.... 0x....      BL       strcpy
   2641                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000024B0   0xA80B             ADD      R0,SP,#+44
   \   000024B2   0x.... 0x....      BL       strlen
   \   000024B6   0xA90B             ADD      R1,SP,#+44
   \   000024B8   0x.... 0x....      BL       BGM111_Transmit
   2642                                            }
   2643                                            sprintf( (char *)tempBffr2, "Power Set COMPLETE." );
   \                     ??RoadBrd_ParseString_408: (+1)
   \   000024BC   0xF8DF 0x1DF4      LDR.W    R1,??RoadBrd_ParseString_404+0x10
   \   000024C0   0xA80B             ADD      R0,SP,#+44
   \   000024C2   0x.... 0x....      BL       sprintf
   \   000024C6   0xF000 0xBCBE      B.W      ??RoadBrd_ParseString_399
   \   000024CA   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_257:
   \   000024CC   0x........         DC32     ?_90
   \   000024D0   0x........         DC32     ?_91
   \   000024D4   0x........         DC32     ?_92
   2644                                          }
   2645                                          else
   2646                                          {
   2647                                            // Is this a BLE Operation?
   2648                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_407: (+1)
   \   000024D8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000024DA   0x2D00             CMP      R5,#+0
   \   000024DC   0xD00A             BEQ.N    ??RoadBrd_ParseString_409
   2649                                            {
   2650                                              // Yes...Build and Send BLE Response NOW.
   2651                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_POWER_ERR</STATUS>");
   \   000024DE   0xF8DF 0x1E6C      LDR.W    R1,??RoadBrd_ParseString_410
   \   000024E2   0xA80B             ADD      R0,SP,#+44
   \   000024E4   0x.... 0x....      BL       strcpy
   2652                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000024E8   0xA80B             ADD      R0,SP,#+44
   \   000024EA   0x.... 0x....      BL       strlen
   \   000024EE   0xA90B             ADD      R1,SP,#+44
   \   000024F0   0x.... 0x....      BL       BGM111_Transmit
   2653                                            }
   2654                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_409: (+1)
   \   000024F4   0xF8DF 0x1D0C      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   000024F8   0xA80B             ADD      R0,SP,#+44
   \   000024FA   0x.... 0x....      BL       sprintf
   \   000024FE   0xF000 0xBCA2      B.W      ??RoadBrd_ParseString_399
   2655                                          }
   2656                                        }
   2657                                        else if (strncmp((char *)uuid,"0008",4) == 0) // Voltage
   \                     ??RoadBrd_ParseString_406: (+1)
   \   00002502   0x2204             MOVS     R2,#+4
   \   00002504   0xF8DF 0x1E48      LDR.W    R1,??RoadBrd_ParseString_410+0x4
   \   00002508   0xA836             ADD      R0,SP,#+216
   \   0000250A   0x.... 0x....      BL       strncmp
   \   0000250E   0x2800             CMP      R0,#+0
   \   00002510   0xD139             BNE.N    ??RoadBrd_ParseString_411
   2658                                        {
   2659                                          Status = RoadBrd_CAL_Set_CalItem( CAL_VOLTAGE, Offset, Scale);
   \   00002512   0x9A2A             LDR      R2,[SP, #+168]
   \   00002514   0x9929             LDR      R1,[SP, #+164]
   \   00002516   0x2003             MOVS     R0,#+3
   \   00002518   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   0000251C   0x0006             MOVS     R6,R0
   2660                                          if (Status == HAL_OK)
   \   0000251E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002520   0x2E00             CMP      R6,#+0
   \   00002522   0xD11B             BNE.N    ??RoadBrd_ParseString_412
   2661                                          {
   2662                                            // Is this a BLE Operation?
   2663                                            if ( BLE_Flag )
   \   00002524   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002526   0x2D00             CMP      R5,#+0
   \   00002528   0xD00A             BEQ.N    ??RoadBrd_ParseString_413
   2664                                            {
   2665                                              // Yes...Build and Send BLE Response NOW.
   2666                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_VOLTAGE</STATUS>");
   \   0000252A   0xF8DF 0x1E28      LDR.W    R1,??RoadBrd_ParseString_410+0x8
   \   0000252E   0xA80B             ADD      R0,SP,#+44
   \   00002530   0x.... 0x....      BL       strcpy
   2667                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002534   0xA80B             ADD      R0,SP,#+44
   \   00002536   0x.... 0x....      BL       strlen
   \   0000253A   0xA90B             ADD      R1,SP,#+44
   \   0000253C   0x.... 0x....      BL       BGM111_Transmit
   2668                                            }
   2669                                            sprintf( (char *)tempBffr2, "Voltage Set COMPLETE." );
   \                     ??RoadBrd_ParseString_413: (+1)
   \   00002540   0xF8DF 0x1E14      LDR.W    R1,??RoadBrd_ParseString_410+0xC
   \   00002544   0xA80B             ADD      R0,SP,#+44
   \   00002546   0x.... 0x....      BL       sprintf
   \   0000254A   0xF000 0xBC7C      B.W      ??RoadBrd_ParseString_399
   \   0000254E   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_261:
   \   00002550   0x........         DC32     ?_93
   \   00002554   0x........         DC32     ?_94
   \   00002558   0x........         DC32     ?_95
   2670                                          }
   2671                                          else
   2672                                          {
   2673                                            // Is this a BLE Operation?
   2674                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_412: (+1)
   \   0000255C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000255E   0x2D00             CMP      R5,#+0
   \   00002560   0xD00A             BEQ.N    ??RoadBrd_ParseString_414
   2675                                            {
   2676                                              // Yes...Build and Send BLE Response NOW.
   2677                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_VOLTAGE_ERR</STATUS>");
   \   00002562   0xF8DF 0x1DF8      LDR.W    R1,??RoadBrd_ParseString_410+0x10
   \   00002566   0xA80B             ADD      R0,SP,#+44
   \   00002568   0x.... 0x....      BL       strcpy
   2678                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000256C   0xA80B             ADD      R0,SP,#+44
   \   0000256E   0x.... 0x....      BL       strlen
   \   00002572   0xA90B             ADD      R1,SP,#+44
   \   00002574   0x.... 0x....      BL       BGM111_Transmit
   2679                                            }
   2680                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_414: (+1)
   \   00002578   0xF8DF 0x1C88      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   0000257C   0xA80B             ADD      R0,SP,#+44
   \   0000257E   0x.... 0x....      BL       sprintf
   \   00002582   0xF000 0xBC60      B.W      ??RoadBrd_ParseString_399
   2681                                          }
   2682                                        }
   2683                                        else if (strncmp((char *)uuid,"000A",4) == 0) // TempC
   \                     ??RoadBrd_ParseString_411: (+1)
   \   00002586   0x2204             MOVS     R2,#+4
   \   00002588   0xF8DF 0x1E68      LDR.W    R1,??RoadBrd_ParseString_415
   \   0000258C   0xA836             ADD      R0,SP,#+216
   \   0000258E   0x.... 0x....      BL       strncmp
   \   00002592   0x2800             CMP      R0,#+0
   \   00002594   0xD139             BNE.N    ??RoadBrd_ParseString_416
   2684                                        {
   2685                                          Status = RoadBrd_CAL_Set_CalItem( CAL_TEMPC, Offset, Scale);
   \   00002596   0x9A2A             LDR      R2,[SP, #+168]
   \   00002598   0x9929             LDR      R1,[SP, #+164]
   \   0000259A   0x2004             MOVS     R0,#+4
   \   0000259C   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   000025A0   0x0006             MOVS     R6,R0
   2686                                          if (Status == HAL_OK)
   \   000025A2   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000025A4   0x2E00             CMP      R6,#+0
   \   000025A6   0xD11B             BNE.N    ??RoadBrd_ParseString_417
   2687                                          {
   2688                                            // Is this a BLE Operation?
   2689                                            if ( BLE_Flag )
   \   000025A8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000025AA   0x2D00             CMP      R5,#+0
   \   000025AC   0xD00A             BEQ.N    ??RoadBrd_ParseString_418
   2690                                            {
   2691                                              // Yes...Build and Send BLE Response NOW.
   2692                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_TEMPC</STATUS>");
   \   000025AE   0xF8DF 0x1E48      LDR.W    R1,??RoadBrd_ParseString_415+0x4
   \   000025B2   0xA80B             ADD      R0,SP,#+44
   \   000025B4   0x.... 0x....      BL       strcpy
   2693                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000025B8   0xA80B             ADD      R0,SP,#+44
   \   000025BA   0x.... 0x....      BL       strlen
   \   000025BE   0xA90B             ADD      R1,SP,#+44
   \   000025C0   0x.... 0x....      BL       BGM111_Transmit
   2694                                            }
   2695                                            sprintf( (char *)tempBffr2, "TempC Set COMPLETE." );
   \                     ??RoadBrd_ParseString_418: (+1)
   \   000025C4   0xF8DF 0x1E34      LDR.W    R1,??RoadBrd_ParseString_415+0x8
   \   000025C8   0xA80B             ADD      R0,SP,#+44
   \   000025CA   0x.... 0x....      BL       sprintf
   \   000025CE   0xF000 0xBC3A      B.W      ??RoadBrd_ParseString_399
   \   000025D2   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_265:
   \   000025D4   0x........         DC32     ?_96
   \   000025D8   0x........         DC32     ?_97
   \   000025DC   0x........         DC32     ?_98
   2696                                          }
   2697                                          else
   2698                                          {
   2699                                            // Is this a BLE Operation?
   2700                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_417: (+1)
   \   000025E0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000025E2   0x2D00             CMP      R5,#+0
   \   000025E4   0xD00A             BEQ.N    ??RoadBrd_ParseString_419
   2701                                            {
   2702                                              // Yes...Build and Send BLE Response NOW.
   2703                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_TEMPC_ERR</STATUS>");
   \   000025E6   0xF8DF 0x1E18      LDR.W    R1,??RoadBrd_ParseString_415+0xC
   \   000025EA   0xA80B             ADD      R0,SP,#+44
   \   000025EC   0x.... 0x....      BL       strcpy
   2704                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000025F0   0xA80B             ADD      R0,SP,#+44
   \   000025F2   0x.... 0x....      BL       strlen
   \   000025F6   0xA90B             ADD      R1,SP,#+44
   \   000025F8   0x.... 0x....      BL       BGM111_Transmit
   2705                                            }
   2706                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_419: (+1)
   \   000025FC   0xF8DF 0x1C04      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   00002600   0xA80B             ADD      R0,SP,#+44
   \   00002602   0x.... 0x....      BL       sprintf
   \   00002606   0xF000 0xBC1E      B.W      ??RoadBrd_ParseString_399
   2707                                          }
   2708                                        }
   2709                                        else if (strncmp((char *)uuid,"000B",4) == 0) // TempF
   \                     ??RoadBrd_ParseString_416: (+1)
   \   0000260A   0x2204             MOVS     R2,#+4
   \   0000260C   0xF8DF 0x1DF4      LDR.W    R1,??RoadBrd_ParseString_415+0x10
   \   00002610   0xA836             ADD      R0,SP,#+216
   \   00002612   0x.... 0x....      BL       strncmp
   \   00002616   0x2800             CMP      R0,#+0
   \   00002618   0xD131             BNE.N    ??RoadBrd_ParseString_420
   2710                                        {
   2711                                          Status = RoadBrd_CAL_Set_CalItem( CAL_TEMPF, Offset, Scale);
   \   0000261A   0x9A2A             LDR      R2,[SP, #+168]
   \   0000261C   0x9929             LDR      R1,[SP, #+164]
   \   0000261E   0x2005             MOVS     R0,#+5
   \   00002620   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002624   0x0006             MOVS     R6,R0
   2712                                          if (Status == HAL_OK)
   \   00002626   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002628   0x2E00             CMP      R6,#+0
   \   0000262A   0xD114             BNE.N    ??RoadBrd_ParseString_421
   2713                                          {
   2714                                            // Is this a BLE Operation?
   2715                                            if ( BLE_Flag )
   \   0000262C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000262E   0x2D00             CMP      R5,#+0
   \   00002630   0xD00A             BEQ.N    ??RoadBrd_ParseString_422
   2716                                            {
   2717                                              // Yes...Build and Send BLE Response NOW.
   2718                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_TEMPF</STATUS>");
   \   00002632   0xF8DF 0x1E68      LDR.W    R1,??RoadBrd_ParseString_423
   \   00002636   0xA80B             ADD      R0,SP,#+44
   \   00002638   0x.... 0x....      BL       strcpy
   2719                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000263C   0xA80B             ADD      R0,SP,#+44
   \   0000263E   0x.... 0x....      BL       strlen
   \   00002642   0xA90B             ADD      R1,SP,#+44
   \   00002644   0x.... 0x....      BL       BGM111_Transmit
   2720                                            }
   2721                                            sprintf( (char *)tempBffr2, "TempF Set COMPLETE." );
   \                     ??RoadBrd_ParseString_422: (+1)
   \   00002648   0xF8DF 0x1E54      LDR.W    R1,??RoadBrd_ParseString_423+0x4
   \   0000264C   0xA80B             ADD      R0,SP,#+44
   \   0000264E   0x.... 0x....      BL       sprintf
   \   00002652   0xF000 0xBBF8      B.W      ??RoadBrd_ParseString_399
   2722                                          }
   2723                                          else
   2724                                          {
   2725                                            // Is this a BLE Operation?
   2726                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_421: (+1)
   \   00002656   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002658   0x2D00             CMP      R5,#+0
   \   0000265A   0xD00A             BEQ.N    ??RoadBrd_ParseString_424
   2727                                            {
   2728                                              // Yes...Build and Send BLE Response NOW.
   2729                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_TEMPF_ERR</STATUS>");
   \   0000265C   0xF8DF 0x1E44      LDR.W    R1,??RoadBrd_ParseString_423+0x8
   \   00002660   0xA80B             ADD      R0,SP,#+44
   \   00002662   0x.... 0x....      BL       strcpy
   2730                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002666   0xA80B             ADD      R0,SP,#+44
   \   00002668   0x.... 0x....      BL       strlen
   \   0000266C   0xA90B             ADD      R1,SP,#+44
   \   0000266E   0x.... 0x....      BL       BGM111_Transmit
   2731                                            }
   2732                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_424: (+1)
   \   00002672   0xF8DF 0x1B90      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   00002676   0xA80B             ADD      R0,SP,#+44
   \   00002678   0x.... 0x....      BL       sprintf
   \   0000267C   0xE3E3             B.N      ??RoadBrd_ParseString_399
   2733                                          }
   2734                                        }
   2735                                        else if (strncmp((char *)uuid,"0011",4) == 0) // Pressure
   \                     ??RoadBrd_ParseString_420: (+1)
   \   0000267E   0x2204             MOVS     R2,#+4
   \   00002680   0xF8DF 0x1E24      LDR.W    R1,??RoadBrd_ParseString_423+0xC
   \   00002684   0xA836             ADD      R0,SP,#+216
   \   00002686   0x.... 0x....      BL       strncmp
   \   0000268A   0x2800             CMP      R0,#+0
   \   0000268C   0xD130             BNE.N    ??RoadBrd_ParseString_425
   2736                                        {
   2737                                          Status = RoadBrd_CAL_Set_CalItem( CAL_PRESSURE, Offset, Scale);
   \   0000268E   0x9A2A             LDR      R2,[SP, #+168]
   \   00002690   0x9929             LDR      R1,[SP, #+164]
   \   00002692   0x2006             MOVS     R0,#+6
   \   00002694   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002698   0x0006             MOVS     R6,R0
   2738                                          if (Status == HAL_OK)
   \   0000269A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000269C   0x2E00             CMP      R6,#+0
   \   0000269E   0xD113             BNE.N    ??RoadBrd_ParseString_426
   2739                                          {
   2740                                            // Is this a BLE Operation?
   2741                                            if ( BLE_Flag )
   \   000026A0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000026A2   0x2D00             CMP      R5,#+0
   \   000026A4   0xD00A             BEQ.N    ??RoadBrd_ParseString_427
   2742                                            {
   2743                                              // Yes...Build and Send BLE Response NOW.
   2744                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_PRESSURE</STATUS>");
   \   000026A6   0xF8DF 0x1E04      LDR.W    R1,??RoadBrd_ParseString_423+0x10
   \   000026AA   0xA80B             ADD      R0,SP,#+44
   \   000026AC   0x.... 0x....      BL       strcpy
   2745                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000026B0   0xA80B             ADD      R0,SP,#+44
   \   000026B2   0x.... 0x....      BL       strlen
   \   000026B6   0xA90B             ADD      R1,SP,#+44
   \   000026B8   0x.... 0x....      BL       BGM111_Transmit
   2746                                            }
   2747                                            sprintf( (char *)tempBffr2, "Pressure Set COMPLETE." );
   \                     ??RoadBrd_ParseString_427: (+1)
   \   000026BC   0xF8DF 0x1E84      LDR.W    R1,??RoadBrd_ParseString_428
   \   000026C0   0xA80B             ADD      R0,SP,#+44
   \   000026C2   0x.... 0x....      BL       sprintf
   \   000026C6   0xE3BE             B.N      ??RoadBrd_ParseString_399
   2748                                          }
   2749                                          else
   2750                                          {
   2751                                            // Is this a BLE Operation?
   2752                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_426: (+1)
   \   000026C8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000026CA   0x2D00             CMP      R5,#+0
   \   000026CC   0xD00A             BEQ.N    ??RoadBrd_ParseString_429
   2753                                            {
   2754                                              // Yes...Build and Send BLE Response NOW.
   2755                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_PRESSURE_ERR</STATUS>");
   \   000026CE   0xF8DF 0x1E78      LDR.W    R1,??RoadBrd_ParseString_428+0x4
   \   000026D2   0xA80B             ADD      R0,SP,#+44
   \   000026D4   0x.... 0x....      BL       strcpy
   2756                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000026D8   0xA80B             ADD      R0,SP,#+44
   \   000026DA   0x.... 0x....      BL       strlen
   \   000026DE   0xA90B             ADD      R1,SP,#+44
   \   000026E0   0x.... 0x....      BL       BGM111_Transmit
   2757                                            }
   2758                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_429: (+1)
   \   000026E4   0xF8DF 0x1B1C      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   000026E8   0xA80B             ADD      R0,SP,#+44
   \   000026EA   0x.... 0x....      BL       sprintf
   \   000026EE   0xE3AA             B.N      ??RoadBrd_ParseString_399
   2759                                          }
   2760                                        }
   2761                                        else if (strncmp((char *)uuid,"0030",4) == 0) // Humidity
   \                     ??RoadBrd_ParseString_425: (+1)
   \   000026F0   0x2204             MOVS     R2,#+4
   \   000026F2   0xF8DF 0x1E58      LDR.W    R1,??RoadBrd_ParseString_428+0x8
   \   000026F6   0xA836             ADD      R0,SP,#+216
   \   000026F8   0x.... 0x....      BL       strncmp
   \   000026FC   0x2800             CMP      R0,#+0
   \   000026FE   0xD135             BNE.N    ??RoadBrd_ParseString_430
   2762                                        {
   2763                                          Status = RoadBrd_CAL_Set_CalItem( CAL_HUMIDITY, Offset, Scale);
   \   00002700   0x9A2A             LDR      R2,[SP, #+168]
   \   00002702   0x9929             LDR      R1,[SP, #+164]
   \   00002704   0x2007             MOVS     R0,#+7
   \   00002706   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   0000270A   0x0006             MOVS     R6,R0
   2764                                          if (Status == HAL_OK)
   \   0000270C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000270E   0x2E00             CMP      R6,#+0
   \   00002710   0xD118             BNE.N    ??RoadBrd_ParseString_431
   2765                                          {
   2766                                            // Is this a BLE Operation?
   2767                                            if ( BLE_Flag )
   \   00002712   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002714   0x2D00             CMP      R5,#+0
   \   00002716   0xD00A             BEQ.N    ??RoadBrd_ParseString_432
   2768                                            {
   2769                                              // Yes...Build and Send BLE Response NOW.
   2770                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_HUMIDITY</STATUS>");
   \   00002718   0xF8DF 0x1E34      LDR.W    R1,??RoadBrd_ParseString_428+0xC
   \   0000271C   0xA80B             ADD      R0,SP,#+44
   \   0000271E   0x.... 0x....      BL       strcpy
   2771                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002722   0xA80B             ADD      R0,SP,#+44
   \   00002724   0x.... 0x....      BL       strlen
   \   00002728   0xA90B             ADD      R1,SP,#+44
   \   0000272A   0x.... 0x....      BL       BGM111_Transmit
   2772                                            }
   2773                                            sprintf( (char *)tempBffr2, "Humidity Set COMPLETE." );
   \                     ??RoadBrd_ParseString_432: (+1)
   \   0000272E   0xF8DF 0x1E24      LDR.W    R1,??RoadBrd_ParseString_428+0x10
   \   00002732   0xA80B             ADD      R0,SP,#+44
   \   00002734   0x.... 0x....      BL       sprintf
   \   00002738   0xE385             B.N      ??RoadBrd_ParseString_399
   \   0000273A   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_274:
   \   0000273C   0x........         DC32     ?_99
   \   00002740   0x........         DC32     ?_100
   2774                                          }
   2775                                          else
   2776                                          {
   2777                                            // Is this a BLE Operation?
   2778                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_431: (+1)
   \   00002744   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002746   0x2D00             CMP      R5,#+0
   \   00002748   0xD00A             BEQ.N    ??RoadBrd_ParseString_433
   2779                                            {
   2780                                              // Yes...Build and Send BLE Response NOW.
   2781                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_HUMIDITY_ERR</STATUS>");
   \   0000274A   0xF8DF 0x1E9C      LDR.W    R1,??RoadBrd_ParseString_434
   \   0000274E   0xA80B             ADD      R0,SP,#+44
   \   00002750   0x.... 0x....      BL       strcpy
   2782                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002754   0xA80B             ADD      R0,SP,#+44
   \   00002756   0x.... 0x....      BL       strlen
   \   0000275A   0xA90B             ADD      R1,SP,#+44
   \   0000275C   0x.... 0x....      BL       BGM111_Transmit
   2783                                            }
   2784                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_433: (+1)
   \   00002760   0xF8DF 0x1AA0      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   00002764   0xA80B             ADD      R0,SP,#+44
   \   00002766   0x.... 0x....      BL       sprintf
   \   0000276A   0xE36C             B.N      ??RoadBrd_ParseString_399
   2785                                          }
   2786                                        }
   2787                                        else if (strncmp((char *)uuid,"0032",4) == 0) // Hum_TempC
   \                     ??RoadBrd_ParseString_430: (+1)
   \   0000276C   0x2204             MOVS     R2,#+4
   \   0000276E   0xF8DF 0x1E7C      LDR.W    R1,??RoadBrd_ParseString_434+0x4
   \   00002772   0xA836             ADD      R0,SP,#+216
   \   00002774   0x.... 0x....      BL       strncmp
   \   00002778   0x2800             CMP      R0,#+0
   \   0000277A   0xD135             BNE.N    ??RoadBrd_ParseString_435
   2788                                        {
   2789                                          Status = RoadBrd_CAL_Set_CalItem( CAL_HUM_TEMPC, Offset, Scale);
   \   0000277C   0x9A2A             LDR      R2,[SP, #+168]
   \   0000277E   0x9929             LDR      R1,[SP, #+164]
   \   00002780   0x2008             MOVS     R0,#+8
   \   00002782   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002786   0x0006             MOVS     R6,R0
   2790                                          if (Status == HAL_OK)
   \   00002788   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000278A   0x2E00             CMP      R6,#+0
   \   0000278C   0xD118             BNE.N    ??RoadBrd_ParseString_436
   2791                                          {
   2792                                            // Is this a BLE Operation?
   2793                                            if ( BLE_Flag )
   \   0000278E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002790   0x2D00             CMP      R5,#+0
   \   00002792   0xD00A             BEQ.N    ??RoadBrd_ParseString_437
   2794                                            {
   2795                                              // Yes...Build and Send BLE Response NOW.
   2796                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_HUM_TEMPC</STATUS>");
   \   00002794   0xF8DF 0x1E58      LDR.W    R1,??RoadBrd_ParseString_434+0x8
   \   00002798   0xA80B             ADD      R0,SP,#+44
   \   0000279A   0x.... 0x....      BL       strcpy
   2797                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000279E   0xA80B             ADD      R0,SP,#+44
   \   000027A0   0x.... 0x....      BL       strlen
   \   000027A4   0xA90B             ADD      R1,SP,#+44
   \   000027A6   0x.... 0x....      BL       BGM111_Transmit
   2798                                            }
   2799                                            sprintf( (char *)tempBffr2, "Hum_TempC Set COMPLETE." );
   \                     ??RoadBrd_ParseString_437: (+1)
   \   000027AA   0xF8DF 0x1E48      LDR.W    R1,??RoadBrd_ParseString_434+0xC
   \   000027AE   0xA80B             ADD      R0,SP,#+44
   \   000027B0   0x.... 0x....      BL       sprintf
   \   000027B4   0xE347             B.N      ??RoadBrd_ParseString_399
   \   000027B6   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_277:
   \   000027B8   0x........         DC32     ?_101
   \   000027BC   0x........         DC32     ?_102
   2800                                          }
   2801                                          else
   2802                                          {
   2803                                            // Is this a BLE Operation?
   2804                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_436: (+1)
   \   000027C0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000027C2   0x2D00             CMP      R5,#+0
   \   000027C4   0xD00A             BEQ.N    ??RoadBrd_ParseString_438
   2805                                            {
   2806                                              // Yes...Build and Send BLE Response NOW.
   2807                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_HUM_TEMPC_ERR</STATUS>");
   \   000027C6   0xF8DF 0x1E30      LDR.W    R1,??RoadBrd_ParseString_434+0x10
   \   000027CA   0xA80B             ADD      R0,SP,#+44
   \   000027CC   0x.... 0x....      BL       strcpy
   2808                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000027D0   0xA80B             ADD      R0,SP,#+44
   \   000027D2   0x.... 0x....      BL       strlen
   \   000027D6   0xA90B             ADD      R1,SP,#+44
   \   000027D8   0x.... 0x....      BL       BGM111_Transmit
   2809                                            }
   2810                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_438: (+1)
   \   000027DC   0xF8DF 0x1A24      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   000027E0   0xA80B             ADD      R0,SP,#+44
   \   000027E2   0x.... 0x....      BL       sprintf
   \   000027E6   0xE32E             B.N      ??RoadBrd_ParseString_399
   2811                                          }
   2812                                        }
   2813                                        else if (strncmp((char *)uuid,"0033",4) == 0) // Hum_TempF
   \                     ??RoadBrd_ParseString_435: (+1)
   \   000027E8   0x2204             MOVS     R2,#+4
   \   000027EA   0xF8DF 0x1EA0      LDR.W    R1,??RoadBrd_ParseString_439
   \   000027EE   0xA836             ADD      R0,SP,#+216
   \   000027F0   0x.... 0x....      BL       strncmp
   \   000027F4   0x2800             CMP      R0,#+0
   \   000027F6   0xD139             BNE.N    ??RoadBrd_ParseString_440
   2814                                        {
   2815                                          Status = RoadBrd_CAL_Set_CalItem( CAL_HUM_TEMPF, Offset, Scale);
   \   000027F8   0x9A2A             LDR      R2,[SP, #+168]
   \   000027FA   0x9929             LDR      R1,[SP, #+164]
   \   000027FC   0x2009             MOVS     R0,#+9
   \   000027FE   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002802   0x0006             MOVS     R6,R0
   2816                                          if (Status == HAL_OK)
   \   00002804   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002806   0x2E00             CMP      R6,#+0
   \   00002808   0xD11C             BNE.N    ??RoadBrd_ParseString_441
   2817                                          {
   2818                                            // Is this a BLE Operation?
   2819                                            if ( BLE_Flag )
   \   0000280A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000280C   0x2D00             CMP      R5,#+0
   \   0000280E   0xD00A             BEQ.N    ??RoadBrd_ParseString_442
   2820                                            {
   2821                                              // Yes...Build and Send BLE Response NOW.
   2822                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_HUM_TEMPF</STATUS>");
   \   00002810   0xF8DF 0x1E7C      LDR.W    R1,??RoadBrd_ParseString_439+0x4
   \   00002814   0xA80B             ADD      R0,SP,#+44
   \   00002816   0x.... 0x....      BL       strcpy
   2823                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000281A   0xA80B             ADD      R0,SP,#+44
   \   0000281C   0x.... 0x....      BL       strlen
   \   00002820   0xA90B             ADD      R1,SP,#+44
   \   00002822   0x.... 0x....      BL       BGM111_Transmit
   2824                                            }
   2825                                            sprintf( (char *)tempBffr2, "Hum_TempF Set COMPLETE." );
   \                     ??RoadBrd_ParseString_442: (+1)
   \   00002826   0xF8DF 0x1E6C      LDR.W    R1,??RoadBrd_ParseString_439+0x8
   \   0000282A   0xA80B             ADD      R0,SP,#+44
   \   0000282C   0x.... 0x....      BL       sprintf
   \   00002830   0xE309             B.N      ??RoadBrd_ParseString_399
   \   00002832   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_280:
   \   00002834   0x........         DC32     ?_41
   \   00002838   0x........         DC32     ?_103
   \   0000283C   0x........         DC32     ?_104
   \   00002840   0x........         DC32     ?_105
   2826                                          }
   2827                                          else
   2828                                          {
   2829                                            // Is this a BLE Operation?
   2830                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_441: (+1)
   \   00002844   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002846   0x2D00             CMP      R5,#+0
   \   00002848   0xD00A             BEQ.N    ??RoadBrd_ParseString_443
   2831                                            {
   2832                                              // Yes...Build and Send BLE Response NOW.
   2833                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_HUM_TEMPF_ERR</STATUS>");
   \   0000284A   0xF8DF 0x1E4C      LDR.W    R1,??RoadBrd_ParseString_439+0xC
   \   0000284E   0xA80B             ADD      R0,SP,#+44
   \   00002850   0x.... 0x....      BL       strcpy
   2834                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002854   0xA80B             ADD      R0,SP,#+44
   \   00002856   0x.... 0x....      BL       strlen
   \   0000285A   0xA90B             ADD      R1,SP,#+44
   \   0000285C   0x.... 0x....      BL       BGM111_Transmit
   2835                                            }
   2836                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_443: (+1)
   \   00002860   0xF8DF 0x19A0      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   00002864   0xA80B             ADD      R0,SP,#+44
   \   00002866   0x.... 0x....      BL       sprintf
   \   0000286A   0xE2EC             B.N      ??RoadBrd_ParseString_399
   2837                                          }
   2838                                        }
   2839                                        else if (strncmp((char *)uuid,"000D",4) == 0) // RGB_Red
   \                     ??RoadBrd_ParseString_440: (+1)
   \   0000286C   0x2204             MOVS     R2,#+4
   \   0000286E   0xF8DF 0x1E2C      LDR.W    R1,??RoadBrd_ParseString_439+0x10
   \   00002872   0xA836             ADD      R0,SP,#+216
   \   00002874   0x.... 0x....      BL       strncmp
   \   00002878   0x2800             CMP      R0,#+0
   \   0000287A   0xD133             BNE.N    ??RoadBrd_ParseString_444
   2840                                        {
   2841                                          Status = RoadBrd_CAL_Set_CalItem( CAL_RGB_RED, Offset, Scale);
   \   0000287C   0x9A2A             LDR      R2,[SP, #+168]
   \   0000287E   0x9929             LDR      R1,[SP, #+164]
   \   00002880   0x200A             MOVS     R0,#+10
   \   00002882   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002886   0x0006             MOVS     R6,R0
   2842                                          if (Status == HAL_OK)
   \   00002888   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000288A   0x2E00             CMP      R6,#+0
   \   0000288C   0xD116             BNE.N    ??RoadBrd_ParseString_445
   2843                                          {
   2844                                            // Is this a BLE Operation?
   2845                                            if ( BLE_Flag )
   \   0000288E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002890   0x2D00             CMP      R5,#+0
   \   00002892   0xD00A             BEQ.N    ??RoadBrd_ParseString_446
   2846                                            {
   2847                                              // Yes...Build and Send BLE Response NOW.
   2848                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_RGB_RED</STATUS>");
   \   00002894   0xF8DF 0x1E98      LDR.W    R1,??RoadBrd_ParseString_447
   \   00002898   0xA80B             ADD      R0,SP,#+44
   \   0000289A   0x.... 0x....      BL       strcpy
   2849                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000289E   0xA80B             ADD      R0,SP,#+44
   \   000028A0   0x.... 0x....      BL       strlen
   \   000028A4   0xA90B             ADD      R1,SP,#+44
   \   000028A6   0x.... 0x....      BL       BGM111_Transmit
   2850                                            }
   2851                                            sprintf( (char *)tempBffr2, "RGB_Red Set COMPLETE." );
   \                     ??RoadBrd_ParseString_446: (+1)
   \   000028AA   0xF8DF 0x1E88      LDR.W    R1,??RoadBrd_ParseString_447+0x4
   \   000028AE   0xA80B             ADD      R0,SP,#+44
   \   000028B0   0x.... 0x....      BL       sprintf
   \   000028B4   0xE2C7             B.N      ??RoadBrd_ParseString_399
   \   000028B6   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_288:
   \   000028B8   0x........         DC32     ?_106
   2852                                          }
   2853                                          else
   2854                                          {
   2855                                            // Is this a BLE Operation?
   2856                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_445: (+1)
   \   000028BC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000028BE   0x2D00             CMP      R5,#+0
   \   000028C0   0xD00A             BEQ.N    ??RoadBrd_ParseString_448
   2857                                            {
   2858                                              // Yes...Build and Send BLE Response NOW.
   2859                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_RGB_RED_ERR</STATUS>");
   \   000028C2   0xF8DF 0x1E74      LDR.W    R1,??RoadBrd_ParseString_447+0x8
   \   000028C6   0xA80B             ADD      R0,SP,#+44
   \   000028C8   0x.... 0x....      BL       strcpy
   2860                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000028CC   0xA80B             ADD      R0,SP,#+44
   \   000028CE   0x.... 0x....      BL       strlen
   \   000028D2   0xA90B             ADD      R1,SP,#+44
   \   000028D4   0x.... 0x....      BL       BGM111_Transmit
   2861                                            }
   2862                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_448: (+1)
   \   000028D8   0xF8DF 0x1928      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   000028DC   0xA80B             ADD      R0,SP,#+44
   \   000028DE   0x.... 0x....      BL       sprintf
   \   000028E2   0xE2B0             B.N      ??RoadBrd_ParseString_399
   2863                                          }
   2864                                        }
   2865                                        else if (strncmp((char *)uuid,"000E",4) == 0) // RGB_Green
   \                     ??RoadBrd_ParseString_444: (+1)
   \   000028E4   0x2204             MOVS     R2,#+4
   \   000028E6   0xF8DF 0x1E54      LDR.W    R1,??RoadBrd_ParseString_447+0xC
   \   000028EA   0xA836             ADD      R0,SP,#+216
   \   000028EC   0x.... 0x....      BL       strncmp
   \   000028F0   0x2800             CMP      R0,#+0
   \   000028F2   0xD133             BNE.N    ??RoadBrd_ParseString_449
   2866                                        {
   2867                                          Status = RoadBrd_CAL_Set_CalItem( CAL_RGB_GREEN, Offset, Scale);
   \   000028F4   0x9A2A             LDR      R2,[SP, #+168]
   \   000028F6   0x9929             LDR      R1,[SP, #+164]
   \   000028F8   0x200B             MOVS     R0,#+11
   \   000028FA   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   000028FE   0x0006             MOVS     R6,R0
   2868                                          if (Status == HAL_OK)
   \   00002900   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002902   0x2E00             CMP      R6,#+0
   \   00002904   0xD116             BNE.N    ??RoadBrd_ParseString_450
   2869                                          {
   2870                                            // Is this a BLE Operation?
   2871                                            if ( BLE_Flag )
   \   00002906   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002908   0x2D00             CMP      R5,#+0
   \   0000290A   0xD00A             BEQ.N    ??RoadBrd_ParseString_451
   2872                                            {
   2873                                              // Yes...Build and Send BLE Response NOW.
   2874                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_RGB_GREEN</STATUS>");
   \   0000290C   0xF8DF 0x1E30      LDR.W    R1,??RoadBrd_ParseString_447+0x10
   \   00002910   0xA80B             ADD      R0,SP,#+44
   \   00002912   0x.... 0x....      BL       strcpy
   2875                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002916   0xA80B             ADD      R0,SP,#+44
   \   00002918   0x.... 0x....      BL       strlen
   \   0000291C   0xA90B             ADD      R1,SP,#+44
   \   0000291E   0x.... 0x....      BL       BGM111_Transmit
   2876                                            }
   2877                                            sprintf( (char *)tempBffr2, "RGB_Green Set COMPLETE." );
   \                     ??RoadBrd_ParseString_451: (+1)
   \   00002922   0xF8DF 0x1EB0      LDR.W    R1,??RoadBrd_ParseString_452
   \   00002926   0xA80B             ADD      R0,SP,#+44
   \   00002928   0x.... 0x....      BL       sprintf
   \   0000292C   0xE28B             B.N      ??RoadBrd_ParseString_399
   \   0000292E   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_304:
   \   00002930   0x........         DC32     ?_107
   2878                                          }
   2879                                          else
   2880                                          {
   2881                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_450: (+1)
   \   00002934   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002936   0x2D00             CMP      R5,#+0
   \   00002938   0xD00A             BEQ.N    ??RoadBrd_ParseString_453
   2882                                            {
   2883                                              // Yes...Build and Send BLE Response NOW.
   2884                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_RGB_GREEN_ERR</STATUS>");
   \   0000293A   0xF8DF 0x1E9C      LDR.W    R1,??RoadBrd_ParseString_452+0x4
   \   0000293E   0xA80B             ADD      R0,SP,#+44
   \   00002940   0x.... 0x....      BL       strcpy
   2885                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002944   0xA80B             ADD      R0,SP,#+44
   \   00002946   0x.... 0x....      BL       strlen
   \   0000294A   0xA90B             ADD      R1,SP,#+44
   \   0000294C   0x.... 0x....      BL       BGM111_Transmit
   2886                                            }
   2887                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_453: (+1)
   \   00002950   0xF8DF 0x18B0      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   00002954   0xA80B             ADD      R0,SP,#+44
   \   00002956   0x.... 0x....      BL       sprintf
   \   0000295A   0xE274             B.N      ??RoadBrd_ParseString_399
   2888                                          }
   2889                                        }
   2890                                        else if (strncmp((char *)uuid,"000F",4) == 0) // RGB_Blue
   \                     ??RoadBrd_ParseString_449: (+1)
   \   0000295C   0x2204             MOVS     R2,#+4
   \   0000295E   0xF8DF 0x1E7C      LDR.W    R1,??RoadBrd_ParseString_452+0x8
   \   00002962   0xA836             ADD      R0,SP,#+216
   \   00002964   0x.... 0x....      BL       strncmp
   \   00002968   0x2800             CMP      R0,#+0
   \   0000296A   0xD139             BNE.N    ??RoadBrd_ParseString_454
   2891                                        {
   2892                                          Status = RoadBrd_CAL_Set_CalItem( CAL_RGB_BLUE, Offset, Scale);
   \   0000296C   0x9A2A             LDR      R2,[SP, #+168]
   \   0000296E   0x9929             LDR      R1,[SP, #+164]
   \   00002970   0x200C             MOVS     R0,#+12
   \   00002972   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002976   0x0006             MOVS     R6,R0
   2893                                          if (Status == HAL_OK)
   \   00002978   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000297A   0x2E00             CMP      R6,#+0
   \   0000297C   0xD11C             BNE.N    ??RoadBrd_ParseString_455
   2894                                          {
   2895                                            // Is this a BLE Operation?
   2896                                            if ( BLE_Flag )
   \   0000297E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002980   0x2D00             CMP      R5,#+0
   \   00002982   0xD00A             BEQ.N    ??RoadBrd_ParseString_456
   2897                                            {
   2898                                              // Yes...Build and Send BLE Response NOW.
   2899                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_RGB_BLUE</STATUS>");
   \   00002984   0xF8DF 0x1E58      LDR.W    R1,??RoadBrd_ParseString_452+0xC
   \   00002988   0xA80B             ADD      R0,SP,#+44
   \   0000298A   0x.... 0x....      BL       strcpy
   2900                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000298E   0xA80B             ADD      R0,SP,#+44
   \   00002990   0x.... 0x....      BL       strlen
   \   00002994   0xA90B             ADD      R1,SP,#+44
   \   00002996   0x.... 0x....      BL       BGM111_Transmit
   2901                                            }
   2902                                            sprintf( (char *)tempBffr2, "RGB_Blue Set COMPLETE." );
   \                     ??RoadBrd_ParseString_456: (+1)
   \   0000299A   0xF8DF 0x1E48      LDR.W    R1,??RoadBrd_ParseString_452+0x10
   \   0000299E   0xA80B             ADD      R0,SP,#+44
   \   000029A0   0x.... 0x....      BL       sprintf
   \   000029A4   0xE24F             B.N      ??RoadBrd_ParseString_399
   \   000029A6   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_313:
   \   000029A8   0x........         DC32     ?_108
   \   000029AC   0x........         DC32     ?_109
   \   000029B0   0x........         DC32     ?_110
   \   000029B4   0x........         DC32     ?_111
   2903                                          }
   2904                                          else
   2905                                          {
   2906                                            // Is this a BLE Operation?
   2907                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_455: (+1)
   \   000029B8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000029BA   0x2D00             CMP      R5,#+0
   \   000029BC   0xD00A             BEQ.N    ??RoadBrd_ParseString_457
   2908                                            {
   2909                                              // Yes...Build and Send BLE Response NOW.
   2910                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_RGB_BLUE_ERR</STATUS>");
   \   000029BE   0xF8DF 0x1EB8      LDR.W    R1,??RoadBrd_ParseString_458
   \   000029C2   0xA80B             ADD      R0,SP,#+44
   \   000029C4   0x.... 0x....      BL       strcpy
   2911                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000029C8   0xA80B             ADD      R0,SP,#+44
   \   000029CA   0x.... 0x....      BL       strlen
   \   000029CE   0xA90B             ADD      R1,SP,#+44
   \   000029D0   0x.... 0x....      BL       BGM111_Transmit
   2912                                            }
   2913                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_457: (+1)
   \   000029D4   0xF8DF 0x182C      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   000029D8   0xA80B             ADD      R0,SP,#+44
   \   000029DA   0x.... 0x....      BL       sprintf
   \   000029DE   0xE232             B.N      ??RoadBrd_ParseString_399
   2914                                          }
   2915                                        }
   2916                                        else if (strncmp((char *)uuid,"0017",4) == 0) // Therm_C
   \                     ??RoadBrd_ParseString_454: (+1)
   \   000029E0   0x2204             MOVS     R2,#+4
   \   000029E2   0xF8DF 0x1E98      LDR.W    R1,??RoadBrd_ParseString_458+0x4
   \   000029E6   0xA836             ADD      R0,SP,#+216
   \   000029E8   0x.... 0x....      BL       strncmp
   \   000029EC   0x2800             CMP      R0,#+0
   \   000029EE   0xD130             BNE.N    ??RoadBrd_ParseString_459
   2917                                        {
   2918                                          Status = RoadBrd_CAL_Set_CalItem( CAL_THERM_C, Offset, Scale);
   \   000029F0   0x9A2A             LDR      R2,[SP, #+168]
   \   000029F2   0x9929             LDR      R1,[SP, #+164]
   \   000029F4   0x200D             MOVS     R0,#+13
   \   000029F6   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   000029FA   0x0006             MOVS     R6,R0
   2919                                          if (Status == HAL_OK)
   \   000029FC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000029FE   0x2E00             CMP      R6,#+0
   \   00002A00   0xD113             BNE.N    ??RoadBrd_ParseString_460
   2920                                          {
   2921                                            // Is this a BLE Operation?
   2922                                            if ( BLE_Flag )
   \   00002A02   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002A04   0x2D00             CMP      R5,#+0
   \   00002A06   0xD00A             BEQ.N    ??RoadBrd_ParseString_461
   2923                                            {
   2924                                              // Yes...Build and Send BLE Response NOW.
   2925                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_THERM_C</STATUS>");
   \   00002A08   0xF8DF 0x1E74      LDR.W    R1,??RoadBrd_ParseString_458+0x8
   \   00002A0C   0xA80B             ADD      R0,SP,#+44
   \   00002A0E   0x.... 0x....      BL       strcpy
   2926                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002A12   0xA80B             ADD      R0,SP,#+44
   \   00002A14   0x.... 0x....      BL       strlen
   \   00002A18   0xA90B             ADD      R1,SP,#+44
   \   00002A1A   0x.... 0x....      BL       BGM111_Transmit
   2927                                            }
   2928                                            sprintf( (char *)tempBffr2, "Therm_C Set COMPLETE." );
   \                     ??RoadBrd_ParseString_461: (+1)
   \   00002A1E   0xF8DF 0x1E64      LDR.W    R1,??RoadBrd_ParseString_458+0xC
   \   00002A22   0xA80B             ADD      R0,SP,#+44
   \   00002A24   0x.... 0x....      BL       sprintf
   \   00002A28   0xE20D             B.N      ??RoadBrd_ParseString_399
   2929                                          }
   2930                                          else
   2931                                          {
   2932                                            // Is this a BLE Operation?
   2933                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_460: (+1)
   \   00002A2A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002A2C   0x2D00             CMP      R5,#+0
   \   00002A2E   0xD00A             BEQ.N    ??RoadBrd_ParseString_462
   2934                                            {
   2935                                              // Yes...Build and Send BLE Response NOW.
   2936                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_THERM_C_ERR</STATUS>");
   \   00002A30   0xF8DF 0x1E54      LDR.W    R1,??RoadBrd_ParseString_458+0x10
   \   00002A34   0xA80B             ADD      R0,SP,#+44
   \   00002A36   0x.... 0x....      BL       strcpy
   2937                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002A3A   0xA80B             ADD      R0,SP,#+44
   \   00002A3C   0x.... 0x....      BL       strlen
   \   00002A40   0xA90B             ADD      R1,SP,#+44
   \   00002A42   0x.... 0x....      BL       BGM111_Transmit
   2938                                            }
   2939                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_462: (+1)
   \   00002A46   0xF8DF 0x17BC      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   00002A4A   0xA80B             ADD      R0,SP,#+44
   \   00002A4C   0x.... 0x....      BL       sprintf
   \   00002A50   0xE1F9             B.N      ??RoadBrd_ParseString_399
   2940                                          }
   2941                                        }
   2942                                        else if (strncmp((char *)uuid,"0019",4) == 0) // RoadT_1C
   \                     ??RoadBrd_ParseString_459: (+1)
   \   00002A52   0x2204             MOVS     R2,#+4
   \   00002A54   0xF8DF 0x1EC4      LDR.W    R1,??RoadBrd_ParseString_463
   \   00002A58   0xA836             ADD      R0,SP,#+216
   \   00002A5A   0x.... 0x....      BL       strncmp
   \   00002A5E   0x2800             CMP      R0,#+0
   \   00002A60   0xD132             BNE.N    ??RoadBrd_ParseString_464
   2943                                        {
   2944                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_1C, Offset, Scale);
   \   00002A62   0x9A2A             LDR      R2,[SP, #+168]
   \   00002A64   0x9929             LDR      R1,[SP, #+164]
   \   00002A66   0x200E             MOVS     R0,#+14
   \   00002A68   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002A6C   0x0006             MOVS     R6,R0
   2945                                          if (Status == HAL_OK)
   \   00002A6E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002A70   0x2E00             CMP      R6,#+0
   \   00002A72   0xD115             BNE.N    ??RoadBrd_ParseString_465
   2946                                          {
   2947                                            // Is this a BLE Operation?
   2948                                            if ( BLE_Flag )
   \   00002A74   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002A76   0x2D00             CMP      R5,#+0
   \   00002A78   0xD00A             BEQ.N    ??RoadBrd_ParseString_466
   2949                                            {
   2950                                              // Yes...Build and Send BLE Response NOW.
   2951                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_1C</STATUS>");
   \   00002A7A   0xF8DF 0x1EA4      LDR.W    R1,??RoadBrd_ParseString_463+0x4
   \   00002A7E   0xA80B             ADD      R0,SP,#+44
   \   00002A80   0x.... 0x....      BL       strcpy
   2952                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002A84   0xA80B             ADD      R0,SP,#+44
   \   00002A86   0x.... 0x....      BL       strlen
   \   00002A8A   0xA90B             ADD      R1,SP,#+44
   \   00002A8C   0x.... 0x....      BL       BGM111_Transmit
   2953                                            }
   2954                                            sprintf( (char *)tempBffr2, "RoadT_1C Set COMPLETE." );
   \                     ??RoadBrd_ParseString_466: (+1)
   \   00002A90   0xF8DF 0x1E90      LDR.W    R1,??RoadBrd_ParseString_463+0x8
   \   00002A94   0xA80B             ADD      R0,SP,#+44
   \   00002A96   0x.... 0x....      BL       sprintf
   \   00002A9A   0xE1D4             B.N      ??RoadBrd_ParseString_399
   \                     ??RoadBrd_ParseString_323:
   \   00002A9C   0x........         DC32     ?_112
   2955                                          }
   2956                                          else
   2957                                          {
   2958                                            // Is this a BLE Operation?
   2959                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_465: (+1)
   \   00002AA0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002AA2   0x2D00             CMP      R5,#+0
   \   00002AA4   0xD00A             BEQ.N    ??RoadBrd_ParseString_467
   2960                                            {
   2961                                              // Yes...Build and Send BLE Response NOW.
   2962                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_1C_ERR</STATUS>");
   \   00002AA6   0xF8DF 0x1E80      LDR.W    R1,??RoadBrd_ParseString_463+0xC
   \   00002AAA   0xA80B             ADD      R0,SP,#+44
   \   00002AAC   0x.... 0x....      BL       strcpy
   2963                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002AB0   0xA80B             ADD      R0,SP,#+44
   \   00002AB2   0x.... 0x....      BL       strlen
   \   00002AB6   0xA90B             ADD      R1,SP,#+44
   \   00002AB8   0x.... 0x....      BL       BGM111_Transmit
   2964                                            }
   2965                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_467: (+1)
   \   00002ABC   0xF8DF 0x1744      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   00002AC0   0xA80B             ADD      R0,SP,#+44
   \   00002AC2   0x.... 0x....      BL       sprintf
   \   00002AC6   0xE1BE             B.N      ??RoadBrd_ParseString_399
   2966                                          }
   2967                                        }
   2968                                        else if (strncmp((char *)uuid,"001B",4) == 0) // RoadT_2C
   \                     ??RoadBrd_ParseString_464: (+1)
   \   00002AC8   0x2204             MOVS     R2,#+4
   \   00002ACA   0xF8DF 0x1E60      LDR.W    R1,??RoadBrd_ParseString_463+0x10
   \   00002ACE   0xA836             ADD      R0,SP,#+216
   \   00002AD0   0x.... 0x....      BL       strncmp
   \   00002AD4   0x2800             CMP      R0,#+0
   \   00002AD6   0xD133             BNE.N    ??RoadBrd_ParseString_468
   2969                                        {
   2970                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_2C, Offset, Scale);
   \   00002AD8   0x9A2A             LDR      R2,[SP, #+168]
   \   00002ADA   0x9929             LDR      R1,[SP, #+164]
   \   00002ADC   0x200F             MOVS     R0,#+15
   \   00002ADE   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002AE2   0x0006             MOVS     R6,R0
   2971                                          if (Status == HAL_OK)
   \   00002AE4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002AE6   0x2E00             CMP      R6,#+0
   \   00002AE8   0xD116             BNE.N    ??RoadBrd_ParseString_469
   2972                                          {
   2973                                            // Is this a BLE Operation?
   2974                                            if ( BLE_Flag )
   \   00002AEA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002AEC   0x2D00             CMP      R5,#+0
   \   00002AEE   0xD00A             BEQ.N    ??RoadBrd_ParseString_470
   2975                                            {
   2976                                              // Yes...Build and Send BLE Response NOW.
   2977                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_2C</STATUS>");
   \   00002AF0   0xF8DF 0x1ECC      LDR.W    R1,??RoadBrd_ParseString_471
   \   00002AF4   0xA80B             ADD      R0,SP,#+44
   \   00002AF6   0x.... 0x....      BL       strcpy
   2978                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002AFA   0xA80B             ADD      R0,SP,#+44
   \   00002AFC   0x.... 0x....      BL       strlen
   \   00002B00   0xA90B             ADD      R1,SP,#+44
   \   00002B02   0x.... 0x....      BL       BGM111_Transmit
   2979                                            }
   2980                                            sprintf( (char *)tempBffr2, "RoadT_2C Set COMPLETE." );
   \                     ??RoadBrd_ParseString_470: (+1)
   \   00002B06   0xF8DF 0x1EBC      LDR.W    R1,??RoadBrd_ParseString_471+0x4
   \   00002B0A   0xA80B             ADD      R0,SP,#+44
   \   00002B0C   0x.... 0x....      BL       sprintf
   \   00002B10   0xE199             B.N      ??RoadBrd_ParseString_399
   \   00002B12   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_329:
   \   00002B14   0x........         DC32     ?_114
   2981                                          }
   2982                                          else
   2983                                          {
   2984                                            // Is this a BLE Operation?
   2985                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_469: (+1)
   \   00002B18   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002B1A   0x2D00             CMP      R5,#+0
   \   00002B1C   0xD00A             BEQ.N    ??RoadBrd_ParseString_472
   2986                                            {
   2987                                              // Yes...Build and Send BLE Response NOW.
   2988                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_2C_ERR</STATUS>");
   \   00002B1E   0xF8DF 0x1EA8      LDR.W    R1,??RoadBrd_ParseString_471+0x8
   \   00002B22   0xA80B             ADD      R0,SP,#+44
   \   00002B24   0x.... 0x....      BL       strcpy
   2989                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002B28   0xA80B             ADD      R0,SP,#+44
   \   00002B2A   0x.... 0x....      BL       strlen
   \   00002B2E   0xA90B             ADD      R1,SP,#+44
   \   00002B30   0x.... 0x....      BL       BGM111_Transmit
   2990                                            }
   2991                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_472: (+1)
   \   00002B34   0xF8DF 0x16CC      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   00002B38   0xA80B             ADD      R0,SP,#+44
   \   00002B3A   0x.... 0x....      BL       sprintf
   \   00002B3E   0xE182             B.N      ??RoadBrd_ParseString_399
   2992                                          }
   2993                                        }
   2994                                        else if (strncmp((char *)uuid,"001D",4) == 0) // RoadT_3C
   \                     ??RoadBrd_ParseString_468: (+1)
   \   00002B40   0x2204             MOVS     R2,#+4
   \   00002B42   0xF8DF 0x1E88      LDR.W    R1,??RoadBrd_ParseString_471+0xC
   \   00002B46   0xA836             ADD      R0,SP,#+216
   \   00002B48   0x.... 0x....      BL       strncmp
   \   00002B4C   0x2800             CMP      R0,#+0
   \   00002B4E   0xD135             BNE.N    ??RoadBrd_ParseString_473
   2995                                        {
   2996                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_3C, Offset, Scale);
   \   00002B50   0x9A2A             LDR      R2,[SP, #+168]
   \   00002B52   0x9929             LDR      R1,[SP, #+164]
   \   00002B54   0x2010             MOVS     R0,#+16
   \   00002B56   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002B5A   0x0006             MOVS     R6,R0
   2997                                          if (Status == HAL_OK)
   \   00002B5C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002B5E   0x2E00             CMP      R6,#+0
   \   00002B60   0xD118             BNE.N    ??RoadBrd_ParseString_474
   2998                                          {
   2999                                            // Is this a BLE Operation?
   3000                                            if ( BLE_Flag )
   \   00002B62   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002B64   0x2D00             CMP      R5,#+0
   \   00002B66   0xD00A             BEQ.N    ??RoadBrd_ParseString_475
   3001                                            {
   3002                                              // Yes...Build and Send BLE Response NOW.
   3003                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_3C</STATUS>");
   \   00002B68   0xF8DF 0x1E64      LDR.W    R1,??RoadBrd_ParseString_471+0x10
   \   00002B6C   0xA80B             ADD      R0,SP,#+44
   \   00002B6E   0x.... 0x....      BL       strcpy
   3004                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002B72   0xA80B             ADD      R0,SP,#+44
   \   00002B74   0x.... 0x....      BL       strlen
   \   00002B78   0xA90B             ADD      R1,SP,#+44
   \   00002B7A   0x.... 0x....      BL       BGM111_Transmit
   3005                                            }
   3006                                            sprintf( (char *)tempBffr2, "RoadT_3C Set COMPLETE." );
   \                     ??RoadBrd_ParseString_475: (+1)
   \   00002B7E   0xF8DF 0x1E54      LDR.W    R1,??RoadBrd_ParseString_471+0x14
   \   00002B82   0xA80B             ADD      R0,SP,#+44
   \   00002B84   0x.... 0x....      BL       sprintf
   \   00002B88   0xE15D             B.N      ??RoadBrd_ParseString_399
   \   00002B8A   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_333:
   \   00002B8C   0x........         DC32     ?_115
   \   00002B90   0x........         DC32     ?_116
   3007                                          }
   3008                                          else
   3009                                          {
   3010                                            // Is this a BLE Operation?
   3011                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_474: (+1)
   \   00002B94   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002B96   0x2D00             CMP      R5,#+0
   \   00002B98   0xD00A             BEQ.N    ??RoadBrd_ParseString_476
   3012                                            {
   3013                                              // Yes...Build and Send BLE Response NOW.
   3014                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_3C_ERR</STATUS>");
   \   00002B9A   0xF8DF 0x1ECC      LDR.W    R1,??RoadBrd_ParseString_477
   \   00002B9E   0xA80B             ADD      R0,SP,#+44
   \   00002BA0   0x.... 0x....      BL       strcpy
   3015                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002BA4   0xA80B             ADD      R0,SP,#+44
   \   00002BA6   0x.... 0x....      BL       strlen
   \   00002BAA   0xA90B             ADD      R1,SP,#+44
   \   00002BAC   0x.... 0x....      BL       BGM111_Transmit
   3016                                            }
   3017                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_476: (+1)
   \   00002BB0   0xF8DF 0x1650      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   00002BB4   0xA80B             ADD      R0,SP,#+44
   \   00002BB6   0x.... 0x....      BL       sprintf
   \   00002BBA   0xE144             B.N      ??RoadBrd_ParseString_399
   3018                                          }
   3019                                        }
   3020                                        else if (strncmp((char *)uuid,"001F",4) == 0) // RoadT_4C
   \                     ??RoadBrd_ParseString_473: (+1)
   \   00002BBC   0x2204             MOVS     R2,#+4
   \   00002BBE   0xF8DF 0x1EAC      LDR.W    R1,??RoadBrd_ParseString_477+0x4
   \   00002BC2   0xA836             ADD      R0,SP,#+216
   \   00002BC4   0x.... 0x....      BL       strncmp
   \   00002BC8   0x2800             CMP      R0,#+0
   \   00002BCA   0xD135             BNE.N    ??RoadBrd_ParseString_478
   3021                                        {
   3022                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_4C, Offset, Scale);
   \   00002BCC   0x9A2A             LDR      R2,[SP, #+168]
   \   00002BCE   0x9929             LDR      R1,[SP, #+164]
   \   00002BD0   0x2011             MOVS     R0,#+17
   \   00002BD2   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002BD6   0x0006             MOVS     R6,R0
   3023                                          if (Status == HAL_OK)
   \   00002BD8   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002BDA   0x2E00             CMP      R6,#+0
   \   00002BDC   0xD118             BNE.N    ??RoadBrd_ParseString_479
   3024                                          {
   3025                                            // Is this a BLE Operation?
   3026                                            if ( BLE_Flag )
   \   00002BDE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002BE0   0x2D00             CMP      R5,#+0
   \   00002BE2   0xD00A             BEQ.N    ??RoadBrd_ParseString_480
   3027                                            {
   3028                                              // Yes...Build and Send BLE Response NOW.
   3029                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_4C</STATUS>");
   \   00002BE4   0xF8DF 0x1E88      LDR.W    R1,??RoadBrd_ParseString_477+0x8
   \   00002BE8   0xA80B             ADD      R0,SP,#+44
   \   00002BEA   0x.... 0x....      BL       strcpy
   3030                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002BEE   0xA80B             ADD      R0,SP,#+44
   \   00002BF0   0x.... 0x....      BL       strlen
   \   00002BF4   0xA90B             ADD      R1,SP,#+44
   \   00002BF6   0x.... 0x....      BL       BGM111_Transmit
   3031                                            }
   3032                                            sprintf( (char *)tempBffr2, "RoadT_4C Set COMPLETE." );
   \                     ??RoadBrd_ParseString_480: (+1)
   \   00002BFA   0xF8DF 0x1E78      LDR.W    R1,??RoadBrd_ParseString_477+0xC
   \   00002BFE   0xA80B             ADD      R0,SP,#+44
   \   00002C00   0x.... 0x....      BL       sprintf
   \   00002C04   0xE11F             B.N      ??RoadBrd_ParseString_399
   \   00002C06   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_336:
   \   00002C08   0x........         DC32     ?_117
   \   00002C0C   0x........         DC32     ?_118
   3033                                          }
   3034                                          else
   3035                                          {
   3036                                            // Is this a BLE Operation?
   3037                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_479: (+1)
   \   00002C10   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002C12   0x2D00             CMP      R5,#+0
   \   00002C14   0xD00A             BEQ.N    ??RoadBrd_ParseString_481
   3038                                            {
   3039                                              // Yes...Build and Send BLE Response NOW.
   3040                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_4C_ERR</STATUS>");
   \   00002C16   0xF8DF 0x1E60      LDR.W    R1,??RoadBrd_ParseString_477+0x10
   \   00002C1A   0xA80B             ADD      R0,SP,#+44
   \   00002C1C   0x.... 0x....      BL       strcpy
   3041                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002C20   0xA80B             ADD      R0,SP,#+44
   \   00002C22   0x.... 0x....      BL       strlen
   \   00002C26   0xA90B             ADD      R1,SP,#+44
   \   00002C28   0x.... 0x....      BL       BGM111_Transmit
   3042                                            }
   3043                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_481: (+1)
   \   00002C2C   0xF8DF 0x15D4      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   00002C30   0xA80B             ADD      R0,SP,#+44
   \   00002C32   0x.... 0x....      BL       sprintf
   \   00002C36   0xE106             B.N      ??RoadBrd_ParseString_399
   3044                                          }
   3045                                        }
   3046                                        else if (strncmp((char *)uuid,"0021",4) == 0) // RoadT_5C
   \                     ??RoadBrd_ParseString_478: (+1)
   \   00002C38   0x2204             MOVS     R2,#+4
   \   00002C3A   0xF8DF 0x1ED0      LDR.W    R1,??RoadBrd_ParseString_482
   \   00002C3E   0xA836             ADD      R0,SP,#+216
   \   00002C40   0x.... 0x....      BL       strncmp
   \   00002C44   0x2800             CMP      R0,#+0
   \   00002C46   0xD135             BNE.N    ??RoadBrd_ParseString_483
   3047                                        {
   3048                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_5C, Offset, Scale);
   \   00002C48   0x9A2A             LDR      R2,[SP, #+168]
   \   00002C4A   0x9929             LDR      R1,[SP, #+164]
   \   00002C4C   0x2012             MOVS     R0,#+18
   \   00002C4E   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002C52   0x0006             MOVS     R6,R0
   3049                                          if (Status == HAL_OK)
   \   00002C54   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002C56   0x2E00             CMP      R6,#+0
   \   00002C58   0xD118             BNE.N    ??RoadBrd_ParseString_484
   3050                                          {
   3051                                            // Is this a BLE Operation?
   3052                                            if ( BLE_Flag )
   \   00002C5A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002C5C   0x2D00             CMP      R5,#+0
   \   00002C5E   0xD00A             BEQ.N    ??RoadBrd_ParseString_485
   3053                                            {
   3054                                              // Yes...Build and Send BLE Response NOW.
   3055                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_5C</STATUS>");
   \   00002C60   0xF8DF 0x1EAC      LDR.W    R1,??RoadBrd_ParseString_482+0x4
   \   00002C64   0xA80B             ADD      R0,SP,#+44
   \   00002C66   0x.... 0x....      BL       strcpy
   3056                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002C6A   0xA80B             ADD      R0,SP,#+44
   \   00002C6C   0x.... 0x....      BL       strlen
   \   00002C70   0xA90B             ADD      R1,SP,#+44
   \   00002C72   0x.... 0x....      BL       BGM111_Transmit
   3057                                            }
   3058                                            sprintf( (char *)tempBffr2, "RoadT_5C Set COMPLETE." );
   \                     ??RoadBrd_ParseString_485: (+1)
   \   00002C76   0xF8DF 0x1E9C      LDR.W    R1,??RoadBrd_ParseString_482+0x8
   \   00002C7A   0xA80B             ADD      R0,SP,#+44
   \   00002C7C   0x.... 0x....      BL       sprintf
   \   00002C80   0xE0E1             B.N      ??RoadBrd_ParseString_399
   \   00002C82   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_341:
   \   00002C84   0x........         DC32     ?_119
   \   00002C88   0x........         DC32     ?_120
   3059                                          }
   3060                                          else
   3061                                          {
   3062                                            // Is this a BLE Operation?
   3063                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_484: (+1)
   \   00002C8C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002C8E   0x2D00             CMP      R5,#+0
   \   00002C90   0xD00A             BEQ.N    ??RoadBrd_ParseString_486
   3064                                            {
   3065                                              // Yes...Build and Send BLE Response NOW.
   3066                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_5C_ERR</STATUS>");
   \   00002C92   0xF8DF 0x1E84      LDR.W    R1,??RoadBrd_ParseString_482+0xC
   \   00002C96   0xA80B             ADD      R0,SP,#+44
   \   00002C98   0x.... 0x....      BL       strcpy
   3067                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002C9C   0xA80B             ADD      R0,SP,#+44
   \   00002C9E   0x.... 0x....      BL       strlen
   \   00002CA2   0xA90B             ADD      R1,SP,#+44
   \   00002CA4   0x.... 0x....      BL       BGM111_Transmit
   3068                                            }
   3069                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_486: (+1)
   \   00002CA8   0xF8DF 0x1558      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   00002CAC   0xA80B             ADD      R0,SP,#+44
   \   00002CAE   0x.... 0x....      BL       sprintf
   \   00002CB2   0xE0C8             B.N      ??RoadBrd_ParseString_399
   3070                                          }
   3071                                        }
   3072                                        else if (strncmp((char *)uuid,"0023",4) == 0) // RoadT_6C
   \                     ??RoadBrd_ParseString_483: (+1)
   \   00002CB4   0x2204             MOVS     R2,#+4
   \   00002CB6   0xF8DF 0x1E64      LDR.W    R1,??RoadBrd_ParseString_482+0x10
   \   00002CBA   0xA836             ADD      R0,SP,#+216
   \   00002CBC   0x.... 0x....      BL       strncmp
   \   00002CC0   0x2800             CMP      R0,#+0
   \   00002CC2   0xD133             BNE.N    ??RoadBrd_ParseString_487
   3073                                        {
   3074                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_6C, Offset, Scale);
   \   00002CC4   0x9A2A             LDR      R2,[SP, #+168]
   \   00002CC6   0x9929             LDR      R1,[SP, #+164]
   \   00002CC8   0x2013             MOVS     R0,#+19
   \   00002CCA   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002CCE   0x0006             MOVS     R6,R0
   3075                                          if (Status == HAL_OK)
   \   00002CD0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002CD2   0x2E00             CMP      R6,#+0
   \   00002CD4   0xD116             BNE.N    ??RoadBrd_ParseString_488
   3076                                          {
   3077                                            // Is this a BLE Operation?
   3078                                            if ( BLE_Flag )
   \   00002CD6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002CD8   0x2D00             CMP      R5,#+0
   \   00002CDA   0xD00A             BEQ.N    ??RoadBrd_ParseString_489
   3079                                            {
   3080                                              // Yes...Build and Send BLE Response NOW.
   3081                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_6C</STATUS>");
   \   00002CDC   0xF8DF 0x1ED0      LDR.W    R1,??RoadBrd_ParseString_490
   \   00002CE0   0xA80B             ADD      R0,SP,#+44
   \   00002CE2   0x.... 0x....      BL       strcpy
   3082                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002CE6   0xA80B             ADD      R0,SP,#+44
   \   00002CE8   0x.... 0x....      BL       strlen
   \   00002CEC   0xA90B             ADD      R1,SP,#+44
   \   00002CEE   0x.... 0x....      BL       BGM111_Transmit
   3083                                            }
   3084                                            sprintf( (char *)tempBffr2, "RoadT_6C Set COMPLETE." );
   \                     ??RoadBrd_ParseString_489: (+1)
   \   00002CF2   0xF8DF 0x1EC0      LDR.W    R1,??RoadBrd_ParseString_490+0x4
   \   00002CF6   0xA80B             ADD      R0,SP,#+44
   \   00002CF8   0x.... 0x....      BL       sprintf
   \   00002CFC   0xE0A3             B.N      ??RoadBrd_ParseString_399
   \   00002CFE   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_349:
   \   00002D00   0x........         DC32     ?_121
   3085                                          }
   3086                                          else
   3087                                          {
   3088                                            // Is this a BLE Operation?
   3089                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_488: (+1)
   \   00002D04   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002D06   0x2D00             CMP      R5,#+0
   \   00002D08   0xD00A             BEQ.N    ??RoadBrd_ParseString_491
   3090                                            {
   3091                                              // Yes...Build and Send BLE Response NOW.
   3092                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_6C_ERR</STATUS>");
   \   00002D0A   0xF8DF 0x1EAC      LDR.W    R1,??RoadBrd_ParseString_490+0x8
   \   00002D0E   0xA80B             ADD      R0,SP,#+44
   \   00002D10   0x.... 0x....      BL       strcpy
   3093                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002D14   0xA80B             ADD      R0,SP,#+44
   \   00002D16   0x.... 0x....      BL       strlen
   \   00002D1A   0xA90B             ADD      R1,SP,#+44
   \   00002D1C   0x.... 0x....      BL       BGM111_Transmit
   3094                                            }
   3095                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_491: (+1)
   \   00002D20   0xF8DF 0x14E0      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   00002D24   0xA80B             ADD      R0,SP,#+44
   \   00002D26   0x.... 0x....      BL       sprintf
   \   00002D2A   0xE08C             B.N      ??RoadBrd_ParseString_399
   3096                                          }
   3097                                        }
   3098                                        else if (strncmp((char *)uuid,"0025",4) == 0) // RoadT_7C
   \                     ??RoadBrd_ParseString_487: (+1)
   \   00002D2C   0x2204             MOVS     R2,#+4
   \   00002D2E   0xF8DF 0x1E8C      LDR.W    R1,??RoadBrd_ParseString_490+0xC
   \   00002D32   0xA836             ADD      R0,SP,#+216
   \   00002D34   0x.... 0x....      BL       strncmp
   \   00002D38   0x2800             CMP      R0,#+0
   \   00002D3A   0xD135             BNE.N    ??RoadBrd_ParseString_492
   3099                                        {
   3100                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_7C, Offset, Scale);
   \   00002D3C   0x9A2A             LDR      R2,[SP, #+168]
   \   00002D3E   0x9929             LDR      R1,[SP, #+164]
   \   00002D40   0x2014             MOVS     R0,#+20
   \   00002D42   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002D46   0x0006             MOVS     R6,R0
   3101                                          if (Status == HAL_OK)
   \   00002D48   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002D4A   0x2E00             CMP      R6,#+0
   \   00002D4C   0xD118             BNE.N    ??RoadBrd_ParseString_493
   3102                                          {
   3103                                            // Is this a BLE Operation?
   3104                                            if ( BLE_Flag )
   \   00002D4E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002D50   0x2D00             CMP      R5,#+0
   \   00002D52   0xD00A             BEQ.N    ??RoadBrd_ParseString_494
   3105                                            {
   3106                                              // Yes...Build and Send BLE Response NOW.
   3107                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_7C</STATUS>");
   \   00002D54   0xF8DF 0x1EF8      LDR.W    R1,??RoadBrd_ParseString_495
   \   00002D58   0xA80B             ADD      R0,SP,#+44
   \   00002D5A   0x.... 0x....      BL       strcpy
   3108                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002D5E   0xA80B             ADD      R0,SP,#+44
   \   00002D60   0x.... 0x....      BL       strlen
   \   00002D64   0xA90B             ADD      R1,SP,#+44
   \   00002D66   0x.... 0x....      BL       BGM111_Transmit
   3109                                            }
   3110                                            sprintf( (char *)tempBffr2, "RoadT_7C Set COMPLETE." );
   \                     ??RoadBrd_ParseString_494: (+1)
   \   00002D6A   0xF8DF 0x1EE8      LDR.W    R1,??RoadBrd_ParseString_495+0x4
   \   00002D6E   0xA80B             ADD      R0,SP,#+44
   \   00002D70   0x.... 0x....      BL       sprintf
   \   00002D74   0xE067             B.N      ??RoadBrd_ParseString_399
   \   00002D76   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_355:
   \   00002D78   0x........         DC32     ?_122
   \   00002D7C   0x........         DC32     ?_123
   3111                                          }
   3112                                          else
   3113                                          {
   3114                                            // Is this a BLE Operation?
   3115                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_493: (+1)
   \   00002D80   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002D82   0x2D00             CMP      R5,#+0
   \   00002D84   0xD00A             BEQ.N    ??RoadBrd_ParseString_496
   3116                                            {
   3117                                              // Yes...Build and Send BLE Response NOW.
   3118                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_7C_ERR</STATUS>");
   \   00002D86   0xF8DF 0x1ED0      LDR.W    R1,??RoadBrd_ParseString_495+0x8
   \   00002D8A   0xA80B             ADD      R0,SP,#+44
   \   00002D8C   0x.... 0x....      BL       strcpy
   3119                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002D90   0xA80B             ADD      R0,SP,#+44
   \   00002D92   0x.... 0x....      BL       strlen
   \   00002D96   0xA90B             ADD      R1,SP,#+44
   \   00002D98   0x.... 0x....      BL       BGM111_Transmit
   3120                                            }
   3121                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_496: (+1)
   \   00002D9C   0xF8DF 0x1464      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   00002DA0   0xA80B             ADD      R0,SP,#+44
   \   00002DA2   0x.... 0x....      BL       sprintf
   \   00002DA6   0xE04E             B.N      ??RoadBrd_ParseString_399
   3122                                          }
   3123                                        }
   3124                                        else if (strncmp((char *)uuid,"0027",4) == 0) // RoadT_8C
   \                     ??RoadBrd_ParseString_492: (+1)
   \   00002DA8   0x2204             MOVS     R2,#+4
   \   00002DAA   0xF8DF 0x1EB0      LDR.W    R1,??RoadBrd_ParseString_495+0xC
   \   00002DAE   0xA836             ADD      R0,SP,#+216
   \   00002DB0   0x.... 0x....      BL       strncmp
   \   00002DB4   0x2800             CMP      R0,#+0
   \   00002DB6   0xD133             BNE.N    ??RoadBrd_ParseString_497
   3125                                        {
   3126                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_8C, Offset, Scale);
   \   00002DB8   0x9A2A             LDR      R2,[SP, #+168]
   \   00002DBA   0x9929             LDR      R1,[SP, #+164]
   \   00002DBC   0x2015             MOVS     R0,#+21
   \   00002DBE   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002DC2   0x0006             MOVS     R6,R0
   3127                                          if (Status == HAL_OK)
   \   00002DC4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002DC6   0x2E00             CMP      R6,#+0
   \   00002DC8   0xD113             BNE.N    ??RoadBrd_ParseString_498
   3128                                          {
   3129                                            // Is this a BLE Operation?
   3130                                            if ( BLE_Flag )
   \   00002DCA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002DCC   0x2D00             CMP      R5,#+0
   \   00002DCE   0xD00A             BEQ.N    ??RoadBrd_ParseString_499
   3131                                            {
   3132                                              // Yes...Build and Send BLE Response NOW.
   3133                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_8C</STATUS>");
   \   00002DD0   0xF8DF 0x1E8C      LDR.W    R1,??RoadBrd_ParseString_495+0x10
   \   00002DD4   0xA80B             ADD      R0,SP,#+44
   \   00002DD6   0x.... 0x....      BL       strcpy
   3134                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002DDA   0xA80B             ADD      R0,SP,#+44
   \   00002DDC   0x.... 0x....      BL       strlen
   \   00002DE0   0xA90B             ADD      R1,SP,#+44
   \   00002DE2   0x.... 0x....      BL       BGM111_Transmit
   3135                                            }
   3136                                            sprintf( (char *)tempBffr2, "RoadT_8C Set COMPLETE." );
   \                     ??RoadBrd_ParseString_499: (+1)
   \   00002DE6   0xF8DF 0x1E7C      LDR.W    R1,??RoadBrd_ParseString_495+0x14
   \   00002DEA   0xA80B             ADD      R0,SP,#+44
   \   00002DEC   0x.... 0x....      BL       sprintf
   \   00002DF0   0xE029             B.N      ??RoadBrd_ParseString_399
   3137                                          }
   3138                                          else
   3139                                          {
   3140                                            // Is this a BLE Operation?
   3141                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_498: (+1)
   \   00002DF2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002DF4   0x2D00             CMP      R5,#+0
   \   00002DF6   0xD00A             BEQ.N    ??RoadBrd_ParseString_500
   3142                                            {
   3143                                              // Yes...Build and Send BLE Response NOW.
   3144                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_8C_ERR</STATUS>");
   \   00002DF8   0xF8DF 0x1EFC      LDR.W    R1,??RoadBrd_ParseString_501
   \   00002DFC   0xA80B             ADD      R0,SP,#+44
   \   00002DFE   0x.... 0x....      BL       strcpy
   3145                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002E02   0xA80B             ADD      R0,SP,#+44
   \   00002E04   0x.... 0x....      BL       strlen
   \   00002E08   0xA90B             ADD      R1,SP,#+44
   \   00002E0A   0x.... 0x....      BL       BGM111_Transmit
   3146                                            }
   3147                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_500: (+1)
   \   00002E0E   0xF8DF 0x13F4      LDR.W    R1,??RoadBrd_ParseString_398+0xC
   \   00002E12   0xA80B             ADD      R0,SP,#+44
   \   00002E14   0x.... 0x....      BL       sprintf
   \   00002E18   0xE015             B.N      ??RoadBrd_ParseString_399
   \   00002E1A   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_360:
   \   00002E1C   0x........         DC32     ?_124
   3148                                          }
   3149                                        }
   3150                                        else
   3151                                        {
   3152                                          // Is this a BLE Operation?
   3153                                          if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_497: (+1)
   \   00002E20   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002E22   0x2D00             CMP      R5,#+0
   \   00002E24   0xD00A             BEQ.N    ??RoadBrd_ParseString_502
   3154                                          {
   3155                                            // Yes...Build and Send BLE Response NOW.
   3156                                            strcpy( (char *)tempBffr2, "<STATUS>CMD_TCS_BADUUID</STATUS>");
   \   00002E26   0xF8DF 0x1ED4      LDR.W    R1,??RoadBrd_ParseString_501+0x4
   \   00002E2A   0xA80B             ADD      R0,SP,#+44
   \   00002E2C   0x.... 0x....      BL       strcpy
   3157                                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002E30   0xA80B             ADD      R0,SP,#+44
   \   00002E32   0x.... 0x....      BL       strlen
   \   00002E36   0xA90B             ADD      R1,SP,#+44
   \   00002E38   0x.... 0x....      BL       BGM111_Transmit
   3158                                          }
   3159                                          sprintf( (char *)tempBffr2, "TCS SYNTAX ERROR: Bad UUID.\r\n" );
   \                     ??RoadBrd_ParseString_502: (+1)
   \   00002E3C   0xF8DF 0x1EC0      LDR.W    R1,??RoadBrd_ParseString_501+0x8
   \   00002E40   0xA80B             ADD      R0,SP,#+44
   \   00002E42   0x.... 0x....      BL       sprintf
   3160                                        }
   3161                                        Status = HAL_OK;
   \                     ??RoadBrd_ParseString_399: (+1)
   \   00002E46   0x2000             MOVS     R0,#+0
   \   00002E48   0x0006             MOVS     R6,R0
   \   00002E4A   0xE011             B.N      ??RoadBrd_ParseString_390
   3162                                      }
   3163                                      else
   3164                                      {
   3165                                        // Is this a BLE Operation?
   3166                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_394: (+1)
   \   00002E4C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002E4E   0x2D00             CMP      R5,#+0
   \   00002E50   0xD009             BEQ.N    ??RoadBrd_ParseString_503
   3167                                        {
   3168                                          // Yes...Build and Send BLE Response NOW.
   3169                                          strcpy( (char *)tempBffr2, "<STATUS>CMD_TCS_BADPARAM</STATUS>");
   \   00002E52   0x49BF             LDR.N    R1,??RoadBrd_ParseString_393
   \   00002E54   0xA80B             ADD      R0,SP,#+44
   \   00002E56   0x.... 0x....      BL       strcpy
   3170                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002E5A   0xA80B             ADD      R0,SP,#+44
   \   00002E5C   0x.... 0x....      BL       strlen
   \   00002E60   0xA90B             ADD      R1,SP,#+44
   \   00002E62   0x.... 0x....      BL       BGM111_Transmit
   3171                                        }
   3172                                        
   3173                                        strcpy( (char *)tempBffr2, "TCS SYNTAX ERROR: Wrong Number of Parameters.\r\n");
   \                     ??RoadBrd_ParseString_503: (+1)
   \   00002E66   0xF8DF 0x1E9C      LDR.W    R1,??RoadBrd_ParseString_501+0xC
   \   00002E6A   0xA80B             ADD      R0,SP,#+44
   \   00002E6C   0x.... 0x....      BL       strcpy
   3174                                      }
   3175                                    } // EndElse (flag == 0)
   3176                                  } // EndElse (tempBffr[3]!=':')
   3177                                  break;
   \                     ??RoadBrd_ParseString_390: (+1)
   \   00002E70   0xF001 0xB84D      B.W      ??RoadBrd_ParseString_378
   3178                                  //------------------ TCR Command: Calibration Read Command
   3179                                case 'R':
   3180                                  // Build Read Calibration Dump Part I....
   3181                                  // Is this a BLE Operation?
   3182                                  if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_385: (+1)
   \   00002E74   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002E76   0x2D00             CMP      R5,#+0
   \   00002E78   0xD00D             BEQ.N    ??RoadBrd_ParseString_504
   3183                                  {
   3184                                    // Yes...Build and Send BLE Response NOW.
   3185                                    sprintf( (char *)tempBffr2, "<STATUS>TCR:%s\\",  RoadBrd_CAL_GetTimeString());
   \   00002E7A   0x.... 0x....      BL       RoadBrd_CAL_GetTimeString
   \   00002E7E   0x0002             MOVS     R2,R0
   \   00002E80   0xF8DF 0x1E84      LDR.W    R1,??RoadBrd_ParseString_501+0x10
   \   00002E84   0xA80B             ADD      R0,SP,#+44
   \   00002E86   0x.... 0x....      BL       sprintf
   3186                                    BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002E8A   0xA80B             ADD      R0,SP,#+44
   \   00002E8C   0x.... 0x....      BL       strlen
   \   00002E90   0xA90B             ADD      R1,SP,#+44
   \   00002E92   0x.... 0x....      BL       BGM111_Transmit
   3187                                  }
   3188                                  
   3189                                  // Send string to UART..
   3190                                  sprintf( (char *)tempBffr2, "CALIBRATION DATA\r\nDate: %s\r\n",  RoadBrd_CAL_GetTimeString());
   \                     ??RoadBrd_ParseString_504: (+1)
   \   00002E96   0x.... 0x....      BL       RoadBrd_CAL_GetTimeString
   \   00002E9A   0x0002             MOVS     R2,R0
   \   00002E9C   0xF8DF 0x1F14      LDR.W    R1,??RoadBrd_ParseString_505
   \   00002EA0   0xA80B             ADD      R0,SP,#+44
   \   00002EA2   0x.... 0x....      BL       sprintf
   3191          #ifdef NUCLEO
   3192                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   3193          #else
   3194                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00002EA6   0xA90B             ADD      R1,SP,#+44
   \   00002EA8   0x2000             MOVS     R0,#+0
   \   00002EAA   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00002EAE   0x0006             MOVS     R6,R0
   3195          #endif
   3196                                  if (Status != HAL_OK)
   \   00002EB0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002EB2   0x2E00             CMP      R6,#+0
   \   00002EB4   0xD003             BEQ.N    ??RoadBrd_ParseString_506
   3197                                      return Status;
   \   00002EB6   0x0030             MOVS     R0,R6
   \   00002EB8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002EBA   0xF001 0xBE9C      B.W      ??RoadBrd_ParseString_4
   3198                                  // Build Read Calibration Dump Part II....
   3199                                  // Send string to UART..
   3200                                  sprintf( (char *)tempBffr2, "Name		        UUID		Slope		Offset\r\n" );
   \                     ??RoadBrd_ParseString_506: (+1)
   \   00002EBE   0xF8DF 0x1EF8      LDR.W    R1,??RoadBrd_ParseString_505+0x4
   \   00002EC2   0xA80B             ADD      R0,SP,#+44
   \   00002EC4   0x.... 0x....      BL       sprintf
   3201          #ifdef NUCLEO
   3202                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   3203          #else
   3204                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00002EC8   0xA90B             ADD      R1,SP,#+44
   \   00002ECA   0x2000             MOVS     R0,#+0
   \   00002ECC   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00002ED0   0x0006             MOVS     R6,R0
   3205          #endif
   3206                                  if (Status != HAL_OK)
   \   00002ED2   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002ED4   0x2E00             CMP      R6,#+0
   \   00002ED6   0xD009             BEQ.N    ??RoadBrd_ParseString_507
   3207                                      return Status;
   \   00002ED8   0x0030             MOVS     R0,R6
   \   00002EDA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002EDC   0xF001 0xBE8B      B.W      ??RoadBrd_ParseString_4
   \                     ??RoadBrd_ParseString_375:
   \   00002EE0   0x........         DC32     ?_125
   \   00002EE4   0x........         DC32     ?_24
   \   00002EE8   0x........         DC32     ?_126
   3208                                  // NOW, Build Data String..
   3209                                  for (x=0; x<CAL_LAST_VALUE; x++)
   \                     ??RoadBrd_ParseString_507: (+1)
   \   00002EEC   0x2000             MOVS     R0,#+0
   \   00002EEE   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_508: (+1)
   \   00002EF0   0x2F16             CMP      R7,#+22
   \   00002EF2   0xF280 0x8766      BGE.W    ??RoadBrd_ParseString_509
   3210                                  {
   3211                                    // Build String
   3212                                    switch(x)
   \   00002EF6   0x2F00             CMP      R7,#+0
   \   00002EF8   0xD036             BEQ.N    ??RoadBrd_ParseString_510
   \   00002EFA   0x2F02             CMP      R7,#+2
   \   00002EFC   0xF000 0x80DE      BEQ.W    ??RoadBrd_ParseString_511
   \   00002F00   0xF0C0 0x808A      BCC.W    ??RoadBrd_ParseString_512
   \   00002F04   0x2F04             CMP      R7,#+4
   \   00002F06   0xF000 0x8183      BEQ.W    ??RoadBrd_ParseString_513
   \   00002F0A   0xF0C0 0x812B      BCC.W    ??RoadBrd_ParseString_514
   \   00002F0E   0x2F06             CMP      R7,#+6
   \   00002F10   0xF000 0x8226      BEQ.W    ??RoadBrd_ParseString_515
   \   00002F14   0xF0C0 0x81D0      BCC.W    ??RoadBrd_ParseString_516
   \   00002F18   0x2F08             CMP      R7,#+8
   \   00002F1A   0xF000 0x82C9      BEQ.W    ??RoadBrd_ParseString_517
   \   00002F1E   0xF0C0 0x8273      BCC.W    ??RoadBrd_ParseString_518
   \   00002F22   0x2F0A             CMP      R7,#+10
   \   00002F24   0xF000 0x836A      BEQ.W    ??RoadBrd_ParseString_519
   \   00002F28   0xF0C0 0x8316      BCC.W    ??RoadBrd_ParseString_520
   \   00002F2C   0x2F0C             CMP      R7,#+12
   \   00002F2E   0xF000 0x8409      BEQ.W    ??RoadBrd_ParseString_521
   \   00002F32   0xF0C0 0x83B5      BCC.W    ??RoadBrd_ParseString_522
   \   00002F36   0x2F0E             CMP      R7,#+14
   \   00002F38   0xF000 0x84A8      BEQ.W    ??RoadBrd_ParseString_523
   \   00002F3C   0xF0C0 0x8454      BCC.W    ??RoadBrd_ParseString_524
   \   00002F40   0x2F10             CMP      R7,#+16
   \   00002F42   0xF000 0x8549      BEQ.W    ??RoadBrd_ParseString_525
   \   00002F46   0xF0C0 0x84F3      BCC.W    ??RoadBrd_ParseString_526
   \   00002F4A   0x2F12             CMP      R7,#+18
   \   00002F4C   0xF000 0x85E8      BEQ.W    ??RoadBrd_ParseString_527
   \   00002F50   0xF0C0 0x8594      BCC.W    ??RoadBrd_ParseString_528
   \   00002F54   0x2F14             CMP      R7,#+20
   \   00002F56   0xF000 0x8687      BEQ.W    ??RoadBrd_ParseString_529
   \   00002F5A   0xF0C0 0x8631      BCC.W    ??RoadBrd_ParseString_530
   \   00002F5E   0x2F15             CMP      R7,#+21
   \   00002F60   0xF000 0x86D4      BEQ.W    ??RoadBrd_ParseString_531
   \   00002F64   0xF000 0xBF19      B.W      ??RoadBrd_ParseString_532
   3213                                    {
   3214                                      case CAL_SHNT_VLTG: //CAL_SHNT_VLTG Values
   3215                                        // Is this a BLE Operation?
   3216                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_510: (+1)
   \   00002F68   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002F6A   0x2D00             CMP      R5,#+0
   \   00002F6C   0xD024             BEQ.N    ??RoadBrd_ParseString_533
   3217                                        {
   3218                                          // Yes...Build and Send BLE Response NOW.
   3219                                          sprintf( (char *)tempBffr2, "%s:0002//%1.4f//%2.3f//", 
   3220                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3221                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3222                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00002F6E   0x0038             MOVS     R0,R7
   \   00002F70   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002F72   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00002F76   0x4683             MOV      R11,R0
   \   00002F78   0x0038             MOVS     R0,R7
   \   00002F7A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002F7C   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00002F80   0x4681             MOV      R9,R0
   \   00002F82   0x0038             MOVS     R0,R7
   \   00002F84   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002F86   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00002F8A   0x4682             MOV      R10,R0
   \   00002F8C   0x4658             MOV      R0,R11
   \   00002F8E   0x.... 0x....      BL       __aeabi_f2d
   \   00002F92   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00002F96   0x4648             MOV      R0,R9
   \   00002F98   0x.... 0x....      BL       __aeabi_f2d
   \   00002F9C   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00002FA0   0x4652             MOV      R2,R10
   \   00002FA2   0xF8DF 0x1EE4      LDR.W    R1,??RoadBrd_ParseString_534
   \   00002FA6   0xA80B             ADD      R0,SP,#+44
   \   00002FA8   0x.... 0x....      BL       sprintf
   3223                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002FAC   0xA80B             ADD      R0,SP,#+44
   \   00002FAE   0x.... 0x....      BL       strlen
   \   00002FB2   0xA90B             ADD      R1,SP,#+44
   \   00002FB4   0x.... 0x....      BL       BGM111_Transmit
   3224                                        }
   3225                                        sprintf( (char *)tempBffr2, "%s	0002		%1.4f		%2.3f\r\n", 
   3226                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3227                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3228                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_533: (+1)
   \   00002FB8   0x0038             MOVS     R0,R7
   \   00002FBA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002FBC   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00002FC0   0x4683             MOV      R11,R0
   \   00002FC2   0x0038             MOVS     R0,R7
   \   00002FC4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002FC6   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00002FCA   0x4681             MOV      R9,R0
   \   00002FCC   0x0038             MOVS     R0,R7
   \   00002FCE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002FD0   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00002FD4   0x4682             MOV      R10,R0
   \   00002FD6   0x4658             MOV      R0,R11
   \   00002FD8   0x.... 0x....      BL       __aeabi_f2d
   \   00002FDC   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00002FE0   0x4648             MOV      R0,R9
   \   00002FE2   0x.... 0x....      BL       __aeabi_f2d
   \   00002FE6   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00002FEA   0x4652             MOV      R2,R10
   \   00002FEC   0xF8DF 0x1EF4      LDR.W    R1,??RoadBrd_ParseString_535
   \   00002FF0   0xA80B             ADD      R0,SP,#+44
   \   00002FF2   0x.... 0x....      BL       sprintf
   3229                                        break;
   \   00002FF6   0xF000 0xBED0      B.W      ??RoadBrd_ParseString_532
   \   00002FFA   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_377:
   \   00002FFC   0x........         DC32     ?_127
   \   00003000   0x........         DC32     ?_128
   \   00003004   0x........         DC32     ?_129
   \   00003008   0x........         DC32     ?_130
   \   0000300C   0x........         DC32     ?_131
   \   00003010   0x........         DC32     ?_132
   \   00003014   0x........         DC32     ?_133
   3230                                      case CAL_CURRENT: //CAL_CURRENT Values
   3231                                        // Is this a BLE Operation?
   3232                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_512: (+1)
   \   00003018   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000301A   0x2D00             CMP      R5,#+0
   \   0000301C   0xD024             BEQ.N    ??RoadBrd_ParseString_536
   3233                                        {
   3234                                          // Yes...Build and Send BLE Response NOW.
   3235                                          sprintf( (char *)tempBffr2, "%s:0004//%1.4f//%2.3f//", 
   3236                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3237                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3238                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   0000301E   0x0038             MOVS     R0,R7
   \   00003020   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003022   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003026   0x4683             MOV      R11,R0
   \   00003028   0x0038             MOVS     R0,R7
   \   0000302A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000302C   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003030   0x4681             MOV      R9,R0
   \   00003032   0x0038             MOVS     R0,R7
   \   00003034   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003036   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   0000303A   0x4682             MOV      R10,R0
   \   0000303C   0x4658             MOV      R0,R11
   \   0000303E   0x.... 0x....      BL       __aeabi_f2d
   \   00003042   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003046   0x4648             MOV      R0,R9
   \   00003048   0x.... 0x....      BL       __aeabi_f2d
   \   0000304C   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003050   0x4652             MOV      R2,R10
   \   00003052   0xF8DF 0x1EF8      LDR.W    R1,??RoadBrd_ParseString_537
   \   00003056   0xA80B             ADD      R0,SP,#+44
   \   00003058   0x.... 0x....      BL       sprintf
   3239                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000305C   0xA80B             ADD      R0,SP,#+44
   \   0000305E   0x.... 0x....      BL       strlen
   \   00003062   0xA90B             ADD      R1,SP,#+44
   \   00003064   0x.... 0x....      BL       BGM111_Transmit
   3240                                        }
   3241                                        sprintf( (char *)tempBffr2, "%s	        0004		%1.4f		%2.3f\r\n", 
   3242                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3243                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3244                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_536: (+1)
   \   00003068   0x0038             MOVS     R0,R7
   \   0000306A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000306C   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003070   0x4683             MOV      R11,R0
   \   00003072   0x0038             MOVS     R0,R7
   \   00003074   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003076   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   0000307A   0x4681             MOV      R9,R0
   \   0000307C   0x0038             MOVS     R0,R7
   \   0000307E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003080   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003084   0x4682             MOV      R10,R0
   \   00003086   0x4658             MOV      R0,R11
   \   00003088   0x.... 0x....      BL       __aeabi_f2d
   \   0000308C   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003090   0x4648             MOV      R0,R9
   \   00003092   0x.... 0x....      BL       __aeabi_f2d
   \   00003096   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000309A   0x4652             MOV      R2,R10
   \   0000309C   0xF8DF 0x1EE4      LDR.W    R1,??RoadBrd_ParseString_538
   \   000030A0   0xA80B             ADD      R0,SP,#+44
   \   000030A2   0x.... 0x....      BL       sprintf
   3245                                        break;
   \   000030A6   0xF000 0xBE78      B.W      ??RoadBrd_ParseString_532
   \   000030AA   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_383:
   \   000030AC   0x........         DC32     ?_134
   \   000030B0   0x........         DC32     ?_135
   \   000030B4   0x........         DC32     ?_136
   \   000030B8   0x........         DC32     ?_137
   3246                                      case CAL_POWER: //CAL_POWER Values
   3247                                        // Is this a BLE Operation?
   3248                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_511: (+1)
   \   000030BC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000030BE   0x2D00             CMP      R5,#+0
   \   000030C0   0xD024             BEQ.N    ??RoadBrd_ParseString_539
   3249                                        {
   3250                                          // Yes...Build and Send BLE Response NOW.
   3251                                          sprintf( (char *)tempBffr2, "%s:0006//%1.4f//%2.3f//", 
   3252                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3253                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3254                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   000030C2   0x0038             MOVS     R0,R7
   \   000030C4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000030C6   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000030CA   0x4683             MOV      R11,R0
   \   000030CC   0x0038             MOVS     R0,R7
   \   000030CE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000030D0   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000030D4   0x4681             MOV      R9,R0
   \   000030D6   0x0038             MOVS     R0,R7
   \   000030D8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000030DA   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000030DE   0x4682             MOV      R10,R0
   \   000030E0   0x4658             MOV      R0,R11
   \   000030E2   0x.... 0x....      BL       __aeabi_f2d
   \   000030E6   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000030EA   0x4648             MOV      R0,R9
   \   000030EC   0x.... 0x....      BL       __aeabi_f2d
   \   000030F0   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000030F4   0x4652             MOV      R2,R10
   \   000030F6   0xF8DF 0x1EC4      LDR.W    R1,??RoadBrd_ParseString_540
   \   000030FA   0xA80B             ADD      R0,SP,#+44
   \   000030FC   0x.... 0x....      BL       sprintf
   3255                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003100   0xA80B             ADD      R0,SP,#+44
   \   00003102   0x.... 0x....      BL       strlen
   \   00003106   0xA90B             ADD      R1,SP,#+44
   \   00003108   0x.... 0x....      BL       BGM111_Transmit
   3256                                        }
   3257                                        sprintf( (char *)tempBffr2, "%s	0006		%1.4f		%2.3f\r\n", 
   3258                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3259                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3260                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_539: (+1)
   \   0000310C   0x0038             MOVS     R0,R7
   \   0000310E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003110   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003114   0x4683             MOV      R11,R0
   \   00003116   0x0038             MOVS     R0,R7
   \   00003118   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000311A   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   0000311E   0x4681             MOV      R9,R0
   \   00003120   0x0038             MOVS     R0,R7
   \   00003122   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003124   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003128   0x4682             MOV      R10,R0
   \   0000312A   0x4658             MOV      R0,R11
   \   0000312C   0x.... 0x....      BL       __aeabi_f2d
   \   00003130   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003134   0x4648             MOV      R0,R9
   \   00003136   0x.... 0x....      BL       __aeabi_f2d
   \   0000313A   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000313E   0x4652             MOV      R2,R10
   \   00003140   0xF8DF 0x1ED4      LDR.W    R1,??RoadBrd_ParseString_541
   \   00003144   0xA80B             ADD      R0,SP,#+44
   \   00003146   0x.... 0x....      BL       sprintf
   3261                                        break;
   \   0000314A   0xF000 0xBE26      B.W      ??RoadBrd_ParseString_532
   \   0000314E   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_393:
   \   00003150   0x........         DC32     ?_138
   \   00003154   0x........         DC32     ?_139
   \   00003158   0x........         DC32     ?_140
   \   0000315C   0x........         DC32     ?_141
   \   00003160   0x........         DC32     ?_142
   3262                                      case CAL_VOLTAGE: //CAL_VOLTAGE Values
   3263                                        // Is this a BLE Operation?
   3264                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_514: (+1)
   \   00003164   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003166   0x2D00             CMP      R5,#+0
   \   00003168   0xD024             BEQ.N    ??RoadBrd_ParseString_542
   3265                                        {
   3266                                          // Yes...Build and Send BLE Response NOW.
   3267                                          sprintf( (char *)tempBffr2, "%s:0008//%1.4f//%2.3f//", 
   3268                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3269                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3270                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   0000316A   0x0038             MOVS     R0,R7
   \   0000316C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000316E   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003172   0x4683             MOV      R11,R0
   \   00003174   0x0038             MOVS     R0,R7
   \   00003176   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003178   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   0000317C   0x4681             MOV      R9,R0
   \   0000317E   0x0038             MOVS     R0,R7
   \   00003180   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003182   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003186   0x4682             MOV      R10,R0
   \   00003188   0x4658             MOV      R0,R11
   \   0000318A   0x.... 0x....      BL       __aeabi_f2d
   \   0000318E   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003192   0x4648             MOV      R0,R9
   \   00003194   0x.... 0x....      BL       __aeabi_f2d
   \   00003198   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000319C   0x4652             MOV      R2,R10
   \   0000319E   0xF8DF 0x1E7C      LDR.W    R1,??RoadBrd_ParseString_541+0x4
   \   000031A2   0xA80B             ADD      R0,SP,#+44
   \   000031A4   0x.... 0x....      BL       sprintf
   3271                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000031A8   0xA80B             ADD      R0,SP,#+44
   \   000031AA   0x.... 0x....      BL       strlen
   \   000031AE   0xA90B             ADD      R1,SP,#+44
   \   000031B0   0x.... 0x....      BL       BGM111_Transmit
   3272                                        }
   3273                                        sprintf( (char *)tempBffr2, "%s	        0008		%1.4f		%2.3f\r\n", 
   3274                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3275                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3276                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_542: (+1)
   \   000031B4   0x0038             MOVS     R0,R7
   \   000031B6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000031B8   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000031BC   0x4683             MOV      R11,R0
   \   000031BE   0x0038             MOVS     R0,R7
   \   000031C0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000031C2   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000031C6   0x4681             MOV      R9,R0
   \   000031C8   0x0038             MOVS     R0,R7
   \   000031CA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000031CC   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000031D0   0x4682             MOV      R10,R0
   \   000031D2   0x4658             MOV      R0,R11
   \   000031D4   0x.... 0x....      BL       __aeabi_f2d
   \   000031D8   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000031DC   0x4648             MOV      R0,R9
   \   000031DE   0x.... 0x....      BL       __aeabi_f2d
   \   000031E2   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000031E6   0x4652             MOV      R2,R10
   \   000031E8   0xF8DF 0x1EDC      LDR.W    R1,??RoadBrd_ParseString_543
   \   000031EC   0xA80B             ADD      R0,SP,#+44
   \   000031EE   0x.... 0x....      BL       sprintf
   3277                                        break;
   \   000031F2   0xF000 0xBDD2      B.W      ??RoadBrd_ParseString_532
   \   000031F6   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_398:
   \   000031F8   0x........         DC32     ?_143
   \   000031FC   0x........         DC32     ?_144
   \   00003200   0x........         DC32     ?_145
   \   00003204   0x........         DC32     ?_146
   \   00003208   0x........         DC32     ?_147
   \   0000320C   0x........         DC32     ?_148
   3278                                      case CAL_TEMPC: //CAL_TEMPC Values
   3279                                        // Is this a BLE Operation?
   3280                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_513: (+1)
   \   00003210   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003212   0x2D00             CMP      R5,#+0
   \   00003214   0xD024             BEQ.N    ??RoadBrd_ParseString_544
   3281                                        {
   3282                                          // Yes...Build and Send BLE Response NOW.
   3283                                          sprintf( (char *)tempBffr2, "%s:000A//%1.4f//%2.3f//", 
   3284                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3285                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3286                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003216   0x0038             MOVS     R0,R7
   \   00003218   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000321A   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   0000321E   0x4683             MOV      R11,R0
   \   00003220   0x0038             MOVS     R0,R7
   \   00003222   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003224   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003228   0x4681             MOV      R9,R0
   \   0000322A   0x0038             MOVS     R0,R7
   \   0000322C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000322E   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003232   0x4682             MOV      R10,R0
   \   00003234   0x4658             MOV      R0,R11
   \   00003236   0x.... 0x....      BL       __aeabi_f2d
   \   0000323A   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   0000323E   0x4648             MOV      R0,R9
   \   00003240   0x.... 0x....      BL       __aeabi_f2d
   \   00003244   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003248   0x4652             MOV      R2,R10
   \   0000324A   0xF8DF 0x1E80      LDR.W    R1,??RoadBrd_ParseString_543+0x4
   \   0000324E   0xA80B             ADD      R0,SP,#+44
   \   00003250   0x.... 0x....      BL       sprintf
   3287                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003254   0xA80B             ADD      R0,SP,#+44
   \   00003256   0x.... 0x....      BL       strlen
   \   0000325A   0xA90B             ADD      R1,SP,#+44
   \   0000325C   0x.... 0x....      BL       BGM111_Transmit
   3288                                        }
   3289                                        sprintf( (char *)tempBffr2, "%s	000A		%1.4f		%2.3f\r\n", 
   3290                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3291                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3292                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_544: (+1)
   \   00003260   0x0038             MOVS     R0,R7
   \   00003262   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003264   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003268   0x4683             MOV      R11,R0
   \   0000326A   0x0038             MOVS     R0,R7
   \   0000326C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000326E   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003272   0x4681             MOV      R9,R0
   \   00003274   0x0038             MOVS     R0,R7
   \   00003276   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003278   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   0000327C   0x4682             MOV      R10,R0
   \   0000327E   0x4658             MOV      R0,R11
   \   00003280   0x.... 0x....      BL       __aeabi_f2d
   \   00003284   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003288   0x4648             MOV      R0,R9
   \   0000328A   0x.... 0x....      BL       __aeabi_f2d
   \   0000328E   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003292   0x4652             MOV      R2,R10
   \   00003294   0xF8DF 0x1E94      LDR.W    R1,??RoadBrd_ParseString_545
   \   00003298   0xA80B             ADD      R0,SP,#+44
   \   0000329A   0x.... 0x....      BL       sprintf
   3293                                        break;
   \   0000329E   0xF000 0xBD7C      B.W      ??RoadBrd_ParseString_532
   \   000032A2   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_404:
   \   000032A4   0x........         DC32     ?_149
   \   000032A8   0x........         DC32     ?_150
   \   000032AC   0x........         DC32     ?_151
   \   000032B0   0x........         DC32     ?_152
   \   000032B4   0x........         DC32     ?_153
   3294                                      case CAL_TEMPF: //CAL_TEMPF Values
   3295                                        // Is this a BLE Operation?
   3296                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_516: (+1)
   \   000032B8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000032BA   0x2D00             CMP      R5,#+0
   \   000032BC   0xD024             BEQ.N    ??RoadBrd_ParseString_546
   3297                                        {
   3298                                          // Yes...Build and Send BLE Response NOW.
   3299                                          sprintf( (char *)tempBffr2, "%s:000B//%1.4f//%2.3f//", 
   3300                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3301                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3302                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   000032BE   0x0038             MOVS     R0,R7
   \   000032C0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000032C2   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000032C6   0x4683             MOV      R11,R0
   \   000032C8   0x0038             MOVS     R0,R7
   \   000032CA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000032CC   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000032D0   0x4681             MOV      R9,R0
   \   000032D2   0x0038             MOVS     R0,R7
   \   000032D4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000032D6   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000032DA   0x4682             MOV      R10,R0
   \   000032DC   0x4658             MOV      R0,R11
   \   000032DE   0x.... 0x....      BL       __aeabi_f2d
   \   000032E2   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000032E6   0x4648             MOV      R0,R9
   \   000032E8   0x.... 0x....      BL       __aeabi_f2d
   \   000032EC   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000032F0   0x4652             MOV      R2,R10
   \   000032F2   0xF8DF 0x1E3C      LDR.W    R1,??RoadBrd_ParseString_545+0x4
   \   000032F6   0xA80B             ADD      R0,SP,#+44
   \   000032F8   0x.... 0x....      BL       sprintf
   3303                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000032FC   0xA80B             ADD      R0,SP,#+44
   \   000032FE   0x.... 0x....      BL       strlen
   \   00003302   0xA90B             ADD      R1,SP,#+44
   \   00003304   0x.... 0x....      BL       BGM111_Transmit
   3304                                        }
   3305                                        sprintf( (char *)tempBffr2, "%s	000B		%1.4f		%2.3f\r\n", 
   3306                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3307                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3308                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_546: (+1)
   \   00003308   0x0038             MOVS     R0,R7
   \   0000330A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000330C   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003310   0x4683             MOV      R11,R0
   \   00003312   0x0038             MOVS     R0,R7
   \   00003314   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003316   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   0000331A   0x4681             MOV      R9,R0
   \   0000331C   0x0038             MOVS     R0,R7
   \   0000331E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003320   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003324   0x4682             MOV      R10,R0
   \   00003326   0x4658             MOV      R0,R11
   \   00003328   0x.... 0x....      BL       __aeabi_f2d
   \   0000332C   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003330   0x4648             MOV      R0,R9
   \   00003332   0x.... 0x....      BL       __aeabi_f2d
   \   00003336   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000333A   0x4652             MOV      R2,R10
   \   0000333C   0xF8DF 0x1DF4      LDR.W    R1,??RoadBrd_ParseString_545+0x8
   \   00003340   0xA80B             ADD      R0,SP,#+44
   \   00003342   0x.... 0x....      BL       sprintf
   3309                                        break;
   \   00003346   0xF000 0xBD28      B.W      ??RoadBrd_ParseString_532
   \   0000334A   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_410:
   \   0000334C   0x........         DC32     ?_154
   \   00003350   0x........         DC32     ?_155
   \   00003354   0x........         DC32     ?_156
   \   00003358   0x........         DC32     ?_157
   \   0000335C   0x........         DC32     ?_158
   3310                                      case CAL_PRESSURE: //CAL_PRESSURE Values
   3311                                        // Is this a BLE Operation?
   3312                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_515: (+1)
   \   00003360   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003362   0x2D00             CMP      R5,#+0
   \   00003364   0xD024             BEQ.N    ??RoadBrd_ParseString_547
   3313                                        {
   3314                                          // Yes...Build and Send BLE Response NOW.
   3315                                          sprintf( (char *)tempBffr2, "%s:0011//%1.4f//%2.3f//", 
   3316                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3317                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3318                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003366   0x0038             MOVS     R0,R7
   \   00003368   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000336A   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   0000336E   0x4683             MOV      R11,R0
   \   00003370   0x0038             MOVS     R0,R7
   \   00003372   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003374   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003378   0x4681             MOV      R9,R0
   \   0000337A   0x0038             MOVS     R0,R7
   \   0000337C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000337E   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003382   0x4682             MOV      R10,R0
   \   00003384   0x4658             MOV      R0,R11
   \   00003386   0x.... 0x....      BL       __aeabi_f2d
   \   0000338A   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   0000338E   0x4648             MOV      R0,R9
   \   00003390   0x.... 0x....      BL       __aeabi_f2d
   \   00003394   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003398   0x4652             MOV      R2,R10
   \   0000339A   0xF8DF 0x1EA0      LDR.W    R1,??RoadBrd_ParseString_548
   \   0000339E   0xA80B             ADD      R0,SP,#+44
   \   000033A0   0x.... 0x....      BL       sprintf
   3319                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000033A4   0xA80B             ADD      R0,SP,#+44
   \   000033A6   0x.... 0x....      BL       strlen
   \   000033AA   0xA90B             ADD      R1,SP,#+44
   \   000033AC   0x.... 0x....      BL       BGM111_Transmit
   3320                                        }
   3321                                        sprintf( (char *)tempBffr2, "%s	0011		%1.4f		%2.3f\r\n", 
   3322                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3323                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3324                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_547: (+1)
   \   000033B0   0x0038             MOVS     R0,R7
   \   000033B2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000033B4   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000033B8   0x4683             MOV      R11,R0
   \   000033BA   0x0038             MOVS     R0,R7
   \   000033BC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000033BE   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000033C2   0x4681             MOV      R9,R0
   \   000033C4   0x0038             MOVS     R0,R7
   \   000033C6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000033C8   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000033CC   0x4682             MOV      R10,R0
   \   000033CE   0x4658             MOV      R0,R11
   \   000033D0   0x.... 0x....      BL       __aeabi_f2d
   \   000033D4   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000033D8   0x4648             MOV      R0,R9
   \   000033DA   0x.... 0x....      BL       __aeabi_f2d
   \   000033DE   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000033E2   0x4652             MOV      R2,R10
   \   000033E4   0xF8DF 0x1E58      LDR.W    R1,??RoadBrd_ParseString_548+0x4
   \   000033E8   0xA80B             ADD      R0,SP,#+44
   \   000033EA   0x.... 0x....      BL       sprintf
   3325                                        break;
   \   000033EE   0xF000 0xBCD4      B.W      ??RoadBrd_ParseString_532
   \   000033F2   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_415:
   \   000033F4   0x........         DC32     ?_159
   \   000033F8   0x........         DC32     ?_160
   \   000033FC   0x........         DC32     ?_161
   \   00003400   0x........         DC32     ?_162
   \   00003404   0x........         DC32     ?_163
   3326                                      case CAL_HUMIDITY: //CAL_HUMIDITY Values
   3327                                        // Is this a BLE Operation?
   3328                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_518: (+1)
   \   00003408   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000340A   0x2D00             CMP      R5,#+0
   \   0000340C   0xD024             BEQ.N    ??RoadBrd_ParseString_549
   3329                                        {
   3330                                          // Yes...Build and Send BLE Response NOW.
   3331                                          sprintf( (char *)tempBffr2, "%s:0030//%1.4f//%2.3f//", 
   3332                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3333                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3334                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   0000340E   0x0038             MOVS     R0,R7
   \   00003410   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003412   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003416   0x4683             MOV      R11,R0
   \   00003418   0x0038             MOVS     R0,R7
   \   0000341A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000341C   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003420   0x4681             MOV      R9,R0
   \   00003422   0x0038             MOVS     R0,R7
   \   00003424   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003426   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   0000342A   0x4682             MOV      R10,R0
   \   0000342C   0x4658             MOV      R0,R11
   \   0000342E   0x.... 0x....      BL       __aeabi_f2d
   \   00003432   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003436   0x4648             MOV      R0,R9
   \   00003438   0x.... 0x....      BL       __aeabi_f2d
   \   0000343C   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003440   0x4652             MOV      R2,R10
   \   00003442   0xF8DF 0x1E5C      LDR.W    R1,??RoadBrd_ParseString_550
   \   00003446   0xA80B             ADD      R0,SP,#+44
   \   00003448   0x.... 0x....      BL       sprintf
   3335                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000344C   0xA80B             ADD      R0,SP,#+44
   \   0000344E   0x.... 0x....      BL       strlen
   \   00003452   0xA90B             ADD      R1,SP,#+44
   \   00003454   0x.... 0x....      BL       BGM111_Transmit
   3336                                        }
   3337                                        sprintf( (char *)tempBffr2, "%s	0030		%1.4f		%2.3f\r\n", 
   3338                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3339                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3340                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_549: (+1)
   \   00003458   0x0038             MOVS     R0,R7
   \   0000345A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000345C   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003460   0x4683             MOV      R11,R0
   \   00003462   0x0038             MOVS     R0,R7
   \   00003464   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003466   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   0000346A   0x4681             MOV      R9,R0
   \   0000346C   0x0038             MOVS     R0,R7
   \   0000346E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003470   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003474   0x4682             MOV      R10,R0
   \   00003476   0x4658             MOV      R0,R11
   \   00003478   0x.... 0x....      BL       __aeabi_f2d
   \   0000347C   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003480   0x4648             MOV      R0,R9
   \   00003482   0x.... 0x....      BL       __aeabi_f2d
   \   00003486   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000348A   0x4652             MOV      R2,R10
   \   0000348C   0xF8DF 0x1E60      LDR.W    R1,??RoadBrd_ParseString_551
   \   00003490   0xA80B             ADD      R0,SP,#+44
   \   00003492   0x.... 0x....      BL       sprintf
   3341                                        break;
   \   00003496   0xF000 0xBC80      B.W      ??RoadBrd_ParseString_532
   \   0000349A   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_423:
   \   0000349C   0x........         DC32     ?_164
   \   000034A0   0x........         DC32     ?_165
   \   000034A4   0x........         DC32     ?_166
   \   000034A8   0x........         DC32     ?_167
   \   000034AC   0x........         DC32     ?_168
   3342                                      case CAL_HUM_TEMPC: //CAL_HUM_TEMPC Values
   3343                                        // Is this a BLE Operation?
   3344                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_517: (+1)
   \   000034B0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000034B2   0x2D00             CMP      R5,#+0
   \   000034B4   0xD024             BEQ.N    ??RoadBrd_ParseString_552
   3345                                        {
   3346                                          // Yes...Build and Send BLE Response NOW.
   3347                                          sprintf( (char *)tempBffr2, "%s:0032//%1.4f//%2.3f//", 
   3348                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3349                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3350                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   000034B6   0x0038             MOVS     R0,R7
   \   000034B8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000034BA   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000034BE   0x4683             MOV      R11,R0
   \   000034C0   0x0038             MOVS     R0,R7
   \   000034C2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000034C4   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000034C8   0x4681             MOV      R9,R0
   \   000034CA   0x0038             MOVS     R0,R7
   \   000034CC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000034CE   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000034D2   0x4682             MOV      R10,R0
   \   000034D4   0x4658             MOV      R0,R11
   \   000034D6   0x.... 0x....      BL       __aeabi_f2d
   \   000034DA   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000034DE   0x4648             MOV      R0,R9
   \   000034E0   0x.... 0x....      BL       __aeabi_f2d
   \   000034E4   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000034E8   0x4652             MOV      R2,R10
   \   000034EA   0xF8DF 0x1E64      LDR.W    R1,??RoadBrd_ParseString_553
   \   000034EE   0xA80B             ADD      R0,SP,#+44
   \   000034F0   0x.... 0x....      BL       sprintf
   3351                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000034F4   0xA80B             ADD      R0,SP,#+44
   \   000034F6   0x.... 0x....      BL       strlen
   \   000034FA   0xA90B             ADD      R1,SP,#+44
   \   000034FC   0x.... 0x....      BL       BGM111_Transmit
   3352                                        }
   3353                                        sprintf( (char *)tempBffr2, "%s	0032		%1.4f		%2.3f\r\n", 
   3354                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3355                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3356                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_552: (+1)
   \   00003500   0x0038             MOVS     R0,R7
   \   00003502   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003504   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003508   0x4683             MOV      R11,R0
   \   0000350A   0x0038             MOVS     R0,R7
   \   0000350C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000350E   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003512   0x4681             MOV      R9,R0
   \   00003514   0x0038             MOVS     R0,R7
   \   00003516   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003518   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   0000351C   0x4682             MOV      R10,R0
   \   0000351E   0x4658             MOV      R0,R11
   \   00003520   0x.... 0x....      BL       __aeabi_f2d
   \   00003524   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003528   0x4648             MOV      R0,R9
   \   0000352A   0x.... 0x....      BL       __aeabi_f2d
   \   0000352E   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003532   0x4652             MOV      R2,R10
   \   00003534   0xF8DF 0x1E1C      LDR.W    R1,??RoadBrd_ParseString_553+0x4
   \   00003538   0xA80B             ADD      R0,SP,#+44
   \   0000353A   0x.... 0x....      BL       sprintf
   3357                                        break;
   \   0000353E   0xF000 0xBC2C      B.W      ??RoadBrd_ParseString_532
   \   00003542   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_428:
   \   00003544   0x........         DC32     ?_169
   \   00003548   0x........         DC32     ?_170
   \   0000354C   0x........         DC32     ?_171
   \   00003550   0x........         DC32     ?_172
   \   00003554   0x........         DC32     ?_173
   3358                                      case CAL_HUM_TEMPF: //CAL_HUM_TEMPF Values
   3359                                        // Is this a BLE Operation?
   3360                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_520: (+1)
   \   00003558   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000355A   0x2D00             CMP      R5,#+0
   \   0000355C   0xD024             BEQ.N    ??RoadBrd_ParseString_554
   3361                                        {
   3362                                          // Yes...Build and Send BLE Response NOW.
   3363                                          sprintf( (char *)tempBffr2, "%s:0033//%1.4f//%2.3f//", 
   3364                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3365                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3366                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   0000355E   0x0038             MOVS     R0,R7
   \   00003560   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003562   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003566   0x4683             MOV      R11,R0
   \   00003568   0x0038             MOVS     R0,R7
   \   0000356A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000356C   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003570   0x4681             MOV      R9,R0
   \   00003572   0x0038             MOVS     R0,R7
   \   00003574   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003576   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   0000357A   0x4682             MOV      R10,R0
   \   0000357C   0x4658             MOV      R0,R11
   \   0000357E   0x.... 0x....      BL       __aeabi_f2d
   \   00003582   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003586   0x4648             MOV      R0,R9
   \   00003588   0x.... 0x....      BL       __aeabi_f2d
   \   0000358C   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003590   0x4652             MOV      R2,R10
   \   00003592   0xF8DF 0x1E6C      LDR.W    R1,??RoadBrd_ParseString_555
   \   00003596   0xA80B             ADD      R0,SP,#+44
   \   00003598   0x.... 0x....      BL       sprintf
   3367                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000359C   0xA80B             ADD      R0,SP,#+44
   \   0000359E   0x.... 0x....      BL       strlen
   \   000035A2   0xA90B             ADD      R1,SP,#+44
   \   000035A4   0x.... 0x....      BL       BGM111_Transmit
   3368                                        }
   3369                                        sprintf( (char *)tempBffr2, "%s	0033		%1.4f		%2.3f\r\n", 
   3370                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3371                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3372                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_554: (+1)
   \   000035A8   0x0038             MOVS     R0,R7
   \   000035AA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000035AC   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000035B0   0x4683             MOV      R11,R0
   \   000035B2   0x0038             MOVS     R0,R7
   \   000035B4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000035B6   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000035BA   0x4681             MOV      R9,R0
   \   000035BC   0x0038             MOVS     R0,R7
   \   000035BE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000035C0   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000035C4   0x4682             MOV      R10,R0
   \   000035C6   0x4658             MOV      R0,R11
   \   000035C8   0x.... 0x....      BL       __aeabi_f2d
   \   000035CC   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000035D0   0x4648             MOV      R0,R9
   \   000035D2   0x.... 0x....      BL       __aeabi_f2d
   \   000035D6   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000035DA   0x4652             MOV      R2,R10
   \   000035DC   0xF8DF 0x1E60      LDR.W    R1,??RoadBrd_ParseString_556
   \   000035E0   0xA80B             ADD      R0,SP,#+44
   \   000035E2   0x.... 0x....      BL       sprintf
   3373                                        break;
   \   000035E6   0xE3D8             B.N      ??RoadBrd_ParseString_532
   \                     ??RoadBrd_ParseString_434:
   \   000035E8   0x........         DC32     ?_174
   \   000035EC   0x........         DC32     ?_175
   \   000035F0   0x........         DC32     ?_176
   \   000035F4   0x........         DC32     ?_177
   \   000035F8   0x........         DC32     ?_178
   3374                                      case CAL_RGB_RED: //CAL_RGB_RED Values
   3375                                        // Is this a BLE Operation?
   3376                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_519: (+1)
   \   000035FC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000035FE   0x2D00             CMP      R5,#+0
   \   00003600   0xD024             BEQ.N    ??RoadBrd_ParseString_557
   3377                                        {
   3378                                          // Yes...Build and Send BLE Response NOW.
   3379                                          sprintf( (char *)tempBffr2, "%s:000D//%1.4f//%2.3f//", 
   3380                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3381                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3382                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003602   0x0038             MOVS     R0,R7
   \   00003604   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003606   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   0000360A   0x4683             MOV      R11,R0
   \   0000360C   0x0038             MOVS     R0,R7
   \   0000360E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003610   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003614   0x4681             MOV      R9,R0
   \   00003616   0x0038             MOVS     R0,R7
   \   00003618   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000361A   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   0000361E   0x4682             MOV      R10,R0
   \   00003620   0x4658             MOV      R0,R11
   \   00003622   0x.... 0x....      BL       __aeabi_f2d
   \   00003626   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   0000362A   0x4648             MOV      R0,R9
   \   0000362C   0x.... 0x....      BL       __aeabi_f2d
   \   00003630   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003634   0x4652             MOV      R2,R10
   \   00003636   0xF8DF 0x1E0C      LDR.W    R1,??RoadBrd_ParseString_556+0x4
   \   0000363A   0xA80B             ADD      R0,SP,#+44
   \   0000363C   0x.... 0x....      BL       sprintf
   3383                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003640   0xA80B             ADD      R0,SP,#+44
   \   00003642   0x.... 0x....      BL       strlen
   \   00003646   0xA90B             ADD      R1,SP,#+44
   \   00003648   0x.... 0x....      BL       BGM111_Transmit
   3384                                        }
   3385                                        sprintf( (char *)tempBffr2, "%s	        000D		%1.4f		%2.3f\r\n", 
   3386                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3387                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3388                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_557: (+1)
   \   0000364C   0x0038             MOVS     R0,R7
   \   0000364E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003650   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003654   0x4683             MOV      R11,R0
   \   00003656   0x0038             MOVS     R0,R7
   \   00003658   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000365A   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   0000365E   0x4681             MOV      R9,R0
   \   00003660   0x0038             MOVS     R0,R7
   \   00003662   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003664   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003668   0x4682             MOV      R10,R0
   \   0000366A   0x4658             MOV      R0,R11
   \   0000366C   0x.... 0x....      BL       __aeabi_f2d
   \   00003670   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003674   0x4648             MOV      R0,R9
   \   00003676   0x.... 0x....      BL       __aeabi_f2d
   \   0000367A   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000367E   0x4652             MOV      R2,R10
   \   00003680   0xF8DF 0x1E34      LDR.W    R1,??RoadBrd_ParseString_558
   \   00003684   0xA80B             ADD      R0,SP,#+44
   \   00003686   0x.... 0x....      BL       sprintf
   3389                                        break;
   \   0000368A   0xE386             B.N      ??RoadBrd_ParseString_532
   \                     ??RoadBrd_ParseString_439:
   \   0000368C   0x........         DC32     ?_179
   \   00003690   0x........         DC32     ?_180
   \   00003694   0x........         DC32     ?_181
   \   00003698   0x........         DC32     ?_182
   \   0000369C   0x........         DC32     ?_183
   3390                                      case CAL_RGB_GREEN: //CAL_RGB_GREEN Values
   3391                                        // Is this a BLE Operation?
   3392                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_522: (+1)
   \   000036A0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000036A2   0x2D00             CMP      R5,#+0
   \   000036A4   0xD024             BEQ.N    ??RoadBrd_ParseString_559
   3393                                        {
   3394                                          // Yes...Build and Send BLE Response NOW.
   3395                                          sprintf( (char *)tempBffr2, "%s:000E//%1.4f//%2.3f//", 
   3396                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3397                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3398                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   000036A6   0x0038             MOVS     R0,R7
   \   000036A8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000036AA   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000036AE   0x4683             MOV      R11,R0
   \   000036B0   0x0038             MOVS     R0,R7
   \   000036B2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000036B4   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000036B8   0x4681             MOV      R9,R0
   \   000036BA   0x0038             MOVS     R0,R7
   \   000036BC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000036BE   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000036C2   0x4682             MOV      R10,R0
   \   000036C4   0x4658             MOV      R0,R11
   \   000036C6   0x.... 0x....      BL       __aeabi_f2d
   \   000036CA   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000036CE   0x4648             MOV      R0,R9
   \   000036D0   0x.... 0x....      BL       __aeabi_f2d
   \   000036D4   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000036D8   0x4652             MOV      R2,R10
   \   000036DA   0xF8DF 0x1E38      LDR.W    R1,??RoadBrd_ParseString_560
   \   000036DE   0xA80B             ADD      R0,SP,#+44
   \   000036E0   0x.... 0x....      BL       sprintf
   3399                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000036E4   0xA80B             ADD      R0,SP,#+44
   \   000036E6   0x.... 0x....      BL       strlen
   \   000036EA   0xA90B             ADD      R1,SP,#+44
   \   000036EC   0x.... 0x....      BL       BGM111_Transmit
   3400                                        }
   3401                                        sprintf( (char *)tempBffr2, "%s	000E		%1.4f		%2.3f\r\n", 
   3402                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3403                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3404                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_559: (+1)
   \   000036F0   0x0038             MOVS     R0,R7
   \   000036F2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000036F4   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000036F8   0x4683             MOV      R11,R0
   \   000036FA   0x0038             MOVS     R0,R7
   \   000036FC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000036FE   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003702   0x4681             MOV      R9,R0
   \   00003704   0x0038             MOVS     R0,R7
   \   00003706   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003708   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   0000370C   0x4682             MOV      R10,R0
   \   0000370E   0x4658             MOV      R0,R11
   \   00003710   0x.... 0x....      BL       __aeabi_f2d
   \   00003714   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003718   0x4648             MOV      R0,R9
   \   0000371A   0x.... 0x....      BL       __aeabi_f2d
   \   0000371E   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003722   0x4652             MOV      R2,R10
   \   00003724   0xF8DF 0x1E58      LDR.W    R1,??RoadBrd_ParseString_561
   \   00003728   0xA80B             ADD      R0,SP,#+44
   \   0000372A   0x.... 0x....      BL       sprintf
   3405                                        break;
   \   0000372E   0xE334             B.N      ??RoadBrd_ParseString_532
   \                     ??RoadBrd_ParseString_447:
   \   00003730   0x........         DC32     ?_184
   \   00003734   0x........         DC32     ?_185
   \   00003738   0x........         DC32     ?_186
   \   0000373C   0x........         DC32     ?_187
   \   00003740   0x........         DC32     ?_188
   3406                                      case CAL_RGB_BLUE: //CAL_RGB_BLUE Values
   3407                                        // Is this a BLE Operation?
   3408                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_521: (+1)
   \   00003744   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003746   0x2D00             CMP      R5,#+0
   \   00003748   0xD024             BEQ.N    ??RoadBrd_ParseString_562
   3409                                        {
   3410                                          // Yes...Build and Send BLE Response NOW.
   3411                                          sprintf( (char *)tempBffr2, "%s:000F//%1.4f//%2.3f//", 
   3412                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3413                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3414                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   0000374A   0x0038             MOVS     R0,R7
   \   0000374C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000374E   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003752   0x4683             MOV      R11,R0
   \   00003754   0x0038             MOVS     R0,R7
   \   00003756   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003758   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   0000375C   0x4681             MOV      R9,R0
   \   0000375E   0x0038             MOVS     R0,R7
   \   00003760   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003762   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003766   0x4682             MOV      R10,R0
   \   00003768   0x4658             MOV      R0,R11
   \   0000376A   0x.... 0x....      BL       __aeabi_f2d
   \   0000376E   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003772   0x4648             MOV      R0,R9
   \   00003774   0x.... 0x....      BL       __aeabi_f2d
   \   00003778   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000377C   0x4652             MOV      R2,R10
   \   0000377E   0xF8DF 0x1E2C      LDR.W    R1,??RoadBrd_ParseString_563
   \   00003782   0xA80B             ADD      R0,SP,#+44
   \   00003784   0x.... 0x....      BL       sprintf
   3415                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003788   0xA80B             ADD      R0,SP,#+44
   \   0000378A   0x.... 0x....      BL       strlen
   \   0000378E   0xA90B             ADD      R1,SP,#+44
   \   00003790   0x.... 0x....      BL       BGM111_Transmit
   3416                                        }
   3417                                        sprintf( (char *)tempBffr2, "%s	000F		%1.4f		%2.3f\r\n", 
   3418                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3419                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3420                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_562: (+1)
   \   00003794   0x0038             MOVS     R0,R7
   \   00003796   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003798   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   0000379C   0x4683             MOV      R11,R0
   \   0000379E   0x0038             MOVS     R0,R7
   \   000037A0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000037A2   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000037A6   0x4681             MOV      R9,R0
   \   000037A8   0x0038             MOVS     R0,R7
   \   000037AA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000037AC   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000037B0   0x4682             MOV      R10,R0
   \   000037B2   0x4658             MOV      R0,R11
   \   000037B4   0x.... 0x....      BL       __aeabi_f2d
   \   000037B8   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000037BC   0x4648             MOV      R0,R9
   \   000037BE   0x.... 0x....      BL       __aeabi_f2d
   \   000037C2   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000037C6   0x4652             MOV      R2,R10
   \   000037C8   0xF8DF 0x1E40      LDR.W    R1,??RoadBrd_ParseString_564
   \   000037CC   0xA80B             ADD      R0,SP,#+44
   \   000037CE   0x.... 0x....      BL       sprintf
   3421                                        break;
   \   000037D2   0xE2E2             B.N      ??RoadBrd_ParseString_532
   \                     ??RoadBrd_ParseString_452:
   \   000037D4   0x........         DC32     ?_189
   \   000037D8   0x........         DC32     ?_190
   \   000037DC   0x........         DC32     ?_191
   \   000037E0   0x........         DC32     ?_192
   \   000037E4   0x........         DC32     ?_193
   3422                                      case CAL_THERM_C: //CAL_THERM_C Values
   3423                                        // Is this a BLE Operation?
   3424                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_524: (+1)
   \   000037E8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000037EA   0x2D00             CMP      R5,#+0
   \   000037EC   0xD024             BEQ.N    ??RoadBrd_ParseString_565
   3425                                        {
   3426                                          // Yes...Build and Send BLE Response NOW.
   3427                                          sprintf( (char *)tempBffr2, "%s:0017//%1.4f//%2.3f//", 
   3428                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3429                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3430                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   000037EE   0x0038             MOVS     R0,R7
   \   000037F0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000037F2   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000037F6   0x4683             MOV      R11,R0
   \   000037F8   0x0038             MOVS     R0,R7
   \   000037FA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000037FC   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003800   0x4681             MOV      R9,R0
   \   00003802   0x0038             MOVS     R0,R7
   \   00003804   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003806   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   0000380A   0x4682             MOV      R10,R0
   \   0000380C   0x4658             MOV      R0,R11
   \   0000380E   0x.... 0x....      BL       __aeabi_f2d
   \   00003812   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003816   0x4648             MOV      R0,R9
   \   00003818   0x.... 0x....      BL       __aeabi_f2d
   \   0000381C   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003820   0x4652             MOV      R2,R10
   \   00003822   0xF8DF 0x1E28      LDR.W    R1,??RoadBrd_ParseString_566
   \   00003826   0xA80B             ADD      R0,SP,#+44
   \   00003828   0x.... 0x....      BL       sprintf
   3431                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000382C   0xA80B             ADD      R0,SP,#+44
   \   0000382E   0x.... 0x....      BL       strlen
   \   00003832   0xA90B             ADD      R1,SP,#+44
   \   00003834   0x.... 0x....      BL       BGM111_Transmit
   3432                                        }
   3433                                        sprintf( (char *)tempBffr2, "%s	        0017		%1.4f		%2.3f\r\n", 
   3434                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3435                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3436                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_565: (+1)
   \   00003838   0x0038             MOVS     R0,R7
   \   0000383A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000383C   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003840   0x4683             MOV      R11,R0
   \   00003842   0x0038             MOVS     R0,R7
   \   00003844   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003846   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   0000384A   0x4681             MOV      R9,R0
   \   0000384C   0x0038             MOVS     R0,R7
   \   0000384E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003850   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003854   0x4682             MOV      R10,R0
   \   00003856   0x4658             MOV      R0,R11
   \   00003858   0x.... 0x....      BL       __aeabi_f2d
   \   0000385C   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003860   0x4648             MOV      R0,R9
   \   00003862   0x.... 0x....      BL       __aeabi_f2d
   \   00003866   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000386A   0x4652             MOV      R2,R10
   \   0000386C   0xF8DF 0x1E38      LDR.W    R1,??RoadBrd_ParseString_567
   \   00003870   0xA80B             ADD      R0,SP,#+44
   \   00003872   0x.... 0x....      BL       sprintf
   3437                                        break;
   \   00003876   0xE290             B.N      ??RoadBrd_ParseString_532
   \                     ??RoadBrd_ParseString_458:
   \   00003878   0x........         DC32     ?_194
   \   0000387C   0x........         DC32     ?_195
   \   00003880   0x........         DC32     ?_196
   \   00003884   0x........         DC32     ?_197
   \   00003888   0x........         DC32     ?_198
   3438                                      case CAL_ROADT_1C: //CAL_ROADT_1C Values
   3439                                        // Is this a BLE Operation?
   3440                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_523: (+1)
   \   0000388C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000388E   0x2D00             CMP      R5,#+0
   \   00003890   0xD024             BEQ.N    ??RoadBrd_ParseString_568
   3441                                        {
   3442                                          // Yes...Build and Send BLE Response NOW.
   3443                                          sprintf( (char *)tempBffr2, "%s:0019//%1.4f//%2.3f//", 
   3444                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3445                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3446                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003892   0x0038             MOVS     R0,R7
   \   00003894   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003896   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   0000389A   0x4683             MOV      R11,R0
   \   0000389C   0x0038             MOVS     R0,R7
   \   0000389E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000038A0   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000038A4   0x4681             MOV      R9,R0
   \   000038A6   0x0038             MOVS     R0,R7
   \   000038A8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000038AA   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000038AE   0x4682             MOV      R10,R0
   \   000038B0   0x4658             MOV      R0,R11
   \   000038B2   0x.... 0x....      BL       __aeabi_f2d
   \   000038B6   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000038BA   0x4648             MOV      R0,R9
   \   000038BC   0x.... 0x....      BL       __aeabi_f2d
   \   000038C0   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000038C4   0x4652             MOV      R2,R10
   \   000038C6   0xF8DF 0x1E34      LDR.W    R1,??RoadBrd_ParseString_569
   \   000038CA   0xA80B             ADD      R0,SP,#+44
   \   000038CC   0x.... 0x....      BL       sprintf
   3447                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000038D0   0xA80B             ADD      R0,SP,#+44
   \   000038D2   0x.... 0x....      BL       strlen
   \   000038D6   0xA90B             ADD      R1,SP,#+44
   \   000038D8   0x.... 0x....      BL       BGM111_Transmit
   3448                                        }
   3449                                        sprintf( (char *)tempBffr2, "%s	0019		%1.4f		%2.3f\r\n", 
   3450                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3451                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3452                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_568: (+1)
   \   000038DC   0x0038             MOVS     R0,R7
   \   000038DE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000038E0   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000038E4   0x4683             MOV      R11,R0
   \   000038E6   0x0038             MOVS     R0,R7
   \   000038E8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000038EA   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000038EE   0x4681             MOV      R9,R0
   \   000038F0   0x0038             MOVS     R0,R7
   \   000038F2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000038F4   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000038F8   0x4682             MOV      R10,R0
   \   000038FA   0x4658             MOV      R0,R11
   \   000038FC   0x.... 0x....      BL       __aeabi_f2d
   \   00003900   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003904   0x4648             MOV      R0,R9
   \   00003906   0x.... 0x....      BL       __aeabi_f2d
   \   0000390A   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000390E   0x4652             MOV      R2,R10
   \   00003910   0xF8DF 0x1E18      LDR.W    R1,??RoadBrd_ParseString_570
   \   00003914   0xA80B             ADD      R0,SP,#+44
   \   00003916   0x.... 0x....      BL       sprintf
   3453                                        break;
   \   0000391A   0xE23E             B.N      ??RoadBrd_ParseString_532
   \                     ??RoadBrd_ParseString_463:
   \   0000391C   0x........         DC32     ?_199
   \   00003920   0x........         DC32     ?_200
   \   00003924   0x........         DC32     ?_201
   \   00003928   0x........         DC32     ?_202
   \   0000392C   0x........         DC32     ?_203
   3454                                      case CAL_ROADT_2C: //CAL_ROADT_2C Values
   3455                                        // Is this a BLE Operation?
   3456                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_526: (+1)
   \   00003930   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003932   0x2D00             CMP      R5,#+0
   \   00003934   0xD024             BEQ.N    ??RoadBrd_ParseString_571
   3457                                        {
   3458                                          // Yes...Build and Send BLE Response NOW.
   3459                                          sprintf( (char *)tempBffr2, "%s:001B//%1.4f//%2.3f//", 
   3460                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3461                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3462                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003936   0x0038             MOVS     R0,R7
   \   00003938   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000393A   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   0000393E   0x4683             MOV      R11,R0
   \   00003940   0x0038             MOVS     R0,R7
   \   00003942   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003944   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003948   0x4681             MOV      R9,R0
   \   0000394A   0x0038             MOVS     R0,R7
   \   0000394C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000394E   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003952   0x4682             MOV      R10,R0
   \   00003954   0x4658             MOV      R0,R11
   \   00003956   0x.... 0x....      BL       __aeabi_f2d
   \   0000395A   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   0000395E   0x4648             MOV      R0,R9
   \   00003960   0x.... 0x....      BL       __aeabi_f2d
   \   00003964   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003968   0x4652             MOV      R2,R10
   \   0000396A   0xF8DF 0x1E24      LDR.W    R1,??RoadBrd_ParseString_572
   \   0000396E   0xA80B             ADD      R0,SP,#+44
   \   00003970   0x.... 0x....      BL       sprintf
   3463                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003974   0xA80B             ADD      R0,SP,#+44
   \   00003976   0x.... 0x....      BL       strlen
   \   0000397A   0xA90B             ADD      R1,SP,#+44
   \   0000397C   0x.... 0x....      BL       BGM111_Transmit
   3464                                        }
   3465                                        sprintf( (char *)tempBffr2, "%s	001B		%1.4f		%2.3f\r\n", 
   3466                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3467                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3468                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_571: (+1)
   \   00003980   0x0038             MOVS     R0,R7
   \   00003982   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003984   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003988   0x4683             MOV      R11,R0
   \   0000398A   0x0038             MOVS     R0,R7
   \   0000398C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000398E   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003992   0x4681             MOV      R9,R0
   \   00003994   0x0038             MOVS     R0,R7
   \   00003996   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003998   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   0000399C   0x4682             MOV      R10,R0
   \   0000399E   0x4658             MOV      R0,R11
   \   000039A0   0x.... 0x....      BL       __aeabi_f2d
   \   000039A4   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000039A8   0x4648             MOV      R0,R9
   \   000039AA   0x.... 0x....      BL       __aeabi_f2d
   \   000039AE   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000039B2   0x4652             MOV      R2,R10
   \   000039B4   0xF8DF 0x1E2C      LDR.W    R1,??RoadBrd_ParseString_573
   \   000039B8   0xA80B             ADD      R0,SP,#+44
   \   000039BA   0x.... 0x....      BL       sprintf
   3469                                        break;
   \   000039BE   0xE1EC             B.N      ??RoadBrd_ParseString_532
   \                     ??RoadBrd_ParseString_471:
   \   000039C0   0x........         DC32     ?_204
   \   000039C4   0x........         DC32     ?_205
   \   000039C8   0x........         DC32     ?_206
   \   000039CC   0x........         DC32     ?_207
   \   000039D0   0x........         DC32     ?_208
   \   000039D4   0x........         DC32     ?_209
   3470                                      case CAL_ROADT_3C: //CAL_ROADT_3C Values
   3471                                        // Is this a BLE Operation?
   3472                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_525: (+1)
   \   000039D8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000039DA   0x2D00             CMP      R5,#+0
   \   000039DC   0xD024             BEQ.N    ??RoadBrd_ParseString_574
   3473                                        {
   3474                                          // Yes...Build and Send BLE Response NOW.
   3475                                          sprintf( (char *)tempBffr2, "%s:001D//%1.4f//%2.3f//", 
   3476                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3477                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3478                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   000039DE   0x0038             MOVS     R0,R7
   \   000039E0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000039E2   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000039E6   0x4683             MOV      R11,R0
   \   000039E8   0x0038             MOVS     R0,R7
   \   000039EA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000039EC   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000039F0   0x4681             MOV      R9,R0
   \   000039F2   0x0038             MOVS     R0,R7
   \   000039F4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000039F6   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000039FA   0x4682             MOV      R10,R0
   \   000039FC   0x4658             MOV      R0,R11
   \   000039FE   0x.... 0x....      BL       __aeabi_f2d
   \   00003A02   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003A06   0x4648             MOV      R0,R9
   \   00003A08   0x.... 0x....      BL       __aeabi_f2d
   \   00003A0C   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003A10   0x4652             MOV      R2,R10
   \   00003A12   0xF8DF 0x1DD4      LDR.W    R1,??RoadBrd_ParseString_573+0x4
   \   00003A16   0xA80B             ADD      R0,SP,#+44
   \   00003A18   0x.... 0x....      BL       sprintf
   3479                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003A1C   0xA80B             ADD      R0,SP,#+44
   \   00003A1E   0x.... 0x....      BL       strlen
   \   00003A22   0xA90B             ADD      R1,SP,#+44
   \   00003A24   0x.... 0x....      BL       BGM111_Transmit
   3480                                        }
   3481                                        sprintf( (char *)tempBffr2, "%s	001D		%1.4f		%2.3f\r\n", 
   3482                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3483                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3484                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_574: (+1)
   \   00003A28   0x0038             MOVS     R0,R7
   \   00003A2A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003A2C   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003A30   0x4683             MOV      R11,R0
   \   00003A32   0x0038             MOVS     R0,R7
   \   00003A34   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003A36   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003A3A   0x4681             MOV      R9,R0
   \   00003A3C   0x0038             MOVS     R0,R7
   \   00003A3E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003A40   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003A44   0x4682             MOV      R10,R0
   \   00003A46   0x4658             MOV      R0,R11
   \   00003A48   0x.... 0x....      BL       __aeabi_f2d
   \   00003A4C   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003A50   0x4648             MOV      R0,R9
   \   00003A52   0x.... 0x....      BL       __aeabi_f2d
   \   00003A56   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003A5A   0x4652             MOV      R2,R10
   \   00003A5C   0xF8DF 0x1DEC      LDR.W    R1,??RoadBrd_ParseString_575
   \   00003A60   0xA80B             ADD      R0,SP,#+44
   \   00003A62   0x.... 0x....      BL       sprintf
   3485                                        break;
   \   00003A66   0xE198             B.N      ??RoadBrd_ParseString_532
   \                     ??RoadBrd_ParseString_477:
   \   00003A68   0x........         DC32     ?_210
   \   00003A6C   0x........         DC32     ?_211
   \   00003A70   0x........         DC32     ?_212
   \   00003A74   0x........         DC32     ?_213
   \   00003A78   0x........         DC32     ?_214
   3486                                      case CAL_ROADT_4C: //CAL_ROADT_4C Values
   3487                                        // Is this a BLE Operation?
   3488                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_528: (+1)
   \   00003A7C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003A7E   0x2D00             CMP      R5,#+0
   \   00003A80   0xD024             BEQ.N    ??RoadBrd_ParseString_576
   3489                                        {
   3490                                          // Yes...Build and Send BLE Response NOW.
   3491                                          sprintf( (char *)tempBffr2, "%s:001F//%1.4f//%2.3f//", 
   3492                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3493                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3494                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003A82   0x0038             MOVS     R0,R7
   \   00003A84   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003A86   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003A8A   0x4683             MOV      R11,R0
   \   00003A8C   0x0038             MOVS     R0,R7
   \   00003A8E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003A90   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003A94   0x4681             MOV      R9,R0
   \   00003A96   0x0038             MOVS     R0,R7
   \   00003A98   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003A9A   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003A9E   0x4682             MOV      R10,R0
   \   00003AA0   0x4658             MOV      R0,R11
   \   00003AA2   0x.... 0x....      BL       __aeabi_f2d
   \   00003AA6   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003AAA   0x4648             MOV      R0,R9
   \   00003AAC   0x.... 0x....      BL       __aeabi_f2d
   \   00003AB0   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003AB4   0x4652             MOV      R2,R10
   \   00003AB6   0xF8DF 0x1E04      LDR.W    R1,??RoadBrd_ParseString_577
   \   00003ABA   0xA80B             ADD      R0,SP,#+44
   \   00003ABC   0x.... 0x....      BL       sprintf
   3495                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003AC0   0xA80B             ADD      R0,SP,#+44
   \   00003AC2   0x.... 0x....      BL       strlen
   \   00003AC6   0xA90B             ADD      R1,SP,#+44
   \   00003AC8   0x.... 0x....      BL       BGM111_Transmit
   3496                                        }
   3497                                        sprintf( (char *)tempBffr2, "%s	001F		%1.4f		%2.3f\r\n", 
   3498                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3499                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3500                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_576: (+1)
   \   00003ACC   0x0038             MOVS     R0,R7
   \   00003ACE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003AD0   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003AD4   0x4683             MOV      R11,R0
   \   00003AD6   0x0038             MOVS     R0,R7
   \   00003AD8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003ADA   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003ADE   0x4681             MOV      R9,R0
   \   00003AE0   0x0038             MOVS     R0,R7
   \   00003AE2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003AE4   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003AE8   0x4682             MOV      R10,R0
   \   00003AEA   0x4658             MOV      R0,R11
   \   00003AEC   0x.... 0x....      BL       __aeabi_f2d
   \   00003AF0   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003AF4   0x4648             MOV      R0,R9
   \   00003AF6   0x.... 0x....      BL       __aeabi_f2d
   \   00003AFA   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003AFE   0x4652             MOV      R2,R10
   \   00003B00   0xF8DF 0x1DE0      LDR.W    R1,??RoadBrd_ParseString_578
   \   00003B04   0xA80B             ADD      R0,SP,#+44
   \   00003B06   0x.... 0x....      BL       sprintf
   3501                                        break;
   \   00003B0A   0xE146             B.N      ??RoadBrd_ParseString_532
   \                     ??RoadBrd_ParseString_482:
   \   00003B0C   0x........         DC32     ?_215
   \   00003B10   0x........         DC32     ?_216
   \   00003B14   0x........         DC32     ?_217
   \   00003B18   0x........         DC32     ?_218
   \   00003B1C   0x........         DC32     ?_219
   3502                                      case CAL_ROADT_5C: //CAL_ROADT_5C Values
   3503                                        // Is this a BLE Operation?
   3504                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_527: (+1)
   \   00003B20   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003B22   0x2D00             CMP      R5,#+0
   \   00003B24   0xD024             BEQ.N    ??RoadBrd_ParseString_579
   3505                                        {
   3506                                          // Yes...Build and Send BLE Response NOW.
   3507                                          sprintf( (char *)tempBffr2, "%s:0021//%1.4f//%2.3f//", 
   3508                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3509                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3510                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003B26   0x0038             MOVS     R0,R7
   \   00003B28   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003B2A   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003B2E   0x4683             MOV      R11,R0
   \   00003B30   0x0038             MOVS     R0,R7
   \   00003B32   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003B34   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003B38   0x4681             MOV      R9,R0
   \   00003B3A   0x0038             MOVS     R0,R7
   \   00003B3C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003B3E   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003B42   0x4682             MOV      R10,R0
   \   00003B44   0x4658             MOV      R0,R11
   \   00003B46   0x.... 0x....      BL       __aeabi_f2d
   \   00003B4A   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003B4E   0x4648             MOV      R0,R9
   \   00003B50   0x.... 0x....      BL       __aeabi_f2d
   \   00003B54   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003B58   0x4652             MOV      R2,R10
   \   00003B5A   0xF8DF 0x1DD8      LDR.W    R1,??RoadBrd_ParseString_580
   \   00003B5E   0xA80B             ADD      R0,SP,#+44
   \   00003B60   0x.... 0x....      BL       sprintf
   3511                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003B64   0xA80B             ADD      R0,SP,#+44
   \   00003B66   0x.... 0x....      BL       strlen
   \   00003B6A   0xA90B             ADD      R1,SP,#+44
   \   00003B6C   0x.... 0x....      BL       BGM111_Transmit
   3512                                        }
   3513                                        sprintf( (char *)tempBffr2, "%s	0021		%1.4f		%2.3f\r\n", 
   3514                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3515                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3516                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_579: (+1)
   \   00003B70   0x0038             MOVS     R0,R7
   \   00003B72   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003B74   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003B78   0x4683             MOV      R11,R0
   \   00003B7A   0x0038             MOVS     R0,R7
   \   00003B7C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003B7E   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003B82   0x4681             MOV      R9,R0
   \   00003B84   0x0038             MOVS     R0,R7
   \   00003B86   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003B88   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003B8C   0x4682             MOV      R10,R0
   \   00003B8E   0x4658             MOV      R0,R11
   \   00003B90   0x.... 0x....      BL       __aeabi_f2d
   \   00003B94   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003B98   0x4648             MOV      R0,R9
   \   00003B9A   0x.... 0x....      BL       __aeabi_f2d
   \   00003B9E   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003BA2   0x4652             MOV      R2,R10
   \   00003BA4   0xF8DF 0x1DCC      LDR.W    R1,??RoadBrd_ParseString_581
   \   00003BA8   0xA80B             ADD      R0,SP,#+44
   \   00003BAA   0x.... 0x....      BL       sprintf
   3517                                        break;
   \   00003BAE   0xE0F4             B.N      ??RoadBrd_ParseString_532
   \                     ??RoadBrd_ParseString_490:
   \   00003BB0   0x........         DC32     ?_220
   \   00003BB4   0x........         DC32     ?_221
   \   00003BB8   0x........         DC32     ?_222
   \   00003BBC   0x........         DC32     ?_223
   3518                                      case CAL_ROADT_6C: //CAL_ROADT_6C Values
   3519                                        // Is this a BLE Operation?
   3520                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_530: (+1)
   \   00003BC0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003BC2   0x2D00             CMP      R5,#+0
   \   00003BC4   0xD024             BEQ.N    ??RoadBrd_ParseString_582
   3521                                        {
   3522                                          // Yes...Build and Send BLE Response NOW.
   3523                                          sprintf( (char *)tempBffr2, "%s:0023//%1.4f//%2.3f//", 
   3524                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3525                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3526                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003BC6   0x0038             MOVS     R0,R7
   \   00003BC8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003BCA   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003BCE   0x4683             MOV      R11,R0
   \   00003BD0   0x0038             MOVS     R0,R7
   \   00003BD2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003BD4   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003BD8   0x4681             MOV      R9,R0
   \   00003BDA   0x0038             MOVS     R0,R7
   \   00003BDC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003BDE   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003BE2   0x4682             MOV      R10,R0
   \   00003BE4   0x4658             MOV      R0,R11
   \   00003BE6   0x.... 0x....      BL       __aeabi_f2d
   \   00003BEA   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003BEE   0x4648             MOV      R0,R9
   \   00003BF0   0x.... 0x....      BL       __aeabi_f2d
   \   00003BF4   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003BF8   0x4652             MOV      R2,R10
   \   00003BFA   0xF8DF 0x1DB4      LDR.W    R1,??RoadBrd_ParseString_583
   \   00003BFE   0xA80B             ADD      R0,SP,#+44
   \   00003C00   0x.... 0x....      BL       sprintf
   3527                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003C04   0xA80B             ADD      R0,SP,#+44
   \   00003C06   0x.... 0x....      BL       strlen
   \   00003C0A   0xA90B             ADD      R1,SP,#+44
   \   00003C0C   0x.... 0x....      BL       BGM111_Transmit
   3528                                        }
   3529                                        sprintf( (char *)tempBffr2, "%s	0023		%1.4f		%2.3f\r\n", 
   3530                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3531                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3532                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_582: (+1)
   \   00003C10   0x0038             MOVS     R0,R7
   \   00003C12   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003C14   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003C18   0x4683             MOV      R11,R0
   \   00003C1A   0x0038             MOVS     R0,R7
   \   00003C1C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003C1E   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003C22   0x4681             MOV      R9,R0
   \   00003C24   0x0038             MOVS     R0,R7
   \   00003C26   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003C28   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003C2C   0x4682             MOV      R10,R0
   \   00003C2E   0x4658             MOV      R0,R11
   \   00003C30   0x.... 0x....      BL       __aeabi_f2d
   \   00003C34   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003C38   0x4648             MOV      R0,R9
   \   00003C3A   0x.... 0x....      BL       __aeabi_f2d
   \   00003C3E   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003C42   0x4652             MOV      R2,R10
   \   00003C44   0xF8DF 0x1D6C      LDR.W    R1,??RoadBrd_ParseString_583+0x4
   \   00003C48   0xA80B             ADD      R0,SP,#+44
   \   00003C4A   0x.... 0x....      BL       sprintf
   3533                                        break;
   \   00003C4E   0xE0A4             B.N      ??RoadBrd_ParseString_532
   \                     ??RoadBrd_ParseString_495:
   \   00003C50   0x........         DC32     ?_224
   \   00003C54   0x........         DC32     ?_225
   \   00003C58   0x........         DC32     ?_226
   \   00003C5C   0x........         DC32     ?_227
   \   00003C60   0x........         DC32     ?_228
   \   00003C64   0x........         DC32     ?_229
   3534                                      case CAL_ROADT_7C: //CAL_ROADT_7C Values
   3535                                        // Is this a BLE Operation?
   3536                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_529: (+1)
   \   00003C68   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003C6A   0x2D00             CMP      R5,#+0
   \   00003C6C   0xD024             BEQ.N    ??RoadBrd_ParseString_584
   3537                                        {
   3538                                          // Yes...Build and Send BLE Response NOW.
   3539                                          sprintf( (char *)tempBffr2, "%s:0025//%1.4f//%2.3f//", 
   3540                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3541                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3542                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003C6E   0x0038             MOVS     R0,R7
   \   00003C70   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003C72   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003C76   0x4683             MOV      R11,R0
   \   00003C78   0x0038             MOVS     R0,R7
   \   00003C7A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003C7C   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003C80   0x4681             MOV      R9,R0
   \   00003C82   0x0038             MOVS     R0,R7
   \   00003C84   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003C86   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003C8A   0x4682             MOV      R10,R0
   \   00003C8C   0x4658             MOV      R0,R11
   \   00003C8E   0x.... 0x....      BL       __aeabi_f2d
   \   00003C92   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003C96   0x4648             MOV      R0,R9
   \   00003C98   0x.... 0x....      BL       __aeabi_f2d
   \   00003C9C   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003CA0   0x4652             MOV      R2,R10
   \   00003CA2   0xF8DF 0x1D74      LDR.W    R1,??RoadBrd_ParseString_585
   \   00003CA6   0xA80B             ADD      R0,SP,#+44
   \   00003CA8   0x.... 0x....      BL       sprintf
   3543                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003CAC   0xA80B             ADD      R0,SP,#+44
   \   00003CAE   0x.... 0x....      BL       strlen
   \   00003CB2   0xA90B             ADD      R1,SP,#+44
   \   00003CB4   0x.... 0x....      BL       BGM111_Transmit
   3544                                        }
   3545                                        sprintf( (char *)tempBffr2, "%s	0025		%1.4f		%2.3f\r\n", 
   3546                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3547                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3548                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_584: (+1)
   \   00003CB8   0x0038             MOVS     R0,R7
   \   00003CBA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003CBC   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003CC0   0x4683             MOV      R11,R0
   \   00003CC2   0x0038             MOVS     R0,R7
   \   00003CC4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003CC6   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003CCA   0x4681             MOV      R9,R0
   \   00003CCC   0x0038             MOVS     R0,R7
   \   00003CCE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003CD0   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003CD4   0x4682             MOV      R10,R0
   \   00003CD6   0x4658             MOV      R0,R11
   \   00003CD8   0x.... 0x....      BL       __aeabi_f2d
   \   00003CDC   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003CE0   0x4648             MOV      R0,R9
   \   00003CE2   0x.... 0x....      BL       __aeabi_f2d
   \   00003CE6   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003CEA   0x4652             MOV      R2,R10
   \   00003CEC   0xF8DF 0x1DB0      LDR.W    R1,??RoadBrd_ParseString_586
   \   00003CF0   0xA80B             ADD      R0,SP,#+44
   \   00003CF2   0x.... 0x....      BL       sprintf
   3549                                        break;
   \   00003CF6   0xE050             B.N      ??RoadBrd_ParseString_532
   \                     ??RoadBrd_ParseString_501:
   \   00003CF8   0x........         DC32     ?_230
   \   00003CFC   0x........         DC32     ?_231
   \   00003D00   0x........         DC32     ?_232
   \   00003D04   0x........         DC32     ?_233
   \   00003D08   0x........         DC32     ?_234
   3550                                      case CAL_ROADT_8C: //CAL_ROADT_8C Values
   3551                                        // Is this a BLE Operation?
   3552                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_531: (+1)
   \   00003D0C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003D0E   0x2D00             CMP      R5,#+0
   \   00003D10   0xD024             BEQ.N    ??RoadBrd_ParseString_587
   3553                                        {
   3554                                          // Yes...Build and Send BLE Response NOW.
   3555                                          sprintf( (char *)tempBffr2, "%s:0027//%1.4f//%2.3f//", 
   3556                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3557                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3558                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003D12   0x0038             MOVS     R0,R7
   \   00003D14   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003D16   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003D1A   0x4683             MOV      R11,R0
   \   00003D1C   0x0038             MOVS     R0,R7
   \   00003D1E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003D20   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003D24   0x4681             MOV      R9,R0
   \   00003D26   0x0038             MOVS     R0,R7
   \   00003D28   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003D2A   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003D2E   0x4682             MOV      R10,R0
   \   00003D30   0x4658             MOV      R0,R11
   \   00003D32   0x.... 0x....      BL       __aeabi_f2d
   \   00003D36   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003D3A   0x4648             MOV      R0,R9
   \   00003D3C   0x.... 0x....      BL       __aeabi_f2d
   \   00003D40   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003D44   0x4652             MOV      R2,R10
   \   00003D46   0xF8DF 0x1D5C      LDR.W    R1,??RoadBrd_ParseString_586+0x4
   \   00003D4A   0xA80B             ADD      R0,SP,#+44
   \   00003D4C   0x.... 0x....      BL       sprintf
   3559                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003D50   0xA80B             ADD      R0,SP,#+44
   \   00003D52   0x.... 0x....      BL       strlen
   \   00003D56   0xA90B             ADD      R1,SP,#+44
   \   00003D58   0x.... 0x....      BL       BGM111_Transmit
   3560                                        }
   3561                                        sprintf( (char *)tempBffr2, "%s	0027		%1.4f		%2.3f\r\n", 
   3562                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3563                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3564                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_587: (+1)
   \   00003D5C   0x0038             MOVS     R0,R7
   \   00003D5E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003D60   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003D64   0x4683             MOV      R11,R0
   \   00003D66   0x0038             MOVS     R0,R7
   \   00003D68   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003D6A   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003D6E   0x4681             MOV      R9,R0
   \   00003D70   0x0038             MOVS     R0,R7
   \   00003D72   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003D74   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003D78   0x4682             MOV      R10,R0
   \   00003D7A   0x4658             MOV      R0,R11
   \   00003D7C   0x.... 0x....      BL       __aeabi_f2d
   \   00003D80   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003D84   0x4648             MOV      R0,R9
   \   00003D86   0x.... 0x....      BL       __aeabi_f2d
   \   00003D8A   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003D8E   0x4652             MOV      R2,R10
   \   00003D90   0xF8DF 0x1D6C      LDR.W    R1,??RoadBrd_ParseString_588
   \   00003D94   0xA80B             ADD      R0,SP,#+44
   \   00003D96   0x.... 0x....      BL       sprintf
   3565                                        break;
   3566                                    } // EndSwitch(x)
   3567                                    // Now Print String.
   3568          #ifdef NUCLEO
   3569                                    Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   3570          #else
   3571                                    Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \                     ??RoadBrd_ParseString_532: (+1)
   \   00003D9A   0xA90B             ADD      R1,SP,#+44
   \   00003D9C   0x2000             MOVS     R0,#+0
   \   00003D9E   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00003DA2   0x0006             MOVS     R6,R0
   3572          #endif
   3573                                    if (Status != HAL_OK)
   \   00003DA4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00003DA6   0x2E00             CMP      R6,#+0
   \   00003DA8   0xD008             BEQ.N    ??RoadBrd_ParseString_589
   3574                                      return Status;
   \   00003DAA   0x0030             MOVS     R0,R6
   \   00003DAC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003DAE   0xF000 0xBF22      B.W      ??RoadBrd_ParseString_4
   \   00003DB2   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_505:
   \   00003DB4   0x........         DC32     ?_235
   \   00003DB8   0x........         DC32     ?_236
   3575                                  } // EndFor(x=0; x<CAL_LAST_VALUE; x++)
   \                     ??RoadBrd_ParseString_589: (+1)
   \   00003DBC   0x1C7F             ADDS     R7,R7,#+1
   \   00003DBE   0xF7FF 0xB897      B.W      ??RoadBrd_ParseString_508
   3576                                  // Is this a BLE Operation?
   3577                                  if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_509: (+1)
   \   00003DC2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003DC4   0x2D00             CMP      R5,#+0
   \   00003DC6   0xD00A             BEQ.N    ??RoadBrd_ParseString_590
   3578                                  {
   3579                                    // Yes...Build and Send BLE Response NOW.
   3580                                    strcpy( (char *)tempBffr2, "</STATUS>");
   \   00003DC8   0xF8DF 0x1D7C      LDR.W    R1,??RoadBrd_ParseString_591
   \   00003DCC   0xA80B             ADD      R0,SP,#+44
   \   00003DCE   0x.... 0x....      BL       strcpy
   3581                                    BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003DD2   0xA80B             ADD      R0,SP,#+44
   \   00003DD4   0x.... 0x....      BL       strlen
   \   00003DD8   0xA90B             ADD      R1,SP,#+44
   \   00003DDA   0x.... 0x....      BL       BGM111_Transmit
   3582                                  }
   3583                                  sprintf( (char *)tempBffr2, "\r\n     COMPLETE.\r\n" );
   \                     ??RoadBrd_ParseString_590: (+1)
   \   00003DDE   0xF8DF 0x1D6C      LDR.W    R1,??RoadBrd_ParseString_591+0x4
   \   00003DE2   0xA80B             ADD      R0,SP,#+44
   \   00003DE4   0x.... 0x....      BL       sprintf
   3584                                  break;
   \   00003DE8   0xE091             B.N      ??RoadBrd_ParseString_378
   3585                                  //------------------ TCT Command: Calibration Set Time Command
   3586                                case 'T':
   3587                                  // Step 1. Validate format.
   3588                                  if(tempBffr[3]!=':')
   \                     ??RoadBrd_ParseString_387: (+1)
   \   00003DEA   0x78E0             LDRB     R0,[R4, #+3]
   \   00003DEC   0x283A             CMP      R0,#+58
   \   00003DEE   0xD013             BEQ.N    ??RoadBrd_ParseString_592
   3589                                  {
   3590                                    // Is this a BLE Operation?
   3591                                    if ( BLE_Flag )
   \   00003DF0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003DF2   0x2D00             CMP      R5,#+0
   \   00003DF4   0xD00A             BEQ.N    ??RoadBrd_ParseString_593
   3592                                    {
   3593                                      // Yes...Build and Send BLE Response NOW.
   3594                                      strcpy( (char *)tempBffr2, "<STATUS>CMD_TCT_SYNTAX</STATUS>");
   \   00003DF6   0xF8DF 0x1D78      LDR.W    R1,??RoadBrd_ParseString_594
   \   00003DFA   0xA80B             ADD      R0,SP,#+44
   \   00003DFC   0x.... 0x....      BL       strcpy
   3595                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003E00   0xA80B             ADD      R0,SP,#+44
   \   00003E02   0x.... 0x....      BL       strlen
   \   00003E06   0xA90B             ADD      R1,SP,#+44
   \   00003E08   0x.... 0x....      BL       BGM111_Transmit
   3596                                    }
   3597                                    
   3598                                    strcpy( (char *)tempBffr2, "TCT SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_593: (+1)
   \   00003E0C   0xF8DF 0x1D64      LDR.W    R1,??RoadBrd_ParseString_594+0x4
   \   00003E10   0xA80B             ADD      R0,SP,#+44
   \   00003E12   0x.... 0x....      BL       strcpy
   \   00003E16   0xE04C             B.N      ??RoadBrd_ParseString_595
   3599                                  } // Endif (tempBffr[3]!=':')
   3600                                  else
   3601                                  {
   3602                                    // 2. Verify if remaining string is digits
   3603                                    if (Size <= 4)
   \                     ??RoadBrd_ParseString_592: (+1)
   \   00003E18   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   00003E1C   0x2805             CMP      R0,#+5
   \   00003E1E   0xDA13             BGE.N    ??RoadBrd_ParseString_596
   3604                                    {
   3605                                      // Is this a BLE Operation?
   3606                                      if ( BLE_Flag )
   \   00003E20   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003E22   0x2D00             CMP      R5,#+0
   \   00003E24   0xD00A             BEQ.N    ??RoadBrd_ParseString_597
   3607                                      {
   3608                                        // Yes...Build and Send BLE Response NOW.
   3609                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_TCT_BADPARAM</STATUS>");
   \   00003E26   0xF8DF 0x1D6C      LDR.W    R1,??RoadBrd_ParseString_598
   \   00003E2A   0xA80B             ADD      R0,SP,#+44
   \   00003E2C   0x.... 0x....      BL       strcpy
   3610                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003E30   0xA80B             ADD      R0,SP,#+44
   \   00003E32   0x.... 0x....      BL       strlen
   \   00003E36   0xA90B             ADD      R1,SP,#+44
   \   00003E38   0x.... 0x....      BL       BGM111_Transmit
   3611                                      }
   3612                                      strcpy( (char *)tempBffr2, "TCT SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_597: (+1)
   \   00003E3C   0xF8DF 0x1D58      LDR.W    R1,??RoadBrd_ParseString_598+0x4
   \   00003E40   0xA80B             ADD      R0,SP,#+44
   \   00003E42   0x.... 0x....      BL       strcpy
   \   00003E46   0xE034             B.N      ??RoadBrd_ParseString_595
   3613                                    } // EndIf (Size > 4)
   3614                                    else
   3615                                    {
   3616                                      // 3. Grab remaining string and Save it.
   3617                                      tempPstr = &tempBffr[4];
   \                     ??RoadBrd_ParseString_596: (+1)
   \   00003E48   0x1D20             ADDS     R0,R4,#+4
   \   00003E4A   0x9030             STR      R0,[SP, #+192]
   3618                                      strcpy(tempstr, tempPstr);
   \   00003E4C   0x9930             LDR      R1,[SP, #+192]
   \   00003E4E   0xA852             ADD      R0,SP,#+328
   \   00003E50   0x.... 0x....      BL       strcpy
   3619                                      // NOW...Save it.
   3620                                      Status = RoadBrd_CAL_Set_TimeString( (uint8_t *)tempPstr );
   \   00003E54   0x9830             LDR      R0,[SP, #+192]
   \   00003E56   0x.... 0x....      BL       RoadBrd_CAL_Set_TimeString
   \   00003E5A   0x0006             MOVS     R6,R0
   3621                                      if (Status != HAL_OK)
   \   00003E5C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00003E5E   0x2E00             CMP      R6,#+0
   \   00003E60   0xD014             BEQ.N    ??RoadBrd_ParseString_599
   3622                                      {
   3623                                        // Is this a BLE Operation?
   3624                                        if ( BLE_Flag )
   \   00003E62   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003E64   0x2D00             CMP      R5,#+0
   \   00003E66   0xD00A             BEQ.N    ??RoadBrd_ParseString_600
   3625                                        {
   3626                                          // Yes...Build and Send BLE Response NOW.
   3627                                          strcpy( (char *)tempBffr2, "<STATUS>CMD_TCT_ERR</STATUS>");
   \   00003E68   0xF8DF 0x1D60      LDR.W    R1,??RoadBrd_ParseString_601
   \   00003E6C   0xA80B             ADD      R0,SP,#+44
   \   00003E6E   0x.... 0x....      BL       strcpy
   3628                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003E72   0xA80B             ADD      R0,SP,#+44
   \   00003E74   0x.... 0x....      BL       strlen
   \   00003E78   0xA90B             ADD      R1,SP,#+44
   \   00003E7A   0x.... 0x....      BL       BGM111_Transmit
   3629                                        }
   3630                                        return Status;
   \                     ??RoadBrd_ParseString_600: (+1)
   \   00003E7E   0x0030             MOVS     R0,R6
   \   00003E80   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003E82   0xF000 0xBEB8      B.W      ??RoadBrd_ParseString_4
   \   00003E86   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_534:
   \   00003E88   0x........         DC32     ?_237
   3631                                      }
   3632                                      else
   3633                                      {
   3634                                        // Is this a BLE Operation?
   3635                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_599: (+1)
   \   00003E8C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003E8E   0x2D00             CMP      R5,#+0
   \   00003E90   0xD00A             BEQ.N    ??RoadBrd_ParseString_602
   3636                                        {
   3637                                          // Yes...Build and Send BLE Response NOW.
   3638                                          strcpy( (char *)tempBffr2, "<STATUS>ST_TCT_ACK</STATUS>");
   \   00003E92   0xF8DF 0x1D3C      LDR.W    R1,??RoadBrd_ParseString_601+0x4
   \   00003E96   0xA80B             ADD      R0,SP,#+44
   \   00003E98   0x.... 0x....      BL       strcpy
   3639                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003E9C   0xA80B             ADD      R0,SP,#+44
   \   00003E9E   0x.... 0x....      BL       strlen
   \   00003EA2   0xA90B             ADD      R1,SP,#+44
   \   00003EA4   0x.... 0x....      BL       BGM111_Transmit
   3640                                        }
   3641                                      }
   3642                                      sprintf( (char *)tempBffr2, "\r\n     COMPLETE.\r\n" );
   \                     ??RoadBrd_ParseString_602: (+1)
   \   00003EA8   0xF8DF 0x1CA0      LDR.W    R1,??RoadBrd_ParseString_591+0x4
   \   00003EAC   0xA80B             ADD      R0,SP,#+44
   \   00003EAE   0x.... 0x....      BL       sprintf
   3643                                    } // EndElse (Size > 4)
   3644                                  } // EndElse (tempBffr[3]!=':')
   3645                                  break;
   \                     ??RoadBrd_ParseString_595: (+1)
   \   00003EB2   0xE02C             B.N      ??RoadBrd_ParseString_378
   3646                                  //------------------ TCI Command: Calibration Initialize Cal Table(Reset)
   3647                                case 'I':
   3648                                  Status = RoadBrd_CAL_InitializeFrmFlash();
   \                     ??RoadBrd_ParseString_384: (+1)
   \   00003EB4   0x.... 0x....      BL       RoadBrd_CAL_InitializeFrmFlash
   \   00003EB8   0x0006             MOVS     R6,R0
   3649                                  if (Status != HAL_OK)
   \   00003EBA   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00003EBC   0x2E00             CMP      R6,#+0
   \   00003EBE   0xD013             BEQ.N    ??RoadBrd_ParseString_603
   3650                                  {
   3651                                    // Is this a BLE Operation?
   3652                                    if ( BLE_Flag )
   \   00003EC0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003EC2   0x2D00             CMP      R5,#+0
   \   00003EC4   0xD00A             BEQ.N    ??RoadBrd_ParseString_604
   3653                                    {
   3654                                      // Yes...Build and Send BLE Response NOW.
   3655                                      strcpy( (char *)tempBffr2, "<STATUS>CMD_TCI_ERR</STATUS>");
   \   00003EC6   0xF8DF 0x1D38      LDR.W    R1,??RoadBrd_ParseString_605
   \   00003ECA   0xA80B             ADD      R0,SP,#+44
   \   00003ECC   0x.... 0x....      BL       strcpy
   3656                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003ED0   0xA80B             ADD      R0,SP,#+44
   \   00003ED2   0x.... 0x....      BL       strlen
   \   00003ED6   0xA90B             ADD      R1,SP,#+44
   \   00003ED8   0x.... 0x....      BL       BGM111_Transmit
   3657                                    }
   3658                                    return Status;
   \                     ??RoadBrd_ParseString_604: (+1)
   \   00003EDC   0x0030             MOVS     R0,R6
   \   00003EDE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003EE0   0xF000 0xBE89      B.W      ??RoadBrd_ParseString_4
   \                     ??RoadBrd_ParseString_535:
   \   00003EE4   0x........         DC32     ?_238
   3659                                  }
   3660                                  else
   3661                                  {
   3662                                    // Is this a BLE Operation?
   3663                                    if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_603: (+1)
   \   00003EE8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003EEA   0x2D00             CMP      R5,#+0
   \   00003EEC   0xD00A             BEQ.N    ??RoadBrd_ParseString_606
   3664                                    {
   3665                                      // Yes...Build and Send BLE Response NOW.
   3666                                      strcpy( (char *)tempBffr2, "<STATUS>ST_TCI_ACK</STATUS>");
   \   00003EEE   0x.... 0x....      LDR.W    R1,??DataTable3
   \   00003EF2   0xA80B             ADD      R0,SP,#+44
   \   00003EF4   0x.... 0x....      BL       strcpy
   3667                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003EF8   0xA80B             ADD      R0,SP,#+44
   \   00003EFA   0x.... 0x....      BL       strlen
   \   00003EFE   0xA90B             ADD      R1,SP,#+44
   \   00003F00   0x.... 0x....      BL       BGM111_Transmit
   3668                                    }
   3669                                  }
   3670                                  sprintf( (char *)tempBffr2, "\r\n     COMPLETE.\r\n" );
   \                     ??RoadBrd_ParseString_606: (+1)
   \   00003F04   0xF8DF 0x1C44      LDR.W    R1,??RoadBrd_ParseString_591+0x4
   \   00003F08   0xA80B             ADD      R0,SP,#+44
   \   00003F0A   0x.... 0x....      BL       sprintf
   3671                                  break;
   3672                                } //EndSwitch
   3673                              } //EndElse (Size == 2)
   3674                              break;
   \                     ??RoadBrd_ParseString_378: (+1)
   \   00003F0E   0xF000 0xBDDC      B.W      ??RoadBrd_ParseString_289
   3675          //++++++++++++++++++++++++++++++++++++++++++  Dump Driver State.
   3676                            case 'D':
   3677                              // Read Driver Status
   3678                              DriverStatus = Get_DriverStatus();
   \                     ??RoadBrd_ParseString_292: (+1)
   \   00003F12   0x.... 0x....      BL       Get_DriverStatus
   \   00003F16   0xF8AD 0x00E4      STRH     R0,[SP, #+228]
   3679                              // Is this a BLE Operation?
   3680                              if ( BLE_Flag )
   \   00003F1A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003F1C   0x2D00             CMP      R5,#+0
   \   00003F1E   0xD00C             BEQ.N    ??RoadBrd_ParseString_607
   3681                              {
   3682                                // Yes...Build and Send BLE Response NOW.
   3683                                sprintf( (char *)tempBffr2, "<STATUS>ST_DRIVER:%04x</STATUS>", DriverStatus );
   \   00003F20   0xF8BD 0x20E4      LDRH     R2,[SP, #+228]
   \   00003F24   0x.... 0x....      LDR.W    R1,??DataTable3_1
   \   00003F28   0xA80B             ADD      R0,SP,#+44
   \   00003F2A   0x.... 0x....      BL       sprintf
   3684                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003F2E   0xA80B             ADD      R0,SP,#+44
   \   00003F30   0x.... 0x....      BL       strlen
   \   00003F34   0xA90B             ADD      R1,SP,#+44
   \   00003F36   0x.... 0x....      BL       BGM111_Transmit
   3685                              }
   3686                              
   3687                              sprintf( (char *)tempBffr2, "Driver Status: %04x\r\n", DriverStatus );
   \                     ??RoadBrd_ParseString_607: (+1)
   \   00003F3A   0xF8BD 0x20E4      LDRH     R2,[SP, #+228]
   \   00003F3E   0x.... 0x....      LDR.W    R1,??DataTable3_2
   \   00003F42   0xA80B             ADD      R0,SP,#+44
   \   00003F44   0x.... 0x....      BL       sprintf
   3688                              break;
   \   00003F48   0xF000 0xBDBF      B.W      ??RoadBrd_ParseString_289
   \                     ??RoadBrd_ParseString_537:
   \   00003F4C   0x........         DC32     ?_239
   3689          //++++++++++++++++++++++++++++++++++++++++++  RESET Micro.
   3690                            case 'R':
   3691                              // RESET
   3692                              // Is this a BLE Operation?
   3693                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_298: (+1)
   \   00003F50   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003F52   0x2D00             CMP      R5,#+0
   \   00003F54   0xD00D             BEQ.N    ??RoadBrd_ParseString_608
   3694                              {
   3695                                // Yes...Build and Send BLE Response NOW.
   3696                                strcpy( (char *)tempBffr2, "<STATUS>ST_RESET_ACK</STATUS>");
   \   00003F56   0x.... 0x....      LDR.W    R1,??DataTable3_3
   \   00003F5A   0xA80B             ADD      R0,SP,#+44
   \   00003F5C   0x.... 0x....      BL       strcpy
   3697                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003F60   0xA80B             ADD      R0,SP,#+44
   \   00003F62   0x.... 0x....      BL       strlen
   \   00003F66   0xA90B             ADD      R1,SP,#+44
   \   00003F68   0x.... 0x....      BL       BGM111_Transmit
   3698                                HAL_Delay(100);           // Wait 100ms
   \   00003F6C   0x2064             MOVS     R0,#+100
   \   00003F6E   0x.... 0x....      BL       HAL_Delay
   3699                              }
   3700                              HAL_NVIC_SystemReset();
   \                     ??RoadBrd_ParseString_608: (+1)
   \   00003F72   0x.... 0x....      BL       HAL_NVIC_SystemReset
   3701                              sprintf( (char *)tempBffr2, "RESET CALLED BUT NO RESPONSE!!\r\n" );
   \   00003F76   0x.... 0x....      LDR.W    R1,??DataTable3_4
   \   00003F7A   0xA80B             ADD      R0,SP,#+44
   \   00003F7C   0x.... 0x....      BL       sprintf
   3702                              break;
   \   00003F80   0xF000 0xBDA3      B.W      ??RoadBrd_ParseString_289
   \                     ??RoadBrd_ParseString_538:
   \   00003F84   0x........         DC32     ?_240
   3703          //++++++++++++++++++++++++++++++++++++++++++  Key Flash Variable Commands.
   3704                            case 'K':
   3705                              // Key Flash Variable Commands.
   3706                              // Test Size to make sure we have enough Characters for this operation
   3707                              Status = HAL_OK;
   \                     ??RoadBrd_ParseString_295: (+1)
   \   00003F88   0x2000             MOVS     R0,#+0
   \   00003F8A   0x0006             MOVS     R6,R0
   3708                              if (Size < 4)
   \   00003F8C   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   00003F90   0x2804             CMP      R0,#+4
   \   00003F92   0xDA15             BGE.N    ??RoadBrd_ParseString_609
   3709                              {
   3710                                // Is this a BLE Operation?
   3711                                if ( BLE_Flag )
   \   00003F94   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003F96   0x2D00             CMP      R5,#+0
   \   00003F98   0xD00A             BEQ.N    ??RoadBrd_ParseString_610
   3712                                {
   3713                                  // Yes...Build and Send BLE Response NOW.
   3714                                  strcpy( (char *)tempBffr2, "<STATUS>CMD_TK_SYNTAX</STATUS>");
   \   00003F9A   0x.... 0x....      LDR.W    R1,??DataTable3_5
   \   00003F9E   0xA80B             ADD      R0,SP,#+44
   \   00003FA0   0x.... 0x....      BL       strcpy
   3715                                  BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003FA4   0xA80B             ADD      R0,SP,#+44
   \   00003FA6   0x.... 0x....      BL       strlen
   \   00003FAA   0xA90B             ADD      R1,SP,#+44
   \   00003FAC   0x.... 0x....      BL       BGM111_Transmit
   3716                                }
   3717                                strcpy( (char *)tempBffr2, "TK SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_610: (+1)
   \   00003FB0   0x.... 0x....      LDR.W    R1,??DataTable3_6
   \   00003FB4   0xA80B             ADD      R0,SP,#+44
   \   00003FB6   0x.... 0x....      BL       strcpy
   \   00003FBA   0xE30C             B.N      ??RoadBrd_ParseString_611
   \                     ??RoadBrd_ParseString_540:
   \   00003FBC   0x........         DC32     ?_241
   3718                              }
   3719                              else
   3720                              {
   3721                                switch( tempBffr[2] )
   \                     ??RoadBrd_ParseString_609: (+1)
   \   00003FC0   0x78A0             LDRB     R0,[R4, #+2]
   \   00003FC2   0x2852             CMP      R0,#+82
   \   00003FC4   0xF000 0x8240      BEQ.W    ??RoadBrd_ParseString_612
   \   00003FC8   0x2853             CMP      R0,#+83
   \   00003FCA   0xF040 0x82F1      BNE.W    ??RoadBrd_ParseString_613
   3722                                {
   3723          //------------------
   3724                                  case 'S':
   3725                                    //Key Flash Variable Set Command.
   3726                                    switch( tempBffr[3] )
   \                     ??RoadBrd_ParseString_614: (+1)
   \   00003FCE   0x78E0             LDRB     R0,[R4, #+3]
   \   00003FD0   0x2842             CMP      R0,#+66
   \   00003FD2   0xF000 0x81A6      BEQ.W    ??RoadBrd_ParseString_615
   \   00003FD6   0x2852             CMP      R0,#+82
   \   00003FD8   0xD006             BEQ.N    ??RoadBrd_ParseString_616
   \   00003FDA   0x2853             CMP      R0,#+83
   \   00003FDC   0xF000 0x808F      BEQ.W    ??RoadBrd_ParseString_617
   \   00003FE0   0x2854             CMP      R0,#+84
   \   00003FE2   0xF000 0x8114      BEQ.W    ??RoadBrd_ParseString_618
   \   00003FE6   0xE224             B.N      ??RoadBrd_ParseString_619
   3727                                    {
   3728          //------------------
   3729                                      case 'R':
   3730                                        //Key Flash Variable Set Road Sound Sample Rate Command.
   3731                                        // Step 1. Validate format.
   3732                                        if(tempBffr[4]!=':')
   \                     ??RoadBrd_ParseString_616: (+1)
   \   00003FE8   0x7920             LDRB     R0,[R4, #+4]
   \   00003FEA   0x283A             CMP      R0,#+58
   \   00003FEC   0xD018             BEQ.N    ??RoadBrd_ParseString_620
   3733                                        {
   3734                                          // Is this a BLE Operation?
   3735                                          if ( BLE_Flag )
   \   00003FEE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003FF0   0x2D00             CMP      R5,#+0
   \   00003FF2   0xD00A             BEQ.N    ??RoadBrd_ParseString_621
   3736                                          {
   3737                                            // Yes...Build and Send BLE Response NOW.
   3738                                            strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSR_SYNTAX</STATUS>");
   \   00003FF4   0x.... 0x....      LDR.W    R1,??DataTable3_8
   \   00003FF8   0xA80B             ADD      R0,SP,#+44
   \   00003FFA   0x.... 0x....      BL       strcpy
   3739                                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003FFE   0xA80B             ADD      R0,SP,#+44
   \   00004000   0x.... 0x....      BL       strlen
   \   00004004   0xA90B             ADD      R1,SP,#+44
   \   00004006   0x.... 0x....      BL       BGM111_Transmit
   3740                                          }
   3741                                          strcpy( (char *)tempBffr2, "TKSR SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_621: (+1)
   \   0000400A   0x.... 0x....      LDR.W    R1,??DataTable3_9
   \   0000400E   0xA80B             ADD      R0,SP,#+44
   \   00004010   0x.... 0x....      BL       strcpy
   \   00004014   0xE072             B.N      ??RoadBrd_ParseString_622
   \   00004016   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_541:
   \   00004018   0x........         DC32     ?_242
   \   0000401C   0x........         DC32     ?_243
   3742                                        } // Endif (tempBffr[4]!=':')
   3743                                        else
   3744                                        {
   3745                                          // 2. Verify if remaining string is digits
   3746                                          if (Size > 5)
   \                     ??RoadBrd_ParseString_620: (+1)
   \   00004020   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   00004024   0x2806             CMP      R0,#+6
   \   00004026   0xDB10             BLT.N    ??RoadBrd_ParseString_623
   3747                                          {
   3748                                            flag = 1;
   \   00004028   0x2001             MOVS     R0,#+1
   \   0000402A   0x902E             STR      R0,[SP, #+184]
   3749                                            for (x=5; x< Size; x++)
   \   0000402C   0x2005             MOVS     R0,#+5
   \   0000402E   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_624: (+1)
   \   00004030   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   00004034   0x4287             CMP      R7,R0
   \   00004036   0xDA0A             BGE.N    ??RoadBrd_ParseString_625
   3750                                            {
   3751                                              if (isdigit(tempBffr[x]) == 0)
   \   00004038   0x5DE0             LDRB     R0,[R4, R7]
   \   0000403A   0x.... 0x....      BL       isdigit
   \   0000403E   0x2800             CMP      R0,#+0
   \   00004040   0xD101             BNE.N    ??RoadBrd_ParseString_626
   3752                                                flag = 0;
   \   00004042   0x2000             MOVS     R0,#+0
   \   00004044   0x902E             STR      R0,[SP, #+184]
   3753                                            }
   \                     ??RoadBrd_ParseString_626: (+1)
   \   00004046   0x1C7F             ADDS     R7,R7,#+1
   \   00004048   0xE7F2             B.N      ??RoadBrd_ParseString_624
   3754                                          } // EndIf (Size > 5)
   3755                                          else
   3756                                            flag = 0;
   \                     ??RoadBrd_ParseString_623: (+1)
   \   0000404A   0x2000             MOVS     R0,#+0
   \   0000404C   0x902E             STR      R0,[SP, #+184]
   3757                                          if (flag == 0)
   \                     ??RoadBrd_ParseString_625: (+1)
   \   0000404E   0x982E             LDR      R0,[SP, #+184]
   \   00004050   0x2800             CMP      R0,#+0
   \   00004052   0xD113             BNE.N    ??RoadBrd_ParseString_627
   3758                                          {
   3759                                            // Is this a BLE Operation?
   3760                                            if ( BLE_Flag )
   \   00004054   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004056   0x2D00             CMP      R5,#+0
   \   00004058   0xD00A             BEQ.N    ??RoadBrd_ParseString_628
   3761                                            {
   3762                                              // Yes...Build and Send BLE Response NOW.
   3763                                              strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSR_BADPARAM</STATUS>");
   \   0000405A   0x.... 0x....      LDR.W    R1,??DataTable3_11
   \   0000405E   0xA80B             ADD      R0,SP,#+44
   \   00004060   0x.... 0x....      BL       strcpy
   3764                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004064   0xA80B             ADD      R0,SP,#+44
   \   00004066   0x.... 0x....      BL       strlen
   \   0000406A   0xA90B             ADD      R1,SP,#+44
   \   0000406C   0x.... 0x....      BL       BGM111_Transmit
   3765                                            }
   3766                                            strcpy( (char *)tempBffr2, "TKSR SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_628: (+1)
   \   00004070   0x.... 0x....      LDR.W    R1,??DataTable3_12
   \   00004074   0xA80B             ADD      R0,SP,#+44
   \   00004076   0x.... 0x....      BL       strcpy
   \   0000407A   0xE03F             B.N      ??RoadBrd_ParseString_622
   3767                                          }
   3768                                          else
   3769                                          {
   3770                                            // 3. Grab remaining string and convert to integer.
   3771                                            tempPstr = &tempBffr[5];
   \                     ??RoadBrd_ParseString_627: (+1)
   \   0000407C   0x1D60             ADDS     R0,R4,#+5
   \   0000407E   0x9030             STR      R0,[SP, #+192]
   3772                                            strcpy(tempstr, tempPstr);
   \   00004080   0x9930             LDR      R1,[SP, #+192]
   \   00004082   0xA852             ADD      R0,SP,#+328
   \   00004084   0x.... 0x....      BL       strcpy
   3773                                            new_value = atoi( tempstr );
   \   00004088   0xA852             ADD      R0,SP,#+328
   \   0000408A   0x.... 0x....      BL       atoi
   \   0000408E   0x902F             STR      R0,[SP, #+188]
   3774                                            if((new_value > 9999) ||
   3775                                               (new_value < 0))
   \   00004090   0x982F             LDR      R0,[SP, #+188]
   \   00004092   0xF242 0x7110      MOVW     R1,#+10000
   \   00004096   0x4288             CMP      R0,R1
   \   00004098   0xDA02             BGE.N    ??RoadBrd_ParseString_629
   \   0000409A   0x982F             LDR      R0,[SP, #+188]
   \   0000409C   0x2800             CMP      R0,#+0
   \   0000409E   0xD517             BPL.N    ??RoadBrd_ParseString_630
   3776                                            {
   3777                                              // Is this a BLE Operation?
   3778                                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_629: (+1)
   \   000040A0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000040A2   0x2D00             CMP      R5,#+0
   \   000040A4   0xD00A             BEQ.N    ??RoadBrd_ParseString_631
   3779                                              {
   3780                                                // Yes...Build and Send BLE Response NOW.
   3781                                                strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSR_BADPARAM</STATUS>");
   \   000040A6   0x.... 0x....      LDR.W    R1,??DataTable3_11
   \   000040AA   0xA80B             ADD      R0,SP,#+44
   \   000040AC   0x.... 0x....      BL       strcpy
   3782                                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000040B0   0xA80B             ADD      R0,SP,#+44
   \   000040B2   0x.... 0x....      BL       strlen
   \   000040B6   0xA90B             ADD      R1,SP,#+44
   \   000040B8   0x.... 0x....      BL       BGM111_Transmit
   3783                                              }
   3784                                              strcpy( (char *)tempBffr2, "TKSR SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_631: (+1)
   \   000040BC   0x.... 0x....      LDR.W    R1,??DataTable3_12
   \   000040C0   0xA80B             ADD      R0,SP,#+44
   \   000040C2   0x.... 0x....      BL       strcpy
   \   000040C6   0xE019             B.N      ??RoadBrd_ParseString_622
   \                     ??RoadBrd_ParseString_543:
   \   000040C8   0x........         DC32     ?_244
   \   000040CC   0x........         DC32     ?_245
   3785                                            }
   3786                                            else
   3787                                            {
   3788                                              // Time to set new Road Sound Sample Rate.
   3789                                              RoadBrd_Set_RdSndTickCnt( new_value );
   \                     ??RoadBrd_ParseString_630: (+1)
   \   000040D0   0x982F             LDR      R0,[SP, #+188]
   \   000040D2   0x.... 0x....      BL       RoadBrd_Set_RdSndTickCnt
   3790                                              // NOW, Build Data String..
   3791                                              // Is this a BLE Operation?
   3792                                              if ( BLE_Flag )
   \   000040D6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000040D8   0x2D00             CMP      R5,#+0
   \   000040DA   0xD00A             BEQ.N    ??RoadBrd_ParseString_632
   3793                                              {
   3794                                                // Yes...Build and Send BLE Response NOW.
   3795                                                strcpy( (char *)tempBffr2, "<STATUS>ST_TKSR_ACK</STATUS>");
   \   000040DC   0x.... 0x....      LDR.W    R1,??DataTable3_13
   \   000040E0   0xA80B             ADD      R0,SP,#+44
   \   000040E2   0x.... 0x....      BL       strcpy
   3796                                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000040E6   0xA80B             ADD      R0,SP,#+44
   \   000040E8   0x.... 0x....      BL       strlen
   \   000040EC   0xA90B             ADD      R1,SP,#+44
   \   000040EE   0x.... 0x....      BL       BGM111_Transmit
   3797                                              }
   3798                                              sprintf( (char *)tempBffr2, "COMPLETE" );
   \                     ??RoadBrd_ParseString_632: (+1)
   \   000040F2   0x.... 0x....      LDR.W    R1,??DataTable3_14
   \   000040F6   0xA80B             ADD      R0,SP,#+44
   \   000040F8   0x.... 0x....      BL       sprintf
   3799                                            } // EndElse ((new_value > 9999) || (new_value < 0))
   3800                                          } // EndElse (flag == 0)
   3801                                        } // EndElse (tempBffr[4]!=':')
   3802                                        break;
   \                     ??RoadBrd_ParseString_622: (+1)
   \   000040FC   0xE19E             B.N      ??RoadBrd_ParseString_633
   3803          //------------------
   3804                                      case 'S':
   3805                                        //Key Flash Variable Set Sensor Sample Rate Command.
   3806                                        // Step 1. Validate format.
   3807                                        if(tempBffr[4]!=':')
   \                     ??RoadBrd_ParseString_617: (+1)
   \   000040FE   0x7920             LDRB     R0,[R4, #+4]
   \   00004100   0x283A             CMP      R0,#+58
   \   00004102   0xD019             BEQ.N    ??RoadBrd_ParseString_634
   3808                                        {
   3809                                          // Is this a BLE Operation?
   3810                                          if ( BLE_Flag )
   \   00004104   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004106   0x2D00             CMP      R5,#+0
   \   00004108   0xD00A             BEQ.N    ??RoadBrd_ParseString_635
   3811                                          {
   3812                                            // Yes...Build and Send BLE Response NOW.
   3813                                            strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSS_SYNTAX</STATUS>");
   \   0000410A   0x.... 0x....      LDR.W    R1,??DataTable3_15
   \   0000410E   0xA80B             ADD      R0,SP,#+44
   \   00004110   0x.... 0x....      BL       strcpy
   3814                                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004114   0xA80B             ADD      R0,SP,#+44
   \   00004116   0x.... 0x....      BL       strlen
   \   0000411A   0xA90B             ADD      R1,SP,#+44
   \   0000411C   0x.... 0x....      BL       BGM111_Transmit
   3815                                          }
   3816                                          strcpy( (char *)tempBffr2, "TKSS SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_635: (+1)
   \   00004120   0x.... 0x....      LDR.W    R1,??DataTable3_16
   \   00004124   0xA80B             ADD      R0,SP,#+44
   \   00004126   0x.... 0x....      BL       strcpy
   \   0000412A   0xE06F             B.N      ??RoadBrd_ParseString_636
   \                     ??RoadBrd_ParseString_545:
   \   0000412C   0x........         DC32     ?_246
   \   00004130   0x........         DC32     ?_247
   \   00004134   0x........         DC32     ?_248
   3817                                        } // Endif (tempBffr[4]!=':')
   3818                                        else
   3819                                        {
   3820                                          // 2. Verify if remaining string is digits
   3821                                          if (Size > 5)
   \                     ??RoadBrd_ParseString_634: (+1)
   \   00004138   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   0000413C   0x2806             CMP      R0,#+6
   \   0000413E   0xDB10             BLT.N    ??RoadBrd_ParseString_637
   3822                                          {
   3823                                            flag = 1;
   \   00004140   0x2001             MOVS     R0,#+1
   \   00004142   0x902E             STR      R0,[SP, #+184]
   3824                                            for (x=5; x< Size; x++)
   \   00004144   0x2005             MOVS     R0,#+5
   \   00004146   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_638: (+1)
   \   00004148   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   0000414C   0x4287             CMP      R7,R0
   \   0000414E   0xDA0A             BGE.N    ??RoadBrd_ParseString_639
   3825                                            {
   3826                                              if (isdigit(tempBffr[x]) == 0)
   \   00004150   0x5DE0             LDRB     R0,[R4, R7]
   \   00004152   0x.... 0x....      BL       isdigit
   \   00004156   0x2800             CMP      R0,#+0
   \   00004158   0xD101             BNE.N    ??RoadBrd_ParseString_640
   3827                                                flag = 0;
   \   0000415A   0x2000             MOVS     R0,#+0
   \   0000415C   0x902E             STR      R0,[SP, #+184]
   3828                                            }
   \                     ??RoadBrd_ParseString_640: (+1)
   \   0000415E   0x1C7F             ADDS     R7,R7,#+1
   \   00004160   0xE7F2             B.N      ??RoadBrd_ParseString_638
   3829                                          } // EndIf (Size > 5)
   3830                                          else
   3831                                            flag = 0;
   \                     ??RoadBrd_ParseString_637: (+1)
   \   00004162   0x2000             MOVS     R0,#+0
   \   00004164   0x902E             STR      R0,[SP, #+184]
   3832                                          if (flag == 0)
   \                     ??RoadBrd_ParseString_639: (+1)
   \   00004166   0x982E             LDR      R0,[SP, #+184]
   \   00004168   0x2800             CMP      R0,#+0
   \   0000416A   0xD113             BNE.N    ??RoadBrd_ParseString_641
   3833                                          {
   3834                                            // Is this a BLE Operation?
   3835                                            if ( BLE_Flag )
   \   0000416C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000416E   0x2D00             CMP      R5,#+0
   \   00004170   0xD00A             BEQ.N    ??RoadBrd_ParseString_642
   3836                                            {
   3837                                              // Yes...Build and Send BLE Response NOW.
   3838                                              strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSS_BADPARAM</STATUS>");
   \   00004172   0x.... 0x....      LDR.W    R1,??DataTable4
   \   00004176   0xA80B             ADD      R0,SP,#+44
   \   00004178   0x.... 0x....      BL       strcpy
   3839                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000417C   0xA80B             ADD      R0,SP,#+44
   \   0000417E   0x.... 0x....      BL       strlen
   \   00004182   0xA90B             ADD      R1,SP,#+44
   \   00004184   0x.... 0x....      BL       BGM111_Transmit
   3840                                            }
   3841                                            strcpy( (char *)tempBffr2, "TKSS SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_642: (+1)
   \   00004188   0x.... 0x....      LDR.W    R1,??DataTable4_1
   \   0000418C   0xA80B             ADD      R0,SP,#+44
   \   0000418E   0x.... 0x....      BL       strcpy
   \   00004192   0xE03B             B.N      ??RoadBrd_ParseString_636
   3842                                          }
   3843                                          else
   3844                                          {
   3845                                            // 3. Grab remaining string and convert to integer.
   3846                                            tempPstr = &tempBffr[5];
   \                     ??RoadBrd_ParseString_641: (+1)
   \   00004194   0x1D60             ADDS     R0,R4,#+5
   \   00004196   0x9030             STR      R0,[SP, #+192]
   3847                                            strcpy(tempstr, tempPstr);
   \   00004198   0x9930             LDR      R1,[SP, #+192]
   \   0000419A   0xA852             ADD      R0,SP,#+328
   \   0000419C   0x.... 0x....      BL       strcpy
   3848                                            new_value = atoi( tempstr );
   \   000041A0   0xA852             ADD      R0,SP,#+328
   \   000041A2   0x.... 0x....      BL       atoi
   \   000041A6   0x902F             STR      R0,[SP, #+188]
   3849                                            if((new_value > 9999) ||
   3850                                               (new_value < 0))
   \   000041A8   0x982F             LDR      R0,[SP, #+188]
   \   000041AA   0xF242 0x7110      MOVW     R1,#+10000
   \   000041AE   0x4288             CMP      R0,R1
   \   000041B0   0xDA02             BGE.N    ??RoadBrd_ParseString_643
   \   000041B2   0x982F             LDR      R0,[SP, #+188]
   \   000041B4   0x2800             CMP      R0,#+0
   \   000041B6   0xD513             BPL.N    ??RoadBrd_ParseString_644
   3851                                            {
   3852                                              // Is this a BLE Operation?
   3853                                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_643: (+1)
   \   000041B8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000041BA   0x2D00             CMP      R5,#+0
   \   000041BC   0xD00A             BEQ.N    ??RoadBrd_ParseString_645
   3854                                              {
   3855                                                // Yes...Build and Send BLE Response NOW.
   3856                                                strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSS_BADPARAM</STATUS>");
   \   000041BE   0x.... 0x....      LDR.W    R1,??DataTable4
   \   000041C2   0xA80B             ADD      R0,SP,#+44
   \   000041C4   0x.... 0x....      BL       strcpy
   3857                                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000041C8   0xA80B             ADD      R0,SP,#+44
   \   000041CA   0x.... 0x....      BL       strlen
   \   000041CE   0xA90B             ADD      R1,SP,#+44
   \   000041D0   0x.... 0x....      BL       BGM111_Transmit
   3858                                              }
   3859                                              strcpy( (char *)tempBffr2, "TKSS SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_645: (+1)
   \   000041D4   0x.... 0x....      LDR.W    R1,??DataTable4_1
   \   000041D8   0xA80B             ADD      R0,SP,#+44
   \   000041DA   0x.... 0x....      BL       strcpy
   \   000041DE   0xE015             B.N      ??RoadBrd_ParseString_636
   3860                                            }
   3861                                            else
   3862                                            {
   3863                                              // Time to set new Road Sound Sample Rate.
   3864                                              RoadBrd_Set_SnsrTickCnt( new_value );
   \                     ??RoadBrd_ParseString_644: (+1)
   \   000041E0   0x982F             LDR      R0,[SP, #+188]
   \   000041E2   0x.... 0x....      BL       RoadBrd_Set_SnsrTickCnt
   3865                                              // Is this a BLE Operation?
   3866                                              if ( BLE_Flag )
   \   000041E6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000041E8   0x2D00             CMP      R5,#+0
   \   000041EA   0xD00A             BEQ.N    ??RoadBrd_ParseString_646
   3867                                              {
   3868                                                // Yes...Build and Send BLE Response NOW.
   3869                                                strcpy( (char *)tempBffr2, "<STATUS>ST_TKSS_ACK</STATUS>");
   \   000041EC   0x.... 0x....      LDR.W    R1,??DataTable4_2
   \   000041F0   0xA80B             ADD      R0,SP,#+44
   \   000041F2   0x.... 0x....      BL       strcpy
   3870                                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000041F6   0xA80B             ADD      R0,SP,#+44
   \   000041F8   0x.... 0x....      BL       strlen
   \   000041FC   0xA90B             ADD      R1,SP,#+44
   \   000041FE   0x.... 0x....      BL       BGM111_Transmit
   3871                                              }
   3872                                              // NOW, Build Data String..
   3873                                              sprintf( (char *)tempBffr2, "COMPLETE" );
   \                     ??RoadBrd_ParseString_646: (+1)
   \   00004202   0x.... 0x....      LDR.W    R1,??DataTable3_14
   \   00004206   0xA80B             ADD      R0,SP,#+44
   \   00004208   0x.... 0x....      BL       sprintf
   3874                                            } // EndElse ((new_value > 9999) || (new_value < 0))
   3875                                          } // EndElse (flag == 0)
   3876                                        } // EndElse (tempBffr[4]!=':')
   3877                                        break;
   \                     ??RoadBrd_ParseString_636: (+1)
   \   0000420C   0xE116             B.N      ??RoadBrd_ParseString_633
   3878          //------------------
   3879                                      case 'T':
   3880                                        //Key Flash Variable Set TACK Limit(Multiple of Road Sound Throttles).
   3881                                        // Step 1. Validate format.
   3882                                        if(tempBffr[4]!=':')
   \                     ??RoadBrd_ParseString_618: (+1)
   \   0000420E   0x7920             LDRB     R0,[R4, #+4]
   \   00004210   0x283A             CMP      R0,#+58
   \   00004212   0xD017             BEQ.N    ??RoadBrd_ParseString_647
   3883                                        {
   3884                                          // Is this a BLE Operation?
   3885                                          if ( BLE_Flag )
   \   00004214   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004216   0x2D00             CMP      R5,#+0
   \   00004218   0xD00A             BEQ.N    ??RoadBrd_ParseString_648
   3886                                          {
   3887                                            // Yes...Build and Send BLE Response NOW.
   3888                                            strcpy( (char *)tempBffr2, "<STATUS>CMD_TKST_SYNTAX</STATUS>");
   \   0000421A   0x.... 0x....      LDR.W    R1,??DataTable4_3
   \   0000421E   0xA80B             ADD      R0,SP,#+44
   \   00004220   0x.... 0x....      BL       strcpy
   3889                                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004224   0xA80B             ADD      R0,SP,#+44
   \   00004226   0x.... 0x....      BL       strlen
   \   0000422A   0xA90B             ADD      R1,SP,#+44
   \   0000422C   0x.... 0x....      BL       BGM111_Transmit
   3890                                          }
   3891                                          strcpy( (char *)tempBffr2, "TKST SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_648: (+1)
   \   00004230   0x.... 0x....      LDR.W    R1,??DataTable4_4
   \   00004234   0xA80B             ADD      R0,SP,#+44
   \   00004236   0x.... 0x....      BL       strcpy
   \   0000423A   0xE071             B.N      ??RoadBrd_ParseString_649
   \                     ??RoadBrd_ParseString_548:
   \   0000423C   0x........         DC32     ?_249
   \   00004240   0x........         DC32     ?_250
   3892                                        } // Endif (tempBffr[4]!=':')
   3893                                        else
   3894                                        {
   3895                                          // 2. Verify if remaining string is digits
   3896                                          if (Size > 5)
   \                     ??RoadBrd_ParseString_647: (+1)
   \   00004244   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   00004248   0x2806             CMP      R0,#+6
   \   0000424A   0xDB10             BLT.N    ??RoadBrd_ParseString_650
   3897                                          {
   3898                                            flag = 1;
   \   0000424C   0x2001             MOVS     R0,#+1
   \   0000424E   0x902E             STR      R0,[SP, #+184]
   3899                                            for (x=5; x< Size; x++)
   \   00004250   0x2005             MOVS     R0,#+5
   \   00004252   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_651: (+1)
   \   00004254   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   00004258   0x4287             CMP      R7,R0
   \   0000425A   0xDA0A             BGE.N    ??RoadBrd_ParseString_652
   3900                                            {
   3901                                              if (isdigit(tempBffr[x]) == 0)
   \   0000425C   0x5DE0             LDRB     R0,[R4, R7]
   \   0000425E   0x.... 0x....      BL       isdigit
   \   00004262   0x2800             CMP      R0,#+0
   \   00004264   0xD101             BNE.N    ??RoadBrd_ParseString_653
   3902                                                flag = 0;
   \   00004266   0x2000             MOVS     R0,#+0
   \   00004268   0x902E             STR      R0,[SP, #+184]
   3903                                            }
   \                     ??RoadBrd_ParseString_653: (+1)
   \   0000426A   0x1C7F             ADDS     R7,R7,#+1
   \   0000426C   0xE7F2             B.N      ??RoadBrd_ParseString_651
   3904                                          } // EndIf (Size > 5)
   3905                                          else
   3906                                            flag = 0;
   \                     ??RoadBrd_ParseString_650: (+1)
   \   0000426E   0x2000             MOVS     R0,#+0
   \   00004270   0x902E             STR      R0,[SP, #+184]
   3907                                          if (flag == 0)
   \                     ??RoadBrd_ParseString_652: (+1)
   \   00004272   0x982E             LDR      R0,[SP, #+184]
   \   00004274   0x2800             CMP      R0,#+0
   \   00004276   0xD115             BNE.N    ??RoadBrd_ParseString_654
   3908                                          {
   3909                                            // Is this a BLE Operation?
   3910                                            if ( BLE_Flag )
   \   00004278   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000427A   0x2D00             CMP      R5,#+0
   \   0000427C   0xD00A             BEQ.N    ??RoadBrd_ParseString_655
   3911                                            {
   3912                                              // Yes...Build and Send BLE Response NOW.
   3913                                              strcpy( (char *)tempBffr2, "<STATUS>CMD_TKST_BADPARAM</STATUS>");
   \   0000427E   0x.... 0x....      LDR.W    R1,??DataTable4_5
   \   00004282   0xA80B             ADD      R0,SP,#+44
   \   00004284   0x.... 0x....      BL       strcpy
   3914                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004288   0xA80B             ADD      R0,SP,#+44
   \   0000428A   0x.... 0x....      BL       strlen
   \   0000428E   0xA90B             ADD      R1,SP,#+44
   \   00004290   0x.... 0x....      BL       BGM111_Transmit
   3915                                            }
   3916                                            strcpy( (char *)tempBffr2, "TKST SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_655: (+1)
   \   00004294   0x.... 0x....      LDR.W    R1,??DataTable4_6
   \   00004298   0xA80B             ADD      R0,SP,#+44
   \   0000429A   0x.... 0x....      BL       strcpy
   \   0000429E   0xE03F             B.N      ??RoadBrd_ParseString_649
   \                     ??RoadBrd_ParseString_550:
   \   000042A0   0x........         DC32     ?_251
   3917                                          }
   3918                                          else
   3919                                          {
   3920                                            // 3. Grab remaining string and convert to integer.
   3921                                            tempPstr = &tempBffr[5];
   \                     ??RoadBrd_ParseString_654: (+1)
   \   000042A4   0x1D60             ADDS     R0,R4,#+5
   \   000042A6   0x9030             STR      R0,[SP, #+192]
   3922                                            strcpy(tempstr, tempPstr);
   \   000042A8   0x9930             LDR      R1,[SP, #+192]
   \   000042AA   0xA852             ADD      R0,SP,#+328
   \   000042AC   0x.... 0x....      BL       strcpy
   3923                                            new_value = atoi( tempstr );
   \   000042B0   0xA852             ADD      R0,SP,#+328
   \   000042B2   0x.... 0x....      BL       atoi
   \   000042B6   0x902F             STR      R0,[SP, #+188]
   3924                                            if((new_value > 9999) ||
   3925                                               (new_value < 0))
   \   000042B8   0x982F             LDR      R0,[SP, #+188]
   \   000042BA   0xF242 0x7110      MOVW     R1,#+10000
   \   000042BE   0x4288             CMP      R0,R1
   \   000042C0   0xDA02             BGE.N    ??RoadBrd_ParseString_656
   \   000042C2   0x982F             LDR      R0,[SP, #+188]
   \   000042C4   0x2800             CMP      R0,#+0
   \   000042C6   0xD515             BPL.N    ??RoadBrd_ParseString_657
   3926                                            {
   3927                                              // Is this a BLE Operation?
   3928                                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_656: (+1)
   \   000042C8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000042CA   0x2D00             CMP      R5,#+0
   \   000042CC   0xD00A             BEQ.N    ??RoadBrd_ParseString_658
   3929                                              {
   3930                                                // Yes...Build and Send BLE Response NOW.
   3931                                                strcpy( (char *)tempBffr2, "<STATUS>CMD_TKST_BADPARAM</STATUS>");
   \   000042CE   0x.... 0x....      LDR.W    R1,??DataTable4_5
   \   000042D2   0xA80B             ADD      R0,SP,#+44
   \   000042D4   0x.... 0x....      BL       strcpy
   3932                                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000042D8   0xA80B             ADD      R0,SP,#+44
   \   000042DA   0x.... 0x....      BL       strlen
   \   000042DE   0xA90B             ADD      R1,SP,#+44
   \   000042E0   0x.... 0x....      BL       BGM111_Transmit
   3933                                              }
   3934                                              strcpy( (char *)tempBffr2, "TKSS SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_658: (+1)
   \   000042E4   0x.... 0x....      LDR.W    R1,??DataTable4_1
   \   000042E8   0xA80B             ADD      R0,SP,#+44
   \   000042EA   0x.... 0x....      BL       strcpy
   \   000042EE   0xE017             B.N      ??RoadBrd_ParseString_649
   \                     ??RoadBrd_ParseString_551:
   \   000042F0   0x........         DC32     ?_252
   3935                                            }
   3936                                            else
   3937                                            {
   3938                                              // Time to set new TACK Limit.
   3939                                              RoadBrd_Set_TackLimit( new_value );
   \                     ??RoadBrd_ParseString_657: (+1)
   \   000042F4   0x982F             LDR      R0,[SP, #+188]
   \   000042F6   0x.... 0x....      BL       RoadBrd_Set_TackLimit
   3940                                              // Is this a BLE Operation?
   3941                                              if ( BLE_Flag )
   \   000042FA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000042FC   0x2D00             CMP      R5,#+0
   \   000042FE   0xD00A             BEQ.N    ??RoadBrd_ParseString_659
   3942                                              {
   3943                                                // Yes...Build and Send BLE Response NOW.
   3944                                                strcpy( (char *)tempBffr2, "<STATUS>ST_TKST_ACK</STATUS>");
   \   00004300   0x.... 0x....      LDR.W    R1,??DataTable4_7
   \   00004304   0xA80B             ADD      R0,SP,#+44
   \   00004306   0x.... 0x....      BL       strcpy
   3945                                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000430A   0xA80B             ADD      R0,SP,#+44
   \   0000430C   0x.... 0x....      BL       strlen
   \   00004310   0xA90B             ADD      R1,SP,#+44
   \   00004312   0x.... 0x....      BL       BGM111_Transmit
   3946                                              }
   3947                                              // NOW, Build Data String..
   3948                                              sprintf( (char *)tempBffr2, "COMPLETE" );
   \                     ??RoadBrd_ParseString_659: (+1)
   \   00004316   0x.... 0x....      LDR.W    R1,??DataTable3_14
   \   0000431A   0xA80B             ADD      R0,SP,#+44
   \   0000431C   0x.... 0x....      BL       sprintf
   3949                                            } // EndElse ((new_value > 9999) || (new_value < 0))
   3950                                          } // EndElse (flag == 0)
   3951                                        } // EndElse (tempBffr[4]!=':')
   3952                                        break;
   \                     ??RoadBrd_ParseString_649: (+1)
   \   00004320   0xE08C             B.N      ??RoadBrd_ParseString_633
   3953                                      case 'B':
   3954                                        //Key Flash Variable Set Boot Delay(Seconds).
   3955                                        // Step 1. Validate format.
   3956                                        if(tempBffr[4]!=':')
   \                     ??RoadBrd_ParseString_615: (+1)
   \   00004322   0x7920             LDRB     R0,[R4, #+4]
   \   00004324   0x283A             CMP      R0,#+58
   \   00004326   0xD017             BEQ.N    ??RoadBrd_ParseString_660
   3957                                        {
   3958                                          // Is this a BLE Operation?
   3959                                          if ( BLE_Flag )
   \   00004328   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000432A   0x2D00             CMP      R5,#+0
   \   0000432C   0xD00A             BEQ.N    ??RoadBrd_ParseString_661
   3960                                          {
   3961                                            // Yes...Build and Send BLE Response NOW.
   3962                                            strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSB_SYNTAX</STATUS>");
   \   0000432E   0x.... 0x....      LDR.W    R1,??DataTable4_8
   \   00004332   0xA80B             ADD      R0,SP,#+44
   \   00004334   0x.... 0x....      BL       strcpy
   3963                                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004338   0xA80B             ADD      R0,SP,#+44
   \   0000433A   0x.... 0x....      BL       strlen
   \   0000433E   0xA90B             ADD      R1,SP,#+44
   \   00004340   0x.... 0x....      BL       BGM111_Transmit
   3964                                          }
   3965                                          strcpy( (char *)tempBffr2, "TKSB SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_661: (+1)
   \   00004344   0x.... 0x....      LDR.W    R1,??DataTable4_9
   \   00004348   0xA80B             ADD      R0,SP,#+44
   \   0000434A   0x.... 0x....      BL       strcpy
   \   0000434E   0xE06F             B.N      ??RoadBrd_ParseString_662
   \                     ??RoadBrd_ParseString_553:
   \   00004350   0x........         DC32     ?_253
   \   00004354   0x........         DC32     ?_254
   3966                                        } // Endif (tempBffr[4]!=':')
   3967                                        else
   3968                                        {
   3969                                          // 2. Verify if remaining string is digits
   3970                                          if (Size > 5)
   \                     ??RoadBrd_ParseString_660: (+1)
   \   00004358   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   0000435C   0x2806             CMP      R0,#+6
   \   0000435E   0xDB10             BLT.N    ??RoadBrd_ParseString_663
   3971                                          {
   3972                                            flag = 1;
   \   00004360   0x2001             MOVS     R0,#+1
   \   00004362   0x902E             STR      R0,[SP, #+184]
   3973                                            for (x=5; x< Size; x++)
   \   00004364   0x2005             MOVS     R0,#+5
   \   00004366   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_664: (+1)
   \   00004368   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   0000436C   0x4287             CMP      R7,R0
   \   0000436E   0xDA0A             BGE.N    ??RoadBrd_ParseString_665
   3974                                            {
   3975                                              if (isdigit(tempBffr[x]) == 0)
   \   00004370   0x5DE0             LDRB     R0,[R4, R7]
   \   00004372   0x.... 0x....      BL       isdigit
   \   00004376   0x2800             CMP      R0,#+0
   \   00004378   0xD101             BNE.N    ??RoadBrd_ParseString_666
   3976                                                flag = 0;
   \   0000437A   0x2000             MOVS     R0,#+0
   \   0000437C   0x902E             STR      R0,[SP, #+184]
   3977                                            }
   \                     ??RoadBrd_ParseString_666: (+1)
   \   0000437E   0x1C7F             ADDS     R7,R7,#+1
   \   00004380   0xE7F2             B.N      ??RoadBrd_ParseString_664
   3978                                          } // EndIf (Size > 5)
   3979                                          else
   3980                                            flag = 0;
   \                     ??RoadBrd_ParseString_663: (+1)
   \   00004382   0x2000             MOVS     R0,#+0
   \   00004384   0x902E             STR      R0,[SP, #+184]
   3981                                          if (flag == 0)
   \                     ??RoadBrd_ParseString_665: (+1)
   \   00004386   0x982E             LDR      R0,[SP, #+184]
   \   00004388   0x2800             CMP      R0,#+0
   \   0000438A   0xD113             BNE.N    ??RoadBrd_ParseString_667
   3982                                          {
   3983                                            // Is this a BLE Operation?
   3984                                            if ( BLE_Flag )
   \   0000438C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000438E   0x2D00             CMP      R5,#+0
   \   00004390   0xD00A             BEQ.N    ??RoadBrd_ParseString_668
   3985                                            {
   3986                                              // Yes...Build and Send BLE Response NOW.
   3987                                              strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSB_BADPARAM</STATUS>");
   \   00004392   0x.... 0x....      LDR.W    R1,??DataTable4_10
   \   00004396   0xA80B             ADD      R0,SP,#+44
   \   00004398   0x.... 0x....      BL       strcpy
   3988                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000439C   0xA80B             ADD      R0,SP,#+44
   \   0000439E   0x.... 0x....      BL       strlen
   \   000043A2   0xA90B             ADD      R1,SP,#+44
   \   000043A4   0x.... 0x....      BL       BGM111_Transmit
   3989                                            }
   3990                                            strcpy( (char *)tempBffr2, "TKSB SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_668: (+1)
   \   000043A8   0x.... 0x....      LDR.W    R1,??DataTable4_11
   \   000043AC   0xA80B             ADD      R0,SP,#+44
   \   000043AE   0x.... 0x....      BL       strcpy
   \   000043B2   0xE03D             B.N      ??RoadBrd_ParseString_662
   3991                                          }
   3992                                          else
   3993                                          {
   3994                                            // 3. Grab remaining string and convert to integer.
   3995                                            tempPstr = &tempBffr[5];
   \                     ??RoadBrd_ParseString_667: (+1)
   \   000043B4   0x1D60             ADDS     R0,R4,#+5
   \   000043B6   0x9030             STR      R0,[SP, #+192]
   3996                                            strcpy(tempstr, tempPstr);
   \   000043B8   0x9930             LDR      R1,[SP, #+192]
   \   000043BA   0xA852             ADD      R0,SP,#+328
   \   000043BC   0x.... 0x....      BL       strcpy
   3997                                            new_value = atoi( tempstr );
   \   000043C0   0xA852             ADD      R0,SP,#+328
   \   000043C2   0x.... 0x....      BL       atoi
   \   000043C6   0x902F             STR      R0,[SP, #+188]
   3998                                            if((new_value > 999) ||
   3999                                               (new_value < 0))
   \   000043C8   0x982F             LDR      R0,[SP, #+188]
   \   000043CA   0xF5B0 0x7F7A      CMP      R0,#+1000
   \   000043CE   0xDA02             BGE.N    ??RoadBrd_ParseString_669
   \   000043D0   0x982F             LDR      R0,[SP, #+188]
   \   000043D2   0x2800             CMP      R0,#+0
   \   000043D4   0xD516             BPL.N    ??RoadBrd_ParseString_670
   4000                                            {
   4001                                              // Is this a BLE Operation?
   4002                                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_669: (+1)
   \   000043D6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000043D8   0x2D00             CMP      R5,#+0
   \   000043DA   0xD00A             BEQ.N    ??RoadBrd_ParseString_671
   4003                                              {
   4004                                                // Yes...Build and Send BLE Response NOW.
   4005                                                strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSB_BADPARAM</STATUS>");
   \   000043DC   0x.... 0x....      LDR.W    R1,??DataTable4_10
   \   000043E0   0xA80B             ADD      R0,SP,#+44
   \   000043E2   0x.... 0x....      BL       strcpy
   4006                                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000043E6   0xA80B             ADD      R0,SP,#+44
   \   000043E8   0x.... 0x....      BL       strlen
   \   000043EC   0xA90B             ADD      R1,SP,#+44
   \   000043EE   0x.... 0x....      BL       BGM111_Transmit
   4007                                              }
   4008                                              strcpy( (char *)tempBffr2, "TKSB SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_671: (+1)
   \   000043F2   0x.... 0x....      LDR.W    R1,??DataTable4_11
   \   000043F6   0xA80B             ADD      R0,SP,#+44
   \   000043F8   0x.... 0x....      BL       strcpy
   \   000043FC   0xE018             B.N      ??RoadBrd_ParseString_662
   \   000043FE   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_555:
   \   00004400   0x........         DC32     ?_255
   4009                                            }
   4010                                            else
   4011                                            {
   4012                                              // Time to set new Boot Delay.
   4013                                              RoadBrd_Set_BootDelay( new_value );
   \                     ??RoadBrd_ParseString_670: (+1)
   \   00004404   0x982F             LDR      R0,[SP, #+188]
   \   00004406   0x.... 0x....      BL       RoadBrd_Set_BootDelay
   4014                                              // Is this a BLE Operation?
   4015                                              if ( BLE_Flag )
   \   0000440A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000440C   0x2D00             CMP      R5,#+0
   \   0000440E   0xD00A             BEQ.N    ??RoadBrd_ParseString_672
   4016                                              {
   4017                                                // Yes...Build and Send BLE Response NOW.
   4018                                                strcpy( (char *)tempBffr2, "<STATUS>ST_TKSB_ACK</STATUS>");
   \   00004410   0x.... 0x....      LDR.W    R1,??DataTable4_12
   \   00004414   0xA80B             ADD      R0,SP,#+44
   \   00004416   0x.... 0x....      BL       strcpy
   4019                                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000441A   0xA80B             ADD      R0,SP,#+44
   \   0000441C   0x.... 0x....      BL       strlen
   \   00004420   0xA90B             ADD      R1,SP,#+44
   \   00004422   0x.... 0x....      BL       BGM111_Transmit
   4020                                              }
   4021                                              // NOW, Build Data String..
   4022                                              sprintf( (char *)tempBffr2, "COMPLETE" );
   \                     ??RoadBrd_ParseString_672: (+1)
   \   00004426   0x.... 0x....      LDR.W    R1,??DataTable3_14
   \   0000442A   0xA80B             ADD      R0,SP,#+44
   \   0000442C   0x.... 0x....      BL       sprintf
   4023                                            } // EndElse ((new_value > 999) || (new_value < 0))
   4024                                          } // EndElse (flag == 0)
   4025                                        } // EndElse (tempBffr[4]!=':')
   4026                                        break;
   \                     ??RoadBrd_ParseString_662: (+1)
   \   00004430   0xE004             B.N      ??RoadBrd_ParseString_633
   4027                                      default:
   4028                                        strcpy( (char *)tempBffr2, "TKS ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_619: (+1)
   \   00004432   0x.... 0x....      LDR.W    R1,??DataTable4_13
   \   00004436   0xA80B             ADD      R0,SP,#+44
   \   00004438   0x.... 0x....      BL       strcpy
   4029                                        break;
   4030                                    } // EndSwitch ( tempBffr[3] )
   4031                                    break;
   \                     ??RoadBrd_ParseString_633: (+1)
   \   0000443C   0xE0CB             B.N      ??RoadBrd_ParseString_611
   \   0000443E   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_556:
   \   00004440   0x........         DC32     ?_256
   \   00004444   0x........         DC32     ?_257
   4032          //------------------
   4033                                  case 'R':
   4034                                    //Key Flash Variable Read Command
   4035                                    switch( tempBffr[3] )
   \                     ??RoadBrd_ParseString_612: (+1)
   \   00004448   0x78E0             LDRB     R0,[R4, #+3]
   \   0000444A   0x2842             CMP      R0,#+66
   \   0000444C   0xF000 0x807E      BEQ.W    ??RoadBrd_ParseString_673
   \   00004450   0x2852             CMP      R0,#+82
   \   00004452   0xD004             BEQ.N    ??RoadBrd_ParseString_674
   \   00004454   0x2853             CMP      R0,#+83
   \   00004456   0xD031             BEQ.N    ??RoadBrd_ParseString_675
   \   00004458   0x2854             CMP      R0,#+84
   \   0000445A   0xD05D             BEQ.N    ??RoadBrd_ParseString_676
   \   0000445C   0xE092             B.N      ??RoadBrd_ParseString_677
   4036                                    {
   4037          //------------------
   4038                                      case 'R':
   4039                                        //Key Flash Variable Read Road Sound Sample Rate Command.
   4040                                        // Is this a BLE Operation?
   4041                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_674: (+1)
   \   0000445E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004460   0x2D00             CMP      R5,#+0
   \   00004462   0xD016             BEQ.N    ??RoadBrd_ParseString_678
   4042                                        {
   4043                                          // Yes...Build and Send BLE Response NOW.
   4044                                          sprintf( (char *)tempBffr2, "<STATUS>ST_TKRR:%3.1f</STATUS>", ((float)RoadBrd_Get_RdSndTickCnt()/10));
   \   00004464   0x.... 0x....      BL       RoadBrd_Get_RdSndTickCnt
   \   00004468   0x.... 0x....      BL       __aeabi_ui2f
   \   0000446C   0x.... 0x....      LDR.W    R1,??DataTable4_14  ;; 0x41200000
   \   00004470   0x.... 0x....      BL       __aeabi_fdiv
   \   00004474   0x.... 0x....      BL       __aeabi_f2d
   \   00004478   0x0002             MOVS     R2,R0
   \   0000447A   0x000B             MOVS     R3,R1
   \   0000447C   0x.... 0x....      LDR.W    R1,??DataTable4_15
   \   00004480   0xA80B             ADD      R0,SP,#+44
   \   00004482   0x.... 0x....      BL       sprintf
   4045                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004486   0xA80B             ADD      R0,SP,#+44
   \   00004488   0x.... 0x....      BL       strlen
   \   0000448C   0xA90B             ADD      R1,SP,#+44
   \   0000448E   0x.... 0x....      BL       BGM111_Transmit
   4046                                        }
   4047                                        sprintf( (char *)tempBffr2, "RdSnd Sample Rate:  %3.1f Seconds.\r\n", ((float)RoadBrd_Get_RdSndTickCnt()/10));
   \                     ??RoadBrd_ParseString_678: (+1)
   \   00004492   0x.... 0x....      BL       RoadBrd_Get_RdSndTickCnt
   \   00004496   0x.... 0x....      BL       __aeabi_ui2f
   \   0000449A   0x.... 0x....      LDR.W    R1,??DataTable4_14  ;; 0x41200000
   \   0000449E   0x.... 0x....      BL       __aeabi_fdiv
   \   000044A2   0x.... 0x....      BL       __aeabi_f2d
   \   000044A6   0x0002             MOVS     R2,R0
   \   000044A8   0x000B             MOVS     R3,R1
   \   000044AA   0x.... 0x....      LDR.W    R1,??DataTable4_16
   \   000044AE   0xA80B             ADD      R0,SP,#+44
   \   000044B0   0x.... 0x....      BL       sprintf
   4048                                        break;
   \   000044B4   0xE079             B.N      ??RoadBrd_ParseString_679
   \   000044B6   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_558:
   \   000044B8   0x........         DC32     ?_258
   4049          //------------------
   4050                                      case 'S':
   4051                                        //Key Flash Variable Read Sensor Sample Rate Command.
   4052                                        // Is this a BLE Operation?
   4053                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_675: (+1)
   \   000044BC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000044BE   0x2D00             CMP      R5,#+0
   \   000044C0   0xD016             BEQ.N    ??RoadBrd_ParseString_680
   4054                                        {
   4055                                          // Yes...Build and Send BLE Response NOW.
   4056                                          sprintf( (char *)tempBffr2, "<STATUS>ST_TKRS:%3.1f</STATUS>", ((float)RoadBrd_Get_SnsrTickCnt()/10));
   \   000044C2   0x.... 0x....      BL       RoadBrd_Get_SnsrTickCnt
   \   000044C6   0x.... 0x....      BL       __aeabi_ui2f
   \   000044CA   0x.... 0x....      LDR.W    R1,??DataTable4_14  ;; 0x41200000
   \   000044CE   0x.... 0x....      BL       __aeabi_fdiv
   \   000044D2   0x.... 0x....      BL       __aeabi_f2d
   \   000044D6   0x0002             MOVS     R2,R0
   \   000044D8   0x000B             MOVS     R3,R1
   \   000044DA   0x.... 0x....      LDR.W    R1,??DataTable4_17
   \   000044DE   0xA80B             ADD      R0,SP,#+44
   \   000044E0   0x.... 0x....      BL       sprintf
   4057                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000044E4   0xA80B             ADD      R0,SP,#+44
   \   000044E6   0x.... 0x....      BL       strlen
   \   000044EA   0xA90B             ADD      R1,SP,#+44
   \   000044EC   0x.... 0x....      BL       BGM111_Transmit
   4058                                        }
   4059                                        sprintf( (char *)tempBffr2, "Sensor Sample Rate: %3.1f Seconds.\r\n\r\n> ", ((float)RoadBrd_Get_SnsrTickCnt()/10));
   \                     ??RoadBrd_ParseString_680: (+1)
   \   000044F0   0x.... 0x....      BL       RoadBrd_Get_SnsrTickCnt
   \   000044F4   0x.... 0x....      BL       __aeabi_ui2f
   \   000044F8   0x.... 0x....      LDR.W    R1,??DataTable4_14  ;; 0x41200000
   \   000044FC   0x.... 0x....      BL       __aeabi_fdiv
   \   00004500   0x.... 0x....      BL       __aeabi_f2d
   \   00004504   0x0002             MOVS     R2,R0
   \   00004506   0x000B             MOVS     R3,R1
   \   00004508   0x.... 0x....      LDR.W    R1,??DataTable4_18
   \   0000450C   0xA80B             ADD      R0,SP,#+44
   \   0000450E   0x.... 0x....      BL       sprintf
   4060                                        break;
   \   00004512   0xE04A             B.N      ??RoadBrd_ParseString_679
   \                     ??RoadBrd_ParseString_560:
   \   00004514   0x........         DC32     ?_259
   4061          //------------------
   4062                                      case 'T':
   4063                                        //Key Flash Variable Read TACK Limit(Multiple of Road Sound Throttles).
   4064                                        // Is this a BLE Operation?
   4065                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_676: (+1)
   \   00004518   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000451A   0x2D00             CMP      R5,#+0
   \   0000451C   0xD00D             BEQ.N    ??RoadBrd_ParseString_681
   4066                                        {
   4067                                          // Yes...Build and Send BLE Response NOW.
   4068                                          sprintf( (char *)tempBffr2, "<STATUS>ST_TKRT:%d</STATUS>", RoadBrd_Get_TackLimit());
   \   0000451E   0x.... 0x....      BL       RoadBrd_Get_TackLimit
   \   00004522   0x0002             MOVS     R2,R0
   \   00004524   0x.... 0x....      LDR.W    R1,??DataTable4_19
   \   00004528   0xA80B             ADD      R0,SP,#+44
   \   0000452A   0x.... 0x....      BL       sprintf
   4069                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000452E   0xA80B             ADD      R0,SP,#+44
   \   00004530   0x.... 0x....      BL       strlen
   \   00004534   0xA90B             ADD      R1,SP,#+44
   \   00004536   0x.... 0x....      BL       BGM111_Transmit
   4070                                        }
   4071                                        sprintf( (char *)tempBffr2, "TACK Limit: %d.\r\n\r\n> ", RoadBrd_Get_TackLimit());
   \                     ??RoadBrd_ParseString_681: (+1)
   \   0000453A   0x.... 0x....      BL       RoadBrd_Get_TackLimit
   \   0000453E   0x0002             MOVS     R2,R0
   \   00004540   0x.... 0x....      LDR.W    R1,??DataTable4_20
   \   00004544   0xA80B             ADD      R0,SP,#+44
   \   00004546   0x.... 0x....      BL       sprintf
   4072                                        break;
   \   0000454A   0xE02E             B.N      ??RoadBrd_ParseString_679
   4073          //------------------
   4074                                      case 'B':
   4075                                        //Key Flash Variable Read Boot Delay.(Seconds).
   4076                                        // Is this a BLE Operation?
   4077                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_673: (+1)
   \   0000454C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000454E   0x2D00             CMP      R5,#+0
   \   00004550   0xD00D             BEQ.N    ??RoadBrd_ParseString_682
   4078                                        {
   4079                                          // Yes...Build and Send BLE Response NOW.
   4080                                          sprintf( (char *)tempBffr2, "<STATUS>ST_TKRB:%d</STATUS>", RoadBrd_Get_BootDelay());
   \   00004552   0x.... 0x....      BL       RoadBrd_Get_BootDelay
   \   00004556   0x0002             MOVS     R2,R0
   \   00004558   0x.... 0x....      LDR.W    R1,??DataTable4_21
   \   0000455C   0xA80B             ADD      R0,SP,#+44
   \   0000455E   0x.... 0x....      BL       sprintf
   4081                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004562   0xA80B             ADD      R0,SP,#+44
   \   00004564   0x.... 0x....      BL       strlen
   \   00004568   0xA90B             ADD      R1,SP,#+44
   \   0000456A   0x.... 0x....      BL       BGM111_Transmit
   4082                                        }
   4083                                        sprintf( (char *)tempBffr2, "Boot Delay: %d Seconds.\r\n\r\n> ", RoadBrd_Get_BootDelay());
   \                     ??RoadBrd_ParseString_682: (+1)
   \   0000456E   0x.... 0x....      BL       RoadBrd_Get_BootDelay
   \   00004572   0x0002             MOVS     R2,R0
   \   00004574   0x.... 0x....      LDR.W    R1,??DataTable4_22
   \   00004578   0xA80B             ADD      R0,SP,#+44
   \   0000457A   0x.... 0x....      BL       sprintf
   4084                                        break;
   \   0000457E   0xE014             B.N      ??RoadBrd_ParseString_679
   \                     ??RoadBrd_ParseString_561:
   \   00004580   0x........         DC32     ?_260
   4085                                      default:
   4086                                        // Is this a BLE Operation?
   4087                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_677: (+1)
   \   00004584   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004586   0x2D00             CMP      R5,#+0
   \   00004588   0xD00A             BEQ.N    ??RoadBrd_ParseString_683
   4088                                        {
   4089                                          // Yes...Build and Send BLE Response NOW.
   4090                                          strcpy( (char *)tempBffr2, "<STATUS>CMD_TKR_SYNTAX</STATUS>");
   \   0000458A   0x.... 0x....      LDR.W    R1,??DataTable4_23
   \   0000458E   0xA80B             ADD      R0,SP,#+44
   \   00004590   0x.... 0x....      BL       strcpy
   4091                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004594   0xA80B             ADD      R0,SP,#+44
   \   00004596   0x.... 0x....      BL       strlen
   \   0000459A   0xA90B             ADD      R1,SP,#+44
   \   0000459C   0x.... 0x....      BL       BGM111_Transmit
   4092                                        }
   4093                                        strcpy( (char *)tempBffr2, "TKR ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_683: (+1)
   \   000045A0   0x.... 0x....      LDR.W    R1,??DataTable4_24
   \   000045A4   0xA80B             ADD      R0,SP,#+44
   \   000045A6   0x.... 0x....      BL       strcpy
   4094                                        break;
   4095                                    } // EndSwitch ( tempBffr[3] )
   4096                                    break;
   \                     ??RoadBrd_ParseString_679: (+1)
   \   000045AA   0xE014             B.N      ??RoadBrd_ParseString_611
   \                     ??RoadBrd_ParseString_563:
   \   000045AC   0x........         DC32     ?_261
   4097                                    // Is this a BLE Operation?
   4098                                  default:
   4099                                    if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_613: (+1)
   \   000045B0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000045B2   0x2D00             CMP      R5,#+0
   \   000045B4   0xD00A             BEQ.N    ??RoadBrd_ParseString_684
   4100                                    {
   4101                                      // Yes...Build and Send BLE Response NOW.
   4102                                      strcpy( (char *)tempBffr2, "<STATUS>CMD_TK_SYNTAX</STATUS>");
   \   000045B6   0x.... 0x....      LDR.W    R1,??DataTable3_5
   \   000045BA   0xA80B             ADD      R0,SP,#+44
   \   000045BC   0x.... 0x....      BL       strcpy
   4103                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000045C0   0xA80B             ADD      R0,SP,#+44
   \   000045C2   0x.... 0x....      BL       strlen
   \   000045C6   0xA90B             ADD      R1,SP,#+44
   \   000045C8   0x.... 0x....      BL       BGM111_Transmit
   4104                                    }
   4105                                    strcpy( (char *)tempBffr2, "ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_684: (+1)
   \   000045CC   0x.... 0x....      LDR.W    R1,??DataTable4_25
   \   000045D0   0xA80B             ADD      R0,SP,#+44
   \   000045D2   0x.... 0x....      BL       strcpy
   4106                                    break;
   4107                                } //EndSwitch ( tempBffr[2] )
   4108                              } //EndElse (Size < 3)
   4109                              break;
   \                     ??RoadBrd_ParseString_611: (+1)
   \   000045D6   0xE278             B.N      ??RoadBrd_ParseString_289
   4110          //++++++++++++++++++++++++++++++++++++++++++  Units Enable/Disable Commands.
   4111                            case 'U':
   4112                              // Key Flash Variable Commands.
   4113                              // Test Size to make sure we have enough Characters for this operation
   4114                              Status = HAL_OK;
   \                     ??RoadBrd_ParseString_300: (+1)
   \   000045D8   0x2000             MOVS     R0,#+0
   \   000045DA   0x0006             MOVS     R6,R0
   4115                              if (Size < 3)
   \   000045DC   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   000045E0   0x2803             CMP      R0,#+3
   \   000045E2   0xDA15             BGE.N    ??RoadBrd_ParseString_685
   4116                              {
   4117                                // Is this a BLE Operation?
   4118                                if ( BLE_Flag )
   \   000045E4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000045E6   0x2D00             CMP      R5,#+0
   \   000045E8   0xD00A             BEQ.N    ??RoadBrd_ParseString_686
   4119                                {
   4120                                  // Yes...Build and Send BLE Response NOW.
   4121                                  strcpy( (char *)tempBffr2, "<STATUS>CMD_TU_SYNTAX</STATUS>");
   \   000045EA   0x.... 0x....      LDR.W    R1,??DataTable4_26
   \   000045EE   0xA80B             ADD      R0,SP,#+44
   \   000045F0   0x.... 0x....      BL       strcpy
   4122                                  BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000045F4   0xA80B             ADD      R0,SP,#+44
   \   000045F6   0x.... 0x....      BL       strlen
   \   000045FA   0xA90B             ADD      R1,SP,#+44
   \   000045FC   0x.... 0x....      BL       BGM111_Transmit
   4123                                }
   4124                                strcpy( (char *)tempBffr2, "TU SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_686: (+1)
   \   00004600   0x.... 0x....      LDR.W    R1,??DataTable4_27
   \   00004604   0xA80B             ADD      R0,SP,#+44
   \   00004606   0x.... 0x....      BL       strcpy
   \   0000460A   0xE04C             B.N      ??RoadBrd_ParseString_687
   \                     ??RoadBrd_ParseString_564:
   \   0000460C   0x........         DC32     ?_262
   4125                              }
   4126                              else
   4127                              {
   4128                                switch( tempBffr[2] )
   \                     ??RoadBrd_ParseString_685: (+1)
   \   00004610   0x78A0             LDRB     R0,[R4, #+2]
   \   00004612   0x2844             CMP      R0,#+68
   \   00004614   0xD01C             BEQ.N    ??RoadBrd_ParseString_688
   \   00004616   0x2845             CMP      R0,#+69
   \   00004618   0xD132             BNE.N    ??RoadBrd_ParseString_689
   4129                                {
   4130          //------------------
   4131                                  case 'E':
   4132                                    //Units Enable Command.
   4133                                    // Is this a BLE Operation?
   4134                                    if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_690: (+1)
   \   0000461A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000461C   0x2D00             CMP      R5,#+0
   \   0000461E   0xD00A             BEQ.N    ??RoadBrd_ParseString_691
   4135                                    {
   4136                                      // Yes...Build and Send BLE Response NOW.
   4137                                      strcpy( (char *)tempBffr2, "<STATUS>ST_TUE_ACK</STATUS>");
   \   00004620   0x.... 0x....      LDR.W    R1,??DataTable4_28
   \   00004624   0xA80B             ADD      R0,SP,#+44
   \   00004626   0x.... 0x....      BL       strcpy
   4138                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000462A   0xA80B             ADD      R0,SP,#+44
   \   0000462C   0x.... 0x....      BL       strlen
   \   00004630   0xA90B             ADD      R1,SP,#+44
   \   00004632   0x.... 0x....      BL       BGM111_Transmit
   4139                                    }
   4140                                    sprintf( (char *)tempBffr2, "Units XML State CHANGED: ENABLED\r\n\r\n> ");
   \                     ??RoadBrd_ParseString_691: (+1)
   \   00004636   0x.... 0x....      LDR.W    R1,??DataTable4_29
   \   0000463A   0xA80B             ADD      R0,SP,#+44
   \   0000463C   0x.... 0x....      BL       sprintf
   4141                                    Status = RoadBrd_Set_UnitsFlag( true );
   \   00004640   0x2001             MOVS     R0,#+1
   \   00004642   0x.... 0x....      BL       RoadBrd_Set_UnitsFlag
   \   00004646   0x0006             MOVS     R6,R0
   4142                                    break;
   \   00004648   0xE02D             B.N      ??RoadBrd_ParseString_687
   \   0000464A   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_566:
   \   0000464C   0x........         DC32     ?_263
   4143          //------------------
   4144                                  case 'D':
   4145                                    //Units Disable Command
   4146                                    // Is this a BLE Operation?
   4147                                    if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_688: (+1)
   \   00004650   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004652   0x2D00             CMP      R5,#+0
   \   00004654   0xD00A             BEQ.N    ??RoadBrd_ParseString_692
   4148                                    {
   4149                                      // Yes...Build and Send BLE Response NOW.
   4150                                      strcpy( (char *)tempBffr2, "<STATUS>ST_TUD_ACK</STATUS>");
   \   00004656   0x.... 0x....      LDR.W    R1,??DataTable4_30
   \   0000465A   0xA80B             ADD      R0,SP,#+44
   \   0000465C   0x.... 0x....      BL       strcpy
   4151                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004660   0xA80B             ADD      R0,SP,#+44
   \   00004662   0x.... 0x....      BL       strlen
   \   00004666   0xA90B             ADD      R1,SP,#+44
   \   00004668   0x.... 0x....      BL       BGM111_Transmit
   4152                                    }
   4153                                    sprintf( (char *)tempBffr2, "Units XML State CHANGED: DISABLED\r\n\r\n> ");
   \                     ??RoadBrd_ParseString_692: (+1)
   \   0000466C   0x.... 0x....      LDR.W    R1,??DataTable4_31
   \   00004670   0xA80B             ADD      R0,SP,#+44
   \   00004672   0x.... 0x....      BL       sprintf
   4154                                    Status = RoadBrd_Set_UnitsFlag( false );
   \   00004676   0x2000             MOVS     R0,#+0
   \   00004678   0x.... 0x....      BL       RoadBrd_Set_UnitsFlag
   \   0000467C   0x0006             MOVS     R6,R0
   4155                                    break;
   \   0000467E   0xE012             B.N      ??RoadBrd_ParseString_687
   4156                                  default:
   4157                                    // Is this a BLE Operation?
   4158                                    if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_689: (+1)
   \   00004680   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004682   0x2D00             CMP      R5,#+0
   \   00004684   0xD00A             BEQ.N    ??RoadBrd_ParseString_693
   4159                                    {
   4160                                      // Yes...Build and Send BLE Response NOW.
   4161                                      strcpy( (char *)tempBffr2, "<STATUS>CMD_TU_SYNTAX</STATUS>");
   \   00004686   0x.... 0x....      LDR.W    R1,??DataTable4_26
   \   0000468A   0xA80B             ADD      R0,SP,#+44
   \   0000468C   0x.... 0x....      BL       strcpy
   4162                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004690   0xA80B             ADD      R0,SP,#+44
   \   00004692   0x.... 0x....      BL       strlen
   \   00004696   0xA90B             ADD      R1,SP,#+44
   \   00004698   0x.... 0x....      BL       BGM111_Transmit
   4163                                    }
   4164                                    strcpy( (char *)tempBffr2, "TU SYNTAX ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_693: (+1)
   \   0000469C   0x.... 0x....      LDR.W    R1,??DataTable4_32
   \   000046A0   0xA80B             ADD      R0,SP,#+44
   \   000046A2   0x.... 0x....      BL       strcpy
   4165                                    break;
   4166                                } //EndSwitch ( tempBffr[2] )
   4167                              } //EndElse (Size < 3)
   4168                              break;
   \                     ??RoadBrd_ParseString_687: (+1)
   \   000046A6   0xE210             B.N      ??RoadBrd_ParseString_289
   \                     ??RoadBrd_ParseString_567:
   \   000046A8   0x........         DC32     ?_264
   4169          //++++++++++++++++++++++++++++++++++++++++++  Special Monitor Mode to intercept traffic from UART and pass to BGM111
   4170                            case 'M':
   4171                              // Is this a BLE Operation?
   4172                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_297: (+1)
   \   000046AC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000046AE   0x2D00             CMP      R5,#+0
   \   000046B0   0xD00A             BEQ.N    ??RoadBrd_ParseString_694
   4173                              {
   4174                                // Yes...Build and Send BLE Response NOW.
   4175                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000046B2   0x.... 0x....      LDR.W    R1,??DataTable4_33
   \   000046B6   0xA80B             ADD      R0,SP,#+44
   \   000046B8   0x.... 0x....      BL       strcpy
   4176                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000046BC   0xA80B             ADD      R0,SP,#+44
   \   000046BE   0x.... 0x....      BL       strlen
   \   000046C2   0xA90B             ADD      R1,SP,#+44
   \   000046C4   0x.... 0x....      BL       BGM111_Transmit
   4177                              }
   4178                              
   4179                              strcpy( (char *)tempBffr2, "BGM111 MONITOR MODE.\r\n\r\n");
   \                     ??RoadBrd_ParseString_694: (+1)
   \   000046C8   0x.... 0x....      LDR.W    R1,??DataTable4_34
   \   000046CC   0xA80B             ADD      R0,SP,#+44
   \   000046CE   0x.... 0x....      BL       strcpy
   4180          #ifdef NUCLEO
   4181                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   4182          #else
   4183                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000046D2   0xA90B             ADD      R1,SP,#+44
   \   000046D4   0x2000             MOVS     R0,#+0
   \   000046D6   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000046DA   0x0006             MOVS     R6,R0
   4184          #endif
   4185                              if (Status != HAL_OK)
   \   000046DC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000046DE   0x2E00             CMP      R6,#+0
   \   000046E0   0xD002             BEQ.N    ??RoadBrd_ParseString_695
   4186                                return Status;
   \   000046E2   0x0030             MOVS     R0,R6
   \   000046E4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000046E6   0xE286             B.N      ??RoadBrd_ParseString_4
   4187                              strcpy( (char *)tempBffr2, "Use <ESC> to exit mode.\r\n\r\n");
   \                     ??RoadBrd_ParseString_695: (+1)
   \   000046E8   0x.... 0x....      LDR.W    R1,??DataTable4_35
   \   000046EC   0xA80B             ADD      R0,SP,#+44
   \   000046EE   0x.... 0x....      BL       strcpy
   4188                              // Set Bypass Flag
   4189                              Bypass = true;
   \   000046F2   0x2001             MOVS     R0,#+1
   \   000046F4   0x.... 0x....      LDR.W    R1,??DataTable4_36
   \   000046F8   0x7008             STRB     R0,[R1, #+0]
   4190                              break;
   \   000046FA   0xE1E6             B.N      ??RoadBrd_ParseString_289
   \                     ??RoadBrd_ParseString_569:
   \   000046FC   0x........         DC32     ?_265
   4191          //++++++++++++++++++++++++++++++++++++++++++  Reset Flash Frame Variables(Factory).
   4192                            case 'F':
   4193                              // Reset Flash Frame Variables.
   4194                              RoadBrd_WWDG_InitializeFrmFlash();
   \                     ??RoadBrd_ParseString_293: (+1)
   \   00004700   0x.... 0x....      BL       RoadBrd_WWDG_InitializeFrmFlash
   4195                              // Is this a BLE Operation?
   4196                              if ( BLE_Flag )
   \   00004704   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004706   0x2D00             CMP      R5,#+0
   \   00004708   0xD00A             BEQ.N    ??RoadBrd_ParseString_696
   4197                              {
   4198                                // Yes...Build and Send BLE Response NOW.
   4199                                sprintf( (char *)tempBffr2, "<STATUS>TF_ACK</STATUS>" );
   \   0000470A   0x.... 0x....      LDR.W    R1,??DataTable4_37
   \   0000470E   0xA80B             ADD      R0,SP,#+44
   \   00004710   0x.... 0x....      BL       sprintf
   4200                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004714   0xA80B             ADD      R0,SP,#+44
   \   00004716   0x.... 0x....      BL       strlen
   \   0000471A   0xA90B             ADD      R1,SP,#+44
   \   0000471C   0x.... 0x....      BL       BGM111_Transmit
   4201                              }
   4202                              
   4203                              sprintf( (char *)tempBffr2, "Flash Frame Variables Reset to Factory Values.\r\n" );
   \                     ??RoadBrd_ParseString_696: (+1)
   \   00004720   0x.... 0x....      LDR.W    R1,??DataTable4_38
   \   00004724   0xA80B             ADD      R0,SP,#+44
   \   00004726   0x.... 0x....      BL       sprintf
   4204                              break;
   \   0000472A   0xE1CE             B.N      ??RoadBrd_ParseString_289
   \                     ??RoadBrd_ParseString_570:
   \   0000472C   0x........         DC32     ?_266
   4205          //++++++++++++++++++++++++++++++++++++++++++  Lock Code to allow stable Program of BLE Module.
   4206                            case 'L':
   4207                              // Is this a BLE Operation?
   4208                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_296: (+1)
   \   00004730   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004732   0x2D00             CMP      R5,#+0
   \   00004734   0xD00B             BEQ.N    ??RoadBrd_ParseString_697
   4209                              {
   4210                                // Yes...Build and Send BLE Response NOW.
   4211                                sprintf( (char *)tempBffr2, "<STATUS>TL_ERROR</STATUS>" );
   \   00004736   0x.... 0x....      LDR.W    R1,??DataTable4_39
   \   0000473A   0xA80B             ADD      R0,SP,#+44
   \   0000473C   0x.... 0x....      BL       sprintf
   4212                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004740   0xA80B             ADD      R0,SP,#+44
   \   00004742   0x.... 0x....      BL       strlen
   \   00004746   0xA90B             ADD      R1,SP,#+44
   \   00004748   0x.... 0x....      BL       BGM111_Transmit
   4213                              }
   4214                              else
   4215                              {
   4216                                sprintf( (char *)tempBffr2, "Code Locked for Programming!\r\n\r\n" );
   4217          #ifdef NUCLEO
   4218                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   4219          #else
   4220                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   4221          #endif
   4222                                if (Status != HAL_OK)
   4223                                  return Status;
   4224                                sprintf( (char *)tempBffr2, "   HARD RESET NEEDED TO EXIT MODE\r\n" );
   4225          #ifdef NUCLEO
   4226                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   4227          #else
   4228                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   4229          #endif
   4230                                if (Status != HAL_OK)
   4231                                  return Status;
   4232                                // Start Hard Loop
   4233                                for (;;)
   4234                                {
   4235                                }
   4236                              }
   4237                              break;
   \   0000474C   0xE1BD             B.N      ??RoadBrd_ParseString_289
   \                     ??RoadBrd_ParseString_697: (+1)
   \   0000474E   0x.... 0x....      LDR.W    R1,??DataTable4_40
   \   00004752   0xA80B             ADD      R0,SP,#+44
   \   00004754   0x.... 0x....      BL       sprintf
   \   00004758   0xA90B             ADD      R1,SP,#+44
   \   0000475A   0x2000             MOVS     R0,#+0
   \   0000475C   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00004760   0x0006             MOVS     R6,R0
   \   00004762   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00004764   0x2E00             CMP      R6,#+0
   \   00004766   0xD002             BEQ.N    ??RoadBrd_ParseString_698
   \   00004768   0x0030             MOVS     R0,R6
   \   0000476A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000476C   0xE243             B.N      ??RoadBrd_ParseString_4
   \                     ??RoadBrd_ParseString_698: (+1)
   \   0000476E   0x.... 0x....      LDR.W    R1,??DataTable4_41
   \   00004772   0xA80B             ADD      R0,SP,#+44
   \   00004774   0x.... 0x....      BL       sprintf
   \   00004778   0xA90B             ADD      R1,SP,#+44
   \   0000477A   0x2000             MOVS     R0,#+0
   \   0000477C   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00004780   0x0006             MOVS     R6,R0
   \   00004782   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00004784   0x2E00             CMP      R6,#+0
   \   00004786   0xD005             BEQ.N    ??RoadBrd_ParseString_699
   \   00004788   0x0030             MOVS     R0,R6
   \   0000478A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000478C   0xE233             B.N      ??RoadBrd_ParseString_4
   \   0000478E   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_572:
   \   00004790   0x........         DC32     ?_267
   \                     ??RoadBrd_ParseString_699: (+1)
   \   00004794   0xE7FE             B.N      ??RoadBrd_ParseString_699
   4238          
   4239          //++++++++++++++++++++++++++++++++++++++++++  Special Monitor Mode to intercept traffic from UART and pass to BGM111
   4240                            case 'B':
   4241                              // Is this a BLE Operation?
   4242                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_290: (+1)
   \   00004796   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004798   0x2D00             CMP      R5,#+0
   \   0000479A   0xD00A             BEQ.N    ??RoadBrd_ParseString_700
   4243                              {
   4244                                // Yes...Build and Send BLE Response NOW.
   4245                                strcpy( (char *)tempBffr2, "<STATUS>ST_OTAMD_ACK</STATUS>");
   \   0000479C   0x.... 0x....      LDR.W    R1,??DataTable4_42
   \   000047A0   0xA80B             ADD      R0,SP,#+44
   \   000047A2   0x.... 0x....      BL       strcpy
   4246                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000047A6   0xA80B             ADD      R0,SP,#+44
   \   000047A8   0x.... 0x....      BL       strlen
   \   000047AC   0xA90B             ADD      R1,SP,#+44
   \   000047AE   0x.... 0x....      BL       BGM111_Transmit
   4247                              }
   4248                              
   4249                              strcpy( (char *)tempBffr2, "Boot Loader MONITOR MODE.\r\n\r\n");
   \                     ??RoadBrd_ParseString_700: (+1)
   \   000047B2   0x.... 0x....      LDR.W    R1,??DataTable4_43
   \   000047B6   0xA80B             ADD      R0,SP,#+44
   \   000047B8   0x.... 0x....      BL       strcpy
   4250          #ifdef NUCLEO
   4251                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   4252          #else
   4253                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000047BC   0xA90B             ADD      R1,SP,#+44
   \   000047BE   0x2000             MOVS     R0,#+0
   \   000047C0   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000047C4   0x0006             MOVS     R6,R0
   4254          #endif
   4255                              if (Status != HAL_OK)
   \   000047C6   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000047C8   0x2E00             CMP      R6,#+0
   \   000047CA   0xD002             BEQ.N    ??RoadBrd_ParseString_701
   4256                                return Status;
   \   000047CC   0x0030             MOVS     R0,R6
   \   000047CE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000047D0   0xE211             B.N      ??RoadBrd_ParseString_4
   4257                              strcpy( (char *)tempBffr2, "Use <ESC> followed by <CR> to exit mode.\r\n\r\n");
   \                     ??RoadBrd_ParseString_701: (+1)
   \   000047D2   0x.... 0x....      LDR.W    R1,??DataTable4_44
   \   000047D6   0xA80B             ADD      R0,SP,#+44
   \   000047D8   0x.... 0x....      BL       strcpy
   4258                              // Set Bypass Flag
   4259                              Set_Boot_Bypass();
   \   000047DC   0x.... 0x....      BL       Set_Boot_Bypass
   4260                              break;
   \   000047E0   0xE173             B.N      ??RoadBrd_ParseString_289
   \   000047E2   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_573:
   \   000047E4   0x........         DC32     ?_268
   \   000047E8   0x........         DC32     ?_269
   4261          
   4262          //++++++++++++++++++++++++++++++++++++++++++  S-Record Test Monitor.
   4263                            case 'S':
   4264                              // S-Record Test Monitor.
   4265                              // Is this a BLE Operation?
   4266                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_299: (+1)
   \   000047EC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000047EE   0x2D00             CMP      R5,#+0
   \   000047F0   0xD00D             BEQ.N    ??RoadBrd_ParseString_702
   4267                              {
   4268                                // Yes...Build and Send BLE Response NOW.
   4269                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000047F2   0x.... 0x....      LDR.W    R1,??DataTable4_33
   \   000047F6   0xA80B             ADD      R0,SP,#+44
   \   000047F8   0x.... 0x....      BL       strcpy
   4270                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000047FC   0xA80B             ADD      R0,SP,#+44
   \   000047FE   0x.... 0x....      BL       strlen
   \   00004802   0xA90B             ADD      R1,SP,#+44
   \   00004804   0x.... 0x....      BL       BGM111_Transmit
   4271                                HAL_Delay(100);           // Wait 100ms
   \   00004808   0x2064             MOVS     R0,#+100
   \   0000480A   0x.... 0x....      BL       HAL_Delay
   4272                              }
   4273                              // Parse Data and extract S-Record.
   4274                              Numbr_Rcrds = sscanf (tempBffr, "%s %s", s_cmd, s_recrd);
   \                     ??RoadBrd_ParseString_702: (+1)
   \   0000480E   0xF50D 0x6397      ADD      R3,SP,#+1208
   \   00004812   0xAAD5             ADD      R2,SP,#+852
   \   00004814   0x.... 0x....      LDR.W    R1,??DataTable4_45
   \   00004818   0x0020             MOVS     R0,R4
   \   0000481A   0x.... 0x....      BL       sscanf
   \   0000481E   0x9047             STR      R0,[SP, #+284]
   4275          //                    if (sscanf (tempBffr, "%s %s", s_cmd, s_recrd) == 2)
   4276                              if (Numbr_Rcrds == 2)
   \   00004820   0x9847             LDR      R0,[SP, #+284]
   \   00004822   0x2802             CMP      R0,#+2
   \   00004824   0xF040 0x8135      BNE.W    ??RoadBrd_ParseString_703
   4277                              {
   4278                                sprintf( (char *)tempBffr2, "TS: %s\r\n", s_recrd );
   \   00004828   0xF50D 0x6297      ADD      R2,SP,#+1208
   \   0000482C   0x.... 0x....      LDR.W    R1,??DataTable4_46
   \   00004830   0xA80B             ADD      R0,SP,#+44
   \   00004832   0x.... 0x....      BL       sprintf
   4279          #ifdef NUCLEO
   4280                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   4281          #else
   4282                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00004836   0xA90B             ADD      R1,SP,#+44
   \   00004838   0x2000             MOVS     R0,#+0
   \   0000483A   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000483E   0x0006             MOVS     R6,R0
   4283          #endif
   4284                                if (Status != HAL_OK)
   \   00004840   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00004842   0x2E00             CMP      R6,#+0
   \   00004844   0xD004             BEQ.N    ??RoadBrd_ParseString_704
   4285                                  return Status;
   \   00004846   0x0030             MOVS     R0,R6
   \   00004848   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000484A   0xE1D4             B.N      ??RoadBrd_ParseString_4
   \                     ??RoadBrd_ParseString_575:
   \   0000484C   0x........         DC32     ?_270
   4286                                // Pass to S-Record Parser..
   4287                                Status = Parse_srecord( (char *)s_recrd, &Srec_Elem );
   \                     ??RoadBrd_ParseString_704: (+1)
   \   00004850   0xA9FF             ADD      R1,SP,#+1020
   \   00004852   0x3168             ADDS     R1,R1,#+104
   \   00004854   0xF50D 0x6097      ADD      R0,SP,#+1208
   \   00004858   0x.... 0x....      BL       Parse_srecord
   \   0000485C   0x0006             MOVS     R6,R0
   4288                                if (Status != HAL_OK)
   \   0000485E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00004860   0x2E00             CMP      R6,#+0
   \   00004862   0xD041             BEQ.N    ??RoadBrd_ParseString_705
   4289                                {
   4290                                  // Report Failed Parse Operation
   4291                                  switch(Srec_Elem.Srec_Err)
   \   00004864   0xF89D 0x0465      LDRB     R0,[SP, #+1125]
   \   00004868   0x2800             CMP      R0,#+0
   \   0000486A   0xD009             BEQ.N    ??RoadBrd_ParseString_706
   \   0000486C   0x2802             CMP      R0,#+2
   \   0000486E   0xD013             BEQ.N    ??RoadBrd_ParseString_707
   \   00004870   0xD30C             BCC.N    ??RoadBrd_ParseString_708
   \   00004872   0x2804             CMP      R0,#+4
   \   00004874   0xD01C             BEQ.N    ??RoadBrd_ParseString_709
   \   00004876   0xD315             BCC.N    ??RoadBrd_ParseString_710
   \   00004878   0x2806             CMP      R0,#+6
   \   0000487A   0xD027             BEQ.N    ??RoadBrd_ParseString_711
   \   0000487C   0xD320             BCC.N    ??RoadBrd_ParseString_712
   \   0000487E   0xE02B             B.N      ??RoadBrd_ParseString_713
   4292                                  {
   4293                                    case NO_ERROR:
   4294                                      sprintf( (char *)tempBffr2, "NO ERROR FOUND.\r\n" );
   \                     ??RoadBrd_ParseString_706: (+1)
   \   00004880   0x.... 0x....      LDR.W    R1,??DataTable4_47
   \   00004884   0xA80B             ADD      R0,SP,#+44
   \   00004886   0x.... 0x....      BL       sprintf
   4295                                      break;
   \   0000488A   0xE107             B.N      ??RoadBrd_ParseString_714
   4296                                    case ILLEGAL_SREC:
   4297                                      sprintf( (char *)tempBffr2, "ERROR: ILLEGAL S-Record.\r\n" );
   \                     ??RoadBrd_ParseString_708: (+1)
   \   0000488C   0x.... 0x....      LDR.W    R1,??DataTable4_48
   \   00004890   0xA80B             ADD      R0,SP,#+44
   \   00004892   0x.... 0x....      BL       sprintf
   4298                                      break;
   \   00004896   0xE101             B.N      ??RoadBrd_ParseString_714
   4299                                    case ILLEGAL_RECORD:
   4300                                      sprintf( (char *)tempBffr2, "ERROR: ILLEGAL Record.\r\n" );
   \                     ??RoadBrd_ParseString_707: (+1)
   \   00004898   0x.... 0x....      LDR.W    R1,??DataTable4_49
   \   0000489C   0xA80B             ADD      R0,SP,#+44
   \   0000489E   0x.... 0x....      BL       sprintf
   4301                                      break;
   \   000048A2   0xE0FB             B.N      ??RoadBrd_ParseString_714
   4302                                    case RESERVED_RECORD:
   4303                                      sprintf( (char *)tempBffr2, "ERROR: Reserved S-Record Type.\r\n" );
   \                     ??RoadBrd_ParseString_710: (+1)
   \   000048A4   0x.... 0x....      LDR.W    R1,??DataTable4_50
   \   000048A8   0xA80B             ADD      R0,SP,#+44
   \   000048AA   0x.... 0x....      BL       sprintf
   4304                                      break;
   \   000048AE   0xE0F5             B.N      ??RoadBrd_ParseString_714
   4305                                    case ILLEGAL_BYTE_CNT:
   4306                                      sprintf( (char *)tempBffr2, "ERROR: Illegal Byte Count.\r\n" );
   \                     ??RoadBrd_ParseString_709: (+1)
   \   000048B0   0x.... 0x....      LDR.W    R1,??DataTable4_51
   \   000048B4   0xA80B             ADD      R0,SP,#+44
   \   000048B6   0x.... 0x....      BL       sprintf
   4307                                      break;
   \   000048BA   0xE0EF             B.N      ??RoadBrd_ParseString_714
   \                     ??RoadBrd_ParseString_577:
   \   000048BC   0x........         DC32     ?_271
   4308                                    case ILLEGAL_BYTE_DATA:
   4309                                      sprintf( (char *)tempBffr2, "ERROR: Reserved S-Record Type.\r\n" );
   \                     ??RoadBrd_ParseString_712: (+1)
   \   000048C0   0x.... 0x....      LDR.W    R1,??DataTable4_50
   \   000048C4   0xA80B             ADD      R0,SP,#+44
   \   000048C6   0x.... 0x....      BL       sprintf
   4310                                      break;
   \   000048CA   0xE0E7             B.N      ??RoadBrd_ParseString_714
   4311                                    case BAD_CHECKSUM:
   4312                                      sprintf( (char *)tempBffr2, "ERROR: Illegal Byte Data.\r\n" );
   \                     ??RoadBrd_ParseString_711: (+1)
   \   000048CC   0x.... 0x....      LDR.W    R1,??DataTable4_52
   \   000048D0   0xA80B             ADD      R0,SP,#+44
   \   000048D2   0x.... 0x....      BL       sprintf
   4313                                      break;
   \   000048D6   0xE0E1             B.N      ??RoadBrd_ParseString_714
   4314                                    default:
   4315                                      sprintf( (char *)tempBffr2, "ERROR: Checksum did not match data.\r\n" );
   \                     ??RoadBrd_ParseString_713: (+1)
   \   000048D8   0x.... 0x....      LDR.W    R1,??DataTable4_53
   \   000048DC   0xA80B             ADD      R0,SP,#+44
   \   000048DE   0x.... 0x....      BL       sprintf
   4316                                      break;
   \   000048E2   0xE0DB             B.N      ??RoadBrd_ParseString_714
   \                     ??RoadBrd_ParseString_578:
   \   000048E4   0x........         DC32     ?_272
   4317                                  } // EndSwitch (Srec_Elem.Srec_Err)
   4318                                } // EndIf (Status != HAL_OK)..Parse_srecord
   4319                                else
   4320                                {
   4321                                  // Display Type of S-Record
   4322                                  switch(Srec_Elem.RecordType)
   \                     ??RoadBrd_ParseString_705: (+1)
   \   000048E8   0xF89D 0x0464      LDRB     R0,[SP, #+1124]
   \   000048EC   0x2800             CMP      R0,#+0
   \   000048EE   0xD00E             BEQ.N    ??RoadBrd_ParseString_715
   \   000048F0   0x2802             CMP      R0,#+2
   \   000048F2   0xD018             BEQ.N    ??RoadBrd_ParseString_716
   \   000048F4   0xD311             BCC.N    ??RoadBrd_ParseString_717
   \   000048F6   0x2804             CMP      R0,#+4
   \   000048F8   0xD024             BEQ.N    ??RoadBrd_ParseString_718
   \   000048FA   0xD31D             BCC.N    ??RoadBrd_ParseString_719
   \   000048FC   0x2806             CMP      R0,#+6
   \   000048FE   0xD02D             BEQ.N    ??RoadBrd_ParseString_720
   \   00004900   0xD326             BCC.N    ??RoadBrd_ParseString_721
   \   00004902   0x2808             CMP      R0,#+8
   \   00004904   0xD038             BEQ.N    ??RoadBrd_ParseString_722
   \   00004906   0xD32F             BCC.N    ??RoadBrd_ParseString_723
   \   00004908   0x2809             CMP      R0,#+9
   \   0000490A   0xD03B             BEQ.N    ??RoadBrd_ParseString_724
   \   0000490C   0xE040             B.N      ??RoadBrd_ParseString_725
   4323                                  {
   4324                                    case S0_HEADER:
   4325                                      sprintf( (char *)tempBffr2, "Record Type: S0_HEADER: Vendor specific ASCII text.\r\n" );
   \                     ??RoadBrd_ParseString_715: (+1)
   \   0000490E   0x.... 0x....      LDR.W    R1,??DataTable4_54
   \   00004912   0xA80B             ADD      R0,SP,#+44
   \   00004914   0x.... 0x....      BL       sprintf
   4326                                      break;
   \   00004918   0xE03F             B.N      ??RoadBrd_ParseString_726
   4327                                    case S1_DATA:
   4328                                      sprintf( (char *)tempBffr2, "Record Type: S1_DATA: Data that starts at the 16-bit address field.\r\n" );
   \                     ??RoadBrd_ParseString_717: (+1)
   \   0000491A   0x.... 0x....      LDR.W    R1,??DataTable4_55
   \   0000491E   0xA80B             ADD      R0,SP,#+44
   \   00004920   0x.... 0x....      BL       sprintf
   4329                                      break;
   \   00004924   0xE039             B.N      ??RoadBrd_ParseString_726
   4330                                    case S2_DATA:
   4331                                      sprintf( (char *)tempBffr2, "Record Type: S2_DATA: Data that starts at the 24-bit address field.\r\n" );
   \                     ??RoadBrd_ParseString_716: (+1)
   \   00004926   0x.... 0x....      LDR.W    R1,??DataTable4_56
   \   0000492A   0xA80B             ADD      R0,SP,#+44
   \   0000492C   0x.... 0x....      BL       sprintf
   4332                                      break;
   \   00004930   0xE033             B.N      ??RoadBrd_ParseString_726
   \   00004932   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_580:
   \   00004934   0x........         DC32     ?_273
   4333                                    case S3_DATA:
   4334                                      sprintf( (char *)tempBffr2, "Record Type: S3_DATA: Data that starts at the 32-bit address field.\r\n" );
   \                     ??RoadBrd_ParseString_719: (+1)
   \   00004938   0x.... 0x....      LDR.W    R1,??DataTable4_57
   \   0000493C   0xA80B             ADD      R0,SP,#+44
   \   0000493E   0x.... 0x....      BL       sprintf
   4335                                      break;
   \   00004942   0xE02A             B.N      ??RoadBrd_ParseString_726
   4336                                    case S4_RESERVED:
   4337                                      sprintf( (char *)tempBffr2, "Record Type: S4_RESERVED\r\n" );
   \                     ??RoadBrd_ParseString_718: (+1)
   \   00004944   0x.... 0x....      LDR.W    R1,??DataTable4_58
   \   00004948   0xA80B             ADD      R0,SP,#+44
   \   0000494A   0x.... 0x....      BL       sprintf
   4338                                      break;
   \   0000494E   0xE024             B.N      ??RoadBrd_ParseString_726
   4339                                    case S5_COUNT:
   4340                                      sprintf( (char *)tempBffr2, "Record Type: S5_COUNT: 16-bit count of S1 / S2 / S3 records.\r\n" );
   \                     ??RoadBrd_ParseString_721: (+1)
   \   00004950   0x.... 0x....      LDR.W    R1,??DataTable4_59
   \   00004954   0xA80B             ADD      R0,SP,#+44
   \   00004956   0x.... 0x....      BL       sprintf
   4341                                      break;
   \   0000495A   0xE01E             B.N      ??RoadBrd_ParseString_726
   4342                                    case S6_COUNT:
   4343                                      sprintf( (char *)tempBffr2, "Record Type: S6_COUNT: 24-bit count of S1 / S2 / S3 records.\r\n" );
   \                     ??RoadBrd_ParseString_720: (+1)
   \   0000495C   0x.... 0x....      LDR.W    R1,??DataTable4_60
   \   00004960   0xA80B             ADD      R0,SP,#+44
   \   00004962   0x.... 0x....      BL       sprintf
   4344                                      break;
   \   00004966   0xE018             B.N      ??RoadBrd_ParseString_726
   4345                                    case S7_START:
   4346                                      sprintf( (char *)tempBffr2, "Record Type: S7_START: Starting execution location at a 32-bit address.\r\n" );
   \                     ??RoadBrd_ParseString_723: (+1)
   \   00004968   0x.... 0x....      LDR.W    R1,??DataTable4_61
   \   0000496C   0xA80B             ADD      R0,SP,#+44
   \   0000496E   0x.... 0x....      BL       sprintf
   4347                                      break;
   \   00004972   0xE012             B.N      ??RoadBrd_ParseString_726
   \                     ??RoadBrd_ParseString_581:
   \   00004974   0x........         DC32     ?_274
   4348                                    case S8_START:
   4349                                      sprintf( (char *)tempBffr2, "Record Type: S8_START: Starting execution location at a 24-bit address.\r\n" );
   \                     ??RoadBrd_ParseString_722: (+1)
   \   00004978   0x.... 0x....      LDR.W    R1,??DataTable4_62
   \   0000497C   0xA80B             ADD      R0,SP,#+44
   \   0000497E   0x.... 0x....      BL       sprintf
   4350                                      break;
   \   00004982   0xE00A             B.N      ??RoadBrd_ParseString_726
   4351                                    case S9_START:
   4352                                      sprintf( (char *)tempBffr2, "Record Type: S9_START: Starting execution location at a 16-bit address.\r\n" );
   \                     ??RoadBrd_ParseString_724: (+1)
   \   00004984   0x.... 0x....      LDR.W    R1,??DataTable4_63
   \   00004988   0xA80B             ADD      R0,SP,#+44
   \   0000498A   0x.... 0x....      BL       sprintf
   4353                                      break;
   \   0000498E   0xE004             B.N      ??RoadBrd_ParseString_726
   4354                                    default:
   4355                                      sprintf( (char *)tempBffr2, "Record Type: UNKNOWN.\r\n" );
   \                     ??RoadBrd_ParseString_725: (+1)
   \   00004990   0x.... 0x....      LDR.W    R1,??DataTable4_64
   \   00004994   0xA80B             ADD      R0,SP,#+44
   \   00004996   0x.... 0x....      BL       sprintf
   4356                                      break;
   4357                                  } // EndSwitch (Srec_Elem.RecordType)
   4358          #ifdef NUCLEO
   4359                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   4360          #else
   4361                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \                     ??RoadBrd_ParseString_726: (+1)
   \   0000499A   0xA90B             ADD      R1,SP,#+44
   \   0000499C   0x2000             MOVS     R0,#+0
   \   0000499E   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000049A2   0x0006             MOVS     R6,R0
   4362          #endif
   4363                                  if (Status != HAL_OK)
   \   000049A4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000049A6   0x2E00             CMP      R6,#+0
   \   000049A8   0xD006             BEQ.N    ??RoadBrd_ParseString_727
   4364                                    return Status;
   \   000049AA   0x0030             MOVS     R0,R6
   \   000049AC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000049AE   0xE122             B.N      ??RoadBrd_ParseString_4
   \                     ??RoadBrd_ParseString_583:
   \   000049B0   0x........         DC32     ?_275
   \   000049B4   0x........         DC32     ?_276
   4365                                  // Display Byte Count Field.
   4366                                  sprintf( (char *)tempBffr2, "Byte Count: %08x\r\n", Srec_Elem.ByteCount );
   \                     ??RoadBrd_ParseString_727: (+1)
   \   000049B8   0xF8DD 0x2468      LDR      R2,[SP, #+1128]
   \   000049BC   0x.... 0x....      LDR.W    R1,??DataTable4_65
   \   000049C0   0xA80B             ADD      R0,SP,#+44
   \   000049C2   0x.... 0x....      BL       sprintf
   4367          #ifdef NUCLEO
   4368                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   4369          #else
   4370                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000049C6   0xA90B             ADD      R1,SP,#+44
   \   000049C8   0x2000             MOVS     R0,#+0
   \   000049CA   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000049CE   0x0006             MOVS     R6,R0
   4371          #endif
   4372                                  if (Status != HAL_OK)
   \   000049D0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000049D2   0x2E00             CMP      R6,#+0
   \   000049D4   0xD002             BEQ.N    ??RoadBrd_ParseString_728
   4373                                    return Status;
   \   000049D6   0x0030             MOVS     R0,R6
   \   000049D8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000049DA   0xE10C             B.N      ??RoadBrd_ParseString_4
   4374                                  // Display Address Field.
   4375                                  sprintf( (char *)tempBffr2, "Address: %08x\r\n", Srec_Elem.Address );
   \                     ??RoadBrd_ParseString_728: (+1)
   \   000049DC   0xF8DD 0x246C      LDR      R2,[SP, #+1132]
   \   000049E0   0x.... 0x....      LDR.W    R1,??DataTable4_66
   \   000049E4   0xA80B             ADD      R0,SP,#+44
   \   000049E6   0x.... 0x....      BL       sprintf
   4376          #ifdef NUCLEO
   4377                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   4378          #else
   4379                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000049EA   0xA90B             ADD      R1,SP,#+44
   \   000049EC   0x2000             MOVS     R0,#+0
   \   000049EE   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000049F2   0x0006             MOVS     R6,R0
   4380          #endif
   4381                                  // If S-Record Type is type 0 then display Buffer as String terminated by nulls.
   4382                                  if (Srec_Elem.RecordType == S0_HEADER)
   \   000049F4   0xF89D 0x0464      LDRB     R0,[SP, #+1124]
   \   000049F8   0x2800             CMP      R0,#+0
   \   000049FA   0xD10F             BNE.N    ??RoadBrd_ParseString_729
   4383                                  {
   4384                                    sprintf( (char *)tempBffr2, "Header: %s\r\n", (char *)Srec_Elem.Data);
   \   000049FC   0xAAFF             ADD      R2,SP,#+1020
   \   000049FE   0x3275             ADDS     R2,R2,#+117
   \   00004A00   0x.... 0x....      LDR.W    R1,??DataTable4_67
   \   00004A04   0xA80B             ADD      R0,SP,#+44
   \   00004A06   0x.... 0x....      BL       sprintf
   4385          #ifdef NUCLEO
   4386                                    Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   4387          #else
   4388                                    Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00004A0A   0xA90B             ADD      R1,SP,#+44
   \   00004A0C   0x2000             MOVS     R0,#+0
   \   00004A0E   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00004A12   0x0006             MOVS     R6,R0
   \   00004A14   0xE035             B.N      ??RoadBrd_ParseString_730
   \   00004A16   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_585:
   \   00004A18   0x........         DC32     ?_277
   4389          #endif
   4390                                  }
   4391                                  else
   4392                                  {
   4393                                    // Dump Buffer of S-Record.
   4394                                    y=0;
   \                     ??RoadBrd_ParseString_729: (+1)
   \   00004A1C   0x2000             MOVS     R0,#+0
   \   00004A1E   0x4680             MOV      R8,R0
   4395                                    sprintf( (char *)tempBffr2, "" );
   \   00004A20   0x....             ADR.N    R1,??DataTable3_7  ;; ""
   \   00004A22   0xA80B             ADD      R0,SP,#+44
   \   00004A24   0x.... 0x....      BL       sprintf
   4396                                    for (x=0; x<BYTE_BFFR_SIZE; x++)
   \   00004A28   0x2000             MOVS     R0,#+0
   \   00004A2A   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_731: (+1)
   \   00004A2C   0x2F2D             CMP      R7,#+45
   \   00004A2E   0xDA28             BGE.N    ??RoadBrd_ParseString_730
   4397                                    {
   4398                                      sprintf( (char *)tempBffr3, "%02x ", Srec_Elem.Data[x]);
   \   00004A30   0xA8FF             ADD      R0,SP,#+1020
   \   00004A32   0x3068             ADDS     R0,R0,#+104
   \   00004A34   0x4438             ADD      R0,R0,R7
   \   00004A36   0x7B42             LDRB     R2,[R0, #+13]
   \   00004A38   0x.... 0x....      LDR.W    R1,??DataTable4_68
   \   00004A3C   0xA82B             ADD      R0,SP,#+172
   \   00004A3E   0x.... 0x....      BL       sprintf
   4399                                      strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   00004A42   0xA92B             ADD      R1,SP,#+172
   \   00004A44   0xA80B             ADD      R0,SP,#+44
   \   00004A46   0x.... 0x....      BL       strcat
   4400                                      y++;
   \   00004A4A   0xF118 0x0801      ADDS     R8,R8,#+1
   4401                                      if (y>=16)
   \   00004A4E   0xF1B8 0x0F10      CMP      R8,#+16
   \   00004A52   0xDB14             BLT.N    ??RoadBrd_ParseString_732
   4402                                      {
   4403                                        strcat( (char *)tempBffr2, "\r\n" );
   \   00004A54   0x....             ADR.N    R1,??DataTable3_10  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00004A56   0xA80B             ADD      R0,SP,#+44
   \   00004A58   0x.... 0x....      BL       strcat
   4404                                        y=0;
   \   00004A5C   0x2000             MOVS     R0,#+0
   \   00004A5E   0x4680             MOV      R8,R0
   4405          #ifdef NUCLEO
   4406                                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   4407          #else
   4408                                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00004A60   0xA90B             ADD      R1,SP,#+44
   \   00004A62   0x2000             MOVS     R0,#+0
   \   00004A64   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00004A68   0x0006             MOVS     R6,R0
   4409          #endif
   4410                                        if (Status != HAL_OK)
   \   00004A6A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00004A6C   0x2E00             CMP      R6,#+0
   \   00004A6E   0xD002             BEQ.N    ??RoadBrd_ParseString_733
   4411                                          return Status;
   \   00004A70   0x0030             MOVS     R0,R6
   \   00004A72   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00004A74   0xE0BF             B.N      ??RoadBrd_ParseString_4
   4412                                        sprintf( (char *)tempBffr2, "" );
   \                     ??RoadBrd_ParseString_733: (+1)
   \   00004A76   0x....             ADR.N    R1,??DataTable3_7  ;; ""
   \   00004A78   0xA80B             ADD      R0,SP,#+44
   \   00004A7A   0x.... 0x....      BL       sprintf
   4413                                      }
   4414                                    }
   \                     ??RoadBrd_ParseString_732: (+1)
   \   00004A7E   0x1C7F             ADDS     R7,R7,#+1
   \   00004A80   0xE7D4             B.N      ??RoadBrd_ParseString_731
   4415                                  }
   4416                                  // Finally Display Checksum.
   4417                                  sprintf( (char *)tempBffr2, "Checksum: %02x\r\n", Srec_Elem.Checksum );
   \                     ??RoadBrd_ParseString_730: (+1)
   \   00004A82   0xF89D 0x2470      LDRB     R2,[SP, #+1136]
   \   00004A86   0x.... 0x....      LDR.W    R1,??DataTable4_69
   \   00004A8A   0xA80B             ADD      R0,SP,#+44
   \   00004A8C   0x.... 0x....      BL       sprintf
   \   00004A90   0xE004             B.N      ??RoadBrd_ParseString_714
   4418                                }// EndElse (Status != HAL_OK)..Parse_srecord
   4419                              } // EndIf (Numbr_Rcrds == 2)
   4420                              else
   4421                              {
   4422                                strcpy( (char *)tempBffr2, "TS SYNTAX ERROR: Too many parameters.\r\n");
   \                     ??RoadBrd_ParseString_703: (+1)
   \   00004A92   0x.... 0x....      LDR.W    R1,??DataTable4_70
   \   00004A96   0xA80B             ADD      R0,SP,#+44
   \   00004A98   0x.... 0x....      BL       strcpy
   4423                              } // EndElse (Numbr_Rcrds == 2)
   4424                              break;
   \                     ??RoadBrd_ParseString_714: (+1)
   \   00004A9C   0xE015             B.N      ??RoadBrd_ParseString_289
   \   00004A9E   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_586:
   \   00004AA0   0x........         DC32     ?_278
   \   00004AA4   0x........         DC32     ?_279
   4425          //**************************************************************************************************
   4426                            default:
   4427                              // Is this a BLE Operation?
   4428                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_301: (+1)
   \   00004AA8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004AAA   0x2D00             CMP      R5,#+0
   \   00004AAC   0xD009             BEQ.N    ??RoadBrd_ParseString_734
   4429                              {
   4430                                // Yes...Build and Send BLE Response NOW.
   4431                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00004AAE   0x....             LDR.N    R1,??DataTable4_33
   \   00004AB0   0xA80B             ADD      R0,SP,#+44
   \   00004AB2   0x.... 0x....      BL       strcpy
   4432                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004AB6   0xA80B             ADD      R0,SP,#+44
   \   00004AB8   0x.... 0x....      BL       strlen
   \   00004ABC   0xA90B             ADD      R1,SP,#+44
   \   00004ABE   0x.... 0x....      BL       BGM111_Transmit
   4433                              }
   4434                              
   4435                              // ERROR if we get here.. 
   4436                              strcpy( (char *)tempBffr2, "ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_734: (+1)
   \   00004AC2   0x....             LDR.N    R1,??DataTable4_25
   \   00004AC4   0xA80B             ADD      R0,SP,#+44
   \   00004AC6   0x.... 0x....      BL       strcpy
   4437                              break;
   4438                           
   4439                          } //EndSwitch ( tempBffr[1] )
   4440                        } //EndElse (Size <= 1)
   4441                        break;
   \                     ??RoadBrd_ParseString_289: (+1)
   \   00004ACA   0xE010             B.N      ??RoadBrd_ParseString_26
   4442          #if 0
   4443          //**************************************************************************************************
   4444                      case 'S':
   4445                        // Sleep Mode. 
   4446                        switch( tempBffr[1] )
   4447                        {
   4448          //++++++++++++++++++++++++++++++++++++++++++  5V Power Supply Commands.
   4449                          case 'S':
   4450                            // Is this a BLE Operation?
   4451                            if ( BLE_Flag )
   4452                            {
   4453                              // Yes...Build and Send BLE Response NOW.
   4454                              strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   4455                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   4456                            }
   4457                            
   4458                            strcpy( (char *)tempBffr2, "Micro in Sleep Mode NOW.\r\n");
   4459          #ifdef NUCLEO
   4460                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   4461          #else
   4462                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   4463          #endif
   4464                            if (Status != HAL_OK)
   4465                              return Status;
   4466                            // Sleep Micro NOW!
   4467                            //sleep();
   4468                            break;
   4469                          case 'D':
   4470                            // Is this a BLE Operation?
   4471                            if ( BLE_Flag )
   4472                            {
   4473                              // Yes...Build and Send BLE Response NOW.
   4474                              strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   4475                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   4476                            }
   4477                            
   4478                            // Turn off 5V Power Supply.
   4479                            strcpy( (char *)tempBffr2, "Micro in Deep Sleep Mode NOW.\r\n");
   4480          #ifdef NUCLEO
   4481                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   4482          #else
   4483                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   4484          #endif
   4485                            if (Status != HAL_OK)
   4486                              return Status;
   4487                            // Sleep Micro NOW!
   4488                            //deepsleep();
   4489                            break;
   4490                        }
   4491                        break;
   4492          #endif
   4493          //++++++++++++++++++++++++++++++++++++++++++  Unknown Command.
   4494                      default:
   4495                        // Is this a BLE Operation?
   4496                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_22: (+1)
   \   00004ACC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004ACE   0x2D00             CMP      R5,#+0
   \   00004AD0   0xD009             BEQ.N    ??RoadBrd_ParseString_735
   4497                        {
   4498                          // Yes...Build and Send BLE Response NOW.
   4499                          strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00004AD2   0x....             LDR.N    R1,??DataTable4_33
   \   00004AD4   0xA80B             ADD      R0,SP,#+44
   \   00004AD6   0x.... 0x....      BL       strcpy
   4500                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004ADA   0xA80B             ADD      R0,SP,#+44
   \   00004ADC   0x.... 0x....      BL       strlen
   \   00004AE0   0xA90B             ADD      R1,SP,#+44
   \   00004AE2   0x.... 0x....      BL       BGM111_Transmit
   4501                        }
   4502                        
   4503                        // ERROR if we get here.. 
   4504                        strcpy( (char *)tempBffr2, "ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_735: (+1)
   \   00004AE6   0x....             LDR.N    R1,??DataTable4_25
   \   00004AE8   0xA80B             ADD      R0,SP,#+44
   \   00004AEA   0x.... 0x....      BL       strcpy
   4505                        break;
   4506                      } // EndSwitch
   4507                      
   4508          
   4509                      // Test last I2C Status to determine next msg.
   4510                      switch( Status )
   \                     ??RoadBrd_ParseString_26: (+1)
   \   00004AEE   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00004AF0   0x2E00             CMP      R6,#+0
   \   00004AF2   0xD007             BEQ.N    ??RoadBrd_ParseString_736
   \   00004AF4   0x2E02             CMP      R6,#+2
   \   00004AF6   0xD046             BEQ.N    ??RoadBrd_ParseString_737
   \   00004AF8   0xD305             BCC.N    ??RoadBrd_ParseString_738
   \   00004AFA   0x2E03             CMP      R6,#+3
   \   00004AFC   0xD04E             BEQ.N    ??RoadBrd_ParseString_739
   \   00004AFE   0xE054             B.N      ??RoadBrd_ParseString_740
   \                     ??RoadBrd_ParseString_588:
   \   00004B00   0x........         DC32     ?_280
   4511                      {
   4512                        case HAL_OK:
   4513                          break;
   \                     ??RoadBrd_ParseString_736: (+1)
   \   00004B04   0xE057             B.N      ??RoadBrd_ParseString_741
   4514                        case HAL_ERROR:
   4515                          // Determine what kind of error.
   4516                          Err_code = RoadBrd_I2C_GetError();
   \                     ??RoadBrd_ParseString_738: (+1)
   \   00004B06   0x.... 0x....      BL       RoadBrd_I2C_GetError
   \   00004B0A   0x9046             STR      R0,[SP, #+280]
   4517                          switch( Err_code )
   \   00004B0C   0x9846             LDR      R0,[SP, #+280]
   \   00004B0E   0x2801             CMP      R0,#+1
   \   00004B10   0xD00A             BEQ.N    ??RoadBrd_ParseString_742
   \   00004B12   0x2802             CMP      R0,#+2
   \   00004B14   0xD00D             BEQ.N    ??RoadBrd_ParseString_743
   \   00004B16   0x2804             CMP      R0,#+4
   \   00004B18   0xD010             BEQ.N    ??RoadBrd_ParseString_744
   \   00004B1A   0x2808             CMP      R0,#+8
   \   00004B1C   0xD018             BEQ.N    ??RoadBrd_ParseString_745
   \   00004B1E   0x2810             CMP      R0,#+16
   \   00004B20   0xD01B             BEQ.N    ??RoadBrd_ParseString_746
   \   00004B22   0x2820             CMP      R0,#+32
   \   00004B24   0xD01E             BEQ.N    ??RoadBrd_ParseString_747
   \   00004B26   0xE027             B.N      ??RoadBrd_ParseString_748
   4518                          {
   4519                            case HAL_I2C_ERROR_BERR:
   4520                              strcpy( (char *)tempBffr2, "I2C ERROR: BERR: Bus Error reported.\r\n");
   \                     ??RoadBrd_ParseString_742: (+1)
   \   00004B28   0x....             LDR.N    R1,??DataTable4_71
   \   00004B2A   0xA80B             ADD      R0,SP,#+44
   \   00004B2C   0x.... 0x....      BL       strcpy
   4521                              break;
   \   00004B30   0xE026             B.N      ??RoadBrd_ParseString_749
   4522                            case HAL_I2C_ERROR_ARLO:
   4523                              strcpy( (char *)tempBffr2, "I2C ERROR: ARLO: Arbitration lost reported.\r\n");
   \                     ??RoadBrd_ParseString_743: (+1)
   \   00004B32   0x....             LDR.N    R1,??DataTable4_72
   \   00004B34   0xA80B             ADD      R0,SP,#+44
   \   00004B36   0x.... 0x....      BL       strcpy
   4524                              break;
   \   00004B3A   0xE021             B.N      ??RoadBrd_ParseString_749
   4525                            case HAL_I2C_ERROR_AF:
   4526                              strcpy( (char *)tempBffr2, "I2C ERROR: AF: Acknowledge failure reported.\r\n");
   \                     ??RoadBrd_ParseString_744: (+1)
   \   00004B3C   0x....             LDR.N    R1,??DataTable4_73
   \   00004B3E   0xA80B             ADD      R0,SP,#+44
   \   00004B40   0x.... 0x....      BL       strcpy
   4527                              break;
   \   00004B44   0xE01C             B.N      ??RoadBrd_ParseString_749
   \   00004B46   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_591:
   \   00004B48   0x........         DC32     ?_20
   \   00004B4C   0x........         DC32     ?_281
   4528                            case HAL_I2C_ERROR_OVR:
   4529                              strcpy( (char *)tempBffr2, "I2C ERROR: OVR: Overrun/Underrun reported.\r\n");
   \                     ??RoadBrd_ParseString_745: (+1)
   \   00004B50   0x....             LDR.N    R1,??DataTable4_74
   \   00004B52   0xA80B             ADD      R0,SP,#+44
   \   00004B54   0x.... 0x....      BL       strcpy
   4530                              break;
   \   00004B58   0xE012             B.N      ??RoadBrd_ParseString_749
   4531                            case HAL_I2C_ERROR_DMA:
   4532                              strcpy( (char *)tempBffr2, "I2C ERROR: DMA: DMA Error reported.\r\n");
   \                     ??RoadBrd_ParseString_746: (+1)
   \   00004B5A   0x....             LDR.N    R1,??DataTable4_75
   \   00004B5C   0xA80B             ADD      R0,SP,#+44
   \   00004B5E   0x.... 0x....      BL       strcpy
   4533                              break;
   \   00004B62   0xE00D             B.N      ??RoadBrd_ParseString_749
   4534                            case HAL_I2C_ERROR_TIMEOUT:
   4535                              strcpy( (char *)tempBffr2, "I2C ERROR: TIMEOUT: Timeout Error reported.\r\n");
   \                     ??RoadBrd_ParseString_747: (+1)
   \   00004B64   0x....             LDR.N    R1,??DataTable4_76
   \   00004B66   0xA80B             ADD      R0,SP,#+44
   \   00004B68   0x.... 0x....      BL       strcpy
   4536                              break;
   \   00004B6C   0xE008             B.N      ??RoadBrd_ParseString_749
   \   00004B6E   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_594:
   \   00004B70   0x........         DC32     ?_282
   \   00004B74   0x........         DC32     ?_283
   4537                            default:
   4538                              strcpy( (char *)tempBffr2, "I2C ERROR: Unknown Error reported.\r\n");
   \                     ??RoadBrd_ParseString_748: (+1)
   \   00004B78   0x....             LDR.N    R1,??DataTable4_77
   \   00004B7A   0xA80B             ADD      R0,SP,#+44
   \   00004B7C   0x.... 0x....      BL       strcpy
   4539                              break;
   4540                           
   4541                          }
   4542                          // Re-Initialize I2C....It has been corrupted.
   4543                          MX_I2C1_Reset();
   \                     ??RoadBrd_ParseString_749: (+1)
   \   00004B80   0x.... 0x....      BL       MX_I2C1_Reset
   4544                          break;
   \   00004B84   0xE017             B.N      ??RoadBrd_ParseString_741
   4545                        case HAL_BUSY:
   4546                          strcpy( (char *)tempBffr2, "I2C BUSY: I2C reported BUSY error.\r\n");
   \                     ??RoadBrd_ParseString_737: (+1)
   \   00004B86   0x....             LDR.N    R1,??DataTable4_78
   \   00004B88   0xA80B             ADD      R0,SP,#+44
   \   00004B8A   0x.... 0x....      BL       strcpy
   4547                          // Re-Initialize I2C....It has been corrupted.
   4548                          MX_I2C1_Reset();
   \   00004B8E   0x.... 0x....      BL       MX_I2C1_Reset
   4549                          break;
   \   00004B92   0xE010             B.N      ??RoadBrd_ParseString_741
   \                     ??RoadBrd_ParseString_598:
   \   00004B94   0x........         DC32     ?_284
   \   00004B98   0x........         DC32     ?_285
   4550                        case HAL_TIMEOUT:
   4551                          strcpy( (char *)tempBffr2, "I2C TIMEOUT: I2C reported TIMEOUT.\r\n");
   \                     ??RoadBrd_ParseString_739: (+1)
   \   00004B9C   0x....             LDR.N    R1,??DataTable4_79
   \   00004B9E   0xA80B             ADD      R0,SP,#+44
   \   00004BA0   0x.... 0x....      BL       strcpy
   4552                          // Re-Initialize I2C....It has been corrupted.
   4553                          MX_I2C1_Reset();
   \   00004BA4   0x.... 0x....      BL       MX_I2C1_Reset
   4554                          break;
   \   00004BA8   0xE005             B.N      ??RoadBrd_ParseString_741
   4555                        default:  
   4556                          strcpy( (char *)tempBffr2, "I2C ERROR: I2C reported unnown error.\r\n");
   \                     ??RoadBrd_ParseString_740: (+1)
   \   00004BAA   0x....             LDR.N    R1,??DataTable4_80
   \   00004BAC   0xA80B             ADD      R0,SP,#+44
   \   00004BAE   0x.... 0x....      BL       strcpy
   4557                          // Re-Initialize I2C....It has been corrupted.
   4558                          MX_I2C1_Reset();
   \   00004BB2   0x.... 0x....      BL       MX_I2C1_Reset
   4559                          break;
   4560                      }
   4561                      // Send string to UART..
   4562          #ifdef NUCLEO
   4563                      Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);
   4564          #else
   4565                      Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \                     ??RoadBrd_ParseString_741: (+1)
   \   00004BB6   0xA90B             ADD      R1,SP,#+44
   \   00004BB8   0x2000             MOVS     R0,#+0
   \   00004BBA   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00004BBE   0x0006             MOVS     R6,R0
   4566          #endif
   4567                     if (Status != HAL_OK)
   \   00004BC0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00004BC2   0x2E00             CMP      R6,#+0
   \   00004BC4   0xD006             BEQ.N    ??RoadBrd_ParseString_750
   4568                        return Status;
   \   00004BC6   0x0030             MOVS     R0,R6
   \   00004BC8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00004BCA   0xE014             B.N      ??RoadBrd_ParseString_4
   \                     ??RoadBrd_ParseString_601:
   \   00004BCC   0x........         DC32     ?_286
   \   00004BD0   0x........         DC32     ?_287
   4569                      // Send Prompt to UART..
   4570                      strcpy( (char *)tempBffr2, "\r\n\r\n> ");
   \                     ??RoadBrd_ParseString_750: (+1)
   \   00004BD4   0x....             LDR.N    R1,??DataTable4_81
   \   00004BD6   0xA80B             ADD      R0,SP,#+44
   \   00004BD8   0x.... 0x....      BL       strcpy
   4571          #ifdef NUCLEO
   4572                      Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);
   4573          #else
   4574                      Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00004BDC   0xA90B             ADD      R1,SP,#+44
   \   00004BDE   0x2000             MOVS     R0,#+0
   \   00004BE0   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00004BE4   0x0006             MOVS     R6,R0
   4575          #endif
   4576                      if (Status != HAL_OK)
   \   00004BE6   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00004BE8   0x2E00             CMP      R6,#+0
   \   00004BEA   0xD002             BEQ.N    ??RoadBrd_ParseString_3
   4577                        return Status;
   \   00004BEC   0x0030             MOVS     R0,R6
   \   00004BEE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00004BF0   0xE001             B.N      ??RoadBrd_ParseString_4
   4578              } // EndElse ( Bypass )
   4579            return Status;
   \                     ??RoadBrd_ParseString_3: (+1)
   \   00004BF2   0x0030             MOVS     R0,R6
   \   00004BF4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??RoadBrd_ParseString_4: (+1)
   \   00004BF6   0xF50D 0x6DA0      ADD      SP,SP,#+1280
   \   00004BFA   0xB00D             ADD      SP,SP,#+52
   \   00004BFC   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   \                     ??RoadBrd_ParseString_605:
   \   00004C00   0x........         DC32     ?_288
   4580          }
   4581          
   4582          /**
   4583            * @brief  This function tests the passed string to make sure it is Hex format.
   4584            * @param  char *ptr: Ptr to string to be tested. NULL terminated
   4585            * @retval int: 1: String is HEX.
   4586            *              0:   String is not HEX.
   4587            */

   \                                 In section .text, align 2, keep-with-next
   4588          int isHexNum(char *ptr)
   4589          {
   \                     isHexNum: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   4590            int Size, x, test1;
   4591            
   4592            Size = strlen(ptr);
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       strlen
   \   0000000A   0x0005             MOVS     R5,R0
   4593            test1 = 0;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x0007             MOVS     R7,R0
   4594            for (x=0; x<Size; x++)
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x0006             MOVS     R6,R0
   \                     ??isHexNum_0: (+1)
   \   00000014   0x42AE             CMP      R6,R5
   \   00000016   0xDA16             BGE.N    ??isHexNum_1
   4595            {
   4596              if (((ptr[x] <= '9') && (ptr[x] >= '0')) ||
   4597                  ((ptr[x] <= 'F') && (ptr[x] >= 'A')))
   \   00000018   0x5DA0             LDRB     R0,[R4, R6]
   \   0000001A   0x283A             CMP      R0,#+58
   \   0000001C   0xDA02             BGE.N    ??isHexNum_2
   \   0000001E   0x5DA0             LDRB     R0,[R4, R6]
   \   00000020   0x2830             CMP      R0,#+48
   \   00000022   0xDA05             BGE.N    ??isHexNum_3
   \                     ??isHexNum_2: (+1)
   \   00000024   0x5DA0             LDRB     R0,[R4, R6]
   \   00000026   0x2847             CMP      R0,#+71
   \   00000028   0xDA05             BGE.N    ??isHexNum_4
   \   0000002A   0x5DA0             LDRB     R0,[R4, R6]
   \   0000002C   0x2841             CMP      R0,#+65
   \   0000002E   0xDB02             BLT.N    ??isHexNum_4
   4598                test1 = 0;
   \                     ??isHexNum_3: (+1)
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x0007             MOVS     R7,R0
   \   00000034   0xE001             B.N      ??isHexNum_5
   4599              else
   4600                test1 = 1;
   \                     ??isHexNum_4: (+1)
   \   00000036   0x2001             MOVS     R0,#+1
   \   00000038   0x0007             MOVS     R7,R0
   4601              if (test1 == 1)
   \                     ??isHexNum_5: (+1)
   \   0000003A   0x2F01             CMP      R7,#+1
   \   0000003C   0xD101             BNE.N    ??isHexNum_6
   4602                return 0;
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0xE002             B.N      ??isHexNum_7
   4603            }
   \                     ??isHexNum_6: (+1)
   \   00000042   0x1C76             ADDS     R6,R6,#+1
   \   00000044   0xE7E6             B.N      ??isHexNum_0
   4604            return 1;
   \                     ??isHexNum_1: (+1)
   \   00000046   0x2001             MOVS     R0,#+1
   \                     ??isHexNum_7: (+1)
   \   00000048   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
   4605          }
   4606          
   4607          /**
   4608            * @brief  This function converts the passed Hex String to an Integer value.
   4609            * @param  char *ptr: Ptr to string to be converted. NULL terminated
   4610            * @retval int: -1: Error in String
   4611            *              Value converted returned.
   4612            */

   \                                 In section .text, align 2, keep-with-next
   4613          int hatoi( char *ptr )
   4614          {
   \                     hatoi: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   4615            int Size, x;
   4616            int Value = 0;
   \   00000006   0x2700             MOVS     R7,#+0
   4617            int FinalValue = 0;
   \   00000008   0xF05F 0x0800      MOVS     R8,#+0
   4618            
   4619            Size = strlen(ptr);
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       strlen
   \   00000012   0x0005             MOVS     R5,R0
   4620            for (x=0; x<Size; x++)
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x0006             MOVS     R6,R0
   \                     ??hatoi_0: (+1)
   \   00000018   0x42AE             CMP      R6,R5
   \   0000001A   0xDA1A             BGE.N    ??hatoi_1
   4621            {
   4622              if ((ptr[x] <= '9') && (ptr[x] >= '0'))
   \   0000001C   0x5DA0             LDRB     R0,[R4, R6]
   \   0000001E   0x283A             CMP      R0,#+58
   \   00000020   0xDA06             BGE.N    ??hatoi_2
   \   00000022   0x5DA0             LDRB     R0,[R4, R6]
   \   00000024   0x2830             CMP      R0,#+48
   \   00000026   0xDB03             BLT.N    ??hatoi_2
   4623                Value = ptr[x] - '0';
   \   00000028   0x5DA0             LDRB     R0,[R4, R6]
   \   0000002A   0x3830             SUBS     R0,R0,#+48
   \   0000002C   0x0007             MOVS     R7,R0
   \   0000002E   0xE00C             B.N      ??hatoi_3
   4624              else if((ptr[x] <= 'F') && (ptr[x] >= 'A'))
   \                     ??hatoi_2: (+1)
   \   00000030   0x5DA0             LDRB     R0,[R4, R6]
   \   00000032   0x2847             CMP      R0,#+71
   \   00000034   0xDA06             BGE.N    ??hatoi_4
   \   00000036   0x5DA0             LDRB     R0,[R4, R6]
   \   00000038   0x2841             CMP      R0,#+65
   \   0000003A   0xDB03             BLT.N    ??hatoi_4
   4625                Value = ptr[x] - 'A' + 10;
   \   0000003C   0x5DA0             LDRB     R0,[R4, R6]
   \   0000003E   0x3837             SUBS     R0,R0,#+55
   \   00000040   0x0007             MOVS     R7,R0
   \   00000042   0xE002             B.N      ??hatoi_3
   4626              else
   4627                return -1;
   \                     ??hatoi_4: (+1)
   \   00000044   0xF05F 0x30FF      MOVS     R0,#-1
   \   00000048   0xE004             B.N      ??hatoi_5
   4628              FinalValue = FinalValue*16 + Value;
   \                     ??hatoi_3: (+1)
   \   0000004A   0xEB17 0x1808      ADDS     R8,R7,R8, LSL #+4
   4629            }
   \   0000004E   0x1C76             ADDS     R6,R6,#+1
   \   00000050   0xE7E2             B.N      ??hatoi_0
   4630            return FinalValue;
   \                     ??hatoi_1: (+1)
   \   00000052   0x4640             MOV      R0,R8
   \                     ??hatoi_5: (+1)
   \   00000054   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   4631          }
   4632          
   4633          

   \                                 In section .text, align 2, keep-with-next
   4634          bool Tst_Bypass( void)
   4635          {
   4636            return Bypass;
   \                     Tst_Bypass: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable4_36
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return
   4637          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     ParseString

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x........         DC32     ?_289

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     ?_290

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x........         DC32     ?_291

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x........         DC32     ?_292

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x........         DC32     ?_293

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x........         DC32     ?_294

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0x........         DC32     ?_295

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   0x00 0x00          DC8      "",0x0,0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \   00000000   0x........         DC32     ?_296

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_9:
   \   00000000   0x........         DC32     ?_297

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_10:
   \   00000000   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_11:
   \   00000000   0x........         DC32     ?_298

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_12:
   \   00000000   0x........         DC32     ?_299

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_13:
   \   00000000   0x........         DC32     ?_300

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_14:
   \   00000000   0x........         DC32     ?_127

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_15:
   \   00000000   0x........         DC32     ?_301

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_16:
   \   00000000   0x........         DC32     ?_302

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     ?_303

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x........         DC32     ?_304

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x........         DC32     ?_305

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x........         DC32     ?_306

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x........         DC32     ?_307

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x........         DC32     ?_308

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   0x........         DC32     ?_309

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \   00000000   0x........         DC32     ?_310

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \   00000000   0x........         DC32     ?_311

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_9:
   \   00000000   0x........         DC32     ?_312

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_10:
   \   00000000   0x........         DC32     ?_313

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_11:
   \   00000000   0x........         DC32     ?_314

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_12:
   \   00000000   0x........         DC32     ?_315

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_13:
   \   00000000   0x........         DC32     ?_316

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_14:
   \   00000000   0x41200000         DC32     0x41200000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_15:
   \   00000000   0x........         DC32     ?_317

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_16:
   \   00000000   0x........         DC32     ?_318

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_17:
   \   00000000   0x........         DC32     ?_319

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_18:
   \   00000000   0x........         DC32     ?_320

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_19:
   \   00000000   0x........         DC32     ?_321

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_20:
   \   00000000   0x........         DC32     ?_322

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_21:
   \   00000000   0x........         DC32     ?_323

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_22:
   \   00000000   0x........         DC32     ?_324

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_23:
   \   00000000   0x........         DC32     ?_325

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_24:
   \   00000000   0x........         DC32     ?_326

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_25:
   \   00000000   0x........         DC32     ?_41

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_26:
   \   00000000   0x........         DC32     ?_327

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_27:
   \   00000000   0x........         DC32     ?_328

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_28:
   \   00000000   0x........         DC32     ?_329

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_29:
   \   00000000   0x........         DC32     ?_330

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_30:
   \   00000000   0x........         DC32     ?_331

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_31:
   \   00000000   0x........         DC32     ?_332

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_32:
   \   00000000   0x........         DC32     ?_333

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_33:
   \   00000000   0x........         DC32     ?_24

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_34:
   \   00000000   0x........         DC32     ?_334

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_35:
   \   00000000   0x........         DC32     ?_335

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_36:
   \   00000000   0x........         DC32     Bypass

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_37:
   \   00000000   0x........         DC32     ?_336

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_38:
   \   00000000   0x........         DC32     ?_337

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_39:
   \   00000000   0x........         DC32     ?_338

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_40:
   \   00000000   0x........         DC32     ?_339

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_41:
   \   00000000   0x........         DC32     ?_340

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_42:
   \   00000000   0x........         DC32     ?_341

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_43:
   \   00000000   0x........         DC32     ?_342

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_44:
   \   00000000   0x........         DC32     ?_343

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_45:
   \   00000000   0x........         DC32     ?_344

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_46:
   \   00000000   0x........         DC32     ?_345

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_47:
   \   00000000   0x........         DC32     ?_346

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_48:
   \   00000000   0x........         DC32     ?_347

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_49:
   \   00000000   0x........         DC32     ?_348

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_50:
   \   00000000   0x........         DC32     ?_349

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_51:
   \   00000000   0x........         DC32     ?_350

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_52:
   \   00000000   0x........         DC32     ?_351

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_53:
   \   00000000   0x........         DC32     ?_352

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_54:
   \   00000000   0x........         DC32     ?_353

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_55:
   \   00000000   0x........         DC32     ?_354

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_56:
   \   00000000   0x........         DC32     ?_355

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_57:
   \   00000000   0x........         DC32     ?_356

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_58:
   \   00000000   0x........         DC32     ?_357

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_59:
   \   00000000   0x........         DC32     ?_358

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_60:
   \   00000000   0x........         DC32     ?_359

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_61:
   \   00000000   0x........         DC32     ?_360

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_62:
   \   00000000   0x........         DC32     ?_361

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_63:
   \   00000000   0x........         DC32     ?_362

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_64:
   \   00000000   0x........         DC32     ?_363

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_65:
   \   00000000   0x........         DC32     ?_364

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_66:
   \   00000000   0x........         DC32     ?_365

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_67:
   \   00000000   0x........         DC32     ?_366

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_68:
   \   00000000   0x........         DC32     ?_367

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_69:
   \   00000000   0x........         DC32     ?_368

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_70:
   \   00000000   0x........         DC32     ?_369

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_71:
   \   00000000   0x........         DC32     ?_370

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_72:
   \   00000000   0x........         DC32     ?_371

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_73:
   \   00000000   0x........         DC32     ?_372

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_74:
   \   00000000   0x........         DC32     ?_373

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_75:
   \   00000000   0x........         DC32     ?_374

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_76:
   \   00000000   0x........         DC32     ?_375

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_77:
   \   00000000   0x........         DC32     ?_376

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_78:
   \   00000000   0x........         DC32     ?_377

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_79:
   \   00000000   0x........         DC32     ?_378

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_80:
   \   00000000   0x........         DC32     ?_379

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_81:
   \   00000000   0x........         DC32     ?_380

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x0D 0x0A          DC8 0DH, 0AH, 0DH, 0AH, 20H, 54H, 2EH, 2EH
   \              0x0D 0x0A    
   \              0x20 0x54    
   \              0x2E 0x2E    
   \   00000008   0x2E 0x2E          DC8 2EH, 2EH, 2EH, 2EH, 2EH, 2EH, 54H, 45H
   \              0x2E 0x2E    
   \              0x2E 0x2E    
   \              0x54 0x45    
   \   00000010   0x52 0x4D          DC8 52H, 4DH, 49H, 4EH, 41H, 54H, 49H, 4EH
   \              0x49 0x4E    
   \              0x41 0x54    
   \              0x49 0x4E    
   \   00000018   0x47 0x20          DC8 47H, 20H, 4DH, 4FH, 4EH, 49H, 54H, 4FH
   \              0x4D 0x4F    
   \              0x4E 0x49    
   \              0x54 0x4F    
   \   00000020   0x52 0x20          DC8 52H, 20H, 4DH, 4FH, 44H, 45H, 2EH, 2EH
   \              0x4D 0x4F    
   \              0x44 0x45    
   \              0x2E 0x2E    
   \   00000028   0x2E 0x2E          DC8 2EH, 2EH, 2EH, 2EH, 2EH, 2EH, 2EH, 0DH
   \              0x2E 0x2E    
   \              0x2E 0x2E    
   \              0x2E 0x0D    
   \   00000030   0x0A 0x0D          DC8 0AH, 0DH, 0AH, 3EH, 20H, 0
   \              0x0A 0x3E    
   \              0x20 0x00    
   \   00000036   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_RDSNDBFFR_FILL</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x52 0x44    
   \              0x53 0x4E    
   \              0x44 0x42    
   \              0x46 0x46    
   \              0x52 0x5F    
   \              0x46 0x49    
   \              0x4C 0x4C    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x52 0x6F          DC8 52H, 6FH, 61H, 64H, 20H, 53H, 6FH, 75H
   \              0x61 0x64    
   \              0x20 0x53    
   \              0x6F 0x75    
   \   00000008   0x6E 0x64          DC8 6EH, 64H, 3AH, 20H, 52H, 6FH, 61H, 64H
   \              0x3A 0x20    
   \              0x52 0x6F    
   \              0x61 0x64    
   \   00000010   0x20 0x53          DC8 20H, 53H, 6FH, 75H, 6EH, 64H, 20H, 6CH
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x20 0x6C    
   \   00000018   0x6F 0x61          DC8 6FH, 61H, 64H, 65H, 64H, 2CH, 20H, 70H
   \              0x64 0x65    
   \              0x64 0x2C    
   \              0x20 0x70    
   \   00000020   0x72 0x6F          DC8 72H, 6FH, 63H, 65H, 73H, 73H, 65H, 64H
   \              0x63 0x65    
   \              0x73 0x73    
   \              0x65 0x64    
   \   00000028   0x2C 0x20          DC8 2CH, 20H, 61H, 6EH, 64H, 20H, 73H, 65H
   \              0x61 0x6E    
   \              0x64 0x20    
   \              0x73 0x65    
   \   00000030   0x6E 0x74          DC8 6EH, 74H, 20H, 74H, 6FH, 20H, 46H, 46H
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x46 0x46    
   \   00000038   0x54 0x20          DC8 54H, 20H, 42H, 69H, 6EH, 73H, 2EH, 0DH
   \              0x42 0x69    
   \              0x6E 0x73    
   \              0x2E 0x0D    
   \   00000040   0x0A 0x00          DC8 0AH, 0
   \   00000042   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x52 0x6F          DC8 "Road Sound: FFT Measurements 0-15.\015\012"
   \              0x61 0x64    
   \              0x20 0x53    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x3A 0x20    
   \              0x46 0x46    
   \              0x54 0x20    
   \              0x4D 0x65    
   \              0x61 0x73    
   \              0x75 0x72    
   \              0x65 0x6D    
   \              0x65 0x6E    
   \              0x74 0x73    
   \              0x20 0x30    
   \              0x2D 0x31    
   \              0x35 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_4:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_FFT0-15:%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x46    
   \              0x46 0x54    
   \              0x30 0x2D    
   \              0x31 0x35    
   \              0x3A 0x25    
   \              0x73 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_5:
   \   00000000   0x20 0x20          DC8 "     FFT Measurements 0-15: "
   \              0x20 0x20    
   \              0x20 0x46    
   \              0x46 0x54    
   \              0x20 0x4D    
   \              0x65 0x61    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x6D 0x65    
   \              0x6E 0x74    
   \              0x73 0x20    
   \              0x30 0x2D    
   \              0x31 0x35    
   \              0x3A 0x20    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \   00000000   0x0D 0x0A          DC8 "\015\012"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_7:
   \   00000000   0x52 0x6F          DC8 "Road Sound: FFT Measurements 16-31.\015\012"
   \              0x61 0x64    
   \              0x20 0x53    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x3A 0x20    
   \              0x46 0x46    
   \              0x54 0x20    
   \              0x4D 0x65    
   \              0x61 0x73    
   \              0x75 0x72    
   \              0x65 0x6D    
   \              0x65 0x6E    
   \              0x74 0x73    
   \              0x20 0x31    
   \              0x36 0x2D    
   \              0x33 0x31    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_8:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_FFT16-31:%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x46    
   \              0x46 0x54    
   \              0x31 0x36    
   \              0x2D 0x33    
   \              0x31 0x3A    
   \              0x25 0x73    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_9:
   \   00000000   0x20 0x20          DC8 "     FFT Measurements 16-31: "
   \              0x20 0x20    
   \              0x20 0x46    
   \              0x46 0x54    
   \              0x20 0x4D    
   \              0x65 0x61    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x6D 0x65    
   \              0x6E 0x74    
   \              0x73 0x20    
   \              0x31 0x36    
   \              0x2D 0x33    
   \              0x31 0x3A    
   \              0x20 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_10:
   \   00000000   0x52 0x6F          DC8 "Road Sound: FFT Measurements 32-47.\015\012"
   \              0x61 0x64    
   \              0x20 0x53    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x3A 0x20    
   \              0x46 0x46    
   \              0x54 0x20    
   \              0x4D 0x65    
   \              0x61 0x73    
   \              0x75 0x72    
   \              0x65 0x6D    
   \              0x65 0x6E    
   \              0x74 0x73    
   \              0x20 0x33    
   \              0x32 0x2D    
   \              0x34 0x37    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_11:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_FFT32-47:%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x46    
   \              0x46 0x54    
   \              0x33 0x32    
   \              0x2D 0x34    
   \              0x37 0x3A    
   \              0x25 0x73    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_12:
   \   00000000   0x20 0x20          DC8 "     FFT Measurements 32-47: "
   \              0x20 0x20    
   \              0x20 0x46    
   \              0x46 0x54    
   \              0x20 0x4D    
   \              0x65 0x61    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x6D 0x65    
   \              0x6E 0x74    
   \              0x73 0x20    
   \              0x33 0x32    
   \              0x2D 0x34    
   \              0x37 0x3A    
   \              0x20 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_13:
   \   00000000   0x52 0x6F          DC8 "Road Sound: FFT Measurements 48-63.\015\012"
   \              0x61 0x64    
   \              0x20 0x53    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x3A 0x20    
   \              0x46 0x46    
   \              0x54 0x20    
   \              0x4D 0x65    
   \              0x61 0x73    
   \              0x75 0x72    
   \              0x65 0x6D    
   \              0x65 0x6E    
   \              0x74 0x73    
   \              0x20 0x34    
   \              0x38 0x2D    
   \              0x36 0x33    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_14:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_FFT48-63:%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x46    
   \              0x46 0x54    
   \              0x34 0x38    
   \              0x2D 0x36    
   \              0x33 0x3A    
   \              0x25 0x73    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_15:
   \   00000000   0x20 0x20          DC8 "     FFT Measurements 48-63: "
   \              0x20 0x20    
   \              0x20 0x46    
   \              0x46 0x54    
   \              0x20 0x4D    
   \              0x65 0x61    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x6D 0x65    
   \              0x6E 0x74    
   \              0x73 0x20    
   \              0x34 0x38    
   \              0x2D 0x36    
   \              0x33 0x3A    
   \              0x20 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_16:
   \   00000000   0x52 0x6F          DC8 "Road Sound: Results of save Buffer.\015\012"
   \              0x61 0x64    
   \              0x20 0x53    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x3A 0x20    
   \              0x52 0x65    
   \              0x73 0x75    
   \              0x6C 0x74    
   \              0x73 0x20    
   \              0x6F 0x66    
   \              0x20 0x73    
   \              0x61 0x76    
   \              0x65 0x20    
   \              0x42 0x75    
   \              0x66 0x66    
   \              0x65 0x72    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_17:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_FFTBFFR_DUMP:"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x46    
   \              0x46 0x54    
   \              0x42 0x46    
   \              0x46 0x52    
   \              0x5F 0x44    
   \              0x55 0x4D    
   \              0x50 0x3A    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 1
   \   00000000   0x00               DC8 ""

   \                                 In section .rodata, align 4
   \                     ?_19:
   \   00000000   0x25 0x30          DC8 "%04d "
   \              0x34 0x64    
   \              0x20 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_20:
   \   00000000   0x3C 0x2F          DC8 "</STATUS>"
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_21:
   \   00000000   0x20 0x20          DC8 "     ---COMPLETE---"
   \              0x20 0x20    
   \              0x20 0x2D    
   \              0x2D 0x2D    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2D 0x2D    
   \              0x2D 0x00    

   \                                 In section .rodata, align 4
   \                     ?_22:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_FFTCLR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x46    
   \              0x46 0x54    
   \              0x43 0x4C    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_23:
   \   00000000   0x52 0x6F          DC8 "Road Sound: All buffers cleared.\015\012"
   \              0x61 0x64    
   \              0x20 0x53    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x3A 0x20    
   \              0x41 0x6C    
   \              0x6C 0x20    
   \              0x62 0x75    
   \              0x66 0x66    
   \              0x65 0x72    
   \              0x73 0x20    
   \              0x63 0x6C    
   \              0x65 0x61    
   \              0x72 0x65    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_24:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_NOSUPPORT</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x4E 0x4F    
   \              0x53 0x55    
   \              0x50 0x50    
   \              0x4F 0x52    
   \              0x54 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_25:
   \   00000000   0x49 0x6E          DC8 "Initialize Barometer Sensor Passed.\015\012"
   \              0x69 0x74    
   \              0x69 0x61    
   \              0x6C 0x69    
   \              0x7A 0x65    
   \              0x20 0x42    
   \              0x61 0x72    
   \              0x6F 0x6D    
   \              0x65 0x74    
   \              0x65 0x72    
   \              0x20 0x53    
   \              0x65 0x6E    
   \              0x73 0x6F    
   \              0x72 0x20    
   \              0x50 0x61    
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_26:
   \   00000000   0x49 0x6E          DC8 "Initialize Barometer Sensor FAILED.\015\012"
   \              0x69 0x74    
   \              0x69 0x61    
   \              0x6C 0x69    
   \              0x7A 0x65    
   \              0x20 0x42    
   \              0x61 0x72    
   \              0x6F 0x6D    
   \              0x65 0x74    
   \              0x65 0x72    
   \              0x20 0x53    
   \              0x65 0x6E    
   \              0x73 0x6F    
   \              0x72 0x20    
   \              0x46 0x41    
   \              0x49 0x4C    
   \              0x45 0x44    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_27:
   \   00000000   0x41 0x36          DC8 "A6 Command...Read Pressure Passed.\015\012"
   \              0x20 0x43    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x2E    
   \              0x2E 0x52    
   \              0x65 0x61    
   \              0x64 0x20    
   \              0x50 0x72    
   \              0x65 0x73    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x20 0x50    
   \              0x61 0x73    
   \              0x73 0x65    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_28:
   \   00000000   0x20 0x50          DC8 20H, 50H, 52H, 45H, 53H, 53H, 55H, 52H
   \              0x52 0x45    
   \              0x53 0x53    
   \              0x55 0x52    
   \   00000008   0x45 0x28          DC8 45H, 28H, 50H, 52H, 45H, 53H, 53H, 5FH
   \              0x50 0x52    
   \              0x45 0x53    
   \              0x53 0x5F    
   \   00000010   0x4F 0x55          DC8 4FH, 55H, 54H, 5FH, 48H, 2EH, 2EH, 2EH
   \              0x54 0x5F    
   \              0x48 0x2E    
   \              0x2E 0x2E    
   \   00000018   0x50 0x52          DC8 50H, 52H, 45H, 53H, 53H, 5FH, 4FH, 55H
   \              0x45 0x53    
   \              0x53 0x5F    
   \              0x4F 0x55    
   \   00000020   0x54 0x5F          DC8 54H, 5FH, 4CH, 2EH, 2EH, 2EH, 50H, 52H
   \              0x4C 0x2E    
   \              0x2E 0x2E    
   \              0x50 0x52    
   \   00000028   0x45 0x53          DC8 45H, 53H, 53H, 5FH, 4FH, 55H, 54H, 5FH
   \              0x53 0x5F    
   \              0x4F 0x55    
   \              0x54 0x5F    
   \   00000030   0x58 0x4C          DC8 58H, 4CH, 29H, 0DH, 0AH, 0
   \              0x29 0x0D    
   \              0x0A 0x00    
   \   00000036   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_29:
   \   00000000   0x20 0x50          DC8 " PRESSURE: %s/%s\015\012"
   \              0x52 0x45    
   \              0x53 0x53    
   \              0x55 0x52    
   \              0x45 0x3A    
   \              0x20 0x25    
   \              0x73 0x2F    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_30:
   \   00000000   0x3C 0x53          DC8 "<STATUS>PRESSURE: %s/%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x50 0x52    
   \              0x45 0x53    
   \              0x53 0x55    
   \              0x52 0x45    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_31:
   \   00000000   0x20 0x50          DC8 " PRESSURE:  "
   \              0x52 0x45    
   \              0x53 0x53    
   \              0x55 0x52    
   \              0x45 0x3A    
   \              0x20 0x20    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_32:
   \   00000000   0x20 0x20          DC8 "  -  %08x\015\012"
   \              0x2D 0x20    
   \              0x20 0x25    
   \              0x30 0x38    
   \              0x78 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_33:
   \   00000000   0x41 0x36          DC8 "A6 Command...Read Pressure FAILED.\015\012"
   \              0x20 0x43    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x2E    
   \              0x2E 0x52    
   \              0x65 0x61    
   \              0x64 0x20    
   \              0x50 0x72    
   \              0x65 0x73    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x20 0x46    
   \              0x41 0x49    
   \              0x4C 0x45    
   \              0x44 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_34:
   \   00000000   0x41 0x38          DC8 "A8 Command...Read Temperature Passed.\015\012"
   \              0x20 0x43    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x2E    
   \              0x2E 0x52    
   \              0x65 0x61    
   \              0x64 0x20    
   \              0x54 0x65    
   \              0x6D 0x70    
   \              0x65 0x72    
   \              0x61 0x74    
   \              0x75 0x72    
   \              0x65 0x20    
   \              0x50 0x61    
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_35:
   \   00000000   0x20 0x20          DC8 "     TEMP DATA: "
   \              0x20 0x20    
   \              0x20 0x54    
   \              0x45 0x4D    
   \              0x50 0x20    
   \              0x44 0x41    
   \              0x54 0x41    
   \              0x3A 0x20    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_36:
   \   00000000   0x20 0x20          DC8 "     TEMP DATA(Decimal): %d\015\012"
   \              0x20 0x20    
   \              0x20 0x54    
   \              0x45 0x4D    
   \              0x50 0x20    
   \              0x44 0x41    
   \              0x54 0x41    
   \              0x28 0x44    
   \              0x65 0x63    
   \              0x69 0x6D    
   \              0x61 0x6C    
   \              0x29 0x3A    
   \              0x20 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_37:
   \   00000000   0x20 0x20          DC8 "     TempC: "
   \              0x20 0x20    
   \              0x20 0x54    
   \              0x65 0x6D    
   \              0x70 0x43    
   \              0x3A 0x20    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_38:
   \   00000000   0x20 0x20          DC8 "     TempF: "
   \              0x20 0x20    
   \              0x20 0x54    
   \              0x65 0x6D    
   \              0x70 0x46    
   \              0x3A 0x20    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_39:
   \   00000000   0x42 0x61          DC8 "Barometer Sensor: WHO_AM_I Passed.\015\012"
   \              0x72 0x6F    
   \              0x6D 0x65    
   \              0x74 0x65    
   \              0x72 0x20    
   \              0x53 0x65    
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x3A 0x20    
   \              0x57 0x48    
   \              0x4F 0x5F    
   \              0x41 0x4D    
   \              0x5F 0x49    
   \              0x20 0x50    
   \              0x61 0x73    
   \              0x73 0x65    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_40:
   \   00000000   0x42 0x61          DC8 "Barometer Sensor: WHO_AM_I FAILED.\015\012"
   \              0x72 0x6F    
   \              0x6D 0x65    
   \              0x74 0x65    
   \              0x72 0x20    
   \              0x53 0x65    
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x3A 0x20    
   \              0x57 0x48    
   \              0x4F 0x5F    
   \              0x41 0x4D    
   \              0x5F 0x49    
   \              0x20 0x46    
   \              0x41 0x49    
   \              0x4C 0x45    
   \              0x44 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_41:
   \   00000000   0x45 0x52          DC8 "ERROR: Not a legal command.\015\012"
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x61    
   \              0x20 0x6C    
   \              0x65 0x67    
   \              0x61 0x6C    
   \              0x20 0x63    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_42:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_THERMAL_DUMP:"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x48 0x45    
   \              0x52 0x4D    
   \              0x41 0x4C    
   \              0x5F 0x44    
   \              0x55 0x4D    
   \              0x50 0x3A    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_43:
   \   00000000   0x56 0x6F          DC8 "Voltage Monitor/Shunt Voltage...\015\012"
   \              0x6C 0x74    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x4D 0x6F    
   \              0x6E 0x69    
   \              0x74 0x6F    
   \              0x72 0x2F    
   \              0x53 0x68    
   \              0x75 0x6E    
   \              0x74 0x20    
   \              0x56 0x6F    
   \              0x6C 0x74    
   \              0x61 0x67    
   \              0x65 0x2E    
   \              0x2E 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_44:
   \   00000000   0x20 0x20          DC8 "     Thermistor DATA: %s   %s/%s   %s/%s   %d\015\012"
   \              0x20 0x20    
   \              0x20 0x54    
   \              0x68 0x65    
   \              0x72 0x6D    
   \              0x69 0x73    
   \              0x74 0x6F    
   \              0x72 0x20    
   \              0x44 0x41    
   \              0x54 0x41    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x20 0x20    
   \              0x20 0x25    
   \              0x73 0x2F    
   \              0x25 0x73    
   \              0x20 0x20    
   \              0x20 0x25    
   \              0x73 0x2F    
   \              0x25 0x73    
   \              0x20 0x20    
   \              0x20 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_45:
   \   00000000   0x20 0x20          DC8 "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\015\012"
   \              0x20 0x20    
   \              0x20 0x47    
   \              0x72 0x69    
   \              0x64 0x20    
   \              0x33 0x33    
   \              0x20 0x44    
   \              0x41 0x54    
   \              0x41 0x3A    
   \              0x20 0x25    
   \              0x73 0x20    
   \              0x20 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x20    
   \              0x20 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x20    
   \              0x20 0x20    
   \              0x25 0x64    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_46:
   \   00000000   0x20 0x20          DC8 "     SHNT VLTG DATA: "
   \              0x20 0x20    
   \              0x20 0x53    
   \              0x48 0x4E    
   \              0x54 0x20    
   \              0x56 0x4C    
   \              0x54 0x47    
   \              0x20 0x44    
   \              0x41 0x54    
   \              0x41 0x3A    
   \              0x20 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_47:
   \   00000000   0x20 0x20          DC8 "     COMPLETE.\015\012"
   \              0x20 0x20    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_48:
   \   00000000   0x43 0x6F          DC8 43H, 6FH, 6FH, 6CH, 20H, 45H, 79H, 65H
   \              0x6F 0x6C    
   \              0x20 0x45    
   \              0x79 0x65    
   \   00000008   0x2F 0x47          DC8 2FH, 47H, 72H, 69H, 64H, 20H, 45H, 79H
   \              0x72 0x69    
   \              0x64 0x20    
   \              0x45 0x79    
   \   00000010   0x65 0x20          DC8 65H, 20H, 53H, 65H, 6EH, 73H, 6FH, 72H
   \              0x53 0x65    
   \              0x6E 0x73    
   \              0x6F 0x72    
   \   00000018   0x3A 0x20          DC8 3AH, 20H, 49H, 6EH, 69H, 74H, 69H, 61H
   \              0x49 0x6E    
   \              0x69 0x74    
   \              0x69 0x61    
   \   00000020   0x6C 0x69          DC8 6CH, 69H, 7AH, 61H, 74H, 69H, 6FH, 6EH
   \              0x7A 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \   00000028   0x20 0x43          DC8 20H, 43H, 6FH, 6DH, 70H, 6CH, 65H, 74H
   \              0x6F 0x6D    
   \              0x70 0x6C    
   \              0x65 0x74    
   \   00000030   0x65 0x2E          DC8 65H, 2EH, 0DH, 0AH, 0
   \              0x0D 0x0A    
   \              0x00         
   \   00000035   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_49:
   \   00000000   0x43 0x6F          DC8 "Cool Eye/Grid Eye Sensor: Reset Complete.\015\012"
   \              0x6F 0x6C    
   \              0x20 0x45    
   \              0x79 0x65    
   \              0x2F 0x47    
   \              0x72 0x69    
   \              0x64 0x20    
   \              0x45 0x79    
   \              0x65 0x20    
   \              0x53 0x65    
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x3A 0x20    
   \              0x52 0x65    
   \              0x73 0x65    
   \              0x74 0x20    
   \              0x43 0x6F    
   \              0x6D 0x70    
   \              0x6C 0x65    
   \              0x74 0x65    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_50:
   \   00000000   0x56 0x6F          DC8 "Voltage Monitor/Read Bus Voltage...\015\012"
   \              0x6C 0x74    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x4D 0x6F    
   \              0x6E 0x69    
   \              0x74 0x6F    
   \              0x72 0x2F    
   \              0x52 0x65    
   \              0x61 0x64    
   \              0x20 0x42    
   \              0x75 0x73    
   \              0x20 0x56    
   \              0x6F 0x6C    
   \              0x74 0x61    
   \              0x67 0x65    
   \              0x2E 0x2E    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_51:
   \   00000000   0x20 0x20          DC8 "     BUS VOLTAGE DATA: "
   \              0x20 0x20    
   \              0x20 0x42    
   \              0x55 0x53    
   \              0x20 0x56    
   \              0x4F 0x4C    
   \              0x54 0x41    
   \              0x47 0x45    
   \              0x20 0x44    
   \              0x41 0x54    
   \              0x41 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_52:
   \   00000000   0x3C 0x53          DC8 "<STATUS>BUS_VLTG:%s/%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x42 0x55    
   \              0x53 0x5F    
   \              0x56 0x4C    
   \              0x54 0x47    
   \              0x3A 0x25    
   \              0x73 0x2F    
   \              0x25 0x73    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_53:
   \   00000000   0x20 0x20          DC8 "     Bus Voltage: %s/%s\015\012"
   \              0x20 0x20    
   \              0x20 0x42    
   \              0x75 0x73    
   \              0x20 0x56    
   \              0x6F 0x6C    
   \              0x74 0x61    
   \              0x67 0x65    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x0D    
   \              0x0A 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_54:
   \   00000000   0x56 0x6F          DC8 "Voltage Monitor: Initialization Complete.\015\012"
   \              0x6C 0x74    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x4D 0x6F    
   \              0x6E 0x69    
   \              0x74 0x6F    
   \              0x72 0x3A    
   \              0x20 0x49    
   \              0x6E 0x69    
   \              0x74 0x69    
   \              0x61 0x6C    
   \              0x69 0x7A    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x43 0x6F    
   \              0x6D 0x70    
   \              0x6C 0x65    
   \              0x74 0x65    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_55:
   \   00000000   0x3C 0x53          DC8 "<STATUS>SHNT_VLTG:%s/%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x48    
   \              0x4E 0x54    
   \              0x5F 0x56    
   \              0x4C 0x54    
   \              0x47 0x3A    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_56:
   \   00000000   0x20 0x20          DC8 "     Shunt Voltage: %s/%s\015\012"
   \              0x20 0x20    
   \              0x20 0x53    
   \              0x68 0x75    
   \              0x6E 0x74    
   \              0x20 0x56    
   \              0x6F 0x6C    
   \              0x74 0x61    
   \              0x67 0x65    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_57:
   \   00000000   0x56 0x6F          DC8 "Voltage Monitor/Read Current...\015\012"
   \              0x6C 0x74    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x4D 0x6F    
   \              0x6E 0x69    
   \              0x74 0x6F    
   \              0x72 0x2F    
   \              0x52 0x65    
   \              0x61 0x64    
   \              0x20 0x43    
   \              0x75 0x72    
   \              0x72 0x65    
   \              0x6E 0x74    
   \              0x2E 0x2E    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_58:
   \   00000000   0x20 0x20          DC8 "     CURRENT DATA: "
   \              0x20 0x20    
   \              0x20 0x43    
   \              0x55 0x52    
   \              0x52 0x45    
   \              0x4E 0x54    
   \              0x20 0x44    
   \              0x41 0x54    
   \              0x41 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_59:
   \   00000000   0x3C 0x53          DC8 "<STATUS>SHNT_CRNT:%s/%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x48    
   \              0x4E 0x54    
   \              0x5F 0x43    
   \              0x52 0x4E    
   \              0x54 0x3A    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_60:
   \   00000000   0x20 0x20          DC8 "     Current: %s/%s\015\012"
   \              0x20 0x20    
   \              0x20 0x43    
   \              0x75 0x72    
   \              0x72 0x65    
   \              0x6E 0x74    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x0D    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_61:
   \   00000000   0x56 0x6F          DC8 "Voltage Monitor/Read Power...\015\012"
   \              0x6C 0x74    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x4D 0x6F    
   \              0x6E 0x69    
   \              0x74 0x6F    
   \              0x72 0x2F    
   \              0x52 0x65    
   \              0x61 0x64    
   \              0x20 0x50    
   \              0x6F 0x77    
   \              0x65 0x72    
   \              0x2E 0x2E    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_62:
   \   00000000   0x20 0x20          DC8 "     POWER DATA: "
   \              0x20 0x20    
   \              0x20 0x50    
   \              0x4F 0x57    
   \              0x45 0x52    
   \              0x20 0x44    
   \              0x41 0x54    
   \              0x41 0x3A    
   \              0x20 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_63:
   \   00000000   0x3C 0x53          DC8 "<STATUS>POWER:%s/%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x50 0x4F    
   \              0x57 0x45    
   \              0x52 0x3A    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_64:
   \   00000000   0x20 0x20          DC8 "     Power: %s/%s\015\012"
   \              0x20 0x20    
   \              0x20 0x50    
   \              0x6F 0x77    
   \              0x65 0x72    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_65:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_C_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x43 0x5F    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_66:
   \   00000000   0x48 0x75          DC8 "Humidity SENSOR...\015\012"
   \              0x6D 0x69    
   \              0x64 0x69    
   \              0x74 0x79    
   \              0x20 0x53    
   \              0x45 0x4E    
   \              0x53 0x4F    
   \              0x52 0x2E    
   \              0x2E 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_67:
   \   00000000   0x20 0x20          DC8 "     Humidity DATA: "
   \              0x20 0x20    
   \              0x20 0x48    
   \              0x75 0x6D    
   \              0x69 0x64    
   \              0x69 0x74    
   \              0x79 0x20    
   \              0x44 0x41    
   \              0x54 0x41    
   \              0x3A 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_68:
   \   00000000   0x20 0x20          DC8 "     Humidity DATA(Decimal): %d\015\012"
   \              0x20 0x20    
   \              0x20 0x48    
   \              0x75 0x6D    
   \              0x69 0x64    
   \              0x69 0x74    
   \              0x79 0x20    
   \              0x44 0x41    
   \              0x54 0x41    
   \              0x28 0x44    
   \              0x65 0x63    
   \              0x69 0x6D    
   \              0x61 0x6C    
   \              0x29 0x3A    
   \              0x20 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_69:
   \   00000000   0x3C 0x53          DC8 "<STATUS>HUMIDITY:%s/%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x48 0x55    
   \              0x4D 0x49    
   \              0x44 0x49    
   \              0x54 0x59    
   \              0x3A 0x25    
   \              0x73 0x2F    
   \              0x25 0x73    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_70:
   \   00000000   0x20 0x20          DC8 "     Humidity: %s/%s\015\012"
   \              0x20 0x20    
   \              0x20 0x48    
   \              0x75 0x6D    
   \              0x69 0x64    
   \              0x69 0x74    
   \              0x79 0x3A    
   \              0x20 0x25    
   \              0x73 0x2F    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_71:
   \   00000000   0x48 0x75          DC8 "Humidity Sensor: Initialization Complete.\015\012"
   \              0x6D 0x69    
   \              0x64 0x69    
   \              0x74 0x79    
   \              0x20 0x53    
   \              0x65 0x6E    
   \              0x73 0x6F    
   \              0x72 0x3A    
   \              0x20 0x49    
   \              0x6E 0x69    
   \              0x74 0x69    
   \              0x61 0x6C    
   \              0x69 0x7A    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x43 0x6F    
   \              0x6D 0x70    
   \              0x6C 0x65    
   \              0x74 0x65    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_72:
   \   00000000   0x20 0x20          DC8 "     Humidity: "
   \              0x20 0x20    
   \              0x20 0x48    
   \              0x75 0x6D    
   \              0x69 0x64    
   \              0x69 0x74    
   \              0x79 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_73:
   \   00000000   0x54 0x42          DC8 "TBD: Read Temp and Pressure NOT IMPLEMENTED\015\012"
   \              0x44 0x3A    
   \              0x20 0x52    
   \              0x65 0x61    
   \              0x64 0x20    
   \              0x54 0x65    
   \              0x6D 0x70    
   \              0x20 0x61    
   \              0x6E 0x64    
   \              0x20 0x50    
   \              0x72 0x65    
   \              0x73 0x73    
   \              0x75 0x72    
   \              0x65 0x20    
   \              0x4E 0x4F    
   \              0x54 0x20    
   \              0x49 0x4D    
   \              0x50 0x4C    
   \              0x45 0x4D    
   \              0x45 0x4E    
   \              0x54 0x45    
   \              0x44 0x0D    
   \              0x0A 0x00    
   \   0000002E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_74:
   \   00000000   0x4E 0x4F          DC8 "NO Action...(0x00).\015\012"
   \              0x20 0x41    
   \              0x63 0x74    
   \              0x69 0x6F    
   \              0x6E 0x2E    
   \              0x2E 0x2E    
   \              0x28 0x30    
   \              0x78 0x30    
   \              0x30 0x29    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_75:
   \   00000000   0x54 0x45          DC8 "TEMP SENSOR...\015\012"
   \              0x4D 0x50    
   \              0x20 0x53    
   \              0x45 0x4E    
   \              0x53 0x4F    
   \              0x52 0x2E    
   \              0x2E 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_76:
   \   00000000   0x3C 0x53          DC8 "<STATUS>TEMPC:%s/%s//TEMPF:%s/%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x54 0x45    
   \              0x4D 0x50    
   \              0x43 0x3A    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x2F    
   \              0x2F 0x54    
   \              0x45 0x4D    
   \              0x50 0x46    
   \              0x3A 0x25    
   \              0x73 0x2F    
   \              0x25 0x73    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000002A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_77:
   \   00000000   0x20 0x20          DC8 "     TempC: %s/%s     TempF: %s/%s\015\012"
   \              0x20 0x20    
   \              0x20 0x54    
   \              0x65 0x6D    
   \              0x70 0x43    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x54 0x65    
   \              0x6D 0x70    
   \              0x46 0x3A    
   \              0x20 0x25    
   \              0x73 0x2F    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_78:
   \   00000000   0x52 0x47          DC8 "RGB Color Light Sensor...\015\012"
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \              0x72 0x20    
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \              0x53 0x65    
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x2E 0x2E    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_79:
   \   00000000   0x20 0x52          DC8 20H, 52H, 47H, 42H, 28H, 52H, 45H, 44H
   \              0x47 0x42    
   \              0x28 0x52    
   \              0x45 0x44    
   \   00000008   0x6D 0x73          DC8 6DH, 73H, 62H, 2CH, 52H, 45H, 44H, 6CH
   \              0x62 0x2C    
   \              0x52 0x45    
   \              0x44 0x6C    
   \   00000010   0x73 0x62          DC8 73H, 62H, 2CH, 47H, 52H, 45H, 45H, 4EH
   \              0x2C 0x47    
   \              0x52 0x45    
   \              0x45 0x4E    
   \   00000018   0x6D 0x73          DC8 6DH, 73H, 62H, 2CH, 47H, 52H, 45H, 45H
   \              0x62 0x2C    
   \              0x47 0x52    
   \              0x45 0x45    
   \   00000020   0x4E 0x6C          DC8 4EH, 6CH, 73H, 62H, 2CH, 42H, 4CH, 55H
   \              0x73 0x62    
   \              0x2C 0x42    
   \              0x4C 0x55    
   \   00000028   0x45 0x6D          DC8 45H, 6DH, 73H, 62H, 2CH, 42H, 4CH, 55H
   \              0x73 0x62    
   \              0x2C 0x42    
   \              0x4C 0x55    
   \   00000030   0x45 0x6C          DC8 45H, 6CH, 73H, 62H, 29H, 0DH, 0AH, 0
   \              0x73 0x62    
   \              0x29 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_80:
   \   00000000   0x20 0x20          DC8 "       DATA: "
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x44    
   \              0x41 0x54    
   \              0x41 0x3A    
   \              0x20 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_81:
   \   00000000   0x3C 0x53          DC8 "<STATUS>RED:%s/GREEN:%s/BLUE:%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x52 0x45    
   \              0x44 0x3A    
   \              0x25 0x73    
   \              0x2F 0x47    
   \              0x52 0x45    
   \              0x45 0x4E    
   \              0x3A 0x25    
   \              0x73 0x2F    
   \              0x42 0x4C    
   \              0x55 0x45    
   \              0x3A 0x25    
   \              0x73 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_82:
   \   00000000   0x20 0x20          DC8 "    Red: "
   \              0x20 0x20    
   \              0x52 0x65    
   \              0x64 0x3A    
   \              0x20 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_83:
   \   00000000   0x20 0x20          DC8 "    Green: "
   \              0x20 0x20    
   \              0x47 0x72    
   \              0x65 0x65    
   \              0x6E 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_84:
   \   00000000   0x20 0x20          DC8 "    Blue: "
   \              0x20 0x20    
   \              0x42 0x6C    
   \              0x75 0x65    
   \              0x3A 0x20    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_85:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 3AH, 20H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x3A 0x20    
   \   00000018   0x49 0x6E          DC8 49H, 6EH, 69H, 74H, 69H, 61H, 6CH, 69H
   \              0x69 0x74    
   \              0x69 0x61    
   \              0x6C 0x69    
   \   00000020   0x7A 0x61          DC8 7AH, 61H, 74H, 69H, 6FH, 6EH, 20H, 43H
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x43    
   \   00000028   0x6F 0x6D          DC8 6FH, 6DH, 70H, 6CH, 65H, 74H, 65H, 20H
   \              0x70 0x6C    
   \              0x65 0x74    
   \              0x65 0x20    
   \   00000030   0x77 0x69          DC8 77H, 69H, 74H, 68H, 20H, 44H, 45H, 46H
   \              0x74 0x68    
   \              0x20 0x44    
   \              0x45 0x46    
   \   00000038   0x41 0x55          DC8 41H, 55H, 4CH, 54H, 20H, 56H, 61H, 6CH
   \              0x4C 0x54    
   \              0x20 0x56    
   \              0x61 0x6C    
   \   00000040   0x75 0x65          DC8 75H, 65H, 73H, 2EH, 0DH, 0AH, 0
   \              0x73 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000047   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_86:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 3AH, 20H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x3A 0x20    
   \   00000018   0x53 0x59          DC8 53H, 59H, 4EH, 54H, 41H, 58H, 20H, 45H
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \   00000020   0x72 0x72          DC8 72H, 72H, 6FH, 72H, 2EH, 20H, 50H, 61H
   \              0x6F 0x72    
   \              0x2E 0x20    
   \              0x50 0x61    
   \   00000028   0x72 0x61          DC8 72H, 61H, 6DH, 65H, 74H, 65H, 72H, 73H
   \              0x6D 0x65    
   \              0x74 0x65    
   \              0x72 0x73    
   \   00000030   0x20 0x61          DC8 20H, 61H, 72H, 65H, 20H, 6EH, 6FH, 74H
   \              0x72 0x65    
   \              0x20 0x6E    
   \              0x6F 0x74    
   \   00000038   0x20 0x63          DC8 20H, 63H, 6FH, 72H, 72H, 65H, 63H, 74H
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \   00000040   0x2E 0x0D          DC8 2EH, 0DH, 0AH, 0
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_87:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 4EH, 6FH, 74H
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \   00000028   0x20 0x63          DC8 20H, 63H, 6FH, 72H, 72H, 65H, 63H, 74H
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \   00000030   0x20 0x66          DC8 20H, 66H, 6FH, 72H, 6DH, 61H, 74H, 2EH
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \   00000038   0x20 0x50          DC8 20H, 50H, 75H, 6EH, 63H, 74H, 75H, 61H
   \              0x75 0x6E    
   \              0x63 0x74    
   \              0x75 0x61    
   \   00000040   0x74 0x69          DC8 74H, 69H, 6FH, 6EH, 21H, 0DH, 0AH, 0
   \              0x6F 0x6E    
   \              0x21 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_88:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 50H, 61H, 72H, 61H
   \              0x52 0x3A    
   \              0x50 0x61    
   \              0x72 0x61    
   \   00000028   0x6D 0x65          DC8 6DH, 65H, 74H, 65H, 72H, 73H, 20H, 6EH
   \              0x74 0x65    
   \              0x72 0x73    
   \              0x20 0x6E    
   \   00000030   0x6F 0x74          DC8 6FH, 74H, 20H, 48H, 45H, 58H, 20H, 56H
   \              0x20 0x48    
   \              0x45 0x58    
   \              0x20 0x56    
   \   00000038   0x61 0x6C          DC8 61H, 6CH, 75H, 65H, 2EH, 0DH, 0AH, 0
   \              0x75 0x65    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_89:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x4F 0x50          DC8 4FH, 50H, 5FH, 4DH, 4FH, 44H, 45H, 2EH
   \              0x5F 0x4D    
   \              0x4F 0x44    
   \              0x45 0x2E    
   \   00000038   0x0D 0x0A          DC8 0DH, 0AH, 0
   \              0x00         
   \   0000003B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_90:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x44 0x53          DC8 44H, 53H, 5FH, 52H, 41H, 4EH, 47H, 45H
   \              0x5F 0x52    
   \              0x41 0x4E    
   \              0x47 0x45    
   \   00000038   0x2E 0x0D          DC8 2EH, 0DH, 0AH, 0
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_91:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x41 0x44          DC8 41H, 44H, 43H, 5FH, 52H, 53H, 4CH, 2EH
   \              0x43 0x5F    
   \              0x52 0x53    
   \              0x4C 0x2E    
   \   00000038   0x0D 0x0A          DC8 0DH, 0AH, 0
   \              0x00         
   \   0000003B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_92:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x53 0x59          DC8 53H, 59H, 4EH, 43H, 2EH, 0DH, 0AH, 0
   \              0x4E 0x43    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_93:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x43 0x4D          DC8 43H, 4DH, 50H, 5FH, 41H, 44H, 4AH, 53H
   \              0x50 0x5F    
   \              0x41 0x44    
   \              0x4A 0x53    
   \   00000038   0x54 0x2E          DC8 54H, 2EH, 0DH, 0AH, 0
   \              0x0D 0x0A    
   \              0x00         
   \   0000003D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_94:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x43 0x4D          DC8 43H, 4DH, 50H, 5FH, 4FH, 46H, 46H, 53H
   \              0x50 0x5F    
   \              0x4F 0x46    
   \              0x46 0x53    
   \   00000038   0x54 0x2E          DC8 54H, 2EH, 0DH, 0AH, 0
   \              0x0D 0x0A    
   \              0x00         
   \   0000003D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_95:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x49 0x4E          DC8 49H, 4EH, 54H, 5FH, 41H, 53H, 53H, 47H
   \              0x54 0x5F    
   \              0x41 0x53    
   \              0x53 0x47    
   \   00000038   0x4E 0x2E          DC8 4EH, 2EH, 0DH, 0AH, 0
   \              0x0D 0x0A    
   \              0x00         
   \   0000003D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_96:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x49 0x4E          DC8 49H, 4EH, 54H, 5FH, 50H, 45H, 52H, 53H
   \              0x54 0x5F    
   \              0x50 0x45    
   \              0x52 0x53    
   \   00000038   0x49 0x53          DC8 49H, 53H, 54H, 2EH, 0DH, 0AH, 0
   \              0x54 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000003F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_97:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x43 0x4E          DC8 43H, 4EH, 56H, 52H, 53H, 4EH, 5FH, 49H
   \              0x56 0x52    
   \              0x53 0x4E    
   \              0x5F 0x49    
   \   00000038   0x4E 0x54          DC8 4EH, 54H, 2EH, 0DH, 0AH, 0
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   0000003E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_98:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 3AH, 20H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x3A 0x20    
   \   00000018   0x49 0x6E          DC8 49H, 6EH, 69H, 74H, 69H, 61H, 6CH, 69H
   \              0x69 0x74    
   \              0x69 0x61    
   \              0x6C 0x69    
   \   00000020   0x7A 0x61          DC8 7AH, 61H, 74H, 69H, 6FH, 6EH, 20H, 43H
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x43    
   \   00000028   0x6F 0x6D          DC8 6FH, 6DH, 70H, 6CH, 65H, 74H, 65H, 20H
   \              0x70 0x6C    
   \              0x65 0x74    
   \              0x65 0x20    
   \   00000030   0x77 0x69          DC8 77H, 69H, 74H, 68H, 20H, 55H, 53H, 45H
   \              0x74 0x68    
   \              0x20 0x55    
   \              0x53 0x45    
   \   00000038   0x52 0x20          DC8 52H, 20H, 56H, 61H, 6CH, 75H, 65H, 73H
   \              0x56 0x61    
   \              0x6C 0x75    
   \              0x65 0x73    
   \   00000040   0x2E 0x0D          DC8 2EH, 0DH, 0AH, 0
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_99:
   \   00000000   0x52 0x47          DC8 "RGB Color Light Sensor Status: "
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \              0x72 0x20    
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \              0x53 0x65    
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \              0x74 0x61    
   \              0x74 0x75    
   \              0x73 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_100:
   \   00000000   0x25 0x30          DC8 "%02x / "
   \              0x32 0x78    
   \              0x20 0x2F    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_101:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 3AH, 20H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x3A 0x20    
   \   00000018   0x52 0x45          DC8 52H, 45H, 53H, 45H, 54H, 20H, 43H, 4DH
   \              0x53 0x45    
   \              0x54 0x20    
   \              0x43 0x4D    
   \   00000020   0x44 0x20          DC8 44H, 20H, 53H, 65H, 6EH, 74H, 20H, 53H
   \              0x53 0x65    
   \              0x6E 0x74    
   \              0x20 0x53    
   \   00000028   0x75 0x63          DC8 75H, 63H, 63H, 65H, 73H, 66H, 75H, 6CH
   \              0x63 0x65    
   \              0x73 0x66    
   \              0x75 0x6C    
   \   00000030   0x2E 0x0D          DC8 2EH, 0DH, 0AH, 0
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_102:
   \   00000000   0x52 0x47          DC8 "RGB Color Light Sensor ID Code: "
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \              0x72 0x20    
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \              0x53 0x65    
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x49    
   \              0x44 0x20    
   \              0x43 0x6F    
   \              0x64 0x65    
   \              0x3A 0x20    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_103:
   \   00000000   0x35 0x56          DC8 "5V Power Plane Powered UP.\015\012"
   \              0x20 0x50    
   \              0x6F 0x77    
   \              0x65 0x72    
   \              0x20 0x50    
   \              0x6C 0x61    
   \              0x6E 0x65    
   \              0x20 0x50    
   \              0x6F 0x77    
   \              0x65 0x72    
   \              0x65 0x64    
   \              0x20 0x55    
   \              0x50 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_104:
   \   00000000   0x35 0x56          DC8 "5V Power Plane Powered DOWN.\015\012"
   \              0x20 0x50    
   \              0x6F 0x77    
   \              0x65 0x72    
   \              0x20 0x50    
   \              0x6C 0x61    
   \              0x6E 0x65    
   \              0x20 0x50    
   \              0x6F 0x77    
   \              0x65 0x72    
   \              0x65 0x64    
   \              0x20 0x44    
   \              0x4F 0x57    
   \              0x4E 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_105:
   \   00000000   0x45 0x52          DC8 "ERROR: Illegal 5V Power Plane Command.\015\012"
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x49    
   \              0x6C 0x6C    
   \              0x65 0x67    
   \              0x61 0x6C    
   \              0x20 0x35    
   \              0x56 0x20    
   \              0x50 0x6F    
   \              0x77 0x65    
   \              0x72 0x20    
   \              0x50 0x6C    
   \              0x61 0x6E    
   \              0x65 0x20    
   \              0x43 0x6F    
   \              0x6D 0x6D    
   \              0x61 0x6E    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_106:
   \   00000000   0x54 0x20          DC8 "T ERROR: Not a legal command.\015\012"
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x61    
   \              0x20 0x6C    
   \              0x65 0x67    
   \              0x61 0x6C    
   \              0x20 0x63    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_107:
   \   00000000   0x54 0x49          DC8 "TI SYNTAX ERROR: Not correct format.\015\012"
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x63    
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_108:
   \   00000000   0x54 0x49          DC8 "TIS SYNTAX ERROR: Not correct format.\015\012"
   \              0x53 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x4E 0x6F    
   \              0x74 0x20    
   \              0x63 0x6F    
   \              0x72 0x72    
   \              0x65 0x63    
   \              0x74 0x20    
   \              0x66 0x6F    
   \              0x72 0x6D    
   \              0x61 0x74    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_109:
   \   00000000   0x54 0x49          DC8 "TIS SYNTAX ERROR: Address not HEX Value.\015\012"
   \              0x53 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x41 0x64    
   \              0x64 0x72    
   \              0x65 0x73    
   \              0x73 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x48 0x45    
   \              0x58 0x20    
   \              0x56 0x61    
   \              0x6C 0x75    
   \              0x65 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_110:
   \   00000000   0x54 0x49          DC8 54H, 49H, 53H, 20H, 53H, 59H, 4EH, 54H
   \              0x53 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \   00000008   0x41 0x58          DC8 41H, 58H, 20H, 45H, 52H, 52H, 4FH, 52H
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \   00000010   0x3A 0x20          DC8 3AH, 20H, 4EH, 75H, 6DH, 62H, 65H, 72H
   \              0x4E 0x75    
   \              0x6D 0x62    
   \              0x65 0x72    
   \   00000018   0x20 0x6F          DC8 20H, 6FH, 66H, 20H, 42H, 79H, 74H, 65H
   \              0x66 0x20    
   \              0x42 0x79    
   \              0x74 0x65    
   \   00000020   0x73 0x20          DC8 73H, 20H, 6EH, 6FH, 74H, 20H, 48H, 45H
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x48 0x45    
   \   00000028   0x58 0x20          DC8 58H, 20H, 56H, 61H, 6CH, 75H, 65H, 2EH
   \              0x56 0x61    
   \              0x6C 0x75    
   \              0x65 0x2E    
   \   00000030   0x0D 0x0A          DC8 0DH, 0AH, 0
   \              0x00         
   \   00000033   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_111:
   \   00000000   0x54 0x49          DC8 "TIS: GOOD CMD: %x.\015\012"
   \              0x53 0x3A    
   \              0x20 0x47    
   \              0x4F 0x4F    
   \              0x44 0x20    
   \              0x43 0x4D    
   \              0x44 0x3A    
   \              0x20 0x25    
   \              0x78 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_112:
   \   00000000   0x54 0x49          DC8 "TIS: GOOD CMD: %x."
   \              0x53 0x3A    
   \              0x20 0x47    
   \              0x4F 0x4F    
   \              0x44 0x20    
   \              0x43 0x4D    
   \              0x44 0x3A    
   \              0x20 0x25    
   \              0x78 0x2E    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \   00000000   0x25 0x78          DC8 "%x."
   \              0x2E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_114:
   \   00000000   0x54 0x49          DC8 "TIR SYNTAX ERROR: Not correct format.\015\012"
   \              0x52 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x4E 0x6F    
   \              0x74 0x20    
   \              0x63 0x6F    
   \              0x72 0x72    
   \              0x65 0x63    
   \              0x74 0x20    
   \              0x66 0x6F    
   \              0x72 0x6D    
   \              0x61 0x74    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_115:
   \   00000000   0x54 0x49          DC8 "TIR SYNTAX ERROR: Address not HEX Value.\015\012"
   \              0x52 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x41 0x64    
   \              0x64 0x72    
   \              0x65 0x73    
   \              0x73 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x48 0x45    
   \              0x58 0x20    
   \              0x56 0x61    
   \              0x6C 0x75    
   \              0x65 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_116:
   \   00000000   0x54 0x49          DC8 54H, 49H, 52H, 20H, 53H, 59H, 4EH, 54H
   \              0x52 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \   00000008   0x41 0x58          DC8 41H, 58H, 20H, 45H, 52H, 52H, 4FH, 52H
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \   00000010   0x3A 0x20          DC8 3AH, 20H, 4EH, 75H, 6DH, 62H, 65H, 72H
   \              0x4E 0x75    
   \              0x6D 0x62    
   \              0x65 0x72    
   \   00000018   0x20 0x6F          DC8 20H, 6FH, 66H, 20H, 42H, 79H, 74H, 65H
   \              0x66 0x20    
   \              0x42 0x79    
   \              0x74 0x65    
   \   00000020   0x73 0x20          DC8 73H, 20H, 6EH, 6FH, 74H, 20H, 48H, 45H
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x48 0x45    
   \   00000028   0x58 0x20          DC8 58H, 20H, 56H, 61H, 6CH, 75H, 65H, 2EH
   \              0x56 0x61    
   \              0x6C 0x75    
   \              0x65 0x2E    
   \   00000030   0x0D 0x0A          DC8 0DH, 0AH, 0
   \              0x00         
   \   00000033   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_117:
   \   00000000   0x54 0x49          DC8 54H, 49H, 52H, 20H, 53H, 59H, 4EH, 54H
   \              0x52 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \   00000008   0x41 0x58          DC8 41H, 58H, 20H, 45H, 52H, 52H, 4FH, 52H
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \   00000010   0x3A 0x20          DC8 3AH, 20H, 4EH, 75H, 6DH, 62H, 65H, 72H
   \              0x4E 0x75    
   \              0x6D 0x62    
   \              0x65 0x72    
   \   00000018   0x20 0x6F          DC8 20H, 6FH, 66H, 20H, 42H, 79H, 74H, 65H
   \              0x66 0x20    
   \              0x42 0x79    
   \              0x74 0x65    
   \   00000020   0x73 0x20          DC8 73H, 20H, 52H, 45H, 43H, 45H, 49H, 56H
   \              0x52 0x45    
   \              0x43 0x45    
   \              0x49 0x56    
   \   00000028   0x45 0x44          DC8 45H, 44H, 20H, 6EH, 6FH, 74H, 20H, 48H
   \              0x20 0x6E    
   \              0x6F 0x74    
   \              0x20 0x48    
   \   00000030   0x45 0x58          DC8 45H, 58H, 20H, 56H, 61H, 6CH, 75H, 65H
   \              0x20 0x56    
   \              0x61 0x6C    
   \              0x75 0x65    
   \   00000038   0x2E 0x0D          DC8 2EH, 0DH, 0AH, 0
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_118:
   \   00000000   0x54 0x49          DC8 "TIR: GOOD CMD: %x.\015\012"
   \              0x52 0x3A    
   \              0x20 0x47    
   \              0x4F 0x4F    
   \              0x44 0x20    
   \              0x43 0x4D    
   \              0x44 0x3A    
   \              0x20 0x25    
   \              0x78 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_119:
   \   00000000   0x54 0x49          DC8 "TIR SYNTAX ERROR: Data not HEX Value.\015\012"
   \              0x52 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x44 0x61    
   \              0x74 0x61    
   \              0x20 0x6E    
   \              0x6F 0x74    
   \              0x20 0x48    
   \              0x45 0x58    
   \              0x20 0x56    
   \              0x61 0x6C    
   \              0x75 0x65    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_120:
   \   00000000   0x54 0x49          DC8 "TIR: GOOD CMD: %x."
   \              0x52 0x3A    
   \              0x20 0x47    
   \              0x4F 0x4F    
   \              0x44 0x20    
   \              0x43 0x4D    
   \              0x44 0x3A    
   \              0x20 0x25    
   \              0x78 0x2E    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_121:
   \   00000000   0x20 0x20          DC8 "     DATA: "
   \              0x20 0x20    
   \              0x20 0x44    
   \              0x41 0x54    
   \              0x41 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_122:
   \   00000000   0x54 0x49          DC8 "TIQ SYNTAX ERROR: Not correct format.\015\012"
   \              0x51 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x4E 0x6F    
   \              0x74 0x20    
   \              0x63 0x6F    
   \              0x72 0x72    
   \              0x65 0x63    
   \              0x74 0x20    
   \              0x66 0x6F    
   \              0x72 0x6D    
   \              0x61 0x74    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_123:
   \   00000000   0x54 0x49          DC8 "TIQ SYNTAX ERROR: Address not HEX Value.\015\012"
   \              0x51 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x41 0x64    
   \              0x64 0x72    
   \              0x65 0x73    
   \              0x73 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x48 0x45    
   \              0x58 0x20    
   \              0x56 0x61    
   \              0x6C 0x75    
   \              0x65 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_124:
   \   00000000   0x54 0x49          DC8 54H, 49H, 51H, 20H, 53H, 59H, 4EH, 54H
   \              0x51 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \   00000008   0x41 0x58          DC8 41H, 58H, 20H, 45H, 52H, 52H, 4FH, 52H
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \   00000010   0x3A 0x20          DC8 3AH, 20H, 4EH, 75H, 6DH, 62H, 65H, 72H
   \              0x4E 0x75    
   \              0x6D 0x62    
   \              0x65 0x72    
   \   00000018   0x20 0x6F          DC8 20H, 6FH, 66H, 20H, 42H, 79H, 74H, 65H
   \              0x66 0x20    
   \              0x42 0x79    
   \              0x74 0x65    
   \   00000020   0x73 0x20          DC8 73H, 20H, 6EH, 6FH, 74H, 20H, 48H, 45H
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x48 0x45    
   \   00000028   0x58 0x20          DC8 58H, 20H, 56H, 61H, 6CH, 75H, 65H, 2EH
   \              0x56 0x61    
   \              0x6C 0x75    
   \              0x65 0x2E    
   \   00000030   0x0D 0x0A          DC8 0DH, 0AH, 0
   \              0x00         
   \   00000033   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_125:
   \   00000000   0x3C 0x53          DC8 3CH, 53H, 54H, 41H, 54H, 55H, 53H, 3EH
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \   00000008   0x25 0x73          DC8 25H, 73H, 2FH, 2FH, 25H, 73H, 2FH, 2FH
   \              0x2F 0x2F    
   \              0x25 0x73    
   \              0x2F 0x2F    
   \   00000010   0x25 0x73          DC8 25H, 73H, 2FH, 2FH, 25H, 73H, 2FH, 2FH
   \              0x2F 0x2F    
   \              0x25 0x73    
   \              0x2F 0x2F    
   \   00000018   0x25 0x73          DC8 25H, 73H, 2FH, 2FH, 25H, 73H, 2FH, 2FH
   \              0x2F 0x2F    
   \              0x25 0x73    
   \              0x2F 0x2F    
   \   00000020   0x25 0x73          DC8 25H, 73H, 2FH, 2FH, 25H, 73H, 2FH, 2FH
   \              0x2F 0x2F    
   \              0x25 0x73    
   \              0x2F 0x2F    
   \   00000028   0x25 0x73          DC8 25H, 73H, 2FH, 2FH, 25H, 73H, 2FH, 2FH
   \              0x2F 0x2F    
   \              0x25 0x73    
   \              0x2F 0x2F    
   \   00000030   0x25 0x73          DC8 25H, 73H, 2FH, 2FH, 25H, 73H, 3CH, 2FH
   \              0x2F 0x2F    
   \              0x25 0x73    
   \              0x3C 0x2F    
   \   00000038   0x53 0x54          DC8 53H, 54H, 41H, 54H, 55H, 53H, 3EH, 0
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_126:
   \   00000000   0x25 0x73          DC8 "%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\015\012"
   \              0x2C 0x25    
   \              0x73 0x2C    
   \              0x25 0x73    
   \              0x2C 0x25    
   \              0x73 0x2C    
   \              0x25 0x73    
   \              0x2C 0x25    
   \              0x73 0x2C    
   \              0x25 0x73    
   \              0x2C 0x25    
   \              0x73 0x2C    
   \              0x25 0x73    
   \              0x2C 0x25    
   \              0x73 0x2C    
   \              0x25 0x73    
   \              0x2C 0x25    
   \              0x73 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_127:
   \   00000000   0x43 0x4F          DC8 "COMPLETE"
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_128:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TC_HWERR_PRESSUE</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x5F 0x48    
   \              0x57 0x45    
   \              0x52 0x52    
   \              0x5F 0x50    
   \              0x52 0x45    
   \              0x53 0x53    
   \              0x55 0x45    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_129:
   \   00000000   0x50 0x72          DC8 "Pressure TASKING ERROR!"
   \              0x65 0x73    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x20 0x54    
   \              0x41 0x53    
   \              0x4B 0x49    
   \              0x4E 0x47    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x21 0x00    

   \                                 In section .rodata, align 4
   \                     ?_130:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TC_HWERR_HUMIDITY</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x5F 0x48    
   \              0x57 0x45    
   \              0x52 0x52    
   \              0x5F 0x48    
   \              0x55 0x4D    
   \              0x49 0x44    
   \              0x49 0x54    
   \              0x59 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_131:
   \   00000000   0x48 0x75          DC8 "Humidity TASKING ERROR!"
   \              0x6D 0x69    
   \              0x64 0x69    
   \              0x74 0x79    
   \              0x20 0x54    
   \              0x41 0x53    
   \              0x4B 0x49    
   \              0x4E 0x47    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x21 0x00    

   \                                 In section .rodata, align 4
   \                     ?_132:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TC_HWERR_TEMPERATURE</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x5F 0x48    
   \              0x57 0x45    
   \              0x52 0x52    
   \              0x5F 0x54    
   \              0x45 0x4D    
   \              0x50 0x45    
   \              0x52 0x41    
   \              0x54 0x55    
   \              0x52 0x45    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000002A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_133:
   \   00000000   0x41 0x4D          DC8 "AMBIENT TEMPERATURE TASKING ERROR!"
   \              0x42 0x49    
   \              0x45 0x4E    
   \              0x54 0x20    
   \              0x54 0x45    
   \              0x4D 0x50    
   \              0x45 0x52    
   \              0x41 0x54    
   \              0x55 0x52    
   \              0x45 0x20    
   \              0x54 0x41    
   \              0x53 0x4B    
   \              0x49 0x4E    
   \              0x47 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x21    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_134:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TC_HWERR_IRTEMP</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x5F 0x48    
   \              0x57 0x45    
   \              0x52 0x52    
   \              0x5F 0x49    
   \              0x52 0x54    
   \              0x45 0x4D    
   \              0x50 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_135:
   \   00000000   0x47 0x52          DC8 "GRID EYE/COOL EYE TASKING ERROR!"
   \              0x49 0x44    
   \              0x20 0x45    
   \              0x59 0x45    
   \              0x2F 0x43    
   \              0x4F 0x4F    
   \              0x4C 0x20    
   \              0x45 0x59    
   \              0x45 0x20    
   \              0x54 0x41    
   \              0x53 0x4B    
   \              0x49 0x4E    
   \              0x47 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x21    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_136:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TCS_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x53 0x5F    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_137:
   \   00000000   0x54 0x43          DC8 "TCS SYNTAX ERROR: Not correct format.\015\012"
   \              0x53 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x4E 0x6F    
   \              0x74 0x20    
   \              0x63 0x6F    
   \              0x72 0x72    
   \              0x65 0x63    
   \              0x74 0x20    
   \              0x66 0x6F    
   \              0x72 0x6D    
   \              0x61 0x74    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_138:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TCS_BADPARAM</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x53 0x5F    
   \              0x42 0x41    
   \              0x44 0x50    
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_139:
   \   00000000   0x54 0x43          DC8 "TCS SYNTAX ERROR: Bad Parameter.\015\012"
   \              0x53 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x42 0x61    
   \              0x64 0x20    
   \              0x50 0x61    
   \              0x72 0x61    
   \              0x6D 0x65    
   \              0x74 0x65    
   \              0x72 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_140:
   \   00000000   0x25 0x73          DC8 "%s %f %f"
   \              0x20 0x25    
   \              0x66 0x20    
   \              0x25 0x66    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_141:
   \   00000000   0x50 0x61          DC8 "Parms: %s, %f, %f.\015\012"
   \              0x72 0x6D    
   \              0x73 0x3A    
   \              0x20 0x25    
   \              0x73 0x2C    
   \              0x20 0x25    
   \              0x66 0x2C    
   \              0x20 0x25    
   \              0x66 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_142:
   \   00000000   0x30 0x30          DC8 "0002"
   \              0x30 0x32    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_143:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_SHNT_VLTG</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x53    
   \              0x48 0x4E    
   \              0x54 0x5F    
   \              0x56 0x4C    
   \              0x54 0x47    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_144:
   \   00000000   0x53 0x68          DC8 "Shnt_Vltg Set COMPLETE.\015\012"
   \              0x6E 0x74    
   \              0x5F 0x56    
   \              0x6C 0x74    
   \              0x67 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_145:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_SHNT_VLTG_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x53    
   \              0x48 0x4E    
   \              0x54 0x5F    
   \              0x56 0x4C    
   \              0x54 0x47    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_146:
   \   00000000   0x54 0x43          DC8 "TCS SET ERROR: FAILED.\015\012"
   \              0x53 0x20    
   \              0x53 0x45    
   \              0x54 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x46    
   \              0x41 0x49    
   \              0x4C 0x45    
   \              0x44 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_147:
   \   00000000   0x30 0x30          DC8 "0004"
   \              0x30 0x34    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_148:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_CURRENT</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x43    
   \              0x55 0x52    
   \              0x52 0x45    
   \              0x4E 0x54    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_149:
   \   00000000   0x43 0x75          DC8 "Current Set COMPLETE."
   \              0x72 0x72    
   \              0x65 0x6E    
   \              0x74 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_150:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_CURRENT_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x43    
   \              0x55 0x52    
   \              0x52 0x45    
   \              0x4E 0x54    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_151:
   \   00000000   0x30 0x30          DC8 "0006"
   \              0x30 0x36    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_152:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_POWER</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x50    
   \              0x4F 0x57    
   \              0x45 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_153:
   \   00000000   0x50 0x6F          DC8 "Power Set COMPLETE."
   \              0x77 0x65    
   \              0x72 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_154:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_POWER_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x50    
   \              0x4F 0x57    
   \              0x45 0x52    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_155:
   \   00000000   0x30 0x30          DC8 "0008"
   \              0x30 0x38    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_156:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_VOLTAGE</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x56    
   \              0x4F 0x4C    
   \              0x54 0x41    
   \              0x47 0x45    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_157:
   \   00000000   0x56 0x6F          DC8 "Voltage Set COMPLETE."
   \              0x6C 0x74    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_158:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_VOLTAGE_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x56    
   \              0x4F 0x4C    
   \              0x54 0x41    
   \              0x47 0x45    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_159:
   \   00000000   0x30 0x30          DC8 "000A"
   \              0x30 0x41    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_160:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_TEMPC</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x54    
   \              0x45 0x4D    
   \              0x50 0x43    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_161:
   \   00000000   0x54 0x65          DC8 "TempC Set COMPLETE."
   \              0x6D 0x70    
   \              0x43 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_162:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_TEMPC_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x54    
   \              0x45 0x4D    
   \              0x50 0x43    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_163:
   \   00000000   0x30 0x30          DC8 "000B"
   \              0x30 0x42    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_164:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_TEMPF</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x54    
   \              0x45 0x4D    
   \              0x50 0x46    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_165:
   \   00000000   0x54 0x65          DC8 "TempF Set COMPLETE."
   \              0x6D 0x70    
   \              0x46 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_166:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_TEMPF_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x54    
   \              0x45 0x4D    
   \              0x50 0x46    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_167:
   \   00000000   0x30 0x30          DC8 "0011"
   \              0x31 0x31    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_168:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_PRESSURE</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x50    
   \              0x52 0x45    
   \              0x53 0x53    
   \              0x55 0x52    
   \              0x45 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_169:
   \   00000000   0x50 0x72          DC8 "Pressure Set COMPLETE."
   \              0x65 0x73    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_170:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_PRESSURE_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x50    
   \              0x52 0x45    
   \              0x53 0x53    
   \              0x55 0x52    
   \              0x45 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_171:
   \   00000000   0x30 0x30          DC8 "0030"
   \              0x33 0x30    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_172:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_HUMIDITY</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x48    
   \              0x55 0x4D    
   \              0x49 0x44    
   \              0x49 0x54    
   \              0x59 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_173:
   \   00000000   0x48 0x75          DC8 "Humidity Set COMPLETE."
   \              0x6D 0x69    
   \              0x64 0x69    
   \              0x74 0x79    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_174:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_HUMIDITY_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x48    
   \              0x55 0x4D    
   \              0x49 0x44    
   \              0x49 0x54    
   \              0x59 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_175:
   \   00000000   0x30 0x30          DC8 "0032"
   \              0x33 0x32    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_176:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_HUM_TEMPC</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x48    
   \              0x55 0x4D    
   \              0x5F 0x54    
   \              0x45 0x4D    
   \              0x50 0x43    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_177:
   \   00000000   0x48 0x75          DC8 "Hum_TempC Set COMPLETE."
   \              0x6D 0x5F    
   \              0x54 0x65    
   \              0x6D 0x70    
   \              0x43 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_178:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_HUM_TEMPC_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x48    
   \              0x55 0x4D    
   \              0x5F 0x54    
   \              0x45 0x4D    
   \              0x50 0x43    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_179:
   \   00000000   0x30 0x30          DC8 "0033"
   \              0x33 0x33    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_180:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_HUM_TEMPF</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x48    
   \              0x55 0x4D    
   \              0x5F 0x54    
   \              0x45 0x4D    
   \              0x50 0x46    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_181:
   \   00000000   0x48 0x75          DC8 "Hum_TempF Set COMPLETE."
   \              0x6D 0x5F    
   \              0x54 0x65    
   \              0x6D 0x70    
   \              0x46 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_182:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_HUM_TEMPF_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x48    
   \              0x55 0x4D    
   \              0x5F 0x54    
   \              0x45 0x4D    
   \              0x50 0x46    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_183:
   \   00000000   0x30 0x30          DC8 "000D"
   \              0x30 0x44    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_184:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_RGB_RED</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x47 0x42    
   \              0x5F 0x52    
   \              0x45 0x44    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_185:
   \   00000000   0x52 0x47          DC8 "RGB_Red Set COMPLETE."
   \              0x42 0x5F    
   \              0x52 0x65    
   \              0x64 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_186:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_RGB_RED_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x47 0x42    
   \              0x5F 0x52    
   \              0x45 0x44    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_187:
   \   00000000   0x30 0x30          DC8 "000E"
   \              0x30 0x45    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_188:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_RGB_GREEN</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x47 0x42    
   \              0x5F 0x47    
   \              0x52 0x45    
   \              0x45 0x4E    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_189:
   \   00000000   0x52 0x47          DC8 "RGB_Green Set COMPLETE."
   \              0x42 0x5F    
   \              0x47 0x72    
   \              0x65 0x65    
   \              0x6E 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_190:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_RGB_GREEN_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x47 0x42    
   \              0x5F 0x47    
   \              0x52 0x45    
   \              0x45 0x4E    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_191:
   \   00000000   0x30 0x30          DC8 "000F"
   \              0x30 0x46    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_192:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_RGB_BLUE</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x47 0x42    
   \              0x5F 0x42    
   \              0x4C 0x55    
   \              0x45 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_193:
   \   00000000   0x52 0x47          DC8 "RGB_Blue Set COMPLETE."
   \              0x42 0x5F    
   \              0x42 0x6C    
   \              0x75 0x65    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_194:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_RGB_BLUE_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x47 0x42    
   \              0x5F 0x42    
   \              0x4C 0x55    
   \              0x45 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_195:
   \   00000000   0x30 0x30          DC8 "0017"
   \              0x31 0x37    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_196:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_THERM_C</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x54    
   \              0x48 0x45    
   \              0x52 0x4D    
   \              0x5F 0x43    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_197:
   \   00000000   0x54 0x68          DC8 "Therm_C Set COMPLETE."
   \              0x65 0x72    
   \              0x6D 0x5F    
   \              0x43 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_198:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_THERM_C_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x54    
   \              0x48 0x45    
   \              0x52 0x4D    
   \              0x5F 0x43    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_199:
   \   00000000   0x30 0x30          DC8 "0019"
   \              0x31 0x39    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_200:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_1C</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x31    
   \              0x43 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_201:
   \   00000000   0x52 0x6F          DC8 "RoadT_1C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x31 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_202:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_1C_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x31    
   \              0x43 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_203:
   \   00000000   0x30 0x30          DC8 "001B"
   \              0x31 0x42    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_204:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_2C</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x32    
   \              0x43 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_205:
   \   00000000   0x52 0x6F          DC8 "RoadT_2C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x32 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_206:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_2C_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x32    
   \              0x43 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_207:
   \   00000000   0x30 0x30          DC8 "001D"
   \              0x31 0x44    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_208:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_3C</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x33    
   \              0x43 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_209:
   \   00000000   0x52 0x6F          DC8 "RoadT_3C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x33 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_210:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_3C_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x33    
   \              0x43 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_211:
   \   00000000   0x30 0x30          DC8 "001F"
   \              0x31 0x46    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_212:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_4C</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x34    
   \              0x43 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_213:
   \   00000000   0x52 0x6F          DC8 "RoadT_4C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x34 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_214:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_4C_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x34    
   \              0x43 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_215:
   \   00000000   0x30 0x30          DC8 "0021"
   \              0x32 0x31    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_216:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_5C</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x35    
   \              0x43 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_217:
   \   00000000   0x52 0x6F          DC8 "RoadT_5C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x35 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_218:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_5C_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x35    
   \              0x43 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_219:
   \   00000000   0x30 0x30          DC8 "0023"
   \              0x32 0x33    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_220:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_6C</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x36    
   \              0x43 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_221:
   \   00000000   0x52 0x6F          DC8 "RoadT_6C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x36 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_222:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_6C_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x36    
   \              0x43 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_223:
   \   00000000   0x30 0x30          DC8 "0025"
   \              0x32 0x35    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_224:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_7C</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x37    
   \              0x43 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_225:
   \   00000000   0x52 0x6F          DC8 "RoadT_7C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x37 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_226:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_7C_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x37    
   \              0x43 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_227:
   \   00000000   0x30 0x30          DC8 "0027"
   \              0x32 0x37    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_228:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_8C</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x38    
   \              0x43 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_229:
   \   00000000   0x52 0x6F          DC8 "RoadT_8C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x38 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_230:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_8C_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x38    
   \              0x43 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_231:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TCS_BADUUID</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x53 0x5F    
   \              0x42 0x41    
   \              0x44 0x55    
   \              0x55 0x49    
   \              0x44 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_232:
   \   00000000   0x54 0x43          DC8 "TCS SYNTAX ERROR: Bad UUID.\015\012"
   \              0x53 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x42 0x61    
   \              0x64 0x20    
   \              0x55 0x55    
   \              0x49 0x44    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_233:
   \   00000000   0x54 0x43          DC8 "TCS SYNTAX ERROR: Wrong Number of Parameters.\015\012"
   \              0x53 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x57 0x72    
   \              0x6F 0x6E    
   \              0x67 0x20    
   \              0x4E 0x75    
   \              0x6D 0x62    
   \              0x65 0x72    
   \              0x20 0x6F    
   \              0x66 0x20    
   \              0x50 0x61    
   \              0x72 0x61    
   \              0x6D 0x65    
   \              0x74 0x65    
   \              0x72 0x73    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_234:
   \   00000000   0x3C 0x53          DC8 "<STATUS>TCR:%s\\"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x54 0x43    
   \              0x52 0x3A    
   \              0x25 0x73    
   \              0x5C 0x00    

   \                                 In section .rodata, align 4
   \                     ?_235:
   \   00000000   0x43 0x41          DC8 "CALIBRATION DATA\015\012Date: %s\015\012"
   \              0x4C 0x49    
   \              0x42 0x52    
   \              0x41 0x54    
   \              0x49 0x4F    
   \              0x4E 0x20    
   \              0x44 0x41    
   \              0x54 0x41    
   \              0x0D 0x0A    
   \              0x44 0x61    
   \              0x74 0x65    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_236:
   \   00000000   0x4E 0x61          DC8 "Name\t\t        UUID\t\tSlope\t\tOffset\015\012"
   \              0x6D 0x65    
   \              0x09 0x09    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x55 0x55    
   \              0x49 0x44    
   \              0x09 0x09    
   \              0x53 0x6C    
   \              0x6F 0x70    
   \              0x65 0x09    
   \              0x09 0x4F    
   \              0x66 0x66    
   \              0x73 0x65    
   \              0x74 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_237:
   \   00000000   0x25 0x73          DC8 "%s:0002//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x30    
   \              0x32 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_238:
   \   00000000   0x25 0x73          DC8 "%s\t0002\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x30    
   \              0x32 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_239:
   \   00000000   0x25 0x73          DC8 "%s:0004//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x30    
   \              0x34 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_240:
   \   00000000   0x25 0x73          DC8 "%s\t        0004\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x30    
   \              0x30 0x30    
   \              0x34 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_241:
   \   00000000   0x25 0x73          DC8 "%s:0006//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x30    
   \              0x36 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_242:
   \   00000000   0x25 0x73          DC8 "%s\t0006\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x30    
   \              0x36 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_243:
   \   00000000   0x25 0x73          DC8 "%s:0008//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x30    
   \              0x38 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_244:
   \   00000000   0x25 0x73          DC8 "%s\t        0008\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x30    
   \              0x30 0x30    
   \              0x38 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_245:
   \   00000000   0x25 0x73          DC8 "%s:000A//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x30    
   \              0x41 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_246:
   \   00000000   0x25 0x73          DC8 "%s\t000A\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x30    
   \              0x41 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_247:
   \   00000000   0x25 0x73          DC8 "%s:000B//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x30    
   \              0x42 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_248:
   \   00000000   0x25 0x73          DC8 "%s\t000B\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x30    
   \              0x42 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_249:
   \   00000000   0x25 0x73          DC8 "%s:0011//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x31    
   \              0x31 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_250:
   \   00000000   0x25 0x73          DC8 "%s\t0011\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x31    
   \              0x31 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_251:
   \   00000000   0x25 0x73          DC8 "%s:0030//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x33    
   \              0x30 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_252:
   \   00000000   0x25 0x73          DC8 "%s\t0030\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x33    
   \              0x30 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_253:
   \   00000000   0x25 0x73          DC8 "%s:0032//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x33    
   \              0x32 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_254:
   \   00000000   0x25 0x73          DC8 "%s\t0032\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x33    
   \              0x32 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_255:
   \   00000000   0x25 0x73          DC8 "%s:0033//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x33    
   \              0x33 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_256:
   \   00000000   0x25 0x73          DC8 "%s\t0033\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x33    
   \              0x33 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_257:
   \   00000000   0x25 0x73          DC8 "%s:000D//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x30    
   \              0x44 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_258:
   \   00000000   0x25 0x73          DC8 "%s\t        000D\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x30    
   \              0x30 0x30    
   \              0x44 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_259:
   \   00000000   0x25 0x73          DC8 "%s:000E//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x30    
   \              0x45 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_260:
   \   00000000   0x25 0x73          DC8 "%s\t000E\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x30    
   \              0x45 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_261:
   \   00000000   0x25 0x73          DC8 "%s:000F//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x30    
   \              0x46 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_262:
   \   00000000   0x25 0x73          DC8 "%s\t000F\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x30    
   \              0x46 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_263:
   \   00000000   0x25 0x73          DC8 "%s:0017//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x31    
   \              0x37 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_264:
   \   00000000   0x25 0x73          DC8 "%s\t        0017\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x30    
   \              0x30 0x31    
   \              0x37 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_265:
   \   00000000   0x25 0x73          DC8 "%s:0019//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x31    
   \              0x39 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_266:
   \   00000000   0x25 0x73          DC8 "%s\t0019\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x31    
   \              0x39 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_267:
   \   00000000   0x25 0x73          DC8 "%s:001B//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x31    
   \              0x42 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_268:
   \   00000000   0x25 0x73          DC8 "%s\t001B\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x31    
   \              0x42 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_269:
   \   00000000   0x25 0x73          DC8 "%s:001D//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x31    
   \              0x44 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_270:
   \   00000000   0x25 0x73          DC8 "%s\t001D\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x31    
   \              0x44 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_271:
   \   00000000   0x25 0x73          DC8 "%s:001F//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x31    
   \              0x46 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_272:
   \   00000000   0x25 0x73          DC8 "%s\t001F\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x31    
   \              0x46 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_273:
   \   00000000   0x25 0x73          DC8 "%s:0021//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x32    
   \              0x31 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_274:
   \   00000000   0x25 0x73          DC8 "%s\t0021\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x32    
   \              0x31 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_275:
   \   00000000   0x25 0x73          DC8 "%s:0023//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x32    
   \              0x33 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_276:
   \   00000000   0x25 0x73          DC8 "%s\t0023\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x32    
   \              0x33 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_277:
   \   00000000   0x25 0x73          DC8 "%s:0025//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x32    
   \              0x35 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_278:
   \   00000000   0x25 0x73          DC8 "%s\t0025\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x32    
   \              0x35 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_279:
   \   00000000   0x25 0x73          DC8 "%s:0027//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x32    
   \              0x37 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_280:
   \   00000000   0x25 0x73          DC8 "%s\t0027\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x32    
   \              0x37 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_281:
   \   00000000   0x0D 0x0A          DC8 "\015\012     COMPLETE.\015\012"
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_282:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TCT_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x54 0x5F    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_283:
   \   00000000   0x54 0x43          DC8 "TCT SYNTAX ERROR: Not correct format.\015\012"
   \              0x54 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x4E 0x6F    
   \              0x74 0x20    
   \              0x63 0x6F    
   \              0x72 0x72    
   \              0x65 0x63    
   \              0x74 0x20    
   \              0x66 0x6F    
   \              0x72 0x6D    
   \              0x61 0x74    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_284:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TCT_BADPARAM</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x54 0x5F    
   \              0x42 0x41    
   \              0x44 0x50    
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_285:
   \   00000000   0x54 0x43          DC8 "TCT SYNTAX ERROR: Bad Parameter.\015\012"
   \              0x54 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x42 0x61    
   \              0x64 0x20    
   \              0x50 0x61    
   \              0x72 0x61    
   \              0x6D 0x65    
   \              0x74 0x65    
   \              0x72 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_286:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TCT_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x54 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_287:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCT_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x54    
   \              0x5F 0x41    
   \              0x43 0x4B    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_288:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TCI_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x49 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_289:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCI_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x49    
   \              0x5F 0x41    
   \              0x43 0x4B    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_290:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_DRIVER:%04x</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x44    
   \              0x52 0x49    
   \              0x56 0x45    
   \              0x52 0x3A    
   \              0x25 0x30    
   \              0x34 0x78    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_291:
   \   00000000   0x44 0x72          DC8 "Driver Status: %04x\015\012"
   \              0x69 0x76    
   \              0x65 0x72    
   \              0x20 0x53    
   \              0x74 0x61    
   \              0x74 0x75    
   \              0x73 0x3A    
   \              0x20 0x25    
   \              0x30 0x34    
   \              0x78 0x0D    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_292:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_RESET_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x52    
   \              0x45 0x53    
   \              0x45 0x54    
   \              0x5F 0x41    
   \              0x43 0x4B    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_293:
   \   00000000   0x52 0x45          DC8 "RESET CALLED BUT NO RESPONSE!!\015\012"
   \              0x53 0x45    
   \              0x54 0x20    
   \              0x43 0x41    
   \              0x4C 0x4C    
   \              0x45 0x44    
   \              0x20 0x42    
   \              0x55 0x54    
   \              0x20 0x4E    
   \              0x4F 0x20    
   \              0x52 0x45    
   \              0x53 0x50    
   \              0x4F 0x4E    
   \              0x53 0x45    
   \              0x21 0x21    
   \              0x0D 0x0A    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_294:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TK_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x5F 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_295:
   \   00000000   0x54 0x4B          DC8 "TK SYNTAX ERROR: Not correct format.\015\012"
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x63    
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_296:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKSR_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x53 0x52    
   \              0x5F 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_297:
   \   00000000   0x54 0x4B          DC8 "TKSR SYNTAX ERROR: Not correct format.\015\012"
   \              0x53 0x52    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x63    
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_298:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKSR_BADPARAM</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x53 0x52    
   \              0x5F 0x42    
   \              0x41 0x44    
   \              0x50 0x41    
   \              0x52 0x41    
   \              0x4D 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_299:
   \   00000000   0x54 0x4B          DC8 "TKSR SYNTAX ERROR: Bad Parameter.\015\012"
   \              0x53 0x52    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x61 0x64    
   \              0x20 0x50    
   \              0x61 0x72    
   \              0x61 0x6D    
   \              0x65 0x74    
   \              0x65 0x72    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_300:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TKSR_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x4B 0x53    
   \              0x52 0x5F    
   \              0x41 0x43    
   \              0x4B 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_301:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKSS_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x53 0x53    
   \              0x5F 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_302:
   \   00000000   0x54 0x4B          DC8 "TKSS SYNTAX ERROR: Not correct format.\015\012"
   \              0x53 0x53    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x63    
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_303:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKSS_BADPARAM</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x53 0x53    
   \              0x5F 0x42    
   \              0x41 0x44    
   \              0x50 0x41    
   \              0x52 0x41    
   \              0x4D 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_304:
   \   00000000   0x54 0x4B          DC8 "TKSS SYNTAX ERROR: Bad Parameter.\015\012"
   \              0x53 0x53    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x61 0x64    
   \              0x20 0x50    
   \              0x61 0x72    
   \              0x61 0x6D    
   \              0x65 0x74    
   \              0x65 0x72    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_305:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TKSS_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x4B 0x53    
   \              0x53 0x5F    
   \              0x41 0x43    
   \              0x4B 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_306:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKST_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x53 0x54    
   \              0x5F 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_307:
   \   00000000   0x54 0x4B          DC8 "TKST SYNTAX ERROR: Not correct format.\015\012"
   \              0x53 0x54    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x63    
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_308:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKST_BADPARAM</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x53 0x54    
   \              0x5F 0x42    
   \              0x41 0x44    
   \              0x50 0x41    
   \              0x52 0x41    
   \              0x4D 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_309:
   \   00000000   0x54 0x4B          DC8 "TKST SYNTAX ERROR: Bad Parameter.\015\012"
   \              0x53 0x54    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x61 0x64    
   \              0x20 0x50    
   \              0x61 0x72    
   \              0x61 0x6D    
   \              0x65 0x74    
   \              0x65 0x72    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_310:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TKST_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x4B 0x53    
   \              0x54 0x5F    
   \              0x41 0x43    
   \              0x4B 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_311:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKSB_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x53 0x42    
   \              0x5F 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_312:
   \   00000000   0x54 0x4B          DC8 "TKSB SYNTAX ERROR: Not correct format.\015\012"
   \              0x53 0x42    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x63    
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_313:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKSB_BADPARAM</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x53 0x42    
   \              0x5F 0x42    
   \              0x41 0x44    
   \              0x50 0x41    
   \              0x52 0x41    
   \              0x4D 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_314:
   \   00000000   0x54 0x4B          DC8 "TKSB SYNTAX ERROR: Bad Parameter.\015\012"
   \              0x53 0x42    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x61 0x64    
   \              0x20 0x50    
   \              0x61 0x72    
   \              0x61 0x6D    
   \              0x65 0x74    
   \              0x65 0x72    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_315:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TKSB_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x4B 0x53    
   \              0x42 0x5F    
   \              0x41 0x43    
   \              0x4B 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_316:
   \   00000000   0x54 0x4B          DC8 "TKS ERROR: Not a legal command.\015\012"
   \              0x53 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x61    
   \              0x20 0x6C    
   \              0x65 0x67    
   \              0x61 0x6C    
   \              0x20 0x63    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_317:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TKRR:%3.1f</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x4B 0x52    
   \              0x52 0x3A    
   \              0x25 0x33    
   \              0x2E 0x31    
   \              0x66 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_318:
   \   00000000   0x52 0x64          DC8 "RdSnd Sample Rate:  %3.1f Seconds.\015\012"
   \              0x53 0x6E    
   \              0x64 0x20    
   \              0x53 0x61    
   \              0x6D 0x70    
   \              0x6C 0x65    
   \              0x20 0x52    
   \              0x61 0x74    
   \              0x65 0x3A    
   \              0x20 0x20    
   \              0x25 0x33    
   \              0x2E 0x31    
   \              0x66 0x20    
   \              0x53 0x65    
   \              0x63 0x6F    
   \              0x6E 0x64    
   \              0x73 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_319:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TKRS:%3.1f</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x4B 0x52    
   \              0x53 0x3A    
   \              0x25 0x33    
   \              0x2E 0x31    
   \              0x66 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_320:
   \   00000000   0x53 0x65          DC8 "Sensor Sample Rate: %3.1f Seconds.\015\012\015\012> "
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \              0x61 0x6D    
   \              0x70 0x6C    
   \              0x65 0x20    
   \              0x52 0x61    
   \              0x74 0x65    
   \              0x3A 0x20    
   \              0x25 0x33    
   \              0x2E 0x31    
   \              0x66 0x20    
   \              0x53 0x65    
   \              0x63 0x6F    
   \              0x6E 0x64    
   \              0x73 0x2E    
   \              0x0D 0x0A    
   \              0x0D 0x0A    
   \              0x3E 0x20    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_321:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TKRT:%d</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x4B 0x52    
   \              0x54 0x3A    
   \              0x25 0x64    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_322:
   \   00000000   0x54 0x41          DC8 "TACK Limit: %d.\015\012\015\012> "
   \              0x43 0x4B    
   \              0x20 0x4C    
   \              0x69 0x6D    
   \              0x69 0x74    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x0D    
   \              0x0A 0x3E    
   \              0x20 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_323:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TKRB:%d</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x4B 0x52    
   \              0x42 0x3A    
   \              0x25 0x64    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_324:
   \   00000000   0x42 0x6F          DC8 "Boot Delay: %d Seconds.\015\012\015\012> "
   \              0x6F 0x74    
   \              0x20 0x44    
   \              0x65 0x6C    
   \              0x61 0x79    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x20 0x53    
   \              0x65 0x63    
   \              0x6F 0x6E    
   \              0x64 0x73    
   \              0x2E 0x0D    
   \              0x0A 0x0D    
   \              0x0A 0x3E    
   \              0x20 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_325:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKR_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x52 0x5F    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_326:
   \   00000000   0x54 0x4B          DC8 "TKR ERROR: Not a legal command.\015\012"
   \              0x52 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x61    
   \              0x20 0x6C    
   \              0x65 0x67    
   \              0x61 0x6C    
   \              0x20 0x63    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_327:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TU_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x55    
   \              0x5F 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_328:
   \   00000000   0x54 0x55          DC8 "TU SYNTAX ERROR: Not correct format.\015\012"
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x63    
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_329:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TUE_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x55 0x45    
   \              0x5F 0x41    
   \              0x43 0x4B    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_330:
   \   00000000   0x55 0x6E          DC8 "Units XML State CHANGED: ENABLED\015\012\015\012> "
   \              0x69 0x74    
   \              0x73 0x20    
   \              0x58 0x4D    
   \              0x4C 0x20    
   \              0x53 0x74    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x43 0x48    
   \              0x41 0x4E    
   \              0x47 0x45    
   \              0x44 0x3A    
   \              0x20 0x45    
   \              0x4E 0x41    
   \              0x42 0x4C    
   \              0x45 0x44    
   \              0x0D 0x0A    
   \              0x0D 0x0A    
   \              0x3E 0x20    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_331:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TUD_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x55 0x44    
   \              0x5F 0x41    
   \              0x43 0x4B    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_332:
   \   00000000   0x55 0x6E          DC8 "Units XML State CHANGED: DISABLED\015\012\015\012> "
   \              0x69 0x74    
   \              0x73 0x20    
   \              0x58 0x4D    
   \              0x4C 0x20    
   \              0x53 0x74    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x43 0x48    
   \              0x41 0x4E    
   \              0x47 0x45    
   \              0x44 0x3A    
   \              0x20 0x44    
   \              0x49 0x53    
   \              0x41 0x42    
   \              0x4C 0x45    
   \              0x44 0x0D    
   \              0x0A 0x0D    
   \              0x0A 0x3E    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_333:
   \   00000000   0x54 0x55          DC8 "TU SYNTAX ERROR: Not a legal command.\015\012"
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x61    
   \              0x20 0x6C    
   \              0x65 0x67    
   \              0x61 0x6C    
   \              0x20 0x63    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_334:
   \   00000000   0x42 0x47          DC8 "BGM111 MONITOR MODE.\015\012\015\012"
   \              0x4D 0x31    
   \              0x31 0x31    
   \              0x20 0x4D    
   \              0x4F 0x4E    
   \              0x49 0x54    
   \              0x4F 0x52    
   \              0x20 0x4D    
   \              0x4F 0x44    
   \              0x45 0x2E    
   \              0x0D 0x0A    
   \              0x0D 0x0A    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_335:
   \   00000000   0x55 0x73          DC8 "Use <ESC> to exit mode.\015\012\015\012"
   \              0x65 0x20    
   \              0x3C 0x45    
   \              0x53 0x43    
   \              0x3E 0x20    
   \              0x74 0x6F    
   \              0x20 0x65    
   \              0x78 0x69    
   \              0x74 0x20    
   \              0x6D 0x6F    
   \              0x64 0x65    
   \              0x2E 0x0D    
   \              0x0A 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_336:
   \   00000000   0x3C 0x53          DC8 "<STATUS>TF_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x54 0x46    
   \              0x5F 0x41    
   \              0x43 0x4B    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_337:
   \   00000000   0x46 0x6C          DC8 "Flash Frame Variables Reset to Factory Values.\015\012"
   \              0x61 0x73    
   \              0x68 0x20    
   \              0x46 0x72    
   \              0x61 0x6D    
   \              0x65 0x20    
   \              0x56 0x61    
   \              0x72 0x69    
   \              0x61 0x62    
   \              0x6C 0x65    
   \              0x73 0x20    
   \              0x52 0x65    
   \              0x73 0x65    
   \              0x74 0x20    
   \              0x74 0x6F    
   \              0x20 0x46    
   \              0x61 0x63    
   \              0x74 0x6F    
   \              0x72 0x79    
   \              0x20 0x56    
   \              0x61 0x6C    
   \              0x75 0x65    
   \              0x73 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000031   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_338:
   \   00000000   0x3C 0x53          DC8 "<STATUS>TL_ERROR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x54 0x4C    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_339:
   \   00000000   0x43 0x6F          DC8 "Code Locked for Programming!\015\012\015\012"
   \              0x64 0x65    
   \              0x20 0x4C    
   \              0x6F 0x63    
   \              0x6B 0x65    
   \              0x64 0x20    
   \              0x66 0x6F    
   \              0x72 0x20    
   \              0x50 0x72    
   \              0x6F 0x67    
   \              0x72 0x61    
   \              0x6D 0x6D    
   \              0x69 0x6E    
   \              0x67 0x21    
   \              0x0D 0x0A    
   \              0x0D 0x0A    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_340:
   \   00000000   0x20 0x20          DC8 "   HARD RESET NEEDED TO EXIT MODE\015\012"
   \              0x20 0x48    
   \              0x41 0x52    
   \              0x44 0x20    
   \              0x52 0x45    
   \              0x53 0x45    
   \              0x54 0x20    
   \              0x4E 0x45    
   \              0x45 0x44    
   \              0x45 0x44    
   \              0x20 0x54    
   \              0x4F 0x20    
   \              0x45 0x58    
   \              0x49 0x54    
   \              0x20 0x4D    
   \              0x4F 0x44    
   \              0x45 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_341:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_OTAMD_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x4F    
   \              0x54 0x41    
   \              0x4D 0x44    
   \              0x5F 0x41    
   \              0x43 0x4B    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_342:
   \   00000000   0x42 0x6F          DC8 "Boot Loader MONITOR MODE.\015\012\015\012"
   \              0x6F 0x74    
   \              0x20 0x4C    
   \              0x6F 0x61    
   \              0x64 0x65    
   \              0x72 0x20    
   \              0x4D 0x4F    
   \              0x4E 0x49    
   \              0x54 0x4F    
   \              0x52 0x20    
   \              0x4D 0x4F    
   \              0x44 0x45    
   \              0x2E 0x0D    
   \              0x0A 0x0D    
   \              0x0A 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_343:
   \   00000000   0x55 0x73          DC8 "Use <ESC> followed by <CR> to exit mode.\015\012\015\012"
   \              0x65 0x20    
   \              0x3C 0x45    
   \              0x53 0x43    
   \              0x3E 0x20    
   \              0x66 0x6F    
   \              0x6C 0x6C    
   \              0x6F 0x77    
   \              0x65 0x64    
   \              0x20 0x62    
   \              0x79 0x20    
   \              0x3C 0x43    
   \              0x52 0x3E    
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x65 0x78    
   \              0x69 0x74    
   \              0x20 0x6D    
   \              0x6F 0x64    
   \              0x65 0x2E    
   \              0x0D 0x0A    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_344:
   \   00000000   0x25 0x73          DC8 "%s %s"
   \              0x20 0x25    
   \              0x73 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_345:
   \   00000000   0x54 0x53          DC8 "TS: %s\015\012"
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_346:
   \   00000000   0x4E 0x4F          DC8 "NO ERROR FOUND.\015\012"
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x20 0x46    
   \              0x4F 0x55    
   \              0x4E 0x44    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_347:
   \   00000000   0x45 0x52          DC8 "ERROR: ILLEGAL S-Record.\015\012"
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x49    
   \              0x4C 0x4C    
   \              0x45 0x47    
   \              0x41 0x4C    
   \              0x20 0x53    
   \              0x2D 0x52    
   \              0x65 0x63    
   \              0x6F 0x72    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_348:
   \   00000000   0x45 0x52          DC8 "ERROR: ILLEGAL Record.\015\012"
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x49    
   \              0x4C 0x4C    
   \              0x45 0x47    
   \              0x41 0x4C    
   \              0x20 0x52    
   \              0x65 0x63    
   \              0x6F 0x72    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_349:
   \   00000000   0x45 0x52          DC8 "ERROR: Reserved S-Record Type.\015\012"
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x52    
   \              0x65 0x73    
   \              0x65 0x72    
   \              0x76 0x65    
   \              0x64 0x20    
   \              0x53 0x2D    
   \              0x52 0x65    
   \              0x63 0x6F    
   \              0x72 0x64    
   \              0x20 0x54    
   \              0x79 0x70    
   \              0x65 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_350:
   \   00000000   0x45 0x52          DC8 "ERROR: Illegal Byte Count.\015\012"
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x49    
   \              0x6C 0x6C    
   \              0x65 0x67    
   \              0x61 0x6C    
   \              0x20 0x42    
   \              0x79 0x74    
   \              0x65 0x20    
   \              0x43 0x6F    
   \              0x75 0x6E    
   \              0x74 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_351:
   \   00000000   0x45 0x52          DC8 "ERROR: Illegal Byte Data.\015\012"
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x49    
   \              0x6C 0x6C    
   \              0x65 0x67    
   \              0x61 0x6C    
   \              0x20 0x42    
   \              0x79 0x74    
   \              0x65 0x20    
   \              0x44 0x61    
   \              0x74 0x61    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_352:
   \   00000000   0x45 0x52          DC8 "ERROR: Checksum did not match data.\015\012"
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x43    
   \              0x68 0x65    
   \              0x63 0x6B    
   \              0x73 0x75    
   \              0x6D 0x20    
   \              0x64 0x69    
   \              0x64 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x6D 0x61    
   \              0x74 0x63    
   \              0x68 0x20    
   \              0x64 0x61    
   \              0x74 0x61    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_353:
   \   00000000   0x52 0x65          DC8 52H, 65H, 63H, 6FH, 72H, 64H, 20H, 54H
   \              0x63 0x6F    
   \              0x72 0x64    
   \              0x20 0x54    
   \   00000008   0x79 0x70          DC8 79H, 70H, 65H, 3AH, 20H, 53H, 30H, 5FH
   \              0x65 0x3A    
   \              0x20 0x53    
   \              0x30 0x5F    
   \   00000010   0x48 0x45          DC8 48H, 45H, 41H, 44H, 45H, 52H, 3AH, 20H
   \              0x41 0x44    
   \              0x45 0x52    
   \              0x3A 0x20    
   \   00000018   0x56 0x65          DC8 56H, 65H, 6EH, 64H, 6FH, 72H, 20H, 73H
   \              0x6E 0x64    
   \              0x6F 0x72    
   \              0x20 0x73    
   \   00000020   0x70 0x65          DC8 70H, 65H, 63H, 69H, 66H, 69H, 63H, 20H
   \              0x63 0x69    
   \              0x66 0x69    
   \              0x63 0x20    
   \   00000028   0x41 0x53          DC8 41H, 53H, 43H, 49H, 49H, 20H, 74H, 65H
   \              0x43 0x49    
   \              0x49 0x20    
   \              0x74 0x65    
   \   00000030   0x78 0x74          DC8 78H, 74H, 2EH, 0DH, 0AH, 0
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000036   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_354:
   \   00000000   0x52 0x65          DC8 52H, 65H, 63H, 6FH, 72H, 64H, 20H, 54H
   \              0x63 0x6F    
   \              0x72 0x64    
   \              0x20 0x54    
   \   00000008   0x79 0x70          DC8 79H, 70H, 65H, 3AH, 20H, 53H, 31H, 5FH
   \              0x65 0x3A    
   \              0x20 0x53    
   \              0x31 0x5F    
   \   00000010   0x44 0x41          DC8 44H, 41H, 54H, 41H, 3AH, 20H, 44H, 61H
   \              0x54 0x41    
   \              0x3A 0x20    
   \              0x44 0x61    
   \   00000018   0x74 0x61          DC8 74H, 61H, 20H, 74H, 68H, 61H, 74H, 20H
   \              0x20 0x74    
   \              0x68 0x61    
   \              0x74 0x20    
   \   00000020   0x73 0x74          DC8 73H, 74H, 61H, 72H, 74H, 73H, 20H, 61H
   \              0x61 0x72    
   \              0x74 0x73    
   \              0x20 0x61    
   \   00000028   0x74 0x20          DC8 74H, 20H, 74H, 68H, 65H, 20H, 31H, 36H
   \              0x74 0x68    
   \              0x65 0x20    
   \              0x31 0x36    
   \   00000030   0x2D 0x62          DC8 2DH, 62H, 69H, 74H, 20H, 61H, 64H, 64H
   \              0x69 0x74    
   \              0x20 0x61    
   \              0x64 0x64    
   \   00000038   0x72 0x65          DC8 72H, 65H, 73H, 73H, 20H, 66H, 69H, 65H
   \              0x73 0x73    
   \              0x20 0x66    
   \              0x69 0x65    
   \   00000040   0x6C 0x64          DC8 6CH, 64H, 2EH, 0DH, 0AH, 0
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000046   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_355:
   \   00000000   0x52 0x65          DC8 52H, 65H, 63H, 6FH, 72H, 64H, 20H, 54H
   \              0x63 0x6F    
   \              0x72 0x64    
   \              0x20 0x54    
   \   00000008   0x79 0x70          DC8 79H, 70H, 65H, 3AH, 20H, 53H, 32H, 5FH
   \              0x65 0x3A    
   \              0x20 0x53    
   \              0x32 0x5F    
   \   00000010   0x44 0x41          DC8 44H, 41H, 54H, 41H, 3AH, 20H, 44H, 61H
   \              0x54 0x41    
   \              0x3A 0x20    
   \              0x44 0x61    
   \   00000018   0x74 0x61          DC8 74H, 61H, 20H, 74H, 68H, 61H, 74H, 20H
   \              0x20 0x74    
   \              0x68 0x61    
   \              0x74 0x20    
   \   00000020   0x73 0x74          DC8 73H, 74H, 61H, 72H, 74H, 73H, 20H, 61H
   \              0x61 0x72    
   \              0x74 0x73    
   \              0x20 0x61    
   \   00000028   0x74 0x20          DC8 74H, 20H, 74H, 68H, 65H, 20H, 32H, 34H
   \              0x74 0x68    
   \              0x65 0x20    
   \              0x32 0x34    
   \   00000030   0x2D 0x62          DC8 2DH, 62H, 69H, 74H, 20H, 61H, 64H, 64H
   \              0x69 0x74    
   \              0x20 0x61    
   \              0x64 0x64    
   \   00000038   0x72 0x65          DC8 72H, 65H, 73H, 73H, 20H, 66H, 69H, 65H
   \              0x73 0x73    
   \              0x20 0x66    
   \              0x69 0x65    
   \   00000040   0x6C 0x64          DC8 6CH, 64H, 2EH, 0DH, 0AH, 0
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000046   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_356:
   \   00000000   0x52 0x65          DC8 52H, 65H, 63H, 6FH, 72H, 64H, 20H, 54H
   \              0x63 0x6F    
   \              0x72 0x64    
   \              0x20 0x54    
   \   00000008   0x79 0x70          DC8 79H, 70H, 65H, 3AH, 20H, 53H, 33H, 5FH
   \              0x65 0x3A    
   \              0x20 0x53    
   \              0x33 0x5F    
   \   00000010   0x44 0x41          DC8 44H, 41H, 54H, 41H, 3AH, 20H, 44H, 61H
   \              0x54 0x41    
   \              0x3A 0x20    
   \              0x44 0x61    
   \   00000018   0x74 0x61          DC8 74H, 61H, 20H, 74H, 68H, 61H, 74H, 20H
   \              0x20 0x74    
   \              0x68 0x61    
   \              0x74 0x20    
   \   00000020   0x73 0x74          DC8 73H, 74H, 61H, 72H, 74H, 73H, 20H, 61H
   \              0x61 0x72    
   \              0x74 0x73    
   \              0x20 0x61    
   \   00000028   0x74 0x20          DC8 74H, 20H, 74H, 68H, 65H, 20H, 33H, 32H
   \              0x74 0x68    
   \              0x65 0x20    
   \              0x33 0x32    
   \   00000030   0x2D 0x62          DC8 2DH, 62H, 69H, 74H, 20H, 61H, 64H, 64H
   \              0x69 0x74    
   \              0x20 0x61    
   \              0x64 0x64    
   \   00000038   0x72 0x65          DC8 72H, 65H, 73H, 73H, 20H, 66H, 69H, 65H
   \              0x73 0x73    
   \              0x20 0x66    
   \              0x69 0x65    
   \   00000040   0x6C 0x64          DC8 6CH, 64H, 2EH, 0DH, 0AH, 0
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000046   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_357:
   \   00000000   0x52 0x65          DC8 "Record Type: S4_RESERVED\015\012"
   \              0x63 0x6F    
   \              0x72 0x64    
   \              0x20 0x54    
   \              0x79 0x70    
   \              0x65 0x3A    
   \              0x20 0x53    
   \              0x34 0x5F    
   \              0x52 0x45    
   \              0x53 0x45    
   \              0x52 0x56    
   \              0x45 0x44    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_358:
   \   00000000   0x52 0x65          DC8 52H, 65H, 63H, 6FH, 72H, 64H, 20H, 54H
   \              0x63 0x6F    
   \              0x72 0x64    
   \              0x20 0x54    
   \   00000008   0x79 0x70          DC8 79H, 70H, 65H, 3AH, 20H, 53H, 35H, 5FH
   \              0x65 0x3A    
   \              0x20 0x53    
   \              0x35 0x5F    
   \   00000010   0x43 0x4F          DC8 43H, 4FH, 55H, 4EH, 54H, 3AH, 20H, 31H
   \              0x55 0x4E    
   \              0x54 0x3A    
   \              0x20 0x31    
   \   00000018   0x36 0x2D          DC8 36H, 2DH, 62H, 69H, 74H, 20H, 63H, 6FH
   \              0x62 0x69    
   \              0x74 0x20    
   \              0x63 0x6F    
   \   00000020   0x75 0x6E          DC8 75H, 6EH, 74H, 20H, 6FH, 66H, 20H, 53H
   \              0x74 0x20    
   \              0x6F 0x66    
   \              0x20 0x53    
   \   00000028   0x31 0x20          DC8 31H, 20H, 2FH, 20H, 53H, 32H, 20H, 2FH
   \              0x2F 0x20    
   \              0x53 0x32    
   \              0x20 0x2F    
   \   00000030   0x20 0x53          DC8 20H, 53H, 33H, 20H, 72H, 65H, 63H, 6FH
   \              0x33 0x20    
   \              0x72 0x65    
   \              0x63 0x6F    
   \   00000038   0x72 0x64          DC8 72H, 64H, 73H, 2EH, 0DH, 0AH, 0
   \              0x73 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000003F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_359:
   \   00000000   0x52 0x65          DC8 52H, 65H, 63H, 6FH, 72H, 64H, 20H, 54H
   \              0x63 0x6F    
   \              0x72 0x64    
   \              0x20 0x54    
   \   00000008   0x79 0x70          DC8 79H, 70H, 65H, 3AH, 20H, 53H, 36H, 5FH
   \              0x65 0x3A    
   \              0x20 0x53    
   \              0x36 0x5F    
   \   00000010   0x43 0x4F          DC8 43H, 4FH, 55H, 4EH, 54H, 3AH, 20H, 32H
   \              0x55 0x4E    
   \              0x54 0x3A    
   \              0x20 0x32    
   \   00000018   0x34 0x2D          DC8 34H, 2DH, 62H, 69H, 74H, 20H, 63H, 6FH
   \              0x62 0x69    
   \              0x74 0x20    
   \              0x63 0x6F    
   \   00000020   0x75 0x6E          DC8 75H, 6EH, 74H, 20H, 6FH, 66H, 20H, 53H
   \              0x74 0x20    
   \              0x6F 0x66    
   \              0x20 0x53    
   \   00000028   0x31 0x20          DC8 31H, 20H, 2FH, 20H, 53H, 32H, 20H, 2FH
   \              0x2F 0x20    
   \              0x53 0x32    
   \              0x20 0x2F    
   \   00000030   0x20 0x53          DC8 20H, 53H, 33H, 20H, 72H, 65H, 63H, 6FH
   \              0x33 0x20    
   \              0x72 0x65    
   \              0x63 0x6F    
   \   00000038   0x72 0x64          DC8 72H, 64H, 73H, 2EH, 0DH, 0AH, 0
   \              0x73 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000003F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_360:
   \   00000000   0x52 0x65          DC8 52H, 65H, 63H, 6FH, 72H, 64H, 20H, 54H
   \              0x63 0x6F    
   \              0x72 0x64    
   \              0x20 0x54    
   \   00000008   0x79 0x70          DC8 79H, 70H, 65H, 3AH, 20H, 53H, 37H, 5FH
   \              0x65 0x3A    
   \              0x20 0x53    
   \              0x37 0x5F    
   \   00000010   0x53 0x54          DC8 53H, 54H, 41H, 52H, 54H, 3AH, 20H, 53H
   \              0x41 0x52    
   \              0x54 0x3A    
   \              0x20 0x53    
   \   00000018   0x74 0x61          DC8 74H, 61H, 72H, 74H, 69H, 6EH, 67H, 20H
   \              0x72 0x74    
   \              0x69 0x6E    
   \              0x67 0x20    
   \   00000020   0x65 0x78          DC8 65H, 78H, 65H, 63H, 75H, 74H, 69H, 6FH
   \              0x65 0x63    
   \              0x75 0x74    
   \              0x69 0x6F    
   \   00000028   0x6E 0x20          DC8 6EH, 20H, 6CH, 6FH, 63H, 61H, 74H, 69H
   \              0x6C 0x6F    
   \              0x63 0x61    
   \              0x74 0x69    
   \   00000030   0x6F 0x6E          DC8 6FH, 6EH, 20H, 61H, 74H, 20H, 61H, 20H
   \              0x20 0x61    
   \              0x74 0x20    
   \              0x61 0x20    
   \   00000038   0x33 0x32          DC8 33H, 32H, 2DH, 62H, 69H, 74H, 20H, 61H
   \              0x2D 0x62    
   \              0x69 0x74    
   \              0x20 0x61    
   \   00000040   0x64 0x64          DC8 64H, 64H, 72H, 65H, 73H, 73H, 2EH, 0DH
   \              0x72 0x65    
   \              0x73 0x73    
   \              0x2E 0x0D    
   \   00000048   0x0A 0x00          DC8 0AH, 0
   \   0000004A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_361:
   \   00000000   0x52 0x65          DC8 52H, 65H, 63H, 6FH, 72H, 64H, 20H, 54H
   \              0x63 0x6F    
   \              0x72 0x64    
   \              0x20 0x54    
   \   00000008   0x79 0x70          DC8 79H, 70H, 65H, 3AH, 20H, 53H, 38H, 5FH
   \              0x65 0x3A    
   \              0x20 0x53    
   \              0x38 0x5F    
   \   00000010   0x53 0x54          DC8 53H, 54H, 41H, 52H, 54H, 3AH, 20H, 53H
   \              0x41 0x52    
   \              0x54 0x3A    
   \              0x20 0x53    
   \   00000018   0x74 0x61          DC8 74H, 61H, 72H, 74H, 69H, 6EH, 67H, 20H
   \              0x72 0x74    
   \              0x69 0x6E    
   \              0x67 0x20    
   \   00000020   0x65 0x78          DC8 65H, 78H, 65H, 63H, 75H, 74H, 69H, 6FH
   \              0x65 0x63    
   \              0x75 0x74    
   \              0x69 0x6F    
   \   00000028   0x6E 0x20          DC8 6EH, 20H, 6CH, 6FH, 63H, 61H, 74H, 69H
   \              0x6C 0x6F    
   \              0x63 0x61    
   \              0x74 0x69    
   \   00000030   0x6F 0x6E          DC8 6FH, 6EH, 20H, 61H, 74H, 20H, 61H, 20H
   \              0x20 0x61    
   \              0x74 0x20    
   \              0x61 0x20    
   \   00000038   0x32 0x34          DC8 32H, 34H, 2DH, 62H, 69H, 74H, 20H, 61H
   \              0x2D 0x62    
   \              0x69 0x74    
   \              0x20 0x61    
   \   00000040   0x64 0x64          DC8 64H, 64H, 72H, 65H, 73H, 73H, 2EH, 0DH
   \              0x72 0x65    
   \              0x73 0x73    
   \              0x2E 0x0D    
   \   00000048   0x0A 0x00          DC8 0AH, 0
   \   0000004A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_362:
   \   00000000   0x52 0x65          DC8 52H, 65H, 63H, 6FH, 72H, 64H, 20H, 54H
   \              0x63 0x6F    
   \              0x72 0x64    
   \              0x20 0x54    
   \   00000008   0x79 0x70          DC8 79H, 70H, 65H, 3AH, 20H, 53H, 39H, 5FH
   \              0x65 0x3A    
   \              0x20 0x53    
   \              0x39 0x5F    
   \   00000010   0x53 0x54          DC8 53H, 54H, 41H, 52H, 54H, 3AH, 20H, 53H
   \              0x41 0x52    
   \              0x54 0x3A    
   \              0x20 0x53    
   \   00000018   0x74 0x61          DC8 74H, 61H, 72H, 74H, 69H, 6EH, 67H, 20H
   \              0x72 0x74    
   \              0x69 0x6E    
   \              0x67 0x20    
   \   00000020   0x65 0x78          DC8 65H, 78H, 65H, 63H, 75H, 74H, 69H, 6FH
   \              0x65 0x63    
   \              0x75 0x74    
   \              0x69 0x6F    
   \   00000028   0x6E 0x20          DC8 6EH, 20H, 6CH, 6FH, 63H, 61H, 74H, 69H
   \              0x6C 0x6F    
   \              0x63 0x61    
   \              0x74 0x69    
   \   00000030   0x6F 0x6E          DC8 6FH, 6EH, 20H, 61H, 74H, 20H, 61H, 20H
   \              0x20 0x61    
   \              0x74 0x20    
   \              0x61 0x20    
   \   00000038   0x31 0x36          DC8 31H, 36H, 2DH, 62H, 69H, 74H, 20H, 61H
   \              0x2D 0x62    
   \              0x69 0x74    
   \              0x20 0x61    
   \   00000040   0x64 0x64          DC8 64H, 64H, 72H, 65H, 73H, 73H, 2EH, 0DH
   \              0x72 0x65    
   \              0x73 0x73    
   \              0x2E 0x0D    
   \   00000048   0x0A 0x00          DC8 0AH, 0
   \   0000004A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_363:
   \   00000000   0x52 0x65          DC8 "Record Type: UNKNOWN.\015\012"
   \              0x63 0x6F    
   \              0x72 0x64    
   \              0x20 0x54    
   \              0x79 0x70    
   \              0x65 0x3A    
   \              0x20 0x55    
   \              0x4E 0x4B    
   \              0x4E 0x4F    
   \              0x57 0x4E    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_364:
   \   00000000   0x42 0x79          DC8 "Byte Count: %08x\015\012"
   \              0x74 0x65    
   \              0x20 0x43    
   \              0x6F 0x75    
   \              0x6E 0x74    
   \              0x3A 0x20    
   \              0x25 0x30    
   \              0x38 0x78    
   \              0x0D 0x0A    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_365:
   \   00000000   0x41 0x64          DC8 "Address: %08x\015\012"
   \              0x64 0x72    
   \              0x65 0x73    
   \              0x73 0x3A    
   \              0x20 0x25    
   \              0x30 0x38    
   \              0x78 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_366:
   \   00000000   0x48 0x65          DC8 "Header: %s\015\012"
   \              0x61 0x64    
   \              0x65 0x72    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_367:
   \   00000000   0x25 0x30          DC8 "%02x "
   \              0x32 0x78    
   \              0x20 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_368:
   \   00000000   0x43 0x68          DC8 "Checksum: %02x\015\012"
   \              0x65 0x63    
   \              0x6B 0x73    
   \              0x75 0x6D    
   \              0x3A 0x20    
   \              0x25 0x30    
   \              0x32 0x78    
   \              0x0D 0x0A    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_369:
   \   00000000   0x54 0x53          DC8 "TS SYNTAX ERROR: Too many parameters.\015\012"
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x54    
   \              0x6F 0x6F    
   \              0x20 0x6D    
   \              0x61 0x6E    
   \              0x79 0x20    
   \              0x70 0x61    
   \              0x72 0x61    
   \              0x6D 0x65    
   \              0x74 0x65    
   \              0x72 0x73    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_370:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: BERR: Bus Error reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x45 0x52    
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x75 0x73    
   \              0x20 0x45    
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x20 0x72    
   \              0x65 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_371:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: ARLO: Arbitration lost reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x41    
   \              0x52 0x4C    
   \              0x4F 0x3A    
   \              0x20 0x41    
   \              0x72 0x62    
   \              0x69 0x74    
   \              0x72 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x6C    
   \              0x6F 0x73    
   \              0x74 0x20    
   \              0x72 0x65    
   \              0x70 0x6F    
   \              0x72 0x74    
   \              0x65 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   0000002E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_372:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: AF: Acknowledge failure reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x41    
   \              0x46 0x3A    
   \              0x20 0x41    
   \              0x63 0x6B    
   \              0x6E 0x6F    
   \              0x77 0x6C    
   \              0x65 0x64    
   \              0x67 0x65    
   \              0x20 0x66    
   \              0x61 0x69    
   \              0x6C 0x75    
   \              0x72 0x65    
   \              0x20 0x72    
   \              0x65 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_373:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: OVR: Overrun/Underrun reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4F    
   \              0x56 0x52    
   \              0x3A 0x20    
   \              0x4F 0x76    
   \              0x65 0x72    
   \              0x72 0x75    
   \              0x6E 0x2F    
   \              0x55 0x6E    
   \              0x64 0x65    
   \              0x72 0x72    
   \              0x75 0x6E    
   \              0x20 0x72    
   \              0x65 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_374:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: DMA: DMA Error reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x44    
   \              0x4D 0x41    
   \              0x3A 0x20    
   \              0x44 0x4D    
   \              0x41 0x20    
   \              0x45 0x72    
   \              0x72 0x6F    
   \              0x72 0x20    
   \              0x72 0x65    
   \              0x70 0x6F    
   \              0x72 0x74    
   \              0x65 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_375:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: TIMEOUT: Timeout Error reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x54    
   \              0x49 0x4D    
   \              0x45 0x4F    
   \              0x55 0x54    
   \              0x3A 0x20    
   \              0x54 0x69    
   \              0x6D 0x65    
   \              0x6F 0x75    
   \              0x74 0x20    
   \              0x45 0x72    
   \              0x72 0x6F    
   \              0x72 0x20    
   \              0x72 0x65    
   \              0x70 0x6F    
   \              0x72 0x74    
   \              0x65 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   0000002E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_376:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: Unknown Error reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x55    
   \              0x6E 0x6B    
   \              0x6E 0x6F    
   \              0x77 0x6E    
   \              0x20 0x45    
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x20 0x72    
   \              0x65 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_377:
   \   00000000   0x49 0x32          DC8 "I2C BUSY: I2C reported BUSY error.\015\012"
   \              0x43 0x20    
   \              0x42 0x55    
   \              0x53 0x59    
   \              0x3A 0x20    
   \              0x49 0x32    
   \              0x43 0x20    
   \              0x72 0x65    
   \              0x70 0x6F    
   \              0x72 0x74    
   \              0x65 0x64    
   \              0x20 0x42    
   \              0x55 0x53    
   \              0x59 0x20    
   \              0x65 0x72    
   \              0x72 0x6F    
   \              0x72 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_378:
   \   00000000   0x49 0x32          DC8 "I2C TIMEOUT: I2C reported TIMEOUT.\015\012"
   \              0x43 0x20    
   \              0x54 0x49    
   \              0x4D 0x45    
   \              0x4F 0x55    
   \              0x54 0x3A    
   \              0x20 0x49    
   \              0x32 0x43    
   \              0x20 0x72    
   \              0x65 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x20    
   \              0x54 0x49    
   \              0x4D 0x45    
   \              0x4F 0x55    
   \              0x54 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_379:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: I2C reported unnown error.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x49    
   \              0x32 0x43    
   \              0x20 0x72    
   \              0x65 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x20    
   \              0x75 0x6E    
   \              0x6E 0x6F    
   \              0x77 0x6E    
   \              0x20 0x65    
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_380:
   \   00000000   0x0D 0x0A          DC8 "\015\012\015\012> "
   \              0x0D 0x0A    
   \              0x3E 0x20    
   \              0x00         
   \   00000007   0x00               DC8 0
   4638          
   4639          /*void sleep(void) {
   4640          //    TimMasterHandle.Instance = TIM5;
   4641           
   4642              // Disable HAL tick interrupt
   4643          //    __HAL_TIM_DISABLE_IT(&TimMasterHandle, TIM_IT_CC2);
   4644           
   4645              // Request to enter SLEEP mode
   4646              HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
   4647           
   4648              // Enable HAL tick interrupt
   4649          //    __HAL_TIM_ENABLE_IT(&TimMasterHandle, TIM_IT_CC2);
   4650          }*/
   4651           
   4652          /*void deepsleep(void) {
   4653              // Request to enter STOP mode with regulator in low power mode
   4654              HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
   4655           
   4656              // After wake-up from STOP reconfigure the PLL
   4657              //SetSysClock();
   4658              SystemClock_Config();
   4659          }*/
   4660          
   4661          /************************ (C) COPYRIGHT WeatherCloud *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
    1368   RoadBrd_ParseString
      1368   -> BGM111_Transmit
      1368   -> Get_DriverStates
      1368   -> Get_DriverStatus
      1368   -> HAL_Delay
      1368   -> HAL_NVIC_SystemReset
      1368   -> MX_I2C1_Reset
      1368   -> Parse_srecord
      1368   -> RdBrd_CAL_GetStr
      1368   -> RoadBrdSnd_ClrBffrs
      1368   -> RoadBrdSnd_DumpBin0
      1368   -> RoadBrdSnd_DumpBin16
      1368   -> RoadBrdSnd_DumpBin32
      1368   -> RoadBrdSnd_DumpBin48
      1368   -> RoadBrdSnd_ProcessSound
      1368   -> RoadBrdSnd_getSaveBffr
      1368   -> RoadBrd_Baro_ReadPressure
      1368   -> RoadBrd_Baro_ReadPressure_Scaled
      1368   -> RoadBrd_Baro_ReadTemp
      1368   -> RoadBrd_CAL_GetOffset
      1368   -> RoadBrd_CAL_GetSlope
      1368   -> RoadBrd_CAL_GetTimeString
      1368   -> RoadBrd_CAL_InitializeFrmFlash
      1368   -> RoadBrd_CAL_Set_CalItem
      1368   -> RoadBrd_CAL_Set_TimeString
      1368   -> RoadBrd_CoolEye_ReadValues
      1368   -> RoadBrd_CoolEye_ReadValues_Scaled
      1368   -> RoadBrd_Get_BootDelay
      1368   -> RoadBrd_Get_RdSndTickCnt
      1368   -> RoadBrd_Get_SnsrTickCnt
      1368   -> RoadBrd_Get_TackLimit
      1368   -> RoadBrd_GridEyeInit
      1368   -> RoadBrd_GridEyeReset
      1368   -> RoadBrd_GridEye_ReadValues
      1368   -> RoadBrd_GridEye_ReadValues_Scaled
      1368   -> RoadBrd_HumidityInit
      1368   -> RoadBrd_Humidity_ReadHumidity
      1368   -> RoadBrd_Humidity_ReadHumidity_Scaled
      1368   -> RoadBrd_Humidity_ReadTemperature
      1368   -> RoadBrd_I2C_GetError
      1368   -> RoadBrd_I2C_Master_Receive
      1368   -> RoadBrd_I2C_Master_Transmit
      1368   -> RoadBrd_Init_Barometer
      1368   -> RoadBrd_Init_VMonitor
      1368   -> RoadBrd_RGBFullInit
      1368   -> RoadBrd_RGBInit
      1368   -> RoadBrd_RGBReadID
      1368   -> RoadBrd_RGBReadStatus
      1368   -> RoadBrd_RGBReadValues
      1368   -> RoadBrd_RGBReset
      1368   -> RoadBrd_ReadTemp
      1368   -> RoadBrd_ReadTemp_Scaled
      1368   -> RoadBrd_Set_BootDelay
      1368   -> RoadBrd_Set_RdSndTickCnt
      1368   -> RoadBrd_Set_SnsrTickCnt
      1368   -> RoadBrd_Set_TackLimit
      1368   -> RoadBrd_Set_UnitsFlag
      1368   -> RoadBrd_TestandRead_Barometer
      1368   -> RoadBrd_UART_Transmit
      1368   -> RoadBrd_VMonitor_RdCurrent
      1368   -> RoadBrd_VMonitor_RdCurrent_Scaled
      1368   -> RoadBrd_VMonitor_RdPower
      1368   -> RoadBrd_VMonitor_RdPower_Scaled
      1368   -> RoadBrd_VMonitor_RdShntVltg
      1368   -> RoadBrd_VMonitor_RdShntVltg_Scaled
      1368   -> RoadBrd_VMonitor_RdVoltage
      1368   -> RoadBrd_VMonitor_RdVoltage_Scaled
      1368   -> RoadBrd_WWDG_InitializeFrmFlash
      1368   -> RoadBrd_WaitForState
      1368   -> RoadBrd_gpio_Off
      1368   -> RoadBrd_gpio_On
      1368   -> Set_Boot_Bypass
      1368   -> __aeabi_f2d
      1368   -> __aeabi_fdiv
      1368   -> __aeabi_ui2f
      1368   -> atoi
      1368   -> hatoi
      1368   -> isHexNum
      1368   -> isdigit
      1368   -> sprintf
      1368   -> sscanf
      1368   -> strcat
      1368   -> strcpy
      1368   -> strlen
      1368   -> strncmp
       0   RoadBrd_ParserInit
       8   RoadBrd_ParserTsk
         8   -> strcpy
         8   -> strlen
       8   RoadBrd_ProcessParserTsk
         8   -> Parse_BootString
         8   -> RoadBrd_ParseString
         8   -> Tst_Boot_Bypass
       0   Tst_Bypass
      24   hatoi
        24   -> strlen
      24   isHexNum
        24   -> strlen


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_10
       4  ??DataTable3_11
       4  ??DataTable3_12
       4  ??DataTable3_13
       4  ??DataTable3_14
       4  ??DataTable3_15
       4  ??DataTable3_16
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable3_9
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_10
       4  ??DataTable4_11
       4  ??DataTable4_12
       4  ??DataTable4_13
       4  ??DataTable4_14
       4  ??DataTable4_15
       4  ??DataTable4_16
       4  ??DataTable4_17
       4  ??DataTable4_18
       4  ??DataTable4_19
       4  ??DataTable4_2
       4  ??DataTable4_20
       4  ??DataTable4_21
       4  ??DataTable4_22
       4  ??DataTable4_23
       4  ??DataTable4_24
       4  ??DataTable4_25
       4  ??DataTable4_26
       4  ??DataTable4_27
       4  ??DataTable4_28
       4  ??DataTable4_29
       4  ??DataTable4_3
       4  ??DataTable4_30
       4  ??DataTable4_31
       4  ??DataTable4_32
       4  ??DataTable4_33
       4  ??DataTable4_34
       4  ??DataTable4_35
       4  ??DataTable4_36
       4  ??DataTable4_37
       4  ??DataTable4_38
       4  ??DataTable4_39
       4  ??DataTable4_4
       4  ??DataTable4_40
       4  ??DataTable4_41
       4  ??DataTable4_42
       4  ??DataTable4_43
       4  ??DataTable4_44
       4  ??DataTable4_45
       4  ??DataTable4_46
       4  ??DataTable4_47
       4  ??DataTable4_48
       4  ??DataTable4_49
       4  ??DataTable4_5
       4  ??DataTable4_50
       4  ??DataTable4_51
       4  ??DataTable4_52
       4  ??DataTable4_53
       4  ??DataTable4_54
       4  ??DataTable4_55
       4  ??DataTable4_56
       4  ??DataTable4_57
       4  ??DataTable4_58
       4  ??DataTable4_59
       4  ??DataTable4_6
       4  ??DataTable4_60
       4  ??DataTable4_61
       4  ??DataTable4_62
       4  ??DataTable4_63
       4  ??DataTable4_64
       4  ??DataTable4_65
       4  ??DataTable4_66
       4  ??DataTable4_67
       4  ??DataTable4_68
       4  ??DataTable4_69
       4  ??DataTable4_7
       4  ??DataTable4_70
       4  ??DataTable4_71
       4  ??DataTable4_72
       4  ??DataTable4_73
       4  ??DataTable4_74
       4  ??DataTable4_75
       4  ??DataTable4_76
       4  ??DataTable4_77
       4  ??DataTable4_78
       4  ??DataTable4_79
       4  ??DataTable4_8
       4  ??DataTable4_80
       4  ??DataTable4_81
       4  ??DataTable4_9
      56  ?_0
      36  ?_1
      40  ?_10
       8  ?_100
      52  ?_101
      36  ?_102
      32  ?_103
      32  ?_104
      44  ?_105
      32  ?_106
      40  ?_107
      40  ?_108
      44  ?_109
      32  ?_11
      52  ?_110
      24  ?_111
      20  ?_112
       4  ?_113
      40  ?_114
      44  ?_115
      52  ?_116
      60  ?_117
      24  ?_118
      40  ?_119
      32  ?_12
      20  ?_120
      12  ?_121
      40  ?_122
      44  ?_123
      52  ?_124
      64  ?_125
      40  ?_126
      12  ?_127
      40  ?_128
      24  ?_129
      40  ?_13
      40  ?_130
      24  ?_131
      44  ?_132
      36  ?_133
      40  ?_134
      36  ?_135
      32  ?_136
      40  ?_137
      36  ?_138
      36  ?_139
      32  ?_14
      12  ?_140
      24  ?_141
       8  ?_142
      36  ?_143
      28  ?_144
      40  ?_145
      28  ?_146
       8  ?_147
      32  ?_148
      24  ?_149
      32  ?_15
      36  ?_150
       8  ?_151
      32  ?_152
      20  ?_153
      36  ?_154
       8  ?_155
      32  ?_156
      24  ?_157
      36  ?_158
       8  ?_159
      40  ?_16
      32  ?_160
      20  ?_161
      36  ?_162
       8  ?_163
      32  ?_164
      20  ?_165
      36  ?_166
       8  ?_167
      36  ?_168
      24  ?_169
      28  ?_17
      40  ?_170
       8  ?_171
      36  ?_172
      24  ?_173
      40  ?_174
       8  ?_175
      36  ?_176
      24  ?_177
      40  ?_178
       8  ?_179
       1  ?_18
      36  ?_180
      24  ?_181
      40  ?_182
       8  ?_183
      32  ?_184
      24  ?_185
      36  ?_186
       8  ?_187
      36  ?_188
      24  ?_189
       8  ?_19
      40  ?_190
       8  ?_191
      36  ?_192
      24  ?_193
      40  ?_194
       8  ?_195
      32  ?_196
      24  ?_197
      36  ?_198
       8  ?_199
      68  ?_2
      12  ?_20
      36  ?_200
      24  ?_201
      40  ?_202
       8  ?_203
      36  ?_204
      24  ?_205
      40  ?_206
       8  ?_207
      36  ?_208
      24  ?_209
      20  ?_21
      40  ?_210
       8  ?_211
      36  ?_212
      24  ?_213
      40  ?_214
       8  ?_215
      36  ?_216
      24  ?_217
      40  ?_218
       8  ?_219
      28  ?_22
      36  ?_220
      24  ?_221
      40  ?_222
       8  ?_223
      36  ?_224
      24  ?_225
      40  ?_226
       8  ?_227
      36  ?_228
      24  ?_229
      36  ?_23
      40  ?_230
      36  ?_231
      32  ?_232
      48  ?_233
      16  ?_234
      32  ?_235
      36  ?_236
      24  ?_237
      24  ?_238
      24  ?_239
      32  ?_24
      32  ?_240
      24  ?_241
      24  ?_242
      24  ?_243
      32  ?_244
      24  ?_245
      24  ?_246
      24  ?_247
      24  ?_248
      24  ?_249
      40  ?_25
      24  ?_250
      24  ?_251
      24  ?_252
      24  ?_253
      24  ?_254
      24  ?_255
      24  ?_256
      24  ?_257
      32  ?_258
      24  ?_259
      40  ?_26
      24  ?_260
      24  ?_261
      24  ?_262
      24  ?_263
      32  ?_264
      24  ?_265
      24  ?_266
      24  ?_267
      24  ?_268
      24  ?_269
      40  ?_27
      24  ?_270
      24  ?_271
      24  ?_272
      24  ?_273
      24  ?_274
      24  ?_275
      24  ?_276
      24  ?_277
      24  ?_278
      24  ?_279
      56  ?_28
      24  ?_280
      20  ?_281
      32  ?_282
      40  ?_283
      36  ?_284
      36  ?_285
      32  ?_286
      28  ?_287
      32  ?_288
      28  ?_289
      20  ?_29
      32  ?_290
      24  ?_291
      32  ?_292
      36  ?_293
      32  ?_294
      40  ?_295
      36  ?_296
      44  ?_297
      36  ?_298
      36  ?_299
      40  ?_3
      36  ?_30
      32  ?_300
      36  ?_301
      44  ?_302
      36  ?_303
      36  ?_304
      32  ?_305
      36  ?_306
      44  ?_307
      36  ?_308
      36  ?_309
      16  ?_31
      32  ?_310
      36  ?_311
      44  ?_312
      36  ?_313
      36  ?_314
      32  ?_315
      36  ?_316
      32  ?_317
      40  ?_318
      32  ?_319
      12  ?_32
      44  ?_320
      28  ?_321
      24  ?_322
      28  ?_323
      32  ?_324
      32  ?_325
      36  ?_326
      32  ?_327
      40  ?_328
      28  ?_329
      40  ?_33
      40  ?_330
      28  ?_331
      40  ?_332
      40  ?_333
      28  ?_334
      28  ?_335
      24  ?_336
      52  ?_337
      28  ?_338
      36  ?_339
      40  ?_34
      36  ?_340
      32  ?_341
      32  ?_342
      48  ?_343
       8  ?_344
      12  ?_345
      20  ?_346
      28  ?_347
      28  ?_348
      36  ?_349
      20  ?_35
      32  ?_350
      28  ?_351
      40  ?_352
      56  ?_353
      72  ?_354
      72  ?_355
      72  ?_356
      28  ?_357
      64  ?_358
      64  ?_359
      32  ?_36
      76  ?_360
      76  ?_361
      76  ?_362
      24  ?_363
      20  ?_364
      16  ?_365
      16  ?_366
       8  ?_367
      20  ?_368
      40  ?_369
      16  ?_37
      40  ?_370
      48  ?_371
      48  ?_372
      48  ?_373
      40  ?_374
      48  ?_375
      40  ?_376
      40  ?_377
      40  ?_378
      40  ?_379
      16  ?_38
       8  ?_380
      40  ?_39
      32  ?_4
      40  ?_40
      32  ?_41
      28  ?_42
      36  ?_43
      48  ?_44
      48  ?_45
      24  ?_46
      20  ?_47
      56  ?_48
      44  ?_49
      32  ?_5
      40  ?_50
      24  ?_51
      32  ?_52
      28  ?_53
      44  ?_54
      36  ?_55
      28  ?_56
      36  ?_57
      20  ?_58
      36  ?_59
       4  ?_6
      24  ?_60
      32  ?_61
      20  ?_62
      32  ?_63
      20  ?_64
      32  ?_65
      24  ?_66
      24  ?_67
      36  ?_68
      32  ?_69
      40  ?_7
      24  ?_70
      44  ?_71
      16  ?_72
      48  ?_73
      24  ?_74
      20  ?_75
      44  ?_76
      40  ?_77
      28  ?_78
      56  ?_79
      32  ?_8
      16  ?_80
      44  ?_81
      12  ?_82
      12  ?_83
      12  ?_84
      72  ?_85
      68  ?_86
      72  ?_87
      64  ?_88
      60  ?_89
      32  ?_9
      60  ?_90
      60  ?_91
      56  ?_92
      64  ?_93
      64  ?_94
      64  ?_95
      64  ?_96
      64  ?_97
      68  ?_98
      32  ?_99
       1  Bypass
      44  ParseString
   19460  RoadBrd_ParseString
      12  RoadBrd_ParserInit
      66  RoadBrd_ParserTsk
      60  RoadBrd_ProcessParserTsk
       6  Tst_Bypass
      88  hatoi
      74  isHexNum

 
     45 bytes in section .bss
 12 337 bytes in section .rodata
 20 166 bytes in section .text
 
 20 166 bytes of CODE  memory
 12 337 bytes of CONST memory
     45 bytes of DATA  memory

Errors: none
Warnings: none
