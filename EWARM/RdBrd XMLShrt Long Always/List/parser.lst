###############################################################################
#
# IAR ANSI C/C++ Compiler V7.60.2.11341/W32 for ARM       28/Sep/2017  08:54:28
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\parser.c
#    Command line =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\parser.c
#        -D USE_HAL_DRIVER -D STM32L152xE -D USE_STM32L1XX_NUCLEO -D ASCII -D
#        REV_L -D LONG_DELAY -D XML_SHRT -lCN
#        "D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\RdBrd
#        XMLShrt Long Always\List" -o
#        "D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\RdBrd
#        XMLShrt Long Always\Obj" --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_clustering --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.4\arm\INC\c\DLib_Config_Full.h" -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/STM32L1xx_HAL_Driver/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/STM32L1xx_HAL_Driver/Inc/Legacy\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/BSP/STM32L1xx_Nucleo\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/portable/IAR/ARM_CM3\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Core/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/CMSIS/Include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/CMSIS/Device/ST/STM32L1xx/Include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\..\Middlewares\Third_Party\BgLib\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.4\arm\CMSIS\Include\"
#    Locale       =  English_United States.1252
#    List file    =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\RdBrd
#        XMLShrt Long Always\List\parser.lst
#    Object file  =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\RdBrd
#        XMLShrt Long Always\Obj\parser.o
#
###############################################################################

D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\parser.c
      1          /**
      2            ******************************************************************************
      3            * File Name          : parser.c
      4            * Description        : This file provides code that parses the passed string and 
      5            *                      performs the requested operation. It then returns a string
      6            *                      hardware based on the LPS22HB chip.
      7            ******************************************************************************
      8            *
      9            * COPYRIGHT(c) 2016 WeatherCloud
     10            *
     11            * Redistribution and use in source and binary forms, with or without modification,
     12            * are permitted provided that the following conditions are met:
     13            *   1. Redistributions of source code must retain the above copyright notice,
     14            *      this list of conditions and the following disclaimer.
     15            *   2. Redistributions in binary form must reproduce the above copyright notice,
     16            *      this list of conditions and the following disclaimer in the documentation
     17            *      and/or other materials provided with the distribution.
     18            *   3. Neither the name of WeatherCloud nor the names of its contributors
     19            *      may be used to endorse or promote products derived from this software
     20            *      without specific prior written permission.
     21            *
     22            * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     23            * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     24            * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     25            * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
     26            * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     27            * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     28            * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
     29            * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
     30            * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
     31            * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     32            *
     33            ******************************************************************************
     34            */
     35          
     36          /* Includes ------------------------------------------------------------------*/
     37          #include "parser.h"
     38          #include "ErrorCodes.h"
     39          #include <ctype.h>
     40          #include <stdlib.h>
     41          #include "wwdg.h"
     42          #include "Calibration.h"
     43          
     44          // Enums
     45          typedef enum 
     46          {
     47            NOT_INIT = 0,
     48            AVAILABLE = 1,
     49            BUSY = 2
     50          } ParseTskFlg;
     51          

   \                                 In section .bss, align 1
     52          static bool Bypass = false;
   \                     Bypass:
   \   00000000                      DS8 1
     53          
     54          // Parser Structure for tasks.
     55          struct
     56          {
     57            char          tempBuffer[BUFFER_SIZE];
     58            ParseTskFlg   ParseFlg;

   \                                 In section .bss, align 4
     59          } static ParseString;
   \                     ParseString:
   \   00000000                      DS8 44
     60          
     61          /* Parser functions */
     62          
     63          /**
     64            * @brief  This routine initializes the Parse Task Structure.
     65            * @param  *tempBffr: String to be parsed.
     66            * @retval HAL_StatusTypeDef:     HAL_OK:       Tasking of block of data to UART success.
     67            */

   \                                 In section .text, align 2, keep-with-next
     68          HAL_StatusTypeDef RoadBrd_ParserInit( void )
     69          {
     70            ParseString.ParseFlg = AVAILABLE;
   \                     RoadBrd_ParserInit: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x....             LDR.N    R1,??DataTable2
   \   00000004   0xF881 0x0028      STRB     R0,[R1, #+40]
     71            return HAL_OK;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x4770             BX       LR               ;; return
     72          }
     73          
     74          /**
     75            * @brief  This routine handles the operation of setting up a Parse Event.
     76            * @param  *tempBffr: String to be parsed.
     77            * @retval HAL_StatusTypeDef:     HAL_OK:       Tasking of block of data to UART success.
     78            *                                HAL_ERROR:    Error found in Tasking or data passed.
     79            *                                HAL_BUSY:     UART is busy.
     80            *                                HAL_TIMEOUT:  UART timed out.
     81            */

   \                                 In section .text, align 2, keep-with-next
     82          HAL_StatusTypeDef RoadBrd_ParserTsk(char *tempBffr)
     83          {
   \                     RoadBrd_ParserTsk: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     84            // Test ParseFlg.
     85            if (ParseString.ParseFlg == BUSY)
   \   00000004   0x....             LDR.N    R0,??DataTable2
   \   00000006   0xF890 0x0028      LDRB     R0,[R0, #+40]
   \   0000000A   0x2802             CMP      R0,#+2
   \   0000000C   0xD101             BNE.N    ??RoadBrd_ParserTsk_0
     86              return HAL_BUSY;
   \   0000000E   0x2002             MOVS     R0,#+2
   \   00000010   0xE016             B.N      ??RoadBrd_ParserTsk_1
     87            else if (ParseString.ParseFlg == NOT_INIT)
   \                     ??RoadBrd_ParserTsk_0: (+1)
   \   00000012   0x....             LDR.N    R0,??DataTable2
   \   00000014   0xF890 0x0028      LDRB     R0,[R0, #+40]
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD101             BNE.N    ??RoadBrd_ParserTsk_2
     88              return HAL_ERROR;
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0xE00F             B.N      ??RoadBrd_ParserTsk_1
     89            // Next Lets make sure passed string is not too big.
     90          //  if (strlen((char *)tempBffr) >= BUFFER_SIZE)
     91            if (strlen(tempBffr) >= BUFFER_SIZE)
   \                     ??RoadBrd_ParserTsk_2: (+1)
   \   00000020   0x0020             MOVS     R0,R4
   \   00000022   0x.... 0x....      BL       strlen
   \   00000026   0x2828             CMP      R0,#+40
   \   00000028   0xD301             BCC.N    ??RoadBrd_ParserTsk_3
     92              return HAL_ERROR;
   \   0000002A   0x2001             MOVS     R0,#+1
   \   0000002C   0xE008             B.N      ??RoadBrd_ParserTsk_1
     93            // Copy String into Structure and set as busy.
     94          //  strcpy( (char *)ParseString.tempBuffer, (char *)tempBffr);
     95            strcpy( ParseString.tempBuffer, tempBffr);
   \                     ??RoadBrd_ParserTsk_3: (+1)
   \   0000002E   0x0021             MOVS     R1,R4
   \   00000030   0x....             LDR.N    R0,??DataTable2
   \   00000032   0x.... 0x....      BL       strcpy
     96            ParseString.ParseFlg = BUSY;
   \   00000036   0x2002             MOVS     R0,#+2
   \   00000038   0x....             LDR.N    R1,??DataTable2
   \   0000003A   0xF881 0x0028      STRB     R0,[R1, #+40]
     97            return HAL_OK;
   \   0000003E   0x2000             MOVS     R0,#+0
   \                     ??RoadBrd_ParserTsk_1: (+1)
   \   00000040   0xBD10             POP      {R4,PC}          ;; return
     98          }
     99          
    100          /**
    101            * @brief  This routine handles the operation of processing a Parse Event.
    102            * @param  *tempBffr: String to be parsed.
    103            * @retval HAL_StatusTypeDef:     HAL_OK:       Tasking of block of data to UART success.
    104            *                                HAL_ERROR:    Error found in Tasking or data passed.
    105            *                                HAL_BUSY:     UART is busy.
    106            *                                HAL_TIMEOUT:  UART timed out.
    107            */

   \                                 In section .text, align 2, keep-with-next
    108          HAL_StatusTypeDef RoadBrd_ProcessParserTsk( void )
    109          {
   \                     RoadBrd_ProcessParserTsk: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    110            HAL_StatusTypeDef Status;
    111          
    112            // Test ParseFlg and process.
    113            if (ParseString.ParseFlg == BUSY)
   \   00000002   0x....             LDR.N    R0,??DataTable2
   \   00000004   0xF890 0x0028      LDRB     R0,[R0, #+40]
   \   00000008   0x2802             CMP      R0,#+2
   \   0000000A   0xD10B             BNE.N    ??RoadBrd_ProcessParserTsk_0
    114            {
    115              Status = RoadBrd_ParseString(ParseString.tempBuffer, true);
   \   0000000C   0x2101             MOVS     R1,#+1
   \   0000000E   0x....             LDR.N    R0,??DataTable2
   \   00000010   0x.... 0x....      BL       RoadBrd_ParseString
   \   00000014   0x0004             MOVS     R4,R0
    116              ParseString.ParseFlg = AVAILABLE;
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0x....             LDR.N    R1,??DataTable2
   \   0000001A   0xF881 0x0028      STRB     R0,[R1, #+40]
    117              return Status;
   \   0000001E   0x0020             MOVS     R0,R4
   \   00000020   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000022   0xE000             B.N      ??RoadBrd_ProcessParserTsk_1
    118            }
    119            else
    120              return HAL_OK;
   \                     ??RoadBrd_ProcessParserTsk_0: (+1)
   \   00000024   0x2000             MOVS     R0,#+0
   \                     ??RoadBrd_ProcessParserTsk_1: (+1)
   \   00000026   0xBD10             POP      {R4,PC}          ;; return
    121          }
    122          
    123          
    124          /**
    125            * @brief  This routine parses the passed string and performs the passed operation
    126            * @param  *tempBffr: String to be parsed.
    127            * @retval HAL_StatusTypeDef:     HAL_OK:       Tasking of block of data to UART success.
    128            *                                HAL_ERROR:    Error found in Tasking or data passed.
    129            *                                HAL_BUSY:     UART is busy.
    130            *                                HAL_TIMEOUT:  UART timed out.
    131            */

   \                                 In section .text, align 4, keep-with-next
    132          HAL_StatusTypeDef RoadBrd_ParseString(char *tempBffr, bool BLE_Flag)
    133          {
   \                     RoadBrd_ParseString: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xF5AD 0x6D80      SUB      SP,SP,#+1024
   \   00000008   0xB097             SUB      SP,SP,#+92
   \   0000000A   0x0004             MOVS     R4,R0
   \   0000000C   0x000D             MOVS     R5,R1
    134          #ifdef TEST2
    135            #define RECEIVE_SZ      5
    136            uint8_t Size;
    137            uint8_t i2cData[80];
    138            uint8_t tempBffr3[10];
    139            char tempBffr2[5];
    140            int Loop_cnt;
    141            HAL_StatusTypeDef Status, Save_Status;
    142            int Address;
    143            int num_bytes;
    144            int num_bytes_received;
    145            int Error, x;
    146            char tempstr[20];
    147            char* tempPstr;
    148            int new_value, flag;
    149            float Temp_C, Temp_F, Shunt_V, Bus_V, Crrnt, Power;
    150            uint32_t Err_code;
    151          #else
    152            #ifdef TEST
    153              #define RECEIVE_SZ      5
    154            #else
    155              #define RECEIVE_SZ      30
    156              uint16_t DriverStatus;
    157              int8_t tempBffr2[120];
    158              int8_t tempBffr3[10];
    159              int8_t* BufferPntr;
    160              HAL_StatusTypeDef Status, Save_Status;
    161              uint8_t Size;
    162              int Address;
    163              int num_bytes;
    164              int num_bytes_received;
    165              uint8_t i2cData[80];
    166              int Error, x, y;
    167              Voltage VMeasure, VMeasureScaled;
    168              Current CMeasure, CMeasureScaled;
    169              Power PMeasure, PMeasureScaled;
    170              Temperature TMeasure, TMeasureScaled;
    171              Humidity HMeasure, HMeasureScaled;
    172              RGBInitialize RGBMeasure;
    173              RGBIdent IDMeasure;
    174              RGBStatus RGBSMeasure;
    175              RGBLight RGBValues;
    176              char uuid[10];
    177              float Scale, Offset;
    178          //    PRStatus PRMeasure;
    179              PRPressure PRPMeasure, PRPMeasureScaled;
    180              BinString RSFFTBins;
    181              GridEye     GridMeasure, GridMeasureScaled;
    182              uint32_t Err_code;
    183              uint8_t op_mode, ds_range, adc_rsl, sync, cmp_adjst, cmp_offst, int_assgn, int_persist, cnvrsn_int;
    184              int new_value, flag;
    185              char* tempPstr;
    186              char tempstr[20];
    187            #endif
    188          #endif
    189          
    190              Size = strlen((char *)tempBffr);
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0x.... 0x....      BL       strlen
   \   00000014   0x4680             MOV      R8,R0
    191              
    192              // Test Bypass. If set, then we are in streaming mode.
    193              if ( Bypass )
   \   00000016   0xF8DF 0x0DE8      LDR.W    R0,??RoadBrd_ParseString_0
   \   0000001A   0x7800             LDRB     R0,[R0, #+0]
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD01E             BEQ.N    ??RoadBrd_ParseString_1
    194              {
    195                if (tempBffr[0] == 0x1B)
   \   00000020   0x7820             LDRB     R0,[R4, #+0]
   \   00000022   0x281B             CMP      R0,#+27
   \   00000024   0xD115             BNE.N    ??RoadBrd_ParseString_2
    196                {
    197                  Bypass = false;
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0xF8DF 0x1DD4      LDR.W    R1,??RoadBrd_ParseString_0
   \   0000002C   0x7008             STRB     R0,[R1, #+0]
    198                  strcpy( (char *)tempBffr2, "\r\n\r\n T........TERMINATING MONITOR MODE.........\r\n\r\n> ");
   \   0000002E   0xF8DF 0x1DD4      LDR.W    R1,??RoadBrd_ParseString_0+0x4
   \   00000032   0xA80F             ADD      R0,SP,#+60
   \   00000034   0x.... 0x....      BL       strcpy
    199          #ifdef NUCLEO
    200                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    201          #else
    202                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000038   0xA90F             ADD      R1,SP,#+60
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000040   0x0006             MOVS     R6,R0
    203          #endif
    204                  if (Status != HAL_OK)
   \   00000042   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000044   0x2E00             CMP      R6,#+0
   \   00000046   0xF003 0x84A5      BEQ.W    ??RoadBrd_ParseString_3
    205                    return Status;
   \   0000004A   0x0030             MOVS     R0,R6
   \   0000004C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004E   0xF003 0xBCA3      B.W      ??RoadBrd_ParseString_4
    206                }
    207                else
    208                {
    209                  // Transmit Character to BGM111.
    210                  BGM111_Transmit(1, (uint8_t *)tempBffr);
   \                     ??RoadBrd_ParseString_2: (+1)
   \   00000052   0x0021             MOVS     R1,R4
   \   00000054   0x2001             MOVS     R0,#+1
   \   00000056   0x.... 0x....      BL       BGM111_Transmit
   \   0000005A   0xF003 0xBC9B      B.W      ??RoadBrd_ParseString_3
    211                }
    212              }// EndIf ( Bypass )
    213              else
    214              {
    215                // Normal Mode
    216              
    217                      // We have a good Tasking String. Time to determine action.
    218                      switch( tempBffr[0] )
   \                     ??RoadBrd_ParseString_1: (+1)
   \   0000005E   0x7820             LDRB     R0,[R4, #+0]
   \   00000060   0x2830             CMP      R0,#+48
   \   00000062   0xD02F             BEQ.N    ??RoadBrd_ParseString_5
   \   00000064   0x2831             CMP      R0,#+49
   \   00000066   0xD048             BEQ.N    ??RoadBrd_ParseString_6
   \   00000068   0x2832             CMP      R0,#+50
   \   0000006A   0xD079             BEQ.N    ??RoadBrd_ParseString_7
   \   0000006C   0x2833             CMP      R0,#+51
   \   0000006E   0xF000 0x80AA      BEQ.W    ??RoadBrd_ParseString_8
   \   00000072   0x2834             CMP      R0,#+52
   \   00000074   0xF000 0x80DA      BEQ.W    ??RoadBrd_ParseString_9
   \   00000078   0x2835             CMP      R0,#+53
   \   0000007A   0xF000 0x810A      BEQ.W    ??RoadBrd_ParseString_10
   \   0000007E   0x2836             CMP      R0,#+54
   \   00000080   0xF000 0x8178      BEQ.W    ??RoadBrd_ParseString_11
   \   00000084   0x2841             CMP      R0,#+65
   \   00000086   0xF000 0x818E      BEQ.W    ??RoadBrd_ParseString_12
   \   0000008A   0x2842             CMP      R0,#+66
   \   0000008C   0xF000 0x82E9      BEQ.W    ??RoadBrd_ParseString_13
   \   00000090   0x2843             CMP      R0,#+67
   \   00000092   0xF000 0x8593      BEQ.W    ??RoadBrd_ParseString_14
   \   00000096   0x2844             CMP      R0,#+68
   \   00000098   0xF000 0x877B      BEQ.W    ??RoadBrd_ParseString_15
   \   0000009C   0x2845             CMP      R0,#+69
   \   0000009E   0xF001 0x80ED      BEQ.W    ??RoadBrd_ParseString_16
   \   000000A2   0x2846             CMP      R0,#+70
   \   000000A4   0xF001 0x80FF      BEQ.W    ??RoadBrd_ParseString_17
   \   000000A8   0x2847             CMP      R0,#+71
   \   000000AA   0xF001 0x8117      BEQ.W    ??RoadBrd_ParseString_18
   \   000000AE   0x2848             CMP      R0,#+72
   \   000000B0   0xF001 0x8194      BEQ.W    ??RoadBrd_ParseString_19
   \   000000B4   0x2850             CMP      R0,#+80
   \   000000B6   0xF001 0x846B      BEQ.W    ??RoadBrd_ParseString_20
   \   000000BA   0x2854             CMP      R0,#+84
   \   000000BC   0xF001 0x8498      BEQ.W    ??RoadBrd_ParseString_21
   \   000000C0   0xF003 0xBBDF      B.W      ??RoadBrd_ParseString_22
    219                      {
    220          //**************************************************************************************************
    221                      case '0':
    222                        // Enable Road sound and fill buffer. 
    223                        Status = RoadBrdSnd_ProcessSound();
   \                     ??RoadBrd_ParseString_5: (+1)
   \   000000C4   0x.... 0x....      BL       RoadBrdSnd_ProcessSound
   \   000000C8   0x0006             MOVS     R6,R0
    224                        if (Status == HAL_OK)
   \   000000CA   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000CC   0x2E00             CMP      R6,#+0
   \   000000CE   0xD112             BNE.N    ??RoadBrd_ParseString_23
    225                        {
    226                          // Is this a BLE Operation?
    227                          if ( BLE_Flag )
   \   000000D0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000D2   0x2D00             CMP      R5,#+0
   \   000000D4   0xD00A             BEQ.N    ??RoadBrd_ParseString_24
    228                          {
    229                            // Yes...Build and Send BLE Response NOW.
    230                            strcpy( (char *)tempBffr2, "<STATUS>CMD_RDSNDBFFR_FILL</STATUS>");
   \   000000D6   0xF8DF 0x1DD8      LDR.W    R1,??RoadBrd_ParseString_25
   \   000000DA   0xA80F             ADD      R0,SP,#+60
   \   000000DC   0x.... 0x....      BL       strcpy
    231                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000000E0   0xA80F             ADD      R0,SP,#+60
   \   000000E2   0x.... 0x....      BL       strlen
   \   000000E6   0xA90F             ADD      R1,SP,#+60
   \   000000E8   0x.... 0x....      BL       BGM111_Transmit
    232                          }
    233                          strcpy( (char *)tempBffr2, "Road Sound: Road Sound loaded, processed, and sent to FFT Bins.\r\n");
   \                     ??RoadBrd_ParseString_24: (+1)
   \   000000EC   0xF8DF 0x1E1C      LDR.W    R1,??RoadBrd_ParseString_26
   \   000000F0   0xA80F             ADD      R0,SP,#+60
   \   000000F2   0x.... 0x....      BL       strcpy
    234                        }
    235                        break;
   \                     ??RoadBrd_ParseString_23: (+1)
   \   000000F6   0xF003 0xBBD5      B.W      ??RoadBrd_ParseString_27
    236          //**************************************************************************************************
    237                      case '1':
    238                        // Rd_Sound FFT Measurements 0-15. 
    239                        Status = RoadBrdSnd_DumpBin0( &RSFFTBins );
   \                     ??RoadBrd_ParseString_6: (+1)
   \   000000FA   0xA88C             ADD      R0,SP,#+560
   \   000000FC   0x.... 0x....      BL       RoadBrdSnd_DumpBin0
   \   00000100   0x0006             MOVS     R6,R0
    240                        strcpy( (char *)tempBffr2, "Road Sound: FFT Measurements 0-15.\r\n");
   \   00000102   0xF8DF 0x1E0C      LDR.W    R1,??RoadBrd_ParseString_26+0x4
   \   00000106   0xA80F             ADD      R0,SP,#+60
   \   00000108   0x.... 0x....      BL       strcpy
    241          #ifdef NUCLEO
    242                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    243          #else
    244                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000010C   0xA90F             ADD      R1,SP,#+60
   \   0000010E   0x2000             MOVS     R0,#+0
   \   00000110   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000114   0x0006             MOVS     R6,R0
    245          #endif
    246                        if (Status != HAL_OK)
   \   00000116   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000118   0x2E00             CMP      R6,#+0
   \   0000011A   0xD003             BEQ.N    ??RoadBrd_ParseString_28
    247                          return Status;
   \   0000011C   0x0030             MOVS     R0,R6
   \   0000011E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000120   0xF003 0xBC3A      B.W      ??RoadBrd_ParseString_4
    248                        // Is this a BLE Operation?
    249                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_28: (+1)
   \   00000124   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000126   0x2D00             CMP      R5,#+0
   \   00000128   0xD00B             BEQ.N    ??RoadBrd_ParseString_29
    250                        {
    251                          // Yes...Build and Send BLE Response NOW.
    252                          sprintf( (char *)tempBffr2, "<STATUS>ST_FFT0-15:%s</STATUS>", RSFFTBins.dumpStr );
   \   0000012A   0xAA8C             ADD      R2,SP,#+560
   \   0000012C   0xF8DF 0x1DE4      LDR.W    R1,??RoadBrd_ParseString_26+0x8
   \   00000130   0xA80F             ADD      R0,SP,#+60
   \   00000132   0x.... 0x....      BL       sprintf
    253                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000136   0xA80F             ADD      R0,SP,#+60
   \   00000138   0x.... 0x....      BL       strlen
   \   0000013C   0xA90F             ADD      R1,SP,#+60
   \   0000013E   0x.... 0x....      BL       BGM111_Transmit
    254                        }
    255                        // NOW, Build Data String..
    256                        sprintf( (char *)tempBffr2, "     FFT Measurements 0-15: " );
   \                     ??RoadBrd_ParseString_29: (+1)
   \   00000142   0xF8DF 0x1E1C      LDR.W    R1,??RoadBrd_ParseString_30
   \   00000146   0xA80F             ADD      R0,SP,#+60
   \   00000148   0x.... 0x....      BL       sprintf
    257                        strcat( (char *)tempBffr2, (char *)RSFFTBins.dumpStr );
   \   0000014C   0xA98C             ADD      R1,SP,#+560
   \   0000014E   0xA80F             ADD      R0,SP,#+60
   \   00000150   0x.... 0x....      BL       strcat
    258                        strcat( (char *)tempBffr2, "\r\n" );
   \   00000154   0xA1D8             ADR.N    R1,??RoadBrd_ParseString_31  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000156   0xA80F             ADD      R0,SP,#+60
   \   00000158   0x.... 0x....      BL       strcat
    259                       break;
   \   0000015C   0xF003 0xBBA2      B.W      ??RoadBrd_ParseString_27
    260          //**************************************************************************************************
    261                      case '2':
    262                        // Rd_Sound FFT Measurements 16-31. 
    263                        Status = RoadBrdSnd_DumpBin16( &RSFFTBins );
   \                     ??RoadBrd_ParseString_7: (+1)
   \   00000160   0xA88C             ADD      R0,SP,#+560
   \   00000162   0x.... 0x....      BL       RoadBrdSnd_DumpBin16
   \   00000166   0x0006             MOVS     R6,R0
    264                        strcpy( (char *)tempBffr2, "Road Sound: FFT Measurements 16-31.\r\n");
   \   00000168   0xF8DF 0x1DFC      LDR.W    R1,??RoadBrd_ParseString_30+0x8
   \   0000016C   0xA80F             ADD      R0,SP,#+60
   \   0000016E   0x.... 0x....      BL       strcpy
    265          #ifdef NUCLEO
    266                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    267          #else
    268                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000172   0xA90F             ADD      R1,SP,#+60
   \   00000174   0x2000             MOVS     R0,#+0
   \   00000176   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000017A   0x0006             MOVS     R6,R0
    269          #endif
    270                        if (Status != HAL_OK)
   \   0000017C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000017E   0x2E00             CMP      R6,#+0
   \   00000180   0xD003             BEQ.N    ??RoadBrd_ParseString_32
    271                          return Status;
   \   00000182   0x0030             MOVS     R0,R6
   \   00000184   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000186   0xF003 0xBC07      B.W      ??RoadBrd_ParseString_4
    272                        // Is this a BLE Operation?
    273                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_32: (+1)
   \   0000018A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000018C   0x2D00             CMP      R5,#+0
   \   0000018E   0xD00B             BEQ.N    ??RoadBrd_ParseString_33
    274                        {
    275                          // Yes...Build and Send BLE Response NOW.
    276                          sprintf( (char *)tempBffr2, "<STATUS>ST_FFT16-31:%s</STATUS>", RSFFTBins.dumpStr );
   \   00000190   0xAA8C             ADD      R2,SP,#+560
   \   00000192   0xF8DF 0x1DD8      LDR.W    R1,??RoadBrd_ParseString_30+0xC
   \   00000196   0xA80F             ADD      R0,SP,#+60
   \   00000198   0x.... 0x....      BL       sprintf
    277                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000019C   0xA80F             ADD      R0,SP,#+60
   \   0000019E   0x.... 0x....      BL       strlen
   \   000001A2   0xA90F             ADD      R1,SP,#+60
   \   000001A4   0x.... 0x....      BL       BGM111_Transmit
    278                        }
    279                        // NOW, Build Data String..
    280                        sprintf( (char *)tempBffr2, "     FFT Measurements 16-31: " );
   \                     ??RoadBrd_ParseString_33: (+1)
   \   000001A8   0xF8DF 0x1DC4      LDR.W    R1,??RoadBrd_ParseString_30+0x10
   \   000001AC   0xA80F             ADD      R0,SP,#+60
   \   000001AE   0x.... 0x....      BL       sprintf
    281                        strcat( (char *)tempBffr2, (char *)RSFFTBins.dumpStr );
   \   000001B2   0xA98C             ADD      R1,SP,#+560
   \   000001B4   0xA80F             ADD      R0,SP,#+60
   \   000001B6   0x.... 0x....      BL       strcat
    282                        strcat( (char *)tempBffr2, "\r\n" );
   \   000001BA   0xA1BF             ADR.N    R1,??RoadBrd_ParseString_31  ;; 0x0D, 0x0A, 0x00, 0x00
   \   000001BC   0xA80F             ADD      R0,SP,#+60
   \   000001BE   0x.... 0x....      BL       strcat
    283                        break;
   \   000001C2   0xF003 0xBB6F      B.W      ??RoadBrd_ParseString_27
    284          //**************************************************************************************************
    285                      case '3':
    286                        // Rd_Sound FFT Measurements 32-47. 
    287                        Status = RoadBrdSnd_DumpBin32( &RSFFTBins );
   \                     ??RoadBrd_ParseString_8: (+1)
   \   000001C6   0xA88C             ADD      R0,SP,#+560
   \   000001C8   0x.... 0x....      BL       RoadBrdSnd_DumpBin32
   \   000001CC   0x0006             MOVS     R6,R0
    288                        strcpy( (char *)tempBffr2, "Road Sound: FFT Measurements 32-47.\r\n");
   \   000001CE   0xF8DF 0x1DA4      LDR.W    R1,??RoadBrd_ParseString_30+0x14
   \   000001D2   0xA80F             ADD      R0,SP,#+60
   \   000001D4   0x.... 0x....      BL       strcpy
    289          #ifdef NUCLEO
    290                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    291          #else
    292                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000001D8   0xA90F             ADD      R1,SP,#+60
   \   000001DA   0x2000             MOVS     R0,#+0
   \   000001DC   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000001E0   0x0006             MOVS     R6,R0
    293          #endif
    294                        if (Status != HAL_OK)
   \   000001E2   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000001E4   0x2E00             CMP      R6,#+0
   \   000001E6   0xD003             BEQ.N    ??RoadBrd_ParseString_34
    295                          return Status;
   \   000001E8   0x0030             MOVS     R0,R6
   \   000001EA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001EC   0xF003 0xBBD4      B.W      ??RoadBrd_ParseString_4
    296                        // Is this a BLE Operation?
    297                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_34: (+1)
   \   000001F0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000001F2   0x2D00             CMP      R5,#+0
   \   000001F4   0xD00B             BEQ.N    ??RoadBrd_ParseString_35
    298                        {
    299                          // Yes...Build and Send BLE Response NOW.
    300                          sprintf( (char *)tempBffr2, "<STATUS>ST_FFT32-47:%s</STATUS>", RSFFTBins.dumpStr );
   \   000001F6   0xAA8C             ADD      R2,SP,#+560
   \   000001F8   0xF8DF 0x1D7C      LDR.W    R1,??RoadBrd_ParseString_30+0x18
   \   000001FC   0xA80F             ADD      R0,SP,#+60
   \   000001FE   0x.... 0x....      BL       sprintf
    301                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000202   0xA80F             ADD      R0,SP,#+60
   \   00000204   0x.... 0x....      BL       strlen
   \   00000208   0xA90F             ADD      R1,SP,#+60
   \   0000020A   0x.... 0x....      BL       BGM111_Transmit
    302                        }
    303                        // NOW, Build Data String..
    304                        sprintf( (char *)tempBffr2, "     FFT Measurements 32-47: " );
   \                     ??RoadBrd_ParseString_35: (+1)
   \   0000020E   0xF8DF 0x1D6C      LDR.W    R1,??RoadBrd_ParseString_30+0x1C
   \   00000212   0xA80F             ADD      R0,SP,#+60
   \   00000214   0x.... 0x....      BL       sprintf
    305                        strcat( (char *)tempBffr2, (char *)RSFFTBins.dumpStr );
   \   00000218   0xA98C             ADD      R1,SP,#+560
   \   0000021A   0xA80F             ADD      R0,SP,#+60
   \   0000021C   0x.... 0x....      BL       strcat
    306                        strcat( (char *)tempBffr2, "\r\n" );
   \   00000220   0xA1A5             ADR.N    R1,??RoadBrd_ParseString_31  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000222   0xA80F             ADD      R0,SP,#+60
   \   00000224   0x.... 0x....      BL       strcat
    307                        break;
   \   00000228   0xF003 0xBB3C      B.W      ??RoadBrd_ParseString_27
    308          //**************************************************************************************************
    309                      case '4':
    310                        // Rd_Sound FFT Measurements 48-63. 
    311                        Status = RoadBrdSnd_DumpBin48( &RSFFTBins );
   \                     ??RoadBrd_ParseString_9: (+1)
   \   0000022C   0xA88C             ADD      R0,SP,#+560
   \   0000022E   0x.... 0x....      BL       RoadBrdSnd_DumpBin48
   \   00000232   0x0006             MOVS     R6,R0
    312                        strcpy( (char *)tempBffr2, "Road Sound: FFT Measurements 48-63.\r\n");
   \   00000234   0xF8DF 0x1D48      LDR.W    R1,??RoadBrd_ParseString_30+0x20
   \   00000238   0xA80F             ADD      R0,SP,#+60
   \   0000023A   0x.... 0x....      BL       strcpy
    313          #ifdef NUCLEO
    314                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    315          #else
    316                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000023E   0xA90F             ADD      R1,SP,#+60
   \   00000240   0x2000             MOVS     R0,#+0
   \   00000242   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000246   0x0006             MOVS     R6,R0
    317          #endif
    318                        if (Status != HAL_OK)
   \   00000248   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000024A   0x2E00             CMP      R6,#+0
   \   0000024C   0xD003             BEQ.N    ??RoadBrd_ParseString_36
    319                          return Status;
   \   0000024E   0x0030             MOVS     R0,R6
   \   00000250   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000252   0xF003 0xBBA1      B.W      ??RoadBrd_ParseString_4
    320                        // Is this a BLE Operation?
    321                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_36: (+1)
   \   00000256   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000258   0x2D00             CMP      R5,#+0
   \   0000025A   0xD00B             BEQ.N    ??RoadBrd_ParseString_37
    322                        {
    323                          // Yes...Build and Send BLE Response NOW.
    324                          sprintf( (char *)tempBffr2, "<STATUS>ST_FFT48-63:%s</STATUS>", RSFFTBins.dumpStr );
   \   0000025C   0xAA8C             ADD      R2,SP,#+560
   \   0000025E   0xF8DF 0x1E04      LDR.W    R1,??RoadBrd_ParseString_38
   \   00000262   0xA80F             ADD      R0,SP,#+60
   \   00000264   0x.... 0x....      BL       sprintf
    325                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000268   0xA80F             ADD      R0,SP,#+60
   \   0000026A   0x.... 0x....      BL       strlen
   \   0000026E   0xA90F             ADD      R1,SP,#+60
   \   00000270   0x.... 0x....      BL       BGM111_Transmit
    326                        }
    327                        // NOW, Build Data String..
    328                        sprintf( (char *)tempBffr2, "     FFT Measurements 48-63: " );
   \                     ??RoadBrd_ParseString_37: (+1)
   \   00000274   0xF8DF 0x1DF0      LDR.W    R1,??RoadBrd_ParseString_38+0x4
   \   00000278   0xA80F             ADD      R0,SP,#+60
   \   0000027A   0x.... 0x....      BL       sprintf
    329                        strcat( (char *)tempBffr2, (char *)RSFFTBins.dumpStr );
   \   0000027E   0xA98C             ADD      R1,SP,#+560
   \   00000280   0xA80F             ADD      R0,SP,#+60
   \   00000282   0x.... 0x....      BL       strcat
    330                        strcat( (char *)tempBffr2, "\r\n" );
   \   00000286   0xA18C             ADR.N    R1,??RoadBrd_ParseString_31  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000288   0xA80F             ADD      R0,SP,#+60
   \   0000028A   0x.... 0x....      BL       strcat
    331                       break;
   \   0000028E   0xF003 0xBB09      B.W      ??RoadBrd_ParseString_27
    332          //**************************************************************************************************
    333                      case '5':
    334                        // dump results of save Buffer. BufferPntr
    335                        BufferPntr = RoadBrdSnd_getSaveBffr();
   \                     ??RoadBrd_ParseString_10: (+1)
   \   00000292   0x.... 0x....      BL       RoadBrdSnd_getSaveBffr
   \   00000296   0x9047             STR      R0,[SP, #+284]
    336                        strcpy( (char *)tempBffr2, "Road Sound: Results of save Buffer.\r\n");
   \   00000298   0xF8DF 0x1DD0      LDR.W    R1,??RoadBrd_ParseString_38+0x8
   \   0000029C   0xA80F             ADD      R0,SP,#+60
   \   0000029E   0x.... 0x....      BL       strcpy
    337                        Status = RoadBrdSnd_DumpBin0( &RSFFTBins );
   \   000002A2   0xA88C             ADD      R0,SP,#+560
   \   000002A4   0x.... 0x....      BL       RoadBrdSnd_DumpBin0
   \   000002A8   0x0006             MOVS     R6,R0
    338          #ifdef NUCLEO
    339                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    340          #else
    341                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000002AA   0xA90F             ADD      R1,SP,#+60
   \   000002AC   0x2000             MOVS     R0,#+0
   \   000002AE   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000002B2   0x0006             MOVS     R6,R0
    342          #endif
    343                        if (Status != HAL_OK)
   \   000002B4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000002B6   0x2E00             CMP      R6,#+0
   \   000002B8   0xD003             BEQ.N    ??RoadBrd_ParseString_39
    344                          return Status;
   \   000002BA   0x0030             MOVS     R0,R6
   \   000002BC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000002BE   0xF003 0xBB6B      B.W      ??RoadBrd_ParseString_4
    345                        // Is this a BLE Operation?
    346                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_39: (+1)
   \   000002C2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000002C4   0x2D00             CMP      R5,#+0
   \   000002C6   0xD00A             BEQ.N    ??RoadBrd_ParseString_40
    347                        {
    348                          // Yes...Build and Send BLE Response NOW.
    349                          strcpy( (char *)tempBffr2, "<STATUS>ST_FFTBFFR_DUMP:</STATUS>");
   \   000002C8   0xF8DF 0x1DE8      LDR.W    R1,??RoadBrd_ParseString_41
   \   000002CC   0xA80F             ADD      R0,SP,#+60
   \   000002CE   0x.... 0x....      BL       strcpy
    350                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000002D2   0xA80F             ADD      R0,SP,#+60
   \   000002D4   0x.... 0x....      BL       strlen
   \   000002D8   0xA90F             ADD      R1,SP,#+60
   \   000002DA   0x.... 0x....      BL       BGM111_Transmit
    351                        }
    352                        // NOW, Build Data String..
    353                        y=0;
   \                     ??RoadBrd_ParseString_40: (+1)
   \   000002DE   0x2000             MOVS     R0,#+0
   \   000002E0   0x903A             STR      R0,[SP, #+232]
    354                        sprintf( (char *)tempBffr2, "" );
   \   000002E2   0xA1DA             ADR.N    R1,??RoadBrd_ParseString_42  ;; ""
   \   000002E4   0xA80F             ADD      R0,SP,#+60
   \   000002E6   0x.... 0x....      BL       sprintf
    355                        for (x=0; x<FFT_BUFFER_SIZE; x++)
   \   000002EA   0x2000             MOVS     R0,#+0
   \   000002EC   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_43: (+1)
   \   000002EE   0x2F80             CMP      R7,#+128
   \   000002F0   0xDA2E             BGE.N    ??RoadBrd_ParseString_44
    356                        {
    357          //                sprintf( (char *)tempBffr3, "%02x ", BufferPntr[x]);
    358                          sprintf( (char *)tempBffr3, "%04d ", BufferPntr[x]);
   \   000002F2   0x9847             LDR      R0,[SP, #+284]
   \   000002F4   0x57C2             LDRSB    R2,[R0, R7]
   \   000002F6   0xF8DF 0x1DC0      LDR.W    R1,??RoadBrd_ParseString_41+0x4
   \   000002FA   0xA80C             ADD      R0,SP,#+48
   \   000002FC   0x.... 0x....      BL       sprintf
    359                          strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   00000300   0xA90C             ADD      R1,SP,#+48
   \   00000302   0xA80F             ADD      R0,SP,#+60
   \   00000304   0x.... 0x....      BL       strcat
    360                          y++;
   \   00000308   0x983A             LDR      R0,[SP, #+232]
   \   0000030A   0x1C40             ADDS     R0,R0,#+1
   \   0000030C   0x903A             STR      R0,[SP, #+232]
    361                          if (y>=16)
   \   0000030E   0x983A             LDR      R0,[SP, #+232]
   \   00000310   0x2810             CMP      R0,#+16
   \   00000312   0xDB1B             BLT.N    ??RoadBrd_ParseString_45
    362                          {
    363                            strcat( (char *)tempBffr2, "\r\n" );
   \   00000314   0xA168             ADR.N    R1,??RoadBrd_ParseString_31  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000316   0xA80F             ADD      R0,SP,#+60
   \   00000318   0x.... 0x....      BL       strcat
    364                            y=0;
   \   0000031C   0x2000             MOVS     R0,#+0
   \   0000031E   0x903A             STR      R0,[SP, #+232]
    365           #ifdef NUCLEO
    366                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    367          #else
    368                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000320   0xA90F             ADD      R1,SP,#+60
   \   00000322   0x2000             MOVS     R0,#+0
   \   00000324   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000328   0x0006             MOVS     R6,R0
    369          #endif
    370                            if (Status != HAL_OK)
   \   0000032A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000032C   0x2E00             CMP      R6,#+0
   \   0000032E   0xD003             BEQ.N    ??RoadBrd_ParseString_46
    371                              return Status;
   \   00000330   0x0030             MOVS     R0,R6
   \   00000332   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000334   0xF003 0xBB30      B.W      ??RoadBrd_ParseString_4
    372                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \                     ??RoadBrd_ParseString_46: (+1)
   \   00000338   0xA80F             ADD      R0,SP,#+60
   \   0000033A   0x.... 0x....      BL       strlen
   \   0000033E   0xA90F             ADD      R1,SP,#+60
   \   00000340   0x.... 0x....      BL       BGM111_Transmit
    373                            sprintf( (char *)tempBffr2, "" );
   \   00000344   0xA1C1             ADR.N    R1,??RoadBrd_ParseString_42  ;; ""
   \   00000346   0xA80F             ADD      R0,SP,#+60
   \   00000348   0x.... 0x....      BL       sprintf
    374                          }
    375                        }
   \                     ??RoadBrd_ParseString_45: (+1)
   \   0000034C   0x1C7F             ADDS     R7,R7,#+1
   \   0000034E   0xE7CE             B.N      ??RoadBrd_ParseString_43
    376                        strcpy( (char *)tempBffr2, "</STATUS>");
   \                     ??RoadBrd_ParseString_44: (+1)
   \   00000350   0xF8DF 0x1E10      LDR.W    R1,??RoadBrd_ParseString_47
   \   00000354   0xA80F             ADD      R0,SP,#+60
   \   00000356   0x.... 0x....      BL       strcpy
    377                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000035A   0xA80F             ADD      R0,SP,#+60
   \   0000035C   0x.... 0x....      BL       strlen
   \   00000360   0xA90F             ADD      R1,SP,#+60
   \   00000362   0x.... 0x....      BL       BGM111_Transmit
    378                        sprintf( (char *)tempBffr2, "     ---COMPLETE---" );
   \   00000366   0xF8DF 0x1E00      LDR.W    R1,??RoadBrd_ParseString_47+0x4
   \   0000036A   0xA80F             ADD      R0,SP,#+60
   \   0000036C   0x.... 0x....      BL       sprintf
    379                        break;
   \   00000370   0xF003 0xBA98      B.W      ??RoadBrd_ParseString_27
    380          //**************************************************************************************************
    381                      case '6':
    382                        // Clear all buffers. 
    383                        Status = HAL_OK;
   \                     ??RoadBrd_ParseString_11: (+1)
   \   00000374   0x2000             MOVS     R0,#+0
   \   00000376   0x0006             MOVS     R6,R0
    384                        RoadBrdSnd_ClrBffrs();
   \   00000378   0x.... 0x....      BL       RoadBrdSnd_ClrBffrs
    385                        // Is this a BLE Operation?
    386                        if ( BLE_Flag )
   \   0000037C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000037E   0x2D00             CMP      R5,#+0
   \   00000380   0xD00A             BEQ.N    ??RoadBrd_ParseString_48
    387                        {
    388                          // Yes...Build and Send BLE Response NOW.
    389                          strcpy( (char *)tempBffr2, "<STATUS>ST_FFTCLR</STATUS>");
   \   00000382   0xF8DF 0x1DE8      LDR.W    R1,??RoadBrd_ParseString_47+0x8
   \   00000386   0xA80F             ADD      R0,SP,#+60
   \   00000388   0x.... 0x....      BL       strcpy
    390                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000038C   0xA80F             ADD      R0,SP,#+60
   \   0000038E   0x.... 0x....      BL       strlen
   \   00000392   0xA90F             ADD      R1,SP,#+60
   \   00000394   0x.... 0x....      BL       BGM111_Transmit
    391                        }
    392                        strcpy( (char *)tempBffr2, "Road Sound: All buffers cleared.\r\n");;
   \                     ??RoadBrd_ParseString_48: (+1)
   \   00000398   0xF8DF 0x1DD4      LDR.W    R1,??RoadBrd_ParseString_47+0xC
   \   0000039C   0xA80F             ADD      R0,SP,#+60
   \   0000039E   0x.... 0x....      BL       strcpy
    393                        break;
   \   000003A2   0xF003 0xBA7F      B.W      ??RoadBrd_ParseString_27
    394          //**************************************************************************************************
    395                      case 'A':
    396                        // Barometer. 
    397                        if (Size == 1)
   \                     ??RoadBrd_ParseString_12: (+1)
   \   000003A6   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000003AA   0xF1B8 0x0F01      CMP      R8,#+1
   \   000003AE   0xF000 0x8156      BEQ.W    ??RoadBrd_ParseString_49
    398                        {
    399          //------------------ A Command...Read Pressure...PRESS_OUT_XL...PRESS_OUT_L...PRESS_OUT_H     
    400                        }
    401                        else
    402                        {
    403                          switch( tempBffr[1] )
   \   000003B2   0x7860             LDRB     R0,[R4, #+1]
   \   000003B4   0x2836             CMP      R0,#+54
   \   000003B6   0xD039             BEQ.N    ??RoadBrd_ParseString_50
   \   000003B8   0x2838             CMP      R0,#+56
   \   000003BA   0xF000 0x80B8      BEQ.W    ??RoadBrd_ParseString_51
   \   000003BE   0x2839             CMP      R0,#+57
   \   000003C0   0xF000 0x8122      BEQ.W    ??RoadBrd_ParseString_52
   \   000003C4   0x2849             CMP      R0,#+73
   \   000003C6   0xF040 0x8145      BNE.W    ??RoadBrd_ParseString_53
    404                          {
    405          //------------------ AI Command...Initialize Barometer Sensor     
    406                            case 'I':
    407                              // Clean out old pressure.
    408          //                    Status = RoadBrd_Baro_ReadPressure( &PRPMeasure );
    409                              // Clean out old Temp data.
    410          //                    Status = RoadBrd_Baro_ReadTemp( i2cData );
    411                              //************ Wait 50msec.
    412          //                    RoadBrd_Delay(500);  
    413                   
    414                              Status = RoadBrd_Init_Barometer();
   \                     ??RoadBrd_ParseString_54: (+1)
   \   000003CA   0x.... 0x....      BL       RoadBrd_Init_Barometer
   \   000003CE   0x0006             MOVS     R6,R0
    415                              // Is this a BLE Operation?
    416                              if ( BLE_Flag )
   \   000003D0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000003D2   0x2D00             CMP      R5,#+0
   \   000003D4   0xD00A             BEQ.N    ??RoadBrd_ParseString_55
    417                              {
    418                                // Yes...Build and Send BLE Response NOW.
    419                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000003D6   0xF8DF 0x1E04      LDR.W    R1,??RoadBrd_ParseString_56
   \   000003DA   0xA80F             ADD      R0,SP,#+60
   \   000003DC   0x.... 0x....      BL       strcpy
    420                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000003E0   0xA80F             ADD      R0,SP,#+60
   \   000003E2   0x.... 0x....      BL       strlen
   \   000003E6   0xA90F             ADD      R1,SP,#+60
   \   000003E8   0x.... 0x....      BL       BGM111_Transmit
    421                              }
    422                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_55: (+1)
   \   000003EC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000003EE   0x2E00             CMP      R6,#+0
   \   000003F0   0xD105             BNE.N    ??RoadBrd_ParseString_57
    423                              {
    424                                  strcpy( (char *)tempBffr2, "Initialize Barometer Sensor Passed.\r\n");;
   \   000003F2   0xF8DF 0x1DEC      LDR.W    R1,??RoadBrd_ParseString_56+0x4
   \   000003F6   0xA80F             ADD      R0,SP,#+60
   \   000003F8   0x.... 0x....      BL       strcpy
   \   000003FC   0xE015             B.N      ??RoadBrd_ParseString_58
    425                              }
    426                              else
    427                              {
    428                                  strcpy( (char *)tempBffr2, "Initialize Barometer Sensor FAILED.\r\n");
   \                     ??RoadBrd_ParseString_57: (+1)
   \   000003FE   0xF8DF 0x1E10      LDR.W    R1,??RoadBrd_ParseString_59
   \   00000402   0xA80F             ADD      R0,SP,#+60
   \   00000404   0x.... 0x....      BL       strcpy
    429                                  Save_Status = Status;
   \   00000408   0xF88D 0x60B4      STRB     R6,[SP, #+180]
    430          #ifdef NUCLEO
    431                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    432          #else
    433                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000040C   0xA90F             ADD      R1,SP,#+60
   \   0000040E   0x2000             MOVS     R0,#+0
   \   00000410   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000414   0x0006             MOVS     R6,R0
    434          #endif
    435                                  if (Status != HAL_OK)
   \   00000416   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000418   0x2E00             CMP      R6,#+0
   \   0000041A   0xD003             BEQ.N    ??RoadBrd_ParseString_60
    436                                    return Status;
   \   0000041C   0x0030             MOVS     R0,R6
   \   0000041E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000420   0xF003 0xBABA      B.W      ??RoadBrd_ParseString_4
    437                                  else
    438                                    Status = Save_Status;
   \                     ??RoadBrd_ParseString_60: (+1)
   \   00000424   0xF89D 0x00B4      LDRB     R0,[SP, #+180]
   \   00000428   0x0006             MOVS     R6,R0
    439                              }
    440                              break;
   \                     ??RoadBrd_ParseString_58: (+1)
   \   0000042A   0xE118             B.N      ??RoadBrd_ParseString_49
    441          //------------------ A0 Command...Enable Barometer     
    442          #if 0                  
    443                          case '0':
    444                              Status = RoadBrd_Enable_Barometer();
    445                              // Is this a BLE Operation?
    446                              if ( BLE_Flag )
    447                              {
    448                                // Yes...Build and Send BLE Response NOW.
    449                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
    450                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
    451                              }
    452                              if (Status == HAL_OK)
    453                              {
    454                                  strcpy( (char *)tempBffr2, "Barometer Sensor: Enable Barometer Passed.\r\n");;
    455                              }
    456                              else
    457                              {
    458                                  strcpy( (char *)tempBffr2, "Barometer Sensor: Enable Barometer FAILED.\r\n");;
    459                              }
    460                              break;
    461          //------------------ A1 Command...Disable Barometer     
    462                            case '1':
    463                              Status = RoadBrd_Disable_Barometer();
    464                              // Is this a BLE Operation?
    465                              if ( BLE_Flag )
    466                              {
    467                                // Yes...Build and Send BLE Response NOW.
    468                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
    469                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
    470                              }
    471                              if (Status == HAL_OK)
    472                              {
    473                                  strcpy( (char *)tempBffr2, "Barometer Sensor: Disable Barometer Passed.\r\n");;
    474                              }
    475                              else
    476                              {
    477                                  strcpy( (char *)tempBffr2, "Barometer Sensor: Disable Barometer FAILED.\r\n");;
    478                                  Save_Status = Status;
    479          #ifdef NUCLEO
    480                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    481          #else
    482                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
    483          #endif
    484                                  if (Status != HAL_OK)
    485                                    return Status;
    486                                  else
    487                                    Status = Save_Status;
    488                              }
    489                              break;
    490          //------------------ A2 Command...Start the Barometer but do not wait.     
    491                            case '2':
    492                              Status = RoadBrd_StartSample_Barometer();
    493                              // Is this a BLE Operation?
    494                              if ( BLE_Flag )
    495                              {
    496                                // Yes...Build and Send BLE Response NOW.
    497                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
    498                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
    499                              }
    500                              if (Status == HAL_OK)
    501                              {
    502                                  strcpy( (char *)tempBffr2, "Start the Barometer but do not wait Passed.\r\n");;
    503                              }
    504                              else
    505                              {
    506                                  strcpy( (char *)tempBffr2, "Start the Barometer but do not wait FAILED.\r\n");;
    507                                  Save_Status = Status;
    508          #ifdef NUCLEO
    509                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    510          #else
    511                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
    512          #endif
    513                                  if (Status != HAL_OK)
    514                                    return Status;
    515                                  else
    516                                    Status = Save_Status;
    517                              }
    518                              break;
    519          //------------------ A3 Command...Start the Barometer and wait for response.    
    520                            case '3':
    521                              Status = RoadBrd_StartSample_BarometerWait();
    522                              // Is this a BLE Operation?
    523                              if ( BLE_Flag )
    524                              {
    525                                // Yes...Build and Send BLE Response NOW.
    526                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
    527                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
    528                              }
    529                              if (Status == HAL_OK)
    530                              {
    531                                  strcpy( (char *)tempBffr2, "Start the Barometer and wait for response Passed.\r\n");;
    532                              }
    533                              else
    534                              {
    535                                  strcpy( (char *)tempBffr2, "Start the Barometer and wait for response FAILED.\r\n");;
    536                                  Save_Status = Status;
    537          #ifdef NUCLEO
    538                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    539          #else
    540                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
    541          #endif
    542                                  if (Status != HAL_OK)
    543                                    return Status;
    544                                  else
    545                                    Status = Save_Status;
    546                              }
    547                              break;
    548          //------------------ A4 Command...Return Status    
    549                            case '4':
    550                              // Is this a BLE Operation?
    551                              if ( BLE_Flag )
    552                              {
    553                                // Yes...Build and Send BLE Response NOW.
    554                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
    555                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
    556                              }
    557                              Status = RoadBrd_Barometer_Status( &PRMeasure );
    558                              if (Status == HAL_OK)
    559                              {
    560                                sprintf( (char *)tempBffr2, "Barometer Sensor Status: %02x / ", PRMeasure.Status );
    561                                strcat( (char *)tempBffr2, (char *)PRMeasure.Raw );
    562                                strcat( (char *)tempBffr2, "\r\n" );
    563                              }
    564                              break;
    565          //------------------ A5 Command...Wait for Pressure to be complete. 
    566                            case '5':
    567                              Status = RoadBrd_WaitForPressure( (uint16_t)BARO_WAITCNT );
    568                              // Is this a BLE Operation?
    569                              if ( BLE_Flag )
    570                              {
    571                                // Yes...Build and Send BLE Response NOW.
    572                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
    573                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
    574                              }
    575                              if (Status == HAL_OK)
    576                              {
    577                                  strcpy( (char *)tempBffr2, "Wait for Pressure to be complete Passed.\r\n");;
    578                              }
    579                              else
    580                              {
    581                                  strcpy( (char *)tempBffr2, "Wait for Pressure to be complete FAILED.\r\n");;
    582                                  Save_Status = Status;
    583          #ifdef NUCLEO
    584                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    585          #else
    586                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
    587          #endif
    588                                  if (Status != HAL_OK)
    589                                    return Status;
    590                                  else
    591                                    Status = Save_Status;
    592                              }
    593                              break;
    594          #endif
    595          //------------------ A6 Command...Read Pressure...PRESS_OUT_XL...PRESS_OUT_L...PRESS_OUT_H     
    596                            case '6':
    597                              //Status = RoadBrd_Barometer_Status( &PRMeasure );
    598                              Status = RoadBrd_Baro_ReadPressure( &PRPMeasure );
   \                     ??RoadBrd_ParseString_50: (+1)
   \   0000042C   0xA8AD             ADD      R0,SP,#+692
   \   0000042E   0x.... 0x....      BL       RoadBrd_Baro_ReadPressure
   \   00000432   0x0006             MOVS     R6,R0
    599                              if (Status == HAL_OK)
   \   00000434   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000436   0x2E00             CMP      R6,#+0
   \   00000438   0xD104             BNE.N    ??RoadBrd_ParseString_61
    600                                Status = RoadBrd_Baro_ReadPressure_Scaled( &PRPMeasureScaled );
   \   0000043A   0xA8FF             ADD      R0,SP,#+1020
   \   0000043C   0x3040             ADDS     R0,R0,#+64
   \   0000043E   0x.... 0x....      BL       RoadBrd_Baro_ReadPressure_Scaled
   \   00000442   0x0006             MOVS     R6,R0
    601                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_61: (+1)
   \   00000444   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000446   0x2E00             CMP      R6,#+0
   \   00000448   0xD15A             BNE.N    ??RoadBrd_ParseString_62
    602                              {
    603                                strcpy( (char *)tempBffr2, "A6 Command...Read Pressure Passed.\r\n");;
   \   0000044A   0xF8DF 0x1DC8      LDR.W    R1,??RoadBrd_ParseString_59+0x4
   \   0000044E   0xA80F             ADD      R0,SP,#+60
   \   00000450   0x.... 0x....      BL       strcpy
    604          #ifdef NUCLEO
    605                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    606          #else
    607                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000454   0xA90F             ADD      R1,SP,#+60
   \   00000456   0x2000             MOVS     R0,#+0
   \   00000458   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000045C   0x0006             MOVS     R6,R0
    608          #endif
    609                                if (Status != HAL_OK)
   \   0000045E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000460   0x2E00             CMP      R6,#+0
   \   00000462   0xD003             BEQ.N    ??RoadBrd_ParseString_63
    610                                  return Status;
   \   00000464   0x0030             MOVS     R0,R6
   \   00000466   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000468   0xF003 0xBA96      B.W      ??RoadBrd_ParseString_4
    611                                // NOW, Build Data String..
    612                                sprintf( (char *)tempBffr2, " PRESSURE(PRESS_OUT_H...PRESS_OUT_L...PRESS_OUT_XL)\r\n" );
   \                     ??RoadBrd_ParseString_63: (+1)
   \   0000046C   0xF8DF 0x1DA8      LDR.W    R1,??RoadBrd_ParseString_59+0x8
   \   00000470   0xA80F             ADD      R0,SP,#+60
   \   00000472   0x.... 0x....      BL       sprintf
    613          #ifdef NUCLEO
    614                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    615          #else
    616                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000476   0xA90F             ADD      R1,SP,#+60
   \   00000478   0x2000             MOVS     R0,#+0
   \   0000047A   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000047E   0x0006             MOVS     R6,R0
    617          #endif
    618                                if (Status != HAL_OK)
   \   00000480   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000482   0x2E00             CMP      R6,#+0
   \   00000484   0xD003             BEQ.N    ??RoadBrd_ParseString_64
    619                                  return Status;
   \   00000486   0x0030             MOVS     R0,R6
   \   00000488   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000048A   0xF003 0xBA85      B.W      ??RoadBrd_ParseString_4
    620                               
    621                                // Now show Decimal value of items.
    622                                sprintf( (char *)tempBffr2, " PRESSURE: %s/%s\r\n", (char *)PRPMeasure.Pressure, (char *)PRPMeasureScaled.Pressure );
   \                     ??RoadBrd_ParseString_64: (+1)
   \   0000048E   0xABFF             ADD      R3,SP,#+1020
   \   00000490   0x3340             ADDS     R3,R3,#+64
   \   00000492   0xAAAD             ADD      R2,SP,#+692
   \   00000494   0xF8DF 0x1D84      LDR.W    R1,??RoadBrd_ParseString_59+0xC
   \   00000498   0xA80F             ADD      R0,SP,#+60
   \   0000049A   0x.... 0x....      BL       sprintf
    623          #ifdef NUCLEO
    624                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    625          #else
    626                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000049E   0xA90F             ADD      R1,SP,#+60
   \   000004A0   0x2000             MOVS     R0,#+0
   \   000004A2   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000004A6   0x0006             MOVS     R6,R0
    627          #endif
    628                                if (Status != HAL_OK)
   \   000004A8   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000004AA   0x2E00             CMP      R6,#+0
   \   000004AC   0xD006             BEQ.N    ??RoadBrd_ParseString_65
    629                                  return Status;
   \   000004AE   0x0030             MOVS     R0,R6
   \   000004B0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000004B2   0xF003 0xBA71      B.W      ??RoadBrd_ParseString_4
   \   000004B6   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_31:
   \   000004B8   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
    630                                // Is this a BLE Operation?
    631                                if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_65: (+1)
   \   000004BC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000004BE   0x2D00             CMP      R5,#+0
   \   000004C0   0xD00A             BEQ.N    ??RoadBrd_ParseString_66
    632                                {
    633                                  // Yes...Build and Send BLE Response NOW.
    634                                  strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000004C2   0xF8DF 0x1D18      LDR.W    R1,??RoadBrd_ParseString_56
   \   000004C6   0xA80F             ADD      R0,SP,#+60
   \   000004C8   0x.... 0x....      BL       strcpy
    635                                  BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000004CC   0xA80F             ADD      R0,SP,#+60
   \   000004CE   0x.... 0x....      BL       strlen
   \   000004D2   0xA90F             ADD      R1,SP,#+60
   \   000004D4   0x.... 0x....      BL       BGM111_Transmit
    636                                }
    637                                // Now show hex value of items.
    638                                sprintf( (char *)tempBffr2, " PRESSURE:  " );
   \                     ??RoadBrd_ParseString_66: (+1)
   \   000004D8   0xF8DF 0x1DF4      LDR.W    R1,??RoadBrd_ParseString_67
   \   000004DC   0xA80F             ADD      R0,SP,#+60
   \   000004DE   0x.... 0x....      BL       sprintf
    639                                strcat( (char *)tempBffr2, (char *)PRPMeasure.Raw );
   \   000004E2   0xA9B0             ADD      R1,SP,#+704
   \   000004E4   0xA80F             ADD      R0,SP,#+60
   \   000004E6   0x.... 0x....      BL       strcat
    640                                sprintf( (char *)tempBffr3, "  -  %08x\r\n", PRPMeasure.RawC);
   \   000004EA   0x9AB3             LDR      R2,[SP, #+716]
   \   000004EC   0xF8DF 0x1DE4      LDR.W    R1,??RoadBrd_ParseString_67+0x4
   \   000004F0   0xA80C             ADD      R0,SP,#+48
   \   000004F2   0x.... 0x....      BL       sprintf
    641                                strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   000004F6   0xA90C             ADD      R1,SP,#+48
   \   000004F8   0xA80F             ADD      R0,SP,#+60
   \   000004FA   0x.... 0x....      BL       strcat
   \   000004FE   0xE015             B.N      ??RoadBrd_ParseString_68
    642                              }
    643                              else
    644                              {
    645                                  strcpy( (char *)tempBffr2, "A6 Command...Read Pressure FAILED.\r\n");;
   \                     ??RoadBrd_ParseString_62: (+1)
   \   00000500   0xF8DF 0x1DD4      LDR.W    R1,??RoadBrd_ParseString_67+0x8
   \   00000504   0xA80F             ADD      R0,SP,#+60
   \   00000506   0x.... 0x....      BL       strcpy
    646                                  Save_Status = Status;
   \   0000050A   0xF88D 0x60B4      STRB     R6,[SP, #+180]
    647          #ifdef NUCLEO
    648                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    649          #else
    650                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000050E   0xA90F             ADD      R1,SP,#+60
   \   00000510   0x2000             MOVS     R0,#+0
   \   00000512   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000516   0x0006             MOVS     R6,R0
    651          #endif
    652                                  if (Status != HAL_OK)
   \   00000518   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000051A   0x2E00             CMP      R6,#+0
   \   0000051C   0xD003             BEQ.N    ??RoadBrd_ParseString_69
    653                                    return Status;
   \   0000051E   0x0030             MOVS     R0,R6
   \   00000520   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000522   0xF003 0xBA39      B.W      ??RoadBrd_ParseString_4
    654                                  else
    655                                    Status = Save_Status;
   \                     ??RoadBrd_ParseString_69: (+1)
   \   00000526   0xF89D 0x00B4      LDRB     R0,[SP, #+180]
   \   0000052A   0x0006             MOVS     R6,R0
    656                              }
    657                              break;
   \                     ??RoadBrd_ParseString_68: (+1)
   \   0000052C   0xE097             B.N      ??RoadBrd_ParseString_49
    658          
    659          //------------------ A8 Command...Read Temperature....TEMP_OUT_L...TEMP_OUT_H    
    660                            case '8':
    661                              Status = RoadBrd_Baro_ReadTemp( &TMeasure );
   \                     ??RoadBrd_ParseString_51: (+1)
   \   0000052E   0xA83D             ADD      R0,SP,#+244
   \   00000530   0x.... 0x....      BL       RoadBrd_Baro_ReadTemp
   \   00000534   0x0006             MOVS     R6,R0
    662                              if (Status == HAL_OK)
   \   00000536   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000538   0x2E00             CMP      R6,#+0
   \   0000053A   0xD127             BNE.N    ??RoadBrd_ParseString_70
    663                              {
    664                                // Send string to UART..
    665                                strcpy( (char *)tempBffr2, "A8 Command...Read Temperature Passed.\r\n");
   \   0000053C   0xF8DF 0x1DF8      LDR.W    R1,??RoadBrd_ParseString_71
   \   00000540   0xA80F             ADD      R0,SP,#+60
   \   00000542   0x.... 0x....      BL       strcpy
    666          #ifdef NUCLEO
    667                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    668          #else
    669                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000546   0xA90F             ADD      R1,SP,#+60
   \   00000548   0x2000             MOVS     R0,#+0
   \   0000054A   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000054E   0x0006             MOVS     R6,R0
    670          #endif
    671                                if (Status != HAL_OK)
   \   00000550   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000552   0x2E00             CMP      R6,#+0
   \   00000554   0xD003             BEQ.N    ??RoadBrd_ParseString_72
    672                                  return Status;
   \   00000556   0x0030             MOVS     R0,R6
   \   00000558   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000055A   0xF003 0xBA1D      B.W      ??RoadBrd_ParseString_4
    673                                // NOW, Build Data String..
    674                                sprintf( (char *)tempBffr2, "     TEMP DATA: " );
   \                     ??RoadBrd_ParseString_72: (+1)
   \   0000055E   0xF8DF 0x1DDC      LDR.W    R1,??RoadBrd_ParseString_71+0x4
   \   00000562   0xA80F             ADD      R0,SP,#+60
   \   00000564   0x.... 0x....      BL       sprintf
    675                                strcat( (char *)tempBffr2, (char *)TMeasure.Raw );
   \   00000568   0xF50D 0x7181      ADD      R1,SP,#+258
   \   0000056C   0xA80F             ADD      R0,SP,#+60
   \   0000056E   0x.... 0x....      BL       strcat
    676                                strcat( (char *)tempBffr2, "\r\n" );
   \   00000572   0xA137             ADR.N    R1,??RoadBrd_ParseString_42+0x4  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000574   0xA80F             ADD      R0,SP,#+60
   \   00000576   0x.... 0x....      BL       strcat
    677                              }
    678                              else
    679                                break;
    680          #ifdef NUCLEO
    681                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    682          #else
    683                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000057A   0xA90F             ADD      R1,SP,#+60
   \   0000057C   0x2000             MOVS     R0,#+0
   \   0000057E   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000582   0x0006             MOVS     R6,R0
    684          #endif
    685                              if (Status != HAL_OK)
   \   00000584   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000586   0x2E00             CMP      R6,#+0
   \   00000588   0xD101             BNE.N    ??RoadBrd_ParseString_73
   \   0000058A   0xE004             B.N      ??RoadBrd_ParseString_74
   \                     ??RoadBrd_ParseString_70: (+1)
   \   0000058C   0xE067             B.N      ??RoadBrd_ParseString_49
    686                                return Status;
   \                     ??RoadBrd_ParseString_73: (+1)
   \   0000058E   0x0030             MOVS     R0,R6
   \   00000590   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000592   0xF003 0xBA01      B.W      ??RoadBrd_ParseString_4
    687                              // NOW, Build Data String..
    688                              sprintf( (char *)tempBffr2, "     TEMP DATA(Decimal): %d\r\n", TMeasure.RawC );
   \                     ??RoadBrd_ParseString_74: (+1)
   \   00000596   0xF8BD 0x210A      LDRH     R2,[SP, #+266]
   \   0000059A   0xF8DF 0x1E08      LDR.W    R1,??RoadBrd_ParseString_75
   \   0000059E   0xA80F             ADD      R0,SP,#+60
   \   000005A0   0x.... 0x....      BL       sprintf
    689          #ifdef NUCLEO
    690                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    691          #else
    692                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000005A4   0xA90F             ADD      R1,SP,#+60
   \   000005A6   0x2000             MOVS     R0,#+0
   \   000005A8   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000005AC   0x0006             MOVS     R6,R0
    693          #endif
    694                              if (Status != HAL_OK)
   \   000005AE   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000005B0   0x2E00             CMP      R6,#+0
   \   000005B2   0xD003             BEQ.N    ??RoadBrd_ParseString_76
    695                                return Status;
   \   000005B4   0x0030             MOVS     R0,R6
   \   000005B6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000005B8   0xF003 0xB9EE      B.W      ??RoadBrd_ParseString_4
    696                              // Is this a BLE Operation?
    697                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_76: (+1)
   \   000005BC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000005BE   0x2D00             CMP      R5,#+0
   \   000005C0   0xD00A             BEQ.N    ??RoadBrd_ParseString_77
    698                              {
    699                                // Yes...Build and Send BLE Response NOW.
    700                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000005C2   0xF8DF 0x1C18      LDR.W    R1,??RoadBrd_ParseString_56
   \   000005C6   0xA80F             ADD      R0,SP,#+60
   \   000005C8   0x.... 0x....      BL       strcpy
    701                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000005CC   0xA80F             ADD      R0,SP,#+60
   \   000005CE   0x.... 0x....      BL       strlen
   \   000005D2   0xA90F             ADD      R1,SP,#+60
   \   000005D4   0x.... 0x....      BL       BGM111_Transmit
    702                              }
    703                              // Now calculate Celcius and Farenheit Temp.
    704                              sprintf( (char *)tempBffr2, "     TempC: " );
   \                     ??RoadBrd_ParseString_77: (+1)
   \   000005D8   0xF8DF 0x1DCC      LDR.W    R1,??RoadBrd_ParseString_75+0x4
   \   000005DC   0xA80F             ADD      R0,SP,#+60
   \   000005DE   0x.... 0x....      BL       sprintf
    705                              strcat( (char *)tempBffr2, (char *)TMeasure.TempC );
   \   000005E2   0xA93D             ADD      R1,SP,#+244
   \   000005E4   0xA80F             ADD      R0,SP,#+60
   \   000005E6   0x.... 0x....      BL       strcat
    706                              strcat( (char *)tempBffr2, "     TempF: " );
   \   000005EA   0xF8DF 0x1DC0      LDR.W    R1,??RoadBrd_ParseString_75+0x8
   \   000005EE   0xA80F             ADD      R0,SP,#+60
   \   000005F0   0x.... 0x....      BL       strcat
    707                              strcat( (char *)tempBffr2, (char *)TMeasure.TempF );
   \   000005F4   0xF10D 0x01FB      ADD      R1,SP,#+251
   \   000005F8   0xA80F             ADD      R0,SP,#+60
   \   000005FA   0x.... 0x....      BL       strcat
    708                              strcat( (char *)tempBffr2, "\r\n" );
   \   000005FE   0xA114             ADR.N    R1,??RoadBrd_ParseString_42+0x4  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000600   0xA80F             ADD      R0,SP,#+60
   \   00000602   0x.... 0x....      BL       strcat
    709          /*                    if (Status == HAL_OK)
    710                              {
    711                                strcpy( (char *)tempBffr2, "A8 Command...Read Temperature Passed.\r\n");;
    712          #ifdef NUCLEO
    713                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    714          #else
    715                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
    716          #endif
    717                                if (Status != HAL_OK)
    718                                  return Status;
    719                                // NOW, Build Data String..
    720                                sprintf( (char *)tempBffr2, " Temperature(TEMP_OUT_L...TEMP_OUT_H)\r\n" );
    721          #ifdef NUCLEO
    722                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    723          #else
    724                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
    725          #endif
    726                                if (Status != HAL_OK)
    727                                  return Status;
    728                                sprintf( (char *)tempBffr2, " Temperature:  %02x   %02x\r\n", i2cData[0], i2cData[1] );
    729                              }
    730                              else
    731                              {
    732                                  strcpy( (char *)tempBffr2, "A8 Command...Read Temperature FAILED.\r\n");;
    733                                  Save_Status = Status;
    734          #ifdef NUCLEO
    735                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    736          #else
    737                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
    738          #endif
    739                                  if (Status != HAL_OK)
    740                                    return Status;
    741                                  else
    742                                    Status = Save_Status;
    743                              }*/
    744                              break;
   \   00000606   0xE02A             B.N      ??RoadBrd_ParseString_49
    745          //------------------ A9 Command...Test and Verify WHO_AM_I     
    746                            case '9':
    747                              Status = RoadBrd_TestandRead_Barometer();
   \                     ??RoadBrd_ParseString_52: (+1)
   \   00000608   0x.... 0x....      BL       RoadBrd_TestandRead_Barometer
   \   0000060C   0x0006             MOVS     R6,R0
    748                              // Is this a BLE Operation?
    749                              if ( BLE_Flag )
   \   0000060E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000610   0x2D00             CMP      R5,#+0
   \   00000612   0xD00A             BEQ.N    ??RoadBrd_ParseString_78
    750                              {
    751                                // Yes...Build and Send BLE Response NOW.
    752                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00000614   0xF8DF 0x1BC4      LDR.W    R1,??RoadBrd_ParseString_56
   \   00000618   0xA80F             ADD      R0,SP,#+60
   \   0000061A   0x.... 0x....      BL       strcpy
    753                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000061E   0xA80F             ADD      R0,SP,#+60
   \   00000620   0x.... 0x....      BL       strlen
   \   00000624   0xA90F             ADD      R1,SP,#+60
   \   00000626   0x.... 0x....      BL       BGM111_Transmit
    754                              }
    755                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_78: (+1)
   \   0000062A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000062C   0x2E00             CMP      R6,#+0
   \   0000062E   0xD105             BNE.N    ??RoadBrd_ParseString_79
    756                              {
    757                                  strcpy( (char *)tempBffr2, "Barometer Sensor: WHO_AM_I Passed.\r\n");
   \   00000630   0xF8DF 0x1D7C      LDR.W    R1,??RoadBrd_ParseString_75+0xC
   \   00000634   0xA80F             ADD      R0,SP,#+60
   \   00000636   0x.... 0x....      BL       strcpy
   \   0000063A   0xE006             B.N      ??RoadBrd_ParseString_80
    758                              }
    759                              else
    760                              {
    761                                  strcpy( (char *)tempBffr2, "Barometer Sensor: WHO_AM_I FAILED.\r\n");
   \                     ??RoadBrd_ParseString_79: (+1)
   \   0000063C   0xF8DF 0x1D74      LDR.W    R1,??RoadBrd_ParseString_75+0x10
   \   00000640   0xA80F             ADD      R0,SP,#+60
   \   00000642   0x.... 0x....      BL       strcpy
    762                                  Status = HAL_OK;
   \   00000646   0x2000             MOVS     R0,#+0
   \   00000648   0x0006             MOVS     R6,R0
    763                              }
    764                              break;
   \                     ??RoadBrd_ParseString_80: (+1)
   \   0000064A   0xE008             B.N      ??RoadBrd_ParseString_49
   \                     ??RoadBrd_ParseString_42:
   \   0000064C   0x00 0x00          DC8      "",0x0,0x0,0x0
   \              0x00 0x00    
   \   00000650   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
    765                            default:
    766                              strcpy( (char *)tempBffr2, "ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_53: (+1)
   \   00000654   0xF8DF 0x1D60      LDR.W    R1,??RoadBrd_ParseString_75+0x14
   \   00000658   0xA80F             ADD      R0,SP,#+60
   \   0000065A   0x.... 0x....      BL       strcpy
    767                              break;
    768                          } //EndSwitch
    769                        } //EndElse (Size == 1)
    770                        break;
   \                     ??RoadBrd_ParseString_49: (+1)
   \   0000065E   0xF003 0xB921      B.W      ??RoadBrd_ParseString_27
    771          //**************************************************************************************************
    772                      case 'B':
    773                        // Read Cool Eye. 
    774          //++++++++++++++++++++++++++++++++++++++++++  Cool Eye/Grid Eye Monitor Commands.
    775                        if (Size == 1)
   \                     ??RoadBrd_ParseString_13: (+1)
   \   00000662   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000666   0xF1B8 0x0F01      CMP      R8,#+1
   \   0000066A   0xF040 0x8134      BNE.W    ??RoadBrd_ParseString_81
    776                        {
    777          //------------------ B Command: Read Cool Eye/Grid Eye Values      
    778                          // Read Cool Eye/Grid Eye Values.....
    779                          if ( Get_DriverStates( GRIDEYE_MNTR_TASK ))
   \   0000066E   0x2005             MOVS     R0,#+5
   \   00000670   0x.... 0x....      BL       Get_DriverStates
   \   00000674   0x2800             CMP      R0,#+0
   \   00000676   0xD00B             BEQ.N    ??RoadBrd_ParseString_82
    780                          {
    781                            Status = RoadBrd_GridEye_ReadValues( &GridMeasure );
   \   00000678   0xA856             ADD      R0,SP,#+344
   \   0000067A   0x.... 0x....      BL       RoadBrd_GridEye_ReadValues
   \   0000067E   0x0006             MOVS     R6,R0
    782                            if (Status == HAL_OK)
   \   00000680   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000682   0x2E00             CMP      R6,#+0
   \   00000684   0xD117             BNE.N    ??RoadBrd_ParseString_83
    783                              Status = RoadBrd_GridEye_ReadValues_Scaled( &GridMeasureScaled );
   \   00000686   0xA8C6             ADD      R0,SP,#+792
   \   00000688   0x.... 0x....      BL       RoadBrd_GridEye_ReadValues_Scaled
   \   0000068C   0x0006             MOVS     R6,R0
   \   0000068E   0xE012             B.N      ??RoadBrd_ParseString_83
    784                          }
    785                          else if ( Get_DriverStates( COOLEYE_MNTR_TASK ))
   \                     ??RoadBrd_ParseString_82: (+1)
   \   00000690   0x2006             MOVS     R0,#+6
   \   00000692   0x.... 0x....      BL       Get_DriverStates
   \   00000696   0x2800             CMP      R0,#+0
   \   00000698   0xD00B             BEQ.N    ??RoadBrd_ParseString_84
    786                          {
    787                            Status = RoadBrd_CoolEye_ReadValues( &GridMeasure );
   \   0000069A   0xA856             ADD      R0,SP,#+344
   \   0000069C   0x.... 0x....      BL       RoadBrd_CoolEye_ReadValues
   \   000006A0   0x0006             MOVS     R6,R0
    788                            if (Status == HAL_OK)
   \   000006A2   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000006A4   0x2E00             CMP      R6,#+0
   \   000006A6   0xD106             BNE.N    ??RoadBrd_ParseString_83
    789                              Status = RoadBrd_CoolEye_ReadValues_Scaled( &GridMeasureScaled );
   \   000006A8   0xA8C6             ADD      R0,SP,#+792
   \   000006AA   0x.... 0x....      BL       RoadBrd_CoolEye_ReadValues_Scaled
   \   000006AE   0x0006             MOVS     R6,R0
   \   000006B0   0xE001             B.N      ??RoadBrd_ParseString_83
    790                          }
    791                          else
    792                            Status = HAL_ERROR;
   \                     ??RoadBrd_ParseString_84: (+1)
   \   000006B2   0x2001             MOVS     R0,#+1
   \   000006B4   0x0006             MOVS     R6,R0
    793                          
    794                          // Is this a BLE Operation?
    795                          if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_83: (+1)
   \   000006B6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000006B8   0x2D00             CMP      R5,#+0
   \   000006BA   0xD00A             BEQ.N    ??RoadBrd_ParseString_85
    796                          {
    797                            // Yes...Build and Send BLE Response NOW.
    798                            strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000006BC   0xF8DF 0x1B1C      LDR.W    R1,??RoadBrd_ParseString_56
   \   000006C0   0xA80F             ADD      R0,SP,#+60
   \   000006C2   0x.... 0x....      BL       strcpy
    799                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000006C6   0xA80F             ADD      R0,SP,#+60
   \   000006C8   0x.... 0x....      BL       strlen
   \   000006CC   0xA90F             ADD      R1,SP,#+60
   \   000006CE   0x.... 0x....      BL       BGM111_Transmit
    800                          }
    801                          if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_85: (+1)
   \   000006D2   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000006D4   0x2E00             CMP      R6,#+0
   \   000006D6   0xF040 0x80FC      BNE.W    ??RoadBrd_ParseString_86
    802                          {
    803                            // Send string to UART..
    804                            strcpy( (char *)tempBffr2, "Voltage Monitor/Shunt Voltage...\r\n");
   \   000006DA   0xF8DF 0x1DEC      LDR.W    R1,??RoadBrd_ParseString_87
   \   000006DE   0xA80F             ADD      R0,SP,#+60
   \   000006E0   0x.... 0x....      BL       strcpy
    805          #ifdef NUCLEO
    806                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    807          #else
    808                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000006E4   0xA90F             ADD      R1,SP,#+60
   \   000006E6   0x2000             MOVS     R0,#+0
   \   000006E8   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000006EC   0x0006             MOVS     R6,R0
    809          #endif
    810                            if (Status != HAL_OK)
   \   000006EE   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000006F0   0x2E00             CMP      R6,#+0
   \   000006F2   0xD003             BEQ.N    ??RoadBrd_ParseString_88
    811                              return Status;
   \   000006F4   0x0030             MOVS     R0,R6
   \   000006F6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000006F8   0xF003 0xB94E      B.W      ??RoadBrd_ParseString_4
    812                            // NOW, Build Data String..
    813                            for (x=0; x<9; x++)
   \                     ??RoadBrd_ParseString_88: (+1)
   \   000006FC   0x2000             MOVS     R0,#+0
   \   000006FE   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_89: (+1)
   \   00000700   0x2F09             CMP      R7,#+9
   \   00000702   0xF280 0x80D3      BGE.W    ??RoadBrd_ParseString_90
    814                            {
    815                              // Build String
    816                              switch(x)
   \   00000706   0x2F00             CMP      R7,#+0
   \   00000708   0xD00F             BEQ.N    ??RoadBrd_ParseString_91
   \   0000070A   0x2F02             CMP      R7,#+2
   \   0000070C   0xD035             BEQ.N    ??RoadBrd_ParseString_92
   \   0000070E   0xD320             BCC.N    ??RoadBrd_ParseString_93
   \   00000710   0x2F04             CMP      R7,#+4
   \   00000712   0xD05A             BEQ.N    ??RoadBrd_ParseString_94
   \   00000714   0xD345             BCC.N    ??RoadBrd_ParseString_95
   \   00000716   0x2F06             CMP      R7,#+6
   \   00000718   0xF000 0x807F      BEQ.W    ??RoadBrd_ParseString_96
   \   0000071C   0xD369             BCC.N    ??RoadBrd_ParseString_97
   \   0000071E   0x2F08             CMP      R7,#+8
   \   00000720   0xF000 0x80A3      BEQ.W    ??RoadBrd_ParseString_98
   \   00000724   0xF0C0 0x808D      BCC.W    ??RoadBrd_ParseString_99
   \   00000728   0xE0B2             B.N      ??RoadBrd_ParseString_100
    817                              {
    818                                case 0: //Thermistor Values
    819                                  sprintf( (char *)tempBffr2, "     Thermistor DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.Thermistor.Raw,
    820                                                                                                         GridMeasure.Thermistor.TempC,GridMeasureScaled.Thermistor.TempC,
    821                                                                                                         GridMeasure.Thermistor.TempF,GridMeasureScaled.Thermistor.TempF,
    822                                                                                                         GridMeasure.Thermistor.RawC );
   \                     ??RoadBrd_ParseString_91: (+1)
   \   0000072A   0xF8BD 0x016E      LDRH     R0,[SP, #+366]
   \   0000072E   0x9003             STR      R0,[SP, #+12]
   \   00000730   0xA8C7             ADD      R0,SP,#+796
   \   00000732   0x1CC0             ADDS     R0,R0,#+3
   \   00000734   0x9002             STR      R0,[SP, #+8]
   \   00000736   0xA857             ADD      R0,SP,#+348
   \   00000738   0x1CC0             ADDS     R0,R0,#+3
   \   0000073A   0x9001             STR      R0,[SP, #+4]
   \   0000073C   0xA8C6             ADD      R0,SP,#+792
   \   0000073E   0x9000             STR      R0,[SP, #+0]
   \   00000740   0xAB56             ADD      R3,SP,#+344
   \   00000742   0xF50D 0x72B3      ADD      R2,SP,#+358
   \   00000746   0xF8DF 0x1E1C      LDR.W    R1,??RoadBrd_ParseString_101
   \   0000074A   0xA80F             ADD      R0,SP,#+60
   \   0000074C   0x.... 0x....      BL       sprintf
    823          //                        sprintf( (char *)tempBffr2, "     Thermistor DATA: %s   %s   %s   %d\r\n", GridMeasure.Thermistor.Raw,
    824          //                                                                                               GridMeasure.Thermistor.TempC,
    825          //                                                                                               GridMeasure.Thermistor.TempF,
    826          //                                                                                               GridMeasure.Thermistor.RawC );
    827                                  break;
   \   00000750   0xE09E             B.N      ??RoadBrd_ParseString_100
    828                                case 1: //GridEye1 Values
    829                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye1.Raw,
    830                                                                                                         GridMeasure.GridEye1.TempC,GridMeasureScaled.GridEye1.TempC,
    831                                                                                                         GridMeasure.GridEye1.TempF,GridMeasureScaled.GridEye1.TempF,
    832                                                                                                         GridMeasure.GridEye1.RawC );
   \                     ??RoadBrd_ParseString_93: (+1)
   \   00000752   0xF8BD 0x0186      LDRH     R0,[SP, #+390]
   \   00000756   0x9003             STR      R0,[SP, #+12]
   \   00000758   0xA8CD             ADD      R0,SP,#+820
   \   0000075A   0x1CC0             ADDS     R0,R0,#+3
   \   0000075C   0x9002             STR      R0,[SP, #+8]
   \   0000075E   0xA85D             ADD      R0,SP,#+372
   \   00000760   0x1CC0             ADDS     R0,R0,#+3
   \   00000762   0x9001             STR      R0,[SP, #+4]
   \   00000764   0xA8CC             ADD      R0,SP,#+816
   \   00000766   0x9000             STR      R0,[SP, #+0]
   \   00000768   0xAB5C             ADD      R3,SP,#+368
   \   0000076A   0xF50D 0x72BF      ADD      R2,SP,#+382
   \   0000076E   0xF8DF 0x1DF8      LDR.W    R1,??RoadBrd_ParseString_101+0x4
   \   00000772   0xA80F             ADD      R0,SP,#+60
   \   00000774   0x.... 0x....      BL       sprintf
    833          //                        sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye1.Raw,
    834          //                                                                                               GridMeasure.GridEye1.TempC,
    835          //                                                                                               GridMeasure.GridEye1.TempF,
    836          //                                                                                               GridMeasure.GridEye1.RawC );
    837                                  break;
   \   00000778   0xE08A             B.N      ??RoadBrd_ParseString_100
    838                                case 2: //GridEye2 Values
    839                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye2.Raw,
    840                                                                                                         GridMeasure.GridEye2.TempC,GridMeasureScaled.GridEye2.TempC,
    841                                                                                                         GridMeasure.GridEye2.TempF,GridMeasureScaled.GridEye2.TempF,
    842                                                                                                         GridMeasure.GridEye2.RawC );
   \                     ??RoadBrd_ParseString_92: (+1)
   \   0000077A   0xF8BD 0x019E      LDRH     R0,[SP, #+414]
   \   0000077E   0x9003             STR      R0,[SP, #+12]
   \   00000780   0xA8D3             ADD      R0,SP,#+844
   \   00000782   0x1CC0             ADDS     R0,R0,#+3
   \   00000784   0x9002             STR      R0,[SP, #+8]
   \   00000786   0xA863             ADD      R0,SP,#+396
   \   00000788   0x1CC0             ADDS     R0,R0,#+3
   \   0000078A   0x9001             STR      R0,[SP, #+4]
   \   0000078C   0xA8D2             ADD      R0,SP,#+840
   \   0000078E   0x9000             STR      R0,[SP, #+0]
   \   00000790   0xAB62             ADD      R3,SP,#+392
   \   00000792   0xF50D 0x72CB      ADD      R2,SP,#+406
   \   00000796   0xF8DF 0x1DD0      LDR.W    R1,??RoadBrd_ParseString_101+0x4
   \   0000079A   0xA80F             ADD      R0,SP,#+60
   \   0000079C   0x.... 0x....      BL       sprintf
    843          //                        sprintf( (char *)tempBffr2, "     Grid 34 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye2.Raw,
    844          //                                                                                               GridMeasure.GridEye2.TempC,
    845          //                                                                                               GridMeasure.GridEye2.TempF,
    846          //                                                                                               GridMeasure.GridEye2.RawC );
    847                                  break;
   \   000007A0   0xE076             B.N      ??RoadBrd_ParseString_100
    848                                case 3: //GridEye3 Values
    849                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye3.Raw,
    850                                                                                                         GridMeasure.GridEye3.TempC,GridMeasureScaled.GridEye3.TempC,
    851                                                                                                         GridMeasure.GridEye3.TempF,GridMeasureScaled.GridEye3.TempF,
    852                                                                                                         GridMeasure.GridEye3.RawC );
   \                     ??RoadBrd_ParseString_95: (+1)
   \   000007A2   0xF8BD 0x01B6      LDRH     R0,[SP, #+438]
   \   000007A6   0x9003             STR      R0,[SP, #+12]
   \   000007A8   0xA8D9             ADD      R0,SP,#+868
   \   000007AA   0x1CC0             ADDS     R0,R0,#+3
   \   000007AC   0x9002             STR      R0,[SP, #+8]
   \   000007AE   0xA869             ADD      R0,SP,#+420
   \   000007B0   0x1CC0             ADDS     R0,R0,#+3
   \   000007B2   0x9001             STR      R0,[SP, #+4]
   \   000007B4   0xA8D8             ADD      R0,SP,#+864
   \   000007B6   0x9000             STR      R0,[SP, #+0]
   \   000007B8   0xAB68             ADD      R3,SP,#+416
   \   000007BA   0xF50D 0x72D7      ADD      R2,SP,#+430
   \   000007BE   0xF8DF 0x1DA8      LDR.W    R1,??RoadBrd_ParseString_101+0x4
   \   000007C2   0xA80F             ADD      R0,SP,#+60
   \   000007C4   0x.... 0x....      BL       sprintf
    853          //                        sprintf( (char *)tempBffr2, "     Grid 35 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye3.Raw,
    854          //                                                                                               GridMeasure.GridEye3.TempC,
    855          //                                                                                               GridMeasure.GridEye3.TempF,
    856          //                                                                                               GridMeasure.GridEye3.RawC );
    857                                  break;
   \   000007C8   0xE062             B.N      ??RoadBrd_ParseString_100
    858                                case 4: //GridEye4 Values
    859                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye4.Raw,
    860                                                                                                         GridMeasure.GridEye4.TempC,GridMeasureScaled.GridEye4.TempC,
    861                                                                                                         GridMeasure.GridEye4.TempF,GridMeasureScaled.GridEye4.TempF,
    862                                                                                                         GridMeasure.GridEye4.RawC );
   \                     ??RoadBrd_ParseString_94: (+1)
   \   000007CA   0xF8BD 0x01CE      LDRH     R0,[SP, #+462]
   \   000007CE   0x9003             STR      R0,[SP, #+12]
   \   000007D0   0xA8DF             ADD      R0,SP,#+892
   \   000007D2   0x1CC0             ADDS     R0,R0,#+3
   \   000007D4   0x9002             STR      R0,[SP, #+8]
   \   000007D6   0xA86F             ADD      R0,SP,#+444
   \   000007D8   0x1CC0             ADDS     R0,R0,#+3
   \   000007DA   0x9001             STR      R0,[SP, #+4]
   \   000007DC   0xA8DE             ADD      R0,SP,#+888
   \   000007DE   0x9000             STR      R0,[SP, #+0]
   \   000007E0   0xAB6E             ADD      R3,SP,#+440
   \   000007E2   0xF50D 0x72E3      ADD      R2,SP,#+454
   \   000007E6   0xF8DF 0x1D80      LDR.W    R1,??RoadBrd_ParseString_101+0x4
   \   000007EA   0xA80F             ADD      R0,SP,#+60
   \   000007EC   0x.... 0x....      BL       sprintf
    863          //                        sprintf( (char *)tempBffr2, "     Grid 36 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye4.Raw,
    864          //                                                                                               GridMeasure.GridEye4.TempC,
    865          //                                                                                               GridMeasure.GridEye4.TempF,
    866          //                                                                                               GridMeasure.GridEye4.RawC );
    867                                  break;
   \   000007F0   0xE04E             B.N      ??RoadBrd_ParseString_100
    868                                case 5: //GridEye5 Values
    869                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye5.Raw,
    870                                                                                                         GridMeasure.GridEye5.TempC,GridMeasureScaled.GridEye5.TempC,
    871                                                                                                         GridMeasure.GridEye5.TempF,GridMeasureScaled.GridEye5.TempF,
    872                                                                                                         GridMeasure.GridEye5.RawC );
   \                     ??RoadBrd_ParseString_97: (+1)
   \   000007F2   0xF8BD 0x01E6      LDRH     R0,[SP, #+486]
   \   000007F6   0x9003             STR      R0,[SP, #+12]
   \   000007F8   0xA8E5             ADD      R0,SP,#+916
   \   000007FA   0x1CC0             ADDS     R0,R0,#+3
   \   000007FC   0x9002             STR      R0,[SP, #+8]
   \   000007FE   0xA875             ADD      R0,SP,#+468
   \   00000800   0x1CC0             ADDS     R0,R0,#+3
   \   00000802   0x9001             STR      R0,[SP, #+4]
   \   00000804   0xA8E4             ADD      R0,SP,#+912
   \   00000806   0x9000             STR      R0,[SP, #+0]
   \   00000808   0xAB74             ADD      R3,SP,#+464
   \   0000080A   0xF50D 0x72EF      ADD      R2,SP,#+478
   \   0000080E   0xF8DF 0x1D58      LDR.W    R1,??RoadBrd_ParseString_101+0x4
   \   00000812   0xA80F             ADD      R0,SP,#+60
   \   00000814   0x.... 0x....      BL       sprintf
    873          //                        sprintf( (char *)tempBffr2, "     Grid 37 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye5.Raw,
    874          //                                                                                               GridMeasure.GridEye5.TempC,
    875          //                                                                                               GridMeasure.GridEye5.TempF,
    876          //                                                                                               GridMeasure.GridEye5.RawC );
    877                                  break;
   \   00000818   0xE03A             B.N      ??RoadBrd_ParseString_100
    878                                case 6: //GridEye6 Values
    879                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye6.Raw,
    880                                                                                                         GridMeasure.GridEye6.TempC,GridMeasureScaled.GridEye6.TempC,
    881                                                                                                         GridMeasure.GridEye6.TempF,GridMeasureScaled.GridEye6.TempF,
    882                                                                                                         GridMeasure.GridEye6.RawC );
   \                     ??RoadBrd_ParseString_96: (+1)
   \   0000081A   0xF8BD 0x01FE      LDRH     R0,[SP, #+510]
   \   0000081E   0x9003             STR      R0,[SP, #+12]
   \   00000820   0xA8EB             ADD      R0,SP,#+940
   \   00000822   0x1CC0             ADDS     R0,R0,#+3
   \   00000824   0x9002             STR      R0,[SP, #+8]
   \   00000826   0xA87B             ADD      R0,SP,#+492
   \   00000828   0x1CC0             ADDS     R0,R0,#+3
   \   0000082A   0x9001             STR      R0,[SP, #+4]
   \   0000082C   0xA8EA             ADD      R0,SP,#+936
   \   0000082E   0x9000             STR      R0,[SP, #+0]
   \   00000830   0xAB7A             ADD      R3,SP,#+488
   \   00000832   0xF50D 0x72FB      ADD      R2,SP,#+502
   \   00000836   0xF8DF 0x1D30      LDR.W    R1,??RoadBrd_ParseString_101+0x4
   \   0000083A   0xA80F             ADD      R0,SP,#+60
   \   0000083C   0x.... 0x....      BL       sprintf
    883          //                        sprintf( (char *)tempBffr2, "     Grid 38 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye6.Raw,
    884          //                                                                                               GridMeasure.GridEye6.TempC,
    885          //                                                                                               GridMeasure.GridEye6.TempF,
    886          //                                                                                               GridMeasure.GridEye6.RawC );
    887                                  break;
   \   00000840   0xE026             B.N      ??RoadBrd_ParseString_100
    888                                case 7: //GridEye7 Values
    889                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye7.Raw,
    890                                                                                                         GridMeasure.GridEye7.TempC,GridMeasureScaled.GridEye7.TempC,
    891                                                                                                         GridMeasure.GridEye7.TempF,GridMeasureScaled.GridEye7.TempF,
    892                                                                                                         GridMeasure.GridEye7.RawC );
   \                     ??RoadBrd_ParseString_99: (+1)
   \   00000842   0xF8BD 0x0216      LDRH     R0,[SP, #+534]
   \   00000846   0x9003             STR      R0,[SP, #+12]
   \   00000848   0xA8F1             ADD      R0,SP,#+964
   \   0000084A   0x1CC0             ADDS     R0,R0,#+3
   \   0000084C   0x9002             STR      R0,[SP, #+8]
   \   0000084E   0xA881             ADD      R0,SP,#+516
   \   00000850   0x1CC0             ADDS     R0,R0,#+3
   \   00000852   0x9001             STR      R0,[SP, #+4]
   \   00000854   0xA8F0             ADD      R0,SP,#+960
   \   00000856   0x9000             STR      R0,[SP, #+0]
   \   00000858   0xAB80             ADD      R3,SP,#+512
   \   0000085A   0xAA83             ADD      R2,SP,#+524
   \   0000085C   0x1C92             ADDS     R2,R2,#+2
   \   0000085E   0xF8DF 0x1D08      LDR.W    R1,??RoadBrd_ParseString_101+0x4
   \   00000862   0xA80F             ADD      R0,SP,#+60
   \   00000864   0x.... 0x....      BL       sprintf
    893          //                        sprintf( (char *)tempBffr2, "     Grid 39 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye7.Raw,
    894          //                                                                                               GridMeasure.GridEye7.TempC,
    895          //                                                                                               GridMeasure.GridEye7.TempF,
    896          //                                                                                               GridMeasure.GridEye7.RawC );
    897                                  break;
   \   00000868   0xE012             B.N      ??RoadBrd_ParseString_100
    898                                case 8: //GridEye8 Values
    899                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye8.Raw,
    900                                                                                                         GridMeasure.GridEye8.TempC,GridMeasureScaled.GridEye8.TempC,
    901                                                                                                         GridMeasure.GridEye8.TempF,GridMeasureScaled.GridEye8.TempF,
    902                                                                                                         GridMeasure.GridEye8.RawC );
   \                     ??RoadBrd_ParseString_98: (+1)
   \   0000086A   0xF8BD 0x022E      LDRH     R0,[SP, #+558]
   \   0000086E   0x9003             STR      R0,[SP, #+12]
   \   00000870   0xA8F7             ADD      R0,SP,#+988
   \   00000872   0x1CC0             ADDS     R0,R0,#+3
   \   00000874   0x9002             STR      R0,[SP, #+8]
   \   00000876   0xA887             ADD      R0,SP,#+540
   \   00000878   0x1CC0             ADDS     R0,R0,#+3
   \   0000087A   0x9001             STR      R0,[SP, #+4]
   \   0000087C   0xA8F6             ADD      R0,SP,#+984
   \   0000087E   0x9000             STR      R0,[SP, #+0]
   \   00000880   0xAB86             ADD      R3,SP,#+536
   \   00000882   0xAA89             ADD      R2,SP,#+548
   \   00000884   0x1C92             ADDS     R2,R2,#+2
   \   00000886   0xF8DF 0x1CE0      LDR.W    R1,??RoadBrd_ParseString_101+0x4
   \   0000088A   0xA80F             ADD      R0,SP,#+60
   \   0000088C   0x.... 0x....      BL       sprintf
    903          //                        sprintf( (char *)tempBffr2, "     Grid 40 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye8.Raw,
    904          //                                                                                               GridMeasure.GridEye8.TempC,
    905          //                                                                                               GridMeasure.GridEye8.TempF,
    906          //                                                                                               GridMeasure.GridEye8.RawC );
    907                                  break;
    908                              } // EndSwitch(x)
    909                              // Now Print String.
    910           #ifdef NUCLEO
    911                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    912          #else
    913                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \                     ??RoadBrd_ParseString_100: (+1)
   \   00000890   0xA90F             ADD      R1,SP,#+60
   \   00000892   0x2000             MOVS     R0,#+0
   \   00000894   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000898   0x0006             MOVS     R6,R0
    914          #endif
    915                              if (Status != HAL_OK)
   \   0000089A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000089C   0x2E00             CMP      R6,#+0
   \   0000089E   0xD003             BEQ.N    ??RoadBrd_ParseString_102
    916                                return Status;
   \   000008A0   0x0030             MOVS     R0,R6
   \   000008A2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000008A4   0xF003 0xB878      B.W      ??RoadBrd_ParseString_4
    917                            } // EndFor(x=0; x<9; x++)
   \                     ??RoadBrd_ParseString_102: (+1)
   \   000008A8   0x1C7F             ADDS     R7,R7,#+1
   \   000008AA   0xE729             B.N      ??RoadBrd_ParseString_89
    918                            sprintf( (char *)tempBffr2, "     SHNT VLTG DATA: " );
   \                     ??RoadBrd_ParseString_90: (+1)
   \   000008AC   0xF8DF 0x1DF8      LDR.W    R1,??RoadBrd_ParseString_103
   \   000008B0   0xA80F             ADD      R0,SP,#+60
   \   000008B2   0x.... 0x....      BL       sprintf
    919                            strcat( (char *)tempBffr2, (char *)VMeasure.Raw );
   \   000008B6   0xA945             ADD      R1,SP,#+276
   \   000008B8   0xA80F             ADD      R0,SP,#+60
   \   000008BA   0x.... 0x....      BL       strcat
    920                            strcat( (char *)tempBffr2, "\r\n" );
   \   000008BE   0xA1BE             ADR.N    R1,??RoadBrd_ParseString_104  ;; 0x0D, 0x0A, 0x00, 0x00
   \   000008C0   0xA80F             ADD      R0,SP,#+60
   \   000008C2   0x.... 0x....      BL       strcat
    921                          } //Endif(Status == HAL_OK)
    922                          else
    923                            break;
    924                          sprintf( (char *)tempBffr2, "     COMPLETE.\r\n" );
   \   000008C6   0xF8DF 0x1DE8      LDR.W    R1,??RoadBrd_ParseString_103+0x8
   \   000008CA   0xA80F             ADD      R0,SP,#+60
   \   000008CC   0x.... 0x....      BL       sprintf
   \   000008D0   0xE170             B.N      ??RoadBrd_ParseString_105
   \                     ??RoadBrd_ParseString_86: (+1)
   \   000008D2   0xF002 0xBFE7      B.W      ??RoadBrd_ParseString_27
    925                        }
    926                        else
    927                        {
    928                          switch( tempBffr[1] )
   \                     ??RoadBrd_ParseString_81: (+1)
   \   000008D6   0x7860             LDRB     R0,[R4, #+1]
   \   000008D8   0x2830             CMP      R0,#+48
   \   000008DA   0xD01F             BEQ.N    ??RoadBrd_ParseString_106
   \   000008DC   0x2831             CMP      R0,#+49
   \   000008DE   0xF000 0x8150      BEQ.W    ??RoadBrd_ParseString_107
   \   000008E2   0x2849             CMP      R0,#+73
   \   000008E4   0xF040 0x8166      BNE.W    ??RoadBrd_ParseString_105
    929                          {
    930          //------------------ BI Command: Initialize Cool Eye/Grid Eye Sensor
    931                            case 'I':
    932                              // Initialize Cool Eye/Grid Eye Sensor.
    933                              Status = RoadBrd_GridEyeInit();
   \                     ??RoadBrd_ParseString_108: (+1)
   \   000008E8   0x.... 0x....      BL       RoadBrd_GridEyeInit
   \   000008EC   0x0006             MOVS     R6,R0
    934                              // Is this a BLE Operation?
    935                              if ( BLE_Flag )
   \   000008EE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000008F0   0x2D00             CMP      R5,#+0
   \   000008F2   0xD00A             BEQ.N    ??RoadBrd_ParseString_109
    936                              {
    937                                // Yes...Build and Send BLE Response NOW.
    938                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000008F4   0xF8DF 0x18E4      LDR.W    R1,??RoadBrd_ParseString_56
   \   000008F8   0xA80F             ADD      R0,SP,#+60
   \   000008FA   0x.... 0x....      BL       strcpy
    939                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000008FE   0xA80F             ADD      R0,SP,#+60
   \   00000900   0x.... 0x....      BL       strlen
   \   00000904   0xA90F             ADD      R1,SP,#+60
   \   00000906   0x.... 0x....      BL       BGM111_Transmit
    940                              }
    941                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_109: (+1)
   \   0000090A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000090C   0x2E00             CMP      R6,#+0
   \   0000090E   0xD104             BNE.N    ??RoadBrd_ParseString_110
    942                              {
    943                                strcpy( (char *)tempBffr2, "Cool Eye/Grid Eye Sensor: Initialization Complete.\r\n");;
   \   00000910   0xF8DF 0x1E04      LDR.W    R1,??RoadBrd_ParseString_111
   \   00000914   0xA80F             ADD      R0,SP,#+60
   \   00000916   0x.... 0x....      BL       strcpy
    944                              }
    945                              break;
   \                     ??RoadBrd_ParseString_110: (+1)
   \   0000091A   0xE14B             B.N      ??RoadBrd_ParseString_105
    946          //------------------ B0 Command...Read Cool Eye/Grid Eye Values.....
    947                            case '0':
    948                              // Read Cool Eye/Grid Eye Values.....
    949                              if ( Get_DriverStates( GRIDEYE_MNTR_TASK ))
   \                     ??RoadBrd_ParseString_106: (+1)
   \   0000091C   0x2005             MOVS     R0,#+5
   \   0000091E   0x.... 0x....      BL       Get_DriverStates
   \   00000922   0x2800             CMP      R0,#+0
   \   00000924   0xD00B             BEQ.N    ??RoadBrd_ParseString_112
    950                              {
    951                                Status = RoadBrd_GridEye_ReadValues( &GridMeasure );
   \   00000926   0xA856             ADD      R0,SP,#+344
   \   00000928   0x.... 0x....      BL       RoadBrd_GridEye_ReadValues
   \   0000092C   0x0006             MOVS     R6,R0
    952                                if (Status == HAL_OK)
   \   0000092E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000930   0x2E00             CMP      R6,#+0
   \   00000932   0xD117             BNE.N    ??RoadBrd_ParseString_113
    953                                  Status = RoadBrd_GridEye_ReadValues_Scaled( &GridMeasureScaled );
   \   00000934   0xA8C6             ADD      R0,SP,#+792
   \   00000936   0x.... 0x....      BL       RoadBrd_GridEye_ReadValues_Scaled
   \   0000093A   0x0006             MOVS     R6,R0
   \   0000093C   0xE012             B.N      ??RoadBrd_ParseString_113
    954                              }
    955                              else if ( Get_DriverStates( COOLEYE_MNTR_TASK ))
   \                     ??RoadBrd_ParseString_112: (+1)
   \   0000093E   0x2006             MOVS     R0,#+6
   \   00000940   0x.... 0x....      BL       Get_DriverStates
   \   00000944   0x2800             CMP      R0,#+0
   \   00000946   0xD00B             BEQ.N    ??RoadBrd_ParseString_114
    956                              {
    957                                Status = RoadBrd_CoolEye_ReadValues( &GridMeasure );
   \   00000948   0xA856             ADD      R0,SP,#+344
   \   0000094A   0x.... 0x....      BL       RoadBrd_CoolEye_ReadValues
   \   0000094E   0x0006             MOVS     R6,R0
    958                                if (Status == HAL_OK)
   \   00000950   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000952   0x2E00             CMP      R6,#+0
   \   00000954   0xD106             BNE.N    ??RoadBrd_ParseString_113
    959                                  Status = RoadBrd_CoolEye_ReadValues_Scaled( &GridMeasureScaled );
   \   00000956   0xA8C6             ADD      R0,SP,#+792
   \   00000958   0x.... 0x....      BL       RoadBrd_CoolEye_ReadValues_Scaled
   \   0000095C   0x0006             MOVS     R6,R0
   \   0000095E   0xE001             B.N      ??RoadBrd_ParseString_113
    960                              }
    961                              else
    962                                Status = HAL_ERROR;
   \                     ??RoadBrd_ParseString_114: (+1)
   \   00000960   0x2001             MOVS     R0,#+1
   \   00000962   0x0006             MOVS     R6,R0
    963          
    964                              // Is this a BLE Operation?
    965                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_113: (+1)
   \   00000964   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000966   0x2D00             CMP      R5,#+0
   \   00000968   0xD00A             BEQ.N    ??RoadBrd_ParseString_115
    966                              {
    967                                // Yes...Build and Send BLE Response NOW.
    968                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   0000096A   0xF8DF 0x1870      LDR.W    R1,??RoadBrd_ParseString_56
   \   0000096E   0xA80F             ADD      R0,SP,#+60
   \   00000970   0x.... 0x....      BL       strcpy
    969                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000974   0xA80F             ADD      R0,SP,#+60
   \   00000976   0x.... 0x....      BL       strlen
   \   0000097A   0xA90F             ADD      R1,SP,#+60
   \   0000097C   0x.... 0x....      BL       BGM111_Transmit
    970                              }
    971          
    972                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_115: (+1)
   \   00000980   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000982   0x2E00             CMP      R6,#+0
   \   00000984   0xF040 0x80FC      BNE.W    ??RoadBrd_ParseString_116
    973                              {
    974                                // Send string to UART..
    975                                strcpy( (char *)tempBffr2, "Voltage Monitor/Shunt Voltage...\r\n");
   \   00000988   0xF8DF 0x1B3C      LDR.W    R1,??RoadBrd_ParseString_87
   \   0000098C   0xA80F             ADD      R0,SP,#+60
   \   0000098E   0x.... 0x....      BL       strcpy
    976          #ifdef NUCLEO
    977                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    978          #else
    979                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000992   0xA90F             ADD      R1,SP,#+60
   \   00000994   0x2000             MOVS     R0,#+0
   \   00000996   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000099A   0x0006             MOVS     R6,R0
    980          #endif
    981                                if (Status != HAL_OK)
   \   0000099C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000099E   0x2E00             CMP      R6,#+0
   \   000009A0   0xD003             BEQ.N    ??RoadBrd_ParseString_117
    982                                  return Status;
   \   000009A2   0x0030             MOVS     R0,R6
   \   000009A4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000009A6   0xF002 0xBFF7      B.W      ??RoadBrd_ParseString_4
    983                                // NOW, Build Data String..
    984                                for (x=0; x<9; x++)
   \                     ??RoadBrd_ParseString_117: (+1)
   \   000009AA   0x2000             MOVS     R0,#+0
   \   000009AC   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_118: (+1)
   \   000009AE   0x2F09             CMP      R7,#+9
   \   000009B0   0xF280 0x80D3      BGE.W    ??RoadBrd_ParseString_119
    985                                {
    986                                  // Build String
    987                                  switch(x)
   \   000009B4   0x2F00             CMP      R7,#+0
   \   000009B6   0xD00F             BEQ.N    ??RoadBrd_ParseString_120
   \   000009B8   0x2F02             CMP      R7,#+2
   \   000009BA   0xD035             BEQ.N    ??RoadBrd_ParseString_121
   \   000009BC   0xD320             BCC.N    ??RoadBrd_ParseString_122
   \   000009BE   0x2F04             CMP      R7,#+4
   \   000009C0   0xD05A             BEQ.N    ??RoadBrd_ParseString_123
   \   000009C2   0xD345             BCC.N    ??RoadBrd_ParseString_124
   \   000009C4   0x2F06             CMP      R7,#+6
   \   000009C6   0xF000 0x807F      BEQ.W    ??RoadBrd_ParseString_125
   \   000009CA   0xD369             BCC.N    ??RoadBrd_ParseString_126
   \   000009CC   0x2F08             CMP      R7,#+8
   \   000009CE   0xF000 0x80A3      BEQ.W    ??RoadBrd_ParseString_127
   \   000009D2   0xF0C0 0x808D      BCC.W    ??RoadBrd_ParseString_128
   \   000009D6   0xE0B2             B.N      ??RoadBrd_ParseString_129
    988                                  {
    989                                  case 0: //Thermistor Values
    990                                    sprintf( (char *)tempBffr2, "     Thermistor DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.Thermistor.Raw,
    991                                            GridMeasure.Thermistor.TempC,GridMeasureScaled.Thermistor.TempC,
    992                                            GridMeasure.Thermistor.TempF,GridMeasureScaled.Thermistor.TempF,
    993                                            GridMeasure.Thermistor.RawC );
   \                     ??RoadBrd_ParseString_120: (+1)
   \   000009D8   0xF8BD 0x016E      LDRH     R0,[SP, #+366]
   \   000009DC   0x9003             STR      R0,[SP, #+12]
   \   000009DE   0xA8C7             ADD      R0,SP,#+796
   \   000009E0   0x1CC0             ADDS     R0,R0,#+3
   \   000009E2   0x9002             STR      R0,[SP, #+8]
   \   000009E4   0xA857             ADD      R0,SP,#+348
   \   000009E6   0x1CC0             ADDS     R0,R0,#+3
   \   000009E8   0x9001             STR      R0,[SP, #+4]
   \   000009EA   0xA8C6             ADD      R0,SP,#+792
   \   000009EC   0x9000             STR      R0,[SP, #+0]
   \   000009EE   0xAB56             ADD      R3,SP,#+344
   \   000009F0   0xF50D 0x72B3      ADD      R2,SP,#+358
   \   000009F4   0xF8DF 0x1B6C      LDR.W    R1,??RoadBrd_ParseString_101
   \   000009F8   0xA80F             ADD      R0,SP,#+60
   \   000009FA   0x.... 0x....      BL       sprintf
    994                                    //                        sprintf( (char *)tempBffr2, "     Thermistor DATA: %s   %s   %s   %d\r\n", GridMeasure.Thermistor.Raw,
    995                                    //                                                                                               GridMeasure.Thermistor.TempC,
    996                                    //                                                                                               GridMeasure.Thermistor.TempF,
    997                                    //                                                                                               GridMeasure.Thermistor.RawC );
    998                                    break;
   \   000009FE   0xE09E             B.N      ??RoadBrd_ParseString_129
    999                                  case 1: //GridEye1 Values
   1000                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye1.Raw,
   1001                                            GridMeasure.GridEye1.TempC,GridMeasureScaled.GridEye1.TempC,
   1002                                            GridMeasure.GridEye1.TempF,GridMeasureScaled.GridEye1.TempF,
   1003                                            GridMeasure.GridEye1.RawC );
   \                     ??RoadBrd_ParseString_122: (+1)
   \   00000A00   0xF8BD 0x0186      LDRH     R0,[SP, #+390]
   \   00000A04   0x9003             STR      R0,[SP, #+12]
   \   00000A06   0xA8CD             ADD      R0,SP,#+820
   \   00000A08   0x1CC0             ADDS     R0,R0,#+3
   \   00000A0A   0x9002             STR      R0,[SP, #+8]
   \   00000A0C   0xA85D             ADD      R0,SP,#+372
   \   00000A0E   0x1CC0             ADDS     R0,R0,#+3
   \   00000A10   0x9001             STR      R0,[SP, #+4]
   \   00000A12   0xA8CC             ADD      R0,SP,#+816
   \   00000A14   0x9000             STR      R0,[SP, #+0]
   \   00000A16   0xAB5C             ADD      R3,SP,#+368
   \   00000A18   0xF50D 0x72BF      ADD      R2,SP,#+382
   \   00000A1C   0xF8DF 0x1B48      LDR.W    R1,??RoadBrd_ParseString_101+0x4
   \   00000A20   0xA80F             ADD      R0,SP,#+60
   \   00000A22   0x.... 0x....      BL       sprintf
   1004                                    //                        sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye1.Raw,
   1005                                    //                                                                                               GridMeasure.GridEye1.TempC,
   1006                                    //                                                                                               GridMeasure.GridEye1.TempF,
   1007                                    //                                                                                               GridMeasure.GridEye1.RawC );
   1008                                    break;
   \   00000A26   0xE08A             B.N      ??RoadBrd_ParseString_129
   1009                                  case 2: //GridEye2 Values
   1010                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye2.Raw,
   1011                                            GridMeasure.GridEye2.TempC,GridMeasureScaled.GridEye2.TempC,
   1012                                            GridMeasure.GridEye2.TempF,GridMeasureScaled.GridEye2.TempF,
   1013                                            GridMeasure.GridEye2.RawC );
   \                     ??RoadBrd_ParseString_121: (+1)
   \   00000A28   0xF8BD 0x019E      LDRH     R0,[SP, #+414]
   \   00000A2C   0x9003             STR      R0,[SP, #+12]
   \   00000A2E   0xA8D3             ADD      R0,SP,#+844
   \   00000A30   0x1CC0             ADDS     R0,R0,#+3
   \   00000A32   0x9002             STR      R0,[SP, #+8]
   \   00000A34   0xA863             ADD      R0,SP,#+396
   \   00000A36   0x1CC0             ADDS     R0,R0,#+3
   \   00000A38   0x9001             STR      R0,[SP, #+4]
   \   00000A3A   0xA8D2             ADD      R0,SP,#+840
   \   00000A3C   0x9000             STR      R0,[SP, #+0]
   \   00000A3E   0xAB62             ADD      R3,SP,#+392
   \   00000A40   0xF50D 0x72CB      ADD      R2,SP,#+406
   \   00000A44   0xF8DF 0x1B20      LDR.W    R1,??RoadBrd_ParseString_101+0x4
   \   00000A48   0xA80F             ADD      R0,SP,#+60
   \   00000A4A   0x.... 0x....      BL       sprintf
   1014                                    //                        sprintf( (char *)tempBffr2, "     Grid 34 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye2.Raw,
   1015                                    //                                                                                               GridMeasure.GridEye2.TempC,
   1016                                    //                                                                                               GridMeasure.GridEye2.TempF,
   1017                                    //                                                                                               GridMeasure.GridEye2.RawC );
   1018                                    break;
   \   00000A4E   0xE076             B.N      ??RoadBrd_ParseString_129
   1019                                  case 3: //GridEye3 Values
   1020                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye3.Raw,
   1021                                            GridMeasure.GridEye3.TempC,GridMeasureScaled.GridEye3.TempC,
   1022                                            GridMeasure.GridEye3.TempF,GridMeasureScaled.GridEye3.TempF,
   1023                                            GridMeasure.GridEye3.RawC );
   \                     ??RoadBrd_ParseString_124: (+1)
   \   00000A50   0xF8BD 0x01B6      LDRH     R0,[SP, #+438]
   \   00000A54   0x9003             STR      R0,[SP, #+12]
   \   00000A56   0xA8D9             ADD      R0,SP,#+868
   \   00000A58   0x1CC0             ADDS     R0,R0,#+3
   \   00000A5A   0x9002             STR      R0,[SP, #+8]
   \   00000A5C   0xA869             ADD      R0,SP,#+420
   \   00000A5E   0x1CC0             ADDS     R0,R0,#+3
   \   00000A60   0x9001             STR      R0,[SP, #+4]
   \   00000A62   0xA8D8             ADD      R0,SP,#+864
   \   00000A64   0x9000             STR      R0,[SP, #+0]
   \   00000A66   0xAB68             ADD      R3,SP,#+416
   \   00000A68   0xF50D 0x72D7      ADD      R2,SP,#+430
   \   00000A6C   0xF8DF 0x1AF8      LDR.W    R1,??RoadBrd_ParseString_101+0x4
   \   00000A70   0xA80F             ADD      R0,SP,#+60
   \   00000A72   0x.... 0x....      BL       sprintf
   1024                                    //                        sprintf( (char *)tempBffr2, "     Grid 35 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye3.Raw,
   1025                                    //                                                                                               GridMeasure.GridEye3.TempC,
   1026                                    //                                                                                               GridMeasure.GridEye3.TempF,
   1027                                    //                                                                                               GridMeasure.GridEye3.RawC );
   1028                                    break;
   \   00000A76   0xE062             B.N      ??RoadBrd_ParseString_129
   1029                                  case 4: //GridEye4 Values
   1030                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye4.Raw,
   1031                                            GridMeasure.GridEye4.TempC,GridMeasureScaled.GridEye4.TempC,
   1032                                            GridMeasure.GridEye4.TempF,GridMeasureScaled.GridEye4.TempF,
   1033                                            GridMeasure.GridEye4.RawC );
   \                     ??RoadBrd_ParseString_123: (+1)
   \   00000A78   0xF8BD 0x01CE      LDRH     R0,[SP, #+462]
   \   00000A7C   0x9003             STR      R0,[SP, #+12]
   \   00000A7E   0xA8DF             ADD      R0,SP,#+892
   \   00000A80   0x1CC0             ADDS     R0,R0,#+3
   \   00000A82   0x9002             STR      R0,[SP, #+8]
   \   00000A84   0xA86F             ADD      R0,SP,#+444
   \   00000A86   0x1CC0             ADDS     R0,R0,#+3
   \   00000A88   0x9001             STR      R0,[SP, #+4]
   \   00000A8A   0xA8DE             ADD      R0,SP,#+888
   \   00000A8C   0x9000             STR      R0,[SP, #+0]
   \   00000A8E   0xAB6E             ADD      R3,SP,#+440
   \   00000A90   0xF50D 0x72E3      ADD      R2,SP,#+454
   \   00000A94   0xF8DF 0x1AD0      LDR.W    R1,??RoadBrd_ParseString_101+0x4
   \   00000A98   0xA80F             ADD      R0,SP,#+60
   \   00000A9A   0x.... 0x....      BL       sprintf
   1034                                    //                        sprintf( (char *)tempBffr2, "     Grid 36 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye4.Raw,
   1035                                    //                                                                                               GridMeasure.GridEye4.TempC,
   1036                                    //                                                                                               GridMeasure.GridEye4.TempF,
   1037                                    //                                                                                               GridMeasure.GridEye4.RawC );
   1038                                    break;
   \   00000A9E   0xE04E             B.N      ??RoadBrd_ParseString_129
   1039                                  case 5: //GridEye5 Values
   1040                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye5.Raw,
   1041                                            GridMeasure.GridEye5.TempC,GridMeasureScaled.GridEye5.TempC,
   1042                                            GridMeasure.GridEye5.TempF,GridMeasureScaled.GridEye5.TempF,
   1043                                            GridMeasure.GridEye5.RawC );
   \                     ??RoadBrd_ParseString_126: (+1)
   \   00000AA0   0xF8BD 0x01E6      LDRH     R0,[SP, #+486]
   \   00000AA4   0x9003             STR      R0,[SP, #+12]
   \   00000AA6   0xA8E5             ADD      R0,SP,#+916
   \   00000AA8   0x1CC0             ADDS     R0,R0,#+3
   \   00000AAA   0x9002             STR      R0,[SP, #+8]
   \   00000AAC   0xA875             ADD      R0,SP,#+468
   \   00000AAE   0x1CC0             ADDS     R0,R0,#+3
   \   00000AB0   0x9001             STR      R0,[SP, #+4]
   \   00000AB2   0xA8E4             ADD      R0,SP,#+912
   \   00000AB4   0x9000             STR      R0,[SP, #+0]
   \   00000AB6   0xAB74             ADD      R3,SP,#+464
   \   00000AB8   0xF50D 0x72EF      ADD      R2,SP,#+478
   \   00000ABC   0xF8DF 0x1AA8      LDR.W    R1,??RoadBrd_ParseString_101+0x4
   \   00000AC0   0xA80F             ADD      R0,SP,#+60
   \   00000AC2   0x.... 0x....      BL       sprintf
   1044                                    //                        sprintf( (char *)tempBffr2, "     Grid 37 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye5.Raw,
   1045                                    //                                                                                               GridMeasure.GridEye5.TempC,
   1046                                    //                                                                                               GridMeasure.GridEye5.TempF,
   1047                                    //                                                                                               GridMeasure.GridEye5.RawC );
   1048                                    break;
   \   00000AC6   0xE03A             B.N      ??RoadBrd_ParseString_129
   1049                                  case 6: //GridEye6 Values
   1050                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye6.Raw,
   1051                                            GridMeasure.GridEye6.TempC,GridMeasureScaled.GridEye6.TempC,
   1052                                            GridMeasure.GridEye6.TempF,GridMeasureScaled.GridEye6.TempF,
   1053                                            GridMeasure.GridEye6.RawC );
   \                     ??RoadBrd_ParseString_125: (+1)
   \   00000AC8   0xF8BD 0x01FE      LDRH     R0,[SP, #+510]
   \   00000ACC   0x9003             STR      R0,[SP, #+12]
   \   00000ACE   0xA8EB             ADD      R0,SP,#+940
   \   00000AD0   0x1CC0             ADDS     R0,R0,#+3
   \   00000AD2   0x9002             STR      R0,[SP, #+8]
   \   00000AD4   0xA87B             ADD      R0,SP,#+492
   \   00000AD6   0x1CC0             ADDS     R0,R0,#+3
   \   00000AD8   0x9001             STR      R0,[SP, #+4]
   \   00000ADA   0xA8EA             ADD      R0,SP,#+936
   \   00000ADC   0x9000             STR      R0,[SP, #+0]
   \   00000ADE   0xAB7A             ADD      R3,SP,#+488
   \   00000AE0   0xF50D 0x72FB      ADD      R2,SP,#+502
   \   00000AE4   0xF8DF 0x1A80      LDR.W    R1,??RoadBrd_ParseString_101+0x4
   \   00000AE8   0xA80F             ADD      R0,SP,#+60
   \   00000AEA   0x.... 0x....      BL       sprintf
   1054                                    //                        sprintf( (char *)tempBffr2, "     Grid 38 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye6.Raw,
   1055                                    //                                                                                               GridMeasure.GridEye6.TempC,
   1056                                    //                                                                                               GridMeasure.GridEye6.TempF,
   1057                                    //                                                                                               GridMeasure.GridEye6.RawC );
   1058                                    break;
   \   00000AEE   0xE026             B.N      ??RoadBrd_ParseString_129
   1059                                  case 7: //GridEye7 Values
   1060                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye7.Raw,
   1061                                            GridMeasure.GridEye7.TempC,GridMeasureScaled.GridEye7.TempC,
   1062                                            GridMeasure.GridEye7.TempF,GridMeasureScaled.GridEye7.TempF,
   1063                                            GridMeasure.GridEye7.RawC );
   \                     ??RoadBrd_ParseString_128: (+1)
   \   00000AF0   0xF8BD 0x0216      LDRH     R0,[SP, #+534]
   \   00000AF4   0x9003             STR      R0,[SP, #+12]
   \   00000AF6   0xA8F1             ADD      R0,SP,#+964
   \   00000AF8   0x1CC0             ADDS     R0,R0,#+3
   \   00000AFA   0x9002             STR      R0,[SP, #+8]
   \   00000AFC   0xA881             ADD      R0,SP,#+516
   \   00000AFE   0x1CC0             ADDS     R0,R0,#+3
   \   00000B00   0x9001             STR      R0,[SP, #+4]
   \   00000B02   0xA8F0             ADD      R0,SP,#+960
   \   00000B04   0x9000             STR      R0,[SP, #+0]
   \   00000B06   0xAB80             ADD      R3,SP,#+512
   \   00000B08   0xAA83             ADD      R2,SP,#+524
   \   00000B0A   0x1C92             ADDS     R2,R2,#+2
   \   00000B0C   0xF8DF 0x1A58      LDR.W    R1,??RoadBrd_ParseString_101+0x4
   \   00000B10   0xA80F             ADD      R0,SP,#+60
   \   00000B12   0x.... 0x....      BL       sprintf
   1064                                    //                        sprintf( (char *)tempBffr2, "     Grid 39 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye7.Raw,
   1065                                    //                                                                                               GridMeasure.GridEye7.TempC,
   1066                                    //                                                                                               GridMeasure.GridEye7.TempF,
   1067                                    //                                                                                               GridMeasure.GridEye7.RawC );
   1068                                    break;
   \   00000B16   0xE012             B.N      ??RoadBrd_ParseString_129
   1069                                  case 8: //GridEye8 Values
   1070                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye8.Raw,
   1071                                            GridMeasure.GridEye8.TempC,GridMeasureScaled.GridEye8.TempC,
   1072                                            GridMeasure.GridEye8.TempF,GridMeasureScaled.GridEye8.TempF,
   1073                                            GridMeasure.GridEye8.RawC );
   \                     ??RoadBrd_ParseString_127: (+1)
   \   00000B18   0xF8BD 0x022E      LDRH     R0,[SP, #+558]
   \   00000B1C   0x9003             STR      R0,[SP, #+12]
   \   00000B1E   0xA8F7             ADD      R0,SP,#+988
   \   00000B20   0x1CC0             ADDS     R0,R0,#+3
   \   00000B22   0x9002             STR      R0,[SP, #+8]
   \   00000B24   0xA887             ADD      R0,SP,#+540
   \   00000B26   0x1CC0             ADDS     R0,R0,#+3
   \   00000B28   0x9001             STR      R0,[SP, #+4]
   \   00000B2A   0xA8F6             ADD      R0,SP,#+984
   \   00000B2C   0x9000             STR      R0,[SP, #+0]
   \   00000B2E   0xAB86             ADD      R3,SP,#+536
   \   00000B30   0xAA89             ADD      R2,SP,#+548
   \   00000B32   0x1C92             ADDS     R2,R2,#+2
   \   00000B34   0xF8DF 0x1A30      LDR.W    R1,??RoadBrd_ParseString_101+0x4
   \   00000B38   0xA80F             ADD      R0,SP,#+60
   \   00000B3A   0x.... 0x....      BL       sprintf
   1074                                    //                        sprintf( (char *)tempBffr2, "     Grid 40 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye8.Raw,
   1075                                    //                                                                                               GridMeasure.GridEye8.TempC,
   1076                                    //                                                                                               GridMeasure.GridEye8.TempF,
   1077                                    //                                                                                               GridMeasure.GridEye8.RawC );
   1078                                    break;
   1079                                  } // EndSwitch(x)
   1080                                  // Now Print String.
   1081           #ifdef NUCLEO
   1082                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1083          #else
   1084                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \                     ??RoadBrd_ParseString_129: (+1)
   \   00000B3E   0xA90F             ADD      R1,SP,#+60
   \   00000B40   0x2000             MOVS     R0,#+0
   \   00000B42   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000B46   0x0006             MOVS     R6,R0
   1085          #endif
   1086                                  if (Status != HAL_OK)
   \   00000B48   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000B4A   0x2E00             CMP      R6,#+0
   \   00000B4C   0xD003             BEQ.N    ??RoadBrd_ParseString_130
   1087                                    return Status;
   \   00000B4E   0x0030             MOVS     R0,R6
   \   00000B50   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000B52   0xF002 0xBF21      B.W      ??RoadBrd_ParseString_4
   1088                               } // EndFor(x=0; x<9; x++)
   \                     ??RoadBrd_ParseString_130: (+1)
   \   00000B56   0x1C7F             ADDS     R7,R7,#+1
   \   00000B58   0xE729             B.N      ??RoadBrd_ParseString_118
   1089                                sprintf( (char *)tempBffr2, "     SHNT VLTG DATA: " );
   \                     ??RoadBrd_ParseString_119: (+1)
   \   00000B5A   0xF8DF 0x1B4C      LDR.W    R1,??RoadBrd_ParseString_103
   \   00000B5E   0xA80F             ADD      R0,SP,#+60
   \   00000B60   0x.... 0x....      BL       sprintf
   1090                                strcat( (char *)tempBffr2, (char *)VMeasure.Raw );
   \   00000B64   0xA945             ADD      R1,SP,#+276
   \   00000B66   0xA80F             ADD      R0,SP,#+60
   \   00000B68   0x.... 0x....      BL       strcat
   1091                                strcat( (char *)tempBffr2, "\r\n" );
   \   00000B6C   0xA112             ADR.N    R1,??RoadBrd_ParseString_104  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000B6E   0xA80F             ADD      R0,SP,#+60
   \   00000B70   0x.... 0x....      BL       strcat
   1092                              } //Endif(Status == HAL_OK)
   1093                              else
   1094                                break;
   1095                              sprintf( (char *)tempBffr2, "     COMPLETE.\r\n" );
   \   00000B74   0xF8DF 0x1B38      LDR.W    R1,??RoadBrd_ParseString_103+0x8
   \   00000B78   0xA80F             ADD      R0,SP,#+60
   \   00000B7A   0x.... 0x....      BL       sprintf
   1096                              break;
   \   00000B7E   0xE019             B.N      ??RoadBrd_ParseString_105
   \                     ??RoadBrd_ParseString_116: (+1)
   \   00000B80   0xE018             B.N      ??RoadBrd_ParseString_105
   1097          //------------------ B1 Command...Reset Cool Eye/Grid Eye Sensor..... 
   1098                            case '1':
   1099                              // Reset Cool Eye/Grid Eye Sensor.
   1100                              Status = RoadBrd_GridEyeReset();
   \                     ??RoadBrd_ParseString_107: (+1)
   \   00000B82   0x.... 0x....      BL       RoadBrd_GridEyeReset
   \   00000B86   0x0006             MOVS     R6,R0
   1101                              // Is this a BLE Operation?
   1102                              if ( BLE_Flag )
   \   00000B88   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000B8A   0x2D00             CMP      R5,#+0
   \   00000B8C   0xD00A             BEQ.N    ??RoadBrd_ParseString_131
   1103                              {
   1104                                // Yes...Build and Send BLE Response NOW.
   1105                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00000B8E   0xF8DF 0x164C      LDR.W    R1,??RoadBrd_ParseString_56
   \   00000B92   0xA80F             ADD      R0,SP,#+60
   \   00000B94   0x.... 0x....      BL       strcpy
   1106                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000B98   0xA80F             ADD      R0,SP,#+60
   \   00000B9A   0x.... 0x....      BL       strlen
   \   00000B9E   0xA90F             ADD      R1,SP,#+60
   \   00000BA0   0x.... 0x....      BL       BGM111_Transmit
   1107                              }
   1108          
   1109                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_131: (+1)
   \   00000BA4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000BA6   0x2E00             CMP      R6,#+0
   \   00000BA8   0xD104             BNE.N    ??RoadBrd_ParseString_132
   1110                              {
   1111                                strcpy( (char *)tempBffr2, "Cool Eye/Grid Eye Sensor: Reset Complete.\r\n");;
   \   00000BAA   0xF8DF 0x1DD0      LDR.W    R1,??RoadBrd_ParseString_133
   \   00000BAE   0xA80F             ADD      R0,SP,#+60
   \   00000BB0   0x.... 0x....      BL       strcpy
   1112                              }
   1113                              break;
   1114                          } //EndSwitch
   1115                        } //EndElse (Size == 1)
   1116                        break;
   \                     ??RoadBrd_ParseString_132: (+1)
   \                     ??RoadBrd_ParseString_105: (+1)
   \   00000BB4   0xF002 0xBE76      B.W      ??RoadBrd_ParseString_27
   \                     ??RoadBrd_ParseString_104:
   \   00000BB8   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
   1117          //**************************************************************************************************
   1118                      case 'C':
   1119                        // Read Voltage. 
   1120          //++++++++++++++++++++++++++++++++++++++++++  Voltage Monitor Commands.
   1121                        if (Size == 1)
   \                     ??RoadBrd_ParseString_14: (+1)
   \   00000BBC   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000BC0   0xF1B8 0x0F01      CMP      R8,#+1
   \   00000BC4   0xD150             BNE.N    ??RoadBrd_ParseString_134
   1122                        {
   1123          //------------------ C Command       
   1124                          // Read Bus Voltage and return as 2 Byte Field.
   1125                          Status = RoadBrd_VMonitor_RdVoltage( &VMeasure );
   \   00000BC6   0xA843             ADD      R0,SP,#+268
   \   00000BC8   0x.... 0x....      BL       RoadBrd_VMonitor_RdVoltage
   \   00000BCC   0x0006             MOVS     R6,R0
   1126                          if (Status == HAL_OK)
   \   00000BCE   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000BD0   0x2E00             CMP      R6,#+0
   \   00000BD2   0xD103             BNE.N    ??RoadBrd_ParseString_135
   1127                            Status = RoadBrd_VMonitor_RdVoltage_Scaled( &VMeasureScaled );
   \   00000BD4   0xA895             ADD      R0,SP,#+596
   \   00000BD6   0x.... 0x....      BL       RoadBrd_VMonitor_RdVoltage_Scaled
   \   00000BDA   0x0006             MOVS     R6,R0
   1128                          if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_135: (+1)
   \   00000BDC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000BDE   0x2E00             CMP      R6,#+0
   \   00000BE0   0xD126             BNE.N    ??RoadBrd_ParseString_136
   1129                          {
   1130                            // Send string to UART..
   1131                            strcpy( (char *)tempBffr2, "Voltage Monitor/Read Bus Voltage...\r\n");
   \   00000BE2   0xF8DF 0x1E04      LDR.W    R1,??RoadBrd_ParseString_137
   \   00000BE6   0xA80F             ADD      R0,SP,#+60
   \   00000BE8   0x.... 0x....      BL       strcpy
   1132          #ifdef NUCLEO
   1133                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1134          #else
   1135                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000BEC   0xA90F             ADD      R1,SP,#+60
   \   00000BEE   0x2000             MOVS     R0,#+0
   \   00000BF0   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000BF4   0x0006             MOVS     R6,R0
   1136          #endif
   1137                            if (Status != HAL_OK)
   \   00000BF6   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000BF8   0x2E00             CMP      R6,#+0
   \   00000BFA   0xD003             BEQ.N    ??RoadBrd_ParseString_138
   1138                            return Status;
   \   00000BFC   0x0030             MOVS     R0,R6
   \   00000BFE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000C00   0xF002 0xBECA      B.W      ??RoadBrd_ParseString_4
   1139                            // NOW, Build Data String..
   1140                            sprintf( (char *)tempBffr2, "     BUS VOLTAGE DATA: " );
   \                     ??RoadBrd_ParseString_138: (+1)
   \   00000C04   0xF8DF 0x1DE4      LDR.W    R1,??RoadBrd_ParseString_137+0x4
   \   00000C08   0xA80F             ADD      R0,SP,#+60
   \   00000C0A   0x.... 0x....      BL       sprintf
   1141                            strcat( (char *)tempBffr2, (char *)VMeasure.Raw );
   \   00000C0E   0xA945             ADD      R1,SP,#+276
   \   00000C10   0xA80F             ADD      R0,SP,#+60
   \   00000C12   0x.... 0x....      BL       strcat
   1142                            strcat( (char *)tempBffr2, "\r\n" );
   \   00000C16   0xA1D3             ADR.N    R1,??RoadBrd_ParseString_30+0x4  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000C18   0xA80F             ADD      R0,SP,#+60
   \   00000C1A   0x.... 0x....      BL       strcat
   1143                          }
   1144                          else
   1145                            break;
   1146          #ifdef NUCLEO
   1147                          Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1148          #else
   1149                          Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000C1E   0xA90F             ADD      R1,SP,#+60
   \   00000C20   0x2000             MOVS     R0,#+0
   \   00000C22   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000C26   0x0006             MOVS     R6,R0
   1150          #endif
   1151                          if (Status != HAL_OK)
   \   00000C28   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000C2A   0x2E00             CMP      R6,#+0
   \   00000C2C   0xD102             BNE.N    ??RoadBrd_ParseString_139
   \   00000C2E   0xE005             B.N      ??RoadBrd_ParseString_140
   \                     ??RoadBrd_ParseString_136: (+1)
   \   00000C30   0xF002 0xBE38      B.W      ??RoadBrd_ParseString_27
   1152                            return Status;
   \                     ??RoadBrd_ParseString_139: (+1)
   \   00000C34   0x0030             MOVS     R0,R6
   \   00000C36   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000C38   0xF002 0xBEAE      B.W      ??RoadBrd_ParseString_4
   1153                          // Is this a BLE Operation?
   1154                          if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_140: (+1)
   \   00000C3C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000C3E   0x2D00             CMP      R5,#+0
   \   00000C40   0xD00A             BEQ.N    ??RoadBrd_ParseString_141
   1155                          {
   1156                            // Yes...Build and Send BLE Response NOW.
   1157                            strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00000C42   0xF8DF 0x1598      LDR.W    R1,??RoadBrd_ParseString_56
   \   00000C46   0xA80F             ADD      R0,SP,#+60
   \   00000C48   0x.... 0x....      BL       strcpy
   1158                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000C4C   0xA80F             ADD      R0,SP,#+60
   \   00000C4E   0x.... 0x....      BL       strlen
   \   00000C52   0xA90F             ADD      R1,SP,#+60
   \   00000C54   0x.... 0x....      BL       BGM111_Transmit
   1159                          }
   1160                          // Now calculate Bus Voltage.
   1161                          sprintf( (char *)tempBffr2, "     Bus Voltage: %s/%s\r\n", (char *)VMeasure.Voltage, (char *)VMeasureScaled.Voltage );
   \                     ??RoadBrd_ParseString_141: (+1)
   \   00000C58   0xAB95             ADD      R3,SP,#+596
   \   00000C5A   0xAA43             ADD      R2,SP,#+268
   \   00000C5C   0xF8DF 0x1DC4      LDR.W    R1,??RoadBrd_ParseString_142
   \   00000C60   0xA80F             ADD      R0,SP,#+60
   \   00000C62   0x.... 0x....      BL       sprintf
   \   00000C66   0xE192             B.N      ??RoadBrd_ParseString_143
   1162                        }
   1163                        else
   1164                        {
   1165                          switch( tempBffr[1] )
   \                     ??RoadBrd_ParseString_134: (+1)
   \   00000C68   0x7860             LDRB     R0,[R4, #+1]
   \   00000C6A   0x2830             CMP      R0,#+48
   \   00000C6C   0xD024             BEQ.N    ??RoadBrd_ParseString_144
   \   00000C6E   0x2831             CMP      R0,#+49
   \   00000C70   0xD072             BEQ.N    ??RoadBrd_ParseString_145
   \   00000C72   0x2832             CMP      R0,#+50
   \   00000C74   0xF000 0x80C8      BEQ.W    ??RoadBrd_ParseString_146
   \   00000C78   0x2833             CMP      R0,#+51
   \   00000C7A   0xF000 0x811B      BEQ.W    ??RoadBrd_ParseString_147
   \   00000C7E   0x2849             CMP      R0,#+73
   \   00000C80   0xF040 0x8180      BNE.W    ??RoadBrd_ParseString_148
   1166                          {
   1167          //------------------ CI Command       
   1168                            case 'I':
   1169                              // Initialize and load Calibration Register.
   1170                              // Read Calibration Value first.
   1171                              Status = RoadBrd_Init_VMonitor();
   \                     ??RoadBrd_ParseString_149: (+1)
   \   00000C84   0x.... 0x....      BL       RoadBrd_Init_VMonitor
   \   00000C88   0x0006             MOVS     R6,R0
   1172                              // Is this a BLE Operation?
   1173                              if ( BLE_Flag )
   \   00000C8A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000C8C   0x2D00             CMP      R5,#+0
   \   00000C8E   0xD00A             BEQ.N    ??RoadBrd_ParseString_150
   1174                              {
   1175                                // Yes...Build and Send BLE Response NOW.
   1176                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00000C90   0xF8DF 0x1548      LDR.W    R1,??RoadBrd_ParseString_56
   \   00000C94   0xA80F             ADD      R0,SP,#+60
   \   00000C96   0x.... 0x....      BL       strcpy
   1177                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000C9A   0xA80F             ADD      R0,SP,#+60
   \   00000C9C   0x.... 0x....      BL       strlen
   \   00000CA0   0xA90F             ADD      R1,SP,#+60
   \   00000CA2   0x.... 0x....      BL       BGM111_Transmit
   1178                              }
   1179                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_150: (+1)
   \   00000CA6   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000CA8   0x2E00             CMP      R6,#+0
   \   00000CAA   0xD104             BNE.N    ??RoadBrd_ParseString_151
   1180                              {
   1181                                strcpy( (char *)tempBffr2, "Voltage Monitor: Initialization Complete.\r\n");;
   \   00000CAC   0xF8DF 0x1DE4      LDR.W    R1,??RoadBrd_ParseString_152
   \   00000CB0   0xA80F             ADD      R0,SP,#+60
   \   00000CB2   0x.... 0x....      BL       strcpy
   1182                              }
   1183                              break;
   \                     ??RoadBrd_ParseString_151: (+1)
   \   00000CB6   0xE16A             B.N      ??RoadBrd_ParseString_143
   1184          //------------------ C0 Command...Read Shunt Voltage and return results.....
   1185                            case '0':
   1186                              // Read Shunt Voltage and return results.....
   1187                              Status = RoadBrd_VMonitor_RdShntVltg( &VMeasure );
   \                     ??RoadBrd_ParseString_144: (+1)
   \   00000CB8   0xA843             ADD      R0,SP,#+268
   \   00000CBA   0x.... 0x....      BL       RoadBrd_VMonitor_RdShntVltg
   \   00000CBE   0x0006             MOVS     R6,R0
   1188                              if (Status == HAL_OK)
   \   00000CC0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000CC2   0x2E00             CMP      R6,#+0
   \   00000CC4   0xD103             BNE.N    ??RoadBrd_ParseString_153
   1189                                Status = RoadBrd_VMonitor_RdShntVltg_Scaled( &VMeasureScaled );
   \   00000CC6   0xA895             ADD      R0,SP,#+596
   \   00000CC8   0x.... 0x....      BL       RoadBrd_VMonitor_RdShntVltg_Scaled
   \   00000CCC   0x0006             MOVS     R6,R0
   1190                              // Is this a BLE Operation?
   1191                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_153: (+1)
   \   00000CCE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000CD0   0x2D00             CMP      R5,#+0
   \   00000CD2   0xD00A             BEQ.N    ??RoadBrd_ParseString_154
   1192                              {
   1193                                // Yes...Build and Send BLE Response NOW.
   1194                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00000CD4   0xF8DF 0x1504      LDR.W    R1,??RoadBrd_ParseString_56
   \   00000CD8   0xA80F             ADD      R0,SP,#+60
   \   00000CDA   0x.... 0x....      BL       strcpy
   1195                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000CDE   0xA80F             ADD      R0,SP,#+60
   \   00000CE0   0x.... 0x....      BL       strlen
   \   00000CE4   0xA90F             ADD      R1,SP,#+60
   \   00000CE6   0x.... 0x....      BL       BGM111_Transmit
   1196                              }
   1197                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_154: (+1)
   \   00000CEA   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000CEC   0x2E00             CMP      R6,#+0
   \   00000CEE   0xD126             BNE.N    ??RoadBrd_ParseString_155
   1198                              {
   1199                                // Send string to UART..
   1200                                strcpy( (char *)tempBffr2, "Voltage Monitor/Shunt Voltage...\r\n");
   \   00000CF0   0xF8DF 0x17D4      LDR.W    R1,??RoadBrd_ParseString_87
   \   00000CF4   0xA80F             ADD      R0,SP,#+60
   \   00000CF6   0x.... 0x....      BL       strcpy
   1201          #ifdef NUCLEO
   1202                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1203          #else
   1204                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000CFA   0xA90F             ADD      R1,SP,#+60
   \   00000CFC   0x2000             MOVS     R0,#+0
   \   00000CFE   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000D02   0x0006             MOVS     R6,R0
   1205          #endif
   1206                                if (Status != HAL_OK)
   \   00000D04   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000D06   0x2E00             CMP      R6,#+0
   \   00000D08   0xD003             BEQ.N    ??RoadBrd_ParseString_156
   1207                                  return Status;
   \   00000D0A   0x0030             MOVS     R0,R6
   \   00000D0C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000D0E   0xF002 0xBE43      B.W      ??RoadBrd_ParseString_4
   1208                                // NOW, Build Data String..
   1209                                sprintf( (char *)tempBffr2, "     SHNT VLTG DATA: " );
   \                     ??RoadBrd_ParseString_156: (+1)
   \   00000D12   0xF8DF 0x1994      LDR.W    R1,??RoadBrd_ParseString_103
   \   00000D16   0xA80F             ADD      R0,SP,#+60
   \   00000D18   0x.... 0x....      BL       sprintf
   1210                                strcat( (char *)tempBffr2, (char *)VMeasure.Raw );
   \   00000D1C   0xA945             ADD      R1,SP,#+276
   \   00000D1E   0xA80F             ADD      R0,SP,#+60
   \   00000D20   0x.... 0x....      BL       strcat
   1211                                strcat( (char *)tempBffr2, "\r\n" );
   \   00000D24   0xA18F             ADR.N    R1,??RoadBrd_ParseString_30+0x4  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000D26   0xA80F             ADD      R0,SP,#+60
   \   00000D28   0x.... 0x....      BL       strcat
   1212                              }
   1213                              else
   1214                                break;
   1215          #ifdef NUCLEO
   1216                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1217          #else
   1218                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000D2C   0xA90F             ADD      R1,SP,#+60
   \   00000D2E   0x2000             MOVS     R0,#+0
   \   00000D30   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000D34   0x0006             MOVS     R6,R0
   1219          #endif
   1220                              if (Status != HAL_OK)
   \   00000D36   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000D38   0x2E00             CMP      R6,#+0
   \   00000D3A   0xD101             BNE.N    ??RoadBrd_ParseString_157
   \   00000D3C   0xE004             B.N      ??RoadBrd_ParseString_158
   \                     ??RoadBrd_ParseString_155: (+1)
   \   00000D3E   0xE126             B.N      ??RoadBrd_ParseString_143
   1221                                return Status;
   \                     ??RoadBrd_ParseString_157: (+1)
   \   00000D40   0x0030             MOVS     R0,R6
   \   00000D42   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000D44   0xF002 0xBE28      B.W      ??RoadBrd_ParseString_4
   1222                              // Now calculate Shunt Voltage.
   1223                              sprintf( (char *)tempBffr2, "     Shunt Voltage: %s/%s\r\n", (char *)VMeasure.Voltage, (char *)VMeasureScaled.Voltage );
   \                     ??RoadBrd_ParseString_158: (+1)
   \   00000D48   0xAB95             ADD      R3,SP,#+596
   \   00000D4A   0xAA43             ADD      R2,SP,#+268
   \   00000D4C   0xF8DF 0x1D94      LDR.W    R1,??RoadBrd_ParseString_159
   \   00000D50   0xA80F             ADD      R0,SP,#+60
   \   00000D52   0x.... 0x....      BL       sprintf
   1224                              break;
   \   00000D56   0xE11A             B.N      ??RoadBrd_ParseString_143
   1225          //------------------ C1 Command...Read Current and return results..... 
   1226                            case '1':
   1227                              // Read Current and return results.....
   1228                              Status = RoadBrd_VMonitor_RdCurrent( &CMeasure );
   \                     ??RoadBrd_ParseString_145: (+1)
   \   00000D58   0xA8C2             ADD      R0,SP,#+776
   \   00000D5A   0x.... 0x....      BL       RoadBrd_VMonitor_RdCurrent
   \   00000D5E   0x0006             MOVS     R6,R0
   1229                              if (Status == HAL_OK)
   \   00000D60   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000D62   0x2E00             CMP      R6,#+0
   \   00000D64   0xD104             BNE.N    ??RoadBrd_ParseString_160
   1230                                Status = RoadBrd_VMonitor_RdCurrent_Scaled( &CMeasureScaled );
   \   00000D66   0xA8FF             ADD      R0,SP,#+1020
   \   00000D68   0x3030             ADDS     R0,R0,#+48
   \   00000D6A   0x.... 0x....      BL       RoadBrd_VMonitor_RdCurrent_Scaled
   \   00000D6E   0x0006             MOVS     R6,R0
   1231                              // Is this a BLE Operation?
   1232                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_160: (+1)
   \   00000D70   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000D72   0x2D00             CMP      R5,#+0
   \   00000D74   0xD00A             BEQ.N    ??RoadBrd_ParseString_161
   1233                              {
   1234                                // Yes...Build and Send BLE Response NOW.
   1235                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00000D76   0xF8DF 0x1464      LDR.W    R1,??RoadBrd_ParseString_56
   \   00000D7A   0xA80F             ADD      R0,SP,#+60
   \   00000D7C   0x.... 0x....      BL       strcpy
   1236                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000D80   0xA80F             ADD      R0,SP,#+60
   \   00000D82   0x.... 0x....      BL       strlen
   \   00000D86   0xA90F             ADD      R1,SP,#+60
   \   00000D88   0x.... 0x....      BL       BGM111_Transmit
   1237                              }
   1238                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_161: (+1)
   \   00000D8C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000D8E   0x2E00             CMP      R6,#+0
   \   00000D90   0xD127             BNE.N    ??RoadBrd_ParseString_162
   1239                              {
   1240                                // Send string to UART..
   1241                                strcpy( (char *)tempBffr2, "Voltage Monitor/Read Current...\r\n");
   \   00000D92   0xF8DF 0x1DF0      LDR.W    R1,??RoadBrd_ParseString_163+0x4
   \   00000D96   0xA80F             ADD      R0,SP,#+60
   \   00000D98   0x.... 0x....      BL       strcpy
   1242          #ifdef NUCLEO
   1243                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1244          #else
   1245                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000D9C   0xA90F             ADD      R1,SP,#+60
   \   00000D9E   0x2000             MOVS     R0,#+0
   \   00000DA0   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000DA4   0x0006             MOVS     R6,R0
   1246          #endif
   1247                                if (Status != HAL_OK)
   \   00000DA6   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000DA8   0x2E00             CMP      R6,#+0
   \   00000DAA   0xD003             BEQ.N    ??RoadBrd_ParseString_164
   1248                                  return Status;
   \   00000DAC   0x0030             MOVS     R0,R6
   \   00000DAE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000DB0   0xF002 0xBDF2      B.W      ??RoadBrd_ParseString_4
   1249                                // NOW, Build Data String..
   1250                                sprintf( (char *)tempBffr2, "     CURRENT DATA: " );
   \                     ??RoadBrd_ParseString_164: (+1)
   \   00000DB4   0xF8DF 0x1DD0      LDR.W    R1,??RoadBrd_ParseString_163+0x8
   \   00000DB8   0xA80F             ADD      R0,SP,#+60
   \   00000DBA   0x.... 0x....      BL       sprintf
   1251                                strcat( (char *)tempBffr2, (char *)CMeasure.Raw );
   \   00000DBE   0xA9C4             ADD      R1,SP,#+784
   \   00000DC0   0x1C49             ADDS     R1,R1,#+1
   \   00000DC2   0xA80F             ADD      R0,SP,#+60
   \   00000DC4   0x.... 0x....      BL       strcat
   1252                                strcat( (char *)tempBffr2, "\r\n" );
   \   00000DC8   0xA166             ADR.N    R1,??RoadBrd_ParseString_30+0x4  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000DCA   0xA80F             ADD      R0,SP,#+60
   \   00000DCC   0x.... 0x....      BL       strcat
   1253                              }
   1254                              else
   1255                                break;
   1256          #ifdef NUCLEO
   1257                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1258          #else
   1259                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000DD0   0xA90F             ADD      R1,SP,#+60
   \   00000DD2   0x2000             MOVS     R0,#+0
   \   00000DD4   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000DD8   0x0006             MOVS     R6,R0
   1260          #endif
   1261                              if (Status != HAL_OK)
   \   00000DDA   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000DDC   0x2E00             CMP      R6,#+0
   \   00000DDE   0xD101             BNE.N    ??RoadBrd_ParseString_165
   \   00000DE0   0xE004             B.N      ??RoadBrd_ParseString_166
   \                     ??RoadBrd_ParseString_162: (+1)
   \   00000DE2   0xE0D4             B.N      ??RoadBrd_ParseString_143
   1262                                return Status;
   \                     ??RoadBrd_ParseString_165: (+1)
   \   00000DE4   0x0030             MOVS     R0,R6
   \   00000DE6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000DE8   0xF002 0xBDD6      B.W      ??RoadBrd_ParseString_4
   1263                              // Now calculate Current.
   1264                              sprintf( (char *)tempBffr2, "     Current: %s/%s\r\n", (char *)CMeasure.Current, (char *)CMeasureScaled.Current );
   \                     ??RoadBrd_ParseString_166: (+1)
   \   00000DEC   0xABFF             ADD      R3,SP,#+1020
   \   00000DEE   0x3330             ADDS     R3,R3,#+48
   \   00000DF0   0xAAC2             ADD      R2,SP,#+776
   \   00000DF2   0xF8DF 0x1D98      LDR.W    R1,??RoadBrd_ParseString_163+0xC
   \   00000DF6   0xA80F             ADD      R0,SP,#+60
   \   00000DF8   0x.... 0x....      BL       sprintf
   1265                              break;
   \   00000DFC   0xE0C7             B.N      ??RoadBrd_ParseString_143
   \   00000DFE   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_0:
   \   00000E00   0x........         DC32     Bypass
   \   00000E04   0x........         DC32     ?_0
   1266          //------------------ C2 Command...Read Power and return results.....     
   1267                            case '2':
   1268                              // Read Power and return results.....
   1269                              Status = RoadBrd_VMonitor_RdPower( &PMeasure );
   \                     ??RoadBrd_ParseString_146: (+1)
   \   00000E08   0xA8BE             ADD      R0,SP,#+760
   \   00000E0A   0x.... 0x....      BL       RoadBrd_VMonitor_RdPower
   \   00000E0E   0x0006             MOVS     R6,R0
   1270                              if (Status == HAL_OK)
   \   00000E10   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000E12   0x2E00             CMP      R6,#+0
   \   00000E14   0xD104             BNE.N    ??RoadBrd_ParseString_167
   1271                                Status = RoadBrd_VMonitor_RdPower_Scaled( &PMeasureScaled );
   \   00000E16   0xA8FF             ADD      R0,SP,#+1020
   \   00000E18   0x3020             ADDS     R0,R0,#+32
   \   00000E1A   0x.... 0x....      BL       RoadBrd_VMonitor_RdPower_Scaled
   \   00000E1E   0x0006             MOVS     R6,R0
   1272                              // Is this a BLE Operation?
   1273                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_167: (+1)
   \   00000E20   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000E22   0x2D00             CMP      R5,#+0
   \   00000E24   0xD00A             BEQ.N    ??RoadBrd_ParseString_168
   1274                              {
   1275                                // Yes...Build and Send BLE Response NOW.
   1276                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00000E26   0xF8DF 0x13B4      LDR.W    R1,??RoadBrd_ParseString_56
   \   00000E2A   0xA80F             ADD      R0,SP,#+60
   \   00000E2C   0x.... 0x....      BL       strcpy
   1277                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000E30   0xA80F             ADD      R0,SP,#+60
   \   00000E32   0x.... 0x....      BL       strlen
   \   00000E36   0xA90F             ADD      R1,SP,#+60
   \   00000E38   0x.... 0x....      BL       BGM111_Transmit
   1278                              }
   1279                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_168: (+1)
   \   00000E3C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000E3E   0x2E00             CMP      R6,#+0
   \   00000E40   0xD127             BNE.N    ??RoadBrd_ParseString_169
   1280                              {
   1281                                // Send string to UART..
   1282                                strcpy( (char *)tempBffr2, "Voltage Monitor/Read Power...\r\n");
   \   00000E42   0xF8DF 0x1D4C      LDR.W    R1,??RoadBrd_ParseString_163+0x10
   \   00000E46   0xA80F             ADD      R0,SP,#+60
   \   00000E48   0x.... 0x....      BL       strcpy
   1283          #ifdef NUCLEO
   1284                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1285          #else
   1286                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000E4C   0xA90F             ADD      R1,SP,#+60
   \   00000E4E   0x2000             MOVS     R0,#+0
   \   00000E50   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000E54   0x0006             MOVS     R6,R0
   1287          #endif
   1288                                if (Status != HAL_OK)
   \   00000E56   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000E58   0x2E00             CMP      R6,#+0
   \   00000E5A   0xD003             BEQ.N    ??RoadBrd_ParseString_170
   1289                                  return Status;
   \   00000E5C   0x0030             MOVS     R0,R6
   \   00000E5E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000E60   0xF002 0xBD9A      B.W      ??RoadBrd_ParseString_4
   1290                                // NOW, Build Data String..
   1291                                sprintf( (char *)tempBffr2, "     POWER DATA: " );
   \                     ??RoadBrd_ParseString_170: (+1)
   \   00000E64   0xF8DF 0x1D2C      LDR.W    R1,??RoadBrd_ParseString_163+0x14
   \   00000E68   0xA80F             ADD      R0,SP,#+60
   \   00000E6A   0x.... 0x....      BL       sprintf
   1292                                strcat( (char *)tempBffr2, (char *)PMeasure.Raw );
   \   00000E6E   0xA9C0             ADD      R1,SP,#+768
   \   00000E70   0x1C49             ADDS     R1,R1,#+1
   \   00000E72   0xA80F             ADD      R0,SP,#+60
   \   00000E74   0x.... 0x....      BL       strcat
   1293                                strcat( (char *)tempBffr2, "\r\n" );
   \   00000E78   0xA13A             ADR.N    R1,??RoadBrd_ParseString_30+0x4  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000E7A   0xA80F             ADD      R0,SP,#+60
   \   00000E7C   0x.... 0x....      BL       strcat
   1294                              }
   1295                              else
   1296                                break;
   1297          #ifdef NUCLEO
   1298                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1299          #else
   1300                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000E80   0xA90F             ADD      R1,SP,#+60
   \   00000E82   0x2000             MOVS     R0,#+0
   \   00000E84   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000E88   0x0006             MOVS     R6,R0
   1301          #endif
   1302                              if (Status != HAL_OK)
   \   00000E8A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000E8C   0x2E00             CMP      R6,#+0
   \   00000E8E   0xD101             BNE.N    ??RoadBrd_ParseString_171
   \   00000E90   0xE004             B.N      ??RoadBrd_ParseString_172
   \                     ??RoadBrd_ParseString_169: (+1)
   \   00000E92   0xE07C             B.N      ??RoadBrd_ParseString_143
   1303                                return Status;
   \                     ??RoadBrd_ParseString_171: (+1)
   \   00000E94   0x0030             MOVS     R0,R6
   \   00000E96   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000E98   0xF002 0xBD7E      B.W      ??RoadBrd_ParseString_4
   1304                              // Now calculate Power.
   1305                              sprintf( (char *)tempBffr2, "     Power: %s/%s\r\n", (char *)PMeasure.Power, (char *)PMeasureScaled.Power );
   \                     ??RoadBrd_ParseString_172: (+1)
   \   00000E9C   0xABFF             ADD      R3,SP,#+1020
   \   00000E9E   0x3320             ADDS     R3,R3,#+32
   \   00000EA0   0xAABE             ADD      R2,SP,#+760
   \   00000EA2   0xF8DF 0x1DE0      LDR.W    R1,??RoadBrd_ParseString_173
   \   00000EA6   0xA80F             ADD      R0,SP,#+60
   \   00000EA8   0x.... 0x....      BL       sprintf
   1306                              break;
   \   00000EAC   0xE06F             B.N      ??RoadBrd_ParseString_143
   \   00000EAE   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_25:
   \   00000EB0   0x........         DC32     ?_1
   1307          //------------------ C3 Command...Read Bus Voltage and return results.....
   1308                            case '3':
   1309                              // Read Bus Voltage and return results.....
   1310                              Status = RoadBrd_VMonitor_RdVoltage( &VMeasure );
   \                     ??RoadBrd_ParseString_147: (+1)
   \   00000EB4   0xA843             ADD      R0,SP,#+268
   \   00000EB6   0x.... 0x....      BL       RoadBrd_VMonitor_RdVoltage
   \   00000EBA   0x0006             MOVS     R6,R0
   1311                              if (Status == HAL_OK)
   \   00000EBC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000EBE   0x2E00             CMP      R6,#+0
   \   00000EC0   0xD103             BNE.N    ??RoadBrd_ParseString_174
   1312                                Status = RoadBrd_VMonitor_RdVoltage_Scaled( &VMeasureScaled );
   \   00000EC2   0xA895             ADD      R0,SP,#+596
   \   00000EC4   0x.... 0x....      BL       RoadBrd_VMonitor_RdVoltage_Scaled
   \   00000EC8   0x0006             MOVS     R6,R0
   1313                                
   1314                              // Is this a BLE Operation?
   1315                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_174: (+1)
   \   00000ECA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000ECC   0x2D00             CMP      R5,#+0
   \   00000ECE   0xD009             BEQ.N    ??RoadBrd_ParseString_175
   1316                              {
   1317                                // Yes...Build and Send BLE Response NOW.
   1318                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00000ED0   0x49C2             LDR.N    R1,??RoadBrd_ParseString_56
   \   00000ED2   0xA80F             ADD      R0,SP,#+60
   \   00000ED4   0x.... 0x....      BL       strcpy
   1319                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000ED8   0xA80F             ADD      R0,SP,#+60
   \   00000EDA   0x.... 0x....      BL       strlen
   \   00000EDE   0xA90F             ADD      R1,SP,#+60
   \   00000EE0   0x.... 0x....      BL       BGM111_Transmit
   1320                              }
   1321                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_175: (+1)
   \   00000EE4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000EE6   0x2E00             CMP      R6,#+0
   \   00000EE8   0xD12C             BNE.N    ??RoadBrd_ParseString_176
   1322                              {
   1323                                // Send string to UART..
   1324                                strcpy( (char *)tempBffr2, "Voltage Monitor/Read Bus Voltage...\r\n");
   \   00000EEA   0xF8DF 0x1AFC      LDR.W    R1,??RoadBrd_ParseString_137
   \   00000EEE   0xA80F             ADD      R0,SP,#+60
   \   00000EF0   0x.... 0x....      BL       strcpy
   1325          #ifdef NUCLEO
   1326                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1327          #else
   1328                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000EF4   0xA90F             ADD      R1,SP,#+60
   \   00000EF6   0x2000             MOVS     R0,#+0
   \   00000EF8   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000EFC   0x0006             MOVS     R6,R0
   1329          #endif
   1330                                if (Status != HAL_OK)
   \   00000EFE   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000F00   0x2E00             CMP      R6,#+0
   \   00000F02   0xD009             BEQ.N    ??RoadBrd_ParseString_177
   1331                                  return Status;
   \   00000F04   0x0030             MOVS     R0,R6
   \   00000F06   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000F08   0xF002 0xBD46      B.W      ??RoadBrd_ParseString_4
   \                     ??RoadBrd_ParseString_26:
   \   00000F0C   0x........         DC32     ?_2
   \   00000F10   0x........         DC32     ?_3
   \   00000F14   0x........         DC32     ?_4
   1332                                // NOW, Build Data String..
   1333                                sprintf( (char *)tempBffr2, "     BUS VOLTAGE DATA: " );
   \                     ??RoadBrd_ParseString_177: (+1)
   \   00000F18   0xF8DF 0x1AD0      LDR.W    R1,??RoadBrd_ParseString_137+0x4
   \   00000F1C   0xA80F             ADD      R0,SP,#+60
   \   00000F1E   0x.... 0x....      BL       sprintf
   1334                                strcat( (char *)tempBffr2, (char *)VMeasure.Raw );
   \   00000F22   0xA945             ADD      R1,SP,#+276
   \   00000F24   0xA80F             ADD      R0,SP,#+60
   \   00000F26   0x.... 0x....      BL       strcat
   1335                                strcat( (char *)tempBffr2, "\r\n" );
   \   00000F2A   0xA10E             ADR.N    R1,??RoadBrd_ParseString_30+0x4  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000F2C   0xA80F             ADD      R0,SP,#+60
   \   00000F2E   0x.... 0x....      BL       strcat
   1336                              }
   1337                              else
   1338                                break;
   1339          #ifdef NUCLEO
   1340                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1341          #else
   1342                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000F32   0xA90F             ADD      R1,SP,#+60
   \   00000F34   0x2000             MOVS     R0,#+0
   \   00000F36   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000F3A   0x0006             MOVS     R6,R0
   1343          #endif
   1344                              if (Status != HAL_OK)
   \   00000F3C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000F3E   0x2E00             CMP      R6,#+0
   \   00000F40   0xD101             BNE.N    ??RoadBrd_ParseString_178
   \   00000F42   0xE004             B.N      ??RoadBrd_ParseString_179
   \                     ??RoadBrd_ParseString_176: (+1)
   \   00000F44   0xE023             B.N      ??RoadBrd_ParseString_143
   1345                                return Status;
   \                     ??RoadBrd_ParseString_178: (+1)
   \   00000F46   0x0030             MOVS     R0,R6
   \   00000F48   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000F4A   0xF002 0xBD25      B.W      ??RoadBrd_ParseString_4
   1346                              // Now calculate Bus Voltage.
   1347                              sprintf( (char *)tempBffr2, "     Bus Voltage: %s/%s\r\n", (char *)VMeasure.Voltage, (char *)VMeasureScaled.Voltage );
   \                     ??RoadBrd_ParseString_179: (+1)
   \   00000F4E   0xAB95             ADD      R3,SP,#+596
   \   00000F50   0xAA43             ADD      R2,SP,#+268
   \   00000F52   0xF8DF 0x1AD0      LDR.W    R1,??RoadBrd_ParseString_142
   \   00000F56   0xA80F             ADD      R0,SP,#+60
   \   00000F58   0x.... 0x....      BL       sprintf
   1348                              break;
   \   00000F5C   0xE017             B.N      ??RoadBrd_ParseString_143
   \   00000F5E   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_30:
   \   00000F60   0x........         DC32     ?_5
   \   00000F64   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
   \   00000F68   0x........         DC32     ?_7
   \   00000F6C   0x........         DC32     ?_8
   \   00000F70   0x........         DC32     ?_9
   \   00000F74   0x........         DC32     ?_10
   \   00000F78   0x........         DC32     ?_11
   \   00000F7C   0x........         DC32     ?_12
   \   00000F80   0x........         DC32     ?_13
   1349                            default:
   1350                              strcpy( (char *)tempBffr2, "ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_148: (+1)
   \   00000F84   0xF8DF 0x1430      LDR.W    R1,??RoadBrd_ParseString_75+0x14
   \   00000F88   0xA80F             ADD      R0,SP,#+60
   \   00000F8A   0x.... 0x....      BL       strcpy
   1351                              break;
   1352                          } //EndSwitch
   1353                        } //EndElse (Size == 1)
   1354                        break;
   \                     ??RoadBrd_ParseString_143: (+1)
   \   00000F8E   0xF002 0xBC89      B.W      ??RoadBrd_ParseString_27
   1355          //**************************************************************************************************
   1356                      case 'D':
   1357                        // Read Humidity. 
   1358                        if (Size == 1)
   \                     ??RoadBrd_ParseString_15: (+1)
   \   00000F92   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000F96   0xF1B8 0x0F01      CMP      R8,#+1
   \   00000F9A   0xD169             BNE.N    ??RoadBrd_ParseString_180
   1359                        {
   1360          //------------------ D Command: Read Humidity Values      
   1361                          // Read Humidity Sensor sensor and return Humidity results....
   1362                          Status = RoadBrd_Humidity_ReadHumidity( &HMeasure );
   \   00000F9C   0xA851             ADD      R0,SP,#+324
   \   00000F9E   0x.... 0x....      BL       RoadBrd_Humidity_ReadHumidity
   \   00000FA2   0x0006             MOVS     R6,R0
   1363                          if (Status == HAL_OK)
   \   00000FA4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000FA6   0x2E00             CMP      R6,#+0
   \   00000FA8   0xD103             BNE.N    ??RoadBrd_ParseString_181
   1364                            Status = RoadBrd_Humidity_ReadHumidity_Scaled( &HMeasureScaled );
   \   00000FAA   0xA8FC             ADD      R0,SP,#+1008
   \   00000FAC   0x.... 0x....      BL       RoadBrd_Humidity_ReadHumidity_Scaled
   \   00000FB0   0x0006             MOVS     R6,R0
   1365                          // Is this a BLE Operation?
   1366                          if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_181: (+1)
   \   00000FB2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000FB4   0x2D00             CMP      R5,#+0
   \   00000FB6   0xD009             BEQ.N    ??RoadBrd_ParseString_182
   1367                          {
   1368                            // Yes...Build and Send BLE Response NOW.
   1369                            strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00000FB8   0x4988             LDR.N    R1,??RoadBrd_ParseString_56
   \   00000FBA   0xA80F             ADD      R0,SP,#+60
   \   00000FBC   0x.... 0x....      BL       strcpy
   1370                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000FC0   0xA80F             ADD      R0,SP,#+60
   \   00000FC2   0x.... 0x....      BL       strlen
   \   00000FC6   0xA90F             ADD      R1,SP,#+60
   \   00000FC8   0x.... 0x....      BL       BGM111_Transmit
   1371                          }
   1372                          if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_182: (+1)
   \   00000FCC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000FCE   0x2E00             CMP      R6,#+0
   \   00000FD0   0xD126             BNE.N    ??RoadBrd_ParseString_183
   1373                          {
   1374                            // Send string to UART..
   1375                            strcpy( (char *)tempBffr2, "Humidity SENSOR...\r\n");
   \   00000FD2   0xF8DF 0x1DCC      LDR.W    R1,??RoadBrd_ParseString_184
   \   00000FD6   0xA80F             ADD      R0,SP,#+60
   \   00000FD8   0x.... 0x....      BL       strcpy
   1376          #ifdef NUCLEO
   1377                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1378          #else
   1379                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000FDC   0xA90F             ADD      R1,SP,#+60
   \   00000FDE   0x2000             MOVS     R0,#+0
   \   00000FE0   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000FE4   0x0006             MOVS     R6,R0
   1380          #endif
   1381                            if (Status != HAL_OK)
   \   00000FE6   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000FE8   0x2E00             CMP      R6,#+0
   \   00000FEA   0xD003             BEQ.N    ??RoadBrd_ParseString_185
   1382                              return Status;
   \   00000FEC   0x0030             MOVS     R0,R6
   \   00000FEE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000FF0   0xF002 0xBCD2      B.W      ??RoadBrd_ParseString_4
   1383                            // NOW, Build Data String..
   1384                            sprintf( (char *)tempBffr2, "     Humidity DATA: " );
   \                     ??RoadBrd_ParseString_185: (+1)
   \   00000FF4   0xF8DF 0x1DAC      LDR.W    R1,??RoadBrd_ParseString_184+0x4
   \   00000FF8   0xA80F             ADD      R0,SP,#+60
   \   00000FFA   0x.... 0x....      BL       sprintf
   1385                            strcat( (char *)tempBffr2, (char *)HMeasure.HRaw );
   \   00000FFE   0xA953             ADD      R1,SP,#+332
   \   00001000   0xA80F             ADD      R0,SP,#+60
   \   00001002   0x.... 0x....      BL       strcat
   1386                            strcat( (char *)tempBffr2, "\r\n" );
   \   00001006   0xA1CE             ADR.N    R1,??RoadBrd_ParseString_71+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001008   0xA80F             ADD      R0,SP,#+60
   \   0000100A   0x.... 0x....      BL       strcat
   1387                          }
   1388                          else
   1389                            break;
   1390          #ifdef NUCLEO
   1391                          Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1392          #else
   1393                          Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000100E   0xA90F             ADD      R1,SP,#+60
   \   00001010   0x2000             MOVS     R0,#+0
   \   00001012   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001016   0x0006             MOVS     R6,R0
   1394          #endif
   1395                          if (Status != HAL_OK)
   \   00001018   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000101A   0x2E00             CMP      R6,#+0
   \   0000101C   0xD102             BNE.N    ??RoadBrd_ParseString_186
   \   0000101E   0xE005             B.N      ??RoadBrd_ParseString_187
   \                     ??RoadBrd_ParseString_183: (+1)
   \   00001020   0xF002 0xBC40      B.W      ??RoadBrd_ParseString_27
   1396                            return Status;
   \                     ??RoadBrd_ParseString_186: (+1)
   \   00001024   0x0030             MOVS     R0,R6
   \   00001026   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001028   0xF002 0xBCB6      B.W      ??RoadBrd_ParseString_4
   1397                          // NOW, Build Data String..
   1398                          sprintf( (char *)tempBffr2, "     Humidity DATA(Decimal): %d\r\n", HMeasure.HRawC );
   \                     ??RoadBrd_ParseString_187: (+1)
   \   0000102C   0xF8BD 0x2154      LDRH     R2,[SP, #+340]
   \   00001030   0xF8DF 0x1D74      LDR.W    R1,??RoadBrd_ParseString_184+0x8
   \   00001034   0xA80F             ADD      R0,SP,#+60
   \   00001036   0x.... 0x....      BL       sprintf
   1399          #ifdef NUCLEO
   1400                          Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1401          #else
   1402                          Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000103A   0xA90F             ADD      R1,SP,#+60
   \   0000103C   0x2000             MOVS     R0,#+0
   \   0000103E   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001042   0x0006             MOVS     R6,R0
   1403          #endif
   1404                          if (Status != HAL_OK)
   \   00001044   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001046   0x2E00             CMP      R6,#+0
   \   00001048   0xD003             BEQ.N    ??RoadBrd_ParseString_188
   1405                            return Status;
   \   0000104A   0x0030             MOVS     R0,R6
   \   0000104C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000104E   0xF002 0xBCA3      B.W      ??RoadBrd_ParseString_4
   1406                          // Now calculate Celcius and Farenheit Temp.
   1407                          sprintf( (char *)tempBffr2, "     Humidity: %s/%s\r\n", (char *)HMeasure.Humidity, (char *)HMeasureScaled.Humidity );
   \                     ??RoadBrd_ParseString_188: (+1)
   \   00001052   0xABFC             ADD      R3,SP,#+1008
   \   00001054   0xAA51             ADD      R2,SP,#+324
   \   00001056   0xF8DF 0x1D54      LDR.W    R1,??RoadBrd_ParseString_184+0xC
   \   0000105A   0xA80F             ADD      R0,SP,#+60
   \   0000105C   0x.... 0x....      BL       sprintf
   \   00001060   0xE10A             B.N      ??RoadBrd_ParseString_189
   \   00001062   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_38:
   \   00001064   0x........         DC32     ?_14
   \   00001068   0x........         DC32     ?_15
   \   0000106C   0x........         DC32     ?_16
   1408                        }
   1409                        else
   1410                        {
   1411                          switch( tempBffr[1] )
   \                     ??RoadBrd_ParseString_180: (+1)
   \   00001070   0x7860             LDRB     R0,[R4, #+1]
   \   00001072   0x2830             CMP      R0,#+48
   \   00001074   0xD022             BEQ.N    ??RoadBrd_ParseString_190
   \   00001076   0x2831             CMP      R0,#+49
   \   00001078   0xF000 0x808A      BEQ.W    ??RoadBrd_ParseString_191
   \   0000107C   0x2849             CMP      R0,#+73
   \   0000107E   0xF040 0x80FB      BNE.W    ??RoadBrd_ParseString_189
   1412                          {
   1413          //------------------ DI Command: Initialize Humidity Sensor
   1414                            case 'I':
   1415                              // Initialize Humidity Sensor.
   1416                              Status = RoadBrd_HumidityInit();
   \                     ??RoadBrd_ParseString_192: (+1)
   \   00001082   0x.... 0x....      BL       RoadBrd_HumidityInit
   \   00001086   0x0006             MOVS     R6,R0
   1417                              // Is this a BLE Operation?
   1418                              if ( BLE_Flag )
   \   00001088   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000108A   0x2D00             CMP      R5,#+0
   \   0000108C   0xD009             BEQ.N    ??RoadBrd_ParseString_193
   1419                              {
   1420                                // Yes...Build and Send BLE Response NOW.
   1421                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   0000108E   0x4953             LDR.N    R1,??RoadBrd_ParseString_56
   \   00001090   0xA80F             ADD      R0,SP,#+60
   \   00001092   0x.... 0x....      BL       strcpy
   1422                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001096   0xA80F             ADD      R0,SP,#+60
   \   00001098   0x.... 0x....      BL       strlen
   \   0000109C   0xA90F             ADD      R1,SP,#+60
   \   0000109E   0x.... 0x....      BL       BGM111_Transmit
   1423                              }
   1424          
   1425                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_193: (+1)
   \   000010A2   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000010A4   0x2E00             CMP      R6,#+0
   \   000010A6   0xD104             BNE.N    ??RoadBrd_ParseString_194
   1426                              {
   1427                                strcpy( (char *)tempBffr2, "Humidity Sensor: Initialization Complete.\r\n");;
   \   000010A8   0xF8DF 0x1DE8      LDR.W    R1,??RoadBrd_ParseString_195
   \   000010AC   0xA80F             ADD      R0,SP,#+60
   \   000010AE   0x.... 0x....      BL       strcpy
   1428                              }
   1429                              break;
   \                     ??RoadBrd_ParseString_194: (+1)
   \   000010B2   0xE0E1             B.N      ??RoadBrd_ParseString_189
   \                     ??RoadBrd_ParseString_41:
   \   000010B4   0x........         DC32     ?_17
   \   000010B8   0x........         DC32     ?_19
   1430          //------------------ D0 Command...Read Humidity Values.....
   1431                            case '0':
   1432                              // Read Humidity Sensor sensor and return Humidity results....
   1433                              Status = RoadBrd_Humidity_ReadHumidity( &HMeasure );
   \                     ??RoadBrd_ParseString_190: (+1)
   \   000010BC   0xA851             ADD      R0,SP,#+324
   \   000010BE   0x.... 0x....      BL       RoadBrd_Humidity_ReadHumidity
   \   000010C2   0x0006             MOVS     R6,R0
   1434                              // Is this a BLE Operation?
   1435                              if ( BLE_Flag )
   \   000010C4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000010C6   0x2D00             CMP      R5,#+0
   \   000010C8   0xD009             BEQ.N    ??RoadBrd_ParseString_196
   1436                              {
   1437                                // Yes...Build and Send BLE Response NOW.
   1438                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000010CA   0x4944             LDR.N    R1,??RoadBrd_ParseString_56
   \   000010CC   0xA80F             ADD      R0,SP,#+60
   \   000010CE   0x.... 0x....      BL       strcpy
   1439                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000010D2   0xA80F             ADD      R0,SP,#+60
   \   000010D4   0x.... 0x....      BL       strlen
   \   000010D8   0xA90F             ADD      R1,SP,#+60
   \   000010DA   0x.... 0x....      BL       BGM111_Transmit
   1440                              }
   1441          
   1442                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_196: (+1)
   \   000010DE   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000010E0   0x2E00             CMP      R6,#+0
   \   000010E2   0xD126             BNE.N    ??RoadBrd_ParseString_197
   1443                              {
   1444                                // Send string to UART..
   1445                                strcpy( (char *)tempBffr2, "Humidity SENSOR...\r\n");
   \   000010E4   0xF8DF 0x1CB8      LDR.W    R1,??RoadBrd_ParseString_184
   \   000010E8   0xA80F             ADD      R0,SP,#+60
   \   000010EA   0x.... 0x....      BL       strcpy
   1446          #ifdef NUCLEO
   1447                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1448          #else
   1449                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000010EE   0xA90F             ADD      R1,SP,#+60
   \   000010F0   0x2000             MOVS     R0,#+0
   \   000010F2   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000010F6   0x0006             MOVS     R6,R0
   1450          #endif
   1451                                if (Status != HAL_OK)
   \   000010F8   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000010FA   0x2E00             CMP      R6,#+0
   \   000010FC   0xD003             BEQ.N    ??RoadBrd_ParseString_198
   1452                                  return Status;
   \   000010FE   0x0030             MOVS     R0,R6
   \   00001100   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001102   0xF002 0xBC49      B.W      ??RoadBrd_ParseString_4
   1453                                // NOW, Build Data String..
   1454                                sprintf( (char *)tempBffr2, "     Humidity DATA: " );
   \                     ??RoadBrd_ParseString_198: (+1)
   \   00001106   0xF8DF 0x1C9C      LDR.W    R1,??RoadBrd_ParseString_184+0x4
   \   0000110A   0xA80F             ADD      R0,SP,#+60
   \   0000110C   0x.... 0x....      BL       sprintf
   1455                                strcat( (char *)tempBffr2, (char *)HMeasure.HRaw );
   \   00001110   0xA953             ADD      R1,SP,#+332
   \   00001112   0xA80F             ADD      R0,SP,#+60
   \   00001114   0x.... 0x....      BL       strcat
   1456                                strcat( (char *)tempBffr2, "\r\n" );
   \   00001118   0xA189             ADR.N    R1,??RoadBrd_ParseString_71+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   0000111A   0xA80F             ADD      R0,SP,#+60
   \   0000111C   0x.... 0x....      BL       strcat
   1457                              }
   1458                              else
   1459                                break;
   1460          #ifdef NUCLEO
   1461                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1462          #else
   1463                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00001120   0xA90F             ADD      R1,SP,#+60
   \   00001122   0x2000             MOVS     R0,#+0
   \   00001124   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001128   0x0006             MOVS     R6,R0
   1464          #endif
   1465                              if (Status != HAL_OK)
   \   0000112A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000112C   0x2E00             CMP      R6,#+0
   \   0000112E   0xD101             BNE.N    ??RoadBrd_ParseString_199
   \   00001130   0xE004             B.N      ??RoadBrd_ParseString_200
   \                     ??RoadBrd_ParseString_197: (+1)
   \   00001132   0xE0A1             B.N      ??RoadBrd_ParseString_189
   1466                                return Status;
   \                     ??RoadBrd_ParseString_199: (+1)
   \   00001134   0x0030             MOVS     R0,R6
   \   00001136   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001138   0xF002 0xBC2E      B.W      ??RoadBrd_ParseString_4
   1467                              // NOW, Build Data String..
   1468                              sprintf( (char *)tempBffr2, "     Humidity DATA(Decimal): %d\r\n", HMeasure.HRawC );
   \                     ??RoadBrd_ParseString_200: (+1)
   \   0000113C   0xF8BD 0x2154      LDRH     R2,[SP, #+340]
   \   00001140   0xF8DF 0x1C64      LDR.W    R1,??RoadBrd_ParseString_184+0x8
   \   00001144   0xA80F             ADD      R0,SP,#+60
   \   00001146   0x.... 0x....      BL       sprintf
   1469          #ifdef NUCLEO
   1470                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1471          #else
   1472                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000114A   0xA90F             ADD      R1,SP,#+60
   \   0000114C   0x2000             MOVS     R0,#+0
   \   0000114E   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001152   0x0006             MOVS     R6,R0
   1473          #endif
   1474                              if (Status != HAL_OK)
   \   00001154   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001156   0x2E00             CMP      R6,#+0
   \   00001158   0xD00C             BEQ.N    ??RoadBrd_ParseString_201
   1475                                return Status;
   \   0000115A   0x0030             MOVS     R0,R6
   \   0000115C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000115E   0xF002 0xBC1B      B.W      ??RoadBrd_ParseString_4
   \   00001162   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_47:
   \   00001164   0x........         DC32     ?_20
   \   00001168   0x........         DC32     ?_21
   \   0000116C   0x........         DC32     ?_22
   \   00001170   0x........         DC32     ?_23
   1476                              // Now calculate Humidity.
   1477                              sprintf( (char *)tempBffr2, "     Humidity: " );
   \                     ??RoadBrd_ParseString_201: (+1)
   \   00001174   0xF8DF 0x1DCC      LDR.W    R1,??RoadBrd_ParseString_202
   \   00001178   0xA80F             ADD      R0,SP,#+60
   \   0000117A   0x.... 0x....      BL       sprintf
   1478                              strcat( (char *)tempBffr2, (char *)HMeasure.Humidity );
   \   0000117E   0xA951             ADD      R1,SP,#+324
   \   00001180   0xA80F             ADD      R0,SP,#+60
   \   00001182   0x.... 0x....      BL       strcat
   1479                              strcat( (char *)tempBffr2, "\r\n" );
   \   00001186   0xA16E             ADR.N    R1,??RoadBrd_ParseString_71+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001188   0xA80F             ADD      R0,SP,#+60
   \   0000118A   0x.... 0x....      BL       strcat
   1480                              break;
   \   0000118E   0xE073             B.N      ??RoadBrd_ParseString_189
   1481          //------------------ D1 Command...Read Temperature Values..... 
   1482                            case '1':
   1483                              // Read Humidity Sensor sensor and return Temperature results....
   1484                              Status = RoadBrd_Humidity_ReadTemperature( &TMeasure );
   \                     ??RoadBrd_ParseString_191: (+1)
   \   00001190   0xA83D             ADD      R0,SP,#+244
   \   00001192   0x.... 0x....      BL       RoadBrd_Humidity_ReadTemperature
   \   00001196   0x0006             MOVS     R6,R0
   1485                              // Is this a BLE Operation?
   1486                              if ( BLE_Flag )
   \   00001198   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000119A   0x2D00             CMP      R5,#+0
   \   0000119C   0xD009             BEQ.N    ??RoadBrd_ParseString_203
   1487                              {
   1488                                // Yes...Build and Send BLE Response NOW.
   1489                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   0000119E   0x490F             LDR.N    R1,??RoadBrd_ParseString_56
   \   000011A0   0xA80F             ADD      R0,SP,#+60
   \   000011A2   0x.... 0x....      BL       strcpy
   1490                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000011A6   0xA80F             ADD      R0,SP,#+60
   \   000011A8   0x.... 0x....      BL       strlen
   \   000011AC   0xA90F             ADD      R1,SP,#+60
   \   000011AE   0x.... 0x....      BL       BGM111_Transmit
   1491                              }
   1492          
   1493                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_203: (+1)
   \   000011B2   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000011B4   0x2E00             CMP      R6,#+0
   \   000011B6   0xD133             BNE.N    ??RoadBrd_ParseString_204
   1494                              {
   1495                                // Send string to UART..
   1496                                strcpy( (char *)tempBffr2, "Humidity SENSOR...\r\n");
   \   000011B8   0xF8DF 0x1BE4      LDR.W    R1,??RoadBrd_ParseString_184
   \   000011BC   0xA80F             ADD      R0,SP,#+60
   \   000011BE   0x.... 0x....      BL       strcpy
   1497          #ifdef NUCLEO
   1498                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1499          #else
   1500                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000011C2   0xA90F             ADD      R1,SP,#+60
   \   000011C4   0x2000             MOVS     R0,#+0
   \   000011C6   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000011CA   0x0006             MOVS     R6,R0
   1501          #endif
   1502                                if (Status != HAL_OK)
   \   000011CC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000011CE   0x2E00             CMP      R6,#+0
   \   000011D0   0xD008             BEQ.N    ??RoadBrd_ParseString_205
   1503                                  return Status;
   \   000011D2   0x0030             MOVS     R0,R6
   \   000011D4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000011D6   0xF002 0xBBDF      B.W      ??RoadBrd_ParseString_4
   \   000011DA   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_56:
   \   000011DC   0x........         DC32     ?_24
   \   000011E0   0x........         DC32     ?_25
   1504                                // NOW, Build Data String..
   1505                                sprintf( (char *)tempBffr2, "     TEMP DATA: " );
   \                     ??RoadBrd_ParseString_205: (+1)
   \   000011E4   0x4955             LDR.N    R1,??RoadBrd_ParseString_71+0x4
   \   000011E6   0xA80F             ADD      R0,SP,#+60
   \   000011E8   0x.... 0x....      BL       sprintf
   1506                                strcat( (char *)tempBffr2, (char *)TMeasure.Raw );
   \   000011EC   0xF50D 0x7181      ADD      R1,SP,#+258
   \   000011F0   0xA80F             ADD      R0,SP,#+60
   \   000011F2   0x.... 0x....      BL       strcat
   1507                                strcat( (char *)tempBffr2, "\r\n" );
   \   000011F6   0xA152             ADR.N    R1,??RoadBrd_ParseString_71+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   000011F8   0xA80F             ADD      R0,SP,#+60
   \   000011FA   0x.... 0x....      BL       strcat
   1508                              }
   1509                              else
   1510                                break;
   1511          #ifdef NUCLEO
   1512                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1513          #else
   1514                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000011FE   0xA90F             ADD      R1,SP,#+60
   \   00001200   0x2000             MOVS     R0,#+0
   \   00001202   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001206   0x0006             MOVS     R6,R0
   1515          #endif
   1516                              if (Status != HAL_OK)
   \   00001208   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000120A   0x2E00             CMP      R6,#+0
   \   0000120C   0xD109             BNE.N    ??RoadBrd_ParseString_206
   \   0000120E   0xE00C             B.N      ??RoadBrd_ParseString_207
   \                     ??RoadBrd_ParseString_59:
   \   00001210   0x........         DC32     ?_26
   \   00001214   0x........         DC32     ?_27
   \   00001218   0x........         DC32     ?_28
   \   0000121C   0x........         DC32     ?_29
   \                     ??RoadBrd_ParseString_204: (+1)
   \   00001220   0xE02A             B.N      ??RoadBrd_ParseString_189
   1517                                return Status;
   \                     ??RoadBrd_ParseString_206: (+1)
   \   00001222   0x0030             MOVS     R0,R6
   \   00001224   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001226   0xF002 0xBBB7      B.W      ??RoadBrd_ParseString_4
   1518                              // NOW, Build Data String..
   1519                              sprintf( (char *)tempBffr2, "     TEMP DATA(Decimal): %d\r\n", TMeasure.RawC );
   \                     ??RoadBrd_ParseString_207: (+1)
   \   0000122A   0xF8BD 0x210A      LDRH     R2,[SP, #+266]
   \   0000122E   0x495D             LDR.N    R1,??RoadBrd_ParseString_75
   \   00001230   0xA80F             ADD      R0,SP,#+60
   \   00001232   0x.... 0x....      BL       sprintf
   1520          #ifdef NUCLEO
   1521                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1522          #else
   1523                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00001236   0xA90F             ADD      R1,SP,#+60
   \   00001238   0x2000             MOVS     R0,#+0
   \   0000123A   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000123E   0x0006             MOVS     R6,R0
   1524          #endif
   1525                              if (Status != HAL_OK)
   \   00001240   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001242   0x2E00             CMP      R6,#+0
   \   00001244   0xD003             BEQ.N    ??RoadBrd_ParseString_208
   1526                                return Status;
   \   00001246   0x0030             MOVS     R0,R6
   \   00001248   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000124A   0xF002 0xBBA5      B.W      ??RoadBrd_ParseString_4
   1527                              // Now calculate Celcius and Farenheit Temp.
   1528                              sprintf( (char *)tempBffr2, "     TempC: " );
   \                     ??RoadBrd_ParseString_208: (+1)
   \   0000124E   0x4956             LDR.N    R1,??RoadBrd_ParseString_75+0x4
   \   00001250   0xA80F             ADD      R0,SP,#+60
   \   00001252   0x.... 0x....      BL       sprintf
   1529                              strcat( (char *)tempBffr2, (char *)TMeasure.TempC );
   \   00001256   0xA93D             ADD      R1,SP,#+244
   \   00001258   0xA80F             ADD      R0,SP,#+60
   \   0000125A   0x.... 0x....      BL       strcat
   1530                              strcat( (char *)tempBffr2, "     TempF: " );
   \   0000125E   0x4953             LDR.N    R1,??RoadBrd_ParseString_75+0x8
   \   00001260   0xA80F             ADD      R0,SP,#+60
   \   00001262   0x.... 0x....      BL       strcat
   1531                              strcat( (char *)tempBffr2, (char *)TMeasure.TempF );
   \   00001266   0xF10D 0x01FB      ADD      R1,SP,#+251
   \   0000126A   0xA80F             ADD      R0,SP,#+60
   \   0000126C   0x.... 0x....      BL       strcat
   1532                              strcat( (char *)tempBffr2, "\r\n" );
   \   00001270   0xA133             ADR.N    R1,??RoadBrd_ParseString_71+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001272   0xA80F             ADD      R0,SP,#+60
   \   00001274   0x.... 0x....      BL       strcat
   1533                              break;
   1534                          } //EndSwitch
   1535                        } //EndElse (Size == 1)
   1536                        break;
   \                     ??RoadBrd_ParseString_189: (+1)
   \   00001278   0xF002 0xBB14      B.W      ??RoadBrd_ParseString_27
   1537          //**************************************************************************************************
   1538                      case 'E':
   1539                        // Read Temp and Pressure. 
   1540                        // Is this a BLE Operation?
   1541                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_16: (+1)
   \   0000127C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000127E   0x2D00             CMP      R5,#+0
   \   00001280   0xD00A             BEQ.N    ??RoadBrd_ParseString_209
   1542                        {
   1543                          // Yes...Build and Send BLE Response NOW.
   1544                          strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001282   0xF8DF 0x1D6C      LDR.W    R1,??RoadBrd_ParseString_210
   \   00001286   0xA80F             ADD      R0,SP,#+60
   \   00001288   0x.... 0x....      BL       strcpy
   1545                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000128C   0xA80F             ADD      R0,SP,#+60
   \   0000128E   0x.... 0x....      BL       strlen
   \   00001292   0xA90F             ADD      R1,SP,#+60
   \   00001294   0x.... 0x....      BL       BGM111_Transmit
   1546                        }
   1547                        
   1548                        strcpy( (char *)tempBffr2, "TBD: Read Temp and Pressure NOT IMPLEMENTED\r\n");
   \                     ??RoadBrd_ParseString_209: (+1)
   \   00001298   0xF8DF 0x1D58      LDR.W    R1,??RoadBrd_ParseString_210+0x4
   \   0000129C   0xA80F             ADD      R0,SP,#+60
   \   0000129E   0x.... 0x....      BL       strcpy
   1549                        break;
   \   000012A2   0xF002 0xBAFF      B.W      ??RoadBrd_ParseString_27
   1550          //**************************************************************************************************
   1551                      case 'F':
   1552                        // NO ACTION. 
   1553                        // Is this a BLE Operation?
   1554                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_17: (+1)
   \   000012A6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000012A8   0x2D00             CMP      R5,#+0
   \   000012AA   0xD00A             BEQ.N    ??RoadBrd_ParseString_211
   1555                        {
   1556                          // Yes...Build and Send BLE Response NOW.
   1557                          strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000012AC   0xF8DF 0x1D40      LDR.W    R1,??RoadBrd_ParseString_210
   \   000012B0   0xA80F             ADD      R0,SP,#+60
   \   000012B2   0x.... 0x....      BL       strcpy
   1558                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000012B6   0xA80F             ADD      R0,SP,#+60
   \   000012B8   0x.... 0x....      BL       strlen
   \   000012BC   0xA90F             ADD      R1,SP,#+60
   \   000012BE   0x.... 0x....      BL       BGM111_Transmit
   1559                        }
   1560                        
   1561                        strcpy( (char *)tempBffr2, "NO Action...(0x00).\r\n");
   \                     ??RoadBrd_ParseString_211: (+1)
   \   000012C2   0xF8DF 0x1D34      LDR.W    R1,??RoadBrd_ParseString_210+0x8
   \   000012C6   0xA80F             ADD      R0,SP,#+60
   \   000012C8   0x.... 0x....      BL       strcpy
   1562                        break;
   \   000012CC   0xF002 0xBAEA      B.W      ??RoadBrd_ParseString_27
   \                     ??RoadBrd_ParseString_67:
   \   000012D0   0x........         DC32     ?_30
   \   000012D4   0x........         DC32     ?_31
   \   000012D8   0x........         DC32     ?_32
   1563          //**************************************************************************************************
   1564                      case 'G':
   1565                        // Read Temperature sensor and return results....Temperature Sensor U10(PCT2075GVJ).  Addr: 0x94
   1566                        Status = RoadBrd_ReadTemp( &TMeasure );
   \                     ??RoadBrd_ParseString_18: (+1)
   \   000012DC   0xA83D             ADD      R0,SP,#+244
   \   000012DE   0x.... 0x....      BL       RoadBrd_ReadTemp
   \   000012E2   0x0006             MOVS     R6,R0
   1567                        // Is this a BLE Operation?
   1568                        if ( BLE_Flag )
   \   000012E4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000012E6   0x2D00             CMP      R5,#+0
   \   000012E8   0xD00A             BEQ.N    ??RoadBrd_ParseString_212
   1569                        {
   1570                          // Yes...Build and Send BLE Response NOW.
   1571                          strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000012EA   0xF8DF 0x1D04      LDR.W    R1,??RoadBrd_ParseString_210
   \   000012EE   0xA80F             ADD      R0,SP,#+60
   \   000012F0   0x.... 0x....      BL       strcpy
   1572                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000012F4   0xA80F             ADD      R0,SP,#+60
   \   000012F6   0x.... 0x....      BL       strlen
   \   000012FA   0xA90F             ADD      R1,SP,#+60
   \   000012FC   0x.... 0x....      BL       BGM111_Transmit
   1573                        }
   1574                        
   1575                        if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_212: (+1)
   \   00001300   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001302   0x2E00             CMP      R6,#+0
   \   00001304   0xD104             BNE.N    ??RoadBrd_ParseString_213
   1576                          Status = RoadBrd_ReadTemp_Scaled( &TMeasureScaled );
   \   00001306   0xA8FF             ADD      R0,SP,#+1020
   \   00001308   0x3008             ADDS     R0,R0,#+8
   \   0000130A   0x.... 0x....      BL       RoadBrd_ReadTemp_Scaled
   \   0000130E   0x0006             MOVS     R6,R0
   1577                        if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_213: (+1)
   \   00001310   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001312   0x2E00             CMP      R6,#+0
   \   00001314   0xD12D             BNE.N    ??RoadBrd_ParseString_214
   1578                        {
   1579                          // Send string to UART..
   1580                          strcpy( (char *)tempBffr2, "TEMP SENSOR...\r\n");
   \   00001316   0xF8DF 0x1DE4      LDR.W    R1,??RoadBrd_ParseString_215
   \   0000131A   0xA80F             ADD      R0,SP,#+60
   \   0000131C   0x.... 0x....      BL       strcpy
   1581          #ifdef NUCLEO
   1582                          Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1583          #else
   1584                          Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00001320   0xA90F             ADD      R1,SP,#+60
   \   00001322   0x2000             MOVS     R0,#+0
   \   00001324   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001328   0x0006             MOVS     R6,R0
   1585          #endif
   1586                          if (Status != HAL_OK)
   \   0000132A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000132C   0x2E00             CMP      R6,#+0
   \   0000132E   0xD009             BEQ.N    ??RoadBrd_ParseString_216
   1587                            return Status;
   \   00001330   0x0030             MOVS     R0,R6
   \   00001332   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001334   0xF002 0xBB30      B.W      ??RoadBrd_ParseString_4
   \                     ??RoadBrd_ParseString_71:
   \   00001338   0x........         DC32     ?_33
   \   0000133C   0x........         DC32     ?_34
   \   00001340   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
   1588                          // NOW, Build Data String..
   1589                          sprintf( (char *)tempBffr2, "     TEMP DATA: " );
   \                     ??RoadBrd_ParseString_216: (+1)
   \   00001344   0xF8DF 0x1DD4      LDR.W    R1,??RoadBrd_ParseString_217
   \   00001348   0xA80F             ADD      R0,SP,#+60
   \   0000134A   0x.... 0x....      BL       sprintf
   1590                          strcat( (char *)tempBffr2, (char *)TMeasure.Raw );
   \   0000134E   0xF50D 0x7181      ADD      R1,SP,#+258
   \   00001352   0xA80F             ADD      R0,SP,#+60
   \   00001354   0x.... 0x....      BL       strcat
   1591                          strcat( (char *)tempBffr2, "\r\n" );
   \   00001358   0xA1D4             ADR.N    R1,??RoadBrd_ParseString_103+0x4  ;; 0x0D, 0x0A, 0x00, 0x00
   \   0000135A   0xA80F             ADD      R0,SP,#+60
   \   0000135C   0x.... 0x....      BL       strcat
   1592                        }
   1593                        else
   1594                          break;
   1595          #ifdef NUCLEO
   1596                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1597          #else
   1598                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00001360   0xA90F             ADD      R1,SP,#+60
   \   00001362   0x2000             MOVS     R0,#+0
   \   00001364   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001368   0x0006             MOVS     R6,R0
   1599          #endif
   1600                        if (Status != HAL_OK)
   \   0000136A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000136C   0x2E00             CMP      R6,#+0
   \   0000136E   0xD102             BNE.N    ??RoadBrd_ParseString_218
   \   00001370   0xE005             B.N      ??RoadBrd_ParseString_219
   \                     ??RoadBrd_ParseString_214: (+1)
   \   00001372   0xF002 0xBA97      B.W      ??RoadBrd_ParseString_27
   1601                          return Status;
   \                     ??RoadBrd_ParseString_218: (+1)
   \   00001376   0x0030             MOVS     R0,R6
   \   00001378   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000137A   0xF002 0xBB0D      B.W      ??RoadBrd_ParseString_4
   1602                        // NOW, Build Data String..
   1603                        sprintf( (char *)tempBffr2, "     TEMP DATA(Decimal): %d\r\n", TMeasure.RawC );
   \                     ??RoadBrd_ParseString_219: (+1)
   \   0000137E   0xF8BD 0x210A      LDRH     R2,[SP, #+266]
   \   00001382   0x4908             LDR.N    R1,??RoadBrd_ParseString_75
   \   00001384   0xA80F             ADD      R0,SP,#+60
   \   00001386   0x.... 0x....      BL       sprintf
   1604          #ifdef NUCLEO
   1605                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1606          #else
   1607                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000138A   0xA90F             ADD      R1,SP,#+60
   \   0000138C   0x2000             MOVS     R0,#+0
   \   0000138E   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001392   0x0006             MOVS     R6,R0
   1608          #endif
   1609                        if (Status != HAL_OK)
   \   00001394   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001396   0x2E00             CMP      R6,#+0
   \   00001398   0xD010             BEQ.N    ??RoadBrd_ParseString_220
   1610                          return Status;
   \   0000139A   0x0030             MOVS     R0,R6
   \   0000139C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000139E   0xF002 0xBAFB      B.W      ??RoadBrd_ParseString_4
   \   000013A2   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_75:
   \   000013A4   0x........         DC32     ?_35
   \   000013A8   0x........         DC32     ?_36
   \   000013AC   0x........         DC32     ?_37
   \   000013B0   0x........         DC32     ?_38
   \   000013B4   0x........         DC32     ?_39
   \   000013B8   0x........         DC32     ?_40
   1611                        // Now calculate Celcius and Farenheit Temp.
   1612                        sprintf( (char *)tempBffr2, "     TempC: %s/%s     TempF: %s/%s\r\n", 
   1613                                (char *)TMeasure.TempC, 
   1614                                (char *)TMeasureScaled.TempC,
   1615                                (char *)TMeasure.TempF, 
   1616                                (char *)TMeasureScaled.TempF);
   \                     ??RoadBrd_ParseString_220: (+1)
   \   000013BC   0xA8FF             ADD      R0,SP,#+1020
   \   000013BE   0x300F             ADDS     R0,R0,#+15
   \   000013C0   0x9001             STR      R0,[SP, #+4]
   \   000013C2   0xF10D 0x00FB      ADD      R0,SP,#+251
   \   000013C6   0x9000             STR      R0,[SP, #+0]
   \   000013C8   0xABFF             ADD      R3,SP,#+1020
   \   000013CA   0x3308             ADDS     R3,R3,#+8
   \   000013CC   0xAA3D             ADD      R2,SP,#+244
   \   000013CE   0xF8DF 0x1DCC      LDR.W    R1,??RoadBrd_ParseString_221
   \   000013D2   0xA80F             ADD      R0,SP,#+60
   \   000013D4   0x.... 0x....      BL       sprintf
   1617                        break;
   \   000013D8   0xF002 0xBA64      B.W      ??RoadBrd_ParseString_27
   1618          //**************************************************************************************************
   1619                      case 'H':
   1620                        // RGB Color Light Sensor U15(ISL91250).  Addr: 0x88
   1621                        if (Size == 1)
   \                     ??RoadBrd_ParseString_19: (+1)
   \   000013DC   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000013E0   0xF1B8 0x0F01      CMP      R8,#+1
   \   000013E4   0xD174             BNE.N    ??RoadBrd_ParseString_222
   1622                        {
   1623          //------------------ H Command...Read RGB Values and Return as 3 (2 Byte Fields)....REDmsb,REDlsb,GREENmsb,GREENlsb,BLUEmsb,BLUElsb.....     
   1624                          // 1. Time to send Command and collect status.
   1625                          Status = RoadBrd_RGBReadValues( &RGBValues );
   \   000013E6   0xA8B4             ADD      R0,SP,#+720
   \   000013E8   0x.... 0x....      BL       RoadBrd_RGBReadValues
   \   000013EC   0x0006             MOVS     R6,R0
   1626                          // Is this a BLE Operation?
   1627                          if ( BLE_Flag )
   \   000013EE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000013F0   0x2D00             CMP      R5,#+0
   \   000013F2   0xD00A             BEQ.N    ??RoadBrd_ParseString_223
   1628                          {
   1629                            // Yes...Build and Send BLE Response NOW.
   1630                            strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000013F4   0xF8DF 0x1BF8      LDR.W    R1,??RoadBrd_ParseString_210
   \   000013F8   0xA80F             ADD      R0,SP,#+60
   \   000013FA   0x.... 0x....      BL       strcpy
   1631                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000013FE   0xA80F             ADD      R0,SP,#+60
   \   00001400   0x.... 0x....      BL       strlen
   \   00001404   0xA90F             ADD      R1,SP,#+60
   \   00001406   0x.... 0x....      BL       BGM111_Transmit
   1632                          }
   1633                          
   1634                          if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_223: (+1)
   \   0000140A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000140C   0x2E00             CMP      R6,#+0
   \   0000140E   0xD15D             BNE.N    ??RoadBrd_ParseString_224
   1635                          {
   1636                            // Send string to UART..
   1637                            strcpy( (char *)tempBffr2, "RGB Color Light Sensor...\r\n");
   \   00001410   0xF8DF 0x1D8C      LDR.W    R1,??RoadBrd_ParseString_221+0x4
   \   00001414   0xA80F             ADD      R0,SP,#+60
   \   00001416   0x.... 0x....      BL       strcpy
   1638          #ifdef NUCLEO
   1639                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1640          #else
   1641                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000141A   0xA90F             ADD      R1,SP,#+60
   \   0000141C   0x2000             MOVS     R0,#+0
   \   0000141E   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001422   0x0006             MOVS     R6,R0
   1642          #endif
   1643                            if (Status != HAL_OK)
   \   00001424   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001426   0x2E00             CMP      R6,#+0
   \   00001428   0xD003             BEQ.N    ??RoadBrd_ParseString_225
   1644                              return Status;
   \   0000142A   0x0030             MOVS     R0,R6
   \   0000142C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000142E   0xF002 0xBAB3      B.W      ??RoadBrd_ParseString_4
   1645                            // NOW, Build Data String..
   1646                            sprintf( (char *)tempBffr2, " RGB(REDmsb,REDlsb,GREENmsb,GREENlsb,BLUEmsb,BLUElsb)\r\n" );
   \                     ??RoadBrd_ParseString_225: (+1)
   \   00001432   0xF8DF 0x1DEC      LDR.W    R1,??RoadBrd_ParseString_226
   \   00001436   0xA80F             ADD      R0,SP,#+60
   \   00001438   0x.... 0x....      BL       sprintf
   1647          #ifdef NUCLEO
   1648                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1649          #else
   1650                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000143C   0xA90F             ADD      R1,SP,#+60
   \   0000143E   0x2000             MOVS     R0,#+0
   \   00001440   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001444   0x0006             MOVS     R6,R0
   1651          #endif
   1652                            if (Status != HAL_OK)
   \   00001446   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001448   0x2E00             CMP      R6,#+0
   \   0000144A   0xD003             BEQ.N    ??RoadBrd_ParseString_227
   1653                              return Status;
   \   0000144C   0x0030             MOVS     R0,R6
   \   0000144E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001450   0xF002 0xBAA2      B.W      ??RoadBrd_ParseString_4
   1654                            strcpy( (char *)tempBffr2, "       DATA: ");
   \                     ??RoadBrd_ParseString_227: (+1)
   \   00001454   0xF8DF 0x1DCC      LDR.W    R1,??RoadBrd_ParseString_226+0x4
   \   00001458   0xA80F             ADD      R0,SP,#+60
   \   0000145A   0x.... 0x....      BL       strcpy
   1655                            strcat( (char *)tempBffr2, (char *)RGBValues.Raw );
   \   0000145E   0xA9BA             ADD      R1,SP,#+744
   \   00001460   0xA80F             ADD      R0,SP,#+60
   \   00001462   0x.... 0x....      BL       strcat
   1656                            strcat( (char *)tempBffr2, "\r\n" );
   \   00001466   0xA191             ADR.N    R1,??RoadBrd_ParseString_103+0x4  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001468   0xA80F             ADD      R0,SP,#+60
   \   0000146A   0x.... 0x....      BL       strcat
   1657          #ifdef NUCLEO
   1658                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1659          #else
   1660                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000146E   0xA90F             ADD      R1,SP,#+60
   \   00001470   0x2000             MOVS     R0,#+0
   \   00001472   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001476   0x0006             MOVS     R6,R0
   1661          #endif
   1662                            if (Status != HAL_OK)
   \   00001478   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000147A   0x2E00             CMP      R6,#+0
   \   0000147C   0xD003             BEQ.N    ??RoadBrd_ParseString_228
   1663                              return Status;
   \   0000147E   0x0030             MOVS     R0,R6
   \   00001480   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001482   0xF002 0xBA89      B.W      ??RoadBrd_ParseString_4
   1664                            // Now DisplayEach Value Calculated.
   1665                            strcpy( (char *)tempBffr2, "    Red: ");
   \                     ??RoadBrd_ParseString_228: (+1)
   \   00001486   0xF8DF 0x1DDC      LDR.W    R1,??RoadBrd_ParseString_229
   \   0000148A   0xA80F             ADD      R0,SP,#+60
   \   0000148C   0x.... 0x....      BL       strcpy
   1666                            strcat( (char *)tempBffr2, (char *)RGBValues.Red );
   \   00001490   0xA9B4             ADD      R1,SP,#+720
   \   00001492   0xA80F             ADD      R0,SP,#+60
   \   00001494   0x.... 0x....      BL       strcat
   1667                            strcat( (char *)tempBffr2, "    Green: ");
   \   00001498   0xF8DF 0x1DCC      LDR.W    R1,??RoadBrd_ParseString_229+0x4
   \   0000149C   0xA80F             ADD      R0,SP,#+60
   \   0000149E   0x.... 0x....      BL       strcat
   1668                            strcat( (char *)tempBffr2, (char *)RGBValues.Green );
   \   000014A2   0xA9B6             ADD      R1,SP,#+728
   \   000014A4   0xA80F             ADD      R0,SP,#+60
   \   000014A6   0x.... 0x....      BL       strcat
   1669                            strcat( (char *)tempBffr2, "    Blue: ");
   \   000014AA   0xF8DF 0x1DC0      LDR.W    R1,??RoadBrd_ParseString_229+0x8
   \   000014AE   0xA80F             ADD      R0,SP,#+60
   \   000014B0   0x.... 0x....      BL       strcat
   1670                            strcat( (char *)tempBffr2, (char *)RGBValues.Blue );
   \   000014B4   0xA9B8             ADD      R1,SP,#+736
   \   000014B6   0xA80F             ADD      R0,SP,#+60
   \   000014B8   0x.... 0x....      BL       strcat
   1671                            strcat( (char *)tempBffr2, "\r\n" );
   \   000014BC   0xA17B             ADR.N    R1,??RoadBrd_ParseString_103+0x4  ;; 0x0D, 0x0A, 0x00, 0x00
   \   000014BE   0xA80F             ADD      R0,SP,#+60
   \   000014C0   0x.... 0x....      BL       strcat
   \   000014C4   0xE262             B.N      ??RoadBrd_ParseString_230
   \   000014C6   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_87:
   \   000014C8   0x........         DC32     ?_41
   1672                          }
   1673                          else
   1674                            break;
   \                     ??RoadBrd_ParseString_224: (+1)
   \   000014CC   0xF002 0xB9EA      B.W      ??RoadBrd_ParseString_27
   1675                        }
   1676                        else
   1677                        {
   1678                          switch( tempBffr[1] )
   \                     ??RoadBrd_ParseString_222: (+1)
   \   000014D0   0x7860             LDRB     R0,[R4, #+1]
   \   000014D2   0x2830             CMP      R0,#+48
   \   000014D4   0xF000 0x8167      BEQ.W    ??RoadBrd_ParseString_231
   \   000014D8   0x2831             CMP      R0,#+49
   \   000014DA   0xF000 0x81D5      BEQ.W    ??RoadBrd_ParseString_232
   \   000014DE   0x2832             CMP      R0,#+50
   \   000014E0   0xF000 0x8202      BEQ.W    ??RoadBrd_ParseString_233
   \   000014E4   0x2833             CMP      R0,#+51
   \   000014E6   0xF000 0x821A      BEQ.W    ??RoadBrd_ParseString_234
   \   000014EA   0x2849             CMP      R0,#+73
   \   000014EC   0xF040 0x8249      BNE.W    ??RoadBrd_ParseString_235
   1679                          {
   1680          //------------------ HI Command...Initialize RGB Color Light Sensor.....     
   1681                            case 'I':
   1682                              if (Size == 2)
   \                     ??RoadBrd_ParseString_236: (+1)
   \   000014F0   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000014F4   0xF1B8 0x0F02      CMP      R8,#+2
   \   000014F8   0xD11A             BNE.N    ??RoadBrd_ParseString_237
   1683                              {
   1684                                // This is the default init. Assume Default Parms and write them.
   1685                                Status = RoadBrd_RGBInit();
   \   000014FA   0x.... 0x....      BL       RoadBrd_RGBInit
   \   000014FE   0x0006             MOVS     R6,R0
   1686          
   1687                                // Is this a BLE Operation?
   1688                                if ( BLE_Flag )
   \   00001500   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001502   0x2D00             CMP      R5,#+0
   \   00001504   0xD00A             BEQ.N    ??RoadBrd_ParseString_238
   1689                                {
   1690                                  // Yes...Build and Send BLE Response NOW.
   1691                                  strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001506   0xF8DF 0x1AE8      LDR.W    R1,??RoadBrd_ParseString_210
   \   0000150A   0xA80F             ADD      R0,SP,#+60
   \   0000150C   0x.... 0x....      BL       strcpy
   1692                                  BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001510   0xA80F             ADD      R0,SP,#+60
   \   00001512   0x.... 0x....      BL       strlen
   \   00001516   0xA90F             ADD      R1,SP,#+60
   \   00001518   0x.... 0x....      BL       BGM111_Transmit
   1693                                }
   1694                                
   1695                                if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_238: (+1)
   \   0000151C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000151E   0x2E00             CMP      R6,#+0
   \   00001520   0xF040 0x8140      BNE.W    ??RoadBrd_ParseString_239
   1696                                {
   1697                                  strcpy( (char *)tempBffr2, "RGB Color Light Sensor: Initialization Complete with DEFAULT Values.\r\n");;
   \   00001524   0xF8DF 0x1DBC      LDR.W    R1,??RoadBrd_ParseString_240
   \   00001528   0xA80F             ADD      R0,SP,#+60
   \   0000152A   0x.... 0x....      BL       strcpy
   \   0000152E   0xE139             B.N      ??RoadBrd_ParseString_239
   1698                                }
   1699                                
   1700                              }
   1701                              else
   1702                              {
   1703                                // Is this a BLE Operation?
   1704                                if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_237: (+1)
   \   00001530   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001532   0x2D00             CMP      R5,#+0
   \   00001534   0xD00A             BEQ.N    ??RoadBrd_ParseString_241
   1705                                {
   1706                                  // Yes...Build and Send BLE Response NOW.
   1707                                  strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001536   0xF8DF 0x1AB8      LDR.W    R1,??RoadBrd_ParseString_210
   \   0000153A   0xA80F             ADD      R0,SP,#+60
   \   0000153C   0x.... 0x....      BL       strcpy
   1708                                  BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001540   0xA80F             ADD      R0,SP,#+60
   \   00001542   0x.... 0x....      BL       strlen
   \   00001546   0xA90F             ADD      R1,SP,#+60
   \   00001548   0x.... 0x....      BL       BGM111_Transmit
   1709                                }
   1710                                
   1711                                // This is the Parameter init. Will have to verify all parameters first.
   1712                                if ( Size != 29 )
   \                     ??RoadBrd_ParseString_241: (+1)
   \   0000154C   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00001550   0xF1B8 0x0F1D      CMP      R8,#+29
   \   00001554   0xD00A             BEQ.N    ??RoadBrd_ParseString_242
   1713                                {
   1714                                  strcpy( (char *)tempBffr2, "RGB Color Light Sensor: SYNTAX Error. Parameters are not correct.\r\n");;
   \   00001556   0xF8DF 0x1DCC      LDR.W    R1,??RoadBrd_ParseString_243
   \   0000155A   0xA80F             ADD      R0,SP,#+60
   \   0000155C   0x.... 0x....      BL       strcpy
   \   00001560   0xE120             B.N      ??RoadBrd_ParseString_239
   \   00001562   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_101:
   \   00001564   0x........         DC32     ?_42
   \   00001568   0x........         DC32     ?_43
   1715                                }
   1716                                else
   1717                                {
   1718                                  // Step 1. Validate format.
   1719                                  if( (tempBffr[2]!=':') ||
   1720                                      (tempBffr[5]!='.') || 
   1721                                      (tempBffr[8]!='.') || 
   1722                                      (tempBffr[11]!='.') || 
   1723                                      (tempBffr[14]!='.') || 
   1724                                      (tempBffr[17]!='.') || 
   1725                                      (tempBffr[20]!='.') || 
   1726                                      (tempBffr[23]!='.') || 
   1727                                      (tempBffr[26]!='.') )
   \                     ??RoadBrd_ParseString_242: (+1)
   \   0000156C   0x78A0             LDRB     R0,[R4, #+2]
   \   0000156E   0x283A             CMP      R0,#+58
   \   00001570   0xD117             BNE.N    ??RoadBrd_ParseString_244
   \   00001572   0x7960             LDRB     R0,[R4, #+5]
   \   00001574   0x282E             CMP      R0,#+46
   \   00001576   0xD114             BNE.N    ??RoadBrd_ParseString_244
   \   00001578   0x7A20             LDRB     R0,[R4, #+8]
   \   0000157A   0x282E             CMP      R0,#+46
   \   0000157C   0xD111             BNE.N    ??RoadBrd_ParseString_244
   \   0000157E   0x7AE0             LDRB     R0,[R4, #+11]
   \   00001580   0x282E             CMP      R0,#+46
   \   00001582   0xD10E             BNE.N    ??RoadBrd_ParseString_244
   \   00001584   0x7BA0             LDRB     R0,[R4, #+14]
   \   00001586   0x282E             CMP      R0,#+46
   \   00001588   0xD10B             BNE.N    ??RoadBrd_ParseString_244
   \   0000158A   0x7C60             LDRB     R0,[R4, #+17]
   \   0000158C   0x282E             CMP      R0,#+46
   \   0000158E   0xD108             BNE.N    ??RoadBrd_ParseString_244
   \   00001590   0x7D20             LDRB     R0,[R4, #+20]
   \   00001592   0x282E             CMP      R0,#+46
   \   00001594   0xD105             BNE.N    ??RoadBrd_ParseString_244
   \   00001596   0x7DE0             LDRB     R0,[R4, #+23]
   \   00001598   0x282E             CMP      R0,#+46
   \   0000159A   0xD102             BNE.N    ??RoadBrd_ParseString_244
   \   0000159C   0x7EA0             LDRB     R0,[R4, #+26]
   \   0000159E   0x282E             CMP      R0,#+46
   \   000015A0   0xD005             BEQ.N    ??RoadBrd_ParseString_245
   1728                                  {
   1729                                    strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: Not correct format. Punctuation!\r\n");
   \                     ??RoadBrd_ParseString_244: (+1)
   \   000015A2   0xF8DF 0x1D8C      LDR.W    R1,??RoadBrd_ParseString_243+0xC
   \   000015A6   0xA80F             ADD      R0,SP,#+60
   \   000015A8   0x.... 0x....      BL       strcpy
   \   000015AC   0xE0FA             B.N      ??RoadBrd_ParseString_239
   1730                                  }
   1731                                  else
   1732                                  {
   1733                                    // Syntax correct. Time to grab parameters.
   1734                                    Error = 0;
   \                     ??RoadBrd_ParseString_245: (+1)
   \   000015AE   0x2000             MOVS     R0,#+0
   \   000015B0   0x9035             STR      R0,[SP, #+212]
   1735                                    for (x=0; x<9; x++)
   \   000015B2   0x2000             MOVS     R0,#+0
   \   000015B4   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_246: (+1)
   \   000015B6   0x2F09             CMP      R7,#+9
   \   000015B8   0xDA26             BGE.N    ??RoadBrd_ParseString_247
   1736                                    {
   1737                                      tempBffr3[0] = tempBffr[3+x*3];
   \   000015BA   0x2003             MOVS     R0,#+3
   \   000015BC   0xFB00 0xF007      MUL      R0,R0,R7
   \   000015C0   0x4420             ADD      R0,R4,R0
   \   000015C2   0xF990 0x0003      LDRSB    R0,[R0, #+3]
   \   000015C6   0xF88D 0x0030      STRB     R0,[SP, #+48]
   1738                                      tempBffr3[1] = tempBffr[4+x*3];
   \   000015CA   0x2003             MOVS     R0,#+3
   \   000015CC   0xFB00 0xF007      MUL      R0,R0,R7
   \   000015D0   0x4420             ADD      R0,R4,R0
   \   000015D2   0xF990 0x0004      LDRSB    R0,[R0, #+4]
   \   000015D6   0xF88D 0x0031      STRB     R0,[SP, #+49]
   1739                                      tempBffr3[2] = 0x00;
   \   000015DA   0x2000             MOVS     R0,#+0
   \   000015DC   0xF88D 0x0032      STRB     R0,[SP, #+50]
   1740                                      if (isHexNum( (char *)tempBffr3 ) == 0)
   \   000015E0   0xA80C             ADD      R0,SP,#+48
   \   000015E2   0x.... 0x....      BL       isHexNum
   \   000015E6   0x2800             CMP      R0,#+0
   \   000015E8   0xD107             BNE.N    ??RoadBrd_ParseString_248
   1741                                      {
   1742                                        strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR:Parameters not HEX Value.\r\n");
   \   000015EA   0xF8DF 0x1DBC      LDR.W    R1,??RoadBrd_ParseString_249
   \   000015EE   0xA80F             ADD      R0,SP,#+60
   \   000015F0   0x.... 0x....      BL       strcpy
   1743                                        Error = 1;
   \   000015F4   0x2001             MOVS     R0,#+1
   \   000015F6   0x9035             STR      R0,[SP, #+212]
   1744                                        break;
   \   000015F8   0xE006             B.N      ??RoadBrd_ParseString_247
   1745                                      }
   1746                                      else
   1747                                      {
   1748                                        i2cData[x] =  hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_248: (+1)
   \   000015FA   0xA80C             ADD      R0,SP,#+48
   \   000015FC   0x.... 0x....      BL       hatoi
   \   00001600   0xA999             ADD      R1,SP,#+612
   \   00001602   0x55C8             STRB     R0,[R1, R7]
   1749                                      } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)
   1750                                    } //EndFor (x=0; x<num_bytes; x++)
   \   00001604   0x1C7F             ADDS     R7,R7,#+1
   \   00001606   0xE7D6             B.N      ??RoadBrd_ParseString_246
   1751                                    // Format and parameters now in i2cData array. Pull them out and validate them.
   1752                                    // OP_MODE Verify.
   1753                                    if(i2cData[0]>7)
   \                     ??RoadBrd_ParseString_247: (+1)
   \   00001608   0xF89D 0x0264      LDRB     R0,[SP, #+612]
   \   0000160C   0x2808             CMP      R0,#+8
   \   0000160E   0xDB05             BLT.N    ??RoadBrd_ParseString_250
   1754                                    {
   1755                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: OP_MODE.\r\n");
   \   00001610   0xF8DF 0x1DD4      LDR.W    R1,??RoadBrd_ParseString_251
   \   00001614   0xA80F             ADD      R0,SP,#+60
   \   00001616   0x.... 0x....      BL       strcpy
   1756                                      break;
   \   0000161A   0xE1B7             B.N      ??RoadBrd_ParseString_230
   1757                                    }
   1758                                    else
   1759                                      op_mode = (i2cData[0] & 0x07) * 1;
   \                     ??RoadBrd_ParseString_250: (+1)
   \   0000161C   0xF89D 0x0264      LDRB     R0,[SP, #+612]
   \   00001620   0xF010 0x0007      ANDS     R0,R0,#0x7
   \   00001624   0xF88D 0x00CD      STRB     R0,[SP, #+205]
   1760                                    // DS_RANGE Verify.
   1761                                    if(i2cData[1]>1)
   \   00001628   0xF89D 0x0265      LDRB     R0,[SP, #+613]
   \   0000162C   0x2802             CMP      R0,#+2
   \   0000162E   0xDB05             BLT.N    ??RoadBrd_ParseString_252
   1762                                    {
   1763                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: DS_RANGE.\r\n");
   \   00001630   0xF8DF 0x1DB8      LDR.W    R1,??RoadBrd_ParseString_251+0x4
   \   00001634   0xA80F             ADD      R0,SP,#+60
   \   00001636   0x.... 0x....      BL       strcpy
   1764                                      break;
   \   0000163A   0xE1A7             B.N      ??RoadBrd_ParseString_230
   1765                                    }
   1766                                    else
   1767                                      ds_range = (i2cData[1] & 0x01) * 8;
   \                     ??RoadBrd_ParseString_252: (+1)
   \   0000163C   0xF89D 0x0265      LDRB     R0,[SP, #+613]
   \   00001640   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00001644   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001646   0x00C0             LSLS     R0,R0,#+3
   \   00001648   0xF88D 0x00CC      STRB     R0,[SP, #+204]
   1768                                    // ADC_RSL Verify.
   1769                                    if(i2cData[2]>1)
   \   0000164C   0xF89D 0x0266      LDRB     R0,[SP, #+614]
   \   00001650   0x2802             CMP      R0,#+2
   \   00001652   0xDB05             BLT.N    ??RoadBrd_ParseString_253
   1770                                    {
   1771                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: ADC_RSL.\r\n");
   \   00001654   0xF8DF 0x1DD4      LDR.W    R1,??RoadBrd_ParseString_254
   \   00001658   0xA80F             ADD      R0,SP,#+60
   \   0000165A   0x.... 0x....      BL       strcpy
   1772                                      break;
   \   0000165E   0xE195             B.N      ??RoadBrd_ParseString_230
   1773                                    }
   1774                                    else
   1775                                      adc_rsl = (i2cData[2] & 0x01) * 16;
   \                     ??RoadBrd_ParseString_253: (+1)
   \   00001660   0xF89D 0x0266      LDRB     R0,[SP, #+614]
   \   00001664   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00001668   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000166A   0x0100             LSLS     R0,R0,#+4
   \   0000166C   0xF88D 0x00CB      STRB     R0,[SP, #+203]
   1776                                    // SYNC Verify.
   1777                                    if(i2cData[3]>1)
   \   00001670   0xF89D 0x0267      LDRB     R0,[SP, #+615]
   \   00001674   0x2802             CMP      R0,#+2
   \   00001676   0xDB05             BLT.N    ??RoadBrd_ParseString_255
   1778                                    {
   1779                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: SYNC.\r\n");
   \   00001678   0xF8DF 0x1DB4      LDR.W    R1,??RoadBrd_ParseString_254+0x4
   \   0000167C   0xA80F             ADD      R0,SP,#+60
   \   0000167E   0x.... 0x....      BL       strcpy
   1780                                      break;
   \   00001682   0xE183             B.N      ??RoadBrd_ParseString_230
   1781                                    }
   1782                                    else
   1783                                      sync = (i2cData[3] & 0x01) * 32;
   \                     ??RoadBrd_ParseString_255: (+1)
   \   00001684   0xF89D 0x0267      LDRB     R0,[SP, #+615]
   \   00001688   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   0000168C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000168E   0x0140             LSLS     R0,R0,#+5
   \   00001690   0xF88D 0x00CA      STRB     R0,[SP, #+202]
   1784                                    // CMP_ADJST Verify.
   1785                                    if(i2cData[4]>63)
   \   00001694   0xF89D 0x0268      LDRB     R0,[SP, #+616]
   \   00001698   0x2840             CMP      R0,#+64
   \   0000169A   0xDB0B             BLT.N    ??RoadBrd_ParseString_256
   1786                                    {
   1787                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: CMP_ADJST.\r\n");
   \   0000169C   0xF8DF 0x1DD0      LDR.W    R1,??RoadBrd_ParseString_257
   \   000016A0   0xA80F             ADD      R0,SP,#+60
   \   000016A2   0x.... 0x....      BL       strcpy
   1788                                      break;
   \   000016A6   0xE171             B.N      ??RoadBrd_ParseString_230
   \                     ??RoadBrd_ParseString_103:
   \   000016A8   0x........         DC32     ?_44
   \   000016AC   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
   \   000016B0   0x........         DC32     ?_45
   1789                                    }
   1790                                    else
   1791                                      cmp_adjst = (i2cData[4] & 0x3f) * 1;
   \                     ??RoadBrd_ParseString_256: (+1)
   \   000016B4   0xF89D 0x0268      LDRB     R0,[SP, #+616]
   \   000016B8   0xF010 0x003F      ANDS     R0,R0,#0x3F
   \   000016BC   0xF88D 0x00C9      STRB     R0,[SP, #+201]
   1792                                    // CMP_OFFST Verify.
   1793                                    if(i2cData[5]>1)
   \   000016C0   0xF89D 0x0269      LDRB     R0,[SP, #+617]
   \   000016C4   0x2802             CMP      R0,#+2
   \   000016C6   0xDB05             BLT.N    ??RoadBrd_ParseString_258
   1794                                    {
   1795                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: CMP_OFFST.\r\n");
   \   000016C8   0xF8DF 0x1DA8      LDR.W    R1,??RoadBrd_ParseString_257+0x4
   \   000016CC   0xA80F             ADD      R0,SP,#+60
   \   000016CE   0x.... 0x....      BL       strcpy
   1796                                      break;
   \   000016D2   0xE15B             B.N      ??RoadBrd_ParseString_230
   1797                                    }
   1798                                    else
   1799                                      cmp_offst = (i2cData[5] & 0x01) * 128;
   \                     ??RoadBrd_ParseString_258: (+1)
   \   000016D4   0xF89D 0x0269      LDRB     R0,[SP, #+617]
   \   000016D8   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   000016DC   0x2180             MOVS     R1,#+128
   \   000016DE   0x4348             MULS     R0,R1,R0
   \   000016E0   0xF88D 0x00C8      STRB     R0,[SP, #+200]
   1800                                    // INT_ASSGN Verify.
   1801                                    if(i2cData[6]>3)
   \   000016E4   0xF89D 0x026A      LDRB     R0,[SP, #+618]
   \   000016E8   0x2804             CMP      R0,#+4
   \   000016EA   0xDB05             BLT.N    ??RoadBrd_ParseString_259
   1802                                    {
   1803                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: INT_ASSGN.\r\n");
   \   000016EC   0xF8DF 0x1DC4      LDR.W    R1,??RoadBrd_ParseString_260
   \   000016F0   0xA80F             ADD      R0,SP,#+60
   \   000016F2   0x.... 0x....      BL       strcpy
   1804                                      break;
   \   000016F6   0xE149             B.N      ??RoadBrd_ParseString_230
   1805                                    }
   1806                                    else
   1807                                      int_assgn = (i2cData[6] & 0x03) * 1;
   \                     ??RoadBrd_ParseString_259: (+1)
   \   000016F8   0xF89D 0x026A      LDRB     R0,[SP, #+618]
   \   000016FC   0xF010 0x0003      ANDS     R0,R0,#0x3
   \   00001700   0xF88D 0x00B7      STRB     R0,[SP, #+183]
   1808                                    // INT_PERSIST Verify.
   1809                                    if(i2cData[7]>3)
   \   00001704   0xF89D 0x026B      LDRB     R0,[SP, #+619]
   \   00001708   0x2804             CMP      R0,#+4
   \   0000170A   0xDB07             BLT.N    ??RoadBrd_ParseString_261
   1810                                    {
   1811                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: INT_PERSIST.\r\n");
   \   0000170C   0xF8DF 0x1DE4      LDR.W    R1,??RoadBrd_ParseString_262
   \   00001710   0xA80F             ADD      R0,SP,#+60
   \   00001712   0x.... 0x....      BL       strcpy
   1812                                      break;
   \   00001716   0xE139             B.N      ??RoadBrd_ParseString_230
   \                     ??RoadBrd_ParseString_111:
   \   00001718   0x........         DC32     ?_46
   1813                                    }
   1814                                    else
   1815                                      int_persist = (i2cData[7] & 0x03) * 4;
   \                     ??RoadBrd_ParseString_261: (+1)
   \   0000171C   0xF89D 0x026B      LDRB     R0,[SP, #+619]
   \   00001720   0xF010 0x0003      ANDS     R0,R0,#0x3
   \   00001724   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001726   0x0080             LSLS     R0,R0,#+2
   \   00001728   0xF88D 0x00B6      STRB     R0,[SP, #+182]
   1816                                    // CNVRSN_INT Verify.
   1817                                    if(i2cData[8]>1)
   \   0000172C   0xF89D 0x026C      LDRB     R0,[SP, #+620]
   \   00001730   0x2802             CMP      R0,#+2
   \   00001732   0xDB05             BLT.N    ??RoadBrd_ParseString_263
   1818                                    {
   1819                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: CNVRSN_INT.\r\n");
   \   00001734   0xF8DF 0x1DC0      LDR.W    R1,??RoadBrd_ParseString_262+0x4
   \   00001738   0xA80F             ADD      R0,SP,#+60
   \   0000173A   0x.... 0x....      BL       strcpy
   1820                                      break;
   \   0000173E   0xE125             B.N      ??RoadBrd_ParseString_230
   1821                                    }
   1822                                    else
   1823                                      cnvrsn_int = (i2cData[8] & 0x01) * 16;
   \                     ??RoadBrd_ParseString_263: (+1)
   \   00001740   0xF89D 0x026C      LDRB     R0,[SP, #+620]
   \   00001744   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00001748   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000174A   0x0100             LSLS     R0,R0,#+4
   \   0000174C   0xF88D 0x00B5      STRB     R0,[SP, #+181]
   1824                                    // OK, all parameters have been verified. Time to build final params.
   1825                                    RGBMeasure.config1 = op_mode + ds_range + adc_rsl + sync;
   \   00001750   0xF89D 0x00CD      LDRB     R0,[SP, #+205]
   \   00001754   0xF89D 0x10CC      LDRB     R1,[SP, #+204]
   \   00001758   0x1808             ADDS     R0,R1,R0
   \   0000175A   0xF89D 0x10CB      LDRB     R1,[SP, #+203]
   \   0000175E   0x1808             ADDS     R0,R1,R0
   \   00001760   0xF89D 0x10CA      LDRB     R1,[SP, #+202]
   \   00001764   0x1808             ADDS     R0,R1,R0
   \   00001766   0xF88D 0x00EC      STRB     R0,[SP, #+236]
   1826                                    RGBMeasure.config2 = cmp_adjst + cmp_offst;
   \   0000176A   0xF89D 0x00C9      LDRB     R0,[SP, #+201]
   \   0000176E   0xF89D 0x10C8      LDRB     R1,[SP, #+200]
   \   00001772   0x1808             ADDS     R0,R1,R0
   \   00001774   0xF88D 0x00ED      STRB     R0,[SP, #+237]
   1827                                    RGBMeasure.config3 = int_assgn + int_persist + cnvrsn_int;
   \   00001778   0xF89D 0x00B7      LDRB     R0,[SP, #+183]
   \   0000177C   0xF89D 0x10B6      LDRB     R1,[SP, #+182]
   \   00001780   0x1808             ADDS     R0,R1,R0
   \   00001782   0xF89D 0x10B5      LDRB     R1,[SP, #+181]
   \   00001786   0x1808             ADDS     R0,R1,R0
   \   00001788   0xF88D 0x00EE      STRB     R0,[SP, #+238]
   1828                                    // Load Config Register with Config Settings
   1829                                    Status = RoadBrd_RGBFullInit( &RGBMeasure );
   \   0000178C   0xA83B             ADD      R0,SP,#+236
   \   0000178E   0x.... 0x....      BL       RoadBrd_RGBFullInit
   \   00001792   0x0006             MOVS     R6,R0
   1830          
   1831                                    if (Status == HAL_OK)
   \   00001794   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001796   0x2E00             CMP      R6,#+0
   \   00001798   0xD104             BNE.N    ??RoadBrd_ParseString_239
   1832                                    {
   1833                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor: Initialization Complete with USER Values.\r\n");;
   \   0000179A   0xF8DF 0x1D9C      LDR.W    R1,??RoadBrd_ParseString_264
   \   0000179E   0xA80F             ADD      R0,SP,#+60
   \   000017A0   0x.... 0x....      BL       strcpy
   1834                                    }
   1835                                  } //ElseIf Validate format.
   1836                                } //ElseIf ( Size != 29 )
   1837                              } //ElseIf (Size == 2)
   1838                              break;
   \                     ??RoadBrd_ParseString_239: (+1)
   \   000017A4   0xE0F2             B.N      ??RoadBrd_ParseString_230
   1839          //------------------ H0 Command...Read RGB Values and Return as 3 (2 Byte Fields)....REDmsb,REDlsb,GREENmsb,GREENlsb,BLUEmsb,BLUElsb.....     
   1840                            case '0':
   1841                              // 1. Time to send Command and collect status.
   1842                              Status = RoadBrd_RGBReadValues( &RGBValues );
   \                     ??RoadBrd_ParseString_231: (+1)
   \   000017A6   0xA8B4             ADD      R0,SP,#+720
   \   000017A8   0x.... 0x....      BL       RoadBrd_RGBReadValues
   \   000017AC   0x0006             MOVS     R6,R0
   1843                              // Is this a BLE Operation?
   1844                              if ( BLE_Flag )
   \   000017AE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000017B0   0x2D00             CMP      R5,#+0
   \   000017B2   0xD00A             BEQ.N    ??RoadBrd_ParseString_265
   1845                              {
   1846                                // Yes...Build and Send BLE Response NOW.
   1847                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000017B4   0xF8DF 0x1838      LDR.W    R1,??RoadBrd_ParseString_210
   \   000017B8   0xA80F             ADD      R0,SP,#+60
   \   000017BA   0x.... 0x....      BL       strcpy
   1848                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000017BE   0xA80F             ADD      R0,SP,#+60
   \   000017C0   0x.... 0x....      BL       strlen
   \   000017C4   0xA90F             ADD      R1,SP,#+60
   \   000017C6   0x.... 0x....      BL       BGM111_Transmit
   1849                              }
   1850                              
   1851                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_265: (+1)
   \   000017CA   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000017CC   0x2E00             CMP      R6,#+0
   \   000017CE   0xD15A             BNE.N    ??RoadBrd_ParseString_266
   1852                              {
   1853                                // Send string to UART..
   1854                                strcpy( (char *)tempBffr2, "RGB Color Light Sensor...\r\n");
   \   000017D0   0xF8DF 0x19CC      LDR.W    R1,??RoadBrd_ParseString_221+0x4
   \   000017D4   0xA80F             ADD      R0,SP,#+60
   \   000017D6   0x.... 0x....      BL       strcpy
   1855          #ifdef NUCLEO
   1856                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1857          #else
   1858                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000017DA   0xA90F             ADD      R1,SP,#+60
   \   000017DC   0x2000             MOVS     R0,#+0
   \   000017DE   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000017E2   0x0006             MOVS     R6,R0
   1859          #endif
   1860                                if (Status != HAL_OK)
   \   000017E4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000017E6   0x2E00             CMP      R6,#+0
   \   000017E8   0xD003             BEQ.N    ??RoadBrd_ParseString_267
   1861                                  return Status;
   \   000017EA   0x0030             MOVS     R0,R6
   \   000017EC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000017EE   0xF002 0xB8D3      B.W      ??RoadBrd_ParseString_4
   1862                                // NOW, Build Data String..
   1863                                sprintf( (char *)tempBffr2, " RGB(REDmsb,REDlsb,GREENmsb,GREENlsb,BLUEmsb,BLUElsb)\r\n" );
   \                     ??RoadBrd_ParseString_267: (+1)
   \   000017F2   0xF8DF 0x1A2C      LDR.W    R1,??RoadBrd_ParseString_226
   \   000017F6   0xA80F             ADD      R0,SP,#+60
   \   000017F8   0x.... 0x....      BL       sprintf
   1864          #ifdef NUCLEO
   1865                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1866          #else
   1867                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000017FC   0xA90F             ADD      R1,SP,#+60
   \   000017FE   0x2000             MOVS     R0,#+0
   \   00001800   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001804   0x0006             MOVS     R6,R0
   1868          #endif
   1869                                if (Status != HAL_OK)
   \   00001806   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001808   0x2E00             CMP      R6,#+0
   \   0000180A   0xD003             BEQ.N    ??RoadBrd_ParseString_268
   1870                                  return Status;
   \   0000180C   0x0030             MOVS     R0,R6
   \   0000180E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001810   0xF002 0xB8C2      B.W      ??RoadBrd_ParseString_4
   1871                                strcpy( (char *)tempBffr2, "       DATA: ");
   \                     ??RoadBrd_ParseString_268: (+1)
   \   00001814   0xF8DF 0x1A0C      LDR.W    R1,??RoadBrd_ParseString_226+0x4
   \   00001818   0xA80F             ADD      R0,SP,#+60
   \   0000181A   0x.... 0x....      BL       strcpy
   1872                                strcat( (char *)tempBffr2, (char *)RGBValues.Raw );
   \   0000181E   0xA9BA             ADD      R1,SP,#+744
   \   00001820   0xA80F             ADD      R0,SP,#+60
   \   00001822   0x.... 0x....      BL       strcat
   1873                                strcat( (char *)tempBffr2, "\r\n" );
   \   00001826   0xA1D6             ADR.N    R1,??RoadBrd_ParseString_163  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001828   0xA80F             ADD      R0,SP,#+60
   \   0000182A   0x.... 0x....      BL       strcat
   1874          #ifdef NUCLEO
   1875                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1876          #else
   1877                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000182E   0xA90F             ADD      R1,SP,#+60
   \   00001830   0x2000             MOVS     R0,#+0
   \   00001832   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001836   0x0006             MOVS     R6,R0
   1878          #endif
   1879                                if (Status != HAL_OK)
   \   00001838   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000183A   0x2E00             CMP      R6,#+0
   \   0000183C   0xD003             BEQ.N    ??RoadBrd_ParseString_269
   1880                                  return Status;
   \   0000183E   0x0030             MOVS     R0,R6
   \   00001840   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001842   0xF002 0xB8A9      B.W      ??RoadBrd_ParseString_4
   1881                                // Now DisplayEach Value Calculated.
   1882                                strcpy( (char *)tempBffr2, "    Red: ");
   \                     ??RoadBrd_ParseString_269: (+1)
   \   00001846   0xF8DF 0x1A1C      LDR.W    R1,??RoadBrd_ParseString_229
   \   0000184A   0xA80F             ADD      R0,SP,#+60
   \   0000184C   0x.... 0x....      BL       strcpy
   1883                                strcat( (char *)tempBffr2, (char *)RGBValues.Red );
   \   00001850   0xA9B4             ADD      R1,SP,#+720
   \   00001852   0xA80F             ADD      R0,SP,#+60
   \   00001854   0x.... 0x....      BL       strcat
   1884                                strcat( (char *)tempBffr2, "    Green: ");
   \   00001858   0xF8DF 0x1A0C      LDR.W    R1,??RoadBrd_ParseString_229+0x4
   \   0000185C   0xA80F             ADD      R0,SP,#+60
   \   0000185E   0x.... 0x....      BL       strcat
   1885                                strcat( (char *)tempBffr2, (char *)RGBValues.Green );
   \   00001862   0xA9B6             ADD      R1,SP,#+728
   \   00001864   0xA80F             ADD      R0,SP,#+60
   \   00001866   0x.... 0x....      BL       strcat
   1886                                strcat( (char *)tempBffr2, "    Blue: ");
   \   0000186A   0xF8DF 0x1A00      LDR.W    R1,??RoadBrd_ParseString_229+0x8
   \   0000186E   0xA80F             ADD      R0,SP,#+60
   \   00001870   0x.... 0x....      BL       strcat
   1887                                strcat( (char *)tempBffr2, (char *)RGBValues.Blue );
   \   00001874   0xA9B8             ADD      R1,SP,#+736
   \   00001876   0xA80F             ADD      R0,SP,#+60
   \   00001878   0x.... 0x....      BL       strcat
   1888                                strcat( (char *)tempBffr2, "\r\n" );
   \   0000187C   0xA1C0             ADR.N    R1,??RoadBrd_ParseString_163  ;; 0x0D, 0x0A, 0x00, 0x00
   \   0000187E   0xA80F             ADD      R0,SP,#+60
   \   00001880   0x.... 0x....      BL       strcat
   1889                              }
   1890                              else
   1891                                break;
   1892                              break;
   \   00001884   0xE082             B.N      ??RoadBrd_ParseString_230
   \                     ??RoadBrd_ParseString_266: (+1)
   \   00001886   0xE081             B.N      ??RoadBrd_ParseString_230
   1893          //------------------ H1 Command...Read Status.....     
   1894                            case '1':
   1895                              // 1. Time to send Command and collect status.  RGBSMeasure
   1896                              Status = RoadBrd_RGBReadStatus( &RGBSMeasure );
   \                     ??RoadBrd_ParseString_232: (+1)
   \   00001888   0xA84D             ADD      R0,SP,#+308
   \   0000188A   0x.... 0x....      BL       RoadBrd_RGBReadStatus
   \   0000188E   0x0006             MOVS     R6,R0
   1897          
   1898                              // Is this a BLE Operation?
   1899                              if ( BLE_Flag )
   \   00001890   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001892   0x2D00             CMP      R5,#+0
   \   00001894   0xD00A             BEQ.N    ??RoadBrd_ParseString_270
   1900                              {
   1901                                // Yes...Build and Send BLE Response NOW.
   1902                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001896   0xF8DF 0x1758      LDR.W    R1,??RoadBrd_ParseString_210
   \   0000189A   0xA80F             ADD      R0,SP,#+60
   \   0000189C   0x.... 0x....      BL       strcpy
   1903                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000018A0   0xA80F             ADD      R0,SP,#+60
   \   000018A2   0x.... 0x....      BL       strlen
   \   000018A6   0xA90F             ADD      R1,SP,#+60
   \   000018A8   0x.... 0x....      BL       BGM111_Transmit
   1904                              }
   1905                              
   1906                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_270: (+1)
   \   000018AC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000018AE   0x2E00             CMP      R6,#+0
   \   000018B0   0xD119             BNE.N    ??RoadBrd_ParseString_271
   1907                              {
   1908                                // Build Status
   1909                                strcpy( (char *)tempBffr2, "RGB Color Light Sensor Status: ");
   \   000018B2   0xF8DF 0x1DAC      LDR.W    R1,??RoadBrd_ParseString_272
   \   000018B6   0xA80F             ADD      R0,SP,#+60
   \   000018B8   0x.... 0x....      BL       strcpy
   1910                                sprintf( (char *)tempBffr3, "%02x / ", RGBSMeasure.status);
   \   000018BC   0xF89D 0x2134      LDRB     R2,[SP, #+308]
   \   000018C0   0xF8DF 0x1DA0      LDR.W    R1,??RoadBrd_ParseString_272+0x4
   \   000018C4   0xA80C             ADD      R0,SP,#+48
   \   000018C6   0x.... 0x....      BL       sprintf
   1911                                strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   000018CA   0xA90C             ADD      R1,SP,#+48
   \   000018CC   0xA80F             ADD      R0,SP,#+60
   \   000018CE   0x.... 0x....      BL       strcat
   1912                                strcat( (char *)tempBffr2, (char *)RGBSMeasure.Raw );
   \   000018D2   0xA94D             ADD      R1,SP,#+308
   \   000018D4   0x1C49             ADDS     R1,R1,#+1
   \   000018D6   0xA80F             ADD      R0,SP,#+60
   \   000018D8   0x.... 0x....      BL       strcat
   1913                                strcat( (char *)tempBffr2, "\r\n" );
   \   000018DC   0xA1A8             ADR.N    R1,??RoadBrd_ParseString_163  ;; 0x0D, 0x0A, 0x00, 0x00
   \   000018DE   0xA80F             ADD      R0,SP,#+60
   \   000018E0   0x.... 0x....      BL       strcat
   1914                              }
   1915                              else
   1916                                break;
   1917                              break;
   \   000018E4   0xE052             B.N      ??RoadBrd_ParseString_230
   \                     ??RoadBrd_ParseString_271: (+1)
   \   000018E6   0xE051             B.N      ??RoadBrd_ParseString_230
   1918          //------------------ H2 Command...Reset Hardware......     
   1919                            case '2':
   1920                              Status = RoadBrd_RGBReset();
   \                     ??RoadBrd_ParseString_233: (+1)
   \   000018E8   0x.... 0x....      BL       RoadBrd_RGBReset
   \   000018EC   0x0006             MOVS     R6,R0
   1921                              // Is this a BLE Operation?
   1922                              if ( BLE_Flag )
   \   000018EE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000018F0   0x2D00             CMP      R5,#+0
   \   000018F2   0xD00A             BEQ.N    ??RoadBrd_ParseString_273
   1923                              {
   1924                                // Yes...Build and Send BLE Response NOW.
   1925                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000018F4   0xF8DF 0x16F8      LDR.W    R1,??RoadBrd_ParseString_210
   \   000018F8   0xA80F             ADD      R0,SP,#+60
   \   000018FA   0x.... 0x....      BL       strcpy
   1926                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000018FE   0xA80F             ADD      R0,SP,#+60
   \   00001900   0x.... 0x....      BL       strlen
   \   00001904   0xA90F             ADD      R1,SP,#+60
   \   00001906   0x.... 0x....      BL       BGM111_Transmit
   1927                              }
   1928                              
   1929                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_273: (+1)
   \   0000190A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000190C   0x2E00             CMP      R6,#+0
   \   0000190E   0xD105             BNE.N    ??RoadBrd_ParseString_274
   1930                              {
   1931                                // Build Status
   1932                                strcpy( (char *)tempBffr2, "RGB Color Light Sensor: RESET CMD Sent Succesful.\r\n" );
   \   00001910   0xF8DF 0x1DC8      LDR.W    R1,??RoadBrd_ParseString_275
   \   00001914   0xA80F             ADD      R0,SP,#+60
   \   00001916   0x.... 0x....      BL       strcpy
   1933                              }
   1934                              else
   1935                                break;
   1936                              break;
   \   0000191A   0xE037             B.N      ??RoadBrd_ParseString_230
   \                     ??RoadBrd_ParseString_274: (+1)
   \   0000191C   0xE036             B.N      ??RoadBrd_ParseString_230
   1937          //------------------ H3 Command...Read ID.....     
   1938                            case '3':
   1939                              // 1. Time to send Command and collect status.  IDMeasure
   1940                              Status = RoadBrd_RGBReadID( &IDMeasure );
   \                     ??RoadBrd_ParseString_234: (+1)
   \   0000191E   0xA84F             ADD      R0,SP,#+316
   \   00001920   0x.... 0x....      BL       RoadBrd_RGBReadID
   \   00001924   0x0006             MOVS     R6,R0
   1941                              // Is this a BLE Operation?
   1942                              if ( BLE_Flag )
   \   00001926   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001928   0x2D00             CMP      R5,#+0
   \   0000192A   0xD00A             BEQ.N    ??RoadBrd_ParseString_276
   1943                              {
   1944                                // Yes...Build and Send BLE Response NOW.
   1945                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   0000192C   0xF8DF 0x16C0      LDR.W    R1,??RoadBrd_ParseString_210
   \   00001930   0xA80F             ADD      R0,SP,#+60
   \   00001932   0x.... 0x....      BL       strcpy
   1946                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001936   0xA80F             ADD      R0,SP,#+60
   \   00001938   0x.... 0x....      BL       strlen
   \   0000193C   0xA90F             ADD      R1,SP,#+60
   \   0000193E   0x.... 0x....      BL       BGM111_Transmit
   1947                              }
   1948                              
   1949                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_276: (+1)
   \   00001942   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001944   0x2E00             CMP      R6,#+0
   \   00001946   0xD11B             BNE.N    ??RoadBrd_ParseString_277
   1950                              {
   1951                                // Build Status
   1952                                strcpy( (char *)tempBffr2, "RGB Color Light Sensor ID Code: ");
   \   00001948   0xF8DF 0x1DD0      LDR.W    R1,??RoadBrd_ParseString_278
   \   0000194C   0xA80F             ADD      R0,SP,#+60
   \   0000194E   0x.... 0x....      BL       strcpy
   1953                                sprintf( (char *)tempBffr3, "%02x / ", IDMeasure.id);
   \   00001952   0xF89D 0x213C      LDRB     R2,[SP, #+316]
   \   00001956   0xF8DF 0x1D0C      LDR.W    R1,??RoadBrd_ParseString_272+0x4
   \   0000195A   0xA80C             ADD      R0,SP,#+48
   \   0000195C   0x.... 0x....      BL       sprintf
   1954                                strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   00001960   0xA90C             ADD      R1,SP,#+48
   \   00001962   0xA80F             ADD      R0,SP,#+60
   \   00001964   0x.... 0x....      BL       strcat
   1955                                strcat( (char *)tempBffr2, (char *)IDMeasure.Raw );
   \   00001968   0xA94F             ADD      R1,SP,#+316
   \   0000196A   0x1C49             ADDS     R1,R1,#+1
   \   0000196C   0xA80F             ADD      R0,SP,#+60
   \   0000196E   0x.... 0x....      BL       strcat
   1956                                strcat( (char *)tempBffr2, "\r\n" );
   \   00001972   0xA183             ADR.N    R1,??RoadBrd_ParseString_163  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001974   0xA80F             ADD      R0,SP,#+60
   \   00001976   0x.... 0x....      BL       strcat
   1957                             }
   1958                              else
   1959                                break;
   1960                              break;
   \   0000197A   0xE007             B.N      ??RoadBrd_ParseString_230
   \                     ??RoadBrd_ParseString_133:
   \   0000197C   0x........         DC32     ?_47
   \                     ??RoadBrd_ParseString_277: (+1)
   \   00001980   0xE004             B.N      ??RoadBrd_ParseString_230
   1961                            default:
   1962                              strcpy( (char *)tempBffr2, "ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_235: (+1)
   \   00001982   0xF8DF 0x1D9C      LDR.W    R1,??RoadBrd_ParseString_278+0x4
   \   00001986   0xA80F             ADD      R0,SP,#+60
   \   00001988   0x.... 0x....      BL       strcpy
   1963                              break;
   1964                          } //EndSwitch
   1965                        } //EndElse (Size == 1)
   1966                        break;    
   \                     ??RoadBrd_ParseString_230: (+1)
   \   0000198C   0xF001 0xBF8A      B.W      ??RoadBrd_ParseString_27
   1967          //**************************************************************************************************
   1968                      case 'P':
   1969                        // POWER SYSTEM. 
   1970                        switch( tempBffr[1] )
   \                     ??RoadBrd_ParseString_20: (+1)
   \   00001990   0x7860             LDRB     R0,[R4, #+1]
   \   00001992   0x2844             CMP      R0,#+68
   \   00001994   0xD018             BEQ.N    ??RoadBrd_ParseString_279
   \   00001996   0x2855             CMP      R0,#+85
   \   00001998   0xD11F             BNE.N    ??RoadBrd_ParseString_280
   1971                        {
   1972          //++++++++++++++++++++++++++++++++++++++++++  5V Power Supply Commands.
   1973                          case 'U':
   1974                            // Turn on 5V Power Supply.
   1975                            RoadBrd_gpio_On( gTAM_PWR );
   \                     ??RoadBrd_ParseString_281: (+1)
   \   0000199A   0x2004             MOVS     R0,#+4
   \   0000199C   0x.... 0x....      BL       RoadBrd_gpio_On
   1976                            // Is this a BLE Operation?
   1977                            if ( BLE_Flag )
   \   000019A0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000019A2   0x2D00             CMP      R5,#+0
   \   000019A4   0xD00A             BEQ.N    ??RoadBrd_ParseString_282
   1978                            {
   1979                              // Yes...Build and Send BLE Response NOW.
   1980                              strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000019A6   0xF8DF 0x1648      LDR.W    R1,??RoadBrd_ParseString_210
   \   000019AA   0xA80F             ADD      R0,SP,#+60
   \   000019AC   0x.... 0x....      BL       strcpy
   1981                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000019B0   0xA80F             ADD      R0,SP,#+60
   \   000019B2   0x.... 0x....      BL       strlen
   \   000019B6   0xA90F             ADD      R1,SP,#+60
   \   000019B8   0x.... 0x....      BL       BGM111_Transmit
   1982                            }
   1983                            
   1984                            strcpy( (char *)tempBffr2, "5V Power Plane Powered UP.\r\n");
   \                     ??RoadBrd_ParseString_282: (+1)
   \   000019BC   0xF8DF 0x1DBC      LDR.W    R1,??RoadBrd_ParseString_283
   \   000019C0   0xA80F             ADD      R0,SP,#+60
   \   000019C2   0x.... 0x....      BL       strcpy
   1985                            break;
   \   000019C6   0xE00D             B.N      ??RoadBrd_ParseString_284
   1986                          case 'D':
   1987                            // Turn off 5V Power Supply.
   1988                            RoadBrd_gpio_Off( gTAM_PWR );
   \                     ??RoadBrd_ParseString_279: (+1)
   \   000019C8   0x2004             MOVS     R0,#+4
   \   000019CA   0x.... 0x....      BL       RoadBrd_gpio_Off
   1989                            strcpy( (char *)tempBffr2, "5V Power Plane Powered DOWN.\r\n");
   \   000019CE   0xF8DF 0x1DB0      LDR.W    R1,??RoadBrd_ParseString_283+0x4
   \   000019D2   0xA80F             ADD      R0,SP,#+60
   \   000019D4   0x.... 0x....      BL       strcpy
   1990                            break;
   \   000019D8   0xE004             B.N      ??RoadBrd_ParseString_284
   1991                          default:
   1992                            strcpy( (char *)tempBffr2, "ERROR: Illegal 5V Power Plane Command.\r\n");
   \                     ??RoadBrd_ParseString_280: (+1)
   \   000019DA   0xF8DF 0x1DA8      LDR.W    R1,??RoadBrd_ParseString_283+0x8
   \   000019DE   0xA80F             ADD      R0,SP,#+60
   \   000019E0   0x.... 0x....      BL       strcpy
   1993                            break;
   1994                        }
   1995                        break;
   \                     ??RoadBrd_ParseString_284: (+1)
   \   000019E4   0xF001 0xBF5E      B.W      ??RoadBrd_ParseString_27
   \                     ??RoadBrd_ParseString_137:
   \   000019E8   0x........         DC32     ?_48
   \   000019EC   0x........         DC32     ?_49
   1996          //**************************************************************************************************
   1997                      case 'T':
   1998                        // TEST CMDS. 
   1999                        // Test Size to make sure we have enough Characters for this operation
   2000                        if (Size <= 1)
   \                     ??RoadBrd_ParseString_21: (+1)
   \   000019F0   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000019F4   0xF1B8 0x0F02      CMP      R8,#+2
   \   000019F8   0xDA16             BGE.N    ??RoadBrd_ParseString_285
   2001                        {
   2002                          // Is this a BLE Operation?
   2003                          if ( BLE_Flag )
   \   000019FA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000019FC   0x2D00             CMP      R5,#+0
   \   000019FE   0xD00A             BEQ.N    ??RoadBrd_ParseString_286
   2004                          {
   2005                            // Yes...Build and Send BLE Response NOW.
   2006                            strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001A00   0xF8DF 0x15EC      LDR.W    R1,??RoadBrd_ParseString_210
   \   00001A04   0xA80F             ADD      R0,SP,#+60
   \   00001A06   0x.... 0x....      BL       strcpy
   2007                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001A0A   0xA80F             ADD      R0,SP,#+60
   \   00001A0C   0x.... 0x....      BL       strlen
   \   00001A10   0xA90F             ADD      R1,SP,#+60
   \   00001A12   0x.... 0x....      BL       BGM111_Transmit
   2008                          }
   2009                          
   2010                          strcpy( (char *)tempBffr2, "T ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_286: (+1)
   \   00001A16   0xF8DF 0x1DC0      LDR.W    R1,??RoadBrd_ParseString_287
   \   00001A1A   0xA80F             ADD      R0,SP,#+60
   \   00001A1C   0x.... 0x....      BL       strcpy
   \   00001A20   0xF001 0xBF2E      B.W      ??RoadBrd_ParseString_288
   \                     ??RoadBrd_ParseString_142:
   \   00001A24   0x........         DC32     ?_50
   2011                        }
   2012                        else
   2013                        {
   2014                          switch( tempBffr[1] )
   \                     ??RoadBrd_ParseString_285: (+1)
   \   00001A28   0x7860             LDRB     R0,[R4, #+1]
   \   00001A2A   0x2843             CMP      R0,#+67
   \   00001A2C   0xF000 0x82E6      BEQ.W    ??RoadBrd_ParseString_289
   \   00001A30   0x2844             CMP      R0,#+68
   \   00001A32   0xF001 0x8289      BEQ.W    ??RoadBrd_ParseString_290
   \   00001A36   0x2846             CMP      R0,#+70
   \   00001A38   0xF001 0x86C6      BEQ.W    ??RoadBrd_ParseString_291
   \   00001A3C   0x2849             CMP      R0,#+73
   \   00001A3E   0xD010             BEQ.N    ??RoadBrd_ParseString_292
   \   00001A40   0x284B             CMP      R0,#+75
   \   00001A42   0xF001 0x82BF      BEQ.W    ??RoadBrd_ParseString_293
   \   00001A46   0x284C             CMP      R0,#+76
   \   00001A48   0xF001 0x86D4      BEQ.W    ??RoadBrd_ParseString_294
   \   00001A4C   0x284D             CMP      R0,#+77
   \   00001A4E   0xF001 0x868F      BEQ.W    ??RoadBrd_ParseString_295
   \   00001A52   0x2852             CMP      R0,#+82
   \   00001A54   0xF001 0x829A      BEQ.W    ??RoadBrd_ParseString_296
   \   00001A58   0x2855             CMP      R0,#+85
   \   00001A5A   0xF001 0x861D      BEQ.W    ??RoadBrd_ParseString_297
   \   00001A5E   0xF001 0xBEFE      B.W      ??RoadBrd_ParseString_298
   2015                          {
   2016          //++++++++++++++++++++++++++++++++++++++++++  I2C Commands.
   2017                            case 'I':
   2018                              // I2C Commands.
   2019                              // Test Size to make sure we have enough Characters for this operation
   2020                              if (Size < 9)
   \                     ??RoadBrd_ParseString_292: (+1)
   \   00001A62   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00001A66   0xF1B8 0x0F09      CMP      R8,#+9
   \   00001A6A   0xDA15             BGE.N    ??RoadBrd_ParseString_299
   2021                              {
   2022                                // Is this a BLE Operation?
   2023                                if ( BLE_Flag )
   \   00001A6C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001A6E   0x2D00             CMP      R5,#+0
   \   00001A70   0xD00A             BEQ.N    ??RoadBrd_ParseString_300
   2024                                {
   2025                                  // Yes...Build and Send BLE Response NOW.
   2026                                  strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001A72   0xF8DF 0x157C      LDR.W    R1,??RoadBrd_ParseString_210
   \   00001A76   0xA80F             ADD      R0,SP,#+60
   \   00001A78   0x.... 0x....      BL       strcpy
   2027                                  BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001A7C   0xA80F             ADD      R0,SP,#+60
   \   00001A7E   0x.... 0x....      BL       strlen
   \   00001A82   0xA90F             ADD      R1,SP,#+60
   \   00001A84   0x.... 0x....      BL       BGM111_Transmit
   2028                                }
   2029                                
   2030                                strcpy( (char *)tempBffr2, "TI SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_300: (+1)
   \   00001A88   0xF8DF 0x1D50      LDR.W    R1,??RoadBrd_ParseString_287+0x4
   \   00001A8C   0xA80F             ADD      R0,SP,#+60
   \   00001A8E   0x.... 0x....      BL       strcpy
   \   00001A92   0xE2AA             B.N      ??RoadBrd_ParseString_301
   \                     ??RoadBrd_ParseString_152:
   \   00001A94   0x........         DC32     ?_51
   2031                              }
   2032                              else
   2033                              {
   2034                                switch( tempBffr[2] )
   \                     ??RoadBrd_ParseString_299: (+1)
   \   00001A98   0x78A0             LDRB     R0,[R4, #+2]
   \   00001A9A   0x2851             CMP      R0,#+81
   \   00001A9C   0xF000 0x81FC      BEQ.W    ??RoadBrd_ParseString_302
   \   00001AA0   0xF0C0 0x829E      BCC.W    ??RoadBrd_ParseString_303
   \   00001AA4   0x2853             CMP      R0,#+83
   \   00001AA6   0xD002             BEQ.N    ??RoadBrd_ParseString_304
   \   00001AA8   0xF0C0 0x80CE      BCC.W    ??RoadBrd_ParseString_305
   \   00001AAC   0xE298             B.N      ??RoadBrd_ParseString_303
   2035                                {
   2036          //------------------
   2037                                  case 'S':
   2038                                    //I2C Send Command.
   2039                                    // Step 1. Validate format.
   2040                                    if( (tempBffr[3]!=':') ||
   2041                                        (tempBffr[6]!='.') )
   \                     ??RoadBrd_ParseString_304: (+1)
   \   00001AAE   0x78E0             LDRB     R0,[R4, #+3]
   \   00001AB0   0x283A             CMP      R0,#+58
   \   00001AB2   0xD102             BNE.N    ??RoadBrd_ParseString_306
   \   00001AB4   0x79A0             LDRB     R0,[R4, #+6]
   \   00001AB6   0x282E             CMP      R0,#+46
   \   00001AB8   0xD016             BEQ.N    ??RoadBrd_ParseString_307
   2042                                    {
   2043                                      // Is this a BLE Operation?
   2044                                      if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_306: (+1)
   \   00001ABA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001ABC   0x2D00             CMP      R5,#+0
   \   00001ABE   0xD00A             BEQ.N    ??RoadBrd_ParseString_308
   2045                                      {
   2046                                        // Yes...Build and Send BLE Response NOW.
   2047                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001AC0   0xF8DF 0x152C      LDR.W    R1,??RoadBrd_ParseString_210
   \   00001AC4   0xA80F             ADD      R0,SP,#+60
   \   00001AC6   0x.... 0x....      BL       strcpy
   2048                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001ACA   0xA80F             ADD      R0,SP,#+60
   \   00001ACC   0x.... 0x....      BL       strlen
   \   00001AD0   0xA90F             ADD      R1,SP,#+60
   \   00001AD2   0x.... 0x....      BL       BGM111_Transmit
   2049                                      }
   2050                                     
   2051                                      strcpy( (char *)tempBffr2, "TIS SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_308: (+1)
   \   00001AD6   0xF8DF 0x1D08      LDR.W    R1,??RoadBrd_ParseString_287+0x8
   \   00001ADA   0xA80F             ADD      R0,SP,#+60
   \   00001ADC   0x.... 0x....      BL       strcpy
   \   00001AE0   0xE0B1             B.N      ??RoadBrd_ParseString_309
   \   00001AE2   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_159:
   \   00001AE4   0x........         DC32     ?_52
   2052                                    }
   2053                                    else
   2054                                    {
   2055                                      // Is this a BLE Operation?
   2056                                      if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_307: (+1)
   \   00001AE8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001AEA   0x2D00             CMP      R5,#+0
   \   00001AEC   0xD00A             BEQ.N    ??RoadBrd_ParseString_310
   2057                                      {
   2058                                        // Yes...Build and Send BLE Response NOW.
   2059                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001AEE   0xF8DF 0x1500      LDR.W    R1,??RoadBrd_ParseString_210
   \   00001AF2   0xA80F             ADD      R0,SP,#+60
   \   00001AF4   0x.... 0x....      BL       strcpy
   2060                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001AF8   0xA80F             ADD      R0,SP,#+60
   \   00001AFA   0x.... 0x....      BL       strlen
   \   00001AFE   0xA90F             ADD      R1,SP,#+60
   \   00001B00   0x.... 0x....      BL       BGM111_Transmit
   2061                                      }
   2062                                      
   2063                                      // 2. Grab Address and validate a legal number
   2064                                      tempBffr3[0] = tempBffr[4];
   \                     ??RoadBrd_ParseString_310: (+1)
   \   00001B04   0xF994 0x0004      LDRSB    R0,[R4, #+4]
   \   00001B08   0xF88D 0x0030      STRB     R0,[SP, #+48]
   2065                                      tempBffr3[1] = tempBffr[5];
   \   00001B0C   0xF994 0x0005      LDRSB    R0,[R4, #+5]
   \   00001B10   0xF88D 0x0031      STRB     R0,[SP, #+49]
   2066                                      tempBffr3[2] = 0x00;
   \   00001B14   0x2000             MOVS     R0,#+0
   \   00001B16   0xF88D 0x0032      STRB     R0,[SP, #+50]
   2067                                      if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001B1A   0xA80C             ADD      R0,SP,#+48
   \   00001B1C   0x.... 0x....      BL       isHexNum
   \   00001B20   0x2800             CMP      R0,#+0
   \   00001B22   0xD105             BNE.N    ??RoadBrd_ParseString_311
   2068                                        strcpy( (char *)tempBffr2, "TIS SYNTAX ERROR: Address not HEX Value.\r\n");
   \   00001B24   0xF8DF 0x1DD4      LDR.W    R1,??RoadBrd_ParseString_312
   \   00001B28   0xA80F             ADD      R0,SP,#+60
   \   00001B2A   0x.... 0x....      BL       strcpy
   \   00001B2E   0xE08A             B.N      ??RoadBrd_ParseString_309
   2069                                      else
   2070                                      {
   2071                                        // Legal Address. Save it as value
   2072                                        Address = hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_311: (+1)
   \   00001B30   0xA80C             ADD      R0,SP,#+48
   \   00001B32   0x.... 0x....      BL       hatoi
   \   00001B36   0x9031             STR      R0,[SP, #+196]
   2073                                        // 3. Now get the number of bytes of data from field.
   2074          //                              sprintf( (char *)tempBffr2, "TIS: Good Address: %x.\r\n", Address);
   2075                                        tempBffr3[0] = tempBffr[7];
   \   00001B38   0xF994 0x0007      LDRSB    R0,[R4, #+7]
   \   00001B3C   0xF88D 0x0030      STRB     R0,[SP, #+48]
   2076                                        tempBffr3[1] = tempBffr[8];
   \   00001B40   0xF994 0x0008      LDRSB    R0,[R4, #+8]
   \   00001B44   0xF88D 0x0031      STRB     R0,[SP, #+49]
   2077                                        tempBffr3[2] = 0x00;
   \   00001B48   0x2000             MOVS     R0,#+0
   \   00001B4A   0xF88D 0x0032      STRB     R0,[SP, #+50]
   2078                                        if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001B4E   0xA80C             ADD      R0,SP,#+48
   \   00001B50   0x.... 0x....      BL       isHexNum
   \   00001B54   0x2800             CMP      R0,#+0
   \   00001B56   0xD105             BNE.N    ??RoadBrd_ParseString_313
   2079                                          strcpy( (char *)tempBffr2, "TIS SYNTAX ERROR: Number of Bytes not HEX Value.\r\n");
   \   00001B58   0xF8DF 0x1DA4      LDR.W    R1,??RoadBrd_ParseString_312+0x4
   \   00001B5C   0xA80F             ADD      R0,SP,#+60
   \   00001B5E   0x.... 0x....      BL       strcpy
   \   00001B62   0xE070             B.N      ??RoadBrd_ParseString_309
   2080                                        else
   2081                                        {
   2082                                          // Legal NUMBER BYTES. Save it as value
   2083                                          num_bytes = hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_313: (+1)
   \   00001B64   0xA80C             ADD      R0,SP,#+48
   \   00001B66   0x.... 0x....      BL       hatoi
   \   00001B6A   0x9034             STR      R0,[SP, #+208]
   2084                                          // 4. Test num_bytes. If Zero, We are done
   2085                                          if (num_bytes == 0)
   \   00001B6C   0x9834             LDR      R0,[SP, #+208]
   \   00001B6E   0x2800             CMP      R0,#+0
   \   00001B70   0xD112             BNE.N    ??RoadBrd_ParseString_314
   2086                                          {
   2087                                            sprintf( (char *)tempBffr2, "TIS: GOOD CMD: %x.\r\n", Address);
   \   00001B72   0x9A31             LDR      R2,[SP, #+196]
   \   00001B74   0xF8DF 0x1D8C      LDR.W    R1,??RoadBrd_ParseString_312+0x8
   \   00001B78   0xA80F             ADD      R0,SP,#+60
   \   00001B7A   0x.... 0x....      BL       sprintf
   \   00001B7E   0xE039             B.N      ??RoadBrd_ParseString_315
   \                     ??RoadBrd_ParseString_163:
   \   00001B80   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
   \   00001B84   0x........         DC32     ?_53
   \   00001B88   0x........         DC32     ?_54
   \   00001B8C   0x........         DC32     ?_55
   \   00001B90   0x........         DC32     ?_56
   \   00001B94   0x........         DC32     ?_57
   2088                                          }
   2089                                          else
   2090                                          {
   2091                                            // 5. Time to get all the data.
   2092                                            Error = 0;
   \                     ??RoadBrd_ParseString_314: (+1)
   \   00001B98   0x2000             MOVS     R0,#+0
   \   00001B9A   0x9035             STR      R0,[SP, #+212]
   2093                                            for (x=0; x<num_bytes; x++)
   \   00001B9C   0x2000             MOVS     R0,#+0
   \   00001B9E   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_316: (+1)
   \   00001BA0   0x9834             LDR      R0,[SP, #+208]
   \   00001BA2   0x4287             CMP      R7,R0
   \   00001BA4   0xDA26             BGE.N    ??RoadBrd_ParseString_315
   2094                                            {
   2095                                              tempBffr3[0] = tempBffr[10+x*3];
   \   00001BA6   0x2003             MOVS     R0,#+3
   \   00001BA8   0xFB00 0xF007      MUL      R0,R0,R7
   \   00001BAC   0x4420             ADD      R0,R4,R0
   \   00001BAE   0xF990 0x000A      LDRSB    R0,[R0, #+10]
   \   00001BB2   0xF88D 0x0030      STRB     R0,[SP, #+48]
   2096                                              tempBffr3[1] = tempBffr[11+x*3];
   \   00001BB6   0x2003             MOVS     R0,#+3
   \   00001BB8   0xFB00 0xF007      MUL      R0,R0,R7
   \   00001BBC   0x4420             ADD      R0,R4,R0
   \   00001BBE   0xF990 0x000B      LDRSB    R0,[R0, #+11]
   \   00001BC2   0xF88D 0x0031      STRB     R0,[SP, #+49]
   2097                                              tempBffr3[2] = 0x00;
   \   00001BC6   0x2000             MOVS     R0,#+0
   \   00001BC8   0xF88D 0x0032      STRB     R0,[SP, #+50]
   2098                                              if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001BCC   0xA80C             ADD      R0,SP,#+48
   \   00001BCE   0x.... 0x....      BL       isHexNum
   \   00001BD2   0x2800             CMP      R0,#+0
   \   00001BD4   0xD107             BNE.N    ??RoadBrd_ParseString_317
   2099                                              {
   2100                                                strcpy( (char *)tempBffr2, "TIS SYNTAX ERROR: Address not HEX Value.\r\n");
   \   00001BD6   0xF8DF 0x1D24      LDR.W    R1,??RoadBrd_ParseString_312
   \   00001BDA   0xA80F             ADD      R0,SP,#+60
   \   00001BDC   0x.... 0x....      BL       strcpy
   2101                                                Error = 1;
   \   00001BE0   0x2001             MOVS     R0,#+1
   \   00001BE2   0x9035             STR      R0,[SP, #+212]
   2102                                                break;
   \   00001BE4   0xE006             B.N      ??RoadBrd_ParseString_315
   2103                                              }
   2104                                              else
   2105                                              {
   2106                                                i2cData[x] =  hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_317: (+1)
   \   00001BE6   0xA80C             ADD      R0,SP,#+48
   \   00001BE8   0x.... 0x....      BL       hatoi
   \   00001BEC   0xA999             ADD      R1,SP,#+612
   \   00001BEE   0x55C8             STRB     R0,[R1, R7]
   2107                                              } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)
   2108                                            } //EndFor (x=0; x<num_bytes; x++)
   \   00001BF0   0x1C7F             ADDS     R7,R7,#+1
   \   00001BF2   0xE7D5             B.N      ??RoadBrd_ParseString_316
   2109                                          } //EndElse (num_bytes == 0)
   2110                                          if (Error==0)
   \                     ??RoadBrd_ParseString_315: (+1)
   \   00001BF4   0x9835             LDR      R0,[SP, #+212]
   \   00001BF6   0x2800             CMP      R0,#+0
   \   00001BF8   0xD105             BNE.N    ??RoadBrd_ParseString_318
   2111                                          {
   2112                                            sprintf( (char *)tempBffr2, "TIS: GOOD CMD: %x.", Address);
   \   00001BFA   0x9A31             LDR      R2,[SP, #+196]
   \   00001BFC   0xF8DF 0x1DC8      LDR.W    R1,??RoadBrd_ParseString_319
   \   00001C00   0xA80F             ADD      R0,SP,#+60
   \   00001C02   0x.... 0x....      BL       sprintf
   2113                                          }
   2114                                          for(x=0; x<num_bytes; x++)
   \                     ??RoadBrd_ParseString_318: (+1)
   \   00001C06   0x2000             MOVS     R0,#+0
   \   00001C08   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_320: (+1)
   \   00001C0A   0x9834             LDR      R0,[SP, #+208]
   \   00001C0C   0x4287             CMP      R7,R0
   \   00001C0E   0xDA0B             BGE.N    ??RoadBrd_ParseString_321
   2115                                          {
   2116                                            sprintf( (char *)tempBffr3, "%x.", i2cData[x]);
   \   00001C10   0xA899             ADD      R0,SP,#+612
   \   00001C12   0x5DC2             LDRB     R2,[R0, R7]
   \   00001C14   0xA1CC             ADR.N    R1,??RoadBrd_ParseString_202+0x4  ;; "%x."
   \   00001C16   0xA80C             ADD      R0,SP,#+48
   \   00001C18   0x.... 0x....      BL       sprintf
   2117                                            strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   00001C1C   0xA90C             ADD      R1,SP,#+48
   \   00001C1E   0xA80F             ADD      R0,SP,#+60
   \   00001C20   0x.... 0x....      BL       strcat
   2118                                          }
   \   00001C24   0x1C7F             ADDS     R7,R7,#+1
   \   00001C26   0xE7F0             B.N      ??RoadBrd_ParseString_320
   2119                                          strcat( (char *)tempBffr2, "\r\n" );
   \                     ??RoadBrd_ParseString_321: (+1)
   \   00001C28   0xA1C8             ADR.N    R1,??RoadBrd_ParseString_202+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001C2A   0xA80F             ADD      R0,SP,#+60
   \   00001C2C   0x.... 0x....      BL       strcat
   2120                                          // 6. Time to send Command and collect status.
   2121                                          Status =  RoadBrd_I2C_Master_Transmit((uint16_t)Address, i2cData, (uint16_t)num_bytes, I2C_TIMEOUT);
   \   00001C30   0xF44F 0x73FA      MOV      R3,#+500
   \   00001C34   0x9834             LDR      R0,[SP, #+208]
   \   00001C36   0x0002             MOVS     R2,R0
   \   00001C38   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00001C3A   0xA999             ADD      R1,SP,#+612
   \   00001C3C   0x9831             LDR      R0,[SP, #+196]
   \   00001C3E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00001C40   0x.... 0x....      BL       RoadBrd_I2C_Master_Transmit
   \   00001C44   0x0006             MOVS     R6,R0
   2122                                          
   2123                                        } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)...NUMBER BYTES
   2124                                        
   2125                                      } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)...Address
   2126                                      
   2127                                    } //EndElse ( (tempBffr[2]!=':') || (tempBffr[5]!='.') )
   2128                                
   2129                                    break;
   \                     ??RoadBrd_ParseString_309: (+1)
   \   00001C46   0xE1D0             B.N      ??RoadBrd_ParseString_301
   2130          //------------------
   2131                                  case 'R':
   2132                                    //I2C Receive Command
   2133                                    // Step 1. Validate format.
   2134                                    if( (tempBffr[3]!=':') ||
   2135                                        (tempBffr[6]!='.') ||
   2136                                        (tempBffr[9]!='.')  )
   \                     ??RoadBrd_ParseString_305: (+1)
   \   00001C48   0x78E0             LDRB     R0,[R4, #+3]
   \   00001C4A   0x283A             CMP      R0,#+58
   \   00001C4C   0xD105             BNE.N    ??RoadBrd_ParseString_322
   \   00001C4E   0x79A0             LDRB     R0,[R4, #+6]
   \   00001C50   0x282E             CMP      R0,#+46
   \   00001C52   0xD102             BNE.N    ??RoadBrd_ParseString_322
   \   00001C54   0x7A60             LDRB     R0,[R4, #+9]
   \   00001C56   0x282E             CMP      R0,#+46
   \   00001C58   0xD016             BEQ.N    ??RoadBrd_ParseString_323
   2137                                    {
   2138                                      // Is this a BLE Operation?
   2139                                      if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_322: (+1)
   \   00001C5A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001C5C   0x2D00             CMP      R5,#+0
   \   00001C5E   0xD00A             BEQ.N    ??RoadBrd_ParseString_324
   2140                                      {
   2141                                        // Yes...Build and Send BLE Response NOW.
   2142                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001C60   0xF8DF 0x138C      LDR.W    R1,??RoadBrd_ParseString_210
   \   00001C64   0xA80F             ADD      R0,SP,#+60
   \   00001C66   0x.... 0x....      BL       strcpy
   2143                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001C6A   0xA80F             ADD      R0,SP,#+60
   \   00001C6C   0x.... 0x....      BL       strlen
   \   00001C70   0xA90F             ADD      R1,SP,#+60
   \   00001C72   0x.... 0x....      BL       BGM111_Transmit
   2144                                      }
   2145                                      
   2146                                      strcpy( (char *)tempBffr2, "TIR SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_324: (+1)
   \   00001C76   0xF8DF 0x1DD4      LDR.W    R1,??RoadBrd_ParseString_325
   \   00001C7A   0xA80F             ADD      R0,SP,#+60
   \   00001C7C   0x.... 0x....      BL       strcpy
   \   00001C80   0xE106             B.N      ??RoadBrd_ParseString_326
   \   00001C82   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_173:
   \   00001C84   0x........         DC32     ?_58
   2147                                    }
   2148                                    else
   2149                                    {
   2150                                      // Is this a BLE Operation?
   2151                                      if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_323: (+1)
   \   00001C88   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001C8A   0x2D00             CMP      R5,#+0
   \   00001C8C   0xD009             BEQ.N    ??RoadBrd_ParseString_327
   2152                                      {
   2153                                        // Yes...Build and Send BLE Response NOW.
   2154                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001C8E   0x49D8             LDR.N    R1,??RoadBrd_ParseString_210
   \   00001C90   0xA80F             ADD      R0,SP,#+60
   \   00001C92   0x.... 0x....      BL       strcpy
   2155                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001C96   0xA80F             ADD      R0,SP,#+60
   \   00001C98   0x.... 0x....      BL       strlen
   \   00001C9C   0xA90F             ADD      R1,SP,#+60
   \   00001C9E   0x.... 0x....      BL       BGM111_Transmit
   2156                                      }
   2157                                      
   2158                                      // 2. Grab Address and validate a legal number
   2159                                      tempBffr3[0] = tempBffr[4];
   \                     ??RoadBrd_ParseString_327: (+1)
   \   00001CA2   0xF994 0x0004      LDRSB    R0,[R4, #+4]
   \   00001CA6   0xF88D 0x0030      STRB     R0,[SP, #+48]
   2160                                      tempBffr3[1] = tempBffr[5];
   \   00001CAA   0xF994 0x0005      LDRSB    R0,[R4, #+5]
   \   00001CAE   0xF88D 0x0031      STRB     R0,[SP, #+49]
   2161                                      tempBffr3[2] = 0x00;
   \   00001CB2   0x2000             MOVS     R0,#+0
   \   00001CB4   0xF88D 0x0032      STRB     R0,[SP, #+50]
   2162                                      if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001CB8   0xA80C             ADD      R0,SP,#+48
   \   00001CBA   0x.... 0x....      BL       isHexNum
   \   00001CBE   0x2800             CMP      R0,#+0
   \   00001CC0   0xD105             BNE.N    ??RoadBrd_ParseString_328
   2163                                        strcpy( (char *)tempBffr2, "TIR SYNTAX ERROR: Address not HEX Value.\r\n");
   \   00001CC2   0xF8DF 0x1D8C      LDR.W    R1,??RoadBrd_ParseString_325+0x4
   \   00001CC6   0xA80F             ADD      R0,SP,#+60
   \   00001CC8   0x.... 0x....      BL       strcpy
   \   00001CCC   0xE0E0             B.N      ??RoadBrd_ParseString_326
   2164                                      else
   2165                                      {
   2166                                        // Legal Address. Save it as value
   2167                                        Address = hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_328: (+1)
   \   00001CCE   0xA80C             ADD      R0,SP,#+48
   \   00001CD0   0x.... 0x....      BL       hatoi
   \   00001CD4   0x9031             STR      R0,[SP, #+196]
   2168                                        // 3. Now get the number of bytes of data from field.
   2169                                        tempBffr3[0] = tempBffr[7];
   \   00001CD6   0xF994 0x0007      LDRSB    R0,[R4, #+7]
   \   00001CDA   0xF88D 0x0030      STRB     R0,[SP, #+48]
   2170                                        tempBffr3[1] = tempBffr[8];
   \   00001CDE   0xF994 0x0008      LDRSB    R0,[R4, #+8]
   \   00001CE2   0xF88D 0x0031      STRB     R0,[SP, #+49]
   2171                                        tempBffr3[2] = 0x00;
   \   00001CE6   0x2000             MOVS     R0,#+0
   \   00001CE8   0xF88D 0x0032      STRB     R0,[SP, #+50]
   2172                                        if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001CEC   0xA80C             ADD      R0,SP,#+48
   \   00001CEE   0x.... 0x....      BL       isHexNum
   \   00001CF2   0x2800             CMP      R0,#+0
   \   00001CF4   0xD105             BNE.N    ??RoadBrd_ParseString_329
   2173                                          strcpy( (char *)tempBffr2, "TIR SYNTAX ERROR: Number of Bytes not HEX Value.\r\n");
   \   00001CF6   0xF8DF 0x1DDC      LDR.W    R1,??RoadBrd_ParseString_330
   \   00001CFA   0xA80F             ADD      R0,SP,#+60
   \   00001CFC   0x.... 0x....      BL       strcpy
   \   00001D00   0xE0C6             B.N      ??RoadBrd_ParseString_326
   2174                                        else
   2175                                        {
   2176                                          // Legal NUMBER BYTES. Save it as value
   2177                                          num_bytes = hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_329: (+1)
   \   00001D02   0xA80C             ADD      R0,SP,#+48
   \   00001D04   0x.... 0x....      BL       hatoi
   \   00001D08   0x9034             STR      R0,[SP, #+208]
   2178                                          
   2179                                          // 3a. Now get the number of bytes Received of data from field.
   2180                                          tempBffr3[0] = tempBffr[10];
   \   00001D0A   0xF994 0x000A      LDRSB    R0,[R4, #+10]
   \   00001D0E   0xF88D 0x0030      STRB     R0,[SP, #+48]
   2181                                          tempBffr3[1] = tempBffr[11];
   \   00001D12   0xF994 0x000B      LDRSB    R0,[R4, #+11]
   \   00001D16   0xF88D 0x0031      STRB     R0,[SP, #+49]
   2182                                          tempBffr3[2] = 0x00;
   \   00001D1A   0x2000             MOVS     R0,#+0
   \   00001D1C   0xF88D 0x0032      STRB     R0,[SP, #+50]
   2183                                          if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001D20   0xA80C             ADD      R0,SP,#+48
   \   00001D22   0x.... 0x....      BL       isHexNum
   \   00001D26   0x2800             CMP      R0,#+0
   \   00001D28   0xD105             BNE.N    ??RoadBrd_ParseString_331
   2184                                            strcpy( (char *)tempBffr2, "TIR SYNTAX ERROR: Number of Bytes RECEIVED not HEX Value.\r\n");
   \   00001D2A   0xF8DF 0x1DAC      LDR.W    R1,??RoadBrd_ParseString_330+0x4
   \   00001D2E   0xA80F             ADD      R0,SP,#+60
   \   00001D30   0x.... 0x....      BL       strcpy
   \   00001D34   0xE0AC             B.N      ??RoadBrd_ParseString_326
   2185                                          else
   2186                                          {
   2187                                            // Legal NUMBER BYTES. Save it as value
   2188                                            num_bytes_received = hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_331: (+1)
   \   00001D36   0xA80C             ADD      R0,SP,#+48
   \   00001D38   0x.... 0x....      BL       hatoi
   \   00001D3C   0x9039             STR      R0,[SP, #+228]
   2189                                            // 4. Test num_bytes. If Zero, We are done
   2190                                            if (num_bytes == 0)
   \   00001D3E   0x9834             LDR      R0,[SP, #+208]
   \   00001D40   0x2800             CMP      R0,#+0
   \   00001D42   0xD106             BNE.N    ??RoadBrd_ParseString_332
   2191                                            {
   2192                                              sprintf( (char *)tempBffr2, "TIR: GOOD CMD: %x.\r\n", Address);
   \   00001D44   0x9A31             LDR      R2,[SP, #+196]
   \   00001D46   0xF8DF 0x1D94      LDR.W    R1,??RoadBrd_ParseString_330+0x8
   \   00001D4A   0xA80F             ADD      R0,SP,#+60
   \   00001D4C   0x.... 0x....      BL       sprintf
   \   00001D50   0xE035             B.N      ??RoadBrd_ParseString_333
   2193                                            }
   2194                                            else
   2195                                            {
   2196                                              // 5. Time to get all the data.
   2197                                              Error = 0;
   \                     ??RoadBrd_ParseString_332: (+1)
   \   00001D52   0x2000             MOVS     R0,#+0
   \   00001D54   0x9035             STR      R0,[SP, #+212]
   2198                                              for (x=0; x<num_bytes; x++)
   \   00001D56   0x2000             MOVS     R0,#+0
   \   00001D58   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_334: (+1)
   \   00001D5A   0x9834             LDR      R0,[SP, #+208]
   \   00001D5C   0x4287             CMP      R7,R0
   \   00001D5E   0xDA2E             BGE.N    ??RoadBrd_ParseString_333
   2199                                              {
   2200                                                tempBffr3[0] = tempBffr[13+x*3];
   \   00001D60   0x2003             MOVS     R0,#+3
   \   00001D62   0xFB00 0xF007      MUL      R0,R0,R7
   \   00001D66   0x4420             ADD      R0,R4,R0
   \   00001D68   0xF990 0x000D      LDRSB    R0,[R0, #+13]
   \   00001D6C   0xF88D 0x0030      STRB     R0,[SP, #+48]
   2201                                                tempBffr3[1] = tempBffr[14+x*3];
   \   00001D70   0x2003             MOVS     R0,#+3
   \   00001D72   0xFB00 0xF007      MUL      R0,R0,R7
   \   00001D76   0x4420             ADD      R0,R4,R0
   \   00001D78   0xF990 0x000E      LDRSB    R0,[R0, #+14]
   \   00001D7C   0xF88D 0x0031      STRB     R0,[SP, #+49]
   2202                                                tempBffr3[2] = 0x00;
   \   00001D80   0x2000             MOVS     R0,#+0
   \   00001D82   0xF88D 0x0032      STRB     R0,[SP, #+50]
   2203                                                if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001D86   0xA80C             ADD      R0,SP,#+48
   \   00001D88   0x.... 0x....      BL       isHexNum
   \   00001D8C   0x2800             CMP      R0,#+0
   \   00001D8E   0xD10F             BNE.N    ??RoadBrd_ParseString_335
   2204                                                {
   2205                                                  strcpy( (char *)tempBffr2, "TIR SYNTAX ERROR: Data not HEX Value.\r\n");
   \   00001D90   0xF8DF 0x1DCC      LDR.W    R1,??RoadBrd_ParseString_336
   \   00001D94   0xA80F             ADD      R0,SP,#+60
   \   00001D96   0x.... 0x....      BL       strcpy
   2206                                                  Error = 1;
   \   00001D9A   0x2001             MOVS     R0,#+1
   \   00001D9C   0x9035             STR      R0,[SP, #+212]
   2207                                                  break;
   \   00001D9E   0xE00E             B.N      ??RoadBrd_ParseString_333
   \                     ??RoadBrd_ParseString_184:
   \   00001DA0   0x........         DC32     ?_59
   \   00001DA4   0x........         DC32     ?_60
   \   00001DA8   0x........         DC32     ?_61
   \   00001DAC   0x........         DC32     ?_62
   2208                                                }
   2209                                                else
   2210                                                {
   2211                                                  i2cData[x] =  hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_335: (+1)
   \   00001DB0   0xA80C             ADD      R0,SP,#+48
   \   00001DB2   0x.... 0x....      BL       hatoi
   \   00001DB6   0xA999             ADD      R1,SP,#+612
   \   00001DB8   0x55C8             STRB     R0,[R1, R7]
   2212                                                } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)
   2213                                              } //EndFor (x=0; x<num_bytes; x++)
   \   00001DBA   0x1C7F             ADDS     R7,R7,#+1
   \   00001DBC   0xE7CD             B.N      ??RoadBrd_ParseString_334
   2214                                            } //EndElse (num_bytes == 0)
   2215                                            if (Error==0)
   \                     ??RoadBrd_ParseString_333: (+1)
   \   00001DBE   0x9835             LDR      R0,[SP, #+212]
   \   00001DC0   0x2800             CMP      R0,#+0
   \   00001DC2   0xD105             BNE.N    ??RoadBrd_ParseString_337
   2216                                            {
   2217                                              sprintf( (char *)tempBffr2, "TIR: GOOD CMD: %x.", Address);
   \   00001DC4   0x9A31             LDR      R2,[SP, #+196]
   \   00001DC6   0xF8DF 0x1D9C      LDR.W    R1,??RoadBrd_ParseString_336+0x4
   \   00001DCA   0xA80F             ADD      R0,SP,#+60
   \   00001DCC   0x.... 0x....      BL       sprintf
   2218                                            }
   2219                                            for(x=0; x<num_bytes; x++)
   \                     ??RoadBrd_ParseString_337: (+1)
   \   00001DD0   0x2000             MOVS     R0,#+0
   \   00001DD2   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_338: (+1)
   \   00001DD4   0x9834             LDR      R0,[SP, #+208]
   \   00001DD6   0x4287             CMP      R7,R0
   \   00001DD8   0xDA0B             BGE.N    ??RoadBrd_ParseString_339
   2220                                            {
   2221                                              sprintf( (char *)tempBffr3, "%x.", i2cData[x]);
   \   00001DDA   0xA899             ADD      R0,SP,#+612
   \   00001DDC   0x5DC2             LDRB     R2,[R0, R7]
   \   00001DDE   0xA15A             ADR.N    R1,??RoadBrd_ParseString_202+0x4  ;; "%x."
   \   00001DE0   0xA80C             ADD      R0,SP,#+48
   \   00001DE2   0x.... 0x....      BL       sprintf
   2222                                              strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   00001DE6   0xA90C             ADD      R1,SP,#+48
   \   00001DE8   0xA80F             ADD      R0,SP,#+60
   \   00001DEA   0x.... 0x....      BL       strcat
   2223                                            }
   \   00001DEE   0x1C7F             ADDS     R7,R7,#+1
   \   00001DF0   0xE7F0             B.N      ??RoadBrd_ParseString_338
   2224                                            strcat( (char *)tempBffr2, "\r\n" );
   \                     ??RoadBrd_ParseString_339: (+1)
   \   00001DF2   0xA156             ADR.N    R1,??RoadBrd_ParseString_202+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001DF4   0xA80F             ADD      R0,SP,#+60
   \   00001DF6   0x.... 0x....      BL       strcat
   2225                                            // 6. Time to send Command and collect status.
   2226                                            Status =  RoadBrd_I2C_Master_Transmit((uint16_t)Address, i2cData, (uint16_t)num_bytes, I2C_TIMEOUT);
   \   00001DFA   0xF44F 0x73FA      MOV      R3,#+500
   \   00001DFE   0x9834             LDR      R0,[SP, #+208]
   \   00001E00   0x0002             MOVS     R2,R0
   \   00001E02   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00001E04   0xA999             ADD      R1,SP,#+612
   \   00001E06   0x9831             LDR      R0,[SP, #+196]
   \   00001E08   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00001E0A   0x.... 0x....      BL       RoadBrd_I2C_Master_Transmit
   \   00001E0E   0x0006             MOVS     R6,R0
   2227                                            // 6a. Wait for Command to complete(100ms).
   2228           
   2229                                            // 7. If Status was good, Time to get response.
   2230                                            if (Status == HAL_OK)
   \   00001E10   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001E12   0x2E00             CMP      R6,#+0
   \   00001E14   0xD10E             BNE.N    ??RoadBrd_ParseString_340
   2231                                            {
   2232                                              Status =  RoadBrd_I2C_Master_Receive((uint16_t)Address, i2cData, (uint16_t)num_bytes_received, I2C_TIMEOUT);
   \   00001E16   0xF44F 0x73FA      MOV      R3,#+500
   \   00001E1A   0x9839             LDR      R0,[SP, #+228]
   \   00001E1C   0x0002             MOVS     R2,R0
   \   00001E1E   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00001E20   0xA999             ADD      R1,SP,#+612
   \   00001E22   0x9831             LDR      R0,[SP, #+196]
   \   00001E24   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00001E26   0x.... 0x....      BL       RoadBrd_I2C_Master_Receive
   \   00001E2A   0x0006             MOVS     R6,R0
   2233                                            }
   2234                                            else
   2235                                              break;
   2236                                            // 7a. Wait for Command to complete(100ms).
   2237                                            if (Status == HAL_OK)
   \   00001E2C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001E2E   0x2E00             CMP      R6,#+0
   \   00001E30   0xD105             BNE.N    ??RoadBrd_ParseString_341
   \   00001E32   0xE000             B.N      ??RoadBrd_ParseString_342
   \                     ??RoadBrd_ParseString_340: (+1)
   \   00001E34   0xE0D9             B.N      ??RoadBrd_ParseString_301
   2238                                            {
   2239                                              Status = RoadBrd_WaitForState( 20 );
   \                     ??RoadBrd_ParseString_342: (+1)
   \   00001E36   0x2014             MOVS     R0,#+20
   \   00001E38   0x.... 0x....      BL       RoadBrd_WaitForState
   \   00001E3C   0x0006             MOVS     R6,R0
   2240                                            }
   2241          
   2242                                            // 8. IfGood report, Need to Output Data.
   2243                                            if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_341: (+1)
   \   00001E3E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001E40   0x2E00             CMP      R6,#+0
   \   00001E42   0xD125             BNE.N    ??RoadBrd_ParseString_326
   2244                                            {
   2245                                              // Send string to UART..
   2246          #ifdef NUCLEO
   2247                                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   2248          #else
   2249                                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00001E44   0xA90F             ADD      R1,SP,#+60
   \   00001E46   0x2000             MOVS     R0,#+0
   \   00001E48   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001E4C   0x0006             MOVS     R6,R0
   2250          #endif
   2251                                              if (Status != HAL_OK)
   \   00001E4E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001E50   0x2E00             CMP      R6,#+0
   \   00001E52   0xD003             BEQ.N    ??RoadBrd_ParseString_343
   2252                                                return Status;
   \   00001E54   0x0030             MOVS     R0,R6
   \   00001E56   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001E58   0xF001 0xBD9E      B.W      ??RoadBrd_ParseString_4
   2253                                              // NOW, Build Data String..
   2254                                              sprintf( (char *)tempBffr2, "     DATA: " );
   \                     ??RoadBrd_ParseString_343: (+1)
   \   00001E5C   0xF8DF 0x1DC8      LDR.W    R1,??RoadBrd_ParseString_344
   \   00001E60   0xA80F             ADD      R0,SP,#+60
   \   00001E62   0x.... 0x....      BL       sprintf
   2255                                              for(x=0; x<num_bytes_received; x++)
   \   00001E66   0x2000             MOVS     R0,#+0
   \   00001E68   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_345: (+1)
   \   00001E6A   0x9839             LDR      R0,[SP, #+228]
   \   00001E6C   0x4287             CMP      R7,R0
   \   00001E6E   0xDA0B             BGE.N    ??RoadBrd_ParseString_346
   2256                                              {
   2257                                                sprintf( (char *)tempBffr3, "%x.", i2cData[x]);
   \   00001E70   0xA899             ADD      R0,SP,#+612
   \   00001E72   0x5DC2             LDRB     R2,[R0, R7]
   \   00001E74   0xA134             ADR.N    R1,??RoadBrd_ParseString_202+0x4  ;; "%x."
   \   00001E76   0xA80C             ADD      R0,SP,#+48
   \   00001E78   0x.... 0x....      BL       sprintf
   2258                                                strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   00001E7C   0xA90C             ADD      R1,SP,#+48
   \   00001E7E   0xA80F             ADD      R0,SP,#+60
   \   00001E80   0x.... 0x....      BL       strcat
   2259                                              }
   \   00001E84   0x1C7F             ADDS     R7,R7,#+1
   \   00001E86   0xE7F0             B.N      ??RoadBrd_ParseString_345
   2260                                              strcat( (char *)tempBffr2, "\r\n" );
   \                     ??RoadBrd_ParseString_346: (+1)
   \   00001E88   0xA130             ADR.N    R1,??RoadBrd_ParseString_202+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001E8A   0xA80F             ADD      R0,SP,#+60
   \   00001E8C   0x.... 0x....      BL       strcat
   2261                                            }
   2262                                          }
   2263                                        } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)...NUMBER BYTES
   2264                                        
   2265                                      } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)...Address
   2266                                      
   2267                                    } //EndElse ( (tempBffr[2]!=':') || (tempBffr[5]!='.') )
   2268                                
   2269                                    break;
   \                     ??RoadBrd_ParseString_326: (+1)
   \   00001E90   0xE0AB             B.N      ??RoadBrd_ParseString_301
   \   00001E92   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_195:
   \   00001E94   0x........         DC32     ?_63
   2270          //------------------
   2271                                  case 'Q':
   2272                                    //I2C Receive Command
   2273                                    // Step 1. Validate format.
   2274                                    if( (tempBffr[3]!=':') ||
   2275                                        (tempBffr[6]!='.')  )
   \                     ??RoadBrd_ParseString_302: (+1)
   \   00001E98   0x78E0             LDRB     R0,[R4, #+3]
   \   00001E9A   0x283A             CMP      R0,#+58
   \   00001E9C   0xD102             BNE.N    ??RoadBrd_ParseString_347
   \   00001E9E   0x79A0             LDRB     R0,[R4, #+6]
   \   00001EA0   0x282E             CMP      R0,#+46
   \   00001EA2   0xD012             BEQ.N    ??RoadBrd_ParseString_348
   2276                                    {
   2277                                      // Is this a BLE Operation?
   2278                                      if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_347: (+1)
   \   00001EA4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001EA6   0x2D00             CMP      R5,#+0
   \   00001EA8   0xD009             BEQ.N    ??RoadBrd_ParseString_349
   2279                                      {
   2280                                        // Yes...Build and Send BLE Response NOW.
   2281                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001EAA   0x4951             LDR.N    R1,??RoadBrd_ParseString_210
   \   00001EAC   0xA80F             ADD      R0,SP,#+60
   \   00001EAE   0x.... 0x....      BL       strcpy
   2282                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001EB2   0xA80F             ADD      R0,SP,#+60
   \   00001EB4   0x.... 0x....      BL       strlen
   \   00001EB8   0xA90F             ADD      R1,SP,#+60
   \   00001EBA   0x.... 0x....      BL       BGM111_Transmit
   2283                                      }
   2284                                      
   2285                                      strcpy( (char *)tempBffr2, "TIQ SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_349: (+1)
   \   00001EBE   0xF8DF 0x1DEC      LDR.W    R1,??RoadBrd_ParseString_350
   \   00001EC2   0xA80F             ADD      R0,SP,#+60
   \   00001EC4   0x.... 0x....      BL       strcpy
   \   00001EC8   0xE089             B.N      ??RoadBrd_ParseString_351
   2286                                    }
   2287                                    else
   2288                                    {
   2289                                      // Is this a BLE Operation?
   2290                                      if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_348: (+1)
   \   00001ECA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001ECC   0x2D00             CMP      R5,#+0
   \   00001ECE   0xD009             BEQ.N    ??RoadBrd_ParseString_352
   2291                                      {
   2292                                        // Yes...Build and Send BLE Response NOW.
   2293                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001ED0   0x4947             LDR.N    R1,??RoadBrd_ParseString_210
   \   00001ED2   0xA80F             ADD      R0,SP,#+60
   \   00001ED4   0x.... 0x....      BL       strcpy
   2294                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001ED8   0xA80F             ADD      R0,SP,#+60
   \   00001EDA   0x.... 0x....      BL       strlen
   \   00001EDE   0xA90F             ADD      R1,SP,#+60
   \   00001EE0   0x.... 0x....      BL       BGM111_Transmit
   2295                                      }
   2296                                      
   2297                                      // 2. Grab Address and validate a legal number
   2298                                      tempBffr3[0] = tempBffr[4];
   \                     ??RoadBrd_ParseString_352: (+1)
   \   00001EE4   0xF994 0x0004      LDRSB    R0,[R4, #+4]
   \   00001EE8   0xF88D 0x0030      STRB     R0,[SP, #+48]
   2299                                      tempBffr3[1] = tempBffr[5];
   \   00001EEC   0xF994 0x0005      LDRSB    R0,[R4, #+5]
   \   00001EF0   0xF88D 0x0031      STRB     R0,[SP, #+49]
   2300                                      tempBffr3[2] = 0x00;
   \   00001EF4   0x2000             MOVS     R0,#+0
   \   00001EF6   0xF88D 0x0032      STRB     R0,[SP, #+50]
   2301                                      if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001EFA   0xA80C             ADD      R0,SP,#+48
   \   00001EFC   0x.... 0x....      BL       isHexNum
   \   00001F00   0x2800             CMP      R0,#+0
   \   00001F02   0xD105             BNE.N    ??RoadBrd_ParseString_353
   2302                                        strcpy( (char *)tempBffr2, "TIQ SYNTAX ERROR: Address not HEX Value.\r\n");
   \   00001F04   0xF8DF 0x1DA8      LDR.W    R1,??RoadBrd_ParseString_350+0x4
   \   00001F08   0xA80F             ADD      R0,SP,#+60
   \   00001F0A   0x.... 0x....      BL       strcpy
   \   00001F0E   0xE066             B.N      ??RoadBrd_ParseString_351
   2303                                      else
   2304                                      {
   2305                                        // Legal Address. Save it as value
   2306                                        Address = hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_353: (+1)
   \   00001F10   0xA80C             ADD      R0,SP,#+48
   \   00001F12   0x.... 0x....      BL       hatoi
   \   00001F16   0x9031             STR      R0,[SP, #+196]
   2307                                        // 3. Now get the number of bytes Received of data from field.
   2308                                        tempBffr3[0] = tempBffr[7];
   \   00001F18   0xF994 0x0007      LDRSB    R0,[R4, #+7]
   \   00001F1C   0xF88D 0x0030      STRB     R0,[SP, #+48]
   2309                                        tempBffr3[1] = tempBffr[8];
   \   00001F20   0xF994 0x0008      LDRSB    R0,[R4, #+8]
   \   00001F24   0xF88D 0x0031      STRB     R0,[SP, #+49]
   2310                                        tempBffr3[2] = 0x00;
   \   00001F28   0x2000             MOVS     R0,#+0
   \   00001F2A   0xF88D 0x0032      STRB     R0,[SP, #+50]
   2311                                        if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001F2E   0xA80C             ADD      R0,SP,#+48
   \   00001F30   0x.... 0x....      BL       isHexNum
   \   00001F34   0x2800             CMP      R0,#+0
   \   00001F36   0xD10B             BNE.N    ??RoadBrd_ParseString_354
   2312                                          strcpy( (char *)tempBffr2, "TIQ SYNTAX ERROR: Number of Bytes not HEX Value.\r\n");
   \   00001F38   0xF8DF 0x1DF8      LDR.W    R1,??RoadBrd_ParseString_355
   \   00001F3C   0xA80F             ADD      R0,SP,#+60
   \   00001F3E   0x.... 0x....      BL       strcpy
   \   00001F42   0xE04C             B.N      ??RoadBrd_ParseString_351
   \                     ??RoadBrd_ParseString_202:
   \   00001F44   0x........         DC32     ?_64
   \   00001F48   0x25 0x78          DC8      "%x."
   \              0x2E 0x00    
   \   00001F4C   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
   2313                                        else
   2314                                        {
   2315                                            // Legal NUMBER BYTES. Save it as value
   2316                                            num_bytes_received = hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_354: (+1)
   \   00001F50   0xA80C             ADD      R0,SP,#+48
   \   00001F52   0x.... 0x....      BL       hatoi
   \   00001F56   0x9039             STR      R0,[SP, #+228]
   2317                                            // 4. Test num_bytes. If Zero, We are done
   2318                                            sprintf( (char *)tempBffr2, "TIR: GOOD CMD: %x.\r\n", Address);
   \   00001F58   0x9A31             LDR      R2,[SP, #+196]
   \   00001F5A   0xF8DF 0x1B80      LDR.W    R1,??RoadBrd_ParseString_330+0x8
   \   00001F5E   0xA80F             ADD      R0,SP,#+60
   \   00001F60   0x.... 0x....      BL       sprintf
   2319                                            // 7. If Status was good, Time to get response.
   2320                                            Status =  RoadBrd_I2C_Master_Receive((uint16_t)Address, i2cData, (uint16_t)num_bytes_received, I2C_TIMEOUT);
   \   00001F64   0xF44F 0x73FA      MOV      R3,#+500
   \   00001F68   0x9839             LDR      R0,[SP, #+228]
   \   00001F6A   0x0002             MOVS     R2,R0
   \   00001F6C   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00001F6E   0xA999             ADD      R1,SP,#+612
   \   00001F70   0x9831             LDR      R0,[SP, #+196]
   \   00001F72   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00001F74   0x.... 0x....      BL       RoadBrd_I2C_Master_Receive
   \   00001F78   0x0006             MOVS     R6,R0
   2321                                            // 7a. Wait for Command to complete(100ms).
   2322                                            if (Status == HAL_OK)
   \   00001F7A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001F7C   0x2E00             CMP      R6,#+0
   \   00001F7E   0xD107             BNE.N    ??RoadBrd_ParseString_356
   2323                                            {
   2324                                              Status = RoadBrd_WaitForState( 20 );
   \   00001F80   0x2014             MOVS     R0,#+20
   \   00001F82   0x.... 0x....      BL       RoadBrd_WaitForState
   \   00001F86   0x0006             MOVS     R6,R0
   2325                                            }
   2326                                            else
   2327                                              break;
   2328                                            // 8. IfGood report, Need to Output Data.
   2329                                            if (Status == HAL_OK)
   \   00001F88   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001F8A   0x2E00             CMP      R6,#+0
   \   00001F8C   0xD127             BNE.N    ??RoadBrd_ParseString_351
   \   00001F8E   0xE000             B.N      ??RoadBrd_ParseString_357
   \                     ??RoadBrd_ParseString_356: (+1)
   \   00001F90   0xE02B             B.N      ??RoadBrd_ParseString_301
   2330                                            {
   2331                                              // Send string to UART..
   2332          #ifdef NUCLEO
   2333                                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   2334          #else
   2335                                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \                     ??RoadBrd_ParseString_357: (+1)
   \   00001F92   0xA90F             ADD      R1,SP,#+60
   \   00001F94   0x2000             MOVS     R0,#+0
   \   00001F96   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001F9A   0x0006             MOVS     R6,R0
   2336          #endif
   2337                                              if (Status != HAL_OK)
   \   00001F9C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001F9E   0x2E00             CMP      R6,#+0
   \   00001FA0   0xD003             BEQ.N    ??RoadBrd_ParseString_358
   2338                                                return Status;
   \   00001FA2   0x0030             MOVS     R0,R6
   \   00001FA4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001FA6   0xF001 0xBCF7      B.W      ??RoadBrd_ParseString_4
   2339                                              // NOW, Build Data String..
   2340                                              sprintf( (char *)tempBffr2, "     DATA: " );
   \                     ??RoadBrd_ParseString_358: (+1)
   \   00001FAA   0xF8DF 0x1C7C      LDR.W    R1,??RoadBrd_ParseString_344
   \   00001FAE   0xA80F             ADD      R0,SP,#+60
   \   00001FB0   0x.... 0x....      BL       sprintf
   2341                                              for(x=0; x<num_bytes_received; x++)
   \   00001FB4   0x2000             MOVS     R0,#+0
   \   00001FB6   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_359: (+1)
   \   00001FB8   0x9839             LDR      R0,[SP, #+228]
   \   00001FBA   0x4287             CMP      R7,R0
   \   00001FBC   0xDA0B             BGE.N    ??RoadBrd_ParseString_360
   2342                                              {
   2343                                                sprintf( (char *)tempBffr3, "%x.", i2cData[x]);
   \   00001FBE   0xA899             ADD      R0,SP,#+612
   \   00001FC0   0x5DC2             LDRB     R2,[R0, R7]
   \   00001FC2   0xA1D9             ADR.N    R1,??RoadBrd_ParseString_243+0x4  ;; "%x."
   \   00001FC4   0xA80C             ADD      R0,SP,#+48
   \   00001FC6   0x.... 0x....      BL       sprintf
   2344                                                strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   00001FCA   0xA90C             ADD      R1,SP,#+48
   \   00001FCC   0xA80F             ADD      R0,SP,#+60
   \   00001FCE   0x.... 0x....      BL       strcat
   2345                                              }
   \   00001FD2   0x1C7F             ADDS     R7,R7,#+1
   \   00001FD4   0xE7F0             B.N      ??RoadBrd_ParseString_359
   2346                                              strcat( (char *)tempBffr2, "\r\n" );
   \                     ??RoadBrd_ParseString_360: (+1)
   \   00001FD6   0xA1D5             ADR.N    R1,??RoadBrd_ParseString_243+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001FD8   0xA80F             ADD      R0,SP,#+60
   \   00001FDA   0x.... 0x....      BL       strcat
   2347                                          }
   2348                                        } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)...NUMBER BYTES
   2349                                        
   2350                                      } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)...Address
   2351                                      
   2352                                    } //EndElse ( (tempBffr[2]!=':') || (tempBffr[5]!='.') )
   2353                                
   2354                                    break;
   \                     ??RoadBrd_ParseString_351: (+1)
   \   00001FDE   0xE004             B.N      ??RoadBrd_ParseString_301
   2355                                  default:
   2356                                    strcpy( (char *)tempBffr2, "ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_303: (+1)
   \   00001FE0   0xF8DF 0x173C      LDR.W    R1,??RoadBrd_ParseString_278+0x4
   \   00001FE4   0xA80F             ADD      R0,SP,#+60
   \   00001FE6   0x.... 0x....      BL       strcpy
   2357                                    break;
   2358                                } //EndSwitch ( tempBffr[2] )
   2359                              } //EndElse (Size < 9)
   2360                              break;
   \                     ??RoadBrd_ParseString_301: (+1)
   \   00001FEA   0xF001 0xBC49      B.W      ??RoadBrd_ParseString_288
   \   00001FEE   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_210:
   \   00001FF0   0x........         DC32     ?_24
   \   00001FF4   0x........         DC32     ?_65
   \   00001FF8   0x........         DC32     ?_66
   2361          //++++++++++++++++++++++++++++++++++++++++++  Calibration Commands.
   2362                            case 'C':
   2363                              Status = HAL_OK;
   \                     ??RoadBrd_ParseString_289: (+1)
   \   00001FFC   0x2000             MOVS     R0,#+0
   \   00001FFE   0x0006             MOVS     R6,R0
   2364                              if (Size == 2)
   \   00002000   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00002004   0xF1B8 0x0F02      CMP      R8,#+2
   \   00002008   0xF040 0x808A      BNE.W    ??RoadBrd_ParseString_361
   2365                              {
   2366                                //------------------ TC Command: Dump Calibration Settings.      
   2367                                // Read Cool Eye/Grid Eye Values.....
   2368                                if ( Get_DriverStates( GRIDEYE_MNTR_TASK ))
   \   0000200C   0x2005             MOVS     R0,#+5
   \   0000200E   0x.... 0x....      BL       Get_DriverStates
   \   00002012   0x2800             CMP      R0,#+0
   \   00002014   0xD004             BEQ.N    ??RoadBrd_ParseString_362
   2369                                {
   2370                                  Status = RoadBrd_GridEye_ReadValues_Scaled( &GridMeasure );
   \   00002016   0xA856             ADD      R0,SP,#+344
   \   00002018   0x.... 0x....      BL       RoadBrd_GridEye_ReadValues_Scaled
   \   0000201C   0x0006             MOVS     R6,R0
   \   0000201E   0xE00B             B.N      ??RoadBrd_ParseString_363
   2371                                }
   2372                                else if ( Get_DriverStates( COOLEYE_MNTR_TASK ))
   \                     ??RoadBrd_ParseString_362: (+1)
   \   00002020   0x2006             MOVS     R0,#+6
   \   00002022   0x.... 0x....      BL       Get_DriverStates
   \   00002026   0x2800             CMP      R0,#+0
   \   00002028   0xD004             BEQ.N    ??RoadBrd_ParseString_364
   2373                                {
   2374                                  Status = RoadBrd_CoolEye_ReadValues_Scaled( &GridMeasure );
   \   0000202A   0xA856             ADD      R0,SP,#+344
   \   0000202C   0x.... 0x....      BL       RoadBrd_CoolEye_ReadValues_Scaled
   \   00002030   0x0006             MOVS     R6,R0
   \   00002032   0xE001             B.N      ??RoadBrd_ParseString_363
   2375                                }
   2376                                else
   2377                                  Status = HAL_ERROR;
   \                     ??RoadBrd_ParseString_364: (+1)
   \   00002034   0x2001             MOVS     R0,#+1
   \   00002036   0x0006             MOVS     R6,R0
   2378                                
   2379                                // Is this a BLE Operation?
   2380                                if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_363: (+1)
   \   00002038   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000203A   0x2D00             CMP      R5,#+0
   \   0000203C   0xD00A             BEQ.N    ??RoadBrd_ParseString_365
   2381                                {
   2382                                  // Yes...Build and Send BLE Response NOW.
   2383                                  strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   0000203E   0xF8DF 0x1E10      LDR.W    R1,??RoadBrd_ParseString_366
   \   00002042   0xA80F             ADD      R0,SP,#+60
   \   00002044   0x.... 0x....      BL       strcpy
   2384                                  BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002048   0xA80F             ADD      R0,SP,#+60
   \   0000204A   0x.... 0x....      BL       strlen
   \   0000204E   0xA90F             ADD      R1,SP,#+60
   \   00002050   0x.... 0x....      BL       BGM111_Transmit
   2385                                }
   2386                                
   2387                                if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_365: (+1)
   \   00002054   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002056   0x2E00             CMP      R6,#+0
   \   00002058   0xD159             BNE.N    ??RoadBrd_ParseString_367
   2388                                {
   2389                                  // OK Next Sensor.
   2390                                  // Read Temperature sensor and return results....Temperature Sensor U10(PCT2075GVJ).  Addr: 0x94
   2391                                  Status = RoadBrd_ReadTemp_Scaled( &TMeasure );
   \   0000205A   0xA83D             ADD      R0,SP,#+244
   \   0000205C   0x.... 0x....      BL       RoadBrd_ReadTemp_Scaled
   \   00002060   0x0006             MOVS     R6,R0
   2392                                  if (Status == HAL_OK)
   \   00002062   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002064   0x2E00             CMP      R6,#+0
   \   00002066   0xD14B             BNE.N    ??RoadBrd_ParseString_368
   2393                                  {
   2394                                    // OK Next Sensor.
   2395                                    // Read Humidity Sensor sensor and return Humidity results....
   2396                                    Status = RoadBrd_Humidity_ReadHumidity_Scaled( &HMeasure );
   \   00002068   0xA851             ADD      R0,SP,#+324
   \   0000206A   0x.... 0x....      BL       RoadBrd_Humidity_ReadHumidity_Scaled
   \   0000206E   0x0006             MOVS     R6,R0
   2397                                    if (Status == HAL_OK)
   \   00002070   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002072   0x2E00             CMP      R6,#+0
   \   00002074   0xD13B             BNE.N    ??RoadBrd_ParseString_369
   2398                                    {
   2399                                      // OK Next Sensor.
   2400                                      //Status = RoadBrd_Barometer_Status( &PRMeasure );
   2401                                      Status = RoadBrd_Baro_ReadPressure_Scaled( &PRPMeasure );
   \   00002076   0xA8AD             ADD      R0,SP,#+692
   \   00002078   0x.... 0x....      BL       RoadBrd_Baro_ReadPressure_Scaled
   \   0000207C   0x0006             MOVS     R6,R0
   2402                                      if (Status == HAL_OK)
   \   0000207E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002080   0x2E00             CMP      R6,#+0
   \   00002082   0xD12D             BNE.N    ??RoadBrd_ParseString_370
   2403                                      {
   2404                                        //sprintf( (char *)tempBffr2, "Driver Status: %04x\r\n", DriverStatus );
   2405                                        sprintf( (char *)tempBffr2, "%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\r\n", (char *)GridMeasure.GridEye1.TempC,
   2406                                                (char *)GridMeasure.GridEye2.TempC,
   2407                                                (char *)GridMeasure.GridEye3.TempC,
   2408                                                (char *)GridMeasure.GridEye4.TempC,
   2409                                                (char *)GridMeasure.GridEye5.TempC,
   2410                                                (char *)GridMeasure.GridEye6.TempC,
   2411                                                (char *)GridMeasure.GridEye7.TempC,
   2412                                                (char *)GridMeasure.GridEye8.TempC,
   2413                                                (char *)GridMeasure.Thermistor.TempC,
   2414                                                (char *)TMeasure.TempC,
   2415                                                (char *)HMeasure.Humidity,
   2416                                                (char *)PRPMeasure.Pressure);
   \   00002084   0xA8AD             ADD      R0,SP,#+692
   \   00002086   0x9009             STR      R0,[SP, #+36]
   \   00002088   0xA851             ADD      R0,SP,#+324
   \   0000208A   0x9008             STR      R0,[SP, #+32]
   \   0000208C   0xA83D             ADD      R0,SP,#+244
   \   0000208E   0x9007             STR      R0,[SP, #+28]
   \   00002090   0xA856             ADD      R0,SP,#+344
   \   00002092   0x9006             STR      R0,[SP, #+24]
   \   00002094   0xA886             ADD      R0,SP,#+536
   \   00002096   0x9005             STR      R0,[SP, #+20]
   \   00002098   0xA880             ADD      R0,SP,#+512
   \   0000209A   0x9004             STR      R0,[SP, #+16]
   \   0000209C   0xA87A             ADD      R0,SP,#+488
   \   0000209E   0x9003             STR      R0,[SP, #+12]
   \   000020A0   0xA874             ADD      R0,SP,#+464
   \   000020A2   0x9002             STR      R0,[SP, #+8]
   \   000020A4   0xA86E             ADD      R0,SP,#+440
   \   000020A6   0x9001             STR      R0,[SP, #+4]
   \   000020A8   0xA868             ADD      R0,SP,#+416
   \   000020AA   0x9000             STR      R0,[SP, #+0]
   \   000020AC   0xAB62             ADD      R3,SP,#+392
   \   000020AE   0xAA5C             ADD      R2,SP,#+368
   \   000020B0   0xF8DF 0x1E10      LDR.W    R1,??RoadBrd_ParseString_371
   \   000020B4   0xA80F             ADD      R0,SP,#+60
   \   000020B6   0x.... 0x....      BL       sprintf
   2417                                        // Send string to UART..
   2418          #ifdef NUCLEO
   2419                                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   2420          #else
   2421                                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000020BA   0xA90F             ADD      R1,SP,#+60
   \   000020BC   0x2000             MOVS     R0,#+0
   \   000020BE   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000020C2   0x0006             MOVS     R6,R0
   2422          #endif
   2423                                        if (Status != HAL_OK)
   \   000020C4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000020C6   0x2E00             CMP      R6,#+0
   \   000020C8   0xD003             BEQ.N    ??RoadBrd_ParseString_372
   2424                                          return Status;
   \   000020CA   0x0030             MOVS     R0,R6
   \   000020CC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000020CE   0xF001 0xBC63      B.W      ??RoadBrd_ParseString_4
   2425                                        // NOW, Build Data String..
   2426                                        sprintf( (char *)tempBffr2, "COMPLETE" );
   \                     ??RoadBrd_ParseString_372: (+1)
   \   000020D2   0xF8DF 0x1DF4      LDR.W    R1,??RoadBrd_ParseString_371+0x4
   \   000020D6   0xA80F             ADD      R0,SP,#+60
   \   000020D8   0x.... 0x....      BL       sprintf
   \   000020DC   0xF000 0xBF32      B.W      ??RoadBrd_ParseString_373
   2427                                      } // Endif (Status == HAL_OK) RoadBrd_Baro_ReadPressure
   2428                                      else
   2429                                      {
   2430                                        sprintf( (char *)tempBffr2, "Pressure TASKING ERROR!" );
   \                     ??RoadBrd_ParseString_370: (+1)
   \   000020E0   0xF8DF 0x1DE8      LDR.W    R1,??RoadBrd_ParseString_371+0x8
   \   000020E4   0xA80F             ADD      R0,SP,#+60
   \   000020E6   0x.... 0x....      BL       sprintf
   \   000020EA   0xF000 0xBF2B      B.W      ??RoadBrd_ParseString_373
   2431                                      } // EndElse (Status == HAL_OK) RoadBrd_Baro_ReadPressure
   2432                                    } // Endif (Status == HAL_OK) RoadBrd_Humidity_ReadHumidity
   2433                                    else
   2434                                    {
   2435                                      sprintf( (char *)tempBffr2, "Humidity TASKING ERROR!" );
   \                     ??RoadBrd_ParseString_369: (+1)
   \   000020EE   0xF8DF 0x1DE0      LDR.W    R1,??RoadBrd_ParseString_371+0xC
   \   000020F2   0xA80F             ADD      R0,SP,#+60
   \   000020F4   0x.... 0x....      BL       sprintf
   \   000020F8   0xF000 0xBF24      B.W      ??RoadBrd_ParseString_373
   \                     ??RoadBrd_ParseString_215:
   \   000020FC   0x........         DC32     ?_67
   2436                                    } // EndElse (Status == HAL_OK) RoadBrd_Humidity_ReadHumidity
   2437                                  } // Endif (Status == HAL_OK) RoadBrd_ReadTemp
   2438                                  else
   2439                                  {
   2440                                    sprintf( (char *)tempBffr2, "AMBIENT TEMPERATURE TASKING ERROR!" );
   \                     ??RoadBrd_ParseString_368: (+1)
   \   00002100   0xF8DF 0x1DD0      LDR.W    R1,??RoadBrd_ParseString_371+0x10
   \   00002104   0xA80F             ADD      R0,SP,#+60
   \   00002106   0x.... 0x....      BL       sprintf
   \   0000210A   0xF000 0xBF1B      B.W      ??RoadBrd_ParseString_373
   2441                                  } // EndElse (Status == HAL_OK) RoadBrd_ReadTemp
   2442                                } // Endif (Status == HAL_OK) RoadBrd_CoolEye_ReadValues
   2443                                else
   2444                                {
   2445                                  sprintf( (char *)tempBffr2, "GRID EYE/COOL EYE TASKING ERROR!" );
   \                     ??RoadBrd_ParseString_367: (+1)
   \   0000210E   0xF8DF 0x1DC8      LDR.W    R1,??RoadBrd_ParseString_371+0x14
   \   00002112   0xA80F             ADD      R0,SP,#+60
   \   00002114   0x.... 0x....      BL       sprintf
   \   00002118   0xF000 0xBF14      B.W      ??RoadBrd_ParseString_373
   \                     ??RoadBrd_ParseString_217:
   \   0000211C   0x........         DC32     ?_34
   2446                                } // EndElse (Status == HAL_OK) RoadBrd_CoolEye_ReadValues
   2447                              }
   2448                              else
   2449                              {
   2450                                switch( tempBffr[2] )
   \                     ??RoadBrd_ParseString_361: (+1)
   \   00002120   0x78A0             LDRB     R0,[R4, #+2]
   \   00002122   0x2849             CMP      R0,#+73
   \   00002124   0xF000 0x86F1      BEQ.W    ??RoadBrd_ParseString_374
   \   00002128   0x2852             CMP      R0,#+82
   \   0000212A   0xF000 0x8333      BEQ.W    ??RoadBrd_ParseString_375
   \   0000212E   0x2853             CMP      R0,#+83
   \   00002130   0xD004             BEQ.N    ??RoadBrd_ParseString_376
   \   00002132   0x2854             CMP      R0,#+84
   \   00002134   0xF000 0x8696      BEQ.W    ??RoadBrd_ParseString_377
   \   00002138   0xF000 0xBF04      B.W      ??RoadBrd_ParseString_373
   2451                                {
   2452                                  //------------------ TCS Command: Calibration Set Command
   2453                                case 'S':
   2454                                  // Step 1. Validate format.
   2455                                  if(tempBffr[3]!=':')
   \                     ??RoadBrd_ParseString_376: (+1)
   \   0000213C   0x78E0             LDRB     R0,[R4, #+3]
   \   0000213E   0x283A             CMP      R0,#+58
   \   00002140   0xD013             BEQ.N    ??RoadBrd_ParseString_378
   2456                                  {
   2457                                    // Is this a BLE Operation?
   2458                                    if ( BLE_Flag )
   \   00002142   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002144   0x2D00             CMP      R5,#+0
   \   00002146   0xD00A             BEQ.N    ??RoadBrd_ParseString_379
   2459                                    {
   2460                                      // Yes...Build and Send BLE Response NOW.
   2461                                      strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00002148   0xF8DF 0x1D04      LDR.W    R1,??RoadBrd_ParseString_366
   \   0000214C   0xA80F             ADD      R0,SP,#+60
   \   0000214E   0x.... 0x....      BL       strcpy
   2462                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002152   0xA80F             ADD      R0,SP,#+60
   \   00002154   0x.... 0x....      BL       strlen
   \   00002158   0xA90F             ADD      R1,SP,#+60
   \   0000215A   0x.... 0x....      BL       BGM111_Transmit
   2463                                    }
   2464                                    
   2465                                    strcpy( (char *)tempBffr2, "TCS SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_379: (+1)
   \   0000215E   0xF8DF 0x1E24      LDR.W    R1,??RoadBrd_ParseString_380
   \   00002162   0xA80F             ADD      R0,SP,#+60
   \   00002164   0x.... 0x....      BL       strcpy
   \   00002168   0xE313             B.N      ??RoadBrd_ParseString_381
   2466                                  } // Endif (tempBffr[3]!=':')
   2467                                  else
   2468                                  {
   2469                                    // Is this a BLE Operation?
   2470                                    if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_378: (+1)
   \   0000216A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000216C   0x2D00             CMP      R5,#+0
   \   0000216E   0xD00A             BEQ.N    ??RoadBrd_ParseString_382
   2471                                    {
   2472                                      // Yes...Build and Send BLE Response NOW.
   2473                                      strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00002170   0xF8DF 0x1CDC      LDR.W    R1,??RoadBrd_ParseString_366
   \   00002174   0xA80F             ADD      R0,SP,#+60
   \   00002176   0x.... 0x....      BL       strcpy
   2474                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000217A   0xA80F             ADD      R0,SP,#+60
   \   0000217C   0x.... 0x....      BL       strlen
   \   00002180   0xA90F             ADD      R1,SP,#+60
   \   00002182   0x.... 0x....      BL       BGM111_Transmit
   2475                                    }
   2476                                    
   2477                                    // 2. Verify if remaining string is digits
   2478                                    if (Size <= 4)
   \                     ??RoadBrd_ParseString_382: (+1)
   \   00002186   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000218A   0xF1B8 0x0F05      CMP      R8,#+5
   \   0000218E   0xDA09             BGE.N    ??RoadBrd_ParseString_383
   2479                                    {
   2480                                      strcpy( (char *)tempBffr2, "TCS SYNTAX ERROR: Bad Parameter.\r\n");
   \   00002190   0xF8DF 0x1DF4      LDR.W    R1,??RoadBrd_ParseString_380+0x4
   \   00002194   0xA80F             ADD      R0,SP,#+60
   \   00002196   0x.... 0x....      BL       strcpy
   \   0000219A   0xE2FA             B.N      ??RoadBrd_ParseString_381
   \                     ??RoadBrd_ParseString_221:
   \   0000219C   0x........         DC32     ?_68
   \   000021A0   0x........         DC32     ?_69
   2481                                    } // EndIf (Size > 4)
   2482                                    else
   2483                                    {
   2484                                      // 3. Grab remaining string and convert to integer.
   2485                                      tempPstr = &tempBffr[4];
   \                     ??RoadBrd_ParseString_383: (+1)
   \   000021A4   0x1D20             ADDS     R0,R4,#+4
   \   000021A6   0x9030             STR      R0,[SP, #+192]
   2486                                      strcpy(tempstr, tempPstr);
   \   000021A8   0x9930             LDR      R1,[SP, #+192]
   \   000021AA   0xA848             ADD      R0,SP,#+288
   \   000021AC   0x.... 0x....      BL       strcpy
   2487                                      // Time to parse and test remaining string
   2488                                      Scale = 0.0;
   \   000021B0   0x2000             MOVS     R0,#+0
   \   000021B2   0x900B             STR      R0,[SP, #+44]
   2489                                      Offset = 0.0;
   \   000021B4   0x2000             MOVS     R0,#+0
   \   000021B6   0x900A             STR      R0,[SP, #+40]
   2490                                      if (sscanf (tempstr, "%s %f %f", uuid, &Scale, &Offset) == 3)
   \   000021B8   0xA80A             ADD      R0,SP,#+40
   \   000021BA   0x9000             STR      R0,[SP, #+0]
   \   000021BC   0xAB0B             ADD      R3,SP,#+44
   \   000021BE   0xAA36             ADD      R2,SP,#+216
   \   000021C0   0xF8DF 0x1DFC      LDR.W    R1,??RoadBrd_ParseString_384
   \   000021C4   0xA848             ADD      R0,SP,#+288
   \   000021C6   0x.... 0x....      BL       sscanf
   \   000021CA   0x2803             CMP      R0,#+3
   \   000021CC   0xF040 0x82DC      BNE.W    ??RoadBrd_ParseString_385
   2491                                      {
   2492                                        sprintf( (char *)tempBffr2, "Parms: %s, %f, %f.\r\n", uuid, Scale, Offset );
   \   000021D0   0x980A             LDR      R0,[SP, #+40]
   \   000021D2   0x.... 0x....      BL       __aeabi_f2d
   \   000021D6   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000021DA   0x980B             LDR      R0,[SP, #+44]
   \   000021DC   0x.... 0x....      BL       __aeabi_f2d
   \   000021E0   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000021E4   0xAA36             ADD      R2,SP,#+216
   \   000021E6   0xF8DF 0x1E14      LDR.W    R1,??RoadBrd_ParseString_386
   \   000021EA   0xA80F             ADD      R0,SP,#+60
   \   000021EC   0x.... 0x....      BL       sprintf
   2493                                        // OK, We have 3 good parameters... NOW Need to determine if UUID is good.
   2494                                        if (strncmp((char *)uuid,"0002",4) == 0) // Shnt_Vltg
   \   000021F0   0x2204             MOVS     R2,#+4
   \   000021F2   0xF8DF 0x1E0C      LDR.W    R1,??RoadBrd_ParseString_386+0x4
   \   000021F6   0xA836             ADD      R0,SP,#+216
   \   000021F8   0x.... 0x....      BL       strncmp
   \   000021FC   0x2800             CMP      R0,#+0
   \   000021FE   0xD119             BNE.N    ??RoadBrd_ParseString_387
   2495                                        {
   2496                                          Status = RoadBrd_CAL_Set_CalItem( CAL_SHNT_VLTG, Offset, Scale);
   \   00002200   0x9A0B             LDR      R2,[SP, #+44]
   \   00002202   0x990A             LDR      R1,[SP, #+40]
   \   00002204   0x2000             MOVS     R0,#+0
   \   00002206   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   0000220A   0x0006             MOVS     R6,R0
   2497                                          if (Status == HAL_OK)
   \   0000220C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000220E   0x2E00             CMP      R6,#+0
   \   00002210   0xD10A             BNE.N    ??RoadBrd_ParseString_388
   2498                                            sprintf( (char *)tempBffr2, "Shnt_Vltg Set COMPLETE.\r\n" );
   \   00002212   0xF8DF 0x1DF0      LDR.W    R1,??RoadBrd_ParseString_386+0x8
   \   00002216   0xA80F             ADD      R0,SP,#+60
   \   00002218   0x.... 0x....      BL       sprintf
   \   0000221C   0xE2AA             B.N      ??RoadBrd_ParseString_389
   \   0000221E   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_226:
   \   00002220   0x........         DC32     ?_70
   \   00002224   0x........         DC32     ?_71
   2499                                          else
   2500                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_388: (+1)
   \   00002228   0xF8DF 0x1DDC      LDR.W    R1,??RoadBrd_ParseString_386+0xC
   \   0000222C   0xA80F             ADD      R0,SP,#+60
   \   0000222E   0x.... 0x....      BL       sprintf
   \   00002232   0xE29F             B.N      ??RoadBrd_ParseString_389
   2501                                        }
   2502                                        else if (strncmp((char *)uuid,"0004",4) == 0) // Current
   \                     ??RoadBrd_ParseString_387: (+1)
   \   00002234   0x2204             MOVS     R2,#+4
   \   00002236   0xF8DF 0x1DD4      LDR.W    R1,??RoadBrd_ParseString_386+0x10
   \   0000223A   0xA836             ADD      R0,SP,#+216
   \   0000223C   0x.... 0x....      BL       strncmp
   \   00002240   0x2800             CMP      R0,#+0
   \   00002242   0xD11B             BNE.N    ??RoadBrd_ParseString_390
   2503                                        {
   2504                                          Status = RoadBrd_CAL_Set_CalItem( CAL_CURRENT, Offset, Scale);
   \   00002244   0x9A0B             LDR      R2,[SP, #+44]
   \   00002246   0x990A             LDR      R1,[SP, #+40]
   \   00002248   0x2001             MOVS     R0,#+1
   \   0000224A   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   0000224E   0x0006             MOVS     R6,R0
   2505                                          if (Status == HAL_OK)
   \   00002250   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002252   0x2E00             CMP      R6,#+0
   \   00002254   0xD10C             BNE.N    ??RoadBrd_ParseString_391
   2506                                            sprintf( (char *)tempBffr2, "Current Set COMPLETE." );
   \   00002256   0xF8DF 0x1E10      LDR.W    R1,??RoadBrd_ParseString_392
   \   0000225A   0xA80F             ADD      R0,SP,#+60
   \   0000225C   0x.... 0x....      BL       sprintf
   \   00002260   0xE288             B.N      ??RoadBrd_ParseString_389
   \   00002262   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_229:
   \   00002264   0x........         DC32     ?_72
   \   00002268   0x........         DC32     ?_73
   \   0000226C   0x........         DC32     ?_74
   2507                                          else
   2508                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_391: (+1)
   \   00002270   0xF8DF 0x1D94      LDR.W    R1,??RoadBrd_ParseString_386+0xC
   \   00002274   0xA80F             ADD      R0,SP,#+60
   \   00002276   0x.... 0x....      BL       sprintf
   \   0000227A   0xE27B             B.N      ??RoadBrd_ParseString_389
   2509                                        }
   2510                                        else if (strncmp((char *)uuid,"0006",4) == 0) // Power
   \                     ??RoadBrd_ParseString_390: (+1)
   \   0000227C   0x2204             MOVS     R2,#+4
   \   0000227E   0xF8DF 0x1DEC      LDR.W    R1,??RoadBrd_ParseString_392+0x4
   \   00002282   0xA836             ADD      R0,SP,#+216
   \   00002284   0x.... 0x....      BL       strncmp
   \   00002288   0x2800             CMP      R0,#+0
   \   0000228A   0xD114             BNE.N    ??RoadBrd_ParseString_393
   2511                                        {
   2512                                          Status = RoadBrd_CAL_Set_CalItem( CAL_POWER, Offset, Scale);
   \   0000228C   0x9A0B             LDR      R2,[SP, #+44]
   \   0000228E   0x990A             LDR      R1,[SP, #+40]
   \   00002290   0x2002             MOVS     R0,#+2
   \   00002292   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002296   0x0006             MOVS     R6,R0
   2513                                          if (Status == HAL_OK)
   \   00002298   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000229A   0x2E00             CMP      R6,#+0
   \   0000229C   0xD105             BNE.N    ??RoadBrd_ParseString_394
   2514                                            sprintf( (char *)tempBffr2, "Power Set COMPLETE." );
   \   0000229E   0xF8DF 0x1DD0      LDR.W    R1,??RoadBrd_ParseString_392+0x8
   \   000022A2   0xA80F             ADD      R0,SP,#+60
   \   000022A4   0x.... 0x....      BL       sprintf
   \   000022A8   0xE264             B.N      ??RoadBrd_ParseString_389
   2515                                          else
   2516                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_394: (+1)
   \   000022AA   0xF8DF 0x1D5C      LDR.W    R1,??RoadBrd_ParseString_386+0xC
   \   000022AE   0xA80F             ADD      R0,SP,#+60
   \   000022B0   0x.... 0x....      BL       sprintf
   \   000022B4   0xE25E             B.N      ??RoadBrd_ParseString_389
   2517                                        }
   2518                                        else if (strncmp((char *)uuid,"0008",4) == 0) // Voltage
   \                     ??RoadBrd_ParseString_393: (+1)
   \   000022B6   0x2204             MOVS     R2,#+4
   \   000022B8   0xF8DF 0x1DB8      LDR.W    R1,??RoadBrd_ParseString_392+0xC
   \   000022BC   0xA836             ADD      R0,SP,#+216
   \   000022BE   0x.... 0x....      BL       strncmp
   \   000022C2   0x2800             CMP      R0,#+0
   \   000022C4   0xD116             BNE.N    ??RoadBrd_ParseString_395
   2519                                        {
   2520                                          Status = RoadBrd_CAL_Set_CalItem( CAL_VOLTAGE, Offset, Scale);
   \   000022C6   0x9A0B             LDR      R2,[SP, #+44]
   \   000022C8   0x990A             LDR      R1,[SP, #+40]
   \   000022CA   0x2003             MOVS     R0,#+3
   \   000022CC   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   000022D0   0x0006             MOVS     R6,R0
   2521                                          if (Status == HAL_OK)
   \   000022D2   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000022D4   0x2E00             CMP      R6,#+0
   \   000022D6   0xD107             BNE.N    ??RoadBrd_ParseString_396
   2522                                            sprintf( (char *)tempBffr2, "Voltage Set COMPLETE." );
   \   000022D8   0xF8DF 0x1D9C      LDR.W    R1,??RoadBrd_ParseString_392+0x10
   \   000022DC   0xA80F             ADD      R0,SP,#+60
   \   000022DE   0x.... 0x....      BL       sprintf
   \   000022E2   0xE247             B.N      ??RoadBrd_ParseString_389
   \                     ??RoadBrd_ParseString_240:
   \   000022E4   0x........         DC32     ?_75
   2523                                          else
   2524                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_396: (+1)
   \   000022E8   0xF8DF 0x1D1C      LDR.W    R1,??RoadBrd_ParseString_386+0xC
   \   000022EC   0xA80F             ADD      R0,SP,#+60
   \   000022EE   0x.... 0x....      BL       sprintf
   \   000022F2   0xE23F             B.N      ??RoadBrd_ParseString_389
   2525                                        }
   2526                                        else if (strncmp((char *)uuid,"000A",4) == 0) // TempC
   \                     ??RoadBrd_ParseString_395: (+1)
   \   000022F4   0x2204             MOVS     R2,#+4
   \   000022F6   0xF8DF 0x1D84      LDR.W    R1,??RoadBrd_ParseString_392+0x14
   \   000022FA   0xA836             ADD      R0,SP,#+216
   \   000022FC   0x.... 0x....      BL       strncmp
   \   00002300   0x2800             CMP      R0,#+0
   \   00002302   0xD11D             BNE.N    ??RoadBrd_ParseString_397
   2527                                        {
   2528                                          Status = RoadBrd_CAL_Set_CalItem( CAL_TEMPC, Offset, Scale);
   \   00002304   0x9A0B             LDR      R2,[SP, #+44]
   \   00002306   0x990A             LDR      R1,[SP, #+40]
   \   00002308   0x2004             MOVS     R0,#+4
   \   0000230A   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   0000230E   0x0006             MOVS     R6,R0
   2529                                          if (Status == HAL_OK)
   \   00002310   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002312   0x2E00             CMP      R6,#+0
   \   00002314   0xD10E             BNE.N    ??RoadBrd_ParseString_398
   2530                                            sprintf( (char *)tempBffr2, "TempC Set COMPLETE." );
   \   00002316   0xF8DF 0x1E14      LDR.W    R1,??RoadBrd_ParseString_399
   \   0000231A   0xA80F             ADD      R0,SP,#+60
   \   0000231C   0x.... 0x....      BL       sprintf
   \   00002320   0xE228             B.N      ??RoadBrd_ParseString_389
   \   00002322   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_243:
   \   00002324   0x........         DC32     ?_76
   \   00002328   0x25 0x78          DC8      "%x."
   \              0x2E 0x00    
   \   0000232C   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
   \   00002330   0x........         DC32     ?_77
   2531                                          else
   2532                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_398: (+1)
   \   00002334   0xF8DF 0x1CD0      LDR.W    R1,??RoadBrd_ParseString_386+0xC
   \   00002338   0xA80F             ADD      R0,SP,#+60
   \   0000233A   0x.... 0x....      BL       sprintf
   \   0000233E   0xE219             B.N      ??RoadBrd_ParseString_389
   2533                                        }
   2534                                        else if (strncmp((char *)uuid,"000B",4) == 0) // TempF
   \                     ??RoadBrd_ParseString_397: (+1)
   \   00002340   0x2204             MOVS     R2,#+4
   \   00002342   0xF8DF 0x1DEC      LDR.W    R1,??RoadBrd_ParseString_399+0x4
   \   00002346   0xA836             ADD      R0,SP,#+216
   \   00002348   0x.... 0x....      BL       strncmp
   \   0000234C   0x2800             CMP      R0,#+0
   \   0000234E   0xD114             BNE.N    ??RoadBrd_ParseString_400
   2535                                        {
   2536                                          Status = RoadBrd_CAL_Set_CalItem( CAL_TEMPF, Offset, Scale);
   \   00002350   0x9A0B             LDR      R2,[SP, #+44]
   \   00002352   0x990A             LDR      R1,[SP, #+40]
   \   00002354   0x2005             MOVS     R0,#+5
   \   00002356   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   0000235A   0x0006             MOVS     R6,R0
   2537                                          if (Status == HAL_OK)
   \   0000235C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000235E   0x2E00             CMP      R6,#+0
   \   00002360   0xD105             BNE.N    ??RoadBrd_ParseString_401
   2538                                            sprintf( (char *)tempBffr2, "TempF Set COMPLETE." );
   \   00002362   0xF8DF 0x1DD0      LDR.W    R1,??RoadBrd_ParseString_399+0x8
   \   00002366   0xA80F             ADD      R0,SP,#+60
   \   00002368   0x.... 0x....      BL       sprintf
   \   0000236C   0xE202             B.N      ??RoadBrd_ParseString_389
   2539                                          else
   2540                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_401: (+1)
   \   0000236E   0xF8DF 0x1C98      LDR.W    R1,??RoadBrd_ParseString_386+0xC
   \   00002372   0xA80F             ADD      R0,SP,#+60
   \   00002374   0x.... 0x....      BL       sprintf
   \   00002378   0xE1FC             B.N      ??RoadBrd_ParseString_389
   2541                                        }
   2542                                        else if (strncmp((char *)uuid,"0011",4) == 0) // Pressure
   \                     ??RoadBrd_ParseString_400: (+1)
   \   0000237A   0x2204             MOVS     R2,#+4
   \   0000237C   0xF8DF 0x1DB8      LDR.W    R1,??RoadBrd_ParseString_399+0xC
   \   00002380   0xA836             ADD      R0,SP,#+216
   \   00002382   0x.... 0x....      BL       strncmp
   \   00002386   0x2800             CMP      R0,#+0
   \   00002388   0xD116             BNE.N    ??RoadBrd_ParseString_402
   2543                                        {
   2544                                          Status = RoadBrd_CAL_Set_CalItem( CAL_PRESSURE, Offset, Scale);
   \   0000238A   0x9A0B             LDR      R2,[SP, #+44]
   \   0000238C   0x990A             LDR      R1,[SP, #+40]
   \   0000238E   0x2006             MOVS     R0,#+6
   \   00002390   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002394   0x0006             MOVS     R6,R0
   2545                                          if (Status == HAL_OK)
   \   00002396   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002398   0x2E00             CMP      R6,#+0
   \   0000239A   0xD107             BNE.N    ??RoadBrd_ParseString_403
   2546                                            sprintf( (char *)tempBffr2, "Pressure Set COMPLETE." );
   \   0000239C   0xF8DF 0x1DF8      LDR.W    R1,??RoadBrd_ParseString_404
   \   000023A0   0xA80F             ADD      R0,SP,#+60
   \   000023A2   0x.... 0x....      BL       sprintf
   \   000023A6   0xE1E5             B.N      ??RoadBrd_ParseString_389
   \                     ??RoadBrd_ParseString_249:
   \   000023A8   0x........         DC32     ?_78
   2547                                          else
   2548                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_403: (+1)
   \   000023AC   0xF8DF 0x1C58      LDR.W    R1,??RoadBrd_ParseString_386+0xC
   \   000023B0   0xA80F             ADD      R0,SP,#+60
   \   000023B2   0x.... 0x....      BL       sprintf
   \   000023B6   0xE1DD             B.N      ??RoadBrd_ParseString_389
   2549                                        }
   2550                                        else if (strncmp((char *)uuid,"0030",4) == 0) // Humidity
   \                     ??RoadBrd_ParseString_402: (+1)
   \   000023B8   0x2204             MOVS     R2,#+4
   \   000023BA   0xF8DF 0x1DE0      LDR.W    R1,??RoadBrd_ParseString_404+0x4
   \   000023BE   0xA836             ADD      R0,SP,#+216
   \   000023C0   0x.... 0x....      BL       strncmp
   \   000023C4   0x2800             CMP      R0,#+0
   \   000023C6   0xD119             BNE.N    ??RoadBrd_ParseString_405
   2551                                        {
   2552                                          Status = RoadBrd_CAL_Set_CalItem( CAL_HUMIDITY, Offset, Scale);
   \   000023C8   0x9A0B             LDR      R2,[SP, #+44]
   \   000023CA   0x990A             LDR      R1,[SP, #+40]
   \   000023CC   0x2007             MOVS     R0,#+7
   \   000023CE   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   000023D2   0x0006             MOVS     R6,R0
   2553                                          if (Status == HAL_OK)
   \   000023D4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000023D6   0x2E00             CMP      R6,#+0
   \   000023D8   0xD10A             BNE.N    ??RoadBrd_ParseString_406
   2554                                            sprintf( (char *)tempBffr2, "Humidity Set COMPLETE." );
   \   000023DA   0xF8DF 0x1DC4      LDR.W    R1,??RoadBrd_ParseString_404+0x8
   \   000023DE   0xA80F             ADD      R0,SP,#+60
   \   000023E0   0x.... 0x....      BL       sprintf
   \   000023E4   0xE1C6             B.N      ??RoadBrd_ParseString_389
   \   000023E6   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_251:
   \   000023E8   0x........         DC32     ?_79
   \   000023EC   0x........         DC32     ?_80
   2555                                          else
   2556                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_406: (+1)
   \   000023F0   0xF8DF 0x1C14      LDR.W    R1,??RoadBrd_ParseString_386+0xC
   \   000023F4   0xA80F             ADD      R0,SP,#+60
   \   000023F6   0x.... 0x....      BL       sprintf
   \   000023FA   0xE1BB             B.N      ??RoadBrd_ParseString_389
   2557                                        }
   2558                                        else if (strncmp((char *)uuid,"0032",4) == 0) // Hum_TempC
   \                     ??RoadBrd_ParseString_405: (+1)
   \   000023FC   0x2204             MOVS     R2,#+4
   \   000023FE   0xF8DF 0x1DA4      LDR.W    R1,??RoadBrd_ParseString_404+0xC
   \   00002402   0xA836             ADD      R0,SP,#+216
   \   00002404   0x.... 0x....      BL       strncmp
   \   00002408   0x2800             CMP      R0,#+0
   \   0000240A   0xD119             BNE.N    ??RoadBrd_ParseString_407
   2559                                        {
   2560                                          Status = RoadBrd_CAL_Set_CalItem( CAL_HUM_TEMPC, Offset, Scale);
   \   0000240C   0x9A0B             LDR      R2,[SP, #+44]
   \   0000240E   0x990A             LDR      R1,[SP, #+40]
   \   00002410   0x2008             MOVS     R0,#+8
   \   00002412   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002416   0x0006             MOVS     R6,R0
   2561                                          if (Status == HAL_OK)
   \   00002418   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000241A   0x2E00             CMP      R6,#+0
   \   0000241C   0xD10A             BNE.N    ??RoadBrd_ParseString_408
   2562                                            sprintf( (char *)tempBffr2, "Hum_TempC Set COMPLETE." );
   \   0000241E   0xF8DF 0x1D88      LDR.W    R1,??RoadBrd_ParseString_404+0x10
   \   00002422   0xA80F             ADD      R0,SP,#+60
   \   00002424   0x.... 0x....      BL       sprintf
   \   00002428   0xE1A4             B.N      ??RoadBrd_ParseString_389
   \   0000242A   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_254:
   \   0000242C   0x........         DC32     ?_81
   \   00002430   0x........         DC32     ?_82
   2563                                          else
   2564                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_408: (+1)
   \   00002434   0xF8DF 0x1BD0      LDR.W    R1,??RoadBrd_ParseString_386+0xC
   \   00002438   0xA80F             ADD      R0,SP,#+60
   \   0000243A   0x.... 0x....      BL       sprintf
   \   0000243E   0xE199             B.N      ??RoadBrd_ParseString_389
   2565                                        }
   2566                                        else if (strncmp((char *)uuid,"0033",4) == 0) // Hum_TempF
   \                     ??RoadBrd_ParseString_407: (+1)
   \   00002440   0x2204             MOVS     R2,#+4
   \   00002442   0xF8DF 0x1D68      LDR.W    R1,??RoadBrd_ParseString_404+0x14
   \   00002446   0xA836             ADD      R0,SP,#+216
   \   00002448   0x.... 0x....      BL       strncmp
   \   0000244C   0x2800             CMP      R0,#+0
   \   0000244E   0xD119             BNE.N    ??RoadBrd_ParseString_409
   2567                                        {
   2568                                          Status = RoadBrd_CAL_Set_CalItem( CAL_HUM_TEMPF, Offset, Scale);
   \   00002450   0x9A0B             LDR      R2,[SP, #+44]
   \   00002452   0x990A             LDR      R1,[SP, #+40]
   \   00002454   0x2009             MOVS     R0,#+9
   \   00002456   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   0000245A   0x0006             MOVS     R6,R0
   2569                                          if (Status == HAL_OK)
   \   0000245C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000245E   0x2E00             CMP      R6,#+0
   \   00002460   0xD10A             BNE.N    ??RoadBrd_ParseString_410
   2570                                            sprintf( (char *)tempBffr2, "Hum_TempF Set COMPLETE." );
   \   00002462   0xF8DF 0x1D4C      LDR.W    R1,??RoadBrd_ParseString_404+0x18
   \   00002466   0xA80F             ADD      R0,SP,#+60
   \   00002468   0x.... 0x....      BL       sprintf
   \   0000246C   0xE182             B.N      ??RoadBrd_ParseString_389
   \   0000246E   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_257:
   \   00002470   0x........         DC32     ?_83
   \   00002474   0x........         DC32     ?_84
   2571                                          else
   2572                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_410: (+1)
   \   00002478   0xF8DF 0x1B8C      LDR.W    R1,??RoadBrd_ParseString_386+0xC
   \   0000247C   0xA80F             ADD      R0,SP,#+60
   \   0000247E   0x.... 0x....      BL       sprintf
   \   00002482   0xE177             B.N      ??RoadBrd_ParseString_389
   2573                                        }
   2574                                        else if (strncmp((char *)uuid,"000D",4) == 0) // RGB_Red
   \                     ??RoadBrd_ParseString_409: (+1)
   \   00002484   0x2204             MOVS     R2,#+4
   \   00002486   0xF8DF 0x1D2C      LDR.W    R1,??RoadBrd_ParseString_404+0x1C
   \   0000248A   0xA836             ADD      R0,SP,#+216
   \   0000248C   0x.... 0x....      BL       strncmp
   \   00002490   0x2800             CMP      R0,#+0
   \   00002492   0xD117             BNE.N    ??RoadBrd_ParseString_411
   2575                                        {
   2576                                          Status = RoadBrd_CAL_Set_CalItem( CAL_RGB_RED, Offset, Scale);
   \   00002494   0x9A0B             LDR      R2,[SP, #+44]
   \   00002496   0x990A             LDR      R1,[SP, #+40]
   \   00002498   0x200A             MOVS     R0,#+10
   \   0000249A   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   0000249E   0x0006             MOVS     R6,R0
   2577                                          if (Status == HAL_OK)
   \   000024A0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000024A2   0x2E00             CMP      R6,#+0
   \   000024A4   0xD108             BNE.N    ??RoadBrd_ParseString_412
   2578                                            sprintf( (char *)tempBffr2, "RGB_Red Set COMPLETE." );
   \   000024A6   0xF8DF 0x1E18      LDR.W    R1,??RoadBrd_ParseString_413
   \   000024AA   0xA80F             ADD      R0,SP,#+60
   \   000024AC   0x.... 0x....      BL       sprintf
   \   000024B0   0xE160             B.N      ??RoadBrd_ParseString_389
   \   000024B2   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_260:
   \   000024B4   0x........         DC32     ?_85
   2579                                          else
   2580                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_412: (+1)
   \   000024B8   0xF8DF 0x1B4C      LDR.W    R1,??RoadBrd_ParseString_386+0xC
   \   000024BC   0xA80F             ADD      R0,SP,#+60
   \   000024BE   0x.... 0x....      BL       sprintf
   \   000024C2   0xE157             B.N      ??RoadBrd_ParseString_389
   2581                                        }
   2582                                        else if (strncmp((char *)uuid,"000E",4) == 0) // RGB_Green
   \                     ??RoadBrd_ParseString_411: (+1)
   \   000024C4   0x2204             MOVS     R2,#+4
   \   000024C6   0xF8DF 0x1DFC      LDR.W    R1,??RoadBrd_ParseString_413+0x4
   \   000024CA   0xA836             ADD      R0,SP,#+216
   \   000024CC   0x.... 0x....      BL       strncmp
   \   000024D0   0x2800             CMP      R0,#+0
   \   000024D2   0xD119             BNE.N    ??RoadBrd_ParseString_414
   2583                                        {
   2584                                          Status = RoadBrd_CAL_Set_CalItem( CAL_RGB_GREEN, Offset, Scale);
   \   000024D4   0x9A0B             LDR      R2,[SP, #+44]
   \   000024D6   0x990A             LDR      R1,[SP, #+40]
   \   000024D8   0x200B             MOVS     R0,#+11
   \   000024DA   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   000024DE   0x0006             MOVS     R6,R0
   2585                                          if (Status == HAL_OK)
   \   000024E0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000024E2   0x2E00             CMP      R6,#+0
   \   000024E4   0xD10A             BNE.N    ??RoadBrd_ParseString_415
   2586                                            sprintf( (char *)tempBffr2, "RGB_Green Set COMPLETE." );
   \   000024E6   0xF8DF 0x1DE0      LDR.W    R1,??RoadBrd_ParseString_413+0x8
   \   000024EA   0xA80F             ADD      R0,SP,#+60
   \   000024EC   0x.... 0x....      BL       sprintf
   \   000024F0   0xE140             B.N      ??RoadBrd_ParseString_389
   \   000024F2   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_262:
   \   000024F4   0x........         DC32     ?_86
   \   000024F8   0x........         DC32     ?_87
   2587                                          else
   2588                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_415: (+1)
   \   000024FC   0xF8DF 0x1B08      LDR.W    R1,??RoadBrd_ParseString_386+0xC
   \   00002500   0xA80F             ADD      R0,SP,#+60
   \   00002502   0x.... 0x....      BL       sprintf
   \   00002506   0xE135             B.N      ??RoadBrd_ParseString_389
   2589                                        }
   2590                                        else if (strncmp((char *)uuid,"000F",4) == 0) // RGB_Blue
   \                     ??RoadBrd_ParseString_414: (+1)
   \   00002508   0x2204             MOVS     R2,#+4
   \   0000250A   0xF8DF 0x1E20      LDR.W    R1,??RoadBrd_ParseString_416
   \   0000250E   0xA836             ADD      R0,SP,#+216
   \   00002510   0x.... 0x....      BL       strncmp
   \   00002514   0x2800             CMP      R0,#+0
   \   00002516   0xD117             BNE.N    ??RoadBrd_ParseString_417
   2591                                        {
   2592                                          Status = RoadBrd_CAL_Set_CalItem( CAL_RGB_BLUE, Offset, Scale);
   \   00002518   0x9A0B             LDR      R2,[SP, #+44]
   \   0000251A   0x990A             LDR      R1,[SP, #+40]
   \   0000251C   0x200C             MOVS     R0,#+12
   \   0000251E   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002522   0x0006             MOVS     R6,R0
   2593                                          if (Status == HAL_OK)
   \   00002524   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002526   0x2E00             CMP      R6,#+0
   \   00002528   0xD108             BNE.N    ??RoadBrd_ParseString_418
   2594                                            sprintf( (char *)tempBffr2, "RGB_Blue Set COMPLETE." );
   \   0000252A   0xF8DF 0x1E04      LDR.W    R1,??RoadBrd_ParseString_416+0x4
   \   0000252E   0xA80F             ADD      R0,SP,#+60
   \   00002530   0x.... 0x....      BL       sprintf
   \   00002534   0xE11E             B.N      ??RoadBrd_ParseString_389
   \   00002536   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_264:
   \   00002538   0x........         DC32     ?_88
   2595                                          else
   2596                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_418: (+1)
   \   0000253C   0xF8DF 0x1AC8      LDR.W    R1,??RoadBrd_ParseString_386+0xC
   \   00002540   0xA80F             ADD      R0,SP,#+60
   \   00002542   0x.... 0x....      BL       sprintf
   \   00002546   0xE115             B.N      ??RoadBrd_ParseString_389
   2597                                        }
   2598                                        else if (strncmp((char *)uuid,"0017",4) == 0) // Therm_C
   \                     ??RoadBrd_ParseString_417: (+1)
   \   00002548   0x2204             MOVS     R2,#+4
   \   0000254A   0xF8DF 0x1DE8      LDR.W    R1,??RoadBrd_ParseString_416+0x8
   \   0000254E   0xA836             ADD      R0,SP,#+216
   \   00002550   0x.... 0x....      BL       strncmp
   \   00002554   0x2800             CMP      R0,#+0
   \   00002556   0xD114             BNE.N    ??RoadBrd_ParseString_419
   2599                                        {
   2600                                          Status = RoadBrd_CAL_Set_CalItem( CAL_THERM_C, Offset, Scale);
   \   00002558   0x9A0B             LDR      R2,[SP, #+44]
   \   0000255A   0x990A             LDR      R1,[SP, #+40]
   \   0000255C   0x200D             MOVS     R0,#+13
   \   0000255E   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002562   0x0006             MOVS     R6,R0
   2601                                          if (Status == HAL_OK)
   \   00002564   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002566   0x2E00             CMP      R6,#+0
   \   00002568   0xD105             BNE.N    ??RoadBrd_ParseString_420
   2602                                            sprintf( (char *)tempBffr2, "Therm_C Set COMPLETE." );
   \   0000256A   0xF8DF 0x1E18      LDR.W    R1,??RoadBrd_ParseString_421
   \   0000256E   0xA80F             ADD      R0,SP,#+60
   \   00002570   0x.... 0x....      BL       sprintf
   \   00002574   0xE0FE             B.N      ??RoadBrd_ParseString_389
   2603                                          else
   2604                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_420: (+1)
   \   00002576   0xF8DF 0x1A90      LDR.W    R1,??RoadBrd_ParseString_386+0xC
   \   0000257A   0xA80F             ADD      R0,SP,#+60
   \   0000257C   0x.... 0x....      BL       sprintf
   \   00002580   0xE0F8             B.N      ??RoadBrd_ParseString_389
   2605                                        }
   2606                                        else if (strncmp((char *)uuid,"0019",4) == 0) // RoadT_1C
   \                     ??RoadBrd_ParseString_419: (+1)
   \   00002582   0x2204             MOVS     R2,#+4
   \   00002584   0xF8DF 0x1E00      LDR.W    R1,??RoadBrd_ParseString_421+0x4
   \   00002588   0xA836             ADD      R0,SP,#+216
   \   0000258A   0x.... 0x....      BL       strncmp
   \   0000258E   0x2800             CMP      R0,#+0
   \   00002590   0xD114             BNE.N    ??RoadBrd_ParseString_422
   2607                                        {
   2608                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_1C, Offset, Scale);
   \   00002592   0x9A0B             LDR      R2,[SP, #+44]
   \   00002594   0x990A             LDR      R1,[SP, #+40]
   \   00002596   0x200E             MOVS     R0,#+14
   \   00002598   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   0000259C   0x0006             MOVS     R6,R0
   2609                                          if (Status == HAL_OK)
   \   0000259E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000025A0   0x2E00             CMP      R6,#+0
   \   000025A2   0xD105             BNE.N    ??RoadBrd_ParseString_423
   2610                                            sprintf( (char *)tempBffr2, "RoadT_1C Set COMPLETE." );
   \   000025A4   0xF8DF 0x1DE4      LDR.W    R1,??RoadBrd_ParseString_421+0x8
   \   000025A8   0xA80F             ADD      R0,SP,#+60
   \   000025AA   0x.... 0x....      BL       sprintf
   \   000025AE   0xE0E1             B.N      ??RoadBrd_ParseString_389
   2611                                          else
   2612                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_423: (+1)
   \   000025B0   0xF8DF 0x1A54      LDR.W    R1,??RoadBrd_ParseString_386+0xC
   \   000025B4   0xA80F             ADD      R0,SP,#+60
   \   000025B6   0x.... 0x....      BL       sprintf
   \   000025BA   0xE0DB             B.N      ??RoadBrd_ParseString_389
   2613                                        }
   2614                                        else if (strncmp((char *)uuid,"001B",4) == 0) // RoadT_2C
   \                     ??RoadBrd_ParseString_422: (+1)
   \   000025BC   0x2204             MOVS     R2,#+4
   \   000025BE   0xF8DF 0x1E2C      LDR.W    R1,??RoadBrd_ParseString_424
   \   000025C2   0xA836             ADD      R0,SP,#+216
   \   000025C4   0x.... 0x....      BL       strncmp
   \   000025C8   0x2800             CMP      R0,#+0
   \   000025CA   0xD114             BNE.N    ??RoadBrd_ParseString_425
   2615                                        {
   2616                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_2C, Offset, Scale);
   \   000025CC   0x9A0B             LDR      R2,[SP, #+44]
   \   000025CE   0x990A             LDR      R1,[SP, #+40]
   \   000025D0   0x200F             MOVS     R0,#+15
   \   000025D2   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   000025D6   0x0006             MOVS     R6,R0
   2617                                          if (Status == HAL_OK)
   \   000025D8   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000025DA   0x2E00             CMP      R6,#+0
   \   000025DC   0xD105             BNE.N    ??RoadBrd_ParseString_426
   2618                                            sprintf( (char *)tempBffr2, "RoadT_2C Set COMPLETE." );
   \   000025DE   0xF8DF 0x1E10      LDR.W    R1,??RoadBrd_ParseString_424+0x4
   \   000025E2   0xA80F             ADD      R0,SP,#+60
   \   000025E4   0x.... 0x....      BL       sprintf
   \   000025E8   0xE0C4             B.N      ??RoadBrd_ParseString_389
   2619                                          else
   2620                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_426: (+1)
   \   000025EA   0xF8DF 0x1A1C      LDR.W    R1,??RoadBrd_ParseString_386+0xC
   \   000025EE   0xA80F             ADD      R0,SP,#+60
   \   000025F0   0x.... 0x....      BL       sprintf
   \   000025F4   0xE0BE             B.N      ??RoadBrd_ParseString_389
   2621                                        }
   2622                                        else if (strncmp((char *)uuid,"001D",4) == 0) // RoadT_3C
   \                     ??RoadBrd_ParseString_425: (+1)
   \   000025F6   0x2204             MOVS     R2,#+4
   \   000025F8   0xF8DF 0x1DF8      LDR.W    R1,??RoadBrd_ParseString_424+0x8
   \   000025FC   0xA836             ADD      R0,SP,#+216
   \   000025FE   0x.... 0x....      BL       strncmp
   \   00002602   0x2800             CMP      R0,#+0
   \   00002604   0xD114             BNE.N    ??RoadBrd_ParseString_427
   2623                                        {
   2624                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_3C, Offset, Scale);
   \   00002606   0x9A0B             LDR      R2,[SP, #+44]
   \   00002608   0x990A             LDR      R1,[SP, #+40]
   \   0000260A   0x2010             MOVS     R0,#+16
   \   0000260C   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002610   0x0006             MOVS     R6,R0
   2625                                          if (Status == HAL_OK)
   \   00002612   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002614   0x2E00             CMP      R6,#+0
   \   00002616   0xD105             BNE.N    ??RoadBrd_ParseString_428
   2626                                            sprintf( (char *)tempBffr2, "RoadT_3C Set COMPLETE." );
   \   00002618   0xF8DF 0x1DDC      LDR.W    R1,??RoadBrd_ParseString_424+0xC
   \   0000261C   0xA80F             ADD      R0,SP,#+60
   \   0000261E   0x.... 0x....      BL       sprintf
   \   00002622   0xE0A7             B.N      ??RoadBrd_ParseString_389
   2627                                          else
   2628                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_428: (+1)
   \   00002624   0xF8DF 0x19E0      LDR.W    R1,??RoadBrd_ParseString_386+0xC
   \   00002628   0xA80F             ADD      R0,SP,#+60
   \   0000262A   0x.... 0x....      BL       sprintf
   \   0000262E   0xE0A1             B.N      ??RoadBrd_ParseString_389
   2629                                        }
   2630                                        else if (strncmp((char *)uuid,"001F",4) == 0) // RoadT_4C
   \                     ??RoadBrd_ParseString_427: (+1)
   \   00002630   0x2204             MOVS     R2,#+4
   \   00002632   0xF8DF 0x1DC8      LDR.W    R1,??RoadBrd_ParseString_424+0x10
   \   00002636   0xA836             ADD      R0,SP,#+216
   \   00002638   0x.... 0x....      BL       strncmp
   \   0000263C   0x2800             CMP      R0,#+0
   \   0000263E   0xD119             BNE.N    ??RoadBrd_ParseString_429
   2631                                        {
   2632                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_4C, Offset, Scale);
   \   00002640   0x9A0B             LDR      R2,[SP, #+44]
   \   00002642   0x990A             LDR      R1,[SP, #+40]
   \   00002644   0x2011             MOVS     R0,#+17
   \   00002646   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   0000264A   0x0006             MOVS     R6,R0
   2633                                          if (Status == HAL_OK)
   \   0000264C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000264E   0x2E00             CMP      R6,#+0
   \   00002650   0xD10A             BNE.N    ??RoadBrd_ParseString_430
   2634                                            sprintf( (char *)tempBffr2, "RoadT_4C Set COMPLETE." );
   \   00002652   0xF8DF 0x1DAC      LDR.W    R1,??RoadBrd_ParseString_424+0x14
   \   00002656   0xA80F             ADD      R0,SP,#+60
   \   00002658   0x.... 0x....      BL       sprintf
   \   0000265C   0xE08A             B.N      ??RoadBrd_ParseString_389
   \   0000265E   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_272:
   \   00002660   0x........         DC32     ?_89
   \   00002664   0x........         DC32     ?_90
   2635                                          else
   2636                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_430: (+1)
   \   00002668   0xF8DF 0x199C      LDR.W    R1,??RoadBrd_ParseString_386+0xC
   \   0000266C   0xA80F             ADD      R0,SP,#+60
   \   0000266E   0x.... 0x....      BL       sprintf
   \   00002672   0xE07F             B.N      ??RoadBrd_ParseString_389
   2637                                        }
   2638                                        else if (strncmp((char *)uuid,"0021",4) == 0) // RoadT_5C
   \                     ??RoadBrd_ParseString_429: (+1)
   \   00002674   0x2204             MOVS     R2,#+4
   \   00002676   0xF8DF 0x1E34      LDR.W    R1,??RoadBrd_ParseString_431
   \   0000267A   0xA836             ADD      R0,SP,#+216
   \   0000267C   0x.... 0x....      BL       strncmp
   \   00002680   0x2800             CMP      R0,#+0
   \   00002682   0xD114             BNE.N    ??RoadBrd_ParseString_432
   2639                                        {
   2640                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_5C, Offset, Scale);
   \   00002684   0x9A0B             LDR      R2,[SP, #+44]
   \   00002686   0x990A             LDR      R1,[SP, #+40]
   \   00002688   0x2012             MOVS     R0,#+18
   \   0000268A   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   0000268E   0x0006             MOVS     R6,R0
   2641                                          if (Status == HAL_OK)
   \   00002690   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002692   0x2E00             CMP      R6,#+0
   \   00002694   0xD105             BNE.N    ??RoadBrd_ParseString_433
   2642                                            sprintf( (char *)tempBffr2, "RoadT_5C Set COMPLETE." );
   \   00002696   0xF8DF 0x1E18      LDR.W    R1,??RoadBrd_ParseString_431+0x4
   \   0000269A   0xA80F             ADD      R0,SP,#+60
   \   0000269C   0x.... 0x....      BL       sprintf
   \   000026A0   0xE068             B.N      ??RoadBrd_ParseString_389
   2643                                          else
   2644                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_433: (+1)
   \   000026A2   0xF8DF 0x1964      LDR.W    R1,??RoadBrd_ParseString_386+0xC
   \   000026A6   0xA80F             ADD      R0,SP,#+60
   \   000026A8   0x.... 0x....      BL       sprintf
   \   000026AC   0xE062             B.N      ??RoadBrd_ParseString_389
   2645                                        }
   2646                                        else if (strncmp((char *)uuid,"0023",4) == 0) // RoadT_6C
   \                     ??RoadBrd_ParseString_432: (+1)
   \   000026AE   0x2204             MOVS     R2,#+4
   \   000026B0   0xF8DF 0x1E30      LDR.W    R1,??RoadBrd_ParseString_434
   \   000026B4   0xA836             ADD      R0,SP,#+216
   \   000026B6   0x.... 0x....      BL       strncmp
   \   000026BA   0x2800             CMP      R0,#+0
   \   000026BC   0xD116             BNE.N    ??RoadBrd_ParseString_435
   2647                                        {
   2648                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_6C, Offset, Scale);
   \   000026BE   0x9A0B             LDR      R2,[SP, #+44]
   \   000026C0   0x990A             LDR      R1,[SP, #+40]
   \   000026C2   0x2013             MOVS     R0,#+19
   \   000026C4   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   000026C8   0x0006             MOVS     R6,R0
   2649                                          if (Status == HAL_OK)
   \   000026CA   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000026CC   0x2E00             CMP      R6,#+0
   \   000026CE   0xD107             BNE.N    ??RoadBrd_ParseString_436
   2650                                            sprintf( (char *)tempBffr2, "RoadT_6C Set COMPLETE." );
   \   000026D0   0xF8DF 0x1E14      LDR.W    R1,??RoadBrd_ParseString_434+0x4
   \   000026D4   0xA80F             ADD      R0,SP,#+60
   \   000026D6   0x.... 0x....      BL       sprintf
   \   000026DA   0xE04B             B.N      ??RoadBrd_ParseString_389
   \                     ??RoadBrd_ParseString_275:
   \   000026DC   0x........         DC32     ?_91
   2651                                          else
   2652                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_436: (+1)
   \   000026E0   0xF8DF 0x1924      LDR.W    R1,??RoadBrd_ParseString_386+0xC
   \   000026E4   0xA80F             ADD      R0,SP,#+60
   \   000026E6   0x.... 0x....      BL       sprintf
   \   000026EA   0xE043             B.N      ??RoadBrd_ParseString_389
   2653                                        }
   2654                                        else if (strncmp((char *)uuid,"0025",4) == 0) // RoadT_7C
   \                     ??RoadBrd_ParseString_435: (+1)
   \   000026EC   0x2204             MOVS     R2,#+4
   \   000026EE   0xF8DF 0x1DFC      LDR.W    R1,??RoadBrd_ParseString_434+0x8
   \   000026F2   0xA836             ADD      R0,SP,#+216
   \   000026F4   0x.... 0x....      BL       strncmp
   \   000026F8   0x2800             CMP      R0,#+0
   \   000026FA   0xD119             BNE.N    ??RoadBrd_ParseString_437
   2655                                        {
   2656                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_7C, Offset, Scale);
   \   000026FC   0x9A0B             LDR      R2,[SP, #+44]
   \   000026FE   0x990A             LDR      R1,[SP, #+40]
   \   00002700   0x2014             MOVS     R0,#+20
   \   00002702   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002706   0x0006             MOVS     R6,R0
   2657                                          if (Status == HAL_OK)
   \   00002708   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000270A   0x2E00             CMP      R6,#+0
   \   0000270C   0xD10A             BNE.N    ??RoadBrd_ParseString_438
   2658                                            sprintf( (char *)tempBffr2, "RoadT_7C Set COMPLETE." );
   \   0000270E   0xF8DF 0x1DE0      LDR.W    R1,??RoadBrd_ParseString_434+0xC
   \   00002712   0xA80F             ADD      R0,SP,#+60
   \   00002714   0x.... 0x....      BL       sprintf
   \   00002718   0xE02C             B.N      ??RoadBrd_ParseString_389
   \   0000271A   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_278:
   \   0000271C   0x........         DC32     ?_92
   \   00002720   0x........         DC32     ?_40
   2659                                          else
   2660                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_438: (+1)
   \   00002724   0xF8DF 0x18E0      LDR.W    R1,??RoadBrd_ParseString_386+0xC
   \   00002728   0xA80F             ADD      R0,SP,#+60
   \   0000272A   0x.... 0x....      BL       sprintf
   \   0000272E   0xE021             B.N      ??RoadBrd_ParseString_389
   2661                                        }
   2662                                        else if (strncmp((char *)uuid,"0027",4) == 0) // RoadT_8C
   \                     ??RoadBrd_ParseString_437: (+1)
   \   00002730   0x2204             MOVS     R2,#+4
   \   00002732   0xF8DF 0x1E3C      LDR.W    R1,??RoadBrd_ParseString_439
   \   00002736   0xA836             ADD      R0,SP,#+216
   \   00002738   0x.... 0x....      BL       strncmp
   \   0000273C   0x2800             CMP      R0,#+0
   \   0000273E   0xD114             BNE.N    ??RoadBrd_ParseString_440
   2663                                        {
   2664                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_8C, Offset, Scale);
   \   00002740   0x9A0B             LDR      R2,[SP, #+44]
   \   00002742   0x990A             LDR      R1,[SP, #+40]
   \   00002744   0x2015             MOVS     R0,#+21
   \   00002746   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   0000274A   0x0006             MOVS     R6,R0
   2665                                          if (Status == HAL_OK)
   \   0000274C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000274E   0x2E00             CMP      R6,#+0
   \   00002750   0xD105             BNE.N    ??RoadBrd_ParseString_441
   2666                                            sprintf( (char *)tempBffr2, "RoadT_8C Set COMPLETE." );
   \   00002752   0xF8DF 0x1E20      LDR.W    R1,??RoadBrd_ParseString_439+0x4
   \   00002756   0xA80F             ADD      R0,SP,#+60
   \   00002758   0x.... 0x....      BL       sprintf
   \   0000275C   0xE00A             B.N      ??RoadBrd_ParseString_389
   2667                                          else
   2668                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_441: (+1)
   \   0000275E   0xF8DF 0x18A8      LDR.W    R1,??RoadBrd_ParseString_386+0xC
   \   00002762   0xA80F             ADD      R0,SP,#+60
   \   00002764   0x.... 0x....      BL       sprintf
   \   00002768   0xE004             B.N      ??RoadBrd_ParseString_389
   2669                                        }
   2670                                        else
   2671                                        {
   2672                                          sprintf( (char *)tempBffr2, "TCS SYNTAX ERROR: Bad UUID.\r\n" );
   \                     ??RoadBrd_ParseString_440: (+1)
   \   0000276A   0xF8DF 0x1E0C      LDR.W    R1,??RoadBrd_ParseString_439+0x8
   \   0000276E   0xA80F             ADD      R0,SP,#+60
   \   00002770   0x.... 0x....      BL       sprintf
   2673                                        }
   2674                                        Status = HAL_OK;
   \                     ??RoadBrd_ParseString_389: (+1)
   \   00002774   0x2000             MOVS     R0,#+0
   \   00002776   0x0006             MOVS     R6,R0
   \   00002778   0xE00B             B.N      ??RoadBrd_ParseString_381
   \   0000277A   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_283:
   \   0000277C   0x........         DC32     ?_93
   \   00002780   0x........         DC32     ?_94
   \   00002784   0x........         DC32     ?_95
   2675                                      }
   2676                                      else
   2677                                      {
   2678                                        strcpy( (char *)tempBffr2, "TCS SYNTAX ERROR: Wrong Number of Parameters.\r\n");
   \                     ??RoadBrd_ParseString_385: (+1)
   \   00002788   0xF8DF 0x1E48      LDR.W    R1,??RoadBrd_ParseString_442
   \   0000278C   0xA80F             ADD      R0,SP,#+60
   \   0000278E   0x.... 0x....      BL       strcpy
   2679                                      }
   2680                                    } // EndElse (flag == 0)
   2681                                  } // EndElse (tempBffr[3]!=':')
   2682                                  break;
   \                     ??RoadBrd_ParseString_381: (+1)
   \   00002792   0xE3D7             B.N      ??RoadBrd_ParseString_373
   2683                                  //------------------ TCR Command: Calibration Read Command
   2684                                case 'R':
   2685                                  // Build Read Calibration Dump Part I....
   2686                                  // Is this a BLE Operation?
   2687                                  if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_375: (+1)
   \   00002794   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002796   0x2D00             CMP      R5,#+0
   \   00002798   0xD00A             BEQ.N    ??RoadBrd_ParseString_443
   2688                                  {
   2689                                    // Yes...Build and Send BLE Response NOW.
   2690                                    strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   0000279A   0xF8DF 0x16B4      LDR.W    R1,??RoadBrd_ParseString_366
   \   0000279E   0xA80F             ADD      R0,SP,#+60
   \   000027A0   0x.... 0x....      BL       strcpy
   2691                                    BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000027A4   0xA80F             ADD      R0,SP,#+60
   \   000027A6   0x.... 0x....      BL       strlen
   \   000027AA   0xA90F             ADD      R1,SP,#+60
   \   000027AC   0x.... 0x....      BL       BGM111_Transmit
   2692                                  }
   2693                                  
   2694                                  // Send string to UART..
   2695                                  sprintf( (char *)tempBffr2, "CALIBRATION DATA\r\nDate: %s\r\n",  RoadBrd_CAL_GetTimeString());
   \                     ??RoadBrd_ParseString_443: (+1)
   \   000027B0   0x.... 0x....      BL       RoadBrd_CAL_GetTimeString
   \   000027B4   0x0002             MOVS     R2,R0
   \   000027B6   0xF8DF 0x1E54      LDR.W    R1,??RoadBrd_ParseString_444
   \   000027BA   0xA80F             ADD      R0,SP,#+60
   \   000027BC   0x.... 0x....      BL       sprintf
   2696          #ifdef NUCLEO
   2697                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   2698          #else
   2699                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000027C0   0xA90F             ADD      R1,SP,#+60
   \   000027C2   0x2000             MOVS     R0,#+0
   \   000027C4   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000027C8   0x0006             MOVS     R6,R0
   2700          #endif
   2701                                  if (Status != HAL_OK)
   \   000027CA   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000027CC   0x2E00             CMP      R6,#+0
   \   000027CE   0xD009             BEQ.N    ??RoadBrd_ParseString_445
   2702                                      return Status;
   \   000027D0   0x0030             MOVS     R0,R6
   \   000027D2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000027D4   0xF001 0xB8E0      B.W      ??RoadBrd_ParseString_4
   \                     ??RoadBrd_ParseString_287:
   \   000027D8   0x........         DC32     ?_96
   \   000027DC   0x........         DC32     ?_97
   \   000027E0   0x........         DC32     ?_98
   2703                                  // Build Read Calibration Dump Part II....
   2704                                  // Send string to UART..
   2705                                  sprintf( (char *)tempBffr2, "Name		        UUID		Slope		Offset\r\n" );
   \                     ??RoadBrd_ParseString_445: (+1)
   \   000027E4   0xF8DF 0x1E28      LDR.W    R1,??RoadBrd_ParseString_444+0x4
   \   000027E8   0xA80F             ADD      R0,SP,#+60
   \   000027EA   0x.... 0x....      BL       sprintf
   2706          #ifdef NUCLEO
   2707                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   2708          #else
   2709                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000027EE   0xA90F             ADD      R1,SP,#+60
   \   000027F0   0x2000             MOVS     R0,#+0
   \   000027F2   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000027F6   0x0006             MOVS     R6,R0
   2710          #endif
   2711                                  if (Status != HAL_OK)
   \   000027F8   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000027FA   0x2E00             CMP      R6,#+0
   \   000027FC   0xD003             BEQ.N    ??RoadBrd_ParseString_446
   2712                                      return Status;
   \   000027FE   0x0030             MOVS     R0,R6
   \   00002800   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002802   0xF001 0xB8C9      B.W      ??RoadBrd_ParseString_4
   2713                                  // NOW, Build Data String..
   2714                                  for (x=0; x<CAL_LAST_VALUE; x++)
   \                     ??RoadBrd_ParseString_446: (+1)
   \   00002806   0x2000             MOVS     R0,#+0
   \   00002808   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_447: (+1)
   \   0000280A   0x2F16             CMP      R7,#+22
   \   0000280C   0xF280 0x8324      BGE.W    ??RoadBrd_ParseString_448
   2715                                  {
   2716                                    // Build String
   2717                                    switch(x)
   \   00002810   0x2F00             CMP      R7,#+0
   \   00002812   0xD033             BEQ.N    ??RoadBrd_ParseString_449
   \   00002814   0x2F02             CMP      R7,#+2
   \   00002816   0xD077             BEQ.N    ??RoadBrd_ParseString_450
   \   00002818   0xD350             BCC.N    ??RoadBrd_ParseString_451
   \   0000281A   0x2F04             CMP      R7,#+4
   \   0000281C   0xF000 0x80B4      BEQ.W    ??RoadBrd_ParseString_452
   \   00002820   0xF0C0 0x8092      BCC.W    ??RoadBrd_ParseString_453
   \   00002824   0x2F06             CMP      R7,#+6
   \   00002826   0xF000 0x80F1      BEQ.W    ??RoadBrd_ParseString_454
   \   0000282A   0xF0C0 0x80CF      BCC.W    ??RoadBrd_ParseString_455
   \   0000282E   0x2F08             CMP      R7,#+8
   \   00002830   0xF000 0x8130      BEQ.W    ??RoadBrd_ParseString_456
   \   00002834   0xF0C0 0x810E      BCC.W    ??RoadBrd_ParseString_457
   \   00002838   0x2F0A             CMP      R7,#+10
   \   0000283A   0xF000 0x8171      BEQ.W    ??RoadBrd_ParseString_458
   \   0000283E   0xF0C0 0x814F      BCC.W    ??RoadBrd_ParseString_459
   \   00002842   0x2F0C             CMP      R7,#+12
   \   00002844   0xF000 0x81B0      BEQ.W    ??RoadBrd_ParseString_460
   \   00002848   0xF0C0 0x818E      BCC.W    ??RoadBrd_ParseString_461
   \   0000284C   0x2F0E             CMP      R7,#+14
   \   0000284E   0xF000 0x81ED      BEQ.W    ??RoadBrd_ParseString_462
   \   00002852   0xF0C0 0x81C9      BCC.W    ??RoadBrd_ParseString_463
   \   00002856   0x2F10             CMP      R7,#+16
   \   00002858   0xF000 0x822C      BEQ.W    ??RoadBrd_ParseString_464
   \   0000285C   0xF0C0 0x8206      BCC.W    ??RoadBrd_ParseString_465
   \   00002860   0x2F12             CMP      R7,#+18
   \   00002862   0xF000 0x8269      BEQ.W    ??RoadBrd_ParseString_466
   \   00002866   0xF0C0 0x8245      BCC.W    ??RoadBrd_ParseString_467
   \   0000286A   0x2F14             CMP      R7,#+20
   \   0000286C   0xF000 0x82A4      BEQ.W    ??RoadBrd_ParseString_468
   \   00002870   0xF0C0 0x8282      BCC.W    ??RoadBrd_ParseString_469
   \   00002874   0x2F15             CMP      R7,#+21
   \   00002876   0xF000 0x82BF      BEQ.W    ??RoadBrd_ParseString_470
   \   0000287A   0xE2DC             B.N      ??RoadBrd_ParseString_471
   2718                                    {
   2719                                      case CAL_SHNT_VLTG: //CAL_SHNT_VLTG Values
   2720                                        sprintf( (char *)tempBffr2, "%s	0002		%1.4f		%2.3f\r\n", 
   2721                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   2722                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   2723                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_449: (+1)
   \   0000287C   0x0038             MOVS     R0,R7
   \   0000287E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002880   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00002884   0x4683             MOV      R11,R0
   \   00002886   0x0038             MOVS     R0,R7
   \   00002888   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000288A   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   0000288E   0x4681             MOV      R9,R0
   \   00002890   0x0038             MOVS     R0,R7
   \   00002892   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002894   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00002898   0x4682             MOV      R10,R0
   \   0000289A   0x4658             MOV      R0,R11
   \   0000289C   0x.... 0x....      BL       __aeabi_f2d
   \   000028A0   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000028A4   0x4648             MOV      R0,R9
   \   000028A6   0x.... 0x....      BL       __aeabi_f2d
   \   000028AA   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000028AE   0x4652             MOV      R2,R10
   \   000028B0   0xF8DF 0x1E1C      LDR.W    R1,??RoadBrd_ParseString_472
   \   000028B4   0xA80F             ADD      R0,SP,#+60
   \   000028B6   0x.... 0x....      BL       sprintf
   2724                                        break;
   \   000028BA   0xE2BC             B.N      ??RoadBrd_ParseString_471
   2725                                      case CAL_CURRENT: //CAL_CURRENT Values
   2726                                        sprintf( (char *)tempBffr2, "%s	        0004		%1.4f		%2.3f\r\n", 
   2727                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   2728                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   2729                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_451: (+1)
   \   000028BC   0x0038             MOVS     R0,R7
   \   000028BE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000028C0   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000028C4   0x4683             MOV      R11,R0
   \   000028C6   0x0038             MOVS     R0,R7
   \   000028C8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000028CA   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000028CE   0x4681             MOV      R9,R0
   \   000028D0   0x0038             MOVS     R0,R7
   \   000028D2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000028D4   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000028D8   0x4682             MOV      R10,R0
   \   000028DA   0x4658             MOV      R0,R11
   \   000028DC   0x.... 0x....      BL       __aeabi_f2d
   \   000028E0   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000028E4   0x4648             MOV      R0,R9
   \   000028E6   0x.... 0x....      BL       __aeabi_f2d
   \   000028EA   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000028EE   0x4652             MOV      R2,R10
   \   000028F0   0xF8DF 0x1E1C      LDR.W    R1,??RoadBrd_ParseString_473
   \   000028F4   0xA80F             ADD      R0,SP,#+60
   \   000028F6   0x.... 0x....      BL       sprintf
   2730                                        break;
   \   000028FA   0xE29C             B.N      ??RoadBrd_ParseString_471
   \                     ??RoadBrd_ParseString_312:
   \   000028FC   0x........         DC32     ?_99
   \   00002900   0x........         DC32     ?_100
   \   00002904   0x........         DC32     ?_101
   2731                                      case CAL_POWER: //CAL_POWER Values
   2732                                        sprintf( (char *)tempBffr2, "%s	0006		%1.4f		%2.3f\r\n", 
   2733                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   2734                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   2735                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_450: (+1)
   \   00002908   0x0038             MOVS     R0,R7
   \   0000290A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000290C   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00002910   0x4683             MOV      R11,R0
   \   00002912   0x0038             MOVS     R0,R7
   \   00002914   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002916   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   0000291A   0x4681             MOV      R9,R0
   \   0000291C   0x0038             MOVS     R0,R7
   \   0000291E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002920   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00002924   0x4682             MOV      R10,R0
   \   00002926   0x4658             MOV      R0,R11
   \   00002928   0x.... 0x....      BL       __aeabi_f2d
   \   0000292C   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00002930   0x4648             MOV      R0,R9
   \   00002932   0x.... 0x....      BL       __aeabi_f2d
   \   00002936   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000293A   0x4652             MOV      R2,R10
   \   0000293C   0xF8DF 0x1E04      LDR.W    R1,??RoadBrd_ParseString_474
   \   00002940   0xA80F             ADD      R0,SP,#+60
   \   00002942   0x.... 0x....      BL       sprintf
   2736                                        break;
   \   00002946   0xE276             B.N      ??RoadBrd_ParseString_471
   2737                                      case CAL_VOLTAGE: //CAL_VOLTAGE Values
   2738                                        sprintf( (char *)tempBffr2, "%s	        0008		%1.4f		%2.3f\r\n", 
   2739                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   2740                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   2741                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_453: (+1)
   \   00002948   0x0038             MOVS     R0,R7
   \   0000294A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000294C   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00002950   0x4683             MOV      R11,R0
   \   00002952   0x0038             MOVS     R0,R7
   \   00002954   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002956   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   0000295A   0x4681             MOV      R9,R0
   \   0000295C   0x0038             MOVS     R0,R7
   \   0000295E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002960   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00002964   0x4682             MOV      R10,R0
   \   00002966   0x4658             MOV      R0,R11
   \   00002968   0x.... 0x....      BL       __aeabi_f2d
   \   0000296C   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00002970   0x4648             MOV      R0,R9
   \   00002972   0x.... 0x....      BL       __aeabi_f2d
   \   00002976   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000297A   0x4652             MOV      R2,R10
   \   0000297C   0xF8DF 0x1E2C      LDR.W    R1,??RoadBrd_ParseString_475
   \   00002980   0xA80F             ADD      R0,SP,#+60
   \   00002982   0x.... 0x....      BL       sprintf
   2742                                        break;
   \   00002986   0xE256             B.N      ??RoadBrd_ParseString_471
   2743                                      case CAL_TEMPC: //CAL_TEMPC Values
   2744                                        sprintf( (char *)tempBffr2, "%s	000A		%1.4f		%2.3f\r\n", 
   2745                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   2746                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   2747                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_452: (+1)
   \   00002988   0x0038             MOVS     R0,R7
   \   0000298A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000298C   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00002990   0x4683             MOV      R11,R0
   \   00002992   0x0038             MOVS     R0,R7
   \   00002994   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002996   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   0000299A   0x4681             MOV      R9,R0
   \   0000299C   0x0038             MOVS     R0,R7
   \   0000299E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000029A0   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000029A4   0x4682             MOV      R10,R0
   \   000029A6   0x4658             MOV      R0,R11
   \   000029A8   0x.... 0x....      BL       __aeabi_f2d
   \   000029AC   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000029B0   0x4648             MOV      R0,R9
   \   000029B2   0x.... 0x....      BL       __aeabi_f2d
   \   000029B6   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000029BA   0x4652             MOV      R2,R10
   \   000029BC   0xF8DF 0x1E04      LDR.W    R1,??RoadBrd_ParseString_476
   \   000029C0   0xA80F             ADD      R0,SP,#+60
   \   000029C2   0x.... 0x....      BL       sprintf
   2748                                        break;
   \   000029C6   0xE236             B.N      ??RoadBrd_ParseString_471
   \                     ??RoadBrd_ParseString_319:
   \   000029C8   0x........         DC32     ?_102
   2749                                      case CAL_TEMPF: //CAL_TEMPF Values
   2750                                        sprintf( (char *)tempBffr2, "%s	000B		%1.4f		%2.3f\r\n", 
   2751                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   2752                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   2753                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_455: (+1)
   \   000029CC   0x0038             MOVS     R0,R7
   \   000029CE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000029D0   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000029D4   0x4683             MOV      R11,R0
   \   000029D6   0x0038             MOVS     R0,R7
   \   000029D8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000029DA   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000029DE   0x4681             MOV      R9,R0
   \   000029E0   0x0038             MOVS     R0,R7
   \   000029E2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000029E4   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000029E8   0x4682             MOV      R10,R0
   \   000029EA   0x4658             MOV      R0,R11
   \   000029EC   0x.... 0x....      BL       __aeabi_f2d
   \   000029F0   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000029F4   0x4648             MOV      R0,R9
   \   000029F6   0x.... 0x....      BL       __aeabi_f2d
   \   000029FA   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000029FE   0x4652             MOV      R2,R10
   \   00002A00   0xF8DF 0x1E10      LDR.W    R1,??RoadBrd_ParseString_477
   \   00002A04   0xA80F             ADD      R0,SP,#+60
   \   00002A06   0x.... 0x....      BL       sprintf
   2754                                        break;
   \   00002A0A   0xE214             B.N      ??RoadBrd_ParseString_471
   2755                                      case CAL_PRESSURE: //CAL_PRESSURE Values
   2756                                        sprintf( (char *)tempBffr2, "%s	0011		%1.4f		%2.3f\r\n", 
   2757                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   2758                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   2759                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_454: (+1)
   \   00002A0C   0x0038             MOVS     R0,R7
   \   00002A0E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002A10   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00002A14   0x4683             MOV      R11,R0
   \   00002A16   0x0038             MOVS     R0,R7
   \   00002A18   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002A1A   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00002A1E   0x4681             MOV      R9,R0
   \   00002A20   0x0038             MOVS     R0,R7
   \   00002A22   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002A24   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00002A28   0x4682             MOV      R10,R0
   \   00002A2A   0x4658             MOV      R0,R11
   \   00002A2C   0x.... 0x....      BL       __aeabi_f2d
   \   00002A30   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00002A34   0x4648             MOV      R0,R9
   \   00002A36   0x.... 0x....      BL       __aeabi_f2d
   \   00002A3A   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00002A3E   0x4652             MOV      R2,R10
   \   00002A40   0xF8DF 0x1E10      LDR.W    R1,??RoadBrd_ParseString_478
   \   00002A44   0xA80F             ADD      R0,SP,#+60
   \   00002A46   0x.... 0x....      BL       sprintf
   2760                                        break;
   \   00002A4A   0xE1F4             B.N      ??RoadBrd_ParseString_471
   \                     ??RoadBrd_ParseString_325:
   \   00002A4C   0x........         DC32     ?_104
   \   00002A50   0x........         DC32     ?_105
   2761                                      case CAL_HUMIDITY: //CAL_HUMIDITY Values
   2762                                        sprintf( (char *)tempBffr2, "%s	0030		%1.4f		%2.3f\r\n", 
   2763                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   2764                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   2765                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_457: (+1)
   \   00002A54   0x0038             MOVS     R0,R7
   \   00002A56   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002A58   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00002A5C   0x4683             MOV      R11,R0
   \   00002A5E   0x0038             MOVS     R0,R7
   \   00002A60   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002A62   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00002A66   0x4681             MOV      R9,R0
   \   00002A68   0x0038             MOVS     R0,R7
   \   00002A6A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002A6C   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00002A70   0x4682             MOV      R10,R0
   \   00002A72   0x4658             MOV      R0,R11
   \   00002A74   0x.... 0x....      BL       __aeabi_f2d
   \   00002A78   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00002A7C   0x4648             MOV      R0,R9
   \   00002A7E   0x.... 0x....      BL       __aeabi_f2d
   \   00002A82   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00002A86   0x4652             MOV      R2,R10
   \   00002A88   0xF8DF 0x1DCC      LDR.W    R1,??RoadBrd_ParseString_478+0x4
   \   00002A8C   0xA80F             ADD      R0,SP,#+60
   \   00002A8E   0x.... 0x....      BL       sprintf
   2766                                        break;
   \   00002A92   0xE1D0             B.N      ??RoadBrd_ParseString_471
   2767                                      case CAL_HUM_TEMPC: //CAL_HUM_TEMPC Values
   2768                                        sprintf( (char *)tempBffr2, "%s	0032		%1.4f		%2.3f\r\n", 
   2769                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   2770                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   2771                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_456: (+1)
   \   00002A94   0x0038             MOVS     R0,R7
   \   00002A96   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002A98   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00002A9C   0x4683             MOV      R11,R0
   \   00002A9E   0x0038             MOVS     R0,R7
   \   00002AA0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002AA2   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00002AA6   0x4681             MOV      R9,R0
   \   00002AA8   0x0038             MOVS     R0,R7
   \   00002AAA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002AAC   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00002AB0   0x4682             MOV      R10,R0
   \   00002AB2   0x4658             MOV      R0,R11
   \   00002AB4   0x.... 0x....      BL       __aeabi_f2d
   \   00002AB8   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00002ABC   0x4648             MOV      R0,R9
   \   00002ABE   0x.... 0x....      BL       __aeabi_f2d
   \   00002AC2   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00002AC6   0x4652             MOV      R2,R10
   \   00002AC8   0xF8DF 0x1DEC      LDR.W    R1,??RoadBrd_ParseString_479
   \   00002ACC   0xA80F             ADD      R0,SP,#+60
   \   00002ACE   0x.... 0x....      BL       sprintf
   2772                                        break;
   \   00002AD2   0xE1B0             B.N      ??RoadBrd_ParseString_471
   \                     ??RoadBrd_ParseString_330:
   \   00002AD4   0x........         DC32     ?_106
   \   00002AD8   0x........         DC32     ?_107
   \   00002ADC   0x........         DC32     ?_108
   2773                                      case CAL_HUM_TEMPF: //CAL_HUM_TEMPF Values
   2774                                        sprintf( (char *)tempBffr2, "%s	0033		%1.4f		%2.3f\r\n", 
   2775                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   2776                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   2777                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_459: (+1)
   \   00002AE0   0x0038             MOVS     R0,R7
   \   00002AE2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002AE4   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00002AE8   0x4683             MOV      R11,R0
   \   00002AEA   0x0038             MOVS     R0,R7
   \   00002AEC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002AEE   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00002AF2   0x4681             MOV      R9,R0
   \   00002AF4   0x0038             MOVS     R0,R7
   \   00002AF6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002AF8   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00002AFC   0x4682             MOV      R10,R0
   \   00002AFE   0x4658             MOV      R0,R11
   \   00002B00   0x.... 0x....      BL       __aeabi_f2d
   \   00002B04   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00002B08   0x4648             MOV      R0,R9
   \   00002B0A   0x.... 0x....      BL       __aeabi_f2d
   \   00002B0E   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00002B12   0x4652             MOV      R2,R10
   \   00002B14   0xF8DF 0x1DE8      LDR.W    R1,??RoadBrd_ParseString_480
   \   00002B18   0xA80F             ADD      R0,SP,#+60
   \   00002B1A   0x.... 0x....      BL       sprintf
   2778                                        break;
   \   00002B1E   0xE18A             B.N      ??RoadBrd_ParseString_471
   2779                                      case CAL_RGB_RED: //CAL_RGB_RED Values
   2780                                        sprintf( (char *)tempBffr2, "%s	        000D		%1.4f		%2.3f\r\n", 
   2781                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   2782                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   2783                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_458: (+1)
   \   00002B20   0x0038             MOVS     R0,R7
   \   00002B22   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002B24   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00002B28   0x4683             MOV      R11,R0
   \   00002B2A   0x0038             MOVS     R0,R7
   \   00002B2C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002B2E   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00002B32   0x4681             MOV      R9,R0
   \   00002B34   0x0038             MOVS     R0,R7
   \   00002B36   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002B38   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00002B3C   0x4682             MOV      R10,R0
   \   00002B3E   0x4658             MOV      R0,R11
   \   00002B40   0x.... 0x....      BL       __aeabi_f2d
   \   00002B44   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00002B48   0x4648             MOV      R0,R9
   \   00002B4A   0x.... 0x....      BL       __aeabi_f2d
   \   00002B4E   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00002B52   0x4652             MOV      R2,R10
   \   00002B54   0xF8DF 0x1DD8      LDR.W    R1,??RoadBrd_ParseString_481
   \   00002B58   0xA80F             ADD      R0,SP,#+60
   \   00002B5A   0x.... 0x....      BL       sprintf
   2784                                        break;
   \   00002B5E   0xE16A             B.N      ??RoadBrd_ParseString_471
   \                     ??RoadBrd_ParseString_336:
   \   00002B60   0x........         DC32     ?_109
   \   00002B64   0x........         DC32     ?_110
   2785                                      case CAL_RGB_GREEN: //CAL_RGB_GREEN Values
   2786                                        sprintf( (char *)tempBffr2, "%s	000E		%1.4f		%2.3f\r\n", 
   2787                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   2788                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   2789                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_461: (+1)
   \   00002B68   0x0038             MOVS     R0,R7
   \   00002B6A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002B6C   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00002B70   0x4683             MOV      R11,R0
   \   00002B72   0x0038             MOVS     R0,R7
   \   00002B74   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002B76   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00002B7A   0x4681             MOV      R9,R0
   \   00002B7C   0x0038             MOVS     R0,R7
   \   00002B7E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002B80   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00002B84   0x4682             MOV      R10,R0
   \   00002B86   0x4658             MOV      R0,R11
   \   00002B88   0x.... 0x....      BL       __aeabi_f2d
   \   00002B8C   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00002B90   0x4648             MOV      R0,R9
   \   00002B92   0x.... 0x....      BL       __aeabi_f2d
   \   00002B96   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00002B9A   0x4652             MOV      R2,R10
   \   00002B9C   0xF8DF 0x1DB0      LDR.W    R1,??RoadBrd_ParseString_482
   \   00002BA0   0xA80F             ADD      R0,SP,#+60
   \   00002BA2   0x.... 0x....      BL       sprintf
   2790                                        break;
   \   00002BA6   0xE146             B.N      ??RoadBrd_ParseString_471
   2791                                      case CAL_RGB_BLUE: //CAL_RGB_BLUE Values
   2792                                        sprintf( (char *)tempBffr2, "%s	000F		%1.4f		%2.3f\r\n", 
   2793                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   2794                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   2795                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_460: (+1)
   \   00002BA8   0x0038             MOVS     R0,R7
   \   00002BAA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002BAC   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00002BB0   0x4683             MOV      R11,R0
   \   00002BB2   0x0038             MOVS     R0,R7
   \   00002BB4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002BB6   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00002BBA   0x4681             MOV      R9,R0
   \   00002BBC   0x0038             MOVS     R0,R7
   \   00002BBE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002BC0   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00002BC4   0x4682             MOV      R10,R0
   \   00002BC6   0x4658             MOV      R0,R11
   \   00002BC8   0x.... 0x....      BL       __aeabi_f2d
   \   00002BCC   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00002BD0   0x4648             MOV      R0,R9
   \   00002BD2   0x.... 0x....      BL       __aeabi_f2d
   \   00002BD6   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00002BDA   0x4652             MOV      R2,R10
   \   00002BDC   0xF8DF 0x1DC4      LDR.W    R1,??RoadBrd_ParseString_483
   \   00002BE0   0xA80F             ADD      R0,SP,#+60
   \   00002BE2   0x.... 0x....      BL       sprintf
   2796                                        break;
   \   00002BE6   0xE126             B.N      ??RoadBrd_ParseString_471
   2797                                      case CAL_THERM_C: //CAL_THERM_C Values
   2798                                        sprintf( (char *)tempBffr2, "%s	        0017		%1.4f		%2.3f\r\n", 
   2799                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   2800                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   2801                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_463: (+1)
   \   00002BE8   0x0038             MOVS     R0,R7
   \   00002BEA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002BEC   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00002BF0   0x4683             MOV      R11,R0
   \   00002BF2   0x0038             MOVS     R0,R7
   \   00002BF4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002BF6   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00002BFA   0x4681             MOV      R9,R0
   \   00002BFC   0x0038             MOVS     R0,R7
   \   00002BFE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002C00   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00002C04   0x4682             MOV      R10,R0
   \   00002C06   0x4658             MOV      R0,R11
   \   00002C08   0x.... 0x....      BL       __aeabi_f2d
   \   00002C0C   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00002C10   0x4648             MOV      R0,R9
   \   00002C12   0x.... 0x....      BL       __aeabi_f2d
   \   00002C16   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00002C1A   0x4652             MOV      R2,R10
   \   00002C1C   0x.... 0x....      LDR.W    R1,??DataTable3
   \   00002C20   0xA80F             ADD      R0,SP,#+60
   \   00002C22   0x.... 0x....      BL       sprintf
   2802                                        break;
   \   00002C26   0xE106             B.N      ??RoadBrd_ParseString_471
   \                     ??RoadBrd_ParseString_344:
   \   00002C28   0x........         DC32     ?_111
   2803                                      case CAL_ROADT_1C: //CAL_ROADT_1C Values
   2804                                        sprintf( (char *)tempBffr2, "%s	0019		%1.4f		%2.3f\r\n", 
   2805                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   2806                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   2807                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_462: (+1)
   \   00002C2C   0x0038             MOVS     R0,R7
   \   00002C2E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002C30   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00002C34   0x4683             MOV      R11,R0
   \   00002C36   0x0038             MOVS     R0,R7
   \   00002C38   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002C3A   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00002C3E   0x4681             MOV      R9,R0
   \   00002C40   0x0038             MOVS     R0,R7
   \   00002C42   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002C44   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00002C48   0x4682             MOV      R10,R0
   \   00002C4A   0x4658             MOV      R0,R11
   \   00002C4C   0x.... 0x....      BL       __aeabi_f2d
   \   00002C50   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00002C54   0x4648             MOV      R0,R9
   \   00002C56   0x.... 0x....      BL       __aeabi_f2d
   \   00002C5A   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00002C5E   0x4652             MOV      R2,R10
   \   00002C60   0x.... 0x....      LDR.W    R1,??DataTable3_1
   \   00002C64   0xA80F             ADD      R0,SP,#+60
   \   00002C66   0x.... 0x....      BL       sprintf
   2808                                        break;
   \   00002C6A   0xE0E4             B.N      ??RoadBrd_ParseString_471
   2809                                      case CAL_ROADT_2C: //CAL_ROADT_2C Values
   2810                                        sprintf( (char *)tempBffr2, "%s	001B		%1.4f		%2.3f\r\n", 
   2811                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   2812                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   2813                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_465: (+1)
   \   00002C6C   0x0038             MOVS     R0,R7
   \   00002C6E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002C70   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00002C74   0x4683             MOV      R11,R0
   \   00002C76   0x0038             MOVS     R0,R7
   \   00002C78   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002C7A   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00002C7E   0x4681             MOV      R9,R0
   \   00002C80   0x0038             MOVS     R0,R7
   \   00002C82   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002C84   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00002C88   0x4682             MOV      R10,R0
   \   00002C8A   0x4658             MOV      R0,R11
   \   00002C8C   0x.... 0x....      BL       __aeabi_f2d
   \   00002C90   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00002C94   0x4648             MOV      R0,R9
   \   00002C96   0x.... 0x....      BL       __aeabi_f2d
   \   00002C9A   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00002C9E   0x4652             MOV      R2,R10
   \   00002CA0   0x.... 0x....      LDR.W    R1,??DataTable3_2
   \   00002CA4   0xA80F             ADD      R0,SP,#+60
   \   00002CA6   0x.... 0x....      BL       sprintf
   2814                                        break;
   \   00002CAA   0xE0C4             B.N      ??RoadBrd_ParseString_471
   \                     ??RoadBrd_ParseString_350:
   \   00002CAC   0x........         DC32     ?_112
   \   00002CB0   0x........         DC32     ?_113
   2815                                      case CAL_ROADT_3C: //CAL_ROADT_3C Values
   2816                                        sprintf( (char *)tempBffr2, "%s	001D		%1.4f		%2.3f\r\n", 
   2817                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   2818                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   2819                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_464: (+1)
   \   00002CB4   0x0038             MOVS     R0,R7
   \   00002CB6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002CB8   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00002CBC   0x4683             MOV      R11,R0
   \   00002CBE   0x0038             MOVS     R0,R7
   \   00002CC0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002CC2   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00002CC6   0x4681             MOV      R9,R0
   \   00002CC8   0x0038             MOVS     R0,R7
   \   00002CCA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002CCC   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00002CD0   0x4682             MOV      R10,R0
   \   00002CD2   0x4658             MOV      R0,R11
   \   00002CD4   0x.... 0x....      BL       __aeabi_f2d
   \   00002CD8   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00002CDC   0x4648             MOV      R0,R9
   \   00002CDE   0x.... 0x....      BL       __aeabi_f2d
   \   00002CE2   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00002CE6   0x4652             MOV      R2,R10
   \   00002CE8   0x.... 0x....      LDR.W    R1,??DataTable3_3
   \   00002CEC   0xA80F             ADD      R0,SP,#+60
   \   00002CEE   0x.... 0x....      BL       sprintf
   2820                                        break;
   \   00002CF2   0xE0A0             B.N      ??RoadBrd_ParseString_471
   2821                                      case CAL_ROADT_4C: //CAL_ROADT_4C Values
   2822                                        sprintf( (char *)tempBffr2, "%s	001F		%1.4f		%2.3f\r\n", 
   2823                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   2824                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   2825                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_467: (+1)
   \   00002CF4   0x0038             MOVS     R0,R7
   \   00002CF6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002CF8   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00002CFC   0x4683             MOV      R11,R0
   \   00002CFE   0x0038             MOVS     R0,R7
   \   00002D00   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002D02   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00002D06   0x4681             MOV      R9,R0
   \   00002D08   0x0038             MOVS     R0,R7
   \   00002D0A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002D0C   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00002D10   0x4682             MOV      R10,R0
   \   00002D12   0x4658             MOV      R0,R11
   \   00002D14   0x.... 0x....      BL       __aeabi_f2d
   \   00002D18   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00002D1C   0x4648             MOV      R0,R9
   \   00002D1E   0x.... 0x....      BL       __aeabi_f2d
   \   00002D22   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00002D26   0x4652             MOV      R2,R10
   \   00002D28   0x.... 0x....      LDR.W    R1,??DataTable3_4
   \   00002D2C   0xA80F             ADD      R0,SP,#+60
   \   00002D2E   0x.... 0x....      BL       sprintf
   2826                                        break;
   \   00002D32   0xE080             B.N      ??RoadBrd_ParseString_471
   \                     ??RoadBrd_ParseString_355:
   \   00002D34   0x........         DC32     ?_114
   2827                                      case CAL_ROADT_5C: //CAL_ROADT_5C Values
   2828                                        sprintf( (char *)tempBffr2, "%s	0021		%1.4f		%2.3f\r\n", 
   2829                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   2830                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   2831                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_466: (+1)
   \   00002D38   0x0038             MOVS     R0,R7
   \   00002D3A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002D3C   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00002D40   0x4683             MOV      R11,R0
   \   00002D42   0x0038             MOVS     R0,R7
   \   00002D44   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002D46   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00002D4A   0x4681             MOV      R9,R0
   \   00002D4C   0x0038             MOVS     R0,R7
   \   00002D4E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002D50   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00002D54   0x4682             MOV      R10,R0
   \   00002D56   0x4658             MOV      R0,R11
   \   00002D58   0x.... 0x....      BL       __aeabi_f2d
   \   00002D5C   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00002D60   0x4648             MOV      R0,R9
   \   00002D62   0x.... 0x....      BL       __aeabi_f2d
   \   00002D66   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00002D6A   0x4652             MOV      R2,R10
   \   00002D6C   0x.... 0x....      LDR.W    R1,??DataTable3_5
   \   00002D70   0xA80F             ADD      R0,SP,#+60
   \   00002D72   0x.... 0x....      BL       sprintf
   2832                                        break;
   \   00002D76   0xE05E             B.N      ??RoadBrd_ParseString_471
   2833                                      case CAL_ROADT_6C: //CAL_ROADT_6C Values
   2834                                        sprintf( (char *)tempBffr2, "%s	0023		%1.4f		%2.3f\r\n", 
   2835                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   2836                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   2837                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_469: (+1)
   \   00002D78   0x0038             MOVS     R0,R7
   \   00002D7A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002D7C   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00002D80   0x4683             MOV      R11,R0
   \   00002D82   0x0038             MOVS     R0,R7
   \   00002D84   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002D86   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00002D8A   0x4681             MOV      R9,R0
   \   00002D8C   0x0038             MOVS     R0,R7
   \   00002D8E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002D90   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00002D94   0x4682             MOV      R10,R0
   \   00002D96   0x4658             MOV      R0,R11
   \   00002D98   0x.... 0x....      BL       __aeabi_f2d
   \   00002D9C   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00002DA0   0x4648             MOV      R0,R9
   \   00002DA2   0x.... 0x....      BL       __aeabi_f2d
   \   00002DA6   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00002DAA   0x4652             MOV      R2,R10
   \   00002DAC   0x.... 0x....      LDR.W    R1,??DataTable3_6
   \   00002DB0   0xA80F             ADD      R0,SP,#+60
   \   00002DB2   0x.... 0x....      BL       sprintf
   2838                                        break;
   \   00002DB6   0xE03E             B.N      ??RoadBrd_ParseString_471
   2839                                      case CAL_ROADT_7C: //CAL_ROADT_7C Values
   2840                                        sprintf( (char *)tempBffr2, "%s	0025		%1.4f		%2.3f\r\n", 
   2841                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   2842                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   2843                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_468: (+1)
   \   00002DB8   0x0038             MOVS     R0,R7
   \   00002DBA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002DBC   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00002DC0   0x4683             MOV      R11,R0
   \   00002DC2   0x0038             MOVS     R0,R7
   \   00002DC4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002DC6   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00002DCA   0x4681             MOV      R9,R0
   \   00002DCC   0x0038             MOVS     R0,R7
   \   00002DCE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002DD0   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00002DD4   0x4682             MOV      R10,R0
   \   00002DD6   0x4658             MOV      R0,R11
   \   00002DD8   0x.... 0x....      BL       __aeabi_f2d
   \   00002DDC   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00002DE0   0x4648             MOV      R0,R9
   \   00002DE2   0x.... 0x....      BL       __aeabi_f2d
   \   00002DE6   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00002DEA   0x4652             MOV      R2,R10
   \   00002DEC   0x.... 0x....      LDR.W    R1,??DataTable3_7
   \   00002DF0   0xA80F             ADD      R0,SP,#+60
   \   00002DF2   0x.... 0x....      BL       sprintf
   2844                                        break;
   \   00002DF6   0xE01E             B.N      ??RoadBrd_ParseString_471
   2845                                      case CAL_ROADT_8C: //CAL_ROADT_8C Values
   2846                                        sprintf( (char *)tempBffr2, "%s	0027		%1.4f		%2.3f\r\n", 
   2847                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   2848                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   2849                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_470: (+1)
   \   00002DF8   0x0038             MOVS     R0,R7
   \   00002DFA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002DFC   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00002E00   0x4683             MOV      R11,R0
   \   00002E02   0x0038             MOVS     R0,R7
   \   00002E04   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002E06   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00002E0A   0x4681             MOV      R9,R0
   \   00002E0C   0x0038             MOVS     R0,R7
   \   00002E0E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002E10   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00002E14   0x4682             MOV      R10,R0
   \   00002E16   0x4658             MOV      R0,R11
   \   00002E18   0x.... 0x....      BL       __aeabi_f2d
   \   00002E1C   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00002E20   0x4648             MOV      R0,R9
   \   00002E22   0x.... 0x....      BL       __aeabi_f2d
   \   00002E26   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00002E2A   0x4652             MOV      R2,R10
   \   00002E2C   0x.... 0x....      LDR.W    R1,??DataTable3_8
   \   00002E30   0xA80F             ADD      R0,SP,#+60
   \   00002E32   0x.... 0x....      BL       sprintf
   2850                                        break;
   2851                                    } // EndSwitch(x)
   2852                                    // Now Print String.
   2853          #ifdef NUCLEO
   2854                                    Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   2855          #else
   2856                                    Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \                     ??RoadBrd_ParseString_471: (+1)
   \   00002E36   0xA90F             ADD      R1,SP,#+60
   \   00002E38   0x2000             MOVS     R0,#+0
   \   00002E3A   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00002E3E   0x0006             MOVS     R6,R0
   2857          #endif
   2858                                    if (Status != HAL_OK)
   \   00002E40   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002E42   0x2E00             CMP      R6,#+0
   \   00002E44   0xD006             BEQ.N    ??RoadBrd_ParseString_484
   2859                                      return Status;
   \   00002E46   0x0030             MOVS     R0,R6
   \   00002E48   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002E4A   0xF000 0xBDA5      B.W      ??RoadBrd_ParseString_4
   \   00002E4E   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_366:
   \   00002E50   0x........         DC32     ?_24
   2860                                  } // EndFor(x=0; x<CAL_LAST_VALUE; x++)
   \                     ??RoadBrd_ParseString_484: (+1)
   \   00002E54   0x1C7F             ADDS     R7,R7,#+1
   \   00002E56   0xE4D8             B.N      ??RoadBrd_ParseString_447
   2861                                  sprintf( (char *)tempBffr2, "\r\n     COMPLETE.\r\n" );
   \                     ??RoadBrd_ParseString_448: (+1)
   \   00002E58   0x.... 0x....      LDR.W    R1,??DataTable4
   \   00002E5C   0xA80F             ADD      R0,SP,#+60
   \   00002E5E   0x.... 0x....      BL       sprintf
   2862                                  break;
   \   00002E62   0xE06F             B.N      ??RoadBrd_ParseString_373
   2863                                  //------------------ TCT Command: Calibration Set Time Command
   2864                                case 'T':
   2865                                  // Step 1. Validate format.
   2866                                  if(tempBffr[3]!=':')
   \                     ??RoadBrd_ParseString_377: (+1)
   \   00002E64   0x78E0             LDRB     R0,[R4, #+3]
   \   00002E66   0x283A             CMP      R0,#+58
   \   00002E68   0xD013             BEQ.N    ??RoadBrd_ParseString_485
   2867                                  {
   2868                                    // Is this a BLE Operation?
   2869                                    if ( BLE_Flag )
   \   00002E6A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002E6C   0x2D00             CMP      R5,#+0
   \   00002E6E   0xD00A             BEQ.N    ??RoadBrd_ParseString_486
   2870                                    {
   2871                                      // Yes...Build and Send BLE Response NOW.
   2872                                      strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00002E70   0x.... 0x....      LDR.W    R1,??DataTable4_1
   \   00002E74   0xA80F             ADD      R0,SP,#+60
   \   00002E76   0x.... 0x....      BL       strcpy
   2873                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002E7A   0xA80F             ADD      R0,SP,#+60
   \   00002E7C   0x.... 0x....      BL       strlen
   \   00002E80   0xA90F             ADD      R1,SP,#+60
   \   00002E82   0x.... 0x....      BL       BGM111_Transmit
   2874                                    }
   2875                                    
   2876                                    strcpy( (char *)tempBffr2, "TCT SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_486: (+1)
   \   00002E86   0x.... 0x....      LDR.W    R1,??DataTable4_2
   \   00002E8A   0xA80F             ADD      R0,SP,#+60
   \   00002E8C   0x.... 0x....      BL       strcpy
   \   00002E90   0xE03A             B.N      ??RoadBrd_ParseString_487
   2877                                  } // Endif (tempBffr[3]!=':')
   2878                                  else
   2879                                  {
   2880                                    // Is this a BLE Operation?
   2881                                    if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_485: (+1)
   \   00002E92   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002E94   0x2D00             CMP      R5,#+0
   \   00002E96   0xD00A             BEQ.N    ??RoadBrd_ParseString_488
   2882                                    {
   2883                                      // Yes...Build and Send BLE Response NOW.
   2884                                      strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00002E98   0x.... 0x....      LDR.W    R1,??DataTable4_1
   \   00002E9C   0xA80F             ADD      R0,SP,#+60
   \   00002E9E   0x.... 0x....      BL       strcpy
   2885                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002EA2   0xA80F             ADD      R0,SP,#+60
   \   00002EA4   0x.... 0x....      BL       strlen
   \   00002EA8   0xA90F             ADD      R1,SP,#+60
   \   00002EAA   0x.... 0x....      BL       BGM111_Transmit
   2886                                    }
   2887                                    
   2888                                    // 2. Verify if remaining string is digits
   2889                                    if (Size <= 4)
   \                     ??RoadBrd_ParseString_488: (+1)
   \   00002EAE   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00002EB2   0xF1B8 0x0F05      CMP      R8,#+5
   \   00002EB6   0xDA11             BGE.N    ??RoadBrd_ParseString_489
   2890                                    {
   2891                                      strcpy( (char *)tempBffr2, "TCT SYNTAX ERROR: Bad Parameter.\r\n");
   \   00002EB8   0x.... 0x....      LDR.W    R1,??DataTable4_3
   \   00002EBC   0xA80F             ADD      R0,SP,#+60
   \   00002EBE   0x.... 0x....      BL       strcpy
   \   00002EC2   0xE021             B.N      ??RoadBrd_ParseString_487
   \                     ??RoadBrd_ParseString_371:
   \   00002EC4   0x........         DC32     ?_115
   \   00002EC8   0x........         DC32     ?_116
   \   00002ECC   0x........         DC32     ?_117
   \   00002ED0   0x........         DC32     ?_118
   \   00002ED4   0x........         DC32     ?_119
   \   00002ED8   0x........         DC32     ?_120
   2892                                    } // EndIf (Size > 4)
   2893                                    else
   2894                                    {
   2895                                      // 3. Grab remaining string and Save it.
   2896                                      tempPstr = &tempBffr[4];
   \                     ??RoadBrd_ParseString_489: (+1)
   \   00002EDC   0x1D20             ADDS     R0,R4,#+4
   \   00002EDE   0x9030             STR      R0,[SP, #+192]
   2897                                      strcpy(tempstr, tempPstr);
   \   00002EE0   0x9930             LDR      R1,[SP, #+192]
   \   00002EE2   0xA848             ADD      R0,SP,#+288
   \   00002EE4   0x.... 0x....      BL       strcpy
   2898                                      // NOW...Save it.
   2899                                      Status = RoadBrd_CAL_Set_TimeString( (uint8_t *)tempPstr );
   \   00002EE8   0x9830             LDR      R0,[SP, #+192]
   \   00002EEA   0x.... 0x....      BL       RoadBrd_CAL_Set_TimeString
   \   00002EEE   0x0006             MOVS     R6,R0
   2900                                      if (Status != HAL_OK)
   \   00002EF0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002EF2   0x2E00             CMP      R6,#+0
   \   00002EF4   0xD003             BEQ.N    ??RoadBrd_ParseString_490
   2901                                        return Status;
   \   00002EF6   0x0030             MOVS     R0,R6
   \   00002EF8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002EFA   0xF000 0xBD4D      B.W      ??RoadBrd_ParseString_4
   2902                                      sprintf( (char *)tempBffr2, "\r\n     COMPLETE.\r\n" );
   \                     ??RoadBrd_ParseString_490: (+1)
   \   00002EFE   0x.... 0x....      LDR.W    R1,??DataTable4
   \   00002F02   0xA80F             ADD      R0,SP,#+60
   \   00002F04   0x.... 0x....      BL       sprintf
   2903                                    } // EndElse (Size > 4)
   2904                                  } // EndElse (tempBffr[3]!=':')
   2905                                  break;
   \                     ??RoadBrd_ParseString_487: (+1)
   \   00002F08   0xE01C             B.N      ??RoadBrd_ParseString_373
   2906                                  //------------------ TCI Command: Calibration Initialize Cal Table(Reset)
   2907                                case 'I':
   2908                                  Status = RoadBrd_CAL_InitializeFrmFlash();
   \                     ??RoadBrd_ParseString_374: (+1)
   \   00002F0A   0x.... 0x....      BL       RoadBrd_CAL_InitializeFrmFlash
   \   00002F0E   0x0006             MOVS     R6,R0
   2909                                  // Is this a BLE Operation?
   2910                                  if ( BLE_Flag )
   \   00002F10   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002F12   0x2D00             CMP      R5,#+0
   \   00002F14   0xD00A             BEQ.N    ??RoadBrd_ParseString_491
   2911                                  {
   2912                                    // Yes...Build and Send BLE Response NOW.
   2913                                    strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00002F16   0x.... 0x....      LDR.W    R1,??DataTable4_1
   \   00002F1A   0xA80F             ADD      R0,SP,#+60
   \   00002F1C   0x.... 0x....      BL       strcpy
   2914                                    BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002F20   0xA80F             ADD      R0,SP,#+60
   \   00002F22   0x.... 0x....      BL       strlen
   \   00002F26   0xA90F             ADD      R1,SP,#+60
   \   00002F28   0x.... 0x....      BL       BGM111_Transmit
   2915                                  }
   2916                                  
   2917                                  if (Status != HAL_OK)
   \                     ??RoadBrd_ParseString_491: (+1)
   \   00002F2C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002F2E   0x2E00             CMP      R6,#+0
   \   00002F30   0xD003             BEQ.N    ??RoadBrd_ParseString_492
   2918                                    return Status;
   \   00002F32   0x0030             MOVS     R0,R6
   \   00002F34   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002F36   0xF000 0xBD2F      B.W      ??RoadBrd_ParseString_4
   2919                                  sprintf( (char *)tempBffr2, "\r\n     COMPLETE.\r\n" );
   \                     ??RoadBrd_ParseString_492: (+1)
   \   00002F3A   0x.... 0x....      LDR.W    R1,??DataTable4
   \   00002F3E   0xA80F             ADD      R0,SP,#+60
   \   00002F40   0x.... 0x....      BL       sprintf
   2920                                  break;
   2921                                } //EndSwitch
   2922                              } //EndElse (Size == 2)
   2923                              break;
   \                     ??RoadBrd_ParseString_373: (+1)
   \   00002F44   0xF000 0xBC9C      B.W      ??RoadBrd_ParseString_288
   2924          //++++++++++++++++++++++++++++++++++++++++++  Dump Driver State.
   2925                            case 'D':
   2926                              // Read Driver Status
   2927                              DriverStatus = Get_DriverStatus();
   \                     ??RoadBrd_ParseString_290: (+1)
   \   00002F48   0x.... 0x....      BL       Get_DriverStatus
   \   00002F4C   0xF8AD 0x00CE      STRH     R0,[SP, #+206]
   2928                              // Is this a BLE Operation?
   2929                              if ( BLE_Flag )
   \   00002F50   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002F52   0x2D00             CMP      R5,#+0
   \   00002F54   0xD00C             BEQ.N    ??RoadBrd_ParseString_493
   2930                              {
   2931                                // Yes...Build and Send BLE Response NOW.
   2932                                sprintf( (char *)tempBffr2, "<STATUS>ST_DRIVER:%04x</STATUS>", DriverStatus );
   \   00002F56   0xF8BD 0x20CE      LDRH     R2,[SP, #+206]
   \   00002F5A   0x.... 0x....      LDR.W    R1,??DataTable4_4
   \   00002F5E   0xA80F             ADD      R0,SP,#+60
   \   00002F60   0x.... 0x....      BL       sprintf
   2933                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002F64   0xA80F             ADD      R0,SP,#+60
   \   00002F66   0x.... 0x....      BL       strlen
   \   00002F6A   0xA90F             ADD      R1,SP,#+60
   \   00002F6C   0x.... 0x....      BL       BGM111_Transmit
   2934                              }
   2935                              
   2936                              sprintf( (char *)tempBffr2, "Driver Status: %04x\r\n", DriverStatus );
   \                     ??RoadBrd_ParseString_493: (+1)
   \   00002F70   0xF8BD 0x20CE      LDRH     R2,[SP, #+206]
   \   00002F74   0x.... 0x....      LDR.W    R1,??DataTable4_5
   \   00002F78   0xA80F             ADD      R0,SP,#+60
   \   00002F7A   0x.... 0x....      BL       sprintf
   2937                              break;
   \   00002F7E   0xF000 0xBC7F      B.W      ??RoadBrd_ParseString_288
   \   00002F82   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_380:
   \   00002F84   0x........         DC32     ?_121
   \   00002F88   0x........         DC32     ?_122
   2938          //++++++++++++++++++++++++++++++++++++++++++  RESET Micro.
   2939                            case 'R':
   2940                              // RESET
   2941                              // Is this a BLE Operation?
   2942                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_296: (+1)
   \   00002F8C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002F8E   0x2D00             CMP      R5,#+0
   \   00002F90   0xD00D             BEQ.N    ??RoadBrd_ParseString_494
   2943                              {
   2944                                // Yes...Build and Send BLE Response NOW.
   2945                                strcpy( (char *)tempBffr2, "<STATUS>ST_RESET_ACK</STATUS>");
   \   00002F92   0x.... 0x....      LDR.W    R1,??DataTable4_6
   \   00002F96   0xA80F             ADD      R0,SP,#+60
   \   00002F98   0x.... 0x....      BL       strcpy
   2946                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002F9C   0xA80F             ADD      R0,SP,#+60
   \   00002F9E   0x.... 0x....      BL       strlen
   \   00002FA2   0xA90F             ADD      R1,SP,#+60
   \   00002FA4   0x.... 0x....      BL       BGM111_Transmit
   2947                                HAL_Delay(100);           // Wait 100ms
   \   00002FA8   0x2064             MOVS     R0,#+100
   \   00002FAA   0x.... 0x....      BL       HAL_Delay
   2948                              }
   2949                              HAL_NVIC_SystemReset();
   \                     ??RoadBrd_ParseString_494: (+1)
   \   00002FAE   0x.... 0x....      BL       HAL_NVIC_SystemReset
   2950                              sprintf( (char *)tempBffr2, "RESET CALLED BUT NO RESPONSE!!\r\n" );
   \   00002FB2   0x.... 0x....      LDR.W    R1,??DataTable4_7
   \   00002FB6   0xA80F             ADD      R0,SP,#+60
   \   00002FB8   0x.... 0x....      BL       sprintf
   2951                              break;
   \   00002FBC   0xF000 0xBC60      B.W      ??RoadBrd_ParseString_288
   \                     ??RoadBrd_ParseString_384:
   \   00002FC0   0x........         DC32     ?_123
   2952          //++++++++++++++++++++++++++++++++++++++++++  Key Flash Variable Commands.
   2953                            case 'K':
   2954                              // Key Flash Variable Commands.
   2955                              // Test Size to make sure we have enough Characters for this operation
   2956                              Status = HAL_OK;
   \                     ??RoadBrd_ParseString_293: (+1)
   \   00002FC4   0x2000             MOVS     R0,#+0
   \   00002FC6   0x0006             MOVS     R6,R0
   2957                              if (Size < 4)
   \   00002FC8   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00002FCC   0xF1B8 0x0F04      CMP      R8,#+4
   \   00002FD0   0xDA1E             BGE.N    ??RoadBrd_ParseString_495
   2958                              {
   2959                                // Is this a BLE Operation?
   2960                                if ( BLE_Flag )
   \   00002FD2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002FD4   0x2D00             CMP      R5,#+0
   \   00002FD6   0xD00A             BEQ.N    ??RoadBrd_ParseString_496
   2961                                {
   2962                                  // Yes...Build and Send BLE Response NOW.
   2963                                  strcpy( (char *)tempBffr2, "<STATUS>CMD_TK_SYNTAX</STATUS>");
   \   00002FD8   0x.... 0x....      LDR.W    R1,??DataTable4_8
   \   00002FDC   0xA80F             ADD      R0,SP,#+60
   \   00002FDE   0x.... 0x....      BL       strcpy
   2964                                  BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002FE2   0xA80F             ADD      R0,SP,#+60
   \   00002FE4   0x.... 0x....      BL       strlen
   \   00002FE8   0xA90F             ADD      R1,SP,#+60
   \   00002FEA   0x.... 0x....      BL       BGM111_Transmit
   2965                                }
   2966                                strcpy( (char *)tempBffr2, "TK SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_496: (+1)
   \   00002FEE   0x.... 0x....      LDR.W    R1,??DataTable4_9
   \   00002FF2   0xA80F             ADD      R0,SP,#+60
   \   00002FF4   0x.... 0x....      BL       strcpy
   \   00002FF8   0xE34D             B.N      ??RoadBrd_ParseString_497
   \   00002FFA   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_386:
   \   00002FFC   0x........         DC32     ?_124
   \   00003000   0x........         DC32     ?_125
   \   00003004   0x........         DC32     ?_126
   \   00003008   0x........         DC32     ?_127
   \   0000300C   0x........         DC32     ?_128
   2967                              }
   2968                              else
   2969                              {
   2970                                switch( tempBffr[2] )
   \                     ??RoadBrd_ParseString_495: (+1)
   \   00003010   0x78A0             LDRB     R0,[R4, #+2]
   \   00003012   0x2852             CMP      R0,#+82
   \   00003014   0xF000 0x8274      BEQ.W    ??RoadBrd_ParseString_498
   \   00003018   0x2853             CMP      R0,#+83
   \   0000301A   0xF040 0x8329      BNE.W    ??RoadBrd_ParseString_499
   2971                                {
   2972          //------------------
   2973                                  case 'S':
   2974                                    //Key Flash Variable Set Command.
   2975                                    switch( tempBffr[3] )
   \                     ??RoadBrd_ParseString_500: (+1)
   \   0000301E   0x78E0             LDRB     R0,[R4, #+3]
   \   00003020   0x2842             CMP      R0,#+66
   \   00003022   0xF000 0x81CC      BEQ.W    ??RoadBrd_ParseString_501
   \   00003026   0x2852             CMP      R0,#+82
   \   00003028   0xD006             BEQ.N    ??RoadBrd_ParseString_502
   \   0000302A   0x2853             CMP      R0,#+83
   \   0000302C   0xF000 0x809D      BEQ.W    ??RoadBrd_ParseString_503
   \   00003030   0x2854             CMP      R0,#+84
   \   00003032   0xF000 0x812D      BEQ.W    ??RoadBrd_ParseString_504
   \   00003036   0xE25D             B.N      ??RoadBrd_ParseString_505
   2976                                    {
   2977          //------------------
   2978                                      case 'R':
   2979                                        //Key Flash Variable Set Road Sound Sample Rate Command.
   2980                                        // Step 1. Validate format.
   2981                                        if(tempBffr[4]!=':')
   \                     ??RoadBrd_ParseString_502: (+1)
   \   00003038   0x7920             LDRB     R0,[R4, #+4]
   \   0000303A   0x283A             CMP      R0,#+58
   \   0000303C   0xD020             BEQ.N    ??RoadBrd_ParseString_506
   2982                                        {
   2983                                          // Is this a BLE Operation?
   2984                                          if ( BLE_Flag )
   \   0000303E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003040   0x2D00             CMP      R5,#+0
   \   00003042   0xD00A             BEQ.N    ??RoadBrd_ParseString_507
   2985                                          {
   2986                                            // Yes...Build and Send BLE Response NOW.
   2987                                            strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSR_SYNTAX</STATUS>");
   \   00003044   0x.... 0x....      LDR.W    R1,??DataTable4_10
   \   00003048   0xA80F             ADD      R0,SP,#+60
   \   0000304A   0x.... 0x....      BL       strcpy
   2988                                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000304E   0xA80F             ADD      R0,SP,#+60
   \   00003050   0x.... 0x....      BL       strlen
   \   00003054   0xA90F             ADD      R1,SP,#+60
   \   00003056   0x.... 0x....      BL       BGM111_Transmit
   2989                                          }
   2990                                          strcpy( (char *)tempBffr2, "TKSR SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_507: (+1)
   \   0000305A   0x.... 0x....      LDR.W    R1,??DataTable4_11
   \   0000305E   0xA80F             ADD      R0,SP,#+60
   \   00003060   0x.... 0x....      BL       strcpy
   \   00003064   0xE080             B.N      ??RoadBrd_ParseString_508
   \   00003066   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_392:
   \   00003068   0x........         DC32     ?_129
   \   0000306C   0x........         DC32     ?_130
   \   00003070   0x........         DC32     ?_131
   \   00003074   0x........         DC32     ?_132
   \   00003078   0x........         DC32     ?_133
   \   0000307C   0x........         DC32     ?_134
   2991                                        } // Endif (tempBffr[4]!=':')
   2992                                        else
   2993                                        {
   2994                                          // 2. Verify if remaining string is digits
   2995                                          if (Size > 5)
   \                     ??RoadBrd_ParseString_506: (+1)
   \   00003080   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00003084   0xF1B8 0x0F06      CMP      R8,#+6
   \   00003088   0xDB10             BLT.N    ??RoadBrd_ParseString_509
   2996                                          {
   2997                                            flag = 1;
   \   0000308A   0x2001             MOVS     R0,#+1
   \   0000308C   0x902E             STR      R0,[SP, #+184]
   2998                                            for (x=5; x< Size; x++)
   \   0000308E   0x2005             MOVS     R0,#+5
   \   00003090   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_510: (+1)
   \   00003092   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00003096   0x4547             CMP      R7,R8
   \   00003098   0xDA0A             BGE.N    ??RoadBrd_ParseString_511
   2999                                            {
   3000                                              if (isdigit(tempBffr[x]) == 0)
   \   0000309A   0x5DE0             LDRB     R0,[R4, R7]
   \   0000309C   0x.... 0x....      BL       isdigit
   \   000030A0   0x2800             CMP      R0,#+0
   \   000030A2   0xD101             BNE.N    ??RoadBrd_ParseString_512
   3001                                                flag = 0;
   \   000030A4   0x2000             MOVS     R0,#+0
   \   000030A6   0x902E             STR      R0,[SP, #+184]
   3002                                            }
   \                     ??RoadBrd_ParseString_512: (+1)
   \   000030A8   0x1C7F             ADDS     R7,R7,#+1
   \   000030AA   0xE7F2             B.N      ??RoadBrd_ParseString_510
   3003                                          } // EndIf (Size > 5)
   3004                                          else
   3005                                            flag = 0;
   \                     ??RoadBrd_ParseString_509: (+1)
   \   000030AC   0x2000             MOVS     R0,#+0
   \   000030AE   0x902E             STR      R0,[SP, #+184]
   3006                                          if (flag == 0)
   \                     ??RoadBrd_ParseString_511: (+1)
   \   000030B0   0x982E             LDR      R0,[SP, #+184]
   \   000030B2   0x2800             CMP      R0,#+0
   \   000030B4   0xD113             BNE.N    ??RoadBrd_ParseString_513
   3007                                          {
   3008                                            // Is this a BLE Operation?
   3009                                            if ( BLE_Flag )
   \   000030B6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000030B8   0x2D00             CMP      R5,#+0
   \   000030BA   0xD00A             BEQ.N    ??RoadBrd_ParseString_514
   3010                                            {
   3011                                              // Yes...Build and Send BLE Response NOW.
   3012                                              strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSR_BADPARAM</STATUS>");
   \   000030BC   0x.... 0x....      LDR.W    R1,??DataTable4_12
   \   000030C0   0xA80F             ADD      R0,SP,#+60
   \   000030C2   0x.... 0x....      BL       strcpy
   3013                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000030C6   0xA80F             ADD      R0,SP,#+60
   \   000030C8   0x.... 0x....      BL       strlen
   \   000030CC   0xA90F             ADD      R1,SP,#+60
   \   000030CE   0x.... 0x....      BL       BGM111_Transmit
   3014                                            }
   3015                                            strcpy( (char *)tempBffr2, "TKSR SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_514: (+1)
   \   000030D2   0x.... 0x....      LDR.W    R1,??DataTable4_13
   \   000030D6   0xA80F             ADD      R0,SP,#+60
   \   000030D8   0x.... 0x....      BL       strcpy
   \   000030DC   0xE044             B.N      ??RoadBrd_ParseString_508
   3016                                          }
   3017                                          else
   3018                                          {
   3019                                            // 3. Grab remaining string and convert to integer.
   3020                                            tempPstr = &tempBffr[5];
   \                     ??RoadBrd_ParseString_513: (+1)
   \   000030DE   0x1D60             ADDS     R0,R4,#+5
   \   000030E0   0x9030             STR      R0,[SP, #+192]
   3021                                            strcpy(tempstr, tempPstr);
   \   000030E2   0x9930             LDR      R1,[SP, #+192]
   \   000030E4   0xA848             ADD      R0,SP,#+288
   \   000030E6   0x.... 0x....      BL       strcpy
   3022                                            new_value = atoi( tempstr );
   \   000030EA   0xA848             ADD      R0,SP,#+288
   \   000030EC   0x.... 0x....      BL       atoi
   \   000030F0   0x902F             STR      R0,[SP, #+188]
   3023                                            if((new_value > 9999) ||
   3024                                               (new_value < 0))
   \   000030F2   0x982F             LDR      R0,[SP, #+188]
   \   000030F4   0xF242 0x7110      MOVW     R1,#+10000
   \   000030F8   0x4288             CMP      R0,R1
   \   000030FA   0xDA02             BGE.N    ??RoadBrd_ParseString_515
   \   000030FC   0x982F             LDR      R0,[SP, #+188]
   \   000030FE   0x2800             CMP      R0,#+0
   \   00003100   0xD51C             BPL.N    ??RoadBrd_ParseString_516
   3025                                            {
   3026                                              // Is this a BLE Operation?
   3027                                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_515: (+1)
   \   00003102   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003104   0x2D00             CMP      R5,#+0
   \   00003106   0xD00A             BEQ.N    ??RoadBrd_ParseString_517
   3028                                              {
   3029                                                // Yes...Build and Send BLE Response NOW.
   3030                                                strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSR_BADPARAM</STATUS>");
   \   00003108   0x.... 0x....      LDR.W    R1,??DataTable4_12
   \   0000310C   0xA80F             ADD      R0,SP,#+60
   \   0000310E   0x.... 0x....      BL       strcpy
   3031                                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003112   0xA80F             ADD      R0,SP,#+60
   \   00003114   0x.... 0x....      BL       strlen
   \   00003118   0xA90F             ADD      R1,SP,#+60
   \   0000311A   0x.... 0x....      BL       BGM111_Transmit
   3032                                              }
   3033                                              strcpy( (char *)tempBffr2, "TKSR SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_517: (+1)
   \   0000311E   0x.... 0x....      LDR.W    R1,??DataTable4_13
   \   00003122   0xA80F             ADD      R0,SP,#+60
   \   00003124   0x.... 0x....      BL       strcpy
   \   00003128   0xE01E             B.N      ??RoadBrd_ParseString_508
   \   0000312A   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_399:
   \   0000312C   0x........         DC32     ?_135
   \   00003130   0x........         DC32     ?_136
   \   00003134   0x........         DC32     ?_137
   \   00003138   0x........         DC32     ?_138
   3034                                            }
   3035                                            else
   3036                                            {
   3037                                              // Time to set new Road Sound Sample Rate.
   3038                                              RoadBrd_Set_RdSndTickCnt( new_value );
   \                     ??RoadBrd_ParseString_516: (+1)
   \   0000313C   0x982F             LDR      R0,[SP, #+188]
   \   0000313E   0x.... 0x....      BL       RoadBrd_Set_RdSndTickCnt
   3039                                              // NOW, Build Data String..
   3040                                              // Is this a BLE Operation?
   3041                                              if ( BLE_Flag )
   \   00003142   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003144   0x2D00             CMP      R5,#+0
   \   00003146   0xD00A             BEQ.N    ??RoadBrd_ParseString_518
   3042                                              {
   3043                                                // Yes...Build and Send BLE Response NOW.
   3044                                                strcpy( (char *)tempBffr2, "<STATUS>ST_TKSR_ACK</STATUS>");
   \   00003148   0x.... 0x....      LDR.W    R1,??DataTable4_14
   \   0000314C   0xA80F             ADD      R0,SP,#+60
   \   0000314E   0x.... 0x....      BL       strcpy
   3045                                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003152   0xA80F             ADD      R0,SP,#+60
   \   00003154   0x.... 0x....      BL       strlen
   \   00003158   0xA90F             ADD      R1,SP,#+60
   \   0000315A   0x.... 0x....      BL       BGM111_Transmit
   3046                                              }
   3047                                              sprintf( (char *)tempBffr2, "COMPLETE" );
   \                     ??RoadBrd_ParseString_518: (+1)
   \   0000315E   0x.... 0x....      LDR.W    R1,??DataTable4_15
   \   00003162   0xA80F             ADD      R0,SP,#+60
   \   00003164   0x.... 0x....      BL       sprintf
   3048                                            } // EndElse ((new_value > 9999) || (new_value < 0))
   3049                                          } // EndElse (flag == 0)
   3050                                        } // EndElse (tempBffr[4]!=':')
   3051                                        break;
   \                     ??RoadBrd_ParseString_508: (+1)
   \   00003168   0xE1C9             B.N      ??RoadBrd_ParseString_519
   3052          //------------------
   3053                                      case 'S':
   3054                                        //Key Flash Variable Set Sensor Sample Rate Command.
   3055                                        // Step 1. Validate format.
   3056                                        if(tempBffr[4]!=':')
   \                     ??RoadBrd_ParseString_503: (+1)
   \   0000316A   0x7920             LDRB     R0,[R4, #+4]
   \   0000316C   0x283A             CMP      R0,#+58
   \   0000316E   0xD023             BEQ.N    ??RoadBrd_ParseString_520
   3057                                        {
   3058                                          // Is this a BLE Operation?
   3059                                          if ( BLE_Flag )
   \   00003170   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003172   0x2D00             CMP      R5,#+0
   \   00003174   0xD00A             BEQ.N    ??RoadBrd_ParseString_521
   3060                                          {
   3061                                            // Yes...Build and Send BLE Response NOW.
   3062                                            strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSS_SYNTAX</STATUS>");
   \   00003176   0x.... 0x....      LDR.W    R1,??DataTable4_16
   \   0000317A   0xA80F             ADD      R0,SP,#+60
   \   0000317C   0x.... 0x....      BL       strcpy
   3063                                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003180   0xA80F             ADD      R0,SP,#+60
   \   00003182   0x.... 0x....      BL       strlen
   \   00003186   0xA90F             ADD      R1,SP,#+60
   \   00003188   0x.... 0x....      BL       BGM111_Transmit
   3064                                          }
   3065                                          strcpy( (char *)tempBffr2, "TKSS SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_521: (+1)
   \   0000318C   0x.... 0x....      LDR.W    R1,??DataTable4_17
   \   00003190   0xA80F             ADD      R0,SP,#+60
   \   00003192   0x.... 0x....      BL       strcpy
   \   00003196   0xE07A             B.N      ??RoadBrd_ParseString_522
   \                     ??RoadBrd_ParseString_404:
   \   00003198   0x........         DC32     ?_139
   \   0000319C   0x........         DC32     ?_140
   \   000031A0   0x........         DC32     ?_141
   \   000031A4   0x........         DC32     ?_142
   \   000031A8   0x........         DC32     ?_143
   \   000031AC   0x........         DC32     ?_144
   \   000031B0   0x........         DC32     ?_145
   \   000031B4   0x........         DC32     ?_146
   3066                                        } // Endif (tempBffr[4]!=':')
   3067                                        else
   3068                                        {
   3069                                          // 2. Verify if remaining string is digits
   3070                                          if (Size > 5)
   \                     ??RoadBrd_ParseString_520: (+1)
   \   000031B8   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000031BC   0xF1B8 0x0F06      CMP      R8,#+6
   \   000031C0   0xDB10             BLT.N    ??RoadBrd_ParseString_523
   3071                                          {
   3072                                            flag = 1;
   \   000031C2   0x2001             MOVS     R0,#+1
   \   000031C4   0x902E             STR      R0,[SP, #+184]
   3073                                            for (x=5; x< Size; x++)
   \   000031C6   0x2005             MOVS     R0,#+5
   \   000031C8   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_524: (+1)
   \   000031CA   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000031CE   0x4547             CMP      R7,R8
   \   000031D0   0xDA0A             BGE.N    ??RoadBrd_ParseString_525
   3074                                            {
   3075                                              if (isdigit(tempBffr[x]) == 0)
   \   000031D2   0x5DE0             LDRB     R0,[R4, R7]
   \   000031D4   0x.... 0x....      BL       isdigit
   \   000031D8   0x2800             CMP      R0,#+0
   \   000031DA   0xD101             BNE.N    ??RoadBrd_ParseString_526
   3076                                                flag = 0;
   \   000031DC   0x2000             MOVS     R0,#+0
   \   000031DE   0x902E             STR      R0,[SP, #+184]
   3077                                            }
   \                     ??RoadBrd_ParseString_526: (+1)
   \   000031E0   0x1C7F             ADDS     R7,R7,#+1
   \   000031E2   0xE7F2             B.N      ??RoadBrd_ParseString_524
   3078                                          } // EndIf (Size > 5)
   3079                                          else
   3080                                            flag = 0;
   \                     ??RoadBrd_ParseString_523: (+1)
   \   000031E4   0x2000             MOVS     R0,#+0
   \   000031E6   0x902E             STR      R0,[SP, #+184]
   3081                                          if (flag == 0)
   \                     ??RoadBrd_ParseString_525: (+1)
   \   000031E8   0x982E             LDR      R0,[SP, #+184]
   \   000031EA   0x2800             CMP      R0,#+0
   \   000031EC   0xD113             BNE.N    ??RoadBrd_ParseString_527
   3082                                          {
   3083                                            // Is this a BLE Operation?
   3084                                            if ( BLE_Flag )
   \   000031EE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000031F0   0x2D00             CMP      R5,#+0
   \   000031F2   0xD00A             BEQ.N    ??RoadBrd_ParseString_528
   3085                                            {
   3086                                              // Yes...Build and Send BLE Response NOW.
   3087                                              strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSS_BADPARAM</STATUS>");
   \   000031F4   0x.... 0x....      LDR.W    R1,??DataTable4_18
   \   000031F8   0xA80F             ADD      R0,SP,#+60
   \   000031FA   0x.... 0x....      BL       strcpy
   3088                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000031FE   0xA80F             ADD      R0,SP,#+60
   \   00003200   0x.... 0x....      BL       strlen
   \   00003204   0xA90F             ADD      R1,SP,#+60
   \   00003206   0x.... 0x....      BL       BGM111_Transmit
   3089                                            }
   3090                                            strcpy( (char *)tempBffr2, "TKSS SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_528: (+1)
   \   0000320A   0x.... 0x....      LDR.W    R1,??DataTable4_19
   \   0000320E   0xA80F             ADD      R0,SP,#+60
   \   00003210   0x.... 0x....      BL       strcpy
   \   00003214   0xE03B             B.N      ??RoadBrd_ParseString_522
   3091                                          }
   3092                                          else
   3093                                          {
   3094                                            // 3. Grab remaining string and convert to integer.
   3095                                            tempPstr = &tempBffr[5];
   \                     ??RoadBrd_ParseString_527: (+1)
   \   00003216   0x1D60             ADDS     R0,R4,#+5
   \   00003218   0x9030             STR      R0,[SP, #+192]
   3096                                            strcpy(tempstr, tempPstr);
   \   0000321A   0x9930             LDR      R1,[SP, #+192]
   \   0000321C   0xA848             ADD      R0,SP,#+288
   \   0000321E   0x.... 0x....      BL       strcpy
   3097                                            new_value = atoi( tempstr );
   \   00003222   0xA848             ADD      R0,SP,#+288
   \   00003224   0x.... 0x....      BL       atoi
   \   00003228   0x902F             STR      R0,[SP, #+188]
   3098                                            if((new_value > 9999) ||
   3099                                               (new_value < 0))
   \   0000322A   0x982F             LDR      R0,[SP, #+188]
   \   0000322C   0xF242 0x7110      MOVW     R1,#+10000
   \   00003230   0x4288             CMP      R0,R1
   \   00003232   0xDA02             BGE.N    ??RoadBrd_ParseString_529
   \   00003234   0x982F             LDR      R0,[SP, #+188]
   \   00003236   0x2800             CMP      R0,#+0
   \   00003238   0xD513             BPL.N    ??RoadBrd_ParseString_530
   3100                                            {
   3101                                              // Is this a BLE Operation?
   3102                                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_529: (+1)
   \   0000323A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000323C   0x2D00             CMP      R5,#+0
   \   0000323E   0xD00A             BEQ.N    ??RoadBrd_ParseString_531
   3103                                              {
   3104                                                // Yes...Build and Send BLE Response NOW.
   3105                                                strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSS_BADPARAM</STATUS>");
   \   00003240   0x.... 0x....      LDR.W    R1,??DataTable4_18
   \   00003244   0xA80F             ADD      R0,SP,#+60
   \   00003246   0x.... 0x....      BL       strcpy
   3106                                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000324A   0xA80F             ADD      R0,SP,#+60
   \   0000324C   0x.... 0x....      BL       strlen
   \   00003250   0xA90F             ADD      R1,SP,#+60
   \   00003252   0x.... 0x....      BL       BGM111_Transmit
   3107                                              }
   3108                                              strcpy( (char *)tempBffr2, "TKSS SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_531: (+1)
   \   00003256   0x.... 0x....      LDR.W    R1,??DataTable4_19
   \   0000325A   0xA80F             ADD      R0,SP,#+60
   \   0000325C   0x.... 0x....      BL       strcpy
   \   00003260   0xE015             B.N      ??RoadBrd_ParseString_522
   3109                                            }
   3110                                            else
   3111                                            {
   3112                                              // Time to set new Road Sound Sample Rate.
   3113                                              RoadBrd_Set_SnsrTickCnt( new_value );
   \                     ??RoadBrd_ParseString_530: (+1)
   \   00003262   0x982F             LDR      R0,[SP, #+188]
   \   00003264   0x.... 0x....      BL       RoadBrd_Set_SnsrTickCnt
   3114                                              // Is this a BLE Operation?
   3115                                              if ( BLE_Flag )
   \   00003268   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000326A   0x2D00             CMP      R5,#+0
   \   0000326C   0xD00A             BEQ.N    ??RoadBrd_ParseString_532
   3116                                              {
   3117                                                // Yes...Build and Send BLE Response NOW.
   3118                                                strcpy( (char *)tempBffr2, "<STATUS>ST_TKSS_ACK</STATUS>");
   \   0000326E   0x.... 0x....      LDR.W    R1,??DataTable4_20
   \   00003272   0xA80F             ADD      R0,SP,#+60
   \   00003274   0x.... 0x....      BL       strcpy
   3119                                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003278   0xA80F             ADD      R0,SP,#+60
   \   0000327A   0x.... 0x....      BL       strlen
   \   0000327E   0xA90F             ADD      R1,SP,#+60
   \   00003280   0x.... 0x....      BL       BGM111_Transmit
   3120                                              }
   3121                                              // NOW, Build Data String..
   3122                                              sprintf( (char *)tempBffr2, "COMPLETE" );
   \                     ??RoadBrd_ParseString_532: (+1)
   \   00003284   0x.... 0x....      LDR.W    R1,??DataTable4_15
   \   00003288   0xA80F             ADD      R0,SP,#+60
   \   0000328A   0x.... 0x....      BL       sprintf
   3123                                            } // EndElse ((new_value > 9999) || (new_value < 0))
   3124                                          } // EndElse (flag == 0)
   3125                                        } // EndElse (tempBffr[4]!=':')
   3126                                        break;
   \                     ??RoadBrd_ParseString_522: (+1)
   \   0000328E   0xE136             B.N      ??RoadBrd_ParseString_519
   3127          //------------------
   3128                                      case 'T':
   3129                                        //Key Flash Variable Set TACK Limit(Multiple of Road Sound Throttles).
   3130                                        // Step 1. Validate format.
   3131                                        if(tempBffr[4]!=':')
   \                     ??RoadBrd_ParseString_504: (+1)
   \   00003290   0x7920             LDRB     R0,[R4, #+4]
   \   00003292   0x283A             CMP      R0,#+58
   \   00003294   0xD01A             BEQ.N    ??RoadBrd_ParseString_533
   3132                                        {
   3133                                          // Is this a BLE Operation?
   3134                                          if ( BLE_Flag )
   \   00003296   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003298   0x2D00             CMP      R5,#+0
   \   0000329A   0xD00A             BEQ.N    ??RoadBrd_ParseString_534
   3135                                          {
   3136                                            // Yes...Build and Send BLE Response NOW.
   3137                                            strcpy( (char *)tempBffr2, "<STATUS>CMD_TKST_SYNTAX</STATUS>");
   \   0000329C   0x.... 0x....      LDR.W    R1,??DataTable4_21
   \   000032A0   0xA80F             ADD      R0,SP,#+60
   \   000032A2   0x.... 0x....      BL       strcpy
   3138                                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000032A6   0xA80F             ADD      R0,SP,#+60
   \   000032A8   0x.... 0x....      BL       strlen
   \   000032AC   0xA90F             ADD      R1,SP,#+60
   \   000032AE   0x.... 0x....      BL       BGM111_Transmit
   3139                                          }
   3140                                          strcpy( (char *)tempBffr2, "TKST SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_534: (+1)
   \   000032B2   0x.... 0x....      LDR.W    R1,??DataTable4_22
   \   000032B6   0xA80F             ADD      R0,SP,#+60
   \   000032B8   0x.... 0x....      BL       strcpy
   \   000032BC   0xE07E             B.N      ??RoadBrd_ParseString_535
   \   000032BE   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_413:
   \   000032C0   0x........         DC32     ?_147
   \   000032C4   0x........         DC32     ?_148
   \   000032C8   0x........         DC32     ?_149
   3141                                        } // Endif (tempBffr[4]!=':')
   3142                                        else
   3143                                        {
   3144                                          // 2. Verify if remaining string is digits
   3145                                          if (Size > 5)
   \                     ??RoadBrd_ParseString_533: (+1)
   \   000032CC   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000032D0   0xF1B8 0x0F06      CMP      R8,#+6
   \   000032D4   0xDB10             BLT.N    ??RoadBrd_ParseString_536
   3146                                          {
   3147                                            flag = 1;
   \   000032D6   0x2001             MOVS     R0,#+1
   \   000032D8   0x902E             STR      R0,[SP, #+184]
   3148                                            for (x=5; x< Size; x++)
   \   000032DA   0x2005             MOVS     R0,#+5
   \   000032DC   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_537: (+1)
   \   000032DE   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000032E2   0x4547             CMP      R7,R8
   \   000032E4   0xDA0A             BGE.N    ??RoadBrd_ParseString_538
   3149                                            {
   3150                                              if (isdigit(tempBffr[x]) == 0)
   \   000032E6   0x5DE0             LDRB     R0,[R4, R7]
   \   000032E8   0x.... 0x....      BL       isdigit
   \   000032EC   0x2800             CMP      R0,#+0
   \   000032EE   0xD101             BNE.N    ??RoadBrd_ParseString_539
   3151                                                flag = 0;
   \   000032F0   0x2000             MOVS     R0,#+0
   \   000032F2   0x902E             STR      R0,[SP, #+184]
   3152                                            }
   \                     ??RoadBrd_ParseString_539: (+1)
   \   000032F4   0x1C7F             ADDS     R7,R7,#+1
   \   000032F6   0xE7F2             B.N      ??RoadBrd_ParseString_537
   3153                                          } // EndIf (Size > 5)
   3154                                          else
   3155                                            flag = 0;
   \                     ??RoadBrd_ParseString_536: (+1)
   \   000032F8   0x2000             MOVS     R0,#+0
   \   000032FA   0x902E             STR      R0,[SP, #+184]
   3156                                          if (flag == 0)
   \                     ??RoadBrd_ParseString_538: (+1)
   \   000032FC   0x982E             LDR      R0,[SP, #+184]
   \   000032FE   0x2800             CMP      R0,#+0
   \   00003300   0xD11A             BNE.N    ??RoadBrd_ParseString_540
   3157                                          {
   3158                                            // Is this a BLE Operation?
   3159                                            if ( BLE_Flag )
   \   00003302   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003304   0x2D00             CMP      R5,#+0
   \   00003306   0xD00A             BEQ.N    ??RoadBrd_ParseString_541
   3160                                            {
   3161                                              // Yes...Build and Send BLE Response NOW.
   3162                                              strcpy( (char *)tempBffr2, "<STATUS>CMD_TKST_BADPARAM</STATUS>");
   \   00003308   0x.... 0x....      LDR.W    R1,??DataTable4_23
   \   0000330C   0xA80F             ADD      R0,SP,#+60
   \   0000330E   0x.... 0x....      BL       strcpy
   3163                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003312   0xA80F             ADD      R0,SP,#+60
   \   00003314   0x.... 0x....      BL       strlen
   \   00003318   0xA90F             ADD      R1,SP,#+60
   \   0000331A   0x.... 0x....      BL       BGM111_Transmit
   3164                                            }
   3165                                            strcpy( (char *)tempBffr2, "TKST SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_541: (+1)
   \   0000331E   0x.... 0x....      LDR.W    R1,??DataTable4_24
   \   00003322   0xA80F             ADD      R0,SP,#+60
   \   00003324   0x.... 0x....      BL       strcpy
   \   00003328   0xE048             B.N      ??RoadBrd_ParseString_535
   \   0000332A   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_416:
   \   0000332C   0x........         DC32     ?_150
   \   00003330   0x........         DC32     ?_151
   \   00003334   0x........         DC32     ?_152
   3166                                          }
   3167                                          else
   3168                                          {
   3169                                            // 3. Grab remaining string and convert to integer.
   3170                                            tempPstr = &tempBffr[5];
   \                     ??RoadBrd_ParseString_540: (+1)
   \   00003338   0x1D60             ADDS     R0,R4,#+5
   \   0000333A   0x9030             STR      R0,[SP, #+192]
   3171                                            strcpy(tempstr, tempPstr);
   \   0000333C   0x9930             LDR      R1,[SP, #+192]
   \   0000333E   0xA848             ADD      R0,SP,#+288
   \   00003340   0x.... 0x....      BL       strcpy
   3172                                            new_value = atoi( tempstr );
   \   00003344   0xA848             ADD      R0,SP,#+288
   \   00003346   0x.... 0x....      BL       atoi
   \   0000334A   0x902F             STR      R0,[SP, #+188]
   3173                                            if((new_value > 9999) ||
   3174                                               (new_value < 0))
   \   0000334C   0x982F             LDR      R0,[SP, #+188]
   \   0000334E   0xF242 0x7110      MOVW     R1,#+10000
   \   00003352   0x4288             CMP      R0,R1
   \   00003354   0xDA02             BGE.N    ??RoadBrd_ParseString_542
   \   00003356   0x982F             LDR      R0,[SP, #+188]
   \   00003358   0x2800             CMP      R0,#+0
   \   0000335A   0xD519             BPL.N    ??RoadBrd_ParseString_543
   3175                                            {
   3176                                              // Is this a BLE Operation?
   3177                                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_542: (+1)
   \   0000335C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000335E   0x2D00             CMP      R5,#+0
   \   00003360   0xD00A             BEQ.N    ??RoadBrd_ParseString_544
   3178                                              {
   3179                                                // Yes...Build and Send BLE Response NOW.
   3180                                                strcpy( (char *)tempBffr2, "<STATUS>CMD_TKST_BADPARAM</STATUS>");
   \   00003362   0x.... 0x....      LDR.W    R1,??DataTable4_23
   \   00003366   0xA80F             ADD      R0,SP,#+60
   \   00003368   0x.... 0x....      BL       strcpy
   3181                                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000336C   0xA80F             ADD      R0,SP,#+60
   \   0000336E   0x.... 0x....      BL       strlen
   \   00003372   0xA90F             ADD      R1,SP,#+60
   \   00003374   0x.... 0x....      BL       BGM111_Transmit
   3182                                              }
   3183                                              strcpy( (char *)tempBffr2, "TKSS SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_544: (+1)
   \   00003378   0x.... 0x....      LDR.W    R1,??DataTable4_19
   \   0000337C   0xA80F             ADD      R0,SP,#+60
   \   0000337E   0x.... 0x....      BL       strcpy
   \   00003382   0xE01B             B.N      ??RoadBrd_ParseString_535
   \                     ??RoadBrd_ParseString_421:
   \   00003384   0x........         DC32     ?_153
   \   00003388   0x........         DC32     ?_154
   \   0000338C   0x........         DC32     ?_155
   3184                                            }
   3185                                            else
   3186                                            {
   3187                                              // Time to set new TACK Limit.
   3188                                              RoadBrd_Set_TackLimit( new_value );
   \                     ??RoadBrd_ParseString_543: (+1)
   \   00003390   0x982F             LDR      R0,[SP, #+188]
   \   00003392   0x.... 0x....      BL       RoadBrd_Set_TackLimit
   3189                                              // Is this a BLE Operation?
   3190                                              if ( BLE_Flag )
   \   00003396   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003398   0x2D00             CMP      R5,#+0
   \   0000339A   0xD00A             BEQ.N    ??RoadBrd_ParseString_545
   3191                                              {
   3192                                                // Yes...Build and Send BLE Response NOW.
   3193                                                strcpy( (char *)tempBffr2, "<STATUS>ST_TKST_ACK</STATUS>");
   \   0000339C   0x.... 0x....      LDR.W    R1,??DataTable4_25
   \   000033A0   0xA80F             ADD      R0,SP,#+60
   \   000033A2   0x.... 0x....      BL       strcpy
   3194                                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000033A6   0xA80F             ADD      R0,SP,#+60
   \   000033A8   0x.... 0x....      BL       strlen
   \   000033AC   0xA90F             ADD      R1,SP,#+60
   \   000033AE   0x.... 0x....      BL       BGM111_Transmit
   3195                                              }
   3196                                              // NOW, Build Data String..
   3197                                              sprintf( (char *)tempBffr2, "COMPLETE" );
   \                     ??RoadBrd_ParseString_545: (+1)
   \   000033B2   0x.... 0x....      LDR.W    R1,??DataTable4_15
   \   000033B6   0xA80F             ADD      R0,SP,#+60
   \   000033B8   0x.... 0x....      BL       sprintf
   3198                                            } // EndElse ((new_value > 9999) || (new_value < 0))
   3199                                          } // EndElse (flag == 0)
   3200                                        } // EndElse (tempBffr[4]!=':')
   3201                                        break;
   \                     ??RoadBrd_ParseString_535: (+1)
   \   000033BC   0xE09F             B.N      ??RoadBrd_ParseString_519
   3202                                      case 'B':
   3203                                        //Key Flash Variable Set Boot Delay(Seconds).
   3204                                        // Step 1. Validate format.
   3205                                        if(tempBffr[4]!=':')
   \                     ??RoadBrd_ParseString_501: (+1)
   \   000033BE   0x7920             LDRB     R0,[R4, #+4]
   \   000033C0   0x283A             CMP      R0,#+58
   \   000033C2   0xD01F             BEQ.N    ??RoadBrd_ParseString_546
   3206                                        {
   3207                                          // Is this a BLE Operation?
   3208                                          if ( BLE_Flag )
   \   000033C4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000033C6   0x2D00             CMP      R5,#+0
   \   000033C8   0xD00A             BEQ.N    ??RoadBrd_ParseString_547
   3209                                          {
   3210                                            // Yes...Build and Send BLE Response NOW.
   3211                                            strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSB_SYNTAX</STATUS>");
   \   000033CA   0x.... 0x....      LDR.W    R1,??DataTable4_26
   \   000033CE   0xA80F             ADD      R0,SP,#+60
   \   000033D0   0x.... 0x....      BL       strcpy
   3212                                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000033D4   0xA80F             ADD      R0,SP,#+60
   \   000033D6   0x.... 0x....      BL       strlen
   \   000033DA   0xA90F             ADD      R1,SP,#+60
   \   000033DC   0x.... 0x....      BL       BGM111_Transmit
   3213                                          }
   3214                                          strcpy( (char *)tempBffr2, "TKSB SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_547: (+1)
   \   000033E0   0x.... 0x....      LDR.W    R1,??DataTable4_27
   \   000033E4   0xA80F             ADD      R0,SP,#+60
   \   000033E6   0x.... 0x....      BL       strcpy
   \   000033EA   0xE079             B.N      ??RoadBrd_ParseString_548
   \                     ??RoadBrd_ParseString_424:
   \   000033EC   0x........         DC32     ?_156
   \   000033F0   0x........         DC32     ?_157
   \   000033F4   0x........         DC32     ?_158
   \   000033F8   0x........         DC32     ?_159
   \   000033FC   0x........         DC32     ?_160
   \   00003400   0x........         DC32     ?_161
   3215                                        } // Endif (tempBffr[4]!=':')
   3216                                        else
   3217                                        {
   3218                                          // 2. Verify if remaining string is digits
   3219                                          if (Size > 5)
   \                     ??RoadBrd_ParseString_546: (+1)
   \   00003404   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00003408   0xF1B8 0x0F06      CMP      R8,#+6
   \   0000340C   0xDB10             BLT.N    ??RoadBrd_ParseString_549
   3220                                          {
   3221                                            flag = 1;
   \   0000340E   0x2001             MOVS     R0,#+1
   \   00003410   0x902E             STR      R0,[SP, #+184]
   3222                                            for (x=5; x< Size; x++)
   \   00003412   0x2005             MOVS     R0,#+5
   \   00003414   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_550: (+1)
   \   00003416   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000341A   0x4547             CMP      R7,R8
   \   0000341C   0xDA0A             BGE.N    ??RoadBrd_ParseString_551
   3223                                            {
   3224                                              if (isdigit(tempBffr[x]) == 0)
   \   0000341E   0x5DE0             LDRB     R0,[R4, R7]
   \   00003420   0x.... 0x....      BL       isdigit
   \   00003424   0x2800             CMP      R0,#+0
   \   00003426   0xD101             BNE.N    ??RoadBrd_ParseString_552
   3225                                                flag = 0;
   \   00003428   0x2000             MOVS     R0,#+0
   \   0000342A   0x902E             STR      R0,[SP, #+184]
   3226                                            }
   \                     ??RoadBrd_ParseString_552: (+1)
   \   0000342C   0x1C7F             ADDS     R7,R7,#+1
   \   0000342E   0xE7F2             B.N      ??RoadBrd_ParseString_550
   3227                                          } // EndIf (Size > 5)
   3228                                          else
   3229                                            flag = 0;
   \                     ??RoadBrd_ParseString_549: (+1)
   \   00003430   0x2000             MOVS     R0,#+0
   \   00003432   0x902E             STR      R0,[SP, #+184]
   3230                                          if (flag == 0)
   \                     ??RoadBrd_ParseString_551: (+1)
   \   00003434   0x982E             LDR      R0,[SP, #+184]
   \   00003436   0x2800             CMP      R0,#+0
   \   00003438   0xD113             BNE.N    ??RoadBrd_ParseString_553
   3231                                          {
   3232                                            // Is this a BLE Operation?
   3233                                            if ( BLE_Flag )
   \   0000343A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000343C   0x2D00             CMP      R5,#+0
   \   0000343E   0xD00A             BEQ.N    ??RoadBrd_ParseString_554
   3234                                            {
   3235                                              // Yes...Build and Send BLE Response NOW.
   3236                                              strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSB_BADPARAM</STATUS>");
   \   00003440   0x.... 0x....      LDR.W    R1,??DataTable4_28
   \   00003444   0xA80F             ADD      R0,SP,#+60
   \   00003446   0x.... 0x....      BL       strcpy
   3237                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000344A   0xA80F             ADD      R0,SP,#+60
   \   0000344C   0x.... 0x....      BL       strlen
   \   00003450   0xA90F             ADD      R1,SP,#+60
   \   00003452   0x.... 0x....      BL       BGM111_Transmit
   3238                                            }
   3239                                            strcpy( (char *)tempBffr2, "TKSB SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_554: (+1)
   \   00003456   0x.... 0x....      LDR.W    R1,??DataTable4_29
   \   0000345A   0xA80F             ADD      R0,SP,#+60
   \   0000345C   0x.... 0x....      BL       strcpy
   \   00003460   0xE03E             B.N      ??RoadBrd_ParseString_548
   3240                                          }
   3241                                          else
   3242                                          {
   3243                                            // 3. Grab remaining string and convert to integer.
   3244                                            tempPstr = &tempBffr[5];
   \                     ??RoadBrd_ParseString_553: (+1)
   \   00003462   0x1D60             ADDS     R0,R4,#+5
   \   00003464   0x9030             STR      R0,[SP, #+192]
   3245                                            strcpy(tempstr, tempPstr);
   \   00003466   0x9930             LDR      R1,[SP, #+192]
   \   00003468   0xA848             ADD      R0,SP,#+288
   \   0000346A   0x.... 0x....      BL       strcpy
   3246                                            new_value = atoi( tempstr );
   \   0000346E   0xA848             ADD      R0,SP,#+288
   \   00003470   0x.... 0x....      BL       atoi
   \   00003474   0x902F             STR      R0,[SP, #+188]
   3247                                            if((new_value > 999) ||
   3248                                               (new_value < 0))
   \   00003476   0x982F             LDR      R0,[SP, #+188]
   \   00003478   0xF5B0 0x7F7A      CMP      R0,#+1000
   \   0000347C   0xDA02             BGE.N    ??RoadBrd_ParseString_555
   \   0000347E   0x982F             LDR      R0,[SP, #+188]
   \   00003480   0x2800             CMP      R0,#+0
   \   00003482   0xD517             BPL.N    ??RoadBrd_ParseString_556
   3249                                            {
   3250                                              // Is this a BLE Operation?
   3251                                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_555: (+1)
   \   00003484   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003486   0x2D00             CMP      R5,#+0
   \   00003488   0xD00A             BEQ.N    ??RoadBrd_ParseString_557
   3252                                              {
   3253                                                // Yes...Build and Send BLE Response NOW.
   3254                                                strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSB_BADPARAM</STATUS>");
   \   0000348A   0x.... 0x....      LDR.W    R1,??DataTable4_28
   \   0000348E   0xA80F             ADD      R0,SP,#+60
   \   00003490   0x.... 0x....      BL       strcpy
   3255                                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003494   0xA80F             ADD      R0,SP,#+60
   \   00003496   0x.... 0x....      BL       strlen
   \   0000349A   0xA90F             ADD      R1,SP,#+60
   \   0000349C   0x.... 0x....      BL       BGM111_Transmit
   3256                                              }
   3257                                              strcpy( (char *)tempBffr2, "TKSB SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_557: (+1)
   \   000034A0   0x.... 0x....      LDR.W    R1,??DataTable4_29
   \   000034A4   0xA80F             ADD      R0,SP,#+60
   \   000034A6   0x.... 0x....      BL       strcpy
   \   000034AA   0xE019             B.N      ??RoadBrd_ParseString_548
   \                     ??RoadBrd_ParseString_431:
   \   000034AC   0x........         DC32     ?_162
   \   000034B0   0x........         DC32     ?_163
   3258                                            }
   3259                                            else
   3260                                            {
   3261                                              // Time to set new Boot Delay.
   3262                                              RoadBrd_Set_BootDelay( new_value );
   \                     ??RoadBrd_ParseString_556: (+1)
   \   000034B4   0x982F             LDR      R0,[SP, #+188]
   \   000034B6   0x.... 0x....      BL       RoadBrd_Set_BootDelay
   3263                                              // Is this a BLE Operation?
   3264                                              if ( BLE_Flag )
   \   000034BA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000034BC   0x2D00             CMP      R5,#+0
   \   000034BE   0xD00A             BEQ.N    ??RoadBrd_ParseString_558
   3265                                              {
   3266                                                // Yes...Build and Send BLE Response NOW.
   3267                                                strcpy( (char *)tempBffr2, "<STATUS>ST_TKSB_ACK</STATUS>");
   \   000034C0   0x.... 0x....      LDR.W    R1,??DataTable4_30
   \   000034C4   0xA80F             ADD      R0,SP,#+60
   \   000034C6   0x.... 0x....      BL       strcpy
   3268                                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000034CA   0xA80F             ADD      R0,SP,#+60
   \   000034CC   0x.... 0x....      BL       strlen
   \   000034D0   0xA90F             ADD      R1,SP,#+60
   \   000034D2   0x.... 0x....      BL       BGM111_Transmit
   3269                                              }
   3270                                              // NOW, Build Data String..
   3271                                              sprintf( (char *)tempBffr2, "COMPLETE" );
   \                     ??RoadBrd_ParseString_558: (+1)
   \   000034D6   0x.... 0x....      LDR.W    R1,??DataTable4_15
   \   000034DA   0xA80F             ADD      R0,SP,#+60
   \   000034DC   0x.... 0x....      BL       sprintf
   3272                                            } // EndElse ((new_value > 999) || (new_value < 0))
   3273                                          } // EndElse (flag == 0)
   3274                                        } // EndElse (tempBffr[4]!=':')
   3275                                        break;
   \                     ??RoadBrd_ParseString_548: (+1)
   \   000034E0   0xE00D             B.N      ??RoadBrd_ParseString_519
   \   000034E2   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_434:
   \   000034E4   0x........         DC32     ?_164
   \   000034E8   0x........         DC32     ?_165
   \   000034EC   0x........         DC32     ?_166
   \   000034F0   0x........         DC32     ?_167
   3276                                      default:
   3277                                        strcpy( (char *)tempBffr2, "TKS ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_505: (+1)
   \   000034F4   0x.... 0x....      LDR.W    R1,??DataTable4_31
   \   000034F8   0xA80F             ADD      R0,SP,#+60
   \   000034FA   0x.... 0x....      BL       strcpy
   3278                                        break;
   3279                                    } // EndSwitch ( tempBffr[3] )
   3280                                    break;
   \                     ??RoadBrd_ParseString_519: (+1)
   \   000034FE   0xE0CA             B.N      ??RoadBrd_ParseString_497
   3281          //------------------
   3282                                  case 'R':
   3283                                    //Key Flash Variable Read Command
   3284                                    switch( tempBffr[3] )
   \                     ??RoadBrd_ParseString_498: (+1)
   \   00003500   0x78E0             LDRB     R0,[R4, #+3]
   \   00003502   0x2842             CMP      R0,#+66
   \   00003504   0xF000 0x8086      BEQ.W    ??RoadBrd_ParseString_559
   \   00003508   0x2852             CMP      R0,#+82
   \   0000350A   0xD004             BEQ.N    ??RoadBrd_ParseString_560
   \   0000350C   0x2853             CMP      R0,#+83
   \   0000350E   0xD035             BEQ.N    ??RoadBrd_ParseString_561
   \   00003510   0x2854             CMP      R0,#+84
   \   00003512   0xD061             BEQ.N    ??RoadBrd_ParseString_562
   \   00003514   0xE098             B.N      ??RoadBrd_ParseString_563
   3285                                    {
   3286          //------------------
   3287                                      case 'R':
   3288                                        //Key Flash Variable Read Road Sound Sample Rate Command.
   3289                                        // Is this a BLE Operation?
   3290                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_560: (+1)
   \   00003516   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003518   0x2D00             CMP      R5,#+0
   \   0000351A   0xD016             BEQ.N    ??RoadBrd_ParseString_564
   3291                                        {
   3292                                          // Yes...Build and Send BLE Response NOW.
   3293                                          sprintf( (char *)tempBffr2, "<STATUS>ST_TKRR:%3.1f</STATUS>", ((float)RoadBrd_Get_RdSndTickCnt()/10));
   \   0000351C   0x.... 0x....      BL       RoadBrd_Get_RdSndTickCnt
   \   00003520   0x.... 0x....      BL       __aeabi_ui2f
   \   00003524   0x.... 0x....      LDR.W    R1,??DataTable4_32  ;; 0x41200000
   \   00003528   0x.... 0x....      BL       __aeabi_fdiv
   \   0000352C   0x.... 0x....      BL       __aeabi_f2d
   \   00003530   0x0002             MOVS     R2,R0
   \   00003532   0x000B             MOVS     R3,R1
   \   00003534   0x.... 0x....      LDR.W    R1,??DataTable4_33
   \   00003538   0xA80F             ADD      R0,SP,#+60
   \   0000353A   0x.... 0x....      BL       sprintf
   3294                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000353E   0xA80F             ADD      R0,SP,#+60
   \   00003540   0x.... 0x....      BL       strlen
   \   00003544   0xA90F             ADD      R1,SP,#+60
   \   00003546   0x.... 0x....      BL       BGM111_Transmit
   3295                                        }
   3296                                        sprintf( (char *)tempBffr2, "RdSnd Sample Rate:  %3.1f Seconds.\r\n", ((float)RoadBrd_Get_RdSndTickCnt()/10));
   \                     ??RoadBrd_ParseString_564: (+1)
   \   0000354A   0x.... 0x....      BL       RoadBrd_Get_RdSndTickCnt
   \   0000354E   0x.... 0x....      BL       __aeabi_ui2f
   \   00003552   0x.... 0x....      LDR.W    R1,??DataTable4_32  ;; 0x41200000
   \   00003556   0x.... 0x....      BL       __aeabi_fdiv
   \   0000355A   0x.... 0x....      BL       __aeabi_f2d
   \   0000355E   0x0002             MOVS     R2,R0
   \   00003560   0x000B             MOVS     R3,R1
   \   00003562   0x.... 0x....      LDR.W    R1,??DataTable4_34
   \   00003566   0xA80F             ADD      R0,SP,#+60
   \   00003568   0x.... 0x....      BL       sprintf
   3297                                        break;
   \   0000356C   0xE07F             B.N      ??RoadBrd_ParseString_565
   \   0000356E   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_439:
   \   00003570   0x........         DC32     ?_168
   \   00003574   0x........         DC32     ?_169
   \   00003578   0x........         DC32     ?_170
   3298          //------------------
   3299                                      case 'S':
   3300                                        //Key Flash Variable Read Sensor Sample Rate Command.
   3301                                        // Is this a BLE Operation?
   3302                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_561: (+1)
   \   0000357C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000357E   0x2D00             CMP      R5,#+0
   \   00003580   0xD016             BEQ.N    ??RoadBrd_ParseString_566
   3303                                        {
   3304                                          // Yes...Build and Send BLE Response NOW.
   3305                                          sprintf( (char *)tempBffr2, "<STATUS>ST_TKRS:%3.1f</STATUS>", ((float)RoadBrd_Get_SnsrTickCnt()/10));
   \   00003582   0x.... 0x....      BL       RoadBrd_Get_SnsrTickCnt
   \   00003586   0x.... 0x....      BL       __aeabi_ui2f
   \   0000358A   0x.... 0x....      LDR.W    R1,??DataTable4_32  ;; 0x41200000
   \   0000358E   0x.... 0x....      BL       __aeabi_fdiv
   \   00003592   0x.... 0x....      BL       __aeabi_f2d
   \   00003596   0x0002             MOVS     R2,R0
   \   00003598   0x000B             MOVS     R3,R1
   \   0000359A   0x.... 0x....      LDR.W    R1,??DataTable4_35
   \   0000359E   0xA80F             ADD      R0,SP,#+60
   \   000035A0   0x.... 0x....      BL       sprintf
   3306                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000035A4   0xA80F             ADD      R0,SP,#+60
   \   000035A6   0x.... 0x....      BL       strlen
   \   000035AA   0xA90F             ADD      R1,SP,#+60
   \   000035AC   0x.... 0x....      BL       BGM111_Transmit
   3307                                        }
   3308                                        sprintf( (char *)tempBffr2, "Sensor Sample Rate: %3.1f Seconds.\r\n\r\n> ", ((float)RoadBrd_Get_SnsrTickCnt()/10));
   \                     ??RoadBrd_ParseString_566: (+1)
   \   000035B0   0x.... 0x....      BL       RoadBrd_Get_SnsrTickCnt
   \   000035B4   0x.... 0x....      BL       __aeabi_ui2f
   \   000035B8   0x.... 0x....      LDR.W    R1,??DataTable4_32  ;; 0x41200000
   \   000035BC   0x.... 0x....      BL       __aeabi_fdiv
   \   000035C0   0x.... 0x....      BL       __aeabi_f2d
   \   000035C4   0x0002             MOVS     R2,R0
   \   000035C6   0x000B             MOVS     R3,R1
   \   000035C8   0x.... 0x....      LDR.W    R1,??DataTable4_36
   \   000035CC   0xA80F             ADD      R0,SP,#+60
   \   000035CE   0x.... 0x....      BL       sprintf
   3309                                        break;
   \   000035D2   0xE04C             B.N      ??RoadBrd_ParseString_565
   \                     ??RoadBrd_ParseString_442:
   \   000035D4   0x........         DC32     ?_171
   3310          //------------------
   3311                                      case 'T':
   3312                                        //Key Flash Variable Read TACK Limit(Multiple of Road Sound Throttles).
   3313                                        // Is this a BLE Operation?
   3314                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_562: (+1)
   \   000035D8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000035DA   0x2D00             CMP      R5,#+0
   \   000035DC   0xD00D             BEQ.N    ??RoadBrd_ParseString_567
   3315                                        {
   3316                                          // Yes...Build and Send BLE Response NOW.
   3317                                          sprintf( (char *)tempBffr2, "<STATUS>ST_TKRT:%d</STATUS>", RoadBrd_Get_TackLimit());
   \   000035DE   0x.... 0x....      BL       RoadBrd_Get_TackLimit
   \   000035E2   0x0002             MOVS     R2,R0
   \   000035E4   0x.... 0x....      LDR.W    R1,??DataTable4_37
   \   000035E8   0xA80F             ADD      R0,SP,#+60
   \   000035EA   0x.... 0x....      BL       sprintf
   3318                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000035EE   0xA80F             ADD      R0,SP,#+60
   \   000035F0   0x.... 0x....      BL       strlen
   \   000035F4   0xA90F             ADD      R1,SP,#+60
   \   000035F6   0x.... 0x....      BL       BGM111_Transmit
   3319                                        }
   3320                                        sprintf( (char *)tempBffr2, "TACK Limit: %d.\r\n\r\n> ", RoadBrd_Get_TackLimit());
   \                     ??RoadBrd_ParseString_567: (+1)
   \   000035FA   0x.... 0x....      BL       RoadBrd_Get_TackLimit
   \   000035FE   0x0002             MOVS     R2,R0
   \   00003600   0x.... 0x....      LDR.W    R1,??DataTable4_38
   \   00003604   0xA80F             ADD      R0,SP,#+60
   \   00003606   0x.... 0x....      BL       sprintf
   3321                                        break;
   \   0000360A   0xE030             B.N      ??RoadBrd_ParseString_565
   \                     ??RoadBrd_ParseString_444:
   \   0000360C   0x........         DC32     ?_172
   \   00003610   0x........         DC32     ?_173
   3322          //------------------
   3323                                      case 'B':
   3324                                        //Key Flash Variable Read Boot Delay.(Seconds).
   3325                                        // Is this a BLE Operation?
   3326                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_559: (+1)
   \   00003614   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003616   0x2D00             CMP      R5,#+0
   \   00003618   0xD00D             BEQ.N    ??RoadBrd_ParseString_568
   3327                                        {
   3328                                          // Yes...Build and Send BLE Response NOW.
   3329                                          sprintf( (char *)tempBffr2, "<STATUS>ST_TKRB:%d</STATUS>", RoadBrd_Get_BootDelay());
   \   0000361A   0x.... 0x....      BL       RoadBrd_Get_BootDelay
   \   0000361E   0x0002             MOVS     R2,R0
   \   00003620   0x.... 0x....      LDR.W    R1,??DataTable4_39
   \   00003624   0xA80F             ADD      R0,SP,#+60
   \   00003626   0x.... 0x....      BL       sprintf
   3330                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000362A   0xA80F             ADD      R0,SP,#+60
   \   0000362C   0x.... 0x....      BL       strlen
   \   00003630   0xA90F             ADD      R1,SP,#+60
   \   00003632   0x.... 0x....      BL       BGM111_Transmit
   3331                                        }
   3332                                        sprintf( (char *)tempBffr2, "Boot Delay: %d Seconds.\r\n\r\n> ", RoadBrd_Get_BootDelay());
   \                     ??RoadBrd_ParseString_568: (+1)
   \   00003636   0x.... 0x....      BL       RoadBrd_Get_BootDelay
   \   0000363A   0x0002             MOVS     R2,R0
   \   0000363C   0x.... 0x....      LDR.W    R1,??DataTable4_40
   \   00003640   0xA80F             ADD      R0,SP,#+60
   \   00003642   0x.... 0x....      BL       sprintf
   3333                                        break;
   \   00003646   0xE012             B.N      ??RoadBrd_ParseString_565
   3334                                      default:
   3335                                        // Is this a BLE Operation?
   3336                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_563: (+1)
   \   00003648   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000364A   0x2D00             CMP      R5,#+0
   \   0000364C   0xD00A             BEQ.N    ??RoadBrd_ParseString_569
   3337                                        {
   3338                                          // Yes...Build and Send BLE Response NOW.
   3339                                          strcpy( (char *)tempBffr2, "<STATUS>CMD_TKR_SYNTAX</STATUS>");
   \   0000364E   0x.... 0x....      LDR.W    R1,??DataTable4_41
   \   00003652   0xA80F             ADD      R0,SP,#+60
   \   00003654   0x.... 0x....      BL       strcpy
   3340                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003658   0xA80F             ADD      R0,SP,#+60
   \   0000365A   0x.... 0x....      BL       strlen
   \   0000365E   0xA90F             ADD      R1,SP,#+60
   \   00003660   0x.... 0x....      BL       BGM111_Transmit
   3341                                        }
   3342                                        strcpy( (char *)tempBffr2, "TKR ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_569: (+1)
   \   00003664   0x.... 0x....      LDR.W    R1,??DataTable4_42
   \   00003668   0xA80F             ADD      R0,SP,#+60
   \   0000366A   0x.... 0x....      BL       strcpy
   3343                                        break;
   3344                                    } // EndSwitch ( tempBffr[3] )
   3345                                    break;
   \                     ??RoadBrd_ParseString_565: (+1)
   \   0000366E   0xE012             B.N      ??RoadBrd_ParseString_497
   3346                                    // Is this a BLE Operation?
   3347                                  default:
   3348                                    if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_499: (+1)
   \   00003670   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003672   0x2D00             CMP      R5,#+0
   \   00003674   0xD00A             BEQ.N    ??RoadBrd_ParseString_570
   3349                                    {
   3350                                      // Yes...Build and Send BLE Response NOW.
   3351                                      strcpy( (char *)tempBffr2, "<STATUS>CMD_TK_SYNTAX</STATUS>");
   \   00003676   0x.... 0x....      LDR.W    R1,??DataTable4_8
   \   0000367A   0xA80F             ADD      R0,SP,#+60
   \   0000367C   0x.... 0x....      BL       strcpy
   3352                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003680   0xA80F             ADD      R0,SP,#+60
   \   00003682   0x.... 0x....      BL       strlen
   \   00003686   0xA90F             ADD      R1,SP,#+60
   \   00003688   0x.... 0x....      BL       BGM111_Transmit
   3353                                    }
   3354                                    strcpy( (char *)tempBffr2, "ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_570: (+1)
   \   0000368C   0x.... 0x....      LDR.W    R1,??DataTable4_43
   \   00003690   0xA80F             ADD      R0,SP,#+60
   \   00003692   0x.... 0x....      BL       strcpy
   3355                                    break;
   3356                                } //EndSwitch ( tempBffr[2] )
   3357                              } //EndElse (Size < 3)
   3358                              break;
   \                     ??RoadBrd_ParseString_497: (+1)
   \   00003696   0xE0F3             B.N      ??RoadBrd_ParseString_288
   3359          //++++++++++++++++++++++++++++++++++++++++++  Units Enable/Disable Commands.
   3360                            case 'U':
   3361                              // Key Flash Variable Commands.
   3362                              // Test Size to make sure we have enough Characters for this operation
   3363                              Status = HAL_OK;
   \                     ??RoadBrd_ParseString_297: (+1)
   \   00003698   0x2000             MOVS     R0,#+0
   \   0000369A   0x0006             MOVS     R6,R0
   3364                              if (Size < 3)
   \   0000369C   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000036A0   0xF1B8 0x0F03      CMP      R8,#+3
   \   000036A4   0xDA16             BGE.N    ??RoadBrd_ParseString_571
   3365                              {
   3366                                // Is this a BLE Operation?
   3367                                if ( BLE_Flag )
   \   000036A6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000036A8   0x2D00             CMP      R5,#+0
   \   000036AA   0xD00A             BEQ.N    ??RoadBrd_ParseString_572
   3368                                {
   3369                                  // Yes...Build and Send BLE Response NOW.
   3370                                  strcpy( (char *)tempBffr2, "<STATUS>CMD_TU_SYNTAX</STATUS>");
   \   000036AC   0x.... 0x....      LDR.W    R1,??DataTable4_44
   \   000036B0   0xA80F             ADD      R0,SP,#+60
   \   000036B2   0x.... 0x....      BL       strcpy
   3371                                  BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000036B6   0xA80F             ADD      R0,SP,#+60
   \   000036B8   0x.... 0x....      BL       strlen
   \   000036BC   0xA90F             ADD      R1,SP,#+60
   \   000036BE   0x.... 0x....      BL       BGM111_Transmit
   3372                                }
   3373                                strcpy( (char *)tempBffr2, "TU SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_572: (+1)
   \   000036C2   0x.... 0x....      LDR.W    R1,??DataTable4_45
   \   000036C6   0xA80F             ADD      R0,SP,#+60
   \   000036C8   0x.... 0x....      BL       strcpy
   \   000036CC   0xE04F             B.N      ??RoadBrd_ParseString_573
   \   000036CE   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_472:
   \   000036D0   0x........         DC32     ?_174
   3374                              }
   3375                              else
   3376                              {
   3377                                switch( tempBffr[2] )
   \                     ??RoadBrd_ParseString_571: (+1)
   \   000036D4   0x78A0             LDRB     R0,[R4, #+2]
   \   000036D6   0x2844             CMP      R0,#+68
   \   000036D8   0xD01C             BEQ.N    ??RoadBrd_ParseString_574
   \   000036DA   0x2845             CMP      R0,#+69
   \   000036DC   0xD134             BNE.N    ??RoadBrd_ParseString_575
   3378                                {
   3379          //------------------
   3380                                  case 'E':
   3381                                    //Units Enable Command.
   3382                                    // Is this a BLE Operation?
   3383                                    if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_576: (+1)
   \   000036DE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000036E0   0x2D00             CMP      R5,#+0
   \   000036E2   0xD00A             BEQ.N    ??RoadBrd_ParseString_577
   3384                                    {
   3385                                      // Yes...Build and Send BLE Response NOW.
   3386                                      strcpy( (char *)tempBffr2, "<STATUS>ST_TUE_ACK</STATUS>");
   \   000036E4   0x.... 0x....      LDR.W    R1,??DataTable4_46
   \   000036E8   0xA80F             ADD      R0,SP,#+60
   \   000036EA   0x.... 0x....      BL       strcpy
   3387                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000036EE   0xA80F             ADD      R0,SP,#+60
   \   000036F0   0x.... 0x....      BL       strlen
   \   000036F4   0xA90F             ADD      R1,SP,#+60
   \   000036F6   0x.... 0x....      BL       BGM111_Transmit
   3388                                    }
   3389                                    sprintf( (char *)tempBffr2, "Units XML State CHANGED: ENABLED\r\n\r\n> ");
   \                     ??RoadBrd_ParseString_577: (+1)
   \   000036FA   0x.... 0x....      LDR.W    R1,??DataTable4_47
   \   000036FE   0xA80F             ADD      R0,SP,#+60
   \   00003700   0x.... 0x....      BL       sprintf
   3390                                    Status = RoadBrd_Set_UnitsFlag( true );
   \   00003704   0x2001             MOVS     R0,#+1
   \   00003706   0x.... 0x....      BL       RoadBrd_Set_UnitsFlag
   \   0000370A   0x0006             MOVS     R6,R0
   3391                                    break;
   \   0000370C   0xE02F             B.N      ??RoadBrd_ParseString_573
   \   0000370E   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_473:
   \   00003710   0x........         DC32     ?_175
   3392          //------------------
   3393                                  case 'D':
   3394                                    //Units Disable Command
   3395                                    // Is this a BLE Operation?
   3396                                    if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_574: (+1)
   \   00003714   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003716   0x2D00             CMP      R5,#+0
   \   00003718   0xD00A             BEQ.N    ??RoadBrd_ParseString_578
   3397                                    {
   3398                                      // Yes...Build and Send BLE Response NOW.
   3399                                      strcpy( (char *)tempBffr2, "<STATUS>ST_TUD_ACK</STATUS>");
   \   0000371A   0x.... 0x....      LDR.W    R1,??DataTable4_48
   \   0000371E   0xA80F             ADD      R0,SP,#+60
   \   00003720   0x.... 0x....      BL       strcpy
   3400                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003724   0xA80F             ADD      R0,SP,#+60
   \   00003726   0x.... 0x....      BL       strlen
   \   0000372A   0xA90F             ADD      R1,SP,#+60
   \   0000372C   0x.... 0x....      BL       BGM111_Transmit
   3401                                    }
   3402                                    sprintf( (char *)tempBffr2, "Units XML State CHANGED: DISABLED\r\n\r\n> ");
   \                     ??RoadBrd_ParseString_578: (+1)
   \   00003730   0x.... 0x....      LDR.W    R1,??DataTable4_49
   \   00003734   0xA80F             ADD      R0,SP,#+60
   \   00003736   0x.... 0x....      BL       sprintf
   3403                                    Status = RoadBrd_Set_UnitsFlag( false );
   \   0000373A   0x2000             MOVS     R0,#+0
   \   0000373C   0x.... 0x....      BL       RoadBrd_Set_UnitsFlag
   \   00003740   0x0006             MOVS     R6,R0
   3404                                    break;
   \   00003742   0xE014             B.N      ??RoadBrd_ParseString_573
   \                     ??RoadBrd_ParseString_474:
   \   00003744   0x........         DC32     ?_176
   3405                                  default:
   3406                                    // Is this a BLE Operation?
   3407                                    if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_575: (+1)
   \   00003748   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000374A   0x2D00             CMP      R5,#+0
   \   0000374C   0xD00A             BEQ.N    ??RoadBrd_ParseString_579
   3408                                    {
   3409                                      // Yes...Build and Send BLE Response NOW.
   3410                                      strcpy( (char *)tempBffr2, "<STATUS>CMD_TU_SYNTAX</STATUS>");
   \   0000374E   0x.... 0x....      LDR.W    R1,??DataTable4_44
   \   00003752   0xA80F             ADD      R0,SP,#+60
   \   00003754   0x.... 0x....      BL       strcpy
   3411                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003758   0xA80F             ADD      R0,SP,#+60
   \   0000375A   0x.... 0x....      BL       strlen
   \   0000375E   0xA90F             ADD      R1,SP,#+60
   \   00003760   0x.... 0x....      BL       BGM111_Transmit
   3412                                    }
   3413                                    strcpy( (char *)tempBffr2, "TU SYNTAX ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_579: (+1)
   \   00003764   0x.... 0x....      LDR.W    R1,??DataTable4_50
   \   00003768   0xA80F             ADD      R0,SP,#+60
   \   0000376A   0x.... 0x....      BL       strcpy
   3414                                    break;
   3415                                } //EndSwitch ( tempBffr[2] )
   3416                              } //EndElse (Size < 3)
   3417                              break;
   \                     ??RoadBrd_ParseString_573: (+1)
   \   0000376E   0xE087             B.N      ??RoadBrd_ParseString_288
   3418          //++++++++++++++++++++++++++++++++++++++++++  Special Monitor Mode to intercept traffic from UART and pass to BGM111
   3419                            case 'M':
   3420                              // Is this a BLE Operation?
   3421                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_295: (+1)
   \   00003770   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003772   0x2D00             CMP      R5,#+0
   \   00003774   0xD009             BEQ.N    ??RoadBrd_ParseString_580
   3422                              {
   3423                                // Yes...Build and Send BLE Response NOW.
   3424                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00003776   0x....             LDR.N    R1,??DataTable4_1
   \   00003778   0xA80F             ADD      R0,SP,#+60
   \   0000377A   0x.... 0x....      BL       strcpy
   3425                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000377E   0xA80F             ADD      R0,SP,#+60
   \   00003780   0x.... 0x....      BL       strlen
   \   00003784   0xA90F             ADD      R1,SP,#+60
   \   00003786   0x.... 0x....      BL       BGM111_Transmit
   3426                              }
   3427                              
   3428                              strcpy( (char *)tempBffr2, "BGM111 MONITOR MODE.\r\n\r\n");
   \                     ??RoadBrd_ParseString_580: (+1)
   \   0000378A   0x.... 0x....      LDR.W    R1,??DataTable4_51
   \   0000378E   0xA80F             ADD      R0,SP,#+60
   \   00003790   0x.... 0x....      BL       strcpy
   3429          #ifdef NUCLEO
   3430                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   3431          #else
   3432                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00003794   0xA90F             ADD      R1,SP,#+60
   \   00003796   0x2000             MOVS     R0,#+0
   \   00003798   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000379C   0x0006             MOVS     R6,R0
   3433          #endif
   3434                              if (Status != HAL_OK)
   \   0000379E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000037A0   0x2E00             CMP      R6,#+0
   \   000037A2   0xD005             BEQ.N    ??RoadBrd_ParseString_581
   3435                                return Status;
   \   000037A4   0x0030             MOVS     R0,R6
   \   000037A6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000037A8   0xE0F6             B.N      ??RoadBrd_ParseString_4
   \   000037AA   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_475:
   \   000037AC   0x........         DC32     ?_177
   3436                              strcpy( (char *)tempBffr2, "Use <ESC> to exit mode.\r\n\r\n");
   \                     ??RoadBrd_ParseString_581: (+1)
   \   000037B0   0x.... 0x....      LDR.W    R1,??DataTable4_52
   \   000037B4   0xA80F             ADD      R0,SP,#+60
   \   000037B6   0x.... 0x....      BL       strcpy
   3437                              // Set Bypass Flag
   3438                              Bypass = true;
   \   000037BA   0x2001             MOVS     R0,#+1
   \   000037BC   0x.... 0x....      LDR.W    R1,??DataTable4_53
   \   000037C0   0x7008             STRB     R0,[R1, #+0]
   3439                              break;
   \   000037C2   0xE05D             B.N      ??RoadBrd_ParseString_288
   \                     ??RoadBrd_ParseString_476:
   \   000037C4   0x........         DC32     ?_178
   3440          //++++++++++++++++++++++++++++++++++++++++++  Reset Flash Frame Variables(Factory).
   3441                            case 'F':
   3442                              // Reset Flash Frame Variables.
   3443                              RoadBrd_WWDG_InitializeFrmFlash();
   \                     ??RoadBrd_ParseString_291: (+1)
   \   000037C8   0x.... 0x....      BL       RoadBrd_WWDG_InitializeFrmFlash
   3444                              // Is this a BLE Operation?
   3445                              if ( BLE_Flag )
   \   000037CC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000037CE   0x2D00             CMP      R5,#+0
   \   000037D0   0xD00A             BEQ.N    ??RoadBrd_ParseString_582
   3446                              {
   3447                                // Yes...Build and Send BLE Response NOW.
   3448                                sprintf( (char *)tempBffr2, "<STATUS>TF_ACK</STATUS>" );
   \   000037D2   0x.... 0x....      LDR.W    R1,??DataTable4_54
   \   000037D6   0xA80F             ADD      R0,SP,#+60
   \   000037D8   0x.... 0x....      BL       sprintf
   3449                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000037DC   0xA80F             ADD      R0,SP,#+60
   \   000037DE   0x.... 0x....      BL       strlen
   \   000037E2   0xA90F             ADD      R1,SP,#+60
   \   000037E4   0x.... 0x....      BL       BGM111_Transmit
   3450                              }
   3451                              
   3452                              sprintf( (char *)tempBffr2, "Flash Frame Variables Reset to Factory Values.\r\n" );
   \                     ??RoadBrd_ParseString_582: (+1)
   \   000037E8   0x.... 0x....      LDR.W    R1,??DataTable4_55
   \   000037EC   0xA80F             ADD      R0,SP,#+60
   \   000037EE   0x.... 0x....      BL       sprintf
   3453                              break;
   \   000037F2   0xE045             B.N      ??RoadBrd_ParseString_288
   3454          //++++++++++++++++++++++++++++++++++++++++++  Lock Code to allow stable Program of BLE Module.
   3455                            case 'L':
   3456                              // Is this a BLE Operation?
   3457                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_294: (+1)
   \   000037F4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000037F6   0x2D00             CMP      R5,#+0
   \   000037F8   0xD00E             BEQ.N    ??RoadBrd_ParseString_583
   3458                              {
   3459                                // Yes...Build and Send BLE Response NOW.
   3460                                sprintf( (char *)tempBffr2, "<STATUS>TL_ERROR</STATUS>" );
   \   000037FA   0x.... 0x....      LDR.W    R1,??DataTable4_56
   \   000037FE   0xA80F             ADD      R0,SP,#+60
   \   00003800   0x.... 0x....      BL       sprintf
   3461                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003804   0xA80F             ADD      R0,SP,#+60
   \   00003806   0x.... 0x....      BL       strlen
   \   0000380A   0xA90F             ADD      R1,SP,#+60
   \   0000380C   0x.... 0x....      BL       BGM111_Transmit
   3462                              }
   3463                              else
   3464                              {
   3465                                sprintf( (char *)tempBffr2, "Code Locked for Programming!\r\n\r\n" );
   3466          #ifdef NUCLEO
   3467                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   3468          #else
   3469                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   3470          #endif
   3471                                if (Status != HAL_OK)
   3472                                  return Status;
   3473                                sprintf( (char *)tempBffr2, "   HARD RESET NEEDED TO EXIT MODE\r\n" );
   3474          #ifdef NUCLEO
   3475                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   3476          #else
   3477                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   3478          #endif
   3479                                if (Status != HAL_OK)
   3480                                  return Status;
   3481                                // Start Hard Loop
   3482                                for (;;)
   3483                                {
   3484                                }
   3485                              }
   3486                              break;
   \   00003810   0xE036             B.N      ??RoadBrd_ParseString_288
   \   00003812   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_477:
   \   00003814   0x........         DC32     ?_179
   \                     ??RoadBrd_ParseString_583: (+1)
   \   00003818   0x....             LDR.N    R1,??DataTable4_57
   \   0000381A   0xA80F             ADD      R0,SP,#+60
   \   0000381C   0x.... 0x....      BL       sprintf
   \   00003820   0xA90F             ADD      R1,SP,#+60
   \   00003822   0x2000             MOVS     R0,#+0
   \   00003824   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00003828   0x0006             MOVS     R6,R0
   \   0000382A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000382C   0x2E00             CMP      R6,#+0
   \   0000382E   0xD002             BEQ.N    ??RoadBrd_ParseString_584
   \   00003830   0x0030             MOVS     R0,R6
   \   00003832   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003834   0xE0B0             B.N      ??RoadBrd_ParseString_4
   \                     ??RoadBrd_ParseString_584: (+1)
   \   00003836   0x....             LDR.N    R1,??DataTable4_58
   \   00003838   0xA80F             ADD      R0,SP,#+60
   \   0000383A   0x.... 0x....      BL       sprintf
   \   0000383E   0xA90F             ADD      R1,SP,#+60
   \   00003840   0x2000             MOVS     R0,#+0
   \   00003842   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00003846   0x0006             MOVS     R6,R0
   \   00003848   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000384A   0x2E00             CMP      R6,#+0
   \   0000384C   0xD006             BEQ.N    ??RoadBrd_ParseString_585
   \   0000384E   0x0030             MOVS     R0,R6
   \   00003850   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003852   0xE0A1             B.N      ??RoadBrd_ParseString_4
   \                     ??RoadBrd_ParseString_478:
   \   00003854   0x........         DC32     ?_180
   \   00003858   0x........         DC32     ?_181
   \                     ??RoadBrd_ParseString_585: (+1)
   \   0000385C   0xE7FE             B.N      ??RoadBrd_ParseString_585
   3487          
   3488          //**************************************************************************************************
   3489                            default:
   3490                              // Is this a BLE Operation?
   3491                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_298: (+1)
   \   0000385E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003860   0x2D00             CMP      R5,#+0
   \   00003862   0xD009             BEQ.N    ??RoadBrd_ParseString_586
   3492                              {
   3493                                // Yes...Build and Send BLE Response NOW.
   3494                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00003864   0x....             LDR.N    R1,??DataTable4_1
   \   00003866   0xA80F             ADD      R0,SP,#+60
   \   00003868   0x.... 0x....      BL       strcpy
   3495                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000386C   0xA80F             ADD      R0,SP,#+60
   \   0000386E   0x.... 0x....      BL       strlen
   \   00003872   0xA90F             ADD      R1,SP,#+60
   \   00003874   0x.... 0x....      BL       BGM111_Transmit
   3496                              }
   3497                              
   3498                              // ERROR if we get here.. 
   3499                              strcpy( (char *)tempBffr2, "ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_586: (+1)
   \   00003878   0x....             LDR.N    R1,??DataTable4_43
   \   0000387A   0xA80F             ADD      R0,SP,#+60
   \   0000387C   0x.... 0x....      BL       strcpy
   3500                              break;
   3501                           
   3502                          } //EndSwitch ( tempBffr[1] )
   3503                        } //EndElse (Size <= 1)
   3504                        break;
   \                     ??RoadBrd_ParseString_288: (+1)
   \   00003880   0xE010             B.N      ??RoadBrd_ParseString_27
   3505          #if 0
   3506          //**************************************************************************************************
   3507                      case 'S':
   3508                        // Sleep Mode. 
   3509                        switch( tempBffr[1] )
   3510                        {
   3511          //++++++++++++++++++++++++++++++++++++++++++  5V Power Supply Commands.
   3512                          case 'S':
   3513                            // Is this a BLE Operation?
   3514                            if ( BLE_Flag )
   3515                            {
   3516                              // Yes...Build and Send BLE Response NOW.
   3517                              strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   3518                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   3519                            }
   3520                            
   3521                            strcpy( (char *)tempBffr2, "Micro in Sleep Mode NOW.\r\n");
   3522          #ifdef NUCLEO
   3523                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   3524          #else
   3525                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   3526          #endif
   3527                            if (Status != HAL_OK)
   3528                              return Status;
   3529                            // Sleep Micro NOW!
   3530                            //sleep();
   3531                            break;
   3532                          case 'D':
   3533                            // Is this a BLE Operation?
   3534                            if ( BLE_Flag )
   3535                            {
   3536                              // Yes...Build and Send BLE Response NOW.
   3537                              strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   3538                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   3539                            }
   3540                            
   3541                            // Turn off 5V Power Supply.
   3542                            strcpy( (char *)tempBffr2, "Micro in Deep Sleep Mode NOW.\r\n");
   3543          #ifdef NUCLEO
   3544                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   3545          #else
   3546                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   3547          #endif
   3548                            if (Status != HAL_OK)
   3549                              return Status;
   3550                            // Sleep Micro NOW!
   3551                            //deepsleep();
   3552                            break;
   3553                        }
   3554                        break;
   3555          #endif
   3556          //++++++++++++++++++++++++++++++++++++++++++  Unknown Command.
   3557                      default:
   3558                        // Is this a BLE Operation?
   3559                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_22: (+1)
   \   00003882   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003884   0x2D00             CMP      R5,#+0
   \   00003886   0xD009             BEQ.N    ??RoadBrd_ParseString_587
   3560                        {
   3561                          // Yes...Build and Send BLE Response NOW.
   3562                          strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00003888   0x....             LDR.N    R1,??DataTable4_1
   \   0000388A   0xA80F             ADD      R0,SP,#+60
   \   0000388C   0x.... 0x....      BL       strcpy
   3563                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003890   0xA80F             ADD      R0,SP,#+60
   \   00003892   0x.... 0x....      BL       strlen
   \   00003896   0xA90F             ADD      R1,SP,#+60
   \   00003898   0x.... 0x....      BL       BGM111_Transmit
   3564                        }
   3565                        
   3566                        // ERROR if we get here.. 
   3567                        strcpy( (char *)tempBffr2, "ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_587: (+1)
   \   0000389C   0x....             LDR.N    R1,??DataTable4_43
   \   0000389E   0xA80F             ADD      R0,SP,#+60
   \   000038A0   0x.... 0x....      BL       strcpy
   3568                        break;
   3569                      } // EndSwitch
   3570                      
   3571          
   3572                      // Test last I2C Status to determine next msg.
   3573                      switch( Status )
   \                     ??RoadBrd_ParseString_27: (+1)
   \   000038A4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000038A6   0x2E00             CMP      R6,#+0
   \   000038A8   0xD008             BEQ.N    ??RoadBrd_ParseString_588
   \   000038AA   0x2E02             CMP      R6,#+2
   \   000038AC   0xD042             BEQ.N    ??RoadBrd_ParseString_589
   \   000038AE   0xD306             BCC.N    ??RoadBrd_ParseString_590
   \   000038B0   0x2E03             CMP      R6,#+3
   \   000038B2   0xD046             BEQ.N    ??RoadBrd_ParseString_591
   \   000038B4   0xE04E             B.N      ??RoadBrd_ParseString_592
   \   000038B6   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_479:
   \   000038B8   0x........         DC32     ?_182
   3574                      {
   3575                        case HAL_OK:
   3576                          break;
   \                     ??RoadBrd_ParseString_588: (+1)
   \   000038BC   0xE050             B.N      ??RoadBrd_ParseString_593
   3577                        case HAL_ERROR:
   3578                          // Determine what kind of error.
   3579                          Err_code = RoadBrd_I2C_GetError();
   \                     ??RoadBrd_ParseString_590: (+1)
   \   000038BE   0x.... 0x....      BL       RoadBrd_I2C_GetError
   \   000038C2   0x903C             STR      R0,[SP, #+240]
   3580                          switch( Err_code )
   \   000038C4   0x983C             LDR      R0,[SP, #+240]
   \   000038C6   0x2801             CMP      R0,#+1
   \   000038C8   0xD00A             BEQ.N    ??RoadBrd_ParseString_594
   \   000038CA   0x2802             CMP      R0,#+2
   \   000038CC   0xD00D             BEQ.N    ??RoadBrd_ParseString_595
   \   000038CE   0x2804             CMP      R0,#+4
   \   000038D0   0xD010             BEQ.N    ??RoadBrd_ParseString_596
   \   000038D2   0x2808             CMP      R0,#+8
   \   000038D4   0xD016             BEQ.N    ??RoadBrd_ParseString_597
   \   000038D6   0x2810             CMP      R0,#+16
   \   000038D8   0xD019             BEQ.N    ??RoadBrd_ParseString_598
   \   000038DA   0x2820             CMP      R0,#+32
   \   000038DC   0xD01C             BEQ.N    ??RoadBrd_ParseString_599
   \   000038DE   0xE020             B.N      ??RoadBrd_ParseString_600
   3581                          {
   3582                            case HAL_I2C_ERROR_BERR:
   3583                              strcpy( (char *)tempBffr2, "I2C ERROR: BERR: Bus Error reported.\r\n");
   \                     ??RoadBrd_ParseString_594: (+1)
   \   000038E0   0x....             LDR.N    R1,??DataTable4_59
   \   000038E2   0xA80F             ADD      R0,SP,#+60
   \   000038E4   0x.... 0x....      BL       strcpy
   3584                              break;
   \   000038E8   0xE01F             B.N      ??RoadBrd_ParseString_601
   3585                            case HAL_I2C_ERROR_ARLO:
   3586                              strcpy( (char *)tempBffr2, "I2C ERROR: ARLO: Arbitration lost reported.\r\n");
   \                     ??RoadBrd_ParseString_595: (+1)
   \   000038EA   0x....             LDR.N    R1,??DataTable4_60
   \   000038EC   0xA80F             ADD      R0,SP,#+60
   \   000038EE   0x.... 0x....      BL       strcpy
   3587                              break;
   \   000038F2   0xE01A             B.N      ??RoadBrd_ParseString_601
   3588                            case HAL_I2C_ERROR_AF:
   3589                              strcpy( (char *)tempBffr2, "I2C ERROR: AF: Acknowledge failure reported.\r\n");
   \                     ??RoadBrd_ParseString_596: (+1)
   \   000038F4   0x....             LDR.N    R1,??DataTable4_61
   \   000038F6   0xA80F             ADD      R0,SP,#+60
   \   000038F8   0x.... 0x....      BL       strcpy
   3590                              break;
   \   000038FC   0xE015             B.N      ??RoadBrd_ParseString_601
   \   000038FE   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_480:
   \   00003900   0x........         DC32     ?_183
   3591                            case HAL_I2C_ERROR_OVR:
   3592                              strcpy( (char *)tempBffr2, "I2C ERROR: OVR: Overrun/Underrun reported.\r\n");
   \                     ??RoadBrd_ParseString_597: (+1)
   \   00003904   0x....             LDR.N    R1,??DataTable4_62
   \   00003906   0xA80F             ADD      R0,SP,#+60
   \   00003908   0x.... 0x....      BL       strcpy
   3593                              break;
   \   0000390C   0xE00D             B.N      ??RoadBrd_ParseString_601
   3594                            case HAL_I2C_ERROR_DMA:
   3595                              strcpy( (char *)tempBffr2, "I2C ERROR: DMA: DMA Error reported.\r\n");
   \                     ??RoadBrd_ParseString_598: (+1)
   \   0000390E   0x....             LDR.N    R1,??DataTable4_63
   \   00003910   0xA80F             ADD      R0,SP,#+60
   \   00003912   0x.... 0x....      BL       strcpy
   3596                              break;
   \   00003916   0xE008             B.N      ??RoadBrd_ParseString_601
   3597                            case HAL_I2C_ERROR_TIMEOUT:
   3598                              strcpy( (char *)tempBffr2, "I2C ERROR: TIMEOUT: Timeout Error reported.\r\n");
   \                     ??RoadBrd_ParseString_599: (+1)
   \   00003918   0x....             LDR.N    R1,??DataTable4_64
   \   0000391A   0xA80F             ADD      R0,SP,#+60
   \   0000391C   0x.... 0x....      BL       strcpy
   3599                              break;
   \   00003920   0xE003             B.N      ??RoadBrd_ParseString_601
   3600                            default:
   3601                              strcpy( (char *)tempBffr2, "I2C ERROR: Unknown Error reported.\r\n");
   \                     ??RoadBrd_ParseString_600: (+1)
   \   00003922   0x....             LDR.N    R1,??DataTable4_65
   \   00003924   0xA80F             ADD      R0,SP,#+60
   \   00003926   0x.... 0x....      BL       strcpy
   3602                              break;
   3603                           
   3604                          }
   3605                          // Re-Initialize I2C....It has been corrupted.
   3606                          MX_I2C1_Reset();
   \                     ??RoadBrd_ParseString_601: (+1)
   \   0000392A   0x.... 0x....      BL       MX_I2C1_Reset
   3607                          break;
   \   0000392E   0xE017             B.N      ??RoadBrd_ParseString_593
   \                     ??RoadBrd_ParseString_481:
   \   00003930   0x........         DC32     ?_184
   3608                        case HAL_BUSY:
   3609                          strcpy( (char *)tempBffr2, "I2C BUSY: I2C reported BUSY error.\r\n");
   \                     ??RoadBrd_ParseString_589: (+1)
   \   00003934   0x....             LDR.N    R1,??DataTable4_66
   \   00003936   0xA80F             ADD      R0,SP,#+60
   \   00003938   0x.... 0x....      BL       strcpy
   3610                          // Re-Initialize I2C....It has been corrupted.
   3611                          MX_I2C1_Reset();
   \   0000393C   0x.... 0x....      BL       MX_I2C1_Reset
   3612                          break;
   \   00003940   0xE00E             B.N      ??RoadBrd_ParseString_593
   3613                        case HAL_TIMEOUT:
   3614                          strcpy( (char *)tempBffr2, "I2C TIMEOUT: I2C reported TIMEOUT.\r\n");
   \                     ??RoadBrd_ParseString_591: (+1)
   \   00003942   0x....             LDR.N    R1,??DataTable4_67
   \   00003944   0xA80F             ADD      R0,SP,#+60
   \   00003946   0x.... 0x....      BL       strcpy
   3615                          // Re-Initialize I2C....It has been corrupted.
   3616                          MX_I2C1_Reset();
   \   0000394A   0x.... 0x....      BL       MX_I2C1_Reset
   3617                          break;
   \   0000394E   0xE007             B.N      ??RoadBrd_ParseString_593
   \                     ??RoadBrd_ParseString_482:
   \   00003950   0x........         DC32     ?_185
   3618                        default:  
   3619                          strcpy( (char *)tempBffr2, "I2C ERROR: I2C reported unnown error.\r\n");
   \                     ??RoadBrd_ParseString_592: (+1)
   \   00003954   0x....             LDR.N    R1,??DataTable4_68
   \   00003956   0xA80F             ADD      R0,SP,#+60
   \   00003958   0x.... 0x....      BL       strcpy
   3620                          // Re-Initialize I2C....It has been corrupted.
   3621                          MX_I2C1_Reset();
   \   0000395C   0x.... 0x....      BL       MX_I2C1_Reset
   3622                          break;
   3623                      }
   3624                      // Send string to UART..
   3625          #ifdef NUCLEO
   3626                      Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);
   3627          #else
   3628                      Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \                     ??RoadBrd_ParseString_593: (+1)
   \   00003960   0xA90F             ADD      R1,SP,#+60
   \   00003962   0x2000             MOVS     R0,#+0
   \   00003964   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00003968   0x0006             MOVS     R6,R0
   3629          #endif
   3630                     if (Status != HAL_OK)
   \   0000396A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000396C   0x2E00             CMP      R6,#+0
   \   0000396E   0xD002             BEQ.N    ??RoadBrd_ParseString_602
   3631                        return Status;
   \   00003970   0x0030             MOVS     R0,R6
   \   00003972   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003974   0xE010             B.N      ??RoadBrd_ParseString_4
   3632                      // Send Prompt to UART..
   3633                      strcpy( (char *)tempBffr2, "\r\n\r\n> ");
   \                     ??RoadBrd_ParseString_602: (+1)
   \   00003976   0x....             LDR.N    R1,??DataTable4_69
   \   00003978   0xA80F             ADD      R0,SP,#+60
   \   0000397A   0x.... 0x....      BL       strcpy
   3634          #ifdef NUCLEO
   3635                      Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);
   3636          #else
   3637                      Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000397E   0xA90F             ADD      R1,SP,#+60
   \   00003980   0x2000             MOVS     R0,#+0
   \   00003982   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00003986   0x0006             MOVS     R6,R0
   3638          #endif
   3639                      if (Status != HAL_OK)
   \   00003988   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000398A   0x2E00             CMP      R6,#+0
   \   0000398C   0xD002             BEQ.N    ??RoadBrd_ParseString_3
   3640                        return Status;
   \   0000398E   0x0030             MOVS     R0,R6
   \   00003990   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003992   0xE001             B.N      ??RoadBrd_ParseString_4
   3641              } // EndElse ( Bypass )
   3642            return Status;
   \                     ??RoadBrd_ParseString_3: (+1)
   \   00003994   0x0030             MOVS     R0,R6
   \   00003996   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??RoadBrd_ParseString_4: (+1)
   \   00003998   0xF50D 0x6D80      ADD      SP,SP,#+1024
   \   0000399C   0xB017             ADD      SP,SP,#+92
   \   0000399E   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   \   000039A2   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_483:
   \   000039A4   0x........         DC32     ?_186
   3643          }
   3644          
   3645          /**
   3646            * @brief  This function tests the passed string to make sure it is Hex format.
   3647            * @param  char *ptr: Ptr to string to be tested. NULL terminated
   3648            * @retval int: 1: String is HEX.
   3649            *              0:   String is not HEX.
   3650            */

   \                                 In section .text, align 2, keep-with-next
   3651          int isHexNum(char *ptr)
   3652          {
   \                     isHexNum: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   3653            int Size, x, test1;
   3654            
   3655            Size = strlen(ptr);
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       strlen
   \   0000000A   0x0005             MOVS     R5,R0
   3656            test1 = 0;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x0007             MOVS     R7,R0
   3657            for (x=0; x<Size; x++)
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x0006             MOVS     R6,R0
   \                     ??isHexNum_0: (+1)
   \   00000014   0x42AE             CMP      R6,R5
   \   00000016   0xDA16             BGE.N    ??isHexNum_1
   3658            {
   3659              if (((ptr[x] <= '9') && (ptr[x] >= '0')) ||
   3660                  ((ptr[x] <= 'F') && (ptr[x] >= 'A')))
   \   00000018   0x5DA0             LDRB     R0,[R4, R6]
   \   0000001A   0x283A             CMP      R0,#+58
   \   0000001C   0xDA02             BGE.N    ??isHexNum_2
   \   0000001E   0x5DA0             LDRB     R0,[R4, R6]
   \   00000020   0x2830             CMP      R0,#+48
   \   00000022   0xDA05             BGE.N    ??isHexNum_3
   \                     ??isHexNum_2: (+1)
   \   00000024   0x5DA0             LDRB     R0,[R4, R6]
   \   00000026   0x2847             CMP      R0,#+71
   \   00000028   0xDA05             BGE.N    ??isHexNum_4
   \   0000002A   0x5DA0             LDRB     R0,[R4, R6]
   \   0000002C   0x2841             CMP      R0,#+65
   \   0000002E   0xDB02             BLT.N    ??isHexNum_4
   3661                test1 = 0;
   \                     ??isHexNum_3: (+1)
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x0007             MOVS     R7,R0
   \   00000034   0xE001             B.N      ??isHexNum_5
   3662              else
   3663                test1 = 1;
   \                     ??isHexNum_4: (+1)
   \   00000036   0x2001             MOVS     R0,#+1
   \   00000038   0x0007             MOVS     R7,R0
   3664              if (test1 == 1)
   \                     ??isHexNum_5: (+1)
   \   0000003A   0x2F01             CMP      R7,#+1
   \   0000003C   0xD101             BNE.N    ??isHexNum_6
   3665                return 0;
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0xE002             B.N      ??isHexNum_7
   3666            }
   \                     ??isHexNum_6: (+1)
   \   00000042   0x1C76             ADDS     R6,R6,#+1
   \   00000044   0xE7E6             B.N      ??isHexNum_0
   3667            return 1;
   \                     ??isHexNum_1: (+1)
   \   00000046   0x2001             MOVS     R0,#+1
   \                     ??isHexNum_7: (+1)
   \   00000048   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
   3668          }
   3669          
   3670          /**
   3671            * @brief  This function converts the passed Hex String to an Integer value.
   3672            * @param  char *ptr: Ptr to string to be converted. NULL terminated
   3673            * @retval int: -1: Error in String
   3674            *              Value converted returned.
   3675            */

   \                                 In section .text, align 2, keep-with-next
   3676          int hatoi( char *ptr )
   3677          {
   \                     hatoi: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   3678            int Size, x;
   3679            int Value = 0;
   \   00000006   0x2700             MOVS     R7,#+0
   3680            int FinalValue = 0;
   \   00000008   0xF05F 0x0800      MOVS     R8,#+0
   3681            
   3682            Size = strlen(ptr);
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       strlen
   \   00000012   0x0005             MOVS     R5,R0
   3683            for (x=0; x<Size; x++)
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x0006             MOVS     R6,R0
   \                     ??hatoi_0: (+1)
   \   00000018   0x42AE             CMP      R6,R5
   \   0000001A   0xDA1A             BGE.N    ??hatoi_1
   3684            {
   3685              if ((ptr[x] <= '9') && (ptr[x] >= '0'))
   \   0000001C   0x5DA0             LDRB     R0,[R4, R6]
   \   0000001E   0x283A             CMP      R0,#+58
   \   00000020   0xDA06             BGE.N    ??hatoi_2
   \   00000022   0x5DA0             LDRB     R0,[R4, R6]
   \   00000024   0x2830             CMP      R0,#+48
   \   00000026   0xDB03             BLT.N    ??hatoi_2
   3686                Value = ptr[x] - '0';
   \   00000028   0x5DA0             LDRB     R0,[R4, R6]
   \   0000002A   0x3830             SUBS     R0,R0,#+48
   \   0000002C   0x0007             MOVS     R7,R0
   \   0000002E   0xE00C             B.N      ??hatoi_3
   3687              else if((ptr[x] <= 'F') && (ptr[x] >= 'A'))
   \                     ??hatoi_2: (+1)
   \   00000030   0x5DA0             LDRB     R0,[R4, R6]
   \   00000032   0x2847             CMP      R0,#+71
   \   00000034   0xDA06             BGE.N    ??hatoi_4
   \   00000036   0x5DA0             LDRB     R0,[R4, R6]
   \   00000038   0x2841             CMP      R0,#+65
   \   0000003A   0xDB03             BLT.N    ??hatoi_4
   3688                Value = ptr[x] - 'A' + 10;
   \   0000003C   0x5DA0             LDRB     R0,[R4, R6]
   \   0000003E   0x3837             SUBS     R0,R0,#+55
   \   00000040   0x0007             MOVS     R7,R0
   \   00000042   0xE002             B.N      ??hatoi_3
   3689              else
   3690                return -1;
   \                     ??hatoi_4: (+1)
   \   00000044   0xF05F 0x30FF      MOVS     R0,#-1
   \   00000048   0xE004             B.N      ??hatoi_5
   3691              FinalValue = FinalValue*16 + Value;
   \                     ??hatoi_3: (+1)
   \   0000004A   0xEB17 0x1808      ADDS     R8,R7,R8, LSL #+4
   3692            }
   \   0000004E   0x1C76             ADDS     R6,R6,#+1
   \   00000050   0xE7E2             B.N      ??hatoi_0
   3693            return FinalValue;
   \                     ??hatoi_1: (+1)
   \   00000052   0x4640             MOV      R0,R8
   \                     ??hatoi_5: (+1)
   \   00000054   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   3694          }
   3695          
   3696          

   \                                 In section .text, align 2, keep-with-next
   3697          bool Tst_Bypass( void)
   3698          {
   3699            return Bypass;
   \                     Tst_Bypass: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable4_53
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return
   3700          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     ParseString

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x........         DC32     ?_187

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     ?_188

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x........         DC32     ?_189

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x........         DC32     ?_190

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x........         DC32     ?_191

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x........         DC32     ?_192

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0x........         DC32     ?_193

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   0x........         DC32     ?_194

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \   00000000   0x........         DC32     ?_195

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     ?_196

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x........         DC32     ?_24

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x........         DC32     ?_197

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x........         DC32     ?_198

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x........         DC32     ?_199

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x........         DC32     ?_200

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   0x........         DC32     ?_201

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \   00000000   0x........         DC32     ?_202

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \   00000000   0x........         DC32     ?_203

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_9:
   \   00000000   0x........         DC32     ?_204

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_10:
   \   00000000   0x........         DC32     ?_205

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_11:
   \   00000000   0x........         DC32     ?_206

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_12:
   \   00000000   0x........         DC32     ?_207

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_13:
   \   00000000   0x........         DC32     ?_208

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_14:
   \   00000000   0x........         DC32     ?_209

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_15:
   \   00000000   0x........         DC32     ?_116

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_16:
   \   00000000   0x........         DC32     ?_210

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_17:
   \   00000000   0x........         DC32     ?_211

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_18:
   \   00000000   0x........         DC32     ?_212

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_19:
   \   00000000   0x........         DC32     ?_213

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_20:
   \   00000000   0x........         DC32     ?_214

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_21:
   \   00000000   0x........         DC32     ?_215

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_22:
   \   00000000   0x........         DC32     ?_216

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_23:
   \   00000000   0x........         DC32     ?_217

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_24:
   \   00000000   0x........         DC32     ?_218

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_25:
   \   00000000   0x........         DC32     ?_219

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_26:
   \   00000000   0x........         DC32     ?_220

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_27:
   \   00000000   0x........         DC32     ?_221

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_28:
   \   00000000   0x........         DC32     ?_222

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_29:
   \   00000000   0x........         DC32     ?_223

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_30:
   \   00000000   0x........         DC32     ?_224

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_31:
   \   00000000   0x........         DC32     ?_225

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_32:
   \   00000000   0x41200000         DC32     0x41200000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_33:
   \   00000000   0x........         DC32     ?_226

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_34:
   \   00000000   0x........         DC32     ?_227

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_35:
   \   00000000   0x........         DC32     ?_228

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_36:
   \   00000000   0x........         DC32     ?_229

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_37:
   \   00000000   0x........         DC32     ?_230

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_38:
   \   00000000   0x........         DC32     ?_231

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_39:
   \   00000000   0x........         DC32     ?_232

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_40:
   \   00000000   0x........         DC32     ?_233

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_41:
   \   00000000   0x........         DC32     ?_234

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_42:
   \   00000000   0x........         DC32     ?_235

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_43:
   \   00000000   0x........         DC32     ?_40

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_44:
   \   00000000   0x........         DC32     ?_236

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_45:
   \   00000000   0x........         DC32     ?_237

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_46:
   \   00000000   0x........         DC32     ?_238

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_47:
   \   00000000   0x........         DC32     ?_239

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_48:
   \   00000000   0x........         DC32     ?_240

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_49:
   \   00000000   0x........         DC32     ?_241

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_50:
   \   00000000   0x........         DC32     ?_242

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_51:
   \   00000000   0x........         DC32     ?_243

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_52:
   \   00000000   0x........         DC32     ?_244

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_53:
   \   00000000   0x........         DC32     Bypass

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_54:
   \   00000000   0x........         DC32     ?_245

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_55:
   \   00000000   0x........         DC32     ?_246

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_56:
   \   00000000   0x........         DC32     ?_247

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_57:
   \   00000000   0x........         DC32     ?_248

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_58:
   \   00000000   0x........         DC32     ?_249

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_59:
   \   00000000   0x........         DC32     ?_250

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_60:
   \   00000000   0x........         DC32     ?_251

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_61:
   \   00000000   0x........         DC32     ?_252

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_62:
   \   00000000   0x........         DC32     ?_253

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_63:
   \   00000000   0x........         DC32     ?_254

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_64:
   \   00000000   0x........         DC32     ?_255

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_65:
   \   00000000   0x........         DC32     ?_256

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_66:
   \   00000000   0x........         DC32     ?_257

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_67:
   \   00000000   0x........         DC32     ?_258

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_68:
   \   00000000   0x........         DC32     ?_259

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_69:
   \   00000000   0x........         DC32     ?_260

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x0D 0x0A          DC8 0DH, 0AH, 0DH, 0AH, 20H, 54H, 2EH, 2EH
   \              0x0D 0x0A    
   \              0x20 0x54    
   \              0x2E 0x2E    
   \   00000008   0x2E 0x2E          DC8 2EH, 2EH, 2EH, 2EH, 2EH, 2EH, 54H, 45H
   \              0x2E 0x2E    
   \              0x2E 0x2E    
   \              0x54 0x45    
   \   00000010   0x52 0x4D          DC8 52H, 4DH, 49H, 4EH, 41H, 54H, 49H, 4EH
   \              0x49 0x4E    
   \              0x41 0x54    
   \              0x49 0x4E    
   \   00000018   0x47 0x20          DC8 47H, 20H, 4DH, 4FH, 4EH, 49H, 54H, 4FH
   \              0x4D 0x4F    
   \              0x4E 0x49    
   \              0x54 0x4F    
   \   00000020   0x52 0x20          DC8 52H, 20H, 4DH, 4FH, 44H, 45H, 2EH, 2EH
   \              0x4D 0x4F    
   \              0x44 0x45    
   \              0x2E 0x2E    
   \   00000028   0x2E 0x2E          DC8 2EH, 2EH, 2EH, 2EH, 2EH, 2EH, 2EH, 0DH
   \              0x2E 0x2E    
   \              0x2E 0x2E    
   \              0x2E 0x0D    
   \   00000030   0x0A 0x0D          DC8 0AH, 0DH, 0AH, 3EH, 20H, 0
   \              0x0A 0x3E    
   \              0x20 0x00    
   \   00000036   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_RDSNDBFFR_FILL</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x52 0x44    
   \              0x53 0x4E    
   \              0x44 0x42    
   \              0x46 0x46    
   \              0x52 0x5F    
   \              0x46 0x49    
   \              0x4C 0x4C    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x52 0x6F          DC8 52H, 6FH, 61H, 64H, 20H, 53H, 6FH, 75H
   \              0x61 0x64    
   \              0x20 0x53    
   \              0x6F 0x75    
   \   00000008   0x6E 0x64          DC8 6EH, 64H, 3AH, 20H, 52H, 6FH, 61H, 64H
   \              0x3A 0x20    
   \              0x52 0x6F    
   \              0x61 0x64    
   \   00000010   0x20 0x53          DC8 20H, 53H, 6FH, 75H, 6EH, 64H, 20H, 6CH
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x20 0x6C    
   \   00000018   0x6F 0x61          DC8 6FH, 61H, 64H, 65H, 64H, 2CH, 20H, 70H
   \              0x64 0x65    
   \              0x64 0x2C    
   \              0x20 0x70    
   \   00000020   0x72 0x6F          DC8 72H, 6FH, 63H, 65H, 73H, 73H, 65H, 64H
   \              0x63 0x65    
   \              0x73 0x73    
   \              0x65 0x64    
   \   00000028   0x2C 0x20          DC8 2CH, 20H, 61H, 6EH, 64H, 20H, 73H, 65H
   \              0x61 0x6E    
   \              0x64 0x20    
   \              0x73 0x65    
   \   00000030   0x6E 0x74          DC8 6EH, 74H, 20H, 74H, 6FH, 20H, 46H, 46H
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x46 0x46    
   \   00000038   0x54 0x20          DC8 54H, 20H, 42H, 69H, 6EH, 73H, 2EH, 0DH
   \              0x42 0x69    
   \              0x6E 0x73    
   \              0x2E 0x0D    
   \   00000040   0x0A 0x00          DC8 0AH, 0
   \   00000042   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x52 0x6F          DC8 "Road Sound: FFT Measurements 0-15.\015\012"
   \              0x61 0x64    
   \              0x20 0x53    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x3A 0x20    
   \              0x46 0x46    
   \              0x54 0x20    
   \              0x4D 0x65    
   \              0x61 0x73    
   \              0x75 0x72    
   \              0x65 0x6D    
   \              0x65 0x6E    
   \              0x74 0x73    
   \              0x20 0x30    
   \              0x2D 0x31    
   \              0x35 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_4:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_FFT0-15:%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x46    
   \              0x46 0x54    
   \              0x30 0x2D    
   \              0x31 0x35    
   \              0x3A 0x25    
   \              0x73 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_5:
   \   00000000   0x20 0x20          DC8 "     FFT Measurements 0-15: "
   \              0x20 0x20    
   \              0x20 0x46    
   \              0x46 0x54    
   \              0x20 0x4D    
   \              0x65 0x61    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x6D 0x65    
   \              0x6E 0x74    
   \              0x73 0x20    
   \              0x30 0x2D    
   \              0x31 0x35    
   \              0x3A 0x20    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \   00000000   0x0D 0x0A          DC8 "\015\012"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_7:
   \   00000000   0x52 0x6F          DC8 "Road Sound: FFT Measurements 16-31.\015\012"
   \              0x61 0x64    
   \              0x20 0x53    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x3A 0x20    
   \              0x46 0x46    
   \              0x54 0x20    
   \              0x4D 0x65    
   \              0x61 0x73    
   \              0x75 0x72    
   \              0x65 0x6D    
   \              0x65 0x6E    
   \              0x74 0x73    
   \              0x20 0x31    
   \              0x36 0x2D    
   \              0x33 0x31    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_8:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_FFT16-31:%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x46    
   \              0x46 0x54    
   \              0x31 0x36    
   \              0x2D 0x33    
   \              0x31 0x3A    
   \              0x25 0x73    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_9:
   \   00000000   0x20 0x20          DC8 "     FFT Measurements 16-31: "
   \              0x20 0x20    
   \              0x20 0x46    
   \              0x46 0x54    
   \              0x20 0x4D    
   \              0x65 0x61    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x6D 0x65    
   \              0x6E 0x74    
   \              0x73 0x20    
   \              0x31 0x36    
   \              0x2D 0x33    
   \              0x31 0x3A    
   \              0x20 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_10:
   \   00000000   0x52 0x6F          DC8 "Road Sound: FFT Measurements 32-47.\015\012"
   \              0x61 0x64    
   \              0x20 0x53    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x3A 0x20    
   \              0x46 0x46    
   \              0x54 0x20    
   \              0x4D 0x65    
   \              0x61 0x73    
   \              0x75 0x72    
   \              0x65 0x6D    
   \              0x65 0x6E    
   \              0x74 0x73    
   \              0x20 0x33    
   \              0x32 0x2D    
   \              0x34 0x37    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_11:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_FFT32-47:%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x46    
   \              0x46 0x54    
   \              0x33 0x32    
   \              0x2D 0x34    
   \              0x37 0x3A    
   \              0x25 0x73    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_12:
   \   00000000   0x20 0x20          DC8 "     FFT Measurements 32-47: "
   \              0x20 0x20    
   \              0x20 0x46    
   \              0x46 0x54    
   \              0x20 0x4D    
   \              0x65 0x61    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x6D 0x65    
   \              0x6E 0x74    
   \              0x73 0x20    
   \              0x33 0x32    
   \              0x2D 0x34    
   \              0x37 0x3A    
   \              0x20 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_13:
   \   00000000   0x52 0x6F          DC8 "Road Sound: FFT Measurements 48-63.\015\012"
   \              0x61 0x64    
   \              0x20 0x53    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x3A 0x20    
   \              0x46 0x46    
   \              0x54 0x20    
   \              0x4D 0x65    
   \              0x61 0x73    
   \              0x75 0x72    
   \              0x65 0x6D    
   \              0x65 0x6E    
   \              0x74 0x73    
   \              0x20 0x34    
   \              0x38 0x2D    
   \              0x36 0x33    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_14:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_FFT48-63:%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x46    
   \              0x46 0x54    
   \              0x34 0x38    
   \              0x2D 0x36    
   \              0x33 0x3A    
   \              0x25 0x73    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_15:
   \   00000000   0x20 0x20          DC8 "     FFT Measurements 48-63: "
   \              0x20 0x20    
   \              0x20 0x46    
   \              0x46 0x54    
   \              0x20 0x4D    
   \              0x65 0x61    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x6D 0x65    
   \              0x6E 0x74    
   \              0x73 0x20    
   \              0x34 0x38    
   \              0x2D 0x36    
   \              0x33 0x3A    
   \              0x20 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_16:
   \   00000000   0x52 0x6F          DC8 "Road Sound: Results of save Buffer.\015\012"
   \              0x61 0x64    
   \              0x20 0x53    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x3A 0x20    
   \              0x52 0x65    
   \              0x73 0x75    
   \              0x6C 0x74    
   \              0x73 0x20    
   \              0x6F 0x66    
   \              0x20 0x73    
   \              0x61 0x76    
   \              0x65 0x20    
   \              0x42 0x75    
   \              0x66 0x66    
   \              0x65 0x72    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_17:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_FFTBFFR_DUMP:</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x46    
   \              0x46 0x54    
   \              0x42 0x46    
   \              0x46 0x52    
   \              0x5F 0x44    
   \              0x55 0x4D    
   \              0x50 0x3A    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 1
   \   00000000   0x00               DC8 ""

   \                                 In section .rodata, align 4
   \                     ?_19:
   \   00000000   0x25 0x30          DC8 "%04d "
   \              0x34 0x64    
   \              0x20 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_20:
   \   00000000   0x3C 0x2F          DC8 "</STATUS>"
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_21:
   \   00000000   0x20 0x20          DC8 "     ---COMPLETE---"
   \              0x20 0x20    
   \              0x20 0x2D    
   \              0x2D 0x2D    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2D 0x2D    
   \              0x2D 0x00    

   \                                 In section .rodata, align 4
   \                     ?_22:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_FFTCLR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x46    
   \              0x46 0x54    
   \              0x43 0x4C    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_23:
   \   00000000   0x52 0x6F          DC8 "Road Sound: All buffers cleared.\015\012"
   \              0x61 0x64    
   \              0x20 0x53    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x3A 0x20    
   \              0x41 0x6C    
   \              0x6C 0x20    
   \              0x62 0x75    
   \              0x66 0x66    
   \              0x65 0x72    
   \              0x73 0x20    
   \              0x63 0x6C    
   \              0x65 0x61    
   \              0x72 0x65    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_24:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_NOSUPPORT</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x4E 0x4F    
   \              0x53 0x55    
   \              0x50 0x50    
   \              0x4F 0x52    
   \              0x54 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_25:
   \   00000000   0x49 0x6E          DC8 "Initialize Barometer Sensor Passed.\015\012"
   \              0x69 0x74    
   \              0x69 0x61    
   \              0x6C 0x69    
   \              0x7A 0x65    
   \              0x20 0x42    
   \              0x61 0x72    
   \              0x6F 0x6D    
   \              0x65 0x74    
   \              0x65 0x72    
   \              0x20 0x53    
   \              0x65 0x6E    
   \              0x73 0x6F    
   \              0x72 0x20    
   \              0x50 0x61    
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_26:
   \   00000000   0x49 0x6E          DC8 "Initialize Barometer Sensor FAILED.\015\012"
   \              0x69 0x74    
   \              0x69 0x61    
   \              0x6C 0x69    
   \              0x7A 0x65    
   \              0x20 0x42    
   \              0x61 0x72    
   \              0x6F 0x6D    
   \              0x65 0x74    
   \              0x65 0x72    
   \              0x20 0x53    
   \              0x65 0x6E    
   \              0x73 0x6F    
   \              0x72 0x20    
   \              0x46 0x41    
   \              0x49 0x4C    
   \              0x45 0x44    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_27:
   \   00000000   0x41 0x36          DC8 "A6 Command...Read Pressure Passed.\015\012"
   \              0x20 0x43    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x2E    
   \              0x2E 0x52    
   \              0x65 0x61    
   \              0x64 0x20    
   \              0x50 0x72    
   \              0x65 0x73    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x20 0x50    
   \              0x61 0x73    
   \              0x73 0x65    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_28:
   \   00000000   0x20 0x50          DC8 20H, 50H, 52H, 45H, 53H, 53H, 55H, 52H
   \              0x52 0x45    
   \              0x53 0x53    
   \              0x55 0x52    
   \   00000008   0x45 0x28          DC8 45H, 28H, 50H, 52H, 45H, 53H, 53H, 5FH
   \              0x50 0x52    
   \              0x45 0x53    
   \              0x53 0x5F    
   \   00000010   0x4F 0x55          DC8 4FH, 55H, 54H, 5FH, 48H, 2EH, 2EH, 2EH
   \              0x54 0x5F    
   \              0x48 0x2E    
   \              0x2E 0x2E    
   \   00000018   0x50 0x52          DC8 50H, 52H, 45H, 53H, 53H, 5FH, 4FH, 55H
   \              0x45 0x53    
   \              0x53 0x5F    
   \              0x4F 0x55    
   \   00000020   0x54 0x5F          DC8 54H, 5FH, 4CH, 2EH, 2EH, 2EH, 50H, 52H
   \              0x4C 0x2E    
   \              0x2E 0x2E    
   \              0x50 0x52    
   \   00000028   0x45 0x53          DC8 45H, 53H, 53H, 5FH, 4FH, 55H, 54H, 5FH
   \              0x53 0x5F    
   \              0x4F 0x55    
   \              0x54 0x5F    
   \   00000030   0x58 0x4C          DC8 58H, 4CH, 29H, 0DH, 0AH, 0
   \              0x29 0x0D    
   \              0x0A 0x00    
   \   00000036   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_29:
   \   00000000   0x20 0x50          DC8 " PRESSURE: %s/%s\015\012"
   \              0x52 0x45    
   \              0x53 0x53    
   \              0x55 0x52    
   \              0x45 0x3A    
   \              0x20 0x25    
   \              0x73 0x2F    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_30:
   \   00000000   0x20 0x50          DC8 " PRESSURE:  "
   \              0x52 0x45    
   \              0x53 0x53    
   \              0x55 0x52    
   \              0x45 0x3A    
   \              0x20 0x20    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_31:
   \   00000000   0x20 0x20          DC8 "  -  %08x\015\012"
   \              0x2D 0x20    
   \              0x20 0x25    
   \              0x30 0x38    
   \              0x78 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_32:
   \   00000000   0x41 0x36          DC8 "A6 Command...Read Pressure FAILED.\015\012"
   \              0x20 0x43    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x2E    
   \              0x2E 0x52    
   \              0x65 0x61    
   \              0x64 0x20    
   \              0x50 0x72    
   \              0x65 0x73    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x20 0x46    
   \              0x41 0x49    
   \              0x4C 0x45    
   \              0x44 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_33:
   \   00000000   0x41 0x38          DC8 "A8 Command...Read Temperature Passed.\015\012"
   \              0x20 0x43    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x2E    
   \              0x2E 0x52    
   \              0x65 0x61    
   \              0x64 0x20    
   \              0x54 0x65    
   \              0x6D 0x70    
   \              0x65 0x72    
   \              0x61 0x74    
   \              0x75 0x72    
   \              0x65 0x20    
   \              0x50 0x61    
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_34:
   \   00000000   0x20 0x20          DC8 "     TEMP DATA: "
   \              0x20 0x20    
   \              0x20 0x54    
   \              0x45 0x4D    
   \              0x50 0x20    
   \              0x44 0x41    
   \              0x54 0x41    
   \              0x3A 0x20    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_35:
   \   00000000   0x20 0x20          DC8 "     TEMP DATA(Decimal): %d\015\012"
   \              0x20 0x20    
   \              0x20 0x54    
   \              0x45 0x4D    
   \              0x50 0x20    
   \              0x44 0x41    
   \              0x54 0x41    
   \              0x28 0x44    
   \              0x65 0x63    
   \              0x69 0x6D    
   \              0x61 0x6C    
   \              0x29 0x3A    
   \              0x20 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_36:
   \   00000000   0x20 0x20          DC8 "     TempC: "
   \              0x20 0x20    
   \              0x20 0x54    
   \              0x65 0x6D    
   \              0x70 0x43    
   \              0x3A 0x20    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_37:
   \   00000000   0x20 0x20          DC8 "     TempF: "
   \              0x20 0x20    
   \              0x20 0x54    
   \              0x65 0x6D    
   \              0x70 0x46    
   \              0x3A 0x20    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_38:
   \   00000000   0x42 0x61          DC8 "Barometer Sensor: WHO_AM_I Passed.\015\012"
   \              0x72 0x6F    
   \              0x6D 0x65    
   \              0x74 0x65    
   \              0x72 0x20    
   \              0x53 0x65    
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x3A 0x20    
   \              0x57 0x48    
   \              0x4F 0x5F    
   \              0x41 0x4D    
   \              0x5F 0x49    
   \              0x20 0x50    
   \              0x61 0x73    
   \              0x73 0x65    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_39:
   \   00000000   0x42 0x61          DC8 "Barometer Sensor: WHO_AM_I FAILED.\015\012"
   \              0x72 0x6F    
   \              0x6D 0x65    
   \              0x74 0x65    
   \              0x72 0x20    
   \              0x53 0x65    
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x3A 0x20    
   \              0x57 0x48    
   \              0x4F 0x5F    
   \              0x41 0x4D    
   \              0x5F 0x49    
   \              0x20 0x46    
   \              0x41 0x49    
   \              0x4C 0x45    
   \              0x44 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_40:
   \   00000000   0x45 0x52          DC8 "ERROR: Not a legal command.\015\012"
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x61    
   \              0x20 0x6C    
   \              0x65 0x67    
   \              0x61 0x6C    
   \              0x20 0x63    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_41:
   \   00000000   0x56 0x6F          DC8 "Voltage Monitor/Shunt Voltage...\015\012"
   \              0x6C 0x74    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x4D 0x6F    
   \              0x6E 0x69    
   \              0x74 0x6F    
   \              0x72 0x2F    
   \              0x53 0x68    
   \              0x75 0x6E    
   \              0x74 0x20    
   \              0x56 0x6F    
   \              0x6C 0x74    
   \              0x61 0x67    
   \              0x65 0x2E    
   \              0x2E 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_42:
   \   00000000   0x20 0x20          DC8 "     Thermistor DATA: %s   %s/%s   %s/%s   %d\015\012"
   \              0x20 0x20    
   \              0x20 0x54    
   \              0x68 0x65    
   \              0x72 0x6D    
   \              0x69 0x73    
   \              0x74 0x6F    
   \              0x72 0x20    
   \              0x44 0x41    
   \              0x54 0x41    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x20 0x20    
   \              0x20 0x25    
   \              0x73 0x2F    
   \              0x25 0x73    
   \              0x20 0x20    
   \              0x20 0x25    
   \              0x73 0x2F    
   \              0x25 0x73    
   \              0x20 0x20    
   \              0x20 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_43:
   \   00000000   0x20 0x20          DC8 "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\015\012"
   \              0x20 0x20    
   \              0x20 0x47    
   \              0x72 0x69    
   \              0x64 0x20    
   \              0x33 0x33    
   \              0x20 0x44    
   \              0x41 0x54    
   \              0x41 0x3A    
   \              0x20 0x25    
   \              0x73 0x20    
   \              0x20 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x20    
   \              0x20 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x20    
   \              0x20 0x20    
   \              0x25 0x64    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_44:
   \   00000000   0x20 0x20          DC8 "     SHNT VLTG DATA: "
   \              0x20 0x20    
   \              0x20 0x53    
   \              0x48 0x4E    
   \              0x54 0x20    
   \              0x56 0x4C    
   \              0x54 0x47    
   \              0x20 0x44    
   \              0x41 0x54    
   \              0x41 0x3A    
   \              0x20 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_45:
   \   00000000   0x20 0x20          DC8 "     COMPLETE.\015\012"
   \              0x20 0x20    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_46:
   \   00000000   0x43 0x6F          DC8 43H, 6FH, 6FH, 6CH, 20H, 45H, 79H, 65H
   \              0x6F 0x6C    
   \              0x20 0x45    
   \              0x79 0x65    
   \   00000008   0x2F 0x47          DC8 2FH, 47H, 72H, 69H, 64H, 20H, 45H, 79H
   \              0x72 0x69    
   \              0x64 0x20    
   \              0x45 0x79    
   \   00000010   0x65 0x20          DC8 65H, 20H, 53H, 65H, 6EH, 73H, 6FH, 72H
   \              0x53 0x65    
   \              0x6E 0x73    
   \              0x6F 0x72    
   \   00000018   0x3A 0x20          DC8 3AH, 20H, 49H, 6EH, 69H, 74H, 69H, 61H
   \              0x49 0x6E    
   \              0x69 0x74    
   \              0x69 0x61    
   \   00000020   0x6C 0x69          DC8 6CH, 69H, 7AH, 61H, 74H, 69H, 6FH, 6EH
   \              0x7A 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \   00000028   0x20 0x43          DC8 20H, 43H, 6FH, 6DH, 70H, 6CH, 65H, 74H
   \              0x6F 0x6D    
   \              0x70 0x6C    
   \              0x65 0x74    
   \   00000030   0x65 0x2E          DC8 65H, 2EH, 0DH, 0AH, 0
   \              0x0D 0x0A    
   \              0x00         
   \   00000035   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_47:
   \   00000000   0x43 0x6F          DC8 "Cool Eye/Grid Eye Sensor: Reset Complete.\015\012"
   \              0x6F 0x6C    
   \              0x20 0x45    
   \              0x79 0x65    
   \              0x2F 0x47    
   \              0x72 0x69    
   \              0x64 0x20    
   \              0x45 0x79    
   \              0x65 0x20    
   \              0x53 0x65    
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x3A 0x20    
   \              0x52 0x65    
   \              0x73 0x65    
   \              0x74 0x20    
   \              0x43 0x6F    
   \              0x6D 0x70    
   \              0x6C 0x65    
   \              0x74 0x65    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_48:
   \   00000000   0x56 0x6F          DC8 "Voltage Monitor/Read Bus Voltage...\015\012"
   \              0x6C 0x74    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x4D 0x6F    
   \              0x6E 0x69    
   \              0x74 0x6F    
   \              0x72 0x2F    
   \              0x52 0x65    
   \              0x61 0x64    
   \              0x20 0x42    
   \              0x75 0x73    
   \              0x20 0x56    
   \              0x6F 0x6C    
   \              0x74 0x61    
   \              0x67 0x65    
   \              0x2E 0x2E    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_49:
   \   00000000   0x20 0x20          DC8 "     BUS VOLTAGE DATA: "
   \              0x20 0x20    
   \              0x20 0x42    
   \              0x55 0x53    
   \              0x20 0x56    
   \              0x4F 0x4C    
   \              0x54 0x41    
   \              0x47 0x45    
   \              0x20 0x44    
   \              0x41 0x54    
   \              0x41 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_50:
   \   00000000   0x20 0x20          DC8 "     Bus Voltage: %s/%s\015\012"
   \              0x20 0x20    
   \              0x20 0x42    
   \              0x75 0x73    
   \              0x20 0x56    
   \              0x6F 0x6C    
   \              0x74 0x61    
   \              0x67 0x65    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x0D    
   \              0x0A 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_51:
   \   00000000   0x56 0x6F          DC8 "Voltage Monitor: Initialization Complete.\015\012"
   \              0x6C 0x74    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x4D 0x6F    
   \              0x6E 0x69    
   \              0x74 0x6F    
   \              0x72 0x3A    
   \              0x20 0x49    
   \              0x6E 0x69    
   \              0x74 0x69    
   \              0x61 0x6C    
   \              0x69 0x7A    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x43 0x6F    
   \              0x6D 0x70    
   \              0x6C 0x65    
   \              0x74 0x65    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_52:
   \   00000000   0x20 0x20          DC8 "     Shunt Voltage: %s/%s\015\012"
   \              0x20 0x20    
   \              0x20 0x53    
   \              0x68 0x75    
   \              0x6E 0x74    
   \              0x20 0x56    
   \              0x6F 0x6C    
   \              0x74 0x61    
   \              0x67 0x65    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_53:
   \   00000000   0x56 0x6F          DC8 "Voltage Monitor/Read Current...\015\012"
   \              0x6C 0x74    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x4D 0x6F    
   \              0x6E 0x69    
   \              0x74 0x6F    
   \              0x72 0x2F    
   \              0x52 0x65    
   \              0x61 0x64    
   \              0x20 0x43    
   \              0x75 0x72    
   \              0x72 0x65    
   \              0x6E 0x74    
   \              0x2E 0x2E    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_54:
   \   00000000   0x20 0x20          DC8 "     CURRENT DATA: "
   \              0x20 0x20    
   \              0x20 0x43    
   \              0x55 0x52    
   \              0x52 0x45    
   \              0x4E 0x54    
   \              0x20 0x44    
   \              0x41 0x54    
   \              0x41 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_55:
   \   00000000   0x20 0x20          DC8 "     Current: %s/%s\015\012"
   \              0x20 0x20    
   \              0x20 0x43    
   \              0x75 0x72    
   \              0x72 0x65    
   \              0x6E 0x74    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x0D    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_56:
   \   00000000   0x56 0x6F          DC8 "Voltage Monitor/Read Power...\015\012"
   \              0x6C 0x74    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x4D 0x6F    
   \              0x6E 0x69    
   \              0x74 0x6F    
   \              0x72 0x2F    
   \              0x52 0x65    
   \              0x61 0x64    
   \              0x20 0x50    
   \              0x6F 0x77    
   \              0x65 0x72    
   \              0x2E 0x2E    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_57:
   \   00000000   0x20 0x20          DC8 "     POWER DATA: "
   \              0x20 0x20    
   \              0x20 0x50    
   \              0x4F 0x57    
   \              0x45 0x52    
   \              0x20 0x44    
   \              0x41 0x54    
   \              0x41 0x3A    
   \              0x20 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_58:
   \   00000000   0x20 0x20          DC8 "     Power: %s/%s\015\012"
   \              0x20 0x20    
   \              0x20 0x50    
   \              0x6F 0x77    
   \              0x65 0x72    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_59:
   \   00000000   0x48 0x75          DC8 "Humidity SENSOR...\015\012"
   \              0x6D 0x69    
   \              0x64 0x69    
   \              0x74 0x79    
   \              0x20 0x53    
   \              0x45 0x4E    
   \              0x53 0x4F    
   \              0x52 0x2E    
   \              0x2E 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_60:
   \   00000000   0x20 0x20          DC8 "     Humidity DATA: "
   \              0x20 0x20    
   \              0x20 0x48    
   \              0x75 0x6D    
   \              0x69 0x64    
   \              0x69 0x74    
   \              0x79 0x20    
   \              0x44 0x41    
   \              0x54 0x41    
   \              0x3A 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_61:
   \   00000000   0x20 0x20          DC8 "     Humidity DATA(Decimal): %d\015\012"
   \              0x20 0x20    
   \              0x20 0x48    
   \              0x75 0x6D    
   \              0x69 0x64    
   \              0x69 0x74    
   \              0x79 0x20    
   \              0x44 0x41    
   \              0x54 0x41    
   \              0x28 0x44    
   \              0x65 0x63    
   \              0x69 0x6D    
   \              0x61 0x6C    
   \              0x29 0x3A    
   \              0x20 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_62:
   \   00000000   0x20 0x20          DC8 "     Humidity: %s/%s\015\012"
   \              0x20 0x20    
   \              0x20 0x48    
   \              0x75 0x6D    
   \              0x69 0x64    
   \              0x69 0x74    
   \              0x79 0x3A    
   \              0x20 0x25    
   \              0x73 0x2F    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_63:
   \   00000000   0x48 0x75          DC8 "Humidity Sensor: Initialization Complete.\015\012"
   \              0x6D 0x69    
   \              0x64 0x69    
   \              0x74 0x79    
   \              0x20 0x53    
   \              0x65 0x6E    
   \              0x73 0x6F    
   \              0x72 0x3A    
   \              0x20 0x49    
   \              0x6E 0x69    
   \              0x74 0x69    
   \              0x61 0x6C    
   \              0x69 0x7A    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x43 0x6F    
   \              0x6D 0x70    
   \              0x6C 0x65    
   \              0x74 0x65    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_64:
   \   00000000   0x20 0x20          DC8 "     Humidity: "
   \              0x20 0x20    
   \              0x20 0x48    
   \              0x75 0x6D    
   \              0x69 0x64    
   \              0x69 0x74    
   \              0x79 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_65:
   \   00000000   0x54 0x42          DC8 "TBD: Read Temp and Pressure NOT IMPLEMENTED\015\012"
   \              0x44 0x3A    
   \              0x20 0x52    
   \              0x65 0x61    
   \              0x64 0x20    
   \              0x54 0x65    
   \              0x6D 0x70    
   \              0x20 0x61    
   \              0x6E 0x64    
   \              0x20 0x50    
   \              0x72 0x65    
   \              0x73 0x73    
   \              0x75 0x72    
   \              0x65 0x20    
   \              0x4E 0x4F    
   \              0x54 0x20    
   \              0x49 0x4D    
   \              0x50 0x4C    
   \              0x45 0x4D    
   \              0x45 0x4E    
   \              0x54 0x45    
   \              0x44 0x0D    
   \              0x0A 0x00    
   \   0000002E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_66:
   \   00000000   0x4E 0x4F          DC8 "NO Action...(0x00).\015\012"
   \              0x20 0x41    
   \              0x63 0x74    
   \              0x69 0x6F    
   \              0x6E 0x2E    
   \              0x2E 0x2E    
   \              0x28 0x30    
   \              0x78 0x30    
   \              0x30 0x29    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_67:
   \   00000000   0x54 0x45          DC8 "TEMP SENSOR...\015\012"
   \              0x4D 0x50    
   \              0x20 0x53    
   \              0x45 0x4E    
   \              0x53 0x4F    
   \              0x52 0x2E    
   \              0x2E 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_68:
   \   00000000   0x20 0x20          DC8 "     TempC: %s/%s     TempF: %s/%s\015\012"
   \              0x20 0x20    
   \              0x20 0x54    
   \              0x65 0x6D    
   \              0x70 0x43    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x54 0x65    
   \              0x6D 0x70    
   \              0x46 0x3A    
   \              0x20 0x25    
   \              0x73 0x2F    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_69:
   \   00000000   0x52 0x47          DC8 "RGB Color Light Sensor...\015\012"
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \              0x72 0x20    
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \              0x53 0x65    
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x2E 0x2E    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_70:
   \   00000000   0x20 0x52          DC8 20H, 52H, 47H, 42H, 28H, 52H, 45H, 44H
   \              0x47 0x42    
   \              0x28 0x52    
   \              0x45 0x44    
   \   00000008   0x6D 0x73          DC8 6DH, 73H, 62H, 2CH, 52H, 45H, 44H, 6CH
   \              0x62 0x2C    
   \              0x52 0x45    
   \              0x44 0x6C    
   \   00000010   0x73 0x62          DC8 73H, 62H, 2CH, 47H, 52H, 45H, 45H, 4EH
   \              0x2C 0x47    
   \              0x52 0x45    
   \              0x45 0x4E    
   \   00000018   0x6D 0x73          DC8 6DH, 73H, 62H, 2CH, 47H, 52H, 45H, 45H
   \              0x62 0x2C    
   \              0x47 0x52    
   \              0x45 0x45    
   \   00000020   0x4E 0x6C          DC8 4EH, 6CH, 73H, 62H, 2CH, 42H, 4CH, 55H
   \              0x73 0x62    
   \              0x2C 0x42    
   \              0x4C 0x55    
   \   00000028   0x45 0x6D          DC8 45H, 6DH, 73H, 62H, 2CH, 42H, 4CH, 55H
   \              0x73 0x62    
   \              0x2C 0x42    
   \              0x4C 0x55    
   \   00000030   0x45 0x6C          DC8 45H, 6CH, 73H, 62H, 29H, 0DH, 0AH, 0
   \              0x73 0x62    
   \              0x29 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_71:
   \   00000000   0x20 0x20          DC8 "       DATA: "
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x44    
   \              0x41 0x54    
   \              0x41 0x3A    
   \              0x20 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_72:
   \   00000000   0x20 0x20          DC8 "    Red: "
   \              0x20 0x20    
   \              0x52 0x65    
   \              0x64 0x3A    
   \              0x20 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_73:
   \   00000000   0x20 0x20          DC8 "    Green: "
   \              0x20 0x20    
   \              0x47 0x72    
   \              0x65 0x65    
   \              0x6E 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_74:
   \   00000000   0x20 0x20          DC8 "    Blue: "
   \              0x20 0x20    
   \              0x42 0x6C    
   \              0x75 0x65    
   \              0x3A 0x20    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_75:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 3AH, 20H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x3A 0x20    
   \   00000018   0x49 0x6E          DC8 49H, 6EH, 69H, 74H, 69H, 61H, 6CH, 69H
   \              0x69 0x74    
   \              0x69 0x61    
   \              0x6C 0x69    
   \   00000020   0x7A 0x61          DC8 7AH, 61H, 74H, 69H, 6FH, 6EH, 20H, 43H
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x43    
   \   00000028   0x6F 0x6D          DC8 6FH, 6DH, 70H, 6CH, 65H, 74H, 65H, 20H
   \              0x70 0x6C    
   \              0x65 0x74    
   \              0x65 0x20    
   \   00000030   0x77 0x69          DC8 77H, 69H, 74H, 68H, 20H, 44H, 45H, 46H
   \              0x74 0x68    
   \              0x20 0x44    
   \              0x45 0x46    
   \   00000038   0x41 0x55          DC8 41H, 55H, 4CH, 54H, 20H, 56H, 61H, 6CH
   \              0x4C 0x54    
   \              0x20 0x56    
   \              0x61 0x6C    
   \   00000040   0x75 0x65          DC8 75H, 65H, 73H, 2EH, 0DH, 0AH, 0
   \              0x73 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000047   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_76:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 3AH, 20H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x3A 0x20    
   \   00000018   0x53 0x59          DC8 53H, 59H, 4EH, 54H, 41H, 58H, 20H, 45H
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \   00000020   0x72 0x72          DC8 72H, 72H, 6FH, 72H, 2EH, 20H, 50H, 61H
   \              0x6F 0x72    
   \              0x2E 0x20    
   \              0x50 0x61    
   \   00000028   0x72 0x61          DC8 72H, 61H, 6DH, 65H, 74H, 65H, 72H, 73H
   \              0x6D 0x65    
   \              0x74 0x65    
   \              0x72 0x73    
   \   00000030   0x20 0x61          DC8 20H, 61H, 72H, 65H, 20H, 6EH, 6FH, 74H
   \              0x72 0x65    
   \              0x20 0x6E    
   \              0x6F 0x74    
   \   00000038   0x20 0x63          DC8 20H, 63H, 6FH, 72H, 72H, 65H, 63H, 74H
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \   00000040   0x2E 0x0D          DC8 2EH, 0DH, 0AH, 0
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_77:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 4EH, 6FH, 74H
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \   00000028   0x20 0x63          DC8 20H, 63H, 6FH, 72H, 72H, 65H, 63H, 74H
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \   00000030   0x20 0x66          DC8 20H, 66H, 6FH, 72H, 6DH, 61H, 74H, 2EH
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \   00000038   0x20 0x50          DC8 20H, 50H, 75H, 6EH, 63H, 74H, 75H, 61H
   \              0x75 0x6E    
   \              0x63 0x74    
   \              0x75 0x61    
   \   00000040   0x74 0x69          DC8 74H, 69H, 6FH, 6EH, 21H, 0DH, 0AH, 0
   \              0x6F 0x6E    
   \              0x21 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_78:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 50H, 61H, 72H, 61H
   \              0x52 0x3A    
   \              0x50 0x61    
   \              0x72 0x61    
   \   00000028   0x6D 0x65          DC8 6DH, 65H, 74H, 65H, 72H, 73H, 20H, 6EH
   \              0x74 0x65    
   \              0x72 0x73    
   \              0x20 0x6E    
   \   00000030   0x6F 0x74          DC8 6FH, 74H, 20H, 48H, 45H, 58H, 20H, 56H
   \              0x20 0x48    
   \              0x45 0x58    
   \              0x20 0x56    
   \   00000038   0x61 0x6C          DC8 61H, 6CH, 75H, 65H, 2EH, 0DH, 0AH, 0
   \              0x75 0x65    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_79:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x4F 0x50          DC8 4FH, 50H, 5FH, 4DH, 4FH, 44H, 45H, 2EH
   \              0x5F 0x4D    
   \              0x4F 0x44    
   \              0x45 0x2E    
   \   00000038   0x0D 0x0A          DC8 0DH, 0AH, 0
   \              0x00         
   \   0000003B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_80:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x44 0x53          DC8 44H, 53H, 5FH, 52H, 41H, 4EH, 47H, 45H
   \              0x5F 0x52    
   \              0x41 0x4E    
   \              0x47 0x45    
   \   00000038   0x2E 0x0D          DC8 2EH, 0DH, 0AH, 0
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_81:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x41 0x44          DC8 41H, 44H, 43H, 5FH, 52H, 53H, 4CH, 2EH
   \              0x43 0x5F    
   \              0x52 0x53    
   \              0x4C 0x2E    
   \   00000038   0x0D 0x0A          DC8 0DH, 0AH, 0
   \              0x00         
   \   0000003B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_82:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x53 0x59          DC8 53H, 59H, 4EH, 43H, 2EH, 0DH, 0AH, 0
   \              0x4E 0x43    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_83:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x43 0x4D          DC8 43H, 4DH, 50H, 5FH, 41H, 44H, 4AH, 53H
   \              0x50 0x5F    
   \              0x41 0x44    
   \              0x4A 0x53    
   \   00000038   0x54 0x2E          DC8 54H, 2EH, 0DH, 0AH, 0
   \              0x0D 0x0A    
   \              0x00         
   \   0000003D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_84:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x43 0x4D          DC8 43H, 4DH, 50H, 5FH, 4FH, 46H, 46H, 53H
   \              0x50 0x5F    
   \              0x4F 0x46    
   \              0x46 0x53    
   \   00000038   0x54 0x2E          DC8 54H, 2EH, 0DH, 0AH, 0
   \              0x0D 0x0A    
   \              0x00         
   \   0000003D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_85:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x49 0x4E          DC8 49H, 4EH, 54H, 5FH, 41H, 53H, 53H, 47H
   \              0x54 0x5F    
   \              0x41 0x53    
   \              0x53 0x47    
   \   00000038   0x4E 0x2E          DC8 4EH, 2EH, 0DH, 0AH, 0
   \              0x0D 0x0A    
   \              0x00         
   \   0000003D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_86:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x49 0x4E          DC8 49H, 4EH, 54H, 5FH, 50H, 45H, 52H, 53H
   \              0x54 0x5F    
   \              0x50 0x45    
   \              0x52 0x53    
   \   00000038   0x49 0x53          DC8 49H, 53H, 54H, 2EH, 0DH, 0AH, 0
   \              0x54 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000003F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_87:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x43 0x4E          DC8 43H, 4EH, 56H, 52H, 53H, 4EH, 5FH, 49H
   \              0x56 0x52    
   \              0x53 0x4E    
   \              0x5F 0x49    
   \   00000038   0x4E 0x54          DC8 4EH, 54H, 2EH, 0DH, 0AH, 0
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   0000003E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_88:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 3AH, 20H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x3A 0x20    
   \   00000018   0x49 0x6E          DC8 49H, 6EH, 69H, 74H, 69H, 61H, 6CH, 69H
   \              0x69 0x74    
   \              0x69 0x61    
   \              0x6C 0x69    
   \   00000020   0x7A 0x61          DC8 7AH, 61H, 74H, 69H, 6FH, 6EH, 20H, 43H
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x43    
   \   00000028   0x6F 0x6D          DC8 6FH, 6DH, 70H, 6CH, 65H, 74H, 65H, 20H
   \              0x70 0x6C    
   \              0x65 0x74    
   \              0x65 0x20    
   \   00000030   0x77 0x69          DC8 77H, 69H, 74H, 68H, 20H, 55H, 53H, 45H
   \              0x74 0x68    
   \              0x20 0x55    
   \              0x53 0x45    
   \   00000038   0x52 0x20          DC8 52H, 20H, 56H, 61H, 6CH, 75H, 65H, 73H
   \              0x56 0x61    
   \              0x6C 0x75    
   \              0x65 0x73    
   \   00000040   0x2E 0x0D          DC8 2EH, 0DH, 0AH, 0
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_89:
   \   00000000   0x52 0x47          DC8 "RGB Color Light Sensor Status: "
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \              0x72 0x20    
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \              0x53 0x65    
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \              0x74 0x61    
   \              0x74 0x75    
   \              0x73 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_90:
   \   00000000   0x25 0x30          DC8 "%02x / "
   \              0x32 0x78    
   \              0x20 0x2F    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_91:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 3AH, 20H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x3A 0x20    
   \   00000018   0x52 0x45          DC8 52H, 45H, 53H, 45H, 54H, 20H, 43H, 4DH
   \              0x53 0x45    
   \              0x54 0x20    
   \              0x43 0x4D    
   \   00000020   0x44 0x20          DC8 44H, 20H, 53H, 65H, 6EH, 74H, 20H, 53H
   \              0x53 0x65    
   \              0x6E 0x74    
   \              0x20 0x53    
   \   00000028   0x75 0x63          DC8 75H, 63H, 63H, 65H, 73H, 66H, 75H, 6CH
   \              0x63 0x65    
   \              0x73 0x66    
   \              0x75 0x6C    
   \   00000030   0x2E 0x0D          DC8 2EH, 0DH, 0AH, 0
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_92:
   \   00000000   0x52 0x47          DC8 "RGB Color Light Sensor ID Code: "
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \              0x72 0x20    
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \              0x53 0x65    
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x49    
   \              0x44 0x20    
   \              0x43 0x6F    
   \              0x64 0x65    
   \              0x3A 0x20    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_93:
   \   00000000   0x35 0x56          DC8 "5V Power Plane Powered UP.\015\012"
   \              0x20 0x50    
   \              0x6F 0x77    
   \              0x65 0x72    
   \              0x20 0x50    
   \              0x6C 0x61    
   \              0x6E 0x65    
   \              0x20 0x50    
   \              0x6F 0x77    
   \              0x65 0x72    
   \              0x65 0x64    
   \              0x20 0x55    
   \              0x50 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_94:
   \   00000000   0x35 0x56          DC8 "5V Power Plane Powered DOWN.\015\012"
   \              0x20 0x50    
   \              0x6F 0x77    
   \              0x65 0x72    
   \              0x20 0x50    
   \              0x6C 0x61    
   \              0x6E 0x65    
   \              0x20 0x50    
   \              0x6F 0x77    
   \              0x65 0x72    
   \              0x65 0x64    
   \              0x20 0x44    
   \              0x4F 0x57    
   \              0x4E 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_95:
   \   00000000   0x45 0x52          DC8 "ERROR: Illegal 5V Power Plane Command.\015\012"
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x49    
   \              0x6C 0x6C    
   \              0x65 0x67    
   \              0x61 0x6C    
   \              0x20 0x35    
   \              0x56 0x20    
   \              0x50 0x6F    
   \              0x77 0x65    
   \              0x72 0x20    
   \              0x50 0x6C    
   \              0x61 0x6E    
   \              0x65 0x20    
   \              0x43 0x6F    
   \              0x6D 0x6D    
   \              0x61 0x6E    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_96:
   \   00000000   0x54 0x20          DC8 "T ERROR: Not a legal command.\015\012"
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x61    
   \              0x20 0x6C    
   \              0x65 0x67    
   \              0x61 0x6C    
   \              0x20 0x63    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_97:
   \   00000000   0x54 0x49          DC8 "TI SYNTAX ERROR: Not correct format.\015\012"
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x63    
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_98:
   \   00000000   0x54 0x49          DC8 "TIS SYNTAX ERROR: Not correct format.\015\012"
   \              0x53 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x4E 0x6F    
   \              0x74 0x20    
   \              0x63 0x6F    
   \              0x72 0x72    
   \              0x65 0x63    
   \              0x74 0x20    
   \              0x66 0x6F    
   \              0x72 0x6D    
   \              0x61 0x74    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_99:
   \   00000000   0x54 0x49          DC8 "TIS SYNTAX ERROR: Address not HEX Value.\015\012"
   \              0x53 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x41 0x64    
   \              0x64 0x72    
   \              0x65 0x73    
   \              0x73 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x48 0x45    
   \              0x58 0x20    
   \              0x56 0x61    
   \              0x6C 0x75    
   \              0x65 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_100:
   \   00000000   0x54 0x49          DC8 54H, 49H, 53H, 20H, 53H, 59H, 4EH, 54H
   \              0x53 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \   00000008   0x41 0x58          DC8 41H, 58H, 20H, 45H, 52H, 52H, 4FH, 52H
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \   00000010   0x3A 0x20          DC8 3AH, 20H, 4EH, 75H, 6DH, 62H, 65H, 72H
   \              0x4E 0x75    
   \              0x6D 0x62    
   \              0x65 0x72    
   \   00000018   0x20 0x6F          DC8 20H, 6FH, 66H, 20H, 42H, 79H, 74H, 65H
   \              0x66 0x20    
   \              0x42 0x79    
   \              0x74 0x65    
   \   00000020   0x73 0x20          DC8 73H, 20H, 6EH, 6FH, 74H, 20H, 48H, 45H
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x48 0x45    
   \   00000028   0x58 0x20          DC8 58H, 20H, 56H, 61H, 6CH, 75H, 65H, 2EH
   \              0x56 0x61    
   \              0x6C 0x75    
   \              0x65 0x2E    
   \   00000030   0x0D 0x0A          DC8 0DH, 0AH, 0
   \              0x00         
   \   00000033   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_101:
   \   00000000   0x54 0x49          DC8 "TIS: GOOD CMD: %x.\015\012"
   \              0x53 0x3A    
   \              0x20 0x47    
   \              0x4F 0x4F    
   \              0x44 0x20    
   \              0x43 0x4D    
   \              0x44 0x3A    
   \              0x20 0x25    
   \              0x78 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_102:
   \   00000000   0x54 0x49          DC8 "TIS: GOOD CMD: %x."
   \              0x53 0x3A    
   \              0x20 0x47    
   \              0x4F 0x4F    
   \              0x44 0x20    
   \              0x43 0x4D    
   \              0x44 0x3A    
   \              0x20 0x25    
   \              0x78 0x2E    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \   00000000   0x25 0x78          DC8 "%x."
   \              0x2E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_104:
   \   00000000   0x54 0x49          DC8 "TIR SYNTAX ERROR: Not correct format.\015\012"
   \              0x52 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x4E 0x6F    
   \              0x74 0x20    
   \              0x63 0x6F    
   \              0x72 0x72    
   \              0x65 0x63    
   \              0x74 0x20    
   \              0x66 0x6F    
   \              0x72 0x6D    
   \              0x61 0x74    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_105:
   \   00000000   0x54 0x49          DC8 "TIR SYNTAX ERROR: Address not HEX Value.\015\012"
   \              0x52 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x41 0x64    
   \              0x64 0x72    
   \              0x65 0x73    
   \              0x73 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x48 0x45    
   \              0x58 0x20    
   \              0x56 0x61    
   \              0x6C 0x75    
   \              0x65 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_106:
   \   00000000   0x54 0x49          DC8 54H, 49H, 52H, 20H, 53H, 59H, 4EH, 54H
   \              0x52 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \   00000008   0x41 0x58          DC8 41H, 58H, 20H, 45H, 52H, 52H, 4FH, 52H
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \   00000010   0x3A 0x20          DC8 3AH, 20H, 4EH, 75H, 6DH, 62H, 65H, 72H
   \              0x4E 0x75    
   \              0x6D 0x62    
   \              0x65 0x72    
   \   00000018   0x20 0x6F          DC8 20H, 6FH, 66H, 20H, 42H, 79H, 74H, 65H
   \              0x66 0x20    
   \              0x42 0x79    
   \              0x74 0x65    
   \   00000020   0x73 0x20          DC8 73H, 20H, 6EH, 6FH, 74H, 20H, 48H, 45H
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x48 0x45    
   \   00000028   0x58 0x20          DC8 58H, 20H, 56H, 61H, 6CH, 75H, 65H, 2EH
   \              0x56 0x61    
   \              0x6C 0x75    
   \              0x65 0x2E    
   \   00000030   0x0D 0x0A          DC8 0DH, 0AH, 0
   \              0x00         
   \   00000033   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_107:
   \   00000000   0x54 0x49          DC8 54H, 49H, 52H, 20H, 53H, 59H, 4EH, 54H
   \              0x52 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \   00000008   0x41 0x58          DC8 41H, 58H, 20H, 45H, 52H, 52H, 4FH, 52H
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \   00000010   0x3A 0x20          DC8 3AH, 20H, 4EH, 75H, 6DH, 62H, 65H, 72H
   \              0x4E 0x75    
   \              0x6D 0x62    
   \              0x65 0x72    
   \   00000018   0x20 0x6F          DC8 20H, 6FH, 66H, 20H, 42H, 79H, 74H, 65H
   \              0x66 0x20    
   \              0x42 0x79    
   \              0x74 0x65    
   \   00000020   0x73 0x20          DC8 73H, 20H, 52H, 45H, 43H, 45H, 49H, 56H
   \              0x52 0x45    
   \              0x43 0x45    
   \              0x49 0x56    
   \   00000028   0x45 0x44          DC8 45H, 44H, 20H, 6EH, 6FH, 74H, 20H, 48H
   \              0x20 0x6E    
   \              0x6F 0x74    
   \              0x20 0x48    
   \   00000030   0x45 0x58          DC8 45H, 58H, 20H, 56H, 61H, 6CH, 75H, 65H
   \              0x20 0x56    
   \              0x61 0x6C    
   \              0x75 0x65    
   \   00000038   0x2E 0x0D          DC8 2EH, 0DH, 0AH, 0
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_108:
   \   00000000   0x54 0x49          DC8 "TIR: GOOD CMD: %x.\015\012"
   \              0x52 0x3A    
   \              0x20 0x47    
   \              0x4F 0x4F    
   \              0x44 0x20    
   \              0x43 0x4D    
   \              0x44 0x3A    
   \              0x20 0x25    
   \              0x78 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_109:
   \   00000000   0x54 0x49          DC8 "TIR SYNTAX ERROR: Data not HEX Value.\015\012"
   \              0x52 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x44 0x61    
   \              0x74 0x61    
   \              0x20 0x6E    
   \              0x6F 0x74    
   \              0x20 0x48    
   \              0x45 0x58    
   \              0x20 0x56    
   \              0x61 0x6C    
   \              0x75 0x65    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_110:
   \   00000000   0x54 0x49          DC8 "TIR: GOOD CMD: %x."
   \              0x52 0x3A    
   \              0x20 0x47    
   \              0x4F 0x4F    
   \              0x44 0x20    
   \              0x43 0x4D    
   \              0x44 0x3A    
   \              0x20 0x25    
   \              0x78 0x2E    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_111:
   \   00000000   0x20 0x20          DC8 "     DATA: "
   \              0x20 0x20    
   \              0x20 0x44    
   \              0x41 0x54    
   \              0x41 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_112:
   \   00000000   0x54 0x49          DC8 "TIQ SYNTAX ERROR: Not correct format.\015\012"
   \              0x51 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x4E 0x6F    
   \              0x74 0x20    
   \              0x63 0x6F    
   \              0x72 0x72    
   \              0x65 0x63    
   \              0x74 0x20    
   \              0x66 0x6F    
   \              0x72 0x6D    
   \              0x61 0x74    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_113:
   \   00000000   0x54 0x49          DC8 "TIQ SYNTAX ERROR: Address not HEX Value.\015\012"
   \              0x51 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x41 0x64    
   \              0x64 0x72    
   \              0x65 0x73    
   \              0x73 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x48 0x45    
   \              0x58 0x20    
   \              0x56 0x61    
   \              0x6C 0x75    
   \              0x65 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_114:
   \   00000000   0x54 0x49          DC8 54H, 49H, 51H, 20H, 53H, 59H, 4EH, 54H
   \              0x51 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \   00000008   0x41 0x58          DC8 41H, 58H, 20H, 45H, 52H, 52H, 4FH, 52H
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \   00000010   0x3A 0x20          DC8 3AH, 20H, 4EH, 75H, 6DH, 62H, 65H, 72H
   \              0x4E 0x75    
   \              0x6D 0x62    
   \              0x65 0x72    
   \   00000018   0x20 0x6F          DC8 20H, 6FH, 66H, 20H, 42H, 79H, 74H, 65H
   \              0x66 0x20    
   \              0x42 0x79    
   \              0x74 0x65    
   \   00000020   0x73 0x20          DC8 73H, 20H, 6EH, 6FH, 74H, 20H, 48H, 45H
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x48 0x45    
   \   00000028   0x58 0x20          DC8 58H, 20H, 56H, 61H, 6CH, 75H, 65H, 2EH
   \              0x56 0x61    
   \              0x6C 0x75    
   \              0x65 0x2E    
   \   00000030   0x0D 0x0A          DC8 0DH, 0AH, 0
   \              0x00         
   \   00000033   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_115:
   \   00000000   0x25 0x73          DC8 "%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\015\012"
   \              0x2C 0x25    
   \              0x73 0x2C    
   \              0x25 0x73    
   \              0x2C 0x25    
   \              0x73 0x2C    
   \              0x25 0x73    
   \              0x2C 0x25    
   \              0x73 0x2C    
   \              0x25 0x73    
   \              0x2C 0x25    
   \              0x73 0x2C    
   \              0x25 0x73    
   \              0x2C 0x25    
   \              0x73 0x2C    
   \              0x25 0x73    
   \              0x2C 0x25    
   \              0x73 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_116:
   \   00000000   0x43 0x4F          DC8 "COMPLETE"
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_117:
   \   00000000   0x50 0x72          DC8 "Pressure TASKING ERROR!"
   \              0x65 0x73    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x20 0x54    
   \              0x41 0x53    
   \              0x4B 0x49    
   \              0x4E 0x47    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x21 0x00    

   \                                 In section .rodata, align 4
   \                     ?_118:
   \   00000000   0x48 0x75          DC8 "Humidity TASKING ERROR!"
   \              0x6D 0x69    
   \              0x64 0x69    
   \              0x74 0x79    
   \              0x20 0x54    
   \              0x41 0x53    
   \              0x4B 0x49    
   \              0x4E 0x47    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x21 0x00    

   \                                 In section .rodata, align 4
   \                     ?_119:
   \   00000000   0x41 0x4D          DC8 "AMBIENT TEMPERATURE TASKING ERROR!"
   \              0x42 0x49    
   \              0x45 0x4E    
   \              0x54 0x20    
   \              0x54 0x45    
   \              0x4D 0x50    
   \              0x45 0x52    
   \              0x41 0x54    
   \              0x55 0x52    
   \              0x45 0x20    
   \              0x54 0x41    
   \              0x53 0x4B    
   \              0x49 0x4E    
   \              0x47 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x21    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_120:
   \   00000000   0x47 0x52          DC8 "GRID EYE/COOL EYE TASKING ERROR!"
   \              0x49 0x44    
   \              0x20 0x45    
   \              0x59 0x45    
   \              0x2F 0x43    
   \              0x4F 0x4F    
   \              0x4C 0x20    
   \              0x45 0x59    
   \              0x45 0x20    
   \              0x54 0x41    
   \              0x53 0x4B    
   \              0x49 0x4E    
   \              0x47 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x21    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_121:
   \   00000000   0x54 0x43          DC8 "TCS SYNTAX ERROR: Not correct format.\015\012"
   \              0x53 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x4E 0x6F    
   \              0x74 0x20    
   \              0x63 0x6F    
   \              0x72 0x72    
   \              0x65 0x63    
   \              0x74 0x20    
   \              0x66 0x6F    
   \              0x72 0x6D    
   \              0x61 0x74    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_122:
   \   00000000   0x54 0x43          DC8 "TCS SYNTAX ERROR: Bad Parameter.\015\012"
   \              0x53 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x42 0x61    
   \              0x64 0x20    
   \              0x50 0x61    
   \              0x72 0x61    
   \              0x6D 0x65    
   \              0x74 0x65    
   \              0x72 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_123:
   \   00000000   0x25 0x73          DC8 "%s %f %f"
   \              0x20 0x25    
   \              0x66 0x20    
   \              0x25 0x66    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_124:
   \   00000000   0x50 0x61          DC8 "Parms: %s, %f, %f.\015\012"
   \              0x72 0x6D    
   \              0x73 0x3A    
   \              0x20 0x25    
   \              0x73 0x2C    
   \              0x20 0x25    
   \              0x66 0x2C    
   \              0x20 0x25    
   \              0x66 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_125:
   \   00000000   0x30 0x30          DC8 "0002"
   \              0x30 0x32    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_126:
   \   00000000   0x53 0x68          DC8 "Shnt_Vltg Set COMPLETE.\015\012"
   \              0x6E 0x74    
   \              0x5F 0x56    
   \              0x6C 0x74    
   \              0x67 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_127:
   \   00000000   0x54 0x43          DC8 "TCS SET ERROR: FAILED.\015\012"
   \              0x53 0x20    
   \              0x53 0x45    
   \              0x54 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x46    
   \              0x41 0x49    
   \              0x4C 0x45    
   \              0x44 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_128:
   \   00000000   0x30 0x30          DC8 "0004"
   \              0x30 0x34    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_129:
   \   00000000   0x43 0x75          DC8 "Current Set COMPLETE."
   \              0x72 0x72    
   \              0x65 0x6E    
   \              0x74 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_130:
   \   00000000   0x30 0x30          DC8 "0006"
   \              0x30 0x36    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_131:
   \   00000000   0x50 0x6F          DC8 "Power Set COMPLETE."
   \              0x77 0x65    
   \              0x72 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_132:
   \   00000000   0x30 0x30          DC8 "0008"
   \              0x30 0x38    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_133:
   \   00000000   0x56 0x6F          DC8 "Voltage Set COMPLETE."
   \              0x6C 0x74    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_134:
   \   00000000   0x30 0x30          DC8 "000A"
   \              0x30 0x41    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_135:
   \   00000000   0x54 0x65          DC8 "TempC Set COMPLETE."
   \              0x6D 0x70    
   \              0x43 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_136:
   \   00000000   0x30 0x30          DC8 "000B"
   \              0x30 0x42    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_137:
   \   00000000   0x54 0x65          DC8 "TempF Set COMPLETE."
   \              0x6D 0x70    
   \              0x46 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_138:
   \   00000000   0x30 0x30          DC8 "0011"
   \              0x31 0x31    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_139:
   \   00000000   0x50 0x72          DC8 "Pressure Set COMPLETE."
   \              0x65 0x73    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_140:
   \   00000000   0x30 0x30          DC8 "0030"
   \              0x33 0x30    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_141:
   \   00000000   0x48 0x75          DC8 "Humidity Set COMPLETE."
   \              0x6D 0x69    
   \              0x64 0x69    
   \              0x74 0x79    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_142:
   \   00000000   0x30 0x30          DC8 "0032"
   \              0x33 0x32    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_143:
   \   00000000   0x48 0x75          DC8 "Hum_TempC Set COMPLETE."
   \              0x6D 0x5F    
   \              0x54 0x65    
   \              0x6D 0x70    
   \              0x43 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_144:
   \   00000000   0x30 0x30          DC8 "0033"
   \              0x33 0x33    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_145:
   \   00000000   0x48 0x75          DC8 "Hum_TempF Set COMPLETE."
   \              0x6D 0x5F    
   \              0x54 0x65    
   \              0x6D 0x70    
   \              0x46 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_146:
   \   00000000   0x30 0x30          DC8 "000D"
   \              0x30 0x44    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_147:
   \   00000000   0x52 0x47          DC8 "RGB_Red Set COMPLETE."
   \              0x42 0x5F    
   \              0x52 0x65    
   \              0x64 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_148:
   \   00000000   0x30 0x30          DC8 "000E"
   \              0x30 0x45    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_149:
   \   00000000   0x52 0x47          DC8 "RGB_Green Set COMPLETE."
   \              0x42 0x5F    
   \              0x47 0x72    
   \              0x65 0x65    
   \              0x6E 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_150:
   \   00000000   0x30 0x30          DC8 "000F"
   \              0x30 0x46    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_151:
   \   00000000   0x52 0x47          DC8 "RGB_Blue Set COMPLETE."
   \              0x42 0x5F    
   \              0x42 0x6C    
   \              0x75 0x65    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_152:
   \   00000000   0x30 0x30          DC8 "0017"
   \              0x31 0x37    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_153:
   \   00000000   0x54 0x68          DC8 "Therm_C Set COMPLETE."
   \              0x65 0x72    
   \              0x6D 0x5F    
   \              0x43 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_154:
   \   00000000   0x30 0x30          DC8 "0019"
   \              0x31 0x39    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_155:
   \   00000000   0x52 0x6F          DC8 "RoadT_1C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x31 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_156:
   \   00000000   0x30 0x30          DC8 "001B"
   \              0x31 0x42    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_157:
   \   00000000   0x52 0x6F          DC8 "RoadT_2C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x32 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_158:
   \   00000000   0x30 0x30          DC8 "001D"
   \              0x31 0x44    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_159:
   \   00000000   0x52 0x6F          DC8 "RoadT_3C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x33 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_160:
   \   00000000   0x30 0x30          DC8 "001F"
   \              0x31 0x46    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_161:
   \   00000000   0x52 0x6F          DC8 "RoadT_4C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x34 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_162:
   \   00000000   0x30 0x30          DC8 "0021"
   \              0x32 0x31    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_163:
   \   00000000   0x52 0x6F          DC8 "RoadT_5C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x35 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_164:
   \   00000000   0x30 0x30          DC8 "0023"
   \              0x32 0x33    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_165:
   \   00000000   0x52 0x6F          DC8 "RoadT_6C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x36 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_166:
   \   00000000   0x30 0x30          DC8 "0025"
   \              0x32 0x35    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_167:
   \   00000000   0x52 0x6F          DC8 "RoadT_7C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x37 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_168:
   \   00000000   0x30 0x30          DC8 "0027"
   \              0x32 0x37    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_169:
   \   00000000   0x52 0x6F          DC8 "RoadT_8C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x38 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_170:
   \   00000000   0x54 0x43          DC8 "TCS SYNTAX ERROR: Bad UUID.\015\012"
   \              0x53 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x42 0x61    
   \              0x64 0x20    
   \              0x55 0x55    
   \              0x49 0x44    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_171:
   \   00000000   0x54 0x43          DC8 "TCS SYNTAX ERROR: Wrong Number of Parameters.\015\012"
   \              0x53 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x57 0x72    
   \              0x6F 0x6E    
   \              0x67 0x20    
   \              0x4E 0x75    
   \              0x6D 0x62    
   \              0x65 0x72    
   \              0x20 0x6F    
   \              0x66 0x20    
   \              0x50 0x61    
   \              0x72 0x61    
   \              0x6D 0x65    
   \              0x74 0x65    
   \              0x72 0x73    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_172:
   \   00000000   0x43 0x41          DC8 "CALIBRATION DATA\015\012Date: %s\015\012"
   \              0x4C 0x49    
   \              0x42 0x52    
   \              0x41 0x54    
   \              0x49 0x4F    
   \              0x4E 0x20    
   \              0x44 0x41    
   \              0x54 0x41    
   \              0x0D 0x0A    
   \              0x44 0x61    
   \              0x74 0x65    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_173:
   \   00000000   0x4E 0x61          DC8 "Name\t\t        UUID\t\tSlope\t\tOffset\015\012"
   \              0x6D 0x65    
   \              0x09 0x09    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x55 0x55    
   \              0x49 0x44    
   \              0x09 0x09    
   \              0x53 0x6C    
   \              0x6F 0x70    
   \              0x65 0x09    
   \              0x09 0x4F    
   \              0x66 0x66    
   \              0x73 0x65    
   \              0x74 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_174:
   \   00000000   0x25 0x73          DC8 "%s\t0002\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x30    
   \              0x32 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_175:
   \   00000000   0x25 0x73          DC8 "%s\t        0004\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x30    
   \              0x30 0x30    
   \              0x34 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_176:
   \   00000000   0x25 0x73          DC8 "%s\t0006\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x30    
   \              0x36 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_177:
   \   00000000   0x25 0x73          DC8 "%s\t        0008\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x30    
   \              0x30 0x30    
   \              0x38 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_178:
   \   00000000   0x25 0x73          DC8 "%s\t000A\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x30    
   \              0x41 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_179:
   \   00000000   0x25 0x73          DC8 "%s\t000B\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x30    
   \              0x42 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_180:
   \   00000000   0x25 0x73          DC8 "%s\t0011\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x31    
   \              0x31 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_181:
   \   00000000   0x25 0x73          DC8 "%s\t0030\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x33    
   \              0x30 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_182:
   \   00000000   0x25 0x73          DC8 "%s\t0032\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x33    
   \              0x32 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_183:
   \   00000000   0x25 0x73          DC8 "%s\t0033\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x33    
   \              0x33 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_184:
   \   00000000   0x25 0x73          DC8 "%s\t        000D\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x30    
   \              0x30 0x30    
   \              0x44 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_185:
   \   00000000   0x25 0x73          DC8 "%s\t000E\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x30    
   \              0x45 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_186:
   \   00000000   0x25 0x73          DC8 "%s\t000F\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x30    
   \              0x46 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_187:
   \   00000000   0x25 0x73          DC8 "%s\t        0017\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x30    
   \              0x30 0x31    
   \              0x37 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_188:
   \   00000000   0x25 0x73          DC8 "%s\t0019\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x31    
   \              0x39 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_189:
   \   00000000   0x25 0x73          DC8 "%s\t001B\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x31    
   \              0x42 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_190:
   \   00000000   0x25 0x73          DC8 "%s\t001D\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x31    
   \              0x44 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_191:
   \   00000000   0x25 0x73          DC8 "%s\t001F\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x31    
   \              0x46 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_192:
   \   00000000   0x25 0x73          DC8 "%s\t0021\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x32    
   \              0x31 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_193:
   \   00000000   0x25 0x73          DC8 "%s\t0023\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x32    
   \              0x33 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_194:
   \   00000000   0x25 0x73          DC8 "%s\t0025\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x32    
   \              0x35 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_195:
   \   00000000   0x25 0x73          DC8 "%s\t0027\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x32    
   \              0x37 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_196:
   \   00000000   0x0D 0x0A          DC8 "\015\012     COMPLETE.\015\012"
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_197:
   \   00000000   0x54 0x43          DC8 "TCT SYNTAX ERROR: Not correct format.\015\012"
   \              0x54 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x4E 0x6F    
   \              0x74 0x20    
   \              0x63 0x6F    
   \              0x72 0x72    
   \              0x65 0x63    
   \              0x74 0x20    
   \              0x66 0x6F    
   \              0x72 0x6D    
   \              0x61 0x74    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_198:
   \   00000000   0x54 0x43          DC8 "TCT SYNTAX ERROR: Bad Parameter.\015\012"
   \              0x54 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x42 0x61    
   \              0x64 0x20    
   \              0x50 0x61    
   \              0x72 0x61    
   \              0x6D 0x65    
   \              0x74 0x65    
   \              0x72 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_199:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_DRIVER:%04x</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x44    
   \              0x52 0x49    
   \              0x56 0x45    
   \              0x52 0x3A    
   \              0x25 0x30    
   \              0x34 0x78    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_200:
   \   00000000   0x44 0x72          DC8 "Driver Status: %04x\015\012"
   \              0x69 0x76    
   \              0x65 0x72    
   \              0x20 0x53    
   \              0x74 0x61    
   \              0x74 0x75    
   \              0x73 0x3A    
   \              0x20 0x25    
   \              0x30 0x34    
   \              0x78 0x0D    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_201:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_RESET_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x52    
   \              0x45 0x53    
   \              0x45 0x54    
   \              0x5F 0x41    
   \              0x43 0x4B    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_202:
   \   00000000   0x52 0x45          DC8 "RESET CALLED BUT NO RESPONSE!!\015\012"
   \              0x53 0x45    
   \              0x54 0x20    
   \              0x43 0x41    
   \              0x4C 0x4C    
   \              0x45 0x44    
   \              0x20 0x42    
   \              0x55 0x54    
   \              0x20 0x4E    
   \              0x4F 0x20    
   \              0x52 0x45    
   \              0x53 0x50    
   \              0x4F 0x4E    
   \              0x53 0x45    
   \              0x21 0x21    
   \              0x0D 0x0A    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_203:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TK_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x5F 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_204:
   \   00000000   0x54 0x4B          DC8 "TK SYNTAX ERROR: Not correct format.\015\012"
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x63    
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_205:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKSR_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x53 0x52    
   \              0x5F 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_206:
   \   00000000   0x54 0x4B          DC8 "TKSR SYNTAX ERROR: Not correct format.\015\012"
   \              0x53 0x52    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x63    
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_207:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKSR_BADPARAM</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x53 0x52    
   \              0x5F 0x42    
   \              0x41 0x44    
   \              0x50 0x41    
   \              0x52 0x41    
   \              0x4D 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_208:
   \   00000000   0x54 0x4B          DC8 "TKSR SYNTAX ERROR: Bad Parameter.\015\012"
   \              0x53 0x52    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x61 0x64    
   \              0x20 0x50    
   \              0x61 0x72    
   \              0x61 0x6D    
   \              0x65 0x74    
   \              0x65 0x72    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_209:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TKSR_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x4B 0x53    
   \              0x52 0x5F    
   \              0x41 0x43    
   \              0x4B 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_210:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKSS_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x53 0x53    
   \              0x5F 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_211:
   \   00000000   0x54 0x4B          DC8 "TKSS SYNTAX ERROR: Not correct format.\015\012"
   \              0x53 0x53    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x63    
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_212:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKSS_BADPARAM</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x53 0x53    
   \              0x5F 0x42    
   \              0x41 0x44    
   \              0x50 0x41    
   \              0x52 0x41    
   \              0x4D 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_213:
   \   00000000   0x54 0x4B          DC8 "TKSS SYNTAX ERROR: Bad Parameter.\015\012"
   \              0x53 0x53    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x61 0x64    
   \              0x20 0x50    
   \              0x61 0x72    
   \              0x61 0x6D    
   \              0x65 0x74    
   \              0x65 0x72    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_214:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TKSS_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x4B 0x53    
   \              0x53 0x5F    
   \              0x41 0x43    
   \              0x4B 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_215:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKST_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x53 0x54    
   \              0x5F 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_216:
   \   00000000   0x54 0x4B          DC8 "TKST SYNTAX ERROR: Not correct format.\015\012"
   \              0x53 0x54    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x63    
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_217:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKST_BADPARAM</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x53 0x54    
   \              0x5F 0x42    
   \              0x41 0x44    
   \              0x50 0x41    
   \              0x52 0x41    
   \              0x4D 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_218:
   \   00000000   0x54 0x4B          DC8 "TKST SYNTAX ERROR: Bad Parameter.\015\012"
   \              0x53 0x54    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x61 0x64    
   \              0x20 0x50    
   \              0x61 0x72    
   \              0x61 0x6D    
   \              0x65 0x74    
   \              0x65 0x72    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_219:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TKST_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x4B 0x53    
   \              0x54 0x5F    
   \              0x41 0x43    
   \              0x4B 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_220:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKSB_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x53 0x42    
   \              0x5F 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_221:
   \   00000000   0x54 0x4B          DC8 "TKSB SYNTAX ERROR: Not correct format.\015\012"
   \              0x53 0x42    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x63    
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_222:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKSB_BADPARAM</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x53 0x42    
   \              0x5F 0x42    
   \              0x41 0x44    
   \              0x50 0x41    
   \              0x52 0x41    
   \              0x4D 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_223:
   \   00000000   0x54 0x4B          DC8 "TKSB SYNTAX ERROR: Bad Parameter.\015\012"
   \              0x53 0x42    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x61 0x64    
   \              0x20 0x50    
   \              0x61 0x72    
   \              0x61 0x6D    
   \              0x65 0x74    
   \              0x65 0x72    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_224:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TKSB_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x4B 0x53    
   \              0x42 0x5F    
   \              0x41 0x43    
   \              0x4B 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_225:
   \   00000000   0x54 0x4B          DC8 "TKS ERROR: Not a legal command.\015\012"
   \              0x53 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x61    
   \              0x20 0x6C    
   \              0x65 0x67    
   \              0x61 0x6C    
   \              0x20 0x63    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_226:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TKRR:%3.1f</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x4B 0x52    
   \              0x52 0x3A    
   \              0x25 0x33    
   \              0x2E 0x31    
   \              0x66 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_227:
   \   00000000   0x52 0x64          DC8 "RdSnd Sample Rate:  %3.1f Seconds.\015\012"
   \              0x53 0x6E    
   \              0x64 0x20    
   \              0x53 0x61    
   \              0x6D 0x70    
   \              0x6C 0x65    
   \              0x20 0x52    
   \              0x61 0x74    
   \              0x65 0x3A    
   \              0x20 0x20    
   \              0x25 0x33    
   \              0x2E 0x31    
   \              0x66 0x20    
   \              0x53 0x65    
   \              0x63 0x6F    
   \              0x6E 0x64    
   \              0x73 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_228:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TKRS:%3.1f</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x4B 0x52    
   \              0x53 0x3A    
   \              0x25 0x33    
   \              0x2E 0x31    
   \              0x66 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_229:
   \   00000000   0x53 0x65          DC8 "Sensor Sample Rate: %3.1f Seconds.\015\012\015\012> "
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \              0x61 0x6D    
   \              0x70 0x6C    
   \              0x65 0x20    
   \              0x52 0x61    
   \              0x74 0x65    
   \              0x3A 0x20    
   \              0x25 0x33    
   \              0x2E 0x31    
   \              0x66 0x20    
   \              0x53 0x65    
   \              0x63 0x6F    
   \              0x6E 0x64    
   \              0x73 0x2E    
   \              0x0D 0x0A    
   \              0x0D 0x0A    
   \              0x3E 0x20    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_230:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TKRT:%d</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x4B 0x52    
   \              0x54 0x3A    
   \              0x25 0x64    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_231:
   \   00000000   0x54 0x41          DC8 "TACK Limit: %d.\015\012\015\012> "
   \              0x43 0x4B    
   \              0x20 0x4C    
   \              0x69 0x6D    
   \              0x69 0x74    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x0D    
   \              0x0A 0x3E    
   \              0x20 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_232:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TKRB:%d</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x4B 0x52    
   \              0x42 0x3A    
   \              0x25 0x64    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_233:
   \   00000000   0x42 0x6F          DC8 "Boot Delay: %d Seconds.\015\012\015\012> "
   \              0x6F 0x74    
   \              0x20 0x44    
   \              0x65 0x6C    
   \              0x61 0x79    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x20 0x53    
   \              0x65 0x63    
   \              0x6F 0x6E    
   \              0x64 0x73    
   \              0x2E 0x0D    
   \              0x0A 0x0D    
   \              0x0A 0x3E    
   \              0x20 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_234:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKR_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x52 0x5F    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_235:
   \   00000000   0x54 0x4B          DC8 "TKR ERROR: Not a legal command.\015\012"
   \              0x52 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x61    
   \              0x20 0x6C    
   \              0x65 0x67    
   \              0x61 0x6C    
   \              0x20 0x63    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_236:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TU_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x55    
   \              0x5F 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_237:
   \   00000000   0x54 0x55          DC8 "TU SYNTAX ERROR: Not correct format.\015\012"
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x63    
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_238:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TUE_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x55 0x45    
   \              0x5F 0x41    
   \              0x43 0x4B    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_239:
   \   00000000   0x55 0x6E          DC8 "Units XML State CHANGED: ENABLED\015\012\015\012> "
   \              0x69 0x74    
   \              0x73 0x20    
   \              0x58 0x4D    
   \              0x4C 0x20    
   \              0x53 0x74    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x43 0x48    
   \              0x41 0x4E    
   \              0x47 0x45    
   \              0x44 0x3A    
   \              0x20 0x45    
   \              0x4E 0x41    
   \              0x42 0x4C    
   \              0x45 0x44    
   \              0x0D 0x0A    
   \              0x0D 0x0A    
   \              0x3E 0x20    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_240:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TUD_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x55 0x44    
   \              0x5F 0x41    
   \              0x43 0x4B    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_241:
   \   00000000   0x55 0x6E          DC8 "Units XML State CHANGED: DISABLED\015\012\015\012> "
   \              0x69 0x74    
   \              0x73 0x20    
   \              0x58 0x4D    
   \              0x4C 0x20    
   \              0x53 0x74    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x43 0x48    
   \              0x41 0x4E    
   \              0x47 0x45    
   \              0x44 0x3A    
   \              0x20 0x44    
   \              0x49 0x53    
   \              0x41 0x42    
   \              0x4C 0x45    
   \              0x44 0x0D    
   \              0x0A 0x0D    
   \              0x0A 0x3E    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_242:
   \   00000000   0x54 0x55          DC8 "TU SYNTAX ERROR: Not a legal command.\015\012"
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x61    
   \              0x20 0x6C    
   \              0x65 0x67    
   \              0x61 0x6C    
   \              0x20 0x63    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_243:
   \   00000000   0x42 0x47          DC8 "BGM111 MONITOR MODE.\015\012\015\012"
   \              0x4D 0x31    
   \              0x31 0x31    
   \              0x20 0x4D    
   \              0x4F 0x4E    
   \              0x49 0x54    
   \              0x4F 0x52    
   \              0x20 0x4D    
   \              0x4F 0x44    
   \              0x45 0x2E    
   \              0x0D 0x0A    
   \              0x0D 0x0A    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_244:
   \   00000000   0x55 0x73          DC8 "Use <ESC> to exit mode.\015\012\015\012"
   \              0x65 0x20    
   \              0x3C 0x45    
   \              0x53 0x43    
   \              0x3E 0x20    
   \              0x74 0x6F    
   \              0x20 0x65    
   \              0x78 0x69    
   \              0x74 0x20    
   \              0x6D 0x6F    
   \              0x64 0x65    
   \              0x2E 0x0D    
   \              0x0A 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_245:
   \   00000000   0x3C 0x53          DC8 "<STATUS>TF_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x54 0x46    
   \              0x5F 0x41    
   \              0x43 0x4B    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_246:
   \   00000000   0x46 0x6C          DC8 "Flash Frame Variables Reset to Factory Values.\015\012"
   \              0x61 0x73    
   \              0x68 0x20    
   \              0x46 0x72    
   \              0x61 0x6D    
   \              0x65 0x20    
   \              0x56 0x61    
   \              0x72 0x69    
   \              0x61 0x62    
   \              0x6C 0x65    
   \              0x73 0x20    
   \              0x52 0x65    
   \              0x73 0x65    
   \              0x74 0x20    
   \              0x74 0x6F    
   \              0x20 0x46    
   \              0x61 0x63    
   \              0x74 0x6F    
   \              0x72 0x79    
   \              0x20 0x56    
   \              0x61 0x6C    
   \              0x75 0x65    
   \              0x73 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000031   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_247:
   \   00000000   0x3C 0x53          DC8 "<STATUS>TL_ERROR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x54 0x4C    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_248:
   \   00000000   0x43 0x6F          DC8 "Code Locked for Programming!\015\012\015\012"
   \              0x64 0x65    
   \              0x20 0x4C    
   \              0x6F 0x63    
   \              0x6B 0x65    
   \              0x64 0x20    
   \              0x66 0x6F    
   \              0x72 0x20    
   \              0x50 0x72    
   \              0x6F 0x67    
   \              0x72 0x61    
   \              0x6D 0x6D    
   \              0x69 0x6E    
   \              0x67 0x21    
   \              0x0D 0x0A    
   \              0x0D 0x0A    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_249:
   \   00000000   0x20 0x20          DC8 "   HARD RESET NEEDED TO EXIT MODE\015\012"
   \              0x20 0x48    
   \              0x41 0x52    
   \              0x44 0x20    
   \              0x52 0x45    
   \              0x53 0x45    
   \              0x54 0x20    
   \              0x4E 0x45    
   \              0x45 0x44    
   \              0x45 0x44    
   \              0x20 0x54    
   \              0x4F 0x20    
   \              0x45 0x58    
   \              0x49 0x54    
   \              0x20 0x4D    
   \              0x4F 0x44    
   \              0x45 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_250:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: BERR: Bus Error reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x45 0x52    
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x75 0x73    
   \              0x20 0x45    
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x20 0x72    
   \              0x65 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_251:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: ARLO: Arbitration lost reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x41    
   \              0x52 0x4C    
   \              0x4F 0x3A    
   \              0x20 0x41    
   \              0x72 0x62    
   \              0x69 0x74    
   \              0x72 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x6C    
   \              0x6F 0x73    
   \              0x74 0x20    
   \              0x72 0x65    
   \              0x70 0x6F    
   \              0x72 0x74    
   \              0x65 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   0000002E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_252:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: AF: Acknowledge failure reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x41    
   \              0x46 0x3A    
   \              0x20 0x41    
   \              0x63 0x6B    
   \              0x6E 0x6F    
   \              0x77 0x6C    
   \              0x65 0x64    
   \              0x67 0x65    
   \              0x20 0x66    
   \              0x61 0x69    
   \              0x6C 0x75    
   \              0x72 0x65    
   \              0x20 0x72    
   \              0x65 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_253:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: OVR: Overrun/Underrun reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4F    
   \              0x56 0x52    
   \              0x3A 0x20    
   \              0x4F 0x76    
   \              0x65 0x72    
   \              0x72 0x75    
   \              0x6E 0x2F    
   \              0x55 0x6E    
   \              0x64 0x65    
   \              0x72 0x72    
   \              0x75 0x6E    
   \              0x20 0x72    
   \              0x65 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_254:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: DMA: DMA Error reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x44    
   \              0x4D 0x41    
   \              0x3A 0x20    
   \              0x44 0x4D    
   \              0x41 0x20    
   \              0x45 0x72    
   \              0x72 0x6F    
   \              0x72 0x20    
   \              0x72 0x65    
   \              0x70 0x6F    
   \              0x72 0x74    
   \              0x65 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_255:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: TIMEOUT: Timeout Error reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x54    
   \              0x49 0x4D    
   \              0x45 0x4F    
   \              0x55 0x54    
   \              0x3A 0x20    
   \              0x54 0x69    
   \              0x6D 0x65    
   \              0x6F 0x75    
   \              0x74 0x20    
   \              0x45 0x72    
   \              0x72 0x6F    
   \              0x72 0x20    
   \              0x72 0x65    
   \              0x70 0x6F    
   \              0x72 0x74    
   \              0x65 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   0000002E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_256:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: Unknown Error reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x55    
   \              0x6E 0x6B    
   \              0x6E 0x6F    
   \              0x77 0x6E    
   \              0x20 0x45    
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x20 0x72    
   \              0x65 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_257:
   \   00000000   0x49 0x32          DC8 "I2C BUSY: I2C reported BUSY error.\015\012"
   \              0x43 0x20    
   \              0x42 0x55    
   \              0x53 0x59    
   \              0x3A 0x20    
   \              0x49 0x32    
   \              0x43 0x20    
   \              0x72 0x65    
   \              0x70 0x6F    
   \              0x72 0x74    
   \              0x65 0x64    
   \              0x20 0x42    
   \              0x55 0x53    
   \              0x59 0x20    
   \              0x65 0x72    
   \              0x72 0x6F    
   \              0x72 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_258:
   \   00000000   0x49 0x32          DC8 "I2C TIMEOUT: I2C reported TIMEOUT.\015\012"
   \              0x43 0x20    
   \              0x54 0x49    
   \              0x4D 0x45    
   \              0x4F 0x55    
   \              0x54 0x3A    
   \              0x20 0x49    
   \              0x32 0x43    
   \              0x20 0x72    
   \              0x65 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x20    
   \              0x54 0x49    
   \              0x4D 0x45    
   \              0x4F 0x55    
   \              0x54 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_259:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: I2C reported unnown error.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x49    
   \              0x32 0x43    
   \              0x20 0x72    
   \              0x65 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x20    
   \              0x75 0x6E    
   \              0x6E 0x6F    
   \              0x77 0x6E    
   \              0x20 0x65    
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_260:
   \   00000000   0x0D 0x0A          DC8 "\015\012\015\012> "
   \              0x0D 0x0A    
   \              0x3E 0x20    
   \              0x00         
   \   00000007   0x00               DC8 0
   3701          
   3702          /*void sleep(void) {
   3703          //    TimMasterHandle.Instance = TIM5;
   3704           
   3705              // Disable HAL tick interrupt
   3706          //    __HAL_TIM_DISABLE_IT(&TimMasterHandle, TIM_IT_CC2);
   3707           
   3708              // Request to enter SLEEP mode
   3709              HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
   3710           
   3711              // Enable HAL tick interrupt
   3712          //    __HAL_TIM_ENABLE_IT(&TimMasterHandle, TIM_IT_CC2);
   3713          }*/
   3714           
   3715          /*void deepsleep(void) {
   3716              // Request to enter STOP mode with regulator in low power mode
   3717              HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
   3718           
   3719              // After wake-up from STOP reconfigure the PLL
   3720              //SetSysClock();
   3721              SystemClock_Config();
   3722          }*/
   3723          
   3724          /************************ (C) COPYRIGHT WeatherCloud *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
    1152   RoadBrd_ParseString
      1152   -> BGM111_Transmit
      1152   -> Get_DriverStates
      1152   -> Get_DriverStatus
      1152   -> HAL_Delay
      1152   -> HAL_NVIC_SystemReset
      1152   -> MX_I2C1_Reset
      1152   -> RdBrd_CAL_GetStr
      1152   -> RoadBrdSnd_ClrBffrs
      1152   -> RoadBrdSnd_DumpBin0
      1152   -> RoadBrdSnd_DumpBin16
      1152   -> RoadBrdSnd_DumpBin32
      1152   -> RoadBrdSnd_DumpBin48
      1152   -> RoadBrdSnd_ProcessSound
      1152   -> RoadBrdSnd_getSaveBffr
      1152   -> RoadBrd_Baro_ReadPressure
      1152   -> RoadBrd_Baro_ReadPressure_Scaled
      1152   -> RoadBrd_Baro_ReadTemp
      1152   -> RoadBrd_CAL_GetOffset
      1152   -> RoadBrd_CAL_GetSlope
      1152   -> RoadBrd_CAL_GetTimeString
      1152   -> RoadBrd_CAL_InitializeFrmFlash
      1152   -> RoadBrd_CAL_Set_CalItem
      1152   -> RoadBrd_CAL_Set_TimeString
      1152   -> RoadBrd_CoolEye_ReadValues
      1152   -> RoadBrd_CoolEye_ReadValues_Scaled
      1152   -> RoadBrd_Get_BootDelay
      1152   -> RoadBrd_Get_RdSndTickCnt
      1152   -> RoadBrd_Get_SnsrTickCnt
      1152   -> RoadBrd_Get_TackLimit
      1152   -> RoadBrd_GridEyeInit
      1152   -> RoadBrd_GridEyeReset
      1152   -> RoadBrd_GridEye_ReadValues
      1152   -> RoadBrd_GridEye_ReadValues_Scaled
      1152   -> RoadBrd_HumidityInit
      1152   -> RoadBrd_Humidity_ReadHumidity
      1152   -> RoadBrd_Humidity_ReadHumidity_Scaled
      1152   -> RoadBrd_Humidity_ReadTemperature
      1152   -> RoadBrd_I2C_GetError
      1152   -> RoadBrd_I2C_Master_Receive
      1152   -> RoadBrd_I2C_Master_Transmit
      1152   -> RoadBrd_Init_Barometer
      1152   -> RoadBrd_Init_VMonitor
      1152   -> RoadBrd_RGBFullInit
      1152   -> RoadBrd_RGBInit
      1152   -> RoadBrd_RGBReadID
      1152   -> RoadBrd_RGBReadStatus
      1152   -> RoadBrd_RGBReadValues
      1152   -> RoadBrd_RGBReset
      1152   -> RoadBrd_ReadTemp
      1152   -> RoadBrd_ReadTemp_Scaled
      1152   -> RoadBrd_Set_BootDelay
      1152   -> RoadBrd_Set_RdSndTickCnt
      1152   -> RoadBrd_Set_SnsrTickCnt
      1152   -> RoadBrd_Set_TackLimit
      1152   -> RoadBrd_Set_UnitsFlag
      1152   -> RoadBrd_TestandRead_Barometer
      1152   -> RoadBrd_UART_Transmit
      1152   -> RoadBrd_VMonitor_RdCurrent
      1152   -> RoadBrd_VMonitor_RdCurrent_Scaled
      1152   -> RoadBrd_VMonitor_RdPower
      1152   -> RoadBrd_VMonitor_RdPower_Scaled
      1152   -> RoadBrd_VMonitor_RdShntVltg
      1152   -> RoadBrd_VMonitor_RdShntVltg_Scaled
      1152   -> RoadBrd_VMonitor_RdVoltage
      1152   -> RoadBrd_VMonitor_RdVoltage_Scaled
      1152   -> RoadBrd_WWDG_InitializeFrmFlash
      1152   -> RoadBrd_WaitForState
      1152   -> RoadBrd_gpio_Off
      1152   -> RoadBrd_gpio_On
      1152   -> __aeabi_f2d
      1152   -> __aeabi_fdiv
      1152   -> __aeabi_ui2f
      1152   -> atoi
      1152   -> hatoi
      1152   -> isHexNum
      1152   -> isdigit
      1152   -> sprintf
      1152   -> sscanf
      1152   -> strcat
      1152   -> strcpy
      1152   -> strlen
      1152   -> strncmp
       0   RoadBrd_ParserInit
       8   RoadBrd_ParserTsk
         8   -> strcpy
         8   -> strlen
       8   RoadBrd_ProcessParserTsk
         8   -> RoadBrd_ParseString
       0   Tst_Bypass
      24   hatoi
        24   -> strlen
      24   isHexNum
        24   -> strlen


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_10
       4  ??DataTable4_11
       4  ??DataTable4_12
       4  ??DataTable4_13
       4  ??DataTable4_14
       4  ??DataTable4_15
       4  ??DataTable4_16
       4  ??DataTable4_17
       4  ??DataTable4_18
       4  ??DataTable4_19
       4  ??DataTable4_2
       4  ??DataTable4_20
       4  ??DataTable4_21
       4  ??DataTable4_22
       4  ??DataTable4_23
       4  ??DataTable4_24
       4  ??DataTable4_25
       4  ??DataTable4_26
       4  ??DataTable4_27
       4  ??DataTable4_28
       4  ??DataTable4_29
       4  ??DataTable4_3
       4  ??DataTable4_30
       4  ??DataTable4_31
       4  ??DataTable4_32
       4  ??DataTable4_33
       4  ??DataTable4_34
       4  ??DataTable4_35
       4  ??DataTable4_36
       4  ??DataTable4_37
       4  ??DataTable4_38
       4  ??DataTable4_39
       4  ??DataTable4_4
       4  ??DataTable4_40
       4  ??DataTable4_41
       4  ??DataTable4_42
       4  ??DataTable4_43
       4  ??DataTable4_44
       4  ??DataTable4_45
       4  ??DataTable4_46
       4  ??DataTable4_47
       4  ??DataTable4_48
       4  ??DataTable4_49
       4  ??DataTable4_5
       4  ??DataTable4_50
       4  ??DataTable4_51
       4  ??DataTable4_52
       4  ??DataTable4_53
       4  ??DataTable4_54
       4  ??DataTable4_55
       4  ??DataTable4_56
       4  ??DataTable4_57
       4  ??DataTable4_58
       4  ??DataTable4_59
       4  ??DataTable4_6
       4  ??DataTable4_60
       4  ??DataTable4_61
       4  ??DataTable4_62
       4  ??DataTable4_63
       4  ??DataTable4_64
       4  ??DataTable4_65
       4  ??DataTable4_66
       4  ??DataTable4_67
       4  ??DataTable4_68
       4  ??DataTable4_69
       4  ??DataTable4_7
       4  ??DataTable4_8
       4  ??DataTable4_9
      56  ?_0
      36  ?_1
      40  ?_10
      52  ?_100
      24  ?_101
      20  ?_102
       4  ?_103
      40  ?_104
      44  ?_105
      52  ?_106
      60  ?_107
      24  ?_108
      40  ?_109
      32  ?_11
      20  ?_110
      12  ?_111
      40  ?_112
      44  ?_113
      52  ?_114
      40  ?_115
      12  ?_116
      24  ?_117
      24  ?_118
      36  ?_119
      32  ?_12
      36  ?_120
      40  ?_121
      36  ?_122
      12  ?_123
      24  ?_124
       8  ?_125
      28  ?_126
      28  ?_127
       8  ?_128
      24  ?_129
      40  ?_13
       8  ?_130
      20  ?_131
       8  ?_132
      24  ?_133
       8  ?_134
      20  ?_135
       8  ?_136
      20  ?_137
       8  ?_138
      24  ?_139
      32  ?_14
       8  ?_140
      24  ?_141
       8  ?_142
      24  ?_143
       8  ?_144
      24  ?_145
       8  ?_146
      24  ?_147
       8  ?_148
      24  ?_149
      32  ?_15
       8  ?_150
      24  ?_151
       8  ?_152
      24  ?_153
       8  ?_154
      24  ?_155
       8  ?_156
      24  ?_157
       8  ?_158
      24  ?_159
      40  ?_16
       8  ?_160
      24  ?_161
       8  ?_162
      24  ?_163
       8  ?_164
      24  ?_165
       8  ?_166
      24  ?_167
       8  ?_168
      24  ?_169
      36  ?_17
      32  ?_170
      48  ?_171
      32  ?_172
      36  ?_173
      24  ?_174
      32  ?_175
      24  ?_176
      32  ?_177
      24  ?_178
      24  ?_179
       1  ?_18
      24  ?_180
      24  ?_181
      24  ?_182
      24  ?_183
      32  ?_184
      24  ?_185
      24  ?_186
      32  ?_187
      24  ?_188
      24  ?_189
       8  ?_19
      24  ?_190
      24  ?_191
      24  ?_192
      24  ?_193
      24  ?_194
      24  ?_195
      20  ?_196
      40  ?_197
      36  ?_198
      32  ?_199
      68  ?_2
      12  ?_20
      24  ?_200
      32  ?_201
      36  ?_202
      32  ?_203
      40  ?_204
      36  ?_205
      44  ?_206
      36  ?_207
      36  ?_208
      32  ?_209
      20  ?_21
      36  ?_210
      44  ?_211
      36  ?_212
      36  ?_213
      32  ?_214
      36  ?_215
      44  ?_216
      36  ?_217
      36  ?_218
      32  ?_219
      28  ?_22
      36  ?_220
      44  ?_221
      36  ?_222
      36  ?_223
      32  ?_224
      36  ?_225
      32  ?_226
      40  ?_227
      32  ?_228
      44  ?_229
      36  ?_23
      28  ?_230
      24  ?_231
      28  ?_232
      32  ?_233
      32  ?_234
      36  ?_235
      32  ?_236
      40  ?_237
      28  ?_238
      40  ?_239
      32  ?_24
      28  ?_240
      40  ?_241
      40  ?_242
      28  ?_243
      28  ?_244
      24  ?_245
      52  ?_246
      28  ?_247
      36  ?_248
      36  ?_249
      40  ?_25
      40  ?_250
      48  ?_251
      48  ?_252
      48  ?_253
      40  ?_254
      48  ?_255
      40  ?_256
      40  ?_257
      40  ?_258
      40  ?_259
      40  ?_26
       8  ?_260
      40  ?_27
      56  ?_28
      20  ?_29
      40  ?_3
      16  ?_30
      12  ?_31
      40  ?_32
      40  ?_33
      20  ?_34
      32  ?_35
      16  ?_36
      16  ?_37
      40  ?_38
      40  ?_39
      32  ?_4
      32  ?_40
      36  ?_41
      48  ?_42
      48  ?_43
      24  ?_44
      20  ?_45
      56  ?_46
      44  ?_47
      40  ?_48
      24  ?_49
      32  ?_5
      28  ?_50
      44  ?_51
      28  ?_52
      36  ?_53
      20  ?_54
      24  ?_55
      32  ?_56
      20  ?_57
      20  ?_58
      24  ?_59
       4  ?_6
      24  ?_60
      36  ?_61
      24  ?_62
      44  ?_63
      16  ?_64
      48  ?_65
      24  ?_66
      20  ?_67
      40  ?_68
      28  ?_69
      40  ?_7
      56  ?_70
      16  ?_71
      12  ?_72
      12  ?_73
      12  ?_74
      72  ?_75
      68  ?_76
      72  ?_77
      64  ?_78
      60  ?_79
      32  ?_8
      60  ?_80
      60  ?_81
      56  ?_82
      64  ?_83
      64  ?_84
      64  ?_85
      64  ?_86
      64  ?_87
      68  ?_88
      32  ?_89
      32  ?_9
       8  ?_90
      52  ?_91
      36  ?_92
      32  ?_93
      32  ?_94
      44  ?_95
      32  ?_96
      40  ?_97
      40  ?_98
      44  ?_99
       1  Bypass
      44  ParseString
   14760  RoadBrd_ParseString
      12  RoadBrd_ParserInit
      66  RoadBrd_ParserTsk
      40  RoadBrd_ProcessParserTsk
       6  Tst_Bypass
      88  hatoi
      74  isHexNum

 
     45 bytes in section .bss
  8 169 bytes in section .rodata
 15 366 bytes in section .text
 
 15 366 bytes of CODE  memory
  8 169 bytes of CONST memory
     45 bytes of DATA  memory

Errors: none
Warnings: none
