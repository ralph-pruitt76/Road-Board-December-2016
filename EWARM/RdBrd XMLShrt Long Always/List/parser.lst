###############################################################################
#
# IAR ANSI C/C++ Compiler V7.60.2.11341/W32 for ARM       06/Oct/2017  07:52:39
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\parser.c
#    Command line =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\parser.c
#        -D USE_HAL_DRIVER -D STM32L152xE -D USE_STM32L1XX_NUCLEO -D ASCII -D
#        REV_L -D LONG_DELAY -D XML_SHRT -lCN
#        "D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\RdBrd
#        XMLShrt Long Always\List" -o
#        "D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\RdBrd
#        XMLShrt Long Always\Obj" --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_clustering --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.4\arm\INC\c\DLib_Config_Full.h" -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/STM32L1xx_HAL_Driver/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/STM32L1xx_HAL_Driver/Inc/Legacy\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/BSP/STM32L1xx_Nucleo\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/portable/IAR/ARM_CM3\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Core/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/CMSIS/Include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM/../Drivers/CMSIS/Device/ST/STM32L1xx/Include\
#        -I
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\..\Middlewares\Third_Party\BgLib\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.4\arm\CMSIS\Include\"
#    Locale       =  English_United States.1252
#    List file    =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\RdBrd
#        XMLShrt Long Always\List\parser.lst
#    Object file  =  
#        D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\EWARM\RdBrd
#        XMLShrt Long Always\Obj\parser.o
#
###############################################################################

D:\GoogleDriveCLT\GoogleDrive\WeatherCloud\Roadboard\Software\Road-Board-December-2016N8\Src\parser.c
      1          /**
      2            ******************************************************************************
      3            * File Name          : parser.c
      4            * Description        : This file provides code that parses the passed string and 
      5            *                      performs the requested operation. It then returns a string
      6            *                      hardware based on the LPS22HB chip.
      7            ******************************************************************************
      8            *
      9            * COPYRIGHT(c) 2016 WeatherCloud
     10            *
     11            * Redistribution and use in source and binary forms, with or without modification,
     12            * are permitted provided that the following conditions are met:
     13            *   1. Redistributions of source code must retain the above copyright notice,
     14            *      this list of conditions and the following disclaimer.
     15            *   2. Redistributions in binary form must reproduce the above copyright notice,
     16            *      this list of conditions and the following disclaimer in the documentation
     17            *      and/or other materials provided with the distribution.
     18            *   3. Neither the name of WeatherCloud nor the names of its contributors
     19            *      may be used to endorse or promote products derived from this software
     20            *      without specific prior written permission.
     21            *
     22            * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     23            * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     24            * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     25            * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
     26            * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     27            * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     28            * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
     29            * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
     30            * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
     31            * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     32            *
     33            ******************************************************************************
     34            */
     35          
     36          /* Includes ------------------------------------------------------------------*/
     37          #include "parser.h"
     38          #include "ErrorCodes.h"
     39          #include <ctype.h>
     40          #include <stdlib.h>
     41          #include "wwdg.h"
     42          #include "Calibration.h"
     43          
     44          // Enums
     45          typedef enum 
     46          {
     47            NOT_INIT = 0,
     48            AVAILABLE = 1,
     49            BUSY = 2
     50          } ParseTskFlg;
     51          

   \                                 In section .bss, align 1
     52          static bool Bypass = false;
   \                     Bypass:
   \   00000000                      DS8 1
     53          
     54          // Parser Structure for tasks.
     55          struct
     56          {
     57            char          tempBuffer[BUFFER_SIZE];
     58            ParseTskFlg   ParseFlg;

   \                                 In section .bss, align 4
     59          } static ParseString;
   \                     ParseString:
   \   00000000                      DS8 44
     60          
     61          /* Parser functions */
     62          
     63          /**
     64            * @brief  This routine initializes the Parse Task Structure.
     65            * @param  *tempBffr: String to be parsed.
     66            * @retval HAL_StatusTypeDef:     HAL_OK:       Tasking of block of data to UART success.
     67            */

   \                                 In section .text, align 2, keep-with-next
     68          HAL_StatusTypeDef RoadBrd_ParserInit( void )
     69          {
     70            ParseString.ParseFlg = AVAILABLE;
   \                     RoadBrd_ParserInit: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x....             LDR.N    R1,??DataTable2
   \   00000004   0xF881 0x0028      STRB     R0,[R1, #+40]
     71            return HAL_OK;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x4770             BX       LR               ;; return
     72          }
     73          
     74          /**
     75            * @brief  This routine handles the operation of setting up a Parse Event.
     76            * @param  *tempBffr: String to be parsed.
     77            * @retval HAL_StatusTypeDef:     HAL_OK:       Tasking of block of data to UART success.
     78            *                                HAL_ERROR:    Error found in Tasking or data passed.
     79            *                                HAL_BUSY:     UART is busy.
     80            *                                HAL_TIMEOUT:  UART timed out.
     81            */

   \                                 In section .text, align 2, keep-with-next
     82          HAL_StatusTypeDef RoadBrd_ParserTsk(char *tempBffr)
     83          {
   \                     RoadBrd_ParserTsk: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     84            // Test ParseFlg.
     85            if (ParseString.ParseFlg == BUSY)
   \   00000004   0x....             LDR.N    R0,??DataTable2
   \   00000006   0xF890 0x0028      LDRB     R0,[R0, #+40]
   \   0000000A   0x2802             CMP      R0,#+2
   \   0000000C   0xD101             BNE.N    ??RoadBrd_ParserTsk_0
     86              return HAL_BUSY;
   \   0000000E   0x2002             MOVS     R0,#+2
   \   00000010   0xE016             B.N      ??RoadBrd_ParserTsk_1
     87            else if (ParseString.ParseFlg == NOT_INIT)
   \                     ??RoadBrd_ParserTsk_0: (+1)
   \   00000012   0x....             LDR.N    R0,??DataTable2
   \   00000014   0xF890 0x0028      LDRB     R0,[R0, #+40]
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD101             BNE.N    ??RoadBrd_ParserTsk_2
     88              return HAL_ERROR;
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0xE00F             B.N      ??RoadBrd_ParserTsk_1
     89            // Next Lets make sure passed string is not too big.
     90          //  if (strlen((char *)tempBffr) >= BUFFER_SIZE)
     91            if (strlen(tempBffr) >= BUFFER_SIZE)
   \                     ??RoadBrd_ParserTsk_2: (+1)
   \   00000020   0x0020             MOVS     R0,R4
   \   00000022   0x.... 0x....      BL       strlen
   \   00000026   0x2828             CMP      R0,#+40
   \   00000028   0xD301             BCC.N    ??RoadBrd_ParserTsk_3
     92              return HAL_ERROR;
   \   0000002A   0x2001             MOVS     R0,#+1
   \   0000002C   0xE008             B.N      ??RoadBrd_ParserTsk_1
     93            // Copy String into Structure and set as busy.
     94          //  strcpy( (char *)ParseString.tempBuffer, (char *)tempBffr);
     95            strcpy( ParseString.tempBuffer, tempBffr);
   \                     ??RoadBrd_ParserTsk_3: (+1)
   \   0000002E   0x0021             MOVS     R1,R4
   \   00000030   0x....             LDR.N    R0,??DataTable2
   \   00000032   0x.... 0x....      BL       strcpy
     96            ParseString.ParseFlg = BUSY;
   \   00000036   0x2002             MOVS     R0,#+2
   \   00000038   0x....             LDR.N    R1,??DataTable2
   \   0000003A   0xF881 0x0028      STRB     R0,[R1, #+40]
     97            return HAL_OK;
   \   0000003E   0x2000             MOVS     R0,#+0
   \                     ??RoadBrd_ParserTsk_1: (+1)
   \   00000040   0xBD10             POP      {R4,PC}          ;; return
     98          }
     99          
    100          /**
    101            * @brief  This routine handles the operation of processing a Parse Event.
    102            * @param  *tempBffr: String to be parsed.
    103            * @retval HAL_StatusTypeDef:     HAL_OK:       Tasking of block of data to UART success.
    104            *                                HAL_ERROR:    Error found in Tasking or data passed.
    105            *                                HAL_BUSY:     UART is busy.
    106            *                                HAL_TIMEOUT:  UART timed out.
    107            */

   \                                 In section .text, align 2, keep-with-next
    108          HAL_StatusTypeDef RoadBrd_ProcessParserTsk( void )
    109          {
   \                     RoadBrd_ProcessParserTsk: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    110            HAL_StatusTypeDef Status;
    111          
    112            // Test ParseFlg and process.
    113            if (ParseString.ParseFlg == BUSY)
   \   00000002   0x....             LDR.N    R0,??DataTable2
   \   00000004   0xF890 0x0028      LDRB     R0,[R0, #+40]
   \   00000008   0x2802             CMP      R0,#+2
   \   0000000A   0xD10B             BNE.N    ??RoadBrd_ProcessParserTsk_0
    114            {
    115              Status = RoadBrd_ParseString(ParseString.tempBuffer, true);
   \   0000000C   0x2101             MOVS     R1,#+1
   \   0000000E   0x....             LDR.N    R0,??DataTable2
   \   00000010   0x.... 0x....      BL       RoadBrd_ParseString
   \   00000014   0x0004             MOVS     R4,R0
    116              ParseString.ParseFlg = AVAILABLE;
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0x....             LDR.N    R1,??DataTable2
   \   0000001A   0xF881 0x0028      STRB     R0,[R1, #+40]
    117              return Status;
   \   0000001E   0x0020             MOVS     R0,R4
   \   00000020   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000022   0xE000             B.N      ??RoadBrd_ProcessParserTsk_1
    118            }
    119            else
    120              return HAL_OK;
   \                     ??RoadBrd_ProcessParserTsk_0: (+1)
   \   00000024   0x2000             MOVS     R0,#+0
   \                     ??RoadBrd_ProcessParserTsk_1: (+1)
   \   00000026   0xBD10             POP      {R4,PC}          ;; return
    121          }
    122          
    123          
    124          /**
    125            * @brief  This routine parses the passed string and performs the passed operation
    126            * @param  *tempBffr: String to be parsed.
    127            * @retval HAL_StatusTypeDef:     HAL_OK:       Tasking of block of data to UART success.
    128            *                                HAL_ERROR:    Error found in Tasking or data passed.
    129            *                                HAL_BUSY:     UART is busy.
    130            *                                HAL_TIMEOUT:  UART timed out.
    131            */

   \                                 In section .text, align 4, keep-with-next
    132          HAL_StatusTypeDef RoadBrd_ParseString(char *tempBffr, bool BLE_Flag)
    133          {
   \                     RoadBrd_ParseString: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xF5AD 0x6D80      SUB      SP,SP,#+1024
   \   00000008   0xB097             SUB      SP,SP,#+92
   \   0000000A   0x0004             MOVS     R4,R0
   \   0000000C   0x000D             MOVS     R5,R1
    134          #ifdef TEST2
    135            #define RECEIVE_SZ      5
    136            uint8_t Size;
    137            uint8_t i2cData[80];
    138            uint8_t tempBffr3[10];
    139            char tempBffr2[5];
    140            int Loop_cnt;
    141            HAL_StatusTypeDef Status, Save_Status;
    142            int Address;
    143            int num_bytes;
    144            int num_bytes_received;
    145            int Error, x;
    146            char tempstr[20];
    147            char* tempPstr;
    148            int new_value, flag;
    149            float Temp_C, Temp_F, Shunt_V, Bus_V, Crrnt, Power;
    150            uint32_t Err_code;
    151          #else
    152            #ifdef TEST
    153              #define RECEIVE_SZ      5
    154            #else
    155              #define RECEIVE_SZ      30
    156              uint16_t DriverStatus;
    157              int8_t tempBffr2[120];
    158              int8_t tempBffr3[10];
    159              int8_t* BufferPntr;
    160              HAL_StatusTypeDef Status, Save_Status;
    161              uint8_t Size;
    162              int Address;
    163              int num_bytes;
    164              int num_bytes_received;
    165              uint8_t i2cData[80];
    166              int Error, x, y;
    167              Voltage VMeasure, VMeasureScaled;
    168              Current CMeasure, CMeasureScaled;
    169              Power PMeasure, PMeasureScaled;
    170              Temperature TMeasure, TMeasureScaled;
    171              Humidity HMeasure, HMeasureScaled;
    172              RGBInitialize RGBMeasure;
    173              RGBIdent IDMeasure;
    174              RGBStatus RGBSMeasure;
    175              RGBLight RGBValues;
    176              char uuid[10];
    177              float Scale, Offset;
    178          //    PRStatus PRMeasure;
    179              PRPressure PRPMeasure, PRPMeasureScaled;
    180              BinString RSFFTBins;
    181              GridEye     GridMeasure, GridMeasureScaled;
    182              uint32_t Err_code;
    183              uint8_t op_mode, ds_range, adc_rsl, sync, cmp_adjst, cmp_offst, int_assgn, int_persist, cnvrsn_int;
    184              int new_value, flag;
    185              char* tempPstr;
    186              char tempstr[20];
    187            #endif
    188          #endif
    189          
    190              Size = strlen((char *)tempBffr);
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0x.... 0x....      BL       strlen
   \   00000014   0x4680             MOV      R8,R0
    191              
    192              // Test Bypass. If set, then we are in streaming mode.
    193              if ( Bypass )
   \   00000016   0xF8DF 0x0DE8      LDR.W    R0,??RoadBrd_ParseString_0
   \   0000001A   0x7800             LDRB     R0,[R0, #+0]
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD01E             BEQ.N    ??RoadBrd_ParseString_1
    194              {
    195                if (tempBffr[0] == 0x1B)
   \   00000020   0x7820             LDRB     R0,[R4, #+0]
   \   00000022   0x281B             CMP      R0,#+27
   \   00000024   0xD115             BNE.N    ??RoadBrd_ParseString_2
    196                {
    197                  Bypass = false;
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0xF8DF 0x1DD4      LDR.W    R1,??RoadBrd_ParseString_0
   \   0000002C   0x7008             STRB     R0,[R1, #+0]
    198                  strcpy( (char *)tempBffr2, "\r\n\r\n T........TERMINATING MONITOR MODE.........\r\n\r\n> ");
   \   0000002E   0xF8DF 0x1DD4      LDR.W    R1,??RoadBrd_ParseString_0+0x4
   \   00000032   0xA80A             ADD      R0,SP,#+40
   \   00000034   0x.... 0x....      BL       strcpy
    199          #ifdef NUCLEO
    200                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    201          #else
    202                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000038   0xA90A             ADD      R1,SP,#+40
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000040   0x0006             MOVS     R6,R0
    203          #endif
    204                  if (Status != HAL_OK)
   \   00000042   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000044   0x2E00             CMP      R6,#+0
   \   00000046   0xF004 0x83E8      BEQ.W    ??RoadBrd_ParseString_3
    205                    return Status;
   \   0000004A   0x0030             MOVS     R0,R6
   \   0000004C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004E   0xF004 0xBBE6      B.W      ??RoadBrd_ParseString_4
    206                }
    207                else
    208                {
    209                  // Transmit Character to BGM111.
    210                  BGM111_Transmit(1, (uint8_t *)tempBffr);
   \                     ??RoadBrd_ParseString_2: (+1)
   \   00000052   0x0021             MOVS     R1,R4
   \   00000054   0x2001             MOVS     R0,#+1
   \   00000056   0x.... 0x....      BL       BGM111_Transmit
   \   0000005A   0xF004 0xBBDE      B.W      ??RoadBrd_ParseString_3
    211                }
    212              }// EndIf ( Bypass )
    213              else
    214              {
    215                // Normal Mode
    216              
    217                      // We have a good Tasking String. Time to determine action.
    218                      switch( tempBffr[0] )
   \                     ??RoadBrd_ParseString_1: (+1)
   \   0000005E   0x7820             LDRB     R0,[R4, #+0]
   \   00000060   0x2830             CMP      R0,#+48
   \   00000062   0xD02F             BEQ.N    ??RoadBrd_ParseString_5
   \   00000064   0x2831             CMP      R0,#+49
   \   00000066   0xD048             BEQ.N    ??RoadBrd_ParseString_6
   \   00000068   0x2832             CMP      R0,#+50
   \   0000006A   0xD079             BEQ.N    ??RoadBrd_ParseString_7
   \   0000006C   0x2833             CMP      R0,#+51
   \   0000006E   0xF000 0x80AA      BEQ.W    ??RoadBrd_ParseString_8
   \   00000072   0x2834             CMP      R0,#+52
   \   00000074   0xF000 0x80DA      BEQ.W    ??RoadBrd_ParseString_9
   \   00000078   0x2835             CMP      R0,#+53
   \   0000007A   0xF000 0x810A      BEQ.W    ??RoadBrd_ParseString_10
   \   0000007E   0x2836             CMP      R0,#+54
   \   00000080   0xF000 0x8178      BEQ.W    ??RoadBrd_ParseString_11
   \   00000084   0x2841             CMP      R0,#+65
   \   00000086   0xF000 0x818E      BEQ.W    ??RoadBrd_ParseString_12
   \   0000008A   0x2842             CMP      R0,#+66
   \   0000008C   0xF000 0x82E9      BEQ.W    ??RoadBrd_ParseString_13
   \   00000090   0x2843             CMP      R0,#+67
   \   00000092   0xF000 0x8593      BEQ.W    ??RoadBrd_ParseString_14
   \   00000096   0x2844             CMP      R0,#+68
   \   00000098   0xF000 0x877B      BEQ.W    ??RoadBrd_ParseString_15
   \   0000009C   0x2845             CMP      R0,#+69
   \   0000009E   0xF001 0x80ED      BEQ.W    ??RoadBrd_ParseString_16
   \   000000A2   0x2846             CMP      R0,#+70
   \   000000A4   0xF001 0x80FF      BEQ.W    ??RoadBrd_ParseString_17
   \   000000A8   0x2847             CMP      R0,#+71
   \   000000AA   0xF001 0x8117      BEQ.W    ??RoadBrd_ParseString_18
   \   000000AE   0x2848             CMP      R0,#+72
   \   000000B0   0xF001 0x8194      BEQ.W    ??RoadBrd_ParseString_19
   \   000000B4   0x2850             CMP      R0,#+80
   \   000000B6   0xF001 0x846B      BEQ.W    ??RoadBrd_ParseString_20
   \   000000BA   0x2854             CMP      R0,#+84
   \   000000BC   0xF001 0x8498      BEQ.W    ??RoadBrd_ParseString_21
   \   000000C0   0xF004 0xBB23      B.W      ??RoadBrd_ParseString_22
    219                      {
    220          //**************************************************************************************************
    221                      case '0':
    222                        // Enable Road sound and fill buffer. 
    223                        Status = RoadBrdSnd_ProcessSound();
   \                     ??RoadBrd_ParseString_5: (+1)
   \   000000C4   0x.... 0x....      BL       RoadBrdSnd_ProcessSound
   \   000000C8   0x0006             MOVS     R6,R0
    224                        if (Status == HAL_OK)
   \   000000CA   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000CC   0x2E00             CMP      R6,#+0
   \   000000CE   0xD112             BNE.N    ??RoadBrd_ParseString_23
    225                        {
    226                          // Is this a BLE Operation?
    227                          if ( BLE_Flag )
   \   000000D0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000D2   0x2D00             CMP      R5,#+0
   \   000000D4   0xD00A             BEQ.N    ??RoadBrd_ParseString_24
    228                          {
    229                            // Yes...Build and Send BLE Response NOW.
    230                            strcpy( (char *)tempBffr2, "<STATUS>CMD_RDSNDBFFR_FILL</STATUS>");
   \   000000D6   0xF8DF 0x1DD8      LDR.W    R1,??RoadBrd_ParseString_25
   \   000000DA   0xA80A             ADD      R0,SP,#+40
   \   000000DC   0x.... 0x....      BL       strcpy
    231                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000000E0   0xA80A             ADD      R0,SP,#+40
   \   000000E2   0x.... 0x....      BL       strlen
   \   000000E6   0xA90A             ADD      R1,SP,#+40
   \   000000E8   0x.... 0x....      BL       BGM111_Transmit
    232                          }
    233                          strcpy( (char *)tempBffr2, "Road Sound: Road Sound loaded, processed, and sent to FFT Bins.\r\n");
   \                     ??RoadBrd_ParseString_24: (+1)
   \   000000EC   0xF8DF 0x1E1C      LDR.W    R1,??RoadBrd_ParseString_26
   \   000000F0   0xA80A             ADD      R0,SP,#+40
   \   000000F2   0x.... 0x....      BL       strcpy
    234                        }
    235                        break;
   \                     ??RoadBrd_ParseString_23: (+1)
   \   000000F6   0xF004 0xBB19      B.W      ??RoadBrd_ParseString_27
    236          //**************************************************************************************************
    237                      case '1':
    238                        // Rd_Sound FFT Measurements 0-15. 
    239                        Status = RoadBrdSnd_DumpBin0( &RSFFTBins );
   \                     ??RoadBrd_ParseString_6: (+1)
   \   000000FA   0xA88C             ADD      R0,SP,#+560
   \   000000FC   0x.... 0x....      BL       RoadBrdSnd_DumpBin0
   \   00000100   0x0006             MOVS     R6,R0
    240                        strcpy( (char *)tempBffr2, "Road Sound: FFT Measurements 0-15.\r\n");
   \   00000102   0xF8DF 0x1E0C      LDR.W    R1,??RoadBrd_ParseString_26+0x4
   \   00000106   0xA80A             ADD      R0,SP,#+40
   \   00000108   0x.... 0x....      BL       strcpy
    241          #ifdef NUCLEO
    242                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    243          #else
    244                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000010C   0xA90A             ADD      R1,SP,#+40
   \   0000010E   0x2000             MOVS     R0,#+0
   \   00000110   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000114   0x0006             MOVS     R6,R0
    245          #endif
    246                        if (Status != HAL_OK)
   \   00000116   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000118   0x2E00             CMP      R6,#+0
   \   0000011A   0xD003             BEQ.N    ??RoadBrd_ParseString_28
    247                          return Status;
   \   0000011C   0x0030             MOVS     R0,R6
   \   0000011E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000120   0xF004 0xBB7D      B.W      ??RoadBrd_ParseString_4
    248                        // Is this a BLE Operation?
    249                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_28: (+1)
   \   00000124   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000126   0x2D00             CMP      R5,#+0
   \   00000128   0xD00B             BEQ.N    ??RoadBrd_ParseString_29
    250                        {
    251                          // Yes...Build and Send BLE Response NOW.
    252                          sprintf( (char *)tempBffr2, "<STATUS>ST_FFT0-15:%s</STATUS>", RSFFTBins.dumpStr );
   \   0000012A   0xAA8C             ADD      R2,SP,#+560
   \   0000012C   0xF8DF 0x1DE4      LDR.W    R1,??RoadBrd_ParseString_26+0x8
   \   00000130   0xA80A             ADD      R0,SP,#+40
   \   00000132   0x.... 0x....      BL       sprintf
    253                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000136   0xA80A             ADD      R0,SP,#+40
   \   00000138   0x.... 0x....      BL       strlen
   \   0000013C   0xA90A             ADD      R1,SP,#+40
   \   0000013E   0x.... 0x....      BL       BGM111_Transmit
    254                        }
    255                        // NOW, Build Data String..
    256                        sprintf( (char *)tempBffr2, "     FFT Measurements 0-15: " );
   \                     ??RoadBrd_ParseString_29: (+1)
   \   00000142   0xF8DF 0x1E1C      LDR.W    R1,??RoadBrd_ParseString_30
   \   00000146   0xA80A             ADD      R0,SP,#+40
   \   00000148   0x.... 0x....      BL       sprintf
    257                        strcat( (char *)tempBffr2, (char *)RSFFTBins.dumpStr );
   \   0000014C   0xA98C             ADD      R1,SP,#+560
   \   0000014E   0xA80A             ADD      R0,SP,#+40
   \   00000150   0x.... 0x....      BL       strcat
    258                        strcat( (char *)tempBffr2, "\r\n" );
   \   00000154   0xA1D8             ADR.N    R1,??RoadBrd_ParseString_31  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000156   0xA80A             ADD      R0,SP,#+40
   \   00000158   0x.... 0x....      BL       strcat
    259                       break;
   \   0000015C   0xF004 0xBAE6      B.W      ??RoadBrd_ParseString_27
    260          //**************************************************************************************************
    261                      case '2':
    262                        // Rd_Sound FFT Measurements 16-31. 
    263                        Status = RoadBrdSnd_DumpBin16( &RSFFTBins );
   \                     ??RoadBrd_ParseString_7: (+1)
   \   00000160   0xA88C             ADD      R0,SP,#+560
   \   00000162   0x.... 0x....      BL       RoadBrdSnd_DumpBin16
   \   00000166   0x0006             MOVS     R6,R0
    264                        strcpy( (char *)tempBffr2, "Road Sound: FFT Measurements 16-31.\r\n");
   \   00000168   0xF8DF 0x1DFC      LDR.W    R1,??RoadBrd_ParseString_30+0x8
   \   0000016C   0xA80A             ADD      R0,SP,#+40
   \   0000016E   0x.... 0x....      BL       strcpy
    265          #ifdef NUCLEO
    266                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    267          #else
    268                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000172   0xA90A             ADD      R1,SP,#+40
   \   00000174   0x2000             MOVS     R0,#+0
   \   00000176   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000017A   0x0006             MOVS     R6,R0
    269          #endif
    270                        if (Status != HAL_OK)
   \   0000017C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000017E   0x2E00             CMP      R6,#+0
   \   00000180   0xD003             BEQ.N    ??RoadBrd_ParseString_32
    271                          return Status;
   \   00000182   0x0030             MOVS     R0,R6
   \   00000184   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000186   0xF004 0xBB4A      B.W      ??RoadBrd_ParseString_4
    272                        // Is this a BLE Operation?
    273                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_32: (+1)
   \   0000018A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000018C   0x2D00             CMP      R5,#+0
   \   0000018E   0xD00B             BEQ.N    ??RoadBrd_ParseString_33
    274                        {
    275                          // Yes...Build and Send BLE Response NOW.
    276                          sprintf( (char *)tempBffr2, "<STATUS>ST_FFT16-31:%s</STATUS>", RSFFTBins.dumpStr );
   \   00000190   0xAA8C             ADD      R2,SP,#+560
   \   00000192   0xF8DF 0x1DD8      LDR.W    R1,??RoadBrd_ParseString_30+0xC
   \   00000196   0xA80A             ADD      R0,SP,#+40
   \   00000198   0x.... 0x....      BL       sprintf
    277                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000019C   0xA80A             ADD      R0,SP,#+40
   \   0000019E   0x.... 0x....      BL       strlen
   \   000001A2   0xA90A             ADD      R1,SP,#+40
   \   000001A4   0x.... 0x....      BL       BGM111_Transmit
    278                        }
    279                        // NOW, Build Data String..
    280                        sprintf( (char *)tempBffr2, "     FFT Measurements 16-31: " );
   \                     ??RoadBrd_ParseString_33: (+1)
   \   000001A8   0xF8DF 0x1DC4      LDR.W    R1,??RoadBrd_ParseString_30+0x10
   \   000001AC   0xA80A             ADD      R0,SP,#+40
   \   000001AE   0x.... 0x....      BL       sprintf
    281                        strcat( (char *)tempBffr2, (char *)RSFFTBins.dumpStr );
   \   000001B2   0xA98C             ADD      R1,SP,#+560
   \   000001B4   0xA80A             ADD      R0,SP,#+40
   \   000001B6   0x.... 0x....      BL       strcat
    282                        strcat( (char *)tempBffr2, "\r\n" );
   \   000001BA   0xA1BF             ADR.N    R1,??RoadBrd_ParseString_31  ;; 0x0D, 0x0A, 0x00, 0x00
   \   000001BC   0xA80A             ADD      R0,SP,#+40
   \   000001BE   0x.... 0x....      BL       strcat
    283                        break;
   \   000001C2   0xF004 0xBAB3      B.W      ??RoadBrd_ParseString_27
    284          //**************************************************************************************************
    285                      case '3':
    286                        // Rd_Sound FFT Measurements 32-47. 
    287                        Status = RoadBrdSnd_DumpBin32( &RSFFTBins );
   \                     ??RoadBrd_ParseString_8: (+1)
   \   000001C6   0xA88C             ADD      R0,SP,#+560
   \   000001C8   0x.... 0x....      BL       RoadBrdSnd_DumpBin32
   \   000001CC   0x0006             MOVS     R6,R0
    288                        strcpy( (char *)tempBffr2, "Road Sound: FFT Measurements 32-47.\r\n");
   \   000001CE   0xF8DF 0x1DA4      LDR.W    R1,??RoadBrd_ParseString_30+0x14
   \   000001D2   0xA80A             ADD      R0,SP,#+40
   \   000001D4   0x.... 0x....      BL       strcpy
    289          #ifdef NUCLEO
    290                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    291          #else
    292                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000001D8   0xA90A             ADD      R1,SP,#+40
   \   000001DA   0x2000             MOVS     R0,#+0
   \   000001DC   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000001E0   0x0006             MOVS     R6,R0
    293          #endif
    294                        if (Status != HAL_OK)
   \   000001E2   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000001E4   0x2E00             CMP      R6,#+0
   \   000001E6   0xD003             BEQ.N    ??RoadBrd_ParseString_34
    295                          return Status;
   \   000001E8   0x0030             MOVS     R0,R6
   \   000001EA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001EC   0xF004 0xBB17      B.W      ??RoadBrd_ParseString_4
    296                        // Is this a BLE Operation?
    297                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_34: (+1)
   \   000001F0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000001F2   0x2D00             CMP      R5,#+0
   \   000001F4   0xD00B             BEQ.N    ??RoadBrd_ParseString_35
    298                        {
    299                          // Yes...Build and Send BLE Response NOW.
    300                          sprintf( (char *)tempBffr2, "<STATUS>ST_FFT32-47:%s</STATUS>", RSFFTBins.dumpStr );
   \   000001F6   0xAA8C             ADD      R2,SP,#+560
   \   000001F8   0xF8DF 0x1D7C      LDR.W    R1,??RoadBrd_ParseString_30+0x18
   \   000001FC   0xA80A             ADD      R0,SP,#+40
   \   000001FE   0x.... 0x....      BL       sprintf
    301                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000202   0xA80A             ADD      R0,SP,#+40
   \   00000204   0x.... 0x....      BL       strlen
   \   00000208   0xA90A             ADD      R1,SP,#+40
   \   0000020A   0x.... 0x....      BL       BGM111_Transmit
    302                        }
    303                        // NOW, Build Data String..
    304                        sprintf( (char *)tempBffr2, "     FFT Measurements 32-47: " );
   \                     ??RoadBrd_ParseString_35: (+1)
   \   0000020E   0xF8DF 0x1D6C      LDR.W    R1,??RoadBrd_ParseString_30+0x1C
   \   00000212   0xA80A             ADD      R0,SP,#+40
   \   00000214   0x.... 0x....      BL       sprintf
    305                        strcat( (char *)tempBffr2, (char *)RSFFTBins.dumpStr );
   \   00000218   0xA98C             ADD      R1,SP,#+560
   \   0000021A   0xA80A             ADD      R0,SP,#+40
   \   0000021C   0x.... 0x....      BL       strcat
    306                        strcat( (char *)tempBffr2, "\r\n" );
   \   00000220   0xA1A5             ADR.N    R1,??RoadBrd_ParseString_31  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000222   0xA80A             ADD      R0,SP,#+40
   \   00000224   0x.... 0x....      BL       strcat
    307                        break;
   \   00000228   0xF004 0xBA80      B.W      ??RoadBrd_ParseString_27
    308          //**************************************************************************************************
    309                      case '4':
    310                        // Rd_Sound FFT Measurements 48-63. 
    311                        Status = RoadBrdSnd_DumpBin48( &RSFFTBins );
   \                     ??RoadBrd_ParseString_9: (+1)
   \   0000022C   0xA88C             ADD      R0,SP,#+560
   \   0000022E   0x.... 0x....      BL       RoadBrdSnd_DumpBin48
   \   00000232   0x0006             MOVS     R6,R0
    312                        strcpy( (char *)tempBffr2, "Road Sound: FFT Measurements 48-63.\r\n");
   \   00000234   0xF8DF 0x1D48      LDR.W    R1,??RoadBrd_ParseString_30+0x20
   \   00000238   0xA80A             ADD      R0,SP,#+40
   \   0000023A   0x.... 0x....      BL       strcpy
    313          #ifdef NUCLEO
    314                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    315          #else
    316                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000023E   0xA90A             ADD      R1,SP,#+40
   \   00000240   0x2000             MOVS     R0,#+0
   \   00000242   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000246   0x0006             MOVS     R6,R0
    317          #endif
    318                        if (Status != HAL_OK)
   \   00000248   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000024A   0x2E00             CMP      R6,#+0
   \   0000024C   0xD003             BEQ.N    ??RoadBrd_ParseString_36
    319                          return Status;
   \   0000024E   0x0030             MOVS     R0,R6
   \   00000250   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000252   0xF004 0xBAE4      B.W      ??RoadBrd_ParseString_4
    320                        // Is this a BLE Operation?
    321                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_36: (+1)
   \   00000256   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000258   0x2D00             CMP      R5,#+0
   \   0000025A   0xD00B             BEQ.N    ??RoadBrd_ParseString_37
    322                        {
    323                          // Yes...Build and Send BLE Response NOW.
    324                          sprintf( (char *)tempBffr2, "<STATUS>ST_FFT48-63:%s</STATUS>", RSFFTBins.dumpStr );
   \   0000025C   0xAA8C             ADD      R2,SP,#+560
   \   0000025E   0xF8DF 0x1E04      LDR.W    R1,??RoadBrd_ParseString_38
   \   00000262   0xA80A             ADD      R0,SP,#+40
   \   00000264   0x.... 0x....      BL       sprintf
    325                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000268   0xA80A             ADD      R0,SP,#+40
   \   0000026A   0x.... 0x....      BL       strlen
   \   0000026E   0xA90A             ADD      R1,SP,#+40
   \   00000270   0x.... 0x....      BL       BGM111_Transmit
    326                        }
    327                        // NOW, Build Data String..
    328                        sprintf( (char *)tempBffr2, "     FFT Measurements 48-63: " );
   \                     ??RoadBrd_ParseString_37: (+1)
   \   00000274   0xF8DF 0x1DF0      LDR.W    R1,??RoadBrd_ParseString_38+0x4
   \   00000278   0xA80A             ADD      R0,SP,#+40
   \   0000027A   0x.... 0x....      BL       sprintf
    329                        strcat( (char *)tempBffr2, (char *)RSFFTBins.dumpStr );
   \   0000027E   0xA98C             ADD      R1,SP,#+560
   \   00000280   0xA80A             ADD      R0,SP,#+40
   \   00000282   0x.... 0x....      BL       strcat
    330                        strcat( (char *)tempBffr2, "\r\n" );
   \   00000286   0xA18C             ADR.N    R1,??RoadBrd_ParseString_31  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000288   0xA80A             ADD      R0,SP,#+40
   \   0000028A   0x.... 0x....      BL       strcat
    331                       break;
   \   0000028E   0xF004 0xBA4D      B.W      ??RoadBrd_ParseString_27
    332          //**************************************************************************************************
    333                      case '5':
    334                        // dump results of save Buffer. BufferPntr
    335                        BufferPntr = RoadBrdSnd_getSaveBffr();
   \                     ??RoadBrd_ParseString_10: (+1)
   \   00000292   0x.... 0x....      BL       RoadBrdSnd_getSaveBffr
   \   00000296   0x9047             STR      R0,[SP, #+284]
    336                        strcpy( (char *)tempBffr2, "Road Sound: Results of save Buffer.\r\n");
   \   00000298   0xF8DF 0x1DD0      LDR.W    R1,??RoadBrd_ParseString_38+0x8
   \   0000029C   0xA80A             ADD      R0,SP,#+40
   \   0000029E   0x.... 0x....      BL       strcpy
    337                        Status = RoadBrdSnd_DumpBin0( &RSFFTBins );
   \   000002A2   0xA88C             ADD      R0,SP,#+560
   \   000002A4   0x.... 0x....      BL       RoadBrdSnd_DumpBin0
   \   000002A8   0x0006             MOVS     R6,R0
    338          #ifdef NUCLEO
    339                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    340          #else
    341                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000002AA   0xA90A             ADD      R1,SP,#+40
   \   000002AC   0x2000             MOVS     R0,#+0
   \   000002AE   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000002B2   0x0006             MOVS     R6,R0
    342          #endif
    343                        if (Status != HAL_OK)
   \   000002B4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000002B6   0x2E00             CMP      R6,#+0
   \   000002B8   0xD003             BEQ.N    ??RoadBrd_ParseString_39
    344                          return Status;
   \   000002BA   0x0030             MOVS     R0,R6
   \   000002BC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000002BE   0xF004 0xBAAE      B.W      ??RoadBrd_ParseString_4
    345                        // Is this a BLE Operation?
    346                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_39: (+1)
   \   000002C2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000002C4   0x2D00             CMP      R5,#+0
   \   000002C6   0xD00A             BEQ.N    ??RoadBrd_ParseString_40
    347                        {
    348                          // Yes...Build and Send BLE Response NOW.
    349                          strcpy( (char *)tempBffr2, "<STATUS>ST_FFTBFFR_DUMP:</STATUS>");
   \   000002C8   0xF8DF 0x1DE8      LDR.W    R1,??RoadBrd_ParseString_41
   \   000002CC   0xA80A             ADD      R0,SP,#+40
   \   000002CE   0x.... 0x....      BL       strcpy
    350                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000002D2   0xA80A             ADD      R0,SP,#+40
   \   000002D4   0x.... 0x....      BL       strlen
   \   000002D8   0xA90A             ADD      R1,SP,#+40
   \   000002DA   0x.... 0x....      BL       BGM111_Transmit
    351                        }
    352                        // NOW, Build Data String..
    353                        y=0;
   \                     ??RoadBrd_ParseString_40: (+1)
   \   000002DE   0x2000             MOVS     R0,#+0
   \   000002E0   0x903A             STR      R0,[SP, #+232]
    354                        sprintf( (char *)tempBffr2, "" );
   \   000002E2   0xA1DA             ADR.N    R1,??RoadBrd_ParseString_42  ;; ""
   \   000002E4   0xA80A             ADD      R0,SP,#+40
   \   000002E6   0x.... 0x....      BL       sprintf
    355                        for (x=0; x<FFT_BUFFER_SIZE; x++)
   \   000002EA   0x2000             MOVS     R0,#+0
   \   000002EC   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_43: (+1)
   \   000002EE   0x2F80             CMP      R7,#+128
   \   000002F0   0xDA2E             BGE.N    ??RoadBrd_ParseString_44
    356                        {
    357          //                sprintf( (char *)tempBffr3, "%02x ", BufferPntr[x]);
    358                          sprintf( (char *)tempBffr3, "%04d ", BufferPntr[x]);
   \   000002F2   0x9847             LDR      R0,[SP, #+284]
   \   000002F4   0x57C2             LDRSB    R2,[R0, R7]
   \   000002F6   0xF8DF 0x1DC0      LDR.W    R1,??RoadBrd_ParseString_41+0x4
   \   000002FA   0xA82A             ADD      R0,SP,#+168
   \   000002FC   0x.... 0x....      BL       sprintf
    359                          strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   00000300   0xA92A             ADD      R1,SP,#+168
   \   00000302   0xA80A             ADD      R0,SP,#+40
   \   00000304   0x.... 0x....      BL       strcat
    360                          y++;
   \   00000308   0x983A             LDR      R0,[SP, #+232]
   \   0000030A   0x1C40             ADDS     R0,R0,#+1
   \   0000030C   0x903A             STR      R0,[SP, #+232]
    361                          if (y>=16)
   \   0000030E   0x983A             LDR      R0,[SP, #+232]
   \   00000310   0x2810             CMP      R0,#+16
   \   00000312   0xDB1B             BLT.N    ??RoadBrd_ParseString_45
    362                          {
    363                            strcat( (char *)tempBffr2, "\r\n" );
   \   00000314   0xA168             ADR.N    R1,??RoadBrd_ParseString_31  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000316   0xA80A             ADD      R0,SP,#+40
   \   00000318   0x.... 0x....      BL       strcat
    364                            y=0;
   \   0000031C   0x2000             MOVS     R0,#+0
   \   0000031E   0x903A             STR      R0,[SP, #+232]
    365           #ifdef NUCLEO
    366                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    367          #else
    368                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000320   0xA90A             ADD      R1,SP,#+40
   \   00000322   0x2000             MOVS     R0,#+0
   \   00000324   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000328   0x0006             MOVS     R6,R0
    369          #endif
    370                            if (Status != HAL_OK)
   \   0000032A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000032C   0x2E00             CMP      R6,#+0
   \   0000032E   0xD003             BEQ.N    ??RoadBrd_ParseString_46
    371                              return Status;
   \   00000330   0x0030             MOVS     R0,R6
   \   00000332   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000334   0xF004 0xBA73      B.W      ??RoadBrd_ParseString_4
    372                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \                     ??RoadBrd_ParseString_46: (+1)
   \   00000338   0xA80A             ADD      R0,SP,#+40
   \   0000033A   0x.... 0x....      BL       strlen
   \   0000033E   0xA90A             ADD      R1,SP,#+40
   \   00000340   0x.... 0x....      BL       BGM111_Transmit
    373                            sprintf( (char *)tempBffr2, "" );
   \   00000344   0xA1C1             ADR.N    R1,??RoadBrd_ParseString_42  ;; ""
   \   00000346   0xA80A             ADD      R0,SP,#+40
   \   00000348   0x.... 0x....      BL       sprintf
    374                          }
    375                        }
   \                     ??RoadBrd_ParseString_45: (+1)
   \   0000034C   0x1C7F             ADDS     R7,R7,#+1
   \   0000034E   0xE7CE             B.N      ??RoadBrd_ParseString_43
    376                        strcpy( (char *)tempBffr2, "</STATUS>");
   \                     ??RoadBrd_ParseString_44: (+1)
   \   00000350   0xF8DF 0x1E10      LDR.W    R1,??RoadBrd_ParseString_47
   \   00000354   0xA80A             ADD      R0,SP,#+40
   \   00000356   0x.... 0x....      BL       strcpy
    377                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000035A   0xA80A             ADD      R0,SP,#+40
   \   0000035C   0x.... 0x....      BL       strlen
   \   00000360   0xA90A             ADD      R1,SP,#+40
   \   00000362   0x.... 0x....      BL       BGM111_Transmit
    378                        sprintf( (char *)tempBffr2, "     ---COMPLETE---" );
   \   00000366   0xF8DF 0x1E00      LDR.W    R1,??RoadBrd_ParseString_47+0x4
   \   0000036A   0xA80A             ADD      R0,SP,#+40
   \   0000036C   0x.... 0x....      BL       sprintf
    379                        break;
   \   00000370   0xF004 0xB9DC      B.W      ??RoadBrd_ParseString_27
    380          //**************************************************************************************************
    381                      case '6':
    382                        // Clear all buffers. 
    383                        Status = HAL_OK;
   \                     ??RoadBrd_ParseString_11: (+1)
   \   00000374   0x2000             MOVS     R0,#+0
   \   00000376   0x0006             MOVS     R6,R0
    384                        RoadBrdSnd_ClrBffrs();
   \   00000378   0x.... 0x....      BL       RoadBrdSnd_ClrBffrs
    385                        // Is this a BLE Operation?
    386                        if ( BLE_Flag )
   \   0000037C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000037E   0x2D00             CMP      R5,#+0
   \   00000380   0xD00A             BEQ.N    ??RoadBrd_ParseString_48
    387                        {
    388                          // Yes...Build and Send BLE Response NOW.
    389                          strcpy( (char *)tempBffr2, "<STATUS>ST_FFTCLR</STATUS>");
   \   00000382   0xF8DF 0x1DE8      LDR.W    R1,??RoadBrd_ParseString_47+0x8
   \   00000386   0xA80A             ADD      R0,SP,#+40
   \   00000388   0x.... 0x....      BL       strcpy
    390                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000038C   0xA80A             ADD      R0,SP,#+40
   \   0000038E   0x.... 0x....      BL       strlen
   \   00000392   0xA90A             ADD      R1,SP,#+40
   \   00000394   0x.... 0x....      BL       BGM111_Transmit
    391                        }
    392                        strcpy( (char *)tempBffr2, "Road Sound: All buffers cleared.\r\n");;
   \                     ??RoadBrd_ParseString_48: (+1)
   \   00000398   0xF8DF 0x1DD4      LDR.W    R1,??RoadBrd_ParseString_47+0xC
   \   0000039C   0xA80A             ADD      R0,SP,#+40
   \   0000039E   0x.... 0x....      BL       strcpy
    393                        break;
   \   000003A2   0xF004 0xB9C3      B.W      ??RoadBrd_ParseString_27
    394          //**************************************************************************************************
    395                      case 'A':
    396                        // Barometer. 
    397                        if (Size == 1)
   \                     ??RoadBrd_ParseString_12: (+1)
   \   000003A6   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000003AA   0xF1B8 0x0F01      CMP      R8,#+1
   \   000003AE   0xF000 0x8156      BEQ.W    ??RoadBrd_ParseString_49
    398                        {
    399          //------------------ A Command...Read Pressure...PRESS_OUT_XL...PRESS_OUT_L...PRESS_OUT_H     
    400                        }
    401                        else
    402                        {
    403                          switch( tempBffr[1] )
   \   000003B2   0x7860             LDRB     R0,[R4, #+1]
   \   000003B4   0x2836             CMP      R0,#+54
   \   000003B6   0xD039             BEQ.N    ??RoadBrd_ParseString_50
   \   000003B8   0x2838             CMP      R0,#+56
   \   000003BA   0xF000 0x80B8      BEQ.W    ??RoadBrd_ParseString_51
   \   000003BE   0x2839             CMP      R0,#+57
   \   000003C0   0xF000 0x8122      BEQ.W    ??RoadBrd_ParseString_52
   \   000003C4   0x2849             CMP      R0,#+73
   \   000003C6   0xF040 0x8145      BNE.W    ??RoadBrd_ParseString_53
    404                          {
    405          //------------------ AI Command...Initialize Barometer Sensor     
    406                            case 'I':
    407                              // Clean out old pressure.
    408          //                    Status = RoadBrd_Baro_ReadPressure( &PRPMeasure );
    409                              // Clean out old Temp data.
    410          //                    Status = RoadBrd_Baro_ReadTemp( i2cData );
    411                              //************ Wait 50msec.
    412          //                    RoadBrd_Delay(500);  
    413                   
    414                              Status = RoadBrd_Init_Barometer();
   \                     ??RoadBrd_ParseString_54: (+1)
   \   000003CA   0x.... 0x....      BL       RoadBrd_Init_Barometer
   \   000003CE   0x0006             MOVS     R6,R0
    415                              // Is this a BLE Operation?
    416                              if ( BLE_Flag )
   \   000003D0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000003D2   0x2D00             CMP      R5,#+0
   \   000003D4   0xD00A             BEQ.N    ??RoadBrd_ParseString_55
    417                              {
    418                                // Yes...Build and Send BLE Response NOW.
    419                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000003D6   0xF8DF 0x1E04      LDR.W    R1,??RoadBrd_ParseString_56
   \   000003DA   0xA80A             ADD      R0,SP,#+40
   \   000003DC   0x.... 0x....      BL       strcpy
    420                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000003E0   0xA80A             ADD      R0,SP,#+40
   \   000003E2   0x.... 0x....      BL       strlen
   \   000003E6   0xA90A             ADD      R1,SP,#+40
   \   000003E8   0x.... 0x....      BL       BGM111_Transmit
    421                              }
    422                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_55: (+1)
   \   000003EC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000003EE   0x2E00             CMP      R6,#+0
   \   000003F0   0xD105             BNE.N    ??RoadBrd_ParseString_57
    423                              {
    424                                  strcpy( (char *)tempBffr2, "Initialize Barometer Sensor Passed.\r\n");;
   \   000003F2   0xF8DF 0x1DEC      LDR.W    R1,??RoadBrd_ParseString_56+0x4
   \   000003F6   0xA80A             ADD      R0,SP,#+40
   \   000003F8   0x.... 0x....      BL       strcpy
   \   000003FC   0xE015             B.N      ??RoadBrd_ParseString_58
    425                              }
    426                              else
    427                              {
    428                                  strcpy( (char *)tempBffr2, "Initialize Barometer Sensor FAILED.\r\n");
   \                     ??RoadBrd_ParseString_57: (+1)
   \   000003FE   0xF8DF 0x1E10      LDR.W    R1,??RoadBrd_ParseString_59
   \   00000402   0xA80A             ADD      R0,SP,#+40
   \   00000404   0x.... 0x....      BL       strcpy
    429                                  Save_Status = Status;
   \   00000408   0xF88D 0x60B4      STRB     R6,[SP, #+180]
    430          #ifdef NUCLEO
    431                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    432          #else
    433                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000040C   0xA90A             ADD      R1,SP,#+40
   \   0000040E   0x2000             MOVS     R0,#+0
   \   00000410   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000414   0x0006             MOVS     R6,R0
    434          #endif
    435                                  if (Status != HAL_OK)
   \   00000416   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000418   0x2E00             CMP      R6,#+0
   \   0000041A   0xD003             BEQ.N    ??RoadBrd_ParseString_60
    436                                    return Status;
   \   0000041C   0x0030             MOVS     R0,R6
   \   0000041E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000420   0xF004 0xB9FD      B.W      ??RoadBrd_ParseString_4
    437                                  else
    438                                    Status = Save_Status;
   \                     ??RoadBrd_ParseString_60: (+1)
   \   00000424   0xF89D 0x00B4      LDRB     R0,[SP, #+180]
   \   00000428   0x0006             MOVS     R6,R0
    439                              }
    440                              break;
   \                     ??RoadBrd_ParseString_58: (+1)
   \   0000042A   0xE118             B.N      ??RoadBrd_ParseString_49
    441          //------------------ A0 Command...Enable Barometer     
    442          #if 0                  
    443                          case '0':
    444                              Status = RoadBrd_Enable_Barometer();
    445                              // Is this a BLE Operation?
    446                              if ( BLE_Flag )
    447                              {
    448                                // Yes...Build and Send BLE Response NOW.
    449                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
    450                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
    451                              }
    452                              if (Status == HAL_OK)
    453                              {
    454                                  strcpy( (char *)tempBffr2, "Barometer Sensor: Enable Barometer Passed.\r\n");;
    455                              }
    456                              else
    457                              {
    458                                  strcpy( (char *)tempBffr2, "Barometer Sensor: Enable Barometer FAILED.\r\n");;
    459                              }
    460                              break;
    461          //------------------ A1 Command...Disable Barometer     
    462                            case '1':
    463                              Status = RoadBrd_Disable_Barometer();
    464                              // Is this a BLE Operation?
    465                              if ( BLE_Flag )
    466                              {
    467                                // Yes...Build and Send BLE Response NOW.
    468                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
    469                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
    470                              }
    471                              if (Status == HAL_OK)
    472                              {
    473                                  strcpy( (char *)tempBffr2, "Barometer Sensor: Disable Barometer Passed.\r\n");;
    474                              }
    475                              else
    476                              {
    477                                  strcpy( (char *)tempBffr2, "Barometer Sensor: Disable Barometer FAILED.\r\n");;
    478                                  Save_Status = Status;
    479          #ifdef NUCLEO
    480                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    481          #else
    482                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
    483          #endif
    484                                  if (Status != HAL_OK)
    485                                    return Status;
    486                                  else
    487                                    Status = Save_Status;
    488                              }
    489                              break;
    490          //------------------ A2 Command...Start the Barometer but do not wait.     
    491                            case '2':
    492                              Status = RoadBrd_StartSample_Barometer();
    493                              // Is this a BLE Operation?
    494                              if ( BLE_Flag )
    495                              {
    496                                // Yes...Build and Send BLE Response NOW.
    497                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
    498                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
    499                              }
    500                              if (Status == HAL_OK)
    501                              {
    502                                  strcpy( (char *)tempBffr2, "Start the Barometer but do not wait Passed.\r\n");;
    503                              }
    504                              else
    505                              {
    506                                  strcpy( (char *)tempBffr2, "Start the Barometer but do not wait FAILED.\r\n");;
    507                                  Save_Status = Status;
    508          #ifdef NUCLEO
    509                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    510          #else
    511                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
    512          #endif
    513                                  if (Status != HAL_OK)
    514                                    return Status;
    515                                  else
    516                                    Status = Save_Status;
    517                              }
    518                              break;
    519          //------------------ A3 Command...Start the Barometer and wait for response.    
    520                            case '3':
    521                              Status = RoadBrd_StartSample_BarometerWait();
    522                              // Is this a BLE Operation?
    523                              if ( BLE_Flag )
    524                              {
    525                                // Yes...Build and Send BLE Response NOW.
    526                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
    527                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
    528                              }
    529                              if (Status == HAL_OK)
    530                              {
    531                                  strcpy( (char *)tempBffr2, "Start the Barometer and wait for response Passed.\r\n");;
    532                              }
    533                              else
    534                              {
    535                                  strcpy( (char *)tempBffr2, "Start the Barometer and wait for response FAILED.\r\n");;
    536                                  Save_Status = Status;
    537          #ifdef NUCLEO
    538                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    539          #else
    540                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
    541          #endif
    542                                  if (Status != HAL_OK)
    543                                    return Status;
    544                                  else
    545                                    Status = Save_Status;
    546                              }
    547                              break;
    548          //------------------ A4 Command...Return Status    
    549                            case '4':
    550                              // Is this a BLE Operation?
    551                              if ( BLE_Flag )
    552                              {
    553                                // Yes...Build and Send BLE Response NOW.
    554                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
    555                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
    556                              }
    557                              Status = RoadBrd_Barometer_Status( &PRMeasure );
    558                              if (Status == HAL_OK)
    559                              {
    560                                sprintf( (char *)tempBffr2, "Barometer Sensor Status: %02x / ", PRMeasure.Status );
    561                                strcat( (char *)tempBffr2, (char *)PRMeasure.Raw );
    562                                strcat( (char *)tempBffr2, "\r\n" );
    563                              }
    564                              break;
    565          //------------------ A5 Command...Wait for Pressure to be complete. 
    566                            case '5':
    567                              Status = RoadBrd_WaitForPressure( (uint16_t)BARO_WAITCNT );
    568                              // Is this a BLE Operation?
    569                              if ( BLE_Flag )
    570                              {
    571                                // Yes...Build and Send BLE Response NOW.
    572                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
    573                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
    574                              }
    575                              if (Status == HAL_OK)
    576                              {
    577                                  strcpy( (char *)tempBffr2, "Wait for Pressure to be complete Passed.\r\n");;
    578                              }
    579                              else
    580                              {
    581                                  strcpy( (char *)tempBffr2, "Wait for Pressure to be complete FAILED.\r\n");;
    582                                  Save_Status = Status;
    583          #ifdef NUCLEO
    584                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    585          #else
    586                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
    587          #endif
    588                                  if (Status != HAL_OK)
    589                                    return Status;
    590                                  else
    591                                    Status = Save_Status;
    592                              }
    593                              break;
    594          #endif
    595          //------------------ A6 Command...Read Pressure...PRESS_OUT_XL...PRESS_OUT_L...PRESS_OUT_H     
    596                            case '6':
    597                              //Status = RoadBrd_Barometer_Status( &PRMeasure );
    598                              Status = RoadBrd_Baro_ReadPressure( &PRPMeasure );
   \                     ??RoadBrd_ParseString_50: (+1)
   \   0000042C   0xA8AD             ADD      R0,SP,#+692
   \   0000042E   0x.... 0x....      BL       RoadBrd_Baro_ReadPressure
   \   00000432   0x0006             MOVS     R6,R0
    599                              if (Status == HAL_OK)
   \   00000434   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000436   0x2E00             CMP      R6,#+0
   \   00000438   0xD104             BNE.N    ??RoadBrd_ParseString_61
    600                                Status = RoadBrd_Baro_ReadPressure_Scaled( &PRPMeasureScaled );
   \   0000043A   0xA8FF             ADD      R0,SP,#+1020
   \   0000043C   0x3040             ADDS     R0,R0,#+64
   \   0000043E   0x.... 0x....      BL       RoadBrd_Baro_ReadPressure_Scaled
   \   00000442   0x0006             MOVS     R6,R0
    601                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_61: (+1)
   \   00000444   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000446   0x2E00             CMP      R6,#+0
   \   00000448   0xD15A             BNE.N    ??RoadBrd_ParseString_62
    602                              {
    603                                strcpy( (char *)tempBffr2, "A6 Command...Read Pressure Passed.\r\n");;
   \   0000044A   0xF8DF 0x1DC8      LDR.W    R1,??RoadBrd_ParseString_59+0x4
   \   0000044E   0xA80A             ADD      R0,SP,#+40
   \   00000450   0x.... 0x....      BL       strcpy
    604          #ifdef NUCLEO
    605                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    606          #else
    607                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000454   0xA90A             ADD      R1,SP,#+40
   \   00000456   0x2000             MOVS     R0,#+0
   \   00000458   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000045C   0x0006             MOVS     R6,R0
    608          #endif
    609                                if (Status != HAL_OK)
   \   0000045E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000460   0x2E00             CMP      R6,#+0
   \   00000462   0xD003             BEQ.N    ??RoadBrd_ParseString_63
    610                                  return Status;
   \   00000464   0x0030             MOVS     R0,R6
   \   00000466   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000468   0xF004 0xB9D9      B.W      ??RoadBrd_ParseString_4
    611                                // NOW, Build Data String..
    612                                sprintf( (char *)tempBffr2, " PRESSURE(PRESS_OUT_H...PRESS_OUT_L...PRESS_OUT_XL)\r\n" );
   \                     ??RoadBrd_ParseString_63: (+1)
   \   0000046C   0xF8DF 0x1DA8      LDR.W    R1,??RoadBrd_ParseString_59+0x8
   \   00000470   0xA80A             ADD      R0,SP,#+40
   \   00000472   0x.... 0x....      BL       sprintf
    613          #ifdef NUCLEO
    614                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    615          #else
    616                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000476   0xA90A             ADD      R1,SP,#+40
   \   00000478   0x2000             MOVS     R0,#+0
   \   0000047A   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000047E   0x0006             MOVS     R6,R0
    617          #endif
    618                                if (Status != HAL_OK)
   \   00000480   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000482   0x2E00             CMP      R6,#+0
   \   00000484   0xD003             BEQ.N    ??RoadBrd_ParseString_64
    619                                  return Status;
   \   00000486   0x0030             MOVS     R0,R6
   \   00000488   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000048A   0xF004 0xB9C8      B.W      ??RoadBrd_ParseString_4
    620                               
    621                                // Now show Decimal value of items.
    622                                sprintf( (char *)tempBffr2, " PRESSURE: %s/%s\r\n", (char *)PRPMeasure.Pressure, (char *)PRPMeasureScaled.Pressure );
   \                     ??RoadBrd_ParseString_64: (+1)
   \   0000048E   0xABFF             ADD      R3,SP,#+1020
   \   00000490   0x3340             ADDS     R3,R3,#+64
   \   00000492   0xAAAD             ADD      R2,SP,#+692
   \   00000494   0xF8DF 0x1D84      LDR.W    R1,??RoadBrd_ParseString_59+0xC
   \   00000498   0xA80A             ADD      R0,SP,#+40
   \   0000049A   0x.... 0x....      BL       sprintf
    623          #ifdef NUCLEO
    624                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    625          #else
    626                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000049E   0xA90A             ADD      R1,SP,#+40
   \   000004A0   0x2000             MOVS     R0,#+0
   \   000004A2   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000004A6   0x0006             MOVS     R6,R0
    627          #endif
    628                                if (Status != HAL_OK)
   \   000004A8   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000004AA   0x2E00             CMP      R6,#+0
   \   000004AC   0xD006             BEQ.N    ??RoadBrd_ParseString_65
    629                                  return Status;
   \   000004AE   0x0030             MOVS     R0,R6
   \   000004B0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000004B2   0xF004 0xB9B4      B.W      ??RoadBrd_ParseString_4
   \   000004B6   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_31:
   \   000004B8   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
    630                                // Is this a BLE Operation?
    631                                if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_65: (+1)
   \   000004BC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000004BE   0x2D00             CMP      R5,#+0
   \   000004C0   0xD00A             BEQ.N    ??RoadBrd_ParseString_66
    632                                {
    633                                  // Yes...Build and Send BLE Response NOW.
    634                                  strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000004C2   0xF8DF 0x1D18      LDR.W    R1,??RoadBrd_ParseString_56
   \   000004C6   0xA80A             ADD      R0,SP,#+40
   \   000004C8   0x.... 0x....      BL       strcpy
    635                                  BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000004CC   0xA80A             ADD      R0,SP,#+40
   \   000004CE   0x.... 0x....      BL       strlen
   \   000004D2   0xA90A             ADD      R1,SP,#+40
   \   000004D4   0x.... 0x....      BL       BGM111_Transmit
    636                                }
    637                                // Now show hex value of items.
    638                                sprintf( (char *)tempBffr2, " PRESSURE:  " );
   \                     ??RoadBrd_ParseString_66: (+1)
   \   000004D8   0xF8DF 0x1DF4      LDR.W    R1,??RoadBrd_ParseString_67
   \   000004DC   0xA80A             ADD      R0,SP,#+40
   \   000004DE   0x.... 0x....      BL       sprintf
    639                                strcat( (char *)tempBffr2, (char *)PRPMeasure.Raw );
   \   000004E2   0xA9B0             ADD      R1,SP,#+704
   \   000004E4   0xA80A             ADD      R0,SP,#+40
   \   000004E6   0x.... 0x....      BL       strcat
    640                                sprintf( (char *)tempBffr3, "  -  %08x\r\n", PRPMeasure.RawC);
   \   000004EA   0x9AB3             LDR      R2,[SP, #+716]
   \   000004EC   0xF8DF 0x1DE4      LDR.W    R1,??RoadBrd_ParseString_67+0x4
   \   000004F0   0xA82A             ADD      R0,SP,#+168
   \   000004F2   0x.... 0x....      BL       sprintf
    641                                strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   000004F6   0xA92A             ADD      R1,SP,#+168
   \   000004F8   0xA80A             ADD      R0,SP,#+40
   \   000004FA   0x.... 0x....      BL       strcat
   \   000004FE   0xE015             B.N      ??RoadBrd_ParseString_68
    642                              }
    643                              else
    644                              {
    645                                  strcpy( (char *)tempBffr2, "A6 Command...Read Pressure FAILED.\r\n");;
   \                     ??RoadBrd_ParseString_62: (+1)
   \   00000500   0xF8DF 0x1DD4      LDR.W    R1,??RoadBrd_ParseString_67+0x8
   \   00000504   0xA80A             ADD      R0,SP,#+40
   \   00000506   0x.... 0x....      BL       strcpy
    646                                  Save_Status = Status;
   \   0000050A   0xF88D 0x60B4      STRB     R6,[SP, #+180]
    647          #ifdef NUCLEO
    648                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    649          #else
    650                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000050E   0xA90A             ADD      R1,SP,#+40
   \   00000510   0x2000             MOVS     R0,#+0
   \   00000512   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000516   0x0006             MOVS     R6,R0
    651          #endif
    652                                  if (Status != HAL_OK)
   \   00000518   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000051A   0x2E00             CMP      R6,#+0
   \   0000051C   0xD003             BEQ.N    ??RoadBrd_ParseString_69
    653                                    return Status;
   \   0000051E   0x0030             MOVS     R0,R6
   \   00000520   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000522   0xF004 0xB97C      B.W      ??RoadBrd_ParseString_4
    654                                  else
    655                                    Status = Save_Status;
   \                     ??RoadBrd_ParseString_69: (+1)
   \   00000526   0xF89D 0x00B4      LDRB     R0,[SP, #+180]
   \   0000052A   0x0006             MOVS     R6,R0
    656                              }
    657                              break;
   \                     ??RoadBrd_ParseString_68: (+1)
   \   0000052C   0xE097             B.N      ??RoadBrd_ParseString_49
    658          
    659          //------------------ A8 Command...Read Temperature....TEMP_OUT_L...TEMP_OUT_H    
    660                            case '8':
    661                              Status = RoadBrd_Baro_ReadTemp( &TMeasure );
   \                     ??RoadBrd_ParseString_51: (+1)
   \   0000052E   0xA83D             ADD      R0,SP,#+244
   \   00000530   0x.... 0x....      BL       RoadBrd_Baro_ReadTemp
   \   00000534   0x0006             MOVS     R6,R0
    662                              if (Status == HAL_OK)
   \   00000536   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000538   0x2E00             CMP      R6,#+0
   \   0000053A   0xD127             BNE.N    ??RoadBrd_ParseString_70
    663                              {
    664                                // Send string to UART..
    665                                strcpy( (char *)tempBffr2, "A8 Command...Read Temperature Passed.\r\n");
   \   0000053C   0xF8DF 0x1DF8      LDR.W    R1,??RoadBrd_ParseString_71
   \   00000540   0xA80A             ADD      R0,SP,#+40
   \   00000542   0x.... 0x....      BL       strcpy
    666          #ifdef NUCLEO
    667                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    668          #else
    669                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000546   0xA90A             ADD      R1,SP,#+40
   \   00000548   0x2000             MOVS     R0,#+0
   \   0000054A   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000054E   0x0006             MOVS     R6,R0
    670          #endif
    671                                if (Status != HAL_OK)
   \   00000550   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000552   0x2E00             CMP      R6,#+0
   \   00000554   0xD003             BEQ.N    ??RoadBrd_ParseString_72
    672                                  return Status;
   \   00000556   0x0030             MOVS     R0,R6
   \   00000558   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000055A   0xF004 0xB960      B.W      ??RoadBrd_ParseString_4
    673                                // NOW, Build Data String..
    674                                sprintf( (char *)tempBffr2, "     TEMP DATA: " );
   \                     ??RoadBrd_ParseString_72: (+1)
   \   0000055E   0xF8DF 0x1DDC      LDR.W    R1,??RoadBrd_ParseString_71+0x4
   \   00000562   0xA80A             ADD      R0,SP,#+40
   \   00000564   0x.... 0x....      BL       sprintf
    675                                strcat( (char *)tempBffr2, (char *)TMeasure.Raw );
   \   00000568   0xF50D 0x7181      ADD      R1,SP,#+258
   \   0000056C   0xA80A             ADD      R0,SP,#+40
   \   0000056E   0x.... 0x....      BL       strcat
    676                                strcat( (char *)tempBffr2, "\r\n" );
   \   00000572   0xA137             ADR.N    R1,??RoadBrd_ParseString_42+0x4  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000574   0xA80A             ADD      R0,SP,#+40
   \   00000576   0x.... 0x....      BL       strcat
    677                              }
    678                              else
    679                                break;
    680          #ifdef NUCLEO
    681                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    682          #else
    683                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000057A   0xA90A             ADD      R1,SP,#+40
   \   0000057C   0x2000             MOVS     R0,#+0
   \   0000057E   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000582   0x0006             MOVS     R6,R0
    684          #endif
    685                              if (Status != HAL_OK)
   \   00000584   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000586   0x2E00             CMP      R6,#+0
   \   00000588   0xD101             BNE.N    ??RoadBrd_ParseString_73
   \   0000058A   0xE004             B.N      ??RoadBrd_ParseString_74
   \                     ??RoadBrd_ParseString_70: (+1)
   \   0000058C   0xE067             B.N      ??RoadBrd_ParseString_49
    686                                return Status;
   \                     ??RoadBrd_ParseString_73: (+1)
   \   0000058E   0x0030             MOVS     R0,R6
   \   00000590   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000592   0xF004 0xB944      B.W      ??RoadBrd_ParseString_4
    687                              // NOW, Build Data String..
    688                              sprintf( (char *)tempBffr2, "     TEMP DATA(Decimal): %d\r\n", TMeasure.RawC );
   \                     ??RoadBrd_ParseString_74: (+1)
   \   00000596   0xF8BD 0x210A      LDRH     R2,[SP, #+266]
   \   0000059A   0xF8DF 0x1E08      LDR.W    R1,??RoadBrd_ParseString_75
   \   0000059E   0xA80A             ADD      R0,SP,#+40
   \   000005A0   0x.... 0x....      BL       sprintf
    689          #ifdef NUCLEO
    690                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    691          #else
    692                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000005A4   0xA90A             ADD      R1,SP,#+40
   \   000005A6   0x2000             MOVS     R0,#+0
   \   000005A8   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000005AC   0x0006             MOVS     R6,R0
    693          #endif
    694                              if (Status != HAL_OK)
   \   000005AE   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000005B0   0x2E00             CMP      R6,#+0
   \   000005B2   0xD003             BEQ.N    ??RoadBrd_ParseString_76
    695                                return Status;
   \   000005B4   0x0030             MOVS     R0,R6
   \   000005B6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000005B8   0xF004 0xB931      B.W      ??RoadBrd_ParseString_4
    696                              // Is this a BLE Operation?
    697                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_76: (+1)
   \   000005BC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000005BE   0x2D00             CMP      R5,#+0
   \   000005C0   0xD00A             BEQ.N    ??RoadBrd_ParseString_77
    698                              {
    699                                // Yes...Build and Send BLE Response NOW.
    700                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000005C2   0xF8DF 0x1C18      LDR.W    R1,??RoadBrd_ParseString_56
   \   000005C6   0xA80A             ADD      R0,SP,#+40
   \   000005C8   0x.... 0x....      BL       strcpy
    701                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000005CC   0xA80A             ADD      R0,SP,#+40
   \   000005CE   0x.... 0x....      BL       strlen
   \   000005D2   0xA90A             ADD      R1,SP,#+40
   \   000005D4   0x.... 0x....      BL       BGM111_Transmit
    702                              }
    703                              // Now calculate Celcius and Farenheit Temp.
    704                              sprintf( (char *)tempBffr2, "     TempC: " );
   \                     ??RoadBrd_ParseString_77: (+1)
   \   000005D8   0xF8DF 0x1DCC      LDR.W    R1,??RoadBrd_ParseString_75+0x4
   \   000005DC   0xA80A             ADD      R0,SP,#+40
   \   000005DE   0x.... 0x....      BL       sprintf
    705                              strcat( (char *)tempBffr2, (char *)TMeasure.TempC );
   \   000005E2   0xA93D             ADD      R1,SP,#+244
   \   000005E4   0xA80A             ADD      R0,SP,#+40
   \   000005E6   0x.... 0x....      BL       strcat
    706                              strcat( (char *)tempBffr2, "     TempF: " );
   \   000005EA   0xF8DF 0x1DC0      LDR.W    R1,??RoadBrd_ParseString_75+0x8
   \   000005EE   0xA80A             ADD      R0,SP,#+40
   \   000005F0   0x.... 0x....      BL       strcat
    707                              strcat( (char *)tempBffr2, (char *)TMeasure.TempF );
   \   000005F4   0xF10D 0x01FB      ADD      R1,SP,#+251
   \   000005F8   0xA80A             ADD      R0,SP,#+40
   \   000005FA   0x.... 0x....      BL       strcat
    708                              strcat( (char *)tempBffr2, "\r\n" );
   \   000005FE   0xA114             ADR.N    R1,??RoadBrd_ParseString_42+0x4  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000600   0xA80A             ADD      R0,SP,#+40
   \   00000602   0x.... 0x....      BL       strcat
    709          /*                    if (Status == HAL_OK)
    710                              {
    711                                strcpy( (char *)tempBffr2, "A8 Command...Read Temperature Passed.\r\n");;
    712          #ifdef NUCLEO
    713                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    714          #else
    715                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
    716          #endif
    717                                if (Status != HAL_OK)
    718                                  return Status;
    719                                // NOW, Build Data String..
    720                                sprintf( (char *)tempBffr2, " Temperature(TEMP_OUT_L...TEMP_OUT_H)\r\n" );
    721          #ifdef NUCLEO
    722                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    723          #else
    724                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
    725          #endif
    726                                if (Status != HAL_OK)
    727                                  return Status;
    728                                sprintf( (char *)tempBffr2, " Temperature:  %02x   %02x\r\n", i2cData[0], i2cData[1] );
    729                              }
    730                              else
    731                              {
    732                                  strcpy( (char *)tempBffr2, "A8 Command...Read Temperature FAILED.\r\n");;
    733                                  Save_Status = Status;
    734          #ifdef NUCLEO
    735                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    736          #else
    737                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
    738          #endif
    739                                  if (Status != HAL_OK)
    740                                    return Status;
    741                                  else
    742                                    Status = Save_Status;
    743                              }*/
    744                              break;
   \   00000606   0xE02A             B.N      ??RoadBrd_ParseString_49
    745          //------------------ A9 Command...Test and Verify WHO_AM_I     
    746                            case '9':
    747                              Status = RoadBrd_TestandRead_Barometer();
   \                     ??RoadBrd_ParseString_52: (+1)
   \   00000608   0x.... 0x....      BL       RoadBrd_TestandRead_Barometer
   \   0000060C   0x0006             MOVS     R6,R0
    748                              // Is this a BLE Operation?
    749                              if ( BLE_Flag )
   \   0000060E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000610   0x2D00             CMP      R5,#+0
   \   00000612   0xD00A             BEQ.N    ??RoadBrd_ParseString_78
    750                              {
    751                                // Yes...Build and Send BLE Response NOW.
    752                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00000614   0xF8DF 0x1BC4      LDR.W    R1,??RoadBrd_ParseString_56
   \   00000618   0xA80A             ADD      R0,SP,#+40
   \   0000061A   0x.... 0x....      BL       strcpy
    753                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000061E   0xA80A             ADD      R0,SP,#+40
   \   00000620   0x.... 0x....      BL       strlen
   \   00000624   0xA90A             ADD      R1,SP,#+40
   \   00000626   0x.... 0x....      BL       BGM111_Transmit
    754                              }
    755                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_78: (+1)
   \   0000062A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000062C   0x2E00             CMP      R6,#+0
   \   0000062E   0xD105             BNE.N    ??RoadBrd_ParseString_79
    756                              {
    757                                  strcpy( (char *)tempBffr2, "Barometer Sensor: WHO_AM_I Passed.\r\n");
   \   00000630   0xF8DF 0x1D7C      LDR.W    R1,??RoadBrd_ParseString_75+0xC
   \   00000634   0xA80A             ADD      R0,SP,#+40
   \   00000636   0x.... 0x....      BL       strcpy
   \   0000063A   0xE006             B.N      ??RoadBrd_ParseString_80
    758                              }
    759                              else
    760                              {
    761                                  strcpy( (char *)tempBffr2, "Barometer Sensor: WHO_AM_I FAILED.\r\n");
   \                     ??RoadBrd_ParseString_79: (+1)
   \   0000063C   0xF8DF 0x1D74      LDR.W    R1,??RoadBrd_ParseString_75+0x10
   \   00000640   0xA80A             ADD      R0,SP,#+40
   \   00000642   0x.... 0x....      BL       strcpy
    762                                  Status = HAL_OK;
   \   00000646   0x2000             MOVS     R0,#+0
   \   00000648   0x0006             MOVS     R6,R0
    763                              }
    764                              break;
   \                     ??RoadBrd_ParseString_80: (+1)
   \   0000064A   0xE008             B.N      ??RoadBrd_ParseString_49
   \                     ??RoadBrd_ParseString_42:
   \   0000064C   0x00 0x00          DC8      "",0x0,0x0,0x0
   \              0x00 0x00    
   \   00000650   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
    765                            default:
    766                              strcpy( (char *)tempBffr2, "ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_53: (+1)
   \   00000654   0xF8DF 0x1D60      LDR.W    R1,??RoadBrd_ParseString_75+0x14
   \   00000658   0xA80A             ADD      R0,SP,#+40
   \   0000065A   0x.... 0x....      BL       strcpy
    767                              break;
    768                          } //EndSwitch
    769                        } //EndElse (Size == 1)
    770                        break;
   \                     ??RoadBrd_ParseString_49: (+1)
   \   0000065E   0xF004 0xB865      B.W      ??RoadBrd_ParseString_27
    771          //**************************************************************************************************
    772                      case 'B':
    773                        // Read Cool Eye. 
    774          //++++++++++++++++++++++++++++++++++++++++++  Cool Eye/Grid Eye Monitor Commands.
    775                        if (Size == 1)
   \                     ??RoadBrd_ParseString_13: (+1)
   \   00000662   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000666   0xF1B8 0x0F01      CMP      R8,#+1
   \   0000066A   0xF040 0x8134      BNE.W    ??RoadBrd_ParseString_81
    776                        {
    777          //------------------ B Command: Read Cool Eye/Grid Eye Values      
    778                          // Read Cool Eye/Grid Eye Values.....
    779                          if ( Get_DriverStates( GRIDEYE_MNTR_TASK ))
   \   0000066E   0x2005             MOVS     R0,#+5
   \   00000670   0x.... 0x....      BL       Get_DriverStates
   \   00000674   0x2800             CMP      R0,#+0
   \   00000676   0xD00B             BEQ.N    ??RoadBrd_ParseString_82
    780                          {
    781                            Status = RoadBrd_GridEye_ReadValues( &GridMeasure );
   \   00000678   0xA856             ADD      R0,SP,#+344
   \   0000067A   0x.... 0x....      BL       RoadBrd_GridEye_ReadValues
   \   0000067E   0x0006             MOVS     R6,R0
    782                            if (Status == HAL_OK)
   \   00000680   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000682   0x2E00             CMP      R6,#+0
   \   00000684   0xD117             BNE.N    ??RoadBrd_ParseString_83
    783                              Status = RoadBrd_GridEye_ReadValues_Scaled( &GridMeasureScaled );
   \   00000686   0xA8C6             ADD      R0,SP,#+792
   \   00000688   0x.... 0x....      BL       RoadBrd_GridEye_ReadValues_Scaled
   \   0000068C   0x0006             MOVS     R6,R0
   \   0000068E   0xE012             B.N      ??RoadBrd_ParseString_83
    784                          }
    785                          else if ( Get_DriverStates( COOLEYE_MNTR_TASK ))
   \                     ??RoadBrd_ParseString_82: (+1)
   \   00000690   0x2006             MOVS     R0,#+6
   \   00000692   0x.... 0x....      BL       Get_DriverStates
   \   00000696   0x2800             CMP      R0,#+0
   \   00000698   0xD00B             BEQ.N    ??RoadBrd_ParseString_84
    786                          {
    787                            Status = RoadBrd_CoolEye_ReadValues( &GridMeasure );
   \   0000069A   0xA856             ADD      R0,SP,#+344
   \   0000069C   0x.... 0x....      BL       RoadBrd_CoolEye_ReadValues
   \   000006A0   0x0006             MOVS     R6,R0
    788                            if (Status == HAL_OK)
   \   000006A2   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000006A4   0x2E00             CMP      R6,#+0
   \   000006A6   0xD106             BNE.N    ??RoadBrd_ParseString_83
    789                              Status = RoadBrd_CoolEye_ReadValues_Scaled( &GridMeasureScaled );
   \   000006A8   0xA8C6             ADD      R0,SP,#+792
   \   000006AA   0x.... 0x....      BL       RoadBrd_CoolEye_ReadValues_Scaled
   \   000006AE   0x0006             MOVS     R6,R0
   \   000006B0   0xE001             B.N      ??RoadBrd_ParseString_83
    790                          }
    791                          else
    792                            Status = HAL_ERROR;
   \                     ??RoadBrd_ParseString_84: (+1)
   \   000006B2   0x2001             MOVS     R0,#+1
   \   000006B4   0x0006             MOVS     R6,R0
    793                          
    794                          // Is this a BLE Operation?
    795                          if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_83: (+1)
   \   000006B6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000006B8   0x2D00             CMP      R5,#+0
   \   000006BA   0xD00A             BEQ.N    ??RoadBrd_ParseString_85
    796                          {
    797                            // Yes...Build and Send BLE Response NOW.
    798                            strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000006BC   0xF8DF 0x1B1C      LDR.W    R1,??RoadBrd_ParseString_56
   \   000006C0   0xA80A             ADD      R0,SP,#+40
   \   000006C2   0x.... 0x....      BL       strcpy
    799                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000006C6   0xA80A             ADD      R0,SP,#+40
   \   000006C8   0x.... 0x....      BL       strlen
   \   000006CC   0xA90A             ADD      R1,SP,#+40
   \   000006CE   0x.... 0x....      BL       BGM111_Transmit
    800                          }
    801                          if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_85: (+1)
   \   000006D2   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000006D4   0x2E00             CMP      R6,#+0
   \   000006D6   0xF040 0x80FC      BNE.W    ??RoadBrd_ParseString_86
    802                          {
    803                            // Send string to UART..
    804                            strcpy( (char *)tempBffr2, "Voltage Monitor/Shunt Voltage...\r\n");
   \   000006DA   0xF8DF 0x1DEC      LDR.W    R1,??RoadBrd_ParseString_87
   \   000006DE   0xA80A             ADD      R0,SP,#+40
   \   000006E0   0x.... 0x....      BL       strcpy
    805          #ifdef NUCLEO
    806                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    807          #else
    808                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000006E4   0xA90A             ADD      R1,SP,#+40
   \   000006E6   0x2000             MOVS     R0,#+0
   \   000006E8   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000006EC   0x0006             MOVS     R6,R0
    809          #endif
    810                            if (Status != HAL_OK)
   \   000006EE   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000006F0   0x2E00             CMP      R6,#+0
   \   000006F2   0xD003             BEQ.N    ??RoadBrd_ParseString_88
    811                              return Status;
   \   000006F4   0x0030             MOVS     R0,R6
   \   000006F6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000006F8   0xF004 0xB891      B.W      ??RoadBrd_ParseString_4
    812                            // NOW, Build Data String..
    813                            for (x=0; x<9; x++)
   \                     ??RoadBrd_ParseString_88: (+1)
   \   000006FC   0x2000             MOVS     R0,#+0
   \   000006FE   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_89: (+1)
   \   00000700   0x2F09             CMP      R7,#+9
   \   00000702   0xF280 0x80D3      BGE.W    ??RoadBrd_ParseString_90
    814                            {
    815                              // Build String
    816                              switch(x)
   \   00000706   0x2F00             CMP      R7,#+0
   \   00000708   0xD00F             BEQ.N    ??RoadBrd_ParseString_91
   \   0000070A   0x2F02             CMP      R7,#+2
   \   0000070C   0xD035             BEQ.N    ??RoadBrd_ParseString_92
   \   0000070E   0xD320             BCC.N    ??RoadBrd_ParseString_93
   \   00000710   0x2F04             CMP      R7,#+4
   \   00000712   0xD05A             BEQ.N    ??RoadBrd_ParseString_94
   \   00000714   0xD345             BCC.N    ??RoadBrd_ParseString_95
   \   00000716   0x2F06             CMP      R7,#+6
   \   00000718   0xF000 0x807F      BEQ.W    ??RoadBrd_ParseString_96
   \   0000071C   0xD369             BCC.N    ??RoadBrd_ParseString_97
   \   0000071E   0x2F08             CMP      R7,#+8
   \   00000720   0xF000 0x80A3      BEQ.W    ??RoadBrd_ParseString_98
   \   00000724   0xF0C0 0x808D      BCC.W    ??RoadBrd_ParseString_99
   \   00000728   0xE0B2             B.N      ??RoadBrd_ParseString_100
    817                              {
    818                                case 0: //Thermistor Values
    819                                  sprintf( (char *)tempBffr2, "     Thermistor DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.Thermistor.Raw,
    820                                                                                                         GridMeasure.Thermistor.TempC,GridMeasureScaled.Thermistor.TempC,
    821                                                                                                         GridMeasure.Thermistor.TempF,GridMeasureScaled.Thermistor.TempF,
    822                                                                                                         GridMeasure.Thermistor.RawC );
   \                     ??RoadBrd_ParseString_91: (+1)
   \   0000072A   0xF8BD 0x016E      LDRH     R0,[SP, #+366]
   \   0000072E   0x9003             STR      R0,[SP, #+12]
   \   00000730   0xA8C7             ADD      R0,SP,#+796
   \   00000732   0x1CC0             ADDS     R0,R0,#+3
   \   00000734   0x9002             STR      R0,[SP, #+8]
   \   00000736   0xA857             ADD      R0,SP,#+348
   \   00000738   0x1CC0             ADDS     R0,R0,#+3
   \   0000073A   0x9001             STR      R0,[SP, #+4]
   \   0000073C   0xA8C6             ADD      R0,SP,#+792
   \   0000073E   0x9000             STR      R0,[SP, #+0]
   \   00000740   0xAB56             ADD      R3,SP,#+344
   \   00000742   0xF50D 0x72B3      ADD      R2,SP,#+358
   \   00000746   0xF8DF 0x1E1C      LDR.W    R1,??RoadBrd_ParseString_101
   \   0000074A   0xA80A             ADD      R0,SP,#+40
   \   0000074C   0x.... 0x....      BL       sprintf
    823          //                        sprintf( (char *)tempBffr2, "     Thermistor DATA: %s   %s   %s   %d\r\n", GridMeasure.Thermistor.Raw,
    824          //                                                                                               GridMeasure.Thermistor.TempC,
    825          //                                                                                               GridMeasure.Thermistor.TempF,
    826          //                                                                                               GridMeasure.Thermistor.RawC );
    827                                  break;
   \   00000750   0xE09E             B.N      ??RoadBrd_ParseString_100
    828                                case 1: //GridEye1 Values
    829                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye1.Raw,
    830                                                                                                         GridMeasure.GridEye1.TempC,GridMeasureScaled.GridEye1.TempC,
    831                                                                                                         GridMeasure.GridEye1.TempF,GridMeasureScaled.GridEye1.TempF,
    832                                                                                                         GridMeasure.GridEye1.RawC );
   \                     ??RoadBrd_ParseString_93: (+1)
   \   00000752   0xF8BD 0x0186      LDRH     R0,[SP, #+390]
   \   00000756   0x9003             STR      R0,[SP, #+12]
   \   00000758   0xA8CD             ADD      R0,SP,#+820
   \   0000075A   0x1CC0             ADDS     R0,R0,#+3
   \   0000075C   0x9002             STR      R0,[SP, #+8]
   \   0000075E   0xA85D             ADD      R0,SP,#+372
   \   00000760   0x1CC0             ADDS     R0,R0,#+3
   \   00000762   0x9001             STR      R0,[SP, #+4]
   \   00000764   0xA8CC             ADD      R0,SP,#+816
   \   00000766   0x9000             STR      R0,[SP, #+0]
   \   00000768   0xAB5C             ADD      R3,SP,#+368
   \   0000076A   0xF50D 0x72BF      ADD      R2,SP,#+382
   \   0000076E   0xF8DF 0x1DF8      LDR.W    R1,??RoadBrd_ParseString_101+0x4
   \   00000772   0xA80A             ADD      R0,SP,#+40
   \   00000774   0x.... 0x....      BL       sprintf
    833          //                        sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye1.Raw,
    834          //                                                                                               GridMeasure.GridEye1.TempC,
    835          //                                                                                               GridMeasure.GridEye1.TempF,
    836          //                                                                                               GridMeasure.GridEye1.RawC );
    837                                  break;
   \   00000778   0xE08A             B.N      ??RoadBrd_ParseString_100
    838                                case 2: //GridEye2 Values
    839                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye2.Raw,
    840                                                                                                         GridMeasure.GridEye2.TempC,GridMeasureScaled.GridEye2.TempC,
    841                                                                                                         GridMeasure.GridEye2.TempF,GridMeasureScaled.GridEye2.TempF,
    842                                                                                                         GridMeasure.GridEye2.RawC );
   \                     ??RoadBrd_ParseString_92: (+1)
   \   0000077A   0xF8BD 0x019E      LDRH     R0,[SP, #+414]
   \   0000077E   0x9003             STR      R0,[SP, #+12]
   \   00000780   0xA8D3             ADD      R0,SP,#+844
   \   00000782   0x1CC0             ADDS     R0,R0,#+3
   \   00000784   0x9002             STR      R0,[SP, #+8]
   \   00000786   0xA863             ADD      R0,SP,#+396
   \   00000788   0x1CC0             ADDS     R0,R0,#+3
   \   0000078A   0x9001             STR      R0,[SP, #+4]
   \   0000078C   0xA8D2             ADD      R0,SP,#+840
   \   0000078E   0x9000             STR      R0,[SP, #+0]
   \   00000790   0xAB62             ADD      R3,SP,#+392
   \   00000792   0xF50D 0x72CB      ADD      R2,SP,#+406
   \   00000796   0xF8DF 0x1DD0      LDR.W    R1,??RoadBrd_ParseString_101+0x4
   \   0000079A   0xA80A             ADD      R0,SP,#+40
   \   0000079C   0x.... 0x....      BL       sprintf
    843          //                        sprintf( (char *)tempBffr2, "     Grid 34 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye2.Raw,
    844          //                                                                                               GridMeasure.GridEye2.TempC,
    845          //                                                                                               GridMeasure.GridEye2.TempF,
    846          //                                                                                               GridMeasure.GridEye2.RawC );
    847                                  break;
   \   000007A0   0xE076             B.N      ??RoadBrd_ParseString_100
    848                                case 3: //GridEye3 Values
    849                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye3.Raw,
    850                                                                                                         GridMeasure.GridEye3.TempC,GridMeasureScaled.GridEye3.TempC,
    851                                                                                                         GridMeasure.GridEye3.TempF,GridMeasureScaled.GridEye3.TempF,
    852                                                                                                         GridMeasure.GridEye3.RawC );
   \                     ??RoadBrd_ParseString_95: (+1)
   \   000007A2   0xF8BD 0x01B6      LDRH     R0,[SP, #+438]
   \   000007A6   0x9003             STR      R0,[SP, #+12]
   \   000007A8   0xA8D9             ADD      R0,SP,#+868
   \   000007AA   0x1CC0             ADDS     R0,R0,#+3
   \   000007AC   0x9002             STR      R0,[SP, #+8]
   \   000007AE   0xA869             ADD      R0,SP,#+420
   \   000007B0   0x1CC0             ADDS     R0,R0,#+3
   \   000007B2   0x9001             STR      R0,[SP, #+4]
   \   000007B4   0xA8D8             ADD      R0,SP,#+864
   \   000007B6   0x9000             STR      R0,[SP, #+0]
   \   000007B8   0xAB68             ADD      R3,SP,#+416
   \   000007BA   0xF50D 0x72D7      ADD      R2,SP,#+430
   \   000007BE   0xF8DF 0x1DA8      LDR.W    R1,??RoadBrd_ParseString_101+0x4
   \   000007C2   0xA80A             ADD      R0,SP,#+40
   \   000007C4   0x.... 0x....      BL       sprintf
    853          //                        sprintf( (char *)tempBffr2, "     Grid 35 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye3.Raw,
    854          //                                                                                               GridMeasure.GridEye3.TempC,
    855          //                                                                                               GridMeasure.GridEye3.TempF,
    856          //                                                                                               GridMeasure.GridEye3.RawC );
    857                                  break;
   \   000007C8   0xE062             B.N      ??RoadBrd_ParseString_100
    858                                case 4: //GridEye4 Values
    859                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye4.Raw,
    860                                                                                                         GridMeasure.GridEye4.TempC,GridMeasureScaled.GridEye4.TempC,
    861                                                                                                         GridMeasure.GridEye4.TempF,GridMeasureScaled.GridEye4.TempF,
    862                                                                                                         GridMeasure.GridEye4.RawC );
   \                     ??RoadBrd_ParseString_94: (+1)
   \   000007CA   0xF8BD 0x01CE      LDRH     R0,[SP, #+462]
   \   000007CE   0x9003             STR      R0,[SP, #+12]
   \   000007D0   0xA8DF             ADD      R0,SP,#+892
   \   000007D2   0x1CC0             ADDS     R0,R0,#+3
   \   000007D4   0x9002             STR      R0,[SP, #+8]
   \   000007D6   0xA86F             ADD      R0,SP,#+444
   \   000007D8   0x1CC0             ADDS     R0,R0,#+3
   \   000007DA   0x9001             STR      R0,[SP, #+4]
   \   000007DC   0xA8DE             ADD      R0,SP,#+888
   \   000007DE   0x9000             STR      R0,[SP, #+0]
   \   000007E0   0xAB6E             ADD      R3,SP,#+440
   \   000007E2   0xF50D 0x72E3      ADD      R2,SP,#+454
   \   000007E6   0xF8DF 0x1D80      LDR.W    R1,??RoadBrd_ParseString_101+0x4
   \   000007EA   0xA80A             ADD      R0,SP,#+40
   \   000007EC   0x.... 0x....      BL       sprintf
    863          //                        sprintf( (char *)tempBffr2, "     Grid 36 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye4.Raw,
    864          //                                                                                               GridMeasure.GridEye4.TempC,
    865          //                                                                                               GridMeasure.GridEye4.TempF,
    866          //                                                                                               GridMeasure.GridEye4.RawC );
    867                                  break;
   \   000007F0   0xE04E             B.N      ??RoadBrd_ParseString_100
    868                                case 5: //GridEye5 Values
    869                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye5.Raw,
    870                                                                                                         GridMeasure.GridEye5.TempC,GridMeasureScaled.GridEye5.TempC,
    871                                                                                                         GridMeasure.GridEye5.TempF,GridMeasureScaled.GridEye5.TempF,
    872                                                                                                         GridMeasure.GridEye5.RawC );
   \                     ??RoadBrd_ParseString_97: (+1)
   \   000007F2   0xF8BD 0x01E6      LDRH     R0,[SP, #+486]
   \   000007F6   0x9003             STR      R0,[SP, #+12]
   \   000007F8   0xA8E5             ADD      R0,SP,#+916
   \   000007FA   0x1CC0             ADDS     R0,R0,#+3
   \   000007FC   0x9002             STR      R0,[SP, #+8]
   \   000007FE   0xA875             ADD      R0,SP,#+468
   \   00000800   0x1CC0             ADDS     R0,R0,#+3
   \   00000802   0x9001             STR      R0,[SP, #+4]
   \   00000804   0xA8E4             ADD      R0,SP,#+912
   \   00000806   0x9000             STR      R0,[SP, #+0]
   \   00000808   0xAB74             ADD      R3,SP,#+464
   \   0000080A   0xF50D 0x72EF      ADD      R2,SP,#+478
   \   0000080E   0xF8DF 0x1D58      LDR.W    R1,??RoadBrd_ParseString_101+0x4
   \   00000812   0xA80A             ADD      R0,SP,#+40
   \   00000814   0x.... 0x....      BL       sprintf
    873          //                        sprintf( (char *)tempBffr2, "     Grid 37 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye5.Raw,
    874          //                                                                                               GridMeasure.GridEye5.TempC,
    875          //                                                                                               GridMeasure.GridEye5.TempF,
    876          //                                                                                               GridMeasure.GridEye5.RawC );
    877                                  break;
   \   00000818   0xE03A             B.N      ??RoadBrd_ParseString_100
    878                                case 6: //GridEye6 Values
    879                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye6.Raw,
    880                                                                                                         GridMeasure.GridEye6.TempC,GridMeasureScaled.GridEye6.TempC,
    881                                                                                                         GridMeasure.GridEye6.TempF,GridMeasureScaled.GridEye6.TempF,
    882                                                                                                         GridMeasure.GridEye6.RawC );
   \                     ??RoadBrd_ParseString_96: (+1)
   \   0000081A   0xF8BD 0x01FE      LDRH     R0,[SP, #+510]
   \   0000081E   0x9003             STR      R0,[SP, #+12]
   \   00000820   0xA8EB             ADD      R0,SP,#+940
   \   00000822   0x1CC0             ADDS     R0,R0,#+3
   \   00000824   0x9002             STR      R0,[SP, #+8]
   \   00000826   0xA87B             ADD      R0,SP,#+492
   \   00000828   0x1CC0             ADDS     R0,R0,#+3
   \   0000082A   0x9001             STR      R0,[SP, #+4]
   \   0000082C   0xA8EA             ADD      R0,SP,#+936
   \   0000082E   0x9000             STR      R0,[SP, #+0]
   \   00000830   0xAB7A             ADD      R3,SP,#+488
   \   00000832   0xF50D 0x72FB      ADD      R2,SP,#+502
   \   00000836   0xF8DF 0x1D30      LDR.W    R1,??RoadBrd_ParseString_101+0x4
   \   0000083A   0xA80A             ADD      R0,SP,#+40
   \   0000083C   0x.... 0x....      BL       sprintf
    883          //                        sprintf( (char *)tempBffr2, "     Grid 38 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye6.Raw,
    884          //                                                                                               GridMeasure.GridEye6.TempC,
    885          //                                                                                               GridMeasure.GridEye6.TempF,
    886          //                                                                                               GridMeasure.GridEye6.RawC );
    887                                  break;
   \   00000840   0xE026             B.N      ??RoadBrd_ParseString_100
    888                                case 7: //GridEye7 Values
    889                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye7.Raw,
    890                                                                                                         GridMeasure.GridEye7.TempC,GridMeasureScaled.GridEye7.TempC,
    891                                                                                                         GridMeasure.GridEye7.TempF,GridMeasureScaled.GridEye7.TempF,
    892                                                                                                         GridMeasure.GridEye7.RawC );
   \                     ??RoadBrd_ParseString_99: (+1)
   \   00000842   0xF8BD 0x0216      LDRH     R0,[SP, #+534]
   \   00000846   0x9003             STR      R0,[SP, #+12]
   \   00000848   0xA8F1             ADD      R0,SP,#+964
   \   0000084A   0x1CC0             ADDS     R0,R0,#+3
   \   0000084C   0x9002             STR      R0,[SP, #+8]
   \   0000084E   0xA881             ADD      R0,SP,#+516
   \   00000850   0x1CC0             ADDS     R0,R0,#+3
   \   00000852   0x9001             STR      R0,[SP, #+4]
   \   00000854   0xA8F0             ADD      R0,SP,#+960
   \   00000856   0x9000             STR      R0,[SP, #+0]
   \   00000858   0xAB80             ADD      R3,SP,#+512
   \   0000085A   0xAA83             ADD      R2,SP,#+524
   \   0000085C   0x1C92             ADDS     R2,R2,#+2
   \   0000085E   0xF8DF 0x1D08      LDR.W    R1,??RoadBrd_ParseString_101+0x4
   \   00000862   0xA80A             ADD      R0,SP,#+40
   \   00000864   0x.... 0x....      BL       sprintf
    893          //                        sprintf( (char *)tempBffr2, "     Grid 39 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye7.Raw,
    894          //                                                                                               GridMeasure.GridEye7.TempC,
    895          //                                                                                               GridMeasure.GridEye7.TempF,
    896          //                                                                                               GridMeasure.GridEye7.RawC );
    897                                  break;
   \   00000868   0xE012             B.N      ??RoadBrd_ParseString_100
    898                                case 8: //GridEye8 Values
    899                                  sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye8.Raw,
    900                                                                                                         GridMeasure.GridEye8.TempC,GridMeasureScaled.GridEye8.TempC,
    901                                                                                                         GridMeasure.GridEye8.TempF,GridMeasureScaled.GridEye8.TempF,
    902                                                                                                         GridMeasure.GridEye8.RawC );
   \                     ??RoadBrd_ParseString_98: (+1)
   \   0000086A   0xF8BD 0x022E      LDRH     R0,[SP, #+558]
   \   0000086E   0x9003             STR      R0,[SP, #+12]
   \   00000870   0xA8F7             ADD      R0,SP,#+988
   \   00000872   0x1CC0             ADDS     R0,R0,#+3
   \   00000874   0x9002             STR      R0,[SP, #+8]
   \   00000876   0xA887             ADD      R0,SP,#+540
   \   00000878   0x1CC0             ADDS     R0,R0,#+3
   \   0000087A   0x9001             STR      R0,[SP, #+4]
   \   0000087C   0xA8F6             ADD      R0,SP,#+984
   \   0000087E   0x9000             STR      R0,[SP, #+0]
   \   00000880   0xAB86             ADD      R3,SP,#+536
   \   00000882   0xAA89             ADD      R2,SP,#+548
   \   00000884   0x1C92             ADDS     R2,R2,#+2
   \   00000886   0xF8DF 0x1CE0      LDR.W    R1,??RoadBrd_ParseString_101+0x4
   \   0000088A   0xA80A             ADD      R0,SP,#+40
   \   0000088C   0x.... 0x....      BL       sprintf
    903          //                        sprintf( (char *)tempBffr2, "     Grid 40 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye8.Raw,
    904          //                                                                                               GridMeasure.GridEye8.TempC,
    905          //                                                                                               GridMeasure.GridEye8.TempF,
    906          //                                                                                               GridMeasure.GridEye8.RawC );
    907                                  break;
    908                              } // EndSwitch(x)
    909                              // Now Print String.
    910           #ifdef NUCLEO
    911                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    912          #else
    913                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \                     ??RoadBrd_ParseString_100: (+1)
   \   00000890   0xA90A             ADD      R1,SP,#+40
   \   00000892   0x2000             MOVS     R0,#+0
   \   00000894   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000898   0x0006             MOVS     R6,R0
    914          #endif
    915                              if (Status != HAL_OK)
   \   0000089A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000089C   0x2E00             CMP      R6,#+0
   \   0000089E   0xD003             BEQ.N    ??RoadBrd_ParseString_102
    916                                return Status;
   \   000008A0   0x0030             MOVS     R0,R6
   \   000008A2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000008A4   0xF003 0xBFBB      B.W      ??RoadBrd_ParseString_4
    917                            } // EndFor(x=0; x<9; x++)
   \                     ??RoadBrd_ParseString_102: (+1)
   \   000008A8   0x1C7F             ADDS     R7,R7,#+1
   \   000008AA   0xE729             B.N      ??RoadBrd_ParseString_89
    918                            sprintf( (char *)tempBffr2, "     SHNT VLTG DATA: " );
   \                     ??RoadBrd_ParseString_90: (+1)
   \   000008AC   0xF8DF 0x1DF8      LDR.W    R1,??RoadBrd_ParseString_103
   \   000008B0   0xA80A             ADD      R0,SP,#+40
   \   000008B2   0x.... 0x....      BL       sprintf
    919                            strcat( (char *)tempBffr2, (char *)VMeasure.Raw );
   \   000008B6   0xA945             ADD      R1,SP,#+276
   \   000008B8   0xA80A             ADD      R0,SP,#+40
   \   000008BA   0x.... 0x....      BL       strcat
    920                            strcat( (char *)tempBffr2, "\r\n" );
   \   000008BE   0xA1BE             ADR.N    R1,??RoadBrd_ParseString_104  ;; 0x0D, 0x0A, 0x00, 0x00
   \   000008C0   0xA80A             ADD      R0,SP,#+40
   \   000008C2   0x.... 0x....      BL       strcat
    921                          } //Endif(Status == HAL_OK)
    922                          else
    923                            break;
    924                          sprintf( (char *)tempBffr2, "     COMPLETE.\r\n" );
   \   000008C6   0xF8DF 0x1DE8      LDR.W    R1,??RoadBrd_ParseString_103+0x8
   \   000008CA   0xA80A             ADD      R0,SP,#+40
   \   000008CC   0x.... 0x....      BL       sprintf
   \   000008D0   0xE170             B.N      ??RoadBrd_ParseString_105
   \                     ??RoadBrd_ParseString_86: (+1)
   \   000008D2   0xF003 0xBF2B      B.W      ??RoadBrd_ParseString_27
    925                        }
    926                        else
    927                        {
    928                          switch( tempBffr[1] )
   \                     ??RoadBrd_ParseString_81: (+1)
   \   000008D6   0x7860             LDRB     R0,[R4, #+1]
   \   000008D8   0x2830             CMP      R0,#+48
   \   000008DA   0xD01F             BEQ.N    ??RoadBrd_ParseString_106
   \   000008DC   0x2831             CMP      R0,#+49
   \   000008DE   0xF000 0x8150      BEQ.W    ??RoadBrd_ParseString_107
   \   000008E2   0x2849             CMP      R0,#+73
   \   000008E4   0xF040 0x8166      BNE.W    ??RoadBrd_ParseString_105
    929                          {
    930          //------------------ BI Command: Initialize Cool Eye/Grid Eye Sensor
    931                            case 'I':
    932                              // Initialize Cool Eye/Grid Eye Sensor.
    933                              Status = RoadBrd_GridEyeInit();
   \                     ??RoadBrd_ParseString_108: (+1)
   \   000008E8   0x.... 0x....      BL       RoadBrd_GridEyeInit
   \   000008EC   0x0006             MOVS     R6,R0
    934                              // Is this a BLE Operation?
    935                              if ( BLE_Flag )
   \   000008EE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000008F0   0x2D00             CMP      R5,#+0
   \   000008F2   0xD00A             BEQ.N    ??RoadBrd_ParseString_109
    936                              {
    937                                // Yes...Build and Send BLE Response NOW.
    938                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000008F4   0xF8DF 0x18E4      LDR.W    R1,??RoadBrd_ParseString_56
   \   000008F8   0xA80A             ADD      R0,SP,#+40
   \   000008FA   0x.... 0x....      BL       strcpy
    939                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000008FE   0xA80A             ADD      R0,SP,#+40
   \   00000900   0x.... 0x....      BL       strlen
   \   00000904   0xA90A             ADD      R1,SP,#+40
   \   00000906   0x.... 0x....      BL       BGM111_Transmit
    940                              }
    941                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_109: (+1)
   \   0000090A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000090C   0x2E00             CMP      R6,#+0
   \   0000090E   0xD104             BNE.N    ??RoadBrd_ParseString_110
    942                              {
    943                                strcpy( (char *)tempBffr2, "Cool Eye/Grid Eye Sensor: Initialization Complete.\r\n");;
   \   00000910   0xF8DF 0x1E04      LDR.W    R1,??RoadBrd_ParseString_111
   \   00000914   0xA80A             ADD      R0,SP,#+40
   \   00000916   0x.... 0x....      BL       strcpy
    944                              }
    945                              break;
   \                     ??RoadBrd_ParseString_110: (+1)
   \   0000091A   0xE14B             B.N      ??RoadBrd_ParseString_105
    946          //------------------ B0 Command...Read Cool Eye/Grid Eye Values.....
    947                            case '0':
    948                              // Read Cool Eye/Grid Eye Values.....
    949                              if ( Get_DriverStates( GRIDEYE_MNTR_TASK ))
   \                     ??RoadBrd_ParseString_106: (+1)
   \   0000091C   0x2005             MOVS     R0,#+5
   \   0000091E   0x.... 0x....      BL       Get_DriverStates
   \   00000922   0x2800             CMP      R0,#+0
   \   00000924   0xD00B             BEQ.N    ??RoadBrd_ParseString_112
    950                              {
    951                                Status = RoadBrd_GridEye_ReadValues( &GridMeasure );
   \   00000926   0xA856             ADD      R0,SP,#+344
   \   00000928   0x.... 0x....      BL       RoadBrd_GridEye_ReadValues
   \   0000092C   0x0006             MOVS     R6,R0
    952                                if (Status == HAL_OK)
   \   0000092E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000930   0x2E00             CMP      R6,#+0
   \   00000932   0xD117             BNE.N    ??RoadBrd_ParseString_113
    953                                  Status = RoadBrd_GridEye_ReadValues_Scaled( &GridMeasureScaled );
   \   00000934   0xA8C6             ADD      R0,SP,#+792
   \   00000936   0x.... 0x....      BL       RoadBrd_GridEye_ReadValues_Scaled
   \   0000093A   0x0006             MOVS     R6,R0
   \   0000093C   0xE012             B.N      ??RoadBrd_ParseString_113
    954                              }
    955                              else if ( Get_DriverStates( COOLEYE_MNTR_TASK ))
   \                     ??RoadBrd_ParseString_112: (+1)
   \   0000093E   0x2006             MOVS     R0,#+6
   \   00000940   0x.... 0x....      BL       Get_DriverStates
   \   00000944   0x2800             CMP      R0,#+0
   \   00000946   0xD00B             BEQ.N    ??RoadBrd_ParseString_114
    956                              {
    957                                Status = RoadBrd_CoolEye_ReadValues( &GridMeasure );
   \   00000948   0xA856             ADD      R0,SP,#+344
   \   0000094A   0x.... 0x....      BL       RoadBrd_CoolEye_ReadValues
   \   0000094E   0x0006             MOVS     R6,R0
    958                                if (Status == HAL_OK)
   \   00000950   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000952   0x2E00             CMP      R6,#+0
   \   00000954   0xD106             BNE.N    ??RoadBrd_ParseString_113
    959                                  Status = RoadBrd_CoolEye_ReadValues_Scaled( &GridMeasureScaled );
   \   00000956   0xA8C6             ADD      R0,SP,#+792
   \   00000958   0x.... 0x....      BL       RoadBrd_CoolEye_ReadValues_Scaled
   \   0000095C   0x0006             MOVS     R6,R0
   \   0000095E   0xE001             B.N      ??RoadBrd_ParseString_113
    960                              }
    961                              else
    962                                Status = HAL_ERROR;
   \                     ??RoadBrd_ParseString_114: (+1)
   \   00000960   0x2001             MOVS     R0,#+1
   \   00000962   0x0006             MOVS     R6,R0
    963          
    964                              // Is this a BLE Operation?
    965                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_113: (+1)
   \   00000964   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000966   0x2D00             CMP      R5,#+0
   \   00000968   0xD00A             BEQ.N    ??RoadBrd_ParseString_115
    966                              {
    967                                // Yes...Build and Send BLE Response NOW.
    968                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   0000096A   0xF8DF 0x1870      LDR.W    R1,??RoadBrd_ParseString_56
   \   0000096E   0xA80A             ADD      R0,SP,#+40
   \   00000970   0x.... 0x....      BL       strcpy
    969                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000974   0xA80A             ADD      R0,SP,#+40
   \   00000976   0x.... 0x....      BL       strlen
   \   0000097A   0xA90A             ADD      R1,SP,#+40
   \   0000097C   0x.... 0x....      BL       BGM111_Transmit
    970                              }
    971          
    972                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_115: (+1)
   \   00000980   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000982   0x2E00             CMP      R6,#+0
   \   00000984   0xF040 0x80FC      BNE.W    ??RoadBrd_ParseString_116
    973                              {
    974                                // Send string to UART..
    975                                strcpy( (char *)tempBffr2, "Voltage Monitor/Shunt Voltage...\r\n");
   \   00000988   0xF8DF 0x1B3C      LDR.W    R1,??RoadBrd_ParseString_87
   \   0000098C   0xA80A             ADD      R0,SP,#+40
   \   0000098E   0x.... 0x....      BL       strcpy
    976          #ifdef NUCLEO
    977                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
    978          #else
    979                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000992   0xA90A             ADD      R1,SP,#+40
   \   00000994   0x2000             MOVS     R0,#+0
   \   00000996   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000099A   0x0006             MOVS     R6,R0
    980          #endif
    981                                if (Status != HAL_OK)
   \   0000099C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000099E   0x2E00             CMP      R6,#+0
   \   000009A0   0xD003             BEQ.N    ??RoadBrd_ParseString_117
    982                                  return Status;
   \   000009A2   0x0030             MOVS     R0,R6
   \   000009A4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000009A6   0xF003 0xBF3A      B.W      ??RoadBrd_ParseString_4
    983                                // NOW, Build Data String..
    984                                for (x=0; x<9; x++)
   \                     ??RoadBrd_ParseString_117: (+1)
   \   000009AA   0x2000             MOVS     R0,#+0
   \   000009AC   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_118: (+1)
   \   000009AE   0x2F09             CMP      R7,#+9
   \   000009B0   0xF280 0x80D3      BGE.W    ??RoadBrd_ParseString_119
    985                                {
    986                                  // Build String
    987                                  switch(x)
   \   000009B4   0x2F00             CMP      R7,#+0
   \   000009B6   0xD00F             BEQ.N    ??RoadBrd_ParseString_120
   \   000009B8   0x2F02             CMP      R7,#+2
   \   000009BA   0xD035             BEQ.N    ??RoadBrd_ParseString_121
   \   000009BC   0xD320             BCC.N    ??RoadBrd_ParseString_122
   \   000009BE   0x2F04             CMP      R7,#+4
   \   000009C0   0xD05A             BEQ.N    ??RoadBrd_ParseString_123
   \   000009C2   0xD345             BCC.N    ??RoadBrd_ParseString_124
   \   000009C4   0x2F06             CMP      R7,#+6
   \   000009C6   0xF000 0x807F      BEQ.W    ??RoadBrd_ParseString_125
   \   000009CA   0xD369             BCC.N    ??RoadBrd_ParseString_126
   \   000009CC   0x2F08             CMP      R7,#+8
   \   000009CE   0xF000 0x80A3      BEQ.W    ??RoadBrd_ParseString_127
   \   000009D2   0xF0C0 0x808D      BCC.W    ??RoadBrd_ParseString_128
   \   000009D6   0xE0B2             B.N      ??RoadBrd_ParseString_129
    988                                  {
    989                                  case 0: //Thermistor Values
    990                                    sprintf( (char *)tempBffr2, "     Thermistor DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.Thermistor.Raw,
    991                                            GridMeasure.Thermistor.TempC,GridMeasureScaled.Thermistor.TempC,
    992                                            GridMeasure.Thermistor.TempF,GridMeasureScaled.Thermistor.TempF,
    993                                            GridMeasure.Thermistor.RawC );
   \                     ??RoadBrd_ParseString_120: (+1)
   \   000009D8   0xF8BD 0x016E      LDRH     R0,[SP, #+366]
   \   000009DC   0x9003             STR      R0,[SP, #+12]
   \   000009DE   0xA8C7             ADD      R0,SP,#+796
   \   000009E0   0x1CC0             ADDS     R0,R0,#+3
   \   000009E2   0x9002             STR      R0,[SP, #+8]
   \   000009E4   0xA857             ADD      R0,SP,#+348
   \   000009E6   0x1CC0             ADDS     R0,R0,#+3
   \   000009E8   0x9001             STR      R0,[SP, #+4]
   \   000009EA   0xA8C6             ADD      R0,SP,#+792
   \   000009EC   0x9000             STR      R0,[SP, #+0]
   \   000009EE   0xAB56             ADD      R3,SP,#+344
   \   000009F0   0xF50D 0x72B3      ADD      R2,SP,#+358
   \   000009F4   0xF8DF 0x1B6C      LDR.W    R1,??RoadBrd_ParseString_101
   \   000009F8   0xA80A             ADD      R0,SP,#+40
   \   000009FA   0x.... 0x....      BL       sprintf
    994                                    //                        sprintf( (char *)tempBffr2, "     Thermistor DATA: %s   %s   %s   %d\r\n", GridMeasure.Thermistor.Raw,
    995                                    //                                                                                               GridMeasure.Thermistor.TempC,
    996                                    //                                                                                               GridMeasure.Thermistor.TempF,
    997                                    //                                                                                               GridMeasure.Thermistor.RawC );
    998                                    break;
   \   000009FE   0xE09E             B.N      ??RoadBrd_ParseString_129
    999                                  case 1: //GridEye1 Values
   1000                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye1.Raw,
   1001                                            GridMeasure.GridEye1.TempC,GridMeasureScaled.GridEye1.TempC,
   1002                                            GridMeasure.GridEye1.TempF,GridMeasureScaled.GridEye1.TempF,
   1003                                            GridMeasure.GridEye1.RawC );
   \                     ??RoadBrd_ParseString_122: (+1)
   \   00000A00   0xF8BD 0x0186      LDRH     R0,[SP, #+390]
   \   00000A04   0x9003             STR      R0,[SP, #+12]
   \   00000A06   0xA8CD             ADD      R0,SP,#+820
   \   00000A08   0x1CC0             ADDS     R0,R0,#+3
   \   00000A0A   0x9002             STR      R0,[SP, #+8]
   \   00000A0C   0xA85D             ADD      R0,SP,#+372
   \   00000A0E   0x1CC0             ADDS     R0,R0,#+3
   \   00000A10   0x9001             STR      R0,[SP, #+4]
   \   00000A12   0xA8CC             ADD      R0,SP,#+816
   \   00000A14   0x9000             STR      R0,[SP, #+0]
   \   00000A16   0xAB5C             ADD      R3,SP,#+368
   \   00000A18   0xF50D 0x72BF      ADD      R2,SP,#+382
   \   00000A1C   0xF8DF 0x1B48      LDR.W    R1,??RoadBrd_ParseString_101+0x4
   \   00000A20   0xA80A             ADD      R0,SP,#+40
   \   00000A22   0x.... 0x....      BL       sprintf
   1004                                    //                        sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye1.Raw,
   1005                                    //                                                                                               GridMeasure.GridEye1.TempC,
   1006                                    //                                                                                               GridMeasure.GridEye1.TempF,
   1007                                    //                                                                                               GridMeasure.GridEye1.RawC );
   1008                                    break;
   \   00000A26   0xE08A             B.N      ??RoadBrd_ParseString_129
   1009                                  case 2: //GridEye2 Values
   1010                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye2.Raw,
   1011                                            GridMeasure.GridEye2.TempC,GridMeasureScaled.GridEye2.TempC,
   1012                                            GridMeasure.GridEye2.TempF,GridMeasureScaled.GridEye2.TempF,
   1013                                            GridMeasure.GridEye2.RawC );
   \                     ??RoadBrd_ParseString_121: (+1)
   \   00000A28   0xF8BD 0x019E      LDRH     R0,[SP, #+414]
   \   00000A2C   0x9003             STR      R0,[SP, #+12]
   \   00000A2E   0xA8D3             ADD      R0,SP,#+844
   \   00000A30   0x1CC0             ADDS     R0,R0,#+3
   \   00000A32   0x9002             STR      R0,[SP, #+8]
   \   00000A34   0xA863             ADD      R0,SP,#+396
   \   00000A36   0x1CC0             ADDS     R0,R0,#+3
   \   00000A38   0x9001             STR      R0,[SP, #+4]
   \   00000A3A   0xA8D2             ADD      R0,SP,#+840
   \   00000A3C   0x9000             STR      R0,[SP, #+0]
   \   00000A3E   0xAB62             ADD      R3,SP,#+392
   \   00000A40   0xF50D 0x72CB      ADD      R2,SP,#+406
   \   00000A44   0xF8DF 0x1B20      LDR.W    R1,??RoadBrd_ParseString_101+0x4
   \   00000A48   0xA80A             ADD      R0,SP,#+40
   \   00000A4A   0x.... 0x....      BL       sprintf
   1014                                    //                        sprintf( (char *)tempBffr2, "     Grid 34 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye2.Raw,
   1015                                    //                                                                                               GridMeasure.GridEye2.TempC,
   1016                                    //                                                                                               GridMeasure.GridEye2.TempF,
   1017                                    //                                                                                               GridMeasure.GridEye2.RawC );
   1018                                    break;
   \   00000A4E   0xE076             B.N      ??RoadBrd_ParseString_129
   1019                                  case 3: //GridEye3 Values
   1020                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye3.Raw,
   1021                                            GridMeasure.GridEye3.TempC,GridMeasureScaled.GridEye3.TempC,
   1022                                            GridMeasure.GridEye3.TempF,GridMeasureScaled.GridEye3.TempF,
   1023                                            GridMeasure.GridEye3.RawC );
   \                     ??RoadBrd_ParseString_124: (+1)
   \   00000A50   0xF8BD 0x01B6      LDRH     R0,[SP, #+438]
   \   00000A54   0x9003             STR      R0,[SP, #+12]
   \   00000A56   0xA8D9             ADD      R0,SP,#+868
   \   00000A58   0x1CC0             ADDS     R0,R0,#+3
   \   00000A5A   0x9002             STR      R0,[SP, #+8]
   \   00000A5C   0xA869             ADD      R0,SP,#+420
   \   00000A5E   0x1CC0             ADDS     R0,R0,#+3
   \   00000A60   0x9001             STR      R0,[SP, #+4]
   \   00000A62   0xA8D8             ADD      R0,SP,#+864
   \   00000A64   0x9000             STR      R0,[SP, #+0]
   \   00000A66   0xAB68             ADD      R3,SP,#+416
   \   00000A68   0xF50D 0x72D7      ADD      R2,SP,#+430
   \   00000A6C   0xF8DF 0x1AF8      LDR.W    R1,??RoadBrd_ParseString_101+0x4
   \   00000A70   0xA80A             ADD      R0,SP,#+40
   \   00000A72   0x.... 0x....      BL       sprintf
   1024                                    //                        sprintf( (char *)tempBffr2, "     Grid 35 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye3.Raw,
   1025                                    //                                                                                               GridMeasure.GridEye3.TempC,
   1026                                    //                                                                                               GridMeasure.GridEye3.TempF,
   1027                                    //                                                                                               GridMeasure.GridEye3.RawC );
   1028                                    break;
   \   00000A76   0xE062             B.N      ??RoadBrd_ParseString_129
   1029                                  case 4: //GridEye4 Values
   1030                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye4.Raw,
   1031                                            GridMeasure.GridEye4.TempC,GridMeasureScaled.GridEye4.TempC,
   1032                                            GridMeasure.GridEye4.TempF,GridMeasureScaled.GridEye4.TempF,
   1033                                            GridMeasure.GridEye4.RawC );
   \                     ??RoadBrd_ParseString_123: (+1)
   \   00000A78   0xF8BD 0x01CE      LDRH     R0,[SP, #+462]
   \   00000A7C   0x9003             STR      R0,[SP, #+12]
   \   00000A7E   0xA8DF             ADD      R0,SP,#+892
   \   00000A80   0x1CC0             ADDS     R0,R0,#+3
   \   00000A82   0x9002             STR      R0,[SP, #+8]
   \   00000A84   0xA86F             ADD      R0,SP,#+444
   \   00000A86   0x1CC0             ADDS     R0,R0,#+3
   \   00000A88   0x9001             STR      R0,[SP, #+4]
   \   00000A8A   0xA8DE             ADD      R0,SP,#+888
   \   00000A8C   0x9000             STR      R0,[SP, #+0]
   \   00000A8E   0xAB6E             ADD      R3,SP,#+440
   \   00000A90   0xF50D 0x72E3      ADD      R2,SP,#+454
   \   00000A94   0xF8DF 0x1AD0      LDR.W    R1,??RoadBrd_ParseString_101+0x4
   \   00000A98   0xA80A             ADD      R0,SP,#+40
   \   00000A9A   0x.... 0x....      BL       sprintf
   1034                                    //                        sprintf( (char *)tempBffr2, "     Grid 36 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye4.Raw,
   1035                                    //                                                                                               GridMeasure.GridEye4.TempC,
   1036                                    //                                                                                               GridMeasure.GridEye4.TempF,
   1037                                    //                                                                                               GridMeasure.GridEye4.RawC );
   1038                                    break;
   \   00000A9E   0xE04E             B.N      ??RoadBrd_ParseString_129
   1039                                  case 5: //GridEye5 Values
   1040                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye5.Raw,
   1041                                            GridMeasure.GridEye5.TempC,GridMeasureScaled.GridEye5.TempC,
   1042                                            GridMeasure.GridEye5.TempF,GridMeasureScaled.GridEye5.TempF,
   1043                                            GridMeasure.GridEye5.RawC );
   \                     ??RoadBrd_ParseString_126: (+1)
   \   00000AA0   0xF8BD 0x01E6      LDRH     R0,[SP, #+486]
   \   00000AA4   0x9003             STR      R0,[SP, #+12]
   \   00000AA6   0xA8E5             ADD      R0,SP,#+916
   \   00000AA8   0x1CC0             ADDS     R0,R0,#+3
   \   00000AAA   0x9002             STR      R0,[SP, #+8]
   \   00000AAC   0xA875             ADD      R0,SP,#+468
   \   00000AAE   0x1CC0             ADDS     R0,R0,#+3
   \   00000AB0   0x9001             STR      R0,[SP, #+4]
   \   00000AB2   0xA8E4             ADD      R0,SP,#+912
   \   00000AB4   0x9000             STR      R0,[SP, #+0]
   \   00000AB6   0xAB74             ADD      R3,SP,#+464
   \   00000AB8   0xF50D 0x72EF      ADD      R2,SP,#+478
   \   00000ABC   0xF8DF 0x1AA8      LDR.W    R1,??RoadBrd_ParseString_101+0x4
   \   00000AC0   0xA80A             ADD      R0,SP,#+40
   \   00000AC2   0x.... 0x....      BL       sprintf
   1044                                    //                        sprintf( (char *)tempBffr2, "     Grid 37 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye5.Raw,
   1045                                    //                                                                                               GridMeasure.GridEye5.TempC,
   1046                                    //                                                                                               GridMeasure.GridEye5.TempF,
   1047                                    //                                                                                               GridMeasure.GridEye5.RawC );
   1048                                    break;
   \   00000AC6   0xE03A             B.N      ??RoadBrd_ParseString_129
   1049                                  case 6: //GridEye6 Values
   1050                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye6.Raw,
   1051                                            GridMeasure.GridEye6.TempC,GridMeasureScaled.GridEye6.TempC,
   1052                                            GridMeasure.GridEye6.TempF,GridMeasureScaled.GridEye6.TempF,
   1053                                            GridMeasure.GridEye6.RawC );
   \                     ??RoadBrd_ParseString_125: (+1)
   \   00000AC8   0xF8BD 0x01FE      LDRH     R0,[SP, #+510]
   \   00000ACC   0x9003             STR      R0,[SP, #+12]
   \   00000ACE   0xA8EB             ADD      R0,SP,#+940
   \   00000AD0   0x1CC0             ADDS     R0,R0,#+3
   \   00000AD2   0x9002             STR      R0,[SP, #+8]
   \   00000AD4   0xA87B             ADD      R0,SP,#+492
   \   00000AD6   0x1CC0             ADDS     R0,R0,#+3
   \   00000AD8   0x9001             STR      R0,[SP, #+4]
   \   00000ADA   0xA8EA             ADD      R0,SP,#+936
   \   00000ADC   0x9000             STR      R0,[SP, #+0]
   \   00000ADE   0xAB7A             ADD      R3,SP,#+488
   \   00000AE0   0xF50D 0x72FB      ADD      R2,SP,#+502
   \   00000AE4   0xF8DF 0x1A80      LDR.W    R1,??RoadBrd_ParseString_101+0x4
   \   00000AE8   0xA80A             ADD      R0,SP,#+40
   \   00000AEA   0x.... 0x....      BL       sprintf
   1054                                    //                        sprintf( (char *)tempBffr2, "     Grid 38 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye6.Raw,
   1055                                    //                                                                                               GridMeasure.GridEye6.TempC,
   1056                                    //                                                                                               GridMeasure.GridEye6.TempF,
   1057                                    //                                                                                               GridMeasure.GridEye6.RawC );
   1058                                    break;
   \   00000AEE   0xE026             B.N      ??RoadBrd_ParseString_129
   1059                                  case 7: //GridEye7 Values
   1060                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye7.Raw,
   1061                                            GridMeasure.GridEye7.TempC,GridMeasureScaled.GridEye7.TempC,
   1062                                            GridMeasure.GridEye7.TempF,GridMeasureScaled.GridEye7.TempF,
   1063                                            GridMeasure.GridEye7.RawC );
   \                     ??RoadBrd_ParseString_128: (+1)
   \   00000AF0   0xF8BD 0x0216      LDRH     R0,[SP, #+534]
   \   00000AF4   0x9003             STR      R0,[SP, #+12]
   \   00000AF6   0xA8F1             ADD      R0,SP,#+964
   \   00000AF8   0x1CC0             ADDS     R0,R0,#+3
   \   00000AFA   0x9002             STR      R0,[SP, #+8]
   \   00000AFC   0xA881             ADD      R0,SP,#+516
   \   00000AFE   0x1CC0             ADDS     R0,R0,#+3
   \   00000B00   0x9001             STR      R0,[SP, #+4]
   \   00000B02   0xA8F0             ADD      R0,SP,#+960
   \   00000B04   0x9000             STR      R0,[SP, #+0]
   \   00000B06   0xAB80             ADD      R3,SP,#+512
   \   00000B08   0xAA83             ADD      R2,SP,#+524
   \   00000B0A   0x1C92             ADDS     R2,R2,#+2
   \   00000B0C   0xF8DF 0x1A58      LDR.W    R1,??RoadBrd_ParseString_101+0x4
   \   00000B10   0xA80A             ADD      R0,SP,#+40
   \   00000B12   0x.... 0x....      BL       sprintf
   1064                                    //                        sprintf( (char *)tempBffr2, "     Grid 39 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye7.Raw,
   1065                                    //                                                                                               GridMeasure.GridEye7.TempC,
   1066                                    //                                                                                               GridMeasure.GridEye7.TempF,
   1067                                    //                                                                                               GridMeasure.GridEye7.RawC );
   1068                                    break;
   \   00000B16   0xE012             B.N      ??RoadBrd_ParseString_129
   1069                                  case 8: //GridEye8 Values
   1070                                    sprintf( (char *)tempBffr2, "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\r\n", GridMeasure.GridEye8.Raw,
   1071                                            GridMeasure.GridEye8.TempC,GridMeasureScaled.GridEye8.TempC,
   1072                                            GridMeasure.GridEye8.TempF,GridMeasureScaled.GridEye8.TempF,
   1073                                            GridMeasure.GridEye8.RawC );
   \                     ??RoadBrd_ParseString_127: (+1)
   \   00000B18   0xF8BD 0x022E      LDRH     R0,[SP, #+558]
   \   00000B1C   0x9003             STR      R0,[SP, #+12]
   \   00000B1E   0xA8F7             ADD      R0,SP,#+988
   \   00000B20   0x1CC0             ADDS     R0,R0,#+3
   \   00000B22   0x9002             STR      R0,[SP, #+8]
   \   00000B24   0xA887             ADD      R0,SP,#+540
   \   00000B26   0x1CC0             ADDS     R0,R0,#+3
   \   00000B28   0x9001             STR      R0,[SP, #+4]
   \   00000B2A   0xA8F6             ADD      R0,SP,#+984
   \   00000B2C   0x9000             STR      R0,[SP, #+0]
   \   00000B2E   0xAB86             ADD      R3,SP,#+536
   \   00000B30   0xAA89             ADD      R2,SP,#+548
   \   00000B32   0x1C92             ADDS     R2,R2,#+2
   \   00000B34   0xF8DF 0x1A30      LDR.W    R1,??RoadBrd_ParseString_101+0x4
   \   00000B38   0xA80A             ADD      R0,SP,#+40
   \   00000B3A   0x.... 0x....      BL       sprintf
   1074                                    //                        sprintf( (char *)tempBffr2, "     Grid 40 DATA: %s   %s   %s   %d\r\n", GridMeasure.GridEye8.Raw,
   1075                                    //                                                                                               GridMeasure.GridEye8.TempC,
   1076                                    //                                                                                               GridMeasure.GridEye8.TempF,
   1077                                    //                                                                                               GridMeasure.GridEye8.RawC );
   1078                                    break;
   1079                                  } // EndSwitch(x)
   1080                                  // Now Print String.
   1081           #ifdef NUCLEO
   1082                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1083          #else
   1084                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \                     ??RoadBrd_ParseString_129: (+1)
   \   00000B3E   0xA90A             ADD      R1,SP,#+40
   \   00000B40   0x2000             MOVS     R0,#+0
   \   00000B42   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000B46   0x0006             MOVS     R6,R0
   1085          #endif
   1086                                  if (Status != HAL_OK)
   \   00000B48   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000B4A   0x2E00             CMP      R6,#+0
   \   00000B4C   0xD003             BEQ.N    ??RoadBrd_ParseString_130
   1087                                    return Status;
   \   00000B4E   0x0030             MOVS     R0,R6
   \   00000B50   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000B52   0xF003 0xBE64      B.W      ??RoadBrd_ParseString_4
   1088                               } // EndFor(x=0; x<9; x++)
   \                     ??RoadBrd_ParseString_130: (+1)
   \   00000B56   0x1C7F             ADDS     R7,R7,#+1
   \   00000B58   0xE729             B.N      ??RoadBrd_ParseString_118
   1089                                sprintf( (char *)tempBffr2, "     SHNT VLTG DATA: " );
   \                     ??RoadBrd_ParseString_119: (+1)
   \   00000B5A   0xF8DF 0x1B4C      LDR.W    R1,??RoadBrd_ParseString_103
   \   00000B5E   0xA80A             ADD      R0,SP,#+40
   \   00000B60   0x.... 0x....      BL       sprintf
   1090                                strcat( (char *)tempBffr2, (char *)VMeasure.Raw );
   \   00000B64   0xA945             ADD      R1,SP,#+276
   \   00000B66   0xA80A             ADD      R0,SP,#+40
   \   00000B68   0x.... 0x....      BL       strcat
   1091                                strcat( (char *)tempBffr2, "\r\n" );
   \   00000B6C   0xA112             ADR.N    R1,??RoadBrd_ParseString_104  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000B6E   0xA80A             ADD      R0,SP,#+40
   \   00000B70   0x.... 0x....      BL       strcat
   1092                              } //Endif(Status == HAL_OK)
   1093                              else
   1094                                break;
   1095                              sprintf( (char *)tempBffr2, "     COMPLETE.\r\n" );
   \   00000B74   0xF8DF 0x1B38      LDR.W    R1,??RoadBrd_ParseString_103+0x8
   \   00000B78   0xA80A             ADD      R0,SP,#+40
   \   00000B7A   0x.... 0x....      BL       sprintf
   1096                              break;
   \   00000B7E   0xE019             B.N      ??RoadBrd_ParseString_105
   \                     ??RoadBrd_ParseString_116: (+1)
   \   00000B80   0xE018             B.N      ??RoadBrd_ParseString_105
   1097          //------------------ B1 Command...Reset Cool Eye/Grid Eye Sensor..... 
   1098                            case '1':
   1099                              // Reset Cool Eye/Grid Eye Sensor.
   1100                              Status = RoadBrd_GridEyeReset();
   \                     ??RoadBrd_ParseString_107: (+1)
   \   00000B82   0x.... 0x....      BL       RoadBrd_GridEyeReset
   \   00000B86   0x0006             MOVS     R6,R0
   1101                              // Is this a BLE Operation?
   1102                              if ( BLE_Flag )
   \   00000B88   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000B8A   0x2D00             CMP      R5,#+0
   \   00000B8C   0xD00A             BEQ.N    ??RoadBrd_ParseString_131
   1103                              {
   1104                                // Yes...Build and Send BLE Response NOW.
   1105                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00000B8E   0xF8DF 0x164C      LDR.W    R1,??RoadBrd_ParseString_56
   \   00000B92   0xA80A             ADD      R0,SP,#+40
   \   00000B94   0x.... 0x....      BL       strcpy
   1106                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000B98   0xA80A             ADD      R0,SP,#+40
   \   00000B9A   0x.... 0x....      BL       strlen
   \   00000B9E   0xA90A             ADD      R1,SP,#+40
   \   00000BA0   0x.... 0x....      BL       BGM111_Transmit
   1107                              }
   1108          
   1109                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_131: (+1)
   \   00000BA4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000BA6   0x2E00             CMP      R6,#+0
   \   00000BA8   0xD104             BNE.N    ??RoadBrd_ParseString_132
   1110                              {
   1111                                strcpy( (char *)tempBffr2, "Cool Eye/Grid Eye Sensor: Reset Complete.\r\n");;
   \   00000BAA   0xF8DF 0x1DD0      LDR.W    R1,??RoadBrd_ParseString_133
   \   00000BAE   0xA80A             ADD      R0,SP,#+40
   \   00000BB0   0x.... 0x....      BL       strcpy
   1112                              }
   1113                              break;
   1114                          } //EndSwitch
   1115                        } //EndElse (Size == 1)
   1116                        break;
   \                     ??RoadBrd_ParseString_132: (+1)
   \                     ??RoadBrd_ParseString_105: (+1)
   \   00000BB4   0xF003 0xBDBA      B.W      ??RoadBrd_ParseString_27
   \                     ??RoadBrd_ParseString_104:
   \   00000BB8   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
   1117          //**************************************************************************************************
   1118                      case 'C':
   1119                        // Read Voltage. 
   1120          //++++++++++++++++++++++++++++++++++++++++++  Voltage Monitor Commands.
   1121                        if (Size == 1)
   \                     ??RoadBrd_ParseString_14: (+1)
   \   00000BBC   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000BC0   0xF1B8 0x0F01      CMP      R8,#+1
   \   00000BC4   0xD150             BNE.N    ??RoadBrd_ParseString_134
   1122                        {
   1123          //------------------ C Command       
   1124                          // Read Bus Voltage and return as 2 Byte Field.
   1125                          Status = RoadBrd_VMonitor_RdVoltage( &VMeasure );
   \   00000BC6   0xA843             ADD      R0,SP,#+268
   \   00000BC8   0x.... 0x....      BL       RoadBrd_VMonitor_RdVoltage
   \   00000BCC   0x0006             MOVS     R6,R0
   1126                          if (Status == HAL_OK)
   \   00000BCE   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000BD0   0x2E00             CMP      R6,#+0
   \   00000BD2   0xD103             BNE.N    ??RoadBrd_ParseString_135
   1127                            Status = RoadBrd_VMonitor_RdVoltage_Scaled( &VMeasureScaled );
   \   00000BD4   0xA895             ADD      R0,SP,#+596
   \   00000BD6   0x.... 0x....      BL       RoadBrd_VMonitor_RdVoltage_Scaled
   \   00000BDA   0x0006             MOVS     R6,R0
   1128                          if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_135: (+1)
   \   00000BDC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000BDE   0x2E00             CMP      R6,#+0
   \   00000BE0   0xD126             BNE.N    ??RoadBrd_ParseString_136
   1129                          {
   1130                            // Send string to UART..
   1131                            strcpy( (char *)tempBffr2, "Voltage Monitor/Read Bus Voltage...\r\n");
   \   00000BE2   0xF8DF 0x1E04      LDR.W    R1,??RoadBrd_ParseString_137
   \   00000BE6   0xA80A             ADD      R0,SP,#+40
   \   00000BE8   0x.... 0x....      BL       strcpy
   1132          #ifdef NUCLEO
   1133                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1134          #else
   1135                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000BEC   0xA90A             ADD      R1,SP,#+40
   \   00000BEE   0x2000             MOVS     R0,#+0
   \   00000BF0   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000BF4   0x0006             MOVS     R6,R0
   1136          #endif
   1137                            if (Status != HAL_OK)
   \   00000BF6   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000BF8   0x2E00             CMP      R6,#+0
   \   00000BFA   0xD003             BEQ.N    ??RoadBrd_ParseString_138
   1138                            return Status;
   \   00000BFC   0x0030             MOVS     R0,R6
   \   00000BFE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000C00   0xF003 0xBE0D      B.W      ??RoadBrd_ParseString_4
   1139                            // NOW, Build Data String..
   1140                            sprintf( (char *)tempBffr2, "     BUS VOLTAGE DATA: " );
   \                     ??RoadBrd_ParseString_138: (+1)
   \   00000C04   0xF8DF 0x1DE4      LDR.W    R1,??RoadBrd_ParseString_137+0x4
   \   00000C08   0xA80A             ADD      R0,SP,#+40
   \   00000C0A   0x.... 0x....      BL       sprintf
   1141                            strcat( (char *)tempBffr2, (char *)VMeasure.Raw );
   \   00000C0E   0xA945             ADD      R1,SP,#+276
   \   00000C10   0xA80A             ADD      R0,SP,#+40
   \   00000C12   0x.... 0x....      BL       strcat
   1142                            strcat( (char *)tempBffr2, "\r\n" );
   \   00000C16   0xA1D3             ADR.N    R1,??RoadBrd_ParseString_30+0x4  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000C18   0xA80A             ADD      R0,SP,#+40
   \   00000C1A   0x.... 0x....      BL       strcat
   1143                          }
   1144                          else
   1145                            break;
   1146          #ifdef NUCLEO
   1147                          Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1148          #else
   1149                          Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000C1E   0xA90A             ADD      R1,SP,#+40
   \   00000C20   0x2000             MOVS     R0,#+0
   \   00000C22   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000C26   0x0006             MOVS     R6,R0
   1150          #endif
   1151                          if (Status != HAL_OK)
   \   00000C28   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000C2A   0x2E00             CMP      R6,#+0
   \   00000C2C   0xD102             BNE.N    ??RoadBrd_ParseString_139
   \   00000C2E   0xE005             B.N      ??RoadBrd_ParseString_140
   \                     ??RoadBrd_ParseString_136: (+1)
   \   00000C30   0xF003 0xBD7C      B.W      ??RoadBrd_ParseString_27
   1152                            return Status;
   \                     ??RoadBrd_ParseString_139: (+1)
   \   00000C34   0x0030             MOVS     R0,R6
   \   00000C36   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000C38   0xF003 0xBDF1      B.W      ??RoadBrd_ParseString_4
   1153                          // Is this a BLE Operation?
   1154                          if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_140: (+1)
   \   00000C3C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000C3E   0x2D00             CMP      R5,#+0
   \   00000C40   0xD00A             BEQ.N    ??RoadBrd_ParseString_141
   1155                          {
   1156                            // Yes...Build and Send BLE Response NOW.
   1157                            strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00000C42   0xF8DF 0x1598      LDR.W    R1,??RoadBrd_ParseString_56
   \   00000C46   0xA80A             ADD      R0,SP,#+40
   \   00000C48   0x.... 0x....      BL       strcpy
   1158                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000C4C   0xA80A             ADD      R0,SP,#+40
   \   00000C4E   0x.... 0x....      BL       strlen
   \   00000C52   0xA90A             ADD      R1,SP,#+40
   \   00000C54   0x.... 0x....      BL       BGM111_Transmit
   1159                          }
   1160                          // Now calculate Bus Voltage.
   1161                          sprintf( (char *)tempBffr2, "     Bus Voltage: %s/%s\r\n", (char *)VMeasure.Voltage, (char *)VMeasureScaled.Voltage );
   \                     ??RoadBrd_ParseString_141: (+1)
   \   00000C58   0xAB95             ADD      R3,SP,#+596
   \   00000C5A   0xAA43             ADD      R2,SP,#+268
   \   00000C5C   0xF8DF 0x1DC4      LDR.W    R1,??RoadBrd_ParseString_142
   \   00000C60   0xA80A             ADD      R0,SP,#+40
   \   00000C62   0x.... 0x....      BL       sprintf
   \   00000C66   0xE192             B.N      ??RoadBrd_ParseString_143
   1162                        }
   1163                        else
   1164                        {
   1165                          switch( tempBffr[1] )
   \                     ??RoadBrd_ParseString_134: (+1)
   \   00000C68   0x7860             LDRB     R0,[R4, #+1]
   \   00000C6A   0x2830             CMP      R0,#+48
   \   00000C6C   0xD024             BEQ.N    ??RoadBrd_ParseString_144
   \   00000C6E   0x2831             CMP      R0,#+49
   \   00000C70   0xD072             BEQ.N    ??RoadBrd_ParseString_145
   \   00000C72   0x2832             CMP      R0,#+50
   \   00000C74   0xF000 0x80C8      BEQ.W    ??RoadBrd_ParseString_146
   \   00000C78   0x2833             CMP      R0,#+51
   \   00000C7A   0xF000 0x811B      BEQ.W    ??RoadBrd_ParseString_147
   \   00000C7E   0x2849             CMP      R0,#+73
   \   00000C80   0xF040 0x8180      BNE.W    ??RoadBrd_ParseString_148
   1166                          {
   1167          //------------------ CI Command       
   1168                            case 'I':
   1169                              // Initialize and load Calibration Register.
   1170                              // Read Calibration Value first.
   1171                              Status = RoadBrd_Init_VMonitor();
   \                     ??RoadBrd_ParseString_149: (+1)
   \   00000C84   0x.... 0x....      BL       RoadBrd_Init_VMonitor
   \   00000C88   0x0006             MOVS     R6,R0
   1172                              // Is this a BLE Operation?
   1173                              if ( BLE_Flag )
   \   00000C8A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000C8C   0x2D00             CMP      R5,#+0
   \   00000C8E   0xD00A             BEQ.N    ??RoadBrd_ParseString_150
   1174                              {
   1175                                // Yes...Build and Send BLE Response NOW.
   1176                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00000C90   0xF8DF 0x1548      LDR.W    R1,??RoadBrd_ParseString_56
   \   00000C94   0xA80A             ADD      R0,SP,#+40
   \   00000C96   0x.... 0x....      BL       strcpy
   1177                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000C9A   0xA80A             ADD      R0,SP,#+40
   \   00000C9C   0x.... 0x....      BL       strlen
   \   00000CA0   0xA90A             ADD      R1,SP,#+40
   \   00000CA2   0x.... 0x....      BL       BGM111_Transmit
   1178                              }
   1179                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_150: (+1)
   \   00000CA6   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000CA8   0x2E00             CMP      R6,#+0
   \   00000CAA   0xD104             BNE.N    ??RoadBrd_ParseString_151
   1180                              {
   1181                                strcpy( (char *)tempBffr2, "Voltage Monitor: Initialization Complete.\r\n");;
   \   00000CAC   0xF8DF 0x1DE4      LDR.W    R1,??RoadBrd_ParseString_152
   \   00000CB0   0xA80A             ADD      R0,SP,#+40
   \   00000CB2   0x.... 0x....      BL       strcpy
   1182                              }
   1183                              break;
   \                     ??RoadBrd_ParseString_151: (+1)
   \   00000CB6   0xE16A             B.N      ??RoadBrd_ParseString_143
   1184          //------------------ C0 Command...Read Shunt Voltage and return results.....
   1185                            case '0':
   1186                              // Read Shunt Voltage and return results.....
   1187                              Status = RoadBrd_VMonitor_RdShntVltg( &VMeasure );
   \                     ??RoadBrd_ParseString_144: (+1)
   \   00000CB8   0xA843             ADD      R0,SP,#+268
   \   00000CBA   0x.... 0x....      BL       RoadBrd_VMonitor_RdShntVltg
   \   00000CBE   0x0006             MOVS     R6,R0
   1188                              if (Status == HAL_OK)
   \   00000CC0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000CC2   0x2E00             CMP      R6,#+0
   \   00000CC4   0xD103             BNE.N    ??RoadBrd_ParseString_153
   1189                                Status = RoadBrd_VMonitor_RdShntVltg_Scaled( &VMeasureScaled );
   \   00000CC6   0xA895             ADD      R0,SP,#+596
   \   00000CC8   0x.... 0x....      BL       RoadBrd_VMonitor_RdShntVltg_Scaled
   \   00000CCC   0x0006             MOVS     R6,R0
   1190                              // Is this a BLE Operation?
   1191                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_153: (+1)
   \   00000CCE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000CD0   0x2D00             CMP      R5,#+0
   \   00000CD2   0xD00A             BEQ.N    ??RoadBrd_ParseString_154
   1192                              {
   1193                                // Yes...Build and Send BLE Response NOW.
   1194                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00000CD4   0xF8DF 0x1504      LDR.W    R1,??RoadBrd_ParseString_56
   \   00000CD8   0xA80A             ADD      R0,SP,#+40
   \   00000CDA   0x.... 0x....      BL       strcpy
   1195                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000CDE   0xA80A             ADD      R0,SP,#+40
   \   00000CE0   0x.... 0x....      BL       strlen
   \   00000CE4   0xA90A             ADD      R1,SP,#+40
   \   00000CE6   0x.... 0x....      BL       BGM111_Transmit
   1196                              }
   1197                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_154: (+1)
   \   00000CEA   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000CEC   0x2E00             CMP      R6,#+0
   \   00000CEE   0xD126             BNE.N    ??RoadBrd_ParseString_155
   1198                              {
   1199                                // Send string to UART..
   1200                                strcpy( (char *)tempBffr2, "Voltage Monitor/Shunt Voltage...\r\n");
   \   00000CF0   0xF8DF 0x17D4      LDR.W    R1,??RoadBrd_ParseString_87
   \   00000CF4   0xA80A             ADD      R0,SP,#+40
   \   00000CF6   0x.... 0x....      BL       strcpy
   1201          #ifdef NUCLEO
   1202                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1203          #else
   1204                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000CFA   0xA90A             ADD      R1,SP,#+40
   \   00000CFC   0x2000             MOVS     R0,#+0
   \   00000CFE   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000D02   0x0006             MOVS     R6,R0
   1205          #endif
   1206                                if (Status != HAL_OK)
   \   00000D04   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000D06   0x2E00             CMP      R6,#+0
   \   00000D08   0xD003             BEQ.N    ??RoadBrd_ParseString_156
   1207                                  return Status;
   \   00000D0A   0x0030             MOVS     R0,R6
   \   00000D0C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000D0E   0xF003 0xBD86      B.W      ??RoadBrd_ParseString_4
   1208                                // NOW, Build Data String..
   1209                                sprintf( (char *)tempBffr2, "     SHNT VLTG DATA: " );
   \                     ??RoadBrd_ParseString_156: (+1)
   \   00000D12   0xF8DF 0x1994      LDR.W    R1,??RoadBrd_ParseString_103
   \   00000D16   0xA80A             ADD      R0,SP,#+40
   \   00000D18   0x.... 0x....      BL       sprintf
   1210                                strcat( (char *)tempBffr2, (char *)VMeasure.Raw );
   \   00000D1C   0xA945             ADD      R1,SP,#+276
   \   00000D1E   0xA80A             ADD      R0,SP,#+40
   \   00000D20   0x.... 0x....      BL       strcat
   1211                                strcat( (char *)tempBffr2, "\r\n" );
   \   00000D24   0xA18F             ADR.N    R1,??RoadBrd_ParseString_30+0x4  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000D26   0xA80A             ADD      R0,SP,#+40
   \   00000D28   0x.... 0x....      BL       strcat
   1212                              }
   1213                              else
   1214                                break;
   1215          #ifdef NUCLEO
   1216                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1217          #else
   1218                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000D2C   0xA90A             ADD      R1,SP,#+40
   \   00000D2E   0x2000             MOVS     R0,#+0
   \   00000D30   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000D34   0x0006             MOVS     R6,R0
   1219          #endif
   1220                              if (Status != HAL_OK)
   \   00000D36   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000D38   0x2E00             CMP      R6,#+0
   \   00000D3A   0xD101             BNE.N    ??RoadBrd_ParseString_157
   \   00000D3C   0xE004             B.N      ??RoadBrd_ParseString_158
   \                     ??RoadBrd_ParseString_155: (+1)
   \   00000D3E   0xE126             B.N      ??RoadBrd_ParseString_143
   1221                                return Status;
   \                     ??RoadBrd_ParseString_157: (+1)
   \   00000D40   0x0030             MOVS     R0,R6
   \   00000D42   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000D44   0xF003 0xBD6B      B.W      ??RoadBrd_ParseString_4
   1222                              // Now calculate Shunt Voltage.
   1223                              sprintf( (char *)tempBffr2, "     Shunt Voltage: %s/%s\r\n", (char *)VMeasure.Voltage, (char *)VMeasureScaled.Voltage );
   \                     ??RoadBrd_ParseString_158: (+1)
   \   00000D48   0xAB95             ADD      R3,SP,#+596
   \   00000D4A   0xAA43             ADD      R2,SP,#+268
   \   00000D4C   0xF8DF 0x1D94      LDR.W    R1,??RoadBrd_ParseString_159
   \   00000D50   0xA80A             ADD      R0,SP,#+40
   \   00000D52   0x.... 0x....      BL       sprintf
   1224                              break;
   \   00000D56   0xE11A             B.N      ??RoadBrd_ParseString_143
   1225          //------------------ C1 Command...Read Current and return results..... 
   1226                            case '1':
   1227                              // Read Current and return results.....
   1228                              Status = RoadBrd_VMonitor_RdCurrent( &CMeasure );
   \                     ??RoadBrd_ParseString_145: (+1)
   \   00000D58   0xA8C2             ADD      R0,SP,#+776
   \   00000D5A   0x.... 0x....      BL       RoadBrd_VMonitor_RdCurrent
   \   00000D5E   0x0006             MOVS     R6,R0
   1229                              if (Status == HAL_OK)
   \   00000D60   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000D62   0x2E00             CMP      R6,#+0
   \   00000D64   0xD104             BNE.N    ??RoadBrd_ParseString_160
   1230                                Status = RoadBrd_VMonitor_RdCurrent_Scaled( &CMeasureScaled );
   \   00000D66   0xA8FF             ADD      R0,SP,#+1020
   \   00000D68   0x3030             ADDS     R0,R0,#+48
   \   00000D6A   0x.... 0x....      BL       RoadBrd_VMonitor_RdCurrent_Scaled
   \   00000D6E   0x0006             MOVS     R6,R0
   1231                              // Is this a BLE Operation?
   1232                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_160: (+1)
   \   00000D70   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000D72   0x2D00             CMP      R5,#+0
   \   00000D74   0xD00A             BEQ.N    ??RoadBrd_ParseString_161
   1233                              {
   1234                                // Yes...Build and Send BLE Response NOW.
   1235                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00000D76   0xF8DF 0x1464      LDR.W    R1,??RoadBrd_ParseString_56
   \   00000D7A   0xA80A             ADD      R0,SP,#+40
   \   00000D7C   0x.... 0x....      BL       strcpy
   1236                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000D80   0xA80A             ADD      R0,SP,#+40
   \   00000D82   0x.... 0x....      BL       strlen
   \   00000D86   0xA90A             ADD      R1,SP,#+40
   \   00000D88   0x.... 0x....      BL       BGM111_Transmit
   1237                              }
   1238                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_161: (+1)
   \   00000D8C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000D8E   0x2E00             CMP      R6,#+0
   \   00000D90   0xD127             BNE.N    ??RoadBrd_ParseString_162
   1239                              {
   1240                                // Send string to UART..
   1241                                strcpy( (char *)tempBffr2, "Voltage Monitor/Read Current...\r\n");
   \   00000D92   0xF8DF 0x1DF0      LDR.W    R1,??RoadBrd_ParseString_163+0x4
   \   00000D96   0xA80A             ADD      R0,SP,#+40
   \   00000D98   0x.... 0x....      BL       strcpy
   1242          #ifdef NUCLEO
   1243                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1244          #else
   1245                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000D9C   0xA90A             ADD      R1,SP,#+40
   \   00000D9E   0x2000             MOVS     R0,#+0
   \   00000DA0   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000DA4   0x0006             MOVS     R6,R0
   1246          #endif
   1247                                if (Status != HAL_OK)
   \   00000DA6   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000DA8   0x2E00             CMP      R6,#+0
   \   00000DAA   0xD003             BEQ.N    ??RoadBrd_ParseString_164
   1248                                  return Status;
   \   00000DAC   0x0030             MOVS     R0,R6
   \   00000DAE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000DB0   0xF003 0xBD35      B.W      ??RoadBrd_ParseString_4
   1249                                // NOW, Build Data String..
   1250                                sprintf( (char *)tempBffr2, "     CURRENT DATA: " );
   \                     ??RoadBrd_ParseString_164: (+1)
   \   00000DB4   0xF8DF 0x1DD0      LDR.W    R1,??RoadBrd_ParseString_163+0x8
   \   00000DB8   0xA80A             ADD      R0,SP,#+40
   \   00000DBA   0x.... 0x....      BL       sprintf
   1251                                strcat( (char *)tempBffr2, (char *)CMeasure.Raw );
   \   00000DBE   0xA9C4             ADD      R1,SP,#+784
   \   00000DC0   0x1C49             ADDS     R1,R1,#+1
   \   00000DC2   0xA80A             ADD      R0,SP,#+40
   \   00000DC4   0x.... 0x....      BL       strcat
   1252                                strcat( (char *)tempBffr2, "\r\n" );
   \   00000DC8   0xA166             ADR.N    R1,??RoadBrd_ParseString_30+0x4  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000DCA   0xA80A             ADD      R0,SP,#+40
   \   00000DCC   0x.... 0x....      BL       strcat
   1253                              }
   1254                              else
   1255                                break;
   1256          #ifdef NUCLEO
   1257                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1258          #else
   1259                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000DD0   0xA90A             ADD      R1,SP,#+40
   \   00000DD2   0x2000             MOVS     R0,#+0
   \   00000DD4   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000DD8   0x0006             MOVS     R6,R0
   1260          #endif
   1261                              if (Status != HAL_OK)
   \   00000DDA   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000DDC   0x2E00             CMP      R6,#+0
   \   00000DDE   0xD101             BNE.N    ??RoadBrd_ParseString_165
   \   00000DE0   0xE004             B.N      ??RoadBrd_ParseString_166
   \                     ??RoadBrd_ParseString_162: (+1)
   \   00000DE2   0xE0D4             B.N      ??RoadBrd_ParseString_143
   1262                                return Status;
   \                     ??RoadBrd_ParseString_165: (+1)
   \   00000DE4   0x0030             MOVS     R0,R6
   \   00000DE6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000DE8   0xF003 0xBD19      B.W      ??RoadBrd_ParseString_4
   1263                              // Now calculate Current.
   1264                              sprintf( (char *)tempBffr2, "     Current: %s/%s\r\n", (char *)CMeasure.Current, (char *)CMeasureScaled.Current );
   \                     ??RoadBrd_ParseString_166: (+1)
   \   00000DEC   0xABFF             ADD      R3,SP,#+1020
   \   00000DEE   0x3330             ADDS     R3,R3,#+48
   \   00000DF0   0xAAC2             ADD      R2,SP,#+776
   \   00000DF2   0xF8DF 0x1D98      LDR.W    R1,??RoadBrd_ParseString_163+0xC
   \   00000DF6   0xA80A             ADD      R0,SP,#+40
   \   00000DF8   0x.... 0x....      BL       sprintf
   1265                              break;
   \   00000DFC   0xE0C7             B.N      ??RoadBrd_ParseString_143
   \   00000DFE   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_0:
   \   00000E00   0x........         DC32     Bypass
   \   00000E04   0x........         DC32     ?_0
   1266          //------------------ C2 Command...Read Power and return results.....     
   1267                            case '2':
   1268                              // Read Power and return results.....
   1269                              Status = RoadBrd_VMonitor_RdPower( &PMeasure );
   \                     ??RoadBrd_ParseString_146: (+1)
   \   00000E08   0xA8BE             ADD      R0,SP,#+760
   \   00000E0A   0x.... 0x....      BL       RoadBrd_VMonitor_RdPower
   \   00000E0E   0x0006             MOVS     R6,R0
   1270                              if (Status == HAL_OK)
   \   00000E10   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000E12   0x2E00             CMP      R6,#+0
   \   00000E14   0xD104             BNE.N    ??RoadBrd_ParseString_167
   1271                                Status = RoadBrd_VMonitor_RdPower_Scaled( &PMeasureScaled );
   \   00000E16   0xA8FF             ADD      R0,SP,#+1020
   \   00000E18   0x3020             ADDS     R0,R0,#+32
   \   00000E1A   0x.... 0x....      BL       RoadBrd_VMonitor_RdPower_Scaled
   \   00000E1E   0x0006             MOVS     R6,R0
   1272                              // Is this a BLE Operation?
   1273                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_167: (+1)
   \   00000E20   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000E22   0x2D00             CMP      R5,#+0
   \   00000E24   0xD00A             BEQ.N    ??RoadBrd_ParseString_168
   1274                              {
   1275                                // Yes...Build and Send BLE Response NOW.
   1276                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00000E26   0xF8DF 0x13B4      LDR.W    R1,??RoadBrd_ParseString_56
   \   00000E2A   0xA80A             ADD      R0,SP,#+40
   \   00000E2C   0x.... 0x....      BL       strcpy
   1277                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000E30   0xA80A             ADD      R0,SP,#+40
   \   00000E32   0x.... 0x....      BL       strlen
   \   00000E36   0xA90A             ADD      R1,SP,#+40
   \   00000E38   0x.... 0x....      BL       BGM111_Transmit
   1278                              }
   1279                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_168: (+1)
   \   00000E3C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000E3E   0x2E00             CMP      R6,#+0
   \   00000E40   0xD127             BNE.N    ??RoadBrd_ParseString_169
   1280                              {
   1281                                // Send string to UART..
   1282                                strcpy( (char *)tempBffr2, "Voltage Monitor/Read Power...\r\n");
   \   00000E42   0xF8DF 0x1D4C      LDR.W    R1,??RoadBrd_ParseString_163+0x10
   \   00000E46   0xA80A             ADD      R0,SP,#+40
   \   00000E48   0x.... 0x....      BL       strcpy
   1283          #ifdef NUCLEO
   1284                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1285          #else
   1286                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000E4C   0xA90A             ADD      R1,SP,#+40
   \   00000E4E   0x2000             MOVS     R0,#+0
   \   00000E50   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000E54   0x0006             MOVS     R6,R0
   1287          #endif
   1288                                if (Status != HAL_OK)
   \   00000E56   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000E58   0x2E00             CMP      R6,#+0
   \   00000E5A   0xD003             BEQ.N    ??RoadBrd_ParseString_170
   1289                                  return Status;
   \   00000E5C   0x0030             MOVS     R0,R6
   \   00000E5E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000E60   0xF003 0xBCDD      B.W      ??RoadBrd_ParseString_4
   1290                                // NOW, Build Data String..
   1291                                sprintf( (char *)tempBffr2, "     POWER DATA: " );
   \                     ??RoadBrd_ParseString_170: (+1)
   \   00000E64   0xF8DF 0x1D2C      LDR.W    R1,??RoadBrd_ParseString_163+0x14
   \   00000E68   0xA80A             ADD      R0,SP,#+40
   \   00000E6A   0x.... 0x....      BL       sprintf
   1292                                strcat( (char *)tempBffr2, (char *)PMeasure.Raw );
   \   00000E6E   0xA9C0             ADD      R1,SP,#+768
   \   00000E70   0x1C49             ADDS     R1,R1,#+1
   \   00000E72   0xA80A             ADD      R0,SP,#+40
   \   00000E74   0x.... 0x....      BL       strcat
   1293                                strcat( (char *)tempBffr2, "\r\n" );
   \   00000E78   0xA13A             ADR.N    R1,??RoadBrd_ParseString_30+0x4  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000E7A   0xA80A             ADD      R0,SP,#+40
   \   00000E7C   0x.... 0x....      BL       strcat
   1294                              }
   1295                              else
   1296                                break;
   1297          #ifdef NUCLEO
   1298                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1299          #else
   1300                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000E80   0xA90A             ADD      R1,SP,#+40
   \   00000E82   0x2000             MOVS     R0,#+0
   \   00000E84   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000E88   0x0006             MOVS     R6,R0
   1301          #endif
   1302                              if (Status != HAL_OK)
   \   00000E8A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000E8C   0x2E00             CMP      R6,#+0
   \   00000E8E   0xD101             BNE.N    ??RoadBrd_ParseString_171
   \   00000E90   0xE004             B.N      ??RoadBrd_ParseString_172
   \                     ??RoadBrd_ParseString_169: (+1)
   \   00000E92   0xE07C             B.N      ??RoadBrd_ParseString_143
   1303                                return Status;
   \                     ??RoadBrd_ParseString_171: (+1)
   \   00000E94   0x0030             MOVS     R0,R6
   \   00000E96   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000E98   0xF003 0xBCC1      B.W      ??RoadBrd_ParseString_4
   1304                              // Now calculate Power.
   1305                              sprintf( (char *)tempBffr2, "     Power: %s/%s\r\n", (char *)PMeasure.Power, (char *)PMeasureScaled.Power );
   \                     ??RoadBrd_ParseString_172: (+1)
   \   00000E9C   0xABFF             ADD      R3,SP,#+1020
   \   00000E9E   0x3320             ADDS     R3,R3,#+32
   \   00000EA0   0xAABE             ADD      R2,SP,#+760
   \   00000EA2   0xF8DF 0x1DE0      LDR.W    R1,??RoadBrd_ParseString_173
   \   00000EA6   0xA80A             ADD      R0,SP,#+40
   \   00000EA8   0x.... 0x....      BL       sprintf
   1306                              break;
   \   00000EAC   0xE06F             B.N      ??RoadBrd_ParseString_143
   \   00000EAE   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_25:
   \   00000EB0   0x........         DC32     ?_1
   1307          //------------------ C3 Command...Read Bus Voltage and return results.....
   1308                            case '3':
   1309                              // Read Bus Voltage and return results.....
   1310                              Status = RoadBrd_VMonitor_RdVoltage( &VMeasure );
   \                     ??RoadBrd_ParseString_147: (+1)
   \   00000EB4   0xA843             ADD      R0,SP,#+268
   \   00000EB6   0x.... 0x....      BL       RoadBrd_VMonitor_RdVoltage
   \   00000EBA   0x0006             MOVS     R6,R0
   1311                              if (Status == HAL_OK)
   \   00000EBC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000EBE   0x2E00             CMP      R6,#+0
   \   00000EC0   0xD103             BNE.N    ??RoadBrd_ParseString_174
   1312                                Status = RoadBrd_VMonitor_RdVoltage_Scaled( &VMeasureScaled );
   \   00000EC2   0xA895             ADD      R0,SP,#+596
   \   00000EC4   0x.... 0x....      BL       RoadBrd_VMonitor_RdVoltage_Scaled
   \   00000EC8   0x0006             MOVS     R6,R0
   1313                                
   1314                              // Is this a BLE Operation?
   1315                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_174: (+1)
   \   00000ECA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000ECC   0x2D00             CMP      R5,#+0
   \   00000ECE   0xD009             BEQ.N    ??RoadBrd_ParseString_175
   1316                              {
   1317                                // Yes...Build and Send BLE Response NOW.
   1318                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00000ED0   0x49C2             LDR.N    R1,??RoadBrd_ParseString_56
   \   00000ED2   0xA80A             ADD      R0,SP,#+40
   \   00000ED4   0x.... 0x....      BL       strcpy
   1319                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000ED8   0xA80A             ADD      R0,SP,#+40
   \   00000EDA   0x.... 0x....      BL       strlen
   \   00000EDE   0xA90A             ADD      R1,SP,#+40
   \   00000EE0   0x.... 0x....      BL       BGM111_Transmit
   1320                              }
   1321                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_175: (+1)
   \   00000EE4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000EE6   0x2E00             CMP      R6,#+0
   \   00000EE8   0xD12C             BNE.N    ??RoadBrd_ParseString_176
   1322                              {
   1323                                // Send string to UART..
   1324                                strcpy( (char *)tempBffr2, "Voltage Monitor/Read Bus Voltage...\r\n");
   \   00000EEA   0xF8DF 0x1AFC      LDR.W    R1,??RoadBrd_ParseString_137
   \   00000EEE   0xA80A             ADD      R0,SP,#+40
   \   00000EF0   0x.... 0x....      BL       strcpy
   1325          #ifdef NUCLEO
   1326                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1327          #else
   1328                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000EF4   0xA90A             ADD      R1,SP,#+40
   \   00000EF6   0x2000             MOVS     R0,#+0
   \   00000EF8   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000EFC   0x0006             MOVS     R6,R0
   1329          #endif
   1330                                if (Status != HAL_OK)
   \   00000EFE   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000F00   0x2E00             CMP      R6,#+0
   \   00000F02   0xD009             BEQ.N    ??RoadBrd_ParseString_177
   1331                                  return Status;
   \   00000F04   0x0030             MOVS     R0,R6
   \   00000F06   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000F08   0xF003 0xBC89      B.W      ??RoadBrd_ParseString_4
   \                     ??RoadBrd_ParseString_26:
   \   00000F0C   0x........         DC32     ?_2
   \   00000F10   0x........         DC32     ?_3
   \   00000F14   0x........         DC32     ?_4
   1332                                // NOW, Build Data String..
   1333                                sprintf( (char *)tempBffr2, "     BUS VOLTAGE DATA: " );
   \                     ??RoadBrd_ParseString_177: (+1)
   \   00000F18   0xF8DF 0x1AD0      LDR.W    R1,??RoadBrd_ParseString_137+0x4
   \   00000F1C   0xA80A             ADD      R0,SP,#+40
   \   00000F1E   0x.... 0x....      BL       sprintf
   1334                                strcat( (char *)tempBffr2, (char *)VMeasure.Raw );
   \   00000F22   0xA945             ADD      R1,SP,#+276
   \   00000F24   0xA80A             ADD      R0,SP,#+40
   \   00000F26   0x.... 0x....      BL       strcat
   1335                                strcat( (char *)tempBffr2, "\r\n" );
   \   00000F2A   0xA10E             ADR.N    R1,??RoadBrd_ParseString_30+0x4  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000F2C   0xA80A             ADD      R0,SP,#+40
   \   00000F2E   0x.... 0x....      BL       strcat
   1336                              }
   1337                              else
   1338                                break;
   1339          #ifdef NUCLEO
   1340                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1341          #else
   1342                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000F32   0xA90A             ADD      R1,SP,#+40
   \   00000F34   0x2000             MOVS     R0,#+0
   \   00000F36   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000F3A   0x0006             MOVS     R6,R0
   1343          #endif
   1344                              if (Status != HAL_OK)
   \   00000F3C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000F3E   0x2E00             CMP      R6,#+0
   \   00000F40   0xD101             BNE.N    ??RoadBrd_ParseString_178
   \   00000F42   0xE004             B.N      ??RoadBrd_ParseString_179
   \                     ??RoadBrd_ParseString_176: (+1)
   \   00000F44   0xE023             B.N      ??RoadBrd_ParseString_143
   1345                                return Status;
   \                     ??RoadBrd_ParseString_178: (+1)
   \   00000F46   0x0030             MOVS     R0,R6
   \   00000F48   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000F4A   0xF003 0xBC68      B.W      ??RoadBrd_ParseString_4
   1346                              // Now calculate Bus Voltage.
   1347                              sprintf( (char *)tempBffr2, "     Bus Voltage: %s/%s\r\n", (char *)VMeasure.Voltage, (char *)VMeasureScaled.Voltage );
   \                     ??RoadBrd_ParseString_179: (+1)
   \   00000F4E   0xAB95             ADD      R3,SP,#+596
   \   00000F50   0xAA43             ADD      R2,SP,#+268
   \   00000F52   0xF8DF 0x1AD0      LDR.W    R1,??RoadBrd_ParseString_142
   \   00000F56   0xA80A             ADD      R0,SP,#+40
   \   00000F58   0x.... 0x....      BL       sprintf
   1348                              break;
   \   00000F5C   0xE017             B.N      ??RoadBrd_ParseString_143
   \   00000F5E   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_30:
   \   00000F60   0x........         DC32     ?_5
   \   00000F64   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
   \   00000F68   0x........         DC32     ?_7
   \   00000F6C   0x........         DC32     ?_8
   \   00000F70   0x........         DC32     ?_9
   \   00000F74   0x........         DC32     ?_10
   \   00000F78   0x........         DC32     ?_11
   \   00000F7C   0x........         DC32     ?_12
   \   00000F80   0x........         DC32     ?_13
   1349                            default:
   1350                              strcpy( (char *)tempBffr2, "ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_148: (+1)
   \   00000F84   0xF8DF 0x1430      LDR.W    R1,??RoadBrd_ParseString_75+0x14
   \   00000F88   0xA80A             ADD      R0,SP,#+40
   \   00000F8A   0x.... 0x....      BL       strcpy
   1351                              break;
   1352                          } //EndSwitch
   1353                        } //EndElse (Size == 1)
   1354                        break;
   \                     ??RoadBrd_ParseString_143: (+1)
   \   00000F8E   0xF003 0xBBCD      B.W      ??RoadBrd_ParseString_27
   1355          //**************************************************************************************************
   1356                      case 'D':
   1357                        // Read Humidity. 
   1358                        if (Size == 1)
   \                     ??RoadBrd_ParseString_15: (+1)
   \   00000F92   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000F96   0xF1B8 0x0F01      CMP      R8,#+1
   \   00000F9A   0xD169             BNE.N    ??RoadBrd_ParseString_180
   1359                        {
   1360          //------------------ D Command: Read Humidity Values      
   1361                          // Read Humidity Sensor sensor and return Humidity results....
   1362                          Status = RoadBrd_Humidity_ReadHumidity( &HMeasure );
   \   00000F9C   0xA851             ADD      R0,SP,#+324
   \   00000F9E   0x.... 0x....      BL       RoadBrd_Humidity_ReadHumidity
   \   00000FA2   0x0006             MOVS     R6,R0
   1363                          if (Status == HAL_OK)
   \   00000FA4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000FA6   0x2E00             CMP      R6,#+0
   \   00000FA8   0xD103             BNE.N    ??RoadBrd_ParseString_181
   1364                            Status = RoadBrd_Humidity_ReadHumidity_Scaled( &HMeasureScaled );
   \   00000FAA   0xA8FC             ADD      R0,SP,#+1008
   \   00000FAC   0x.... 0x....      BL       RoadBrd_Humidity_ReadHumidity_Scaled
   \   00000FB0   0x0006             MOVS     R6,R0
   1365                          // Is this a BLE Operation?
   1366                          if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_181: (+1)
   \   00000FB2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000FB4   0x2D00             CMP      R5,#+0
   \   00000FB6   0xD009             BEQ.N    ??RoadBrd_ParseString_182
   1367                          {
   1368                            // Yes...Build and Send BLE Response NOW.
   1369                            strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00000FB8   0x4988             LDR.N    R1,??RoadBrd_ParseString_56
   \   00000FBA   0xA80A             ADD      R0,SP,#+40
   \   00000FBC   0x.... 0x....      BL       strcpy
   1370                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00000FC0   0xA80A             ADD      R0,SP,#+40
   \   00000FC2   0x.... 0x....      BL       strlen
   \   00000FC6   0xA90A             ADD      R1,SP,#+40
   \   00000FC8   0x.... 0x....      BL       BGM111_Transmit
   1371                          }
   1372                          if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_182: (+1)
   \   00000FCC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000FCE   0x2E00             CMP      R6,#+0
   \   00000FD0   0xD126             BNE.N    ??RoadBrd_ParseString_183
   1373                          {
   1374                            // Send string to UART..
   1375                            strcpy( (char *)tempBffr2, "Humidity SENSOR...\r\n");
   \   00000FD2   0xF8DF 0x1DCC      LDR.W    R1,??RoadBrd_ParseString_184
   \   00000FD6   0xA80A             ADD      R0,SP,#+40
   \   00000FD8   0x.... 0x....      BL       strcpy
   1376          #ifdef NUCLEO
   1377                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1378          #else
   1379                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00000FDC   0xA90A             ADD      R1,SP,#+40
   \   00000FDE   0x2000             MOVS     R0,#+0
   \   00000FE0   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00000FE4   0x0006             MOVS     R6,R0
   1380          #endif
   1381                            if (Status != HAL_OK)
   \   00000FE6   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000FE8   0x2E00             CMP      R6,#+0
   \   00000FEA   0xD003             BEQ.N    ??RoadBrd_ParseString_185
   1382                              return Status;
   \   00000FEC   0x0030             MOVS     R0,R6
   \   00000FEE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000FF0   0xF003 0xBC15      B.W      ??RoadBrd_ParseString_4
   1383                            // NOW, Build Data String..
   1384                            sprintf( (char *)tempBffr2, "     Humidity DATA: " );
   \                     ??RoadBrd_ParseString_185: (+1)
   \   00000FF4   0xF8DF 0x1DAC      LDR.W    R1,??RoadBrd_ParseString_184+0x4
   \   00000FF8   0xA80A             ADD      R0,SP,#+40
   \   00000FFA   0x.... 0x....      BL       sprintf
   1385                            strcat( (char *)tempBffr2, (char *)HMeasure.HRaw );
   \   00000FFE   0xA953             ADD      R1,SP,#+332
   \   00001000   0xA80A             ADD      R0,SP,#+40
   \   00001002   0x.... 0x....      BL       strcat
   1386                            strcat( (char *)tempBffr2, "\r\n" );
   \   00001006   0xA1CE             ADR.N    R1,??RoadBrd_ParseString_71+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001008   0xA80A             ADD      R0,SP,#+40
   \   0000100A   0x.... 0x....      BL       strcat
   1387                          }
   1388                          else
   1389                            break;
   1390          #ifdef NUCLEO
   1391                          Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1392          #else
   1393                          Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000100E   0xA90A             ADD      R1,SP,#+40
   \   00001010   0x2000             MOVS     R0,#+0
   \   00001012   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001016   0x0006             MOVS     R6,R0
   1394          #endif
   1395                          if (Status != HAL_OK)
   \   00001018   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000101A   0x2E00             CMP      R6,#+0
   \   0000101C   0xD102             BNE.N    ??RoadBrd_ParseString_186
   \   0000101E   0xE005             B.N      ??RoadBrd_ParseString_187
   \                     ??RoadBrd_ParseString_183: (+1)
   \   00001020   0xF003 0xBB84      B.W      ??RoadBrd_ParseString_27
   1396                            return Status;
   \                     ??RoadBrd_ParseString_186: (+1)
   \   00001024   0x0030             MOVS     R0,R6
   \   00001026   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001028   0xF003 0xBBF9      B.W      ??RoadBrd_ParseString_4
   1397                          // NOW, Build Data String..
   1398                          sprintf( (char *)tempBffr2, "     Humidity DATA(Decimal): %d\r\n", HMeasure.HRawC );
   \                     ??RoadBrd_ParseString_187: (+1)
   \   0000102C   0xF8BD 0x2154      LDRH     R2,[SP, #+340]
   \   00001030   0xF8DF 0x1D74      LDR.W    R1,??RoadBrd_ParseString_184+0x8
   \   00001034   0xA80A             ADD      R0,SP,#+40
   \   00001036   0x.... 0x....      BL       sprintf
   1399          #ifdef NUCLEO
   1400                          Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1401          #else
   1402                          Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000103A   0xA90A             ADD      R1,SP,#+40
   \   0000103C   0x2000             MOVS     R0,#+0
   \   0000103E   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001042   0x0006             MOVS     R6,R0
   1403          #endif
   1404                          if (Status != HAL_OK)
   \   00001044   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001046   0x2E00             CMP      R6,#+0
   \   00001048   0xD003             BEQ.N    ??RoadBrd_ParseString_188
   1405                            return Status;
   \   0000104A   0x0030             MOVS     R0,R6
   \   0000104C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000104E   0xF003 0xBBE6      B.W      ??RoadBrd_ParseString_4
   1406                          // Now calculate Celcius and Farenheit Temp.
   1407                          sprintf( (char *)tempBffr2, "     Humidity: %s/%s\r\n", (char *)HMeasure.Humidity, (char *)HMeasureScaled.Humidity );
   \                     ??RoadBrd_ParseString_188: (+1)
   \   00001052   0xABFC             ADD      R3,SP,#+1008
   \   00001054   0xAA51             ADD      R2,SP,#+324
   \   00001056   0xF8DF 0x1D54      LDR.W    R1,??RoadBrd_ParseString_184+0xC
   \   0000105A   0xA80A             ADD      R0,SP,#+40
   \   0000105C   0x.... 0x....      BL       sprintf
   \   00001060   0xE10A             B.N      ??RoadBrd_ParseString_189
   \   00001062   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_38:
   \   00001064   0x........         DC32     ?_14
   \   00001068   0x........         DC32     ?_15
   \   0000106C   0x........         DC32     ?_16
   1408                        }
   1409                        else
   1410                        {
   1411                          switch( tempBffr[1] )
   \                     ??RoadBrd_ParseString_180: (+1)
   \   00001070   0x7860             LDRB     R0,[R4, #+1]
   \   00001072   0x2830             CMP      R0,#+48
   \   00001074   0xD022             BEQ.N    ??RoadBrd_ParseString_190
   \   00001076   0x2831             CMP      R0,#+49
   \   00001078   0xF000 0x808A      BEQ.W    ??RoadBrd_ParseString_191
   \   0000107C   0x2849             CMP      R0,#+73
   \   0000107E   0xF040 0x80FB      BNE.W    ??RoadBrd_ParseString_189
   1412                          {
   1413          //------------------ DI Command: Initialize Humidity Sensor
   1414                            case 'I':
   1415                              // Initialize Humidity Sensor.
   1416                              Status = RoadBrd_HumidityInit();
   \                     ??RoadBrd_ParseString_192: (+1)
   \   00001082   0x.... 0x....      BL       RoadBrd_HumidityInit
   \   00001086   0x0006             MOVS     R6,R0
   1417                              // Is this a BLE Operation?
   1418                              if ( BLE_Flag )
   \   00001088   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000108A   0x2D00             CMP      R5,#+0
   \   0000108C   0xD009             BEQ.N    ??RoadBrd_ParseString_193
   1419                              {
   1420                                // Yes...Build and Send BLE Response NOW.
   1421                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   0000108E   0x4953             LDR.N    R1,??RoadBrd_ParseString_56
   \   00001090   0xA80A             ADD      R0,SP,#+40
   \   00001092   0x.... 0x....      BL       strcpy
   1422                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001096   0xA80A             ADD      R0,SP,#+40
   \   00001098   0x.... 0x....      BL       strlen
   \   0000109C   0xA90A             ADD      R1,SP,#+40
   \   0000109E   0x.... 0x....      BL       BGM111_Transmit
   1423                              }
   1424          
   1425                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_193: (+1)
   \   000010A2   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000010A4   0x2E00             CMP      R6,#+0
   \   000010A6   0xD104             BNE.N    ??RoadBrd_ParseString_194
   1426                              {
   1427                                strcpy( (char *)tempBffr2, "Humidity Sensor: Initialization Complete.\r\n");;
   \   000010A8   0xF8DF 0x1DE8      LDR.W    R1,??RoadBrd_ParseString_195
   \   000010AC   0xA80A             ADD      R0,SP,#+40
   \   000010AE   0x.... 0x....      BL       strcpy
   1428                              }
   1429                              break;
   \                     ??RoadBrd_ParseString_194: (+1)
   \   000010B2   0xE0E1             B.N      ??RoadBrd_ParseString_189
   \                     ??RoadBrd_ParseString_41:
   \   000010B4   0x........         DC32     ?_17
   \   000010B8   0x........         DC32     ?_19
   1430          //------------------ D0 Command...Read Humidity Values.....
   1431                            case '0':
   1432                              // Read Humidity Sensor sensor and return Humidity results....
   1433                              Status = RoadBrd_Humidity_ReadHumidity( &HMeasure );
   \                     ??RoadBrd_ParseString_190: (+1)
   \   000010BC   0xA851             ADD      R0,SP,#+324
   \   000010BE   0x.... 0x....      BL       RoadBrd_Humidity_ReadHumidity
   \   000010C2   0x0006             MOVS     R6,R0
   1434                              // Is this a BLE Operation?
   1435                              if ( BLE_Flag )
   \   000010C4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000010C6   0x2D00             CMP      R5,#+0
   \   000010C8   0xD009             BEQ.N    ??RoadBrd_ParseString_196
   1436                              {
   1437                                // Yes...Build and Send BLE Response NOW.
   1438                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000010CA   0x4944             LDR.N    R1,??RoadBrd_ParseString_56
   \   000010CC   0xA80A             ADD      R0,SP,#+40
   \   000010CE   0x.... 0x....      BL       strcpy
   1439                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000010D2   0xA80A             ADD      R0,SP,#+40
   \   000010D4   0x.... 0x....      BL       strlen
   \   000010D8   0xA90A             ADD      R1,SP,#+40
   \   000010DA   0x.... 0x....      BL       BGM111_Transmit
   1440                              }
   1441          
   1442                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_196: (+1)
   \   000010DE   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000010E0   0x2E00             CMP      R6,#+0
   \   000010E2   0xD126             BNE.N    ??RoadBrd_ParseString_197
   1443                              {
   1444                                // Send string to UART..
   1445                                strcpy( (char *)tempBffr2, "Humidity SENSOR...\r\n");
   \   000010E4   0xF8DF 0x1CB8      LDR.W    R1,??RoadBrd_ParseString_184
   \   000010E8   0xA80A             ADD      R0,SP,#+40
   \   000010EA   0x.... 0x....      BL       strcpy
   1446          #ifdef NUCLEO
   1447                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1448          #else
   1449                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000010EE   0xA90A             ADD      R1,SP,#+40
   \   000010F0   0x2000             MOVS     R0,#+0
   \   000010F2   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000010F6   0x0006             MOVS     R6,R0
   1450          #endif
   1451                                if (Status != HAL_OK)
   \   000010F8   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000010FA   0x2E00             CMP      R6,#+0
   \   000010FC   0xD003             BEQ.N    ??RoadBrd_ParseString_198
   1452                                  return Status;
   \   000010FE   0x0030             MOVS     R0,R6
   \   00001100   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001102   0xF003 0xBB8C      B.W      ??RoadBrd_ParseString_4
   1453                                // NOW, Build Data String..
   1454                                sprintf( (char *)tempBffr2, "     Humidity DATA: " );
   \                     ??RoadBrd_ParseString_198: (+1)
   \   00001106   0xF8DF 0x1C9C      LDR.W    R1,??RoadBrd_ParseString_184+0x4
   \   0000110A   0xA80A             ADD      R0,SP,#+40
   \   0000110C   0x.... 0x....      BL       sprintf
   1455                                strcat( (char *)tempBffr2, (char *)HMeasure.HRaw );
   \   00001110   0xA953             ADD      R1,SP,#+332
   \   00001112   0xA80A             ADD      R0,SP,#+40
   \   00001114   0x.... 0x....      BL       strcat
   1456                                strcat( (char *)tempBffr2, "\r\n" );
   \   00001118   0xA189             ADR.N    R1,??RoadBrd_ParseString_71+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   0000111A   0xA80A             ADD      R0,SP,#+40
   \   0000111C   0x.... 0x....      BL       strcat
   1457                              }
   1458                              else
   1459                                break;
   1460          #ifdef NUCLEO
   1461                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1462          #else
   1463                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00001120   0xA90A             ADD      R1,SP,#+40
   \   00001122   0x2000             MOVS     R0,#+0
   \   00001124   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001128   0x0006             MOVS     R6,R0
   1464          #endif
   1465                              if (Status != HAL_OK)
   \   0000112A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000112C   0x2E00             CMP      R6,#+0
   \   0000112E   0xD101             BNE.N    ??RoadBrd_ParseString_199
   \   00001130   0xE004             B.N      ??RoadBrd_ParseString_200
   \                     ??RoadBrd_ParseString_197: (+1)
   \   00001132   0xE0A1             B.N      ??RoadBrd_ParseString_189
   1466                                return Status;
   \                     ??RoadBrd_ParseString_199: (+1)
   \   00001134   0x0030             MOVS     R0,R6
   \   00001136   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001138   0xF003 0xBB71      B.W      ??RoadBrd_ParseString_4
   1467                              // NOW, Build Data String..
   1468                              sprintf( (char *)tempBffr2, "     Humidity DATA(Decimal): %d\r\n", HMeasure.HRawC );
   \                     ??RoadBrd_ParseString_200: (+1)
   \   0000113C   0xF8BD 0x2154      LDRH     R2,[SP, #+340]
   \   00001140   0xF8DF 0x1C64      LDR.W    R1,??RoadBrd_ParseString_184+0x8
   \   00001144   0xA80A             ADD      R0,SP,#+40
   \   00001146   0x.... 0x....      BL       sprintf
   1469          #ifdef NUCLEO
   1470                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1471          #else
   1472                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000114A   0xA90A             ADD      R1,SP,#+40
   \   0000114C   0x2000             MOVS     R0,#+0
   \   0000114E   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001152   0x0006             MOVS     R6,R0
   1473          #endif
   1474                              if (Status != HAL_OK)
   \   00001154   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001156   0x2E00             CMP      R6,#+0
   \   00001158   0xD00C             BEQ.N    ??RoadBrd_ParseString_201
   1475                                return Status;
   \   0000115A   0x0030             MOVS     R0,R6
   \   0000115C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000115E   0xF003 0xBB5E      B.W      ??RoadBrd_ParseString_4
   \   00001162   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_47:
   \   00001164   0x........         DC32     ?_20
   \   00001168   0x........         DC32     ?_21
   \   0000116C   0x........         DC32     ?_22
   \   00001170   0x........         DC32     ?_23
   1476                              // Now calculate Humidity.
   1477                              sprintf( (char *)tempBffr2, "     Humidity: " );
   \                     ??RoadBrd_ParseString_201: (+1)
   \   00001174   0xF8DF 0x1DCC      LDR.W    R1,??RoadBrd_ParseString_202
   \   00001178   0xA80A             ADD      R0,SP,#+40
   \   0000117A   0x.... 0x....      BL       sprintf
   1478                              strcat( (char *)tempBffr2, (char *)HMeasure.Humidity );
   \   0000117E   0xA951             ADD      R1,SP,#+324
   \   00001180   0xA80A             ADD      R0,SP,#+40
   \   00001182   0x.... 0x....      BL       strcat
   1479                              strcat( (char *)tempBffr2, "\r\n" );
   \   00001186   0xA16E             ADR.N    R1,??RoadBrd_ParseString_71+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001188   0xA80A             ADD      R0,SP,#+40
   \   0000118A   0x.... 0x....      BL       strcat
   1480                              break;
   \   0000118E   0xE073             B.N      ??RoadBrd_ParseString_189
   1481          //------------------ D1 Command...Read Temperature Values..... 
   1482                            case '1':
   1483                              // Read Humidity Sensor sensor and return Temperature results....
   1484                              Status = RoadBrd_Humidity_ReadTemperature( &TMeasure );
   \                     ??RoadBrd_ParseString_191: (+1)
   \   00001190   0xA83D             ADD      R0,SP,#+244
   \   00001192   0x.... 0x....      BL       RoadBrd_Humidity_ReadTemperature
   \   00001196   0x0006             MOVS     R6,R0
   1485                              // Is this a BLE Operation?
   1486                              if ( BLE_Flag )
   \   00001198   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000119A   0x2D00             CMP      R5,#+0
   \   0000119C   0xD009             BEQ.N    ??RoadBrd_ParseString_203
   1487                              {
   1488                                // Yes...Build and Send BLE Response NOW.
   1489                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   0000119E   0x490F             LDR.N    R1,??RoadBrd_ParseString_56
   \   000011A0   0xA80A             ADD      R0,SP,#+40
   \   000011A2   0x.... 0x....      BL       strcpy
   1490                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000011A6   0xA80A             ADD      R0,SP,#+40
   \   000011A8   0x.... 0x....      BL       strlen
   \   000011AC   0xA90A             ADD      R1,SP,#+40
   \   000011AE   0x.... 0x....      BL       BGM111_Transmit
   1491                              }
   1492          
   1493                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_203: (+1)
   \   000011B2   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000011B4   0x2E00             CMP      R6,#+0
   \   000011B6   0xD133             BNE.N    ??RoadBrd_ParseString_204
   1494                              {
   1495                                // Send string to UART..
   1496                                strcpy( (char *)tempBffr2, "Humidity SENSOR...\r\n");
   \   000011B8   0xF8DF 0x1BE4      LDR.W    R1,??RoadBrd_ParseString_184
   \   000011BC   0xA80A             ADD      R0,SP,#+40
   \   000011BE   0x.... 0x....      BL       strcpy
   1497          #ifdef NUCLEO
   1498                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1499          #else
   1500                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000011C2   0xA90A             ADD      R1,SP,#+40
   \   000011C4   0x2000             MOVS     R0,#+0
   \   000011C6   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000011CA   0x0006             MOVS     R6,R0
   1501          #endif
   1502                                if (Status != HAL_OK)
   \   000011CC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000011CE   0x2E00             CMP      R6,#+0
   \   000011D0   0xD008             BEQ.N    ??RoadBrd_ParseString_205
   1503                                  return Status;
   \   000011D2   0x0030             MOVS     R0,R6
   \   000011D4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000011D6   0xF003 0xBB22      B.W      ??RoadBrd_ParseString_4
   \   000011DA   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_56:
   \   000011DC   0x........         DC32     ?_24
   \   000011E0   0x........         DC32     ?_25
   1504                                // NOW, Build Data String..
   1505                                sprintf( (char *)tempBffr2, "     TEMP DATA: " );
   \                     ??RoadBrd_ParseString_205: (+1)
   \   000011E4   0x4955             LDR.N    R1,??RoadBrd_ParseString_71+0x4
   \   000011E6   0xA80A             ADD      R0,SP,#+40
   \   000011E8   0x.... 0x....      BL       sprintf
   1506                                strcat( (char *)tempBffr2, (char *)TMeasure.Raw );
   \   000011EC   0xF50D 0x7181      ADD      R1,SP,#+258
   \   000011F0   0xA80A             ADD      R0,SP,#+40
   \   000011F2   0x.... 0x....      BL       strcat
   1507                                strcat( (char *)tempBffr2, "\r\n" );
   \   000011F6   0xA152             ADR.N    R1,??RoadBrd_ParseString_71+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   000011F8   0xA80A             ADD      R0,SP,#+40
   \   000011FA   0x.... 0x....      BL       strcat
   1508                              }
   1509                              else
   1510                                break;
   1511          #ifdef NUCLEO
   1512                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1513          #else
   1514                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000011FE   0xA90A             ADD      R1,SP,#+40
   \   00001200   0x2000             MOVS     R0,#+0
   \   00001202   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001206   0x0006             MOVS     R6,R0
   1515          #endif
   1516                              if (Status != HAL_OK)
   \   00001208   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000120A   0x2E00             CMP      R6,#+0
   \   0000120C   0xD109             BNE.N    ??RoadBrd_ParseString_206
   \   0000120E   0xE00C             B.N      ??RoadBrd_ParseString_207
   \                     ??RoadBrd_ParseString_59:
   \   00001210   0x........         DC32     ?_26
   \   00001214   0x........         DC32     ?_27
   \   00001218   0x........         DC32     ?_28
   \   0000121C   0x........         DC32     ?_29
   \                     ??RoadBrd_ParseString_204: (+1)
   \   00001220   0xE02A             B.N      ??RoadBrd_ParseString_189
   1517                                return Status;
   \                     ??RoadBrd_ParseString_206: (+1)
   \   00001222   0x0030             MOVS     R0,R6
   \   00001224   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001226   0xF003 0xBAFA      B.W      ??RoadBrd_ParseString_4
   1518                              // NOW, Build Data String..
   1519                              sprintf( (char *)tempBffr2, "     TEMP DATA(Decimal): %d\r\n", TMeasure.RawC );
   \                     ??RoadBrd_ParseString_207: (+1)
   \   0000122A   0xF8BD 0x210A      LDRH     R2,[SP, #+266]
   \   0000122E   0x495D             LDR.N    R1,??RoadBrd_ParseString_75
   \   00001230   0xA80A             ADD      R0,SP,#+40
   \   00001232   0x.... 0x....      BL       sprintf
   1520          #ifdef NUCLEO
   1521                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1522          #else
   1523                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00001236   0xA90A             ADD      R1,SP,#+40
   \   00001238   0x2000             MOVS     R0,#+0
   \   0000123A   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000123E   0x0006             MOVS     R6,R0
   1524          #endif
   1525                              if (Status != HAL_OK)
   \   00001240   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001242   0x2E00             CMP      R6,#+0
   \   00001244   0xD003             BEQ.N    ??RoadBrd_ParseString_208
   1526                                return Status;
   \   00001246   0x0030             MOVS     R0,R6
   \   00001248   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000124A   0xF003 0xBAE8      B.W      ??RoadBrd_ParseString_4
   1527                              // Now calculate Celcius and Farenheit Temp.
   1528                              sprintf( (char *)tempBffr2, "     TempC: " );
   \                     ??RoadBrd_ParseString_208: (+1)
   \   0000124E   0x4956             LDR.N    R1,??RoadBrd_ParseString_75+0x4
   \   00001250   0xA80A             ADD      R0,SP,#+40
   \   00001252   0x.... 0x....      BL       sprintf
   1529                              strcat( (char *)tempBffr2, (char *)TMeasure.TempC );
   \   00001256   0xA93D             ADD      R1,SP,#+244
   \   00001258   0xA80A             ADD      R0,SP,#+40
   \   0000125A   0x.... 0x....      BL       strcat
   1530                              strcat( (char *)tempBffr2, "     TempF: " );
   \   0000125E   0x4953             LDR.N    R1,??RoadBrd_ParseString_75+0x8
   \   00001260   0xA80A             ADD      R0,SP,#+40
   \   00001262   0x.... 0x....      BL       strcat
   1531                              strcat( (char *)tempBffr2, (char *)TMeasure.TempF );
   \   00001266   0xF10D 0x01FB      ADD      R1,SP,#+251
   \   0000126A   0xA80A             ADD      R0,SP,#+40
   \   0000126C   0x.... 0x....      BL       strcat
   1532                              strcat( (char *)tempBffr2, "\r\n" );
   \   00001270   0xA133             ADR.N    R1,??RoadBrd_ParseString_71+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001272   0xA80A             ADD      R0,SP,#+40
   \   00001274   0x.... 0x....      BL       strcat
   1533                              break;
   1534                          } //EndSwitch
   1535                        } //EndElse (Size == 1)
   1536                        break;
   \                     ??RoadBrd_ParseString_189: (+1)
   \   00001278   0xF003 0xBA58      B.W      ??RoadBrd_ParseString_27
   1537          //**************************************************************************************************
   1538                      case 'E':
   1539                        // Read Temp and Pressure. 
   1540                        // Is this a BLE Operation?
   1541                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_16: (+1)
   \   0000127C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000127E   0x2D00             CMP      R5,#+0
   \   00001280   0xD00A             BEQ.N    ??RoadBrd_ParseString_209
   1542                        {
   1543                          // Yes...Build and Send BLE Response NOW.
   1544                          strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001282   0xF8DF 0x1D6C      LDR.W    R1,??RoadBrd_ParseString_210
   \   00001286   0xA80A             ADD      R0,SP,#+40
   \   00001288   0x.... 0x....      BL       strcpy
   1545                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000128C   0xA80A             ADD      R0,SP,#+40
   \   0000128E   0x.... 0x....      BL       strlen
   \   00001292   0xA90A             ADD      R1,SP,#+40
   \   00001294   0x.... 0x....      BL       BGM111_Transmit
   1546                        }
   1547                        
   1548                        strcpy( (char *)tempBffr2, "TBD: Read Temp and Pressure NOT IMPLEMENTED\r\n");
   \                     ??RoadBrd_ParseString_209: (+1)
   \   00001298   0xF8DF 0x1D58      LDR.W    R1,??RoadBrd_ParseString_210+0x4
   \   0000129C   0xA80A             ADD      R0,SP,#+40
   \   0000129E   0x.... 0x....      BL       strcpy
   1549                        break;
   \   000012A2   0xF003 0xBA43      B.W      ??RoadBrd_ParseString_27
   1550          //**************************************************************************************************
   1551                      case 'F':
   1552                        // NO ACTION. 
   1553                        // Is this a BLE Operation?
   1554                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_17: (+1)
   \   000012A6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000012A8   0x2D00             CMP      R5,#+0
   \   000012AA   0xD00A             BEQ.N    ??RoadBrd_ParseString_211
   1555                        {
   1556                          // Yes...Build and Send BLE Response NOW.
   1557                          strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000012AC   0xF8DF 0x1D40      LDR.W    R1,??RoadBrd_ParseString_210
   \   000012B0   0xA80A             ADD      R0,SP,#+40
   \   000012B2   0x.... 0x....      BL       strcpy
   1558                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000012B6   0xA80A             ADD      R0,SP,#+40
   \   000012B8   0x.... 0x....      BL       strlen
   \   000012BC   0xA90A             ADD      R1,SP,#+40
   \   000012BE   0x.... 0x....      BL       BGM111_Transmit
   1559                        }
   1560                        
   1561                        strcpy( (char *)tempBffr2, "NO Action...(0x00).\r\n");
   \                     ??RoadBrd_ParseString_211: (+1)
   \   000012C2   0xF8DF 0x1D34      LDR.W    R1,??RoadBrd_ParseString_210+0x8
   \   000012C6   0xA80A             ADD      R0,SP,#+40
   \   000012C8   0x.... 0x....      BL       strcpy
   1562                        break;
   \   000012CC   0xF003 0xBA2E      B.W      ??RoadBrd_ParseString_27
   \                     ??RoadBrd_ParseString_67:
   \   000012D0   0x........         DC32     ?_30
   \   000012D4   0x........         DC32     ?_31
   \   000012D8   0x........         DC32     ?_32
   1563          //**************************************************************************************************
   1564                      case 'G':
   1565                        // Read Temperature sensor and return results....Temperature Sensor U10(PCT2075GVJ).  Addr: 0x94
   1566                        Status = RoadBrd_ReadTemp( &TMeasure );
   \                     ??RoadBrd_ParseString_18: (+1)
   \   000012DC   0xA83D             ADD      R0,SP,#+244
   \   000012DE   0x.... 0x....      BL       RoadBrd_ReadTemp
   \   000012E2   0x0006             MOVS     R6,R0
   1567                        // Is this a BLE Operation?
   1568                        if ( BLE_Flag )
   \   000012E4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000012E6   0x2D00             CMP      R5,#+0
   \   000012E8   0xD00A             BEQ.N    ??RoadBrd_ParseString_212
   1569                        {
   1570                          // Yes...Build and Send BLE Response NOW.
   1571                          strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000012EA   0xF8DF 0x1D04      LDR.W    R1,??RoadBrd_ParseString_210
   \   000012EE   0xA80A             ADD      R0,SP,#+40
   \   000012F0   0x.... 0x....      BL       strcpy
   1572                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000012F4   0xA80A             ADD      R0,SP,#+40
   \   000012F6   0x.... 0x....      BL       strlen
   \   000012FA   0xA90A             ADD      R1,SP,#+40
   \   000012FC   0x.... 0x....      BL       BGM111_Transmit
   1573                        }
   1574                        
   1575                        if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_212: (+1)
   \   00001300   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001302   0x2E00             CMP      R6,#+0
   \   00001304   0xD104             BNE.N    ??RoadBrd_ParseString_213
   1576                          Status = RoadBrd_ReadTemp_Scaled( &TMeasureScaled );
   \   00001306   0xA8FF             ADD      R0,SP,#+1020
   \   00001308   0x3008             ADDS     R0,R0,#+8
   \   0000130A   0x.... 0x....      BL       RoadBrd_ReadTemp_Scaled
   \   0000130E   0x0006             MOVS     R6,R0
   1577                        if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_213: (+1)
   \   00001310   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001312   0x2E00             CMP      R6,#+0
   \   00001314   0xD12D             BNE.N    ??RoadBrd_ParseString_214
   1578                        {
   1579                          // Send string to UART..
   1580                          strcpy( (char *)tempBffr2, "TEMP SENSOR...\r\n");
   \   00001316   0xF8DF 0x1CE4      LDR.W    R1,??RoadBrd_ParseString_210+0xC
   \   0000131A   0xA80A             ADD      R0,SP,#+40
   \   0000131C   0x.... 0x....      BL       strcpy
   1581          #ifdef NUCLEO
   1582                          Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1583          #else
   1584                          Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00001320   0xA90A             ADD      R1,SP,#+40
   \   00001322   0x2000             MOVS     R0,#+0
   \   00001324   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001328   0x0006             MOVS     R6,R0
   1585          #endif
   1586                          if (Status != HAL_OK)
   \   0000132A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000132C   0x2E00             CMP      R6,#+0
   \   0000132E   0xD009             BEQ.N    ??RoadBrd_ParseString_215
   1587                            return Status;
   \   00001330   0x0030             MOVS     R0,R6
   \   00001332   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001334   0xF003 0xBA73      B.W      ??RoadBrd_ParseString_4
   \                     ??RoadBrd_ParseString_71:
   \   00001338   0x........         DC32     ?_33
   \   0000133C   0x........         DC32     ?_34
   \   00001340   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
   1588                          // NOW, Build Data String..
   1589                          sprintf( (char *)tempBffr2, "     TEMP DATA: " );
   \                     ??RoadBrd_ParseString_215: (+1)
   \   00001344   0xF8DF 0x1DD8      LDR.W    R1,??RoadBrd_ParseString_216
   \   00001348   0xA80A             ADD      R0,SP,#+40
   \   0000134A   0x.... 0x....      BL       sprintf
   1590                          strcat( (char *)tempBffr2, (char *)TMeasure.Raw );
   \   0000134E   0xF50D 0x7181      ADD      R1,SP,#+258
   \   00001352   0xA80A             ADD      R0,SP,#+40
   \   00001354   0x.... 0x....      BL       strcat
   1591                          strcat( (char *)tempBffr2, "\r\n" );
   \   00001358   0xA1D4             ADR.N    R1,??RoadBrd_ParseString_103+0x4  ;; 0x0D, 0x0A, 0x00, 0x00
   \   0000135A   0xA80A             ADD      R0,SP,#+40
   \   0000135C   0x.... 0x....      BL       strcat
   1592                        }
   1593                        else
   1594                          break;
   1595          #ifdef NUCLEO
   1596                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1597          #else
   1598                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00001360   0xA90A             ADD      R1,SP,#+40
   \   00001362   0x2000             MOVS     R0,#+0
   \   00001364   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001368   0x0006             MOVS     R6,R0
   1599          #endif
   1600                        if (Status != HAL_OK)
   \   0000136A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000136C   0x2E00             CMP      R6,#+0
   \   0000136E   0xD102             BNE.N    ??RoadBrd_ParseString_217
   \   00001370   0xE005             B.N      ??RoadBrd_ParseString_218
   \                     ??RoadBrd_ParseString_214: (+1)
   \   00001372   0xF003 0xB9DB      B.W      ??RoadBrd_ParseString_27
   1601                          return Status;
   \                     ??RoadBrd_ParseString_217: (+1)
   \   00001376   0x0030             MOVS     R0,R6
   \   00001378   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000137A   0xF003 0xBA50      B.W      ??RoadBrd_ParseString_4
   1602                        // NOW, Build Data String..
   1603                        sprintf( (char *)tempBffr2, "     TEMP DATA(Decimal): %d\r\n", TMeasure.RawC );
   \                     ??RoadBrd_ParseString_218: (+1)
   \   0000137E   0xF8BD 0x210A      LDRH     R2,[SP, #+266]
   \   00001382   0x4908             LDR.N    R1,??RoadBrd_ParseString_75
   \   00001384   0xA80A             ADD      R0,SP,#+40
   \   00001386   0x.... 0x....      BL       sprintf
   1604          #ifdef NUCLEO
   1605                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1606          #else
   1607                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000138A   0xA90A             ADD      R1,SP,#+40
   \   0000138C   0x2000             MOVS     R0,#+0
   \   0000138E   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001392   0x0006             MOVS     R6,R0
   1608          #endif
   1609                        if (Status != HAL_OK)
   \   00001394   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001396   0x2E00             CMP      R6,#+0
   \   00001398   0xD010             BEQ.N    ??RoadBrd_ParseString_219
   1610                          return Status;
   \   0000139A   0x0030             MOVS     R0,R6
   \   0000139C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000139E   0xF003 0xBA3E      B.W      ??RoadBrd_ParseString_4
   \   000013A2   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_75:
   \   000013A4   0x........         DC32     ?_35
   \   000013A8   0x........         DC32     ?_36
   \   000013AC   0x........         DC32     ?_37
   \   000013B0   0x........         DC32     ?_38
   \   000013B4   0x........         DC32     ?_39
   \   000013B8   0x........         DC32     ?_40
   1611                        // Now calculate Celcius and Farenheit Temp.
   1612                        sprintf( (char *)tempBffr2, "     TempC: %s/%s     TempF: %s/%s\r\n", 
   1613                                (char *)TMeasure.TempC, 
   1614                                (char *)TMeasureScaled.TempC,
   1615                                (char *)TMeasure.TempF, 
   1616                                (char *)TMeasureScaled.TempF);
   \                     ??RoadBrd_ParseString_219: (+1)
   \   000013BC   0xA8FF             ADD      R0,SP,#+1020
   \   000013BE   0x300F             ADDS     R0,R0,#+15
   \   000013C0   0x9001             STR      R0,[SP, #+4]
   \   000013C2   0xF10D 0x00FB      ADD      R0,SP,#+251
   \   000013C6   0x9000             STR      R0,[SP, #+0]
   \   000013C8   0xABFF             ADD      R3,SP,#+1020
   \   000013CA   0x3308             ADDS     R3,R3,#+8
   \   000013CC   0xAA3D             ADD      R2,SP,#+244
   \   000013CE   0xF8DF 0x1DA8      LDR.W    R1,??RoadBrd_ParseString_220
   \   000013D2   0xA80A             ADD      R0,SP,#+40
   \   000013D4   0x.... 0x....      BL       sprintf
   1617                        break;
   \   000013D8   0xF003 0xB9A8      B.W      ??RoadBrd_ParseString_27
   1618          //**************************************************************************************************
   1619                      case 'H':
   1620                        // RGB Color Light Sensor U15(ISL91250).  Addr: 0x88
   1621                        if (Size == 1)
   \                     ??RoadBrd_ParseString_19: (+1)
   \   000013DC   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000013E0   0xF1B8 0x0F01      CMP      R8,#+1
   \   000013E4   0xD174             BNE.N    ??RoadBrd_ParseString_221
   1622                        {
   1623          //------------------ H Command...Read RGB Values and Return as 3 (2 Byte Fields)....REDmsb,REDlsb,GREENmsb,GREENlsb,BLUEmsb,BLUElsb.....     
   1624                          // 1. Time to send Command and collect status.
   1625                          Status = RoadBrd_RGBReadValues( &RGBValues );
   \   000013E6   0xA8B4             ADD      R0,SP,#+720
   \   000013E8   0x.... 0x....      BL       RoadBrd_RGBReadValues
   \   000013EC   0x0006             MOVS     R6,R0
   1626                          // Is this a BLE Operation?
   1627                          if ( BLE_Flag )
   \   000013EE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000013F0   0x2D00             CMP      R5,#+0
   \   000013F2   0xD00A             BEQ.N    ??RoadBrd_ParseString_222
   1628                          {
   1629                            // Yes...Build and Send BLE Response NOW.
   1630                            strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000013F4   0xF8DF 0x1BF8      LDR.W    R1,??RoadBrd_ParseString_210
   \   000013F8   0xA80A             ADD      R0,SP,#+40
   \   000013FA   0x.... 0x....      BL       strcpy
   1631                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000013FE   0xA80A             ADD      R0,SP,#+40
   \   00001400   0x.... 0x....      BL       strlen
   \   00001404   0xA90A             ADD      R1,SP,#+40
   \   00001406   0x.... 0x....      BL       BGM111_Transmit
   1632                          }
   1633                          
   1634                          if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_222: (+1)
   \   0000140A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000140C   0x2E00             CMP      R6,#+0
   \   0000140E   0xD15D             BNE.N    ??RoadBrd_ParseString_223
   1635                          {
   1636                            // Send string to UART..
   1637                            strcpy( (char *)tempBffr2, "RGB Color Light Sensor...\r\n");
   \   00001410   0xF8DF 0x1DBC      LDR.W    R1,??RoadBrd_ParseString_224
   \   00001414   0xA80A             ADD      R0,SP,#+40
   \   00001416   0x.... 0x....      BL       strcpy
   1638          #ifdef NUCLEO
   1639                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1640          #else
   1641                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000141A   0xA90A             ADD      R1,SP,#+40
   \   0000141C   0x2000             MOVS     R0,#+0
   \   0000141E   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001422   0x0006             MOVS     R6,R0
   1642          #endif
   1643                            if (Status != HAL_OK)
   \   00001424   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001426   0x2E00             CMP      R6,#+0
   \   00001428   0xD003             BEQ.N    ??RoadBrd_ParseString_225
   1644                              return Status;
   \   0000142A   0x0030             MOVS     R0,R6
   \   0000142C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000142E   0xF003 0xB9F6      B.W      ??RoadBrd_ParseString_4
   1645                            // NOW, Build Data String..
   1646                            sprintf( (char *)tempBffr2, " RGB(REDmsb,REDlsb,GREENmsb,GREENlsb,BLUEmsb,BLUElsb)\r\n" );
   \                     ??RoadBrd_ParseString_225: (+1)
   \   00001432   0xF8DF 0x1DEC      LDR.W    R1,??RoadBrd_ParseString_226
   \   00001436   0xA80A             ADD      R0,SP,#+40
   \   00001438   0x.... 0x....      BL       sprintf
   1647          #ifdef NUCLEO
   1648                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1649          #else
   1650                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000143C   0xA90A             ADD      R1,SP,#+40
   \   0000143E   0x2000             MOVS     R0,#+0
   \   00001440   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001444   0x0006             MOVS     R6,R0
   1651          #endif
   1652                            if (Status != HAL_OK)
   \   00001446   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001448   0x2E00             CMP      R6,#+0
   \   0000144A   0xD003             BEQ.N    ??RoadBrd_ParseString_227
   1653                              return Status;
   \   0000144C   0x0030             MOVS     R0,R6
   \   0000144E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001450   0xF003 0xB9E5      B.W      ??RoadBrd_ParseString_4
   1654                            strcpy( (char *)tempBffr2, "       DATA: ");
   \                     ??RoadBrd_ParseString_227: (+1)
   \   00001454   0xF8DF 0x1DCC      LDR.W    R1,??RoadBrd_ParseString_226+0x4
   \   00001458   0xA80A             ADD      R0,SP,#+40
   \   0000145A   0x.... 0x....      BL       strcpy
   1655                            strcat( (char *)tempBffr2, (char *)RGBValues.Raw );
   \   0000145E   0xA9BA             ADD      R1,SP,#+744
   \   00001460   0xA80A             ADD      R0,SP,#+40
   \   00001462   0x.... 0x....      BL       strcat
   1656                            strcat( (char *)tempBffr2, "\r\n" );
   \   00001466   0xA191             ADR.N    R1,??RoadBrd_ParseString_103+0x4  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001468   0xA80A             ADD      R0,SP,#+40
   \   0000146A   0x.... 0x....      BL       strcat
   1657          #ifdef NUCLEO
   1658                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1659          #else
   1660                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000146E   0xA90A             ADD      R1,SP,#+40
   \   00001470   0x2000             MOVS     R0,#+0
   \   00001472   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001476   0x0006             MOVS     R6,R0
   1661          #endif
   1662                            if (Status != HAL_OK)
   \   00001478   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000147A   0x2E00             CMP      R6,#+0
   \   0000147C   0xD003             BEQ.N    ??RoadBrd_ParseString_228
   1663                              return Status;
   \   0000147E   0x0030             MOVS     R0,R6
   \   00001480   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001482   0xF003 0xB9CC      B.W      ??RoadBrd_ParseString_4
   1664                            // Now DisplayEach Value Calculated.
   1665                            strcpy( (char *)tempBffr2, "    Red: ");
   \                     ??RoadBrd_ParseString_228: (+1)
   \   00001486   0xF8DF 0x1DA0      LDR.W    R1,??RoadBrd_ParseString_226+0x8
   \   0000148A   0xA80A             ADD      R0,SP,#+40
   \   0000148C   0x.... 0x....      BL       strcpy
   1666                            strcat( (char *)tempBffr2, (char *)RGBValues.Red );
   \   00001490   0xA9B4             ADD      R1,SP,#+720
   \   00001492   0xA80A             ADD      R0,SP,#+40
   \   00001494   0x.... 0x....      BL       strcat
   1667                            strcat( (char *)tempBffr2, "    Green: ");
   \   00001498   0xF8DF 0x1DE0      LDR.W    R1,??RoadBrd_ParseString_229
   \   0000149C   0xA80A             ADD      R0,SP,#+40
   \   0000149E   0x.... 0x....      BL       strcat
   1668                            strcat( (char *)tempBffr2, (char *)RGBValues.Green );
   \   000014A2   0xA9B6             ADD      R1,SP,#+728
   \   000014A4   0xA80A             ADD      R0,SP,#+40
   \   000014A6   0x.... 0x....      BL       strcat
   1669                            strcat( (char *)tempBffr2, "    Blue: ");
   \   000014AA   0xF8DF 0x1DD4      LDR.W    R1,??RoadBrd_ParseString_229+0x4
   \   000014AE   0xA80A             ADD      R0,SP,#+40
   \   000014B0   0x.... 0x....      BL       strcat
   1670                            strcat( (char *)tempBffr2, (char *)RGBValues.Blue );
   \   000014B4   0xA9B8             ADD      R1,SP,#+736
   \   000014B6   0xA80A             ADD      R0,SP,#+40
   \   000014B8   0x.... 0x....      BL       strcat
   1671                            strcat( (char *)tempBffr2, "\r\n" );
   \   000014BC   0xA17B             ADR.N    R1,??RoadBrd_ParseString_103+0x4  ;; 0x0D, 0x0A, 0x00, 0x00
   \   000014BE   0xA80A             ADD      R0,SP,#+40
   \   000014C0   0x.... 0x....      BL       strcat
   \   000014C4   0xE262             B.N      ??RoadBrd_ParseString_230
   \   000014C6   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_87:
   \   000014C8   0x........         DC32     ?_41
   1672                          }
   1673                          else
   1674                            break;
   \                     ??RoadBrd_ParseString_223: (+1)
   \   000014CC   0xF003 0xB92E      B.W      ??RoadBrd_ParseString_27
   1675                        }
   1676                        else
   1677                        {
   1678                          switch( tempBffr[1] )
   \                     ??RoadBrd_ParseString_221: (+1)
   \   000014D0   0x7860             LDRB     R0,[R4, #+1]
   \   000014D2   0x2830             CMP      R0,#+48
   \   000014D4   0xF000 0x8167      BEQ.W    ??RoadBrd_ParseString_231
   \   000014D8   0x2831             CMP      R0,#+49
   \   000014DA   0xF000 0x81D5      BEQ.W    ??RoadBrd_ParseString_232
   \   000014DE   0x2832             CMP      R0,#+50
   \   000014E0   0xF000 0x8202      BEQ.W    ??RoadBrd_ParseString_233
   \   000014E4   0x2833             CMP      R0,#+51
   \   000014E6   0xF000 0x821A      BEQ.W    ??RoadBrd_ParseString_234
   \   000014EA   0x2849             CMP      R0,#+73
   \   000014EC   0xF040 0x8249      BNE.W    ??RoadBrd_ParseString_235
   1679                          {
   1680          //------------------ HI Command...Initialize RGB Color Light Sensor.....     
   1681                            case 'I':
   1682                              if (Size == 2)
   \                     ??RoadBrd_ParseString_236: (+1)
   \   000014F0   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000014F4   0xF1B8 0x0F02      CMP      R8,#+2
   \   000014F8   0xD11A             BNE.N    ??RoadBrd_ParseString_237
   1683                              {
   1684                                // This is the default init. Assume Default Parms and write them.
   1685                                Status = RoadBrd_RGBInit();
   \   000014FA   0x.... 0x....      BL       RoadBrd_RGBInit
   \   000014FE   0x0006             MOVS     R6,R0
   1686          
   1687                                // Is this a BLE Operation?
   1688                                if ( BLE_Flag )
   \   00001500   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001502   0x2D00             CMP      R5,#+0
   \   00001504   0xD00A             BEQ.N    ??RoadBrd_ParseString_238
   1689                                {
   1690                                  // Yes...Build and Send BLE Response NOW.
   1691                                  strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001506   0xF8DF 0x1AE8      LDR.W    R1,??RoadBrd_ParseString_210
   \   0000150A   0xA80A             ADD      R0,SP,#+40
   \   0000150C   0x.... 0x....      BL       strcpy
   1692                                  BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001510   0xA80A             ADD      R0,SP,#+40
   \   00001512   0x.... 0x....      BL       strlen
   \   00001516   0xA90A             ADD      R1,SP,#+40
   \   00001518   0x.... 0x....      BL       BGM111_Transmit
   1693                                }
   1694                                
   1695                                if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_238: (+1)
   \   0000151C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000151E   0x2E00             CMP      R6,#+0
   \   00001520   0xF040 0x8140      BNE.W    ??RoadBrd_ParseString_239
   1696                                {
   1697                                  strcpy( (char *)tempBffr2, "RGB Color Light Sensor: Initialization Complete with DEFAULT Values.\r\n");;
   \   00001524   0xF8DF 0x1D5C      LDR.W    R1,??RoadBrd_ParseString_229+0x8
   \   00001528   0xA80A             ADD      R0,SP,#+40
   \   0000152A   0x.... 0x....      BL       strcpy
   \   0000152E   0xE139             B.N      ??RoadBrd_ParseString_239
   1698                                }
   1699                                
   1700                              }
   1701                              else
   1702                              {
   1703                                // Is this a BLE Operation?
   1704                                if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_237: (+1)
   \   00001530   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001532   0x2D00             CMP      R5,#+0
   \   00001534   0xD00A             BEQ.N    ??RoadBrd_ParseString_240
   1705                                {
   1706                                  // Yes...Build and Send BLE Response NOW.
   1707                                  strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001536   0xF8DF 0x1AB8      LDR.W    R1,??RoadBrd_ParseString_210
   \   0000153A   0xA80A             ADD      R0,SP,#+40
   \   0000153C   0x.... 0x....      BL       strcpy
   1708                                  BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001540   0xA80A             ADD      R0,SP,#+40
   \   00001542   0x.... 0x....      BL       strlen
   \   00001546   0xA90A             ADD      R1,SP,#+40
   \   00001548   0x.... 0x....      BL       BGM111_Transmit
   1709                                }
   1710                                
   1711                                // This is the Parameter init. Will have to verify all parameters first.
   1712                                if ( Size != 29 )
   \                     ??RoadBrd_ParseString_240: (+1)
   \   0000154C   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00001550   0xF1B8 0x0F1D      CMP      R8,#+29
   \   00001554   0xD00A             BEQ.N    ??RoadBrd_ParseString_241
   1713                                {
   1714                                  strcpy( (char *)tempBffr2, "RGB Color Light Sensor: SYNTAX Error. Parameters are not correct.\r\n");;
   \   00001556   0xF8DF 0x1DC8      LDR.W    R1,??RoadBrd_ParseString_242
   \   0000155A   0xA80A             ADD      R0,SP,#+40
   \   0000155C   0x.... 0x....      BL       strcpy
   \   00001560   0xE120             B.N      ??RoadBrd_ParseString_239
   \   00001562   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_101:
   \   00001564   0x........         DC32     ?_42
   \   00001568   0x........         DC32     ?_43
   1715                                }
   1716                                else
   1717                                {
   1718                                  // Step 1. Validate format.
   1719                                  if( (tempBffr[2]!=':') ||
   1720                                      (tempBffr[5]!='.') || 
   1721                                      (tempBffr[8]!='.') || 
   1722                                      (tempBffr[11]!='.') || 
   1723                                      (tempBffr[14]!='.') || 
   1724                                      (tempBffr[17]!='.') || 
   1725                                      (tempBffr[20]!='.') || 
   1726                                      (tempBffr[23]!='.') || 
   1727                                      (tempBffr[26]!='.') )
   \                     ??RoadBrd_ParseString_241: (+1)
   \   0000156C   0x78A0             LDRB     R0,[R4, #+2]
   \   0000156E   0x283A             CMP      R0,#+58
   \   00001570   0xD117             BNE.N    ??RoadBrd_ParseString_243
   \   00001572   0x7960             LDRB     R0,[R4, #+5]
   \   00001574   0x282E             CMP      R0,#+46
   \   00001576   0xD114             BNE.N    ??RoadBrd_ParseString_243
   \   00001578   0x7A20             LDRB     R0,[R4, #+8]
   \   0000157A   0x282E             CMP      R0,#+46
   \   0000157C   0xD111             BNE.N    ??RoadBrd_ParseString_243
   \   0000157E   0x7AE0             LDRB     R0,[R4, #+11]
   \   00001580   0x282E             CMP      R0,#+46
   \   00001582   0xD10E             BNE.N    ??RoadBrd_ParseString_243
   \   00001584   0x7BA0             LDRB     R0,[R4, #+14]
   \   00001586   0x282E             CMP      R0,#+46
   \   00001588   0xD10B             BNE.N    ??RoadBrd_ParseString_243
   \   0000158A   0x7C60             LDRB     R0,[R4, #+17]
   \   0000158C   0x282E             CMP      R0,#+46
   \   0000158E   0xD108             BNE.N    ??RoadBrd_ParseString_243
   \   00001590   0x7D20             LDRB     R0,[R4, #+20]
   \   00001592   0x282E             CMP      R0,#+46
   \   00001594   0xD105             BNE.N    ??RoadBrd_ParseString_243
   \   00001596   0x7DE0             LDRB     R0,[R4, #+23]
   \   00001598   0x282E             CMP      R0,#+46
   \   0000159A   0xD102             BNE.N    ??RoadBrd_ParseString_243
   \   0000159C   0x7EA0             LDRB     R0,[R4, #+26]
   \   0000159E   0x282E             CMP      R0,#+46
   \   000015A0   0xD005             BEQ.N    ??RoadBrd_ParseString_244
   1728                                  {
   1729                                    strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: Not correct format. Punctuation!\r\n");
   \                     ??RoadBrd_ParseString_243: (+1)
   \   000015A2   0xF8DF 0x1E00      LDR.W    R1,??RoadBrd_ParseString_245
   \   000015A6   0xA80A             ADD      R0,SP,#+40
   \   000015A8   0x.... 0x....      BL       strcpy
   \   000015AC   0xE0FA             B.N      ??RoadBrd_ParseString_239
   1730                                  }
   1731                                  else
   1732                                  {
   1733                                    // Syntax correct. Time to grab parameters.
   1734                                    Error = 0;
   \                     ??RoadBrd_ParseString_244: (+1)
   \   000015AE   0x2000             MOVS     R0,#+0
   \   000015B0   0x9035             STR      R0,[SP, #+212]
   1735                                    for (x=0; x<9; x++)
   \   000015B2   0x2000             MOVS     R0,#+0
   \   000015B4   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_246: (+1)
   \   000015B6   0x2F09             CMP      R7,#+9
   \   000015B8   0xDA26             BGE.N    ??RoadBrd_ParseString_247
   1736                                    {
   1737                                      tempBffr3[0] = tempBffr[3+x*3];
   \   000015BA   0x2003             MOVS     R0,#+3
   \   000015BC   0xFB00 0xF007      MUL      R0,R0,R7
   \   000015C0   0x4420             ADD      R0,R4,R0
   \   000015C2   0xF990 0x0003      LDRSB    R0,[R0, #+3]
   \   000015C6   0xF88D 0x00A8      STRB     R0,[SP, #+168]
   1738                                      tempBffr3[1] = tempBffr[4+x*3];
   \   000015CA   0x2003             MOVS     R0,#+3
   \   000015CC   0xFB00 0xF007      MUL      R0,R0,R7
   \   000015D0   0x4420             ADD      R0,R4,R0
   \   000015D2   0xF990 0x0004      LDRSB    R0,[R0, #+4]
   \   000015D6   0xF88D 0x00A9      STRB     R0,[SP, #+169]
   1739                                      tempBffr3[2] = 0x00;
   \   000015DA   0x2000             MOVS     R0,#+0
   \   000015DC   0xF88D 0x00AA      STRB     R0,[SP, #+170]
   1740                                      if (isHexNum( (char *)tempBffr3 ) == 0)
   \   000015E0   0xA82A             ADD      R0,SP,#+168
   \   000015E2   0x.... 0x....      BL       isHexNum
   \   000015E6   0x2800             CMP      R0,#+0
   \   000015E8   0xD107             BNE.N    ??RoadBrd_ParseString_248
   1741                                      {
   1742                                        strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR:Parameters not HEX Value.\r\n");
   \   000015EA   0xF8DF 0x1DBC      LDR.W    R1,??RoadBrd_ParseString_245+0x4
   \   000015EE   0xA80A             ADD      R0,SP,#+40
   \   000015F0   0x.... 0x....      BL       strcpy
   1743                                        Error = 1;
   \   000015F4   0x2001             MOVS     R0,#+1
   \   000015F6   0x9035             STR      R0,[SP, #+212]
   1744                                        break;
   \   000015F8   0xE006             B.N      ??RoadBrd_ParseString_247
   1745                                      }
   1746                                      else
   1747                                      {
   1748                                        i2cData[x] =  hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_248: (+1)
   \   000015FA   0xA82A             ADD      R0,SP,#+168
   \   000015FC   0x.... 0x....      BL       hatoi
   \   00001600   0xA999             ADD      R1,SP,#+612
   \   00001602   0x55C8             STRB     R0,[R1, R7]
   1749                                      } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)
   1750                                    } //EndFor (x=0; x<num_bytes; x++)
   \   00001604   0x1C7F             ADDS     R7,R7,#+1
   \   00001606   0xE7D6             B.N      ??RoadBrd_ParseString_246
   1751                                    // Format and parameters now in i2cData array. Pull them out and validate them.
   1752                                    // OP_MODE Verify.
   1753                                    if(i2cData[0]>7)
   \                     ??RoadBrd_ParseString_247: (+1)
   \   00001608   0xF89D 0x0264      LDRB     R0,[SP, #+612]
   \   0000160C   0x2808             CMP      R0,#+8
   \   0000160E   0xDB05             BLT.N    ??RoadBrd_ParseString_249
   1754                                    {
   1755                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: OP_MODE.\r\n");
   \   00001610   0xF8DF 0x1D98      LDR.W    R1,??RoadBrd_ParseString_245+0x8
   \   00001614   0xA80A             ADD      R0,SP,#+40
   \   00001616   0x.... 0x....      BL       strcpy
   1756                                      break;
   \   0000161A   0xE1B7             B.N      ??RoadBrd_ParseString_230
   1757                                    }
   1758                                    else
   1759                                      op_mode = (i2cData[0] & 0x07) * 1;
   \                     ??RoadBrd_ParseString_249: (+1)
   \   0000161C   0xF89D 0x0264      LDRB     R0,[SP, #+612]
   \   00001620   0xF010 0x0007      ANDS     R0,R0,#0x7
   \   00001624   0xF88D 0x00CD      STRB     R0,[SP, #+205]
   1760                                    // DS_RANGE Verify.
   1761                                    if(i2cData[1]>1)
   \   00001628   0xF89D 0x0265      LDRB     R0,[SP, #+613]
   \   0000162C   0x2802             CMP      R0,#+2
   \   0000162E   0xDB05             BLT.N    ??RoadBrd_ParseString_250
   1762                                    {
   1763                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: DS_RANGE.\r\n");
   \   00001630   0xF8DF 0x1DF4      LDR.W    R1,??RoadBrd_ParseString_251
   \   00001634   0xA80A             ADD      R0,SP,#+40
   \   00001636   0x.... 0x....      BL       strcpy
   1764                                      break;
   \   0000163A   0xE1A7             B.N      ??RoadBrd_ParseString_230
   1765                                    }
   1766                                    else
   1767                                      ds_range = (i2cData[1] & 0x01) * 8;
   \                     ??RoadBrd_ParseString_250: (+1)
   \   0000163C   0xF89D 0x0265      LDRB     R0,[SP, #+613]
   \   00001640   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00001644   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001646   0x00C0             LSLS     R0,R0,#+3
   \   00001648   0xF88D 0x00CC      STRB     R0,[SP, #+204]
   1768                                    // ADC_RSL Verify.
   1769                                    if(i2cData[2]>1)
   \   0000164C   0xF89D 0x0266      LDRB     R0,[SP, #+614]
   \   00001650   0x2802             CMP      R0,#+2
   \   00001652   0xDB05             BLT.N    ??RoadBrd_ParseString_252
   1770                                    {
   1771                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: ADC_RSL.\r\n");
   \   00001654   0xF8DF 0x1DD4      LDR.W    R1,??RoadBrd_ParseString_251+0x4
   \   00001658   0xA80A             ADD      R0,SP,#+40
   \   0000165A   0x.... 0x....      BL       strcpy
   1772                                      break;
   \   0000165E   0xE195             B.N      ??RoadBrd_ParseString_230
   1773                                    }
   1774                                    else
   1775                                      adc_rsl = (i2cData[2] & 0x01) * 16;
   \                     ??RoadBrd_ParseString_252: (+1)
   \   00001660   0xF89D 0x0266      LDRB     R0,[SP, #+614]
   \   00001664   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00001668   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000166A   0x0100             LSLS     R0,R0,#+4
   \   0000166C   0xF88D 0x00CB      STRB     R0,[SP, #+203]
   1776                                    // SYNC Verify.
   1777                                    if(i2cData[3]>1)
   \   00001670   0xF89D 0x0267      LDRB     R0,[SP, #+615]
   \   00001674   0x2802             CMP      R0,#+2
   \   00001676   0xDB05             BLT.N    ??RoadBrd_ParseString_253
   1778                                    {
   1779                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: SYNC.\r\n");
   \   00001678   0xF8DF 0x1DB4      LDR.W    R1,??RoadBrd_ParseString_251+0x8
   \   0000167C   0xA80A             ADD      R0,SP,#+40
   \   0000167E   0x.... 0x....      BL       strcpy
   1780                                      break;
   \   00001682   0xE183             B.N      ??RoadBrd_ParseString_230
   1781                                    }
   1782                                    else
   1783                                      sync = (i2cData[3] & 0x01) * 32;
   \                     ??RoadBrd_ParseString_253: (+1)
   \   00001684   0xF89D 0x0267      LDRB     R0,[SP, #+615]
   \   00001688   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   0000168C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000168E   0x0140             LSLS     R0,R0,#+5
   \   00001690   0xF88D 0x00CA      STRB     R0,[SP, #+202]
   1784                                    // CMP_ADJST Verify.
   1785                                    if(i2cData[4]>63)
   \   00001694   0xF89D 0x0268      LDRB     R0,[SP, #+616]
   \   00001698   0x2840             CMP      R0,#+64
   \   0000169A   0xDB0B             BLT.N    ??RoadBrd_ParseString_254
   1786                                    {
   1787                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: CMP_ADJST.\r\n");
   \   0000169C   0xF8DF 0x1E0C      LDR.W    R1,??RoadBrd_ParseString_255
   \   000016A0   0xA80A             ADD      R0,SP,#+40
   \   000016A2   0x.... 0x....      BL       strcpy
   1788                                      break;
   \   000016A6   0xE171             B.N      ??RoadBrd_ParseString_230
   \                     ??RoadBrd_ParseString_103:
   \   000016A8   0x........         DC32     ?_44
   \   000016AC   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
   \   000016B0   0x........         DC32     ?_45
   1789                                    }
   1790                                    else
   1791                                      cmp_adjst = (i2cData[4] & 0x3f) * 1;
   \                     ??RoadBrd_ParseString_254: (+1)
   \   000016B4   0xF89D 0x0268      LDRB     R0,[SP, #+616]
   \   000016B8   0xF010 0x003F      ANDS     R0,R0,#0x3F
   \   000016BC   0xF88D 0x00C9      STRB     R0,[SP, #+201]
   1792                                    // CMP_OFFST Verify.
   1793                                    if(i2cData[5]>1)
   \   000016C0   0xF89D 0x0269      LDRB     R0,[SP, #+617]
   \   000016C4   0x2802             CMP      R0,#+2
   \   000016C6   0xDB05             BLT.N    ??RoadBrd_ParseString_256
   1794                                    {
   1795                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: CMP_OFFST.\r\n");
   \   000016C8   0xF8DF 0x1DE4      LDR.W    R1,??RoadBrd_ParseString_255+0x4
   \   000016CC   0xA80A             ADD      R0,SP,#+40
   \   000016CE   0x.... 0x....      BL       strcpy
   1796                                      break;
   \   000016D2   0xE15B             B.N      ??RoadBrd_ParseString_230
   1797                                    }
   1798                                    else
   1799                                      cmp_offst = (i2cData[5] & 0x01) * 128;
   \                     ??RoadBrd_ParseString_256: (+1)
   \   000016D4   0xF89D 0x0269      LDRB     R0,[SP, #+617]
   \   000016D8   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   000016DC   0x2180             MOVS     R1,#+128
   \   000016DE   0x4348             MULS     R0,R1,R0
   \   000016E0   0xF88D 0x00C8      STRB     R0,[SP, #+200]
   1800                                    // INT_ASSGN Verify.
   1801                                    if(i2cData[6]>3)
   \   000016E4   0xF89D 0x026A      LDRB     R0,[SP, #+618]
   \   000016E8   0x2804             CMP      R0,#+4
   \   000016EA   0xDB05             BLT.N    ??RoadBrd_ParseString_257
   1802                                    {
   1803                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: INT_ASSGN.\r\n");
   \   000016EC   0xF8DF 0x1DC4      LDR.W    R1,??RoadBrd_ParseString_255+0x8
   \   000016F0   0xA80A             ADD      R0,SP,#+40
   \   000016F2   0x.... 0x....      BL       strcpy
   1804                                      break;
   \   000016F6   0xE149             B.N      ??RoadBrd_ParseString_230
   1805                                    }
   1806                                    else
   1807                                      int_assgn = (i2cData[6] & 0x03) * 1;
   \                     ??RoadBrd_ParseString_257: (+1)
   \   000016F8   0xF89D 0x026A      LDRB     R0,[SP, #+618]
   \   000016FC   0xF010 0x0003      ANDS     R0,R0,#0x3
   \   00001700   0xF88D 0x00B7      STRB     R0,[SP, #+183]
   1808                                    // INT_PERSIST Verify.
   1809                                    if(i2cData[7]>3)
   \   00001704   0xF89D 0x026B      LDRB     R0,[SP, #+619]
   \   00001708   0x2804             CMP      R0,#+4
   \   0000170A   0xDB07             BLT.N    ??RoadBrd_ParseString_258
   1810                                    {
   1811                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: INT_PERSIST.\r\n");
   \   0000170C   0xF8DF 0x1E20      LDR.W    R1,??RoadBrd_ParseString_259
   \   00001710   0xA80A             ADD      R0,SP,#+40
   \   00001712   0x.... 0x....      BL       strcpy
   1812                                      break;
   \   00001716   0xE139             B.N      ??RoadBrd_ParseString_230
   \                     ??RoadBrd_ParseString_111:
   \   00001718   0x........         DC32     ?_46
   1813                                    }
   1814                                    else
   1815                                      int_persist = (i2cData[7] & 0x03) * 4;
   \                     ??RoadBrd_ParseString_258: (+1)
   \   0000171C   0xF89D 0x026B      LDRB     R0,[SP, #+619]
   \   00001720   0xF010 0x0003      ANDS     R0,R0,#0x3
   \   00001724   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001726   0x0080             LSLS     R0,R0,#+2
   \   00001728   0xF88D 0x00B6      STRB     R0,[SP, #+182]
   1816                                    // CNVRSN_INT Verify.
   1817                                    if(i2cData[8]>1)
   \   0000172C   0xF89D 0x026C      LDRB     R0,[SP, #+620]
   \   00001730   0x2802             CMP      R0,#+2
   \   00001732   0xDB05             BLT.N    ??RoadBrd_ParseString_260
   1818                                    {
   1819                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor SYNTAX ERROR: BAD PARAM: CNVRSN_INT.\r\n");
   \   00001734   0xF8DF 0x1DFC      LDR.W    R1,??RoadBrd_ParseString_259+0x4
   \   00001738   0xA80A             ADD      R0,SP,#+40
   \   0000173A   0x.... 0x....      BL       strcpy
   1820                                      break;
   \   0000173E   0xE125             B.N      ??RoadBrd_ParseString_230
   1821                                    }
   1822                                    else
   1823                                      cnvrsn_int = (i2cData[8] & 0x01) * 16;
   \                     ??RoadBrd_ParseString_260: (+1)
   \   00001740   0xF89D 0x026C      LDRB     R0,[SP, #+620]
   \   00001744   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00001748   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000174A   0x0100             LSLS     R0,R0,#+4
   \   0000174C   0xF88D 0x00B5      STRB     R0,[SP, #+181]
   1824                                    // OK, all parameters have been verified. Time to build final params.
   1825                                    RGBMeasure.config1 = op_mode + ds_range + adc_rsl + sync;
   \   00001750   0xF89D 0x00CD      LDRB     R0,[SP, #+205]
   \   00001754   0xF89D 0x10CC      LDRB     R1,[SP, #+204]
   \   00001758   0x1808             ADDS     R0,R1,R0
   \   0000175A   0xF89D 0x10CB      LDRB     R1,[SP, #+203]
   \   0000175E   0x1808             ADDS     R0,R1,R0
   \   00001760   0xF89D 0x10CA      LDRB     R1,[SP, #+202]
   \   00001764   0x1808             ADDS     R0,R1,R0
   \   00001766   0xF88D 0x00EC      STRB     R0,[SP, #+236]
   1826                                    RGBMeasure.config2 = cmp_adjst + cmp_offst;
   \   0000176A   0xF89D 0x00C9      LDRB     R0,[SP, #+201]
   \   0000176E   0xF89D 0x10C8      LDRB     R1,[SP, #+200]
   \   00001772   0x1808             ADDS     R0,R1,R0
   \   00001774   0xF88D 0x00ED      STRB     R0,[SP, #+237]
   1827                                    RGBMeasure.config3 = int_assgn + int_persist + cnvrsn_int;
   \   00001778   0xF89D 0x00B7      LDRB     R0,[SP, #+183]
   \   0000177C   0xF89D 0x10B6      LDRB     R1,[SP, #+182]
   \   00001780   0x1808             ADDS     R0,R1,R0
   \   00001782   0xF89D 0x10B5      LDRB     R1,[SP, #+181]
   \   00001786   0x1808             ADDS     R0,R1,R0
   \   00001788   0xF88D 0x00EE      STRB     R0,[SP, #+238]
   1828                                    // Load Config Register with Config Settings
   1829                                    Status = RoadBrd_RGBFullInit( &RGBMeasure );
   \   0000178C   0xA83B             ADD      R0,SP,#+236
   \   0000178E   0x.... 0x....      BL       RoadBrd_RGBFullInit
   \   00001792   0x0006             MOVS     R6,R0
   1830          
   1831                                    if (Status == HAL_OK)
   \   00001794   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001796   0x2E00             CMP      R6,#+0
   \   00001798   0xD104             BNE.N    ??RoadBrd_ParseString_239
   1832                                    {
   1833                                      strcpy( (char *)tempBffr2, "RGB Color Light Sensor: Initialization Complete with USER Values.\r\n");;
   \   0000179A   0xF8DF 0x1D9C      LDR.W    R1,??RoadBrd_ParseString_259+0x8
   \   0000179E   0xA80A             ADD      R0,SP,#+40
   \   000017A0   0x.... 0x....      BL       strcpy
   1834                                    }
   1835                                  } //ElseIf Validate format.
   1836                                } //ElseIf ( Size != 29 )
   1837                              } //ElseIf (Size == 2)
   1838                              break;
   \                     ??RoadBrd_ParseString_239: (+1)
   \   000017A4   0xE0F2             B.N      ??RoadBrd_ParseString_230
   1839          //------------------ H0 Command...Read RGB Values and Return as 3 (2 Byte Fields)....REDmsb,REDlsb,GREENmsb,GREENlsb,BLUEmsb,BLUElsb.....     
   1840                            case '0':
   1841                              // 1. Time to send Command and collect status.
   1842                              Status = RoadBrd_RGBReadValues( &RGBValues );
   \                     ??RoadBrd_ParseString_231: (+1)
   \   000017A6   0xA8B4             ADD      R0,SP,#+720
   \   000017A8   0x.... 0x....      BL       RoadBrd_RGBReadValues
   \   000017AC   0x0006             MOVS     R6,R0
   1843                              // Is this a BLE Operation?
   1844                              if ( BLE_Flag )
   \   000017AE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000017B0   0x2D00             CMP      R5,#+0
   \   000017B2   0xD00A             BEQ.N    ??RoadBrd_ParseString_261
   1845                              {
   1846                                // Yes...Build and Send BLE Response NOW.
   1847                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000017B4   0xF8DF 0x1838      LDR.W    R1,??RoadBrd_ParseString_210
   \   000017B8   0xA80A             ADD      R0,SP,#+40
   \   000017BA   0x.... 0x....      BL       strcpy
   1848                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000017BE   0xA80A             ADD      R0,SP,#+40
   \   000017C0   0x.... 0x....      BL       strlen
   \   000017C4   0xA90A             ADD      R1,SP,#+40
   \   000017C6   0x.... 0x....      BL       BGM111_Transmit
   1849                              }
   1850                              
   1851                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_261: (+1)
   \   000017CA   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000017CC   0x2E00             CMP      R6,#+0
   \   000017CE   0xD15A             BNE.N    ??RoadBrd_ParseString_262
   1852                              {
   1853                                // Send string to UART..
   1854                                strcpy( (char *)tempBffr2, "RGB Color Light Sensor...\r\n");
   \   000017D0   0xF8DF 0x19FC      LDR.W    R1,??RoadBrd_ParseString_224
   \   000017D4   0xA80A             ADD      R0,SP,#+40
   \   000017D6   0x.... 0x....      BL       strcpy
   1855          #ifdef NUCLEO
   1856                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1857          #else
   1858                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000017DA   0xA90A             ADD      R1,SP,#+40
   \   000017DC   0x2000             MOVS     R0,#+0
   \   000017DE   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000017E2   0x0006             MOVS     R6,R0
   1859          #endif
   1860                                if (Status != HAL_OK)
   \   000017E4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000017E6   0x2E00             CMP      R6,#+0
   \   000017E8   0xD003             BEQ.N    ??RoadBrd_ParseString_263
   1861                                  return Status;
   \   000017EA   0x0030             MOVS     R0,R6
   \   000017EC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000017EE   0xF003 0xB816      B.W      ??RoadBrd_ParseString_4
   1862                                // NOW, Build Data String..
   1863                                sprintf( (char *)tempBffr2, " RGB(REDmsb,REDlsb,GREENmsb,GREENlsb,BLUEmsb,BLUElsb)\r\n" );
   \                     ??RoadBrd_ParseString_263: (+1)
   \   000017F2   0xF8DF 0x1A2C      LDR.W    R1,??RoadBrd_ParseString_226
   \   000017F6   0xA80A             ADD      R0,SP,#+40
   \   000017F8   0x.... 0x....      BL       sprintf
   1864          #ifdef NUCLEO
   1865                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1866          #else
   1867                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000017FC   0xA90A             ADD      R1,SP,#+40
   \   000017FE   0x2000             MOVS     R0,#+0
   \   00001800   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001804   0x0006             MOVS     R6,R0
   1868          #endif
   1869                                if (Status != HAL_OK)
   \   00001806   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001808   0x2E00             CMP      R6,#+0
   \   0000180A   0xD003             BEQ.N    ??RoadBrd_ParseString_264
   1870                                  return Status;
   \   0000180C   0x0030             MOVS     R0,R6
   \   0000180E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001810   0xF003 0xB805      B.W      ??RoadBrd_ParseString_4
   1871                                strcpy( (char *)tempBffr2, "       DATA: ");
   \                     ??RoadBrd_ParseString_264: (+1)
   \   00001814   0xF8DF 0x1A0C      LDR.W    R1,??RoadBrd_ParseString_226+0x4
   \   00001818   0xA80A             ADD      R0,SP,#+40
   \   0000181A   0x.... 0x....      BL       strcpy
   1872                                strcat( (char *)tempBffr2, (char *)RGBValues.Raw );
   \   0000181E   0xA9BA             ADD      R1,SP,#+744
   \   00001820   0xA80A             ADD      R0,SP,#+40
   \   00001822   0x.... 0x....      BL       strcat
   1873                                strcat( (char *)tempBffr2, "\r\n" );
   \   00001826   0xA1D6             ADR.N    R1,??RoadBrd_ParseString_163  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001828   0xA80A             ADD      R0,SP,#+40
   \   0000182A   0x.... 0x....      BL       strcat
   1874          #ifdef NUCLEO
   1875                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   1876          #else
   1877                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   0000182E   0xA90A             ADD      R1,SP,#+40
   \   00001830   0x2000             MOVS     R0,#+0
   \   00001832   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001836   0x0006             MOVS     R6,R0
   1878          #endif
   1879                                if (Status != HAL_OK)
   \   00001838   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000183A   0x2E00             CMP      R6,#+0
   \   0000183C   0xD003             BEQ.N    ??RoadBrd_ParseString_265
   1880                                  return Status;
   \   0000183E   0x0030             MOVS     R0,R6
   \   00001840   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001842   0xF002 0xBFEC      B.W      ??RoadBrd_ParseString_4
   1881                                // Now DisplayEach Value Calculated.
   1882                                strcpy( (char *)tempBffr2, "    Red: ");
   \                     ??RoadBrd_ParseString_265: (+1)
   \   00001846   0xF8DF 0x19E0      LDR.W    R1,??RoadBrd_ParseString_226+0x8
   \   0000184A   0xA80A             ADD      R0,SP,#+40
   \   0000184C   0x.... 0x....      BL       strcpy
   1883                                strcat( (char *)tempBffr2, (char *)RGBValues.Red );
   \   00001850   0xA9B4             ADD      R1,SP,#+720
   \   00001852   0xA80A             ADD      R0,SP,#+40
   \   00001854   0x.... 0x....      BL       strcat
   1884                                strcat( (char *)tempBffr2, "    Green: ");
   \   00001858   0xF8DF 0x1A20      LDR.W    R1,??RoadBrd_ParseString_229
   \   0000185C   0xA80A             ADD      R0,SP,#+40
   \   0000185E   0x.... 0x....      BL       strcat
   1885                                strcat( (char *)tempBffr2, (char *)RGBValues.Green );
   \   00001862   0xA9B6             ADD      R1,SP,#+728
   \   00001864   0xA80A             ADD      R0,SP,#+40
   \   00001866   0x.... 0x....      BL       strcat
   1886                                strcat( (char *)tempBffr2, "    Blue: ");
   \   0000186A   0xF8DF 0x1A14      LDR.W    R1,??RoadBrd_ParseString_229+0x4
   \   0000186E   0xA80A             ADD      R0,SP,#+40
   \   00001870   0x.... 0x....      BL       strcat
   1887                                strcat( (char *)tempBffr2, (char *)RGBValues.Blue );
   \   00001874   0xA9B8             ADD      R1,SP,#+736
   \   00001876   0xA80A             ADD      R0,SP,#+40
   \   00001878   0x.... 0x....      BL       strcat
   1888                                strcat( (char *)tempBffr2, "\r\n" );
   \   0000187C   0xA1C0             ADR.N    R1,??RoadBrd_ParseString_163  ;; 0x0D, 0x0A, 0x00, 0x00
   \   0000187E   0xA80A             ADD      R0,SP,#+40
   \   00001880   0x.... 0x....      BL       strcat
   1889                              }
   1890                              else
   1891                                break;
   1892                              break;
   \   00001884   0xE082             B.N      ??RoadBrd_ParseString_230
   \                     ??RoadBrd_ParseString_262: (+1)
   \   00001886   0xE081             B.N      ??RoadBrd_ParseString_230
   1893          //------------------ H1 Command...Read Status.....     
   1894                            case '1':
   1895                              // 1. Time to send Command and collect status.  RGBSMeasure
   1896                              Status = RoadBrd_RGBReadStatus( &RGBSMeasure );
   \                     ??RoadBrd_ParseString_232: (+1)
   \   00001888   0xA84D             ADD      R0,SP,#+308
   \   0000188A   0x.... 0x....      BL       RoadBrd_RGBReadStatus
   \   0000188E   0x0006             MOVS     R6,R0
   1897          
   1898                              // Is this a BLE Operation?
   1899                              if ( BLE_Flag )
   \   00001890   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001892   0x2D00             CMP      R5,#+0
   \   00001894   0xD00A             BEQ.N    ??RoadBrd_ParseString_266
   1900                              {
   1901                                // Yes...Build and Send BLE Response NOW.
   1902                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001896   0xF8DF 0x1758      LDR.W    R1,??RoadBrd_ParseString_210
   \   0000189A   0xA80A             ADD      R0,SP,#+40
   \   0000189C   0x.... 0x....      BL       strcpy
   1903                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000018A0   0xA80A             ADD      R0,SP,#+40
   \   000018A2   0x.... 0x....      BL       strlen
   \   000018A6   0xA90A             ADD      R1,SP,#+40
   \   000018A8   0x.... 0x....      BL       BGM111_Transmit
   1904                              }
   1905                              
   1906                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_266: (+1)
   \   000018AC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000018AE   0x2E00             CMP      R6,#+0
   \   000018B0   0xD119             BNE.N    ??RoadBrd_ParseString_267
   1907                              {
   1908                                // Build Status
   1909                                strcpy( (char *)tempBffr2, "RGB Color Light Sensor Status: ");
   \   000018B2   0xF8DF 0x1DE4      LDR.W    R1,??RoadBrd_ParseString_268
   \   000018B6   0xA80A             ADD      R0,SP,#+40
   \   000018B8   0x.... 0x....      BL       strcpy
   1910                                sprintf( (char *)tempBffr3, "%02x / ", RGBSMeasure.status);
   \   000018BC   0xF89D 0x2134      LDRB     R2,[SP, #+308]
   \   000018C0   0xF8DF 0x1DD8      LDR.W    R1,??RoadBrd_ParseString_268+0x4
   \   000018C4   0xA82A             ADD      R0,SP,#+168
   \   000018C6   0x.... 0x....      BL       sprintf
   1911                                strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   000018CA   0xA92A             ADD      R1,SP,#+168
   \   000018CC   0xA80A             ADD      R0,SP,#+40
   \   000018CE   0x.... 0x....      BL       strcat
   1912                                strcat( (char *)tempBffr2, (char *)RGBSMeasure.Raw );
   \   000018D2   0xA94D             ADD      R1,SP,#+308
   \   000018D4   0x1C49             ADDS     R1,R1,#+1
   \   000018D6   0xA80A             ADD      R0,SP,#+40
   \   000018D8   0x.... 0x....      BL       strcat
   1913                                strcat( (char *)tempBffr2, "\r\n" );
   \   000018DC   0xA1A8             ADR.N    R1,??RoadBrd_ParseString_163  ;; 0x0D, 0x0A, 0x00, 0x00
   \   000018DE   0xA80A             ADD      R0,SP,#+40
   \   000018E0   0x.... 0x....      BL       strcat
   1914                              }
   1915                              else
   1916                                break;
   1917                              break;
   \   000018E4   0xE052             B.N      ??RoadBrd_ParseString_230
   \                     ??RoadBrd_ParseString_267: (+1)
   \   000018E6   0xE051             B.N      ??RoadBrd_ParseString_230
   1918          //------------------ H2 Command...Reset Hardware......     
   1919                            case '2':
   1920                              Status = RoadBrd_RGBReset();
   \                     ??RoadBrd_ParseString_233: (+1)
   \   000018E8   0x.... 0x....      BL       RoadBrd_RGBReset
   \   000018EC   0x0006             MOVS     R6,R0
   1921                              // Is this a BLE Operation?
   1922                              if ( BLE_Flag )
   \   000018EE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000018F0   0x2D00             CMP      R5,#+0
   \   000018F2   0xD00A             BEQ.N    ??RoadBrd_ParseString_269
   1923                              {
   1924                                // Yes...Build and Send BLE Response NOW.
   1925                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000018F4   0xF8DF 0x16F8      LDR.W    R1,??RoadBrd_ParseString_210
   \   000018F8   0xA80A             ADD      R0,SP,#+40
   \   000018FA   0x.... 0x....      BL       strcpy
   1926                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000018FE   0xA80A             ADD      R0,SP,#+40
   \   00001900   0x.... 0x....      BL       strlen
   \   00001904   0xA90A             ADD      R1,SP,#+40
   \   00001906   0x.... 0x....      BL       BGM111_Transmit
   1927                              }
   1928                              
   1929                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_269: (+1)
   \   0000190A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000190C   0x2E00             CMP      R6,#+0
   \   0000190E   0xD105             BNE.N    ??RoadBrd_ParseString_270
   1930                              {
   1931                                // Build Status
   1932                                strcpy( (char *)tempBffr2, "RGB Color Light Sensor: RESET CMD Sent Succesful.\r\n" );
   \   00001910   0xF8DF 0x1E00      LDR.W    R1,??RoadBrd_ParseString_271
   \   00001914   0xA80A             ADD      R0,SP,#+40
   \   00001916   0x.... 0x....      BL       strcpy
   1933                              }
   1934                              else
   1935                                break;
   1936                              break;
   \   0000191A   0xE037             B.N      ??RoadBrd_ParseString_230
   \                     ??RoadBrd_ParseString_270: (+1)
   \   0000191C   0xE036             B.N      ??RoadBrd_ParseString_230
   1937          //------------------ H3 Command...Read ID.....     
   1938                            case '3':
   1939                              // 1. Time to send Command and collect status.  IDMeasure
   1940                              Status = RoadBrd_RGBReadID( &IDMeasure );
   \                     ??RoadBrd_ParseString_234: (+1)
   \   0000191E   0xA84F             ADD      R0,SP,#+316
   \   00001920   0x.... 0x....      BL       RoadBrd_RGBReadID
   \   00001924   0x0006             MOVS     R6,R0
   1941                              // Is this a BLE Operation?
   1942                              if ( BLE_Flag )
   \   00001926   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001928   0x2D00             CMP      R5,#+0
   \   0000192A   0xD00A             BEQ.N    ??RoadBrd_ParseString_272
   1943                              {
   1944                                // Yes...Build and Send BLE Response NOW.
   1945                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   0000192C   0xF8DF 0x16C0      LDR.W    R1,??RoadBrd_ParseString_210
   \   00001930   0xA80A             ADD      R0,SP,#+40
   \   00001932   0x.... 0x....      BL       strcpy
   1946                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001936   0xA80A             ADD      R0,SP,#+40
   \   00001938   0x.... 0x....      BL       strlen
   \   0000193C   0xA90A             ADD      R1,SP,#+40
   \   0000193E   0x.... 0x....      BL       BGM111_Transmit
   1947                              }
   1948                              
   1949                              if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_272: (+1)
   \   00001942   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001944   0x2E00             CMP      R6,#+0
   \   00001946   0xD11B             BNE.N    ??RoadBrd_ParseString_273
   1950                              {
   1951                                // Build Status
   1952                                strcpy( (char *)tempBffr2, "RGB Color Light Sensor ID Code: ");
   \   00001948   0xF8DF 0x1DCC      LDR.W    R1,??RoadBrd_ParseString_271+0x4
   \   0000194C   0xA80A             ADD      R0,SP,#+40
   \   0000194E   0x.... 0x....      BL       strcpy
   1953                                sprintf( (char *)tempBffr3, "%02x / ", IDMeasure.id);
   \   00001952   0xF89D 0x213C      LDRB     R2,[SP, #+316]
   \   00001956   0xF8DF 0x1D44      LDR.W    R1,??RoadBrd_ParseString_268+0x4
   \   0000195A   0xA82A             ADD      R0,SP,#+168
   \   0000195C   0x.... 0x....      BL       sprintf
   1954                                strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   00001960   0xA92A             ADD      R1,SP,#+168
   \   00001962   0xA80A             ADD      R0,SP,#+40
   \   00001964   0x.... 0x....      BL       strcat
   1955                                strcat( (char *)tempBffr2, (char *)IDMeasure.Raw );
   \   00001968   0xA94F             ADD      R1,SP,#+316
   \   0000196A   0x1C49             ADDS     R1,R1,#+1
   \   0000196C   0xA80A             ADD      R0,SP,#+40
   \   0000196E   0x.... 0x....      BL       strcat
   1956                                strcat( (char *)tempBffr2, "\r\n" );
   \   00001972   0xA183             ADR.N    R1,??RoadBrd_ParseString_163  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001974   0xA80A             ADD      R0,SP,#+40
   \   00001976   0x.... 0x....      BL       strcat
   1957                             }
   1958                              else
   1959                                break;
   1960                              break;
   \   0000197A   0xE007             B.N      ??RoadBrd_ParseString_230
   \                     ??RoadBrd_ParseString_133:
   \   0000197C   0x........         DC32     ?_47
   \                     ??RoadBrd_ParseString_273: (+1)
   \   00001980   0xE004             B.N      ??RoadBrd_ParseString_230
   1961                            default:
   1962                              strcpy( (char *)tempBffr2, "ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_235: (+1)
   \   00001982   0xF8DF 0x1E0C      LDR.W    R1,??RoadBrd_ParseString_274
   \   00001986   0xA80A             ADD      R0,SP,#+40
   \   00001988   0x.... 0x....      BL       strcpy
   1963                              break;
   1964                          } //EndSwitch
   1965                        } //EndElse (Size == 1)
   1966                        break;    
   \                     ??RoadBrd_ParseString_230: (+1)
   \   0000198C   0xF002 0xBECE      B.W      ??RoadBrd_ParseString_27
   1967          //**************************************************************************************************
   1968                      case 'P':
   1969                        // POWER SYSTEM. 
   1970                        switch( tempBffr[1] )
   \                     ??RoadBrd_ParseString_20: (+1)
   \   00001990   0x7860             LDRB     R0,[R4, #+1]
   \   00001992   0x2844             CMP      R0,#+68
   \   00001994   0xD018             BEQ.N    ??RoadBrd_ParseString_275
   \   00001996   0x2855             CMP      R0,#+85
   \   00001998   0xD11F             BNE.N    ??RoadBrd_ParseString_276
   1971                        {
   1972          //++++++++++++++++++++++++++++++++++++++++++  5V Power Supply Commands.
   1973                          case 'U':
   1974                            // Turn on 5V Power Supply.
   1975                            RoadBrd_gpio_On( gTAM_PWR );
   \                     ??RoadBrd_ParseString_277: (+1)
   \   0000199A   0x2004             MOVS     R0,#+4
   \   0000199C   0x.... 0x....      BL       RoadBrd_gpio_On
   1976                            // Is this a BLE Operation?
   1977                            if ( BLE_Flag )
   \   000019A0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000019A2   0x2D00             CMP      R5,#+0
   \   000019A4   0xD00A             BEQ.N    ??RoadBrd_ParseString_278
   1978                            {
   1979                              // Yes...Build and Send BLE Response NOW.
   1980                              strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000019A6   0xF8DF 0x1648      LDR.W    R1,??RoadBrd_ParseString_210
   \   000019AA   0xA80A             ADD      R0,SP,#+40
   \   000019AC   0x.... 0x....      BL       strcpy
   1981                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000019B0   0xA80A             ADD      R0,SP,#+40
   \   000019B2   0x.... 0x....      BL       strlen
   \   000019B6   0xA90A             ADD      R1,SP,#+40
   \   000019B8   0x.... 0x....      BL       BGM111_Transmit
   1982                            }
   1983                            
   1984                            strcpy( (char *)tempBffr2, "5V Power Plane Powered UP.\r\n");
   \                     ??RoadBrd_ParseString_278: (+1)
   \   000019BC   0xF8DF 0x1DD4      LDR.W    R1,??RoadBrd_ParseString_274+0x4
   \   000019C0   0xA80A             ADD      R0,SP,#+40
   \   000019C2   0x.... 0x....      BL       strcpy
   1985                            break;
   \   000019C6   0xE00D             B.N      ??RoadBrd_ParseString_279
   1986                          case 'D':
   1987                            // Turn off 5V Power Supply.
   1988                            RoadBrd_gpio_Off( gTAM_PWR );
   \                     ??RoadBrd_ParseString_275: (+1)
   \   000019C8   0x2004             MOVS     R0,#+4
   \   000019CA   0x.... 0x....      BL       RoadBrd_gpio_Off
   1989                            strcpy( (char *)tempBffr2, "5V Power Plane Powered DOWN.\r\n");
   \   000019CE   0xF8DF 0x1DC8      LDR.W    R1,??RoadBrd_ParseString_274+0x8
   \   000019D2   0xA80A             ADD      R0,SP,#+40
   \   000019D4   0x.... 0x....      BL       strcpy
   1990                            break;
   \   000019D8   0xE004             B.N      ??RoadBrd_ParseString_279
   1991                          default:
   1992                            strcpy( (char *)tempBffr2, "ERROR: Illegal 5V Power Plane Command.\r\n");
   \                     ??RoadBrd_ParseString_276: (+1)
   \   000019DA   0xF8DF 0x1DC0      LDR.W    R1,??RoadBrd_ParseString_274+0xC
   \   000019DE   0xA80A             ADD      R0,SP,#+40
   \   000019E0   0x.... 0x....      BL       strcpy
   1993                            break;
   1994                        }
   1995                        break;
   \                     ??RoadBrd_ParseString_279: (+1)
   \   000019E4   0xF002 0xBEA2      B.W      ??RoadBrd_ParseString_27
   \                     ??RoadBrd_ParseString_137:
   \   000019E8   0x........         DC32     ?_48
   \   000019EC   0x........         DC32     ?_49
   1996          //**************************************************************************************************
   1997                      case 'T':
   1998                        // TEST CMDS. 
   1999                        // Test Size to make sure we have enough Characters for this operation
   2000                        if (Size <= 1)
   \                     ??RoadBrd_ParseString_21: (+1)
   \   000019F0   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000019F4   0xF1B8 0x0F02      CMP      R8,#+2
   \   000019F8   0xDA16             BGE.N    ??RoadBrd_ParseString_280
   2001                        {
   2002                          // Is this a BLE Operation?
   2003                          if ( BLE_Flag )
   \   000019FA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000019FC   0x2D00             CMP      R5,#+0
   \   000019FE   0xD00A             BEQ.N    ??RoadBrd_ParseString_281
   2004                          {
   2005                            // Yes...Build and Send BLE Response NOW.
   2006                            strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001A00   0xF8DF 0x15EC      LDR.W    R1,??RoadBrd_ParseString_210
   \   00001A04   0xA80A             ADD      R0,SP,#+40
   \   00001A06   0x.... 0x....      BL       strcpy
   2007                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001A0A   0xA80A             ADD      R0,SP,#+40
   \   00001A0C   0x.... 0x....      BL       strlen
   \   00001A10   0xA90A             ADD      R1,SP,#+40
   \   00001A12   0x.... 0x....      BL       BGM111_Transmit
   2008                          }
   2009                          
   2010                          strcpy( (char *)tempBffr2, "T ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_281: (+1)
   \   00001A16   0xF8DF 0x1DFC      LDR.W    R1,??RoadBrd_ParseString_282
   \   00001A1A   0xA80A             ADD      R0,SP,#+40
   \   00001A1C   0x.... 0x....      BL       strcpy
   \   00001A20   0xF002 0xBE72      B.W      ??RoadBrd_ParseString_283
   \                     ??RoadBrd_ParseString_142:
   \   00001A24   0x........         DC32     ?_50
   2011                        }
   2012                        else
   2013                        {
   2014                          switch( tempBffr[1] )
   \                     ??RoadBrd_ParseString_280: (+1)
   \   00001A28   0x7860             LDRB     R0,[R4, #+1]
   \   00001A2A   0x2843             CMP      R0,#+67
   \   00001A2C   0xF000 0x82E8      BEQ.W    ??RoadBrd_ParseString_284
   \   00001A30   0x2844             CMP      R0,#+68
   \   00001A32   0xF002 0x820E      BEQ.W    ??RoadBrd_ParseString_285
   \   00001A36   0x2846             CMP      R0,#+70
   \   00001A38   0xF002 0x860A      BEQ.W    ??RoadBrd_ParseString_286
   \   00001A3C   0x2849             CMP      R0,#+73
   \   00001A3E   0xD010             BEQ.N    ??RoadBrd_ParseString_287
   \   00001A40   0x284B             CMP      R0,#+75
   \   00001A42   0xF002 0x8241      BEQ.W    ??RoadBrd_ParseString_288
   \   00001A46   0x284C             CMP      R0,#+76
   \   00001A48   0xF002 0x861A      BEQ.W    ??RoadBrd_ParseString_289
   \   00001A4C   0x284D             CMP      R0,#+77
   \   00001A4E   0xF002 0x85D5      BEQ.W    ??RoadBrd_ParseString_290
   \   00001A52   0x2852             CMP      R0,#+82
   \   00001A54   0xF002 0x821C      BEQ.W    ??RoadBrd_ParseString_291
   \   00001A58   0x2855             CMP      R0,#+85
   \   00001A5A   0xF002 0x8567      BEQ.W    ??RoadBrd_ParseString_292
   \   00001A5E   0xF002 0xBE42      B.W      ??RoadBrd_ParseString_293
   2015                          {
   2016          //++++++++++++++++++++++++++++++++++++++++++  I2C Commands.
   2017                            case 'I':
   2018                              // I2C Commands.
   2019                              // Test Size to make sure we have enough Characters for this operation
   2020                              if (Size < 9)
   \                     ??RoadBrd_ParseString_287: (+1)
   \   00001A62   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00001A66   0xF1B8 0x0F09      CMP      R8,#+9
   \   00001A6A   0xDA15             BGE.N    ??RoadBrd_ParseString_294
   2021                              {
   2022                                // Is this a BLE Operation?
   2023                                if ( BLE_Flag )
   \   00001A6C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001A6E   0x2D00             CMP      R5,#+0
   \   00001A70   0xD00A             BEQ.N    ??RoadBrd_ParseString_295
   2024                                {
   2025                                  // Yes...Build and Send BLE Response NOW.
   2026                                  strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001A72   0xF8DF 0x157C      LDR.W    R1,??RoadBrd_ParseString_210
   \   00001A76   0xA80A             ADD      R0,SP,#+40
   \   00001A78   0x.... 0x....      BL       strcpy
   2027                                  BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001A7C   0xA80A             ADD      R0,SP,#+40
   \   00001A7E   0x.... 0x....      BL       strlen
   \   00001A82   0xA90A             ADD      R1,SP,#+40
   \   00001A84   0x.... 0x....      BL       BGM111_Transmit
   2028                                }
   2029                                
   2030                                strcpy( (char *)tempBffr2, "TI SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_295: (+1)
   \   00001A88   0xF8DF 0x1E00      LDR.W    R1,??RoadBrd_ParseString_296
   \   00001A8C   0xA80A             ADD      R0,SP,#+40
   \   00001A8E   0x.... 0x....      BL       strcpy
   \   00001A92   0xE2AA             B.N      ??RoadBrd_ParseString_297
   \                     ??RoadBrd_ParseString_152:
   \   00001A94   0x........         DC32     ?_51
   2031                              }
   2032                              else
   2033                              {
   2034                                switch( tempBffr[2] )
   \                     ??RoadBrd_ParseString_294: (+1)
   \   00001A98   0x78A0             LDRB     R0,[R4, #+2]
   \   00001A9A   0x2851             CMP      R0,#+81
   \   00001A9C   0xF000 0x81FC      BEQ.W    ??RoadBrd_ParseString_298
   \   00001AA0   0xF0C0 0x829E      BCC.W    ??RoadBrd_ParseString_299
   \   00001AA4   0x2853             CMP      R0,#+83
   \   00001AA6   0xD002             BEQ.N    ??RoadBrd_ParseString_300
   \   00001AA8   0xF0C0 0x80CE      BCC.W    ??RoadBrd_ParseString_301
   \   00001AAC   0xE298             B.N      ??RoadBrd_ParseString_299
   2035                                {
   2036          //------------------
   2037                                  case 'S':
   2038                                    //I2C Send Command.
   2039                                    // Step 1. Validate format.
   2040                                    if( (tempBffr[3]!=':') ||
   2041                                        (tempBffr[6]!='.') )
   \                     ??RoadBrd_ParseString_300: (+1)
   \   00001AAE   0x78E0             LDRB     R0,[R4, #+3]
   \   00001AB0   0x283A             CMP      R0,#+58
   \   00001AB2   0xD102             BNE.N    ??RoadBrd_ParseString_302
   \   00001AB4   0x79A0             LDRB     R0,[R4, #+6]
   \   00001AB6   0x282E             CMP      R0,#+46
   \   00001AB8   0xD016             BEQ.N    ??RoadBrd_ParseString_303
   2042                                    {
   2043                                      // Is this a BLE Operation?
   2044                                      if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_302: (+1)
   \   00001ABA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001ABC   0x2D00             CMP      R5,#+0
   \   00001ABE   0xD00A             BEQ.N    ??RoadBrd_ParseString_304
   2045                                      {
   2046                                        // Yes...Build and Send BLE Response NOW.
   2047                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001AC0   0xF8DF 0x152C      LDR.W    R1,??RoadBrd_ParseString_210
   \   00001AC4   0xA80A             ADD      R0,SP,#+40
   \   00001AC6   0x.... 0x....      BL       strcpy
   2048                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001ACA   0xA80A             ADD      R0,SP,#+40
   \   00001ACC   0x.... 0x....      BL       strlen
   \   00001AD0   0xA90A             ADD      R1,SP,#+40
   \   00001AD2   0x.... 0x....      BL       BGM111_Transmit
   2049                                      }
   2050                                     
   2051                                      strcpy( (char *)tempBffr2, "TIS SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_304: (+1)
   \   00001AD6   0xF8DF 0x1E2C      LDR.W    R1,??RoadBrd_ParseString_305
   \   00001ADA   0xA80A             ADD      R0,SP,#+40
   \   00001ADC   0x.... 0x....      BL       strcpy
   \   00001AE0   0xE0B1             B.N      ??RoadBrd_ParseString_306
   \   00001AE2   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_159:
   \   00001AE4   0x........         DC32     ?_52
   2052                                    }
   2053                                    else
   2054                                    {
   2055                                      // Is this a BLE Operation?
   2056                                      if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_303: (+1)
   \   00001AE8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001AEA   0x2D00             CMP      R5,#+0
   \   00001AEC   0xD00A             BEQ.N    ??RoadBrd_ParseString_307
   2057                                      {
   2058                                        // Yes...Build and Send BLE Response NOW.
   2059                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001AEE   0xF8DF 0x1500      LDR.W    R1,??RoadBrd_ParseString_210
   \   00001AF2   0xA80A             ADD      R0,SP,#+40
   \   00001AF4   0x.... 0x....      BL       strcpy
   2060                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001AF8   0xA80A             ADD      R0,SP,#+40
   \   00001AFA   0x.... 0x....      BL       strlen
   \   00001AFE   0xA90A             ADD      R1,SP,#+40
   \   00001B00   0x.... 0x....      BL       BGM111_Transmit
   2061                                      }
   2062                                      
   2063                                      // 2. Grab Address and validate a legal number
   2064                                      tempBffr3[0] = tempBffr[4];
   \                     ??RoadBrd_ParseString_307: (+1)
   \   00001B04   0xF994 0x0004      LDRSB    R0,[R4, #+4]
   \   00001B08   0xF88D 0x00A8      STRB     R0,[SP, #+168]
   2065                                      tempBffr3[1] = tempBffr[5];
   \   00001B0C   0xF994 0x0005      LDRSB    R0,[R4, #+5]
   \   00001B10   0xF88D 0x00A9      STRB     R0,[SP, #+169]
   2066                                      tempBffr3[2] = 0x00;
   \   00001B14   0x2000             MOVS     R0,#+0
   \   00001B16   0xF88D 0x00AA      STRB     R0,[SP, #+170]
   2067                                      if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001B1A   0xA82A             ADD      R0,SP,#+168
   \   00001B1C   0x.... 0x....      BL       isHexNum
   \   00001B20   0x2800             CMP      R0,#+0
   \   00001B22   0xD105             BNE.N    ??RoadBrd_ParseString_308
   2068                                        strcpy( (char *)tempBffr2, "TIS SYNTAX ERROR: Address not HEX Value.\r\n");
   \   00001B24   0xF8DF 0x1DE0      LDR.W    R1,??RoadBrd_ParseString_305+0x4
   \   00001B28   0xA80A             ADD      R0,SP,#+40
   \   00001B2A   0x.... 0x....      BL       strcpy
   \   00001B2E   0xE08A             B.N      ??RoadBrd_ParseString_306
   2069                                      else
   2070                                      {
   2071                                        // Legal Address. Save it as value
   2072                                        Address = hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_308: (+1)
   \   00001B30   0xA82A             ADD      R0,SP,#+168
   \   00001B32   0x.... 0x....      BL       hatoi
   \   00001B36   0x9031             STR      R0,[SP, #+196]
   2073                                        // 3. Now get the number of bytes of data from field.
   2074          //                              sprintf( (char *)tempBffr2, "TIS: Good Address: %x.\r\n", Address);
   2075                                        tempBffr3[0] = tempBffr[7];
   \   00001B38   0xF994 0x0007      LDRSB    R0,[R4, #+7]
   \   00001B3C   0xF88D 0x00A8      STRB     R0,[SP, #+168]
   2076                                        tempBffr3[1] = tempBffr[8];
   \   00001B40   0xF994 0x0008      LDRSB    R0,[R4, #+8]
   \   00001B44   0xF88D 0x00A9      STRB     R0,[SP, #+169]
   2077                                        tempBffr3[2] = 0x00;
   \   00001B48   0x2000             MOVS     R0,#+0
   \   00001B4A   0xF88D 0x00AA      STRB     R0,[SP, #+170]
   2078                                        if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001B4E   0xA82A             ADD      R0,SP,#+168
   \   00001B50   0x.... 0x....      BL       isHexNum
   \   00001B54   0x2800             CMP      R0,#+0
   \   00001B56   0xD105             BNE.N    ??RoadBrd_ParseString_309
   2079                                          strcpy( (char *)tempBffr2, "TIS SYNTAX ERROR: Number of Bytes not HEX Value.\r\n");
   \   00001B58   0xF8DF 0x1DB0      LDR.W    R1,??RoadBrd_ParseString_305+0x8
   \   00001B5C   0xA80A             ADD      R0,SP,#+40
   \   00001B5E   0x.... 0x....      BL       strcpy
   \   00001B62   0xE070             B.N      ??RoadBrd_ParseString_306
   2080                                        else
   2081                                        {
   2082                                          // Legal NUMBER BYTES. Save it as value
   2083                                          num_bytes = hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_309: (+1)
   \   00001B64   0xA82A             ADD      R0,SP,#+168
   \   00001B66   0x.... 0x....      BL       hatoi
   \   00001B6A   0x9034             STR      R0,[SP, #+208]
   2084                                          // 4. Test num_bytes. If Zero, We are done
   2085                                          if (num_bytes == 0)
   \   00001B6C   0x9834             LDR      R0,[SP, #+208]
   \   00001B6E   0x2800             CMP      R0,#+0
   \   00001B70   0xD112             BNE.N    ??RoadBrd_ParseString_310
   2086                                          {
   2087                                            sprintf( (char *)tempBffr2, "TIS: GOOD CMD: %x.\r\n", Address);
   \   00001B72   0x9A31             LDR      R2,[SP, #+196]
   \   00001B74   0xF8DF 0x1D98      LDR.W    R1,??RoadBrd_ParseString_305+0xC
   \   00001B78   0xA80A             ADD      R0,SP,#+40
   \   00001B7A   0x.... 0x....      BL       sprintf
   \   00001B7E   0xE039             B.N      ??RoadBrd_ParseString_311
   \                     ??RoadBrd_ParseString_163:
   \   00001B80   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
   \   00001B84   0x........         DC32     ?_53
   \   00001B88   0x........         DC32     ?_54
   \   00001B8C   0x........         DC32     ?_55
   \   00001B90   0x........         DC32     ?_56
   \   00001B94   0x........         DC32     ?_57
   2088                                          }
   2089                                          else
   2090                                          {
   2091                                            // 5. Time to get all the data.
   2092                                            Error = 0;
   \                     ??RoadBrd_ParseString_310: (+1)
   \   00001B98   0x2000             MOVS     R0,#+0
   \   00001B9A   0x9035             STR      R0,[SP, #+212]
   2093                                            for (x=0; x<num_bytes; x++)
   \   00001B9C   0x2000             MOVS     R0,#+0
   \   00001B9E   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_312: (+1)
   \   00001BA0   0x9834             LDR      R0,[SP, #+208]
   \   00001BA2   0x4287             CMP      R7,R0
   \   00001BA4   0xDA26             BGE.N    ??RoadBrd_ParseString_311
   2094                                            {
   2095                                              tempBffr3[0] = tempBffr[10+x*3];
   \   00001BA6   0x2003             MOVS     R0,#+3
   \   00001BA8   0xFB00 0xF007      MUL      R0,R0,R7
   \   00001BAC   0x4420             ADD      R0,R4,R0
   \   00001BAE   0xF990 0x000A      LDRSB    R0,[R0, #+10]
   \   00001BB2   0xF88D 0x00A8      STRB     R0,[SP, #+168]
   2096                                              tempBffr3[1] = tempBffr[11+x*3];
   \   00001BB6   0x2003             MOVS     R0,#+3
   \   00001BB8   0xFB00 0xF007      MUL      R0,R0,R7
   \   00001BBC   0x4420             ADD      R0,R4,R0
   \   00001BBE   0xF990 0x000B      LDRSB    R0,[R0, #+11]
   \   00001BC2   0xF88D 0x00A9      STRB     R0,[SP, #+169]
   2097                                              tempBffr3[2] = 0x00;
   \   00001BC6   0x2000             MOVS     R0,#+0
   \   00001BC8   0xF88D 0x00AA      STRB     R0,[SP, #+170]
   2098                                              if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001BCC   0xA82A             ADD      R0,SP,#+168
   \   00001BCE   0x.... 0x....      BL       isHexNum
   \   00001BD2   0x2800             CMP      R0,#+0
   \   00001BD4   0xD107             BNE.N    ??RoadBrd_ParseString_313
   2099                                              {
   2100                                                strcpy( (char *)tempBffr2, "TIS SYNTAX ERROR: Address not HEX Value.\r\n");
   \   00001BD6   0xF8DF 0x1D30      LDR.W    R1,??RoadBrd_ParseString_305+0x4
   \   00001BDA   0xA80A             ADD      R0,SP,#+40
   \   00001BDC   0x.... 0x....      BL       strcpy
   2101                                                Error = 1;
   \   00001BE0   0x2001             MOVS     R0,#+1
   \   00001BE2   0x9035             STR      R0,[SP, #+212]
   2102                                                break;
   \   00001BE4   0xE006             B.N      ??RoadBrd_ParseString_311
   2103                                              }
   2104                                              else
   2105                                              {
   2106                                                i2cData[x] =  hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_313: (+1)
   \   00001BE6   0xA82A             ADD      R0,SP,#+168
   \   00001BE8   0x.... 0x....      BL       hatoi
   \   00001BEC   0xA999             ADD      R1,SP,#+612
   \   00001BEE   0x55C8             STRB     R0,[R1, R7]
   2107                                              } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)
   2108                                            } //EndFor (x=0; x<num_bytes; x++)
   \   00001BF0   0x1C7F             ADDS     R7,R7,#+1
   \   00001BF2   0xE7D5             B.N      ??RoadBrd_ParseString_312
   2109                                          } //EndElse (num_bytes == 0)
   2110                                          if (Error==0)
   \                     ??RoadBrd_ParseString_311: (+1)
   \   00001BF4   0x9835             LDR      R0,[SP, #+212]
   \   00001BF6   0x2800             CMP      R0,#+0
   \   00001BF8   0xD105             BNE.N    ??RoadBrd_ParseString_314
   2111                                          {
   2112                                            sprintf( (char *)tempBffr2, "TIS: GOOD CMD: %x.", Address);
   \   00001BFA   0x9A31             LDR      R2,[SP, #+196]
   \   00001BFC   0xF8DF 0x1DF8      LDR.W    R1,??RoadBrd_ParseString_315
   \   00001C00   0xA80A             ADD      R0,SP,#+40
   \   00001C02   0x.... 0x....      BL       sprintf
   2113                                          }
   2114                                          for(x=0; x<num_bytes; x++)
   \                     ??RoadBrd_ParseString_314: (+1)
   \   00001C06   0x2000             MOVS     R0,#+0
   \   00001C08   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_316: (+1)
   \   00001C0A   0x9834             LDR      R0,[SP, #+208]
   \   00001C0C   0x4287             CMP      R7,R0
   \   00001C0E   0xDA0B             BGE.N    ??RoadBrd_ParseString_317
   2115                                          {
   2116                                            sprintf( (char *)tempBffr3, "%x.", i2cData[x]);
   \   00001C10   0xA899             ADD      R0,SP,#+612
   \   00001C12   0x5DC2             LDRB     R2,[R0, R7]
   \   00001C14   0xA1CC             ADR.N    R1,??RoadBrd_ParseString_202+0x4  ;; "%x."
   \   00001C16   0xA82A             ADD      R0,SP,#+168
   \   00001C18   0x.... 0x....      BL       sprintf
   2117                                            strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   00001C1C   0xA92A             ADD      R1,SP,#+168
   \   00001C1E   0xA80A             ADD      R0,SP,#+40
   \   00001C20   0x.... 0x....      BL       strcat
   2118                                          }
   \   00001C24   0x1C7F             ADDS     R7,R7,#+1
   \   00001C26   0xE7F0             B.N      ??RoadBrd_ParseString_316
   2119                                          strcat( (char *)tempBffr2, "\r\n" );
   \                     ??RoadBrd_ParseString_317: (+1)
   \   00001C28   0xA1C8             ADR.N    R1,??RoadBrd_ParseString_202+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001C2A   0xA80A             ADD      R0,SP,#+40
   \   00001C2C   0x.... 0x....      BL       strcat
   2120                                          // 6. Time to send Command and collect status.
   2121                                          Status =  RoadBrd_I2C_Master_Transmit((uint16_t)Address, i2cData, (uint16_t)num_bytes, I2C_TIMEOUT);
   \   00001C30   0xF44F 0x73FA      MOV      R3,#+500
   \   00001C34   0x9834             LDR      R0,[SP, #+208]
   \   00001C36   0x0002             MOVS     R2,R0
   \   00001C38   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00001C3A   0xA999             ADD      R1,SP,#+612
   \   00001C3C   0x9831             LDR      R0,[SP, #+196]
   \   00001C3E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00001C40   0x.... 0x....      BL       RoadBrd_I2C_Master_Transmit
   \   00001C44   0x0006             MOVS     R6,R0
   2122                                          
   2123                                        } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)...NUMBER BYTES
   2124                                        
   2125                                      } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)...Address
   2126                                      
   2127                                    } //EndElse ( (tempBffr[2]!=':') || (tempBffr[5]!='.') )
   2128                                
   2129                                    break;
   \                     ??RoadBrd_ParseString_306: (+1)
   \   00001C46   0xE1D0             B.N      ??RoadBrd_ParseString_297
   2130          //------------------
   2131                                  case 'R':
   2132                                    //I2C Receive Command
   2133                                    // Step 1. Validate format.
   2134                                    if( (tempBffr[3]!=':') ||
   2135                                        (tempBffr[6]!='.') ||
   2136                                        (tempBffr[9]!='.')  )
   \                     ??RoadBrd_ParseString_301: (+1)
   \   00001C48   0x78E0             LDRB     R0,[R4, #+3]
   \   00001C4A   0x283A             CMP      R0,#+58
   \   00001C4C   0xD105             BNE.N    ??RoadBrd_ParseString_318
   \   00001C4E   0x79A0             LDRB     R0,[R4, #+6]
   \   00001C50   0x282E             CMP      R0,#+46
   \   00001C52   0xD102             BNE.N    ??RoadBrd_ParseString_318
   \   00001C54   0x7A60             LDRB     R0,[R4, #+9]
   \   00001C56   0x282E             CMP      R0,#+46
   \   00001C58   0xD016             BEQ.N    ??RoadBrd_ParseString_319
   2137                                    {
   2138                                      // Is this a BLE Operation?
   2139                                      if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_318: (+1)
   \   00001C5A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001C5C   0x2D00             CMP      R5,#+0
   \   00001C5E   0xD00A             BEQ.N    ??RoadBrd_ParseString_320
   2140                                      {
   2141                                        // Yes...Build and Send BLE Response NOW.
   2142                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001C60   0xF8DF 0x138C      LDR.W    R1,??RoadBrd_ParseString_210
   \   00001C64   0xA80A             ADD      R0,SP,#+40
   \   00001C66   0x.... 0x....      BL       strcpy
   2143                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001C6A   0xA80A             ADD      R0,SP,#+40
   \   00001C6C   0x.... 0x....      BL       strlen
   \   00001C70   0xA90A             ADD      R1,SP,#+40
   \   00001C72   0x.... 0x....      BL       BGM111_Transmit
   2144                                      }
   2145                                      
   2146                                      strcpy( (char *)tempBffr2, "TIR SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_320: (+1)
   \   00001C76   0xF8DF 0x1DF8      LDR.W    R1,??RoadBrd_ParseString_321
   \   00001C7A   0xA80A             ADD      R0,SP,#+40
   \   00001C7C   0x.... 0x....      BL       strcpy
   \   00001C80   0xE106             B.N      ??RoadBrd_ParseString_322
   \   00001C82   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_173:
   \   00001C84   0x........         DC32     ?_58
   2147                                    }
   2148                                    else
   2149                                    {
   2150                                      // Is this a BLE Operation?
   2151                                      if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_319: (+1)
   \   00001C88   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001C8A   0x2D00             CMP      R5,#+0
   \   00001C8C   0xD009             BEQ.N    ??RoadBrd_ParseString_323
   2152                                      {
   2153                                        // Yes...Build and Send BLE Response NOW.
   2154                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001C8E   0x49D8             LDR.N    R1,??RoadBrd_ParseString_210
   \   00001C90   0xA80A             ADD      R0,SP,#+40
   \   00001C92   0x.... 0x....      BL       strcpy
   2155                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001C96   0xA80A             ADD      R0,SP,#+40
   \   00001C98   0x.... 0x....      BL       strlen
   \   00001C9C   0xA90A             ADD      R1,SP,#+40
   \   00001C9E   0x.... 0x....      BL       BGM111_Transmit
   2156                                      }
   2157                                      
   2158                                      // 2. Grab Address and validate a legal number
   2159                                      tempBffr3[0] = tempBffr[4];
   \                     ??RoadBrd_ParseString_323: (+1)
   \   00001CA2   0xF994 0x0004      LDRSB    R0,[R4, #+4]
   \   00001CA6   0xF88D 0x00A8      STRB     R0,[SP, #+168]
   2160                                      tempBffr3[1] = tempBffr[5];
   \   00001CAA   0xF994 0x0005      LDRSB    R0,[R4, #+5]
   \   00001CAE   0xF88D 0x00A9      STRB     R0,[SP, #+169]
   2161                                      tempBffr3[2] = 0x00;
   \   00001CB2   0x2000             MOVS     R0,#+0
   \   00001CB4   0xF88D 0x00AA      STRB     R0,[SP, #+170]
   2162                                      if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001CB8   0xA82A             ADD      R0,SP,#+168
   \   00001CBA   0x.... 0x....      BL       isHexNum
   \   00001CBE   0x2800             CMP      R0,#+0
   \   00001CC0   0xD105             BNE.N    ??RoadBrd_ParseString_324
   2163                                        strcpy( (char *)tempBffr2, "TIR SYNTAX ERROR: Address not HEX Value.\r\n");
   \   00001CC2   0xF8DF 0x1E24      LDR.W    R1,??RoadBrd_ParseString_325
   \   00001CC6   0xA80A             ADD      R0,SP,#+40
   \   00001CC8   0x.... 0x....      BL       strcpy
   \   00001CCC   0xE0E0             B.N      ??RoadBrd_ParseString_322
   2164                                      else
   2165                                      {
   2166                                        // Legal Address. Save it as value
   2167                                        Address = hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_324: (+1)
   \   00001CCE   0xA82A             ADD      R0,SP,#+168
   \   00001CD0   0x.... 0x....      BL       hatoi
   \   00001CD4   0x9031             STR      R0,[SP, #+196]
   2168                                        // 3. Now get the number of bytes of data from field.
   2169                                        tempBffr3[0] = tempBffr[7];
   \   00001CD6   0xF994 0x0007      LDRSB    R0,[R4, #+7]
   \   00001CDA   0xF88D 0x00A8      STRB     R0,[SP, #+168]
   2170                                        tempBffr3[1] = tempBffr[8];
   \   00001CDE   0xF994 0x0008      LDRSB    R0,[R4, #+8]
   \   00001CE2   0xF88D 0x00A9      STRB     R0,[SP, #+169]
   2171                                        tempBffr3[2] = 0x00;
   \   00001CE6   0x2000             MOVS     R0,#+0
   \   00001CE8   0xF88D 0x00AA      STRB     R0,[SP, #+170]
   2172                                        if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001CEC   0xA82A             ADD      R0,SP,#+168
   \   00001CEE   0x.... 0x....      BL       isHexNum
   \   00001CF2   0x2800             CMP      R0,#+0
   \   00001CF4   0xD105             BNE.N    ??RoadBrd_ParseString_326
   2173                                          strcpy( (char *)tempBffr2, "TIR SYNTAX ERROR: Number of Bytes not HEX Value.\r\n");
   \   00001CF6   0xF8DF 0x1DF4      LDR.W    R1,??RoadBrd_ParseString_325+0x4
   \   00001CFA   0xA80A             ADD      R0,SP,#+40
   \   00001CFC   0x.... 0x....      BL       strcpy
   \   00001D00   0xE0C6             B.N      ??RoadBrd_ParseString_322
   2174                                        else
   2175                                        {
   2176                                          // Legal NUMBER BYTES. Save it as value
   2177                                          num_bytes = hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_326: (+1)
   \   00001D02   0xA82A             ADD      R0,SP,#+168
   \   00001D04   0x.... 0x....      BL       hatoi
   \   00001D08   0x9034             STR      R0,[SP, #+208]
   2178                                          
   2179                                          // 3a. Now get the number of bytes Received of data from field.
   2180                                          tempBffr3[0] = tempBffr[10];
   \   00001D0A   0xF994 0x000A      LDRSB    R0,[R4, #+10]
   \   00001D0E   0xF88D 0x00A8      STRB     R0,[SP, #+168]
   2181                                          tempBffr3[1] = tempBffr[11];
   \   00001D12   0xF994 0x000B      LDRSB    R0,[R4, #+11]
   \   00001D16   0xF88D 0x00A9      STRB     R0,[SP, #+169]
   2182                                          tempBffr3[2] = 0x00;
   \   00001D1A   0x2000             MOVS     R0,#+0
   \   00001D1C   0xF88D 0x00AA      STRB     R0,[SP, #+170]
   2183                                          if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001D20   0xA82A             ADD      R0,SP,#+168
   \   00001D22   0x.... 0x....      BL       isHexNum
   \   00001D26   0x2800             CMP      R0,#+0
   \   00001D28   0xD105             BNE.N    ??RoadBrd_ParseString_327
   2184                                            strcpy( (char *)tempBffr2, "TIR SYNTAX ERROR: Number of Bytes RECEIVED not HEX Value.\r\n");
   \   00001D2A   0xF8DF 0x1DC4      LDR.W    R1,??RoadBrd_ParseString_325+0x8
   \   00001D2E   0xA80A             ADD      R0,SP,#+40
   \   00001D30   0x.... 0x....      BL       strcpy
   \   00001D34   0xE0AC             B.N      ??RoadBrd_ParseString_322
   2185                                          else
   2186                                          {
   2187                                            // Legal NUMBER BYTES. Save it as value
   2188                                            num_bytes_received = hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_327: (+1)
   \   00001D36   0xA82A             ADD      R0,SP,#+168
   \   00001D38   0x.... 0x....      BL       hatoi
   \   00001D3C   0x9039             STR      R0,[SP, #+228]
   2189                                            // 4. Test num_bytes. If Zero, We are done
   2190                                            if (num_bytes == 0)
   \   00001D3E   0x9834             LDR      R0,[SP, #+208]
   \   00001D40   0x2800             CMP      R0,#+0
   \   00001D42   0xD106             BNE.N    ??RoadBrd_ParseString_328
   2191                                            {
   2192                                              sprintf( (char *)tempBffr2, "TIR: GOOD CMD: %x.\r\n", Address);
   \   00001D44   0x9A31             LDR      R2,[SP, #+196]
   \   00001D46   0xF8DF 0x1E20      LDR.W    R1,??RoadBrd_ParseString_329
   \   00001D4A   0xA80A             ADD      R0,SP,#+40
   \   00001D4C   0x.... 0x....      BL       sprintf
   \   00001D50   0xE035             B.N      ??RoadBrd_ParseString_330
   2193                                            }
   2194                                            else
   2195                                            {
   2196                                              // 5. Time to get all the data.
   2197                                              Error = 0;
   \                     ??RoadBrd_ParseString_328: (+1)
   \   00001D52   0x2000             MOVS     R0,#+0
   \   00001D54   0x9035             STR      R0,[SP, #+212]
   2198                                              for (x=0; x<num_bytes; x++)
   \   00001D56   0x2000             MOVS     R0,#+0
   \   00001D58   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_331: (+1)
   \   00001D5A   0x9834             LDR      R0,[SP, #+208]
   \   00001D5C   0x4287             CMP      R7,R0
   \   00001D5E   0xDA2E             BGE.N    ??RoadBrd_ParseString_330
   2199                                              {
   2200                                                tempBffr3[0] = tempBffr[13+x*3];
   \   00001D60   0x2003             MOVS     R0,#+3
   \   00001D62   0xFB00 0xF007      MUL      R0,R0,R7
   \   00001D66   0x4420             ADD      R0,R4,R0
   \   00001D68   0xF990 0x000D      LDRSB    R0,[R0, #+13]
   \   00001D6C   0xF88D 0x00A8      STRB     R0,[SP, #+168]
   2201                                                tempBffr3[1] = tempBffr[14+x*3];
   \   00001D70   0x2003             MOVS     R0,#+3
   \   00001D72   0xFB00 0xF007      MUL      R0,R0,R7
   \   00001D76   0x4420             ADD      R0,R4,R0
   \   00001D78   0xF990 0x000E      LDRSB    R0,[R0, #+14]
   \   00001D7C   0xF88D 0x00A9      STRB     R0,[SP, #+169]
   2202                                                tempBffr3[2] = 0x00;
   \   00001D80   0x2000             MOVS     R0,#+0
   \   00001D82   0xF88D 0x00AA      STRB     R0,[SP, #+170]
   2203                                                if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001D86   0xA82A             ADD      R0,SP,#+168
   \   00001D88   0x.... 0x....      BL       isHexNum
   \   00001D8C   0x2800             CMP      R0,#+0
   \   00001D8E   0xD10F             BNE.N    ??RoadBrd_ParseString_332
   2204                                                {
   2205                                                  strcpy( (char *)tempBffr2, "TIR SYNTAX ERROR: Data not HEX Value.\r\n");
   \   00001D90   0xF8DF 0x1DD8      LDR.W    R1,??RoadBrd_ParseString_329+0x4
   \   00001D94   0xA80A             ADD      R0,SP,#+40
   \   00001D96   0x.... 0x....      BL       strcpy
   2206                                                  Error = 1;
   \   00001D9A   0x2001             MOVS     R0,#+1
   \   00001D9C   0x9035             STR      R0,[SP, #+212]
   2207                                                  break;
   \   00001D9E   0xE00E             B.N      ??RoadBrd_ParseString_330
   \                     ??RoadBrd_ParseString_184:
   \   00001DA0   0x........         DC32     ?_59
   \   00001DA4   0x........         DC32     ?_60
   \   00001DA8   0x........         DC32     ?_61
   \   00001DAC   0x........         DC32     ?_62
   2208                                                }
   2209                                                else
   2210                                                {
   2211                                                  i2cData[x] =  hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_332: (+1)
   \   00001DB0   0xA82A             ADD      R0,SP,#+168
   \   00001DB2   0x.... 0x....      BL       hatoi
   \   00001DB6   0xA999             ADD      R1,SP,#+612
   \   00001DB8   0x55C8             STRB     R0,[R1, R7]
   2212                                                } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)
   2213                                              } //EndFor (x=0; x<num_bytes; x++)
   \   00001DBA   0x1C7F             ADDS     R7,R7,#+1
   \   00001DBC   0xE7CD             B.N      ??RoadBrd_ParseString_331
   2214                                            } //EndElse (num_bytes == 0)
   2215                                            if (Error==0)
   \                     ??RoadBrd_ParseString_330: (+1)
   \   00001DBE   0x9835             LDR      R0,[SP, #+212]
   \   00001DC0   0x2800             CMP      R0,#+0
   \   00001DC2   0xD105             BNE.N    ??RoadBrd_ParseString_333
   2216                                            {
   2217                                              sprintf( (char *)tempBffr2, "TIR: GOOD CMD: %x.", Address);
   \   00001DC4   0x9A31             LDR      R2,[SP, #+196]
   \   00001DC6   0xF8DF 0x1E1C      LDR.W    R1,??RoadBrd_ParseString_334
   \   00001DCA   0xA80A             ADD      R0,SP,#+40
   \   00001DCC   0x.... 0x....      BL       sprintf
   2218                                            }
   2219                                            for(x=0; x<num_bytes; x++)
   \                     ??RoadBrd_ParseString_333: (+1)
   \   00001DD0   0x2000             MOVS     R0,#+0
   \   00001DD2   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_335: (+1)
   \   00001DD4   0x9834             LDR      R0,[SP, #+208]
   \   00001DD6   0x4287             CMP      R7,R0
   \   00001DD8   0xDA0B             BGE.N    ??RoadBrd_ParseString_336
   2220                                            {
   2221                                              sprintf( (char *)tempBffr3, "%x.", i2cData[x]);
   \   00001DDA   0xA899             ADD      R0,SP,#+612
   \   00001DDC   0x5DC2             LDRB     R2,[R0, R7]
   \   00001DDE   0xA15A             ADR.N    R1,??RoadBrd_ParseString_202+0x4  ;; "%x."
   \   00001DE0   0xA82A             ADD      R0,SP,#+168
   \   00001DE2   0x.... 0x....      BL       sprintf
   2222                                              strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   00001DE6   0xA92A             ADD      R1,SP,#+168
   \   00001DE8   0xA80A             ADD      R0,SP,#+40
   \   00001DEA   0x.... 0x....      BL       strcat
   2223                                            }
   \   00001DEE   0x1C7F             ADDS     R7,R7,#+1
   \   00001DF0   0xE7F0             B.N      ??RoadBrd_ParseString_335
   2224                                            strcat( (char *)tempBffr2, "\r\n" );
   \                     ??RoadBrd_ParseString_336: (+1)
   \   00001DF2   0xA156             ADR.N    R1,??RoadBrd_ParseString_202+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001DF4   0xA80A             ADD      R0,SP,#+40
   \   00001DF6   0x.... 0x....      BL       strcat
   2225                                            // 6. Time to send Command and collect status.
   2226                                            Status =  RoadBrd_I2C_Master_Transmit((uint16_t)Address, i2cData, (uint16_t)num_bytes, I2C_TIMEOUT);
   \   00001DFA   0xF44F 0x73FA      MOV      R3,#+500
   \   00001DFE   0x9834             LDR      R0,[SP, #+208]
   \   00001E00   0x0002             MOVS     R2,R0
   \   00001E02   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00001E04   0xA999             ADD      R1,SP,#+612
   \   00001E06   0x9831             LDR      R0,[SP, #+196]
   \   00001E08   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00001E0A   0x.... 0x....      BL       RoadBrd_I2C_Master_Transmit
   \   00001E0E   0x0006             MOVS     R6,R0
   2227                                            // 6a. Wait for Command to complete(100ms).
   2228           
   2229                                            // 7. If Status was good, Time to get response.
   2230                                            if (Status == HAL_OK)
   \   00001E10   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001E12   0x2E00             CMP      R6,#+0
   \   00001E14   0xD10E             BNE.N    ??RoadBrd_ParseString_337
   2231                                            {
   2232                                              Status =  RoadBrd_I2C_Master_Receive((uint16_t)Address, i2cData, (uint16_t)num_bytes_received, I2C_TIMEOUT);
   \   00001E16   0xF44F 0x73FA      MOV      R3,#+500
   \   00001E1A   0x9839             LDR      R0,[SP, #+228]
   \   00001E1C   0x0002             MOVS     R2,R0
   \   00001E1E   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00001E20   0xA999             ADD      R1,SP,#+612
   \   00001E22   0x9831             LDR      R0,[SP, #+196]
   \   00001E24   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00001E26   0x.... 0x....      BL       RoadBrd_I2C_Master_Receive
   \   00001E2A   0x0006             MOVS     R6,R0
   2233                                            }
   2234                                            else
   2235                                              break;
   2236                                            // 7a. Wait for Command to complete(100ms).
   2237                                            if (Status == HAL_OK)
   \   00001E2C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001E2E   0x2E00             CMP      R6,#+0
   \   00001E30   0xD105             BNE.N    ??RoadBrd_ParseString_338
   \   00001E32   0xE000             B.N      ??RoadBrd_ParseString_339
   \                     ??RoadBrd_ParseString_337: (+1)
   \   00001E34   0xE0D9             B.N      ??RoadBrd_ParseString_297
   2238                                            {
   2239                                              Status = RoadBrd_WaitForState( 20 );
   \                     ??RoadBrd_ParseString_339: (+1)
   \   00001E36   0x2014             MOVS     R0,#+20
   \   00001E38   0x.... 0x....      BL       RoadBrd_WaitForState
   \   00001E3C   0x0006             MOVS     R6,R0
   2240                                            }
   2241          
   2242                                            // 8. IfGood report, Need to Output Data.
   2243                                            if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_338: (+1)
   \   00001E3E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001E40   0x2E00             CMP      R6,#+0
   \   00001E42   0xD125             BNE.N    ??RoadBrd_ParseString_322
   2244                                            {
   2245                                              // Send string to UART..
   2246          #ifdef NUCLEO
   2247                                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   2248          #else
   2249                                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00001E44   0xA90A             ADD      R1,SP,#+40
   \   00001E46   0x2000             MOVS     R0,#+0
   \   00001E48   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001E4C   0x0006             MOVS     R6,R0
   2250          #endif
   2251                                              if (Status != HAL_OK)
   \   00001E4E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001E50   0x2E00             CMP      R6,#+0
   \   00001E52   0xD003             BEQ.N    ??RoadBrd_ParseString_340
   2252                                                return Status;
   \   00001E54   0x0030             MOVS     R0,R6
   \   00001E56   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001E58   0xF002 0xBCE1      B.W      ??RoadBrd_ParseString_4
   2253                                              // NOW, Build Data String..
   2254                                              sprintf( (char *)tempBffr2, "     DATA: " );
   \                     ??RoadBrd_ParseString_340: (+1)
   \   00001E5C   0xF8DF 0x1DFC      LDR.W    R1,??RoadBrd_ParseString_341
   \   00001E60   0xA80A             ADD      R0,SP,#+40
   \   00001E62   0x.... 0x....      BL       sprintf
   2255                                              for(x=0; x<num_bytes_received; x++)
   \   00001E66   0x2000             MOVS     R0,#+0
   \   00001E68   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_342: (+1)
   \   00001E6A   0x9839             LDR      R0,[SP, #+228]
   \   00001E6C   0x4287             CMP      R7,R0
   \   00001E6E   0xDA0B             BGE.N    ??RoadBrd_ParseString_343
   2256                                              {
   2257                                                sprintf( (char *)tempBffr3, "%x.", i2cData[x]);
   \   00001E70   0xA899             ADD      R0,SP,#+612
   \   00001E72   0x5DC2             LDRB     R2,[R0, R7]
   \   00001E74   0xA134             ADR.N    R1,??RoadBrd_ParseString_202+0x4  ;; "%x."
   \   00001E76   0xA82A             ADD      R0,SP,#+168
   \   00001E78   0x.... 0x....      BL       sprintf
   2258                                                strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   00001E7C   0xA92A             ADD      R1,SP,#+168
   \   00001E7E   0xA80A             ADD      R0,SP,#+40
   \   00001E80   0x.... 0x....      BL       strcat
   2259                                              }
   \   00001E84   0x1C7F             ADDS     R7,R7,#+1
   \   00001E86   0xE7F0             B.N      ??RoadBrd_ParseString_342
   2260                                              strcat( (char *)tempBffr2, "\r\n" );
   \                     ??RoadBrd_ParseString_343: (+1)
   \   00001E88   0xA130             ADR.N    R1,??RoadBrd_ParseString_202+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001E8A   0xA80A             ADD      R0,SP,#+40
   \   00001E8C   0x.... 0x....      BL       strcat
   2261                                            }
   2262                                          }
   2263                                        } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)...NUMBER BYTES
   2264                                        
   2265                                      } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)...Address
   2266                                      
   2267                                    } //EndElse ( (tempBffr[2]!=':') || (tempBffr[5]!='.') )
   2268                                
   2269                                    break;
   \                     ??RoadBrd_ParseString_322: (+1)
   \   00001E90   0xE0AB             B.N      ??RoadBrd_ParseString_297
   \   00001E92   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_195:
   \   00001E94   0x........         DC32     ?_63
   2270          //------------------
   2271                                  case 'Q':
   2272                                    //I2C Receive Command
   2273                                    // Step 1. Validate format.
   2274                                    if( (tempBffr[3]!=':') ||
   2275                                        (tempBffr[6]!='.')  )
   \                     ??RoadBrd_ParseString_298: (+1)
   \   00001E98   0x78E0             LDRB     R0,[R4, #+3]
   \   00001E9A   0x283A             CMP      R0,#+58
   \   00001E9C   0xD102             BNE.N    ??RoadBrd_ParseString_344
   \   00001E9E   0x79A0             LDRB     R0,[R4, #+6]
   \   00001EA0   0x282E             CMP      R0,#+46
   \   00001EA2   0xD012             BEQ.N    ??RoadBrd_ParseString_345
   2276                                    {
   2277                                      // Is this a BLE Operation?
   2278                                      if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_344: (+1)
   \   00001EA4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001EA6   0x2D00             CMP      R5,#+0
   \   00001EA8   0xD009             BEQ.N    ??RoadBrd_ParseString_346
   2279                                      {
   2280                                        // Yes...Build and Send BLE Response NOW.
   2281                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001EAA   0x4951             LDR.N    R1,??RoadBrd_ParseString_210
   \   00001EAC   0xA80A             ADD      R0,SP,#+40
   \   00001EAE   0x.... 0x....      BL       strcpy
   2282                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001EB2   0xA80A             ADD      R0,SP,#+40
   \   00001EB4   0x.... 0x....      BL       strlen
   \   00001EB8   0xA90A             ADD      R1,SP,#+40
   \   00001EBA   0x.... 0x....      BL       BGM111_Transmit
   2283                                      }
   2284                                      
   2285                                      strcpy( (char *)tempBffr2, "TIQ SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_346: (+1)
   \   00001EBE   0xF8DF 0x1E14      LDR.W    R1,??RoadBrd_ParseString_347
   \   00001EC2   0xA80A             ADD      R0,SP,#+40
   \   00001EC4   0x.... 0x....      BL       strcpy
   \   00001EC8   0xE089             B.N      ??RoadBrd_ParseString_348
   2286                                    }
   2287                                    else
   2288                                    {
   2289                                      // Is this a BLE Operation?
   2290                                      if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_345: (+1)
   \   00001ECA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00001ECC   0x2D00             CMP      R5,#+0
   \   00001ECE   0xD009             BEQ.N    ??RoadBrd_ParseString_349
   2291                                      {
   2292                                        // Yes...Build and Send BLE Response NOW.
   2293                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00001ED0   0x4947             LDR.N    R1,??RoadBrd_ParseString_210
   \   00001ED2   0xA80A             ADD      R0,SP,#+40
   \   00001ED4   0x.... 0x....      BL       strcpy
   2294                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00001ED8   0xA80A             ADD      R0,SP,#+40
   \   00001EDA   0x.... 0x....      BL       strlen
   \   00001EDE   0xA90A             ADD      R1,SP,#+40
   \   00001EE0   0x.... 0x....      BL       BGM111_Transmit
   2295                                      }
   2296                                      
   2297                                      // 2. Grab Address and validate a legal number
   2298                                      tempBffr3[0] = tempBffr[4];
   \                     ??RoadBrd_ParseString_349: (+1)
   \   00001EE4   0xF994 0x0004      LDRSB    R0,[R4, #+4]
   \   00001EE8   0xF88D 0x00A8      STRB     R0,[SP, #+168]
   2299                                      tempBffr3[1] = tempBffr[5];
   \   00001EEC   0xF994 0x0005      LDRSB    R0,[R4, #+5]
   \   00001EF0   0xF88D 0x00A9      STRB     R0,[SP, #+169]
   2300                                      tempBffr3[2] = 0x00;
   \   00001EF4   0x2000             MOVS     R0,#+0
   \   00001EF6   0xF88D 0x00AA      STRB     R0,[SP, #+170]
   2301                                      if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001EFA   0xA82A             ADD      R0,SP,#+168
   \   00001EFC   0x.... 0x....      BL       isHexNum
   \   00001F00   0x2800             CMP      R0,#+0
   \   00001F02   0xD105             BNE.N    ??RoadBrd_ParseString_350
   2302                                        strcpy( (char *)tempBffr2, "TIQ SYNTAX ERROR: Address not HEX Value.\r\n");
   \   00001F04   0xF8DF 0x1DD0      LDR.W    R1,??RoadBrd_ParseString_347+0x4
   \   00001F08   0xA80A             ADD      R0,SP,#+40
   \   00001F0A   0x.... 0x....      BL       strcpy
   \   00001F0E   0xE066             B.N      ??RoadBrd_ParseString_348
   2303                                      else
   2304                                      {
   2305                                        // Legal Address. Save it as value
   2306                                        Address = hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_350: (+1)
   \   00001F10   0xA82A             ADD      R0,SP,#+168
   \   00001F12   0x.... 0x....      BL       hatoi
   \   00001F16   0x9031             STR      R0,[SP, #+196]
   2307                                        // 3. Now get the number of bytes Received of data from field.
   2308                                        tempBffr3[0] = tempBffr[7];
   \   00001F18   0xF994 0x0007      LDRSB    R0,[R4, #+7]
   \   00001F1C   0xF88D 0x00A8      STRB     R0,[SP, #+168]
   2309                                        tempBffr3[1] = tempBffr[8];
   \   00001F20   0xF994 0x0008      LDRSB    R0,[R4, #+8]
   \   00001F24   0xF88D 0x00A9      STRB     R0,[SP, #+169]
   2310                                        tempBffr3[2] = 0x00;
   \   00001F28   0x2000             MOVS     R0,#+0
   \   00001F2A   0xF88D 0x00AA      STRB     R0,[SP, #+170]
   2311                                        if (isHexNum( (char *)tempBffr3 ) == 0)
   \   00001F2E   0xA82A             ADD      R0,SP,#+168
   \   00001F30   0x.... 0x....      BL       isHexNum
   \   00001F34   0x2800             CMP      R0,#+0
   \   00001F36   0xD10B             BNE.N    ??RoadBrd_ParseString_351
   2312                                          strcpy( (char *)tempBffr2, "TIQ SYNTAX ERROR: Number of Bytes not HEX Value.\r\n");
   \   00001F38   0xF8DF 0x1DA0      LDR.W    R1,??RoadBrd_ParseString_347+0x8
   \   00001F3C   0xA80A             ADD      R0,SP,#+40
   \   00001F3E   0x.... 0x....      BL       strcpy
   \   00001F42   0xE04C             B.N      ??RoadBrd_ParseString_348
   \                     ??RoadBrd_ParseString_202:
   \   00001F44   0x........         DC32     ?_64
   \   00001F48   0x25 0x78          DC8      "%x."
   \              0x2E 0x00    
   \   00001F4C   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
   2313                                        else
   2314                                        {
   2315                                            // Legal NUMBER BYTES. Save it as value
   2316                                            num_bytes_received = hatoi( (char *)tempBffr3 );
   \                     ??RoadBrd_ParseString_351: (+1)
   \   00001F50   0xA82A             ADD      R0,SP,#+168
   \   00001F52   0x.... 0x....      BL       hatoi
   \   00001F56   0x9039             STR      R0,[SP, #+228]
   2317                                            // 4. Test num_bytes. If Zero, We are done
   2318                                            sprintf( (char *)tempBffr2, "TIR: GOOD CMD: %x.\r\n", Address);
   \   00001F58   0x9A31             LDR      R2,[SP, #+196]
   \   00001F5A   0xF8DF 0x1C0C      LDR.W    R1,??RoadBrd_ParseString_329
   \   00001F5E   0xA80A             ADD      R0,SP,#+40
   \   00001F60   0x.... 0x....      BL       sprintf
   2319                                            // 7. If Status was good, Time to get response.
   2320                                            Status =  RoadBrd_I2C_Master_Receive((uint16_t)Address, i2cData, (uint16_t)num_bytes_received, I2C_TIMEOUT);
   \   00001F64   0xF44F 0x73FA      MOV      R3,#+500
   \   00001F68   0x9839             LDR      R0,[SP, #+228]
   \   00001F6A   0x0002             MOVS     R2,R0
   \   00001F6C   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00001F6E   0xA999             ADD      R1,SP,#+612
   \   00001F70   0x9831             LDR      R0,[SP, #+196]
   \   00001F72   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00001F74   0x.... 0x....      BL       RoadBrd_I2C_Master_Receive
   \   00001F78   0x0006             MOVS     R6,R0
   2321                                            // 7a. Wait for Command to complete(100ms).
   2322                                            if (Status == HAL_OK)
   \   00001F7A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001F7C   0x2E00             CMP      R6,#+0
   \   00001F7E   0xD107             BNE.N    ??RoadBrd_ParseString_352
   2323                                            {
   2324                                              Status = RoadBrd_WaitForState( 20 );
   \   00001F80   0x2014             MOVS     R0,#+20
   \   00001F82   0x.... 0x....      BL       RoadBrd_WaitForState
   \   00001F86   0x0006             MOVS     R6,R0
   2325                                            }
   2326                                            else
   2327                                              break;
   2328                                            // 8. IfGood report, Need to Output Data.
   2329                                            if (Status == HAL_OK)
   \   00001F88   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001F8A   0x2E00             CMP      R6,#+0
   \   00001F8C   0xD127             BNE.N    ??RoadBrd_ParseString_348
   \   00001F8E   0xE000             B.N      ??RoadBrd_ParseString_353
   \                     ??RoadBrd_ParseString_352: (+1)
   \   00001F90   0xE02B             B.N      ??RoadBrd_ParseString_297
   2330                                            {
   2331                                              // Send string to UART..
   2332          #ifdef NUCLEO
   2333                                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   2334          #else
   2335                                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \                     ??RoadBrd_ParseString_353: (+1)
   \   00001F92   0xA90A             ADD      R1,SP,#+40
   \   00001F94   0x2000             MOVS     R0,#+0
   \   00001F96   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00001F9A   0x0006             MOVS     R6,R0
   2336          #endif
   2337                                              if (Status != HAL_OK)
   \   00001F9C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00001F9E   0x2E00             CMP      R6,#+0
   \   00001FA0   0xD003             BEQ.N    ??RoadBrd_ParseString_354
   2338                                                return Status;
   \   00001FA2   0x0030             MOVS     R0,R6
   \   00001FA4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00001FA6   0xF002 0xBC3A      B.W      ??RoadBrd_ParseString_4
   2339                                              // NOW, Build Data String..
   2340                                              sprintf( (char *)tempBffr2, "     DATA: " );
   \                     ??RoadBrd_ParseString_354: (+1)
   \   00001FAA   0xF8DF 0x1CB0      LDR.W    R1,??RoadBrd_ParseString_341
   \   00001FAE   0xA80A             ADD      R0,SP,#+40
   \   00001FB0   0x.... 0x....      BL       sprintf
   2341                                              for(x=0; x<num_bytes_received; x++)
   \   00001FB4   0x2000             MOVS     R0,#+0
   \   00001FB6   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_355: (+1)
   \   00001FB8   0x9839             LDR      R0,[SP, #+228]
   \   00001FBA   0x4287             CMP      R7,R0
   \   00001FBC   0xDA0B             BGE.N    ??RoadBrd_ParseString_356
   2342                                              {
   2343                                                sprintf( (char *)tempBffr3, "%x.", i2cData[x]);
   \   00001FBE   0xA899             ADD      R0,SP,#+612
   \   00001FC0   0x5DC2             LDRB     R2,[R0, R7]
   \   00001FC2   0xA1D8             ADR.N    R1,??RoadBrd_ParseString_242+0x4  ;; "%x."
   \   00001FC4   0xA82A             ADD      R0,SP,#+168
   \   00001FC6   0x.... 0x....      BL       sprintf
   2344                                                strcat( (char *)tempBffr2, (char *)tempBffr3 );
   \   00001FCA   0xA92A             ADD      R1,SP,#+168
   \   00001FCC   0xA80A             ADD      R0,SP,#+40
   \   00001FCE   0x.... 0x....      BL       strcat
   2345                                              }
   \   00001FD2   0x1C7F             ADDS     R7,R7,#+1
   \   00001FD4   0xE7F0             B.N      ??RoadBrd_ParseString_355
   2346                                              strcat( (char *)tempBffr2, "\r\n" );
   \                     ??RoadBrd_ParseString_356: (+1)
   \   00001FD6   0xA1D4             ADR.N    R1,??RoadBrd_ParseString_242+0x8  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00001FD8   0xA80A             ADD      R0,SP,#+40
   \   00001FDA   0x.... 0x....      BL       strcat
   2347                                          }
   2348                                        } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)...NUMBER BYTES
   2349                                        
   2350                                      } //EndElse (isHexNum( (char *)tempBffr3 ) == 0)...Address
   2351                                      
   2352                                    } //EndElse ( (tempBffr[2]!=':') || (tempBffr[5]!='.') )
   2353                                
   2354                                    break;
   \                     ??RoadBrd_ParseString_348: (+1)
   \   00001FDE   0xE004             B.N      ??RoadBrd_ParseString_297
   2355                                  default:
   2356                                    strcpy( (char *)tempBffr2, "ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_299: (+1)
   \   00001FE0   0xF8DF 0x17AC      LDR.W    R1,??RoadBrd_ParseString_274
   \   00001FE4   0xA80A             ADD      R0,SP,#+40
   \   00001FE6   0x.... 0x....      BL       strcpy
   2357                                    break;
   2358                                } //EndSwitch ( tempBffr[2] )
   2359                              } //EndElse (Size < 9)
   2360                              break;
   \                     ??RoadBrd_ParseString_297: (+1)
   \   00001FEA   0xF002 0xBB8D      B.W      ??RoadBrd_ParseString_283
   \   00001FEE   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_210:
   \   00001FF0   0x........         DC32     ?_24
   \   00001FF4   0x........         DC32     ?_65
   \   00001FF8   0x........         DC32     ?_66
   \   00001FFC   0x........         DC32     ?_67
   2361          //++++++++++++++++++++++++++++++++++++++++++  Calibration Commands.
   2362                            case 'C':
   2363                              Status = HAL_OK;
   \                     ??RoadBrd_ParseString_284: (+1)
   \   00002000   0x2000             MOVS     R0,#+0
   \   00002002   0x0006             MOVS     R6,R0
   2364                              if (Size == 2)
   \   00002004   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00002008   0xF1B8 0x0F02      CMP      R8,#+2
   \   0000200C   0xF040 0x80E2      BNE.W    ??RoadBrd_ParseString_357
   2365                              {
   2366                                //------------------ TC Command: Dump Calibration Settings.      
   2367                                // Read Cool Eye/Grid Eye Values.....
   2368                                if ( Get_DriverStates( GRIDEYE_MNTR_TASK ))
   \   00002010   0x2005             MOVS     R0,#+5
   \   00002012   0x.... 0x....      BL       Get_DriverStates
   \   00002016   0x2800             CMP      R0,#+0
   \   00002018   0xD004             BEQ.N    ??RoadBrd_ParseString_358
   2369                                {
   2370                                  Status = RoadBrd_GridEye_ReadValues_Scaled( &GridMeasure );
   \   0000201A   0xA856             ADD      R0,SP,#+344
   \   0000201C   0x.... 0x....      BL       RoadBrd_GridEye_ReadValues_Scaled
   \   00002020   0x0006             MOVS     R6,R0
   \   00002022   0xE00B             B.N      ??RoadBrd_ParseString_359
   2371                                }
   2372                                else if ( Get_DriverStates( COOLEYE_MNTR_TASK ))
   \                     ??RoadBrd_ParseString_358: (+1)
   \   00002024   0x2006             MOVS     R0,#+6
   \   00002026   0x.... 0x....      BL       Get_DriverStates
   \   0000202A   0x2800             CMP      R0,#+0
   \   0000202C   0xD004             BEQ.N    ??RoadBrd_ParseString_360
   2373                                {
   2374                                  Status = RoadBrd_CoolEye_ReadValues_Scaled( &GridMeasure );
   \   0000202E   0xA856             ADD      R0,SP,#+344
   \   00002030   0x.... 0x....      BL       RoadBrd_CoolEye_ReadValues_Scaled
   \   00002034   0x0006             MOVS     R6,R0
   \   00002036   0xE001             B.N      ??RoadBrd_ParseString_359
   2375                                }
   2376                                else
   2377                                  Status = HAL_ERROR;
   \                     ??RoadBrd_ParseString_360: (+1)
   \   00002038   0x2001             MOVS     R0,#+1
   \   0000203A   0x0006             MOVS     R6,R0
   2378                                
   2379                                // Is this a BLE Operation?
   2380                                if (Status == HAL_OK)
   \                     ??RoadBrd_ParseString_359: (+1)
   \   0000203C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000203E   0x2E00             CMP      R6,#+0
   \   00002040   0xF040 0x80B1      BNE.W    ??RoadBrd_ParseString_361
   2381                                {
   2382                                  // OK Next Sensor.
   2383                                  // Read Temperature sensor and return results....Temperature Sensor U10(PCT2075GVJ).  Addr: 0x94
   2384                                  Status = RoadBrd_ReadTemp_Scaled( &TMeasure );
   \   00002044   0xA83D             ADD      R0,SP,#+244
   \   00002046   0x.... 0x....      BL       RoadBrd_ReadTemp_Scaled
   \   0000204A   0x0006             MOVS     R6,R0
   2385                                  if (Status == HAL_OK)
   \   0000204C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000204E   0x2E00             CMP      R6,#+0
   \   00002050   0xF040 0x8094      BNE.W    ??RoadBrd_ParseString_362
   2386                                  {
   2387                                    // OK Next Sensor.
   2388                                    // Read Humidity Sensor sensor and return Humidity results....
   2389                                    Status = RoadBrd_Humidity_ReadHumidity_Scaled( &HMeasure );
   \   00002054   0xA851             ADD      R0,SP,#+324
   \   00002056   0x.... 0x....      BL       RoadBrd_Humidity_ReadHumidity_Scaled
   \   0000205A   0x0006             MOVS     R6,R0
   2390                                    if (Status == HAL_OK)
   \   0000205C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000205E   0x2E00             CMP      R6,#+0
   \   00002060   0xD175             BNE.N    ??RoadBrd_ParseString_363
   2391                                    {
   2392                                      // OK Next Sensor.
   2393                                      //Status = RoadBrd_Barometer_Status( &PRMeasure );
   2394                                      Status = RoadBrd_Baro_ReadPressure_Scaled( &PRPMeasure );
   \   00002062   0xA8AD             ADD      R0,SP,#+692
   \   00002064   0x.... 0x....      BL       RoadBrd_Baro_ReadPressure_Scaled
   \   00002068   0x0006             MOVS     R6,R0
   2395                                      if (Status == HAL_OK)
   \   0000206A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000206C   0x2E00             CMP      R6,#+0
   \   0000206E   0xD159             BNE.N    ??RoadBrd_ParseString_364
   2396                                      {
   2397                                        if ( BLE_Flag )
   \   00002070   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002072   0x2D00             CMP      R5,#+0
   \   00002074   0xD025             BEQ.N    ??RoadBrd_ParseString_365
   2398                                        {
   2399                                          // Yes...Build and Send BLE Response NOW.
   2400                                          sprintf( (char *)tempBffr2, "<STATUS>%s//%s//%s//%s//%s//%s//%s//%s//%s//%s//%s//%s</STATUS>", (char *)GridMeasure.GridEye1.TempC,
   2401                                                  (char *)GridMeasure.GridEye2.TempC,
   2402                                                  (char *)GridMeasure.GridEye3.TempC,
   2403                                                  (char *)GridMeasure.GridEye4.TempC,
   2404                                                  (char *)GridMeasure.GridEye5.TempC,
   2405                                                  (char *)GridMeasure.GridEye6.TempC,
   2406                                                  (char *)GridMeasure.GridEye7.TempC,
   2407                                                  (char *)GridMeasure.GridEye8.TempC,
   2408                                                  (char *)GridMeasure.Thermistor.TempC,
   2409                                                  (char *)TMeasure.TempC,
   2410                                                  (char *)HMeasure.Humidity,
   2411                                                  (char *)PRPMeasure.Pressure);
   \   00002076   0xA8AD             ADD      R0,SP,#+692
   \   00002078   0x9009             STR      R0,[SP, #+36]
   \   0000207A   0xA851             ADD      R0,SP,#+324
   \   0000207C   0x9008             STR      R0,[SP, #+32]
   \   0000207E   0xA83D             ADD      R0,SP,#+244
   \   00002080   0x9007             STR      R0,[SP, #+28]
   \   00002082   0xA856             ADD      R0,SP,#+344
   \   00002084   0x9006             STR      R0,[SP, #+24]
   \   00002086   0xA886             ADD      R0,SP,#+536
   \   00002088   0x9005             STR      R0,[SP, #+20]
   \   0000208A   0xA880             ADD      R0,SP,#+512
   \   0000208C   0x9004             STR      R0,[SP, #+16]
   \   0000208E   0xA87A             ADD      R0,SP,#+488
   \   00002090   0x9003             STR      R0,[SP, #+12]
   \   00002092   0xA874             ADD      R0,SP,#+464
   \   00002094   0x9002             STR      R0,[SP, #+8]
   \   00002096   0xA86E             ADD      R0,SP,#+440
   \   00002098   0x9001             STR      R0,[SP, #+4]
   \   0000209A   0xA868             ADD      R0,SP,#+416
   \   0000209C   0x9000             STR      R0,[SP, #+0]
   \   0000209E   0xAB62             ADD      R3,SP,#+392
   \   000020A0   0xAA5C             ADD      R2,SP,#+368
   \   000020A2   0xF8DF 0x1D7C      LDR.W    R1,??RoadBrd_ParseString_366
   \   000020A6   0xA80A             ADD      R0,SP,#+40
   \   000020A8   0x.... 0x....      BL       sprintf
   2412                                          strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000020AC   0xF8DF 0x1D74      LDR.W    R1,??RoadBrd_ParseString_366+0x4
   \   000020B0   0xA80A             ADD      R0,SP,#+40
   \   000020B2   0x.... 0x....      BL       strcpy
   2413                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000020B6   0xA80A             ADD      R0,SP,#+40
   \   000020B8   0x.... 0x....      BL       strlen
   \   000020BC   0xA90A             ADD      R1,SP,#+40
   \   000020BE   0x.... 0x....      BL       BGM111_Transmit
   2414                                        }
   2415                                        
   2416                                        //sprintf( (char *)tempBffr2, "Driver Status: %04x\r\n", DriverStatus );
   2417                                        sprintf( (char *)tempBffr2, "%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\r\n", (char *)GridMeasure.GridEye1.TempC,
   2418                                                (char *)GridMeasure.GridEye2.TempC,
   2419                                                (char *)GridMeasure.GridEye3.TempC,
   2420                                                (char *)GridMeasure.GridEye4.TempC,
   2421                                                (char *)GridMeasure.GridEye5.TempC,
   2422                                                (char *)GridMeasure.GridEye6.TempC,
   2423                                                (char *)GridMeasure.GridEye7.TempC,
   2424                                                (char *)GridMeasure.GridEye8.TempC,
   2425                                                (char *)GridMeasure.Thermistor.TempC,
   2426                                                (char *)TMeasure.TempC,
   2427                                                (char *)HMeasure.Humidity,
   2428                                                (char *)PRPMeasure.Pressure);
   \                     ??RoadBrd_ParseString_365: (+1)
   \   000020C2   0xA8AD             ADD      R0,SP,#+692
   \   000020C4   0x9009             STR      R0,[SP, #+36]
   \   000020C6   0xA851             ADD      R0,SP,#+324
   \   000020C8   0x9008             STR      R0,[SP, #+32]
   \   000020CA   0xA83D             ADD      R0,SP,#+244
   \   000020CC   0x9007             STR      R0,[SP, #+28]
   \   000020CE   0xA856             ADD      R0,SP,#+344
   \   000020D0   0x9006             STR      R0,[SP, #+24]
   \   000020D2   0xA886             ADD      R0,SP,#+536
   \   000020D4   0x9005             STR      R0,[SP, #+20]
   \   000020D6   0xA880             ADD      R0,SP,#+512
   \   000020D8   0x9004             STR      R0,[SP, #+16]
   \   000020DA   0xA87A             ADD      R0,SP,#+488
   \   000020DC   0x9003             STR      R0,[SP, #+12]
   \   000020DE   0xA874             ADD      R0,SP,#+464
   \   000020E0   0x9002             STR      R0,[SP, #+8]
   \   000020E2   0xA86E             ADD      R0,SP,#+440
   \   000020E4   0x9001             STR      R0,[SP, #+4]
   \   000020E6   0xA868             ADD      R0,SP,#+416
   \   000020E8   0x9000             STR      R0,[SP, #+0]
   \   000020EA   0xAB62             ADD      R3,SP,#+392
   \   000020EC   0xAA5C             ADD      R2,SP,#+368
   \   000020EE   0xF8DF 0x1D38      LDR.W    R1,??RoadBrd_ParseString_366+0x8
   \   000020F2   0xA80A             ADD      R0,SP,#+40
   \   000020F4   0x.... 0x....      BL       sprintf
   2429                                        // Send string to UART..
   2430          #ifdef NUCLEO
   2431                                        Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   2432          #else
   2433                                        Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   000020F8   0xA90A             ADD      R1,SP,#+40
   \   000020FA   0x2000             MOVS     R0,#+0
   \   000020FC   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00002100   0x0006             MOVS     R6,R0
   2434          #endif
   2435                                        if (Status != HAL_OK)
   \   00002102   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002104   0x2E00             CMP      R6,#+0
   \   00002106   0xD003             BEQ.N    ??RoadBrd_ParseString_367
   2436                                          return Status;
   \   00002108   0x0030             MOVS     R0,R6
   \   0000210A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000210C   0xF002 0xBB87      B.W      ??RoadBrd_ParseString_4
   2437                                        // NOW, Build Data String..
   2438                                        sprintf( (char *)tempBffr2, "COMPLETE" );
   \                     ??RoadBrd_ParseString_367: (+1)
   \   00002110   0xF8DF 0x1E28      LDR.W    R1,??RoadBrd_ParseString_368
   \   00002114   0xA80A             ADD      R0,SP,#+40
   \   00002116   0x.... 0x....      BL       sprintf
   \   0000211A   0xF001 0xBE98      B.W      ??RoadBrd_ParseString_369
   \   0000211E   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_216:
   \   00002120   0x........         DC32     ?_34
   2439                                      } // Endif (Status == HAL_OK) RoadBrd_Baro_ReadPressure
   2440                                      else
   2441                                      {
   2442                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_364: (+1)
   \   00002124   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002126   0x2D00             CMP      R5,#+0
   \   00002128   0xD00A             BEQ.N    ??RoadBrd_ParseString_370
   2443                                        {
   2444                                          // Yes...Build and Send BLE Response NOW.
   2445                                          strcpy( (char *)tempBffr2, "<STATUS>CMD_TC_HWERR_PRESSUE</STATUS>");
   \   0000212A   0xF8DF 0x1E14      LDR.W    R1,??RoadBrd_ParseString_368+0x4
   \   0000212E   0xA80A             ADD      R0,SP,#+40
   \   00002130   0x.... 0x....      BL       strcpy
   2446                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002134   0xA80A             ADD      R0,SP,#+40
   \   00002136   0x.... 0x....      BL       strlen
   \   0000213A   0xA90A             ADD      R1,SP,#+40
   \   0000213C   0x.... 0x....      BL       BGM111_Transmit
   2447                                        }
   2448                                        
   2449                                        sprintf( (char *)tempBffr2, "Pressure TASKING ERROR!" );
   \                     ??RoadBrd_ParseString_370: (+1)
   \   00002140   0xF8DF 0x1E00      LDR.W    R1,??RoadBrd_ParseString_368+0x8
   \   00002144   0xA80A             ADD      R0,SP,#+40
   \   00002146   0x.... 0x....      BL       sprintf
   \   0000214A   0xF001 0xBE80      B.W      ??RoadBrd_ParseString_369
   2450                                      } // EndElse (Status == HAL_OK) RoadBrd_Baro_ReadPressure
   2451                                    } // Endif (Status == HAL_OK) RoadBrd_Humidity_ReadHumidity
   2452                                    else
   2453                                    {
   2454                                      if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_363: (+1)
   \   0000214E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002150   0x2D00             CMP      R5,#+0
   \   00002152   0xD00A             BEQ.N    ??RoadBrd_ParseString_371
   2455                                      {
   2456                                        // Yes...Build and Send BLE Response NOW.
   2457                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_TC_HWERR_HUMIDITY</STATUS>");
   \   00002154   0xF8DF 0x1DF0      LDR.W    R1,??RoadBrd_ParseString_368+0xC
   \   00002158   0xA80A             ADD      R0,SP,#+40
   \   0000215A   0x.... 0x....      BL       strcpy
   2458                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000215E   0xA80A             ADD      R0,SP,#+40
   \   00002160   0x.... 0x....      BL       strlen
   \   00002164   0xA90A             ADD      R1,SP,#+40
   \   00002166   0x.... 0x....      BL       BGM111_Transmit
   2459                                      }
   2460                                      
   2461                                      sprintf( (char *)tempBffr2, "Humidity TASKING ERROR!" );
   \                     ??RoadBrd_ParseString_371: (+1)
   \   0000216A   0xF8DF 0x1DE0      LDR.W    R1,??RoadBrd_ParseString_368+0x10
   \   0000216E   0xA80A             ADD      R0,SP,#+40
   \   00002170   0x.... 0x....      BL       sprintf
   \   00002174   0xF001 0xBE6B      B.W      ??RoadBrd_ParseString_369
   \                     ??RoadBrd_ParseString_220:
   \   00002178   0x........         DC32     ?_68
   2462                                    } // EndElse (Status == HAL_OK) RoadBrd_Humidity_ReadHumidity
   2463                                  } // Endif (Status == HAL_OK) RoadBrd_ReadTemp
   2464                                  else
   2465                                  {
   2466                                    if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_362: (+1)
   \   0000217C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000217E   0x2D00             CMP      R5,#+0
   \   00002180   0xD00A             BEQ.N    ??RoadBrd_ParseString_372
   2467                                    {
   2468                                      // Yes...Build and Send BLE Response NOW.
   2469                                      strcpy( (char *)tempBffr2, "<STATUS>CMD_TC_HWERR_TEMPERATURE</STATUS>");
   \   00002182   0xF8DF 0x1DCC      LDR.W    R1,??RoadBrd_ParseString_368+0x14
   \   00002186   0xA80A             ADD      R0,SP,#+40
   \   00002188   0x.... 0x....      BL       strcpy
   2470                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000218C   0xA80A             ADD      R0,SP,#+40
   \   0000218E   0x.... 0x....      BL       strlen
   \   00002192   0xA90A             ADD      R1,SP,#+40
   \   00002194   0x.... 0x....      BL       BGM111_Transmit
   2471                                    }
   2472                                    
   2473                                    sprintf( (char *)tempBffr2, "AMBIENT TEMPERATURE TASKING ERROR!" );
   \                     ??RoadBrd_ParseString_372: (+1)
   \   00002198   0xF8DF 0x1E4C      LDR.W    R1,??RoadBrd_ParseString_373
   \   0000219C   0xA80A             ADD      R0,SP,#+40
   \   0000219E   0x.... 0x....      BL       sprintf
   \   000021A2   0xF001 0xBE54      B.W      ??RoadBrd_ParseString_369
   2474                                  } // EndElse (Status == HAL_OK) RoadBrd_ReadTemp
   2475                                } // Endif (Status == HAL_OK) RoadBrd_CoolEye_ReadValues
   2476                                else
   2477                                {
   2478                                  if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_361: (+1)
   \   000021A6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000021A8   0x2D00             CMP      R5,#+0
   \   000021AA   0xD00A             BEQ.N    ??RoadBrd_ParseString_374
   2479                                  {
   2480                                    // Yes...Build and Send BLE Response NOW.
   2481                                    strcpy( (char *)tempBffr2, "<STATUS>CMD_TC_HWERR_IRTEMP</STATUS>");
   \   000021AC   0xF8DF 0x1E3C      LDR.W    R1,??RoadBrd_ParseString_373+0x4
   \   000021B0   0xA80A             ADD      R0,SP,#+40
   \   000021B2   0x.... 0x....      BL       strcpy
   2482                                    BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000021B6   0xA80A             ADD      R0,SP,#+40
   \   000021B8   0x.... 0x....      BL       strlen
   \   000021BC   0xA90A             ADD      R1,SP,#+40
   \   000021BE   0x.... 0x....      BL       BGM111_Transmit
   2483                                  }
   2484                                  
   2485                                  sprintf( (char *)tempBffr2, "GRID EYE/COOL EYE TASKING ERROR!" );
   \                     ??RoadBrd_ParseString_374: (+1)
   \   000021C2   0xF8DF 0x1E2C      LDR.W    R1,??RoadBrd_ParseString_373+0x8
   \   000021C6   0xA80A             ADD      R0,SP,#+40
   \   000021C8   0x.... 0x....      BL       sprintf
   \   000021CC   0xF001 0xBE3F      B.W      ??RoadBrd_ParseString_369
   \                     ??RoadBrd_ParseString_224:
   \   000021D0   0x........         DC32     ?_69
   2486                                } // EndElse (Status == HAL_OK) RoadBrd_CoolEye_ReadValues
   2487                              }
   2488                              else
   2489                              {
   2490                                switch( tempBffr[2] )
   \                     ??RoadBrd_ParseString_357: (+1)
   \   000021D4   0x78A0             LDRB     R0,[R4, #+2]
   \   000021D6   0x2849             CMP      R0,#+73
   \   000021D8   0xF001 0x860C      BEQ.W    ??RoadBrd_ParseString_375
   \   000021DC   0x2852             CMP      R0,#+82
   \   000021DE   0xF000 0x85E9      BEQ.W    ??RoadBrd_ParseString_376
   \   000021E2   0x2853             CMP      R0,#+83
   \   000021E4   0xD004             BEQ.N    ??RoadBrd_ParseString_377
   \   000021E6   0x2854             CMP      R0,#+84
   \   000021E8   0xF001 0x859F      BEQ.W    ??RoadBrd_ParseString_378
   \   000021EC   0xF001 0xBE2F      B.W      ??RoadBrd_ParseString_369
   2491                                {
   2492                                  //------------------ TCS Command: Calibration Set Command
   2493                                case 'S':
   2494                                  // Step 1. Validate format.
   2495                                  if(tempBffr[3]!=':')
   \                     ??RoadBrd_ParseString_377: (+1)
   \   000021F0   0x78E0             LDRB     R0,[R4, #+3]
   \   000021F2   0x283A             CMP      R0,#+58
   \   000021F4   0xD01A             BEQ.N    ??RoadBrd_ParseString_379
   2496                                  {
   2497                                    // Is this a BLE Operation?
   2498                                    if ( BLE_Flag )
   \   000021F6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000021F8   0x2D00             CMP      R5,#+0
   \   000021FA   0xD00A             BEQ.N    ??RoadBrd_ParseString_380
   2499                                    {
   2500                                      // Yes...Build and Send BLE Response NOW.
   2501                                      strcpy( (char *)tempBffr2, "<STATUS>CMD_TCS_SYNTAX</STATUS>");
   \   000021FC   0xF8DF 0x1DF4      LDR.W    R1,??RoadBrd_ParseString_373+0xC
   \   00002200   0xA80A             ADD      R0,SP,#+40
   \   00002202   0x.... 0x....      BL       strcpy
   2502                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002206   0xA80A             ADD      R0,SP,#+40
   \   00002208   0x.... 0x....      BL       strlen
   \   0000220C   0xA90A             ADD      R1,SP,#+40
   \   0000220E   0x.... 0x....      BL       BGM111_Transmit
   2503                                    }
   2504                                    
   2505                                    strcpy( (char *)tempBffr2, "TCS SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_380: (+1)
   \   00002212   0xF8DF 0x1DE4      LDR.W    R1,??RoadBrd_ParseString_373+0x10
   \   00002216   0xA80A             ADD      R0,SP,#+40
   \   00002218   0x.... 0x....      BL       strcpy
   \   0000221C   0xF000 0xBDC8      B.W      ??RoadBrd_ParseString_381
   \                     ??RoadBrd_ParseString_226:
   \   00002220   0x........         DC32     ?_70
   \   00002224   0x........         DC32     ?_71
   \   00002228   0x........         DC32     ?_72
   2506                                  } // Endif (tempBffr[3]!=':')
   2507                                  else
   2508                                  {
   2509                                    // Is this a BLE Operation?
   2510                                    if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_379: (+1)
   \   0000222C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000222E   0x2D00             CMP      R5,#+0
   \   00002230   0xD00A             BEQ.N    ??RoadBrd_ParseString_382
   2511                                    {
   2512                                      // Yes...Build and Send BLE Response NOW.
   2513                                      strcpy( (char *)tempBffr2, "<STATUS>CMD_TCS_BADPARAM</STATUS>");
   \   00002232   0xF8DF 0x1E5C      LDR.W    R1,??RoadBrd_ParseString_383
   \   00002236   0xA80A             ADD      R0,SP,#+40
   \   00002238   0x.... 0x....      BL       strcpy
   2514                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000223C   0xA80A             ADD      R0,SP,#+40
   \   0000223E   0x.... 0x....      BL       strlen
   \   00002242   0xA90A             ADD      R1,SP,#+40
   \   00002244   0x.... 0x....      BL       BGM111_Transmit
   2515                                    }
   2516                                    
   2517                                    // 2. Verify if remaining string is digits
   2518                                    if (Size <= 4)
   \                     ??RoadBrd_ParseString_382: (+1)
   \   00002248   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000224C   0xF1B8 0x0F05      CMP      R8,#+5
   \   00002250   0xDA1A             BGE.N    ??RoadBrd_ParseString_384
   2519                                    {
   2520                                      // Is this a BLE Operation?
   2521                                      if ( BLE_Flag )
   \   00002252   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002254   0x2D00             CMP      R5,#+0
   \   00002256   0xD00A             BEQ.N    ??RoadBrd_ParseString_385
   2522                                      {
   2523                                        // Yes...Build and Send BLE Response NOW.
   2524                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_TCS_BADPARAM</STATUS>");
   \   00002258   0xF8DF 0x1E34      LDR.W    R1,??RoadBrd_ParseString_383
   \   0000225C   0xA80A             ADD      R0,SP,#+40
   \   0000225E   0x.... 0x....      BL       strcpy
   2525                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002262   0xA80A             ADD      R0,SP,#+40
   \   00002264   0x.... 0x....      BL       strlen
   \   00002268   0xA90A             ADD      R1,SP,#+40
   \   0000226A   0x.... 0x....      BL       BGM111_Transmit
   2526                                      }
   2527                                      strcpy( (char *)tempBffr2, "TCS SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_385: (+1)
   \   0000226E   0xF8DF 0x1E24      LDR.W    R1,??RoadBrd_ParseString_383+0x4
   \   00002272   0xA80A             ADD      R0,SP,#+40
   \   00002274   0x.... 0x....      BL       strcpy
   \   00002278   0xF000 0xBD9A      B.W      ??RoadBrd_ParseString_381
   \                     ??RoadBrd_ParseString_229:
   \   0000227C   0x........         DC32     ?_73
   \   00002280   0x........         DC32     ?_74
   \   00002284   0x........         DC32     ?_75
   2528                                    } // EndIf (Size > 4)
   2529                                    else
   2530                                    {
   2531                                      // 3. Grab remaining string and convert to integer.
   2532                                      tempPstr = &tempBffr[4];
   \                     ??RoadBrd_ParseString_384: (+1)
   \   00002288   0x1D20             ADDS     R0,R4,#+4
   \   0000228A   0x9030             STR      R0,[SP, #+192]
   2533                                      strcpy(tempstr, tempPstr);
   \   0000228C   0x9930             LDR      R1,[SP, #+192]
   \   0000228E   0xA848             ADD      R0,SP,#+288
   \   00002290   0x.... 0x....      BL       strcpy
   2534                                      // Time to parse and test remaining string
   2535                                      Scale = 0.0;
   \   00002294   0x2000             MOVS     R0,#+0
   \   00002296   0x9029             STR      R0,[SP, #+164]
   2536                                      Offset = 0.0;
   \   00002298   0x2000             MOVS     R0,#+0
   \   0000229A   0x9028             STR      R0,[SP, #+160]
   2537                                      if (sscanf (tempstr, "%s %f %f", uuid, &Scale, &Offset) == 3)
   \   0000229C   0xA828             ADD      R0,SP,#+160
   \   0000229E   0x9000             STR      R0,[SP, #+0]
   \   000022A0   0xAB29             ADD      R3,SP,#+164
   \   000022A2   0xAA36             ADD      R2,SP,#+216
   \   000022A4   0xF8DF 0x1DF0      LDR.W    R1,??RoadBrd_ParseString_383+0x8
   \   000022A8   0xA848             ADD      R0,SP,#+288
   \   000022AA   0x.... 0x....      BL       sscanf
   \   000022AE   0x2803             CMP      R0,#+3
   \   000022B0   0xF040 0x8579      BNE.W    ??RoadBrd_ParseString_386
   2538                                      {
   2539                                        sprintf( (char *)tempBffr2, "Parms: %s, %f, %f.\r\n", uuid, Scale, Offset );
   \   000022B4   0x9828             LDR      R0,[SP, #+160]
   \   000022B6   0x.... 0x....      BL       __aeabi_f2d
   \   000022BA   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000022BE   0x9829             LDR      R0,[SP, #+164]
   \   000022C0   0x.... 0x....      BL       __aeabi_f2d
   \   000022C4   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000022C8   0xAA36             ADD      R2,SP,#+216
   \   000022CA   0xF8DF 0x1DD0      LDR.W    R1,??RoadBrd_ParseString_383+0xC
   \   000022CE   0xA80A             ADD      R0,SP,#+40
   \   000022D0   0x.... 0x....      BL       sprintf
   2540                                        // OK, We have 3 good parameters... NOW Need to determine if UUID is good.
   2541                                        if (strncmp((char *)uuid,"0002",4) == 0) // Shnt_Vltg
   \   000022D4   0x2204             MOVS     R2,#+4
   \   000022D6   0xF8DF 0x1E5C      LDR.W    R1,??RoadBrd_ParseString_387
   \   000022DA   0xA836             ADD      R0,SP,#+216
   \   000022DC   0x.... 0x....      BL       strncmp
   \   000022E0   0x2800             CMP      R0,#+0
   \   000022E2   0xD138             BNE.N    ??RoadBrd_ParseString_388
   2542                                        {
   2543                                          Status = RoadBrd_CAL_Set_CalItem( CAL_SHNT_VLTG, Offset, Scale);
   \   000022E4   0x9A29             LDR      R2,[SP, #+164]
   \   000022E6   0x9928             LDR      R1,[SP, #+160]
   \   000022E8   0x2000             MOVS     R0,#+0
   \   000022EA   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   000022EE   0x0006             MOVS     R6,R0
   2544                                          if (Status == HAL_OK)
   \   000022F0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000022F2   0x2E00             CMP      R6,#+0
   \   000022F4   0xD11A             BNE.N    ??RoadBrd_ParseString_389
   2545                                          {
   2546                                            // Is this a BLE Operation?
   2547                                            if ( BLE_Flag )
   \   000022F6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000022F8   0x2D00             CMP      R5,#+0
   \   000022FA   0xD00A             BEQ.N    ??RoadBrd_ParseString_390
   2548                                            {
   2549                                              // Yes...Build and Send BLE Response NOW.
   2550                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_SHNT_VLTG</STATUS>");
   \   000022FC   0xF8DF 0x1E38      LDR.W    R1,??RoadBrd_ParseString_387+0x4
   \   00002300   0xA80A             ADD      R0,SP,#+40
   \   00002302   0x.... 0x....      BL       strcpy
   2551                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002306   0xA80A             ADD      R0,SP,#+40
   \   00002308   0x.... 0x....      BL       strlen
   \   0000230C   0xA90A             ADD      R1,SP,#+40
   \   0000230E   0x.... 0x....      BL       BGM111_Transmit
   2552                                            }
   2553                                            sprintf( (char *)tempBffr2, "Shnt_Vltg Set COMPLETE.\r\n" );
   \                     ??RoadBrd_ParseString_390: (+1)
   \   00002312   0xF8DF 0x1E28      LDR.W    R1,??RoadBrd_ParseString_387+0x8
   \   00002316   0xA80A             ADD      R0,SP,#+40
   \   00002318   0x.... 0x....      BL       sprintf
   \   0000231C   0xF000 0xBD40      B.W      ??RoadBrd_ParseString_391
   \                     ??RoadBrd_ParseString_242:
   \   00002320   0x........         DC32     ?_76
   \   00002324   0x25 0x78          DC8      "%x."
   \              0x2E 0x00    
   \   00002328   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
   2554                                          }
   2555                                          else
   2556                                          {
   2557                                            // Is this a BLE Operation?
   2558                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_389: (+1)
   \   0000232C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000232E   0x2D00             CMP      R5,#+0
   \   00002330   0xD00A             BEQ.N    ??RoadBrd_ParseString_392
   2559                                            {
   2560                                              // Yes...Build and Send BLE Response NOW.
   2561                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_SHNT_VLTG_ERR</STATUS>");
   \   00002332   0xF8DF 0x1E0C      LDR.W    R1,??RoadBrd_ParseString_387+0xC
   \   00002336   0xA80A             ADD      R0,SP,#+40
   \   00002338   0x.... 0x....      BL       strcpy
   2562                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000233C   0xA80A             ADD      R0,SP,#+40
   \   0000233E   0x.... 0x....      BL       strlen
   \   00002342   0xA90A             ADD      R1,SP,#+40
   \   00002344   0x.... 0x....      BL       BGM111_Transmit
   2563                                            }
   2564                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_392: (+1)
   \   00002348   0xF8DF 0x1DF8      LDR.W    R1,??RoadBrd_ParseString_387+0x10
   \   0000234C   0xA80A             ADD      R0,SP,#+40
   \   0000234E   0x.... 0x....      BL       sprintf
   \   00002352   0xF000 0xBD25      B.W      ??RoadBrd_ParseString_391
   2565                                          }
   2566                                        }
   2567                                        else if (strncmp((char *)uuid,"0004",4) == 0) // Current
   \                     ??RoadBrd_ParseString_388: (+1)
   \   00002356   0x2204             MOVS     R2,#+4
   \   00002358   0xF8DF 0x1DEC      LDR.W    R1,??RoadBrd_ParseString_387+0x14
   \   0000235C   0xA836             ADD      R0,SP,#+216
   \   0000235E   0x.... 0x....      BL       strncmp
   \   00002362   0x2800             CMP      R0,#+0
   \   00002364   0xD139             BNE.N    ??RoadBrd_ParseString_393
   2568                                        {
   2569                                          Status = RoadBrd_CAL_Set_CalItem( CAL_CURRENT, Offset, Scale);
   \   00002366   0x9A29             LDR      R2,[SP, #+164]
   \   00002368   0x9928             LDR      R1,[SP, #+160]
   \   0000236A   0x2001             MOVS     R0,#+1
   \   0000236C   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002370   0x0006             MOVS     R6,R0
   2570                                          if (Status == HAL_OK)
   \   00002372   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002374   0x2E00             CMP      R6,#+0
   \   00002376   0xD11B             BNE.N    ??RoadBrd_ParseString_394
   2571                                          {
   2572                                            // Is this a BLE Operation?
   2573                                            if ( BLE_Flag )
   \   00002378   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000237A   0x2D00             CMP      R5,#+0
   \   0000237C   0xD00A             BEQ.N    ??RoadBrd_ParseString_395
   2574                                            {
   2575                                              // Yes...Build and Send BLE Response NOW.
   2576                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_CURRENT</STATUS>");
   \   0000237E   0xF8DF 0x1E60      LDR.W    R1,??RoadBrd_ParseString_396
   \   00002382   0xA80A             ADD      R0,SP,#+40
   \   00002384   0x.... 0x....      BL       strcpy
   2577                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002388   0xA80A             ADD      R0,SP,#+40
   \   0000238A   0x.... 0x....      BL       strlen
   \   0000238E   0xA90A             ADD      R1,SP,#+40
   \   00002390   0x.... 0x....      BL       BGM111_Transmit
   2578                                            }
   2579                                            sprintf( (char *)tempBffr2, "Current Set COMPLETE." );
   \                     ??RoadBrd_ParseString_395: (+1)
   \   00002394   0xF8DF 0x1E4C      LDR.W    R1,??RoadBrd_ParseString_396+0x4
   \   00002398   0xA80A             ADD      R0,SP,#+40
   \   0000239A   0x.... 0x....      BL       sprintf
   \   0000239E   0xF000 0xBCFF      B.W      ??RoadBrd_ParseString_391
   \   000023A2   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_245:
   \   000023A4   0x........         DC32     ?_77
   \   000023A8   0x........         DC32     ?_78
   \   000023AC   0x........         DC32     ?_79
   2580                                          }
   2581                                          else
   2582                                          {
   2583                                            // Is this a BLE Operation?
   2584                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_394: (+1)
   \   000023B0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000023B2   0x2D00             CMP      R5,#+0
   \   000023B4   0xD00A             BEQ.N    ??RoadBrd_ParseString_397
   2585                                            {
   2586                                              // Yes...Build and Send BLE Response NOW.
   2587                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_CURRENT_ERR</STATUS>");
   \   000023B6   0xF8DF 0x1E30      LDR.W    R1,??RoadBrd_ParseString_396+0x8
   \   000023BA   0xA80A             ADD      R0,SP,#+40
   \   000023BC   0x.... 0x....      BL       strcpy
   2588                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000023C0   0xA80A             ADD      R0,SP,#+40
   \   000023C2   0x.... 0x....      BL       strlen
   \   000023C6   0xA90A             ADD      R1,SP,#+40
   \   000023C8   0x.... 0x....      BL       BGM111_Transmit
   2589                                            }
   2590                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_397: (+1)
   \   000023CC   0xF8DF 0x1D74      LDR.W    R1,??RoadBrd_ParseString_387+0x10
   \   000023D0   0xA80A             ADD      R0,SP,#+40
   \   000023D2   0x.... 0x....      BL       sprintf
   \   000023D6   0xF000 0xBCE3      B.W      ??RoadBrd_ParseString_391
   2591                                          }
   2592                                        }
   2593                                        else if (strncmp((char *)uuid,"0006",4) == 0) // Power
   \                     ??RoadBrd_ParseString_393: (+1)
   \   000023DA   0x2204             MOVS     R2,#+4
   \   000023DC   0xF8DF 0x1E0C      LDR.W    R1,??RoadBrd_ParseString_396+0xC
   \   000023E0   0xA836             ADD      R0,SP,#+216
   \   000023E2   0x.... 0x....      BL       strncmp
   \   000023E6   0x2800             CMP      R0,#+0
   \   000023E8   0xD139             BNE.N    ??RoadBrd_ParseString_398
   2594                                        {
   2595                                          Status = RoadBrd_CAL_Set_CalItem( CAL_POWER, Offset, Scale);
   \   000023EA   0x9A29             LDR      R2,[SP, #+164]
   \   000023EC   0x9928             LDR      R1,[SP, #+160]
   \   000023EE   0x2002             MOVS     R0,#+2
   \   000023F0   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   000023F4   0x0006             MOVS     R6,R0
   2596                                          if (Status == HAL_OK)
   \   000023F6   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000023F8   0x2E00             CMP      R6,#+0
   \   000023FA   0xD11B             BNE.N    ??RoadBrd_ParseString_399
   2597                                          {
   2598                                            // Is this a BLE Operation?
   2599                                            if ( BLE_Flag )
   \   000023FC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000023FE   0x2D00             CMP      R5,#+0
   \   00002400   0xD00A             BEQ.N    ??RoadBrd_ParseString_400
   2600                                            {
   2601                                              // Yes...Build and Send BLE Response NOW.
   2602                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_POWER</STATUS>");
   \   00002402   0xF8DF 0x1DEC      LDR.W    R1,??RoadBrd_ParseString_396+0x10
   \   00002406   0xA80A             ADD      R0,SP,#+40
   \   00002408   0x.... 0x....      BL       strcpy
   2603                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000240C   0xA80A             ADD      R0,SP,#+40
   \   0000240E   0x.... 0x....      BL       strlen
   \   00002412   0xA90A             ADD      R1,SP,#+40
   \   00002414   0x.... 0x....      BL       BGM111_Transmit
   2604                                            }
   2605                                            sprintf( (char *)tempBffr2, "Power Set COMPLETE." );
   \                     ??RoadBrd_ParseString_400: (+1)
   \   00002418   0xF8DF 0x1E6C      LDR.W    R1,??RoadBrd_ParseString_401
   \   0000241C   0xA80A             ADD      R0,SP,#+40
   \   0000241E   0x.... 0x....      BL       sprintf
   \   00002422   0xF000 0xBCBD      B.W      ??RoadBrd_ParseString_391
   \   00002426   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_251:
   \   00002428   0x........         DC32     ?_80
   \   0000242C   0x........         DC32     ?_81
   \   00002430   0x........         DC32     ?_82
   2606                                          }
   2607                                          else
   2608                                          {
   2609                                            // Is this a BLE Operation?
   2610                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_399: (+1)
   \   00002434   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002436   0x2D00             CMP      R5,#+0
   \   00002438   0xD00A             BEQ.N    ??RoadBrd_ParseString_402
   2611                                            {
   2612                                              // Yes...Build and Send BLE Response NOW.
   2613                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_POWER_ERR</STATUS>");
   \   0000243A   0xF8DF 0x1E50      LDR.W    R1,??RoadBrd_ParseString_401+0x4
   \   0000243E   0xA80A             ADD      R0,SP,#+40
   \   00002440   0x.... 0x....      BL       strcpy
   2614                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002444   0xA80A             ADD      R0,SP,#+40
   \   00002446   0x.... 0x....      BL       strlen
   \   0000244A   0xA90A             ADD      R1,SP,#+40
   \   0000244C   0x.... 0x....      BL       BGM111_Transmit
   2615                                            }
   2616                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_402: (+1)
   \   00002450   0xF8DF 0x1CF0      LDR.W    R1,??RoadBrd_ParseString_387+0x10
   \   00002454   0xA80A             ADD      R0,SP,#+40
   \   00002456   0x.... 0x....      BL       sprintf
   \   0000245A   0xF000 0xBCA1      B.W      ??RoadBrd_ParseString_391
   2617                                          }
   2618                                        }
   2619                                        else if (strncmp((char *)uuid,"0008",4) == 0) // Voltage
   \                     ??RoadBrd_ParseString_398: (+1)
   \   0000245E   0x2204             MOVS     R2,#+4
   \   00002460   0xF8DF 0x1E2C      LDR.W    R1,??RoadBrd_ParseString_401+0x8
   \   00002464   0xA836             ADD      R0,SP,#+216
   \   00002466   0x.... 0x....      BL       strncmp
   \   0000246A   0x2800             CMP      R0,#+0
   \   0000246C   0xD139             BNE.N    ??RoadBrd_ParseString_403
   2620                                        {
   2621                                          Status = RoadBrd_CAL_Set_CalItem( CAL_VOLTAGE, Offset, Scale);
   \   0000246E   0x9A29             LDR      R2,[SP, #+164]
   \   00002470   0x9928             LDR      R1,[SP, #+160]
   \   00002472   0x2003             MOVS     R0,#+3
   \   00002474   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002478   0x0006             MOVS     R6,R0
   2622                                          if (Status == HAL_OK)
   \   0000247A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000247C   0x2E00             CMP      R6,#+0
   \   0000247E   0xD11B             BNE.N    ??RoadBrd_ParseString_404
   2623                                          {
   2624                                            // Is this a BLE Operation?
   2625                                            if ( BLE_Flag )
   \   00002480   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002482   0x2D00             CMP      R5,#+0
   \   00002484   0xD00A             BEQ.N    ??RoadBrd_ParseString_405
   2626                                            {
   2627                                              // Yes...Build and Send BLE Response NOW.
   2628                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_VOLTAGE</STATUS>");
   \   00002486   0xF8DF 0x1E0C      LDR.W    R1,??RoadBrd_ParseString_401+0xC
   \   0000248A   0xA80A             ADD      R0,SP,#+40
   \   0000248C   0x.... 0x....      BL       strcpy
   2629                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002490   0xA80A             ADD      R0,SP,#+40
   \   00002492   0x.... 0x....      BL       strlen
   \   00002496   0xA90A             ADD      R1,SP,#+40
   \   00002498   0x.... 0x....      BL       BGM111_Transmit
   2630                                            }
   2631                                            sprintf( (char *)tempBffr2, "Voltage Set COMPLETE." );
   \                     ??RoadBrd_ParseString_405: (+1)
   \   0000249C   0xF8DF 0x1DF8      LDR.W    R1,??RoadBrd_ParseString_401+0x10
   \   000024A0   0xA80A             ADD      R0,SP,#+40
   \   000024A2   0x.... 0x....      BL       sprintf
   \   000024A6   0xF000 0xBC7B      B.W      ??RoadBrd_ParseString_391
   \   000024AA   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_255:
   \   000024AC   0x........         DC32     ?_83
   \   000024B0   0x........         DC32     ?_84
   \   000024B4   0x........         DC32     ?_85
   2632                                          }
   2633                                          else
   2634                                          {
   2635                                            // Is this a BLE Operation?
   2636                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_404: (+1)
   \   000024B8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000024BA   0x2D00             CMP      R5,#+0
   \   000024BC   0xD00A             BEQ.N    ??RoadBrd_ParseString_406
   2637                                            {
   2638                                              // Yes...Build and Send BLE Response NOW.
   2639                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_VOLTAGE_ERR</STATUS>");
   \   000024BE   0xF8DF 0x1E70      LDR.W    R1,??RoadBrd_ParseString_407
   \   000024C2   0xA80A             ADD      R0,SP,#+40
   \   000024C4   0x.... 0x....      BL       strcpy
   2640                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000024C8   0xA80A             ADD      R0,SP,#+40
   \   000024CA   0x.... 0x....      BL       strlen
   \   000024CE   0xA90A             ADD      R1,SP,#+40
   \   000024D0   0x.... 0x....      BL       BGM111_Transmit
   2641                                            }
   2642                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_406: (+1)
   \   000024D4   0xF8DF 0x1C6C      LDR.W    R1,??RoadBrd_ParseString_387+0x10
   \   000024D8   0xA80A             ADD      R0,SP,#+40
   \   000024DA   0x.... 0x....      BL       sprintf
   \   000024DE   0xF000 0xBC5F      B.W      ??RoadBrd_ParseString_391
   2643                                          }
   2644                                        }
   2645                                        else if (strncmp((char *)uuid,"000A",4) == 0) // TempC
   \                     ??RoadBrd_ParseString_403: (+1)
   \   000024E2   0x2204             MOVS     R2,#+4
   \   000024E4   0xF8DF 0x1E4C      LDR.W    R1,??RoadBrd_ParseString_407+0x4
   \   000024E8   0xA836             ADD      R0,SP,#+216
   \   000024EA   0x.... 0x....      BL       strncmp
   \   000024EE   0x2800             CMP      R0,#+0
   \   000024F0   0xD139             BNE.N    ??RoadBrd_ParseString_408
   2646                                        {
   2647                                          Status = RoadBrd_CAL_Set_CalItem( CAL_TEMPC, Offset, Scale);
   \   000024F2   0x9A29             LDR      R2,[SP, #+164]
   \   000024F4   0x9928             LDR      R1,[SP, #+160]
   \   000024F6   0x2004             MOVS     R0,#+4
   \   000024F8   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   000024FC   0x0006             MOVS     R6,R0
   2648                                          if (Status == HAL_OK)
   \   000024FE   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002500   0x2E00             CMP      R6,#+0
   \   00002502   0xD11B             BNE.N    ??RoadBrd_ParseString_409
   2649                                          {
   2650                                            // Is this a BLE Operation?
   2651                                            if ( BLE_Flag )
   \   00002504   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002506   0x2D00             CMP      R5,#+0
   \   00002508   0xD00A             BEQ.N    ??RoadBrd_ParseString_410
   2652                                            {
   2653                                              // Yes...Build and Send BLE Response NOW.
   2654                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_TEMPC</STATUS>");
   \   0000250A   0xF8DF 0x1E2C      LDR.W    R1,??RoadBrd_ParseString_407+0x8
   \   0000250E   0xA80A             ADD      R0,SP,#+40
   \   00002510   0x.... 0x....      BL       strcpy
   2655                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002514   0xA80A             ADD      R0,SP,#+40
   \   00002516   0x.... 0x....      BL       strlen
   \   0000251A   0xA90A             ADD      R1,SP,#+40
   \   0000251C   0x.... 0x....      BL       BGM111_Transmit
   2656                                            }
   2657                                            sprintf( (char *)tempBffr2, "TempC Set COMPLETE." );
   \                     ??RoadBrd_ParseString_410: (+1)
   \   00002520   0xF8DF 0x1E18      LDR.W    R1,??RoadBrd_ParseString_407+0xC
   \   00002524   0xA80A             ADD      R0,SP,#+40
   \   00002526   0x.... 0x....      BL       sprintf
   \   0000252A   0xF000 0xBC39      B.W      ??RoadBrd_ParseString_391
   \   0000252E   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_259:
   \   00002530   0x........         DC32     ?_86
   \   00002534   0x........         DC32     ?_87
   \   00002538   0x........         DC32     ?_88
   2658                                          }
   2659                                          else
   2660                                          {
   2661                                            // Is this a BLE Operation?
   2662                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_409: (+1)
   \   0000253C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000253E   0x2D00             CMP      R5,#+0
   \   00002540   0xD00A             BEQ.N    ??RoadBrd_ParseString_411
   2663                                            {
   2664                                              // Yes...Build and Send BLE Response NOW.
   2665                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_TEMPC_ERR</STATUS>");
   \   00002542   0xF8DF 0x1DFC      LDR.W    R1,??RoadBrd_ParseString_407+0x10
   \   00002546   0xA80A             ADD      R0,SP,#+40
   \   00002548   0x.... 0x....      BL       strcpy
   2666                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000254C   0xA80A             ADD      R0,SP,#+40
   \   0000254E   0x.... 0x....      BL       strlen
   \   00002552   0xA90A             ADD      R1,SP,#+40
   \   00002554   0x.... 0x....      BL       BGM111_Transmit
   2667                                            }
   2668                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_411: (+1)
   \   00002558   0xF8DF 0x1BE8      LDR.W    R1,??RoadBrd_ParseString_387+0x10
   \   0000255C   0xA80A             ADD      R0,SP,#+40
   \   0000255E   0x.... 0x....      BL       sprintf
   \   00002562   0xF000 0xBC1D      B.W      ??RoadBrd_ParseString_391
   2669                                          }
   2670                                        }
   2671                                        else if (strncmp((char *)uuid,"000B",4) == 0) // TempF
   \                     ??RoadBrd_ParseString_408: (+1)
   \   00002566   0x2204             MOVS     R2,#+4
   \   00002568   0xF8DF 0x1E6C      LDR.W    R1,??RoadBrd_ParseString_412
   \   0000256C   0xA836             ADD      R0,SP,#+216
   \   0000256E   0x.... 0x....      BL       strncmp
   \   00002572   0x2800             CMP      R0,#+0
   \   00002574   0xD131             BNE.N    ??RoadBrd_ParseString_413
   2672                                        {
   2673                                          Status = RoadBrd_CAL_Set_CalItem( CAL_TEMPF, Offset, Scale);
   \   00002576   0x9A29             LDR      R2,[SP, #+164]
   \   00002578   0x9928             LDR      R1,[SP, #+160]
   \   0000257A   0x2005             MOVS     R0,#+5
   \   0000257C   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002580   0x0006             MOVS     R6,R0
   2674                                          if (Status == HAL_OK)
   \   00002582   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002584   0x2E00             CMP      R6,#+0
   \   00002586   0xD114             BNE.N    ??RoadBrd_ParseString_414
   2675                                          {
   2676                                            // Is this a BLE Operation?
   2677                                            if ( BLE_Flag )
   \   00002588   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000258A   0x2D00             CMP      R5,#+0
   \   0000258C   0xD00A             BEQ.N    ??RoadBrd_ParseString_415
   2678                                            {
   2679                                              // Yes...Build and Send BLE Response NOW.
   2680                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_TEMPF</STATUS>");
   \   0000258E   0xF8DF 0x1E4C      LDR.W    R1,??RoadBrd_ParseString_412+0x4
   \   00002592   0xA80A             ADD      R0,SP,#+40
   \   00002594   0x.... 0x....      BL       strcpy
   2681                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002598   0xA80A             ADD      R0,SP,#+40
   \   0000259A   0x.... 0x....      BL       strlen
   \   0000259E   0xA90A             ADD      R1,SP,#+40
   \   000025A0   0x.... 0x....      BL       BGM111_Transmit
   2682                                            }
   2683                                            sprintf( (char *)tempBffr2, "TempF Set COMPLETE." );
   \                     ??RoadBrd_ParseString_415: (+1)
   \   000025A4   0xF8DF 0x1E38      LDR.W    R1,??RoadBrd_ParseString_412+0x8
   \   000025A8   0xA80A             ADD      R0,SP,#+40
   \   000025AA   0x.... 0x....      BL       sprintf
   \   000025AE   0xF000 0xBBF7      B.W      ??RoadBrd_ParseString_391
   2684                                          }
   2685                                          else
   2686                                          {
   2687                                            // Is this a BLE Operation?
   2688                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_414: (+1)
   \   000025B2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000025B4   0x2D00             CMP      R5,#+0
   \   000025B6   0xD00A             BEQ.N    ??RoadBrd_ParseString_416
   2689                                            {
   2690                                              // Yes...Build and Send BLE Response NOW.
   2691                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_TEMPF_ERR</STATUS>");
   \   000025B8   0xF8DF 0x1E28      LDR.W    R1,??RoadBrd_ParseString_412+0xC
   \   000025BC   0xA80A             ADD      R0,SP,#+40
   \   000025BE   0x.... 0x....      BL       strcpy
   2692                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000025C2   0xA80A             ADD      R0,SP,#+40
   \   000025C4   0x.... 0x....      BL       strlen
   \   000025C8   0xA90A             ADD      R1,SP,#+40
   \   000025CA   0x.... 0x....      BL       BGM111_Transmit
   2693                                            }
   2694                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_416: (+1)
   \   000025CE   0xF8DF 0x1B74      LDR.W    R1,??RoadBrd_ParseString_387+0x10
   \   000025D2   0xA80A             ADD      R0,SP,#+40
   \   000025D4   0x.... 0x....      BL       sprintf
   \   000025D8   0xE3E2             B.N      ??RoadBrd_ParseString_391
   2695                                          }
   2696                                        }
   2697                                        else if (strncmp((char *)uuid,"0011",4) == 0) // Pressure
   \                     ??RoadBrd_ParseString_413: (+1)
   \   000025DA   0x2204             MOVS     R2,#+4
   \   000025DC   0xF8DF 0x1E08      LDR.W    R1,??RoadBrd_ParseString_412+0x10
   \   000025E0   0xA836             ADD      R0,SP,#+216
   \   000025E2   0x.... 0x....      BL       strncmp
   \   000025E6   0x2800             CMP      R0,#+0
   \   000025E8   0xD130             BNE.N    ??RoadBrd_ParseString_417
   2698                                        {
   2699                                          Status = RoadBrd_CAL_Set_CalItem( CAL_PRESSURE, Offset, Scale);
   \   000025EA   0x9A29             LDR      R2,[SP, #+164]
   \   000025EC   0x9928             LDR      R1,[SP, #+160]
   \   000025EE   0x2006             MOVS     R0,#+6
   \   000025F0   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   000025F4   0x0006             MOVS     R6,R0
   2700                                          if (Status == HAL_OK)
   \   000025F6   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000025F8   0x2E00             CMP      R6,#+0
   \   000025FA   0xD113             BNE.N    ??RoadBrd_ParseString_418
   2701                                          {
   2702                                            // Is this a BLE Operation?
   2703                                            if ( BLE_Flag )
   \   000025FC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000025FE   0x2D00             CMP      R5,#+0
   \   00002600   0xD00A             BEQ.N    ??RoadBrd_ParseString_419
   2704                                            {
   2705                                              // Yes...Build and Send BLE Response NOW.
   2706                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_PRESSURE</STATUS>");
   \   00002602   0xF8DF 0x1E7C      LDR.W    R1,??RoadBrd_ParseString_420
   \   00002606   0xA80A             ADD      R0,SP,#+40
   \   00002608   0x.... 0x....      BL       strcpy
   2707                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000260C   0xA80A             ADD      R0,SP,#+40
   \   0000260E   0x.... 0x....      BL       strlen
   \   00002612   0xA90A             ADD      R1,SP,#+40
   \   00002614   0x.... 0x....      BL       BGM111_Transmit
   2708                                            }
   2709                                            sprintf( (char *)tempBffr2, "Pressure Set COMPLETE." );
   \                     ??RoadBrd_ParseString_419: (+1)
   \   00002618   0xF8DF 0x1E68      LDR.W    R1,??RoadBrd_ParseString_420+0x4
   \   0000261C   0xA80A             ADD      R0,SP,#+40
   \   0000261E   0x.... 0x....      BL       sprintf
   \   00002622   0xE3BD             B.N      ??RoadBrd_ParseString_391
   2710                                          }
   2711                                          else
   2712                                          {
   2713                                            // Is this a BLE Operation?
   2714                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_418: (+1)
   \   00002624   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002626   0x2D00             CMP      R5,#+0
   \   00002628   0xD00A             BEQ.N    ??RoadBrd_ParseString_421
   2715                                            {
   2716                                              // Yes...Build and Send BLE Response NOW.
   2717                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_PRESSURE_ERR</STATUS>");
   \   0000262A   0xF8DF 0x1E5C      LDR.W    R1,??RoadBrd_ParseString_420+0x8
   \   0000262E   0xA80A             ADD      R0,SP,#+40
   \   00002630   0x.... 0x....      BL       strcpy
   2718                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002634   0xA80A             ADD      R0,SP,#+40
   \   00002636   0x.... 0x....      BL       strlen
   \   0000263A   0xA90A             ADD      R1,SP,#+40
   \   0000263C   0x.... 0x....      BL       BGM111_Transmit
   2719                                            }
   2720                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_421: (+1)
   \   00002640   0xF8DF 0x1B00      LDR.W    R1,??RoadBrd_ParseString_387+0x10
   \   00002644   0xA80A             ADD      R0,SP,#+40
   \   00002646   0x.... 0x....      BL       sprintf
   \   0000264A   0xE3A9             B.N      ??RoadBrd_ParseString_391
   2721                                          }
   2722                                        }
   2723                                        else if (strncmp((char *)uuid,"0030",4) == 0) // Humidity
   \                     ??RoadBrd_ParseString_417: (+1)
   \   0000264C   0x2204             MOVS     R2,#+4
   \   0000264E   0xF8DF 0x1E3C      LDR.W    R1,??RoadBrd_ParseString_420+0xC
   \   00002652   0xA836             ADD      R0,SP,#+216
   \   00002654   0x.... 0x....      BL       strncmp
   \   00002658   0x2800             CMP      R0,#+0
   \   0000265A   0xD135             BNE.N    ??RoadBrd_ParseString_422
   2724                                        {
   2725                                          Status = RoadBrd_CAL_Set_CalItem( CAL_HUMIDITY, Offset, Scale);
   \   0000265C   0x9A29             LDR      R2,[SP, #+164]
   \   0000265E   0x9928             LDR      R1,[SP, #+160]
   \   00002660   0x2007             MOVS     R0,#+7
   \   00002662   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002666   0x0006             MOVS     R6,R0
   2726                                          if (Status == HAL_OK)
   \   00002668   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000266A   0x2E00             CMP      R6,#+0
   \   0000266C   0xD118             BNE.N    ??RoadBrd_ParseString_423
   2727                                          {
   2728                                            // Is this a BLE Operation?
   2729                                            if ( BLE_Flag )
   \   0000266E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002670   0x2D00             CMP      R5,#+0
   \   00002672   0xD00A             BEQ.N    ??RoadBrd_ParseString_424
   2730                                            {
   2731                                              // Yes...Build and Send BLE Response NOW.
   2732                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_HUMIDITY</STATUS>");
   \   00002674   0xF8DF 0x1E18      LDR.W    R1,??RoadBrd_ParseString_420+0x10
   \   00002678   0xA80A             ADD      R0,SP,#+40
   \   0000267A   0x.... 0x....      BL       strcpy
   2733                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000267E   0xA80A             ADD      R0,SP,#+40
   \   00002680   0x.... 0x....      BL       strlen
   \   00002684   0xA90A             ADD      R1,SP,#+40
   \   00002686   0x.... 0x....      BL       BGM111_Transmit
   2734                                            }
   2735                                            sprintf( (char *)tempBffr2, "Humidity Set COMPLETE." );
   \                     ??RoadBrd_ParseString_424: (+1)
   \   0000268A   0xF8DF 0x1E98      LDR.W    R1,??RoadBrd_ParseString_425
   \   0000268E   0xA80A             ADD      R0,SP,#+40
   \   00002690   0x.... 0x....      BL       sprintf
   \   00002694   0xE384             B.N      ??RoadBrd_ParseString_391
   \   00002696   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_268:
   \   00002698   0x........         DC32     ?_89
   \   0000269C   0x........         DC32     ?_90
   2736                                          }
   2737                                          else
   2738                                          {
   2739                                            // Is this a BLE Operation?
   2740                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_423: (+1)
   \   000026A0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000026A2   0x2D00             CMP      R5,#+0
   \   000026A4   0xD00A             BEQ.N    ??RoadBrd_ParseString_426
   2741                                            {
   2742                                              // Yes...Build and Send BLE Response NOW.
   2743                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_HUMIDITY_ERR</STATUS>");
   \   000026A6   0xF8DF 0x1E80      LDR.W    R1,??RoadBrd_ParseString_425+0x4
   \   000026AA   0xA80A             ADD      R0,SP,#+40
   \   000026AC   0x.... 0x....      BL       strcpy
   2744                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000026B0   0xA80A             ADD      R0,SP,#+40
   \   000026B2   0x.... 0x....      BL       strlen
   \   000026B6   0xA90A             ADD      R1,SP,#+40
   \   000026B8   0x.... 0x....      BL       BGM111_Transmit
   2745                                            }
   2746                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_426: (+1)
   \   000026BC   0xF8DF 0x1A84      LDR.W    R1,??RoadBrd_ParseString_387+0x10
   \   000026C0   0xA80A             ADD      R0,SP,#+40
   \   000026C2   0x.... 0x....      BL       sprintf
   \   000026C6   0xE36B             B.N      ??RoadBrd_ParseString_391
   2747                                          }
   2748                                        }
   2749                                        else if (strncmp((char *)uuid,"0032",4) == 0) // Hum_TempC
   \                     ??RoadBrd_ParseString_422: (+1)
   \   000026C8   0x2204             MOVS     R2,#+4
   \   000026CA   0xF8DF 0x1E60      LDR.W    R1,??RoadBrd_ParseString_425+0x8
   \   000026CE   0xA836             ADD      R0,SP,#+216
   \   000026D0   0x.... 0x....      BL       strncmp
   \   000026D4   0x2800             CMP      R0,#+0
   \   000026D6   0xD135             BNE.N    ??RoadBrd_ParseString_427
   2750                                        {
   2751                                          Status = RoadBrd_CAL_Set_CalItem( CAL_HUM_TEMPC, Offset, Scale);
   \   000026D8   0x9A29             LDR      R2,[SP, #+164]
   \   000026DA   0x9928             LDR      R1,[SP, #+160]
   \   000026DC   0x2008             MOVS     R0,#+8
   \   000026DE   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   000026E2   0x0006             MOVS     R6,R0
   2752                                          if (Status == HAL_OK)
   \   000026E4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000026E6   0x2E00             CMP      R6,#+0
   \   000026E8   0xD118             BNE.N    ??RoadBrd_ParseString_428
   2753                                          {
   2754                                            // Is this a BLE Operation?
   2755                                            if ( BLE_Flag )
   \   000026EA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000026EC   0x2D00             CMP      R5,#+0
   \   000026EE   0xD00A             BEQ.N    ??RoadBrd_ParseString_429
   2756                                            {
   2757                                              // Yes...Build and Send BLE Response NOW.
   2758                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_HUM_TEMPC</STATUS>");
   \   000026F0   0xF8DF 0x1E3C      LDR.W    R1,??RoadBrd_ParseString_425+0xC
   \   000026F4   0xA80A             ADD      R0,SP,#+40
   \   000026F6   0x.... 0x....      BL       strcpy
   2759                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000026FA   0xA80A             ADD      R0,SP,#+40
   \   000026FC   0x.... 0x....      BL       strlen
   \   00002700   0xA90A             ADD      R1,SP,#+40
   \   00002702   0x.... 0x....      BL       BGM111_Transmit
   2760                                            }
   2761                                            sprintf( (char *)tempBffr2, "Hum_TempC Set COMPLETE." );
   \                     ??RoadBrd_ParseString_429: (+1)
   \   00002706   0xF8DF 0x1E2C      LDR.W    R1,??RoadBrd_ParseString_425+0x10
   \   0000270A   0xA80A             ADD      R0,SP,#+40
   \   0000270C   0x.... 0x....      BL       sprintf
   \   00002710   0xE346             B.N      ??RoadBrd_ParseString_391
   \   00002712   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_271:
   \   00002714   0x........         DC32     ?_91
   \   00002718   0x........         DC32     ?_92
   2762                                          }
   2763                                          else
   2764                                          {
   2765                                            // Is this a BLE Operation?
   2766                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_428: (+1)
   \   0000271C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000271E   0x2D00             CMP      R5,#+0
   \   00002720   0xD00A             BEQ.N    ??RoadBrd_ParseString_430
   2767                                            {
   2768                                              // Yes...Build and Send BLE Response NOW.
   2769                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_HUM_TEMPC_ERR</STATUS>");
   \   00002722   0xF8DF 0x1EA4      LDR.W    R1,??RoadBrd_ParseString_431
   \   00002726   0xA80A             ADD      R0,SP,#+40
   \   00002728   0x.... 0x....      BL       strcpy
   2770                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000272C   0xA80A             ADD      R0,SP,#+40
   \   0000272E   0x.... 0x....      BL       strlen
   \   00002732   0xA90A             ADD      R1,SP,#+40
   \   00002734   0x.... 0x....      BL       BGM111_Transmit
   2771                                            }
   2772                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_430: (+1)
   \   00002738   0xF8DF 0x1A08      LDR.W    R1,??RoadBrd_ParseString_387+0x10
   \   0000273C   0xA80A             ADD      R0,SP,#+40
   \   0000273E   0x.... 0x....      BL       sprintf
   \   00002742   0xE32D             B.N      ??RoadBrd_ParseString_391
   2773                                          }
   2774                                        }
   2775                                        else if (strncmp((char *)uuid,"0033",4) == 0) // Hum_TempF
   \                     ??RoadBrd_ParseString_427: (+1)
   \   00002744   0x2204             MOVS     R2,#+4
   \   00002746   0xF8DF 0x1E84      LDR.W    R1,??RoadBrd_ParseString_431+0x4
   \   0000274A   0xA836             ADD      R0,SP,#+216
   \   0000274C   0x.... 0x....      BL       strncmp
   \   00002750   0x2800             CMP      R0,#+0
   \   00002752   0xD139             BNE.N    ??RoadBrd_ParseString_432
   2776                                        {
   2777                                          Status = RoadBrd_CAL_Set_CalItem( CAL_HUM_TEMPF, Offset, Scale);
   \   00002754   0x9A29             LDR      R2,[SP, #+164]
   \   00002756   0x9928             LDR      R1,[SP, #+160]
   \   00002758   0x2009             MOVS     R0,#+9
   \   0000275A   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   0000275E   0x0006             MOVS     R6,R0
   2778                                          if (Status == HAL_OK)
   \   00002760   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002762   0x2E00             CMP      R6,#+0
   \   00002764   0xD11C             BNE.N    ??RoadBrd_ParseString_433
   2779                                          {
   2780                                            // Is this a BLE Operation?
   2781                                            if ( BLE_Flag )
   \   00002766   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002768   0x2D00             CMP      R5,#+0
   \   0000276A   0xD00A             BEQ.N    ??RoadBrd_ParseString_434
   2782                                            {
   2783                                              // Yes...Build and Send BLE Response NOW.
   2784                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_HUM_TEMPF</STATUS>");
   \   0000276C   0xF8DF 0x1E60      LDR.W    R1,??RoadBrd_ParseString_431+0x8
   \   00002770   0xA80A             ADD      R0,SP,#+40
   \   00002772   0x.... 0x....      BL       strcpy
   2785                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002776   0xA80A             ADD      R0,SP,#+40
   \   00002778   0x.... 0x....      BL       strlen
   \   0000277C   0xA90A             ADD      R1,SP,#+40
   \   0000277E   0x.... 0x....      BL       BGM111_Transmit
   2786                                            }
   2787                                            sprintf( (char *)tempBffr2, "Hum_TempF Set COMPLETE." );
   \                     ??RoadBrd_ParseString_434: (+1)
   \   00002782   0xF8DF 0x1E50      LDR.W    R1,??RoadBrd_ParseString_431+0xC
   \   00002786   0xA80A             ADD      R0,SP,#+40
   \   00002788   0x.... 0x....      BL       sprintf
   \   0000278C   0xE308             B.N      ??RoadBrd_ParseString_391
   \   0000278E   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_274:
   \   00002790   0x........         DC32     ?_40
   \   00002794   0x........         DC32     ?_93
   \   00002798   0x........         DC32     ?_94
   \   0000279C   0x........         DC32     ?_95
   2788                                          }
   2789                                          else
   2790                                          {
   2791                                            // Is this a BLE Operation?
   2792                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_433: (+1)
   \   000027A0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000027A2   0x2D00             CMP      R5,#+0
   \   000027A4   0xD00A             BEQ.N    ??RoadBrd_ParseString_435
   2793                                            {
   2794                                              // Yes...Build and Send BLE Response NOW.
   2795                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_HUM_TEMPF_ERR</STATUS>");
   \   000027A6   0xF8DF 0x1E30      LDR.W    R1,??RoadBrd_ParseString_431+0x10
   \   000027AA   0xA80A             ADD      R0,SP,#+40
   \   000027AC   0x.... 0x....      BL       strcpy
   2796                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000027B0   0xA80A             ADD      R0,SP,#+40
   \   000027B2   0x.... 0x....      BL       strlen
   \   000027B6   0xA90A             ADD      R1,SP,#+40
   \   000027B8   0x.... 0x....      BL       BGM111_Transmit
   2797                                            }
   2798                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_435: (+1)
   \   000027BC   0xF8DF 0x1984      LDR.W    R1,??RoadBrd_ParseString_387+0x10
   \   000027C0   0xA80A             ADD      R0,SP,#+40
   \   000027C2   0x.... 0x....      BL       sprintf
   \   000027C6   0xE2EB             B.N      ??RoadBrd_ParseString_391
   2799                                          }
   2800                                        }
   2801                                        else if (strncmp((char *)uuid,"000D",4) == 0) // RGB_Red
   \                     ??RoadBrd_ParseString_432: (+1)
   \   000027C8   0x2204             MOVS     R2,#+4
   \   000027CA   0xF8DF 0x1EA0      LDR.W    R1,??RoadBrd_ParseString_436
   \   000027CE   0xA836             ADD      R0,SP,#+216
   \   000027D0   0x.... 0x....      BL       strncmp
   \   000027D4   0x2800             CMP      R0,#+0
   \   000027D6   0xD133             BNE.N    ??RoadBrd_ParseString_437
   2802                                        {
   2803                                          Status = RoadBrd_CAL_Set_CalItem( CAL_RGB_RED, Offset, Scale);
   \   000027D8   0x9A29             LDR      R2,[SP, #+164]
   \   000027DA   0x9928             LDR      R1,[SP, #+160]
   \   000027DC   0x200A             MOVS     R0,#+10
   \   000027DE   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   000027E2   0x0006             MOVS     R6,R0
   2804                                          if (Status == HAL_OK)
   \   000027E4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000027E6   0x2E00             CMP      R6,#+0
   \   000027E8   0xD116             BNE.N    ??RoadBrd_ParseString_438
   2805                                          {
   2806                                            // Is this a BLE Operation?
   2807                                            if ( BLE_Flag )
   \   000027EA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000027EC   0x2D00             CMP      R5,#+0
   \   000027EE   0xD00A             BEQ.N    ??RoadBrd_ParseString_439
   2808                                            {
   2809                                              // Yes...Build and Send BLE Response NOW.
   2810                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_RGB_RED</STATUS>");
   \   000027F0   0xF8DF 0x1E7C      LDR.W    R1,??RoadBrd_ParseString_436+0x4
   \   000027F4   0xA80A             ADD      R0,SP,#+40
   \   000027F6   0x.... 0x....      BL       strcpy
   2811                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000027FA   0xA80A             ADD      R0,SP,#+40
   \   000027FC   0x.... 0x....      BL       strlen
   \   00002800   0xA90A             ADD      R1,SP,#+40
   \   00002802   0x.... 0x....      BL       BGM111_Transmit
   2812                                            }
   2813                                            sprintf( (char *)tempBffr2, "RGB_Red Set COMPLETE." );
   \                     ??RoadBrd_ParseString_439: (+1)
   \   00002806   0xF8DF 0x1E6C      LDR.W    R1,??RoadBrd_ParseString_436+0x8
   \   0000280A   0xA80A             ADD      R0,SP,#+40
   \   0000280C   0x.... 0x....      BL       sprintf
   \   00002810   0xE2C6             B.N      ??RoadBrd_ParseString_391
   \   00002812   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_282:
   \   00002814   0x........         DC32     ?_96
   2814                                          }
   2815                                          else
   2816                                          {
   2817                                            // Is this a BLE Operation?
   2818                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_438: (+1)
   \   00002818   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000281A   0x2D00             CMP      R5,#+0
   \   0000281C   0xD00A             BEQ.N    ??RoadBrd_ParseString_440
   2819                                            {
   2820                                              // Yes...Build and Send BLE Response NOW.
   2821                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_RGB_RED_ERR</STATUS>");
   \   0000281E   0xF8DF 0x1E58      LDR.W    R1,??RoadBrd_ParseString_436+0xC
   \   00002822   0xA80A             ADD      R0,SP,#+40
   \   00002824   0x.... 0x....      BL       strcpy
   2822                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002828   0xA80A             ADD      R0,SP,#+40
   \   0000282A   0x.... 0x....      BL       strlen
   \   0000282E   0xA90A             ADD      R1,SP,#+40
   \   00002830   0x.... 0x....      BL       BGM111_Transmit
   2823                                            }
   2824                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_440: (+1)
   \   00002834   0xF8DF 0x190C      LDR.W    R1,??RoadBrd_ParseString_387+0x10
   \   00002838   0xA80A             ADD      R0,SP,#+40
   \   0000283A   0x.... 0x....      BL       sprintf
   \   0000283E   0xE2AF             B.N      ??RoadBrd_ParseString_391
   2825                                          }
   2826                                        }
   2827                                        else if (strncmp((char *)uuid,"000E",4) == 0) // RGB_Green
   \                     ??RoadBrd_ParseString_437: (+1)
   \   00002840   0x2204             MOVS     R2,#+4
   \   00002842   0xF8DF 0x1E38      LDR.W    R1,??RoadBrd_ParseString_436+0x10
   \   00002846   0xA836             ADD      R0,SP,#+216
   \   00002848   0x.... 0x....      BL       strncmp
   \   0000284C   0x2800             CMP      R0,#+0
   \   0000284E   0xD133             BNE.N    ??RoadBrd_ParseString_441
   2828                                        {
   2829                                          Status = RoadBrd_CAL_Set_CalItem( CAL_RGB_GREEN, Offset, Scale);
   \   00002850   0x9A29             LDR      R2,[SP, #+164]
   \   00002852   0x9928             LDR      R1,[SP, #+160]
   \   00002854   0x200B             MOVS     R0,#+11
   \   00002856   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   0000285A   0x0006             MOVS     R6,R0
   2830                                          if (Status == HAL_OK)
   \   0000285C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000285E   0x2E00             CMP      R6,#+0
   \   00002860   0xD116             BNE.N    ??RoadBrd_ParseString_442
   2831                                          {
   2832                                            // Is this a BLE Operation?
   2833                                            if ( BLE_Flag )
   \   00002862   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002864   0x2D00             CMP      R5,#+0
   \   00002866   0xD00A             BEQ.N    ??RoadBrd_ParseString_443
   2834                                            {
   2835                                              // Yes...Build and Send BLE Response NOW.
   2836                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_RGB_GREEN</STATUS>");
   \   00002868   0xF8DF 0x1EA4      LDR.W    R1,??RoadBrd_ParseString_444
   \   0000286C   0xA80A             ADD      R0,SP,#+40
   \   0000286E   0x.... 0x....      BL       strcpy
   2837                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002872   0xA80A             ADD      R0,SP,#+40
   \   00002874   0x.... 0x....      BL       strlen
   \   00002878   0xA90A             ADD      R1,SP,#+40
   \   0000287A   0x.... 0x....      BL       BGM111_Transmit
   2838                                            }
   2839                                            sprintf( (char *)tempBffr2, "RGB_Green Set COMPLETE." );
   \                     ??RoadBrd_ParseString_443: (+1)
   \   0000287E   0xF8DF 0x1E94      LDR.W    R1,??RoadBrd_ParseString_444+0x4
   \   00002882   0xA80A             ADD      R0,SP,#+40
   \   00002884   0x.... 0x....      BL       sprintf
   \   00002888   0xE28A             B.N      ??RoadBrd_ParseString_391
   \   0000288A   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_296:
   \   0000288C   0x........         DC32     ?_97
   2840                                          }
   2841                                          else
   2842                                          {
   2843                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_442: (+1)
   \   00002890   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002892   0x2D00             CMP      R5,#+0
   \   00002894   0xD00A             BEQ.N    ??RoadBrd_ParseString_445
   2844                                            {
   2845                                              // Yes...Build and Send BLE Response NOW.
   2846                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_RGB_GREEN_ERR</STATUS>");
   \   00002896   0xF8DF 0x1E80      LDR.W    R1,??RoadBrd_ParseString_444+0x8
   \   0000289A   0xA80A             ADD      R0,SP,#+40
   \   0000289C   0x.... 0x....      BL       strcpy
   2847                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000028A0   0xA80A             ADD      R0,SP,#+40
   \   000028A2   0x.... 0x....      BL       strlen
   \   000028A6   0xA90A             ADD      R1,SP,#+40
   \   000028A8   0x.... 0x....      BL       BGM111_Transmit
   2848                                            }
   2849                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_445: (+1)
   \   000028AC   0xF8DF 0x1894      LDR.W    R1,??RoadBrd_ParseString_387+0x10
   \   000028B0   0xA80A             ADD      R0,SP,#+40
   \   000028B2   0x.... 0x....      BL       sprintf
   \   000028B6   0xE273             B.N      ??RoadBrd_ParseString_391
   2850                                          }
   2851                                        }
   2852                                        else if (strncmp((char *)uuid,"000F",4) == 0) // RGB_Blue
   \                     ??RoadBrd_ParseString_441: (+1)
   \   000028B8   0x2204             MOVS     R2,#+4
   \   000028BA   0xF8DF 0x1E60      LDR.W    R1,??RoadBrd_ParseString_444+0xC
   \   000028BE   0xA836             ADD      R0,SP,#+216
   \   000028C0   0x.... 0x....      BL       strncmp
   \   000028C4   0x2800             CMP      R0,#+0
   \   000028C6   0xD139             BNE.N    ??RoadBrd_ParseString_446
   2853                                        {
   2854                                          Status = RoadBrd_CAL_Set_CalItem( CAL_RGB_BLUE, Offset, Scale);
   \   000028C8   0x9A29             LDR      R2,[SP, #+164]
   \   000028CA   0x9928             LDR      R1,[SP, #+160]
   \   000028CC   0x200C             MOVS     R0,#+12
   \   000028CE   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   000028D2   0x0006             MOVS     R6,R0
   2855                                          if (Status == HAL_OK)
   \   000028D4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000028D6   0x2E00             CMP      R6,#+0
   \   000028D8   0xD11C             BNE.N    ??RoadBrd_ParseString_447
   2856                                          {
   2857                                            // Is this a BLE Operation?
   2858                                            if ( BLE_Flag )
   \   000028DA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000028DC   0x2D00             CMP      R5,#+0
   \   000028DE   0xD00A             BEQ.N    ??RoadBrd_ParseString_448
   2859                                            {
   2860                                              // Yes...Build and Send BLE Response NOW.
   2861                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_RGB_BLUE</STATUS>");
   \   000028E0   0xF8DF 0x1E3C      LDR.W    R1,??RoadBrd_ParseString_444+0x10
   \   000028E4   0xA80A             ADD      R0,SP,#+40
   \   000028E6   0x.... 0x....      BL       strcpy
   2862                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000028EA   0xA80A             ADD      R0,SP,#+40
   \   000028EC   0x.... 0x....      BL       strlen
   \   000028F0   0xA90A             ADD      R1,SP,#+40
   \   000028F2   0x.... 0x....      BL       BGM111_Transmit
   2863                                            }
   2864                                            sprintf( (char *)tempBffr2, "RGB_Blue Set COMPLETE." );
   \                     ??RoadBrd_ParseString_448: (+1)
   \   000028F6   0xF8DF 0x1EBC      LDR.W    R1,??RoadBrd_ParseString_449
   \   000028FA   0xA80A             ADD      R0,SP,#+40
   \   000028FC   0x.... 0x....      BL       sprintf
   \   00002900   0xE24E             B.N      ??RoadBrd_ParseString_391
   \   00002902   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_305:
   \   00002904   0x........         DC32     ?_98
   \   00002908   0x........         DC32     ?_99
   \   0000290C   0x........         DC32     ?_100
   \   00002910   0x........         DC32     ?_101
   2865                                          }
   2866                                          else
   2867                                          {
   2868                                            // Is this a BLE Operation?
   2869                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_447: (+1)
   \   00002914   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002916   0x2D00             CMP      R5,#+0
   \   00002918   0xD00A             BEQ.N    ??RoadBrd_ParseString_450
   2870                                            {
   2871                                              // Yes...Build and Send BLE Response NOW.
   2872                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_RGB_BLUE_ERR</STATUS>");
   \   0000291A   0xF8DF 0x1E9C      LDR.W    R1,??RoadBrd_ParseString_449+0x4
   \   0000291E   0xA80A             ADD      R0,SP,#+40
   \   00002920   0x.... 0x....      BL       strcpy
   2873                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002924   0xA80A             ADD      R0,SP,#+40
   \   00002926   0x.... 0x....      BL       strlen
   \   0000292A   0xA90A             ADD      R1,SP,#+40
   \   0000292C   0x.... 0x....      BL       BGM111_Transmit
   2874                                            }
   2875                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_450: (+1)
   \   00002930   0xF8DF 0x1810      LDR.W    R1,??RoadBrd_ParseString_387+0x10
   \   00002934   0xA80A             ADD      R0,SP,#+40
   \   00002936   0x.... 0x....      BL       sprintf
   \   0000293A   0xE231             B.N      ??RoadBrd_ParseString_391
   2876                                          }
   2877                                        }
   2878                                        else if (strncmp((char *)uuid,"0017",4) == 0) // Therm_C
   \                     ??RoadBrd_ParseString_446: (+1)
   \   0000293C   0x2204             MOVS     R2,#+4
   \   0000293E   0xF8DF 0x1E7C      LDR.W    R1,??RoadBrd_ParseString_449+0x8
   \   00002942   0xA836             ADD      R0,SP,#+216
   \   00002944   0x.... 0x....      BL       strncmp
   \   00002948   0x2800             CMP      R0,#+0
   \   0000294A   0xD130             BNE.N    ??RoadBrd_ParseString_451
   2879                                        {
   2880                                          Status = RoadBrd_CAL_Set_CalItem( CAL_THERM_C, Offset, Scale);
   \   0000294C   0x9A29             LDR      R2,[SP, #+164]
   \   0000294E   0x9928             LDR      R1,[SP, #+160]
   \   00002950   0x200D             MOVS     R0,#+13
   \   00002952   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002956   0x0006             MOVS     R6,R0
   2881                                          if (Status == HAL_OK)
   \   00002958   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000295A   0x2E00             CMP      R6,#+0
   \   0000295C   0xD113             BNE.N    ??RoadBrd_ParseString_452
   2882                                          {
   2883                                            // Is this a BLE Operation?
   2884                                            if ( BLE_Flag )
   \   0000295E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002960   0x2D00             CMP      R5,#+0
   \   00002962   0xD00A             BEQ.N    ??RoadBrd_ParseString_453
   2885                                            {
   2886                                              // Yes...Build and Send BLE Response NOW.
   2887                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_THERM_C</STATUS>");
   \   00002964   0xF8DF 0x1E58      LDR.W    R1,??RoadBrd_ParseString_449+0xC
   \   00002968   0xA80A             ADD      R0,SP,#+40
   \   0000296A   0x.... 0x....      BL       strcpy
   2888                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000296E   0xA80A             ADD      R0,SP,#+40
   \   00002970   0x.... 0x....      BL       strlen
   \   00002974   0xA90A             ADD      R1,SP,#+40
   \   00002976   0x.... 0x....      BL       BGM111_Transmit
   2889                                            }
   2890                                            sprintf( (char *)tempBffr2, "Therm_C Set COMPLETE." );
   \                     ??RoadBrd_ParseString_453: (+1)
   \   0000297A   0xF8DF 0x1E48      LDR.W    R1,??RoadBrd_ParseString_449+0x10
   \   0000297E   0xA80A             ADD      R0,SP,#+40
   \   00002980   0x.... 0x....      BL       sprintf
   \   00002984   0xE20C             B.N      ??RoadBrd_ParseString_391
   2891                                          }
   2892                                          else
   2893                                          {
   2894                                            // Is this a BLE Operation?
   2895                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_452: (+1)
   \   00002986   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002988   0x2D00             CMP      R5,#+0
   \   0000298A   0xD00A             BEQ.N    ??RoadBrd_ParseString_454
   2896                                            {
   2897                                              // Yes...Build and Send BLE Response NOW.
   2898                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_THERM_C_ERR</STATUS>");
   \   0000298C   0xF8DF 0x1EC8      LDR.W    R1,??RoadBrd_ParseString_455
   \   00002990   0xA80A             ADD      R0,SP,#+40
   \   00002992   0x.... 0x....      BL       strcpy
   2899                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002996   0xA80A             ADD      R0,SP,#+40
   \   00002998   0x.... 0x....      BL       strlen
   \   0000299C   0xA90A             ADD      R1,SP,#+40
   \   0000299E   0x.... 0x....      BL       BGM111_Transmit
   2900                                            }
   2901                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_454: (+1)
   \   000029A2   0xF8DF 0x17A0      LDR.W    R1,??RoadBrd_ParseString_387+0x10
   \   000029A6   0xA80A             ADD      R0,SP,#+40
   \   000029A8   0x.... 0x....      BL       sprintf
   \   000029AC   0xE1F8             B.N      ??RoadBrd_ParseString_391
   2902                                          }
   2903                                        }
   2904                                        else if (strncmp((char *)uuid,"0019",4) == 0) // RoadT_1C
   \                     ??RoadBrd_ParseString_451: (+1)
   \   000029AE   0x2204             MOVS     R2,#+4
   \   000029B0   0xF8DF 0x1EA8      LDR.W    R1,??RoadBrd_ParseString_455+0x4
   \   000029B4   0xA836             ADD      R0,SP,#+216
   \   000029B6   0x.... 0x....      BL       strncmp
   \   000029BA   0x2800             CMP      R0,#+0
   \   000029BC   0xD132             BNE.N    ??RoadBrd_ParseString_456
   2905                                        {
   2906                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_1C, Offset, Scale);
   \   000029BE   0x9A29             LDR      R2,[SP, #+164]
   \   000029C0   0x9928             LDR      R1,[SP, #+160]
   \   000029C2   0x200E             MOVS     R0,#+14
   \   000029C4   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   000029C8   0x0006             MOVS     R6,R0
   2907                                          if (Status == HAL_OK)
   \   000029CA   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000029CC   0x2E00             CMP      R6,#+0
   \   000029CE   0xD115             BNE.N    ??RoadBrd_ParseString_457
   2908                                          {
   2909                                            // Is this a BLE Operation?
   2910                                            if ( BLE_Flag )
   \   000029D0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000029D2   0x2D00             CMP      R5,#+0
   \   000029D4   0xD00A             BEQ.N    ??RoadBrd_ParseString_458
   2911                                            {
   2912                                              // Yes...Build and Send BLE Response NOW.
   2913                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_1C</STATUS>");
   \   000029D6   0xF8DF 0x1E88      LDR.W    R1,??RoadBrd_ParseString_455+0x8
   \   000029DA   0xA80A             ADD      R0,SP,#+40
   \   000029DC   0x.... 0x....      BL       strcpy
   2914                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000029E0   0xA80A             ADD      R0,SP,#+40
   \   000029E2   0x.... 0x....      BL       strlen
   \   000029E6   0xA90A             ADD      R1,SP,#+40
   \   000029E8   0x.... 0x....      BL       BGM111_Transmit
   2915                                            }
   2916                                            sprintf( (char *)tempBffr2, "RoadT_1C Set COMPLETE." );
   \                     ??RoadBrd_ParseString_458: (+1)
   \   000029EC   0xF8DF 0x1E74      LDR.W    R1,??RoadBrd_ParseString_455+0xC
   \   000029F0   0xA80A             ADD      R0,SP,#+40
   \   000029F2   0x.... 0x....      BL       sprintf
   \   000029F6   0xE1D3             B.N      ??RoadBrd_ParseString_391
   \                     ??RoadBrd_ParseString_315:
   \   000029F8   0x........         DC32     ?_102
   2917                                          }
   2918                                          else
   2919                                          {
   2920                                            // Is this a BLE Operation?
   2921                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_457: (+1)
   \   000029FC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000029FE   0x2D00             CMP      R5,#+0
   \   00002A00   0xD00A             BEQ.N    ??RoadBrd_ParseString_459
   2922                                            {
   2923                                              // Yes...Build and Send BLE Response NOW.
   2924                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_1C_ERR</STATUS>");
   \   00002A02   0xF8DF 0x1E64      LDR.W    R1,??RoadBrd_ParseString_455+0x10
   \   00002A06   0xA80A             ADD      R0,SP,#+40
   \   00002A08   0x.... 0x....      BL       strcpy
   2925                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002A0C   0xA80A             ADD      R0,SP,#+40
   \   00002A0E   0x.... 0x....      BL       strlen
   \   00002A12   0xA90A             ADD      R1,SP,#+40
   \   00002A14   0x.... 0x....      BL       BGM111_Transmit
   2926                                            }
   2927                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_459: (+1)
   \   00002A18   0xF8DF 0x1728      LDR.W    R1,??RoadBrd_ParseString_387+0x10
   \   00002A1C   0xA80A             ADD      R0,SP,#+40
   \   00002A1E   0x.... 0x....      BL       sprintf
   \   00002A22   0xE1BD             B.N      ??RoadBrd_ParseString_391
   2928                                          }
   2929                                        }
   2930                                        else if (strncmp((char *)uuid,"001B",4) == 0) // RoadT_2C
   \                     ??RoadBrd_ParseString_456: (+1)
   \   00002A24   0x2204             MOVS     R2,#+4
   \   00002A26   0xF8DF 0x1ED4      LDR.W    R1,??RoadBrd_ParseString_460
   \   00002A2A   0xA836             ADD      R0,SP,#+216
   \   00002A2C   0x.... 0x....      BL       strncmp
   \   00002A30   0x2800             CMP      R0,#+0
   \   00002A32   0xD133             BNE.N    ??RoadBrd_ParseString_461
   2931                                        {
   2932                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_2C, Offset, Scale);
   \   00002A34   0x9A29             LDR      R2,[SP, #+164]
   \   00002A36   0x9928             LDR      R1,[SP, #+160]
   \   00002A38   0x200F             MOVS     R0,#+15
   \   00002A3A   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002A3E   0x0006             MOVS     R6,R0
   2933                                          if (Status == HAL_OK)
   \   00002A40   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002A42   0x2E00             CMP      R6,#+0
   \   00002A44   0xD116             BNE.N    ??RoadBrd_ParseString_462
   2934                                          {
   2935                                            // Is this a BLE Operation?
   2936                                            if ( BLE_Flag )
   \   00002A46   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002A48   0x2D00             CMP      R5,#+0
   \   00002A4A   0xD00A             BEQ.N    ??RoadBrd_ParseString_463
   2937                                            {
   2938                                              // Yes...Build and Send BLE Response NOW.
   2939                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_2C</STATUS>");
   \   00002A4C   0xF8DF 0x1EB0      LDR.W    R1,??RoadBrd_ParseString_460+0x4
   \   00002A50   0xA80A             ADD      R0,SP,#+40
   \   00002A52   0x.... 0x....      BL       strcpy
   2940                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002A56   0xA80A             ADD      R0,SP,#+40
   \   00002A58   0x.... 0x....      BL       strlen
   \   00002A5C   0xA90A             ADD      R1,SP,#+40
   \   00002A5E   0x.... 0x....      BL       BGM111_Transmit
   2941                                            }
   2942                                            sprintf( (char *)tempBffr2, "RoadT_2C Set COMPLETE." );
   \                     ??RoadBrd_ParseString_463: (+1)
   \   00002A62   0xF8DF 0x1EA0      LDR.W    R1,??RoadBrd_ParseString_460+0x8
   \   00002A66   0xA80A             ADD      R0,SP,#+40
   \   00002A68   0x.... 0x....      BL       sprintf
   \   00002A6C   0xE198             B.N      ??RoadBrd_ParseString_391
   \   00002A6E   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_321:
   \   00002A70   0x........         DC32     ?_104
   2943                                          }
   2944                                          else
   2945                                          {
   2946                                            // Is this a BLE Operation?
   2947                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_462: (+1)
   \   00002A74   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002A76   0x2D00             CMP      R5,#+0
   \   00002A78   0xD00A             BEQ.N    ??RoadBrd_ParseString_464
   2948                                            {
   2949                                              // Yes...Build and Send BLE Response NOW.
   2950                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_2C_ERR</STATUS>");
   \   00002A7A   0xF8DF 0x1E8C      LDR.W    R1,??RoadBrd_ParseString_460+0xC
   \   00002A7E   0xA80A             ADD      R0,SP,#+40
   \   00002A80   0x.... 0x....      BL       strcpy
   2951                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002A84   0xA80A             ADD      R0,SP,#+40
   \   00002A86   0x.... 0x....      BL       strlen
   \   00002A8A   0xA90A             ADD      R1,SP,#+40
   \   00002A8C   0x.... 0x....      BL       BGM111_Transmit
   2952                                            }
   2953                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_464: (+1)
   \   00002A90   0xF8DF 0x16B0      LDR.W    R1,??RoadBrd_ParseString_387+0x10
   \   00002A94   0xA80A             ADD      R0,SP,#+40
   \   00002A96   0x.... 0x....      BL       sprintf
   \   00002A9A   0xE181             B.N      ??RoadBrd_ParseString_391
   2954                                          }
   2955                                        }
   2956                                        else if (strncmp((char *)uuid,"001D",4) == 0) // RoadT_3C
   \                     ??RoadBrd_ParseString_461: (+1)
   \   00002A9C   0x2204             MOVS     R2,#+4
   \   00002A9E   0xF8DF 0x1E6C      LDR.W    R1,??RoadBrd_ParseString_460+0x10
   \   00002AA2   0xA836             ADD      R0,SP,#+216
   \   00002AA4   0x.... 0x....      BL       strncmp
   \   00002AA8   0x2800             CMP      R0,#+0
   \   00002AAA   0xD137             BNE.N    ??RoadBrd_ParseString_465
   2957                                        {
   2958                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_3C, Offset, Scale);
   \   00002AAC   0x9A29             LDR      R2,[SP, #+164]
   \   00002AAE   0x9928             LDR      R1,[SP, #+160]
   \   00002AB0   0x2010             MOVS     R0,#+16
   \   00002AB2   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002AB6   0x0006             MOVS     R6,R0
   2959                                          if (Status == HAL_OK)
   \   00002AB8   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002ABA   0x2E00             CMP      R6,#+0
   \   00002ABC   0xD11A             BNE.N    ??RoadBrd_ParseString_466
   2960                                          {
   2961                                            // Is this a BLE Operation?
   2962                                            if ( BLE_Flag )
   \   00002ABE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002AC0   0x2D00             CMP      R5,#+0
   \   00002AC2   0xD00A             BEQ.N    ??RoadBrd_ParseString_467
   2963                                            {
   2964                                              // Yes...Build and Send BLE Response NOW.
   2965                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_3C</STATUS>");
   \   00002AC4   0xF8DF 0x1ED8      LDR.W    R1,??RoadBrd_ParseString_468
   \   00002AC8   0xA80A             ADD      R0,SP,#+40
   \   00002ACA   0x.... 0x....      BL       strcpy
   2966                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002ACE   0xA80A             ADD      R0,SP,#+40
   \   00002AD0   0x.... 0x....      BL       strlen
   \   00002AD4   0xA90A             ADD      R1,SP,#+40
   \   00002AD6   0x.... 0x....      BL       BGM111_Transmit
   2967                                            }
   2968                                            sprintf( (char *)tempBffr2, "RoadT_3C Set COMPLETE." );
   \                     ??RoadBrd_ParseString_467: (+1)
   \   00002ADA   0xF8DF 0x1EC8      LDR.W    R1,??RoadBrd_ParseString_468+0x4
   \   00002ADE   0xA80A             ADD      R0,SP,#+40
   \   00002AE0   0x.... 0x....      BL       sprintf
   \   00002AE4   0xE15C             B.N      ??RoadBrd_ParseString_391
   \   00002AE6   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_325:
   \   00002AE8   0x........         DC32     ?_105
   \   00002AEC   0x........         DC32     ?_106
   \   00002AF0   0x........         DC32     ?_107
   2969                                          }
   2970                                          else
   2971                                          {
   2972                                            // Is this a BLE Operation?
   2973                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_466: (+1)
   \   00002AF4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002AF6   0x2D00             CMP      R5,#+0
   \   00002AF8   0xD00A             BEQ.N    ??RoadBrd_ParseString_469
   2974                                            {
   2975                                              // Yes...Build and Send BLE Response NOW.
   2976                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_3C_ERR</STATUS>");
   \   00002AFA   0xF8DF 0x1EAC      LDR.W    R1,??RoadBrd_ParseString_468+0x8
   \   00002AFE   0xA80A             ADD      R0,SP,#+40
   \   00002B00   0x.... 0x....      BL       strcpy
   2977                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002B04   0xA80A             ADD      R0,SP,#+40
   \   00002B06   0x.... 0x....      BL       strlen
   \   00002B0A   0xA90A             ADD      R1,SP,#+40
   \   00002B0C   0x.... 0x....      BL       BGM111_Transmit
   2978                                            }
   2979                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_469: (+1)
   \   00002B10   0xF8DF 0x1630      LDR.W    R1,??RoadBrd_ParseString_387+0x10
   \   00002B14   0xA80A             ADD      R0,SP,#+40
   \   00002B16   0x.... 0x....      BL       sprintf
   \   00002B1A   0xE141             B.N      ??RoadBrd_ParseString_391
   2980                                          }
   2981                                        }
   2982                                        else if (strncmp((char *)uuid,"001F",4) == 0) // RoadT_4C
   \                     ??RoadBrd_ParseString_465: (+1)
   \   00002B1C   0x2204             MOVS     R2,#+4
   \   00002B1E   0xF8DF 0x1E8C      LDR.W    R1,??RoadBrd_ParseString_468+0xC
   \   00002B22   0xA836             ADD      R0,SP,#+216
   \   00002B24   0x.... 0x....      BL       strncmp
   \   00002B28   0x2800             CMP      R0,#+0
   \   00002B2A   0xD135             BNE.N    ??RoadBrd_ParseString_470
   2983                                        {
   2984                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_4C, Offset, Scale);
   \   00002B2C   0x9A29             LDR      R2,[SP, #+164]
   \   00002B2E   0x9928             LDR      R1,[SP, #+160]
   \   00002B30   0x2011             MOVS     R0,#+17
   \   00002B32   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002B36   0x0006             MOVS     R6,R0
   2985                                          if (Status == HAL_OK)
   \   00002B38   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002B3A   0x2E00             CMP      R6,#+0
   \   00002B3C   0xD118             BNE.N    ??RoadBrd_ParseString_471
   2986                                          {
   2987                                            // Is this a BLE Operation?
   2988                                            if ( BLE_Flag )
   \   00002B3E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002B40   0x2D00             CMP      R5,#+0
   \   00002B42   0xD00A             BEQ.N    ??RoadBrd_ParseString_472
   2989                                            {
   2990                                              // Yes...Build and Send BLE Response NOW.
   2991                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_4C</STATUS>");
   \   00002B44   0xF8DF 0x1E68      LDR.W    R1,??RoadBrd_ParseString_468+0x10
   \   00002B48   0xA80A             ADD      R0,SP,#+40
   \   00002B4A   0x.... 0x....      BL       strcpy
   2992                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002B4E   0xA80A             ADD      R0,SP,#+40
   \   00002B50   0x.... 0x....      BL       strlen
   \   00002B54   0xA90A             ADD      R1,SP,#+40
   \   00002B56   0x.... 0x....      BL       BGM111_Transmit
   2993                                            }
   2994                                            sprintf( (char *)tempBffr2, "RoadT_4C Set COMPLETE." );
   \                     ??RoadBrd_ParseString_472: (+1)
   \   00002B5A   0xF8DF 0x1E58      LDR.W    R1,??RoadBrd_ParseString_468+0x14
   \   00002B5E   0xA80A             ADD      R0,SP,#+40
   \   00002B60   0x.... 0x....      BL       sprintf
   \   00002B64   0xE11C             B.N      ??RoadBrd_ParseString_391
   \   00002B66   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_329:
   \   00002B68   0x........         DC32     ?_108
   \   00002B6C   0x........         DC32     ?_109
   2995                                          }
   2996                                          else
   2997                                          {
   2998                                            // Is this a BLE Operation?
   2999                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_471: (+1)
   \   00002B70   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002B72   0x2D00             CMP      R5,#+0
   \   00002B74   0xD00A             BEQ.N    ??RoadBrd_ParseString_473
   3000                                            {
   3001                                              // Yes...Build and Send BLE Response NOW.
   3002                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_4C_ERR</STATUS>");
   \   00002B76   0xF8DF 0x1ED0      LDR.W    R1,??RoadBrd_ParseString_474
   \   00002B7A   0xA80A             ADD      R0,SP,#+40
   \   00002B7C   0x.... 0x....      BL       strcpy
   3003                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002B80   0xA80A             ADD      R0,SP,#+40
   \   00002B82   0x.... 0x....      BL       strlen
   \   00002B86   0xA90A             ADD      R1,SP,#+40
   \   00002B88   0x.... 0x....      BL       BGM111_Transmit
   3004                                            }
   3005                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_473: (+1)
   \   00002B8C   0xF8DF 0x15B4      LDR.W    R1,??RoadBrd_ParseString_387+0x10
   \   00002B90   0xA80A             ADD      R0,SP,#+40
   \   00002B92   0x.... 0x....      BL       sprintf
   \   00002B96   0xE103             B.N      ??RoadBrd_ParseString_391
   3006                                          }
   3007                                        }
   3008                                        else if (strncmp((char *)uuid,"0021",4) == 0) // RoadT_5C
   \                     ??RoadBrd_ParseString_470: (+1)
   \   00002B98   0x2204             MOVS     R2,#+4
   \   00002B9A   0xF8DF 0x1EB0      LDR.W    R1,??RoadBrd_ParseString_474+0x4
   \   00002B9E   0xA836             ADD      R0,SP,#+216
   \   00002BA0   0x.... 0x....      BL       strncmp
   \   00002BA4   0x2800             CMP      R0,#+0
   \   00002BA6   0xD133             BNE.N    ??RoadBrd_ParseString_475
   3009                                        {
   3010                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_5C, Offset, Scale);
   \   00002BA8   0x9A29             LDR      R2,[SP, #+164]
   \   00002BAA   0x9928             LDR      R1,[SP, #+160]
   \   00002BAC   0x2012             MOVS     R0,#+18
   \   00002BAE   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002BB2   0x0006             MOVS     R6,R0
   3011                                          if (Status == HAL_OK)
   \   00002BB4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002BB6   0x2E00             CMP      R6,#+0
   \   00002BB8   0xD116             BNE.N    ??RoadBrd_ParseString_476
   3012                                          {
   3013                                            // Is this a BLE Operation?
   3014                                            if ( BLE_Flag )
   \   00002BBA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002BBC   0x2D00             CMP      R5,#+0
   \   00002BBE   0xD00A             BEQ.N    ??RoadBrd_ParseString_477
   3015                                            {
   3016                                              // Yes...Build and Send BLE Response NOW.
   3017                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_5C</STATUS>");
   \   00002BC0   0xF8DF 0x1E8C      LDR.W    R1,??RoadBrd_ParseString_474+0x8
   \   00002BC4   0xA80A             ADD      R0,SP,#+40
   \   00002BC6   0x.... 0x....      BL       strcpy
   3018                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002BCA   0xA80A             ADD      R0,SP,#+40
   \   00002BCC   0x.... 0x....      BL       strlen
   \   00002BD0   0xA90A             ADD      R1,SP,#+40
   \   00002BD2   0x.... 0x....      BL       BGM111_Transmit
   3019                                            }
   3020                                            sprintf( (char *)tempBffr2, "RoadT_5C Set COMPLETE." );
   \                     ??RoadBrd_ParseString_477: (+1)
   \   00002BD6   0xF8DF 0x1E7C      LDR.W    R1,??RoadBrd_ParseString_474+0xC
   \   00002BDA   0xA80A             ADD      R0,SP,#+40
   \   00002BDC   0x.... 0x....      BL       sprintf
   \   00002BE0   0xE0DE             B.N      ??RoadBrd_ParseString_391
   \   00002BE2   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_334:
   \   00002BE4   0x........         DC32     ?_110
   3021                                          }
   3022                                          else
   3023                                          {
   3024                                            // Is this a BLE Operation?
   3025                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_476: (+1)
   \   00002BE8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002BEA   0x2D00             CMP      R5,#+0
   \   00002BEC   0xD00A             BEQ.N    ??RoadBrd_ParseString_478
   3026                                            {
   3027                                              // Yes...Build and Send BLE Response NOW.
   3028                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_5C_ERR</STATUS>");
   \   00002BEE   0xF8DF 0x1E68      LDR.W    R1,??RoadBrd_ParseString_474+0x10
   \   00002BF2   0xA80A             ADD      R0,SP,#+40
   \   00002BF4   0x.... 0x....      BL       strcpy
   3029                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002BF8   0xA80A             ADD      R0,SP,#+40
   \   00002BFA   0x.... 0x....      BL       strlen
   \   00002BFE   0xA90A             ADD      R1,SP,#+40
   \   00002C00   0x.... 0x....      BL       BGM111_Transmit
   3030                                            }
   3031                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_478: (+1)
   \   00002C04   0xF8DF 0x153C      LDR.W    R1,??RoadBrd_ParseString_387+0x10
   \   00002C08   0xA80A             ADD      R0,SP,#+40
   \   00002C0A   0x.... 0x....      BL       sprintf
   \   00002C0E   0xE0C7             B.N      ??RoadBrd_ParseString_391
   3032                                          }
   3033                                        }
   3034                                        else if (strncmp((char *)uuid,"0023",4) == 0) // RoadT_6C
   \                     ??RoadBrd_ParseString_475: (+1)
   \   00002C10   0x2204             MOVS     R2,#+4
   \   00002C12   0xF8DF 0x1ED8      LDR.W    R1,??RoadBrd_ParseString_479
   \   00002C16   0xA836             ADD      R0,SP,#+216
   \   00002C18   0x.... 0x....      BL       strncmp
   \   00002C1C   0x2800             CMP      R0,#+0
   \   00002C1E   0xD133             BNE.N    ??RoadBrd_ParseString_480
   3035                                        {
   3036                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_6C, Offset, Scale);
   \   00002C20   0x9A29             LDR      R2,[SP, #+164]
   \   00002C22   0x9928             LDR      R1,[SP, #+160]
   \   00002C24   0x2013             MOVS     R0,#+19
   \   00002C26   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002C2A   0x0006             MOVS     R6,R0
   3037                                          if (Status == HAL_OK)
   \   00002C2C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002C2E   0x2E00             CMP      R6,#+0
   \   00002C30   0xD116             BNE.N    ??RoadBrd_ParseString_481
   3038                                          {
   3039                                            // Is this a BLE Operation?
   3040                                            if ( BLE_Flag )
   \   00002C32   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002C34   0x2D00             CMP      R5,#+0
   \   00002C36   0xD00A             BEQ.N    ??RoadBrd_ParseString_482
   3041                                            {
   3042                                              // Yes...Build and Send BLE Response NOW.
   3043                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_6C</STATUS>");
   \   00002C38   0xF8DF 0x1EB4      LDR.W    R1,??RoadBrd_ParseString_479+0x4
   \   00002C3C   0xA80A             ADD      R0,SP,#+40
   \   00002C3E   0x.... 0x....      BL       strcpy
   3044                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002C42   0xA80A             ADD      R0,SP,#+40
   \   00002C44   0x.... 0x....      BL       strlen
   \   00002C48   0xA90A             ADD      R1,SP,#+40
   \   00002C4A   0x.... 0x....      BL       BGM111_Transmit
   3045                                            }
   3046                                            sprintf( (char *)tempBffr2, "RoadT_6C Set COMPLETE." );
   \                     ??RoadBrd_ParseString_482: (+1)
   \   00002C4E   0xF8DF 0x1EA4      LDR.W    R1,??RoadBrd_ParseString_479+0x8
   \   00002C52   0xA80A             ADD      R0,SP,#+40
   \   00002C54   0x.... 0x....      BL       sprintf
   \   00002C58   0xE0A2             B.N      ??RoadBrd_ParseString_391
   \   00002C5A   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_341:
   \   00002C5C   0x........         DC32     ?_111
   3047                                          }
   3048                                          else
   3049                                          {
   3050                                            // Is this a BLE Operation?
   3051                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_481: (+1)
   \   00002C60   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002C62   0x2D00             CMP      R5,#+0
   \   00002C64   0xD00A             BEQ.N    ??RoadBrd_ParseString_483
   3052                                            {
   3053                                              // Yes...Build and Send BLE Response NOW.
   3054                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_6C_ERR</STATUS>");
   \   00002C66   0xF8DF 0x1E90      LDR.W    R1,??RoadBrd_ParseString_479+0xC
   \   00002C6A   0xA80A             ADD      R0,SP,#+40
   \   00002C6C   0x.... 0x....      BL       strcpy
   3055                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002C70   0xA80A             ADD      R0,SP,#+40
   \   00002C72   0x.... 0x....      BL       strlen
   \   00002C76   0xA90A             ADD      R1,SP,#+40
   \   00002C78   0x.... 0x....      BL       BGM111_Transmit
   3056                                            }
   3057                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_483: (+1)
   \   00002C7C   0xF8DF 0x14C4      LDR.W    R1,??RoadBrd_ParseString_387+0x10
   \   00002C80   0xA80A             ADD      R0,SP,#+40
   \   00002C82   0x.... 0x....      BL       sprintf
   \   00002C86   0xE08B             B.N      ??RoadBrd_ParseString_391
   3058                                          }
   3059                                        }
   3060                                        else if (strncmp((char *)uuid,"0025",4) == 0) // RoadT_7C
   \                     ??RoadBrd_ParseString_480: (+1)
   \   00002C88   0x2204             MOVS     R2,#+4
   \   00002C8A   0xF8DF 0x1E70      LDR.W    R1,??RoadBrd_ParseString_479+0x10
   \   00002C8E   0xA836             ADD      R0,SP,#+216
   \   00002C90   0x.... 0x....      BL       strncmp
   \   00002C94   0x2800             CMP      R0,#+0
   \   00002C96   0xD137             BNE.N    ??RoadBrd_ParseString_484
   3061                                        {
   3062                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_7C, Offset, Scale);
   \   00002C98   0x9A29             LDR      R2,[SP, #+164]
   \   00002C9A   0x9928             LDR      R1,[SP, #+160]
   \   00002C9C   0x2014             MOVS     R0,#+20
   \   00002C9E   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002CA2   0x0006             MOVS     R6,R0
   3063                                          if (Status == HAL_OK)
   \   00002CA4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002CA6   0x2E00             CMP      R6,#+0
   \   00002CA8   0xD11A             BNE.N    ??RoadBrd_ParseString_485
   3064                                          {
   3065                                            // Is this a BLE Operation?
   3066                                            if ( BLE_Flag )
   \   00002CAA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002CAC   0x2D00             CMP      R5,#+0
   \   00002CAE   0xD00A             BEQ.N    ??RoadBrd_ParseString_486
   3067                                            {
   3068                                              // Yes...Build and Send BLE Response NOW.
   3069                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_7C</STATUS>");
   \   00002CB0   0xF8DF 0x1EDC      LDR.W    R1,??RoadBrd_ParseString_487
   \   00002CB4   0xA80A             ADD      R0,SP,#+40
   \   00002CB6   0x.... 0x....      BL       strcpy
   3070                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002CBA   0xA80A             ADD      R0,SP,#+40
   \   00002CBC   0x.... 0x....      BL       strlen
   \   00002CC0   0xA90A             ADD      R1,SP,#+40
   \   00002CC2   0x.... 0x....      BL       BGM111_Transmit
   3071                                            }
   3072                                            sprintf( (char *)tempBffr2, "RoadT_7C Set COMPLETE." );
   \                     ??RoadBrd_ParseString_486: (+1)
   \   00002CC6   0xF8DF 0x1ECC      LDR.W    R1,??RoadBrd_ParseString_487+0x4
   \   00002CCA   0xA80A             ADD      R0,SP,#+40
   \   00002CCC   0x.... 0x....      BL       sprintf
   \   00002CD0   0xE066             B.N      ??RoadBrd_ParseString_391
   \   00002CD2   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_347:
   \   00002CD4   0x........         DC32     ?_112
   \   00002CD8   0x........         DC32     ?_113
   \   00002CDC   0x........         DC32     ?_114
   3073                                          }
   3074                                          else
   3075                                          {
   3076                                            // Is this a BLE Operation?
   3077                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_485: (+1)
   \   00002CE0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002CE2   0x2D00             CMP      R5,#+0
   \   00002CE4   0xD00A             BEQ.N    ??RoadBrd_ParseString_488
   3078                                            {
   3079                                              // Yes...Build and Send BLE Response NOW.
   3080                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_7C_ERR</STATUS>");
   \   00002CE6   0xF8DF 0x1EB0      LDR.W    R1,??RoadBrd_ParseString_487+0x8
   \   00002CEA   0xA80A             ADD      R0,SP,#+40
   \   00002CEC   0x.... 0x....      BL       strcpy
   3081                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002CF0   0xA80A             ADD      R0,SP,#+40
   \   00002CF2   0x.... 0x....      BL       strlen
   \   00002CF6   0xA90A             ADD      R1,SP,#+40
   \   00002CF8   0x.... 0x....      BL       BGM111_Transmit
   3082                                            }
   3083                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_488: (+1)
   \   00002CFC   0xF8DF 0x1444      LDR.W    R1,??RoadBrd_ParseString_387+0x10
   \   00002D00   0xA80A             ADD      R0,SP,#+40
   \   00002D02   0x.... 0x....      BL       sprintf
   \   00002D06   0xE04B             B.N      ??RoadBrd_ParseString_391
   3084                                          }
   3085                                        }
   3086                                        else if (strncmp((char *)uuid,"0027",4) == 0) // RoadT_8C
   \                     ??RoadBrd_ParseString_484: (+1)
   \   00002D08   0x2204             MOVS     R2,#+4
   \   00002D0A   0xF8DF 0x1E90      LDR.W    R1,??RoadBrd_ParseString_487+0xC
   \   00002D0E   0xA836             ADD      R0,SP,#+216
   \   00002D10   0x.... 0x....      BL       strncmp
   \   00002D14   0x2800             CMP      R0,#+0
   \   00002D16   0xD130             BNE.N    ??RoadBrd_ParseString_489
   3087                                        {
   3088                                          Status = RoadBrd_CAL_Set_CalItem( CAL_ROADT_8C, Offset, Scale);
   \   00002D18   0x9A29             LDR      R2,[SP, #+164]
   \   00002D1A   0x9928             LDR      R1,[SP, #+160]
   \   00002D1C   0x2015             MOVS     R0,#+21
   \   00002D1E   0x.... 0x....      BL       RoadBrd_CAL_Set_CalItem
   \   00002D22   0x0006             MOVS     R6,R0
   3089                                          if (Status == HAL_OK)
   \   00002D24   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002D26   0x2E00             CMP      R6,#+0
   \   00002D28   0xD113             BNE.N    ??RoadBrd_ParseString_490
   3090                                          {
   3091                                            // Is this a BLE Operation?
   3092                                            if ( BLE_Flag )
   \   00002D2A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002D2C   0x2D00             CMP      R5,#+0
   \   00002D2E   0xD00A             BEQ.N    ??RoadBrd_ParseString_491
   3093                                            {
   3094                                              // Yes...Build and Send BLE Response NOW.
   3095                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_8C</STATUS>");
   \   00002D30   0xF8DF 0x1EFC      LDR.W    R1,??RoadBrd_ParseString_492
   \   00002D34   0xA80A             ADD      R0,SP,#+40
   \   00002D36   0x.... 0x....      BL       strcpy
   3096                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002D3A   0xA80A             ADD      R0,SP,#+40
   \   00002D3C   0x.... 0x....      BL       strlen
   \   00002D40   0xA90A             ADD      R1,SP,#+40
   \   00002D42   0x.... 0x....      BL       BGM111_Transmit
   3097                                            }
   3098                                            sprintf( (char *)tempBffr2, "RoadT_8C Set COMPLETE." );
   \                     ??RoadBrd_ParseString_491: (+1)
   \   00002D46   0xF8DF 0x1EEC      LDR.W    R1,??RoadBrd_ParseString_492+0x4
   \   00002D4A   0xA80A             ADD      R0,SP,#+40
   \   00002D4C   0x.... 0x....      BL       sprintf
   \   00002D50   0xE026             B.N      ??RoadBrd_ParseString_391
   3099                                          }
   3100                                          else
   3101                                          {
   3102                                            // Is this a BLE Operation?
   3103                                            if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_490: (+1)
   \   00002D52   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002D54   0x2D00             CMP      R5,#+0
   \   00002D56   0xD00A             BEQ.N    ??RoadBrd_ParseString_493
   3104                                            {
   3105                                              // Yes...Build and Send BLE Response NOW.
   3106                                              strcpy( (char *)tempBffr2, "<STATUS>ST_TCS_ROADT_8C_ERR</STATUS>");
   \   00002D58   0xF8DF 0x1EDC      LDR.W    R1,??RoadBrd_ParseString_492+0x8
   \   00002D5C   0xA80A             ADD      R0,SP,#+40
   \   00002D5E   0x.... 0x....      BL       strcpy
   3107                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002D62   0xA80A             ADD      R0,SP,#+40
   \   00002D64   0x.... 0x....      BL       strlen
   \   00002D68   0xA90A             ADD      R1,SP,#+40
   \   00002D6A   0x.... 0x....      BL       BGM111_Transmit
   3108                                            }
   3109                                            sprintf( (char *)tempBffr2, "TCS SET ERROR: FAILED.\r\n" );
   \                     ??RoadBrd_ParseString_493: (+1)
   \   00002D6E   0xF8DF 0x13D4      LDR.W    R1,??RoadBrd_ParseString_387+0x10
   \   00002D72   0xA80A             ADD      R0,SP,#+40
   \   00002D74   0x.... 0x....      BL       sprintf
   \   00002D78   0xE012             B.N      ??RoadBrd_ParseString_391
   3110                                          }
   3111                                        }
   3112                                        else
   3113                                        {
   3114                                          // Is this a BLE Operation?
   3115                                          if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_489: (+1)
   \   00002D7A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002D7C   0x2D00             CMP      R5,#+0
   \   00002D7E   0xD00A             BEQ.N    ??RoadBrd_ParseString_494
   3116                                          {
   3117                                            // Yes...Build and Send BLE Response NOW.
   3118                                            strcpy( (char *)tempBffr2, "<STATUS>CMD_TCS_BADUUID</STATUS>");
   \   00002D80   0xF8DF 0x1EB8      LDR.W    R1,??RoadBrd_ParseString_492+0xC
   \   00002D84   0xA80A             ADD      R0,SP,#+40
   \   00002D86   0x.... 0x....      BL       strcpy
   3119                                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002D8A   0xA80A             ADD      R0,SP,#+40
   \   00002D8C   0x.... 0x....      BL       strlen
   \   00002D90   0xA90A             ADD      R1,SP,#+40
   \   00002D92   0x.... 0x....      BL       BGM111_Transmit
   3120                                          }
   3121                                          sprintf( (char *)tempBffr2, "TCS SYNTAX ERROR: Bad UUID.\r\n" );
   \                     ??RoadBrd_ParseString_494: (+1)
   \   00002D96   0xF8DF 0x1EA8      LDR.W    R1,??RoadBrd_ParseString_492+0x10
   \   00002D9A   0xA80A             ADD      R0,SP,#+40
   \   00002D9C   0x.... 0x....      BL       sprintf
   3122                                        }
   3123                                        Status = HAL_OK;
   \                     ??RoadBrd_ParseString_391: (+1)
   \   00002DA0   0x2000             MOVS     R0,#+0
   \   00002DA2   0x0006             MOVS     R6,R0
   \   00002DA4   0xE004             B.N      ??RoadBrd_ParseString_381
   3124                                      }
   3125                                      else
   3126                                      {
   3127                                        strcpy( (char *)tempBffr2, "TCS SYNTAX ERROR: Wrong Number of Parameters.\r\n");
   \                     ??RoadBrd_ParseString_386: (+1)
   \   00002DA6   0xF8DF 0x1E9C      LDR.W    R1,??RoadBrd_ParseString_492+0x14
   \   00002DAA   0xA80A             ADD      R0,SP,#+40
   \   00002DAC   0x.... 0x....      BL       strcpy
   3128                                      }
   3129                                    } // EndElse (flag == 0)
   3130                                  } // EndElse (tempBffr[3]!=':')
   3131                                  break;
   \                     ??RoadBrd_ParseString_381: (+1)
   \   00002DB0   0xF001 0xB84D      B.W      ??RoadBrd_ParseString_369
   3132                                  //------------------ TCR Command: Calibration Read Command
   3133                                case 'R':
   3134                                  // Build Read Calibration Dump Part I....
   3135                                  // Is this a BLE Operation?
   3136                                  if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_376: (+1)
   \   00002DB4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002DB6   0x2D00             CMP      R5,#+0
   \   00002DB8   0xD00D             BEQ.N    ??RoadBrd_ParseString_495
   3137                                  {
   3138                                    // Yes...Build and Send BLE Response NOW.
   3139                                    sprintf( (char *)tempBffr2, "<STATUS>TCR:%s\\",  RoadBrd_CAL_GetTimeString());
   \   00002DBA   0x.... 0x....      BL       RoadBrd_CAL_GetTimeString
   \   00002DBE   0x0002             MOVS     R2,R0
   \   00002DC0   0xF8DF 0x1E84      LDR.W    R1,??RoadBrd_ParseString_492+0x18
   \   00002DC4   0xA80A             ADD      R0,SP,#+40
   \   00002DC6   0x.... 0x....      BL       sprintf
   3140                                    BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002DCA   0xA80A             ADD      R0,SP,#+40
   \   00002DCC   0x.... 0x....      BL       strlen
   \   00002DD0   0xA90A             ADD      R1,SP,#+40
   \   00002DD2   0x.... 0x....      BL       BGM111_Transmit
   3141                                  }
   3142                                  
   3143                                  // Send string to UART..
   3144                                  sprintf( (char *)tempBffr2, "CALIBRATION DATA\r\nDate: %s\r\n",  RoadBrd_CAL_GetTimeString());
   \                     ??RoadBrd_ParseString_495: (+1)
   \   00002DD6   0x.... 0x....      BL       RoadBrd_CAL_GetTimeString
   \   00002DDA   0x0002             MOVS     R2,R0
   \   00002DDC   0xF8DF 0x1F14      LDR.W    R1,??RoadBrd_ParseString_496
   \   00002DE0   0xA80A             ADD      R0,SP,#+40
   \   00002DE2   0x.... 0x....      BL       sprintf
   3145          #ifdef NUCLEO
   3146                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   3147          #else
   3148                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00002DE6   0xA90A             ADD      R1,SP,#+40
   \   00002DE8   0x2000             MOVS     R0,#+0
   \   00002DEA   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00002DEE   0x0006             MOVS     R6,R0
   3149          #endif
   3150                                  if (Status != HAL_OK)
   \   00002DF0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002DF2   0x2E00             CMP      R6,#+0
   \   00002DF4   0xD003             BEQ.N    ??RoadBrd_ParseString_497
   3151                                      return Status;
   \   00002DF6   0x0030             MOVS     R0,R6
   \   00002DF8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002DFA   0xF001 0xBD10      B.W      ??RoadBrd_ParseString_4
   3152                                  // Build Read Calibration Dump Part II....
   3153                                  // Send string to UART..
   3154                                  sprintf( (char *)tempBffr2, "Name		        UUID		Slope		Offset\r\n" );
   \                     ??RoadBrd_ParseString_497: (+1)
   \   00002DFE   0xF8DF 0x1EF8      LDR.W    R1,??RoadBrd_ParseString_496+0x4
   \   00002E02   0xA80A             ADD      R0,SP,#+40
   \   00002E04   0x.... 0x....      BL       sprintf
   3155          #ifdef NUCLEO
   3156                                  Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   3157          #else
   3158                                  Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00002E08   0xA90A             ADD      R1,SP,#+40
   \   00002E0A   0x2000             MOVS     R0,#+0
   \   00002E0C   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00002E10   0x0006             MOVS     R6,R0
   3159          #endif
   3160                                  if (Status != HAL_OK)
   \   00002E12   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00002E14   0x2E00             CMP      R6,#+0
   \   00002E16   0xD009             BEQ.N    ??RoadBrd_ParseString_498
   3161                                      return Status;
   \   00002E18   0x0030             MOVS     R0,R6
   \   00002E1A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002E1C   0xF001 0xBCFF      B.W      ??RoadBrd_ParseString_4
   \                     ??RoadBrd_ParseString_366:
   \   00002E20   0x........         DC32     ?_115
   \   00002E24   0x........         DC32     ?_24
   \   00002E28   0x........         DC32     ?_116
   3162                                  // NOW, Build Data String..
   3163                                  for (x=0; x<CAL_LAST_VALUE; x++)
   \                     ??RoadBrd_ParseString_498: (+1)
   \   00002E2C   0x2000             MOVS     R0,#+0
   \   00002E2E   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_499: (+1)
   \   00002E30   0x2F16             CMP      R7,#+22
   \   00002E32   0xF280 0x8766      BGE.W    ??RoadBrd_ParseString_500
   3164                                  {
   3165                                    // Build String
   3166                                    switch(x)
   \   00002E36   0x2F00             CMP      R7,#+0
   \   00002E38   0xD036             BEQ.N    ??RoadBrd_ParseString_501
   \   00002E3A   0x2F02             CMP      R7,#+2
   \   00002E3C   0xF000 0x80DE      BEQ.W    ??RoadBrd_ParseString_502
   \   00002E40   0xF0C0 0x8088      BCC.W    ??RoadBrd_ParseString_503
   \   00002E44   0x2F04             CMP      R7,#+4
   \   00002E46   0xF000 0x8181      BEQ.W    ??RoadBrd_ParseString_504
   \   00002E4A   0xF0C0 0x8129      BCC.W    ??RoadBrd_ParseString_505
   \   00002E4E   0x2F06             CMP      R7,#+6
   \   00002E50   0xF000 0x8224      BEQ.W    ??RoadBrd_ParseString_506
   \   00002E54   0xF0C0 0x81CE      BCC.W    ??RoadBrd_ParseString_507
   \   00002E58   0x2F08             CMP      R7,#+8
   \   00002E5A   0xF000 0x82C7      BEQ.W    ??RoadBrd_ParseString_508
   \   00002E5E   0xF0C0 0x8271      BCC.W    ??RoadBrd_ParseString_509
   \   00002E62   0x2F0A             CMP      R7,#+10
   \   00002E64   0xF000 0x8368      BEQ.W    ??RoadBrd_ParseString_510
   \   00002E68   0xF0C0 0x8314      BCC.W    ??RoadBrd_ParseString_511
   \   00002E6C   0x2F0C             CMP      R7,#+12
   \   00002E6E   0xF000 0x8407      BEQ.W    ??RoadBrd_ParseString_512
   \   00002E72   0xF0C0 0x83B3      BCC.W    ??RoadBrd_ParseString_513
   \   00002E76   0x2F0E             CMP      R7,#+14
   \   00002E78   0xF000 0x84A6      BEQ.W    ??RoadBrd_ParseString_514
   \   00002E7C   0xF0C0 0x8452      BCC.W    ??RoadBrd_ParseString_515
   \   00002E80   0x2F10             CMP      R7,#+16
   \   00002E82   0xF000 0x8545      BEQ.W    ??RoadBrd_ParseString_516
   \   00002E86   0xF0C0 0x84F1      BCC.W    ??RoadBrd_ParseString_517
   \   00002E8A   0x2F12             CMP      R7,#+18
   \   00002E8C   0xF000 0x85E6      BEQ.W    ??RoadBrd_ParseString_518
   \   00002E90   0xF0C0 0x8592      BCC.W    ??RoadBrd_ParseString_519
   \   00002E94   0x2F14             CMP      R7,#+20
   \   00002E96   0xF000 0x8683      BEQ.W    ??RoadBrd_ParseString_520
   \   00002E9A   0xF0C0 0x8631      BCC.W    ??RoadBrd_ParseString_521
   \   00002E9E   0x2F15             CMP      R7,#+21
   \   00002EA0   0xF000 0x86D4      BEQ.W    ??RoadBrd_ParseString_522
   \   00002EA4   0xF000 0xBF19      B.W      ??RoadBrd_ParseString_523
   3167                                    {
   3168                                      case CAL_SHNT_VLTG: //CAL_SHNT_VLTG Values
   3169                                        // Is this a BLE Operation?
   3170                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_501: (+1)
   \   00002EA8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002EAA   0x2D00             CMP      R5,#+0
   \   00002EAC   0xD024             BEQ.N    ??RoadBrd_ParseString_524
   3171                                        {
   3172                                          // Yes...Build and Send BLE Response NOW.
   3173                                          sprintf( (char *)tempBffr2, "%s:0002//%1.4f//%2.3f//", 
   3174                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3175                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3176                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00002EAE   0x0038             MOVS     R0,R7
   \   00002EB0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002EB2   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00002EB6   0x4683             MOV      R11,R0
   \   00002EB8   0x0038             MOVS     R0,R7
   \   00002EBA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002EBC   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00002EC0   0x4681             MOV      R9,R0
   \   00002EC2   0x0038             MOVS     R0,R7
   \   00002EC4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002EC6   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00002ECA   0x4682             MOV      R10,R0
   \   00002ECC   0x4658             MOV      R0,R11
   \   00002ECE   0x.... 0x....      BL       __aeabi_f2d
   \   00002ED2   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00002ED6   0x4648             MOV      R0,R9
   \   00002ED8   0x.... 0x....      BL       __aeabi_f2d
   \   00002EDC   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00002EE0   0x4652             MOV      R2,R10
   \   00002EE2   0xF8DF 0x1EE4      LDR.W    R1,??RoadBrd_ParseString_525
   \   00002EE6   0xA80A             ADD      R0,SP,#+40
   \   00002EE8   0x.... 0x....      BL       sprintf
   3177                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002EEC   0xA80A             ADD      R0,SP,#+40
   \   00002EEE   0x.... 0x....      BL       strlen
   \   00002EF2   0xA90A             ADD      R1,SP,#+40
   \   00002EF4   0x.... 0x....      BL       BGM111_Transmit
   3178                                        }
   3179                                        sprintf( (char *)tempBffr2, "%s	0002		%1.4f		%2.3f\r\n", 
   3180                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3181                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3182                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_524: (+1)
   \   00002EF8   0x0038             MOVS     R0,R7
   \   00002EFA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002EFC   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00002F00   0x4683             MOV      R11,R0
   \   00002F02   0x0038             MOVS     R0,R7
   \   00002F04   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002F06   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00002F0A   0x4681             MOV      R9,R0
   \   00002F0C   0x0038             MOVS     R0,R7
   \   00002F0E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002F10   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00002F14   0x4682             MOV      R10,R0
   \   00002F16   0x4658             MOV      R0,R11
   \   00002F18   0x.... 0x....      BL       __aeabi_f2d
   \   00002F1C   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00002F20   0x4648             MOV      R0,R9
   \   00002F22   0x.... 0x....      BL       __aeabi_f2d
   \   00002F26   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00002F2A   0x4652             MOV      R2,R10
   \   00002F2C   0xF8DF 0x1EF4      LDR.W    R1,??RoadBrd_ParseString_526
   \   00002F30   0xA80A             ADD      R0,SP,#+40
   \   00002F32   0x.... 0x....      BL       sprintf
   3183                                        break;
   \   00002F36   0xF000 0xBED0      B.W      ??RoadBrd_ParseString_523
   \   00002F3A   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_368:
   \   00002F3C   0x........         DC32     ?_117
   \   00002F40   0x........         DC32     ?_118
   \   00002F44   0x........         DC32     ?_119
   \   00002F48   0x........         DC32     ?_120
   \   00002F4C   0x........         DC32     ?_121
   \   00002F50   0x........         DC32     ?_122
   3184                                      case CAL_CURRENT: //CAL_CURRENT Values
   3185                                        // Is this a BLE Operation?
   3186                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_503: (+1)
   \   00002F54   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002F56   0x2D00             CMP      R5,#+0
   \   00002F58   0xD024             BEQ.N    ??RoadBrd_ParseString_527
   3187                                        {
   3188                                          // Yes...Build and Send BLE Response NOW.
   3189                                          sprintf( (char *)tempBffr2, "%s:0004//%1.4f//%2.3f//", 
   3190                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3191                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3192                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00002F5A   0x0038             MOVS     R0,R7
   \   00002F5C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002F5E   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00002F62   0x4683             MOV      R11,R0
   \   00002F64   0x0038             MOVS     R0,R7
   \   00002F66   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002F68   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00002F6C   0x4681             MOV      R9,R0
   \   00002F6E   0x0038             MOVS     R0,R7
   \   00002F70   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002F72   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00002F76   0x4682             MOV      R10,R0
   \   00002F78   0x4658             MOV      R0,R11
   \   00002F7A   0x.... 0x....      BL       __aeabi_f2d
   \   00002F7E   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00002F82   0x4648             MOV      R0,R9
   \   00002F84   0x.... 0x....      BL       __aeabi_f2d
   \   00002F88   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00002F8C   0x4652             MOV      R2,R10
   \   00002F8E   0xF8DF 0x1EFC      LDR.W    R1,??RoadBrd_ParseString_528
   \   00002F92   0xA80A             ADD      R0,SP,#+40
   \   00002F94   0x.... 0x....      BL       sprintf
   3193                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00002F98   0xA80A             ADD      R0,SP,#+40
   \   00002F9A   0x.... 0x....      BL       strlen
   \   00002F9E   0xA90A             ADD      R1,SP,#+40
   \   00002FA0   0x.... 0x....      BL       BGM111_Transmit
   3194                                        }
   3195                                        sprintf( (char *)tempBffr2, "%s	        0004		%1.4f		%2.3f\r\n", 
   3196                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3197                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3198                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_527: (+1)
   \   00002FA4   0x0038             MOVS     R0,R7
   \   00002FA6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002FA8   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00002FAC   0x4683             MOV      R11,R0
   \   00002FAE   0x0038             MOVS     R0,R7
   \   00002FB0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002FB2   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00002FB6   0x4681             MOV      R9,R0
   \   00002FB8   0x0038             MOVS     R0,R7
   \   00002FBA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00002FBC   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00002FC0   0x4682             MOV      R10,R0
   \   00002FC2   0x4658             MOV      R0,R11
   \   00002FC4   0x.... 0x....      BL       __aeabi_f2d
   \   00002FC8   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00002FCC   0x4648             MOV      R0,R9
   \   00002FCE   0x.... 0x....      BL       __aeabi_f2d
   \   00002FD2   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00002FD6   0x4652             MOV      R2,R10
   \   00002FD8   0xF8DF 0x1EE8      LDR.W    R1,??RoadBrd_ParseString_529
   \   00002FDC   0xA80A             ADD      R0,SP,#+40
   \   00002FDE   0x.... 0x....      BL       sprintf
   3199                                        break;
   \   00002FE2   0xF000 0xBE7A      B.W      ??RoadBrd_ParseString_523
   \   00002FE6   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_373:
   \   00002FE8   0x........         DC32     ?_123
   \   00002FEC   0x........         DC32     ?_124
   \   00002FF0   0x........         DC32     ?_125
   \   00002FF4   0x........         DC32     ?_126
   \   00002FF8   0x........         DC32     ?_127
   3200                                      case CAL_POWER: //CAL_POWER Values
   3201                                        // Is this a BLE Operation?
   3202                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_502: (+1)
   \   00002FFC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00002FFE   0x2D00             CMP      R5,#+0
   \   00003000   0xD024             BEQ.N    ??RoadBrd_ParseString_530
   3203                                        {
   3204                                          // Yes...Build and Send BLE Response NOW.
   3205                                          sprintf( (char *)tempBffr2, "%s:0006//%1.4f//%2.3f//", 
   3206                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3207                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3208                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003002   0x0038             MOVS     R0,R7
   \   00003004   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003006   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   0000300A   0x4683             MOV      R11,R0
   \   0000300C   0x0038             MOVS     R0,R7
   \   0000300E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003010   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003014   0x4681             MOV      R9,R0
   \   00003016   0x0038             MOVS     R0,R7
   \   00003018   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000301A   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   0000301E   0x4682             MOV      R10,R0
   \   00003020   0x4658             MOV      R0,R11
   \   00003022   0x.... 0x....      BL       __aeabi_f2d
   \   00003026   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   0000302A   0x4648             MOV      R0,R9
   \   0000302C   0x.... 0x....      BL       __aeabi_f2d
   \   00003030   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003034   0x4652             MOV      R2,R10
   \   00003036   0xF8DF 0x1EC8      LDR.W    R1,??RoadBrd_ParseString_531
   \   0000303A   0xA80A             ADD      R0,SP,#+40
   \   0000303C   0x.... 0x....      BL       sprintf
   3209                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003040   0xA80A             ADD      R0,SP,#+40
   \   00003042   0x.... 0x....      BL       strlen
   \   00003046   0xA90A             ADD      R1,SP,#+40
   \   00003048   0x.... 0x....      BL       BGM111_Transmit
   3210                                        }
   3211                                        sprintf( (char *)tempBffr2, "%s	0006		%1.4f		%2.3f\r\n", 
   3212                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3213                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3214                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_530: (+1)
   \   0000304C   0x0038             MOVS     R0,R7
   \   0000304E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003050   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003054   0x4683             MOV      R11,R0
   \   00003056   0x0038             MOVS     R0,R7
   \   00003058   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000305A   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   0000305E   0x4681             MOV      R9,R0
   \   00003060   0x0038             MOVS     R0,R7
   \   00003062   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003064   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003068   0x4682             MOV      R10,R0
   \   0000306A   0x4658             MOV      R0,R11
   \   0000306C   0x.... 0x....      BL       __aeabi_f2d
   \   00003070   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003074   0x4648             MOV      R0,R9
   \   00003076   0x.... 0x....      BL       __aeabi_f2d
   \   0000307A   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000307E   0x4652             MOV      R2,R10
   \   00003080   0xF8DF 0x1ED8      LDR.W    R1,??RoadBrd_ParseString_532
   \   00003084   0xA80A             ADD      R0,SP,#+40
   \   00003086   0x.... 0x....      BL       sprintf
   3215                                        break;
   \   0000308A   0xF000 0xBE26      B.W      ??RoadBrd_ParseString_523
   \   0000308E   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_383:
   \   00003090   0x........         DC32     ?_128
   \   00003094   0x........         DC32     ?_129
   \   00003098   0x........         DC32     ?_130
   \   0000309C   0x........         DC32     ?_131
   3216                                      case CAL_VOLTAGE: //CAL_VOLTAGE Values
   3217                                        // Is this a BLE Operation?
   3218                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_505: (+1)
   \   000030A0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000030A2   0x2D00             CMP      R5,#+0
   \   000030A4   0xD024             BEQ.N    ??RoadBrd_ParseString_533
   3219                                        {
   3220                                          // Yes...Build and Send BLE Response NOW.
   3221                                          sprintf( (char *)tempBffr2, "%s:0008//%1.4f//%2.3f//", 
   3222                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3223                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3224                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   000030A6   0x0038             MOVS     R0,R7
   \   000030A8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000030AA   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000030AE   0x4683             MOV      R11,R0
   \   000030B0   0x0038             MOVS     R0,R7
   \   000030B2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000030B4   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000030B8   0x4681             MOV      R9,R0
   \   000030BA   0x0038             MOVS     R0,R7
   \   000030BC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000030BE   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000030C2   0x4682             MOV      R10,R0
   \   000030C4   0x4658             MOV      R0,R11
   \   000030C6   0x.... 0x....      BL       __aeabi_f2d
   \   000030CA   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000030CE   0x4648             MOV      R0,R9
   \   000030D0   0x.... 0x....      BL       __aeabi_f2d
   \   000030D4   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000030D8   0x4652             MOV      R2,R10
   \   000030DA   0xF8DF 0x1E84      LDR.W    R1,??RoadBrd_ParseString_532+0x4
   \   000030DE   0xA80A             ADD      R0,SP,#+40
   \   000030E0   0x.... 0x....      BL       sprintf
   3225                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000030E4   0xA80A             ADD      R0,SP,#+40
   \   000030E6   0x.... 0x....      BL       strlen
   \   000030EA   0xA90A             ADD      R1,SP,#+40
   \   000030EC   0x.... 0x....      BL       BGM111_Transmit
   3226                                        }
   3227                                        sprintf( (char *)tempBffr2, "%s	        0008		%1.4f		%2.3f\r\n", 
   3228                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3229                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3230                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_533: (+1)
   \   000030F0   0x0038             MOVS     R0,R7
   \   000030F2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000030F4   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000030F8   0x4683             MOV      R11,R0
   \   000030FA   0x0038             MOVS     R0,R7
   \   000030FC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000030FE   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003102   0x4681             MOV      R9,R0
   \   00003104   0x0038             MOVS     R0,R7
   \   00003106   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003108   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   0000310C   0x4682             MOV      R10,R0
   \   0000310E   0x4658             MOV      R0,R11
   \   00003110   0x.... 0x....      BL       __aeabi_f2d
   \   00003114   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003118   0x4648             MOV      R0,R9
   \   0000311A   0x.... 0x....      BL       __aeabi_f2d
   \   0000311E   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003122   0x4652             MOV      R2,R10
   \   00003124   0xF8DF 0x1E3C      LDR.W    R1,??RoadBrd_ParseString_532+0x8
   \   00003128   0xA80A             ADD      R0,SP,#+40
   \   0000312A   0x.... 0x....      BL       sprintf
   3231                                        break;
   \   0000312E   0xF000 0xBDD4      B.W      ??RoadBrd_ParseString_523
   \   00003132   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_387:
   \   00003134   0x........         DC32     ?_132
   \   00003138   0x........         DC32     ?_133
   \   0000313C   0x........         DC32     ?_134
   \   00003140   0x........         DC32     ?_135
   \   00003144   0x........         DC32     ?_136
   \   00003148   0x........         DC32     ?_137
   3232                                      case CAL_TEMPC: //CAL_TEMPC Values
   3233                                        // Is this a BLE Operation?
   3234                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_504: (+1)
   \   0000314C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000314E   0x2D00             CMP      R5,#+0
   \   00003150   0xD024             BEQ.N    ??RoadBrd_ParseString_534
   3235                                        {
   3236                                          // Yes...Build and Send BLE Response NOW.
   3237                                          sprintf( (char *)tempBffr2, "%s:000A//%1.4f//%2.3f//", 
   3238                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3239                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3240                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003152   0x0038             MOVS     R0,R7
   \   00003154   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003156   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   0000315A   0x4683             MOV      R11,R0
   \   0000315C   0x0038             MOVS     R0,R7
   \   0000315E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003160   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003164   0x4681             MOV      R9,R0
   \   00003166   0x0038             MOVS     R0,R7
   \   00003168   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000316A   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   0000316E   0x4682             MOV      R10,R0
   \   00003170   0x4658             MOV      R0,R11
   \   00003172   0x.... 0x....      BL       __aeabi_f2d
   \   00003176   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   0000317A   0x4648             MOV      R0,R9
   \   0000317C   0x.... 0x....      BL       __aeabi_f2d
   \   00003180   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003184   0x4652             MOV      R2,R10
   \   00003186   0xF8DF 0x1E8C      LDR.W    R1,??RoadBrd_ParseString_535
   \   0000318A   0xA80A             ADD      R0,SP,#+40
   \   0000318C   0x.... 0x....      BL       sprintf
   3241                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003190   0xA80A             ADD      R0,SP,#+40
   \   00003192   0x.... 0x....      BL       strlen
   \   00003196   0xA90A             ADD      R1,SP,#+40
   \   00003198   0x.... 0x....      BL       BGM111_Transmit
   3242                                        }
   3243                                        sprintf( (char *)tempBffr2, "%s	000A		%1.4f		%2.3f\r\n", 
   3244                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3245                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3246                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_534: (+1)
   \   0000319C   0x0038             MOVS     R0,R7
   \   0000319E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000031A0   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000031A4   0x4683             MOV      R11,R0
   \   000031A6   0x0038             MOVS     R0,R7
   \   000031A8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000031AA   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000031AE   0x4681             MOV      R9,R0
   \   000031B0   0x0038             MOVS     R0,R7
   \   000031B2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000031B4   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000031B8   0x4682             MOV      R10,R0
   \   000031BA   0x4658             MOV      R0,R11
   \   000031BC   0x.... 0x....      BL       __aeabi_f2d
   \   000031C0   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000031C4   0x4648             MOV      R0,R9
   \   000031C6   0x.... 0x....      BL       __aeabi_f2d
   \   000031CA   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000031CE   0x4652             MOV      R2,R10
   \   000031D0   0xF8DF 0x1EA0      LDR.W    R1,??RoadBrd_ParseString_536
   \   000031D4   0xA80A             ADD      R0,SP,#+40
   \   000031D6   0x.... 0x....      BL       sprintf
   3247                                        break;
   \   000031DA   0xF000 0xBD7E      B.W      ??RoadBrd_ParseString_523
   \   000031DE   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_396:
   \   000031E0   0x........         DC32     ?_138
   \   000031E4   0x........         DC32     ?_139
   \   000031E8   0x........         DC32     ?_140
   \   000031EC   0x........         DC32     ?_141
   \   000031F0   0x........         DC32     ?_142
   3248                                      case CAL_TEMPF: //CAL_TEMPF Values
   3249                                        // Is this a BLE Operation?
   3250                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_507: (+1)
   \   000031F4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000031F6   0x2D00             CMP      R5,#+0
   \   000031F8   0xD024             BEQ.N    ??RoadBrd_ParseString_537
   3251                                        {
   3252                                          // Yes...Build and Send BLE Response NOW.
   3253                                          sprintf( (char *)tempBffr2, "%s:000B//%1.4f//%2.3f//", 
   3254                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3255                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3256                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   000031FA   0x0038             MOVS     R0,R7
   \   000031FC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000031FE   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003202   0x4683             MOV      R11,R0
   \   00003204   0x0038             MOVS     R0,R7
   \   00003206   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003208   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   0000320C   0x4681             MOV      R9,R0
   \   0000320E   0x0038             MOVS     R0,R7
   \   00003210   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003212   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003216   0x4682             MOV      R10,R0
   \   00003218   0x4658             MOV      R0,R11
   \   0000321A   0x.... 0x....      BL       __aeabi_f2d
   \   0000321E   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003222   0x4648             MOV      R0,R9
   \   00003224   0x.... 0x....      BL       __aeabi_f2d
   \   00003228   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000322C   0x4652             MOV      R2,R10
   \   0000322E   0xF8DF 0x1E48      LDR.W    R1,??RoadBrd_ParseString_536+0x4
   \   00003232   0xA80A             ADD      R0,SP,#+40
   \   00003234   0x.... 0x....      BL       sprintf
   3257                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003238   0xA80A             ADD      R0,SP,#+40
   \   0000323A   0x.... 0x....      BL       strlen
   \   0000323E   0xA90A             ADD      R1,SP,#+40
   \   00003240   0x.... 0x....      BL       BGM111_Transmit
   3258                                        }
   3259                                        sprintf( (char *)tempBffr2, "%s	000B		%1.4f		%2.3f\r\n", 
   3260                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3261                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3262                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_537: (+1)
   \   00003244   0x0038             MOVS     R0,R7
   \   00003246   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003248   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   0000324C   0x4683             MOV      R11,R0
   \   0000324E   0x0038             MOVS     R0,R7
   \   00003250   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003252   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003256   0x4681             MOV      R9,R0
   \   00003258   0x0038             MOVS     R0,R7
   \   0000325A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000325C   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003260   0x4682             MOV      R10,R0
   \   00003262   0x4658             MOV      R0,R11
   \   00003264   0x.... 0x....      BL       __aeabi_f2d
   \   00003268   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   0000326C   0x4648             MOV      R0,R9
   \   0000326E   0x.... 0x....      BL       __aeabi_f2d
   \   00003272   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003276   0x4652             MOV      R2,R10
   \   00003278   0xF8DF 0x1E00      LDR.W    R1,??RoadBrd_ParseString_536+0x8
   \   0000327C   0xA80A             ADD      R0,SP,#+40
   \   0000327E   0x.... 0x....      BL       sprintf
   3263                                        break;
   \   00003282   0xF000 0xBD2A      B.W      ??RoadBrd_ParseString_523
   \   00003286   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_401:
   \   00003288   0x........         DC32     ?_143
   \   0000328C   0x........         DC32     ?_144
   \   00003290   0x........         DC32     ?_145
   \   00003294   0x........         DC32     ?_146
   \   00003298   0x........         DC32     ?_147
   3264                                      case CAL_PRESSURE: //CAL_PRESSURE Values
   3265                                        // Is this a BLE Operation?
   3266                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_506: (+1)
   \   0000329C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000329E   0x2D00             CMP      R5,#+0
   \   000032A0   0xD024             BEQ.N    ??RoadBrd_ParseString_538
   3267                                        {
   3268                                          // Yes...Build and Send BLE Response NOW.
   3269                                          sprintf( (char *)tempBffr2, "%s:0011//%1.4f//%2.3f//", 
   3270                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3271                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3272                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   000032A2   0x0038             MOVS     R0,R7
   \   000032A4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000032A6   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000032AA   0x4683             MOV      R11,R0
   \   000032AC   0x0038             MOVS     R0,R7
   \   000032AE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000032B0   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000032B4   0x4681             MOV      R9,R0
   \   000032B6   0x0038             MOVS     R0,R7
   \   000032B8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000032BA   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000032BE   0x4682             MOV      R10,R0
   \   000032C0   0x4658             MOV      R0,R11
   \   000032C2   0x.... 0x....      BL       __aeabi_f2d
   \   000032C6   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000032CA   0x4648             MOV      R0,R9
   \   000032CC   0x.... 0x....      BL       __aeabi_f2d
   \   000032D0   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000032D4   0x4652             MOV      R2,R10
   \   000032D6   0xF8DF 0x1EB0      LDR.W    R1,??RoadBrd_ParseString_539
   \   000032DA   0xA80A             ADD      R0,SP,#+40
   \   000032DC   0x.... 0x....      BL       sprintf
   3273                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000032E0   0xA80A             ADD      R0,SP,#+40
   \   000032E2   0x.... 0x....      BL       strlen
   \   000032E6   0xA90A             ADD      R1,SP,#+40
   \   000032E8   0x.... 0x....      BL       BGM111_Transmit
   3274                                        }
   3275                                        sprintf( (char *)tempBffr2, "%s	0011		%1.4f		%2.3f\r\n", 
   3276                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3277                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3278                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_538: (+1)
   \   000032EC   0x0038             MOVS     R0,R7
   \   000032EE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000032F0   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000032F4   0x4683             MOV      R11,R0
   \   000032F6   0x0038             MOVS     R0,R7
   \   000032F8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000032FA   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000032FE   0x4681             MOV      R9,R0
   \   00003300   0x0038             MOVS     R0,R7
   \   00003302   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003304   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003308   0x4682             MOV      R10,R0
   \   0000330A   0x4658             MOV      R0,R11
   \   0000330C   0x.... 0x....      BL       __aeabi_f2d
   \   00003310   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003314   0x4648             MOV      R0,R9
   \   00003316   0x.... 0x....      BL       __aeabi_f2d
   \   0000331A   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000331E   0x4652             MOV      R2,R10
   \   00003320   0xF8DF 0x1E68      LDR.W    R1,??RoadBrd_ParseString_539+0x4
   \   00003324   0xA80A             ADD      R0,SP,#+40
   \   00003326   0x.... 0x....      BL       sprintf
   3279                                        break;
   \   0000332A   0xF000 0xBCD6      B.W      ??RoadBrd_ParseString_523
   \   0000332E   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_407:
   \   00003330   0x........         DC32     ?_148
   \   00003334   0x........         DC32     ?_149
   \   00003338   0x........         DC32     ?_150
   \   0000333C   0x........         DC32     ?_151
   \   00003340   0x........         DC32     ?_152
   3280                                      case CAL_HUMIDITY: //CAL_HUMIDITY Values
   3281                                        // Is this a BLE Operation?
   3282                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_509: (+1)
   \   00003344   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003346   0x2D00             CMP      R5,#+0
   \   00003348   0xD024             BEQ.N    ??RoadBrd_ParseString_540
   3283                                        {
   3284                                          // Yes...Build and Send BLE Response NOW.
   3285                                          sprintf( (char *)tempBffr2, "%s:0030//%1.4f//%2.3f//", 
   3286                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3287                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3288                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   0000334A   0x0038             MOVS     R0,R7
   \   0000334C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000334E   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003352   0x4683             MOV      R11,R0
   \   00003354   0x0038             MOVS     R0,R7
   \   00003356   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003358   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   0000335C   0x4681             MOV      R9,R0
   \   0000335E   0x0038             MOVS     R0,R7
   \   00003360   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003362   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003366   0x4682             MOV      R10,R0
   \   00003368   0x4658             MOV      R0,R11
   \   0000336A   0x.... 0x....      BL       __aeabi_f2d
   \   0000336E   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003372   0x4648             MOV      R0,R9
   \   00003374   0x.... 0x....      BL       __aeabi_f2d
   \   00003378   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000337C   0x4652             MOV      R2,R10
   \   0000337E   0xF8DF 0x1E70      LDR.W    R1,??RoadBrd_ParseString_541
   \   00003382   0xA80A             ADD      R0,SP,#+40
   \   00003384   0x.... 0x....      BL       sprintf
   3289                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003388   0xA80A             ADD      R0,SP,#+40
   \   0000338A   0x.... 0x....      BL       strlen
   \   0000338E   0xA90A             ADD      R1,SP,#+40
   \   00003390   0x.... 0x....      BL       BGM111_Transmit
   3290                                        }
   3291                                        sprintf( (char *)tempBffr2, "%s	0030		%1.4f		%2.3f\r\n", 
   3292                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3293                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3294                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_540: (+1)
   \   00003394   0x0038             MOVS     R0,R7
   \   00003396   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003398   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   0000339C   0x4683             MOV      R11,R0
   \   0000339E   0x0038             MOVS     R0,R7
   \   000033A0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000033A2   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000033A6   0x4681             MOV      R9,R0
   \   000033A8   0x0038             MOVS     R0,R7
   \   000033AA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000033AC   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000033B0   0x4682             MOV      R10,R0
   \   000033B2   0x4658             MOV      R0,R11
   \   000033B4   0x.... 0x....      BL       __aeabi_f2d
   \   000033B8   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000033BC   0x4648             MOV      R0,R9
   \   000033BE   0x.... 0x....      BL       __aeabi_f2d
   \   000033C2   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000033C6   0x4652             MOV      R2,R10
   \   000033C8   0xF8DF 0x1E74      LDR.W    R1,??RoadBrd_ParseString_542
   \   000033CC   0xA80A             ADD      R0,SP,#+40
   \   000033CE   0x.... 0x....      BL       sprintf
   3295                                        break;
   \   000033D2   0xF000 0xBC82      B.W      ??RoadBrd_ParseString_523
   \   000033D6   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_412:
   \   000033D8   0x........         DC32     ?_153
   \   000033DC   0x........         DC32     ?_154
   \   000033E0   0x........         DC32     ?_155
   \   000033E4   0x........         DC32     ?_156
   \   000033E8   0x........         DC32     ?_157
   3296                                      case CAL_HUM_TEMPC: //CAL_HUM_TEMPC Values
   3297                                        // Is this a BLE Operation?
   3298                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_508: (+1)
   \   000033EC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000033EE   0x2D00             CMP      R5,#+0
   \   000033F0   0xD024             BEQ.N    ??RoadBrd_ParseString_543
   3299                                        {
   3300                                          // Yes...Build and Send BLE Response NOW.
   3301                                          sprintf( (char *)tempBffr2, "%s:0032//%1.4f//%2.3f//", 
   3302                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3303                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3304                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   000033F2   0x0038             MOVS     R0,R7
   \   000033F4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000033F6   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000033FA   0x4683             MOV      R11,R0
   \   000033FC   0x0038             MOVS     R0,R7
   \   000033FE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003400   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003404   0x4681             MOV      R9,R0
   \   00003406   0x0038             MOVS     R0,R7
   \   00003408   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000340A   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   0000340E   0x4682             MOV      R10,R0
   \   00003410   0x4658             MOV      R0,R11
   \   00003412   0x.... 0x....      BL       __aeabi_f2d
   \   00003416   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   0000341A   0x4648             MOV      R0,R9
   \   0000341C   0x.... 0x....      BL       __aeabi_f2d
   \   00003420   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003424   0x4652             MOV      R2,R10
   \   00003426   0xF8DF 0x1E78      LDR.W    R1,??RoadBrd_ParseString_544
   \   0000342A   0xA80A             ADD      R0,SP,#+40
   \   0000342C   0x.... 0x....      BL       sprintf
   3305                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003430   0xA80A             ADD      R0,SP,#+40
   \   00003432   0x.... 0x....      BL       strlen
   \   00003436   0xA90A             ADD      R1,SP,#+40
   \   00003438   0x.... 0x....      BL       BGM111_Transmit
   3306                                        }
   3307                                        sprintf( (char *)tempBffr2, "%s	0032		%1.4f		%2.3f\r\n", 
   3308                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3309                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3310                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_543: (+1)
   \   0000343C   0x0038             MOVS     R0,R7
   \   0000343E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003440   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003444   0x4683             MOV      R11,R0
   \   00003446   0x0038             MOVS     R0,R7
   \   00003448   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000344A   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   0000344E   0x4681             MOV      R9,R0
   \   00003450   0x0038             MOVS     R0,R7
   \   00003452   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003454   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003458   0x4682             MOV      R10,R0
   \   0000345A   0x4658             MOV      R0,R11
   \   0000345C   0x.... 0x....      BL       __aeabi_f2d
   \   00003460   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003464   0x4648             MOV      R0,R9
   \   00003466   0x.... 0x....      BL       __aeabi_f2d
   \   0000346A   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000346E   0x4652             MOV      R2,R10
   \   00003470   0xF8DF 0x1E30      LDR.W    R1,??RoadBrd_ParseString_544+0x4
   \   00003474   0xA80A             ADD      R0,SP,#+40
   \   00003476   0x.... 0x....      BL       sprintf
   3311                                        break;
   \   0000347A   0xF000 0xBC2E      B.W      ??RoadBrd_ParseString_523
   \   0000347E   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_420:
   \   00003480   0x........         DC32     ?_158
   \   00003484   0x........         DC32     ?_159
   \   00003488   0x........         DC32     ?_160
   \   0000348C   0x........         DC32     ?_161
   \   00003490   0x........         DC32     ?_162
   3312                                      case CAL_HUM_TEMPF: //CAL_HUM_TEMPF Values
   3313                                        // Is this a BLE Operation?
   3314                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_511: (+1)
   \   00003494   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003496   0x2D00             CMP      R5,#+0
   \   00003498   0xD024             BEQ.N    ??RoadBrd_ParseString_545
   3315                                        {
   3316                                          // Yes...Build and Send BLE Response NOW.
   3317                                          sprintf( (char *)tempBffr2, "%s:0033//%1.4f//%2.3f//", 
   3318                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3319                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3320                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   0000349A   0x0038             MOVS     R0,R7
   \   0000349C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000349E   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000034A2   0x4683             MOV      R11,R0
   \   000034A4   0x0038             MOVS     R0,R7
   \   000034A6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000034A8   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000034AC   0x4681             MOV      R9,R0
   \   000034AE   0x0038             MOVS     R0,R7
   \   000034B0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000034B2   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000034B6   0x4682             MOV      R10,R0
   \   000034B8   0x4658             MOV      R0,R11
   \   000034BA   0x.... 0x....      BL       __aeabi_f2d
   \   000034BE   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000034C2   0x4648             MOV      R0,R9
   \   000034C4   0x.... 0x....      BL       __aeabi_f2d
   \   000034C8   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000034CC   0x4652             MOV      R2,R10
   \   000034CE   0xF8DF 0x1DD8      LDR.W    R1,??RoadBrd_ParseString_544+0x8
   \   000034D2   0xA80A             ADD      R0,SP,#+40
   \   000034D4   0x.... 0x....      BL       sprintf
   3321                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000034D8   0xA80A             ADD      R0,SP,#+40
   \   000034DA   0x.... 0x....      BL       strlen
   \   000034DE   0xA90A             ADD      R1,SP,#+40
   \   000034E0   0x.... 0x....      BL       BGM111_Transmit
   3322                                        }
   3323                                        sprintf( (char *)tempBffr2, "%s	0033		%1.4f		%2.3f\r\n", 
   3324                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3325                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3326                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_545: (+1)
   \   000034E4   0x0038             MOVS     R0,R7
   \   000034E6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000034E8   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000034EC   0x4683             MOV      R11,R0
   \   000034EE   0x0038             MOVS     R0,R7
   \   000034F0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000034F2   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000034F6   0x4681             MOV      R9,R0
   \   000034F8   0x0038             MOVS     R0,R7
   \   000034FA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000034FC   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003500   0x4682             MOV      R10,R0
   \   00003502   0x4658             MOV      R0,R11
   \   00003504   0x.... 0x....      BL       __aeabi_f2d
   \   00003508   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   0000350C   0x4648             MOV      R0,R9
   \   0000350E   0x.... 0x....      BL       __aeabi_f2d
   \   00003512   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003516   0x4652             MOV      R2,R10
   \   00003518   0xF8DF 0x1E74      LDR.W    R1,??RoadBrd_ParseString_546
   \   0000351C   0xA80A             ADD      R0,SP,#+40
   \   0000351E   0x.... 0x....      BL       sprintf
   3327                                        break;
   \   00003522   0xE3DA             B.N      ??RoadBrd_ParseString_523
   \                     ??RoadBrd_ParseString_425:
   \   00003524   0x........         DC32     ?_163
   \   00003528   0x........         DC32     ?_164
   \   0000352C   0x........         DC32     ?_165
   \   00003530   0x........         DC32     ?_166
   \   00003534   0x........         DC32     ?_167
   3328                                      case CAL_RGB_RED: //CAL_RGB_RED Values
   3329                                        // Is this a BLE Operation?
   3330                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_510: (+1)
   \   00003538   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000353A   0x2D00             CMP      R5,#+0
   \   0000353C   0xD024             BEQ.N    ??RoadBrd_ParseString_547
   3331                                        {
   3332                                          // Yes...Build and Send BLE Response NOW.
   3333                                          sprintf( (char *)tempBffr2, "%s:000D//%1.4f//%2.3f//", 
   3334                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3335                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3336                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   0000353E   0x0038             MOVS     R0,R7
   \   00003540   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003542   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003546   0x4683             MOV      R11,R0
   \   00003548   0x0038             MOVS     R0,R7
   \   0000354A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000354C   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003550   0x4681             MOV      R9,R0
   \   00003552   0x0038             MOVS     R0,R7
   \   00003554   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003556   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   0000355A   0x4682             MOV      R10,R0
   \   0000355C   0x4658             MOV      R0,R11
   \   0000355E   0x.... 0x....      BL       __aeabi_f2d
   \   00003562   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003566   0x4648             MOV      R0,R9
   \   00003568   0x.... 0x....      BL       __aeabi_f2d
   \   0000356C   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003570   0x4652             MOV      R2,R10
   \   00003572   0xF8DF 0x1E20      LDR.W    R1,??RoadBrd_ParseString_546+0x4
   \   00003576   0xA80A             ADD      R0,SP,#+40
   \   00003578   0x.... 0x....      BL       sprintf
   3337                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000357C   0xA80A             ADD      R0,SP,#+40
   \   0000357E   0x.... 0x....      BL       strlen
   \   00003582   0xA90A             ADD      R1,SP,#+40
   \   00003584   0x.... 0x....      BL       BGM111_Transmit
   3338                                        }
   3339                                        sprintf( (char *)tempBffr2, "%s	        000D		%1.4f		%2.3f\r\n", 
   3340                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3341                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3342                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_547: (+1)
   \   00003588   0x0038             MOVS     R0,R7
   \   0000358A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000358C   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003590   0x4683             MOV      R11,R0
   \   00003592   0x0038             MOVS     R0,R7
   \   00003594   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003596   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   0000359A   0x4681             MOV      R9,R0
   \   0000359C   0x0038             MOVS     R0,R7
   \   0000359E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000035A0   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000035A4   0x4682             MOV      R10,R0
   \   000035A6   0x4658             MOV      R0,R11
   \   000035A8   0x.... 0x....      BL       __aeabi_f2d
   \   000035AC   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000035B0   0x4648             MOV      R0,R9
   \   000035B2   0x.... 0x....      BL       __aeabi_f2d
   \   000035B6   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000035BA   0x4652             MOV      R2,R10
   \   000035BC   0xF8DF 0x1E48      LDR.W    R1,??RoadBrd_ParseString_548
   \   000035C0   0xA80A             ADD      R0,SP,#+40
   \   000035C2   0x.... 0x....      BL       sprintf
   3343                                        break;
   \   000035C6   0xE388             B.N      ??RoadBrd_ParseString_523
   \                     ??RoadBrd_ParseString_431:
   \   000035C8   0x........         DC32     ?_168
   \   000035CC   0x........         DC32     ?_169
   \   000035D0   0x........         DC32     ?_170
   \   000035D4   0x........         DC32     ?_171
   \   000035D8   0x........         DC32     ?_172
   3344                                      case CAL_RGB_GREEN: //CAL_RGB_GREEN Values
   3345                                        // Is this a BLE Operation?
   3346                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_513: (+1)
   \   000035DC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000035DE   0x2D00             CMP      R5,#+0
   \   000035E0   0xD024             BEQ.N    ??RoadBrd_ParseString_549
   3347                                        {
   3348                                          // Yes...Build and Send BLE Response NOW.
   3349                                          sprintf( (char *)tempBffr2, "%s:000E//%1.4f//%2.3f//", 
   3350                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3351                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3352                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   000035E2   0x0038             MOVS     R0,R7
   \   000035E4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000035E6   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000035EA   0x4683             MOV      R11,R0
   \   000035EC   0x0038             MOVS     R0,R7
   \   000035EE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000035F0   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000035F4   0x4681             MOV      R9,R0
   \   000035F6   0x0038             MOVS     R0,R7
   \   000035F8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000035FA   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000035FE   0x4682             MOV      R10,R0
   \   00003600   0x4658             MOV      R0,R11
   \   00003602   0x.... 0x....      BL       __aeabi_f2d
   \   00003606   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   0000360A   0x4648             MOV      R0,R9
   \   0000360C   0x.... 0x....      BL       __aeabi_f2d
   \   00003610   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003614   0x4652             MOV      R2,R10
   \   00003616   0xF8DF 0x1E4C      LDR.W    R1,??RoadBrd_ParseString_550
   \   0000361A   0xA80A             ADD      R0,SP,#+40
   \   0000361C   0x.... 0x....      BL       sprintf
   3353                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003620   0xA80A             ADD      R0,SP,#+40
   \   00003622   0x.... 0x....      BL       strlen
   \   00003626   0xA90A             ADD      R1,SP,#+40
   \   00003628   0x.... 0x....      BL       BGM111_Transmit
   3354                                        }
   3355                                        sprintf( (char *)tempBffr2, "%s	000E		%1.4f		%2.3f\r\n", 
   3356                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3357                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3358                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_549: (+1)
   \   0000362C   0x0038             MOVS     R0,R7
   \   0000362E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003630   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003634   0x4683             MOV      R11,R0
   \   00003636   0x0038             MOVS     R0,R7
   \   00003638   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000363A   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   0000363E   0x4681             MOV      R9,R0
   \   00003640   0x0038             MOVS     R0,R7
   \   00003642   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003644   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003648   0x4682             MOV      R10,R0
   \   0000364A   0x4658             MOV      R0,R11
   \   0000364C   0x.... 0x....      BL       __aeabi_f2d
   \   00003650   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003654   0x4648             MOV      R0,R9
   \   00003656   0x.... 0x....      BL       __aeabi_f2d
   \   0000365A   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000365E   0x4652             MOV      R2,R10
   \   00003660   0xF8DF 0x1E38      LDR.W    R1,??RoadBrd_ParseString_551
   \   00003664   0xA80A             ADD      R0,SP,#+40
   \   00003666   0x.... 0x....      BL       sprintf
   3359                                        break;
   \   0000366A   0xE336             B.N      ??RoadBrd_ParseString_523
   \                     ??RoadBrd_ParseString_436:
   \   0000366C   0x........         DC32     ?_173
   \   00003670   0x........         DC32     ?_174
   \   00003674   0x........         DC32     ?_175
   \   00003678   0x........         DC32     ?_176
   \   0000367C   0x........         DC32     ?_177
   3360                                      case CAL_RGB_BLUE: //CAL_RGB_BLUE Values
   3361                                        // Is this a BLE Operation?
   3362                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_512: (+1)
   \   00003680   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003682   0x2D00             CMP      R5,#+0
   \   00003684   0xD024             BEQ.N    ??RoadBrd_ParseString_552
   3363                                        {
   3364                                          // Yes...Build and Send BLE Response NOW.
   3365                                          sprintf( (char *)tempBffr2, "%s:000F//%1.4f//%2.3f//", 
   3366                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3367                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3368                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003686   0x0038             MOVS     R0,R7
   \   00003688   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000368A   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   0000368E   0x4683             MOV      R11,R0
   \   00003690   0x0038             MOVS     R0,R7
   \   00003692   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003694   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003698   0x4681             MOV      R9,R0
   \   0000369A   0x0038             MOVS     R0,R7
   \   0000369C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000369E   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000036A2   0x4682             MOV      R10,R0
   \   000036A4   0x4658             MOV      R0,R11
   \   000036A6   0x.... 0x....      BL       __aeabi_f2d
   \   000036AA   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000036AE   0x4648             MOV      R0,R9
   \   000036B0   0x.... 0x....      BL       __aeabi_f2d
   \   000036B4   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000036B8   0x4652             MOV      R2,R10
   \   000036BA   0xF8DF 0x1E40      LDR.W    R1,??RoadBrd_ParseString_553
   \   000036BE   0xA80A             ADD      R0,SP,#+40
   \   000036C0   0x.... 0x....      BL       sprintf
   3369                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000036C4   0xA80A             ADD      R0,SP,#+40
   \   000036C6   0x.... 0x....      BL       strlen
   \   000036CA   0xA90A             ADD      R1,SP,#+40
   \   000036CC   0x.... 0x....      BL       BGM111_Transmit
   3370                                        }
   3371                                        sprintf( (char *)tempBffr2, "%s	000F		%1.4f		%2.3f\r\n", 
   3372                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3373                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3374                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_552: (+1)
   \   000036D0   0x0038             MOVS     R0,R7
   \   000036D2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000036D4   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000036D8   0x4683             MOV      R11,R0
   \   000036DA   0x0038             MOVS     R0,R7
   \   000036DC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000036DE   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000036E2   0x4681             MOV      R9,R0
   \   000036E4   0x0038             MOVS     R0,R7
   \   000036E6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000036E8   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000036EC   0x4682             MOV      R10,R0
   \   000036EE   0x4658             MOV      R0,R11
   \   000036F0   0x.... 0x....      BL       __aeabi_f2d
   \   000036F4   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000036F8   0x4648             MOV      R0,R9
   \   000036FA   0x.... 0x....      BL       __aeabi_f2d
   \   000036FE   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003702   0x4652             MOV      R2,R10
   \   00003704   0xF8DF 0x1DF8      LDR.W    R1,??RoadBrd_ParseString_553+0x4
   \   00003708   0xA80A             ADD      R0,SP,#+40
   \   0000370A   0x.... 0x....      BL       sprintf
   3375                                        break;
   \   0000370E   0xE2E4             B.N      ??RoadBrd_ParseString_523
   \                     ??RoadBrd_ParseString_444:
   \   00003710   0x........         DC32     ?_178
   \   00003714   0x........         DC32     ?_179
   \   00003718   0x........         DC32     ?_180
   \   0000371C   0x........         DC32     ?_181
   \   00003720   0x........         DC32     ?_182
   3376                                      case CAL_THERM_C: //CAL_THERM_C Values
   3377                                        // Is this a BLE Operation?
   3378                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_515: (+1)
   \   00003724   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003726   0x2D00             CMP      R5,#+0
   \   00003728   0xD024             BEQ.N    ??RoadBrd_ParseString_554
   3379                                        {
   3380                                          // Yes...Build and Send BLE Response NOW.
   3381                                          sprintf( (char *)tempBffr2, "%s:0017//%1.4f//%2.3f//", 
   3382                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3383                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3384                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   0000372A   0x0038             MOVS     R0,R7
   \   0000372C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000372E   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003732   0x4683             MOV      R11,R0
   \   00003734   0x0038             MOVS     R0,R7
   \   00003736   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003738   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   0000373C   0x4681             MOV      R9,R0
   \   0000373E   0x0038             MOVS     R0,R7
   \   00003740   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003742   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003746   0x4682             MOV      R10,R0
   \   00003748   0x4658             MOV      R0,R11
   \   0000374A   0x.... 0x....      BL       __aeabi_f2d
   \   0000374E   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003752   0x4648             MOV      R0,R9
   \   00003754   0x.... 0x....      BL       __aeabi_f2d
   \   00003758   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000375C   0x4652             MOV      R2,R10
   \   0000375E   0xF8DF 0x1E3C      LDR.W    R1,??RoadBrd_ParseString_555
   \   00003762   0xA80A             ADD      R0,SP,#+40
   \   00003764   0x.... 0x....      BL       sprintf
   3385                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003768   0xA80A             ADD      R0,SP,#+40
   \   0000376A   0x.... 0x....      BL       strlen
   \   0000376E   0xA90A             ADD      R1,SP,#+40
   \   00003770   0x.... 0x....      BL       BGM111_Transmit
   3386                                        }
   3387                                        sprintf( (char *)tempBffr2, "%s	        0017		%1.4f		%2.3f\r\n", 
   3388                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3389                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3390                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_554: (+1)
   \   00003774   0x0038             MOVS     R0,R7
   \   00003776   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003778   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   0000377C   0x4683             MOV      R11,R0
   \   0000377E   0x0038             MOVS     R0,R7
   \   00003780   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003782   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003786   0x4681             MOV      R9,R0
   \   00003788   0x0038             MOVS     R0,R7
   \   0000378A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000378C   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003790   0x4682             MOV      R10,R0
   \   00003792   0x4658             MOV      R0,R11
   \   00003794   0x.... 0x....      BL       __aeabi_f2d
   \   00003798   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   0000379C   0x4648             MOV      R0,R9
   \   0000379E   0x.... 0x....      BL       __aeabi_f2d
   \   000037A2   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000037A6   0x4652             MOV      R2,R10
   \   000037A8   0xF8DF 0x1E24      LDR.W    R1,??RoadBrd_ParseString_556
   \   000037AC   0xA80A             ADD      R0,SP,#+40
   \   000037AE   0x.... 0x....      BL       sprintf
   3391                                        break;
   \   000037B2   0xE292             B.N      ??RoadBrd_ParseString_523
   \                     ??RoadBrd_ParseString_449:
   \   000037B4   0x........         DC32     ?_183
   \   000037B8   0x........         DC32     ?_184
   \   000037BC   0x........         DC32     ?_185
   \   000037C0   0x........         DC32     ?_186
   \   000037C4   0x........         DC32     ?_187
   3392                                      case CAL_ROADT_1C: //CAL_ROADT_1C Values
   3393                                        // Is this a BLE Operation?
   3394                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_514: (+1)
   \   000037C8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000037CA   0x2D00             CMP      R5,#+0
   \   000037CC   0xD024             BEQ.N    ??RoadBrd_ParseString_557
   3395                                        {
   3396                                          // Yes...Build and Send BLE Response NOW.
   3397                                          sprintf( (char *)tempBffr2, "%s:0019//%1.4f//%2.3f//", 
   3398                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3399                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3400                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   000037CE   0x0038             MOVS     R0,R7
   \   000037D0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000037D2   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000037D6   0x4683             MOV      R11,R0
   \   000037D8   0x0038             MOVS     R0,R7
   \   000037DA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000037DC   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000037E0   0x4681             MOV      R9,R0
   \   000037E2   0x0038             MOVS     R0,R7
   \   000037E4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000037E6   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000037EA   0x4682             MOV      R10,R0
   \   000037EC   0x4658             MOV      R0,R11
   \   000037EE   0x.... 0x....      BL       __aeabi_f2d
   \   000037F2   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000037F6   0x4648             MOV      R0,R9
   \   000037F8   0x.... 0x....      BL       __aeabi_f2d
   \   000037FC   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003800   0x4652             MOV      R2,R10
   \   00003802   0xF8DF 0x1E34      LDR.W    R1,??RoadBrd_ParseString_558
   \   00003806   0xA80A             ADD      R0,SP,#+40
   \   00003808   0x.... 0x....      BL       sprintf
   3401                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000380C   0xA80A             ADD      R0,SP,#+40
   \   0000380E   0x.... 0x....      BL       strlen
   \   00003812   0xA90A             ADD      R1,SP,#+40
   \   00003814   0x.... 0x....      BL       BGM111_Transmit
   3402                                        }
   3403                                        sprintf( (char *)tempBffr2, "%s	0019		%1.4f		%2.3f\r\n", 
   3404                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3405                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3406                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_557: (+1)
   \   00003818   0x0038             MOVS     R0,R7
   \   0000381A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000381C   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003820   0x4683             MOV      R11,R0
   \   00003822   0x0038             MOVS     R0,R7
   \   00003824   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003826   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   0000382A   0x4681             MOV      R9,R0
   \   0000382C   0x0038             MOVS     R0,R7
   \   0000382E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003830   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003834   0x4682             MOV      R10,R0
   \   00003836   0x4658             MOV      R0,R11
   \   00003838   0x.... 0x....      BL       __aeabi_f2d
   \   0000383C   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003840   0x4648             MOV      R0,R9
   \   00003842   0x.... 0x....      BL       __aeabi_f2d
   \   00003846   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000384A   0x4652             MOV      R2,R10
   \   0000384C   0xF8DF 0x1E2C      LDR.W    R1,??RoadBrd_ParseString_559
   \   00003850   0xA80A             ADD      R0,SP,#+40
   \   00003852   0x.... 0x....      BL       sprintf
   3407                                        break;
   \   00003856   0xE240             B.N      ??RoadBrd_ParseString_523
   \                     ??RoadBrd_ParseString_455:
   \   00003858   0x........         DC32     ?_188
   \   0000385C   0x........         DC32     ?_189
   \   00003860   0x........         DC32     ?_190
   \   00003864   0x........         DC32     ?_191
   \   00003868   0x........         DC32     ?_192
   3408                                      case CAL_ROADT_2C: //CAL_ROADT_2C Values
   3409                                        // Is this a BLE Operation?
   3410                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_517: (+1)
   \   0000386C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000386E   0x2D00             CMP      R5,#+0
   \   00003870   0xD024             BEQ.N    ??RoadBrd_ParseString_560
   3411                                        {
   3412                                          // Yes...Build and Send BLE Response NOW.
   3413                                          sprintf( (char *)tempBffr2, "%s:001B//%1.4f//%2.3f//", 
   3414                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3415                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3416                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003872   0x0038             MOVS     R0,R7
   \   00003874   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003876   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   0000387A   0x4683             MOV      R11,R0
   \   0000387C   0x0038             MOVS     R0,R7
   \   0000387E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003880   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003884   0x4681             MOV      R9,R0
   \   00003886   0x0038             MOVS     R0,R7
   \   00003888   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000388A   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   0000388E   0x4682             MOV      R10,R0
   \   00003890   0x4658             MOV      R0,R11
   \   00003892   0x.... 0x....      BL       __aeabi_f2d
   \   00003896   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   0000389A   0x4648             MOV      R0,R9
   \   0000389C   0x.... 0x....      BL       __aeabi_f2d
   \   000038A0   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000038A4   0x4652             MOV      R2,R10
   \   000038A6   0xF8DF 0x1E34      LDR.W    R1,??RoadBrd_ParseString_561
   \   000038AA   0xA80A             ADD      R0,SP,#+40
   \   000038AC   0x.... 0x....      BL       sprintf
   3417                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000038B0   0xA80A             ADD      R0,SP,#+40
   \   000038B2   0x.... 0x....      BL       strlen
   \   000038B6   0xA90A             ADD      R1,SP,#+40
   \   000038B8   0x.... 0x....      BL       BGM111_Transmit
   3418                                        }
   3419                                        sprintf( (char *)tempBffr2, "%s	001B		%1.4f		%2.3f\r\n", 
   3420                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3421                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3422                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_560: (+1)
   \   000038BC   0x0038             MOVS     R0,R7
   \   000038BE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000038C0   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000038C4   0x4683             MOV      R11,R0
   \   000038C6   0x0038             MOVS     R0,R7
   \   000038C8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000038CA   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000038CE   0x4681             MOV      R9,R0
   \   000038D0   0x0038             MOVS     R0,R7
   \   000038D2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000038D4   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000038D8   0x4682             MOV      R10,R0
   \   000038DA   0x4658             MOV      R0,R11
   \   000038DC   0x.... 0x....      BL       __aeabi_f2d
   \   000038E0   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000038E4   0x4648             MOV      R0,R9
   \   000038E6   0x.... 0x....      BL       __aeabi_f2d
   \   000038EA   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000038EE   0x4652             MOV      R2,R10
   \   000038F0   0xF8DF 0x1DEC      LDR.W    R1,??RoadBrd_ParseString_561+0x4
   \   000038F4   0xA80A             ADD      R0,SP,#+40
   \   000038F6   0x.... 0x....      BL       sprintf
   3423                                        break;
   \   000038FA   0xE1EE             B.N      ??RoadBrd_ParseString_523
   \                     ??RoadBrd_ParseString_460:
   \   000038FC   0x........         DC32     ?_193
   \   00003900   0x........         DC32     ?_194
   \   00003904   0x........         DC32     ?_195
   \   00003908   0x........         DC32     ?_196
   \   0000390C   0x........         DC32     ?_197
   3424                                      case CAL_ROADT_3C: //CAL_ROADT_3C Values
   3425                                        // Is this a BLE Operation?
   3426                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_516: (+1)
   \   00003910   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003912   0x2D00             CMP      R5,#+0
   \   00003914   0xD024             BEQ.N    ??RoadBrd_ParseString_562
   3427                                        {
   3428                                          // Yes...Build and Send BLE Response NOW.
   3429                                          sprintf( (char *)tempBffr2, "%s:001D//%1.4f//%2.3f//", 
   3430                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3431                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3432                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003916   0x0038             MOVS     R0,R7
   \   00003918   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000391A   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   0000391E   0x4683             MOV      R11,R0
   \   00003920   0x0038             MOVS     R0,R7
   \   00003922   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003924   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003928   0x4681             MOV      R9,R0
   \   0000392A   0x0038             MOVS     R0,R7
   \   0000392C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000392E   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003932   0x4682             MOV      R10,R0
   \   00003934   0x4658             MOV      R0,R11
   \   00003936   0x.... 0x....      BL       __aeabi_f2d
   \   0000393A   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   0000393E   0x4648             MOV      R0,R9
   \   00003940   0x.... 0x....      BL       __aeabi_f2d
   \   00003944   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003948   0x4652             MOV      R2,R10
   \   0000394A   0xF8DF 0x1DF4      LDR.W    R1,??RoadBrd_ParseString_563
   \   0000394E   0xA80A             ADD      R0,SP,#+40
   \   00003950   0x.... 0x....      BL       sprintf
   3433                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003954   0xA80A             ADD      R0,SP,#+40
   \   00003956   0x.... 0x....      BL       strlen
   \   0000395A   0xA90A             ADD      R1,SP,#+40
   \   0000395C   0x.... 0x....      BL       BGM111_Transmit
   3434                                        }
   3435                                        sprintf( (char *)tempBffr2, "%s	001D		%1.4f		%2.3f\r\n", 
   3436                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3437                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3438                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_562: (+1)
   \   00003960   0x0038             MOVS     R0,R7
   \   00003962   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003964   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003968   0x4683             MOV      R11,R0
   \   0000396A   0x0038             MOVS     R0,R7
   \   0000396C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000396E   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003972   0x4681             MOV      R9,R0
   \   00003974   0x0038             MOVS     R0,R7
   \   00003976   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003978   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   0000397C   0x4682             MOV      R10,R0
   \   0000397E   0x4658             MOV      R0,R11
   \   00003980   0x.... 0x....      BL       __aeabi_f2d
   \   00003984   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003988   0x4648             MOV      R0,R9
   \   0000398A   0x.... 0x....      BL       __aeabi_f2d
   \   0000398E   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003992   0x4652             MOV      R2,R10
   \   00003994   0xF8DF 0x1DF8      LDR.W    R1,??RoadBrd_ParseString_564
   \   00003998   0xA80A             ADD      R0,SP,#+40
   \   0000399A   0x.... 0x....      BL       sprintf
   3439                                        break;
   \   0000399E   0xE19C             B.N      ??RoadBrd_ParseString_523
   \                     ??RoadBrd_ParseString_468:
   \   000039A0   0x........         DC32     ?_198
   \   000039A4   0x........         DC32     ?_199
   \   000039A8   0x........         DC32     ?_200
   \   000039AC   0x........         DC32     ?_201
   \   000039B0   0x........         DC32     ?_202
   \   000039B4   0x........         DC32     ?_203
   3440                                      case CAL_ROADT_4C: //CAL_ROADT_4C Values
   3441                                        // Is this a BLE Operation?
   3442                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_519: (+1)
   \   000039B8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000039BA   0x2D00             CMP      R5,#+0
   \   000039BC   0xD024             BEQ.N    ??RoadBrd_ParseString_565
   3443                                        {
   3444                                          // Yes...Build and Send BLE Response NOW.
   3445                                          sprintf( (char *)tempBffr2, "%s:001F//%1.4f//%2.3f//", 
   3446                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3447                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3448                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   000039BE   0x0038             MOVS     R0,R7
   \   000039C0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000039C2   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   000039C6   0x4683             MOV      R11,R0
   \   000039C8   0x0038             MOVS     R0,R7
   \   000039CA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000039CC   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   000039D0   0x4681             MOV      R9,R0
   \   000039D2   0x0038             MOVS     R0,R7
   \   000039D4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000039D6   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   000039DA   0x4682             MOV      R10,R0
   \   000039DC   0x4658             MOV      R0,R11
   \   000039DE   0x.... 0x....      BL       __aeabi_f2d
   \   000039E2   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000039E6   0x4648             MOV      R0,R9
   \   000039E8   0x.... 0x....      BL       __aeabi_f2d
   \   000039EC   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000039F0   0x4652             MOV      R2,R10
   \   000039F2   0xF8DF 0x1DD0      LDR.W    R1,??RoadBrd_ParseString_566
   \   000039F6   0xA80A             ADD      R0,SP,#+40
   \   000039F8   0x.... 0x....      BL       sprintf
   3449                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000039FC   0xA80A             ADD      R0,SP,#+40
   \   000039FE   0x.... 0x....      BL       strlen
   \   00003A02   0xA90A             ADD      R1,SP,#+40
   \   00003A04   0x.... 0x....      BL       BGM111_Transmit
   3450                                        }
   3451                                        sprintf( (char *)tempBffr2, "%s	001F		%1.4f		%2.3f\r\n", 
   3452                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3453                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3454                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_565: (+1)
   \   00003A08   0x0038             MOVS     R0,R7
   \   00003A0A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003A0C   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003A10   0x4683             MOV      R11,R0
   \   00003A12   0x0038             MOVS     R0,R7
   \   00003A14   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003A16   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003A1A   0x4681             MOV      R9,R0
   \   00003A1C   0x0038             MOVS     R0,R7
   \   00003A1E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003A20   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003A24   0x4682             MOV      R10,R0
   \   00003A26   0x4658             MOV      R0,R11
   \   00003A28   0x.... 0x....      BL       __aeabi_f2d
   \   00003A2C   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003A30   0x4648             MOV      R0,R9
   \   00003A32   0x.... 0x....      BL       __aeabi_f2d
   \   00003A36   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003A3A   0x4652             MOV      R2,R10
   \   00003A3C   0xF8DF 0x1DB8      LDR.W    R1,??RoadBrd_ParseString_567
   \   00003A40   0xA80A             ADD      R0,SP,#+40
   \   00003A42   0x.... 0x....      BL       sprintf
   3455                                        break;
   \   00003A46   0xE148             B.N      ??RoadBrd_ParseString_523
   \                     ??RoadBrd_ParseString_474:
   \   00003A48   0x........         DC32     ?_204
   \   00003A4C   0x........         DC32     ?_205
   \   00003A50   0x........         DC32     ?_206
   \   00003A54   0x........         DC32     ?_207
   \   00003A58   0x........         DC32     ?_208
   3456                                      case CAL_ROADT_5C: //CAL_ROADT_5C Values
   3457                                        // Is this a BLE Operation?
   3458                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_518: (+1)
   \   00003A5C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003A5E   0x2D00             CMP      R5,#+0
   \   00003A60   0xD024             BEQ.N    ??RoadBrd_ParseString_568
   3459                                        {
   3460                                          // Yes...Build and Send BLE Response NOW.
   3461                                          sprintf( (char *)tempBffr2, "%s:0021//%1.4f//%2.3f//", 
   3462                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3463                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3464                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003A62   0x0038             MOVS     R0,R7
   \   00003A64   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003A66   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003A6A   0x4683             MOV      R11,R0
   \   00003A6C   0x0038             MOVS     R0,R7
   \   00003A6E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003A70   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003A74   0x4681             MOV      R9,R0
   \   00003A76   0x0038             MOVS     R0,R7
   \   00003A78   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003A7A   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003A7E   0x4682             MOV      R10,R0
   \   00003A80   0x4658             MOV      R0,R11
   \   00003A82   0x.... 0x....      BL       __aeabi_f2d
   \   00003A86   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003A8A   0x4648             MOV      R0,R9
   \   00003A8C   0x.... 0x....      BL       __aeabi_f2d
   \   00003A90   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003A94   0x4652             MOV      R2,R10
   \   00003A96   0x.... 0x....      LDR.W    R1,??DataTable3
   \   00003A9A   0xA80A             ADD      R0,SP,#+40
   \   00003A9C   0x.... 0x....      BL       sprintf
   3465                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003AA0   0xA80A             ADD      R0,SP,#+40
   \   00003AA2   0x.... 0x....      BL       strlen
   \   00003AA6   0xA90A             ADD      R1,SP,#+40
   \   00003AA8   0x.... 0x....      BL       BGM111_Transmit
   3466                                        }
   3467                                        sprintf( (char *)tempBffr2, "%s	0021		%1.4f		%2.3f\r\n", 
   3468                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3469                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3470                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_568: (+1)
   \   00003AAC   0x0038             MOVS     R0,R7
   \   00003AAE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003AB0   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003AB4   0x4683             MOV      R11,R0
   \   00003AB6   0x0038             MOVS     R0,R7
   \   00003AB8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003ABA   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003ABE   0x4681             MOV      R9,R0
   \   00003AC0   0x0038             MOVS     R0,R7
   \   00003AC2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003AC4   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003AC8   0x4682             MOV      R10,R0
   \   00003ACA   0x4658             MOV      R0,R11
   \   00003ACC   0x.... 0x....      BL       __aeabi_f2d
   \   00003AD0   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003AD4   0x4648             MOV      R0,R9
   \   00003AD6   0x.... 0x....      BL       __aeabi_f2d
   \   00003ADA   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003ADE   0x4652             MOV      R2,R10
   \   00003AE0   0x.... 0x....      LDR.W    R1,??DataTable3_1
   \   00003AE4   0xA80A             ADD      R0,SP,#+40
   \   00003AE6   0x.... 0x....      BL       sprintf
   3471                                        break;
   \   00003AEA   0xE0F6             B.N      ??RoadBrd_ParseString_523
   \                     ??RoadBrd_ParseString_479:
   \   00003AEC   0x........         DC32     ?_209
   \   00003AF0   0x........         DC32     ?_210
   \   00003AF4   0x........         DC32     ?_211
   \   00003AF8   0x........         DC32     ?_212
   \   00003AFC   0x........         DC32     ?_213
   3472                                      case CAL_ROADT_6C: //CAL_ROADT_6C Values
   3473                                        // Is this a BLE Operation?
   3474                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_521: (+1)
   \   00003B00   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003B02   0x2D00             CMP      R5,#+0
   \   00003B04   0xD024             BEQ.N    ??RoadBrd_ParseString_569
   3475                                        {
   3476                                          // Yes...Build and Send BLE Response NOW.
   3477                                          sprintf( (char *)tempBffr2, "%s:0023//%1.4f//%2.3f//", 
   3478                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3479                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3480                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003B06   0x0038             MOVS     R0,R7
   \   00003B08   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003B0A   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003B0E   0x4683             MOV      R11,R0
   \   00003B10   0x0038             MOVS     R0,R7
   \   00003B12   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003B14   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003B18   0x4681             MOV      R9,R0
   \   00003B1A   0x0038             MOVS     R0,R7
   \   00003B1C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003B1E   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003B22   0x4682             MOV      R10,R0
   \   00003B24   0x4658             MOV      R0,R11
   \   00003B26   0x.... 0x....      BL       __aeabi_f2d
   \   00003B2A   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003B2E   0x4648             MOV      R0,R9
   \   00003B30   0x.... 0x....      BL       __aeabi_f2d
   \   00003B34   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003B38   0x4652             MOV      R2,R10
   \   00003B3A   0x.... 0x....      LDR.W    R1,??DataTable3_2
   \   00003B3E   0xA80A             ADD      R0,SP,#+40
   \   00003B40   0x.... 0x....      BL       sprintf
   3481                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003B44   0xA80A             ADD      R0,SP,#+40
   \   00003B46   0x.... 0x....      BL       strlen
   \   00003B4A   0xA90A             ADD      R1,SP,#+40
   \   00003B4C   0x.... 0x....      BL       BGM111_Transmit
   3482                                        }
   3483                                        sprintf( (char *)tempBffr2, "%s	0023		%1.4f		%2.3f\r\n", 
   3484                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3485                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3486                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_569: (+1)
   \   00003B50   0x0038             MOVS     R0,R7
   \   00003B52   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003B54   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003B58   0x4683             MOV      R11,R0
   \   00003B5A   0x0038             MOVS     R0,R7
   \   00003B5C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003B5E   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003B62   0x4681             MOV      R9,R0
   \   00003B64   0x0038             MOVS     R0,R7
   \   00003B66   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003B68   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003B6C   0x4682             MOV      R10,R0
   \   00003B6E   0x4658             MOV      R0,R11
   \   00003B70   0x.... 0x....      BL       __aeabi_f2d
   \   00003B74   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003B78   0x4648             MOV      R0,R9
   \   00003B7A   0x.... 0x....      BL       __aeabi_f2d
   \   00003B7E   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003B82   0x4652             MOV      R2,R10
   \   00003B84   0x.... 0x....      LDR.W    R1,??DataTable3_3
   \   00003B88   0xA80A             ADD      R0,SP,#+40
   \   00003B8A   0x.... 0x....      BL       sprintf
   3487                                        break;
   \   00003B8E   0xE0A4             B.N      ??RoadBrd_ParseString_523
   \                     ??RoadBrd_ParseString_487:
   \   00003B90   0x........         DC32     ?_214
   \   00003B94   0x........         DC32     ?_215
   \   00003B98   0x........         DC32     ?_216
   \   00003B9C   0x........         DC32     ?_217
   3488                                      case CAL_ROADT_7C: //CAL_ROADT_7C Values
   3489                                        // Is this a BLE Operation?
   3490                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_520: (+1)
   \   00003BA0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003BA2   0x2D00             CMP      R5,#+0
   \   00003BA4   0xD024             BEQ.N    ??RoadBrd_ParseString_570
   3491                                        {
   3492                                          // Yes...Build and Send BLE Response NOW.
   3493                                          sprintf( (char *)tempBffr2, "%s:0025//%1.4f//%2.3f//", 
   3494                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3495                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3496                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003BA6   0x0038             MOVS     R0,R7
   \   00003BA8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003BAA   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003BAE   0x4683             MOV      R11,R0
   \   00003BB0   0x0038             MOVS     R0,R7
   \   00003BB2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003BB4   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003BB8   0x4681             MOV      R9,R0
   \   00003BBA   0x0038             MOVS     R0,R7
   \   00003BBC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003BBE   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003BC2   0x4682             MOV      R10,R0
   \   00003BC4   0x4658             MOV      R0,R11
   \   00003BC6   0x.... 0x....      BL       __aeabi_f2d
   \   00003BCA   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003BCE   0x4648             MOV      R0,R9
   \   00003BD0   0x.... 0x....      BL       __aeabi_f2d
   \   00003BD4   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003BD8   0x4652             MOV      R2,R10
   \   00003BDA   0x.... 0x....      LDR.W    R1,??DataTable3_4
   \   00003BDE   0xA80A             ADD      R0,SP,#+40
   \   00003BE0   0x.... 0x....      BL       sprintf
   3497                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003BE4   0xA80A             ADD      R0,SP,#+40
   \   00003BE6   0x.... 0x....      BL       strlen
   \   00003BEA   0xA90A             ADD      R1,SP,#+40
   \   00003BEC   0x.... 0x....      BL       BGM111_Transmit
   3498                                        }
   3499                                        sprintf( (char *)tempBffr2, "%s	0025		%1.4f		%2.3f\r\n", 
   3500                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3501                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3502                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_570: (+1)
   \   00003BF0   0x0038             MOVS     R0,R7
   \   00003BF2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003BF4   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003BF8   0x4683             MOV      R11,R0
   \   00003BFA   0x0038             MOVS     R0,R7
   \   00003BFC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003BFE   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003C02   0x4681             MOV      R9,R0
   \   00003C04   0x0038             MOVS     R0,R7
   \   00003C06   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003C08   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003C0C   0x4682             MOV      R10,R0
   \   00003C0E   0x4658             MOV      R0,R11
   \   00003C10   0x.... 0x....      BL       __aeabi_f2d
   \   00003C14   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003C18   0x4648             MOV      R0,R9
   \   00003C1A   0x.... 0x....      BL       __aeabi_f2d
   \   00003C1E   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003C22   0x4652             MOV      R2,R10
   \   00003C24   0x.... 0x....      LDR.W    R1,??DataTable3_5
   \   00003C28   0xA80A             ADD      R0,SP,#+40
   \   00003C2A   0x.... 0x....      BL       sprintf
   3503                                        break;
   \   00003C2E   0xE054             B.N      ??RoadBrd_ParseString_523
   \                     ??RoadBrd_ParseString_492:
   \   00003C30   0x........         DC32     ?_218
   \   00003C34   0x........         DC32     ?_219
   \   00003C38   0x........         DC32     ?_220
   \   00003C3C   0x........         DC32     ?_221
   \   00003C40   0x........         DC32     ?_222
   \   00003C44   0x........         DC32     ?_223
   \   00003C48   0x........         DC32     ?_224
   3504                                      case CAL_ROADT_8C: //CAL_ROADT_8C Values
   3505                                        // Is this a BLE Operation?
   3506                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_522: (+1)
   \   00003C4C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003C4E   0x2D00             CMP      R5,#+0
   \   00003C50   0xD024             BEQ.N    ??RoadBrd_ParseString_571
   3507                                        {
   3508                                          // Yes...Build and Send BLE Response NOW.
   3509                                          sprintf( (char *)tempBffr2, "%s:0027//%1.4f//%2.3f//", 
   3510                                                  (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3511                                                  RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3512                                                  RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \   00003C52   0x0038             MOVS     R0,R7
   \   00003C54   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003C56   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003C5A   0x4683             MOV      R11,R0
   \   00003C5C   0x0038             MOVS     R0,R7
   \   00003C5E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003C60   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003C64   0x4681             MOV      R9,R0
   \   00003C66   0x0038             MOVS     R0,R7
   \   00003C68   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003C6A   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003C6E   0x4682             MOV      R10,R0
   \   00003C70   0x4658             MOV      R0,R11
   \   00003C72   0x.... 0x....      BL       __aeabi_f2d
   \   00003C76   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003C7A   0x4648             MOV      R0,R9
   \   00003C7C   0x.... 0x....      BL       __aeabi_f2d
   \   00003C80   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003C84   0x4652             MOV      R2,R10
   \   00003C86   0x.... 0x....      LDR.W    R1,??DataTable3_6
   \   00003C8A   0xA80A             ADD      R0,SP,#+40
   \   00003C8C   0x.... 0x....      BL       sprintf
   3513                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003C90   0xA80A             ADD      R0,SP,#+40
   \   00003C92   0x.... 0x....      BL       strlen
   \   00003C96   0xA90A             ADD      R1,SP,#+40
   \   00003C98   0x.... 0x....      BL       BGM111_Transmit
   3514                                        }
   3515                                        sprintf( (char *)tempBffr2, "%s	0027		%1.4f		%2.3f\r\n", 
   3516                                                (char *)RdBrd_CAL_GetStr( (Cal_Characteristic)x ),
   3517                                                RoadBrd_CAL_GetSlope( (Cal_Characteristic)x ),
   3518                                                RoadBrd_CAL_GetOffset( (Cal_Characteristic)x ) );
   \                     ??RoadBrd_ParseString_571: (+1)
   \   00003C9C   0x0038             MOVS     R0,R7
   \   00003C9E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003CA0   0x.... 0x....      BL       RoadBrd_CAL_GetOffset
   \   00003CA4   0x4683             MOV      R11,R0
   \   00003CA6   0x0038             MOVS     R0,R7
   \   00003CA8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003CAA   0x.... 0x....      BL       RoadBrd_CAL_GetSlope
   \   00003CAE   0x4681             MOV      R9,R0
   \   00003CB0   0x0038             MOVS     R0,R7
   \   00003CB2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003CB4   0x.... 0x....      BL       RdBrd_CAL_GetStr
   \   00003CB8   0x4682             MOV      R10,R0
   \   00003CBA   0x4658             MOV      R0,R11
   \   00003CBC   0x.... 0x....      BL       __aeabi_f2d
   \   00003CC0   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00003CC4   0x4648             MOV      R0,R9
   \   00003CC6   0x.... 0x....      BL       __aeabi_f2d
   \   00003CCA   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00003CCE   0x4652             MOV      R2,R10
   \   00003CD0   0x.... 0x....      LDR.W    R1,??DataTable3_7
   \   00003CD4   0xA80A             ADD      R0,SP,#+40
   \   00003CD6   0x.... 0x....      BL       sprintf
   3519                                        break;
   3520                                    } // EndSwitch(x)
   3521                                    // Now Print String.
   3522          #ifdef NUCLEO
   3523                                    Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   3524          #else
   3525                                    Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \                     ??RoadBrd_ParseString_523: (+1)
   \   00003CDA   0xA90A             ADD      R1,SP,#+40
   \   00003CDC   0x2000             MOVS     R0,#+0
   \   00003CDE   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   00003CE2   0x0006             MOVS     R6,R0
   3526          #endif
   3527                                    if (Status != HAL_OK)
   \   00003CE4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00003CE6   0x2E00             CMP      R6,#+0
   \   00003CE8   0xD008             BEQ.N    ??RoadBrd_ParseString_572
   3528                                      return Status;
   \   00003CEA   0x0030             MOVS     R0,R6
   \   00003CEC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003CEE   0xF000 0xBD96      B.W      ??RoadBrd_ParseString_4
   \   00003CF2   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_496:
   \   00003CF4   0x........         DC32     ?_225
   \   00003CF8   0x........         DC32     ?_226
   3529                                  } // EndFor(x=0; x<CAL_LAST_VALUE; x++)
   \                     ??RoadBrd_ParseString_572: (+1)
   \   00003CFC   0x1C7F             ADDS     R7,R7,#+1
   \   00003CFE   0xF7FF 0xB897      B.W      ??RoadBrd_ParseString_499
   3530                                  // Is this a BLE Operation?
   3531                                  if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_500: (+1)
   \   00003D02   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003D04   0x2D00             CMP      R5,#+0
   \   00003D06   0xD00A             BEQ.N    ??RoadBrd_ParseString_573
   3532                                  {
   3533                                    // Yes...Build and Send BLE Response NOW.
   3534                                    strcpy( (char *)tempBffr2, "</STATUS>");
   \   00003D08   0x.... 0x....      LDR.W    R1,??DataTable3_8
   \   00003D0C   0xA80A             ADD      R0,SP,#+40
   \   00003D0E   0x.... 0x....      BL       strcpy
   3535                                    BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003D12   0xA80A             ADD      R0,SP,#+40
   \   00003D14   0x.... 0x....      BL       strlen
   \   00003D18   0xA90A             ADD      R1,SP,#+40
   \   00003D1A   0x.... 0x....      BL       BGM111_Transmit
   3536                                  }
   3537                                  sprintf( (char *)tempBffr2, "\r\n     COMPLETE.\r\n" );
   \                     ??RoadBrd_ParseString_573: (+1)
   \   00003D1E   0x.... 0x....      LDR.W    R1,??DataTable4
   \   00003D22   0xA80A             ADD      R0,SP,#+40
   \   00003D24   0x.... 0x....      BL       sprintf
   3538                                  break;
   \   00003D28   0xE091             B.N      ??RoadBrd_ParseString_369
   3539                                  //------------------ TCT Command: Calibration Set Time Command
   3540                                case 'T':
   3541                                  // Step 1. Validate format.
   3542                                  if(tempBffr[3]!=':')
   \                     ??RoadBrd_ParseString_378: (+1)
   \   00003D2A   0x78E0             LDRB     R0,[R4, #+3]
   \   00003D2C   0x283A             CMP      R0,#+58
   \   00003D2E   0xD013             BEQ.N    ??RoadBrd_ParseString_574
   3543                                  {
   3544                                    // Is this a BLE Operation?
   3545                                    if ( BLE_Flag )
   \   00003D30   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003D32   0x2D00             CMP      R5,#+0
   \   00003D34   0xD00A             BEQ.N    ??RoadBrd_ParseString_575
   3546                                    {
   3547                                      // Yes...Build and Send BLE Response NOW.
   3548                                      strcpy( (char *)tempBffr2, "<STATUS>CMD_TCT_SYNTAX</STATUS>");
   \   00003D36   0x.... 0x....      LDR.W    R1,??DataTable4_1
   \   00003D3A   0xA80A             ADD      R0,SP,#+40
   \   00003D3C   0x.... 0x....      BL       strcpy
   3549                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003D40   0xA80A             ADD      R0,SP,#+40
   \   00003D42   0x.... 0x....      BL       strlen
   \   00003D46   0xA90A             ADD      R1,SP,#+40
   \   00003D48   0x.... 0x....      BL       BGM111_Transmit
   3550                                    }
   3551                                    
   3552                                    strcpy( (char *)tempBffr2, "TCT SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_575: (+1)
   \   00003D4C   0x.... 0x....      LDR.W    R1,??DataTable4_2
   \   00003D50   0xA80A             ADD      R0,SP,#+40
   \   00003D52   0x.... 0x....      BL       strcpy
   \   00003D56   0xE04C             B.N      ??RoadBrd_ParseString_576
   3553                                  } // Endif (tempBffr[3]!=':')
   3554                                  else
   3555                                  {
   3556                                    // 2. Verify if remaining string is digits
   3557                                    if (Size <= 4)
   \                     ??RoadBrd_ParseString_574: (+1)
   \   00003D58   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00003D5C   0xF1B8 0x0F05      CMP      R8,#+5
   \   00003D60   0xDA13             BGE.N    ??RoadBrd_ParseString_577
   3558                                    {
   3559                                      // Is this a BLE Operation?
   3560                                      if ( BLE_Flag )
   \   00003D62   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003D64   0x2D00             CMP      R5,#+0
   \   00003D66   0xD00A             BEQ.N    ??RoadBrd_ParseString_578
   3561                                      {
   3562                                        // Yes...Build and Send BLE Response NOW.
   3563                                        strcpy( (char *)tempBffr2, "<STATUS>CMD_TCT_BADPARAM</STATUS>");
   \   00003D68   0x.... 0x....      LDR.W    R1,??DataTable4_3
   \   00003D6C   0xA80A             ADD      R0,SP,#+40
   \   00003D6E   0x.... 0x....      BL       strcpy
   3564                                        BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003D72   0xA80A             ADD      R0,SP,#+40
   \   00003D74   0x.... 0x....      BL       strlen
   \   00003D78   0xA90A             ADD      R1,SP,#+40
   \   00003D7A   0x.... 0x....      BL       BGM111_Transmit
   3565                                      }
   3566                                      strcpy( (char *)tempBffr2, "TCT SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_578: (+1)
   \   00003D7E   0x.... 0x....      LDR.W    R1,??DataTable4_4
   \   00003D82   0xA80A             ADD      R0,SP,#+40
   \   00003D84   0x.... 0x....      BL       strcpy
   \   00003D88   0xE033             B.N      ??RoadBrd_ParseString_576
   3567                                    } // EndIf (Size > 4)
   3568                                    else
   3569                                    {
   3570                                      // 3. Grab remaining string and Save it.
   3571                                      tempPstr = &tempBffr[4];
   \                     ??RoadBrd_ParseString_577: (+1)
   \   00003D8A   0x1D20             ADDS     R0,R4,#+4
   \   00003D8C   0x9030             STR      R0,[SP, #+192]
   3572                                      strcpy(tempstr, tempPstr);
   \   00003D8E   0x9930             LDR      R1,[SP, #+192]
   \   00003D90   0xA848             ADD      R0,SP,#+288
   \   00003D92   0x.... 0x....      BL       strcpy
   3573                                      // NOW...Save it.
   3574                                      Status = RoadBrd_CAL_Set_TimeString( (uint8_t *)tempPstr );
   \   00003D96   0x9830             LDR      R0,[SP, #+192]
   \   00003D98   0x.... 0x....      BL       RoadBrd_CAL_Set_TimeString
   \   00003D9C   0x0006             MOVS     R6,R0
   3575                                      if (Status != HAL_OK)
   \   00003D9E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00003DA0   0x2E00             CMP      R6,#+0
   \   00003DA2   0xD013             BEQ.N    ??RoadBrd_ParseString_579
   3576                                      {
   3577                                        // Is this a BLE Operation?
   3578                                        if ( BLE_Flag )
   \   00003DA4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003DA6   0x2D00             CMP      R5,#+0
   \   00003DA8   0xD00A             BEQ.N    ??RoadBrd_ParseString_580
   3579                                        {
   3580                                          // Yes...Build and Send BLE Response NOW.
   3581                                          strcpy( (char *)tempBffr2, "<STATUS>CMD_TCT_ERR</STATUS>");
   \   00003DAA   0x.... 0x....      LDR.W    R1,??DataTable4_5
   \   00003DAE   0xA80A             ADD      R0,SP,#+40
   \   00003DB0   0x.... 0x....      BL       strcpy
   3582                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003DB4   0xA80A             ADD      R0,SP,#+40
   \   00003DB6   0x.... 0x....      BL       strlen
   \   00003DBA   0xA90A             ADD      R1,SP,#+40
   \   00003DBC   0x.... 0x....      BL       BGM111_Transmit
   3583                                        }
   3584                                        return Status;
   \                     ??RoadBrd_ParseString_580: (+1)
   \   00003DC0   0x0030             MOVS     R0,R6
   \   00003DC2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003DC4   0xF000 0xBD2B      B.W      ??RoadBrd_ParseString_4
   \                     ??RoadBrd_ParseString_525:
   \   00003DC8   0x........         DC32     ?_227
   3585                                      }
   3586                                      else
   3587                                      {
   3588                                        // Is this a BLE Operation?
   3589                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_579: (+1)
   \   00003DCC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003DCE   0x2D00             CMP      R5,#+0
   \   00003DD0   0xD00A             BEQ.N    ??RoadBrd_ParseString_581
   3590                                        {
   3591                                          // Yes...Build and Send BLE Response NOW.
   3592                                          strcpy( (char *)tempBffr2, "<STATUS>ST_TCT_ACK</STATUS>");
   \   00003DD2   0x.... 0x....      LDR.W    R1,??DataTable4_6
   \   00003DD6   0xA80A             ADD      R0,SP,#+40
   \   00003DD8   0x.... 0x....      BL       strcpy
   3593                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003DDC   0xA80A             ADD      R0,SP,#+40
   \   00003DDE   0x.... 0x....      BL       strlen
   \   00003DE2   0xA90A             ADD      R1,SP,#+40
   \   00003DE4   0x.... 0x....      BL       BGM111_Transmit
   3594                                        }
   3595                                      }
   3596                                      sprintf( (char *)tempBffr2, "\r\n     COMPLETE.\r\n" );
   \                     ??RoadBrd_ParseString_581: (+1)
   \   00003DE8   0x.... 0x....      LDR.W    R1,??DataTable4
   \   00003DEC   0xA80A             ADD      R0,SP,#+40
   \   00003DEE   0x.... 0x....      BL       sprintf
   3597                                    } // EndElse (Size > 4)
   3598                                  } // EndElse (tempBffr[3]!=':')
   3599                                  break;
   \                     ??RoadBrd_ParseString_576: (+1)
   \   00003DF2   0xE02C             B.N      ??RoadBrd_ParseString_369
   3600                                  //------------------ TCI Command: Calibration Initialize Cal Table(Reset)
   3601                                case 'I':
   3602                                  Status = RoadBrd_CAL_InitializeFrmFlash();
   \                     ??RoadBrd_ParseString_375: (+1)
   \   00003DF4   0x.... 0x....      BL       RoadBrd_CAL_InitializeFrmFlash
   \   00003DF8   0x0006             MOVS     R6,R0
   3603                                  if (Status != HAL_OK)
   \   00003DFA   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00003DFC   0x2E00             CMP      R6,#+0
   \   00003DFE   0xD013             BEQ.N    ??RoadBrd_ParseString_582
   3604                                  {
   3605                                    // Is this a BLE Operation?
   3606                                    if ( BLE_Flag )
   \   00003E00   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003E02   0x2D00             CMP      R5,#+0
   \   00003E04   0xD00A             BEQ.N    ??RoadBrd_ParseString_583
   3607                                    {
   3608                                      // Yes...Build and Send BLE Response NOW.
   3609                                      strcpy( (char *)tempBffr2, "<STATUS>CMD_TCI_ERR</STATUS>");
   \   00003E06   0x.... 0x....      LDR.W    R1,??DataTable4_7
   \   00003E0A   0xA80A             ADD      R0,SP,#+40
   \   00003E0C   0x.... 0x....      BL       strcpy
   3610                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003E10   0xA80A             ADD      R0,SP,#+40
   \   00003E12   0x.... 0x....      BL       strlen
   \   00003E16   0xA90A             ADD      R1,SP,#+40
   \   00003E18   0x.... 0x....      BL       BGM111_Transmit
   3611                                    }
   3612                                    return Status;
   \                     ??RoadBrd_ParseString_583: (+1)
   \   00003E1C   0x0030             MOVS     R0,R6
   \   00003E1E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00003E20   0xF000 0xBCFD      B.W      ??RoadBrd_ParseString_4
   \                     ??RoadBrd_ParseString_526:
   \   00003E24   0x........         DC32     ?_228
   3613                                  }
   3614                                  else
   3615                                  {
   3616                                    // Is this a BLE Operation?
   3617                                    if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_582: (+1)
   \   00003E28   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003E2A   0x2D00             CMP      R5,#+0
   \   00003E2C   0xD00A             BEQ.N    ??RoadBrd_ParseString_584
   3618                                    {
   3619                                      // Yes...Build and Send BLE Response NOW.
   3620                                      strcpy( (char *)tempBffr2, "<STATUS>ST_TCI_ACK</STATUS>");
   \   00003E2E   0x.... 0x....      LDR.W    R1,??DataTable4_8
   \   00003E32   0xA80A             ADD      R0,SP,#+40
   \   00003E34   0x.... 0x....      BL       strcpy
   3621                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003E38   0xA80A             ADD      R0,SP,#+40
   \   00003E3A   0x.... 0x....      BL       strlen
   \   00003E3E   0xA90A             ADD      R1,SP,#+40
   \   00003E40   0x.... 0x....      BL       BGM111_Transmit
   3622                                    }
   3623                                  }
   3624                                  sprintf( (char *)tempBffr2, "\r\n     COMPLETE.\r\n" );
   \                     ??RoadBrd_ParseString_584: (+1)
   \   00003E44   0x.... 0x....      LDR.W    R1,??DataTable4
   \   00003E48   0xA80A             ADD      R0,SP,#+40
   \   00003E4A   0x.... 0x....      BL       sprintf
   3625                                  break;
   3626                                } //EndSwitch
   3627                              } //EndElse (Size == 2)
   3628                              break;
   \                     ??RoadBrd_ParseString_369: (+1)
   \   00003E4E   0xF000 0xBC5B      B.W      ??RoadBrd_ParseString_283
   3629          //++++++++++++++++++++++++++++++++++++++++++  Dump Driver State.
   3630                            case 'D':
   3631                              // Read Driver Status
   3632                              DriverStatus = Get_DriverStatus();
   \                     ??RoadBrd_ParseString_285: (+1)
   \   00003E52   0x.... 0x....      BL       Get_DriverStatus
   \   00003E56   0xF8AD 0x00CE      STRH     R0,[SP, #+206]
   3633                              // Is this a BLE Operation?
   3634                              if ( BLE_Flag )
   \   00003E5A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003E5C   0x2D00             CMP      R5,#+0
   \   00003E5E   0xD00C             BEQ.N    ??RoadBrd_ParseString_585
   3635                              {
   3636                                // Yes...Build and Send BLE Response NOW.
   3637                                sprintf( (char *)tempBffr2, "<STATUS>ST_DRIVER:%04x</STATUS>", DriverStatus );
   \   00003E60   0xF8BD 0x20CE      LDRH     R2,[SP, #+206]
   \   00003E64   0x.... 0x....      LDR.W    R1,??DataTable4_9
   \   00003E68   0xA80A             ADD      R0,SP,#+40
   \   00003E6A   0x.... 0x....      BL       sprintf
   3638                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003E6E   0xA80A             ADD      R0,SP,#+40
   \   00003E70   0x.... 0x....      BL       strlen
   \   00003E74   0xA90A             ADD      R1,SP,#+40
   \   00003E76   0x.... 0x....      BL       BGM111_Transmit
   3639                              }
   3640                              
   3641                              sprintf( (char *)tempBffr2, "Driver Status: %04x\r\n", DriverStatus );
   \                     ??RoadBrd_ParseString_585: (+1)
   \   00003E7A   0xF8BD 0x20CE      LDRH     R2,[SP, #+206]
   \   00003E7E   0x.... 0x....      LDR.W    R1,??DataTable4_10
   \   00003E82   0xA80A             ADD      R0,SP,#+40
   \   00003E84   0x.... 0x....      BL       sprintf
   3642                              break;
   \   00003E88   0xF000 0xBC3E      B.W      ??RoadBrd_ParseString_283
   \                     ??RoadBrd_ParseString_528:
   \   00003E8C   0x........         DC32     ?_229
   3643          //++++++++++++++++++++++++++++++++++++++++++  RESET Micro.
   3644                            case 'R':
   3645                              // RESET
   3646                              // Is this a BLE Operation?
   3647                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_291: (+1)
   \   00003E90   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003E92   0x2D00             CMP      R5,#+0
   \   00003E94   0xD00D             BEQ.N    ??RoadBrd_ParseString_586
   3648                              {
   3649                                // Yes...Build and Send BLE Response NOW.
   3650                                strcpy( (char *)tempBffr2, "<STATUS>ST_RESET_ACK</STATUS>");
   \   00003E96   0x.... 0x....      LDR.W    R1,??DataTable4_11
   \   00003E9A   0xA80A             ADD      R0,SP,#+40
   \   00003E9C   0x.... 0x....      BL       strcpy
   3651                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003EA0   0xA80A             ADD      R0,SP,#+40
   \   00003EA2   0x.... 0x....      BL       strlen
   \   00003EA6   0xA90A             ADD      R1,SP,#+40
   \   00003EA8   0x.... 0x....      BL       BGM111_Transmit
   3652                                HAL_Delay(100);           // Wait 100ms
   \   00003EAC   0x2064             MOVS     R0,#+100
   \   00003EAE   0x.... 0x....      BL       HAL_Delay
   3653                              }
   3654                              HAL_NVIC_SystemReset();
   \                     ??RoadBrd_ParseString_586: (+1)
   \   00003EB2   0x.... 0x....      BL       HAL_NVIC_SystemReset
   3655                              sprintf( (char *)tempBffr2, "RESET CALLED BUT NO RESPONSE!!\r\n" );
   \   00003EB6   0x.... 0x....      LDR.W    R1,??DataTable4_12
   \   00003EBA   0xA80A             ADD      R0,SP,#+40
   \   00003EBC   0x.... 0x....      BL       sprintf
   3656                              break;
   \   00003EC0   0xF000 0xBC22      B.W      ??RoadBrd_ParseString_283
   \                     ??RoadBrd_ParseString_529:
   \   00003EC4   0x........         DC32     ?_230
   3657          //++++++++++++++++++++++++++++++++++++++++++  Key Flash Variable Commands.
   3658                            case 'K':
   3659                              // Key Flash Variable Commands.
   3660                              // Test Size to make sure we have enough Characters for this operation
   3661                              Status = HAL_OK;
   \                     ??RoadBrd_ParseString_288: (+1)
   \   00003EC8   0x2000             MOVS     R0,#+0
   \   00003ECA   0x0006             MOVS     R6,R0
   3662                              if (Size < 4)
   \   00003ECC   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00003ED0   0xF1B8 0x0F04      CMP      R8,#+4
   \   00003ED4   0xDA16             BGE.N    ??RoadBrd_ParseString_587
   3663                              {
   3664                                // Is this a BLE Operation?
   3665                                if ( BLE_Flag )
   \   00003ED6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003ED8   0x2D00             CMP      R5,#+0
   \   00003EDA   0xD00A             BEQ.N    ??RoadBrd_ParseString_588
   3666                                {
   3667                                  // Yes...Build and Send BLE Response NOW.
   3668                                  strcpy( (char *)tempBffr2, "<STATUS>CMD_TK_SYNTAX</STATUS>");
   \   00003EDC   0x.... 0x....      LDR.W    R1,??DataTable4_13
   \   00003EE0   0xA80A             ADD      R0,SP,#+40
   \   00003EE2   0x.... 0x....      BL       strcpy
   3669                                  BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003EE6   0xA80A             ADD      R0,SP,#+40
   \   00003EE8   0x.... 0x....      BL       strlen
   \   00003EEC   0xA90A             ADD      R1,SP,#+40
   \   00003EEE   0x.... 0x....      BL       BGM111_Transmit
   3670                                }
   3671                                strcpy( (char *)tempBffr2, "TK SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_588: (+1)
   \   00003EF2   0x.... 0x....      LDR.W    R1,??DataTable4_14
   \   00003EF6   0xA80A             ADD      R0,SP,#+40
   \   00003EF8   0x.... 0x....      BL       strcpy
   \   00003EFC   0xE315             B.N      ??RoadBrd_ParseString_589
   \   00003EFE   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_531:
   \   00003F00   0x........         DC32     ?_231
   3672                              }
   3673                              else
   3674                              {
   3675                                switch( tempBffr[2] )
   \                     ??RoadBrd_ParseString_587: (+1)
   \   00003F04   0x78A0             LDRB     R0,[R4, #+2]
   \   00003F06   0x2852             CMP      R0,#+82
   \   00003F08   0xF000 0x8246      BEQ.W    ??RoadBrd_ParseString_590
   \   00003F0C   0x2853             CMP      R0,#+83
   \   00003F0E   0xF040 0x82F9      BNE.W    ??RoadBrd_ParseString_591
   3676                                {
   3677          //------------------
   3678                                  case 'S':
   3679                                    //Key Flash Variable Set Command.
   3680                                    switch( tempBffr[3] )
   \                     ??RoadBrd_ParseString_592: (+1)
   \   00003F12   0x78E0             LDRB     R0,[R4, #+3]
   \   00003F14   0x2842             CMP      R0,#+66
   \   00003F16   0xF000 0x81AC      BEQ.W    ??RoadBrd_ParseString_593
   \   00003F1A   0x2852             CMP      R0,#+82
   \   00003F1C   0xD006             BEQ.N    ??RoadBrd_ParseString_594
   \   00003F1E   0x2853             CMP      R0,#+83
   \   00003F20   0xF000 0x8091      BEQ.W    ??RoadBrd_ParseString_595
   \   00003F24   0x2854             CMP      R0,#+84
   \   00003F26   0xF000 0x8117      BEQ.W    ??RoadBrd_ParseString_596
   \   00003F2A   0xE22A             B.N      ??RoadBrd_ParseString_597
   3681                                    {
   3682          //------------------
   3683                                      case 'R':
   3684                                        //Key Flash Variable Set Road Sound Sample Rate Command.
   3685                                        // Step 1. Validate format.
   3686                                        if(tempBffr[4]!=':')
   \                     ??RoadBrd_ParseString_594: (+1)
   \   00003F2C   0x7920             LDRB     R0,[R4, #+4]
   \   00003F2E   0x283A             CMP      R0,#+58
   \   00003F30   0xD01A             BEQ.N    ??RoadBrd_ParseString_598
   3687                                        {
   3688                                          // Is this a BLE Operation?
   3689                                          if ( BLE_Flag )
   \   00003F32   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003F34   0x2D00             CMP      R5,#+0
   \   00003F36   0xD00A             BEQ.N    ??RoadBrd_ParseString_599
   3690                                          {
   3691                                            // Yes...Build and Send BLE Response NOW.
   3692                                            strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSR_SYNTAX</STATUS>");
   \   00003F38   0x.... 0x....      LDR.W    R1,??DataTable4_15
   \   00003F3C   0xA80A             ADD      R0,SP,#+40
   \   00003F3E   0x.... 0x....      BL       strcpy
   3693                                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003F42   0xA80A             ADD      R0,SP,#+40
   \   00003F44   0x.... 0x....      BL       strlen
   \   00003F48   0xA90A             ADD      R1,SP,#+40
   \   00003F4A   0x.... 0x....      BL       BGM111_Transmit
   3694                                          }
   3695                                          strcpy( (char *)tempBffr2, "TKSR SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_599: (+1)
   \   00003F4E   0x.... 0x....      LDR.W    R1,??DataTable4_16
   \   00003F52   0xA80A             ADD      R0,SP,#+40
   \   00003F54   0x.... 0x....      BL       strcpy
   \   00003F58   0xE074             B.N      ??RoadBrd_ParseString_600
   \   00003F5A   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_532:
   \   00003F5C   0x........         DC32     ?_232
   \   00003F60   0x........         DC32     ?_233
   \   00003F64   0x........         DC32     ?_234
   3696                                        } // Endif (tempBffr[4]!=':')
   3697                                        else
   3698                                        {
   3699                                          // 2. Verify if remaining string is digits
   3700                                          if (Size > 5)
   \                     ??RoadBrd_ParseString_598: (+1)
   \   00003F68   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00003F6C   0xF1B8 0x0F06      CMP      R8,#+6
   \   00003F70   0xDB10             BLT.N    ??RoadBrd_ParseString_601
   3701                                          {
   3702                                            flag = 1;
   \   00003F72   0x2001             MOVS     R0,#+1
   \   00003F74   0x902E             STR      R0,[SP, #+184]
   3703                                            for (x=5; x< Size; x++)
   \   00003F76   0x2005             MOVS     R0,#+5
   \   00003F78   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_602: (+1)
   \   00003F7A   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00003F7E   0x4547             CMP      R7,R8
   \   00003F80   0xDA0A             BGE.N    ??RoadBrd_ParseString_603
   3704                                            {
   3705                                              if (isdigit(tempBffr[x]) == 0)
   \   00003F82   0x5DE0             LDRB     R0,[R4, R7]
   \   00003F84   0x.... 0x....      BL       isdigit
   \   00003F88   0x2800             CMP      R0,#+0
   \   00003F8A   0xD101             BNE.N    ??RoadBrd_ParseString_604
   3706                                                flag = 0;
   \   00003F8C   0x2000             MOVS     R0,#+0
   \   00003F8E   0x902E             STR      R0,[SP, #+184]
   3707                                            }
   \                     ??RoadBrd_ParseString_604: (+1)
   \   00003F90   0x1C7F             ADDS     R7,R7,#+1
   \   00003F92   0xE7F2             B.N      ??RoadBrd_ParseString_602
   3708                                          } // EndIf (Size > 5)
   3709                                          else
   3710                                            flag = 0;
   \                     ??RoadBrd_ParseString_601: (+1)
   \   00003F94   0x2000             MOVS     R0,#+0
   \   00003F96   0x902E             STR      R0,[SP, #+184]
   3711                                          if (flag == 0)
   \                     ??RoadBrd_ParseString_603: (+1)
   \   00003F98   0x982E             LDR      R0,[SP, #+184]
   \   00003F9A   0x2800             CMP      R0,#+0
   \   00003F9C   0xD113             BNE.N    ??RoadBrd_ParseString_605
   3712                                          {
   3713                                            // Is this a BLE Operation?
   3714                                            if ( BLE_Flag )
   \   00003F9E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003FA0   0x2D00             CMP      R5,#+0
   \   00003FA2   0xD00A             BEQ.N    ??RoadBrd_ParseString_606
   3715                                            {
   3716                                              // Yes...Build and Send BLE Response NOW.
   3717                                              strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSR_BADPARAM</STATUS>");
   \   00003FA4   0x.... 0x....      LDR.W    R1,??DataTable4_17
   \   00003FA8   0xA80A             ADD      R0,SP,#+40
   \   00003FAA   0x.... 0x....      BL       strcpy
   3718                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003FAE   0xA80A             ADD      R0,SP,#+40
   \   00003FB0   0x.... 0x....      BL       strlen
   \   00003FB4   0xA90A             ADD      R1,SP,#+40
   \   00003FB6   0x.... 0x....      BL       BGM111_Transmit
   3719                                            }
   3720                                            strcpy( (char *)tempBffr2, "TKSR SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_606: (+1)
   \   00003FBA   0x.... 0x....      LDR.W    R1,??DataTable4_18
   \   00003FBE   0xA80A             ADD      R0,SP,#+40
   \   00003FC0   0x.... 0x....      BL       strcpy
   \   00003FC4   0xE03E             B.N      ??RoadBrd_ParseString_600
   3721                                          }
   3722                                          else
   3723                                          {
   3724                                            // 3. Grab remaining string and convert to integer.
   3725                                            tempPstr = &tempBffr[5];
   \                     ??RoadBrd_ParseString_605: (+1)
   \   00003FC6   0x1D60             ADDS     R0,R4,#+5
   \   00003FC8   0x9030             STR      R0,[SP, #+192]
   3726                                            strcpy(tempstr, tempPstr);
   \   00003FCA   0x9930             LDR      R1,[SP, #+192]
   \   00003FCC   0xA848             ADD      R0,SP,#+288
   \   00003FCE   0x.... 0x....      BL       strcpy
   3727                                            new_value = atoi( tempstr );
   \   00003FD2   0xA848             ADD      R0,SP,#+288
   \   00003FD4   0x.... 0x....      BL       atoi
   \   00003FD8   0x902F             STR      R0,[SP, #+188]
   3728                                            if((new_value > 9999) ||
   3729                                               (new_value < 0))
   \   00003FDA   0x982F             LDR      R0,[SP, #+188]
   \   00003FDC   0xF242 0x7110      MOVW     R1,#+10000
   \   00003FE0   0x4288             CMP      R0,R1
   \   00003FE2   0xDA02             BGE.N    ??RoadBrd_ParseString_607
   \   00003FE4   0x982F             LDR      R0,[SP, #+188]
   \   00003FE6   0x2800             CMP      R0,#+0
   \   00003FE8   0xD516             BPL.N    ??RoadBrd_ParseString_608
   3730                                            {
   3731                                              // Is this a BLE Operation?
   3732                                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_607: (+1)
   \   00003FEA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00003FEC   0x2D00             CMP      R5,#+0
   \   00003FEE   0xD00A             BEQ.N    ??RoadBrd_ParseString_609
   3733                                              {
   3734                                                // Yes...Build and Send BLE Response NOW.
   3735                                                strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSR_BADPARAM</STATUS>");
   \   00003FF0   0x.... 0x....      LDR.W    R1,??DataTable4_17
   \   00003FF4   0xA80A             ADD      R0,SP,#+40
   \   00003FF6   0x.... 0x....      BL       strcpy
   3736                                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00003FFA   0xA80A             ADD      R0,SP,#+40
   \   00003FFC   0x.... 0x....      BL       strlen
   \   00004000   0xA90A             ADD      R1,SP,#+40
   \   00004002   0x.... 0x....      BL       BGM111_Transmit
   3737                                              }
   3738                                              strcpy( (char *)tempBffr2, "TKSR SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_609: (+1)
   \   00004006   0x.... 0x....      LDR.W    R1,??DataTable4_18
   \   0000400A   0xA80A             ADD      R0,SP,#+40
   \   0000400C   0x.... 0x....      BL       strcpy
   \   00004010   0xE018             B.N      ??RoadBrd_ParseString_600
   \   00004012   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_535:
   \   00004014   0x........         DC32     ?_235
   3739                                            }
   3740                                            else
   3741                                            {
   3742                                              // Time to set new Road Sound Sample Rate.
   3743                                              RoadBrd_Set_RdSndTickCnt( new_value );
   \                     ??RoadBrd_ParseString_608: (+1)
   \   00004018   0x982F             LDR      R0,[SP, #+188]
   \   0000401A   0x.... 0x....      BL       RoadBrd_Set_RdSndTickCnt
   3744                                              // NOW, Build Data String..
   3745                                              // Is this a BLE Operation?
   3746                                              if ( BLE_Flag )
   \   0000401E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004020   0x2D00             CMP      R5,#+0
   \   00004022   0xD00A             BEQ.N    ??RoadBrd_ParseString_610
   3747                                              {
   3748                                                // Yes...Build and Send BLE Response NOW.
   3749                                                strcpy( (char *)tempBffr2, "<STATUS>ST_TKSR_ACK</STATUS>");
   \   00004024   0x.... 0x....      LDR.W    R1,??DataTable4_19
   \   00004028   0xA80A             ADD      R0,SP,#+40
   \   0000402A   0x.... 0x....      BL       strcpy
   3750                                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000402E   0xA80A             ADD      R0,SP,#+40
   \   00004030   0x.... 0x....      BL       strlen
   \   00004034   0xA90A             ADD      R1,SP,#+40
   \   00004036   0x.... 0x....      BL       BGM111_Transmit
   3751                                              }
   3752                                              sprintf( (char *)tempBffr2, "COMPLETE" );
   \                     ??RoadBrd_ParseString_610: (+1)
   \   0000403A   0x.... 0x....      LDR.W    R1,??DataTable4_20
   \   0000403E   0xA80A             ADD      R0,SP,#+40
   \   00004040   0x.... 0x....      BL       sprintf
   3753                                            } // EndElse ((new_value > 9999) || (new_value < 0))
   3754                                          } // EndElse (flag == 0)
   3755                                        } // EndElse (tempBffr[4]!=':')
   3756                                        break;
   \                     ??RoadBrd_ParseString_600: (+1)
   \   00004044   0xE1A2             B.N      ??RoadBrd_ParseString_611
   3757          //------------------
   3758                                      case 'S':
   3759                                        //Key Flash Variable Set Sensor Sample Rate Command.
   3760                                        // Step 1. Validate format.
   3761                                        if(tempBffr[4]!=':')
   \                     ??RoadBrd_ParseString_595: (+1)
   \   00004046   0x7920             LDRB     R0,[R4, #+4]
   \   00004048   0x283A             CMP      R0,#+58
   \   0000404A   0xD019             BEQ.N    ??RoadBrd_ParseString_612
   3762                                        {
   3763                                          // Is this a BLE Operation?
   3764                                          if ( BLE_Flag )
   \   0000404C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000404E   0x2D00             CMP      R5,#+0
   \   00004050   0xD00A             BEQ.N    ??RoadBrd_ParseString_613
   3765                                          {
   3766                                            // Yes...Build and Send BLE Response NOW.
   3767                                            strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSS_SYNTAX</STATUS>");
   \   00004052   0x.... 0x....      LDR.W    R1,??DataTable4_21
   \   00004056   0xA80A             ADD      R0,SP,#+40
   \   00004058   0x.... 0x....      BL       strcpy
   3768                                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000405C   0xA80A             ADD      R0,SP,#+40
   \   0000405E   0x.... 0x....      BL       strlen
   \   00004062   0xA90A             ADD      R1,SP,#+40
   \   00004064   0x.... 0x....      BL       BGM111_Transmit
   3769                                          }
   3770                                          strcpy( (char *)tempBffr2, "TKSS SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_613: (+1)
   \   00004068   0x.... 0x....      LDR.W    R1,??DataTable4_22
   \   0000406C   0xA80A             ADD      R0,SP,#+40
   \   0000406E   0x.... 0x....      BL       strcpy
   \   00004072   0xE070             B.N      ??RoadBrd_ParseString_614
   \                     ??RoadBrd_ParseString_536:
   \   00004074   0x........         DC32     ?_236
   \   00004078   0x........         DC32     ?_237
   \   0000407C   0x........         DC32     ?_238
   3771                                        } // Endif (tempBffr[4]!=':')
   3772                                        else
   3773                                        {
   3774                                          // 2. Verify if remaining string is digits
   3775                                          if (Size > 5)
   \                     ??RoadBrd_ParseString_612: (+1)
   \   00004080   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00004084   0xF1B8 0x0F06      CMP      R8,#+6
   \   00004088   0xDB10             BLT.N    ??RoadBrd_ParseString_615
   3776                                          {
   3777                                            flag = 1;
   \   0000408A   0x2001             MOVS     R0,#+1
   \   0000408C   0x902E             STR      R0,[SP, #+184]
   3778                                            for (x=5; x< Size; x++)
   \   0000408E   0x2005             MOVS     R0,#+5
   \   00004090   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_616: (+1)
   \   00004092   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00004096   0x4547             CMP      R7,R8
   \   00004098   0xDA0A             BGE.N    ??RoadBrd_ParseString_617
   3779                                            {
   3780                                              if (isdigit(tempBffr[x]) == 0)
   \   0000409A   0x5DE0             LDRB     R0,[R4, R7]
   \   0000409C   0x.... 0x....      BL       isdigit
   \   000040A0   0x2800             CMP      R0,#+0
   \   000040A2   0xD101             BNE.N    ??RoadBrd_ParseString_618
   3781                                                flag = 0;
   \   000040A4   0x2000             MOVS     R0,#+0
   \   000040A6   0x902E             STR      R0,[SP, #+184]
   3782                                            }
   \                     ??RoadBrd_ParseString_618: (+1)
   \   000040A8   0x1C7F             ADDS     R7,R7,#+1
   \   000040AA   0xE7F2             B.N      ??RoadBrd_ParseString_616
   3783                                          } // EndIf (Size > 5)
   3784                                          else
   3785                                            flag = 0;
   \                     ??RoadBrd_ParseString_615: (+1)
   \   000040AC   0x2000             MOVS     R0,#+0
   \   000040AE   0x902E             STR      R0,[SP, #+184]
   3786                                          if (flag == 0)
   \                     ??RoadBrd_ParseString_617: (+1)
   \   000040B0   0x982E             LDR      R0,[SP, #+184]
   \   000040B2   0x2800             CMP      R0,#+0
   \   000040B4   0xD113             BNE.N    ??RoadBrd_ParseString_619
   3787                                          {
   3788                                            // Is this a BLE Operation?
   3789                                            if ( BLE_Flag )
   \   000040B6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000040B8   0x2D00             CMP      R5,#+0
   \   000040BA   0xD00A             BEQ.N    ??RoadBrd_ParseString_620
   3790                                            {
   3791                                              // Yes...Build and Send BLE Response NOW.
   3792                                              strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSS_BADPARAM</STATUS>");
   \   000040BC   0x.... 0x....      LDR.W    R1,??DataTable4_23
   \   000040C0   0xA80A             ADD      R0,SP,#+40
   \   000040C2   0x.... 0x....      BL       strcpy
   3793                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000040C6   0xA80A             ADD      R0,SP,#+40
   \   000040C8   0x.... 0x....      BL       strlen
   \   000040CC   0xA90A             ADD      R1,SP,#+40
   \   000040CE   0x.... 0x....      BL       BGM111_Transmit
   3794                                            }
   3795                                            strcpy( (char *)tempBffr2, "TKSS SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_620: (+1)
   \   000040D2   0x.... 0x....      LDR.W    R1,??DataTable4_24
   \   000040D6   0xA80A             ADD      R0,SP,#+40
   \   000040D8   0x.... 0x....      BL       strcpy
   \   000040DC   0xE03B             B.N      ??RoadBrd_ParseString_614
   3796                                          }
   3797                                          else
   3798                                          {
   3799                                            // 3. Grab remaining string and convert to integer.
   3800                                            tempPstr = &tempBffr[5];
   \                     ??RoadBrd_ParseString_619: (+1)
   \   000040DE   0x1D60             ADDS     R0,R4,#+5
   \   000040E0   0x9030             STR      R0,[SP, #+192]
   3801                                            strcpy(tempstr, tempPstr);
   \   000040E2   0x9930             LDR      R1,[SP, #+192]
   \   000040E4   0xA848             ADD      R0,SP,#+288
   \   000040E6   0x.... 0x....      BL       strcpy
   3802                                            new_value = atoi( tempstr );
   \   000040EA   0xA848             ADD      R0,SP,#+288
   \   000040EC   0x.... 0x....      BL       atoi
   \   000040F0   0x902F             STR      R0,[SP, #+188]
   3803                                            if((new_value > 9999) ||
   3804                                               (new_value < 0))
   \   000040F2   0x982F             LDR      R0,[SP, #+188]
   \   000040F4   0xF242 0x7110      MOVW     R1,#+10000
   \   000040F8   0x4288             CMP      R0,R1
   \   000040FA   0xDA02             BGE.N    ??RoadBrd_ParseString_621
   \   000040FC   0x982F             LDR      R0,[SP, #+188]
   \   000040FE   0x2800             CMP      R0,#+0
   \   00004100   0xD513             BPL.N    ??RoadBrd_ParseString_622
   3805                                            {
   3806                                              // Is this a BLE Operation?
   3807                                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_621: (+1)
   \   00004102   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004104   0x2D00             CMP      R5,#+0
   \   00004106   0xD00A             BEQ.N    ??RoadBrd_ParseString_623
   3808                                              {
   3809                                                // Yes...Build and Send BLE Response NOW.
   3810                                                strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSS_BADPARAM</STATUS>");
   \   00004108   0x.... 0x....      LDR.W    R1,??DataTable4_23
   \   0000410C   0xA80A             ADD      R0,SP,#+40
   \   0000410E   0x.... 0x....      BL       strcpy
   3811                                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004112   0xA80A             ADD      R0,SP,#+40
   \   00004114   0x.... 0x....      BL       strlen
   \   00004118   0xA90A             ADD      R1,SP,#+40
   \   0000411A   0x.... 0x....      BL       BGM111_Transmit
   3812                                              }
   3813                                              strcpy( (char *)tempBffr2, "TKSS SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_623: (+1)
   \   0000411E   0x.... 0x....      LDR.W    R1,??DataTable4_24
   \   00004122   0xA80A             ADD      R0,SP,#+40
   \   00004124   0x.... 0x....      BL       strcpy
   \   00004128   0xE015             B.N      ??RoadBrd_ParseString_614
   3814                                            }
   3815                                            else
   3816                                            {
   3817                                              // Time to set new Road Sound Sample Rate.
   3818                                              RoadBrd_Set_SnsrTickCnt( new_value );
   \                     ??RoadBrd_ParseString_622: (+1)
   \   0000412A   0x982F             LDR      R0,[SP, #+188]
   \   0000412C   0x.... 0x....      BL       RoadBrd_Set_SnsrTickCnt
   3819                                              // Is this a BLE Operation?
   3820                                              if ( BLE_Flag )
   \   00004130   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004132   0x2D00             CMP      R5,#+0
   \   00004134   0xD00A             BEQ.N    ??RoadBrd_ParseString_624
   3821                                              {
   3822                                                // Yes...Build and Send BLE Response NOW.
   3823                                                strcpy( (char *)tempBffr2, "<STATUS>ST_TKSS_ACK</STATUS>");
   \   00004136   0x.... 0x....      LDR.W    R1,??DataTable4_25
   \   0000413A   0xA80A             ADD      R0,SP,#+40
   \   0000413C   0x.... 0x....      BL       strcpy
   3824                                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004140   0xA80A             ADD      R0,SP,#+40
   \   00004142   0x.... 0x....      BL       strlen
   \   00004146   0xA90A             ADD      R1,SP,#+40
   \   00004148   0x.... 0x....      BL       BGM111_Transmit
   3825                                              }
   3826                                              // NOW, Build Data String..
   3827                                              sprintf( (char *)tempBffr2, "COMPLETE" );
   \                     ??RoadBrd_ParseString_624: (+1)
   \   0000414C   0x.... 0x....      LDR.W    R1,??DataTable4_20
   \   00004150   0xA80A             ADD      R0,SP,#+40
   \   00004152   0x.... 0x....      BL       sprintf
   3828                                            } // EndElse ((new_value > 9999) || (new_value < 0))
   3829                                          } // EndElse (flag == 0)
   3830                                        } // EndElse (tempBffr[4]!=':')
   3831                                        break;
   \                     ??RoadBrd_ParseString_614: (+1)
   \   00004156   0xE119             B.N      ??RoadBrd_ParseString_611
   3832          //------------------
   3833                                      case 'T':
   3834                                        //Key Flash Variable Set TACK Limit(Multiple of Road Sound Throttles).
   3835                                        // Step 1. Validate format.
   3836                                        if(tempBffr[4]!=':')
   \                     ??RoadBrd_ParseString_596: (+1)
   \   00004158   0x7920             LDRB     R0,[R4, #+4]
   \   0000415A   0x283A             CMP      R0,#+58
   \   0000415C   0xD018             BEQ.N    ??RoadBrd_ParseString_625
   3837                                        {
   3838                                          // Is this a BLE Operation?
   3839                                          if ( BLE_Flag )
   \   0000415E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004160   0x2D00             CMP      R5,#+0
   \   00004162   0xD00A             BEQ.N    ??RoadBrd_ParseString_626
   3840                                          {
   3841                                            // Yes...Build and Send BLE Response NOW.
   3842                                            strcpy( (char *)tempBffr2, "<STATUS>CMD_TKST_SYNTAX</STATUS>");
   \   00004164   0x.... 0x....      LDR.W    R1,??DataTable4_26
   \   00004168   0xA80A             ADD      R0,SP,#+40
   \   0000416A   0x.... 0x....      BL       strcpy
   3843                                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000416E   0xA80A             ADD      R0,SP,#+40
   \   00004170   0x.... 0x....      BL       strlen
   \   00004174   0xA90A             ADD      R1,SP,#+40
   \   00004176   0x.... 0x....      BL       BGM111_Transmit
   3844                                          }
   3845                                          strcpy( (char *)tempBffr2, "TKST SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_626: (+1)
   \   0000417A   0x.... 0x....      LDR.W    R1,??DataTable4_27
   \   0000417E   0xA80A             ADD      R0,SP,#+40
   \   00004180   0x.... 0x....      BL       strcpy
   \   00004184   0xE074             B.N      ??RoadBrd_ParseString_627
   \   00004186   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_539:
   \   00004188   0x........         DC32     ?_239
   \   0000418C   0x........         DC32     ?_240
   3846                                        } // Endif (tempBffr[4]!=':')
   3847                                        else
   3848                                        {
   3849                                          // 2. Verify if remaining string is digits
   3850                                          if (Size > 5)
   \                     ??RoadBrd_ParseString_625: (+1)
   \   00004190   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00004194   0xF1B8 0x0F06      CMP      R8,#+6
   \   00004198   0xDB10             BLT.N    ??RoadBrd_ParseString_628
   3851                                          {
   3852                                            flag = 1;
   \   0000419A   0x2001             MOVS     R0,#+1
   \   0000419C   0x902E             STR      R0,[SP, #+184]
   3853                                            for (x=5; x< Size; x++)
   \   0000419E   0x2005             MOVS     R0,#+5
   \   000041A0   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_629: (+1)
   \   000041A2   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000041A6   0x4547             CMP      R7,R8
   \   000041A8   0xDA0A             BGE.N    ??RoadBrd_ParseString_630
   3854                                            {
   3855                                              if (isdigit(tempBffr[x]) == 0)
   \   000041AA   0x5DE0             LDRB     R0,[R4, R7]
   \   000041AC   0x.... 0x....      BL       isdigit
   \   000041B0   0x2800             CMP      R0,#+0
   \   000041B2   0xD101             BNE.N    ??RoadBrd_ParseString_631
   3856                                                flag = 0;
   \   000041B4   0x2000             MOVS     R0,#+0
   \   000041B6   0x902E             STR      R0,[SP, #+184]
   3857                                            }
   \                     ??RoadBrd_ParseString_631: (+1)
   \   000041B8   0x1C7F             ADDS     R7,R7,#+1
   \   000041BA   0xE7F2             B.N      ??RoadBrd_ParseString_629
   3858                                          } // EndIf (Size > 5)
   3859                                          else
   3860                                            flag = 0;
   \                     ??RoadBrd_ParseString_628: (+1)
   \   000041BC   0x2000             MOVS     R0,#+0
   \   000041BE   0x902E             STR      R0,[SP, #+184]
   3861                                          if (flag == 0)
   \                     ??RoadBrd_ParseString_630: (+1)
   \   000041C0   0x982E             LDR      R0,[SP, #+184]
   \   000041C2   0x2800             CMP      R0,#+0
   \   000041C4   0xD116             BNE.N    ??RoadBrd_ParseString_632
   3862                                          {
   3863                                            // Is this a BLE Operation?
   3864                                            if ( BLE_Flag )
   \   000041C6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000041C8   0x2D00             CMP      R5,#+0
   \   000041CA   0xD00A             BEQ.N    ??RoadBrd_ParseString_633
   3865                                            {
   3866                                              // Yes...Build and Send BLE Response NOW.
   3867                                              strcpy( (char *)tempBffr2, "<STATUS>CMD_TKST_BADPARAM</STATUS>");
   \   000041CC   0x.... 0x....      LDR.W    R1,??DataTable4_28
   \   000041D0   0xA80A             ADD      R0,SP,#+40
   \   000041D2   0x.... 0x....      BL       strcpy
   3868                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000041D6   0xA80A             ADD      R0,SP,#+40
   \   000041D8   0x.... 0x....      BL       strlen
   \   000041DC   0xA90A             ADD      R1,SP,#+40
   \   000041DE   0x.... 0x....      BL       BGM111_Transmit
   3869                                            }
   3870                                            strcpy( (char *)tempBffr2, "TKST SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_633: (+1)
   \   000041E2   0x.... 0x....      LDR.W    R1,??DataTable4_29
   \   000041E6   0xA80A             ADD      R0,SP,#+40
   \   000041E8   0x.... 0x....      BL       strcpy
   \   000041EC   0xE040             B.N      ??RoadBrd_ParseString_627
   \   000041EE   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_541:
   \   000041F0   0x........         DC32     ?_241
   3871                                          }
   3872                                          else
   3873                                          {
   3874                                            // 3. Grab remaining string and convert to integer.
   3875                                            tempPstr = &tempBffr[5];
   \                     ??RoadBrd_ParseString_632: (+1)
   \   000041F4   0x1D60             ADDS     R0,R4,#+5
   \   000041F6   0x9030             STR      R0,[SP, #+192]
   3876                                            strcpy(tempstr, tempPstr);
   \   000041F8   0x9930             LDR      R1,[SP, #+192]
   \   000041FA   0xA848             ADD      R0,SP,#+288
   \   000041FC   0x.... 0x....      BL       strcpy
   3877                                            new_value = atoi( tempstr );
   \   00004200   0xA848             ADD      R0,SP,#+288
   \   00004202   0x.... 0x....      BL       atoi
   \   00004206   0x902F             STR      R0,[SP, #+188]
   3878                                            if((new_value > 9999) ||
   3879                                               (new_value < 0))
   \   00004208   0x982F             LDR      R0,[SP, #+188]
   \   0000420A   0xF242 0x7110      MOVW     R1,#+10000
   \   0000420E   0x4288             CMP      R0,R1
   \   00004210   0xDA02             BGE.N    ??RoadBrd_ParseString_634
   \   00004212   0x982F             LDR      R0,[SP, #+188]
   \   00004214   0x2800             CMP      R0,#+0
   \   00004216   0xD515             BPL.N    ??RoadBrd_ParseString_635
   3880                                            {
   3881                                              // Is this a BLE Operation?
   3882                                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_634: (+1)
   \   00004218   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000421A   0x2D00             CMP      R5,#+0
   \   0000421C   0xD00A             BEQ.N    ??RoadBrd_ParseString_636
   3883                                              {
   3884                                                // Yes...Build and Send BLE Response NOW.
   3885                                                strcpy( (char *)tempBffr2, "<STATUS>CMD_TKST_BADPARAM</STATUS>");
   \   0000421E   0x.... 0x....      LDR.W    R1,??DataTable4_28
   \   00004222   0xA80A             ADD      R0,SP,#+40
   \   00004224   0x.... 0x....      BL       strcpy
   3886                                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004228   0xA80A             ADD      R0,SP,#+40
   \   0000422A   0x.... 0x....      BL       strlen
   \   0000422E   0xA90A             ADD      R1,SP,#+40
   \   00004230   0x.... 0x....      BL       BGM111_Transmit
   3887                                              }
   3888                                              strcpy( (char *)tempBffr2, "TKSS SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_636: (+1)
   \   00004234   0x.... 0x....      LDR.W    R1,??DataTable4_24
   \   00004238   0xA80A             ADD      R0,SP,#+40
   \   0000423A   0x.... 0x....      BL       strcpy
   \   0000423E   0xE017             B.N      ??RoadBrd_ParseString_627
   \                     ??RoadBrd_ParseString_542:
   \   00004240   0x........         DC32     ?_242
   3889                                            }
   3890                                            else
   3891                                            {
   3892                                              // Time to set new TACK Limit.
   3893                                              RoadBrd_Set_TackLimit( new_value );
   \                     ??RoadBrd_ParseString_635: (+1)
   \   00004244   0x982F             LDR      R0,[SP, #+188]
   \   00004246   0x.... 0x....      BL       RoadBrd_Set_TackLimit
   3894                                              // Is this a BLE Operation?
   3895                                              if ( BLE_Flag )
   \   0000424A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000424C   0x2D00             CMP      R5,#+0
   \   0000424E   0xD00A             BEQ.N    ??RoadBrd_ParseString_637
   3896                                              {
   3897                                                // Yes...Build and Send BLE Response NOW.
   3898                                                strcpy( (char *)tempBffr2, "<STATUS>ST_TKST_ACK</STATUS>");
   \   00004250   0x.... 0x....      LDR.W    R1,??DataTable4_30
   \   00004254   0xA80A             ADD      R0,SP,#+40
   \   00004256   0x.... 0x....      BL       strcpy
   3899                                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000425A   0xA80A             ADD      R0,SP,#+40
   \   0000425C   0x.... 0x....      BL       strlen
   \   00004260   0xA90A             ADD      R1,SP,#+40
   \   00004262   0x.... 0x....      BL       BGM111_Transmit
   3900                                              }
   3901                                              // NOW, Build Data String..
   3902                                              sprintf( (char *)tempBffr2, "COMPLETE" );
   \                     ??RoadBrd_ParseString_637: (+1)
   \   00004266   0x.... 0x....      LDR.W    R1,??DataTable4_20
   \   0000426A   0xA80A             ADD      R0,SP,#+40
   \   0000426C   0x.... 0x....      BL       sprintf
   3903                                            } // EndElse ((new_value > 9999) || (new_value < 0))
   3904                                          } // EndElse (flag == 0)
   3905                                        } // EndElse (tempBffr[4]!=':')
   3906                                        break;
   \                     ??RoadBrd_ParseString_627: (+1)
   \   00004270   0xE08C             B.N      ??RoadBrd_ParseString_611
   3907                                      case 'B':
   3908                                        //Key Flash Variable Set Boot Delay(Seconds).
   3909                                        // Step 1. Validate format.
   3910                                        if(tempBffr[4]!=':')
   \                     ??RoadBrd_ParseString_593: (+1)
   \   00004272   0x7920             LDRB     R0,[R4, #+4]
   \   00004274   0x283A             CMP      R0,#+58
   \   00004276   0xD019             BEQ.N    ??RoadBrd_ParseString_638
   3911                                        {
   3912                                          // Is this a BLE Operation?
   3913                                          if ( BLE_Flag )
   \   00004278   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000427A   0x2D00             CMP      R5,#+0
   \   0000427C   0xD00A             BEQ.N    ??RoadBrd_ParseString_639
   3914                                          {
   3915                                            // Yes...Build and Send BLE Response NOW.
   3916                                            strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSB_SYNTAX</STATUS>");
   \   0000427E   0x.... 0x....      LDR.W    R1,??DataTable4_31
   \   00004282   0xA80A             ADD      R0,SP,#+40
   \   00004284   0x.... 0x....      BL       strcpy
   3917                                            BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004288   0xA80A             ADD      R0,SP,#+40
   \   0000428A   0x.... 0x....      BL       strlen
   \   0000428E   0xA90A             ADD      R1,SP,#+40
   \   00004290   0x.... 0x....      BL       BGM111_Transmit
   3918                                          }
   3919                                          strcpy( (char *)tempBffr2, "TKSB SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_639: (+1)
   \   00004294   0x.... 0x....      LDR.W    R1,??DataTable4_32
   \   00004298   0xA80A             ADD      R0,SP,#+40
   \   0000429A   0x.... 0x....      BL       strcpy
   \   0000429E   0xE06F             B.N      ??RoadBrd_ParseString_640
   \                     ??RoadBrd_ParseString_544:
   \   000042A0   0x........         DC32     ?_243
   \   000042A4   0x........         DC32     ?_244
   \   000042A8   0x........         DC32     ?_245
   3920                                        } // Endif (tempBffr[4]!=':')
   3921                                        else
   3922                                        {
   3923                                          // 2. Verify if remaining string is digits
   3924                                          if (Size > 5)
   \                     ??RoadBrd_ParseString_638: (+1)
   \   000042AC   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000042B0   0xF1B8 0x0F06      CMP      R8,#+6
   \   000042B4   0xDB10             BLT.N    ??RoadBrd_ParseString_641
   3925                                          {
   3926                                            flag = 1;
   \   000042B6   0x2001             MOVS     R0,#+1
   \   000042B8   0x902E             STR      R0,[SP, #+184]
   3927                                            for (x=5; x< Size; x++)
   \   000042BA   0x2005             MOVS     R0,#+5
   \   000042BC   0x0007             MOVS     R7,R0
   \                     ??RoadBrd_ParseString_642: (+1)
   \   000042BE   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000042C2   0x4547             CMP      R7,R8
   \   000042C4   0xDA0A             BGE.N    ??RoadBrd_ParseString_643
   3928                                            {
   3929                                              if (isdigit(tempBffr[x]) == 0)
   \   000042C6   0x5DE0             LDRB     R0,[R4, R7]
   \   000042C8   0x.... 0x....      BL       isdigit
   \   000042CC   0x2800             CMP      R0,#+0
   \   000042CE   0xD101             BNE.N    ??RoadBrd_ParseString_644
   3930                                                flag = 0;
   \   000042D0   0x2000             MOVS     R0,#+0
   \   000042D2   0x902E             STR      R0,[SP, #+184]
   3931                                            }
   \                     ??RoadBrd_ParseString_644: (+1)
   \   000042D4   0x1C7F             ADDS     R7,R7,#+1
   \   000042D6   0xE7F2             B.N      ??RoadBrd_ParseString_642
   3932                                          } // EndIf (Size > 5)
   3933                                          else
   3934                                            flag = 0;
   \                     ??RoadBrd_ParseString_641: (+1)
   \   000042D8   0x2000             MOVS     R0,#+0
   \   000042DA   0x902E             STR      R0,[SP, #+184]
   3935                                          if (flag == 0)
   \                     ??RoadBrd_ParseString_643: (+1)
   \   000042DC   0x982E             LDR      R0,[SP, #+184]
   \   000042DE   0x2800             CMP      R0,#+0
   \   000042E0   0xD113             BNE.N    ??RoadBrd_ParseString_645
   3936                                          {
   3937                                            // Is this a BLE Operation?
   3938                                            if ( BLE_Flag )
   \   000042E2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000042E4   0x2D00             CMP      R5,#+0
   \   000042E6   0xD00A             BEQ.N    ??RoadBrd_ParseString_646
   3939                                            {
   3940                                              // Yes...Build and Send BLE Response NOW.
   3941                                              strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSB_BADPARAM</STATUS>");
   \   000042E8   0x.... 0x....      LDR.W    R1,??DataTable4_33
   \   000042EC   0xA80A             ADD      R0,SP,#+40
   \   000042EE   0x.... 0x....      BL       strcpy
   3942                                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000042F2   0xA80A             ADD      R0,SP,#+40
   \   000042F4   0x.... 0x....      BL       strlen
   \   000042F8   0xA90A             ADD      R1,SP,#+40
   \   000042FA   0x.... 0x....      BL       BGM111_Transmit
   3943                                            }
   3944                                            strcpy( (char *)tempBffr2, "TKSB SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_646: (+1)
   \   000042FE   0x.... 0x....      LDR.W    R1,??DataTable4_34
   \   00004302   0xA80A             ADD      R0,SP,#+40
   \   00004304   0x.... 0x....      BL       strcpy
   \   00004308   0xE03A             B.N      ??RoadBrd_ParseString_640
   3945                                          }
   3946                                          else
   3947                                          {
   3948                                            // 3. Grab remaining string and convert to integer.
   3949                                            tempPstr = &tempBffr[5];
   \                     ??RoadBrd_ParseString_645: (+1)
   \   0000430A   0x1D60             ADDS     R0,R4,#+5
   \   0000430C   0x9030             STR      R0,[SP, #+192]
   3950                                            strcpy(tempstr, tempPstr);
   \   0000430E   0x9930             LDR      R1,[SP, #+192]
   \   00004310   0xA848             ADD      R0,SP,#+288
   \   00004312   0x.... 0x....      BL       strcpy
   3951                                            new_value = atoi( tempstr );
   \   00004316   0xA848             ADD      R0,SP,#+288
   \   00004318   0x.... 0x....      BL       atoi
   \   0000431C   0x902F             STR      R0,[SP, #+188]
   3952                                            if((new_value > 999) ||
   3953                                               (new_value < 0))
   \   0000431E   0x982F             LDR      R0,[SP, #+188]
   \   00004320   0xF5B0 0x7F7A      CMP      R0,#+1000
   \   00004324   0xDA02             BGE.N    ??RoadBrd_ParseString_647
   \   00004326   0x982F             LDR      R0,[SP, #+188]
   \   00004328   0x2800             CMP      R0,#+0
   \   0000432A   0xD513             BPL.N    ??RoadBrd_ParseString_648
   3954                                            {
   3955                                              // Is this a BLE Operation?
   3956                                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_647: (+1)
   \   0000432C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000432E   0x2D00             CMP      R5,#+0
   \   00004330   0xD00A             BEQ.N    ??RoadBrd_ParseString_649
   3957                                              {
   3958                                                // Yes...Build and Send BLE Response NOW.
   3959                                                strcpy( (char *)tempBffr2, "<STATUS>CMD_TKSB_BADPARAM</STATUS>");
   \   00004332   0x.... 0x....      LDR.W    R1,??DataTable4_33
   \   00004336   0xA80A             ADD      R0,SP,#+40
   \   00004338   0x.... 0x....      BL       strcpy
   3960                                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000433C   0xA80A             ADD      R0,SP,#+40
   \   0000433E   0x.... 0x....      BL       strlen
   \   00004342   0xA90A             ADD      R1,SP,#+40
   \   00004344   0x.... 0x....      BL       BGM111_Transmit
   3961                                              }
   3962                                              strcpy( (char *)tempBffr2, "TKSB SYNTAX ERROR: Bad Parameter.\r\n");
   \                     ??RoadBrd_ParseString_649: (+1)
   \   00004348   0x.... 0x....      LDR.W    R1,??DataTable4_34
   \   0000434C   0xA80A             ADD      R0,SP,#+40
   \   0000434E   0x.... 0x....      BL       strcpy
   \   00004352   0xE015             B.N      ??RoadBrd_ParseString_640
   3963                                            }
   3964                                            else
   3965                                            {
   3966                                              // Time to set new Boot Delay.
   3967                                              RoadBrd_Set_BootDelay( new_value );
   \                     ??RoadBrd_ParseString_648: (+1)
   \   00004354   0x982F             LDR      R0,[SP, #+188]
   \   00004356   0x.... 0x....      BL       RoadBrd_Set_BootDelay
   3968                                              // Is this a BLE Operation?
   3969                                              if ( BLE_Flag )
   \   0000435A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000435C   0x2D00             CMP      R5,#+0
   \   0000435E   0xD00A             BEQ.N    ??RoadBrd_ParseString_650
   3970                                              {
   3971                                                // Yes...Build and Send BLE Response NOW.
   3972                                                strcpy( (char *)tempBffr2, "<STATUS>ST_TKSB_ACK</STATUS>");
   \   00004360   0x.... 0x....      LDR.W    R1,??DataTable4_35
   \   00004364   0xA80A             ADD      R0,SP,#+40
   \   00004366   0x.... 0x....      BL       strcpy
   3973                                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000436A   0xA80A             ADD      R0,SP,#+40
   \   0000436C   0x.... 0x....      BL       strlen
   \   00004370   0xA90A             ADD      R1,SP,#+40
   \   00004372   0x.... 0x....      BL       BGM111_Transmit
   3974                                              }
   3975                                              // NOW, Build Data String..
   3976                                              sprintf( (char *)tempBffr2, "COMPLETE" );
   \                     ??RoadBrd_ParseString_650: (+1)
   \   00004376   0x.... 0x....      LDR.W    R1,??DataTable4_20
   \   0000437A   0xA80A             ADD      R0,SP,#+40
   \   0000437C   0x.... 0x....      BL       sprintf
   3977                                            } // EndElse ((new_value > 999) || (new_value < 0))
   3978                                          } // EndElse (flag == 0)
   3979                                        } // EndElse (tempBffr[4]!=':')
   3980                                        break;
   \                     ??RoadBrd_ParseString_640: (+1)
   \   00004380   0xE004             B.N      ??RoadBrd_ParseString_611
   3981                                      default:
   3982                                        strcpy( (char *)tempBffr2, "TKS ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_597: (+1)
   \   00004382   0x.... 0x....      LDR.W    R1,??DataTable4_36
   \   00004386   0xA80A             ADD      R0,SP,#+40
   \   00004388   0x.... 0x....      BL       strcpy
   3983                                        break;
   3984                                    } // EndSwitch ( tempBffr[3] )
   3985                                    break;
   \                     ??RoadBrd_ParseString_611: (+1)
   \   0000438C   0xE0CD             B.N      ??RoadBrd_ParseString_589
   \   0000438E   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_546:
   \   00004390   0x........         DC32     ?_246
   \   00004394   0x........         DC32     ?_247
   3986          //------------------
   3987                                  case 'R':
   3988                                    //Key Flash Variable Read Command
   3989                                    switch( tempBffr[3] )
   \                     ??RoadBrd_ParseString_590: (+1)
   \   00004398   0x78E0             LDRB     R0,[R4, #+3]
   \   0000439A   0x2842             CMP      R0,#+66
   \   0000439C   0xF000 0x8080      BEQ.W    ??RoadBrd_ParseString_651
   \   000043A0   0x2852             CMP      R0,#+82
   \   000043A2   0xD004             BEQ.N    ??RoadBrd_ParseString_652
   \   000043A4   0x2853             CMP      R0,#+83
   \   000043A6   0xD031             BEQ.N    ??RoadBrd_ParseString_653
   \   000043A8   0x2854             CMP      R0,#+84
   \   000043AA   0xD05D             BEQ.N    ??RoadBrd_ParseString_654
   \   000043AC   0xE092             B.N      ??RoadBrd_ParseString_655
   3990                                    {
   3991          //------------------
   3992                                      case 'R':
   3993                                        //Key Flash Variable Read Road Sound Sample Rate Command.
   3994                                        // Is this a BLE Operation?
   3995                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_652: (+1)
   \   000043AE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000043B0   0x2D00             CMP      R5,#+0
   \   000043B2   0xD016             BEQ.N    ??RoadBrd_ParseString_656
   3996                                        {
   3997                                          // Yes...Build and Send BLE Response NOW.
   3998                                          sprintf( (char *)tempBffr2, "<STATUS>ST_TKRR:%3.1f</STATUS>", ((float)RoadBrd_Get_RdSndTickCnt()/10));
   \   000043B4   0x.... 0x....      BL       RoadBrd_Get_RdSndTickCnt
   \   000043B8   0x.... 0x....      BL       __aeabi_ui2f
   \   000043BC   0x.... 0x....      LDR.W    R1,??DataTable4_37  ;; 0x41200000
   \   000043C0   0x.... 0x....      BL       __aeabi_fdiv
   \   000043C4   0x.... 0x....      BL       __aeabi_f2d
   \   000043C8   0x0002             MOVS     R2,R0
   \   000043CA   0x000B             MOVS     R3,R1
   \   000043CC   0x.... 0x....      LDR.W    R1,??DataTable4_38
   \   000043D0   0xA80A             ADD      R0,SP,#+40
   \   000043D2   0x.... 0x....      BL       sprintf
   3999                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000043D6   0xA80A             ADD      R0,SP,#+40
   \   000043D8   0x.... 0x....      BL       strlen
   \   000043DC   0xA90A             ADD      R1,SP,#+40
   \   000043DE   0x.... 0x....      BL       BGM111_Transmit
   4000                                        }
   4001                                        sprintf( (char *)tempBffr2, "RdSnd Sample Rate:  %3.1f Seconds.\r\n", ((float)RoadBrd_Get_RdSndTickCnt()/10));
   \                     ??RoadBrd_ParseString_656: (+1)
   \   000043E2   0x.... 0x....      BL       RoadBrd_Get_RdSndTickCnt
   \   000043E6   0x.... 0x....      BL       __aeabi_ui2f
   \   000043EA   0x.... 0x....      LDR.W    R1,??DataTable4_37  ;; 0x41200000
   \   000043EE   0x.... 0x....      BL       __aeabi_fdiv
   \   000043F2   0x.... 0x....      BL       __aeabi_f2d
   \   000043F6   0x0002             MOVS     R2,R0
   \   000043F8   0x000B             MOVS     R3,R1
   \   000043FA   0x.... 0x....      LDR.W    R1,??DataTable4_39
   \   000043FE   0xA80A             ADD      R0,SP,#+40
   \   00004400   0x.... 0x....      BL       sprintf
   4002                                        break;
   \   00004404   0xE079             B.N      ??RoadBrd_ParseString_657
   \   00004406   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_548:
   \   00004408   0x........         DC32     ?_248
   4003          //------------------
   4004                                      case 'S':
   4005                                        //Key Flash Variable Read Sensor Sample Rate Command.
   4006                                        // Is this a BLE Operation?
   4007                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_653: (+1)
   \   0000440C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000440E   0x2D00             CMP      R5,#+0
   \   00004410   0xD016             BEQ.N    ??RoadBrd_ParseString_658
   4008                                        {
   4009                                          // Yes...Build and Send BLE Response NOW.
   4010                                          sprintf( (char *)tempBffr2, "<STATUS>ST_TKRS:%3.1f</STATUS>", ((float)RoadBrd_Get_SnsrTickCnt()/10));
   \   00004412   0x.... 0x....      BL       RoadBrd_Get_SnsrTickCnt
   \   00004416   0x.... 0x....      BL       __aeabi_ui2f
   \   0000441A   0x.... 0x....      LDR.W    R1,??DataTable4_37  ;; 0x41200000
   \   0000441E   0x.... 0x....      BL       __aeabi_fdiv
   \   00004422   0x.... 0x....      BL       __aeabi_f2d
   \   00004426   0x0002             MOVS     R2,R0
   \   00004428   0x000B             MOVS     R3,R1
   \   0000442A   0x.... 0x....      LDR.W    R1,??DataTable4_40
   \   0000442E   0xA80A             ADD      R0,SP,#+40
   \   00004430   0x.... 0x....      BL       sprintf
   4011                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004434   0xA80A             ADD      R0,SP,#+40
   \   00004436   0x.... 0x....      BL       strlen
   \   0000443A   0xA90A             ADD      R1,SP,#+40
   \   0000443C   0x.... 0x....      BL       BGM111_Transmit
   4012                                        }
   4013                                        sprintf( (char *)tempBffr2, "Sensor Sample Rate: %3.1f Seconds.\r\n\r\n> ", ((float)RoadBrd_Get_SnsrTickCnt()/10));
   \                     ??RoadBrd_ParseString_658: (+1)
   \   00004440   0x.... 0x....      BL       RoadBrd_Get_SnsrTickCnt
   \   00004444   0x.... 0x....      BL       __aeabi_ui2f
   \   00004448   0x.... 0x....      LDR.W    R1,??DataTable4_37  ;; 0x41200000
   \   0000444C   0x.... 0x....      BL       __aeabi_fdiv
   \   00004450   0x.... 0x....      BL       __aeabi_f2d
   \   00004454   0x0002             MOVS     R2,R0
   \   00004456   0x000B             MOVS     R3,R1
   \   00004458   0x.... 0x....      LDR.W    R1,??DataTable4_41
   \   0000445C   0xA80A             ADD      R0,SP,#+40
   \   0000445E   0x.... 0x....      BL       sprintf
   4014                                        break;
   \   00004462   0xE04A             B.N      ??RoadBrd_ParseString_657
   \                     ??RoadBrd_ParseString_550:
   \   00004464   0x........         DC32     ?_249
   4015          //------------------
   4016                                      case 'T':
   4017                                        //Key Flash Variable Read TACK Limit(Multiple of Road Sound Throttles).
   4018                                        // Is this a BLE Operation?
   4019                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_654: (+1)
   \   00004468   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000446A   0x2D00             CMP      R5,#+0
   \   0000446C   0xD00D             BEQ.N    ??RoadBrd_ParseString_659
   4020                                        {
   4021                                          // Yes...Build and Send BLE Response NOW.
   4022                                          sprintf( (char *)tempBffr2, "<STATUS>ST_TKRT:%d</STATUS>", RoadBrd_Get_TackLimit());
   \   0000446E   0x.... 0x....      BL       RoadBrd_Get_TackLimit
   \   00004472   0x0002             MOVS     R2,R0
   \   00004474   0x.... 0x....      LDR.W    R1,??DataTable4_42
   \   00004478   0xA80A             ADD      R0,SP,#+40
   \   0000447A   0x.... 0x....      BL       sprintf
   4023                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000447E   0xA80A             ADD      R0,SP,#+40
   \   00004480   0x.... 0x....      BL       strlen
   \   00004484   0xA90A             ADD      R1,SP,#+40
   \   00004486   0x.... 0x....      BL       BGM111_Transmit
   4024                                        }
   4025                                        sprintf( (char *)tempBffr2, "TACK Limit: %d.\r\n\r\n> ", RoadBrd_Get_TackLimit());
   \                     ??RoadBrd_ParseString_659: (+1)
   \   0000448A   0x.... 0x....      BL       RoadBrd_Get_TackLimit
   \   0000448E   0x0002             MOVS     R2,R0
   \   00004490   0x.... 0x....      LDR.W    R1,??DataTable4_43
   \   00004494   0xA80A             ADD      R0,SP,#+40
   \   00004496   0x.... 0x....      BL       sprintf
   4026                                        break;
   \   0000449A   0xE02E             B.N      ??RoadBrd_ParseString_657
   \                     ??RoadBrd_ParseString_551:
   \   0000449C   0x........         DC32     ?_250
   4027          //------------------
   4028                                      case 'B':
   4029                                        //Key Flash Variable Read Boot Delay.(Seconds).
   4030                                        // Is this a BLE Operation?
   4031                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_651: (+1)
   \   000044A0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000044A2   0x2D00             CMP      R5,#+0
   \   000044A4   0xD00D             BEQ.N    ??RoadBrd_ParseString_660
   4032                                        {
   4033                                          // Yes...Build and Send BLE Response NOW.
   4034                                          sprintf( (char *)tempBffr2, "<STATUS>ST_TKRB:%d</STATUS>", RoadBrd_Get_BootDelay());
   \   000044A6   0x.... 0x....      BL       RoadBrd_Get_BootDelay
   \   000044AA   0x0002             MOVS     R2,R0
   \   000044AC   0x.... 0x....      LDR.W    R1,??DataTable4_44
   \   000044B0   0xA80A             ADD      R0,SP,#+40
   \   000044B2   0x.... 0x....      BL       sprintf
   4035                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000044B6   0xA80A             ADD      R0,SP,#+40
   \   000044B8   0x.... 0x....      BL       strlen
   \   000044BC   0xA90A             ADD      R1,SP,#+40
   \   000044BE   0x.... 0x....      BL       BGM111_Transmit
   4036                                        }
   4037                                        sprintf( (char *)tempBffr2, "Boot Delay: %d Seconds.\r\n\r\n> ", RoadBrd_Get_BootDelay());
   \                     ??RoadBrd_ParseString_660: (+1)
   \   000044C2   0x.... 0x....      BL       RoadBrd_Get_BootDelay
   \   000044C6   0x0002             MOVS     R2,R0
   \   000044C8   0x.... 0x....      LDR.W    R1,??DataTable4_45
   \   000044CC   0xA80A             ADD      R0,SP,#+40
   \   000044CE   0x.... 0x....      BL       sprintf
   4038                                        break;
   \   000044D2   0xE012             B.N      ??RoadBrd_ParseString_657
   4039                                      default:
   4040                                        // Is this a BLE Operation?
   4041                                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_655: (+1)
   \   000044D4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000044D6   0x2D00             CMP      R5,#+0
   \   000044D8   0xD00A             BEQ.N    ??RoadBrd_ParseString_661
   4042                                        {
   4043                                          // Yes...Build and Send BLE Response NOW.
   4044                                          strcpy( (char *)tempBffr2, "<STATUS>CMD_TKR_SYNTAX</STATUS>");
   \   000044DA   0x.... 0x....      LDR.W    R1,??DataTable4_46
   \   000044DE   0xA80A             ADD      R0,SP,#+40
   \   000044E0   0x.... 0x....      BL       strcpy
   4045                                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000044E4   0xA80A             ADD      R0,SP,#+40
   \   000044E6   0x.... 0x....      BL       strlen
   \   000044EA   0xA90A             ADD      R1,SP,#+40
   \   000044EC   0x.... 0x....      BL       BGM111_Transmit
   4046                                        }
   4047                                        strcpy( (char *)tempBffr2, "TKR ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_661: (+1)
   \   000044F0   0x.... 0x....      LDR.W    R1,??DataTable4_47
   \   000044F4   0xA80A             ADD      R0,SP,#+40
   \   000044F6   0x.... 0x....      BL       strcpy
   4048                                        break;
   4049                                    } // EndSwitch ( tempBffr[3] )
   4050                                    break;
   \                     ??RoadBrd_ParseString_657: (+1)
   \   000044FA   0xE016             B.N      ??RoadBrd_ParseString_589
   \                     ??RoadBrd_ParseString_553:
   \   000044FC   0x........         DC32     ?_251
   \   00004500   0x........         DC32     ?_252
   4051                                    // Is this a BLE Operation?
   4052                                  default:
   4053                                    if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_591: (+1)
   \   00004504   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004506   0x2D00             CMP      R5,#+0
   \   00004508   0xD00A             BEQ.N    ??RoadBrd_ParseString_662
   4054                                    {
   4055                                      // Yes...Build and Send BLE Response NOW.
   4056                                      strcpy( (char *)tempBffr2, "<STATUS>CMD_TK_SYNTAX</STATUS>");
   \   0000450A   0x.... 0x....      LDR.W    R1,??DataTable4_13
   \   0000450E   0xA80A             ADD      R0,SP,#+40
   \   00004510   0x.... 0x....      BL       strcpy
   4057                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004514   0xA80A             ADD      R0,SP,#+40
   \   00004516   0x.... 0x....      BL       strlen
   \   0000451A   0xA90A             ADD      R1,SP,#+40
   \   0000451C   0x.... 0x....      BL       BGM111_Transmit
   4058                                    }
   4059                                    strcpy( (char *)tempBffr2, "ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_662: (+1)
   \   00004520   0x.... 0x....      LDR.W    R1,??DataTable4_48
   \   00004524   0xA80A             ADD      R0,SP,#+40
   \   00004526   0x.... 0x....      BL       strcpy
   4060                                    break;
   4061                                } //EndSwitch ( tempBffr[2] )
   4062                              } //EndElse (Size < 3)
   4063                              break;
   \                     ??RoadBrd_ParseString_589: (+1)
   \   0000452A   0xE0ED             B.N      ??RoadBrd_ParseString_283
   4064          //++++++++++++++++++++++++++++++++++++++++++  Units Enable/Disable Commands.
   4065                            case 'U':
   4066                              // Key Flash Variable Commands.
   4067                              // Test Size to make sure we have enough Characters for this operation
   4068                              Status = HAL_OK;
   \                     ??RoadBrd_ParseString_292: (+1)
   \   0000452C   0x2000             MOVS     R0,#+0
   \   0000452E   0x0006             MOVS     R6,R0
   4069                              if (Size < 3)
   \   00004530   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00004534   0xF1B8 0x0F03      CMP      R8,#+3
   \   00004538   0xDA13             BGE.N    ??RoadBrd_ParseString_663
   4070                              {
   4071                                // Is this a BLE Operation?
   4072                                if ( BLE_Flag )
   \   0000453A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000453C   0x2D00             CMP      R5,#+0
   \   0000453E   0xD00A             BEQ.N    ??RoadBrd_ParseString_664
   4073                                {
   4074                                  // Yes...Build and Send BLE Response NOW.
   4075                                  strcpy( (char *)tempBffr2, "<STATUS>CMD_TU_SYNTAX</STATUS>");
   \   00004540   0x.... 0x....      LDR.W    R1,??DataTable4_49
   \   00004544   0xA80A             ADD      R0,SP,#+40
   \   00004546   0x.... 0x....      BL       strcpy
   4076                                  BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000454A   0xA80A             ADD      R0,SP,#+40
   \   0000454C   0x.... 0x....      BL       strlen
   \   00004550   0xA90A             ADD      R1,SP,#+40
   \   00004552   0x.... 0x....      BL       BGM111_Transmit
   4077                                }
   4078                                strcpy( (char *)tempBffr2, "TU SYNTAX ERROR: Not correct format.\r\n");
   \                     ??RoadBrd_ParseString_664: (+1)
   \   00004556   0x.... 0x....      LDR.W    R1,??DataTable4_50
   \   0000455A   0xA80A             ADD      R0,SP,#+40
   \   0000455C   0x.... 0x....      BL       strcpy
   \   00004560   0xE04B             B.N      ??RoadBrd_ParseString_665
   4079                              }
   4080                              else
   4081                              {
   4082                                switch( tempBffr[2] )
   \                     ??RoadBrd_ParseString_663: (+1)
   \   00004562   0x78A0             LDRB     R0,[R4, #+2]
   \   00004564   0x2844             CMP      R0,#+68
   \   00004566   0xD01B             BEQ.N    ??RoadBrd_ParseString_666
   \   00004568   0x2845             CMP      R0,#+69
   \   0000456A   0xD133             BNE.N    ??RoadBrd_ParseString_667
   4083                                {
   4084          //------------------
   4085                                  case 'E':
   4086                                    //Units Enable Command.
   4087                                    // Is this a BLE Operation?
   4088                                    if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_668: (+1)
   \   0000456C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000456E   0x2D00             CMP      R5,#+0
   \   00004570   0xD00A             BEQ.N    ??RoadBrd_ParseString_669
   4089                                    {
   4090                                      // Yes...Build and Send BLE Response NOW.
   4091                                      strcpy( (char *)tempBffr2, "<STATUS>ST_TUE_ACK</STATUS>");
   \   00004572   0x.... 0x....      LDR.W    R1,??DataTable4_51
   \   00004576   0xA80A             ADD      R0,SP,#+40
   \   00004578   0x.... 0x....      BL       strcpy
   4092                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000457C   0xA80A             ADD      R0,SP,#+40
   \   0000457E   0x.... 0x....      BL       strlen
   \   00004582   0xA90A             ADD      R1,SP,#+40
   \   00004584   0x.... 0x....      BL       BGM111_Transmit
   4093                                    }
   4094                                    sprintf( (char *)tempBffr2, "Units XML State CHANGED: ENABLED\r\n\r\n> ");
   \                     ??RoadBrd_ParseString_669: (+1)
   \   00004588   0x.... 0x....      LDR.W    R1,??DataTable4_52
   \   0000458C   0xA80A             ADD      R0,SP,#+40
   \   0000458E   0x.... 0x....      BL       sprintf
   4095                                    Status = RoadBrd_Set_UnitsFlag( true );
   \   00004592   0x2001             MOVS     R0,#+1
   \   00004594   0x.... 0x....      BL       RoadBrd_Set_UnitsFlag
   \   00004598   0x0006             MOVS     R6,R0
   4096                                    break;
   \   0000459A   0xE02E             B.N      ??RoadBrd_ParseString_665
   \                     ??RoadBrd_ParseString_555:
   \   0000459C   0x........         DC32     ?_253
   4097          //------------------
   4098                                  case 'D':
   4099                                    //Units Disable Command
   4100                                    // Is this a BLE Operation?
   4101                                    if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_666: (+1)
   \   000045A0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000045A2   0x2D00             CMP      R5,#+0
   \   000045A4   0xD00A             BEQ.N    ??RoadBrd_ParseString_670
   4102                                    {
   4103                                      // Yes...Build and Send BLE Response NOW.
   4104                                      strcpy( (char *)tempBffr2, "<STATUS>ST_TUD_ACK</STATUS>");
   \   000045A6   0x.... 0x....      LDR.W    R1,??DataTable4_53
   \   000045AA   0xA80A             ADD      R0,SP,#+40
   \   000045AC   0x.... 0x....      BL       strcpy
   4105                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000045B0   0xA80A             ADD      R0,SP,#+40
   \   000045B2   0x.... 0x....      BL       strlen
   \   000045B6   0xA90A             ADD      R1,SP,#+40
   \   000045B8   0x.... 0x....      BL       BGM111_Transmit
   4106                                    }
   4107                                    sprintf( (char *)tempBffr2, "Units XML State CHANGED: DISABLED\r\n\r\n> ");
   \                     ??RoadBrd_ParseString_670: (+1)
   \   000045BC   0x.... 0x....      LDR.W    R1,??DataTable4_54
   \   000045C0   0xA80A             ADD      R0,SP,#+40
   \   000045C2   0x.... 0x....      BL       sprintf
   4108                                    Status = RoadBrd_Set_UnitsFlag( false );
   \   000045C6   0x2000             MOVS     R0,#+0
   \   000045C8   0x.... 0x....      BL       RoadBrd_Set_UnitsFlag
   \   000045CC   0x0006             MOVS     R6,R0
   4109                                    break;
   \   000045CE   0xE014             B.N      ??RoadBrd_ParseString_665
   \                     ??RoadBrd_ParseString_556:
   \   000045D0   0x........         DC32     ?_254
   4110                                  default:
   4111                                    // Is this a BLE Operation?
   4112                                    if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_667: (+1)
   \   000045D4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000045D6   0x2D00             CMP      R5,#+0
   \   000045D8   0xD00A             BEQ.N    ??RoadBrd_ParseString_671
   4113                                    {
   4114                                      // Yes...Build and Send BLE Response NOW.
   4115                                      strcpy( (char *)tempBffr2, "<STATUS>CMD_TU_SYNTAX</STATUS>");
   \   000045DA   0x.... 0x....      LDR.W    R1,??DataTable4_49
   \   000045DE   0xA80A             ADD      R0,SP,#+40
   \   000045E0   0x.... 0x....      BL       strcpy
   4116                                      BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000045E4   0xA80A             ADD      R0,SP,#+40
   \   000045E6   0x.... 0x....      BL       strlen
   \   000045EA   0xA90A             ADD      R1,SP,#+40
   \   000045EC   0x.... 0x....      BL       BGM111_Transmit
   4117                                    }
   4118                                    strcpy( (char *)tempBffr2, "TU SYNTAX ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_671: (+1)
   \   000045F0   0x.... 0x....      LDR.W    R1,??DataTable4_55
   \   000045F4   0xA80A             ADD      R0,SP,#+40
   \   000045F6   0x.... 0x....      BL       strcpy
   4119                                    break;
   4120                                } //EndSwitch ( tempBffr[2] )
   4121                              } //EndElse (Size < 3)
   4122                              break;
   \                     ??RoadBrd_ParseString_665: (+1)
   \   000045FA   0xE085             B.N      ??RoadBrd_ParseString_283
   4123          //++++++++++++++++++++++++++++++++++++++++++  Special Monitor Mode to intercept traffic from UART and pass to BGM111
   4124                            case 'M':
   4125                              // Is this a BLE Operation?
   4126                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_290: (+1)
   \   000045FC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000045FE   0x2D00             CMP      R5,#+0
   \   00004600   0xD00A             BEQ.N    ??RoadBrd_ParseString_672
   4127                              {
   4128                                // Yes...Build and Send BLE Response NOW.
   4129                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00004602   0x.... 0x....      LDR.W    R1,??DataTable4_56
   \   00004606   0xA80A             ADD      R0,SP,#+40
   \   00004608   0x.... 0x....      BL       strcpy
   4130                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   0000460C   0xA80A             ADD      R0,SP,#+40
   \   0000460E   0x.... 0x....      BL       strlen
   \   00004612   0xA90A             ADD      R1,SP,#+40
   \   00004614   0x.... 0x....      BL       BGM111_Transmit
   4131                              }
   4132                              
   4133                              strcpy( (char *)tempBffr2, "BGM111 MONITOR MODE.\r\n\r\n");
   \                     ??RoadBrd_ParseString_672: (+1)
   \   00004618   0x.... 0x....      LDR.W    R1,??DataTable4_57
   \   0000461C   0xA80A             ADD      R0,SP,#+40
   \   0000461E   0x.... 0x....      BL       strcpy
   4134          #ifdef NUCLEO
   4135                              Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   4136          #else
   4137                              Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00004622   0xA90A             ADD      R1,SP,#+40
   \   00004624   0x2000             MOVS     R0,#+0
   \   00004626   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000462A   0x0006             MOVS     R6,R0
   4138          #endif
   4139                              if (Status != HAL_OK)
   \   0000462C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000462E   0x2E00             CMP      R6,#+0
   \   00004630   0xD004             BEQ.N    ??RoadBrd_ParseString_673
   4140                                return Status;
   \   00004632   0x0030             MOVS     R0,R6
   \   00004634   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00004636   0xE0F2             B.N      ??RoadBrd_ParseString_4
   \                     ??RoadBrd_ParseString_558:
   \   00004638   0x........         DC32     ?_255
   4141                              strcpy( (char *)tempBffr2, "Use <ESC> to exit mode.\r\n\r\n");
   \                     ??RoadBrd_ParseString_673: (+1)
   \   0000463C   0x.... 0x....      LDR.W    R1,??DataTable4_58
   \   00004640   0xA80A             ADD      R0,SP,#+40
   \   00004642   0x.... 0x....      BL       strcpy
   4142                              // Set Bypass Flag
   4143                              Bypass = true;
   \   00004646   0x2001             MOVS     R0,#+1
   \   00004648   0x.... 0x....      LDR.W    R1,??DataTable4_59
   \   0000464C   0x7008             STRB     R0,[R1, #+0]
   4144                              break;
   \   0000464E   0xE05B             B.N      ??RoadBrd_ParseString_283
   4145          //++++++++++++++++++++++++++++++++++++++++++  Reset Flash Frame Variables(Factory).
   4146                            case 'F':
   4147                              // Reset Flash Frame Variables.
   4148                              RoadBrd_WWDG_InitializeFrmFlash();
   \                     ??RoadBrd_ParseString_286: (+1)
   \   00004650   0x.... 0x....      BL       RoadBrd_WWDG_InitializeFrmFlash
   4149                              // Is this a BLE Operation?
   4150                              if ( BLE_Flag )
   \   00004654   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004656   0x2D00             CMP      R5,#+0
   \   00004658   0xD00A             BEQ.N    ??RoadBrd_ParseString_674
   4151                              {
   4152                                // Yes...Build and Send BLE Response NOW.
   4153                                sprintf( (char *)tempBffr2, "<STATUS>TF_ACK</STATUS>" );
   \   0000465A   0x.... 0x....      LDR.W    R1,??DataTable4_60
   \   0000465E   0xA80A             ADD      R0,SP,#+40
   \   00004660   0x.... 0x....      BL       sprintf
   4154                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004664   0xA80A             ADD      R0,SP,#+40
   \   00004666   0x.... 0x....      BL       strlen
   \   0000466A   0xA90A             ADD      R1,SP,#+40
   \   0000466C   0x.... 0x....      BL       BGM111_Transmit
   4155                              }
   4156                              
   4157                              sprintf( (char *)tempBffr2, "Flash Frame Variables Reset to Factory Values.\r\n" );
   \                     ??RoadBrd_ParseString_674: (+1)
   \   00004670   0x.... 0x....      LDR.W    R1,??DataTable4_61
   \   00004674   0xA80A             ADD      R0,SP,#+40
   \   00004676   0x.... 0x....      BL       sprintf
   4158                              break;
   \   0000467A   0xE045             B.N      ??RoadBrd_ParseString_283
   \                     ??RoadBrd_ParseString_559:
   \   0000467C   0x........         DC32     ?_256
   4159          //++++++++++++++++++++++++++++++++++++++++++  Lock Code to allow stable Program of BLE Module.
   4160                            case 'L':
   4161                              // Is this a BLE Operation?
   4162                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_289: (+1)
   \   00004680   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00004682   0x2D00             CMP      R5,#+0
   \   00004684   0xD00B             BEQ.N    ??RoadBrd_ParseString_675
   4163                              {
   4164                                // Yes...Build and Send BLE Response NOW.
   4165                                sprintf( (char *)tempBffr2, "<STATUS>TL_ERROR</STATUS>" );
   \   00004686   0x.... 0x....      LDR.W    R1,??DataTable4_62
   \   0000468A   0xA80A             ADD      R0,SP,#+40
   \   0000468C   0x.... 0x....      BL       sprintf
   4166                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004690   0xA80A             ADD      R0,SP,#+40
   \   00004692   0x.... 0x....      BL       strlen
   \   00004696   0xA90A             ADD      R1,SP,#+40
   \   00004698   0x.... 0x....      BL       BGM111_Transmit
   4167                              }
   4168                              else
   4169                              {
   4170                                sprintf( (char *)tempBffr2, "Code Locked for Programming!\r\n\r\n" );
   4171          #ifdef NUCLEO
   4172                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   4173          #else
   4174                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   4175          #endif
   4176                                if (Status != HAL_OK)
   4177                                  return Status;
   4178                                sprintf( (char *)tempBffr2, "   HARD RESET NEEDED TO EXIT MODE\r\n" );
   4179          #ifdef NUCLEO
   4180                                Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   4181          #else
   4182                                Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   4183          #endif
   4184                                if (Status != HAL_OK)
   4185                                  return Status;
   4186                                // Start Hard Loop
   4187                                for (;;)
   4188                                {
   4189                                }
   4190                              }
   4191                              break;
   \   0000469C   0xE034             B.N      ??RoadBrd_ParseString_283
   \                     ??RoadBrd_ParseString_675: (+1)
   \   0000469E   0x.... 0x....      LDR.W    R1,??DataTable4_63
   \   000046A2   0xA80A             ADD      R0,SP,#+40
   \   000046A4   0x.... 0x....      BL       sprintf
   \   000046A8   0xA90A             ADD      R1,SP,#+40
   \   000046AA   0x2000             MOVS     R0,#+0
   \   000046AC   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000046B0   0x0006             MOVS     R6,R0
   \   000046B2   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000046B4   0x2E00             CMP      R6,#+0
   \   000046B6   0xD002             BEQ.N    ??RoadBrd_ParseString_676
   \   000046B8   0x0030             MOVS     R0,R6
   \   000046BA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000046BC   0xE0AF             B.N      ??RoadBrd_ParseString_4
   \                     ??RoadBrd_ParseString_676: (+1)
   \   000046BE   0x....             LDR.N    R1,??DataTable4_64
   \   000046C0   0xA80A             ADD      R0,SP,#+40
   \   000046C2   0x.... 0x....      BL       sprintf
   \   000046C6   0xA90A             ADD      R1,SP,#+40
   \   000046C8   0x2000             MOVS     R0,#+0
   \   000046CA   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000046CE   0x0006             MOVS     R6,R0
   \   000046D0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000046D2   0x2E00             CMP      R6,#+0
   \   000046D4   0xD006             BEQ.N    ??RoadBrd_ParseString_677
   \   000046D6   0x0030             MOVS     R0,R6
   \   000046D8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000046DA   0xE0A0             B.N      ??RoadBrd_ParseString_4
   \                     ??RoadBrd_ParseString_561:
   \   000046DC   0x........         DC32     ?_257
   \   000046E0   0x........         DC32     ?_258
   \                     ??RoadBrd_ParseString_677: (+1)
   \   000046E4   0xE7FE             B.N      ??RoadBrd_ParseString_677
   4192          
   4193          //**************************************************************************************************
   4194                            default:
   4195                              // Is this a BLE Operation?
   4196                              if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_293: (+1)
   \   000046E6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000046E8   0x2D00             CMP      R5,#+0
   \   000046EA   0xD009             BEQ.N    ??RoadBrd_ParseString_678
   4197                              {
   4198                                // Yes...Build and Send BLE Response NOW.
   4199                                strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   000046EC   0x....             LDR.N    R1,??DataTable4_56
   \   000046EE   0xA80A             ADD      R0,SP,#+40
   \   000046F0   0x.... 0x....      BL       strcpy
   4200                                BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   000046F4   0xA80A             ADD      R0,SP,#+40
   \   000046F6   0x.... 0x....      BL       strlen
   \   000046FA   0xA90A             ADD      R1,SP,#+40
   \   000046FC   0x.... 0x....      BL       BGM111_Transmit
   4201                              }
   4202                              
   4203                              // ERROR if we get here.. 
   4204                              strcpy( (char *)tempBffr2, "ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_678: (+1)
   \   00004700   0x....             LDR.N    R1,??DataTable4_48
   \   00004702   0xA80A             ADD      R0,SP,#+40
   \   00004704   0x.... 0x....      BL       strcpy
   4205                              break;
   4206                           
   4207                          } //EndSwitch ( tempBffr[1] )
   4208                        } //EndElse (Size <= 1)
   4209                        break;
   \                     ??RoadBrd_ParseString_283: (+1)
   \   00004708   0xE010             B.N      ??RoadBrd_ParseString_27
   4210          #if 0
   4211          //**************************************************************************************************
   4212                      case 'S':
   4213                        // Sleep Mode. 
   4214                        switch( tempBffr[1] )
   4215                        {
   4216          //++++++++++++++++++++++++++++++++++++++++++  5V Power Supply Commands.
   4217                          case 'S':
   4218                            // Is this a BLE Operation?
   4219                            if ( BLE_Flag )
   4220                            {
   4221                              // Yes...Build and Send BLE Response NOW.
   4222                              strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   4223                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   4224                            }
   4225                            
   4226                            strcpy( (char *)tempBffr2, "Micro in Sleep Mode NOW.\r\n");
   4227          #ifdef NUCLEO
   4228                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   4229          #else
   4230                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   4231          #endif
   4232                            if (Status != HAL_OK)
   4233                              return Status;
   4234                            // Sleep Micro NOW!
   4235                            //sleep();
   4236                            break;
   4237                          case 'D':
   4238                            // Is this a BLE Operation?
   4239                            if ( BLE_Flag )
   4240                            {
   4241                              // Yes...Build and Send BLE Response NOW.
   4242                              strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   4243                              BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   4244                            }
   4245                            
   4246                            // Turn off 5V Power Supply.
   4247                            strcpy( (char *)tempBffr2, "Micro in Deep Sleep Mode NOW.\r\n");
   4248          #ifdef NUCLEO
   4249                            Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);                   
   4250          #else
   4251                            Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   4252          #endif
   4253                            if (Status != HAL_OK)
   4254                              return Status;
   4255                            // Sleep Micro NOW!
   4256                            //deepsleep();
   4257                            break;
   4258                        }
   4259                        break;
   4260          #endif
   4261          //++++++++++++++++++++++++++++++++++++++++++  Unknown Command.
   4262                      default:
   4263                        // Is this a BLE Operation?
   4264                        if ( BLE_Flag )
   \                     ??RoadBrd_ParseString_22: (+1)
   \   0000470A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000470C   0x2D00             CMP      R5,#+0
   \   0000470E   0xD009             BEQ.N    ??RoadBrd_ParseString_679
   4265                        {
   4266                          // Yes...Build and Send BLE Response NOW.
   4267                          strcpy( (char *)tempBffr2, "<STATUS>CMD_NOSUPPORT</STATUS>");
   \   00004710   0x....             LDR.N    R1,??DataTable4_56
   \   00004712   0xA80A             ADD      R0,SP,#+40
   \   00004714   0x.... 0x....      BL       strcpy
   4268                          BGM111_Transmit((uint32_t)(strlen((char *)tempBffr2)), (uint8_t *)tempBffr2);
   \   00004718   0xA80A             ADD      R0,SP,#+40
   \   0000471A   0x.... 0x....      BL       strlen
   \   0000471E   0xA90A             ADD      R1,SP,#+40
   \   00004720   0x.... 0x....      BL       BGM111_Transmit
   4269                        }
   4270                        
   4271                        // ERROR if we get here.. 
   4272                        strcpy( (char *)tempBffr2, "ERROR: Not a legal command.\r\n");
   \                     ??RoadBrd_ParseString_679: (+1)
   \   00004724   0x....             LDR.N    R1,??DataTable4_48
   \   00004726   0xA80A             ADD      R0,SP,#+40
   \   00004728   0x.... 0x....      BL       strcpy
   4273                        break;
   4274                      } // EndSwitch
   4275                      
   4276          
   4277                      // Test last I2C Status to determine next msg.
   4278                      switch( Status )
   \                     ??RoadBrd_ParseString_27: (+1)
   \   0000472C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000472E   0x2E00             CMP      R6,#+0
   \   00004730   0xD008             BEQ.N    ??RoadBrd_ParseString_680
   \   00004732   0x2E02             CMP      R6,#+2
   \   00004734   0xD03F             BEQ.N    ??RoadBrd_ParseString_681
   \   00004736   0xD306             BCC.N    ??RoadBrd_ParseString_682
   \   00004738   0x2E03             CMP      R6,#+3
   \   0000473A   0xD045             BEQ.N    ??RoadBrd_ParseString_683
   \   0000473C   0xE04B             B.N      ??RoadBrd_ParseString_684
   \   0000473E   0xBF00             Nop      
   \                     ??RoadBrd_ParseString_563:
   \   00004740   0x........         DC32     ?_259
   4279                      {
   4280                        case HAL_OK:
   4281                          break;
   \                     ??RoadBrd_ParseString_680: (+1)
   \   00004744   0xE04D             B.N      ??RoadBrd_ParseString_685
   4282                        case HAL_ERROR:
   4283                          // Determine what kind of error.
   4284                          Err_code = RoadBrd_I2C_GetError();
   \                     ??RoadBrd_ParseString_682: (+1)
   \   00004746   0x.... 0x....      BL       RoadBrd_I2C_GetError
   \   0000474A   0x903C             STR      R0,[SP, #+240]
   4285                          switch( Err_code )
   \   0000474C   0x983C             LDR      R0,[SP, #+240]
   \   0000474E   0x2801             CMP      R0,#+1
   \   00004750   0xD00A             BEQ.N    ??RoadBrd_ParseString_686
   \   00004752   0x2802             CMP      R0,#+2
   \   00004754   0xD00D             BEQ.N    ??RoadBrd_ParseString_687
   \   00004756   0x2804             CMP      R0,#+4
   \   00004758   0xD010             BEQ.N    ??RoadBrd_ParseString_688
   \   0000475A   0x2808             CMP      R0,#+8
   \   0000475C   0xD013             BEQ.N    ??RoadBrd_ParseString_689
   \   0000475E   0x2810             CMP      R0,#+16
   \   00004760   0xD018             BEQ.N    ??RoadBrd_ParseString_690
   \   00004762   0x2820             CMP      R0,#+32
   \   00004764   0xD01B             BEQ.N    ??RoadBrd_ParseString_691
   \   00004766   0xE01F             B.N      ??RoadBrd_ParseString_692
   4286                          {
   4287                            case HAL_I2C_ERROR_BERR:
   4288                              strcpy( (char *)tempBffr2, "I2C ERROR: BERR: Bus Error reported.\r\n");
   \                     ??RoadBrd_ParseString_686: (+1)
   \   00004768   0x....             LDR.N    R1,??DataTable4_65
   \   0000476A   0xA80A             ADD      R0,SP,#+40
   \   0000476C   0x.... 0x....      BL       strcpy
   4289                              break;
   \   00004770   0xE01E             B.N      ??RoadBrd_ParseString_693
   4290                            case HAL_I2C_ERROR_ARLO:
   4291                              strcpy( (char *)tempBffr2, "I2C ERROR: ARLO: Arbitration lost reported.\r\n");
   \                     ??RoadBrd_ParseString_687: (+1)
   \   00004772   0x....             LDR.N    R1,??DataTable4_66
   \   00004774   0xA80A             ADD      R0,SP,#+40
   \   00004776   0x.... 0x....      BL       strcpy
   4292                              break;
   \   0000477A   0xE019             B.N      ??RoadBrd_ParseString_693
   4293                            case HAL_I2C_ERROR_AF:
   4294                              strcpy( (char *)tempBffr2, "I2C ERROR: AF: Acknowledge failure reported.\r\n");
   \                     ??RoadBrd_ParseString_688: (+1)
   \   0000477C   0x....             LDR.N    R1,??DataTable4_67
   \   0000477E   0xA80A             ADD      R0,SP,#+40
   \   00004780   0x.... 0x....      BL       strcpy
   4295                              break;
   \   00004784   0xE014             B.N      ??RoadBrd_ParseString_693
   4296                            case HAL_I2C_ERROR_OVR:
   4297                              strcpy( (char *)tempBffr2, "I2C ERROR: OVR: Overrun/Underrun reported.\r\n");
   \                     ??RoadBrd_ParseString_689: (+1)
   \   00004786   0x....             LDR.N    R1,??DataTable4_68
   \   00004788   0xA80A             ADD      R0,SP,#+40
   \   0000478A   0x.... 0x....      BL       strcpy
   4298                              break;
   \   0000478E   0xE00F             B.N      ??RoadBrd_ParseString_693
   \                     ??RoadBrd_ParseString_564:
   \   00004790   0x........         DC32     ?_260
   4299                            case HAL_I2C_ERROR_DMA:
   4300                              strcpy( (char *)tempBffr2, "I2C ERROR: DMA: DMA Error reported.\r\n");
   \                     ??RoadBrd_ParseString_690: (+1)
   \   00004794   0x....             LDR.N    R1,??DataTable4_69
   \   00004796   0xA80A             ADD      R0,SP,#+40
   \   00004798   0x.... 0x....      BL       strcpy
   4301                              break;
   \   0000479C   0xE008             B.N      ??RoadBrd_ParseString_693
   4302                            case HAL_I2C_ERROR_TIMEOUT:
   4303                              strcpy( (char *)tempBffr2, "I2C ERROR: TIMEOUT: Timeout Error reported.\r\n");
   \                     ??RoadBrd_ParseString_691: (+1)
   \   0000479E   0x....             LDR.N    R1,??DataTable4_70
   \   000047A0   0xA80A             ADD      R0,SP,#+40
   \   000047A2   0x.... 0x....      BL       strcpy
   4304                              break;
   \   000047A6   0xE003             B.N      ??RoadBrd_ParseString_693
   4305                            default:
   4306                              strcpy( (char *)tempBffr2, "I2C ERROR: Unknown Error reported.\r\n");
   \                     ??RoadBrd_ParseString_692: (+1)
   \   000047A8   0x....             LDR.N    R1,??DataTable4_71
   \   000047AA   0xA80A             ADD      R0,SP,#+40
   \   000047AC   0x.... 0x....      BL       strcpy
   4307                              break;
   4308                           
   4309                          }
   4310                          // Re-Initialize I2C....It has been corrupted.
   4311                          MX_I2C1_Reset();
   \                     ??RoadBrd_ParseString_693: (+1)
   \   000047B0   0x.... 0x....      BL       MX_I2C1_Reset
   4312                          break;
   \   000047B4   0xE015             B.N      ??RoadBrd_ParseString_685
   4313                        case HAL_BUSY:
   4314                          strcpy( (char *)tempBffr2, "I2C BUSY: I2C reported BUSY error.\r\n");
   \                     ??RoadBrd_ParseString_681: (+1)
   \   000047B6   0x....             LDR.N    R1,??DataTable4_72
   \   000047B8   0xA80A             ADD      R0,SP,#+40
   \   000047BA   0x.... 0x....      BL       strcpy
   4315                          // Re-Initialize I2C....It has been corrupted.
   4316                          MX_I2C1_Reset();
   \   000047BE   0x.... 0x....      BL       MX_I2C1_Reset
   4317                          break;
   \   000047C2   0xE00E             B.N      ??RoadBrd_ParseString_685
   \                     ??RoadBrd_ParseString_566:
   \   000047C4   0x........         DC32     ?_261
   4318                        case HAL_TIMEOUT:
   4319                          strcpy( (char *)tempBffr2, "I2C TIMEOUT: I2C reported TIMEOUT.\r\n");
   \                     ??RoadBrd_ParseString_683: (+1)
   \   000047C8   0x....             LDR.N    R1,??DataTable4_73
   \   000047CA   0xA80A             ADD      R0,SP,#+40
   \   000047CC   0x.... 0x....      BL       strcpy
   4320                          // Re-Initialize I2C....It has been corrupted.
   4321                          MX_I2C1_Reset();
   \   000047D0   0x.... 0x....      BL       MX_I2C1_Reset
   4322                          break;
   \   000047D4   0xE005             B.N      ??RoadBrd_ParseString_685
   4323                        default:  
   4324                          strcpy( (char *)tempBffr2, "I2C ERROR: I2C reported unnown error.\r\n");
   \                     ??RoadBrd_ParseString_684: (+1)
   \   000047D6   0x....             LDR.N    R1,??DataTable4_74
   \   000047D8   0xA80A             ADD      R0,SP,#+40
   \   000047DA   0x.... 0x....      BL       strcpy
   4325                          // Re-Initialize I2C....It has been corrupted.
   4326                          MX_I2C1_Reset();
   \   000047DE   0x.... 0x....      BL       MX_I2C1_Reset
   4327                          break;
   4328                      }
   4329                      // Send string to UART..
   4330          #ifdef NUCLEO
   4331                      Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);
   4332          #else
   4333                      Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \                     ??RoadBrd_ParseString_685: (+1)
   \   000047E2   0xA90A             ADD      R1,SP,#+40
   \   000047E4   0x2000             MOVS     R0,#+0
   \   000047E6   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   000047EA   0x0006             MOVS     R6,R0
   4334          #endif
   4335                     if (Status != HAL_OK)
   \   000047EC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000047EE   0x2E00             CMP      R6,#+0
   \   000047F0   0xD004             BEQ.N    ??RoadBrd_ParseString_694
   4336                        return Status;
   \   000047F2   0x0030             MOVS     R0,R6
   \   000047F4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000047F6   0xE012             B.N      ??RoadBrd_ParseString_4
   \                     ??RoadBrd_ParseString_567:
   \   000047F8   0x........         DC32     ?_262
   4337                      // Send Prompt to UART..
   4338                      strcpy( (char *)tempBffr2, "\r\n\r\n> ");
   \                     ??RoadBrd_ParseString_694: (+1)
   \   000047FC   0x....             LDR.N    R1,??DataTable4_75
   \   000047FE   0xA80A             ADD      R0,SP,#+40
   \   00004800   0x.... 0x....      BL       strcpy
   4339          #ifdef NUCLEO
   4340                      Status = RoadBrd_UART_Transmit(NUCLEO_USART, (uint8_t *)tempBffr2);
   4341          #else
   4342                      Status = RoadBrd_UART_Transmit(MONITOR_UART, (uint8_t *)tempBffr2);                   
   \   00004804   0xA90A             ADD      R1,SP,#+40
   \   00004806   0x2000             MOVS     R0,#+0
   \   00004808   0x.... 0x....      BL       RoadBrd_UART_Transmit
   \   0000480C   0x0006             MOVS     R6,R0
   4343          #endif
   4344                      if (Status != HAL_OK)
   \   0000480E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00004810   0x2E00             CMP      R6,#+0
   \   00004812   0xD002             BEQ.N    ??RoadBrd_ParseString_3
   4345                        return Status;
   \   00004814   0x0030             MOVS     R0,R6
   \   00004816   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00004818   0xE001             B.N      ??RoadBrd_ParseString_4
   4346              } // EndElse ( Bypass )
   4347            return Status;
   \                     ??RoadBrd_ParseString_3: (+1)
   \   0000481A   0x0030             MOVS     R0,R6
   \   0000481C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??RoadBrd_ParseString_4: (+1)
   \   0000481E   0xF50D 0x6D80      ADD      SP,SP,#+1024
   \   00004822   0xB017             ADD      SP,SP,#+92
   \   00004824   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   4348          }
   4349          
   4350          /**
   4351            * @brief  This function tests the passed string to make sure it is Hex format.
   4352            * @param  char *ptr: Ptr to string to be tested. NULL terminated
   4353            * @retval int: 1: String is HEX.
   4354            *              0:   String is not HEX.
   4355            */

   \                                 In section .text, align 2, keep-with-next
   4356          int isHexNum(char *ptr)
   4357          {
   \                     isHexNum: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   4358            int Size, x, test1;
   4359            
   4360            Size = strlen(ptr);
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       strlen
   \   0000000A   0x0005             MOVS     R5,R0
   4361            test1 = 0;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x0007             MOVS     R7,R0
   4362            for (x=0; x<Size; x++)
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x0006             MOVS     R6,R0
   \                     ??isHexNum_0: (+1)
   \   00000014   0x42AE             CMP      R6,R5
   \   00000016   0xDA16             BGE.N    ??isHexNum_1
   4363            {
   4364              if (((ptr[x] <= '9') && (ptr[x] >= '0')) ||
   4365                  ((ptr[x] <= 'F') && (ptr[x] >= 'A')))
   \   00000018   0x5DA0             LDRB     R0,[R4, R6]
   \   0000001A   0x283A             CMP      R0,#+58
   \   0000001C   0xDA02             BGE.N    ??isHexNum_2
   \   0000001E   0x5DA0             LDRB     R0,[R4, R6]
   \   00000020   0x2830             CMP      R0,#+48
   \   00000022   0xDA05             BGE.N    ??isHexNum_3
   \                     ??isHexNum_2: (+1)
   \   00000024   0x5DA0             LDRB     R0,[R4, R6]
   \   00000026   0x2847             CMP      R0,#+71
   \   00000028   0xDA05             BGE.N    ??isHexNum_4
   \   0000002A   0x5DA0             LDRB     R0,[R4, R6]
   \   0000002C   0x2841             CMP      R0,#+65
   \   0000002E   0xDB02             BLT.N    ??isHexNum_4
   4366                test1 = 0;
   \                     ??isHexNum_3: (+1)
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x0007             MOVS     R7,R0
   \   00000034   0xE001             B.N      ??isHexNum_5
   4367              else
   4368                test1 = 1;
   \                     ??isHexNum_4: (+1)
   \   00000036   0x2001             MOVS     R0,#+1
   \   00000038   0x0007             MOVS     R7,R0
   4369              if (test1 == 1)
   \                     ??isHexNum_5: (+1)
   \   0000003A   0x2F01             CMP      R7,#+1
   \   0000003C   0xD101             BNE.N    ??isHexNum_6
   4370                return 0;
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0xE002             B.N      ??isHexNum_7
   4371            }
   \                     ??isHexNum_6: (+1)
   \   00000042   0x1C76             ADDS     R6,R6,#+1
   \   00000044   0xE7E6             B.N      ??isHexNum_0
   4372            return 1;
   \                     ??isHexNum_1: (+1)
   \   00000046   0x2001             MOVS     R0,#+1
   \                     ??isHexNum_7: (+1)
   \   00000048   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
   4373          }
   4374          
   4375          /**
   4376            * @brief  This function converts the passed Hex String to an Integer value.
   4377            * @param  char *ptr: Ptr to string to be converted. NULL terminated
   4378            * @retval int: -1: Error in String
   4379            *              Value converted returned.
   4380            */

   \                                 In section .text, align 2, keep-with-next
   4381          int hatoi( char *ptr )
   4382          {
   \                     hatoi: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   4383            int Size, x;
   4384            int Value = 0;
   \   00000006   0x2700             MOVS     R7,#+0
   4385            int FinalValue = 0;
   \   00000008   0xF05F 0x0800      MOVS     R8,#+0
   4386            
   4387            Size = strlen(ptr);
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       strlen
   \   00000012   0x0005             MOVS     R5,R0
   4388            for (x=0; x<Size; x++)
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x0006             MOVS     R6,R0
   \                     ??hatoi_0: (+1)
   \   00000018   0x42AE             CMP      R6,R5
   \   0000001A   0xDA1A             BGE.N    ??hatoi_1
   4389            {
   4390              if ((ptr[x] <= '9') && (ptr[x] >= '0'))
   \   0000001C   0x5DA0             LDRB     R0,[R4, R6]
   \   0000001E   0x283A             CMP      R0,#+58
   \   00000020   0xDA06             BGE.N    ??hatoi_2
   \   00000022   0x5DA0             LDRB     R0,[R4, R6]
   \   00000024   0x2830             CMP      R0,#+48
   \   00000026   0xDB03             BLT.N    ??hatoi_2
   4391                Value = ptr[x] - '0';
   \   00000028   0x5DA0             LDRB     R0,[R4, R6]
   \   0000002A   0x3830             SUBS     R0,R0,#+48
   \   0000002C   0x0007             MOVS     R7,R0
   \   0000002E   0xE00C             B.N      ??hatoi_3
   4392              else if((ptr[x] <= 'F') && (ptr[x] >= 'A'))
   \                     ??hatoi_2: (+1)
   \   00000030   0x5DA0             LDRB     R0,[R4, R6]
   \   00000032   0x2847             CMP      R0,#+71
   \   00000034   0xDA06             BGE.N    ??hatoi_4
   \   00000036   0x5DA0             LDRB     R0,[R4, R6]
   \   00000038   0x2841             CMP      R0,#+65
   \   0000003A   0xDB03             BLT.N    ??hatoi_4
   4393                Value = ptr[x] - 'A' + 10;
   \   0000003C   0x5DA0             LDRB     R0,[R4, R6]
   \   0000003E   0x3837             SUBS     R0,R0,#+55
   \   00000040   0x0007             MOVS     R7,R0
   \   00000042   0xE002             B.N      ??hatoi_3
   4394              else
   4395                return -1;
   \                     ??hatoi_4: (+1)
   \   00000044   0xF05F 0x30FF      MOVS     R0,#-1
   \   00000048   0xE004             B.N      ??hatoi_5
   4396              FinalValue = FinalValue*16 + Value;
   \                     ??hatoi_3: (+1)
   \   0000004A   0xEB17 0x1808      ADDS     R8,R7,R8, LSL #+4
   4397            }
   \   0000004E   0x1C76             ADDS     R6,R6,#+1
   \   00000050   0xE7E2             B.N      ??hatoi_0
   4398            return FinalValue;
   \                     ??hatoi_1: (+1)
   \   00000052   0x4640             MOV      R0,R8
   \                     ??hatoi_5: (+1)
   \   00000054   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   4399          }
   4400          
   4401          

   \                                 In section .text, align 2, keep-with-next
   4402          bool Tst_Bypass( void)
   4403          {
   4404            return Bypass;
   \                     Tst_Bypass: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable4_59
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return
   4405          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     ParseString

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x........         DC32     ?_263

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     ?_264

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x........         DC32     ?_265

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x........         DC32     ?_266

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x........         DC32     ?_267

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x........         DC32     ?_268

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0x........         DC32     ?_269

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   0x........         DC32     ?_270

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \   00000000   0x........         DC32     ?_20

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     ?_271

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x........         DC32     ?_272

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x........         DC32     ?_273

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x........         DC32     ?_274

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x........         DC32     ?_275

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x........         DC32     ?_276

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   0x........         DC32     ?_277

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \   00000000   0x........         DC32     ?_278

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \   00000000   0x........         DC32     ?_279

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_9:
   \   00000000   0x........         DC32     ?_280

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_10:
   \   00000000   0x........         DC32     ?_281

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_11:
   \   00000000   0x........         DC32     ?_282

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_12:
   \   00000000   0x........         DC32     ?_283

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_13:
   \   00000000   0x........         DC32     ?_284

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_14:
   \   00000000   0x........         DC32     ?_285

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_15:
   \   00000000   0x........         DC32     ?_286

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_16:
   \   00000000   0x........         DC32     ?_287

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_17:
   \   00000000   0x........         DC32     ?_288

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_18:
   \   00000000   0x........         DC32     ?_289

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_19:
   \   00000000   0x........         DC32     ?_290

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_20:
   \   00000000   0x........         DC32     ?_117

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_21:
   \   00000000   0x........         DC32     ?_291

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_22:
   \   00000000   0x........         DC32     ?_292

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_23:
   \   00000000   0x........         DC32     ?_293

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_24:
   \   00000000   0x........         DC32     ?_294

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_25:
   \   00000000   0x........         DC32     ?_295

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_26:
   \   00000000   0x........         DC32     ?_296

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_27:
   \   00000000   0x........         DC32     ?_297

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_28:
   \   00000000   0x........         DC32     ?_298

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_29:
   \   00000000   0x........         DC32     ?_299

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_30:
   \   00000000   0x........         DC32     ?_300

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_31:
   \   00000000   0x........         DC32     ?_301

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_32:
   \   00000000   0x........         DC32     ?_302

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_33:
   \   00000000   0x........         DC32     ?_303

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_34:
   \   00000000   0x........         DC32     ?_304

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_35:
   \   00000000   0x........         DC32     ?_305

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_36:
   \   00000000   0x........         DC32     ?_306

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_37:
   \   00000000   0x41200000         DC32     0x41200000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_38:
   \   00000000   0x........         DC32     ?_307

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_39:
   \   00000000   0x........         DC32     ?_308

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_40:
   \   00000000   0x........         DC32     ?_309

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_41:
   \   00000000   0x........         DC32     ?_310

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_42:
   \   00000000   0x........         DC32     ?_311

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_43:
   \   00000000   0x........         DC32     ?_312

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_44:
   \   00000000   0x........         DC32     ?_313

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_45:
   \   00000000   0x........         DC32     ?_314

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_46:
   \   00000000   0x........         DC32     ?_315

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_47:
   \   00000000   0x........         DC32     ?_316

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_48:
   \   00000000   0x........         DC32     ?_40

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_49:
   \   00000000   0x........         DC32     ?_317

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_50:
   \   00000000   0x........         DC32     ?_318

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_51:
   \   00000000   0x........         DC32     ?_319

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_52:
   \   00000000   0x........         DC32     ?_320

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_53:
   \   00000000   0x........         DC32     ?_321

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_54:
   \   00000000   0x........         DC32     ?_322

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_55:
   \   00000000   0x........         DC32     ?_323

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_56:
   \   00000000   0x........         DC32     ?_24

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_57:
   \   00000000   0x........         DC32     ?_324

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_58:
   \   00000000   0x........         DC32     ?_325

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_59:
   \   00000000   0x........         DC32     Bypass

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_60:
   \   00000000   0x........         DC32     ?_326

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_61:
   \   00000000   0x........         DC32     ?_327

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_62:
   \   00000000   0x........         DC32     ?_328

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_63:
   \   00000000   0x........         DC32     ?_329

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_64:
   \   00000000   0x........         DC32     ?_330

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_65:
   \   00000000   0x........         DC32     ?_331

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_66:
   \   00000000   0x........         DC32     ?_332

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_67:
   \   00000000   0x........         DC32     ?_333

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_68:
   \   00000000   0x........         DC32     ?_334

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_69:
   \   00000000   0x........         DC32     ?_335

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_70:
   \   00000000   0x........         DC32     ?_336

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_71:
   \   00000000   0x........         DC32     ?_337

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_72:
   \   00000000   0x........         DC32     ?_338

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_73:
   \   00000000   0x........         DC32     ?_339

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_74:
   \   00000000   0x........         DC32     ?_340

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_75:
   \   00000000   0x........         DC32     ?_341

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x0D 0x0A          DC8 0DH, 0AH, 0DH, 0AH, 20H, 54H, 2EH, 2EH
   \              0x0D 0x0A    
   \              0x20 0x54    
   \              0x2E 0x2E    
   \   00000008   0x2E 0x2E          DC8 2EH, 2EH, 2EH, 2EH, 2EH, 2EH, 54H, 45H
   \              0x2E 0x2E    
   \              0x2E 0x2E    
   \              0x54 0x45    
   \   00000010   0x52 0x4D          DC8 52H, 4DH, 49H, 4EH, 41H, 54H, 49H, 4EH
   \              0x49 0x4E    
   \              0x41 0x54    
   \              0x49 0x4E    
   \   00000018   0x47 0x20          DC8 47H, 20H, 4DH, 4FH, 4EH, 49H, 54H, 4FH
   \              0x4D 0x4F    
   \              0x4E 0x49    
   \              0x54 0x4F    
   \   00000020   0x52 0x20          DC8 52H, 20H, 4DH, 4FH, 44H, 45H, 2EH, 2EH
   \              0x4D 0x4F    
   \              0x44 0x45    
   \              0x2E 0x2E    
   \   00000028   0x2E 0x2E          DC8 2EH, 2EH, 2EH, 2EH, 2EH, 2EH, 2EH, 0DH
   \              0x2E 0x2E    
   \              0x2E 0x2E    
   \              0x2E 0x0D    
   \   00000030   0x0A 0x0D          DC8 0AH, 0DH, 0AH, 3EH, 20H, 0
   \              0x0A 0x3E    
   \              0x20 0x00    
   \   00000036   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_RDSNDBFFR_FILL</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x52 0x44    
   \              0x53 0x4E    
   \              0x44 0x42    
   \              0x46 0x46    
   \              0x52 0x5F    
   \              0x46 0x49    
   \              0x4C 0x4C    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x52 0x6F          DC8 52H, 6FH, 61H, 64H, 20H, 53H, 6FH, 75H
   \              0x61 0x64    
   \              0x20 0x53    
   \              0x6F 0x75    
   \   00000008   0x6E 0x64          DC8 6EH, 64H, 3AH, 20H, 52H, 6FH, 61H, 64H
   \              0x3A 0x20    
   \              0x52 0x6F    
   \              0x61 0x64    
   \   00000010   0x20 0x53          DC8 20H, 53H, 6FH, 75H, 6EH, 64H, 20H, 6CH
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x20 0x6C    
   \   00000018   0x6F 0x61          DC8 6FH, 61H, 64H, 65H, 64H, 2CH, 20H, 70H
   \              0x64 0x65    
   \              0x64 0x2C    
   \              0x20 0x70    
   \   00000020   0x72 0x6F          DC8 72H, 6FH, 63H, 65H, 73H, 73H, 65H, 64H
   \              0x63 0x65    
   \              0x73 0x73    
   \              0x65 0x64    
   \   00000028   0x2C 0x20          DC8 2CH, 20H, 61H, 6EH, 64H, 20H, 73H, 65H
   \              0x61 0x6E    
   \              0x64 0x20    
   \              0x73 0x65    
   \   00000030   0x6E 0x74          DC8 6EH, 74H, 20H, 74H, 6FH, 20H, 46H, 46H
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x46 0x46    
   \   00000038   0x54 0x20          DC8 54H, 20H, 42H, 69H, 6EH, 73H, 2EH, 0DH
   \              0x42 0x69    
   \              0x6E 0x73    
   \              0x2E 0x0D    
   \   00000040   0x0A 0x00          DC8 0AH, 0
   \   00000042   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x52 0x6F          DC8 "Road Sound: FFT Measurements 0-15.\015\012"
   \              0x61 0x64    
   \              0x20 0x53    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x3A 0x20    
   \              0x46 0x46    
   \              0x54 0x20    
   \              0x4D 0x65    
   \              0x61 0x73    
   \              0x75 0x72    
   \              0x65 0x6D    
   \              0x65 0x6E    
   \              0x74 0x73    
   \              0x20 0x30    
   \              0x2D 0x31    
   \              0x35 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_4:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_FFT0-15:%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x46    
   \              0x46 0x54    
   \              0x30 0x2D    
   \              0x31 0x35    
   \              0x3A 0x25    
   \              0x73 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_5:
   \   00000000   0x20 0x20          DC8 "     FFT Measurements 0-15: "
   \              0x20 0x20    
   \              0x20 0x46    
   \              0x46 0x54    
   \              0x20 0x4D    
   \              0x65 0x61    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x6D 0x65    
   \              0x6E 0x74    
   \              0x73 0x20    
   \              0x30 0x2D    
   \              0x31 0x35    
   \              0x3A 0x20    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \   00000000   0x0D 0x0A          DC8 "\015\012"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_7:
   \   00000000   0x52 0x6F          DC8 "Road Sound: FFT Measurements 16-31.\015\012"
   \              0x61 0x64    
   \              0x20 0x53    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x3A 0x20    
   \              0x46 0x46    
   \              0x54 0x20    
   \              0x4D 0x65    
   \              0x61 0x73    
   \              0x75 0x72    
   \              0x65 0x6D    
   \              0x65 0x6E    
   \              0x74 0x73    
   \              0x20 0x31    
   \              0x36 0x2D    
   \              0x33 0x31    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_8:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_FFT16-31:%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x46    
   \              0x46 0x54    
   \              0x31 0x36    
   \              0x2D 0x33    
   \              0x31 0x3A    
   \              0x25 0x73    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_9:
   \   00000000   0x20 0x20          DC8 "     FFT Measurements 16-31: "
   \              0x20 0x20    
   \              0x20 0x46    
   \              0x46 0x54    
   \              0x20 0x4D    
   \              0x65 0x61    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x6D 0x65    
   \              0x6E 0x74    
   \              0x73 0x20    
   \              0x31 0x36    
   \              0x2D 0x33    
   \              0x31 0x3A    
   \              0x20 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_10:
   \   00000000   0x52 0x6F          DC8 "Road Sound: FFT Measurements 32-47.\015\012"
   \              0x61 0x64    
   \              0x20 0x53    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x3A 0x20    
   \              0x46 0x46    
   \              0x54 0x20    
   \              0x4D 0x65    
   \              0x61 0x73    
   \              0x75 0x72    
   \              0x65 0x6D    
   \              0x65 0x6E    
   \              0x74 0x73    
   \              0x20 0x33    
   \              0x32 0x2D    
   \              0x34 0x37    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_11:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_FFT32-47:%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x46    
   \              0x46 0x54    
   \              0x33 0x32    
   \              0x2D 0x34    
   \              0x37 0x3A    
   \              0x25 0x73    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_12:
   \   00000000   0x20 0x20          DC8 "     FFT Measurements 32-47: "
   \              0x20 0x20    
   \              0x20 0x46    
   \              0x46 0x54    
   \              0x20 0x4D    
   \              0x65 0x61    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x6D 0x65    
   \              0x6E 0x74    
   \              0x73 0x20    
   \              0x33 0x32    
   \              0x2D 0x34    
   \              0x37 0x3A    
   \              0x20 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_13:
   \   00000000   0x52 0x6F          DC8 "Road Sound: FFT Measurements 48-63.\015\012"
   \              0x61 0x64    
   \              0x20 0x53    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x3A 0x20    
   \              0x46 0x46    
   \              0x54 0x20    
   \              0x4D 0x65    
   \              0x61 0x73    
   \              0x75 0x72    
   \              0x65 0x6D    
   \              0x65 0x6E    
   \              0x74 0x73    
   \              0x20 0x34    
   \              0x38 0x2D    
   \              0x36 0x33    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_14:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_FFT48-63:%s</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x46    
   \              0x46 0x54    
   \              0x34 0x38    
   \              0x2D 0x36    
   \              0x33 0x3A    
   \              0x25 0x73    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_15:
   \   00000000   0x20 0x20          DC8 "     FFT Measurements 48-63: "
   \              0x20 0x20    
   \              0x20 0x46    
   \              0x46 0x54    
   \              0x20 0x4D    
   \              0x65 0x61    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x6D 0x65    
   \              0x6E 0x74    
   \              0x73 0x20    
   \              0x34 0x38    
   \              0x2D 0x36    
   \              0x33 0x3A    
   \              0x20 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_16:
   \   00000000   0x52 0x6F          DC8 "Road Sound: Results of save Buffer.\015\012"
   \              0x61 0x64    
   \              0x20 0x53    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x3A 0x20    
   \              0x52 0x65    
   \              0x73 0x75    
   \              0x6C 0x74    
   \              0x73 0x20    
   \              0x6F 0x66    
   \              0x20 0x73    
   \              0x61 0x76    
   \              0x65 0x20    
   \              0x42 0x75    
   \              0x66 0x66    
   \              0x65 0x72    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_17:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_FFTBFFR_DUMP:</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x46    
   \              0x46 0x54    
   \              0x42 0x46    
   \              0x46 0x52    
   \              0x5F 0x44    
   \              0x55 0x4D    
   \              0x50 0x3A    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 1
   \   00000000   0x00               DC8 ""

   \                                 In section .rodata, align 4
   \                     ?_19:
   \   00000000   0x25 0x30          DC8 "%04d "
   \              0x34 0x64    
   \              0x20 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_20:
   \   00000000   0x3C 0x2F          DC8 "</STATUS>"
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_21:
   \   00000000   0x20 0x20          DC8 "     ---COMPLETE---"
   \              0x20 0x20    
   \              0x20 0x2D    
   \              0x2D 0x2D    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2D 0x2D    
   \              0x2D 0x00    

   \                                 In section .rodata, align 4
   \                     ?_22:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_FFTCLR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x46    
   \              0x46 0x54    
   \              0x43 0x4C    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_23:
   \   00000000   0x52 0x6F          DC8 "Road Sound: All buffers cleared.\015\012"
   \              0x61 0x64    
   \              0x20 0x53    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x3A 0x20    
   \              0x41 0x6C    
   \              0x6C 0x20    
   \              0x62 0x75    
   \              0x66 0x66    
   \              0x65 0x72    
   \              0x73 0x20    
   \              0x63 0x6C    
   \              0x65 0x61    
   \              0x72 0x65    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_24:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_NOSUPPORT</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x4E 0x4F    
   \              0x53 0x55    
   \              0x50 0x50    
   \              0x4F 0x52    
   \              0x54 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_25:
   \   00000000   0x49 0x6E          DC8 "Initialize Barometer Sensor Passed.\015\012"
   \              0x69 0x74    
   \              0x69 0x61    
   \              0x6C 0x69    
   \              0x7A 0x65    
   \              0x20 0x42    
   \              0x61 0x72    
   \              0x6F 0x6D    
   \              0x65 0x74    
   \              0x65 0x72    
   \              0x20 0x53    
   \              0x65 0x6E    
   \              0x73 0x6F    
   \              0x72 0x20    
   \              0x50 0x61    
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_26:
   \   00000000   0x49 0x6E          DC8 "Initialize Barometer Sensor FAILED.\015\012"
   \              0x69 0x74    
   \              0x69 0x61    
   \              0x6C 0x69    
   \              0x7A 0x65    
   \              0x20 0x42    
   \              0x61 0x72    
   \              0x6F 0x6D    
   \              0x65 0x74    
   \              0x65 0x72    
   \              0x20 0x53    
   \              0x65 0x6E    
   \              0x73 0x6F    
   \              0x72 0x20    
   \              0x46 0x41    
   \              0x49 0x4C    
   \              0x45 0x44    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_27:
   \   00000000   0x41 0x36          DC8 "A6 Command...Read Pressure Passed.\015\012"
   \              0x20 0x43    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x2E    
   \              0x2E 0x52    
   \              0x65 0x61    
   \              0x64 0x20    
   \              0x50 0x72    
   \              0x65 0x73    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x20 0x50    
   \              0x61 0x73    
   \              0x73 0x65    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_28:
   \   00000000   0x20 0x50          DC8 20H, 50H, 52H, 45H, 53H, 53H, 55H, 52H
   \              0x52 0x45    
   \              0x53 0x53    
   \              0x55 0x52    
   \   00000008   0x45 0x28          DC8 45H, 28H, 50H, 52H, 45H, 53H, 53H, 5FH
   \              0x50 0x52    
   \              0x45 0x53    
   \              0x53 0x5F    
   \   00000010   0x4F 0x55          DC8 4FH, 55H, 54H, 5FH, 48H, 2EH, 2EH, 2EH
   \              0x54 0x5F    
   \              0x48 0x2E    
   \              0x2E 0x2E    
   \   00000018   0x50 0x52          DC8 50H, 52H, 45H, 53H, 53H, 5FH, 4FH, 55H
   \              0x45 0x53    
   \              0x53 0x5F    
   \              0x4F 0x55    
   \   00000020   0x54 0x5F          DC8 54H, 5FH, 4CH, 2EH, 2EH, 2EH, 50H, 52H
   \              0x4C 0x2E    
   \              0x2E 0x2E    
   \              0x50 0x52    
   \   00000028   0x45 0x53          DC8 45H, 53H, 53H, 5FH, 4FH, 55H, 54H, 5FH
   \              0x53 0x5F    
   \              0x4F 0x55    
   \              0x54 0x5F    
   \   00000030   0x58 0x4C          DC8 58H, 4CH, 29H, 0DH, 0AH, 0
   \              0x29 0x0D    
   \              0x0A 0x00    
   \   00000036   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_29:
   \   00000000   0x20 0x50          DC8 " PRESSURE: %s/%s\015\012"
   \              0x52 0x45    
   \              0x53 0x53    
   \              0x55 0x52    
   \              0x45 0x3A    
   \              0x20 0x25    
   \              0x73 0x2F    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_30:
   \   00000000   0x20 0x50          DC8 " PRESSURE:  "
   \              0x52 0x45    
   \              0x53 0x53    
   \              0x55 0x52    
   \              0x45 0x3A    
   \              0x20 0x20    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_31:
   \   00000000   0x20 0x20          DC8 "  -  %08x\015\012"
   \              0x2D 0x20    
   \              0x20 0x25    
   \              0x30 0x38    
   \              0x78 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_32:
   \   00000000   0x41 0x36          DC8 "A6 Command...Read Pressure FAILED.\015\012"
   \              0x20 0x43    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x2E    
   \              0x2E 0x52    
   \              0x65 0x61    
   \              0x64 0x20    
   \              0x50 0x72    
   \              0x65 0x73    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x20 0x46    
   \              0x41 0x49    
   \              0x4C 0x45    
   \              0x44 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_33:
   \   00000000   0x41 0x38          DC8 "A8 Command...Read Temperature Passed.\015\012"
   \              0x20 0x43    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x2E    
   \              0x2E 0x52    
   \              0x65 0x61    
   \              0x64 0x20    
   \              0x54 0x65    
   \              0x6D 0x70    
   \              0x65 0x72    
   \              0x61 0x74    
   \              0x75 0x72    
   \              0x65 0x20    
   \              0x50 0x61    
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_34:
   \   00000000   0x20 0x20          DC8 "     TEMP DATA: "
   \              0x20 0x20    
   \              0x20 0x54    
   \              0x45 0x4D    
   \              0x50 0x20    
   \              0x44 0x41    
   \              0x54 0x41    
   \              0x3A 0x20    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_35:
   \   00000000   0x20 0x20          DC8 "     TEMP DATA(Decimal): %d\015\012"
   \              0x20 0x20    
   \              0x20 0x54    
   \              0x45 0x4D    
   \              0x50 0x20    
   \              0x44 0x41    
   \              0x54 0x41    
   \              0x28 0x44    
   \              0x65 0x63    
   \              0x69 0x6D    
   \              0x61 0x6C    
   \              0x29 0x3A    
   \              0x20 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_36:
   \   00000000   0x20 0x20          DC8 "     TempC: "
   \              0x20 0x20    
   \              0x20 0x54    
   \              0x65 0x6D    
   \              0x70 0x43    
   \              0x3A 0x20    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_37:
   \   00000000   0x20 0x20          DC8 "     TempF: "
   \              0x20 0x20    
   \              0x20 0x54    
   \              0x65 0x6D    
   \              0x70 0x46    
   \              0x3A 0x20    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_38:
   \   00000000   0x42 0x61          DC8 "Barometer Sensor: WHO_AM_I Passed.\015\012"
   \              0x72 0x6F    
   \              0x6D 0x65    
   \              0x74 0x65    
   \              0x72 0x20    
   \              0x53 0x65    
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x3A 0x20    
   \              0x57 0x48    
   \              0x4F 0x5F    
   \              0x41 0x4D    
   \              0x5F 0x49    
   \              0x20 0x50    
   \              0x61 0x73    
   \              0x73 0x65    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_39:
   \   00000000   0x42 0x61          DC8 "Barometer Sensor: WHO_AM_I FAILED.\015\012"
   \              0x72 0x6F    
   \              0x6D 0x65    
   \              0x74 0x65    
   \              0x72 0x20    
   \              0x53 0x65    
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x3A 0x20    
   \              0x57 0x48    
   \              0x4F 0x5F    
   \              0x41 0x4D    
   \              0x5F 0x49    
   \              0x20 0x46    
   \              0x41 0x49    
   \              0x4C 0x45    
   \              0x44 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_40:
   \   00000000   0x45 0x52          DC8 "ERROR: Not a legal command.\015\012"
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x61    
   \              0x20 0x6C    
   \              0x65 0x67    
   \              0x61 0x6C    
   \              0x20 0x63    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_41:
   \   00000000   0x56 0x6F          DC8 "Voltage Monitor/Shunt Voltage...\015\012"
   \              0x6C 0x74    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x4D 0x6F    
   \              0x6E 0x69    
   \              0x74 0x6F    
   \              0x72 0x2F    
   \              0x53 0x68    
   \              0x75 0x6E    
   \              0x74 0x20    
   \              0x56 0x6F    
   \              0x6C 0x74    
   \              0x61 0x67    
   \              0x65 0x2E    
   \              0x2E 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_42:
   \   00000000   0x20 0x20          DC8 "     Thermistor DATA: %s   %s/%s   %s/%s   %d\015\012"
   \              0x20 0x20    
   \              0x20 0x54    
   \              0x68 0x65    
   \              0x72 0x6D    
   \              0x69 0x73    
   \              0x74 0x6F    
   \              0x72 0x20    
   \              0x44 0x41    
   \              0x54 0x41    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x20 0x20    
   \              0x20 0x25    
   \              0x73 0x2F    
   \              0x25 0x73    
   \              0x20 0x20    
   \              0x20 0x25    
   \              0x73 0x2F    
   \              0x25 0x73    
   \              0x20 0x20    
   \              0x20 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_43:
   \   00000000   0x20 0x20          DC8 "     Grid 33 DATA: %s   %s/%s   %s/%s   %d\015\012"
   \              0x20 0x20    
   \              0x20 0x47    
   \              0x72 0x69    
   \              0x64 0x20    
   \              0x33 0x33    
   \              0x20 0x44    
   \              0x41 0x54    
   \              0x41 0x3A    
   \              0x20 0x25    
   \              0x73 0x20    
   \              0x20 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x20    
   \              0x20 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x20    
   \              0x20 0x20    
   \              0x25 0x64    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_44:
   \   00000000   0x20 0x20          DC8 "     SHNT VLTG DATA: "
   \              0x20 0x20    
   \              0x20 0x53    
   \              0x48 0x4E    
   \              0x54 0x20    
   \              0x56 0x4C    
   \              0x54 0x47    
   \              0x20 0x44    
   \              0x41 0x54    
   \              0x41 0x3A    
   \              0x20 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_45:
   \   00000000   0x20 0x20          DC8 "     COMPLETE.\015\012"
   \              0x20 0x20    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_46:
   \   00000000   0x43 0x6F          DC8 43H, 6FH, 6FH, 6CH, 20H, 45H, 79H, 65H
   \              0x6F 0x6C    
   \              0x20 0x45    
   \              0x79 0x65    
   \   00000008   0x2F 0x47          DC8 2FH, 47H, 72H, 69H, 64H, 20H, 45H, 79H
   \              0x72 0x69    
   \              0x64 0x20    
   \              0x45 0x79    
   \   00000010   0x65 0x20          DC8 65H, 20H, 53H, 65H, 6EH, 73H, 6FH, 72H
   \              0x53 0x65    
   \              0x6E 0x73    
   \              0x6F 0x72    
   \   00000018   0x3A 0x20          DC8 3AH, 20H, 49H, 6EH, 69H, 74H, 69H, 61H
   \              0x49 0x6E    
   \              0x69 0x74    
   \              0x69 0x61    
   \   00000020   0x6C 0x69          DC8 6CH, 69H, 7AH, 61H, 74H, 69H, 6FH, 6EH
   \              0x7A 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \   00000028   0x20 0x43          DC8 20H, 43H, 6FH, 6DH, 70H, 6CH, 65H, 74H
   \              0x6F 0x6D    
   \              0x70 0x6C    
   \              0x65 0x74    
   \   00000030   0x65 0x2E          DC8 65H, 2EH, 0DH, 0AH, 0
   \              0x0D 0x0A    
   \              0x00         
   \   00000035   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_47:
   \   00000000   0x43 0x6F          DC8 "Cool Eye/Grid Eye Sensor: Reset Complete.\015\012"
   \              0x6F 0x6C    
   \              0x20 0x45    
   \              0x79 0x65    
   \              0x2F 0x47    
   \              0x72 0x69    
   \              0x64 0x20    
   \              0x45 0x79    
   \              0x65 0x20    
   \              0x53 0x65    
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x3A 0x20    
   \              0x52 0x65    
   \              0x73 0x65    
   \              0x74 0x20    
   \              0x43 0x6F    
   \              0x6D 0x70    
   \              0x6C 0x65    
   \              0x74 0x65    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_48:
   \   00000000   0x56 0x6F          DC8 "Voltage Monitor/Read Bus Voltage...\015\012"
   \              0x6C 0x74    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x4D 0x6F    
   \              0x6E 0x69    
   \              0x74 0x6F    
   \              0x72 0x2F    
   \              0x52 0x65    
   \              0x61 0x64    
   \              0x20 0x42    
   \              0x75 0x73    
   \              0x20 0x56    
   \              0x6F 0x6C    
   \              0x74 0x61    
   \              0x67 0x65    
   \              0x2E 0x2E    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_49:
   \   00000000   0x20 0x20          DC8 "     BUS VOLTAGE DATA: "
   \              0x20 0x20    
   \              0x20 0x42    
   \              0x55 0x53    
   \              0x20 0x56    
   \              0x4F 0x4C    
   \              0x54 0x41    
   \              0x47 0x45    
   \              0x20 0x44    
   \              0x41 0x54    
   \              0x41 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_50:
   \   00000000   0x20 0x20          DC8 "     Bus Voltage: %s/%s\015\012"
   \              0x20 0x20    
   \              0x20 0x42    
   \              0x75 0x73    
   \              0x20 0x56    
   \              0x6F 0x6C    
   \              0x74 0x61    
   \              0x67 0x65    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x0D    
   \              0x0A 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_51:
   \   00000000   0x56 0x6F          DC8 "Voltage Monitor: Initialization Complete.\015\012"
   \              0x6C 0x74    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x4D 0x6F    
   \              0x6E 0x69    
   \              0x74 0x6F    
   \              0x72 0x3A    
   \              0x20 0x49    
   \              0x6E 0x69    
   \              0x74 0x69    
   \              0x61 0x6C    
   \              0x69 0x7A    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x43 0x6F    
   \              0x6D 0x70    
   \              0x6C 0x65    
   \              0x74 0x65    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_52:
   \   00000000   0x20 0x20          DC8 "     Shunt Voltage: %s/%s\015\012"
   \              0x20 0x20    
   \              0x20 0x53    
   \              0x68 0x75    
   \              0x6E 0x74    
   \              0x20 0x56    
   \              0x6F 0x6C    
   \              0x74 0x61    
   \              0x67 0x65    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_53:
   \   00000000   0x56 0x6F          DC8 "Voltage Monitor/Read Current...\015\012"
   \              0x6C 0x74    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x4D 0x6F    
   \              0x6E 0x69    
   \              0x74 0x6F    
   \              0x72 0x2F    
   \              0x52 0x65    
   \              0x61 0x64    
   \              0x20 0x43    
   \              0x75 0x72    
   \              0x72 0x65    
   \              0x6E 0x74    
   \              0x2E 0x2E    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_54:
   \   00000000   0x20 0x20          DC8 "     CURRENT DATA: "
   \              0x20 0x20    
   \              0x20 0x43    
   \              0x55 0x52    
   \              0x52 0x45    
   \              0x4E 0x54    
   \              0x20 0x44    
   \              0x41 0x54    
   \              0x41 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_55:
   \   00000000   0x20 0x20          DC8 "     Current: %s/%s\015\012"
   \              0x20 0x20    
   \              0x20 0x43    
   \              0x75 0x72    
   \              0x72 0x65    
   \              0x6E 0x74    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x0D    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_56:
   \   00000000   0x56 0x6F          DC8 "Voltage Monitor/Read Power...\015\012"
   \              0x6C 0x74    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x4D 0x6F    
   \              0x6E 0x69    
   \              0x74 0x6F    
   \              0x72 0x2F    
   \              0x52 0x65    
   \              0x61 0x64    
   \              0x20 0x50    
   \              0x6F 0x77    
   \              0x65 0x72    
   \              0x2E 0x2E    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_57:
   \   00000000   0x20 0x20          DC8 "     POWER DATA: "
   \              0x20 0x20    
   \              0x20 0x50    
   \              0x4F 0x57    
   \              0x45 0x52    
   \              0x20 0x44    
   \              0x41 0x54    
   \              0x41 0x3A    
   \              0x20 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_58:
   \   00000000   0x20 0x20          DC8 "     Power: %s/%s\015\012"
   \              0x20 0x20    
   \              0x20 0x50    
   \              0x6F 0x77    
   \              0x65 0x72    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_59:
   \   00000000   0x48 0x75          DC8 "Humidity SENSOR...\015\012"
   \              0x6D 0x69    
   \              0x64 0x69    
   \              0x74 0x79    
   \              0x20 0x53    
   \              0x45 0x4E    
   \              0x53 0x4F    
   \              0x52 0x2E    
   \              0x2E 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_60:
   \   00000000   0x20 0x20          DC8 "     Humidity DATA: "
   \              0x20 0x20    
   \              0x20 0x48    
   \              0x75 0x6D    
   \              0x69 0x64    
   \              0x69 0x74    
   \              0x79 0x20    
   \              0x44 0x41    
   \              0x54 0x41    
   \              0x3A 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_61:
   \   00000000   0x20 0x20          DC8 "     Humidity DATA(Decimal): %d\015\012"
   \              0x20 0x20    
   \              0x20 0x48    
   \              0x75 0x6D    
   \              0x69 0x64    
   \              0x69 0x74    
   \              0x79 0x20    
   \              0x44 0x41    
   \              0x54 0x41    
   \              0x28 0x44    
   \              0x65 0x63    
   \              0x69 0x6D    
   \              0x61 0x6C    
   \              0x29 0x3A    
   \              0x20 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_62:
   \   00000000   0x20 0x20          DC8 "     Humidity: %s/%s\015\012"
   \              0x20 0x20    
   \              0x20 0x48    
   \              0x75 0x6D    
   \              0x69 0x64    
   \              0x69 0x74    
   \              0x79 0x3A    
   \              0x20 0x25    
   \              0x73 0x2F    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_63:
   \   00000000   0x48 0x75          DC8 "Humidity Sensor: Initialization Complete.\015\012"
   \              0x6D 0x69    
   \              0x64 0x69    
   \              0x74 0x79    
   \              0x20 0x53    
   \              0x65 0x6E    
   \              0x73 0x6F    
   \              0x72 0x3A    
   \              0x20 0x49    
   \              0x6E 0x69    
   \              0x74 0x69    
   \              0x61 0x6C    
   \              0x69 0x7A    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x43 0x6F    
   \              0x6D 0x70    
   \              0x6C 0x65    
   \              0x74 0x65    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_64:
   \   00000000   0x20 0x20          DC8 "     Humidity: "
   \              0x20 0x20    
   \              0x20 0x48    
   \              0x75 0x6D    
   \              0x69 0x64    
   \              0x69 0x74    
   \              0x79 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_65:
   \   00000000   0x54 0x42          DC8 "TBD: Read Temp and Pressure NOT IMPLEMENTED\015\012"
   \              0x44 0x3A    
   \              0x20 0x52    
   \              0x65 0x61    
   \              0x64 0x20    
   \              0x54 0x65    
   \              0x6D 0x70    
   \              0x20 0x61    
   \              0x6E 0x64    
   \              0x20 0x50    
   \              0x72 0x65    
   \              0x73 0x73    
   \              0x75 0x72    
   \              0x65 0x20    
   \              0x4E 0x4F    
   \              0x54 0x20    
   \              0x49 0x4D    
   \              0x50 0x4C    
   \              0x45 0x4D    
   \              0x45 0x4E    
   \              0x54 0x45    
   \              0x44 0x0D    
   \              0x0A 0x00    
   \   0000002E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_66:
   \   00000000   0x4E 0x4F          DC8 "NO Action...(0x00).\015\012"
   \              0x20 0x41    
   \              0x63 0x74    
   \              0x69 0x6F    
   \              0x6E 0x2E    
   \              0x2E 0x2E    
   \              0x28 0x30    
   \              0x78 0x30    
   \              0x30 0x29    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_67:
   \   00000000   0x54 0x45          DC8 "TEMP SENSOR...\015\012"
   \              0x4D 0x50    
   \              0x20 0x53    
   \              0x45 0x4E    
   \              0x53 0x4F    
   \              0x52 0x2E    
   \              0x2E 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_68:
   \   00000000   0x20 0x20          DC8 "     TempC: %s/%s     TempF: %s/%s\015\012"
   \              0x20 0x20    
   \              0x20 0x54    
   \              0x65 0x6D    
   \              0x70 0x43    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x2F 0x25    
   \              0x73 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x54 0x65    
   \              0x6D 0x70    
   \              0x46 0x3A    
   \              0x20 0x25    
   \              0x73 0x2F    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_69:
   \   00000000   0x52 0x47          DC8 "RGB Color Light Sensor...\015\012"
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \              0x72 0x20    
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \              0x53 0x65    
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x2E 0x2E    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_70:
   \   00000000   0x20 0x52          DC8 20H, 52H, 47H, 42H, 28H, 52H, 45H, 44H
   \              0x47 0x42    
   \              0x28 0x52    
   \              0x45 0x44    
   \   00000008   0x6D 0x73          DC8 6DH, 73H, 62H, 2CH, 52H, 45H, 44H, 6CH
   \              0x62 0x2C    
   \              0x52 0x45    
   \              0x44 0x6C    
   \   00000010   0x73 0x62          DC8 73H, 62H, 2CH, 47H, 52H, 45H, 45H, 4EH
   \              0x2C 0x47    
   \              0x52 0x45    
   \              0x45 0x4E    
   \   00000018   0x6D 0x73          DC8 6DH, 73H, 62H, 2CH, 47H, 52H, 45H, 45H
   \              0x62 0x2C    
   \              0x47 0x52    
   \              0x45 0x45    
   \   00000020   0x4E 0x6C          DC8 4EH, 6CH, 73H, 62H, 2CH, 42H, 4CH, 55H
   \              0x73 0x62    
   \              0x2C 0x42    
   \              0x4C 0x55    
   \   00000028   0x45 0x6D          DC8 45H, 6DH, 73H, 62H, 2CH, 42H, 4CH, 55H
   \              0x73 0x62    
   \              0x2C 0x42    
   \              0x4C 0x55    
   \   00000030   0x45 0x6C          DC8 45H, 6CH, 73H, 62H, 29H, 0DH, 0AH, 0
   \              0x73 0x62    
   \              0x29 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_71:
   \   00000000   0x20 0x20          DC8 "       DATA: "
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x44    
   \              0x41 0x54    
   \              0x41 0x3A    
   \              0x20 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_72:
   \   00000000   0x20 0x20          DC8 "    Red: "
   \              0x20 0x20    
   \              0x52 0x65    
   \              0x64 0x3A    
   \              0x20 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_73:
   \   00000000   0x20 0x20          DC8 "    Green: "
   \              0x20 0x20    
   \              0x47 0x72    
   \              0x65 0x65    
   \              0x6E 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_74:
   \   00000000   0x20 0x20          DC8 "    Blue: "
   \              0x20 0x20    
   \              0x42 0x6C    
   \              0x75 0x65    
   \              0x3A 0x20    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_75:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 3AH, 20H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x3A 0x20    
   \   00000018   0x49 0x6E          DC8 49H, 6EH, 69H, 74H, 69H, 61H, 6CH, 69H
   \              0x69 0x74    
   \              0x69 0x61    
   \              0x6C 0x69    
   \   00000020   0x7A 0x61          DC8 7AH, 61H, 74H, 69H, 6FH, 6EH, 20H, 43H
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x43    
   \   00000028   0x6F 0x6D          DC8 6FH, 6DH, 70H, 6CH, 65H, 74H, 65H, 20H
   \              0x70 0x6C    
   \              0x65 0x74    
   \              0x65 0x20    
   \   00000030   0x77 0x69          DC8 77H, 69H, 74H, 68H, 20H, 44H, 45H, 46H
   \              0x74 0x68    
   \              0x20 0x44    
   \              0x45 0x46    
   \   00000038   0x41 0x55          DC8 41H, 55H, 4CH, 54H, 20H, 56H, 61H, 6CH
   \              0x4C 0x54    
   \              0x20 0x56    
   \              0x61 0x6C    
   \   00000040   0x75 0x65          DC8 75H, 65H, 73H, 2EH, 0DH, 0AH, 0
   \              0x73 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000047   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_76:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 3AH, 20H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x3A 0x20    
   \   00000018   0x53 0x59          DC8 53H, 59H, 4EH, 54H, 41H, 58H, 20H, 45H
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \   00000020   0x72 0x72          DC8 72H, 72H, 6FH, 72H, 2EH, 20H, 50H, 61H
   \              0x6F 0x72    
   \              0x2E 0x20    
   \              0x50 0x61    
   \   00000028   0x72 0x61          DC8 72H, 61H, 6DH, 65H, 74H, 65H, 72H, 73H
   \              0x6D 0x65    
   \              0x74 0x65    
   \              0x72 0x73    
   \   00000030   0x20 0x61          DC8 20H, 61H, 72H, 65H, 20H, 6EH, 6FH, 74H
   \              0x72 0x65    
   \              0x20 0x6E    
   \              0x6F 0x74    
   \   00000038   0x20 0x63          DC8 20H, 63H, 6FH, 72H, 72H, 65H, 63H, 74H
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \   00000040   0x2E 0x0D          DC8 2EH, 0DH, 0AH, 0
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_77:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 4EH, 6FH, 74H
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \   00000028   0x20 0x63          DC8 20H, 63H, 6FH, 72H, 72H, 65H, 63H, 74H
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \   00000030   0x20 0x66          DC8 20H, 66H, 6FH, 72H, 6DH, 61H, 74H, 2EH
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \   00000038   0x20 0x50          DC8 20H, 50H, 75H, 6EH, 63H, 74H, 75H, 61H
   \              0x75 0x6E    
   \              0x63 0x74    
   \              0x75 0x61    
   \   00000040   0x74 0x69          DC8 74H, 69H, 6FH, 6EH, 21H, 0DH, 0AH, 0
   \              0x6F 0x6E    
   \              0x21 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_78:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 50H, 61H, 72H, 61H
   \              0x52 0x3A    
   \              0x50 0x61    
   \              0x72 0x61    
   \   00000028   0x6D 0x65          DC8 6DH, 65H, 74H, 65H, 72H, 73H, 20H, 6EH
   \              0x74 0x65    
   \              0x72 0x73    
   \              0x20 0x6E    
   \   00000030   0x6F 0x74          DC8 6FH, 74H, 20H, 48H, 45H, 58H, 20H, 56H
   \              0x20 0x48    
   \              0x45 0x58    
   \              0x20 0x56    
   \   00000038   0x61 0x6C          DC8 61H, 6CH, 75H, 65H, 2EH, 0DH, 0AH, 0
   \              0x75 0x65    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_79:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x4F 0x50          DC8 4FH, 50H, 5FH, 4DH, 4FH, 44H, 45H, 2EH
   \              0x5F 0x4D    
   \              0x4F 0x44    
   \              0x45 0x2E    
   \   00000038   0x0D 0x0A          DC8 0DH, 0AH, 0
   \              0x00         
   \   0000003B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_80:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x44 0x53          DC8 44H, 53H, 5FH, 52H, 41H, 4EH, 47H, 45H
   \              0x5F 0x52    
   \              0x41 0x4E    
   \              0x47 0x45    
   \   00000038   0x2E 0x0D          DC8 2EH, 0DH, 0AH, 0
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_81:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x41 0x44          DC8 41H, 44H, 43H, 5FH, 52H, 53H, 4CH, 2EH
   \              0x43 0x5F    
   \              0x52 0x53    
   \              0x4C 0x2E    
   \   00000038   0x0D 0x0A          DC8 0DH, 0AH, 0
   \              0x00         
   \   0000003B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_82:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x53 0x59          DC8 53H, 59H, 4EH, 43H, 2EH, 0DH, 0AH, 0
   \              0x4E 0x43    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_83:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x43 0x4D          DC8 43H, 4DH, 50H, 5FH, 41H, 44H, 4AH, 53H
   \              0x50 0x5F    
   \              0x41 0x44    
   \              0x4A 0x53    
   \   00000038   0x54 0x2E          DC8 54H, 2EH, 0DH, 0AH, 0
   \              0x0D 0x0A    
   \              0x00         
   \   0000003D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_84:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x43 0x4D          DC8 43H, 4DH, 50H, 5FH, 4FH, 46H, 46H, 53H
   \              0x50 0x5F    
   \              0x4F 0x46    
   \              0x46 0x53    
   \   00000038   0x54 0x2E          DC8 54H, 2EH, 0DH, 0AH, 0
   \              0x0D 0x0A    
   \              0x00         
   \   0000003D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_85:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x49 0x4E          DC8 49H, 4EH, 54H, 5FH, 41H, 53H, 53H, 47H
   \              0x54 0x5F    
   \              0x41 0x53    
   \              0x53 0x47    
   \   00000038   0x4E 0x2E          DC8 4EH, 2EH, 0DH, 0AH, 0
   \              0x0D 0x0A    
   \              0x00         
   \   0000003D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_86:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x49 0x4E          DC8 49H, 4EH, 54H, 5FH, 50H, 45H, 52H, 53H
   \              0x54 0x5F    
   \              0x50 0x45    
   \              0x52 0x53    
   \   00000038   0x49 0x53          DC8 49H, 53H, 54H, 2EH, 0DH, 0AH, 0
   \              0x54 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000003F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_87:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 20H, 53H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \   00000018   0x59 0x4E          DC8 59H, 4EH, 54H, 41H, 58H, 20H, 45H, 52H
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \   00000020   0x52 0x4F          DC8 52H, 4FH, 52H, 3AH, 20H, 42H, 41H, 44H
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x41 0x44    
   \   00000028   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 3AH, 20H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3A 0x20    
   \   00000030   0x43 0x4E          DC8 43H, 4EH, 56H, 52H, 53H, 4EH, 5FH, 49H
   \              0x56 0x52    
   \              0x53 0x4E    
   \              0x5F 0x49    
   \   00000038   0x4E 0x54          DC8 4EH, 54H, 2EH, 0DH, 0AH, 0
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   0000003E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_88:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 3AH, 20H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x3A 0x20    
   \   00000018   0x49 0x6E          DC8 49H, 6EH, 69H, 74H, 69H, 61H, 6CH, 69H
   \              0x69 0x74    
   \              0x69 0x61    
   \              0x6C 0x69    
   \   00000020   0x7A 0x61          DC8 7AH, 61H, 74H, 69H, 6FH, 6EH, 20H, 43H
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x43    
   \   00000028   0x6F 0x6D          DC8 6FH, 6DH, 70H, 6CH, 65H, 74H, 65H, 20H
   \              0x70 0x6C    
   \              0x65 0x74    
   \              0x65 0x20    
   \   00000030   0x77 0x69          DC8 77H, 69H, 74H, 68H, 20H, 55H, 53H, 45H
   \              0x74 0x68    
   \              0x20 0x55    
   \              0x53 0x45    
   \   00000038   0x52 0x20          DC8 52H, 20H, 56H, 61H, 6CH, 75H, 65H, 73H
   \              0x56 0x61    
   \              0x6C 0x75    
   \              0x65 0x73    
   \   00000040   0x2E 0x0D          DC8 2EH, 0DH, 0AH, 0
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_89:
   \   00000000   0x52 0x47          DC8 "RGB Color Light Sensor Status: "
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \              0x72 0x20    
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \              0x53 0x65    
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \              0x74 0x61    
   \              0x74 0x75    
   \              0x73 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_90:
   \   00000000   0x25 0x30          DC8 "%02x / "
   \              0x32 0x78    
   \              0x20 0x2F    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_91:
   \   00000000   0x52 0x47          DC8 52H, 47H, 42H, 20H, 43H, 6FH, 6CH, 6FH
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \   00000008   0x72 0x20          DC8 72H, 20H, 4CH, 69H, 67H, 68H, 74H, 20H
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \   00000010   0x53 0x65          DC8 53H, 65H, 6EH, 73H, 6FH, 72H, 3AH, 20H
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x3A 0x20    
   \   00000018   0x52 0x45          DC8 52H, 45H, 53H, 45H, 54H, 20H, 43H, 4DH
   \              0x53 0x45    
   \              0x54 0x20    
   \              0x43 0x4D    
   \   00000020   0x44 0x20          DC8 44H, 20H, 53H, 65H, 6EH, 74H, 20H, 53H
   \              0x53 0x65    
   \              0x6E 0x74    
   \              0x20 0x53    
   \   00000028   0x75 0x63          DC8 75H, 63H, 63H, 65H, 73H, 66H, 75H, 6CH
   \              0x63 0x65    
   \              0x73 0x66    
   \              0x75 0x6C    
   \   00000030   0x2E 0x0D          DC8 2EH, 0DH, 0AH, 0
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_92:
   \   00000000   0x52 0x47          DC8 "RGB Color Light Sensor ID Code: "
   \              0x42 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \              0x72 0x20    
   \              0x4C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \              0x53 0x65    
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x49    
   \              0x44 0x20    
   \              0x43 0x6F    
   \              0x64 0x65    
   \              0x3A 0x20    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_93:
   \   00000000   0x35 0x56          DC8 "5V Power Plane Powered UP.\015\012"
   \              0x20 0x50    
   \              0x6F 0x77    
   \              0x65 0x72    
   \              0x20 0x50    
   \              0x6C 0x61    
   \              0x6E 0x65    
   \              0x20 0x50    
   \              0x6F 0x77    
   \              0x65 0x72    
   \              0x65 0x64    
   \              0x20 0x55    
   \              0x50 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_94:
   \   00000000   0x35 0x56          DC8 "5V Power Plane Powered DOWN.\015\012"
   \              0x20 0x50    
   \              0x6F 0x77    
   \              0x65 0x72    
   \              0x20 0x50    
   \              0x6C 0x61    
   \              0x6E 0x65    
   \              0x20 0x50    
   \              0x6F 0x77    
   \              0x65 0x72    
   \              0x65 0x64    
   \              0x20 0x44    
   \              0x4F 0x57    
   \              0x4E 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_95:
   \   00000000   0x45 0x52          DC8 "ERROR: Illegal 5V Power Plane Command.\015\012"
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x49    
   \              0x6C 0x6C    
   \              0x65 0x67    
   \              0x61 0x6C    
   \              0x20 0x35    
   \              0x56 0x20    
   \              0x50 0x6F    
   \              0x77 0x65    
   \              0x72 0x20    
   \              0x50 0x6C    
   \              0x61 0x6E    
   \              0x65 0x20    
   \              0x43 0x6F    
   \              0x6D 0x6D    
   \              0x61 0x6E    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_96:
   \   00000000   0x54 0x20          DC8 "T ERROR: Not a legal command.\015\012"
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x61    
   \              0x20 0x6C    
   \              0x65 0x67    
   \              0x61 0x6C    
   \              0x20 0x63    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_97:
   \   00000000   0x54 0x49          DC8 "TI SYNTAX ERROR: Not correct format.\015\012"
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x63    
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_98:
   \   00000000   0x54 0x49          DC8 "TIS SYNTAX ERROR: Not correct format.\015\012"
   \              0x53 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x4E 0x6F    
   \              0x74 0x20    
   \              0x63 0x6F    
   \              0x72 0x72    
   \              0x65 0x63    
   \              0x74 0x20    
   \              0x66 0x6F    
   \              0x72 0x6D    
   \              0x61 0x74    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_99:
   \   00000000   0x54 0x49          DC8 "TIS SYNTAX ERROR: Address not HEX Value.\015\012"
   \              0x53 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x41 0x64    
   \              0x64 0x72    
   \              0x65 0x73    
   \              0x73 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x48 0x45    
   \              0x58 0x20    
   \              0x56 0x61    
   \              0x6C 0x75    
   \              0x65 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_100:
   \   00000000   0x54 0x49          DC8 54H, 49H, 53H, 20H, 53H, 59H, 4EH, 54H
   \              0x53 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \   00000008   0x41 0x58          DC8 41H, 58H, 20H, 45H, 52H, 52H, 4FH, 52H
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \   00000010   0x3A 0x20          DC8 3AH, 20H, 4EH, 75H, 6DH, 62H, 65H, 72H
   \              0x4E 0x75    
   \              0x6D 0x62    
   \              0x65 0x72    
   \   00000018   0x20 0x6F          DC8 20H, 6FH, 66H, 20H, 42H, 79H, 74H, 65H
   \              0x66 0x20    
   \              0x42 0x79    
   \              0x74 0x65    
   \   00000020   0x73 0x20          DC8 73H, 20H, 6EH, 6FH, 74H, 20H, 48H, 45H
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x48 0x45    
   \   00000028   0x58 0x20          DC8 58H, 20H, 56H, 61H, 6CH, 75H, 65H, 2EH
   \              0x56 0x61    
   \              0x6C 0x75    
   \              0x65 0x2E    
   \   00000030   0x0D 0x0A          DC8 0DH, 0AH, 0
   \              0x00         
   \   00000033   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_101:
   \   00000000   0x54 0x49          DC8 "TIS: GOOD CMD: %x.\015\012"
   \              0x53 0x3A    
   \              0x20 0x47    
   \              0x4F 0x4F    
   \              0x44 0x20    
   \              0x43 0x4D    
   \              0x44 0x3A    
   \              0x20 0x25    
   \              0x78 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_102:
   \   00000000   0x54 0x49          DC8 "TIS: GOOD CMD: %x."
   \              0x53 0x3A    
   \              0x20 0x47    
   \              0x4F 0x4F    
   \              0x44 0x20    
   \              0x43 0x4D    
   \              0x44 0x3A    
   \              0x20 0x25    
   \              0x78 0x2E    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \   00000000   0x25 0x78          DC8 "%x."
   \              0x2E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_104:
   \   00000000   0x54 0x49          DC8 "TIR SYNTAX ERROR: Not correct format.\015\012"
   \              0x52 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x4E 0x6F    
   \              0x74 0x20    
   \              0x63 0x6F    
   \              0x72 0x72    
   \              0x65 0x63    
   \              0x74 0x20    
   \              0x66 0x6F    
   \              0x72 0x6D    
   \              0x61 0x74    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_105:
   \   00000000   0x54 0x49          DC8 "TIR SYNTAX ERROR: Address not HEX Value.\015\012"
   \              0x52 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x41 0x64    
   \              0x64 0x72    
   \              0x65 0x73    
   \              0x73 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x48 0x45    
   \              0x58 0x20    
   \              0x56 0x61    
   \              0x6C 0x75    
   \              0x65 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_106:
   \   00000000   0x54 0x49          DC8 54H, 49H, 52H, 20H, 53H, 59H, 4EH, 54H
   \              0x52 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \   00000008   0x41 0x58          DC8 41H, 58H, 20H, 45H, 52H, 52H, 4FH, 52H
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \   00000010   0x3A 0x20          DC8 3AH, 20H, 4EH, 75H, 6DH, 62H, 65H, 72H
   \              0x4E 0x75    
   \              0x6D 0x62    
   \              0x65 0x72    
   \   00000018   0x20 0x6F          DC8 20H, 6FH, 66H, 20H, 42H, 79H, 74H, 65H
   \              0x66 0x20    
   \              0x42 0x79    
   \              0x74 0x65    
   \   00000020   0x73 0x20          DC8 73H, 20H, 6EH, 6FH, 74H, 20H, 48H, 45H
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x48 0x45    
   \   00000028   0x58 0x20          DC8 58H, 20H, 56H, 61H, 6CH, 75H, 65H, 2EH
   \              0x56 0x61    
   \              0x6C 0x75    
   \              0x65 0x2E    
   \   00000030   0x0D 0x0A          DC8 0DH, 0AH, 0
   \              0x00         
   \   00000033   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_107:
   \   00000000   0x54 0x49          DC8 54H, 49H, 52H, 20H, 53H, 59H, 4EH, 54H
   \              0x52 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \   00000008   0x41 0x58          DC8 41H, 58H, 20H, 45H, 52H, 52H, 4FH, 52H
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \   00000010   0x3A 0x20          DC8 3AH, 20H, 4EH, 75H, 6DH, 62H, 65H, 72H
   \              0x4E 0x75    
   \              0x6D 0x62    
   \              0x65 0x72    
   \   00000018   0x20 0x6F          DC8 20H, 6FH, 66H, 20H, 42H, 79H, 74H, 65H
   \              0x66 0x20    
   \              0x42 0x79    
   \              0x74 0x65    
   \   00000020   0x73 0x20          DC8 73H, 20H, 52H, 45H, 43H, 45H, 49H, 56H
   \              0x52 0x45    
   \              0x43 0x45    
   \              0x49 0x56    
   \   00000028   0x45 0x44          DC8 45H, 44H, 20H, 6EH, 6FH, 74H, 20H, 48H
   \              0x20 0x6E    
   \              0x6F 0x74    
   \              0x20 0x48    
   \   00000030   0x45 0x58          DC8 45H, 58H, 20H, 56H, 61H, 6CH, 75H, 65H
   \              0x20 0x56    
   \              0x61 0x6C    
   \              0x75 0x65    
   \   00000038   0x2E 0x0D          DC8 2EH, 0DH, 0AH, 0
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_108:
   \   00000000   0x54 0x49          DC8 "TIR: GOOD CMD: %x.\015\012"
   \              0x52 0x3A    
   \              0x20 0x47    
   \              0x4F 0x4F    
   \              0x44 0x20    
   \              0x43 0x4D    
   \              0x44 0x3A    
   \              0x20 0x25    
   \              0x78 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_109:
   \   00000000   0x54 0x49          DC8 "TIR SYNTAX ERROR: Data not HEX Value.\015\012"
   \              0x52 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x44 0x61    
   \              0x74 0x61    
   \              0x20 0x6E    
   \              0x6F 0x74    
   \              0x20 0x48    
   \              0x45 0x58    
   \              0x20 0x56    
   \              0x61 0x6C    
   \              0x75 0x65    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_110:
   \   00000000   0x54 0x49          DC8 "TIR: GOOD CMD: %x."
   \              0x52 0x3A    
   \              0x20 0x47    
   \              0x4F 0x4F    
   \              0x44 0x20    
   \              0x43 0x4D    
   \              0x44 0x3A    
   \              0x20 0x25    
   \              0x78 0x2E    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_111:
   \   00000000   0x20 0x20          DC8 "     DATA: "
   \              0x20 0x20    
   \              0x20 0x44    
   \              0x41 0x54    
   \              0x41 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_112:
   \   00000000   0x54 0x49          DC8 "TIQ SYNTAX ERROR: Not correct format.\015\012"
   \              0x51 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x4E 0x6F    
   \              0x74 0x20    
   \              0x63 0x6F    
   \              0x72 0x72    
   \              0x65 0x63    
   \              0x74 0x20    
   \              0x66 0x6F    
   \              0x72 0x6D    
   \              0x61 0x74    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_113:
   \   00000000   0x54 0x49          DC8 "TIQ SYNTAX ERROR: Address not HEX Value.\015\012"
   \              0x51 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x41 0x64    
   \              0x64 0x72    
   \              0x65 0x73    
   \              0x73 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x48 0x45    
   \              0x58 0x20    
   \              0x56 0x61    
   \              0x6C 0x75    
   \              0x65 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_114:
   \   00000000   0x54 0x49          DC8 54H, 49H, 51H, 20H, 53H, 59H, 4EH, 54H
   \              0x51 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \   00000008   0x41 0x58          DC8 41H, 58H, 20H, 45H, 52H, 52H, 4FH, 52H
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \   00000010   0x3A 0x20          DC8 3AH, 20H, 4EH, 75H, 6DH, 62H, 65H, 72H
   \              0x4E 0x75    
   \              0x6D 0x62    
   \              0x65 0x72    
   \   00000018   0x20 0x6F          DC8 20H, 6FH, 66H, 20H, 42H, 79H, 74H, 65H
   \              0x66 0x20    
   \              0x42 0x79    
   \              0x74 0x65    
   \   00000020   0x73 0x20          DC8 73H, 20H, 6EH, 6FH, 74H, 20H, 48H, 45H
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x48 0x45    
   \   00000028   0x58 0x20          DC8 58H, 20H, 56H, 61H, 6CH, 75H, 65H, 2EH
   \              0x56 0x61    
   \              0x6C 0x75    
   \              0x65 0x2E    
   \   00000030   0x0D 0x0A          DC8 0DH, 0AH, 0
   \              0x00         
   \   00000033   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_115:
   \   00000000   0x3C 0x53          DC8 3CH, 53H, 54H, 41H, 54H, 55H, 53H, 3EH
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \   00000008   0x25 0x73          DC8 25H, 73H, 2FH, 2FH, 25H, 73H, 2FH, 2FH
   \              0x2F 0x2F    
   \              0x25 0x73    
   \              0x2F 0x2F    
   \   00000010   0x25 0x73          DC8 25H, 73H, 2FH, 2FH, 25H, 73H, 2FH, 2FH
   \              0x2F 0x2F    
   \              0x25 0x73    
   \              0x2F 0x2F    
   \   00000018   0x25 0x73          DC8 25H, 73H, 2FH, 2FH, 25H, 73H, 2FH, 2FH
   \              0x2F 0x2F    
   \              0x25 0x73    
   \              0x2F 0x2F    
   \   00000020   0x25 0x73          DC8 25H, 73H, 2FH, 2FH, 25H, 73H, 2FH, 2FH
   \              0x2F 0x2F    
   \              0x25 0x73    
   \              0x2F 0x2F    
   \   00000028   0x25 0x73          DC8 25H, 73H, 2FH, 2FH, 25H, 73H, 2FH, 2FH
   \              0x2F 0x2F    
   \              0x25 0x73    
   \              0x2F 0x2F    
   \   00000030   0x25 0x73          DC8 25H, 73H, 2FH, 2FH, 25H, 73H, 3CH, 2FH
   \              0x2F 0x2F    
   \              0x25 0x73    
   \              0x3C 0x2F    
   \   00000038   0x53 0x54          DC8 53H, 54H, 41H, 54H, 55H, 53H, 3EH, 0
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_116:
   \   00000000   0x25 0x73          DC8 "%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\015\012"
   \              0x2C 0x25    
   \              0x73 0x2C    
   \              0x25 0x73    
   \              0x2C 0x25    
   \              0x73 0x2C    
   \              0x25 0x73    
   \              0x2C 0x25    
   \              0x73 0x2C    
   \              0x25 0x73    
   \              0x2C 0x25    
   \              0x73 0x2C    
   \              0x25 0x73    
   \              0x2C 0x25    
   \              0x73 0x2C    
   \              0x25 0x73    
   \              0x2C 0x25    
   \              0x73 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_117:
   \   00000000   0x43 0x4F          DC8 "COMPLETE"
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_118:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TC_HWERR_PRESSUE</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x5F 0x48    
   \              0x57 0x45    
   \              0x52 0x52    
   \              0x5F 0x50    
   \              0x52 0x45    
   \              0x53 0x53    
   \              0x55 0x45    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_119:
   \   00000000   0x50 0x72          DC8 "Pressure TASKING ERROR!"
   \              0x65 0x73    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x20 0x54    
   \              0x41 0x53    
   \              0x4B 0x49    
   \              0x4E 0x47    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x21 0x00    

   \                                 In section .rodata, align 4
   \                     ?_120:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TC_HWERR_HUMIDITY</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x5F 0x48    
   \              0x57 0x45    
   \              0x52 0x52    
   \              0x5F 0x48    
   \              0x55 0x4D    
   \              0x49 0x44    
   \              0x49 0x54    
   \              0x59 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_121:
   \   00000000   0x48 0x75          DC8 "Humidity TASKING ERROR!"
   \              0x6D 0x69    
   \              0x64 0x69    
   \              0x74 0x79    
   \              0x20 0x54    
   \              0x41 0x53    
   \              0x4B 0x49    
   \              0x4E 0x47    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x21 0x00    

   \                                 In section .rodata, align 4
   \                     ?_122:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TC_HWERR_TEMPERATURE</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x5F 0x48    
   \              0x57 0x45    
   \              0x52 0x52    
   \              0x5F 0x54    
   \              0x45 0x4D    
   \              0x50 0x45    
   \              0x52 0x41    
   \              0x54 0x55    
   \              0x52 0x45    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000002A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_123:
   \   00000000   0x41 0x4D          DC8 "AMBIENT TEMPERATURE TASKING ERROR!"
   \              0x42 0x49    
   \              0x45 0x4E    
   \              0x54 0x20    
   \              0x54 0x45    
   \              0x4D 0x50    
   \              0x45 0x52    
   \              0x41 0x54    
   \              0x55 0x52    
   \              0x45 0x20    
   \              0x54 0x41    
   \              0x53 0x4B    
   \              0x49 0x4E    
   \              0x47 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x21    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_124:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TC_HWERR_IRTEMP</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x5F 0x48    
   \              0x57 0x45    
   \              0x52 0x52    
   \              0x5F 0x49    
   \              0x52 0x54    
   \              0x45 0x4D    
   \              0x50 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_125:
   \   00000000   0x47 0x52          DC8 "GRID EYE/COOL EYE TASKING ERROR!"
   \              0x49 0x44    
   \              0x20 0x45    
   \              0x59 0x45    
   \              0x2F 0x43    
   \              0x4F 0x4F    
   \              0x4C 0x20    
   \              0x45 0x59    
   \              0x45 0x20    
   \              0x54 0x41    
   \              0x53 0x4B    
   \              0x49 0x4E    
   \              0x47 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x21    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_126:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TCS_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x53 0x5F    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_127:
   \   00000000   0x54 0x43          DC8 "TCS SYNTAX ERROR: Not correct format.\015\012"
   \              0x53 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x4E 0x6F    
   \              0x74 0x20    
   \              0x63 0x6F    
   \              0x72 0x72    
   \              0x65 0x63    
   \              0x74 0x20    
   \              0x66 0x6F    
   \              0x72 0x6D    
   \              0x61 0x74    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_128:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TCS_BADPARAM</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x53 0x5F    
   \              0x42 0x41    
   \              0x44 0x50    
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_129:
   \   00000000   0x54 0x43          DC8 "TCS SYNTAX ERROR: Bad Parameter.\015\012"
   \              0x53 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x42 0x61    
   \              0x64 0x20    
   \              0x50 0x61    
   \              0x72 0x61    
   \              0x6D 0x65    
   \              0x74 0x65    
   \              0x72 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_130:
   \   00000000   0x25 0x73          DC8 "%s %f %f"
   \              0x20 0x25    
   \              0x66 0x20    
   \              0x25 0x66    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_131:
   \   00000000   0x50 0x61          DC8 "Parms: %s, %f, %f.\015\012"
   \              0x72 0x6D    
   \              0x73 0x3A    
   \              0x20 0x25    
   \              0x73 0x2C    
   \              0x20 0x25    
   \              0x66 0x2C    
   \              0x20 0x25    
   \              0x66 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_132:
   \   00000000   0x30 0x30          DC8 "0002"
   \              0x30 0x32    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_133:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_SHNT_VLTG</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x53    
   \              0x48 0x4E    
   \              0x54 0x5F    
   \              0x56 0x4C    
   \              0x54 0x47    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_134:
   \   00000000   0x53 0x68          DC8 "Shnt_Vltg Set COMPLETE.\015\012"
   \              0x6E 0x74    
   \              0x5F 0x56    
   \              0x6C 0x74    
   \              0x67 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_135:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_SHNT_VLTG_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x53    
   \              0x48 0x4E    
   \              0x54 0x5F    
   \              0x56 0x4C    
   \              0x54 0x47    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_136:
   \   00000000   0x54 0x43          DC8 "TCS SET ERROR: FAILED.\015\012"
   \              0x53 0x20    
   \              0x53 0x45    
   \              0x54 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x46    
   \              0x41 0x49    
   \              0x4C 0x45    
   \              0x44 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_137:
   \   00000000   0x30 0x30          DC8 "0004"
   \              0x30 0x34    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_138:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_CURRENT</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x43    
   \              0x55 0x52    
   \              0x52 0x45    
   \              0x4E 0x54    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_139:
   \   00000000   0x43 0x75          DC8 "Current Set COMPLETE."
   \              0x72 0x72    
   \              0x65 0x6E    
   \              0x74 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_140:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_CURRENT_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x43    
   \              0x55 0x52    
   \              0x52 0x45    
   \              0x4E 0x54    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_141:
   \   00000000   0x30 0x30          DC8 "0006"
   \              0x30 0x36    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_142:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_POWER</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x50    
   \              0x4F 0x57    
   \              0x45 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_143:
   \   00000000   0x50 0x6F          DC8 "Power Set COMPLETE."
   \              0x77 0x65    
   \              0x72 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_144:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_POWER_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x50    
   \              0x4F 0x57    
   \              0x45 0x52    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_145:
   \   00000000   0x30 0x30          DC8 "0008"
   \              0x30 0x38    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_146:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_VOLTAGE</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x56    
   \              0x4F 0x4C    
   \              0x54 0x41    
   \              0x47 0x45    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_147:
   \   00000000   0x56 0x6F          DC8 "Voltage Set COMPLETE."
   \              0x6C 0x74    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_148:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_VOLTAGE_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x56    
   \              0x4F 0x4C    
   \              0x54 0x41    
   \              0x47 0x45    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_149:
   \   00000000   0x30 0x30          DC8 "000A"
   \              0x30 0x41    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_150:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_TEMPC</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x54    
   \              0x45 0x4D    
   \              0x50 0x43    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_151:
   \   00000000   0x54 0x65          DC8 "TempC Set COMPLETE."
   \              0x6D 0x70    
   \              0x43 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_152:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_TEMPC_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x54    
   \              0x45 0x4D    
   \              0x50 0x43    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_153:
   \   00000000   0x30 0x30          DC8 "000B"
   \              0x30 0x42    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_154:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_TEMPF</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x54    
   \              0x45 0x4D    
   \              0x50 0x46    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_155:
   \   00000000   0x54 0x65          DC8 "TempF Set COMPLETE."
   \              0x6D 0x70    
   \              0x46 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_156:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_TEMPF_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x54    
   \              0x45 0x4D    
   \              0x50 0x46    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_157:
   \   00000000   0x30 0x30          DC8 "0011"
   \              0x31 0x31    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_158:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_PRESSURE</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x50    
   \              0x52 0x45    
   \              0x53 0x53    
   \              0x55 0x52    
   \              0x45 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_159:
   \   00000000   0x50 0x72          DC8 "Pressure Set COMPLETE."
   \              0x65 0x73    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_160:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_PRESSURE_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x50    
   \              0x52 0x45    
   \              0x53 0x53    
   \              0x55 0x52    
   \              0x45 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_161:
   \   00000000   0x30 0x30          DC8 "0030"
   \              0x33 0x30    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_162:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_HUMIDITY</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x48    
   \              0x55 0x4D    
   \              0x49 0x44    
   \              0x49 0x54    
   \              0x59 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_163:
   \   00000000   0x48 0x75          DC8 "Humidity Set COMPLETE."
   \              0x6D 0x69    
   \              0x64 0x69    
   \              0x74 0x79    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_164:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_HUMIDITY_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x48    
   \              0x55 0x4D    
   \              0x49 0x44    
   \              0x49 0x54    
   \              0x59 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_165:
   \   00000000   0x30 0x30          DC8 "0032"
   \              0x33 0x32    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_166:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_HUM_TEMPC</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x48    
   \              0x55 0x4D    
   \              0x5F 0x54    
   \              0x45 0x4D    
   \              0x50 0x43    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_167:
   \   00000000   0x48 0x75          DC8 "Hum_TempC Set COMPLETE."
   \              0x6D 0x5F    
   \              0x54 0x65    
   \              0x6D 0x70    
   \              0x43 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_168:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_HUM_TEMPC_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x48    
   \              0x55 0x4D    
   \              0x5F 0x54    
   \              0x45 0x4D    
   \              0x50 0x43    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_169:
   \   00000000   0x30 0x30          DC8 "0033"
   \              0x33 0x33    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_170:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_HUM_TEMPF</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x48    
   \              0x55 0x4D    
   \              0x5F 0x54    
   \              0x45 0x4D    
   \              0x50 0x46    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_171:
   \   00000000   0x48 0x75          DC8 "Hum_TempF Set COMPLETE."
   \              0x6D 0x5F    
   \              0x54 0x65    
   \              0x6D 0x70    
   \              0x46 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_172:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_HUM_TEMPF_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x48    
   \              0x55 0x4D    
   \              0x5F 0x54    
   \              0x45 0x4D    
   \              0x50 0x46    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_173:
   \   00000000   0x30 0x30          DC8 "000D"
   \              0x30 0x44    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_174:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_RGB_RED</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x47 0x42    
   \              0x5F 0x52    
   \              0x45 0x44    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_175:
   \   00000000   0x52 0x47          DC8 "RGB_Red Set COMPLETE."
   \              0x42 0x5F    
   \              0x52 0x65    
   \              0x64 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_176:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_RGB_RED_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x47 0x42    
   \              0x5F 0x52    
   \              0x45 0x44    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_177:
   \   00000000   0x30 0x30          DC8 "000E"
   \              0x30 0x45    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_178:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_RGB_GREEN</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x47 0x42    
   \              0x5F 0x47    
   \              0x52 0x45    
   \              0x45 0x4E    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_179:
   \   00000000   0x52 0x47          DC8 "RGB_Green Set COMPLETE."
   \              0x42 0x5F    
   \              0x47 0x72    
   \              0x65 0x65    
   \              0x6E 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_180:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_RGB_GREEN_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x47 0x42    
   \              0x5F 0x47    
   \              0x52 0x45    
   \              0x45 0x4E    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_181:
   \   00000000   0x30 0x30          DC8 "000F"
   \              0x30 0x46    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_182:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_RGB_BLUE</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x47 0x42    
   \              0x5F 0x42    
   \              0x4C 0x55    
   \              0x45 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_183:
   \   00000000   0x52 0x47          DC8 "RGB_Blue Set COMPLETE."
   \              0x42 0x5F    
   \              0x42 0x6C    
   \              0x75 0x65    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_184:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_RGB_BLUE_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x47 0x42    
   \              0x5F 0x42    
   \              0x4C 0x55    
   \              0x45 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_185:
   \   00000000   0x30 0x30          DC8 "0017"
   \              0x31 0x37    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_186:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_THERM_C</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x54    
   \              0x48 0x45    
   \              0x52 0x4D    
   \              0x5F 0x43    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_187:
   \   00000000   0x54 0x68          DC8 "Therm_C Set COMPLETE."
   \              0x65 0x72    
   \              0x6D 0x5F    
   \              0x43 0x20    
   \              0x53 0x65    
   \              0x74 0x20    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x4C 0x45    
   \              0x54 0x45    
   \              0x2E 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_188:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_THERM_C_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x54    
   \              0x48 0x45    
   \              0x52 0x4D    
   \              0x5F 0x43    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_189:
   \   00000000   0x30 0x30          DC8 "0019"
   \              0x31 0x39    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_190:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_1C</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x31    
   \              0x43 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_191:
   \   00000000   0x52 0x6F          DC8 "RoadT_1C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x31 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_192:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_1C_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x31    
   \              0x43 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_193:
   \   00000000   0x30 0x30          DC8 "001B"
   \              0x31 0x42    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_194:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_2C</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x32    
   \              0x43 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_195:
   \   00000000   0x52 0x6F          DC8 "RoadT_2C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x32 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_196:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_2C_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x32    
   \              0x43 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_197:
   \   00000000   0x30 0x30          DC8 "001D"
   \              0x31 0x44    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_198:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_3C</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x33    
   \              0x43 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_199:
   \   00000000   0x52 0x6F          DC8 "RoadT_3C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x33 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_200:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_3C_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x33    
   \              0x43 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_201:
   \   00000000   0x30 0x30          DC8 "001F"
   \              0x31 0x46    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_202:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_4C</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x34    
   \              0x43 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_203:
   \   00000000   0x52 0x6F          DC8 "RoadT_4C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x34 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_204:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_4C_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x34    
   \              0x43 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_205:
   \   00000000   0x30 0x30          DC8 "0021"
   \              0x32 0x31    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_206:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_5C</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x35    
   \              0x43 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_207:
   \   00000000   0x52 0x6F          DC8 "RoadT_5C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x35 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_208:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_5C_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x35    
   \              0x43 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_209:
   \   00000000   0x30 0x30          DC8 "0023"
   \              0x32 0x33    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_210:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_6C</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x36    
   \              0x43 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_211:
   \   00000000   0x52 0x6F          DC8 "RoadT_6C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x36 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_212:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_6C_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x36    
   \              0x43 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_213:
   \   00000000   0x30 0x30          DC8 "0025"
   \              0x32 0x35    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_214:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_7C</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x37    
   \              0x43 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_215:
   \   00000000   0x52 0x6F          DC8 "RoadT_7C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x37 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_216:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_7C_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x37    
   \              0x43 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_217:
   \   00000000   0x30 0x30          DC8 "0027"
   \              0x32 0x37    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_218:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_8C</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x38    
   \              0x43 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_219:
   \   00000000   0x52 0x6F          DC8 "RoadT_8C Set COMPLETE."
   \              0x61 0x64    
   \              0x54 0x5F    
   \              0x38 0x43    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_220:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCS_ROADT_8C_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x53    
   \              0x5F 0x52    
   \              0x4F 0x41    
   \              0x44 0x54    
   \              0x5F 0x38    
   \              0x43 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_221:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TCS_BADUUID</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x53 0x5F    
   \              0x42 0x41    
   \              0x44 0x55    
   \              0x55 0x49    
   \              0x44 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_222:
   \   00000000   0x54 0x43          DC8 "TCS SYNTAX ERROR: Bad UUID.\015\012"
   \              0x53 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x42 0x61    
   \              0x64 0x20    
   \              0x55 0x55    
   \              0x49 0x44    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_223:
   \   00000000   0x54 0x43          DC8 "TCS SYNTAX ERROR: Wrong Number of Parameters.\015\012"
   \              0x53 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x57 0x72    
   \              0x6F 0x6E    
   \              0x67 0x20    
   \              0x4E 0x75    
   \              0x6D 0x62    
   \              0x65 0x72    
   \              0x20 0x6F    
   \              0x66 0x20    
   \              0x50 0x61    
   \              0x72 0x61    
   \              0x6D 0x65    
   \              0x74 0x65    
   \              0x72 0x73    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_224:
   \   00000000   0x3C 0x53          DC8 "<STATUS>TCR:%s\\"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x54 0x43    
   \              0x52 0x3A    
   \              0x25 0x73    
   \              0x5C 0x00    

   \                                 In section .rodata, align 4
   \                     ?_225:
   \   00000000   0x43 0x41          DC8 "CALIBRATION DATA\015\012Date: %s\015\012"
   \              0x4C 0x49    
   \              0x42 0x52    
   \              0x41 0x54    
   \              0x49 0x4F    
   \              0x4E 0x20    
   \              0x44 0x41    
   \              0x54 0x41    
   \              0x0D 0x0A    
   \              0x44 0x61    
   \              0x74 0x65    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_226:
   \   00000000   0x4E 0x61          DC8 "Name\t\t        UUID\t\tSlope\t\tOffset\015\012"
   \              0x6D 0x65    
   \              0x09 0x09    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x55 0x55    
   \              0x49 0x44    
   \              0x09 0x09    
   \              0x53 0x6C    
   \              0x6F 0x70    
   \              0x65 0x09    
   \              0x09 0x4F    
   \              0x66 0x66    
   \              0x73 0x65    
   \              0x74 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_227:
   \   00000000   0x25 0x73          DC8 "%s:0002//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x30    
   \              0x32 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_228:
   \   00000000   0x25 0x73          DC8 "%s\t0002\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x30    
   \              0x32 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_229:
   \   00000000   0x25 0x73          DC8 "%s:0004//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x30    
   \              0x34 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_230:
   \   00000000   0x25 0x73          DC8 "%s\t        0004\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x30    
   \              0x30 0x30    
   \              0x34 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_231:
   \   00000000   0x25 0x73          DC8 "%s:0006//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x30    
   \              0x36 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_232:
   \   00000000   0x25 0x73          DC8 "%s\t0006\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x30    
   \              0x36 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_233:
   \   00000000   0x25 0x73          DC8 "%s:0008//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x30    
   \              0x38 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_234:
   \   00000000   0x25 0x73          DC8 "%s\t        0008\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x30    
   \              0x30 0x30    
   \              0x38 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_235:
   \   00000000   0x25 0x73          DC8 "%s:000A//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x30    
   \              0x41 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_236:
   \   00000000   0x25 0x73          DC8 "%s\t000A\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x30    
   \              0x41 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_237:
   \   00000000   0x25 0x73          DC8 "%s:000B//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x30    
   \              0x42 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_238:
   \   00000000   0x25 0x73          DC8 "%s\t000B\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x30    
   \              0x42 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_239:
   \   00000000   0x25 0x73          DC8 "%s:0011//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x31    
   \              0x31 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_240:
   \   00000000   0x25 0x73          DC8 "%s\t0011\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x31    
   \              0x31 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_241:
   \   00000000   0x25 0x73          DC8 "%s:0030//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x33    
   \              0x30 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_242:
   \   00000000   0x25 0x73          DC8 "%s\t0030\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x33    
   \              0x30 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_243:
   \   00000000   0x25 0x73          DC8 "%s:0032//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x33    
   \              0x32 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_244:
   \   00000000   0x25 0x73          DC8 "%s\t0032\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x33    
   \              0x32 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_245:
   \   00000000   0x25 0x73          DC8 "%s:0033//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x33    
   \              0x33 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_246:
   \   00000000   0x25 0x73          DC8 "%s\t0033\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x33    
   \              0x33 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_247:
   \   00000000   0x25 0x73          DC8 "%s:000D//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x30    
   \              0x44 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_248:
   \   00000000   0x25 0x73          DC8 "%s\t        000D\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x30    
   \              0x30 0x30    
   \              0x44 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_249:
   \   00000000   0x25 0x73          DC8 "%s:000E//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x30    
   \              0x45 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_250:
   \   00000000   0x25 0x73          DC8 "%s\t000E\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x30    
   \              0x45 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_251:
   \   00000000   0x25 0x73          DC8 "%s:000F//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x30    
   \              0x46 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_252:
   \   00000000   0x25 0x73          DC8 "%s\t000F\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x30    
   \              0x46 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_253:
   \   00000000   0x25 0x73          DC8 "%s:0017//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x31    
   \              0x37 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_254:
   \   00000000   0x25 0x73          DC8 "%s\t        0017\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x30    
   \              0x30 0x31    
   \              0x37 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_255:
   \   00000000   0x25 0x73          DC8 "%s:0019//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x31    
   \              0x39 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_256:
   \   00000000   0x25 0x73          DC8 "%s\t0019\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x31    
   \              0x39 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_257:
   \   00000000   0x25 0x73          DC8 "%s:001B//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x31    
   \              0x42 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_258:
   \   00000000   0x25 0x73          DC8 "%s\t001B\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x31    
   \              0x42 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_259:
   \   00000000   0x25 0x73          DC8 "%s:001D//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x31    
   \              0x44 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_260:
   \   00000000   0x25 0x73          DC8 "%s\t001D\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x31    
   \              0x44 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_261:
   \   00000000   0x25 0x73          DC8 "%s:001F//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x31    
   \              0x46 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_262:
   \   00000000   0x25 0x73          DC8 "%s\t001F\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x31    
   \              0x46 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_263:
   \   00000000   0x25 0x73          DC8 "%s:0021//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x32    
   \              0x31 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_264:
   \   00000000   0x25 0x73          DC8 "%s\t0021\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x32    
   \              0x31 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_265:
   \   00000000   0x25 0x73          DC8 "%s:0023//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x32    
   \              0x33 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_266:
   \   00000000   0x25 0x73          DC8 "%s\t0023\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x32    
   \              0x33 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_267:
   \   00000000   0x25 0x73          DC8 "%s:0025//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x32    
   \              0x35 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_268:
   \   00000000   0x25 0x73          DC8 "%s\t0025\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x32    
   \              0x35 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_269:
   \   00000000   0x25 0x73          DC8 "%s:0027//%1.4f//%2.3f//"
   \              0x3A 0x30    
   \              0x30 0x32    
   \              0x37 0x2F    
   \              0x2F 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x2F 0x2F    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x2F    
   \              0x2F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_270:
   \   00000000   0x25 0x73          DC8 "%s\t0027\t\t%1.4f\t\t%2.3f\015\012"
   \              0x09 0x30    
   \              0x30 0x32    
   \              0x37 0x09    
   \              0x09 0x25    
   \              0x31 0x2E    
   \              0x34 0x66    
   \              0x09 0x09    
   \              0x25 0x32    
   \              0x2E 0x33    
   \              0x66 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_271:
   \   00000000   0x0D 0x0A          DC8 "\015\012     COMPLETE.\015\012"
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x43    
   \              0x4F 0x4D    
   \              0x50 0x4C    
   \              0x45 0x54    
   \              0x45 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_272:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TCT_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x54 0x5F    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_273:
   \   00000000   0x54 0x43          DC8 "TCT SYNTAX ERROR: Not correct format.\015\012"
   \              0x54 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x4E 0x6F    
   \              0x74 0x20    
   \              0x63 0x6F    
   \              0x72 0x72    
   \              0x65 0x63    
   \              0x74 0x20    
   \              0x66 0x6F    
   \              0x72 0x6D    
   \              0x61 0x74    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_274:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TCT_BADPARAM</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x54 0x5F    
   \              0x42 0x41    
   \              0x44 0x50    
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_275:
   \   00000000   0x54 0x43          DC8 "TCT SYNTAX ERROR: Bad Parameter.\015\012"
   \              0x54 0x20    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3A 0x20    
   \              0x42 0x61    
   \              0x64 0x20    
   \              0x50 0x61    
   \              0x72 0x61    
   \              0x6D 0x65    
   \              0x74 0x65    
   \              0x72 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_276:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TCT_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x54 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_277:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCT_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x54    
   \              0x5F 0x41    
   \              0x43 0x4B    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_278:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TCI_ERR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x43    
   \              0x49 0x5F    
   \              0x45 0x52    
   \              0x52 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_279:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TCI_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x43 0x49    
   \              0x5F 0x41    
   \              0x43 0x4B    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_280:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_DRIVER:%04x</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x44    
   \              0x52 0x49    
   \              0x56 0x45    
   \              0x52 0x3A    
   \              0x25 0x30    
   \              0x34 0x78    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_281:
   \   00000000   0x44 0x72          DC8 "Driver Status: %04x\015\012"
   \              0x69 0x76    
   \              0x65 0x72    
   \              0x20 0x53    
   \              0x74 0x61    
   \              0x74 0x75    
   \              0x73 0x3A    
   \              0x20 0x25    
   \              0x30 0x34    
   \              0x78 0x0D    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_282:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_RESET_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x52    
   \              0x45 0x53    
   \              0x45 0x54    
   \              0x5F 0x41    
   \              0x43 0x4B    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_283:
   \   00000000   0x52 0x45          DC8 "RESET CALLED BUT NO RESPONSE!!\015\012"
   \              0x53 0x45    
   \              0x54 0x20    
   \              0x43 0x41    
   \              0x4C 0x4C    
   \              0x45 0x44    
   \              0x20 0x42    
   \              0x55 0x54    
   \              0x20 0x4E    
   \              0x4F 0x20    
   \              0x52 0x45    
   \              0x53 0x50    
   \              0x4F 0x4E    
   \              0x53 0x45    
   \              0x21 0x21    
   \              0x0D 0x0A    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_284:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TK_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x5F 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_285:
   \   00000000   0x54 0x4B          DC8 "TK SYNTAX ERROR: Not correct format.\015\012"
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x63    
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_286:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKSR_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x53 0x52    
   \              0x5F 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_287:
   \   00000000   0x54 0x4B          DC8 "TKSR SYNTAX ERROR: Not correct format.\015\012"
   \              0x53 0x52    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x63    
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_288:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKSR_BADPARAM</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x53 0x52    
   \              0x5F 0x42    
   \              0x41 0x44    
   \              0x50 0x41    
   \              0x52 0x41    
   \              0x4D 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_289:
   \   00000000   0x54 0x4B          DC8 "TKSR SYNTAX ERROR: Bad Parameter.\015\012"
   \              0x53 0x52    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x61 0x64    
   \              0x20 0x50    
   \              0x61 0x72    
   \              0x61 0x6D    
   \              0x65 0x74    
   \              0x65 0x72    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_290:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TKSR_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x4B 0x53    
   \              0x52 0x5F    
   \              0x41 0x43    
   \              0x4B 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_291:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKSS_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x53 0x53    
   \              0x5F 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_292:
   \   00000000   0x54 0x4B          DC8 "TKSS SYNTAX ERROR: Not correct format.\015\012"
   \              0x53 0x53    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x63    
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_293:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKSS_BADPARAM</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x53 0x53    
   \              0x5F 0x42    
   \              0x41 0x44    
   \              0x50 0x41    
   \              0x52 0x41    
   \              0x4D 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_294:
   \   00000000   0x54 0x4B          DC8 "TKSS SYNTAX ERROR: Bad Parameter.\015\012"
   \              0x53 0x53    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x61 0x64    
   \              0x20 0x50    
   \              0x61 0x72    
   \              0x61 0x6D    
   \              0x65 0x74    
   \              0x65 0x72    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_295:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TKSS_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x4B 0x53    
   \              0x53 0x5F    
   \              0x41 0x43    
   \              0x4B 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_296:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKST_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x53 0x54    
   \              0x5F 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_297:
   \   00000000   0x54 0x4B          DC8 "TKST SYNTAX ERROR: Not correct format.\015\012"
   \              0x53 0x54    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x63    
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_298:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKST_BADPARAM</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x53 0x54    
   \              0x5F 0x42    
   \              0x41 0x44    
   \              0x50 0x41    
   \              0x52 0x41    
   \              0x4D 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_299:
   \   00000000   0x54 0x4B          DC8 "TKST SYNTAX ERROR: Bad Parameter.\015\012"
   \              0x53 0x54    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x61 0x64    
   \              0x20 0x50    
   \              0x61 0x72    
   \              0x61 0x6D    
   \              0x65 0x74    
   \              0x65 0x72    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_300:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TKST_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x4B 0x53    
   \              0x54 0x5F    
   \              0x41 0x43    
   \              0x4B 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_301:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKSB_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x53 0x42    
   \              0x5F 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_302:
   \   00000000   0x54 0x4B          DC8 "TKSB SYNTAX ERROR: Not correct format.\015\012"
   \              0x53 0x42    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x63    
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_303:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKSB_BADPARAM</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x53 0x42    
   \              0x5F 0x42    
   \              0x41 0x44    
   \              0x50 0x41    
   \              0x52 0x41    
   \              0x4D 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_304:
   \   00000000   0x54 0x4B          DC8 "TKSB SYNTAX ERROR: Bad Parameter.\015\012"
   \              0x53 0x42    
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x61 0x64    
   \              0x20 0x50    
   \              0x61 0x72    
   \              0x61 0x6D    
   \              0x65 0x74    
   \              0x65 0x72    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_305:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TKSB_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x4B 0x53    
   \              0x42 0x5F    
   \              0x41 0x43    
   \              0x4B 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_306:
   \   00000000   0x54 0x4B          DC8 "TKS ERROR: Not a legal command.\015\012"
   \              0x53 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x61    
   \              0x20 0x6C    
   \              0x65 0x67    
   \              0x61 0x6C    
   \              0x20 0x63    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_307:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TKRR:%3.1f</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x4B 0x52    
   \              0x52 0x3A    
   \              0x25 0x33    
   \              0x2E 0x31    
   \              0x66 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_308:
   \   00000000   0x52 0x64          DC8 "RdSnd Sample Rate:  %3.1f Seconds.\015\012"
   \              0x53 0x6E    
   \              0x64 0x20    
   \              0x53 0x61    
   \              0x6D 0x70    
   \              0x6C 0x65    
   \              0x20 0x52    
   \              0x61 0x74    
   \              0x65 0x3A    
   \              0x20 0x20    
   \              0x25 0x33    
   \              0x2E 0x31    
   \              0x66 0x20    
   \              0x53 0x65    
   \              0x63 0x6F    
   \              0x6E 0x64    
   \              0x73 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_309:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TKRS:%3.1f</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x4B 0x52    
   \              0x53 0x3A    
   \              0x25 0x33    
   \              0x2E 0x31    
   \              0x66 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_310:
   \   00000000   0x53 0x65          DC8 "Sensor Sample Rate: %3.1f Seconds.\015\012\015\012> "
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x53    
   \              0x61 0x6D    
   \              0x70 0x6C    
   \              0x65 0x20    
   \              0x52 0x61    
   \              0x74 0x65    
   \              0x3A 0x20    
   \              0x25 0x33    
   \              0x2E 0x31    
   \              0x66 0x20    
   \              0x53 0x65    
   \              0x63 0x6F    
   \              0x6E 0x64    
   \              0x73 0x2E    
   \              0x0D 0x0A    
   \              0x0D 0x0A    
   \              0x3E 0x20    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_311:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TKRT:%d</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x4B 0x52    
   \              0x54 0x3A    
   \              0x25 0x64    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_312:
   \   00000000   0x54 0x41          DC8 "TACK Limit: %d.\015\012\015\012> "
   \              0x43 0x4B    
   \              0x20 0x4C    
   \              0x69 0x6D    
   \              0x69 0x74    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x0D    
   \              0x0A 0x3E    
   \              0x20 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_313:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TKRB:%d</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x4B 0x52    
   \              0x42 0x3A    
   \              0x25 0x64    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_314:
   \   00000000   0x42 0x6F          DC8 "Boot Delay: %d Seconds.\015\012\015\012> "
   \              0x6F 0x74    
   \              0x20 0x44    
   \              0x65 0x6C    
   \              0x61 0x79    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x20 0x53    
   \              0x65 0x63    
   \              0x6F 0x6E    
   \              0x64 0x73    
   \              0x2E 0x0D    
   \              0x0A 0x0D    
   \              0x0A 0x3E    
   \              0x20 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_315:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TKR_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x4B    
   \              0x52 0x5F    
   \              0x53 0x59    
   \              0x4E 0x54    
   \              0x41 0x58    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_316:
   \   00000000   0x54 0x4B          DC8 "TKR ERROR: Not a legal command.\015\012"
   \              0x52 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x61    
   \              0x20 0x6C    
   \              0x65 0x67    
   \              0x61 0x6C    
   \              0x20 0x63    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_317:
   \   00000000   0x3C 0x53          DC8 "<STATUS>CMD_TU_SYNTAX</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x43 0x4D    
   \              0x44 0x5F    
   \              0x54 0x55    
   \              0x5F 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x3C    
   \              0x2F 0x53    
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_318:
   \   00000000   0x54 0x55          DC8 "TU SYNTAX ERROR: Not correct format.\015\012"
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x63    
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x6D 0x61    
   \              0x74 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_319:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TUE_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x55 0x45    
   \              0x5F 0x41    
   \              0x43 0x4B    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_320:
   \   00000000   0x55 0x6E          DC8 "Units XML State CHANGED: ENABLED\015\012\015\012> "
   \              0x69 0x74    
   \              0x73 0x20    
   \              0x58 0x4D    
   \              0x4C 0x20    
   \              0x53 0x74    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x43 0x48    
   \              0x41 0x4E    
   \              0x47 0x45    
   \              0x44 0x3A    
   \              0x20 0x45    
   \              0x4E 0x41    
   \              0x42 0x4C    
   \              0x45 0x44    
   \              0x0D 0x0A    
   \              0x0D 0x0A    
   \              0x3E 0x20    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_321:
   \   00000000   0x3C 0x53          DC8 "<STATUS>ST_TUD_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x55 0x44    
   \              0x5F 0x41    
   \              0x43 0x4B    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_322:
   \   00000000   0x55 0x6E          DC8 "Units XML State CHANGED: DISABLED\015\012\015\012> "
   \              0x69 0x74    
   \              0x73 0x20    
   \              0x58 0x4D    
   \              0x4C 0x20    
   \              0x53 0x74    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x43 0x48    
   \              0x41 0x4E    
   \              0x47 0x45    
   \              0x44 0x3A    
   \              0x20 0x44    
   \              0x49 0x53    
   \              0x41 0x42    
   \              0x4C 0x45    
   \              0x44 0x0D    
   \              0x0A 0x0D    
   \              0x0A 0x3E    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_323:
   \   00000000   0x54 0x55          DC8 "TU SYNTAX ERROR: Not a legal command.\015\012"
   \              0x20 0x53    
   \              0x59 0x4E    
   \              0x54 0x41    
   \              0x58 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x61    
   \              0x20 0x6C    
   \              0x65 0x67    
   \              0x61 0x6C    
   \              0x20 0x63    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_324:
   \   00000000   0x42 0x47          DC8 "BGM111 MONITOR MODE.\015\012\015\012"
   \              0x4D 0x31    
   \              0x31 0x31    
   \              0x20 0x4D    
   \              0x4F 0x4E    
   \              0x49 0x54    
   \              0x4F 0x52    
   \              0x20 0x4D    
   \              0x4F 0x44    
   \              0x45 0x2E    
   \              0x0D 0x0A    
   \              0x0D 0x0A    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_325:
   \   00000000   0x55 0x73          DC8 "Use <ESC> to exit mode.\015\012\015\012"
   \              0x65 0x20    
   \              0x3C 0x45    
   \              0x53 0x43    
   \              0x3E 0x20    
   \              0x74 0x6F    
   \              0x20 0x65    
   \              0x78 0x69    
   \              0x74 0x20    
   \              0x6D 0x6F    
   \              0x64 0x65    
   \              0x2E 0x0D    
   \              0x0A 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_326:
   \   00000000   0x3C 0x53          DC8 "<STATUS>TF_ACK</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x54 0x46    
   \              0x5F 0x41    
   \              0x43 0x4B    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_327:
   \   00000000   0x46 0x6C          DC8 "Flash Frame Variables Reset to Factory Values.\015\012"
   \              0x61 0x73    
   \              0x68 0x20    
   \              0x46 0x72    
   \              0x61 0x6D    
   \              0x65 0x20    
   \              0x56 0x61    
   \              0x72 0x69    
   \              0x61 0x62    
   \              0x6C 0x65    
   \              0x73 0x20    
   \              0x52 0x65    
   \              0x73 0x65    
   \              0x74 0x20    
   \              0x74 0x6F    
   \              0x20 0x46    
   \              0x61 0x63    
   \              0x74 0x6F    
   \              0x72 0x79    
   \              0x20 0x56    
   \              0x61 0x6C    
   \              0x75 0x65    
   \              0x73 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000031   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_328:
   \   00000000   0x3C 0x53          DC8 "<STATUS>TL_ERROR</STATUS>"
   \              0x54 0x41    
   \              0x54 0x55    
   \              0x53 0x3E    
   \              0x54 0x4C    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x3C 0x2F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3E 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_329:
   \   00000000   0x43 0x6F          DC8 "Code Locked for Programming!\015\012\015\012"
   \              0x64 0x65    
   \              0x20 0x4C    
   \              0x6F 0x63    
   \              0x6B 0x65    
   \              0x64 0x20    
   \              0x66 0x6F    
   \              0x72 0x20    
   \              0x50 0x72    
   \              0x6F 0x67    
   \              0x72 0x61    
   \              0x6D 0x6D    
   \              0x69 0x6E    
   \              0x67 0x21    
   \              0x0D 0x0A    
   \              0x0D 0x0A    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_330:
   \   00000000   0x20 0x20          DC8 "   HARD RESET NEEDED TO EXIT MODE\015\012"
   \              0x20 0x48    
   \              0x41 0x52    
   \              0x44 0x20    
   \              0x52 0x45    
   \              0x53 0x45    
   \              0x54 0x20    
   \              0x4E 0x45    
   \              0x45 0x44    
   \              0x45 0x44    
   \              0x20 0x54    
   \              0x4F 0x20    
   \              0x45 0x58    
   \              0x49 0x54    
   \              0x20 0x4D    
   \              0x4F 0x44    
   \              0x45 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_331:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: BERR: Bus Error reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x45 0x52    
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x75 0x73    
   \              0x20 0x45    
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x20 0x72    
   \              0x65 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_332:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: ARLO: Arbitration lost reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x41    
   \              0x52 0x4C    
   \              0x4F 0x3A    
   \              0x20 0x41    
   \              0x72 0x62    
   \              0x69 0x74    
   \              0x72 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x6C    
   \              0x6F 0x73    
   \              0x74 0x20    
   \              0x72 0x65    
   \              0x70 0x6F    
   \              0x72 0x74    
   \              0x65 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   0000002E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_333:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: AF: Acknowledge failure reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x41    
   \              0x46 0x3A    
   \              0x20 0x41    
   \              0x63 0x6B    
   \              0x6E 0x6F    
   \              0x77 0x6C    
   \              0x65 0x64    
   \              0x67 0x65    
   \              0x20 0x66    
   \              0x61 0x69    
   \              0x6C 0x75    
   \              0x72 0x65    
   \              0x20 0x72    
   \              0x65 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_334:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: OVR: Overrun/Underrun reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4F    
   \              0x56 0x52    
   \              0x3A 0x20    
   \              0x4F 0x76    
   \              0x65 0x72    
   \              0x72 0x75    
   \              0x6E 0x2F    
   \              0x55 0x6E    
   \              0x64 0x65    
   \              0x72 0x72    
   \              0x75 0x6E    
   \              0x20 0x72    
   \              0x65 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_335:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: DMA: DMA Error reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x44    
   \              0x4D 0x41    
   \              0x3A 0x20    
   \              0x44 0x4D    
   \              0x41 0x20    
   \              0x45 0x72    
   \              0x72 0x6F    
   \              0x72 0x20    
   \              0x72 0x65    
   \              0x70 0x6F    
   \              0x72 0x74    
   \              0x65 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_336:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: TIMEOUT: Timeout Error reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x54    
   \              0x49 0x4D    
   \              0x45 0x4F    
   \              0x55 0x54    
   \              0x3A 0x20    
   \              0x54 0x69    
   \              0x6D 0x65    
   \              0x6F 0x75    
   \              0x74 0x20    
   \              0x45 0x72    
   \              0x72 0x6F    
   \              0x72 0x20    
   \              0x72 0x65    
   \              0x70 0x6F    
   \              0x72 0x74    
   \              0x65 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   0000002E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_337:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: Unknown Error reported.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x55    
   \              0x6E 0x6B    
   \              0x6E 0x6F    
   \              0x77 0x6E    
   \              0x20 0x45    
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x20 0x72    
   \              0x65 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_338:
   \   00000000   0x49 0x32          DC8 "I2C BUSY: I2C reported BUSY error.\015\012"
   \              0x43 0x20    
   \              0x42 0x55    
   \              0x53 0x59    
   \              0x3A 0x20    
   \              0x49 0x32    
   \              0x43 0x20    
   \              0x72 0x65    
   \              0x70 0x6F    
   \              0x72 0x74    
   \              0x65 0x64    
   \              0x20 0x42    
   \              0x55 0x53    
   \              0x59 0x20    
   \              0x65 0x72    
   \              0x72 0x6F    
   \              0x72 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_339:
   \   00000000   0x49 0x32          DC8 "I2C TIMEOUT: I2C reported TIMEOUT.\015\012"
   \              0x43 0x20    
   \              0x54 0x49    
   \              0x4D 0x45    
   \              0x4F 0x55    
   \              0x54 0x3A    
   \              0x20 0x49    
   \              0x32 0x43    
   \              0x20 0x72    
   \              0x65 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x20    
   \              0x54 0x49    
   \              0x4D 0x45    
   \              0x4F 0x55    
   \              0x54 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_340:
   \   00000000   0x49 0x32          DC8 "I2C ERROR: I2C reported unnown error.\015\012"
   \              0x43 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x49    
   \              0x32 0x43    
   \              0x20 0x72    
   \              0x65 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x20    
   \              0x75 0x6E    
   \              0x6E 0x6F    
   \              0x77 0x6E    
   \              0x20 0x65    
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_341:
   \   00000000   0x0D 0x0A          DC8 "\015\012\015\012> "
   \              0x0D 0x0A    
   \              0x3E 0x20    
   \              0x00         
   \   00000007   0x00               DC8 0
   4406          
   4407          /*void sleep(void) {
   4408          //    TimMasterHandle.Instance = TIM5;
   4409           
   4410              // Disable HAL tick interrupt
   4411          //    __HAL_TIM_DISABLE_IT(&TimMasterHandle, TIM_IT_CC2);
   4412           
   4413              // Request to enter SLEEP mode
   4414              HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
   4415           
   4416              // Enable HAL tick interrupt
   4417          //    __HAL_TIM_ENABLE_IT(&TimMasterHandle, TIM_IT_CC2);
   4418          }*/
   4419           
   4420          /*void deepsleep(void) {
   4421              // Request to enter STOP mode with regulator in low power mode
   4422              HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
   4423           
   4424              // After wake-up from STOP reconfigure the PLL
   4425              //SetSysClock();
   4426              SystemClock_Config();
   4427          }*/
   4428          
   4429          /************************ (C) COPYRIGHT WeatherCloud *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
    1152   RoadBrd_ParseString
      1152   -> BGM111_Transmit
      1152   -> Get_DriverStates
      1152   -> Get_DriverStatus
      1152   -> HAL_Delay
      1152   -> HAL_NVIC_SystemReset
      1152   -> MX_I2C1_Reset
      1152   -> RdBrd_CAL_GetStr
      1152   -> RoadBrdSnd_ClrBffrs
      1152   -> RoadBrdSnd_DumpBin0
      1152   -> RoadBrdSnd_DumpBin16
      1152   -> RoadBrdSnd_DumpBin32
      1152   -> RoadBrdSnd_DumpBin48
      1152   -> RoadBrdSnd_ProcessSound
      1152   -> RoadBrdSnd_getSaveBffr
      1152   -> RoadBrd_Baro_ReadPressure
      1152   -> RoadBrd_Baro_ReadPressure_Scaled
      1152   -> RoadBrd_Baro_ReadTemp
      1152   -> RoadBrd_CAL_GetOffset
      1152   -> RoadBrd_CAL_GetSlope
      1152   -> RoadBrd_CAL_GetTimeString
      1152   -> RoadBrd_CAL_InitializeFrmFlash
      1152   -> RoadBrd_CAL_Set_CalItem
      1152   -> RoadBrd_CAL_Set_TimeString
      1152   -> RoadBrd_CoolEye_ReadValues
      1152   -> RoadBrd_CoolEye_ReadValues_Scaled
      1152   -> RoadBrd_Get_BootDelay
      1152   -> RoadBrd_Get_RdSndTickCnt
      1152   -> RoadBrd_Get_SnsrTickCnt
      1152   -> RoadBrd_Get_TackLimit
      1152   -> RoadBrd_GridEyeInit
      1152   -> RoadBrd_GridEyeReset
      1152   -> RoadBrd_GridEye_ReadValues
      1152   -> RoadBrd_GridEye_ReadValues_Scaled
      1152   -> RoadBrd_HumidityInit
      1152   -> RoadBrd_Humidity_ReadHumidity
      1152   -> RoadBrd_Humidity_ReadHumidity_Scaled
      1152   -> RoadBrd_Humidity_ReadTemperature
      1152   -> RoadBrd_I2C_GetError
      1152   -> RoadBrd_I2C_Master_Receive
      1152   -> RoadBrd_I2C_Master_Transmit
      1152   -> RoadBrd_Init_Barometer
      1152   -> RoadBrd_Init_VMonitor
      1152   -> RoadBrd_RGBFullInit
      1152   -> RoadBrd_RGBInit
      1152   -> RoadBrd_RGBReadID
      1152   -> RoadBrd_RGBReadStatus
      1152   -> RoadBrd_RGBReadValues
      1152   -> RoadBrd_RGBReset
      1152   -> RoadBrd_ReadTemp
      1152   -> RoadBrd_ReadTemp_Scaled
      1152   -> RoadBrd_Set_BootDelay
      1152   -> RoadBrd_Set_RdSndTickCnt
      1152   -> RoadBrd_Set_SnsrTickCnt
      1152   -> RoadBrd_Set_TackLimit
      1152   -> RoadBrd_Set_UnitsFlag
      1152   -> RoadBrd_TestandRead_Barometer
      1152   -> RoadBrd_UART_Transmit
      1152   -> RoadBrd_VMonitor_RdCurrent
      1152   -> RoadBrd_VMonitor_RdCurrent_Scaled
      1152   -> RoadBrd_VMonitor_RdPower
      1152   -> RoadBrd_VMonitor_RdPower_Scaled
      1152   -> RoadBrd_VMonitor_RdShntVltg
      1152   -> RoadBrd_VMonitor_RdShntVltg_Scaled
      1152   -> RoadBrd_VMonitor_RdVoltage
      1152   -> RoadBrd_VMonitor_RdVoltage_Scaled
      1152   -> RoadBrd_WWDG_InitializeFrmFlash
      1152   -> RoadBrd_WaitForState
      1152   -> RoadBrd_gpio_Off
      1152   -> RoadBrd_gpio_On
      1152   -> __aeabi_f2d
      1152   -> __aeabi_fdiv
      1152   -> __aeabi_ui2f
      1152   -> atoi
      1152   -> hatoi
      1152   -> isHexNum
      1152   -> isdigit
      1152   -> sprintf
      1152   -> sscanf
      1152   -> strcat
      1152   -> strcpy
      1152   -> strlen
      1152   -> strncmp
       0   RoadBrd_ParserInit
       8   RoadBrd_ParserTsk
         8   -> strcpy
         8   -> strlen
       8   RoadBrd_ProcessParserTsk
         8   -> RoadBrd_ParseString
       0   Tst_Bypass
      24   hatoi
        24   -> strlen
      24   isHexNum
        24   -> strlen


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_10
       4  ??DataTable4_11
       4  ??DataTable4_12
       4  ??DataTable4_13
       4  ??DataTable4_14
       4  ??DataTable4_15
       4  ??DataTable4_16
       4  ??DataTable4_17
       4  ??DataTable4_18
       4  ??DataTable4_19
       4  ??DataTable4_2
       4  ??DataTable4_20
       4  ??DataTable4_21
       4  ??DataTable4_22
       4  ??DataTable4_23
       4  ??DataTable4_24
       4  ??DataTable4_25
       4  ??DataTable4_26
       4  ??DataTable4_27
       4  ??DataTable4_28
       4  ??DataTable4_29
       4  ??DataTable4_3
       4  ??DataTable4_30
       4  ??DataTable4_31
       4  ??DataTable4_32
       4  ??DataTable4_33
       4  ??DataTable4_34
       4  ??DataTable4_35
       4  ??DataTable4_36
       4  ??DataTable4_37
       4  ??DataTable4_38
       4  ??DataTable4_39
       4  ??DataTable4_4
       4  ??DataTable4_40
       4  ??DataTable4_41
       4  ??DataTable4_42
       4  ??DataTable4_43
       4  ??DataTable4_44
       4  ??DataTable4_45
       4  ??DataTable4_46
       4  ??DataTable4_47
       4  ??DataTable4_48
       4  ??DataTable4_49
       4  ??DataTable4_5
       4  ??DataTable4_50
       4  ??DataTable4_51
       4  ??DataTable4_52
       4  ??DataTable4_53
       4  ??DataTable4_54
       4  ??DataTable4_55
       4  ??DataTable4_56
       4  ??DataTable4_57
       4  ??DataTable4_58
       4  ??DataTable4_59
       4  ??DataTable4_6
       4  ??DataTable4_60
       4  ??DataTable4_61
       4  ??DataTable4_62
       4  ??DataTable4_63
       4  ??DataTable4_64
       4  ??DataTable4_65
       4  ??DataTable4_66
       4  ??DataTable4_67
       4  ??DataTable4_68
       4  ??DataTable4_69
       4  ??DataTable4_7
       4  ??DataTable4_70
       4  ??DataTable4_71
       4  ??DataTable4_72
       4  ??DataTable4_73
       4  ??DataTable4_74
       4  ??DataTable4_75
       4  ??DataTable4_8
       4  ??DataTable4_9
      56  ?_0
      36  ?_1
      40  ?_10
      52  ?_100
      24  ?_101
      20  ?_102
       4  ?_103
      40  ?_104
      44  ?_105
      52  ?_106
      60  ?_107
      24  ?_108
      40  ?_109
      32  ?_11
      20  ?_110
      12  ?_111
      40  ?_112
      44  ?_113
      52  ?_114
      64  ?_115
      40  ?_116
      12  ?_117
      40  ?_118
      24  ?_119
      32  ?_12
      40  ?_120
      24  ?_121
      44  ?_122
      36  ?_123
      40  ?_124
      36  ?_125
      32  ?_126
      40  ?_127
      36  ?_128
      36  ?_129
      40  ?_13
      12  ?_130
      24  ?_131
       8  ?_132
      36  ?_133
      28  ?_134
      40  ?_135
      28  ?_136
       8  ?_137
      32  ?_138
      24  ?_139
      32  ?_14
      36  ?_140
       8  ?_141
      32  ?_142
      20  ?_143
      36  ?_144
       8  ?_145
      32  ?_146
      24  ?_147
      36  ?_148
       8  ?_149
      32  ?_15
      32  ?_150
      20  ?_151
      36  ?_152
       8  ?_153
      32  ?_154
      20  ?_155
      36  ?_156
       8  ?_157
      36  ?_158
      24  ?_159
      40  ?_16
      40  ?_160
       8  ?_161
      36  ?_162
      24  ?_163
      40  ?_164
       8  ?_165
      36  ?_166
      24  ?_167
      40  ?_168
       8  ?_169
      36  ?_17
      36  ?_170
      24  ?_171
      40  ?_172
       8  ?_173
      32  ?_174
      24  ?_175
      36  ?_176
       8  ?_177
      36  ?_178
      24  ?_179
       1  ?_18
      40  ?_180
       8  ?_181
      36  ?_182
      24  ?_183
      40  ?_184
       8  ?_185
      32  ?_186
      24  ?_187
      36  ?_188
       8  ?_189
       8  ?_19
      36  ?_190
      24  ?_191
      40  ?_192
       8  ?_193
      36  ?_194
      24  ?_195
      40  ?_196
       8  ?_197
      36  ?_198
      24  ?_199
      68  ?_2
      12  ?_20
      40  ?_200
       8  ?_201
      36  ?_202
      24  ?_203
      40  ?_204
       8  ?_205
      36  ?_206
      24  ?_207
      40  ?_208
       8  ?_209
      20  ?_21
      36  ?_210
      24  ?_211
      40  ?_212
       8  ?_213
      36  ?_214
      24  ?_215
      40  ?_216
       8  ?_217
      36  ?_218
      24  ?_219
      28  ?_22
      40  ?_220
      36  ?_221
      32  ?_222
      48  ?_223
      16  ?_224
      32  ?_225
      36  ?_226
      24  ?_227
      24  ?_228
      24  ?_229
      36  ?_23
      32  ?_230
      24  ?_231
      24  ?_232
      24  ?_233
      32  ?_234
      24  ?_235
      24  ?_236
      24  ?_237
      24  ?_238
      24  ?_239
      32  ?_24
      24  ?_240
      24  ?_241
      24  ?_242
      24  ?_243
      24  ?_244
      24  ?_245
      24  ?_246
      24  ?_247
      32  ?_248
      24  ?_249
      40  ?_25
      24  ?_250
      24  ?_251
      24  ?_252
      24  ?_253
      32  ?_254
      24  ?_255
      24  ?_256
      24  ?_257
      24  ?_258
      24  ?_259
      40  ?_26
      24  ?_260
      24  ?_261
      24  ?_262
      24  ?_263
      24  ?_264
      24  ?_265
      24  ?_266
      24  ?_267
      24  ?_268
      24  ?_269
      40  ?_27
      24  ?_270
      20  ?_271
      32  ?_272
      40  ?_273
      36  ?_274
      36  ?_275
      32  ?_276
      28  ?_277
      32  ?_278
      28  ?_279
      56  ?_28
      32  ?_280
      24  ?_281
      32  ?_282
      36  ?_283
      32  ?_284
      40  ?_285
      36  ?_286
      44  ?_287
      36  ?_288
      36  ?_289
      20  ?_29
      32  ?_290
      36  ?_291
      44  ?_292
      36  ?_293
      36  ?_294
      32  ?_295
      36  ?_296
      44  ?_297
      36  ?_298
      36  ?_299
      40  ?_3
      16  ?_30
      32  ?_300
      36  ?_301
      44  ?_302
      36  ?_303
      36  ?_304
      32  ?_305
      36  ?_306
      32  ?_307
      40  ?_308
      32  ?_309
      12  ?_31
      44  ?_310
      28  ?_311
      24  ?_312
      28  ?_313
      32  ?_314
      32  ?_315
      36  ?_316
      32  ?_317
      40  ?_318
      28  ?_319
      40  ?_32
      40  ?_320
      28  ?_321
      40  ?_322
      40  ?_323
      28  ?_324
      28  ?_325
      24  ?_326
      52  ?_327
      28  ?_328
      36  ?_329
      40  ?_33
      36  ?_330
      40  ?_331
      48  ?_332
      48  ?_333
      48  ?_334
      40  ?_335
      48  ?_336
      40  ?_337
      40  ?_338
      40  ?_339
      20  ?_34
      40  ?_340
       8  ?_341
      32  ?_35
      16  ?_36
      16  ?_37
      40  ?_38
      40  ?_39
      32  ?_4
      32  ?_40
      36  ?_41
      48  ?_42
      48  ?_43
      24  ?_44
      20  ?_45
      56  ?_46
      44  ?_47
      40  ?_48
      24  ?_49
      32  ?_5
      28  ?_50
      44  ?_51
      28  ?_52
      36  ?_53
      20  ?_54
      24  ?_55
      32  ?_56
      20  ?_57
      20  ?_58
      24  ?_59
       4  ?_6
      24  ?_60
      36  ?_61
      24  ?_62
      44  ?_63
      16  ?_64
      48  ?_65
      24  ?_66
      20  ?_67
      40  ?_68
      28  ?_69
      40  ?_7
      56  ?_70
      16  ?_71
      12  ?_72
      12  ?_73
      12  ?_74
      72  ?_75
      68  ?_76
      72  ?_77
      64  ?_78
      60  ?_79
      32  ?_8
      60  ?_80
      60  ?_81
      56  ?_82
      64  ?_83
      64  ?_84
      64  ?_85
      64  ?_86
      64  ?_87
      68  ?_88
      32  ?_89
      32  ?_9
       8  ?_90
      52  ?_91
      36  ?_92
      32  ?_93
      32  ?_94
      44  ?_95
      32  ?_96
      40  ?_97
      40  ?_98
      44  ?_99
       1  Bypass
      44  ParseString
   18472  RoadBrd_ParseString
      12  RoadBrd_ParserInit
      66  RoadBrd_ParserTsk
      40  RoadBrd_ProcessParserTsk
       6  Tst_Bypass
      88  hatoi
      74  isHexNum

 
     45 bytes in section .bss
 10 849 bytes in section .rodata
 19 102 bytes in section .text
 
 19 102 bytes of CODE  memory
 10 849 bytes of CONST memory
     45 bytes of DATA  memory

Errors: none
Warnings: none
